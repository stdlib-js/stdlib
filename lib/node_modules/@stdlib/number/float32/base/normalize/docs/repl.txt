
{{alias}}( x )
    Returns a normal number `y` and exponent `exp` satisfying `x = y * 2^exp` as
    an array.

    The first element of the returned array corresponds to `y` and the second to
    `exp`.

    While the function accepts higher precision floating-point numbers, beware
    that providing such numbers can be a source of subtle bugs as the relation
    `x = y * 2^exp` may not hold.

    Parameters
    ----------
    x: float
        Single-precision floating-point number.

    Returns
    -------
    out: Array<number>
        An array containing `y` and `exp`.

    Examples
    --------
    > var out = {{alias}}( {{alias:@stdlib/number/float64/base/to-float32}}( 1.401e-45 ) )
    [ 1.1754943508222875e-38, -23 ]
    > var y = out[ 0 ];
    > var exp = out[ 1 ];
    > var bool = ( y*{{alias:@stdlib/math/base/special/pow}}(2,exp) === {{alias:@stdlib/number/float64/base/to-float32}}(1.401e-45) )
    true

    // Special cases:
    > out = {{alias}}( {{alias:@stdlib/constants/float32/pinf}} )
    [ Infinity, 0 ]
    > out = {{alias}}( {{alias:@stdlib/constants/float32/ninf}} )
    [ -Infinity, 0 ]
    > out = {{alias}}( NaN )
    [ NaN, 0 ]


{{alias}}.assign( x, out, stride, offset )
    Returns a normal number `y` and exponent `exp` satisfying `x = y * 2^exp` and
    assigns results to a provided output array.

    The first element of the returned array corresponds to `y` and the second to
    `exp`.

    While the function accepts higher precision floating-point numbers, beware
    that providing such numbers can be a source of subtle bugs as the relation
    `x = y * 2^exp` may not hold.

    Parameters
    ----------
    x: float
        Single-precision floating-point number.

    out: Array|TypedArray|Object
        Output array.

    stride: integer
        Output array stride.

    offset: integer
        Output array index offset.

    Returns
    -------
    out: Array|TypedArray|Object
        An array containing `y` and `exp`.

    Examples
    --------
    > out = new {{alias:@stdlib/array/float32}}( 2 );
    > var v = {{alias}}.assign( {{alias:@stdlib/number/float64/base/to-float32}}( 1.401e-45 ), out, 1, 0 )
    <Float32Array>[ 1.1754943508222875e-38, -23.0 ]
    > bool = ( v === out )
    true

    See Also
    --------
