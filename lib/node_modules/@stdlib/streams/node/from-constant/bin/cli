#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/cli/ctor' );
var stdout = require( '@stdlib/streams/node/stdout' );
var constantStream = require( './../lib' );


// FUNCTIONS //

/**
* Callback invoked once a source stream ends.
*
* @private
*/
function onEnd() {
	// Append a trailing newline in accordance with standard POSIX behavior:
	console.log( '' ); // eslint-disable-line no-console
}


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var stream;
	var flags;
	var opts;
	var args;
	var cli;
	var err;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line options:
	flags = cli.flags();
	if ( flags.help || flags.version ) {
		return;
	}

	// Get any provided command-line arguments:
	args = cli.args();
	if ( args.length < 1 ) {
		err = new Error( 'insufficient arguments. Must provide a value to stream.' );
		return onError( err );
	}

	opts = {};
	if ( flags.iter ) {
		opts.iter = parseInt( flags.iter, 10 );
	}
	if ( flags.sep ) {
		opts.sep = flags.sep;
	}

	// Create a source stream and pipe to `stdout`:
	stream = constantStream( args[ 0 ].toString(), opts );
	stream.on( 'end', onEnd );

	stream.pipe( stdout );

	/**
	* Callback invoked upon encountering an error.
	*
	* @private
	* @param {Error} error - error
	* @param {integer} [code] - exit code
	*/
	function onError( error, code ) {
		cli.error( error, code || 1 );
	}
}

main();
