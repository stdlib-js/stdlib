{"abs":"var y = abs( -1.0 )\nvar x = new Float64Array( [ -1.0, -2.0 ] );\ny = abs( x )\nx = [ -1.0, -2.0 ];\ny = abs( x )\nx = array( [ [ -1.0, -2.0 ], [ -3.0, -4.0 ] ] );\ny = abs( x )\ny.get( 0, 1 )\n","abs.assign":"var x = new Float64Array( [ -1.0, -2.0 ] );\nvar y = new Float64Array( x.length );\nvar out = abs.assign( x, y )\nvar bool = ( out === y )\nx = [ -1.0, -2.0 ];\ny = [ 0.0, 0.0 ];\nout = abs.assign( x, y )\nbool = ( out === y )\nx = array( [ [ -1.0, -2.0 ], [ -3.0, -4.0 ] ] );\ny = array( [ [ 0.0, 0.0 ], [ 0.0, 0.0 ] ] );\nout = abs.assign( x, y )\nout.get( 0, 1 )\nbool = ( out === y )\n","acartesianPower":"var x = [ 1, 2 ];\nvar out = acartesianPower( x, 2 )\n","acartesianProduct":"var x1 = [ 1, 2 ];\nvar x2 = [ 3, 4 ];\nvar out = acartesianProduct( x1, x2 )\n","acartesianSquare":"var out = acartesianSquare( [ 1, 2 ] )\n","acronym":"var out = acronym( 'the quick brown fox' )\nout = acronym( 'Hard-boiled eggs' )\n","aempty":"var arr = aempty( 2 )\narr = aempty( 2, 'float32' )\n","aemptyLike":"var x = new Float64Array( 2 );\nvar arr = aemptyLike( x )\narr = aemptyLike( x, 'float32' )\n","AFINN_96":"var list = AFINN_96()\n","AFINN_111":"var list = AFINN_111()\n","afull":"var arr = afull( 2, 1.0 )\narr = afull( 2, 1.0, 'float32' )\n","afullLike":"var x = new Float64Array( 2 );\nvar y = afullLike( x, 1.0 )\ny = afullLike( x, 1.0, 'float32' )\n","alias2pkg":"var v = alias2pkg( 'base.sin' )\n","alias2related":"var v = alias2related( 'base.sin' )\n","alias2standalone":"var v = alias2standalone( 'base.sin' )\n","aliases":"var o = aliases()\no = aliases( '@stdlib/math/base/special' )\n","allocUnsafe":"var buf = allocUnsafe( 100 )\n","amskfilter":"var x = [ 1, 2, 3, 4 ];\nvar y = amskfilter( x, [ 0, 1, 0, 1 ] )\n","amskput":"var x = [ 1, 2, 3, 4 ];\nvar out = amskput( x, [ 1, 0, 1, 0 ], [ 20, 40 ] )\nvar bool = ( out === x )\n","amskreject":"var x = [ 1, 2, 3, 4 ];\nvar y = amskreject( x, [ 0, 1, 0, 1 ] )\n","anans":"var arr = anans( 2 )\narr = anans( 2, 'float32' )\n","anansLike":"var x = new Float64Array( 2 );\nvar y = anansLike( x )\ny = anansLike( x, 'float32' )\n","anova1":"var x = [1, 3, 5, 2, 4, 6, 8, 7, 10, 11, 12, 15];\nvar f = [\n 'control', 'treatA', 'treatB', 'treatC', 'control',\n 'treatA', 'treatB', 'treatC', 'control', 'treatA', 'treatB', 'treatC'\n ];\nvar out = anova1( x, f )\n","ANSCOMBES_QUARTET":"var d = ANSCOMBES_QUARTET()\n","any":"var arr = [ 0, 0, 0, 0, 1 ];\nvar bool = any( arr )\n","anyBy":"function negative( v ) { return ( v < 0 ); };\nvar arr = [ 1, 2, 3, 4, -1 ];\nvar bool = anyBy( arr, negative )\n","anyByAsync":"function predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, false );\n }\n };\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar arr = [ 3000, 2500, 1000 ];\nanyByAsync( arr, predicate, done )\nfunction predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, false );\n }\n };\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar opts = { 'limit': 2 };\nvar arr = [ 3000, 2500, 1000 ];\nanyByAsync( arr, opts, predicate, done )\nfunction predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, false );\n }\n };\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar opts = { 'series': true };\nvar arr = [ 3000, 2500, 1000 ];\nanyByAsync( arr, opts, predicate, done )\n","anyByAsync.factory":"function predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, false );\n }\n };\nvar opts = { 'series': true };\nvar f = anyByAsync.factory( opts, predicate );\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar arr = [ 3000, 2500, 1000 ];\nf( arr, done )\narr = [ 2000, 1500, 1000 ];\nf( arr, done )\n","anyByRight":"function negative( v ) { return ( v < 0 ); };\nvar arr = [ -1, 1, 2, 3, 4 ];\nvar bool = anyByRight( arr, negative )\n","anyByRightAsync":"function predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, false );\n }\n };\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar arr = [ 1000, 2500, 3000 ];\nanyByRightAsync( arr, predicate, done )\nfunction predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, false );\n }\n };\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar opts = { 'limit': 2 };\nvar arr = [ 1000, 2500, 3000 ];\nanyByRightAsync( arr, opts, predicate, done )\nfunction predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, false );\n }\n };\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar opts = { 'series': true };\nvar arr = [ 1000, 2500, 3000 ];\nanyByRightAsync( arr, opts, predicate, done )\n","anyByRightAsync.factory":"function predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, false );\n }\n };\nvar opts = { 'series': true };\nvar f = anyByRightAsync.factory( opts, predicate );\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar arr = [ 1000, 2500, 3000 ];\nf( arr, done )\narr = [ 1000, 1500, 2000 ];\nf( arr, done )\n","anyInBy":"function isNegative(value) { return value < 0 }\nvar obj = { a: 1, b: -2, c: 3, d: 4 }\nvar result = anyInBy(obj, isNegative)\n","anyOwnBy":"function positive( v ) { return ( v > 0 ); };\nvar obj = { 'a': -1, 'b': 2, 'c': -3 };\nvar bool = anyOwnBy( obj, positive )\n","aones":"var arr = aones( 2 )\narr = aones( 2, 'float32' )\n","aonesLike":"var x = new Float64Array( 2 );\nvar y = aonesLike( x )\ny = aonesLike( x, 'float32' )\n","aoneTo":"var arr = aoneTo( 2 )\narr = aoneTo( 2, 'float32' )\n","aoneToLike":"var arr = aoneToLike( [ 0, 0 ] )\narr = aoneToLike( [ 0, 0 ], 'float32' )\n","APERY":"APERY\n","aplace":"var x = [ 1, 2, 3, 4 ];\nvar out = aplace( x, [ 0, 1, 0, 1 ], [ 20, 40 ] )\nvar bool = ( out === x )\n","append":"var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\narr = append( arr, [ 6.0, 7.0 ] )\narr = new Float64Array( [ 1.0, 2.0 ] );\narr = append( arr, [ 3.0, 4.0 ] )\narr = { 'length': 0 };\narr = append( arr, [ 1.0, 2.0 ] )\n","aput":"var x = [ 1, 2, 3, 4 ];\nvar out = aput( x, [ 1, 3 ], [ 20, 40 ] )\nvar bool = ( out === x )\n","ARCH":"ARCH\n","argumentFunction":"var argn = argumentFunction( 1 );\nvar v = argn( 3.14, -3.14, 0.0 )\nv = argn( -1.0, -0.0, 1.0 )\nv = argn( 'beep', 'boop', 'bop' )\nv = argn( 'beep' )\n","ARGV":"var execPath = ARGV[ 0 ]\n","array":"var arr = array( [ [ 1.0, 2.0 ], [ 3.0, 4.0 ] ] )\nvar v = arr.get( 1, 1 )\nv = arr.iget( 3 )\narr.set( 1, 1, 40.0 );\narr.get( 1, 1 )\narr.iset( 3, 99.0 );\narr.get( 1, 1 )\n","array2buffer":"var buf = array2buffer( [ 1, 2, 3, 4 ] )\n","array2fancy":"var y = array2fancy( [ 1, 2, 3, 4 ] );\ny[ '1::2' ]\ny[ '::-1' ]\n","array2fancy.factory":"var f = array2fancy.factory();\nvar y = f( [ 1, 2, 3, 4 ] );\ny[ '1::2' ]\ny[ '::-1' ]\n","array2fancy.idx":"var idx = array2fancy.idx( [ 1, 2, 3, 4 ] );\n","array2iterator":"var it = array2iterator( [ 1, 2, 3, 4 ] );\nvar v = it.next().value\nv = it.next().value\n","array2iteratorRight":"var it = array2iteratorRight( [ 1, 2, 3, 4 ] );\nvar v = it.next().value\nv = it.next().value\n","ArrayBuffer":"var buf = new ArrayBuffer( 5 )\n","ArrayBuffer.length":"ArrayBuffer.length\n","ArrayBuffer.isView":"var arr = new Float64Array( 10 );\nArrayBuffer.isView( arr )\n","ArrayBuffer.prototype.byteLength":"var buf = new ArrayBuffer( 5 );\nbuf.byteLength\n","ArrayBuffer.prototype.slice":"var b1 = new ArrayBuffer( 10 );\nvar b2 = b1.slice( 2, 6 );\nvar bool = ( b1 === b2 )\nb2.byteLength\n","arraybuffer2buffer":"var ab = new ArrayBuffer( 10 )\nvar buf = arraybuffer2buffer( ab )\nvar len = buf.length\nbuf = arraybuffer2buffer( ab, 2, 6 )\nlen = buf.length\n","arrayCtors":"var ctor = arrayCtors( 'float64' )\nctor = arrayCtors( 'float' )\n","arrayDataType":"var arr = new Float64Array( 10 );\nvar dt = arrayDataType( arr )\ndt = arrayDataType( 'beep' )\n","arrayDataTypes":"var out = arrayDataTypes()\nout = arrayDataTypes( 'floating_point' )\nout = arrayDataTypes( 'floating_point_and_generic' )\n","ArrayIndex":"var idx = new ArrayIndex( [ 1, 2, 3, 4 ] );\n","ArrayIndex.free":"var idx = new ArrayIndex( [ 1, 2, 3, 4 ] );\n// ...\nArrayIndex.free( idx.id )\n","ArrayIndex.get":"var idx = new ArrayIndex( [ 1, 2, 3, 4 ] );\nArrayIndex.get( idx.id )\n","ArrayIndex.prototype.data":"var idx = new ArrayIndex( [ 1, 2, 3, 4 ] );\nidx.data\n","ArrayIndex.prototype.dtype":"var idx = new ArrayIndex( [ 1, 2, 3, 4 ] );\nidx.dtype\n","ArrayIndex.prototype.id":"var idx = new ArrayIndex( [ 1, 2, 3, 4 ] );\nidx.id\n","ArrayIndex.prototype.isCached":"var idx = new ArrayIndex( [ 1, 2, 3, 4 ] );\nidx.isCached\n","ArrayIndex.prototype.type":"var idx = new ArrayIndex( [ 1, 2, 3, 4 ] );\nidx.type\n","ArrayIndex.prototype.toString":"var idx = new ArrayIndex( [ 1, 2, 3, 4 ] );\nidx.toString()\n","ArrayIndex.prototype.toJSON":"var idx = new ArrayIndex( [ 1, 2, 3, 4 ] );\nidx.toJSON()\n","arrayMinDataType":"var dt = arrayMinDataType( 3.141592653589793 )\ndt = arrayMinDataType( 3 )\ndt = arrayMinDataType( -3 )\ndt = arrayMinDataType( '-3' )\n","arrayMostlySafeCasts":"var out = arrayMostlySafeCasts( 'float32' )\n","arrayNextDataType":"var out = arrayNextDataType( 'float32' )\n","arrayPromotionRules":"var out = arrayPromotionRules( 'float32', 'int32' )\n","arraySafeCasts":"var out = arraySafeCasts( 'float32' )\n","arraySameKindCasts":"var out = arraySameKindCasts( 'float32' )\n","arrayShape":"var out = arrayShape( [ [ 1, 2, 3 ], [ 4, 5, 6 ] ] )\n","arrayStream":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar s = arrayStream( [ 1, 2, 3 ] );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","arrayStream.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = arrayStream.factory( opts );\n","arrayStream.objectMode":"function fcn( v ) { console.log( v ); };\nvar s = arrayStream.objectMode( [ 1, 2, 3 ] );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","arrayview2iterator":"var it = arrayview2iterator( [ 1, 2, 3, 4 ], 1, 3 );\nvar v = it.next().value\nv = it.next().value\n","arrayview2iteratorRight":"var it = arrayview2iteratorRight( [ 1, 2, 3, 4 ], 1, 3 );\nvar v = it.next().value\nv = it.next().value\n","aslice":"var out = aslice( [ 1, 2, 3, 4 ] )\nout = aslice( [ 1, 2, 3, 4 ], 1 )\nout = aslice( [ 1, 2, 3, 4 ], 1, 3 )\n","AsyncIteratorSymbol":"var s = AsyncIteratorSymbol\n","atake":"var x = [ 1, 2, 3, 4 ];\nvar y = atake( x, [ 1, 3 ] )\n","azeros":"var arr = azeros( 2 )\narr = azeros( 2, 'float32' )\n","azerosLike":"var x = new Float64Array( 2 );\nvar y = azerosLike( x )\ny = azerosLike( x, 'float32' )\n","azeroTo":"var arr = azeroTo( 2 )\narr = azeroTo( 2, 'float32' )\n","azeroToLike":"var arr = azeroToLike( [ 0, 0 ] )\narr = azeroToLike( [ 0, 0 ], 'float32' )\n","bartlettTest":"var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\nvar y = [ 3.8, 2.7, 4.0, 2.4 ];\nvar z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\nvar out = bartlettTest( x, y, z )\nvar arr = [ 2.9, 3.0, 2.5, 2.6, 3.2,\n 3.8, 2.7, 4.0, 2.4,\n 2.8, 3.4, 3.7, 2.2, 2.0\n ];\nvar groups = [\n 'a', 'a', 'a', 'a', 'a',\n 'b', 'b', 'b', 'b',\n 'c', 'c', 'c', 'c', 'c'\n ];\nout = bartlettTest( arr, { 'groups': groups } )\n","base.abs":"var y = base.abs( -1.0 )\ny = base.abs( 2.0 )\ny = base.abs( 0.0 )\ny = base.abs( -0.0 )\ny = base.abs( NaN )\n","base.abs2":"var y = base.abs2( -1.0 )\ny = base.abs2( 2.0 )\ny = base.abs2( 0.0 )\ny = base.abs2( -0.0 )\ny = base.abs2( NaN )\n","base.abs2f":"var y = base.abs2f( -1.0 )\ny = base.abs2f( 2.0 )\ny = base.abs2f( 0.0 )\ny = base.abs2f( -0.0 )\ny = base.abs2f( NaN )\n","base.absdiff":"var d = base.absdiff( 2.0, 5.0 )\nd = base.absdiff( -1.0, 3.14 )\nd = base.absdiff( 10.1, -2.05 )\nd = base.absdiff( -0.0, 0.0 )\nd = base.absdiff( NaN, 5.0 )\nd = base.absdiff( PINF, NINF )\nd = base.absdiff( PINF, PINF )\n","base.absf":"var y = base.absf( -1.0 )\ny = base.absf( 2.0 )\ny = base.absf( 0.0 )\ny = base.absf( -0.0 )\ny = base.absf( NaN )\n","base.acartesianPower":"var x = [ 1, 2 ];\nvar out = base.acartesianPower( x, 2 )\n","base.acartesianProduct":"var x1 = [ 1, 2 ];\nvar x2 = [ 3, 4 ];\nvar out = base.acartesianProduct( x1, x2 )\n","base.acartesianSquare":"var x = [ 1, 2 ];\nvar out = base.acartesianSquare( x )\n","base.acos":"var y = base.acos( 1.0 )\ny = base.acos( 0.707 )\ny = base.acos( NaN )\n","base.acosd":"var y = base.acosd( 0.0 )\ny = base.acosd( PI/6.0 )\ny = base.acosd( NaN )\n","base.acosf":"var y = base.acosf( 1.0 )\ny = base.acosf( 0.707 )\ny = base.acosf( NaN )\n","base.acosh":"var y = base.acosh( 1.0 )\ny = base.acosh( 2.0 )\ny = base.acosh( NaN )\n","base.acot":"var y = base.acot( 2.0 )\ny = base.acot( 0.0 )\ny = base.acot( 0.5 )\ny = base.acot( 1.0 )\ny = base.acot( NaN )\n","base.acotd":"var y = base.acotd( 0.0 )\ny = base.acotd( PI/6.0 )\ny = base.acotd( NaN )\n","base.acotf":"var y = base.acotf( 2.0 )\ny = base.acotf( 0.0 )\ny = base.acotf( 0.5 )\ny = base.acotf( 1.0 )\ny = base.acotf( NaN )\n","base.acoth":"var y = base.acoth( 2.0 )\ny = base.acoth( 0.0 )\ny = base.acoth( 0.5 )\ny = base.acoth( 1.0 )\ny = base.acoth( NaN )\n","base.acovercos":"var y = base.acovercos( -1.5 )\ny = base.acovercos( -0.0 )\n","base.acoversin":"var y = base.acoversin( 1.5 )\ny = base.acoversin( 0.0 )\n","base.acsc":"var y = base.acsc( 1.0 )\ny = base.acsc( PI )\ny = base.acsc( -PI )\ny = base.acsc( NaN )\n","base.acscd":"var y = base.acscd( 0.0 )\ny = base.acscd( PI/6.0 )\ny = base.acscd( 1 )\ny = base.acscd( NaN )\n","base.acscdf":"var y = base.acscdf( 0.0 )\ny = base.acscdf( 3.1415927410125732 / 6.0 )\ny = base.acscdf( 1.0 )\ny = base.acscdf( NaN )\n","base.acscf":"var y = base.acscf( 1.0 )\ny = base.acscf( 3.141592653589793 )\ny = base.acscf( -3.141592653589793 )\ny = base.acscf( NaN )\n","base.acsch":"var y = base.acsch( 0.0 )\ny = base.acsch( -1.0 )\ny = base.acsch( NaN )\n","base.add":"var v = base.add( -1.0, 5.0 )\nv = base.add( 2.0, 5.0 )\nv = base.add( 0.0, 5.0 )\nv = base.add( -0.0, 0.0 )\nv = base.add( NaN, NaN )\n","base.add3":"var v = base.add3( -1.0, 5.0, 2.0 )\nv = base.add3( 2.0, 5.0, 2.0 )\nv = base.add3( 0.0, 5.0, 2.0 )\nv = base.add3( -0.0, 0.0, -0.0 )\nv = base.add3( NaN, NaN, NaN )\n","base.add4":"var v = base.add4( -1.0, 5.0, 2.0, -3.0 )\nv = base.add4( 2.0, 5.0, 2.0, -3.0 )\nv = base.add4( 0.0, 5.0, 2.0, -3.0 )\nv = base.add4( -0.0, 0.0, -0.0, -0.0 )\nv = base.add4( NaN, NaN, NaN, NaN )\n","base.add5":"var v = base.add5( -1.0, 5.0, 2.0, -3.0, 4.0 )\nv = base.add5( 2.0, 5.0, 2.0, -3.0, 4.0 )\nv = base.add5( 0.0, 5.0, 2.0, -3.0, 4.0 )\nv = base.add5( -0.0, 0.0, -0.0, -0.0, -0.0 )\nv = base.add5( NaN, NaN, NaN, NaN, NaN )\n","base.addf":"var v = base.addf( -1.0, 5.0 )\nv = base.addf( 2.0, 5.0 )\nv = base.addf( 0.0, 5.0 )\nv = base.addf( -0.0, 0.0 )\nv = base.addf( NaN, NaN )\n","base.afilled":"var out = base.afilled( 0.0, 3 )\n","base.afilled2d":"var out = base.afilled2d( 0.0, [ 1, 3 ] )\n","base.afilled2dBy":"function clbk() { return 1.0; };\nvar out = base.afilled2dBy( [ 1, 3 ], clbk )\n","base.afilled3d":"var out = base.afilled3d( 0.0, [ 1, 1, 3 ] )\n","base.afilled3dBy":"function clbk() { return 1.0; };\nvar out = base.afilled3dBy( [ 1, 1, 3 ], clbk )\n","base.afilled4d":"var out = base.afilled4d( 0.0, [ 1, 1, 1, 3 ] )\n","base.afilled4dBy":"function clbk() { return 1.0; };\nvar out = base.afilled4dBy( [ 1, 1, 1, 3 ], clbk )\n","base.afilled5d":"var out = base.afilled5d( 0.0, [ 1, 1, 1, 1, 3 ] )\n","base.afilled5dBy":"function clbk() { return 1.0; };\nvar out = base.afilled5dBy( [ 1, 1, 1, 1, 3 ], clbk )\n","base.afilledBy":"function clbk() { return 1.0; };\nvar out = base.afilledBy( 3, clbk )\n","base.afillednd":"var out = base.afillednd( 0.0, [ 1, 3 ] )\n","base.afilledndBy":"function clbk() { return 1.0; };\nvar out = base.afilledndBy( [ 1, 3 ], clbk )\n","base.afilter":"function f( v ) { return ( v > 0 ); };\nvar x = [ 1, -2, -3, 4 ];\nvar out = base.afilter( x, f )\n","base.afirst":"var out = base.afirst( [ 1, 2, 3 ] )\n","base.aflatten":"var x = [ [ 1, 2 ], [ 3, 4 ] ];\nvar out = base.aflatten( x, [ 2, 2 ], false )\nout = base.aflatten( x, [ 2, 2 ], true )\n","base.aflatten.assign":"var x = [ [ 1, 2 ], [ 3, 4 ] ];\nvar out = [ 0, 0, 0, 0 ];\nvar v = base.aflatten.assign( x, [ 2, 2 ], false, out, 1, 0 )\nvar bool = ( v === out )\nout = [ 0, 0, 0, 0 ];\nbase.aflatten.assign( x, [ 2, 2 ], true, out, 1, 0 );\nout\n","base.aflatten2d":"var x = [ [ 1, 2 ], [ 3, 4 ] ];\nvar out = base.aflatten2d( x, [ 2, 2 ], false )\nout = base.aflatten2d( x, [ 2, 2 ], true )\n","base.aflatten2d.assign":"var x = [ [ 1, 2 ], [ 3, 4 ] ];\nvar out = [ 0, 0, 0, 0 ];\nvar v = base.aflatten2d.assign( x, [ 2, 2 ], false, out, 1, 0 )\nvar bool = ( v === out )\nout = [ 0, 0, 0, 0 ];\nbase.aflatten2d.assign( x, [ 2, 2 ], true, out, 1, 0 );\nout\n","base.aflatten2dBy":"function fcn( v ) { return v * 2; };\nvar x = [ [ 1, 2 ], [ 3, 4 ] ];\nvar out = base.aflatten2dBy( x, [ 2, 2 ], false, fcn )\nout = base.aflatten2dBy( x, [ 2, 2 ], true, fcn )\n","base.aflatten2dBy.assign":"function fcn( v ) { return v * 2; };\nvar x = [ [ 1, 2 ], [ 3, 4 ] ];\nvar out = [ 0, 0, 0, 0 ];\nvar v = base.aflatten2dBy.assign( x, [ 2, 2 ], false, out, 1, 0, fcn )\nvar bool = ( v === out )\nout = [ 0, 0, 0, 0 ];\nbase.aflatten2dBy.assign( x, [ 2, 2 ], true, out, 1, 0, fcn );\nout\n","base.aflatten3d":"var x = [ [ [ 1, 2 ] ], [ [ 3, 4 ] ] ];\nvar out = base.aflatten3d( x, [ 2, 1, 2 ], false )\nout = base.aflatten3d( x, [ 2, 1, 2 ], true )\n","base.aflatten3d.assign":"var x = [ [ [ 1, 2 ] ], [ [ 3, 4 ] ] ];\nvar out = [ 0, 0, 0, 0 ];\nvar v = base.aflatten3d.assign( x, [ 2, 1, 2 ], false, out, 1, 0 )\nvar bool = ( v === out )\nout = [ 0, 0, 0, 0 ];\nbase.aflatten3d.assign( x, [ 2, 1, 2 ], true, out, 1, 0 );\nout\n","base.aflatten3dBy":"function fcn( v ) { return v * 2; };\nvar x = [ [ [ 1, 2 ] ], [ [ 3, 4 ] ] ];\nvar out = base.aflatten3dBy( x, [ 2, 1, 2 ], false, fcn )\nout = base.aflatten3dBy( x, [ 2, 1, 2 ], true, fcn )\n","base.aflatten3dBy.assign":"function fcn( v ) { return v * 2; };\nvar x = [ [ [ 1, 2 ] ], [ [ 3, 4 ] ] ];\nvar out = [ 0, 0, 0, 0 ];\nvar v = base.aflatten3dBy.assign( x, [ 2, 1, 2 ], false, out, 1, 0, fcn )\nvar bool = ( v === out )\nout = [ 0, 0, 0, 0 ];\nbase.aflatten3dBy.assign( x, [ 2, 1, 2 ], true, out, 1, 0, fcn );\nout\n","base.aflatten4d":"var x = [ [ [ [ 1, 2 ] ] ], [ [ [ 3, 4 ] ] ] ];\nvar out = base.aflatten4d( x, [ 2, 1, 1, 2 ], false )\nout = base.aflatten4d( x, [ 2, 1, 1, 2 ], true )\n","base.aflatten4d.assign":"var x = [ [ [ [ 1, 2 ] ] ], [ [ [ 3, 4 ] ] ] ];\nvar out = [ 0, 0, 0, 0 ];\nvar v = base.aflatten4d.assign( x, [ 2, 1, 1, 2 ], false, out, 1, 0 )\nvar bool = ( v === out )\nout = [ 0, 0, 0, 0 ];\nbase.aflatten4d.assign( x, [ 2, 1, 1, 2 ], true, out, 1, 0 );\nout\n","base.aflatten4dBy":"function fcn( v ) { return v * 2; };\nvar x = [ [ [ [ 1, 2 ] ] ], [ [ [ 3, 4 ] ] ] ];\nvar out = base.aflatten4dBy( x, [ 2, 1, 1, 2 ], false, fcn )\nout = base.aflatten4dBy( x, [ 2, 1, 1, 2 ], true, fcn )\n","base.aflatten4dBy.assign":"function fcn( v ) { return v * 2; };\nvar x = [ [ [ [ 1, 2 ] ] ], [ [ [ 3, 4 ] ] ] ];\nvar out = [ 0, 0, 0, 0 ];\nvar v = base.aflatten4dBy.assign( x, [ 2, 1, 1, 2 ], false, out, 1, 0, fcn )\nvar bool = ( v === out )\nout = [ 0, 0, 0, 0 ];\nbase.aflatten4dBy.assign( x, [ 2, 1, 1, 2 ], true, out, 1, 0, fcn );\nout\n","base.aflatten5d":"var x = [ [ [ [ [ 1, 2 ] ] ] ], [ [ [ [ 3, 4 ] ] ] ] ];\nvar out = base.aflatten5d( x, [ 2, 1, 1, 1, 2 ], false )\nout = base.aflatten5d( x, [ 2, 1, 1, 1, 2 ], true )\n","base.aflatten5d.assign":"var x = [ [ [ [ [ 1, 2 ] ] ] ], [ [ [ [ 3, 4 ] ] ] ] ];\nvar out = [ 0, 0, 0, 0 ];\nvar v = base.aflatten5d.assign( x, [ 2, 1, 1, 1, 2 ], false, out, 1, 0 )\nvar bool = ( v === out )\nout = [ 0, 0, 0, 0 ];\nbase.aflatten5d.assign( x, [ 2, 1, 1, 1, 2 ], true, out, 1, 0 );\nout\n","base.aflatten5dBy":"function fcn( v ) { return v * 2; };\nvar x = [ [ [ [ [ 1, 2 ] ] ] ], [ [ [ [ 3, 4 ] ] ] ] ];\nvar out = base.aflatten5dBy( x, [ 2, 1, 1, 1, 2 ], false, fcn )\nout = base.aflatten5dBy( x, [ 2, 1, 1, 1, 2 ], true, fcn )\n","base.aflatten5dBy.assign":"function fcn( v ) { return v * 2; };\nvar x = [ [ [ [ [ 1, 2 ] ] ] ], [ [ [ [ 3, 4 ] ] ] ] ];\nvar out = [ 0, 0, 0, 0 ];\nvar v = base.aflatten5dBy.assign( x, [ 2, 1, 1, 1, 2 ], false, out, 1, 0, fcn )\nvar bool = ( v === out )\nout = [ 0, 0, 0, 0 ];\nbase.aflatten5dBy.assign( x, [ 2, 1, 1, 1, 2 ], true, out, 1, 0, fcn );\nout\n","base.aflattenBy":"function fcn( v ) { return v * 2; };\nvar x = [ [ 1, 2 ], [ 3, 4 ] ];\nvar out = base.aflattenBy( x, [ 2, 2 ], false, fcn )\nout = base.aflattenBy( x, [ 2, 2 ], true, fcn )\n","base.aflattenBy.assign":"function fcn( v ) { return v * 2; };\nvar x = [ [ 1, 2 ], [ 3, 4 ] ];\nvar out = [ 0, 0, 0, 0 ];\nvar v = base.aflattenBy.assign( x, [ 2, 2 ], false, out, 1, 0, fcn )\nvar bool = ( v === out )\nout = [ 0, 0, 0, 0 ];\nbase.aflattenBy.assign( x, [ 2, 2 ], true, out, 1, 0, fcn );\nout\n","base.afliplr2d":"var out = base.afliplr2d( [ [ 1, 2 ], [ 3, 4 ] ] )\n","base.afliplr3d":"var out = base.afliplr3d( [ [ [ 1, 2 ], [ 3, 4 ] ] ] )\n","base.afliplr4d":"var out = base.afliplr4d( [ [ [ [ 1, 2 ], [ 3, 4 ] ] ] ] )\n","base.afliplr5d":"var out = base.afliplr5d( [ [ [ [ [ 1, 2 ], [ 3, 4 ] ] ] ] ] )\n","base.aflipud2d":"var out = base.aflipud2d( [ [ 1, 2 ], [ 3, 4 ] ] )\n","base.aflipud3d":"var out = base.aflipud3d( [ [ [ 1, 2 ], [ 3, 4 ] ] ] )\n","base.aflipud4d":"var out = base.aflipud4d( [ [ [ [ 1, 2 ], [ 3, 4 ] ] ] ] )\n","base.aflipud5d":"var out = base.aflipud5d( [ [ [ [ [ 1, 2 ], [ 3, 4 ] ] ] ] ] )\n","base.ahavercos":"var y = base.ahavercos( 0.5 )\ny = base.ahavercos( 0.0 )\n","base.ahaversin":"var y = base.ahaversin( 0.5 )\ny = base.ahaversin( 0.0 )\n","base.altcase":"var out = base.altcase( 'Hello World!' )\nout = base.altcase( 'I am a tiny little teapot' )\n","base.aones":"var out = base.aones( 3 )\n","base.aones2d":"var out = base.aones2d( [ 1, 3 ] )\n","base.aones3d":"var out = base.aones3d( [ 1, 1, 3 ] )\n","base.aones4d":"var out = base.aones4d( [ 1, 1, 1, 3 ] )\n","base.aones5d":"var out = base.aones5d( [ 1, 1, 1, 1, 3 ] )\n","base.aonesnd":"var out = base.aonesnd( [ 1, 3 ] )\n","base.aoneTo":"var arr = base.aoneTo( 6 )\n","base.aoneTo.assign":"var out = [ 0, 0, 0, 0, 0, 0 ];\nbase.aoneTo.assign( out, -1, out.length-1 );\nout\n","base.args2multislice":"var args = [ null, null, null ];\nvar s = new base.args2multislice( args );\ns.data\nargs = [ 10, new Slice( 0, 10, 1 ), null ];\ns = new base.args2multislice( args );\ns.data\n","base.asec":"var y = base.asec( 1.0 )\ny = base.asec( 2.0 )\ny = base.asec( NaN )\n","base.asecd":"var y = base.asecd( 0.0 )\ny = base.asecd( 2 )\ny = base.asecd( NaN )\n","base.asecdf":"var y = base.asecdf( 2.0 )\ny = base.asecdf( 0.0 )\ny = base.asecdf( NaN )\n","base.asecf":"var y = base.asecf( 1.0 )\ny = base.asecf( 2.0 )\ny = base.asecf( NaN )\n","base.asech":"var y = base.asech( 1.0 )\ny = base.asech( 0.5 )\ny = base.asech( NaN )\n","base.asin":"var y = base.asin( 0.0 )\ny = base.asin( -PI/6.0 )\ny = base.asin( NaN )\n","base.asind":"var y = base.asind( 0.0 )\ny = base.asind( PI / 6.0 )\ny = base.asind( NaN )\n","base.asindf":"var y = base.asindf( 0.0 )\ny = base.asindf( 3.1415927410125732 / 6.0 )\ny = base.asindf( NaN )\n","base.asinf":"var y = base.asinf( 0.0 )\ny = base.asinf( -3.14/6.0 )\ny = base.asinf( NaN )\n","base.asinh":"var y = base.asinh( 0.0 )\ny = base.asinh( 2.0 )\ny = base.asinh( -2.0 )\ny = base.asinh( NaN )\ny = base.asinh( NINF )\ny = base.asinh( PINF )\n","base.atan":"var y = base.atan( 0.0 )\ny = base.atan( -PI/2.0 )\ny = base.atan( PI/2.0 )\ny = base.atan( NaN )\n","base.atan2":"var v = base.atan2( 2.0, 2.0 )\nv = base.atan2( 6.0, 2.0 )\nv = base.atan2( -1.0, -1.0 )\nv = base.atan2( 3.0, 0.0 )\nv = base.atan2( -2.0, 0.0 )\nv = base.atan2( 0.0, 0.0 )\nv = base.atan2( 3.0, NaN )\nv = base.atan2( NaN, 2.0 )\n","base.atand":"var y = base.atand( 0.0 )\ny = base.atand( PI/6.0 )\ny = base.atand( NaN )\n","base.atanf":"var y = base.atanf( 0.0 )\ny = base.atanf( -3.14/4.0 )\ny = base.atanf( 3.14/4.0 )\ny = base.atanf( NaN )\n","base.atanh":"var y = base.atanh( 0.0 )\ny = base.atanh( 0.9 )\ny = base.atanh( 1.0 )\ny = base.atanh( -1.0 )\ny = base.atanh( NaN )\n","base.avercos":"var y = base.avercos( -1.5 )\ny = base.avercos( -0.0 )\n","base.aversin":"var y = base.aversin( 1.5 )\ny = base.aversin( 0.0 )\n","base.azeros":"var out = base.azeros( 3 )\n","base.azeros2d":"var out = base.azeros2d( [ 1, 3 ] )\n","base.azeros3d":"var out = base.azeros3d( [ 1, 1, 3 ] )\n","base.azeros4d":"var out = base.azeros4d( [ 1, 1, 1, 3 ] )\n","base.azeros5d":"var out = base.azeros5d( [ 1, 1, 1, 1, 3 ] )\n","base.azerosnd":"var out = base.azerosnd( [ 1, 3 ] )\n","base.azeroTo":"var arr = base.azeroTo( 6 )\n","base.azeroTo.assign":"var out = [ 0, 0, 0, 0, 0, 0 ];\nbase.azeroTo.assign( out, -1, out.length-1 );\nout\n","base.bernoulli":"var y = base.bernoulli( 0 )\ny = base.bernoulli( 1 )\ny = base.bernoulli( 2 )\ny = base.bernoulli( 3 )\ny = base.bernoulli( 4 )\ny = base.bernoulli( 5 )\ny = base.bernoulli( 20 )\ny = base.bernoulli( 260 )\ny = base.bernoulli( 262 )\ny = base.bernoulli( NaN )\n","base.besselj0":"var y = base.besselj0( 0.0 )\ny = base.besselj0( 1.0 )\ny = base.besselj0( PINF )\ny = base.besselj0( NINF )\ny = base.besselj0( NaN )\n","base.besselj1":"var y = base.besselj1( 0.0 )\ny = base.besselj1( 1.0 )\ny = base.besselj1( PINF )\ny = base.besselj1( NINF )\ny = base.besselj1( NaN )\n","base.bessely0":"var y = base.bessely0( 0.0 )\ny = base.bessely0( 1.0 )\ny = base.bessely0( -1.0 )\ny = base.bessely0( PINF )\ny = base.bessely0( NINF )\ny = base.bessely0( NaN )\n","base.bessely1":"var y = base.bessely1( 0.0 )\ny = base.bessely1( 1.0 )\ny = base.bessely1( -1.0 )\ny = base.bessely1( PINF )\ny = base.bessely1( NINF )\ny = base.bessely1( NaN )\n","base.beta":"var v = base.beta( 0.0, 0.5 )\nv = base.beta( 1.0, 1.0 )\nv = base.beta( -1.0, 2.0 )\nv = base.beta( 5.0, 0.2 )\nv = base.beta( 4.0, 1.0 )\nv = base.beta( NaN, 2.0 )\n","base.betainc":"var y = base.betainc( 0.5, 2.0, 2.0 )\ny = base.betainc( 0.5, 2.0, 2.0, false )\ny = base.betainc( 0.2, 1.0, 2.0 )\ny = base.betainc( 0.2, 1.0, 2.0, true, true )\ny = base.betainc( NaN, 1.0, 1.0 )\ny = base.betainc( 0.8, NaN, 1.0 )\ny = base.betainc( 0.8, 1.0, NaN )\ny = base.betainc( 1.5, 1.0, 1.0 )\ny = base.betainc( -0.5, 1.0, 1.0 )\ny = base.betainc( 0.5, -2.0, 2.0 )\ny = base.betainc( 0.5, 2.0, -2.0 )\n","base.betaincinv":"var y = base.betaincinv( 0.2, 3.0, 3.0 )\ny = base.betaincinv( 0.4, 3.0, 3.0 )\ny = base.betaincinv( 0.4, 3.0, 3.0, true )\ny = base.betaincinv( 0.4, 1.0, 6.0 )\ny = base.betaincinv( 0.8, 1.0, 6.0 )\ny = base.betaincinv( NaN, 1.0, 1.0 )\ny = base.betaincinv( 0.5, NaN, 1.0 )\ny = base.betaincinv( 0.5, 1.0, NaN )\ny = base.betaincinv( 1.2, 1.0, 1.0 )\ny = base.betaincinv( -0.5, 1.0, 1.0 )\ny = base.betaincinv( 0.5, -2.0, 2.0 )\ny = base.betaincinv( 0.5, 0.0, 2.0 )\ny = base.betaincinv( 0.5, 2.0, -2.0 )\ny = base.betaincinv( 0.5, 2.0, 0.0 )\n","base.betaln":"var v = base.betaln( 0.0, 0.0 )\nv = base.betaln( 1.0, 1.0 )\nv = base.betaln( -1.0, 2.0 )\nv = base.betaln( 5.0, 0.2 )\nv = base.betaln( 4.0, 1.0 )\nv = base.betaln( NaN, 2.0 )\n","base.binet":"var y = base.binet( 0.0 )\ny = base.binet( 1.0 )\ny = base.binet( 2.0 )\ny = base.binet( 3.0 )\ny = base.binet( 4.0 )\ny = base.binet( 5.0 )\ny = base.binet( NaN )\n","base.binomcoef":"var v = base.binomcoef( 8, 2 )\nv = base.binomcoef( 0, 0 )\nv = base.binomcoef( -4, 2 )\nv = base.binomcoef( 5, 3 )\nv = base.binomcoef( NaN, 3 )\nv = base.binomcoef( 5, NaN )\nv = base.binomcoef( NaN, NaN )\n","base.binomcoefln":"var v = base.binomcoefln( 8, 2 )\nv = base.binomcoefln( 0, 0 )\nv = base.binomcoefln( -4, 2 )\nv = base.binomcoefln( 88, 3 )\nv = base.binomcoefln( NaN, 3 )\nv = base.binomcoefln( 5, NaN )\nv = base.binomcoefln( NaN, NaN )\n","base.boxcox":"var v = base.boxcox( 1.0, 2.5 )\nv = base.boxcox( 4.0, 2.5 )\nv = base.boxcox( 10.0, 2.5 )\nv = base.boxcox( 2.0, 0.0 )\nv = base.boxcox( -1.0, 2.5 )\nv = base.boxcox( 0.0, -1.0 )\n","base.boxcox1p":"var v =  base.boxcox1p( 1.0, 2.5 )\nv = base.boxcox1p( 4.0, 2.5 )\nv = base.boxcox1p( 10.0, 2.5 )\nv = base.boxcox1p( 2.0, 0.0 )\nv = base.boxcox1p( -1.0, 2.5 )\nv = base.boxcox1p( 0.0, -1.0 )\nv = base.boxcox1p( -1.0, -1.0 )\n","base.boxcox1pinv":"var v = base.boxcox1pinv( 1.0, 2.5 )\nv = base.boxcox1pinv( 4.0, 2.5 )\nv = base.boxcox1pinv( 10.0, 2.5 )\nv = base.boxcox1pinv( 2.0, 0.0 )\nv = base.boxcox1pinv( -1.0, 2.5 )\nv = base.boxcox1pinv( 0.0, -1.0 )\nv = base.boxcox1pinv( 1.0, NaN )\nv = base.boxcox1pinv( NaN, 3.1 )\n","base.boxcoxinv":"var v = base.boxcoxinv( 1.0, 2.5 )\nv = base.boxcoxinv( 4.0, 2.5 )\nv = base.boxcoxinv( 10.0, 2.5 )\nv = base.boxcoxinv( 2.0, 0.0 )\nv = base.boxcoxinv( -1.0, 2.5 )\nv = base.boxcoxinv( 0.0, -1.0 )\nv = base.boxcoxinv( 1.0, NaN )\nv = base.boxcoxinv( NaN, 3.1 )\n","base.cabs":"var y = base.cabs( new Complex128( 5.0, 3.0 ) )\n","base.cabs2":"var y = base.cabs2( new Complex128( 5.0, 3.0 ) )\n","base.cabs2f":"var y = base.cabs2f( new Complex64( 5.0, 3.0 ) )\n","base.cabsf":"var y = base.cabsf( new Complex64( 5.0, 3.0 ) )\n","base.cadd":"var z = new Complex128( 5.0, 3.0 )\nvar out = base.cadd( z, z )\nvar re = real( out )\nvar im = imag( out )\n","base.caddf":"var z = new Complex64( 5.0, 3.0 )\nvar out = base.caddf( z, z )\nvar re = realf( out )\nvar im = imagf( out )\n","base.camelcase":"var out = base.camelcase( 'Hello World!' )\nout = base.camelcase( 'beep boop' )\n","base.capitalize":"var out = base.capitalize( 'beep' )\nout = base.capitalize( 'Boop' )\n","base.cbrt":"var y = base.cbrt( 64.0 )\ny = base.cbrt( 27.0 )\ny = base.cbrt( 0.0 )\ny = base.cbrt( -0.0 )\ny = base.cbrt( -9.0 )\ny = base.cbrt( NaN )\n","base.cbrtf":"var y = base.cbrtf( 64.0 )\ny = base.cbrtf( 27.0 )\ny = base.cbrtf( 0.0 )\ny = base.cbrtf( -0.0 )\ny = base.cbrtf( -9.0 )\ny = base.cbrtf( NaN )\n","base.cceil":"var v = base.cceil( new Complex128( -1.5, 2.5 ) )\nvar re = real( v )\nvar im = imag( v )\n","base.cceilf":"var v = base.cceilf( new Complex64( -1.5, 2.5 ) )\nvar re = real( v )\nvar im = imag( v )\n","base.cceiln":"var out = base.cceiln( new Complex128( 5.555, -3.333 ), -2 )\nvar re = real( out )\nvar im = imag( out )\n","base.ccis":"var y = base.ccis( new Complex128( 0.0, 0.0 ) )\nvar re = real( y )\nvar im = imag( y )\ny = base.ccis( new Complex128( 1.0, 0.0 ) )\nre = real( y )\nim = imag( y )\n","base.cdiv":"var z1 = new Complex128( -13.0, -1.0 )\nvar z2 = new Complex128( -2.0, 1.0 )\nvar y = base.cdiv( z1, z2 )\nvar re = real( y )\nvar im = imag( y )\n","base.ceil":"var y = base.ceil( 3.14 )\ny = base.ceil( -4.2 )\ny = base.ceil( -4.6 )\ny = base.ceil( 9.5 )\ny = base.ceil( -0.0 )\n","base.ceil2":"var y = base.ceil2( 3.14 )\ny = base.ceil2( -4.2 )\ny = base.ceil2( -4.6 )\ny = base.ceil2( 9.5 )\ny = base.ceil2( 13.0 )\ny = base.ceil2( -13.0 )\ny = base.ceil2( -0.0 )\n","base.ceil10":"var y = base.ceil10( 3.14 )\ny = base.ceil10( -4.2 )\ny = base.ceil10( -4.6 )\ny = base.ceil10( 9.5 )\ny = base.ceil10( 13.0 )\ny = base.ceil10( -13.0 )\ny = base.ceil10( -0.0 )\n","base.ceilb":"var y = base.ceilb( 3.14159, -4, 10 )\ny = base.ceilb( 3.14159, 0, 2 )\ny = base.ceilb( 5.0, 1, 2 )\n","base.ceilf":"var y = base.ceilf( 3.14 )\ny = base.ceilf( -4.2 )\ny = base.ceilf( -4.6 )\ny = base.ceilf( 9.5 )\ny = base.ceilf( -0.0 )\n","base.ceiln":"var y = base.ceiln( 3.14159, -2 )\ny = base.ceiln( 3.14159, 0 )\ny = base.ceiln( 12368.0, 3 )\n","base.ceilsd":"var y = base.ceilsd( 3.14159, 5 )\ny = base.ceilsd( 3.14159, 1 )\ny = base.ceilsd( 12368.0, 2 )\ny = base.ceilsd( 0.0313, 2, 2 )\n","base.cexp":"var y = base.cexp( new Complex128( 0.0, 0.0 ) )\nvar re = real( y )\nvar im = imag( y )\ny = base.cexp( new Complex128( 0.0, 1.0 ) )\nre = real( y )\nim = imag( y )\n","base.cflipsign":"var v = base.cflipsign( new Complex128( -4.2, 5.5 ), -9.0 )\nvar re = real( v )\nvar im = imag( v )\n","base.cflipsignf":"var v = base.cflipsignf( new Complex64( -4.0, 5.0 ), -9.0 )\nvar re = real( v )\nvar im = imag( v )\n","base.cfloor":"var v = base.cfloor( new Complex128( 5.5, 3.3 ) )\nvar re = real( v )\nvar im = imag( v )\n","base.cfloorn":"var v = base.cfloorn( new Complex128( 5.555, -3.333 ), -2 )\nvar re = real( v )\nvar im = imag( v )\n","base.cidentity":"var v = base.cidentity( new Complex128( -1.0, 2.0 ) )\nvar re = real( v )\nvar img = imag( v )\n","base.cidentityf":"var v = base.cidentityf( new Complex64( -1.0, 2.0 ) )\nvar re = real( v )\nvar img = imag( v )\n","base.cinv":"var v = base.cinv( new Complex128( 2.0, 4.0 ) )\nvar re = real( v )\nvar im = imag( v )\n","base.clamp":"var y = base.clamp( 3.14, 0.0, 5.0 )\ny = base.clamp( -3.14, 0.0, 5.0 )\ny = base.clamp( 3.14, 0.0, 3.0 )\ny = base.clamp( -0.0, 0.0, 5.0 )\ny = base.clamp( 0.0, -3.14, -0.0 )\ny = base.clamp( NaN, 0.0, 5.0 )\n","base.clampf":"var y = base.clampf( 3.14, 0.0, 5.0 )\ny = base.clampf( -3.14, 0.0, 5.0 )\ny = base.clampf( 3.14, 0.0, 3.0 )\ny = base.clampf( -0.0, 0.0, 5.0 )\ny = base.clampf( 0.0, -3.14, -0.0 )\ny = base.clampf( NaN, 0.0, 5.0 )\n","base.cmul":"var z1 = new Complex128( 5.0, 3.0 )\nvar z2 = new Complex128( -2.0, 1.0 )\nvar out = base.cmul( z1, z2 )\nvar re = real( out )\nvar im = imag( out )\n","base.cmulf":"var z1 = new Complex64( 5.0, 3.0 )\nvar z2 = new Complex64( -2.0, 1.0 )\nvar out = base.cmulf( z1, z2 )\nvar re = realf( out )\nvar im = imagf( out )\n","base.cneg":"var z = new Complex128( -4.2, 5.5 )\nvar v = base.cneg( z )\nvar re = real( v )\nvar im = imag( v )\n","base.cnegf":"var z = new Complex64( -4.0, 5.0 )\nvar v = base.cnegf( z )\nvar re = realf( v )\nvar im = imagf( v )\n","base.codePointAt":"var out = base.codePointAt( 'last man standing', 4, false )\nout = base.codePointAt( 'presidential election', 8, true )\nout = base.codePointAt( 'अनुच्छेद', 2, false )\nout = base.codePointAt( '🌷', 1, true )\n","base.constantcase":"var out = base.constantcase( 'Hello World!' )\nout = base.constantcase( 'I am a tiny little teapot' )\n","base.continuedFraction":"function closure() {\nvar i = 0;\nreturn function() {\n    i += 1;\n    return [ i, i ];\n};\n };\nvar gen = closure();\nvar out = base.continuedFraction( gen )\nfunction* generator() {\n var i = 0;\n while ( true ) {\n     i += 1;\n     yield [ i, i ];\n }\n };\ngen = generator();\nout = base.continuedFraction( gen )\nout = base.continuedFraction( generator(), { 'keep': true } )\nout = base.continuedFraction( generator(), { 'maxIter': 10 } )\nout = base.continuedFraction( generator(), { 'tolerance': 1e-1 } )\n","base.copysign":"var z = base.copysign( -3.14, 10.0 )\nz = base.copysign( 3.14, -1.0 )\nz = base.copysign( 1.0, -0.0 )\nz = base.copysign( -3.14, -0.0 )\nz = base.copysign( -0.0, 1.0 )\n","base.copysignf":"var z = base.copysignf( -3.0, 10.0 )\nz = base.copysignf( 3.0, -1.0 )\nz = base.copysignf( 1.0, -0.0 )\nz = base.copysignf( -3.0, -0.0 )\nz = base.copysignf( -0.0, 1.0 )\n","base.cos":"var y = base.cos( 0.0 )\ny = base.cos( PI/4.0 )\ny = base.cos( -PI/6.0 )\ny = base.cos( NaN )\n","base.cosd":"var y = base.cosd( 0.0 )\ny = base.cosd( 90.0 )\ny = base.cosd( 60.0 )\ny = base.cosd( NaN )\n","base.cosh":"var y = base.cosh( 0.0 )\ny = base.cosh( 2.0 )\ny = base.cosh( -2.0 )\ny = base.cosh( NaN )\n","base.cosm1":"var y = base.cosm1( 0.0 )\ny = base.cosm1( PI/4.0 )\ny = base.cosm1( -PI/6.0 )\ny = base.cosm1( NaN )\n","base.cospi":"var y = base.cospi( 0.0 )\ny = base.cospi( 0.5 )\ny = base.cospi( 0.1 )\ny = base.cospi( NaN )\n","base.cot":"var y = base.cot( 0.0 )\ny = base.cot( -PI/4.0 )\ny = base.cot( PI/4.0 )\ny = base.cot( NaN )\n","base.cotd":"var y = base.cotd( 0.0 )\ny = base.cotd( 90.0 )\ny = base.cotd( 60.0 )\ny = base.cotd( NaN )\n","base.coth":"var y = base.coth( 0.0 )\ny = base.coth( -0.0 )\ny = base.coth( 2.0 )\ny = base.coth( -2.0 )\ny = base.coth( +Infinity )\ny = base.coth( -Infinity )\ny = base.coth( NaN )\n","base.covercos":"var y = base.covercos( 3.14 )\ny = base.covercos( -4.2 )\ny = base.covercos( -4.6 )\ny = base.covercos( 9.5 )\ny = base.covercos( -0.0 )\n","base.coversin":"var y = base.coversin( 3.14 )\ny = base.coversin( -4.2 )\ny = base.coversin( -4.6 )\ny = base.coversin( 9.5 )\ny = base.coversin( -0.0 )\n","base.cphase":"var phi = base.cphase( new Complex128( 5.0, 3.0 ) )\n","base.cpolar":"var out = base.cpolar( new Complex128( 5.0, 3.0 ) )\n","base.cpolar.assign":"var out = new Float64Array( 2 );\nvar v = base.cpolar.assign( new Complex128( 5.0, 3.0 ), out, 1, 0 )\nvar bool = ( v === out )\n","base.cround":"var v = base.cround( new Complex128( 5.5, 3.3 ) )\nvar re = real( v )\nvar im = imag( v )\n","base.croundn":"var v = base.croundn( new Complex128( 5.555, -3.336 ), -2 )\nvar re = real( v )\nvar im = imag( v )\n","base.csc":"var y = base.csc( 0.0 )\ny = base.csc( PI/2.0 )\ny = base.csc( -PI/6.0 )\ny = base.csc( NaN )\n","base.cscd":"var y = base.cscd( 1.0 )\ny = base.cscd( PI )\ny = base.cscd( -PI )\ny = base.cscd( NaN )\n","base.csch":"var y = base.csch( +0.0 )\nvar y = base.csch( -0.0 )\nvar y = base.csch( +Infinity )\nvar y = base.csch( -Infinity )\ny = base.csch( 2.0 )\ny = base.csch( -2.0 )\ny = base.csch( NaN )\n","base.csignum":"var v = base.csignum( new Complex128( -4.2, 5.5 ) )\nvar re = real( v )\nvar im = imag( v )\n","base.csub":"var z1 = new Complex128( 5.0, 3.0 )\nvar z2 = new Complex128( -2.0, 1.0 )\nvar out = base.csub( z1, z2 )\nvar re = real( out )\nvar im = imag( out )\n","base.csubf":"var z1 = new Complex64( 5.0, 3.0 )\nvar z2 = new Complex64( -2.0, 1.0 )\nvar out = base.csubf( z1, z2 )\nvar re = realf( out )\nvar im = imagf( out )\n","base.deg2rad":"var r = base.deg2rad( 90.0 )\nr = base.deg2rad( -45.0 )\nr = base.deg2rad( NaN )\n","base.deg2radf":"var r = base.deg2radf( 90.0 )\nr = base.deg2radf( -45.0 )\nr = base.deg2radf( NaN )\n","base.digamma":"var y = base.digamma( -2.5 )\ny = base.digamma( 1.0 )\ny = base.digamma( 10.0 )\ny = base.digamma( NaN )\ny = base.digamma( -1.0 )\n","base.diracDelta":"var y = base.diracDelta( 3.14 )\ny = base.diracDelta( 0.0 )\n","base.div":"var v = base.div( -1.0, 5.0 )\nv = base.div( 2.0, 5.0 )\nv = base.div( 0.0, 5.0 )\nv = base.div( -0.0, 5.0 )\nv = base.div( NaN, NaN )\n","base.divf":"var v = base.divf( -1.0, 5.0 )\nv = base.divf( 2.0, 5.0 )\nv = base.divf( 0.0, 5.0 )\nv = base.divf( -0.0, 5.0 )\nv = base.divf( NaN, NaN )\n","base.dotcase":"var out = base.dotcase( 'Hello World!' )\nout = base.dotcase( 'I am a tiny little teapot' )\n","base.dists.arcsine.Arcsine":"var arcsine = base.dists.arcsine.Arcsine( 0.0, 1.0 );\narcsine.a\narcsine.b\narcsine.entropy\narcsine.kurtosis\narcsine.mean\narcsine.median\narcsine.mode\narcsine.skewness\narcsine.stdev\narcsine.variance\narcsine.cdf( 0.8 )\narcsine.logcdf( 0.8 )\narcsine.logpdf( 0.4 )\narcsine.pdf( 0.8 )\narcsine.quantile( 0.8 )\n","base.dists.arcsine.cdf":"var y = base.dists.arcsine.cdf( 9.0, 0.0, 10.0 )\ny = base.dists.arcsine.cdf( 0.5, 0.0, 2.0 )\ny = base.dists.arcsine.cdf( PINF, 2.0, 4.0 )\ny = base.dists.arcsine.cdf( NINF, 2.0, 4.0 )\ny = base.dists.arcsine.cdf( NaN, 0.0, 1.0 )\ny = base.dists.arcsine.cdf( 0.0, NaN, 1.0 )\ny = base.dists.arcsine.cdf( 0.0, 0.0, NaN )\ny = base.dists.arcsine.cdf( 2.0, 1.0, 0.0 )\n","base.dists.arcsine.cdf.factory":"var mycdf = base.dists.arcsine.cdf.factory( 0.0, 10.0 );\nvar y = mycdf( 0.5 )\ny = mycdf( 8.0 )\n","base.dists.arcsine.entropy":"var v = base.dists.arcsine.entropy( 0.0, 1.0 )\nv = base.dists.arcsine.entropy( 4.0, 12.0 )\nv = base.dists.arcsine.entropy( 2.0, 8.0 )\n","base.dists.arcsine.kurtosis":"var v = base.dists.arcsine.kurtosis( 0.0, 1.0 )\nv = base.dists.arcsine.kurtosis( 4.0, 12.0 )\nv = base.dists.arcsine.kurtosis( 2.0, 8.0 )\n","base.dists.arcsine.logcdf":"var y = base.dists.arcsine.logcdf( 9.0, 0.0, 10.0 )\ny = base.dists.arcsine.logcdf( 0.5, 0.0, 2.0 )\ny = base.dists.arcsine.logcdf( PINF, 2.0, 4.0 )\ny = base.dists.arcsine.logcdf( NINF, 2.0, 4.0 )\ny = base.dists.arcsine.logcdf( NaN, 0.0, 1.0 )\ny = base.dists.arcsine.logcdf( 0.0, NaN, 1.0 )\ny = base.dists.arcsine.logcdf( 0.0, 0.0, NaN )\ny = base.dists.arcsine.logcdf( 2.0, 1.0, 0.0 )\n","base.dists.arcsine.logcdf.factory":"var mylogcdf = base.dists.arcsine.logcdf.factory( 0.0, 10.0 );\nvar y = mylogcdf( 0.5 )\ny = mylogcdf( 8.0 )\n","base.dists.arcsine.logpdf":"var y = base.dists.arcsine.logpdf( 2.0, 0.0, 4.0 )\ny = base.dists.arcsine.logpdf( 5.0, 0.0, 4.0 )\ny = base.dists.arcsine.logpdf( 0.25, 0.0, 1.0 )\ny = base.dists.arcsine.logpdf( NaN, 0.0, 1.0 )\ny = base.dists.arcsine.logpdf( 0.0, NaN, 1.0 )\ny = base.dists.arcsine.logpdf( 0.0, 0.0, NaN )\ny = base.dists.arcsine.logpdf( 2.0, 3.0, 1.0 )\n","base.dists.arcsine.logpdf.factory":"var mylogPDF = base.dists.arcsine.logpdf.factory( 6.0, 7.0 );\nvar y = mylogPDF( 7.0 )\ny = mylogPDF( 5.0 )\n","base.dists.arcsine.mean":"var v = base.dists.arcsine.mean( 0.0, 1.0 )\nv = base.dists.arcsine.mean( 4.0, 12.0 )\nv = base.dists.arcsine.mean( 2.0, 8.0 )\n","base.dists.arcsine.median":"var v = base.dists.arcsine.median( 0.0, 1.0 )\nv = base.dists.arcsine.median( 4.0, 12.0 )\nv = base.dists.arcsine.median( 2.0, 8.0 )\n","base.dists.arcsine.mode":"var v = base.dists.arcsine.mode( 0.0, 1.0 )\nv = base.dists.arcsine.mode( 4.0, 12.0 )\nv = base.dists.arcsine.mode( 2.0, 8.0 )\n","base.dists.arcsine.pdf":"var y = base.dists.arcsine.pdf( 2.0, 0.0, 4.0 )\ny = base.dists.arcsine.pdf( 5.0, 0.0, 4.0 )\ny = base.dists.arcsine.pdf( 0.25, 0.0, 1.0 )\ny = base.dists.arcsine.pdf( NaN, 0.0, 1.0 )\ny = base.dists.arcsine.pdf( 0.0, NaN, 1.0 )\ny = base.dists.arcsine.pdf( 0.0, 0.0, NaN )\ny = base.dists.arcsine.pdf( 2.0, 3.0, 1.0 )\n","base.dists.arcsine.pdf.factory":"var myPDF = base.dists.arcsine.pdf.factory( 6.0, 7.0 );\nvar y = myPDF( 7.0 )\ny = myPDF( 5.0 )\n","base.dists.arcsine.quantile":"var y = base.dists.arcsine.quantile( 0.8, 0.0, 1.0 )\ny = base.dists.arcsine.quantile( 0.5, 0.0, 10.0 )\ny = base.dists.arcsine.quantile( 1.1, 0.0, 1.0 )\ny = base.dists.arcsine.quantile( -0.2, 0.0, 1.0 )\ny = base.dists.arcsine.quantile( NaN, 0.0, 1.0 )\ny = base.dists.arcsine.quantile( 0.0, NaN, 1.0 )\ny = base.dists.arcsine.quantile( 0.0, 0.0, NaN )\ny = base.dists.arcsine.quantile( 0.5, 2.0, 1.0 )\n","base.dists.arcsine.quantile.factory":"var myQuantile = base.dists.arcsine.quantile.factory( 0.0, 4.0 );\nvar y = myQuantile( 0.8 )\n","base.dists.arcsine.skewness":"var v = base.dists.arcsine.skewness( 0.0, 1.0 )\nv = base.dists.arcsine.skewness( 4.0, 12.0 )\nv = base.dists.arcsine.skewness( 2.0, 8.0 )\n","base.dists.arcsine.stdev":"var v = base.dists.arcsine.stdev( 0.0, 1.0 )\nv = base.dists.arcsine.stdev( 4.0, 12.0 )\nv = base.dists.arcsine.stdev( 2.0, 8.0 )\n","base.dists.arcsine.variance":"var v = base.dists.arcsine.variance( 0.0, 1.0 )\nv = base.dists.arcsine.variance( 4.0, 12.0 )\nv = base.dists.arcsine.variance( 2.0, 8.0 )\n","base.dists.bernoulli.Bernoulli":"var bernoulli = base.dists.bernoulli.Bernoulli( 0.6 );\nbernoulli.p\nbernoulli.entropy\nbernoulli.kurtosis\nbernoulli.mean\nbernoulli.median\nbernoulli.skewness\nbernoulli.stdev\nbernoulli.variance\nbernoulli.cdf( 0.5 )\nbernoulli.mgf( 3.0 )\nbernoulli.pmf( 0.0 )\nbernoulli.quantile( 0.7 )\n","base.dists.bernoulli.cdf":"var y = base.dists.bernoulli.cdf( 0.5, 0.5 )\ny = base.dists.bernoulli.cdf( 0.8, 0.1 )\ny = base.dists.bernoulli.cdf( -1.0, 0.4 )\ny = base.dists.bernoulli.cdf( 1.5, 0.4 )\ny = base.dists.bernoulli.cdf( NaN, 0.5 )\ny = base.dists.bernoulli.cdf( 0.0, NaN )\ny = base.dists.bernoulli.cdf( 2.0, 1.4 )\n","base.dists.bernoulli.cdf.factory":"var mycdf = base.dists.bernoulli.cdf.factory( 0.5 );\nvar y = mycdf( 3.0 )\ny = mycdf( 0.7 )\n","base.dists.bernoulli.entropy":"var v = base.dists.bernoulli.entropy( 0.1 )\nv = base.dists.bernoulli.entropy( 0.5 )\n","base.dists.bernoulli.kurtosis":"var v = base.dists.bernoulli.kurtosis( 0.1 )\nv = base.dists.bernoulli.kurtosis( 0.5 )\n","base.dists.bernoulli.mean":"var v = base.dists.bernoulli.mean( 0.1 )\nv = base.dists.bernoulli.mean( 0.5 )\n","base.dists.bernoulli.median":"var v = base.dists.bernoulli.median( 0.1 )\nv = base.dists.bernoulli.median( 0.8 )\n","base.dists.bernoulli.mgf":"var y = base.dists.bernoulli.mgf( 0.2, 0.5 )\ny = base.dists.bernoulli.mgf( 0.4, 0.5 )\ny = base.dists.bernoulli.mgf( NaN, 0.0 )\ny = base.dists.bernoulli.mgf( 0.0, NaN )\ny = base.dists.bernoulli.mgf( -2.0, -1.0 )\ny = base.dists.bernoulli.mgf( 0.2, 2.0 )\n","base.dists.bernoulli.mgf.factory":"var mymgf = base.dists.bernoulli.mgf.factory( 0.8 );\nvar y = mymgf( -0.2 )\n","base.dists.bernoulli.mode":"var v = base.dists.bernoulli.mode( 0.1 )\nv = base.dists.bernoulli.mode( 0.8 )\n","base.dists.bernoulli.pmf":"var y = base.dists.bernoulli.pmf( 1.0, 0.3 )\ny = base.dists.bernoulli.pmf( 0.0, 0.7 )\ny = base.dists.bernoulli.pmf( -1.0, 0.5 )\ny = base.dists.bernoulli.pmf( 0.0, NaN )\ny = base.dists.bernoulli.pmf( NaN, 0.5 )\ny = base.dists.bernoulli.pmf( 0.0, 1.5 )\n","base.dists.bernoulli.pmf.factory":"var mypmf = base.dists.bernoulli.pmf.factory( 0.5 );\nvar y = mypmf( 1.0 )\ny = mypmf( 0.0 )\n","base.dists.bernoulli.quantile":"var y = base.dists.bernoulli.quantile( 0.8, 0.4 )\ny = base.dists.bernoulli.quantile( 0.5, 0.4 )\ny = base.dists.bernoulli.quantile( 0.9, 0.1 )\ny = base.dists.bernoulli.quantile( -0.2, 0.1 )\ny = base.dists.bernoulli.quantile( NaN, 0.8 )\ny = base.dists.bernoulli.quantile( 0.4, NaN )\ny = base.dists.bernoulli.quantile( 0.5, -1.0 )\ny = base.dists.bernoulli.quantile( 0.5, 1.5 )\n","base.dists.bernoulli.quantile.factory":"var myquantile = base.dists.bernoulli.quantile.factory( 0.4 );\nvar y = myquantile( 0.4 )\ny = myquantile( 0.8 )\ny = myquantile( 1.0 )\n","base.dists.bernoulli.skewness":"var v = base.dists.bernoulli.skewness( 0.1 )\nv = base.dists.bernoulli.skewness( 0.5 )\n","base.dists.bernoulli.stdev":"var v = base.dists.bernoulli.stdev( 0.1 )\nv = base.dists.bernoulli.stdev( 0.5 )\n","base.dists.bernoulli.variance":"var v = base.dists.bernoulli.variance( 0.1 )\nv = base.dists.bernoulli.variance( 0.5 )\n","base.dists.beta.Beta":"var beta = base.dists.beta.Beta( 1.0, 1.0 );\nbeta.alpha\nbeta.beta\nbeta.entropy\nbeta.kurtosis\nbeta.mean\nbeta.median\nbeta.mode\nbeta.skewness\nbeta.stdev\nbeta.variance\nbeta.cdf( 0.8 )\nbeta.logcdf( 0.8 )\nbeta.logpdf( 1.0 )\nbeta.mgf( 3.14 )\nbeta.pdf( 1.0 )\nbeta.quantile( 0.8 )\n","base.dists.beta.cdf":"var y = base.dists.beta.cdf( 0.5, 1.0, 1.0 )\ny = base.dists.beta.cdf( 0.5, 2.0, 4.0 )\ny = base.dists.beta.cdf( 0.2, 2.0, 2.0 )\ny = base.dists.beta.cdf( 0.8, 4.0, 4.0 )\ny = base.dists.beta.cdf( -0.5, 4.0, 2.0 )\ny = base.dists.beta.cdf( 1.5, 4.0, 2.0 )\ny = base.dists.beta.cdf( 2.0, -1.0, 0.5 )\ny = base.dists.beta.cdf( 2.0, 0.5, -1.0 )\ny = base.dists.beta.cdf( NaN, 1.0, 1.0 )\ny = base.dists.beta.cdf( 0.0, NaN, 1.0 )\ny = base.dists.beta.cdf( 0.0, 1.0, NaN )\n","base.dists.beta.cdf.factory":"var mycdf = base.dists.beta.cdf.factory( 0.5, 0.5 );\nvar y = mycdf( 0.8 )\ny = mycdf( 0.3 )\n","base.dists.beta.entropy":"var v = base.dists.beta.entropy( 1.0, 1.0 )\nv = base.dists.beta.entropy( 4.0, 12.0 )\nv = base.dists.beta.entropy( 8.0, 2.0 )\nv = base.dists.beta.entropy( 1.0, -0.1 )\nv = base.dists.beta.entropy( -0.1, 1.0 )\nv = base.dists.beta.entropy( 2.0, NaN )\nv = base.dists.beta.entropy( NaN, 2.0 )\n","base.dists.beta.kurtosis":"var v = base.dists.beta.kurtosis( 1.0, 1.0 )\nv = base.dists.beta.kurtosis( 4.0, 12.0 )\nv = base.dists.beta.kurtosis( 8.0, 2.0 )\nv = base.dists.beta.kurtosis( 1.0, -0.1 )\nv = base.dists.beta.kurtosis( -0.1, 1.0 )\nv = base.dists.beta.kurtosis( 2.0, NaN )\nv = base.dists.beta.kurtosis( NaN, 2.0 )\n","base.dists.beta.logcdf":"var y = base.dists.beta.logcdf( 0.5, 1.0, 1.0 )\ny = base.dists.beta.logcdf( 0.5, 2.0, 4.0 )\ny = base.dists.beta.logcdf( 0.2, 2.0, 2.0 )\ny = base.dists.beta.logcdf( 0.8, 4.0, 4.0 )\ny = base.dists.beta.logcdf( -0.5, 4.0, 2.0 )\ny = base.dists.beta.logcdf( 1.5, 4.0, 2.0 )\ny = base.dists.beta.logcdf( 2.0, -1.0, 0.5 )\ny = base.dists.beta.logcdf( 2.0, 0.5, -1.0 )\ny = base.dists.beta.logcdf( NaN, 1.0, 1.0 )\ny = base.dists.beta.logcdf( 0.0, NaN, 1.0 )\ny = base.dists.beta.logcdf( 0.0, 1.0, NaN )\n","base.dists.beta.logcdf.factory":"var mylogcdf = base.dists.beta.logcdf.factory( 0.5, 0.5 );\nvar y = mylogcdf( 0.8 )\ny = mylogcdf( 0.3 )\n","base.dists.beta.logpdf":"var y = base.dists.beta.logpdf( 0.5, 1.0, 1.0 )\ny = base.dists.beta.logpdf( 0.5, 2.0, 4.0 )\ny = base.dists.beta.logpdf( 0.2, 2.0, 2.0 )\ny = base.dists.beta.logpdf( 0.8, 4.0, 4.0 )\ny = base.dists.beta.logpdf( -0.5, 4.0, 2.0 )\ny = base.dists.beta.logpdf( 1.5, 4.0, 2.0 )\ny = base.dists.beta.logpdf( 0.5, -1.0, 0.5 )\ny = base.dists.beta.logpdf( 0.5, 0.5, -1.0 )\ny = base.dists.beta.logpdf( NaN, 1.0, 1.0 )\ny = base.dists.beta.logpdf( 0.5, NaN, 1.0 )\ny = base.dists.beta.logpdf( 0.5, 1.0, NaN )\n","base.dists.beta.logpdf.factory":"var mylogpdf = base.dists.beta.logpdf.factory( 0.5, 0.5 );\nvar y = mylogpdf( 0.8 )\ny = mylogpdf( 0.3 )\n","base.dists.beta.mean":"var v = base.dists.beta.mean( 1.0, 1.0 )\nv = base.dists.beta.mean( 4.0, 12.0 )\nv = base.dists.beta.mean( 8.0, 2.0 )\n","base.dists.beta.median":"var v = base.dists.beta.median( 1.0, 1.0 )\nv = base.dists.beta.median( 4.0, 12.0 )\nv = base.dists.beta.median( 8.0, 2.0 )\nv = base.dists.beta.median( 1.0, -0.1 )\nv = base.dists.beta.median( -0.1, 1.0 )\nv = base.dists.beta.median( 2.0, NaN )\nv = base.dists.beta.median( NaN, 2.0 )\n","base.dists.beta.mgf":"var y = base.dists.beta.mgf( 0.5, 1.0, 1.0 )\ny = base.dists.beta.mgf( 0.5, 2.0, 4.0 )\ny = base.dists.beta.mgf( 3.0, 2.0, 2.0 )\ny = base.dists.beta.mgf( -0.8, 4.0, 4.0 )\ny = base.dists.beta.mgf( NaN, 1.0, 1.0 )\ny = base.dists.beta.mgf( 0.0, NaN, 1.0 )\ny = base.dists.beta.mgf( 0.0, 1.0, NaN )\ny = base.dists.beta.mgf( 2.0, -1.0, 0.5 )\ny = base.dists.beta.mgf( 2.0, 0.0, 0.5 )\ny = base.dists.beta.mgf( 2.0, 0.5, -1.0 )\ny = base.dists.beta.mgf( 2.0, 0.5, 0.0 )\n","base.dists.beta.mgf.factory":"var myMGF = base.dists.beta.mgf.factory( 0.5, 0.5 );\nvar y = myMGF( 0.8 )\ny = myMGF( 0.3 )\n","base.dists.beta.mode":"var v = base.dists.beta.mode( 4.0, 12.0 )\nv = base.dists.beta.mode( 8.0, 2.0 )\nv = base.dists.beta.mode( 1.0, 1.0 )\n","base.dists.beta.pdf":"var y = base.dists.beta.pdf( 0.5, 1.0, 1.0 )\ny = base.dists.beta.pdf( 0.5, 2.0, 4.0 )\ny = base.dists.beta.pdf( 0.2, 2.0, 2.0 )\ny = base.dists.beta.pdf( 0.8, 4.0, 4.0 )\ny = base.dists.beta.pdf( -0.5, 4.0, 2.0 )\ny = base.dists.beta.pdf( 1.5, 4.0, 2.0 )\ny = base.dists.beta.pdf( 0.5, -1.0, 0.5 )\ny = base.dists.beta.pdf( 0.5, 0.5, -1.0 )\ny = base.dists.beta.pdf( NaN, 1.0, 1.0 )\ny = base.dists.beta.pdf( 0.5, NaN, 1.0 )\ny = base.dists.beta.pdf( 0.5, 1.0, NaN )\n","base.dists.beta.pdf.factory":"var mypdf = base.dists.beta.pdf.factory( 0.5, 0.5 );\nvar y = mypdf( 0.8 )\ny = mypdf( 0.3 )\n","base.dists.beta.quantile":"var y = base.dists.beta.quantile( 0.8, 2.0, 1.0 )\ny = base.dists.beta.quantile( 0.5, 4.0, 2.0 )\ny = base.dists.beta.quantile( 1.1, 1.0, 1.0 )\ny = base.dists.beta.quantile( -0.2, 1.0, 1.0 )\ny = base.dists.beta.quantile( NaN, 1.0, 1.0 )\ny = base.dists.beta.quantile( 0.5, NaN, 1.0 )\ny = base.dists.beta.quantile( 0.5, 1.0, NaN )\ny = base.dists.beta.quantile( 0.5, -1.0, 1.0 )\ny = base.dists.beta.quantile( 0.5, 1.0, -1.0 )\n","base.dists.beta.quantile.factory":"var myquantile = base.dists.beta.quantile.factory( 2.0, 2.0 );\ny = myquantile( 0.8 )\ny = myquantile( 0.4 )\n","base.dists.beta.skewness":"var v = base.dists.beta.skewness( 1.0, 1.0 )\nv = base.dists.beta.skewness( 4.0, 12.0 )\nv = base.dists.beta.skewness( 8.0, 2.0 )\nv = base.dists.beta.skewness( 1.0, -0.1 )\nv = base.dists.beta.skewness( -0.1, 1.0 )\nv = base.dists.beta.skewness( 2.0, NaN )\nv = base.dists.beta.skewness( NaN, 2.0 )\n","base.dists.beta.stdev":"var v = base.dists.beta.stdev( 1.0, 1.0 )\nv = base.dists.beta.stdev( 4.0, 12.0 )\nv = base.dists.beta.stdev( 8.0, 2.0 )\nv = base.dists.beta.stdev( 1.0, -0.1 )\nv = base.dists.beta.stdev( -0.1, 1.0 )\nv = base.dists.beta.stdev( 2.0, NaN )\nv = base.dists.beta.stdev( NaN, 2.0 )\n","base.dists.beta.variance":"var v = base.dists.beta.variance( 1.0, 1.0 )\nv = base.dists.beta.variance( 4.0, 12.0 )\nv = base.dists.beta.variance( 8.0, 2.0 )\nv = base.dists.beta.variance( 1.0, -0.1 )\nv = base.dists.beta.variance( -0.1, 1.0 )\nv = base.dists.beta.variance( 2.0, NaN )\nv = base.dists.beta.variance( NaN, 2.0 )\n","base.dists.betaprime.BetaPrime":"var betaprime = base.dists.betaprime.BetaPrime( 6.0, 5.0 );\nbetaprime.alpha\nbetaprime.beta\nbetaprime.kurtosis\nbetaprime.mean\nbetaprime.mode\nbetaprime.skewness\nbetaprime.stdev\nbetaprime.variance\nbetaprime.cdf( 0.8 )\nbetaprime.logcdf( 0.8 )\nbetaprime.logpdf( 1.0 )\nbetaprime.pdf( 1.0 )\nbetaprime.quantile( 0.8 )\n","base.dists.betaprime.cdf":"var y = base.dists.betaprime.cdf( 0.5, 1.0, 1.0 )\ny = base.dists.betaprime.cdf( 0.5, 2.0, 4.0 )\ny = base.dists.betaprime.cdf( 0.2, 2.0, 2.0 )\ny = base.dists.betaprime.cdf( 0.8, 4.0, 4.0 )\ny = base.dists.betaprime.cdf( -0.5, 4.0, 2.0 )\ny = base.dists.betaprime.cdf( 2.0, -1.0, 0.5 )\ny = base.dists.betaprime.cdf( 2.0, 0.5, -1.0 )\ny = base.dists.betaprime.cdf( NaN, 1.0, 1.0 )\ny = base.dists.betaprime.cdf( 0.0, NaN, 1.0 )\ny = base.dists.betaprime.cdf( 0.0, 1.0, NaN )\n","base.dists.betaprime.cdf.factory":"var mycdf = base.dists.betaprime.cdf.factory( 0.5, 0.5 );\nvar y = mycdf( 0.8 )\ny = mycdf( 0.3 )\n","base.dists.betaprime.kurtosis":"var v = base.dists.betaprime.kurtosis( 2.0, 6.0 )\nv = base.dists.betaprime.kurtosis( 4.0, 12.0 )\nv = base.dists.betaprime.kurtosis( 8.0, 6.0 )\nv = base.dists.betaprime.kurtosis( 1.0, 2.8 )\nv = base.dists.betaprime.kurtosis( 1.0, -0.1 )\nv = base.dists.betaprime.kurtosis( -0.1, 5.0 )\nv = base.dists.betaprime.kurtosis( 2.0, NaN )\nv = base.dists.betaprime.kurtosis( NaN, 6.0 )\n","base.dists.betaprime.logcdf":"var y = base.dists.betaprime.logcdf( 0.5, 1.0, 1.0 )\ny = base.dists.betaprime.logcdf( 0.5, 2.0, 4.0 )\ny = base.dists.betaprime.logcdf( 0.2, 2.0, 2.0 )\ny = base.dists.betaprime.logcdf( 0.8, 4.0, 4.0 )\ny = base.dists.betaprime.logcdf( -0.5, 4.0, 2.0 )\ny = base.dists.betaprime.logcdf( 2.0, -1.0, 0.5 )\ny = base.dists.betaprime.logcdf( 2.0, 0.5, -1.0 )\ny = base.dists.betaprime.logcdf( NaN, 1.0, 1.0 )\ny = base.dists.betaprime.logcdf( 0.0, NaN, 1.0 )\ny = base.dists.betaprime.logcdf( 0.0, 1.0, NaN )\n","base.dists.betaprime.logcdf.factory":"var mylogcdf = base.dists.betaprime.logcdf.factory( 0.5, 0.5 );\nvar y = mylogcdf( 0.8 )\ny = mylogcdf( 0.3 )\n","base.dists.betaprime.logpdf":"var y = base.dists.betaprime.logpdf( 0.5, 1.0, 1.0 )\ny = base.dists.betaprime.logpdf( 0.5, 2.0, 4.0 )\ny = base.dists.betaprime.logpdf( 0.2, 2.0, 2.0 )\ny = base.dists.betaprime.logpdf( 0.8, 4.0, 4.0 )\ny = base.dists.betaprime.logpdf( -0.5, 4.0, 2.0 )\ny = base.dists.betaprime.logpdf( 0.5, -1.0, 0.5 )\ny = base.dists.betaprime.logpdf( 0.5, 0.5, -1.0 )\ny = base.dists.betaprime.logpdf( NaN, 1.0, 1.0 )\ny = base.dists.betaprime.logpdf( 0.5, NaN, 1.0 )\ny = base.dists.betaprime.logpdf( 0.5, 1.0, NaN )\n","base.dists.betaprime.logpdf.factory":"var mylogpdf = base.dists.betaprime.logpdf.factory( 0.5, 0.5 );\nvar y = mylogpdf( 0.8 )\ny = mylogpdf( 0.3 )\n","base.dists.betaprime.mean":"var v = base.dists.betaprime.mean( 1.0, 2.0 )\nv = base.dists.betaprime.mean( 4.0, 12.0 )\nv = base.dists.betaprime.mean( 8.0, 2.0 )\n","base.dists.betaprime.mode":"var v = base.dists.betaprime.mode( 1.0, 2.0 )\nv = base.dists.betaprime.mode( 4.0, 12.0 )\nv = base.dists.betaprime.mode( 8.0, 2.0 )\n","base.dists.betaprime.pdf":"var y = base.dists.betaprime.pdf( 0.5, 1.0, 1.0 )\ny = base.dists.betaprime.pdf( 0.5, 2.0, 4.0 )\ny = base.dists.betaprime.pdf( 0.2, 2.0, 2.0 )\ny = base.dists.betaprime.pdf( 0.8, 4.0, 4.0 )\ny = base.dists.betaprime.pdf( -0.5, 4.0, 2.0 )\ny = base.dists.betaprime.pdf( 0.5, -1.0, 0.5 )\ny = base.dists.betaprime.pdf( 0.5, 0.5, -1.0 )\ny = base.dists.betaprime.pdf( NaN, 1.0, 1.0 )\ny = base.dists.betaprime.pdf( 0.5, NaN, 1.0 )\ny = base.dists.betaprime.pdf( 0.5, 1.0, NaN )\n","base.dists.betaprime.pdf.factory":"var mypdf = base.dists.betaprime.pdf.factory( 0.5, 0.5 );\nvar y = mypdf( 0.8 )\ny = mypdf( 0.3 )\n","base.dists.betaprime.quantile":"var y = base.dists.betaprime.quantile( 0.8, 2.0, 1.0 )\ny = base.dists.betaprime.quantile( 0.5, 4.0, 2.0 )\ny = base.dists.betaprime.quantile( 1.1, 1.0, 1.0 )\ny = base.dists.betaprime.quantile( -0.2, 1.0, 1.0 )\ny = base.dists.betaprime.quantile( NaN, 1.0, 1.0 )\ny = base.dists.betaprime.quantile( 0.5, NaN, 1.0 )\ny = base.dists.betaprime.quantile( 0.5, 1.0, NaN )\ny = base.dists.betaprime.quantile( 0.5, -1.0, 1.0 )\ny = base.dists.betaprime.quantile( 0.5, 1.0, -1.0 )\n","base.dists.betaprime.quantile.factory":"var myQuantile = base.dists.betaprime.quantile.factory( 2.0, 2.0 );\ny = myQuantile( 0.8 )\ny = myQuantile( 0.4 )\n","base.dists.betaprime.skewness":"var v = base.dists.betaprime.skewness( 2.0, 4.0 )\nv = base.dists.betaprime.skewness( 4.0, 12.0 )\nv = base.dists.betaprime.skewness( 8.0, 4.0 )\nv = base.dists.betaprime.skewness( 1.0, 2.8 )\nv = base.dists.betaprime.skewness( 1.0, -0.1 )\nv = base.dists.betaprime.skewness( -0.1, 4.0 )\nv = base.dists.betaprime.skewness( 2.0, NaN )\nv = base.dists.betaprime.skewness( NaN, 4.0 )\n","base.dists.betaprime.stdev":"var v = base.dists.betaprime.stdev( 1.0, 2.5 )\nv = base.dists.betaprime.stdev( 4.0, 12.0 )\nv = base.dists.betaprime.stdev( 8.0, 2.5 )\nv = base.dists.betaprime.stdev( 8.0, 1.0 )\nv = base.dists.betaprime.stdev( 1.0, -0.1 )\nv = base.dists.betaprime.stdev( -0.1, 3.0 )\nv = base.dists.betaprime.stdev( 2.0, NaN )\nv = base.dists.betaprime.stdev( NaN, 3.0 )\n","base.dists.betaprime.variance":"var v = base.dists.betaprime.variance( 1.0, 2.5 )\nv = base.dists.betaprime.variance( 4.0, 12.0 )\nv = base.dists.betaprime.variance( 8.0, 2.5 )\nv = base.dists.betaprime.variance( 8.0, 1.0 )\nv = base.dists.betaprime.variance( 1.0, -0.1 )\nv = base.dists.betaprime.variance( -0.1, 3.0 )\nv = base.dists.betaprime.variance( 2.0, NaN )\nv = base.dists.betaprime.variance( NaN, 3.0 )\n","base.dists.binomial.Binomial":"var binomial = base.dists.binomial.Binomial( 8, 0.5 );\nbinomial.n\nbinomial.p\nbinomial.kurtosis\nbinomial.mean\nbinomial.median\nbinomial.mode\nbinomial.skewness\nbinomial.stdev\nbinomial.variance\nbinomial.cdf( 2.9 )\nbinomial.logpmf( 3.0 )\nbinomial.mgf( 0.2 )\nbinomial.pmf( 3.0 )\nbinomial.quantile( 0.8 )\n","base.dists.binomial.cdf":"var y = base.dists.binomial.cdf( 3.0, 20, 0.2 )\ny = base.dists.binomial.cdf( 21.0, 20, 0.2 )\ny = base.dists.binomial.cdf( 5.0, 10, 0.4 )\ny = base.dists.binomial.cdf( 0.0, 10, 0.4 )\ny = base.dists.binomial.cdf( NaN, 20, 0.5 )\ny = base.dists.binomial.cdf( 0.0, NaN, 0.5 )\ny = base.dists.binomial.cdf( 0.0, 20, NaN )\ny = base.dists.binomial.cdf( 2.0, 1.5, 0.5 )\ny = base.dists.binomial.cdf( 2.0, -2.0, 0.5 )\ny = base.dists.binomial.cdf( 2.0, 20, -1.0 )\ny = base.dists.binomial.cdf( 2.0, 20, 1.5 )\n","base.dists.binomial.cdf.factory":"var mycdf = base.dists.binomial.cdf.factory( 10, 0.5 );\nvar y = mycdf( 3.0 )\ny = mycdf( 1.0 )\n","base.dists.binomial.entropy":"var v = base.dists.binomial.entropy( 100, 0.1 )\nv = base.dists.binomial.entropy( 20, 0.5 )\nv = base.dists.binomial.entropy( 10.3, 0.5 )\nv = base.dists.binomial.entropy( 20, 1.1 )\nv = base.dists.binomial.entropy( 20, NaN )\n","base.dists.binomial.kurtosis":"var v = base.dists.binomial.kurtosis( 100, 0.1 )\nv = base.dists.binomial.kurtosis( 20, 0.5 )\nv = base.dists.binomial.kurtosis( 10.3, 0.5 )\nv = base.dists.binomial.kurtosis( 20, 1.1 )\nv = base.dists.binomial.kurtosis( 20, NaN )\n","base.dists.binomial.logpmf":"var y = base.dists.binomial.logpmf( 3.0, 20, 0.2 )\ny = base.dists.binomial.logpmf( 21.0, 20, 0.2 )\ny = base.dists.binomial.logpmf( 5.0, 10, 0.4 )\ny = base.dists.binomial.logpmf( 0.0, 10, 0.4 )\ny = base.dists.binomial.logpmf( NaN, 20, 0.5 )\ny = base.dists.binomial.logpmf( 0.0, NaN, 0.5 )\ny = base.dists.binomial.logpmf( 0.0, 20, NaN )\ny = base.dists.binomial.logpmf( 2.0, 1.5, 0.5 )\ny = base.dists.binomial.logpmf( 2.0, -2.0, 0.5 )\ny = base.dists.binomial.logpmf( 2.0, 20, -1.0 )\ny = base.dists.binomial.logpmf( 2.0, 20, 1.5 )\n","base.dists.binomial.logpmf.factory":"var mylogpmf = base.dists.binomial.logpmf.factory( 10, 0.5 );\nvar y = mylogpmf( 3.0 )\ny = mylogpmf( 5.0 )\n","base.dists.binomial.mean":"var v = base.dists.binomial.mean( 100, 0.1 )\nv = base.dists.binomial.mean( 20, 0.5 )\nv = base.dists.binomial.mean( 10.3, 0.5 )\nv = base.dists.binomial.mean( 20, 1.1 )\nv = base.dists.binomial.mean( 20, NaN )\n","base.dists.binomial.median":"var v = base.dists.binomial.median( 100, 0.1 )\nv = base.dists.binomial.median( 20, 0.5 )\nv = base.dists.binomial.median( 10.3, 0.5 )\nv = base.dists.binomial.median( 20, 1.1 )\nv = base.dists.binomial.median( 20, NaN )\n","base.dists.binomial.mgf":"var y = base.dists.binomial.mgf( 0.5, 20, 0.2 )\ny = base.dists.binomial.mgf( 5.0, 20, 0.2 )\ny = base.dists.binomial.mgf( 0.9, 10, 0.4 )\ny = base.dists.binomial.mgf( 0.0, 10, 0.4 )\ny = base.dists.binomial.mgf( NaN, 20, 0.5 )\ny = base.dists.binomial.mgf( 0.0, NaN, 0.5 )\ny = base.dists.binomial.mgf( 0.0, 20, NaN )\ny = base.dists.binomial.mgf( 2.0, 1.5, 0.5 )\ny = base.dists.binomial.mgf( 2.0, -2.0, 0.5 )\ny = base.dists.binomial.mgf( 2.0, 20, -1.0 )\ny = base.dists.binomial.mgf( 2.0, 20, 1.5 )\n","base.dists.binomial.mgf.factory":"var myMGF = base.dists.binomial.mgf.factory( 10, 0.5 );\nvar y = myMGF( 0.3 )\n","base.dists.binomial.mode":"var v = base.dists.binomial.mode( 100, 0.1 )\nv = base.dists.binomial.mode( 20, 0.5 )\nv = base.dists.binomial.mode( 10.3, 0.5 )\nv = base.dists.binomial.mode( 20, 1.1 )\nv = base.dists.binomial.mode( 20, NaN )\n","base.dists.binomial.pmf":"var y = base.dists.binomial.pmf( 3.0, 20, 0.2 )\ny = base.dists.binomial.pmf( 21.0, 20, 0.2 )\ny = base.dists.binomial.pmf( 5.0, 10, 0.4 )\ny = base.dists.binomial.pmf( 0.0, 10, 0.4 )\ny = base.dists.binomial.pmf( NaN, 20, 0.5 )\ny = base.dists.binomial.pmf( 0.0, NaN, 0.5 )\ny = base.dists.binomial.pmf( 0.0, 20, NaN )\ny = base.dists.binomial.pmf( 2.0, 1.5, 0.5 )\ny = base.dists.binomial.pmf( 2.0, -2.0, 0.5 )\ny = base.dists.binomial.pmf( 2.0, 20, -1.0 )\ny = base.dists.binomial.pmf( 2.0, 20, 1.5 )\n","base.dists.binomial.pmf.factory":"var mypmf = base.dists.binomial.pmf.factory( 10, 0.5 );\nvar y = mypmf( 3.0 )\ny = mypmf( 5.0 )\n","base.dists.binomial.quantile":"var y = base.dists.binomial.quantile( 0.4, 20, 0.2 )\ny = base.dists.binomial.quantile( 0.8, 20, 0.2 )\ny = base.dists.binomial.quantile( 0.5, 10, 0.4 )\ny = base.dists.binomial.quantile( 0.0, 10, 0.4 )\ny = base.dists.binomial.quantile( 1.0, 10, 0.4 )\ny = base.dists.binomial.quantile( NaN, 20, 0.5 )\ny = base.dists.binomial.quantile( 0.2, NaN, 0.5 )\ny = base.dists.binomial.quantile( 0.2, 20, NaN )\ny = base.dists.binomial.quantile( 0.5, 1.5, 0.5 )\ny = base.dists.binomial.quantile( 0.5, -2.0, 0.5 )\ny = base.dists.binomial.quantile( 0.5, 20, -1.0 )\ny = base.dists.binomial.quantile( 0.5, 20, 1.5 )\n","base.dists.binomial.quantile.factory":"var myquantile = base.dists.binomial.quantile.factory( 10, 0.5 );\nvar y = myquantile( 0.1 )\ny = myquantile( 0.9 )\n","base.dists.binomial.skewness":"var v = base.dists.binomial.skewness( 100, 0.1 )\nv = base.dists.binomial.skewness( 20, 0.5 )\nv = base.dists.binomial.skewness( 10.3, 0.5 )\nv = base.dists.binomial.skewness( 20, 1.1 )\nv = base.dists.binomial.skewness( 20, NaN )\n","base.dists.binomial.stdev":"var v = base.dists.binomial.stdev( 100, 0.1 )\nv = base.dists.binomial.stdev( 20, 0.5 )\nv = base.dists.binomial.stdev( 10.3, 0.5 )\nv = base.dists.binomial.stdev( 20, 1.1 )\nv = base.dists.binomial.stdev( 20, NaN )\n","base.dists.binomial.variance":"var v = base.dists.binomial.variance( 100, 0.1 )\nv = base.dists.binomial.variance( 20, 0.5 )\nv = base.dists.binomial.variance( 10.3, 0.5 )\nv = base.dists.binomial.variance( 20, 1.1 )\nv = base.dists.binomial.variance( 20, NaN )\n","base.dists.cauchy.Cauchy":"var cauchy = base.dists.cauchy.Cauchy( 0.0, 1.0 );\ncauchy.x0\ncauchy.gamma\ncauchy.entropy\ncauchy.median\ncauchy.mode\ncauchy.cdf( 0.8 )\ncauchy.logcdf( 1.0 )\ncauchy.logpdf( 1.0 )\ncauchy.pdf( 1.0 )\ncauchy.quantile( 0.8 )\n","base.dists.cauchy.cdf":"var y = base.dists.cauchy.cdf( 4.0, 0.0, 2.0 )\ny = base.dists.cauchy.cdf( 1.0, 0.0, 2.0 )\ny = base.dists.cauchy.cdf( 1.0, 3.0, 2.0 )\ny = base.dists.cauchy.cdf( NaN, 0.0, 2.0 )\ny = base.dists.cauchy.cdf( 1.0, 2.0, NaN )\ny = base.dists.cauchy.cdf( 1.0, NaN, 3.0 )\n","base.dists.cauchy.cdf.factory":"var myCDF = base.dists.cauchy.cdf.factory( 1.5, 3.0 );\nvar y = myCDF( 1.0 )\n","base.dists.cauchy.entropy":"var v = base.dists.cauchy.entropy( 10.0, 7.0 )\nv = base.dists.cauchy.entropy( 22.0, 0.5 )\nv = base.dists.cauchy.entropy( 10.3, -0.5 )\n","base.dists.cauchy.logcdf":"var y = base.dists.cauchy.logcdf( 4.0, 0.0, 2.0 )\ny = base.dists.cauchy.logcdf( 1.0, 0.0, 2.0 )\ny = base.dists.cauchy.logcdf( 1.0, 3.0, 2.0 )\ny = base.dists.cauchy.logcdf( NaN, 0.0, 2.0 )\ny = base.dists.cauchy.logcdf( 1.0, 2.0, NaN )\ny = base.dists.cauchy.logcdf( 1.0, NaN, 3.0 )\n","base.dists.cauchy.logcdf.factory":"var mylogCDF = base.dists.cauchy.logcdf.factory( 1.5, 3.0 );\nvar y = mylogCDF( 1.0 )\n","base.dists.cauchy.logpdf":"var y = base.dists.cauchy.logpdf( 2.0, 1.0, 1.0 )\ny = base.dists.cauchy.logpdf( 4.0, 3.0, 0.1 )\ny = base.dists.cauchy.logpdf( 4.0, 3.0, 3.0 )\ny = base.dists.cauchy.logpdf( NaN, 1.0, 1.0 )\ny = base.dists.cauchy.logpdf( 2.0, NaN, 1.0 )\ny = base.dists.cauchy.logpdf( 2.0, 1.0, NaN )\ny = base.dists.cauchy.logpdf( 2.0, 1.0, -2.0 )\n","base.dists.cauchy.logpdf.factory":"var mylogPDF = base.dists.cauchy.logpdf.factory( 10.0, 2.0 );\nvar y = mylogPDF( 10.0 )\n","base.dists.cauchy.median":"var v = base.dists.cauchy.median( 10.0, 5.0 )\nv = base.dists.cauchy.median( 7.0, 0.5 )\nv = base.dists.cauchy.median( 10.3, -0.5 )\n","base.dists.cauchy.mode":"var v = base.dists.cauchy.mode( 10.0, 5.0 )\nv = base.dists.cauchy.mode( 7.0, 0.5 )\nv = base.dists.cauchy.mode( 10.3, -0.5 )\n","base.dists.cauchy.pdf":"var y = base.dists.cauchy.pdf( 2.0, 1.0, 1.0 )\ny = base.dists.cauchy.pdf( 4.0, 3.0, 0.1 )\ny = base.dists.cauchy.pdf( 4.0, 3.0, 3.0 )\ny = base.dists.cauchy.pdf( NaN, 1.0, 1.0 )\ny = base.dists.cauchy.pdf( 2.0, NaN, 1.0 )\ny = base.dists.cauchy.pdf( 2.0, 1.0, NaN )\ny = base.dists.cauchy.pdf( 2.0, 1.0, -2.0 )\n","base.dists.cauchy.pdf.factory":"var myPDF = base.dists.cauchy.pdf.factory( 10.0, 2.0 );\nvar y = myPDF( 10.0 )\n","base.dists.cauchy.quantile":"var y = base.dists.cauchy.quantile( 0.3, 2.0, 2.0 )\ny = base.dists.cauchy.quantile( 0.8, 10, 2.0 )\ny = base.dists.cauchy.quantile( 0.1, 10.0, 2.0 )\ny = base.dists.cauchy.quantile( 1.1, 0.0, 1.0 )\ny = base.dists.cauchy.quantile( -0.2, 0.0, 1.0 )\ny = base.dists.cauchy.quantile( NaN, 0.0, 1.0 )\ny = base.dists.cauchy.quantile( 0.0, NaN, 1.0 )\ny = base.dists.cauchy.quantile( 0.0, 0.0, NaN )\ny = base.dists.cauchy.quantile( 0.5, 0.0, -1.0 )\n","base.dists.cauchy.quantile.factory":"var myQuantile = base.dists.cauchy.quantile.factory( 10.0, 2.0 );\nvar y = myQuantile( 0.5 )\n","base.dists.chi.cdf":"var y = base.dists.chi.cdf( 2.0, 3.0 )\ny = base.dists.chi.cdf( 1.0, 0.5 )\ny = base.dists.chi.cdf( -1.0, 4.0 )\ny = base.dists.chi.cdf( NaN, 1.0 )\ny = base.dists.chi.cdf( 0.0, NaN )\ny = base.dists.chi.cdf( 2.0, -1.0 )\ny = base.dists.chi.cdf( 2.0, 0.0 )\ny = base.dists.chi.cdf( -2.0, 0.0 )\ny = base.dists.chi.cdf( 0.0, 0.0 )\n","base.dists.chi.cdf.factory":"var mycdf = base.dists.chi.cdf.factory( 1.0 );\nvar y = mycdf( 2.0 )\ny = mycdf( 1.2 )\n","base.dists.chi.Chi":"var chi = base.dists.chi.Chi( 6.0 );\nchi.k\nchi.entropy\nchi.kurtosis\nchi.mean\nchi.mode\nchi.skewness\nchi.stdev\nchi.variance\nchi.cdf( 1.0 )\nchi.logpdf( 1.5 )\nchi.pdf( 1.5 )\nchi.quantile( 0.5 )\n","base.dists.chi.entropy":"var v = base.dists.chi.entropy( 11.0 )\nv = base.dists.chi.entropy( 1.5 )\n","base.dists.chi.kurtosis":"var v = base.dists.chi.kurtosis( 9.0 )\nv = base.dists.chi.kurtosis( 1.5 )\n","base.dists.chi.logpdf":"var y = base.dists.chi.logpdf( 0.3, 4.0 )\ny = base.dists.chi.logpdf( 0.7, 0.7 )\ny = base.dists.chi.logpdf( -1.0, 0.5 )\ny = base.dists.chi.logpdf( 0.0, NaN )\ny = base.dists.chi.logpdf( NaN, 2.0 )\ny = base.dists.chi.logpdf( 2.0, -1.0 )\ny = base.dists.chi.logpdf( 2.0, 0.0, 2.0 )\ny = base.dists.chi.logpdf( 0.0, 0.0, 2.0 )\n","base.dists.chi.logpdf.factory":"var mylogPDF = base.dists.chi.logpdf.factory( 6.0 );\nvar y = mylogPDF( 3.0 )\n","base.dists.chi.mean":"var v = base.dists.chi.mean( 11.0 )\nv = base.dists.chi.mean( 4.5 )\n","base.dists.chi.mode":"var v = base.dists.chi.mode( 11.0 )\nv = base.dists.chi.mode( 1.5 )\n","base.dists.chi.pdf":"var y = base.dists.chi.pdf( 0.3, 4.0 )\ny = base.dists.chi.pdf( 0.7, 0.7 )\ny = base.dists.chi.pdf( -1.0, 0.5 )\ny = base.dists.chi.pdf( 0.0, NaN )\ny = base.dists.chi.pdf( NaN, 2.0 )\ny = base.dists.chi.pdf( 2.0, -1.0 )\ny = base.dists.chi.pdf( 2.0, 0.0, 2.0 )\ny = base.dists.chi.pdf( 0.0, 0.0, 2.0 )\n","base.dists.chi.pdf.factory":"var myPDF = base.dists.chi.pdf.factory( 6.0 );\nvar y = myPDF( 3.0 )\n","base.dists.chi.quantile":"var y = base.dists.chi.quantile( 0.8, 1.0 )\ny = base.dists.chi.quantile( 0.5, 4.0 )\ny = base.dists.chi.quantile( 0.8, 0.1 )\ny = base.dists.chi.quantile( -0.2, 0.5 )\ny = base.dists.chi.quantile( 1.1, 0.5 )\ny = base.dists.chi.quantile( NaN, 1.0 )\ny = base.dists.chi.quantile( 0.0, NaN )\ny = base.dists.chi.quantile( 0.5, -1.0 )\ny = base.dists.chi.quantile( 0.3, 0.0 )\ny = base.dists.chi.quantile( 0.9, 0.0 )\n","base.dists.chi.quantile.factory":"var myquantile = base.dists.chi.quantile.factory( 2.0 );\nvar y = myquantile( 0.3 )\ny = myquantile( 0.7 )\n","base.dists.chi.skewness":"var v = base.dists.chi.skewness( 11.0 )\nv = base.dists.chi.skewness( 1.5 )\n","base.dists.chi.stdev":"var v = base.dists.chi.stdev( 11.0 )\nv = base.dists.chi.stdev( 1.5 )\n","base.dists.chi.variance":"var v = base.dists.chi.variance( 11.0 )\nv = base.dists.chi.variance( 1.5 )\n","base.dists.chisquare.cdf":"var y = base.dists.chisquare.cdf( 2.0, 3.0 )\ny = base.dists.chisquare.cdf( 1.0, 0.5 )\ny = base.dists.chisquare.cdf( -1.0, 4.0 )\ny = base.dists.chisquare.cdf( NaN, 1.0 )\ny = base.dists.chisquare.cdf( 0.0, NaN )\ny = base.dists.chisquare.cdf( 2.0, -1.0 )\ny = base.dists.chisquare.cdf( 2.0, 0.0 )\ny = base.dists.chisquare.cdf( -2.0, 0.0 )\ny = base.dists.chisquare.cdf( 0.0, 0.0 )\n","base.dists.chisquare.cdf.factory":"var mycdf = base.dists.chisquare.cdf.factory( 1.0 );\nvar y = mycdf( 2.0 )\ny = mycdf( 1.2 )\n","base.dists.chisquare.ChiSquare":"var chisquare = base.dists.chisquare.ChiSquare( 6.0 );\nchisquare.k\nchisquare.entropy\nchisquare.kurtosis\nchisquare.mean\nchisquare.median\nchisquare.mode\nchisquare.skewness\nchisquare.stdev\nchisquare.variance\nchisquare.cdf( 3.0 )\nchisquare.mgf( 0.2 )\nchisquare.pdf( 1.5 )\nchisquare.quantile( 0.5 )\n","base.dists.chisquare.entropy":"var v = base.dists.chisquare.entropy( 11.0 )\nv = base.dists.chisquare.entropy( 1.5 )\n","base.dists.chisquare.kurtosis":"var v = base.dists.chisquare.kurtosis( 9.0 )\nv = base.dists.chisquare.kurtosis( 1.5 )\n","base.dists.chisquare.logpdf":"var y = base.dists.chisquare.logpdf( 0.3, 4.0 )\ny = base.dists.chisquare.logpdf( 0.7, 0.7 )\ny = base.dists.chisquare.logpdf( -1.0, 0.5 )\ny = base.dists.chisquare.logpdf( 0.0, NaN )\ny = base.dists.chisquare.logpdf( NaN, 2.0 )\ny = base.dists.chisquare.logpdf( 2.0, -1.0 )\ny = base.dists.chisquare.logpdf( 2.0, 0.0, 2.0 )\ny = base.dists.chisquare.logpdf( 0.0, 0.0, 2.0 )\n","base.dists.chisquare.logpdf.factory":"var myLogPDF = base.dists.chisquare.logpdf.factory( 6.0 );\nvar y = myLogPDF( 3.0 )\n","base.dists.chisquare.mean":"var v = base.dists.chisquare.mean( 11.0 )\nv = base.dists.chisquare.mean( 4.5 )\n","base.dists.chisquare.median":"var k = base.dists.chisquare.median( 9.0 )\nk = base.dists.chisquare.median( 2.0 )\n","base.dists.chisquare.mgf":"var y = base.dists.chisquare.mgf( 0.4, 2 )\ny = base.dists.chisquare.mgf( -1.0, 5.0 )\ny = base.dists.chisquare.mgf( 0.0, 10.0 )\n","base.dists.chisquare.mgf.factory":"var mymgf = base.dists.chisquare.mgf.factory( 1.0 );\nvar y = mymgf( 0.2 )\ny = mymgf( 0.4 )\n","base.dists.chisquare.mode":"var v = base.dists.chisquare.mode( 11.0 )\nv = base.dists.chisquare.mode( 1.5 )\n","base.dists.chisquare.pdf":"var y = base.dists.chisquare.pdf( 0.3, 4.0 )\ny = base.dists.chisquare.pdf( 0.7, 0.7 )\ny = base.dists.chisquare.pdf( -1.0, 0.5 )\ny = base.dists.chisquare.pdf( 0.0, NaN )\ny = base.dists.chisquare.pdf( NaN, 2.0 )\ny = base.dists.chisquare.pdf( 2.0, -1.0 )\ny = base.dists.chisquare.pdf( 2.0, 0.0, 2.0 )\ny = base.dists.chisquare.pdf( 0.0, 0.0, 2.0 )\n","base.dists.chisquare.pdf.factory":"var myPDF = base.dists.chisquare.pdf.factory( 6.0 );\nvar y = myPDF( 3.0 )\n","base.dists.chisquare.quantile":"var y = base.dists.chisquare.quantile( 0.8, 1.0 )\ny = base.dists.chisquare.quantile( 0.5, 4.0 )\ny = base.dists.chisquare.quantile( 0.8, 0.1 )\ny = base.dists.chisquare.quantile( -0.2, 0.5 )\ny = base.dists.chisquare.quantile( 1.1, 0.5 )\ny = base.dists.chisquare.quantile( NaN, 1.0 )\ny = base.dists.chisquare.quantile( 0.0, NaN )\ny = base.dists.chisquare.quantile( 0.5, -1.0 )\ny = base.dists.chisquare.quantile( 0.3, 0.0 )\ny = base.dists.chisquare.quantile( 0.9, 0.0 )\n","base.dists.chisquare.quantile.factory":"var myquantile = base.dists.chisquare.quantile.factory( 2.0 );\nvar y = myquantile( 0.3 )\ny = myquantile( 0.7 )\n","base.dists.chisquare.skewness":"var v = base.dists.chisquare.skewness( 11.0 )\nv = base.dists.chisquare.skewness( 1.5 )\n","base.dists.chisquare.stdev":"var v = base.dists.chisquare.stdev( 11.0 )\nv = base.dists.chisquare.stdev( 1.5 )\n","base.dists.chisquare.variance":"var v = base.dists.chisquare.variance( 11.0 )\nv = base.dists.chisquare.variance( 1.5 )\n","base.dists.cosine.cdf":"var y = base.dists.cosine.cdf( 2.0, 0.0, 3.0 )\ny = base.dists.cosine.cdf( 9.0, 10.0, 3.0 )\ny = base.dists.cosine.cdf( 2.0, 0.0, NaN )\ny = base.dists.cosine.cdf( 2.0, NaN, 1.0 )\ny = base.dists.cosine.cdf( NaN, 0.0, 1.0 )\ny = base.dists.cosine.cdf( 2.0, 8.0, 0.0 )\ny = base.dists.cosine.cdf( 8.0, 8.0, 0.0 )\ny = base.dists.cosine.cdf( 10.0, 8.0, 0.0 )\n","base.dists.cosine.cdf.factory":"var mycdf = base.dists.cosine.cdf.factory( 3.0, 1.5 );\nvar y = mycdf( 1.9 )\n","base.dists.cosine.Cosine":"var cosine = base.dists.cosine.Cosine( -2.0, 3.0 );\ncosine.mu\ncosine.s\ncosine.kurtosis\ncosine.mean\ncosine.median\ncosine.mode\ncosine.skewness\ncosine.stdev\ncosine.variance\ncosine.cdf( 0.5 )\ncosine.logcdf( 0.5 )\ncosine.logpdf( -1.0 )\ncosine.mgf( 0.2 )\ncosine.pdf( -2.0 )\ncosine.quantile( 0.9 )\n","base.dists.cosine.kurtosis":"var y = base.dists.cosine.kurtosis( 0.0, 1.0 )\ny = base.dists.cosine.kurtosis( 4.0, 2.0 )\ny = base.dists.cosine.kurtosis( NaN, 1.0 )\ny = base.dists.cosine.kurtosis( 0.0, NaN )\ny = base.dists.cosine.kurtosis( 0.0, 0.0 )\n","base.dists.cosine.logcdf":"var y = base.dists.cosine.logcdf( 2.0, 0.0, 3.0 )\ny = base.dists.cosine.logcdf( 9.0, 10.0, 3.0 )\ny = base.dists.cosine.logcdf( 2.0, 0.0, NaN )\ny = base.dists.cosine.logcdf( 2.0, NaN, 1.0 )\ny = base.dists.cosine.logcdf( NaN, 0.0, 1.0 )\ny = base.dists.cosine.logcdf( 2.0, 8.0, 0.0 )\ny = base.dists.cosine.logcdf( 8.0, 8.0, 0.0 )\ny = base.dists.cosine.logcdf( 10.0, 8.0, 0.0 )\n","base.dists.cosine.logcdf.factory":"var mylogcdf = base.dists.cosine.logcdf.factory( 3.0, 1.5 );\nvar y = mylogcdf( 1.9 )\n","base.dists.cosine.logpdf":"var y = base.dists.cosine.logpdf( 2.0, 0.0, 3.0 )\ny = base.dists.cosine.logpdf( -1.0, 2.0, 4.0 )\ny = base.dists.cosine.logpdf( NaN, 0.0, 1.0 )\ny = base.dists.cosine.logpdf( 0.0, NaN, 1.0 )\ny = base.dists.cosine.logpdf( 0.0, 0.0, NaN )\ny = base.dists.cosine.logpdf( 2.0, 0.0, -1.0 )\ny = base.dists.cosine.logpdf( 2.0, 8.0, 0.0 )\ny = base.dists.cosine.logpdf( 8.0, 8.0, 0.0 )\n","base.dists.cosine.logpdf.factory":"var mylogpdf = base.dists.cosine.logpdf.factory( 10.0, 2.0 );\nvar y = mylogpdf( 10.0 )\n","base.dists.cosine.mean":"var y = base.dists.cosine.mean( 0.0, 1.0 )\ny = base.dists.cosine.mean( 4.0, 2.0 )\ny = base.dists.cosine.mean( NaN, 1.0 )\ny = base.dists.cosine.mean( 0.0, NaN )\ny = base.dists.cosine.mean( 0.0, 0.0 )\n","base.dists.cosine.median":"var y = base.dists.cosine.median( 0.0, 1.0 )\ny = base.dists.cosine.median( 4.0, 2.0 )\ny = base.dists.cosine.median( NaN, 1.0 )\ny = base.dists.cosine.median( 0.0, NaN )\ny = base.dists.cosine.median( 0.0, 0.0 )\n","base.dists.cosine.mgf":"var y = base.dists.cosine.mgf( 2.0, 0.0, 3.0 )\ny = base.dists.cosine.mgf( 9.0, 10.0, 3.0 )\ny = base.dists.cosine.mgf( 0.5, 0.0, NaN )\ny = base.dists.cosine.mgf( 0.5, NaN, 1.0 )\ny = base.dists.cosine.mgf( NaN, 0.0, 1.0 )\n","base.dists.cosine.mgf.factory":"var mymgf = base.dists.cosine.mgf.factory( 3.0, 1.5 );\nvar y = mymgf( 1.9 )\n","base.dists.cosine.mode":"var y = base.dists.cosine.mode( 0.0, 1.0 )\ny = base.dists.cosine.mode( 4.0, 2.0 )\ny = base.dists.cosine.mode( NaN, 1.0 )\ny = base.dists.cosine.mode( 0.0, NaN )\ny = base.dists.cosine.mode( 0.0, 0.0 )\n","base.dists.cosine.pdf":"var y = base.dists.cosine.pdf( 2.0, 0.0, 3.0 )\ny = base.dists.cosine.pdf( 2.4, 4.0, 2.0 )\ny = base.dists.cosine.pdf( NaN, 0.0, 1.0 )\ny = base.dists.cosine.pdf( 0.0, NaN, 1.0 )\ny = base.dists.cosine.pdf( 0.0, 0.0, NaN )\ny = base.dists.cosine.pdf( 2.0, 0.0, -1.0 )\ny = base.dists.cosine.pdf( 2.0, 8.0, 0.0 )\ny = base.dists.cosine.pdf( 8.0, 8.0, 0.0 )\n","base.dists.cosine.pdf.factory":"var myPDF = base.dists.cosine.pdf.factory( 0.0, 3.0 );\nvar y = myPDF( 2.0 )\n","base.dists.cosine.quantile":"var y = base.dists.cosine.quantile( 0.8, 0.0, 1.0 )\ny = base.dists.cosine.quantile( 0.5, 4.0, 2.0 )\ny = base.dists.cosine.quantile( 1.1, 0.0, 1.0 )\ny = base.dists.cosine.quantile( -0.2, 0.0, 1.0 )\ny = base.dists.cosine.quantile( NaN, 0.0, 1.0 )\ny = base.dists.cosine.quantile( 0.0, NaN, 1.0 )\ny = base.dists.cosine.quantile( 0.0, 0.0, NaN )\ny = base.dists.cosine.quantile( 0.5, 0.0, -1.0 )\n","base.dists.cosine.quantile.factory":"var myQuantile = base.dists.cosine.quantile.factory( 10.0, 2.0 );\nvar y = myQuantile( 0.3 )\n","base.dists.cosine.skewness":"var y = base.dists.cosine.skewness( 0.0, 1.0 )\ny = base.dists.cosine.skewness( 4.0, 2.0 )\ny = base.dists.cosine.skewness( NaN, 1.0 )\ny = base.dists.cosine.skewness( 0.0, NaN )\ny = base.dists.cosine.skewness( 0.0, 0.0 )\n","base.dists.cosine.stdev":"var y = base.dists.cosine.stdev( 0.0, 1.0 )\ny = base.dists.cosine.stdev( 4.0, 2.0 )\ny = base.dists.cosine.stdev( NaN, 1.0 )\ny = base.dists.cosine.stdev( 0.0, NaN )\ny = base.dists.cosine.stdev( 0.0, 0.0 )\n","base.dists.cosine.variance":"var y = base.dists.cosine.variance( 0.0, 1.0 )\ny = base.dists.cosine.variance( 4.0, 2.0 )\ny = base.dists.cosine.variance( NaN, 1.0 )\ny = base.dists.cosine.variance( 0.0, NaN )\ny = base.dists.cosine.variance( 0.0, 0.0 )\n","base.dists.degenerate.cdf":"var y = base.dists.degenerate.cdf( 2.0, 3.0 )\ny = base.dists.degenerate.cdf( 4.0, 3.0 )\ny = base.dists.degenerate.cdf( 3.0, 3.0 )\ny = base.dists.degenerate.cdf( NaN, 0.0 )\ny = base.dists.degenerate.cdf( 0.0, NaN )\n","base.dists.degenerate.cdf.factory":"var myCDF = base.dists.degenerate.cdf.factory( 5.0 );\nvar y = myCDF( 3.0 )\ny = myCDF( 6.0 )\n","base.dists.degenerate.Degenerate":"var degenerate = base.dists.degenerate.Degenerate( 2.0 );\ndegenerate.mu\ndegenerate.entropy\ndegenerate.mean\ndegenerate.mode\ndegenerate.median\ndegenerate.stdev\ndegenerate.variance\ndegenerate.cdf( 0.5 )\ndegenerate.logcdf( 2.5 )\ndegenerate.logpdf( 0.5 )\ndegenerate.logpmf( 2.5 )\ndegenerate.mgf( 0.2 )\ndegenerate.pdf( 2.0 )\ndegenerate.pmf( 2.0 )\ndegenerate.quantile( 0.7 )\n","base.dists.degenerate.entropy":"var v = base.dists.degenerate.entropy( 20.0 )\nv = base.dists.degenerate.entropy( -10.0 )\n","base.dists.degenerate.logcdf":"var y = base.dists.degenerate.logcdf( 2.0, 3.0 )\ny = base.dists.degenerate.logcdf( 4.0, 3.0 )\ny = base.dists.degenerate.logcdf( 3.0, 3.0 )\ny = base.dists.degenerate.logcdf( NaN, 0.0 )\ny = base.dists.degenerate.logcdf( 0.0, NaN )\n","base.dists.degenerate.logcdf.factory":"var mylogcdf = base.dists.degenerate.logcdf.factory( 5.0 );\nvar y = mylogcdf( 3.0 )\ny = mylogcdf( 6.0 )\n","base.dists.degenerate.logpdf":"var y = base.dists.degenerate.logpdf( 2.0, 3.0 )\ny = base.dists.degenerate.logpdf( 3.0, 3.0 )\ny = base.dists.degenerate.logpdf( NaN, 0.0 )\ny = base.dists.degenerate.logpdf( 0.0, NaN )\n","base.dists.degenerate.logpdf.factory":"var mylogPDF = base.dists.degenerate.logpdf.factory( 10.0 );\nvar y = mylogPDF( 10.0 )\n","base.dists.degenerate.logpmf":"var y = base.dists.degenerate.logpmf( 2.0, 3.0 )\ny = base.dists.degenerate.logpmf( 3.0, 3.0 )\ny = base.dists.degenerate.logpmf( NaN, 0.0 )\ny = base.dists.degenerate.logpmf( 0.0, NaN )\n","base.dists.degenerate.logpmf.factory":"var mylogPMF = base.dists.degenerate.logpmf.factory( 10.0 );\nvar y = mylogPMF( 10.0 )\n","base.dists.degenerate.mean":"var v = base.dists.degenerate.mean( 20.0 )\nv = base.dists.degenerate.mean( -10.0 )\n","base.dists.degenerate.median":"var v = base.dists.degenerate.median( 20.0 )\nv = base.dists.degenerate.median( -10.0 )\n","base.dists.degenerate.mgf":"var y = base.dists.degenerate.mgf( 1.0, 1.0 )\ny = base.dists.degenerate.mgf( 2.0, 3.0 )\ny = base.dists.degenerate.mgf( NaN, 0.0 )\ny = base.dists.degenerate.mgf( 0.0, NaN )\n","base.dists.degenerate.mgf.factory":"var myMGF = base.dists.degenerate.mgf.factory( 10.0 );\nvar y = myMGF( 0.1 )\n","base.dists.degenerate.mode":"var v = base.dists.degenerate.mode( 20.0 )\nv = base.dists.degenerate.mode( -10.0 )\n","base.dists.degenerate.pdf":"var y = base.dists.degenerate.pdf( 2.0, 3.0 )\ny = base.dists.degenerate.pdf( 3.0, 3.0 )\ny = base.dists.degenerate.pdf( NaN, 0.0 )\ny = base.dists.degenerate.pdf( 0.0, NaN )\n","base.dists.degenerate.pdf.factory":"var myPDF = base.dists.degenerate.pdf.factory( 10.0 );\nvar y = myPDF( 10.0 )\n","base.dists.degenerate.pmf":"var y = base.dists.degenerate.pmf( 2.0, 3.0 )\ny = base.dists.degenerate.pmf( 3.0, 3.0 )\ny = base.dists.degenerate.pmf( NaN, 0.0 )\ny = base.dists.degenerate.pmf( 0.0, NaN )\n","base.dists.degenerate.pmf.factory":"var myPMF = base.dists.degenerate.pmf.factory( 10.0 );\nvar y = myPMF( 10.0 )\n","base.dists.degenerate.quantile":"var y = base.dists.degenerate.quantile( 0.5, 2.0 )\ny = base.dists.degenerate.quantile( 0.9, 4.0 )\ny = base.dists.degenerate.quantile( 1.1, 0.0 )\ny = base.dists.degenerate.quantile( -0.2, 0.0 )\ny = base.dists.degenerate.quantile( NaN, 0.0 )\ny = base.dists.degenerate.quantile( 0.0, NaN )\n","base.dists.degenerate.quantile.factory":"var myQuantile = base.dists.degenerate.quantile.factory( 10.0, 2.0 );\nvar y = myQuantile( 0.5 )\n","base.dists.degenerate.stdev":"var v = base.dists.degenerate.stdev( 20.0 )\nv = base.dists.degenerate.stdev( -10.0 )\n","base.dists.degenerate.variance":"var v = base.dists.degenerate.variance( 20.0 )\nv = base.dists.degenerate.variance( -10.0 )\n","base.dists.discreteUniform.cdf":"var y = base.dists.discreteUniform.cdf( 9.0, 0, 10 )\ny = base.dists.discreteUniform.cdf( 0.5, 0, 2 )\ny = base.dists.discreteUniform.cdf( PINF, 2, 4 )\ny = base.dists.discreteUniform.cdf( NINF, 2, 4 )\ny = base.dists.discreteUniform.cdf( NaN, 0, 1 )\ny = base.dists.discreteUniform.cdf( 0.0, NaN, 1 )\ny = base.dists.discreteUniform.cdf( 0.0, 0, NaN )\ny = base.dists.discreteUniform.cdf( 2.0, 1, 0 )\n","base.dists.discreteUniform.cdf.factory":"var mycdf = base.dists.discreteUniform.cdf.factory( 0, 10 );\nvar y = mycdf( 0.5 )\ny = mycdf( 8.0 )\n","base.dists.discreteUniform.DiscreteUniform":"var discreteUniform = base.dists.discreteUniform.DiscreteUniform( -2, 2 );\ndiscreteUniform.a\ndiscreteUniform.b\ndiscreteUniform.entropy\ndiscreteUniform.kurtosis\ndiscreteUniform.mean\ndiscreteUniform.median\ndiscreteUniform.skewness\ndiscreteUniform.stdev\ndiscreteUniform.variance\ndiscreteUniform.cdf( 0.8 )\ndiscreteUniform.logcdf( 0.5 )\ndiscreteUniform.logpmf( 1.0 )\ndiscreteUniform.mgf( 0.8 )\ndiscreteUniform.pmf( 0.0 )\ndiscreteUniform.quantile( 0.8 )\n","base.dists.discreteUniform.entropy":"var v = base.dists.discreteUniform.entropy( 0, 1 )\nv = base.dists.discreteUniform.entropy( 4, 12 )\nv = base.dists.discreteUniform.entropy( 2, 8 )\n","base.dists.discreteUniform.kurtosis":"var v = base.dists.discreteUniform.kurtosis( 0, 1 )\nv = base.dists.discreteUniform.kurtosis( 4, 12 )\nv = base.dists.discreteUniform.kurtosis( -4, 8 )\n","base.dists.discreteUniform.logcdf":"var y = base.dists.discreteUniform.logcdf( 9.0, 0, 10 )\ny = base.dists.discreteUniform.logcdf( 0.5, 0, 2 )\ny = base.dists.discreteUniform.logcdf( PINF, 2, 4 )\ny = base.dists.discreteUniform.logcdf( NINF, 2, 4 )\ny = base.dists.discreteUniform.logcdf( NaN, 0, 1 )\ny = base.dists.discreteUniform.logcdf( 0.0, NaN, 1 )\ny = base.dists.discreteUniform.logcdf( 0.0, 0, NaN )\ny = base.dists.discreteUniform.logcdf( 2.0, 1, 0 )\n","base.dists.discreteUniform.logcdf.factory":"var myLogCDF = base.dists.discreteUniform.logcdf.factory( 0, 10 );\nvar y = myLogCDF( 0.5 )\ny = myLogCDF( 8.0 )\n","base.dists.discreteUniform.logpmf":"var y = base.dists.discreteUniform.logpmf( 2.0, 0, 4 )\ny = base.dists.discreteUniform.logpmf( 5.0, 0, 4 )\ny = base.dists.discreteUniform.logpmf( 3.0, -4, 4 )\ny = base.dists.discreteUniform.logpmf( NaN, 0, 1 )\ny = base.dists.discreteUniform.logpmf( 0.0, NaN, 1 )\ny = base.dists.discreteUniform.logpmf( 0.0, 0, NaN )\ny = base.dists.discreteUniform.logpmf( 2.0, 3, 1 )\ny = base.dists.discreteUniform.logpmf( 2.0, 1, 2.4 )\n","base.dists.discreteUniform.logpmf.factory":"var myLogPMF = base.dists.discreteUniform.logpmf.factory( 6, 7 );\nvar y = myLogPMF( 7.0 )\ny = myLogPMF( 5.0 )\n","base.dists.discreteUniform.mean":"var v = base.dists.discreteUniform.mean( -2, 2 )\nv = base.dists.discreteUniform.mean( 4, 12 )\nv = base.dists.discreteUniform.mean( 2, 8 )\n","base.dists.discreteUniform.median":"var v = base.dists.discreteUniform.median( -2, 2 )\nv = base.dists.discreteUniform.median( 4, 12 )\nv = base.dists.discreteUniform.median( 2, 8 )\n","base.dists.discreteUniform.mgf":"var y = base.dists.discreteUniform.mgf( 2.0, 0, 4 )\ny = base.dists.discreteUniform.mgf( -0.2, 0, 4 )\ny = base.dists.discreteUniform.mgf( 2.0, 0, 1 )\ny = base.dists.discreteUniform.mgf( 0.5, 3, 2 )\ny = base.dists.discreteUniform.mgf( NaN, 0, 1  )\ny = base.dists.discreteUniform.mgf( 0.0, NaN, 1 )\ny = base.dists.discreteUniform.mgf( 0.0, 0, NaN )\n","base.dists.discreteUniform.mgf.factory":"var mymgf = base.dists.discreteUniform.mgf.factory( 6, 7 );\nvar y = mymgf( 0.1 )\ny = mymgf( 1.1 )\n","base.dists.discreteUniform.pmf":"var y = base.dists.discreteUniform.pmf( 2.0, 0, 4 )\ny = base.dists.discreteUniform.pmf( 5.0, 0, 4 )\ny = base.dists.discreteUniform.pmf( 3.0, -4, 4 )\ny = base.dists.discreteUniform.pmf( NaN, 0, 1 )\ny = base.dists.discreteUniform.pmf( 0.0, NaN, 1 )\ny = base.dists.discreteUniform.pmf( 0.0, 0, NaN )\ny = base.dists.discreteUniform.pmf( 2.0, 3, 1 )\ny = base.dists.discreteUniform.pmf( 2.0, 1, 2.4 )\n","base.dists.discreteUniform.pmf.factory":"var myPMF = base.dists.discreteUniform.pmf.factory( 6, 7 );\nvar y = myPMF( 7.0 )\ny = myPMF( 5.0 )\n","base.dists.discreteUniform.quantile":"var y = base.dists.discreteUniform.quantile( 0.8, 0, 1 )\ny = base.dists.discreteUniform.quantile( 0.5, 0.0, 10.0 )\ny = base.dists.discreteUniform.quantile( 1.1, 0, 4 )\ny = base.dists.discreteUniform.quantile( -0.2, 0, 4 )\ny = base.dists.discreteUniform.quantile( NaN, -2, 2 )\ny = base.dists.discreteUniform.quantile( 0.1, NaN, 2 )\ny = base.dists.discreteUniform.quantile( 0.1, -2, NaN )\ny = base.dists.discreteUniform.quantile( 0.5, 2, 1 )\n","base.dists.discreteUniform.quantile.factory":"var myQuantile = base.dists.discreteUniform.quantile.factory( 0, 4 );\nvar y = myQuantile( 0.8 )\n","base.dists.discreteUniform.skewness":"var v = base.dists.discreteUniform.skewness( -2, 2 )\nv = base.dists.discreteUniform.skewness( 4, 12 )\nv = base.dists.discreteUniform.skewness( 2, 8 )\n","base.dists.discreteUniform.stdev":"var v = base.dists.discreteUniform.stdev( 0, 1 )\nv = base.dists.discreteUniform.stdev( 4, 12 )\nv = base.dists.discreteUniform.stdev( 2, 8 )\n","base.dists.discreteUniform.variance":"var v = base.dists.discreteUniform.variance( 0, 1 )\nv = base.dists.discreteUniform.variance( 4, 12 )\nv = base.dists.discreteUniform.variance( 2, 8 )\n","base.dists.erlang.cdf":"var y = base.dists.erlang.cdf( 2.0, 1, 1.0 )\ny = base.dists.erlang.cdf( 2.0, 3, 1.0 )\ny = base.dists.erlang.cdf( 2.0, 2.5, 1.0 )\ny = base.dists.erlang.cdf( -1.0, 2, 2.0 )\ny = base.dists.erlang.cdf( PINF, 4, 2.0 )\ny = base.dists.erlang.cdf( NINF, 4, 2.0 )\ny = base.dists.erlang.cdf( NaN, 0, 1.0 )\ny = base.dists.erlang.cdf( 0.0, NaN, 1.0 )\ny = base.dists.erlang.cdf( 0.0, 0, NaN )\ny = base.dists.erlang.cdf( 2.0, -1, 1.0 )\ny = base.dists.erlang.cdf( 2.0, 1, -1.0 )\n","base.dists.erlang.cdf.factory":"var mycdf = base.dists.erlang.cdf.factory( 2, 0.5 );\nvar y = mycdf( 6.0 )\ny = mycdf( 2.0 )\n","base.dists.erlang.entropy":"var v = base.dists.erlang.entropy( 1, 1.0 )\nv = base.dists.erlang.entropy( 4, 12.0 )\nv = base.dists.erlang.entropy( 8, 2.0 )\n","base.dists.erlang.Erlang":"var erlang = base.dists.erlang.Erlang( 6, 5.0 );\nerlang.k\nerlang.lambda\nerlang.entropy\nerlang.kurtosis\nerlang.mean\nerlang.mode\nerlang.skewness\nerlang.stdev\nerlang.variance\nerlang.cdf( 3.0 )\nerlang.logpdf( 3.0 )\nerlang.mgf( -0.5 )\nerlang.pdf( 3.0 )\nerlang.quantile( 0.8 )\n","base.dists.erlang.kurtosis":"var v = base.dists.erlang.kurtosis( 1, 1.0 )\nv = base.dists.erlang.kurtosis( 4, 12.0 )\nv = base.dists.erlang.kurtosis( 8, 2.0 )\n","base.dists.erlang.logpdf":"var y = base.dists.erlang.logpdf( 0.1, 1, 1.0 )\ny = base.dists.erlang.logpdf( 0.5, 2, 2.5 )\ny = base.dists.erlang.logpdf( -1.0, 4, 2.0 )\ny = base.dists.erlang.logpdf( NaN, 1, 1.0 )\ny = base.dists.erlang.logpdf( 0.0, NaN, 1.0 )\ny = base.dists.erlang.logpdf( 0.0, 1, NaN )\ny = base.dists.erlang.logpdf( 2.0, -2, 0.5 )\ny = base.dists.erlang.logpdf( 2.0, 0.5, 0.5 )\ny = base.dists.erlang.logpdf( 2.0, 0.0, 2.0 )\ny = base.dists.erlang.logpdf( 0.0, 0.0, 2.0 )\ny = base.dists.erlang.logpdf( 2.0, 1, 0.0 )\ny = base.dists.erlang.logpdf( 2.0, 1, -1.0 )\n","base.dists.erlang.logpdf.factory":"var myLogPDF = base.dists.erlang.logpdf.factory( 6.0, 7.0 );\ny = myLogPDF( 7.0 )\n","base.dists.erlang.mean":"var v = base.dists.erlang.mean( 1, 1.0 )\nv = base.dists.erlang.mean( 4, 12.0 )\nv = base.dists.erlang.mean( 8, 2.0 )\n","base.dists.erlang.mgf":"var y = base.dists.erlang.mgf( 0.3, 1, 1.0 )\ny = base.dists.erlang.mgf( 2.0, 2, 3.0 )\ny = base.dists.erlang.mgf( -1.0, 2, 2.0 )\ny = base.dists.erlang.mgf( NaN, 1, 1.0 )\ny = base.dists.erlang.mgf( 0.0, NaN, 1.0 )\ny = base.dists.erlang.mgf( 0.0, 1, NaN )\ny = base.dists.erlang.mgf( 0.2, -2, 0.5 )\ny = base.dists.erlang.mgf( 0.2, 0.5, 0.5 )\ny = base.dists.erlang.mgf( 0.2, 1, 0.0 )\ny = base.dists.erlang.mgf( 0.2, 1, -5.0 )\n","base.dists.erlang.mgf.factory":"var myMGF = base.dists.erlang.mgf.factory( 2, 0.5 );\nvar y = myMGF( 0.2 )\ny = myMGF( -0.5 )\n","base.dists.erlang.mode":"var v = base.dists.erlang.mode( 1, 1.0 )\nv = base.dists.erlang.mode( 4, 12.0 )\nv = base.dists.erlang.mode( 8, 2.0 )\n","base.dists.erlang.pdf":"var y = base.dists.erlang.pdf( 0.1, 1, 1.0 )\ny = base.dists.erlang.pdf( 0.5, 2, 2.5 )\ny = base.dists.erlang.pdf( -1.0, 4, 2.0 )\ny = base.dists.erlang.pdf( NaN, 1, 1.0 )\ny = base.dists.erlang.pdf( 0.0, NaN, 1.0 )\ny = base.dists.erlang.pdf( 0.0, 1, NaN )\ny = base.dists.erlang.pdf( 2.0, -2, 0.5 )\ny = base.dists.erlang.pdf( 2.0, 0.5, 0.5 )\ny = base.dists.erlang.pdf( 2.0, 0.0, 2.0 )\ny = base.dists.erlang.pdf( 0.0, 0.0, 2.0 )\ny = base.dists.erlang.pdf( 2.0, 1, 0.0 )\ny = base.dists.erlang.pdf( 2.0, 1, -1.0 )\n","base.dists.erlang.pdf.factory":"var myPDF = base.dists.erlang.pdf.factory( 6.0, 7.0 );\ny = myPDF( 7.0 )\n","base.dists.erlang.quantile":"var y = base.dists.erlang.quantile( 0.8, 2, 1.0 )\ny = base.dists.erlang.quantile( 0.5, 4, 2.0 )\ny = base.dists.erlang.quantile( 1.1, 1, 1.0 )\ny = base.dists.erlang.quantile( -0.2, 1, 1.0 )\ny = base.dists.erlang.quantile( NaN, 1, 1.0 )\ny = base.dists.erlang.quantile( 0.0, NaN, 1.0 )\ny = base.dists.erlang.quantile( 0.0, 1, NaN )\ny = base.dists.erlang.quantile( 0.5, 0.5, 1.0 )\ny = base.dists.erlang.quantile( 0.5, -1, 1.0 )\ny = base.dists.erlang.quantile( 0.5, 1, -1.0 )\n","base.dists.erlang.quantile.factory":"var myQuantile = base.dists.erlang.quantile.factory( 10, 2.0 );\nvar y = myQuantile( 0.4 )\n","base.dists.erlang.skewness":"var v = base.dists.erlang.skewness( 1, 1.0 )\nv = base.dists.erlang.skewness( 4, 12.0 )\nv = base.dists.erlang.skewness( 8, 2.0 )\n","base.dists.erlang.stdev":"var v = base.dists.erlang.stdev( 1, 1.0 )\nv = base.dists.erlang.stdev( 4, 12.0 )\nv = base.dists.erlang.stdev( 8, 2.0 )\n","base.dists.erlang.variance":"var v = base.dists.erlang.variance( 1, 1.0 )\nv = base.dists.erlang.variance( 4, 12.0 )\nv = base.dists.erlang.variance( 8, 2.0 )\n","base.dists.exponential.cdf":"var y = base.dists.exponential.cdf( 2.0, 0.1 )\ny = base.dists.exponential.cdf( 1.0, 2.0 )\ny = base.dists.exponential.cdf( -1.0, 4.0 )\ny = base.dists.exponential.cdf( NaN, 1.0 )\ny = base.dists.exponential.cdf( 0.0, NaN )\ny = base.dists.exponential.cdf( 2.0, -1.0 )\n","base.dists.exponential.cdf.factory":"var myCDF = base.dists.exponential.cdf.factory( 0.5 );\nvar y = myCDF( 3.0 )\n","base.dists.exponential.entropy":"var v = base.dists.exponential.entropy( 11.0 )\nv = base.dists.exponential.entropy( 4.5 )\n","base.dists.exponential.Exponential":"var exponential = base.dists.exponential.Exponential( 6.0 );\nexponential.lambda\nexponential.entropy\nexponential.kurtosis\nexponential.mean\nexponential.median\nexponential.mode\nexponential.skewness\nexponential.stdev\nexponential.variance\nexponential.cdf( 1.0 )\nexponential.logcdf( 1.0 )\nexponential.logpdf( 1.5 )\nexponential.mgf( -0.5 )\nexponential.pdf( 1.5 )\nexponential.quantile( 0.5 )\n","base.dists.exponential.kurtosis":"var v = base.dists.exponential.kurtosis( 11.0 )\nv = base.dists.exponential.kurtosis( 4.5 )\n","base.dists.exponential.logcdf":"var y = base.dists.exponential.logcdf( 2.0, 0.1 )\ny = base.dists.exponential.logcdf( 1.0, 2.0 )\ny = base.dists.exponential.logcdf( -1.0, 4.0 )\ny = base.dists.exponential.logcdf( NaN, 1.0 )\ny = base.dists.exponential.logcdf( 0.0, NaN )\ny = base.dists.exponential.logcdf( 2.0, -1.0 )\n","base.dists.exponential.logcdf.factory":"var mylogCDF = base.dists.exponential.logcdf.factory( 0.5 );\nvar y = mylogCDF( 3.0 )\n","base.dists.exponential.logpdf":"var y = base.dists.exponential.logpdf( 0.3, 4.0 )\ny = base.dists.exponential.logpdf( 2.0, 0.7 )\ny = base.dists.exponential.logpdf( -1.0, 0.5 )\ny = base.dists.exponential.logpdf( 0, NaN )\ny = base.dists.exponential.logpdf( NaN, 2.0 )\ny = base.dists.exponential.logpdf( 2.0, -1.0 )\n","base.dists.exponential.logpdf.factory":"var mylogpdf = base.dists.exponential.logpdf.factory( 0.5 );\nvar y = mylogpdf( 3.0 )\n","base.dists.exponential.mean":"var v = base.dists.exponential.mean( 11.0 )\nv = base.dists.exponential.mean( 4.5 )\n","base.dists.exponential.median":"var v = base.dists.exponential.median( 11.0 )\nv = base.dists.exponential.median( 4.5 )\n","base.dists.exponential.mgf":"var v = base.dists.exponential.mgf( 2.0, 3.0 )\nv = base.dists.exponential.mgf( 0.4, 1.2 )\nv = base.dists.exponential.mgf( 0.8, 1.6 )\nv = base.dists.exponential.mgf( 4.0, 3.0 )\nv = base.dists.exponential.mgf( NaN, 3.0 )\nv = base.dists.exponential.mgf( 2.0, NaN )\n","base.dists.exponential.mgf.factory":"var myMGF = base.dists.exponential.mgf.factory( 4.0 );\nvar y = myMGF( 3.0 )\ny = myMGF( 0.5 )\n","base.dists.exponential.mode":"var v = base.dists.exponential.mode( 11.0 )\nv = base.dists.exponential.mode( 4.5 )\n","base.dists.exponential.pdf":"var y = base.dists.exponential.pdf( 0.3, 4.0 )\ny = base.dists.exponential.pdf( 2.0, 0.7 )\ny = base.dists.exponential.pdf( -1.0, 0.5 )\ny = base.dists.exponential.pdf( 0, NaN )\ny = base.dists.exponential.pdf( NaN, 2.0 )\ny = base.dists.exponential.pdf( 2.0, -1.0 )\n","base.dists.exponential.pdf.factory":"var myPDF = base.dists.exponential.pdf.factory( 0.5 );\nvar y = myPDF( 3.0 )\n","base.dists.exponential.quantile":"var y = base.dists.exponential.quantile( 0.8, 1.0 )\ny = base.dists.exponential.quantile( 0.5, 4.0 )\ny = base.dists.exponential.quantile( 0.5, 0.1 )\ny = base.dists.exponential.quantile( -0.2, 0.1 )\ny = base.dists.exponential.quantile( NaN, 1.0 )\ny = base.dists.exponential.quantile( 0.0, NaN )\ny = base.dists.exponential.quantile( 0.5, -1.0 )\n","base.dists.exponential.quantile.factory":"var myQuantile = base.dists.exponential.quantile.factory( 0.4 );\nvar y = myQuantile( 0.4 )\ny = myQuantile( 1.0 )\n","base.dists.exponential.skewness":"var v = base.dists.exponential.skewness( 11.0 )\nv = base.dists.exponential.skewness( 4.5 )\n","base.dists.exponential.stdev":"var v = base.dists.exponential.stdev( 9.0 )\nv = base.dists.exponential.stdev( 1.0 )\n","base.dists.exponential.variance":"var v = base.dists.exponential.variance( 9.0 )\nv = base.dists.exponential.variance( 1.0 )\n","base.dists.f.cdf":"var y = base.dists.f.cdf( 2.0, 1.0, 1.0 )\nvar y = base.dists.f.cdf( 2.0, 8.0, 4.0 )\nvar y = base.dists.f.cdf( -1.0, 2.0, 2.0 )\nvar y = base.dists.f.cdf( PINF, 4.0, 2.0 )\nvar y = base.dists.f.cdf( NINF, 4.0, 2.0 )\nvar y = base.dists.f.cdf( NaN, 1.0, 1.0 )\nvar y = base.dists.f.cdf( 0.0, NaN, 1.0 )\nvar y = base.dists.f.cdf( 0.0, 1.0, NaN )\nvar y = base.dists.f.cdf( 2.0, 1.0, -1.0 )\nvar y = base.dists.f.cdf( 2.0, -1.0, 1.0 )\n","base.dists.f.cdf.factory":"var myCDF = base.dists.f.cdf.factory( 10.0, 2.0 );\nvar y = myCDF( 10.0 )\ny = myCDF( 8.0 )\n","base.dists.f.entropy":"var v = base.dists.f.entropy( 3.0, 7.0 )\nv = base.dists.f.entropy( 4.0, 12.0 )\nv = base.dists.f.entropy( 8.0, 2.0 )\n","base.dists.f.F":"var f = base.dists.f.F( 6.0, 9.0 );\nf.d1\nf.d2\nf.entropy\nf.kurtosis\nf.mean\nf.mode\nf.skewness\nf.stdev\nf.variance\nf.cdf( 3.0 )\nf.pdf( 2.5 )\nf.quantile( 0.8 )\n","base.dists.f.kurtosis":"var v = base.dists.f.kurtosis( 3.0, 9.0 )\nv = base.dists.f.kurtosis( 4.0, 12.0 )\nv = base.dists.f.kurtosis( 8.0, 9.0 )\n","base.dists.f.mean":"var v = base.dists.f.mean( 3.0, 5.0 )\nv = base.dists.f.mean( 4.0, 12.0 )\nv = base.dists.f.mean( 8.0, 4.0 )\n","base.dists.f.mode":"var v = base.dists.f.mode( 3.0, 5.0 )\nv = base.dists.f.mode( 4.0, 12.0 )\nv = base.dists.f.mode( 8.0, 4.0 )\n","base.dists.f.pdf":"var y = base.dists.f.pdf( 2.0, 0.5, 1.0 )\ny = base.dists.f.pdf( 0.1, 1.0, 1.0 )\ny = base.dists.f.pdf( -1.0, 4.0, 2.0 )\ny = base.dists.f.pdf( NaN, 1.0, 1.0 )\ny = base.dists.f.pdf( 0.0, NaN, 1.0 )\ny = base.dists.f.pdf( 0.0, 1.0, NaN )\ny = base.dists.f.pdf( 2.0, 1.0, -1.0 )\ny = base.dists.f.pdf( 2.0, -1.0, 1.0 )\n","base.dists.f.pdf.factory":"var myPDF = base.dists.f.pdf.factory( 6.0, 7.0 );\nvar y = myPDF( 7.0 )\ny = myPDF( 2.0 )\n","base.dists.f.quantile":"var y = base.dists.f.quantile( 0.8, 1.0, 1.0 )\ny = base.dists.f.quantile( 0.5, 4.0, 2.0 )\ny = base.dists.f.quantile( 1.1, 1.0, 1.0 )\ny = base.dists.f.quantile( -0.2, 1.0, 1.0 )\ny = base.dists.f.quantile( NaN, 1.0, 1.0 )\ny = base.dists.f.quantile( 0.5, NaN, 1.0 )\ny = base.dists.f.quantile( 0.5, 1.0, NaN )\ny = base.dists.f.quantile( 0.5, -1.0, 1.0 )\ny = base.dists.f.quantile( 0.5, 1.0, -1.0 )\n","base.dists.f.quantile.factory":"var myQuantile = base.dists.f.quantile.factory( 10.0, 2.0 );\nvar y = myQuantile( 0.2 )\ny = myQuantile( 0.8 )\n","base.dists.f.skewness":"var v = base.dists.f.skewness( 3.0, 7.0 )\nv = base.dists.f.skewness( 4.0, 12.0 )\nv = base.dists.f.skewness( 8.0, 7.0 )\n","base.dists.f.stdev":"var v = base.dists.f.stdev( 3.0, 5.0 )\nv = base.dists.f.stdev( 4.0, 12.0 )\nv = base.dists.f.stdev( 8.0, 5.0 )\n","base.dists.f.variance":"var v = base.dists.f.variance( 3.0, 5.0 )\nv = base.dists.f.variance( 4.0, 12.0 )\nv = base.dists.f.variance( 8.0, 5.0 )\n","base.dists.frechet.cdf":"var y = base.dists.frechet.cdf( 10.0, 2.0, 3.0, 0.0 )\ny = base.dists.frechet.cdf( -1.0, 2.0, 3.0, -3.0 )\ny = base.dists.frechet.cdf( 2.5, 2.0, 1.0, 2.0 )\ny = base.dists.frechet.cdf( NaN, 1.0, 1.0, 0.0 )\ny = base.dists.frechet.cdf( 0.0, NaN, 1.0, 0.0 )\ny = base.dists.frechet.cdf( 0.0, 1.0, NaN, 0.0 )\ny = base.dists.frechet.cdf( 0.0, 1.0, 1.0, NaN )\ny = base.dists.frechet.cdf( 0.0, -1.0, 1.0, 0.0 )\ny = base.dists.frechet.cdf( 0.0, 1.0, -1.0, 0.0 )\n","base.dists.frechet.cdf.factory":"var myCDF = base.dists.frechet.cdf.factory( 3.0, 3.0, 5.0 );\nvar y = myCDF( 10.0 )\ny = myCDF( 7.0 )\n","base.dists.frechet.entropy":"var y = base.dists.frechet.entropy( 1.0, 1.0, 1.0 )\ny = base.dists.frechet.entropy( 4.0, 2.0, 1.0 )\ny = base.dists.frechet.entropy( NaN, 1.0, 0.0 )\ny = base.dists.frechet.entropy( 1.0, NaN, 0.0 )\ny = base.dists.frechet.entropy( 1.0, 1.0, NaN )\n","base.dists.frechet.Frechet":"var frechet = base.dists.frechet.Frechet( 1.0, 1.0, 0.0 );\nfrechet.alpha\nfrechet.s\nfrechet.m\nfrechet.entropy\nfrechet.kurtosis\nfrechet.mean\nfrechet.median\nfrechet.mode\nfrechet.skewness\nfrechet.stdev\nfrechet.variance\nfrechet.cdf( 0.8 )\nfrechet.logcdf( 0.8 )\nfrechet.logpdf( 0.8 )\nfrechet.pdf( 0.8 )\nfrechet.quantile( 0.8 )\n","base.dists.frechet.kurtosis":"var y = base.dists.frechet.kurtosis( 5.0, 2.0, 1.0 )\nvar y = base.dists.frechet.kurtosis( 5.0, 10.0, -3.0 )\ny = base.dists.frechet.kurtosis( 3.5, 2.0, 1.0 )\ny = base.dists.frechet.kurtosis( NaN, 1.0, 0.0 )\ny = base.dists.frechet.kurtosis( 1.0, NaN, 0.0 )\ny = base.dists.frechet.kurtosis( 1.0, 1.0, NaN )\n","base.dists.frechet.logcdf":"var y = base.dists.frechet.logcdf( 10.0, 2.0, 3.0, 0.0 )\ny = base.dists.frechet.logcdf( -1.0, 2.0, 3.0, -3.0 )\ny = base.dists.frechet.logcdf( 2.5, 2.0, 1.0, 2.0 )\ny = base.dists.frechet.logcdf( NaN, 1.0, 1.0, 0.0 )\ny = base.dists.frechet.logcdf( 0.0, NaN, 1.0, 0.0 )\ny = base.dists.frechet.logcdf( 0.0, 1.0, NaN, 0.0 )\ny = base.dists.frechet.logcdf( 0.0, 1.0, 1.0, NaN )\ny = base.dists.frechet.logcdf( 0.0, -1.0, 1.0, 0.0 )\ny = base.dists.frechet.logcdf( 0.0, 1.0, -1.0, 0.0 )\n","base.dists.frechet.logcdf.factory":"var mylogcdf = base.dists.frechet.logcdf.factory( 3.0, 3.0, 5.0 );\nvar y = mylogcdf( 10.0 )\ny = mylogcdf( 7.0 )\n","base.dists.frechet.logpdf":"var y = base.dists.frechet.logpdf( 10.0, 1.0, 3.0, 5.0 )\ny = base.dists.frechet.logpdf( -2.0, 1.0, 3.0, -3.0 )\ny = base.dists.frechet.logpdf( 0.0, 2.0, 1.0, -1.0 )\ny = base.dists.frechet.logpdf( NaN, 0.0, 1.0 )\ny = base.dists.frechet.logpdf( 0.0, NaN, 1.0 )\ny = base.dists.frechet.logpdf( 0.0, 0.0, NaN )\ny = base.dists.frechet.logpdf( 0.0, 0.0, -1.0 )\n","base.dists.frechet.logpdf.factory":"var mylogPDF = base.dists.frechet.logpdf.factory( 2.0, 3.0, 1.0 );\nvar y = mylogPDF( 10.0 )\ny = mylogPDF( 2.0 )\n","base.dists.frechet.mean":"var y = base.dists.frechet.mean( 4.0, 2.0, 1.0 )\ny = base.dists.frechet.mean( 0.5, 2.0, 1.0 )\ny = base.dists.frechet.mean( NaN, 1.0, 0.0 )\ny = base.dists.frechet.mean( 1.0, NaN, 0.0 )\ny = base.dists.frechet.mean( 1.0, 1.0, NaN )\n","base.dists.frechet.median":"var y = base.dists.frechet.median( 4.0, 2.0, 1.0 )\nvar y = base.dists.frechet.median( 4.0, 2.0, -3.0 )\ny = base.dists.frechet.median( 0.5, 2.0, 1.0 )\ny = base.dists.frechet.median( NaN, 1.0, 0.0 )\ny = base.dists.frechet.median( 1.0, NaN, 0.0 )\ny = base.dists.frechet.median( 1.0, 1.0, NaN )\n","base.dists.frechet.mode":"var y = base.dists.frechet.mode( 4.0, 2.0, 1.0 )\nvar y = base.dists.frechet.mode( 4.0, 2.0, -3.0 )\ny = base.dists.frechet.mode( 0.5, 2.0, 1.0 )\ny = base.dists.frechet.mode( NaN, 1.0, 0.0 )\ny = base.dists.frechet.mode( 1.0, NaN, 0.0 )\ny = base.dists.frechet.mode( 1.0, 1.0, NaN )\n","base.dists.frechet.pdf":"var y = base.dists.frechet.pdf( 10.0, 0.0, 3.0 )\ny = base.dists.frechet.pdf( -2.0, 0.0, 3.0 )\ny = base.dists.frechet.pdf( 0.0, 0.0, 1.0 )\ny = base.dists.frechet.pdf( NaN, 0.0, 1.0 )\ny = base.dists.frechet.pdf( 0.0, NaN, 1.0 )\ny = base.dists.frechet.pdf( 0.0, 0.0, NaN )\ny = base.dists.frechet.pdf( 0.0, 0.0, -1.0 )\n","base.dists.frechet.pdf.factory":"var myPDF = base.dists.frechet.pdf.factory( 2.0, 3.0 );\nvar y = myPDF( 10.0 )\ny = myPDF( 2.0 )\n","base.dists.frechet.quantile":"var y = base.dists.frechet.quantile( 0.3, 10.0, 2.0, 3.0 )\ny = base.dists.frechet.quantile( 0.2, 3.0, 3.0, 3.0 )\ny = base.dists.frechet.quantile( 0.9, 1.0, 1.0, -3.0 )\ny = base.dists.frechet.quantile( NaN, 1.0, 1.0, 0.0 )\ny = base.dists.frechet.quantile( 0.0, NaN, 1.0, 0.0)\ny = base.dists.frechet.quantile( 0.0, 1.0, NaN, 0.0 )\ny = base.dists.frechet.quantile( 0.0, 1.0, 1.0, NaN )\ny = base.dists.frechet.quantile( 0.0, -1.0, 1.0, 0.0 )\ny = base.dists.frechet.quantile( 0.0, 1.0, -1.0, 0.0 )\n","base.dists.frechet.quantile.factory":"var myQuantile = base.dists.frechet.quantile.factory( 2.0, 2.0, 3.0 );\nvar y = myQuantile( 0.5 )\ny = myQuantile( 0.2 )\n","base.dists.frechet.skewness":"var y = base.dists.frechet.skewness( 4.0, 2.0, 1.0 )\nvar y = base.dists.frechet.skewness( 4.0, 2.0, -3.0 )\ny = base.dists.frechet.skewness( 0.5, 2.0, 1.0 )\ny = base.dists.frechet.skewness( NaN, 1.0, 0.0 )\ny = base.dists.frechet.skewness( 1.0, NaN, 0.0 )\ny = base.dists.frechet.skewness( 1.0, 1.0, NaN )\n","base.dists.frechet.stdev":"var y = base.dists.frechet.stdev( 4.0, 2.0, 1.0 )\nvar y = base.dists.frechet.stdev( 4.0, 2.0, -3.0 )\ny = base.dists.frechet.stdev( 0.5, 2.0, 1.0 )\ny = base.dists.frechet.stdev( NaN, 1.0, 0.0 )\ny = base.dists.frechet.stdev( 1.0, NaN, 0.0 )\ny = base.dists.frechet.stdev( 1.0, 1.0, NaN )\n","base.dists.frechet.variance":"var y = base.dists.frechet.variance( 4.0, 2.0, 1.0 )\nvar y = base.dists.frechet.variance( 4.0, 2.0, -3.0 )\ny = base.dists.frechet.variance( 0.5, 2.0, 1.0 )\ny = base.dists.frechet.variance( NaN, 1.0, 0.0 )\ny = base.dists.frechet.variance( 1.0, NaN, 0.0 )\ny = base.dists.frechet.variance( 1.0, 1.0, NaN )\n","base.dists.gamma.cdf":"var y = base.dists.gamma.cdf( 2.0, 1.0, 1.0 )\ny = base.dists.gamma.cdf( 2.0, 3.0, 1.0 )\ny = base.dists.gamma.cdf( -1.0, 2.0, 2.0 )\ny = base.dists.gamma.cdf( PINF, 4.0, 2.0 )\ny = base.dists.gamma.cdf( NINF, 4.0, 2.0 )\ny = base.dists.gamma.cdf( NaN, 0.0, 1.0 )\ny = base.dists.gamma.cdf( 0.0, NaN, 1.0 )\ny = base.dists.gamma.cdf( 0.0, 0.0, NaN )\ny = base.dists.gamma.cdf( 2.0, -1.0, 1.0 )\ny = base.dists.gamma.cdf( 2.0, 1.0, -1.0 )\ny = base.dists.gamma.cdf( 2.0, 0.0, 2.0 )\ny = base.dists.gamma.cdf( -2.0, 0.0, 2.0 )\ny = base.dists.gamma.cdf( 0.0, 0.0, 2.0 )\n","base.dists.gamma.cdf.factory":"var myCDF = base.dists.gamma.cdf.factory( 2.0, 0.5 );\nvar y = myCDF( 6.0 )\ny = myCDF( 2.0 )\n","base.dists.gamma.entropy":"var v = base.dists.gamma.entropy( 1.0, 1.0 )\nv = base.dists.gamma.entropy( 4.0, 12.0 )\nv = base.dists.gamma.entropy( 8.0, 2.0 )\n","base.dists.gamma.Gamma":"var gamma = base.dists.gamma.Gamma( 6.0, 5.0 );\ngamma.alpha\ngamma.beta\ngamma.entropy\ngamma.kurtosis\ngamma.mean\ngamma.mode\ngamma.skewness\ngamma.stdev\ngamma.variance\ngamma.cdf( 0.8 )\ngamma.logcdf( 0.8 )\ngamma.logpdf( 1.0 )\ngamma.mgf( -0.5 )\ngamma.pdf( 1.0 )\ngamma.quantile( 0.8 )\n","base.dists.gamma.kurtosis":"var v = base.dists.gamma.kurtosis( 1.0, 1.0 )\nv = base.dists.gamma.kurtosis( 4.0, 12.0 )\nv = base.dists.gamma.kurtosis( 8.0, 2.0 )\n","base.dists.gamma.logcdf":"var y = base.dists.gamma.logcdf( 2.0, 0.5, 1.0 )\ny = base.dists.gamma.logcdf( 0.1, 1.0, 1.0 )\ny = base.dists.gamma.logcdf( -1.0, 4.0, 2.0 )\ny = base.dists.gamma.logcdf( NaN, 0.6, 1.0 )\ny = base.dists.gamma.logcdf( 0.0, NaN, 1.0 )\ny = base.dists.gamma.logcdf( 0.0, 1.0, NaN )\ny = base.dists.gamma.logcdf( 2.0, -1.0, 1.0 )\ny = base.dists.gamma.logcdf( 2.0, 1.0, -1.0 )\n","base.dists.gamma.logcdf.factory":"var mylogCDF = base.dists.gamma.logcdf.factory( 6.0, 7.0 );\nvar y = mylogCDF( 2.0 )\n","base.dists.gamma.logpdf":"var y = base.dists.gamma.logpdf( 2.0, 0.5, 1.0 )\ny = base.dists.gamma.logpdf( 0.1, 1.0, 1.0 )\ny = base.dists.gamma.logpdf( -1.0, 4.0, 2.0 )\ny = base.dists.gamma.logpdf( NaN, 0.6, 1.0 )\ny = base.dists.gamma.logpdf( 0.0, NaN, 1.0 )\ny = base.dists.gamma.logpdf( 0.0, 1.0, NaN )\ny = base.dists.gamma.logpdf( 2.0, -1.0, 1.0 )\ny = base.dists.gamma.logpdf( 2.0, 1.0, -1.0 )\ny = base.dists.gamma.logpdf( 2.0, 0.0, 2.0 )\ny = base.dists.gamma.logpdf( 0.0, 0.0, 2.0 )\n","base.dists.gamma.logpdf.factory":"var mylogPDF = base.dists.gamma.logpdf.factory( 6.0, 7.0 );\nvar y = mylogPDF( 2.0 )\n","base.dists.gamma.mean":"var v = base.dists.gamma.mean( 1.0, 1.0 )\nv = base.dists.gamma.mean( 4.0, 12.0 )\nv = base.dists.gamma.mean( 8.0, 2.0 )\n","base.dists.gamma.mgf":"var y = base.dists.gamma.mgf( 0.5, 0.5, 1.0 )\ny = base.dists.gamma.mgf( 0.1, 1.0, 1.0 )\ny = base.dists.gamma.mgf( -1.0, 4.0, 2.0 )\ny = base.dists.gamma.mgf( NaN, 1.0, 1.0 )\ny = base.dists.gamma.mgf( 0.0, NaN, 1.0 )\ny = base.dists.gamma.mgf( 0.0, 1.0, NaN )\ny = base.dists.gamma.mgf( 2.0, 4.0, 1.0 )\ny = base.dists.gamma.mgf( 2.0, -0.5, 1.0 )\ny = base.dists.gamma.mgf( 2.0, 1.0, 0.0 )\ny = base.dists.gamma.mgf( 2.0, 1.0, -1.0 )\n","base.dists.gamma.mgf.factory":"var myMGF = base.dists.gamma.mgf.factory( 3.0, 1.5 );\nvar y = myMGF( 1.0 )\ny = myMGF( 0.5 )\n","base.dists.gamma.mode":"var v = base.dists.gamma.mode( 1.0, 1.0 )\nv = base.dists.gamma.mode( 4.0, 12.0 )\nv = base.dists.gamma.mode( 8.0, 2.0 )\n","base.dists.gamma.pdf":"var y = base.dists.gamma.pdf( 2.0, 0.5, 1.0 )\ny = base.dists.gamma.pdf( 0.1, 1.0, 1.0 )\ny = base.dists.gamma.pdf( -1.0, 4.0, 2.0 )\ny = base.dists.gamma.pdf( NaN, 0.6, 1.0 )\ny = base.dists.gamma.pdf( 0.0, NaN, 1.0 )\ny = base.dists.gamma.pdf( 0.0, 1.0, NaN )\ny = base.dists.gamma.pdf( 2.0, -1.0, 1.0 )\ny = base.dists.gamma.pdf( 2.0, 1.0, -1.0 )\ny = base.dists.gamma.pdf( 2.0, 0.0, 2.0 )\ny = base.dists.gamma.pdf( 0.0, 0.0, 2.0 )\n","base.dists.gamma.pdf.factory":"var myPDF = base.dists.gamma.pdf.factory( 6.0, 7.0 );\nvar y = myPDF( 2.0 )\n","base.dists.gamma.quantile":"var y = base.dists.gamma.quantile( 0.8, 2.0, 1.0 )\ny = base.dists.gamma.quantile( 0.5, 4.0, 2.0 )\ny = base.dists.gamma.quantile( 1.1, 1.0, 1.0 )\ny = base.dists.gamma.quantile( -0.2, 1.0, 1.0 )\ny = base.dists.gamma.quantile( NaN, 1.0, 1.0 )\ny = base.dists.gamma.quantile( 0.0, NaN, 1.0 )\ny = base.dists.gamma.quantile( 0.0, 1.0, NaN )\ny = base.dists.gamma.quantile( 0.5, -1.0, 1.0 )\ny = base.dists.gamma.quantile( 0.5, 1.0, -1.0 )\ny = base.dists.gamma.quantile( 0.3, 0.0, 2.0 )\ny = base.dists.gamma.quantile( 0.9, 0.0, 2.0 )\n","base.dists.gamma.quantile.factory":"var myQuantile = base.dists.gamma.quantile.factory( 2.0, 2.0 );\nvar y = myQuantile( 0.8 )\ny = myQuantile( 0.4 )\n","base.dists.gamma.skewness":"var v = base.dists.gamma.skewness( 1.0, 1.0 )\nv = base.dists.gamma.skewness( 4.0, 12.0 )\nv = base.dists.gamma.skewness( 8.0, 2.0 )\n","base.dists.gamma.stdev":"var v = base.dists.gamma.stdev( 1.0, 1.0 )\nv = base.dists.gamma.stdev( 4.0, 12.0 )\nv = base.dists.gamma.stdev( 8.0, 2.0 )\n","base.dists.gamma.variance":"var v = base.dists.gamma.variance( 1.0, 1.0 )\nv = base.dists.gamma.variance( 4.0, 12.0 )\nv = base.dists.gamma.variance( 8.0, 2.0 )\n","base.dists.geometric.cdf":"var y = base.dists.geometric.cdf( 2.0, 0.5 )\ny = base.dists.geometric.cdf( 2.0, 0.1 )\ny = base.dists.geometric.cdf( -1.0, 4.0 )\ny = base.dists.geometric.cdf( NaN, 0.5 )\ny = base.dists.geometric.cdf( 0.0, NaN )\ny = base.dists.geometric.cdf( 2.0, 1.4 )\n","base.dists.geometric.cdf.factory":"var mycdf = base.dists.geometric.cdf.factory( 0.5 );\nvar y = mycdf( 3.0 )\ny = mycdf( 1.0 )\n","base.dists.geometric.entropy":"var v = base.dists.geometric.entropy( 0.1 )\nv = base.dists.geometric.entropy( 0.5 )\n","base.dists.geometric.Geometric":"var geometric = base.dists.geometric.Geometric( 0.6 );\ngeometric.p\ngeometric.entropy\ngeometric.kurtosis\ngeometric.mean\ngeometric.median\ngeometric.mode\ngeometric.skewness\ngeometric.stdev\ngeometric.variance\ngeometric.cdf( 3.0 )\ngeometric.logcdf( 3.0 )\ngeometric.logpmf( 4.0 )\ngeometric.mgf( 0.5 )\ngeometric.pmf( 2.0 )\ngeometric.quantile( 0.7 )\n","base.dists.geometric.kurtosis":"var v = base.dists.geometric.kurtosis( 0.1 )\nv = base.dists.geometric.kurtosis( 0.5 )\n","base.dists.geometric.logcdf":"var y = base.dists.geometric.logcdf( 2.0, 0.5 )\ny = base.dists.geometric.logcdf( 2.0, 0.1 )\ny = base.dists.geometric.logcdf( -1.0, 4.0 )\ny = base.dists.geometric.logcdf( NaN, 0.5 )\ny = base.dists.geometric.logcdf( 0.0, NaN )\ny = base.dists.geometric.logcdf( 2.0, 1.4 )\n","base.dists.geometric.logcdf.factory":"var mylogcdf = base.dists.geometric.logcdf.factory( 0.5 );\nvar y = mylogcdf( 3.0 )\ny = mylogcdf( 1.0 )\n","base.dists.geometric.logpmf":"var y = base.dists.geometric.logpmf( 4.0, 0.3 )\ny = base.dists.geometric.logpmf( 2.0, 0.7 )\ny = base.dists.geometric.logpmf( -1.0, 0.5 )\ny = base.dists.geometric.logpmf( 0.0, NaN )\ny = base.dists.geometric.logpmf( NaN, 0.5 )\ny = base.dists.geometric.logpmf( 2.0, 1.5 )\n","base.dists.geometric.logpmf.factory":"var mylogpmf = base.dists.geometric.logpmf.factory( 0.5 );\nvar y = mylogpmf( 3.0 )\ny = mylogpmf( 1.0 )\n","base.dists.geometric.mean":"var v = base.dists.geometric.mean( 0.1 )\nv = base.dists.geometric.mean( 0.5 )\n","base.dists.geometric.median":"var v = base.dists.geometric.median( 0.1 )\nv = base.dists.geometric.median( 0.5 )\n","base.dists.geometric.mgf":"var y = base.dists.geometric.mgf( 0.2, 0.5 )\ny = base.dists.geometric.mgf( 0.4, 0.5 )\ny = base.dists.geometric.mgf( 0.8, 0.5 )\ny = base.dists.geometric.mgf( NaN, 0.0 )\ny = base.dists.geometric.mgf( 0.0, NaN )\ny = base.dists.geometric.mgf( -2.0, -1.0 )\ny = base.dists.geometric.mgf( 0.2, 2.0 )\n","base.dists.geometric.mgf.factory":"var mymgf = base.dists.geometric.mgf.factory( 0.8 );\nvar y = mymgf( -0.2 )\n","base.dists.geometric.mode":"var v = base.dists.geometric.mode( 0.1 )\nv = base.dists.geometric.mode( 0.5 )\n","base.dists.geometric.pmf":"var y = base.dists.geometric.pmf( 4.0, 0.3 )\ny = base.dists.geometric.pmf( 2.0, 0.7 )\ny = base.dists.geometric.pmf( -1.0, 0.5 )\ny = base.dists.geometric.pmf( 0.0, NaN )\ny = base.dists.geometric.pmf( NaN, 0.5 )\ny = base.dists.geometric.pmf( 2.0, 1.5 )\n","base.dists.geometric.pmf.factory":"var mypmf = base.dists.geometric.pmf.factory( 0.5 );\nvar y = mypmf( 3.0 )\ny = mypmf( 1.0 )\n","base.dists.geometric.quantile":"var y = base.dists.geometric.quantile( 0.8, 0.4 )\ny = base.dists.geometric.quantile( 0.5, 0.4 )\ny = base.dists.geometric.quantile( 0.9, 0.1 )\ny = base.dists.geometric.quantile( -0.2, 0.1 )\ny = base.dists.geometric.quantile( NaN, 0.8 )\ny = base.dists.geometric.quantile( 0.4, NaN )\ny = base.dists.geometric.quantile( 0.5, -1.0 )\ny = base.dists.geometric.quantile( 0.5, 1.5 )\n","base.dists.geometric.quantile.factory":"var myquantile = base.dists.geometric.quantile.factory( 0.4 );\nvar y = myquantile( 0.4 )\ny = myquantile( 0.8 )\ny = myquantile( 1.0 )\n","base.dists.geometric.skewness":"var v = base.dists.geometric.skewness( 0.1 )\nv = base.dists.geometric.skewness( 0.5 )\n","base.dists.geometric.stdev":"var v = base.dists.geometric.stdev( 0.1 )\nv = base.dists.geometric.stdev( 0.5 )\n","base.dists.geometric.variance":"var v = base.dists.geometric.variance( 0.1 )\nv = base.dists.geometric.variance( 0.5 )\n","base.dists.gumbel.cdf":"var y = base.dists.gumbel.cdf( 10.0, 0.0, 3.0 )\ny = base.dists.gumbel.cdf( -2.0, 0.0, 3.0 )\ny = base.dists.gumbel.cdf( 0.0, 0.0, 1.0 )\ny = base.dists.gumbel.cdf( NaN, 0.0, 1.0 )\ny = base.dists.gumbel.cdf( 0.0, NaN, 1.0 )\ny = base.dists.gumbel.cdf( 0.0, 0.0, NaN )\ny = base.dists.gumbel.cdf( 0.0, 0.0, -1.0 )\n","base.dists.gumbel.cdf.factory":"var myCDF = base.dists.gumbel.cdf.factory( 2.0, 3.0 );\nvar y = myCDF( 10.0 )\ny = myCDF( 2.0 )\n","base.dists.gumbel.entropy":"var y = base.dists.gumbel.entropy( 0.0, 1.0 )\ny = base.dists.gumbel.entropy( 4.0, 2.0 )\ny = base.dists.gumbel.entropy( NaN, 1.0 )\ny = base.dists.gumbel.entropy( 0.0, NaN )\ny = base.dists.gumbel.entropy( 0.0, 0.0 )\n","base.dists.gumbel.Gumbel":"var gumbel = base.dists.gumbel.Gumbel( -2.0, 3.0 );\ngumbel.mu\ngumbel.beta\ngumbel.entropy\ngumbel.kurtosis\ngumbel.mean\ngumbel.median\ngumbel.mode\ngumbel.skewness\ngumbel.stdev\ngumbel.variance\ngumbel.cdf( 0.8 )\ngumbel.logcdf( 0.8 )\ngumbel.logpdf( 1.0 )\ngumbel.mgf( 0.2 )\ngumbel.pdf( 1.0 )\ngumbel.quantile( 0.8 )\n","base.dists.gumbel.kurtosis":"var y = base.dists.gumbel.kurtosis( 0.0, 1.0 )\ny = base.dists.gumbel.kurtosis( 4.0, 2.0 )\ny = base.dists.gumbel.kurtosis( NaN, 1.0 )\ny = base.dists.gumbel.kurtosis( 0.0, NaN )\ny = base.dists.gumbel.kurtosis( 0.0, 0.0 )\n","base.dists.gumbel.logcdf":"var y = base.dists.gumbel.logcdf( 10.0, 0.0, 3.0 )\ny = base.dists.gumbel.logcdf( -2.0, 0.0, 3.0 )\ny = base.dists.gumbel.logcdf( 0.0, 0.0, 1.0 )\ny = base.dists.gumbel.logcdf( NaN, 0.0, 1.0 )\ny = base.dists.gumbel.logcdf( 0.0, NaN, 1.0 )\ny = base.dists.gumbel.logcdf( 0.0, 0.0, NaN )\ny = base.dists.gumbel.logcdf( 0.0, 0.0, -1.0 )\n","base.dists.gumbel.logcdf.factory":"var myLCDF = base.dists.gumbel.logcdf.factory( 2.0, 3.0 );\nvar y = myLCDF( 10.0 )\ny = myLCDF( 2.0 )\n","base.dists.gumbel.logpdf":"var y = base.dists.gumbel.logpdf( 0.0, 0.0, 2.0 )\ny = base.dists.gumbel.logpdf( 0.0, 0.0, 1.0 )\ny = base.dists.gumbel.logpdf( 1.0, 3.0, 2.0 )\ny = base.dists.gumbel.logpdf( NaN, 0.0, 1.0 )\ny = base.dists.gumbel.logpdf( 0.0, NaN, 1.0 )\ny = base.dists.gumbel.logpdf( 0.0, 0.0, NaN )\ny = base.dists.gumbel.logpdf( 2.0, 0.0, -1.0 )\n","base.dists.gumbel.logpdf.factory":"var mylogpdf = base.dists.gumbel.logpdf.factory( 10.0, 2.0 );\nvar y = mylogpdf( 10.0 )\ny = mylogpdf( 12.0 )\n","base.dists.gumbel.mean":"var y = base.dists.gumbel.mean( 0.0, 1.0 )\ny = base.dists.gumbel.mean( 4.0, 2.0 )\ny = base.dists.gumbel.mean( NaN, 1.0 )\ny = base.dists.gumbel.mean( 0.0, NaN )\ny = base.dists.gumbel.mean( 0.0, 0.0 )\n","base.dists.gumbel.median":"var y = base.dists.gumbel.median( 0.0, 1.0 )\ny = base.dists.gumbel.median( 4.0, 2.0 )\ny = base.dists.gumbel.median( NaN, 1.0 )\ny = base.dists.gumbel.median( 0.0, NaN )\ny = base.dists.gumbel.median( 0.0, 0.0 )\n","base.dists.gumbel.mgf":"var y = base.dists.gumbel.mgf( -1.0, 0.0, 3.0 )\ny = base.dists.gumbel.mgf( 0.0, 0.0, 1.0 )\ny = base.dists.gumbel.mgf( 0.1, 0.0, 3.0 )\ny = base.dists.gumbel.mgf( NaN, 0.0, 1.0 )\ny = base.dists.gumbel.mgf( 0.0, NaN, 1.0 )\ny = base.dists.gumbel.mgf( 0.0, 0.0, NaN )\ny = base.dists.gumbel.mgf( 0.8, 0.0, 2.0 )\ny = base.dists.gumbel.mgf( 0.0, 0.0, -1.0 )\n","base.dists.gumbel.mgf.factory":"var myMGF = base.dists.gumbel.mgf.factory( 0.0, 3.0 );\nvar y = myMGF( -1.5 )\ny = myMGF( -1.0 )\n","base.dists.gumbel.mode":"var y = base.dists.gumbel.mode( 0.0, 1.0 )\ny = base.dists.gumbel.mode( 4.0, 2.0 )\ny = base.dists.gumbel.mode( NaN, 1.0 )\ny = base.dists.gumbel.mode( 0.0, NaN )\ny = base.dists.gumbel.mode( 0.0, 0.0 )\n","base.dists.gumbel.pdf":"var y = base.dists.gumbel.pdf( 0.0, 0.0, 2.0 )\ny = base.dists.gumbel.pdf( 0.0, 0.0, 1.0 )\ny = base.dists.gumbel.pdf( 1.0, 3.0, 2.0 )\ny = base.dists.gumbel.pdf( NaN, 0.0, 1.0 )\ny = base.dists.gumbel.pdf( 0.0, NaN, 1.0 )\ny = base.dists.gumbel.pdf( 0.0, 0.0, NaN )\ny = base.dists.gumbel.pdf( 2.0, 0.0, -1.0 )\n","base.dists.gumbel.pdf.factory":"var myPDF = base.dists.gumbel.pdf.factory( 10.0, 2.0 );\nvar y = myPDF( 10.0 )\ny = myPDF( 12.0 )\n","base.dists.gumbel.quantile":"var y = base.dists.gumbel.quantile( 0.8, 0.0, 1.0 )\ny = base.dists.gumbel.quantile( 0.5, 4.0, 2.0 )\ny = base.dists.gumbel.quantile( 0.5, 4.0, 4.0 )\ny = base.dists.gumbel.quantile( 1.1, 0.0, 1.0 )\ny = base.dists.gumbel.quantile( -0.2, 0.0, 1.0 )\ny = base.dists.gumbel.quantile( NaN, 0.0, 1.0 )\ny = base.dists.gumbel.quantile( 0.0, NaN, 1.0 )\ny = base.dists.gumbel.quantile( 0.0, 0.0, NaN )\ny = base.dists.gumbel.quantile( 0.5, 0.0, -1.0 )\n","base.dists.gumbel.quantile.factory":"var myQuantile = base.dists.gumbel.quantile.factory( 8.0, 2.0 );\nvar y = myQuantile( 0.5 )\ny = myQuantile( 0.7 )\n","base.dists.gumbel.skewness":"var y = base.dists.gumbel.skewness( 0.0, 1.0 )\ny = base.dists.gumbel.skewness( 4.0, 2.0 )\ny = base.dists.gumbel.skewness( NaN, 1.0 )\ny = base.dists.gumbel.skewness( 0.0, NaN )\ny = base.dists.gumbel.skewness( 0.0, 0.0 )\n","base.dists.gumbel.stdev":"var y = base.dists.gumbel.stdev( 0.0, 1.0 )\ny = base.dists.gumbel.stdev( 4.0, 2.0 )\ny = base.dists.gumbel.stdev( NaN, 1.0 )\ny = base.dists.gumbel.stdev( 0.0, NaN )\ny = base.dists.gumbel.stdev( 0.0, 0.0 )\n","base.dists.gumbel.variance":"var y = base.dists.gumbel.variance( 0.0, 1.0 )\ny = base.dists.gumbel.variance( 4.0, 2.0 )\ny = base.dists.gumbel.variance( NaN, 1.0 )\ny = base.dists.gumbel.variance( 0.0, NaN )\ny = base.dists.gumbel.variance( 0.0, 0.0 )\n","base.dists.hypergeometric.cdf":"var y = base.dists.hypergeometric.cdf( 1.0, 8, 4, 2 )\ny = base.dists.hypergeometric.cdf( 1.5, 8, 4, 2 )\ny = base.dists.hypergeometric.cdf( 2.0, 8, 4, 2 )\ny = base.dists.hypergeometric.cdf( 0, 8, 4, 2)\ny = base.dists.hypergeometric.cdf( NaN, 10, 5, 2 )\ny = base.dists.hypergeometric.cdf( 0.0, NaN, 5, 2 )\ny = base.dists.hypergeometric.cdf( 0.0, 10, NaN, 2 )\ny = base.dists.hypergeometric.cdf( 0.0, 10, 5, NaN )\ny = base.dists.hypergeometric.cdf( 2.0, 10.5, 5, 2 )\ny = base.dists.hypergeometric.cdf( 2.0, 10, 1.5, 2 )\ny = base.dists.hypergeometric.cdf( 2.0, 10, 5, -2.0 )\ny = base.dists.hypergeometric.cdf( 2.0, 10, 5, 12 )\ny = base.dists.hypergeometric.cdf( 2.0, 8, 3, 9 )\n","base.dists.hypergeometric.cdf.factory":"var myCDF = base.dists.hypergeometric.cdf.factory( 30, 20, 5 );\nvar y = myCDF( 4.0 )\ny = myCDF( 1.0 )\n","base.dists.hypergeometric.Hypergeometric":"var hypergeometric = base.dists.hypergeometric.Hypergeometric( 100, 70, 20 );\nhypergeometric.N\nhypergeometric.K\nhypergeometric.n\nhypergeometric.kurtosis\nhypergeometric.mean\nhypergeometric.mode\nhypergeometric.skewness\nhypergeometric.stdev\nhypergeometric.variance\nhypergeometric.cdf( 2.9 )\nhypergeometric.logpmf( 10 )\nhypergeometric.pmf( 10 )\nhypergeometric.quantile( 0.8 )\n","base.dists.hypergeometric.kurtosis":"var v = base.dists.hypergeometric.kurtosis( 16, 11, 4 )\nv = base.dists.hypergeometric.kurtosis( 4, 2, 2 )\nv = base.dists.hypergeometric.kurtosis( 10, 5, 12 )\nv = base.dists.hypergeometric.kurtosis( 10.3, 10, 4 )\nv = base.dists.hypergeometric.kurtosis( 10, 5.5, 4 )\nv = base.dists.hypergeometric.kurtosis( 10, 5, 4.5 )\nv = base.dists.hypergeometric.kurtosis( NaN, 10, 4 )\nv = base.dists.hypergeometric.kurtosis( 20, NaN, 4 )\nv = base.dists.hypergeometric.kurtosis( 20, 10, NaN )\n","base.dists.hypergeometric.logpmf":"var y = base.dists.hypergeometric.logpmf( 1.0, 8, 4, 2 )\ny = base.dists.hypergeometric.logpmf( 2.0, 8, 4, 2 )\ny = base.dists.hypergeometric.logpmf( 0.0, 8, 4, 2 )\ny = base.dists.hypergeometric.logpmf( 1.5, 8, 4, 2 )\ny = base.dists.hypergeometric.logpmf( NaN, 10, 5, 2 )\ny = base.dists.hypergeometric.logpmf( 0.0, NaN, 5, 2 )\ny = base.dists.hypergeometric.logpmf( 0.0, 10, NaN, 2 )\ny = base.dists.hypergeometric.logpmf( 0.0, 10, 5, NaN )\ny = base.dists.hypergeometric.logpmf( 2.0, 10.5, 5, 2 )\ny = base.dists.hypergeometric.logpmf( 2.0, 5, 1.5, 2 )\ny = base.dists.hypergeometric.logpmf( 2.0, 10, 5, -2.0 )\ny = base.dists.hypergeometric.logpmf( 2.0, 10, 5, 12 )\ny = base.dists.hypergeometric.logpmf( 2.0, 8, 3, 9 )\n","base.dists.hypergeometric.logpmf.factory":"var mylogPMF = base.dists.hypergeometric.logpmf.factory( 30, 20, 5 );\nvar y = mylogPMF( 4.0 )\ny = mylogPMF( 1.0 )\n","base.dists.hypergeometric.mean":"var v = base.dists.hypergeometric.mean( 16, 11, 4 )\nv = base.dists.hypergeometric.mean( 2, 1, 1 )\nv = base.dists.hypergeometric.mean( 10, 5, 12 )\nv = base.dists.hypergeometric.mean( 10.3, 10, 4 )\nv = base.dists.hypergeometric.mean( 10, 5.5, 4 )\nv = base.dists.hypergeometric.mean( 10, 5, 4.5 )\nv = base.dists.hypergeometric.mean( NaN, 10, 4 )\nv = base.dists.hypergeometric.mean( 20, NaN, 4 )\nv = base.dists.hypergeometric.mean( 20, 10, NaN )\n","base.dists.hypergeometric.mode":"var v = base.dists.hypergeometric.mode( 16, 11, 4 )\nv = base.dists.hypergeometric.mode( 2, 1, 1 )\nv = base.dists.hypergeometric.mode( 10, 5, 12 )\nv = base.dists.hypergeometric.mode( 10.3, 10, 4 )\nv = base.dists.hypergeometric.mode( 10, 5.5, 4 )\nv = base.dists.hypergeometric.mode( 10, 5, 4.5 )\nv = base.dists.hypergeometric.mode( NaN, 10, 4 )\nv = base.dists.hypergeometric.mode( 20, NaN, 4 )\nv = base.dists.hypergeometric.mode( 20, 10, NaN )\n","base.dists.hypergeometric.pmf":"var y = base.dists.hypergeometric.pmf( 1.0, 8, 4, 2 )\ny = base.dists.hypergeometric.pmf( 2.0, 8, 4, 2 )\ny = base.dists.hypergeometric.pmf( 0.0, 8, 4, 2 )\ny = base.dists.hypergeometric.pmf( 1.5, 8, 4, 2 )\ny = base.dists.hypergeometric.pmf( NaN, 10, 5, 2 )\ny = base.dists.hypergeometric.pmf( 0.0, NaN, 5, 2 )\ny = base.dists.hypergeometric.pmf( 0.0, 10, NaN, 2 )\ny = base.dists.hypergeometric.pmf( 0.0, 10, 5, NaN )\ny = base.dists.hypergeometric.pmf( 2.0, 10.5, 5, 2 )\ny = base.dists.hypergeometric.pmf( 2.0, 5, 1.5, 2 )\ny = base.dists.hypergeometric.pmf( 2.0, 10, 5, -2.0 )\ny = base.dists.hypergeometric.pmf( 2.0, 10, 5, 12 )\ny = base.dists.hypergeometric.pmf( 2.0, 8, 3, 9 )\n","base.dists.hypergeometric.pmf.factory":"var myPMF = base.dists.hypergeometric.pmf.factory( 30, 20, 5 );\nvar y = myPMF( 4.0 )\ny = myPMF( 1.0 )\n","base.dists.hypergeometric.quantile":"var y = base.dists.hypergeometric.quantile( 0.4, 40, 20, 10 )\ny = base.dists.hypergeometric.quantile( 0.8, 60, 40, 20 )\ny = base.dists.hypergeometric.quantile( 0.5, 100, 10, 10 )\ny = base.dists.hypergeometric.quantile( 0.0, 100, 40, 20 )\ny = base.dists.hypergeometric.quantile( 1.0, 100, 40, 20 )\ny = base.dists.hypergeometric.quantile( NaN, 40, 20, 10 )\ny = base.dists.hypergeometric.quantile( 0.2, NaN, 20, 10 )\ny = base.dists.hypergeometric.quantile( 0.2, 40, NaN, 10 )\ny = base.dists.hypergeometric.quantile( 0.2, 40, 20, NaN )\n","base.dists.hypergeometric.quantile.factory":"var myQuantile = base.dists.hypergeometric.quantile.factory( 100, 20, 10 );\nvar y = myQuantile( 0.2 )\ny = myQuantile( 0.9 )\n","base.dists.hypergeometric.skewness":"var v = base.dists.hypergeometric.skewness( 16, 11, 4 )\nv = base.dists.hypergeometric.skewness( 4, 2, 2 )\nv = base.dists.hypergeometric.skewness( 10, 5, 12 )\nv = base.dists.hypergeometric.skewness( 10.3, 10, 4 )\nv = base.dists.hypergeometric.skewness( 10, 5.5, 4 )\nv = base.dists.hypergeometric.skewness( 10, 5, 4.5 )\nv = base.dists.hypergeometric.skewness( NaN, 10, 4 )\nv = base.dists.hypergeometric.skewness( 20, NaN, 4 )\nv = base.dists.hypergeometric.skewness( 20, 10, NaN )\n","base.dists.hypergeometric.stdev":"var v = base.dists.hypergeometric.stdev( 16, 11, 4 )\nv = base.dists.hypergeometric.stdev( 2, 1, 1 )\nv = base.dists.hypergeometric.stdev( 10, 5, 12 )\nv = base.dists.hypergeometric.stdev( 10.3, 10, 4 )\nv = base.dists.hypergeometric.stdev( 10, 5.5, 4 )\nv = base.dists.hypergeometric.stdev( 10, 5, 4.5 )\nv = base.dists.hypergeometric.stdev( NaN, 10, 4 )\nv = base.dists.hypergeometric.stdev( 20, NaN, 4 )\nv = base.dists.hypergeometric.stdev( 20, 10, NaN )\n","base.dists.hypergeometric.variance":"var v = base.dists.hypergeometric.variance( 16, 11, 4 )\nv = base.dists.hypergeometric.variance( 2, 1, 1 )\nv = base.dists.hypergeometric.variance( 10, 5, 12 )\nv = base.dists.hypergeometric.variance( 10.3, 10, 4 )\nv = base.dists.hypergeometric.variance( 10, 5.5, 4 )\nv = base.dists.hypergeometric.variance( 10, 5, 4.5 )\nv = base.dists.hypergeometric.variance( NaN, 10, 4 )\nv = base.dists.hypergeometric.variance( 20, NaN, 4 )\nv = base.dists.hypergeometric.variance( 20, 10, NaN )\n","base.dists.invgamma.cdf":"var y = base.dists.invgamma.cdf( 2.0, 1.0, 1.0 )\ny = base.dists.invgamma.cdf( 2.0, 3.0, 1.0 )\ny = base.dists.invgamma.cdf( -1.0, 2.0, 2.0 )\ny = base.dists.invgamma.cdf( PINF, 4.0, 2.0 )\ny = base.dists.invgamma.cdf( NINF, 4.0, 2.0 )\ny = base.dists.invgamma.cdf( NaN, 0.0, 1.0 )\ny = base.dists.invgamma.cdf( 0.0, NaN, 1.0 )\ny = base.dists.invgamma.cdf( 0.0, 0.0, NaN )\ny = base.dists.invgamma.cdf( 2.0, -1.0, 1.0 )\ny = base.dists.invgamma.cdf( 2.0, 1.0, -1.0 )\n","base.dists.invgamma.cdf.factory":"var myCDF = base.dists.invgamma.cdf.factory( 2.0, 0.5 );\nvar y = myCDF( 0.5 )\ny = myCDF( 2.0 )\n","base.dists.invgamma.entropy":"var v = base.dists.invgamma.entropy( 1.0, 1.0 )\nv = base.dists.invgamma.entropy( 4.0, 12.0 )\nv = base.dists.invgamma.entropy( 8.0, 2.0 )\n","base.dists.invgamma.InvGamma":"var invgamma = base.dists.invgamma.InvGamma( 6.0, 5.0 );\ninvgamma.alpha\ninvgamma.beta\ninvgamma.entropy\ninvgamma.kurtosis\ninvgamma.mean\ninvgamma.mode\ninvgamma.skewness\ninvgamma.stdev\ninvgamma.variance\ninvgamma.cdf( 0.8 )\ninvgamma.pdf( 1.0 )\ninvgamma.logpdf( 1.0 )\ninvgamma.quantile( 0.8 )\n","base.dists.invgamma.kurtosis":"var v = base.dists.invgamma.kurtosis( 7.0, 5.0 )\nv = base.dists.invgamma.kurtosis( 6.0, 12.0 )\nv = base.dists.invgamma.kurtosis( 8.0, 2.0 )\n","base.dists.invgamma.logpdf":"var y = base.dists.invgamma.logpdf( 2.0, 0.5, 1.0 )\ny = base.dists.invgamma.logpdf( 0.2, 1.0, 1.0 )\ny = base.dists.invgamma.logpdf( -1.0, 4.0, 2.0 )\ny = base.dists.invgamma.logpdf( NaN, 1.0, 1.0 )\ny = base.dists.invgamma.logpdf( 0.0, NaN, 1.0 )\ny = base.dists.invgamma.logpdf( 0.0, 1.0, NaN )\ny = base.dists.invgamma.logpdf( 2.0, -1.0, 1.0 )\ny = base.dists.invgamma.logpdf( 2.0, 1.0, -1.0 )\n","base.dists.invgamma.logpdf.factory":"var mylogPDF = base.dists.invgamma.logpdf.factory( 6.0, 7.0 );\nvar y = mylogPDF( 2.0 )\n","base.dists.invgamma.mean":"var v = base.dists.invgamma.mean( 4.0, 12.0 )\nv = base.dists.invgamma.mean( 8.0, 2.0 )\n","base.dists.invgamma.mode":"var v = base.dists.invgamma.mode( 1.0, 1.0 )\nv = base.dists.invgamma.mode( 4.0, 12.0 )\nv = base.dists.invgamma.mode( 8.0, 2.0 )\n","base.dists.invgamma.pdf":"var y = base.dists.invgamma.pdf( 2.0, 0.5, 1.0 )\ny = base.dists.invgamma.pdf( 0.2, 1.0, 1.0 )\ny = base.dists.invgamma.pdf( -1.0, 4.0, 2.0 )\ny = base.dists.invgamma.pdf( NaN, 1.0, 1.0 )\ny = base.dists.invgamma.pdf( 0.0, NaN, 1.0 )\ny = base.dists.invgamma.pdf( 0.0, 1.0, NaN )\ny = base.dists.invgamma.pdf( 2.0, -1.0, 1.0 )\ny = base.dists.invgamma.pdf( 2.0, 1.0, -1.0 )\n","base.dists.invgamma.pdf.factory":"var myPDF = base.dists.invgamma.pdf.factory( 6.0, 7.0 );\nvar y = myPDF( 2.0 )\n","base.dists.invgamma.quantile":"var y = base.dists.invgamma.quantile( 0.8, 2.0, 1.0 )\ny = base.dists.invgamma.quantile( 0.5, 4.0, 2.0 )\ny = base.dists.invgamma.quantile( 1.1, 1.0, 1.0 )\ny = base.dists.invgamma.quantile( -0.2, 1.0, 1.0 )\ny = base.dists.invgamma.quantile( NaN, 1.0, 1.0 )\ny = base.dists.invgamma.quantile( 0.0, NaN, 1.0 )\ny = base.dists.invgamma.quantile( 0.0, 1.0, NaN )\ny = base.dists.invgamma.quantile( 0.5, -1.0, 1.0 )\ny = base.dists.invgamma.quantile( 0.5, 1.0, -1.0 )\n","base.dists.invgamma.quantile.factory":"var myQuantile = base.dists.invgamma.quantile.factory( 2.0, 2.0 );\nvar y = myQuantile( 0.8 )\ny = myQuantile( 0.4 )\n","base.dists.invgamma.skewness":"var v = base.dists.invgamma.skewness( 4.0, 12.0 )\nv = base.dists.invgamma.skewness( 8.0, 2.0 )\n","base.dists.invgamma.stdev":"var v = base.dists.invgamma.stdev( 5.0, 7.0 )\nv = base.dists.invgamma.stdev( 4.0, 12.0 )\nv = base.dists.invgamma.stdev( 8.0, 2.0 )\n","base.dists.invgamma.variance":"var v = base.dists.invgamma.variance( 5.0, 7.0 )\nv = base.dists.invgamma.variance( 4.0, 12.0 )\nv = base.dists.invgamma.variance( 8.0, 2.0 )\n","base.dists.kumaraswamy.cdf":"var y = base.dists.kumaraswamy.cdf( 0.5, 1.0, 1.0 )\ny = base.dists.kumaraswamy.cdf( 0.5, 2.0, 4.0 )\ny = base.dists.kumaraswamy.cdf( 0.2, 2.0, 2.0 )\ny = base.dists.kumaraswamy.cdf( 0.8, 4.0, 4.0 )\ny = base.dists.kumaraswamy.cdf( -0.5, 4.0, 2.0 )\ny = base.dists.kumaraswamy.cdf( 1.5, 4.0, 2.0 )\ny = base.dists.kumaraswamy.cdf( 2.0, -1.0, 0.5 )\ny = base.dists.kumaraswamy.cdf( 2.0, 0.5, -1.0 )\ny = base.dists.kumaraswamy.cdf( NaN, 1.0, 1.0 )\ny = base.dists.kumaraswamy.cdf( 0.0, NaN, 1.0 )\ny = base.dists.kumaraswamy.cdf( 0.0, 1.0, NaN )\n","base.dists.kumaraswamy.cdf.factory":"var mycdf = base.dists.kumaraswamy.cdf.factory( 0.5, 1.0 );\nvar y = mycdf( 0.8 )\ny = mycdf( 0.3 )\n","base.dists.kumaraswamy.Kumaraswamy":"var kumaraswamy = base.dists.kumaraswamy.Kumaraswamy( 6.0, 5.0 );\nkumaraswamy.a\nkumaraswamy.b\nkumaraswamy.kurtosis\nkumaraswamy.mean\nkumaraswamy.mode\nkumaraswamy.skewness\nkumaraswamy.stdev\nkumaraswamy.variance\nkumaraswamy.cdf( 0.8 )\nkumaraswamy.pdf( 1.0 )\nkumaraswamy.quantile( 0.8 )\n","base.dists.kumaraswamy.kurtosis":"var v = base.dists.kumaraswamy.kurtosis( 1.0, 1.0 )\nv = base.dists.kumaraswamy.kurtosis( 4.0, 12.0 )\nv = base.dists.kumaraswamy.kurtosis( 16.0, 8.0 )\n","base.dists.kumaraswamy.logcdf":"var y = base.dists.kumaraswamy.logcdf( 0.5, 1.0, 1.0 )\ny = base.dists.kumaraswamy.logcdf( 0.5, 2.0, 4.0 )\ny = base.dists.kumaraswamy.logcdf( 0.2, 2.0, 2.0 )\ny = base.dists.kumaraswamy.logcdf( 0.8, 4.0, 4.0 )\ny = base.dists.kumaraswamy.logcdf( -0.5, 4.0, 2.0 )\ny = base.dists.kumaraswamy.logcdf( 1.5, 4.0, 2.0 )\ny = base.dists.kumaraswamy.logcdf( 2.0, -1.0, 0.5 )\ny = base.dists.kumaraswamy.logcdf( 2.0, 0.5, -1.0 )\ny = base.dists.kumaraswamy.logcdf( NaN, 1.0, 1.0 )\ny = base.dists.kumaraswamy.logcdf( 0.0, NaN, 1.0 )\ny = base.dists.kumaraswamy.logcdf( 0.0, 1.0, NaN )\n","base.dists.kumaraswamy.logcdf.factory":"var mylogcdf = base.dists.kumaraswamy.logcdf.factory( 0.5, 1.0 );\nvar y = mylogcdf( 0.8 )\ny = mylogcdf( 0.3 )\n","base.dists.kumaraswamy.logpdf":"var y = base.dists.kumaraswamy.logpdf( 0.5, 1.0, 1.0 )\ny = base.dists.kumaraswamy.logpdf( 0.5, 2.0, 4.0 )\ny = base.dists.kumaraswamy.logpdf( 0.2, 2.0, 2.0 )\ny = base.dists.kumaraswamy.logpdf( 0.8, 4.0, 4.0 )\ny = base.dists.kumaraswamy.logpdf( -0.5, 4.0, 2.0 )\ny = base.dists.kumaraswamy.logpdf( 1.5, 4.0, 2.0 )\ny = base.dists.kumaraswamy.logpdf( 2.0, -1.0, 0.5 )\ny = base.dists.kumaraswamy.logpdf( 2.0, 0.5, -1.0 )\ny = base.dists.kumaraswamy.logpdf( NaN, 1.0, 1.0 )\ny = base.dists.kumaraswamy.logpdf( 0.0, NaN, 1.0 )\ny = base.dists.kumaraswamy.logpdf( 0.0, 1.0, NaN )\n","base.dists.kumaraswamy.logpdf.factory":"var mylogpdf = base.dists.kumaraswamy.logpdf.factory( 0.5, 1.0 );\nvar y = mylogpdf( 0.8 )\ny = mylogpdf( 0.3 )\n","base.dists.kumaraswamy.mean":"var v = base.dists.kumaraswamy.mean( 1.5, 1.5 )\nv = base.dists.kumaraswamy.mean( 4.0, 12.0 )\nv = base.dists.kumaraswamy.mean( 16.0, 8.0 )\n","base.dists.kumaraswamy.median":"var v = base.dists.kumaraswamy.median( 1.0, 1.0 )\nv = base.dists.kumaraswamy.median( 4.0, 12.0 )\nv = base.dists.kumaraswamy.median( 16.0, 8.0 )\n","base.dists.kumaraswamy.mode":"var v = base.dists.kumaraswamy.mode( 1.5, 1.5 )\nv = base.dists.kumaraswamy.mode( 4.0, 12.0 )\nv = base.dists.kumaraswamy.mode( 16.0, 8.0 )\n","base.dists.kumaraswamy.pdf":"var y = base.dists.kumaraswamy.pdf( 0.5, 1.0, 1.0 )\ny = base.dists.kumaraswamy.pdf( 0.5, 2.0, 4.0 )\ny = base.dists.kumaraswamy.pdf( 0.2, 2.0, 2.0 )\ny = base.dists.kumaraswamy.pdf( 0.8, 4.0, 4.0 )\ny = base.dists.kumaraswamy.pdf( -0.5, 4.0, 2.0 )\ny = base.dists.kumaraswamy.pdf( 1.5, 4.0, 2.0 )\ny = base.dists.kumaraswamy.pdf( 2.0, -1.0, 0.5 )\ny = base.dists.kumaraswamy.pdf( 2.0, 0.5, -1.0 )\ny = base.dists.kumaraswamy.pdf( NaN, 1.0, 1.0 )\ny = base.dists.kumaraswamy.pdf( 0.0, NaN, 1.0 )\ny = base.dists.kumaraswamy.pdf( 0.0, 1.0, NaN )\n","base.dists.kumaraswamy.pdf.factory":"var mypdf = base.dists.kumaraswamy.pdf.factory( 0.5, 1.0 );\nvar y = mypdf( 0.8 )\ny = mypdf( 0.3 )\n","base.dists.kumaraswamy.quantile":"var y = base.dists.kumaraswamy.quantile( 0.5, 1.0, 1.0 )\ny = base.dists.kumaraswamy.quantile( 0.5, 2.0, 4.0 )\ny = base.dists.kumaraswamy.quantile( 0.2, 2.0, 2.0 )\ny = base.dists.kumaraswamy.quantile( 0.8, 4.0, 4.0 )\ny = base.dists.kumaraswamy.quantile( -0.5, 4.0, 2.0 )\ny = base.dists.kumaraswamy.quantile( 1.5, 4.0, 2.0 )\ny = base.dists.kumaraswamy.quantile( 2.0, -1.0, 0.5 )\ny = base.dists.kumaraswamy.quantile( 2.0, 0.5, -1.0 )\ny = base.dists.kumaraswamy.quantile( NaN, 1.0, 1.0 )\ny = base.dists.kumaraswamy.quantile( 0.0, NaN, 1.0 )\ny = base.dists.kumaraswamy.quantile( 0.0, 1.0, NaN )\n","base.dists.kumaraswamy.quantile.factory":"var myQuantile = base.dists.kumaraswamy.quantile.factory( 0.5, 1.0 );\nvar y = myQuantile( 0.8 )\ny = myQuantile( 0.3 )\n","base.dists.kumaraswamy.skewness":"var v = base.dists.kumaraswamy.skewness( 1.0, 1.0 )\nv = base.dists.kumaraswamy.skewness( 4.0, 12.0 )\nv = base.dists.kumaraswamy.skewness( 16.0, 8.0 )\n","base.dists.kumaraswamy.stdev":"var v = base.dists.kumaraswamy.stdev( 1.0, 1.0 )\nv = base.dists.kumaraswamy.stdev( 4.0, 12.0 )\nv = base.dists.kumaraswamy.stdev( 16.0, 8.0 )\n","base.dists.kumaraswamy.variance":"var v = base.dists.kumaraswamy.variance( 1.0, 1.0 )\nv = base.dists.kumaraswamy.variance( 4.0, 12.0 )\nv = base.dists.kumaraswamy.variance( 16.0, 8.0 )\n","base.dists.laplace.cdf":"var y = base.dists.laplace.cdf( 2.0, 0.0, 1.0 )\ny = base.dists.laplace.cdf( 5.0, 10.0, 3.0 )\ny = base.dists.laplace.cdf( NaN, 0.0, 1.0 )\ny = base.dists.laplace.cdf( 2, NaN, 1.0 )\ny = base.dists.laplace.cdf( 2.0, 0.0, NaN )\ny = base.dists.laplace.cdf( 2.0, 0.0, -1.0 )\n","base.dists.laplace.cdf.factory":"var myCDF = base.dists.laplace.cdf.factory( 2.0, 3.0 );\nvar y = myCDF( 10.0 )\ny = myCDF( 2.0 )\n","base.dists.laplace.entropy":"var y = base.dists.laplace.entropy( 0.0, 1.0 )\ny = base.dists.laplace.entropy( 4.0, 2.0 )\ny = base.dists.laplace.entropy( NaN, 1.0 )\ny = base.dists.laplace.entropy( 0.0, NaN )\ny = base.dists.laplace.entropy( 0.0, 0.0 )\n","base.dists.laplace.kurtosis":"var y = base.dists.laplace.kurtosis( 0.0, 1.0 )\ny = base.dists.laplace.kurtosis( 4.0, 2.0 )\ny = base.dists.laplace.kurtosis( NaN, 1.0 )\ny = base.dists.laplace.kurtosis( 0.0, NaN )\ny = base.dists.laplace.kurtosis( 0.0, 0.0 )\n","base.dists.laplace.Laplace":"var laplace = base.dists.laplace.Laplace( -2.0, 3.0 );\nlaplace.mu\nlaplace.b\nlaplace.entropy\nlaplace.kurtosis\nlaplace.mean\nlaplace.median\nlaplace.mode\nlaplace.skewness\nlaplace.stdev\nlaplace.variance\nlaplace.cdf( 0.8 )\nlaplace.logcdf( 0.8 )\nlaplace.logpdf( 1.0 )\nlaplace.mgf( 0.2 )\nlaplace.pdf( 2.0 )\nlaplace.quantile( 0.9 )\n","base.dists.laplace.logcdf":"var y = base.dists.laplace.logcdf( 2.0, 0.0, 1.0 )\ny = base.dists.laplace.logcdf( 5.0, 10.0, 3.0 )\ny = base.dists.laplace.logcdf( NaN, 0.0, 1.0 )\ny = base.dists.laplace.logcdf( 2, NaN, 1.0 )\ny = base.dists.laplace.logcdf( 2.0, 0.0, NaN )\ny = base.dists.laplace.logcdf( 2.0, 0.0, -1.0 )\n","base.dists.laplace.logcdf.factory":"var mylogcdf = base.dists.laplace.logcdf.factory( 2.0, 3.0 );\nvar y = mylogcdf( 10.0 )\ny = mylogcdf( 2.0 )\n","base.dists.laplace.logpdf":"var y = base.dists.laplace.logpdf( 2.0, 0.0, 1.0 )\ny = base.dists.laplace.logpdf( -1.0, 2.0, 3.0 )\ny = base.dists.laplace.logpdf( 2.5, 2.0, 3.0 )\ny = base.dists.laplace.logpdf( NaN, 0.0, 1.0 )\ny = base.dists.laplace.logpdf( 0.0, NaN, 1.0 )\ny = base.dists.laplace.logpdf( 0.0, 0.0, NaN )\ny = base.dists.laplace.logpdf( 2.0, 0.0, -1.0 )\n","base.dists.laplace.logpdf.factory":"var mylogPDF = base.dists.laplace.logpdf.factory( 10.0, 2.0 );\nvar y = mylogPDF( 10.0 )\n","base.dists.laplace.mean":"var y = base.dists.laplace.mean( 0.0, 1.0 )\ny = base.dists.laplace.mean( 4.0, 2.0 )\ny = base.dists.laplace.mean( NaN, 1.0 )\ny = base.dists.laplace.mean( 0.0, NaN )\ny = base.dists.laplace.mean( 0.0, 0.0 )\n","base.dists.laplace.median":"var y = base.dists.laplace.median( 0.0, 1.0 )\ny = base.dists.laplace.median( 4.0, 2.0 )\ny = base.dists.laplace.median( NaN, 1.0 )\ny = base.dists.laplace.median( 0.0, NaN )\ny = base.dists.laplace.median( 0.0, 0.0 )\n","base.dists.laplace.mgf":"var y = base.dists.laplace.mgf( 0.5, 0.0, 1.0 )\ny = base.dists.laplace.mgf( 0.0, 0.0, 1.0 )\ny = base.dists.laplace.mgf( -1.0, 4.0, 0.2 )\ny = base.dists.laplace.mgf( NaN, 0.0, 1.0 )\ny = base.dists.laplace.mgf( 0.0, NaN, 1.0 )\ny = base.dists.laplace.mgf( 0.0, 0.0, NaN )\ny = base.dists.laplace.mgf( 1.0, 0.0, 2.0 )\ny = base.dists.laplace.mgf( -0.5, 0.0, 4.0 )\ny = base.dists.laplace.mgf( 2.0, 0.0, 0.0 )\ny = base.dists.laplace.mgf( 2.0, 0.0, -1.0 )\n","base.dists.laplace.mgf.factory":"var mymgf = base.dists.laplace.mgf.factory( 4.0, 2.0 );\nvar y = mymgf( 0.2 )\ny = mymgf( 0.4 )\n","base.dists.laplace.mode":"var y = base.dists.laplace.mode( 0.0, 1.0 )\ny = base.dists.laplace.mode( 4.0, 2.0 )\ny = base.dists.laplace.mode( NaN, 1.0 )\ny = base.dists.laplace.mode( 0.0, NaN )\ny = base.dists.laplace.mode( 0.0, 0.0 )\n","base.dists.laplace.pdf":"var y = base.dists.laplace.pdf( 2.0, 0.0, 1.0 )\ny = base.dists.laplace.pdf( -1.0, 2.0, 3.0 )\ny = base.dists.laplace.pdf( 2.5, 2.0, 3.0 )\ny = base.dists.laplace.pdf( NaN, 0.0, 1.0 )\ny = base.dists.laplace.pdf( 0.0, NaN, 1.0 )\ny = base.dists.laplace.pdf( 0.0, 0.0, NaN )\ny = base.dists.laplace.pdf( 2.0, 0.0, -1.0 )\n","base.dists.laplace.pdf.factory":"var myPDF = base.dists.laplace.pdf.factory( 10.0, 2.0 );\nvar y = myPDF( 10.0 )\n","base.dists.laplace.quantile":"var y = base.dists.laplace.quantile( 0.8, 0.0, 1.0 )\ny = base.dists.laplace.quantile( 0.5, 4.0, 2.0 )\ny = base.dists.laplace.quantile( 1.1, 0.0, 1.0 )\ny = base.dists.laplace.quantile( -0.2, 0.0, 1.0 )\ny = base.dists.laplace.quantile( NaN, 0.0, 1.0 )\ny = base.dists.laplace.quantile( 0.0, NaN, 1.0 )\ny = base.dists.laplace.quantile( 0.0, 0.0, NaN )\ny = base.dists.laplace.quantile( 0.5, 0.0, -1.0 )\n","base.dists.laplace.quantile.factory":"var myQuantile = base.dists.laplace.quantile.factory( 10.0, 2.0 );\nvar y = myQuantile( 0.5 )\ny = myQuantile( 0.8 )\n","base.dists.laplace.skewness":"var y = base.dists.laplace.skewness( 0.0, 1.0 )\ny = base.dists.laplace.skewness( 4.0, 2.0 )\ny = base.dists.laplace.skewness( NaN, 1.0 )\ny = base.dists.laplace.skewness( 0.0, NaN )\ny = base.dists.laplace.skewness( 0.0, 0.0 )\n","base.dists.laplace.stdev":"var y = base.dists.laplace.stdev( 0.0, 1.0 )\ny = base.dists.laplace.stdev( 4.0, 2.0 )\ny = base.dists.laplace.stdev( NaN, 1.0 )\ny = base.dists.laplace.stdev( 0.0, NaN )\ny = base.dists.laplace.stdev( 0.0, 0.0 )\n","base.dists.laplace.variance":"var y = base.dists.laplace.variance( 0.0, 1.0 )\ny = base.dists.laplace.variance( 4.0, 2.0 )\ny = base.dists.laplace.variance( NaN, 1.0 )\ny = base.dists.laplace.variance( 0.0, NaN )\ny = base.dists.laplace.variance( 0.0, 0.0 )\n","base.dists.levy.cdf":"var y = base.dists.levy.cdf( 2.0, 0.0, 1.0 )\ny = base.dists.levy.cdf( 12.0, 10.0, 3.0 )\ny = base.dists.levy.cdf( 9.0, 10.0, 3.0 )\ny = base.dists.levy.cdf( NaN, 0.0, 1.0 )\ny = base.dists.levy.cdf( 2, NaN, 1.0 )\ny = base.dists.levy.cdf( 2.0, 0.0, NaN )\ny = base.dists.levy.cdf( 2.0, 0.0, -1.0 )\n","base.dists.levy.cdf.factory":"var myCDF = base.dists.levy.cdf.factory( 2.0, 3.0 );\nvar y = myCDF( 10.0 )\ny = myCDF( 2.0 )\n","base.dists.levy.entropy":"var y = base.dists.levy.entropy( 0.0, 1.0 )\ny = base.dists.levy.entropy( 4.0, 2.0 )\ny = base.dists.levy.entropy( NaN, 1.0 )\ny = base.dists.levy.entropy( 0.0, NaN )\ny = base.dists.levy.entropy( 0.0, 0.0 )\n","base.dists.levy.Levy":"var levy = base.dists.levy.Levy( -2.0, 3.0 );\nlevy.mu\nlevy.c\nlevy.entropy\nlevy.mean\nlevy.median\nlevy.mode\nlevy.stdev\nlevy.variance\nlevy.cdf( 0.8 )\nlevy.logcdf( 0.8 )\nlevy.logpdf( 1.0 )\nlevy.pdf( 1.0 )\nlevy.quantile( 0.8 )\n","base.dists.levy.logcdf":"var y = base.dists.levy.logcdf( 2.0, 0.0, 1.0 )\ny = base.dists.levy.logcdf( 12.0, 10.0, 3.0 )\ny = base.dists.levy.logcdf( 9.0, 10.0, 3.0 )\ny = base.dists.levy.logcdf( NaN, 0.0, 1.0 )\ny = base.dists.levy.logcdf( 2, NaN, 1.0 )\ny = base.dists.levy.logcdf( 2.0, 0.0, NaN )\ny = base.dists.levy.logcdf( 2.0, 0.0, -1.0 )\n","base.dists.levy.logcdf.factory":"var mylogcdf = base.dists.levy.logcdf.factory( 2.0, 3.0 );\nvar y = mylogcdf( 10.0 )\ny = mylogcdf( 2.0 )\n","base.dists.levy.logpdf":"var y = base.dists.levy.logpdf( 2.0, 0.0, 1.0 )\ny = base.dists.levy.logpdf( -1.0, 4.0, 2.0 )\ny = base.dists.levy.logpdf( NaN, 0.0, 1.0 )\ny = base.dists.levy.logpdf( 0.0, NaN, 1.0 )\ny = base.dists.levy.logpdf( 0.0, 0.0, NaN )\ny = base.dists.levy.logpdf( 2.0, 0.0, -1.0 )\n","base.dists.levy.logpdf.factory":"var mylogPDF = base.dists.levy.logpdf.factory( 10.0, 2.0 );\nvar y = mylogPDF( 11.0 )\n","base.dists.levy.mean":"var y = base.dists.levy.mean( 0.0, 1.0 )\ny = base.dists.levy.mean( 4.0, 3.0 )\ny = base.dists.levy.mean( NaN, 1.0 )\ny = base.dists.levy.mean( 0.0, NaN )\ny = base.dists.levy.mean( 0.0, 0.0 )\n","base.dists.levy.median":"var y = base.dists.levy.median( 0.0, 1.0 )\ny = base.dists.levy.median( 4.0, 3.0 )\ny = base.dists.levy.median( NaN, 1.0 )\ny = base.dists.levy.median( 0.0, NaN )\ny = base.dists.levy.median( 0.0, 0.0 )\n","base.dists.levy.mode":"var y = base.dists.levy.mode( 0.0, 1.0 )\ny = base.dists.levy.mode( 4.0, 3.0 )\ny = base.dists.levy.mode( NaN, 1.0 )\ny = base.dists.levy.mode( 0.0, NaN )\ny = base.dists.levy.mode( 0.0, 0.0 )\n","base.dists.levy.pdf":"var y = base.dists.levy.pdf( 2.0, 0.0, 1.0 )\ny = base.dists.levy.pdf( -1.0, 4.0, 2.0 )\ny = base.dists.levy.pdf( NaN, 0.0, 1.0 )\ny = base.dists.levy.pdf( 0.0, NaN, 1.0 )\ny = base.dists.levy.pdf( 0.0, 0.0, NaN )\ny = base.dists.levy.pdf( 2.0, 0.0, -1.0 )\n","base.dists.levy.pdf.factory":"var myPDF = base.dists.levy.pdf.factory( 10.0, 2.0 );\nvar y = myPDF( 11.0 )\n","base.dists.levy.quantile":"var y = base.dists.levy.quantile( 0.8, 0.0, 1.0 )\ny = base.dists.levy.quantile( 0.5, 4.0, 2.0 )\ny = base.dists.levy.quantile( 1.1, 0.0, 1.0 )\ny = base.dists.levy.quantile( -0.2, 0.0, 1.0 )\ny = base.dists.levy.quantile( NaN, 0.0, 1.0 )\ny = base.dists.levy.quantile( 0.0, NaN, 1.0 )\ny = base.dists.levy.quantile( 0.0, 0.0, NaN )\ny = base.dists.levy.quantile( 0.5, 0.0, -1.0 )\n","base.dists.levy.quantile.factory":"var myQuantile = base.dists.levy.quantile.factory( 10.0, 2.0 );\nvar y = myQuantile( 0.5 )\n","base.dists.levy.stdev":"var y = base.dists.levy.stdev( 0.0, 1.0 )\ny = base.dists.levy.stdev( 4.0, 3.0 )\ny = base.dists.levy.stdev( NaN, 1.0 )\ny = base.dists.levy.stdev( 0.0, NaN )\ny = base.dists.levy.stdev( 0.0, 0.0 )\n","base.dists.levy.variance":"var y = base.dists.levy.variance( 0.0, 1.0 )\ny = base.dists.levy.variance( 4.0, 3.0 )\ny = base.dists.levy.variance( NaN, 1.0 )\ny = base.dists.levy.variance( 0.0, NaN )\ny = base.dists.levy.variance( 0.0, 0.0 )\n","base.dists.logistic.cdf":"var y = base.dists.logistic.cdf( 2.0, 0.0, 1.0 )\ny = base.dists.logistic.cdf( 5.0, 10.0, 3.0 )\ny = base.dists.logistic.cdf( 2.0, 0.0, NaN )\ny = base.dists.logistic.cdf( 2.0, NaN, 1.0 )\ny = base.dists.logistic.cdf( NaN, 0.0, 1.0 )\ny = base.dists.logistic.cdf( 2.0, 8.0, 0.0 )\ny = base.dists.logistic.cdf( 8.0, 8.0, 0.0 )\ny = base.dists.logistic.cdf( 10.0, 8.0, 0.0 )\n","base.dists.logistic.cdf.factory":"var mycdf = base.dists.logistic.cdf.factory( 3.0, 1.5 );\nvar y = mycdf( 1.0 )\n","base.dists.logistic.entropy":"var y = base.dists.logistic.entropy( 0.0, 1.0 )\ny = base.dists.logistic.entropy( 4.0, 2.0 )\ny = base.dists.logistic.entropy( NaN, 1.0 )\ny = base.dists.logistic.entropy( 0.0, NaN )\ny = base.dists.logistic.entropy( 0.0, 0.0 )\n","base.dists.logistic.kurtosis":"var y = base.dists.logistic.kurtosis( 0.0, 1.0 )\ny = base.dists.logistic.kurtosis( 4.0, 2.0 )\ny = base.dists.logistic.kurtosis( NaN, 1.0 )\ny = base.dists.logistic.kurtosis( 0.0, NaN )\ny = base.dists.logistic.kurtosis( 0.0, 0.0 )\n","base.dists.logistic.logcdf":"var y = base.dists.logistic.logcdf( 2.0, 0.0, 1.0 )\ny = base.dists.logistic.logcdf( 5.0, 10.0, 3.0 )\ny = base.dists.logistic.logcdf( 2.0, 0.0, NaN )\ny = base.dists.logistic.logcdf( 2, NaN, 1.0 )\ny = base.dists.logistic.logcdf( NaN, 0.0, 1.0 )\n","base.dists.logistic.logcdf.factory":"var mylogcdf = base.dists.logistic.logcdf.factory( 3.0, 1.5 );\nvar y = mylogcdf( 1.0 )\n","base.dists.logistic.Logistic":"var logistic = base.dists.logistic.Logistic( -2.0, 3.0 );\nlogistic.mu\nlogistic.s\nlogistic.entropy\nlogistic.kurtosis\nlogistic.mean\nlogistic.median\nlogistic.mode\nlogistic.skewness\nlogistic.stdev\nlogistic.variance\nlogistic.cdf( 0.8 )\nlogistic.logcdf( 0.8 )\nlogistic.logpdf( 2.0 )\nlogistic.mgf( 0.2 )\nlogistic.pdf( 2.0 )\nlogistic.quantile( 0.9 )\n","base.dists.logistic.logpdf":"var y = base.dists.logistic.logpdf( 2.0, 0.0, 1.0 )\ny = base.dists.logistic.logpdf( -1.0, 4.0, 2.0 )\ny = base.dists.logistic.logpdf( NaN, 0.0, 1.0 )\ny = base.dists.logistic.logpdf( 0.0, NaN, 1.0 )\ny = base.dists.logistic.logpdf( 0.0, 0.0, NaN )\ny = base.dists.logistic.logpdf( 2.0, 0.0, -1.0 )\ny = base.dists.logistic.logpdf( 2.0, 8.0, 0.0 )\ny = base.dists.logistic.logpdf( 8.0, 8.0, 0.0 )\n","base.dists.logistic.logpdf.factory":"var mylogpdf = base.dists.logistic.logpdf.factory( 10.0, 2.0 );\nvar y = mylogpdf( 10.0 )\n","base.dists.logistic.mean":"var y = base.dists.logistic.mean( 0.0, 1.0 )\ny = base.dists.logistic.mean( 4.0, 2.0 )\ny = base.dists.logistic.mean( NaN, 1.0 )\ny = base.dists.logistic.mean( 0.0, NaN )\ny = base.dists.logistic.mean( 0.0, 0.0 )\n","base.dists.logistic.median":"var y = base.dists.logistic.median( 0.0, 1.0 )\ny = base.dists.logistic.median( 4.0, 2.0 )\ny = base.dists.logistic.median( NaN, 1.0 )\ny = base.dists.logistic.median( 0.0, NaN )\ny = base.dists.logistic.median( 0.0, 0.0 )\n","base.dists.logistic.mgf":"var y = base.dists.logistic.mgf( 0.9, 0.0, 1.0 )\ny = base.dists.logistic.mgf( 0.1, 4.0, 4.0 )\ny = base.dists.logistic.mgf( -0.2, 4.0, 4.0 )\ny = base.dists.logistic.mgf( 0.5, 0.0, -1.0 )\ny = base.dists.logistic.mgf( 0.5, 0.0, 4.0 )\ny = base.dists.logistic.mgf( NaN, 0.0, 1.0 )\ny = base.dists.logistic.mgf( 0.0, NaN, 1.0 )\ny = base.dists.logistic.mgf( 0.0, 0.0, NaN )\n","base.dists.logistic.mgf.factory":"var mymgf = base.dists.logistic.mgf.factory( 10.0, 0.5 );\nvar y = mymgf( 0.5 )\ny = mymgf( 2.0 )\n","base.dists.logistic.mode":"var y = base.dists.logistic.mode( 0.0, 1.0 )\ny = base.dists.logistic.mode( 4.0, 2.0 )\ny = base.dists.logistic.mode( NaN, 1.0 )\ny = base.dists.logistic.mode( 0.0, NaN )\ny = base.dists.logistic.mode( 0.0, 0.0 )\n","base.dists.logistic.pdf":"var y = base.dists.logistic.pdf( 2.0, 0.0, 1.0 )\ny = base.dists.logistic.pdf( -1.0, 4.0, 2.0 )\ny = base.dists.logistic.pdf( NaN, 0.0, 1.0 )\ny = base.dists.logistic.pdf( 0.0, NaN, 1.0 )\ny = base.dists.logistic.pdf( 0.0, 0.0, NaN )\ny = base.dists.logistic.pdf( 2.0, 0.0, -1.0 )\ny = base.dists.logistic.pdf( 2.0, 8.0, 0.0 )\ny = base.dists.logistic.pdf( 8.0, 8.0, 0.0 )\n","base.dists.logistic.pdf.factory":"var myPDF = base.dists.logistic.pdf.factory( 10.0, 2.0 );\nvar y = myPDF( 10.0 )\n","base.dists.logistic.quantile":"var y = base.dists.logistic.quantile( 0.8, 0.0, 1.0 )\ny = base.dists.logistic.quantile( 0.5, 4.0, 2.0 )\ny = base.dists.logistic.quantile( 1.1, 0.0, 1.0 )\ny = base.dists.logistic.quantile( -0.2, 0.0, 1.0 )\ny = base.dists.logistic.quantile( NaN, 0.0, 1.0 )\ny = base.dists.logistic.quantile( 0.0, NaN, 1.0 )\ny = base.dists.logistic.quantile( 0.0, 0.0, NaN )\ny = base.dists.logistic.quantile( 0.5, 0.0, -1.0 )\n","base.dists.logistic.quantile.factory":"var myQuantile = base.dists.logistic.quantile.factory( 10.0, 2.0 );\nvar y = myQuantile( 0.5 )\n","base.dists.logistic.skewness":"var y = base.dists.logistic.skewness( 0.0, 1.0 )\ny = base.dists.logistic.skewness( 4.0, 2.0 )\ny = base.dists.logistic.skewness( NaN, 1.0 )\ny = base.dists.logistic.skewness( 0.0, NaN )\ny = base.dists.logistic.skewness( 0.0, 0.0 )\n","base.dists.logistic.stdev":"var y = base.dists.logistic.stdev( 0.0, 1.0 )\ny = base.dists.logistic.stdev( 4.0, 2.0 )\ny = base.dists.logistic.stdev( NaN, 1.0 )\ny = base.dists.logistic.stdev( 0.0, NaN )\ny = base.dists.logistic.stdev( 0.0, 0.0 )\n","base.dists.logistic.variance":"var y = base.dists.logistic.variance( 0.0, 1.0 )\ny = base.dists.logistic.variance( 4.0, 2.0 )\ny = base.dists.logistic.variance( NaN, 1.0 )\ny = base.dists.logistic.variance( 0.0, NaN )\ny = base.dists.logistic.variance( 0.0, 0.0 )\n","base.dists.lognormal.cdf":"var y = base.dists.lognormal.cdf( 2.0, 0.0, 1.0 )\ny = base.dists.lognormal.cdf( 5.0, 10.0, 3.0 )\ny = base.dists.lognormal.cdf( 2.0, 0.0, NaN )\ny = base.dists.lognormal.cdf( 2.0, NaN, 1.0 )\ny = base.dists.lognormal.cdf( NaN, 0.0, 1.0 )\ny = base.dists.lognormal.cdf( 2.0, 0.0, -1.0 )\ny = base.dists.lognormal.cdf( 2.0, 0.0, 0.0 )\n","base.dists.lognormal.cdf.factory":"var myCDF = base.dists.lognormal.cdf.factory( 3.0, 1.5 );\nvar y = myCDF( 1.0 )\ny = myCDF( 4.0 )\n","base.dists.lognormal.entropy":"var y = base.dists.lognormal.entropy( 0.0, 1.0 )\ny = base.dists.lognormal.entropy( 5.0, 2.0 )\ny = base.dists.lognormal.entropy( NaN, 1.0 )\ny = base.dists.lognormal.entropy( 0.0, NaN )\ny = base.dists.lognormal.entropy( 0.0, 0.0 )\n","base.dists.lognormal.kurtosis":"var y = base.dists.lognormal.kurtosis( 0.0, 1.0 )\ny = base.dists.lognormal.kurtosis( 5.0, 2.0 )\ny = base.dists.lognormal.kurtosis( NaN, 1.0 )\ny = base.dists.lognormal.kurtosis( 0.0, NaN )\ny = base.dists.lognormal.kurtosis( 0.0, 0.0 )\n","base.dists.lognormal.LogNormal":"var lognormal = base.dists.lognormal.LogNormal( -2.0, 3.0 );\nlognormal.mu\nlognormal.sigma\nlognormal.entropy\nlognormal.kurtosis\nlognormal.mean\nlognormal.median\nlognormal.mode\nlognormal.skewness\nlognormal.stdev\nlognormal.variance\nlognormal.cdf( 0.8 )\nlognormal.logcdf( 0.8 )\nlognormal.logpdf( 2.0 )\nlognormal.pdf( 2.0 )\nlognormal.quantile( 0.9 )\n","base.dists.lognormal.logcdf":"var y = base.dists.lognormal.logcdf( 2.0, 0.0, 1.0 )\ny = base.dists.lognormal.logcdf( 13.0, 4.0, 2.0 )\ny = base.dists.lognormal.logcdf( NaN, 0.0, 1.0 )\ny = base.dists.lognormal.logcdf( 0.0, NaN, 1.0 )\ny = base.dists.lognormal.logcdf( 0.0, 0.0, NaN )\ny = base.dists.lognormal.logcdf( 2.0, 0.0, -1.0 )\ny = base.dists.lognormal.logcdf( 2.0, 8.0, 0.0 )\ny = base.dists.lognormal.logcdf( 8.0, 8.0, 0.0 )\n","base.dists.lognormal.logcdf.factory":"var mylogcdf = base.dists.lognormal.logcdf.factory( 10.0, 2.0 );\nvar y = mylogcdf( 10.0 )\n","base.dists.lognormal.logpdf":"var y = base.dists.lognormal.logpdf( 2.0, 0.0, 1.0 )\ny = base.dists.lognormal.logpdf( 1.0, 0.0, 1.0 )\ny = base.dists.lognormal.logpdf( 1.0, 3.0, 1.0 )\ny = base.dists.lognormal.logpdf( -1.0, 4.0, 2.0 )\ny = base.dists.lognormal.logpdf( NaN, 0.0, 1.0 )\ny = base.dists.lognormal.logpdf( 0.0, NaN, 1.0 )\ny = base.dists.lognormal.logpdf( 0.0, 0.0, NaN )\ny = base.dists.lognormal.logpdf( 2.0, 0.0, -1.0 )\ny = base.dists.lognormal.logpdf( 2.0, 0.0, 0.0 )\n","base.dists.lognormal.logpdf.factory":"var mylogPDF = base.dists.lognormal.logpdf.factory( 4.0, 2.0 );\nvar y = mylogPDF( 10.0 )\ny = mylogPDF( 2.0 )\n","base.dists.lognormal.mean":"var y = base.dists.lognormal.mean( 0.0, 1.0 )\ny = base.dists.lognormal.mean( 4.0, 2.0 )\ny = base.dists.lognormal.mean( NaN, 1.0 )\ny = base.dists.lognormal.mean( 0.0, NaN )\ny = base.dists.lognormal.mean( 0.0, 0.0 )\n","base.dists.lognormal.median":"var y = base.dists.lognormal.median( 0.0, 1.0 )\ny = base.dists.lognormal.median( 5.0, 2.0 )\ny = base.dists.lognormal.median( NaN, 1.0 )\ny = base.dists.lognormal.median( 0.0, NaN )\ny = base.dists.lognormal.median( 0.0, 0.0 )\n","base.dists.lognormal.mode":"var y = base.dists.lognormal.mode( 0.0, 1.0 )\ny = base.dists.lognormal.mode( 5.0, 2.0 )\ny = base.dists.lognormal.mode( NaN, 1.0 )\ny = base.dists.lognormal.mode( 0.0, NaN )\ny = base.dists.lognormal.mode( 0.0, 0.0 )\n","base.dists.lognormal.pdf":"var y = base.dists.lognormal.pdf( 2.0, 0.0, 1.0 )\ny = base.dists.lognormal.pdf( 1.0, 0.0, 1.0 )\ny = base.dists.lognormal.pdf( 1.0, 3.0, 1.0 )\ny = base.dists.lognormal.pdf( -1.0, 4.0, 2.0 )\ny = base.dists.lognormal.pdf( NaN, 0.0, 1.0 )\ny = base.dists.lognormal.pdf( 0.0, NaN, 1.0 )\ny = base.dists.lognormal.pdf( 0.0, 0.0, NaN )\ny = base.dists.lognormal.pdf( 2.0, 0.0, -1.0 )\ny = base.dists.lognormal.pdf( 2.0, 0.0, 0.0 )\n","base.dists.lognormal.pdf.factory":"var myPDF = base.dists.lognormal.pdf.factory( 4.0, 2.0 );\nvar y = myPDF( 10.0 )\ny = myPDF( 2.0 )\n","base.dists.lognormal.quantile":"var y = base.dists.lognormal.quantile( 0.8, 0.0, 1.0 )\ny = base.dists.lognormal.quantile( 0.5, 4.0, 2.0 )\ny = base.dists.lognormal.quantile( 1.1, 0.0, 1.0 )\ny = base.dists.lognormal.quantile( -0.2, 0.0, 1.0 )\ny = base.dists.lognormal.quantile( NaN, 0.0, 1.0 )\ny = base.dists.lognormal.quantile( 0.0, NaN, 1.0 )\ny = base.dists.lognormal.quantile( 0.0, 0.0, NaN )\ny = base.dists.lognormal.quantile( 0.5, 0.0, -1.0 )\ny = base.dists.lognormal.quantile( 0.5, 0.0, 0.0 )\n","base.dists.lognormal.quantile.factory":"var myQuantile = base.dists.lognormal.quantile.factory( 4.0, 2.0 );\nvar y = myQuantile( 0.2 )\ny = myQuantile( 0.8 )\n","base.dists.lognormal.skewness":"var y = base.dists.lognormal.skewness( 0.0, 1.0 )\ny = base.dists.lognormal.skewness( 5.0, 2.0 )\ny = base.dists.lognormal.skewness( NaN, 1.0 )\ny = base.dists.lognormal.skewness( 0.0, NaN )\ny = base.dists.lognormal.skewness( 0.0, 0.0 )\n","base.dists.lognormal.stdev":"var y = base.dists.lognormal.stdev( 0.0, 1.0 )\ny = base.dists.lognormal.stdev( 4.0, 2.0 )\ny = base.dists.lognormal.stdev( NaN, 1.0 )\ny = base.dists.lognormal.stdev( 0.0, NaN )\ny = base.dists.lognormal.stdev( 0.0, 0.0 )\n","base.dists.lognormal.variance":"var y = base.dists.lognormal.variance( 0.0, 1.0 )\ny = base.dists.lognormal.variance( 4.0, 2.0 )\ny = base.dists.lognormal.variance( NaN, 1.0 )\ny = base.dists.lognormal.variance( 0.0, NaN )\ny = base.dists.lognormal.variance( 0.0, 0.0 )\n","base.dists.negativeBinomial.cdf":"var y = base.dists.negativeBinomial.cdf( 5.0, 20.0, 0.8 )\ny = base.dists.negativeBinomial.cdf( 21.0, 20.0, 0.5 )\ny = base.dists.negativeBinomial.cdf( 5.0, 10.0, 0.4 )\ny = base.dists.negativeBinomial.cdf( 0.0, 10.0, 0.9 )\ny = base.dists.negativeBinomial.cdf( 21.0, 15.5, 0.5 )\ny = base.dists.negativeBinomial.cdf( 5.0, 7.4, 0.4 )\ny = base.dists.negativeBinomial.cdf( 2.0, 0.0, 0.5 )\ny = base.dists.negativeBinomial.cdf( 2.0, -2.0, 0.5 )\ny = base.dists.negativeBinomial.cdf( NaN, 20.0, 0.5 )\ny = base.dists.negativeBinomial.cdf( 0.0, NaN, 0.5 )\ny = base.dists.negativeBinomial.cdf( 0.0, 20.0, NaN )\ny = base.dists.negativeBinomial.cdf( 2.0, 20, -1.0 )\ny = base.dists.negativeBinomial.cdf( 2.0, 20, 1.5 )\n","base.dists.negativeBinomial.cdf.factory":"var myCDF = base.dists.negativeBinomial.cdf.factory( 10, 0.5 );\nvar y = myCDF( 3.0 )\ny = myCDF( 11.0 )\n","base.dists.negativeBinomial.kurtosis":"var v = base.dists.negativeBinomial.kurtosis( 100, 0.2 )\nv = base.dists.negativeBinomial.kurtosis( 20, 0.5 )\n","base.dists.negativeBinomial.logpmf":"var y = base.dists.negativeBinomial.logpmf( 5.0, 20.0, 0.8 )\ny = base.dists.negativeBinomial.logpmf( 21.0, 20.0, 0.5 )\ny = base.dists.negativeBinomial.logpmf( 5.0, 10.0, 0.4 )\ny = base.dists.negativeBinomial.logpmf( 0.0, 10.0, 0.9 )\ny = base.dists.negativeBinomial.logpmf( 21.0, 15.5, 0.5 )\ny = base.dists.negativeBinomial.logpmf( 5.0, 7.4, 0.4 )\ny = base.dists.negativeBinomial.logpmf( 2.0, 0.0, 0.5 )\ny = base.dists.negativeBinomial.logpmf( 2.0, -2.0, 0.5 )\ny = base.dists.negativeBinomial.logpmf( 2.0, 20, -1.0 )\ny = base.dists.negativeBinomial.logpmf( 2.0, 20, 1.5 )\ny = base.dists.negativeBinomial.logpmf( NaN, 20.0, 0.5 )\ny = base.dists.negativeBinomial.logpmf( 0.0, NaN, 0.5 )\ny = base.dists.negativeBinomial.logpmf( 0.0, 20.0, NaN )\n","base.dists.negativeBinomial.logpmf.factory":"var mylogPMF = base.dists.negativeBinomial.logpmf.factory( 10, 0.5 );\nvar y = mylogPMF( 3.0 )\ny = mylogPMF( 5.0 )\n","base.dists.negativeBinomial.mean":"var v = base.dists.negativeBinomial.mean( 100, 0.2 )\nv = base.dists.negativeBinomial.mean( 20, 0.5 )\n","base.dists.negativeBinomial.mgf":"var y = base.dists.negativeBinomial.mgf( 0.05, 20.0, 0.8 )\ny = base.dists.negativeBinomial.mgf( 0.1, 20.0, 0.1 )\ny = base.dists.negativeBinomial.mgf( 0.5, 10.0, 0.4 )\ny = base.dists.negativeBinomial.mgf( 0.1, 0.0, 0.5 )\ny = base.dists.negativeBinomial.mgf( 0.1, -2.0, 0.5 )\ny = base.dists.negativeBinomial.mgf( NaN, 20.0, 0.5 )\ny = base.dists.negativeBinomial.mgf( 0.0, NaN, 0.5 )\ny = base.dists.negativeBinomial.mgf( 0.0, 20.0, NaN )\ny = base.dists.negativeBinomial.mgf( 0.2, 20, -1.0 )\ny = base.dists.negativeBinomial.mgf( 0.2, 20, 1.5 )\n","base.dists.negativeBinomial.mgf.factory":"var myMGF = base.dists.negativeBinomial.mgf.factory( 4.3, 0.4 );\nvar y = myMGF( 0.2 )\ny = myMGF( 0.4 )\n","base.dists.negativeBinomial.mode":"var v = base.dists.negativeBinomial.mode( 100, 0.2 )\nv = base.dists.negativeBinomial.mode( 20, 0.5 )\n","base.dists.negativeBinomial.NegativeBinomial":"var nbinomial = base.dists.negativeBinomial.NegativeBinomial( 8.0, 0.5 );\nnbinomial.r\nnbinomial.p\nnbinomial.kurtosis\nnbinomial.mean\nnbinomial.mode\nnbinomial.skewness\nnbinomial.stdev\nnbinomial.variance\nnbinomial.cdf( 2.9 )\nnbinomial.logpmf( 3.0 )\nnbinomial.mgf( 0.2 )\nnbinomial.pmf( 3.0 )\nnbinomial.quantile( 0.8 )\n","base.dists.negativeBinomial.pmf":"var y = base.dists.negativeBinomial.pmf( 5.0, 20.0, 0.8 )\ny = base.dists.negativeBinomial.pmf( 21.0, 20.0, 0.5 )\ny = base.dists.negativeBinomial.pmf( 5.0, 10.0, 0.4 )\ny = base.dists.negativeBinomial.pmf( 0.0, 10.0, 0.9 )\ny = base.dists.negativeBinomial.pmf( 21.0, 15.5, 0.5 )\ny = base.dists.negativeBinomial.pmf( 5.0, 7.4, 0.4 )\ny = base.dists.negativeBinomial.pmf( 2.0, 0.0, 0.5 )\ny = base.dists.negativeBinomial.pmf( 2.0, -2.0, 0.5 )\ny = base.dists.negativeBinomial.pmf( 2.0, 20, -1.0 )\ny = base.dists.negativeBinomial.pmf( 2.0, 20, 1.5 )\ny = base.dists.negativeBinomial.pmf( NaN, 20.0, 0.5 )\ny = base.dists.negativeBinomial.pmf( 0.0, NaN, 0.5 )\ny = base.dists.negativeBinomial.pmf( 0.0, 20.0, NaN )\n","base.dists.negativeBinomial.pmf.factory":"var myPMF = base.dists.negativeBinomial.pmf.factory( 10, 0.5 );\nvar y = myPMF( 3.0 )\ny = myPMF( 5.0 )\n","base.dists.negativeBinomial.quantile":"var y = base.dists.negativeBinomial.quantile( 0.9, 20.0, 0.2 )\ny = base.dists.negativeBinomial.quantile( 0.9, 20.0, 0.8 )\ny = base.dists.negativeBinomial.quantile( 0.5, 10.0, 0.4 )\ny = base.dists.negativeBinomial.quantile( 0.0, 10.0, 0.9 )\ny = base.dists.negativeBinomial.quantile( 1.1, 20.0, 0.5 )\ny = base.dists.negativeBinomial.quantile( -0.1, 20.0, 0.5 )\ny = base.dists.negativeBinomial.quantile( 21.0, 15.5, 0.5 )\ny = base.dists.negativeBinomial.quantile( 5.0, 7.4, 0.4 )\ny = base.dists.negativeBinomial.quantile( 0.5, 0.0, 0.5 )\ny = base.dists.negativeBinomial.quantile( 0.5, -2.0, 0.5 )\ny = base.dists.negativeBinomial.quantile( 0.3, 20.0, -1.0 )\ny = base.dists.negativeBinomial.quantile( 0.3, 20.0, 1.5 )\ny = base.dists.negativeBinomial.quantile( NaN, 20.0, 0.5 )\ny = base.dists.negativeBinomial.quantile( 0.3, NaN, 0.5 )\ny = base.dists.negativeBinomial.quantile( 0.3, 20.0, NaN )\n","base.dists.negativeBinomial.quantile.factory":"var myQuantile = base.dists.negativeBinomial.quantile.factory( 10.0, 0.5 );\nvar y = myQuantile( 0.1 )\ny = myQuantile( 0.9 )\n","base.dists.negativeBinomial.skewness":"var v = base.dists.negativeBinomial.skewness( 100, 0.2 )\nv = base.dists.negativeBinomial.skewness( 20, 0.5 )\n","base.dists.negativeBinomial.stdev":"var v = base.dists.negativeBinomial.stdev( 100, 0.2 )\nv = base.dists.negativeBinomial.stdev( 20, 0.5 )\n","base.dists.negativeBinomial.variance":"var v = base.dists.negativeBinomial.variance( 100, 0.2 )\nv = base.dists.negativeBinomial.variance( 20, 0.5 )\n","base.dists.normal.cdf":"var y = base.dists.normal.cdf( 2.0, 0.0, 1.0 )\ny = base.dists.normal.cdf( -1.0, -1.0, 2.0 )\ny = base.dists.normal.cdf( -1.0, 4.0, 2.0 )\ny = base.dists.normal.cdf( NaN, 0.0, 1.0 )\ny = base.dists.normal.cdf( 0.0, NaN, 1.0 )\ny = base.dists.normal.cdf( 0.0, 0.0, NaN )\ny = base.dists.normal.cdf( 2.0, 0.0, -1.0 )\ny = base.dists.normal.cdf( 2.0, 8.0, 0.0 )\ny = base.dists.normal.cdf( 8.0, 8.0, 0.0 )\ny = base.dists.normal.cdf( 10.0, 8.0, 0.0 )\n","base.dists.normal.cdf.factory":"var myCDF = base.dists.normal.cdf.factory( 10.0, 2.0 );\nvar y = myCDF( 10.0 )\n","base.dists.normal.entropy":"var y = base.dists.normal.entropy( 0.0, 1.0 )\ny = base.dists.normal.entropy( 4.0, 3.0 )\ny = base.dists.normal.entropy( NaN, 1.0 )\ny = base.dists.normal.entropy( 0.0, NaN )\ny = base.dists.normal.entropy( 0.0, 0.0 )\n","base.dists.normal.kurtosis":"var y = base.dists.normal.kurtosis( 0.0, 1.0 )\ny = base.dists.normal.kurtosis( 4.0, 3.0 )\ny = base.dists.normal.kurtosis( NaN, 1.0 )\ny = base.dists.normal.kurtosis( 0.0, NaN )\ny = base.dists.normal.kurtosis( 0.0, 0.0 )\n","base.dists.normal.logcdf":"var y = base.dists.normal.logcdf( 2.0, 0.0, 1.0 )\ny = base.dists.normal.logcdf( -1.0, 4.0, 2.0 )\ny = base.dists.normal.logcdf( NaN, 0.0, 1.0 )\ny = base.dists.normal.logcdf( 0.0, NaN, 1.0 )\ny = base.dists.normal.logcdf( 0.0, 0.0, NaN )\ny = base.dists.normal.logcdf( 2.0, 0.0, -1.0 )\ny = base.dists.normal.logcdf( 2.0, 8.0, 0.0 )\ny = base.dists.normal.logcdf( 8.0, 8.0, 0.0 )\n","base.dists.normal.logcdf.factory":"var mylogcdf = base.dists.normal.logcdf.factory( 10.0, 2.0 );\nvar y = mylogcdf( 10.0 )\n","base.dists.normal.logpdf":"var y = base.dists.normal.logpdf( 2.0, 0.0, 1.0 )\ny = base.dists.normal.logpdf( -1.0, 4.0, 2.0 )\ny = base.dists.normal.logpdf( NaN, 0.0, 1.0 )\ny = base.dists.normal.logpdf( 0.0, NaN, 1.0 )\ny = base.dists.normal.logpdf( 0.0, 0.0, NaN )\ny = base.dists.normal.logpdf( 2.0, 0.0, -1.0 )\ny = base.dists.normal.logpdf( 2.0, 8.0, 0.0 )\ny = base.dists.normal.logpdf( 8.0, 8.0, 0.0 )\n","base.dists.normal.logpdf.factory":"var myLogPDF = base.dists.normal.logpdf.factory( 10.0, 2.0 );\nvar y = myLogPDF( 10.0 )\n","base.dists.normal.mean":"var y = base.dists.normal.mean( 0.0, 1.0 )\ny = base.dists.normal.mean( 4.0, 2.0 )\ny = base.dists.normal.mean( NaN, 1.0 )\ny = base.dists.normal.mean( 0.0, NaN )\ny = base.dists.normal.mean( 0.0, 0.0 )\n","base.dists.normal.median":"var y = base.dists.normal.median( 0.0, 1.0 )\ny = base.dists.normal.median( 4.0, 2.0 )\ny = base.dists.normal.median( NaN, 1.0 )\ny = base.dists.normal.median( 0.0, NaN )\ny = base.dists.normal.median( 0.0, 0.0 )\n","base.dists.normal.mgf":"var y = base.dists.normal.mgf( 2.0, 0.0, 1.0 )\ny = base.dists.normal.mgf( 0.0, 0.0, 1.0 )\ny = base.dists.normal.mgf( -1.0, 4.0, 2.0 )\ny = base.dists.normal.mgf( NaN, 0.0, 1.0 )\ny = base.dists.normal.mgf( 0.0, NaN, 1.0 )\ny = base.dists.normal.mgf( 0.0, 0.0, NaN )\ny = base.dists.normal.mgf( 2.0, 0.0, 0.0 )\n","base.dists.normal.mgf.factory":"var myMGF = base.dists.normal.mgf.factory( 4.0, 2.0 );\nvar y = myMGF( 1.0 )\ny = myMGF( 0.5 )\n","base.dists.normal.mode":"var y = base.dists.normal.mode( 0.0, 1.0 )\ny = base.dists.normal.mode( 4.0, 2.0 )\ny = base.dists.normal.mode( NaN, 1.0 )\ny = base.dists.normal.mode( 0.0, NaN )\ny = base.dists.normal.mode( 0.0, 0.0 )\n","base.dists.normal.Normal":"var normal = base.dists.normal.Normal( -2.0, 3.0 );\nnormal.mu\nnormal.sigma\nnormal.entropy\nnormal.kurtosis\nnormal.mean\nnormal.median\nnormal.mode\nnormal.skewness\nnormal.stdev\nnormal.variance\nnormal.cdf( 0.8 )\nnormal.logcdf( 0.8 )\nnormal.logpdf( 2.0 )\nnormal.mgf( 0.2 )\nnormal.pdf( 2.0 )\nnormal.quantile( 0.9 )\n","base.dists.normal.pdf":"var y = base.dists.normal.pdf( 2.0, 0.0, 1.0 )\ny = base.dists.normal.pdf( -1.0, 4.0, 2.0 )\ny = base.dists.normal.pdf( NaN, 0.0, 1.0 )\ny = base.dists.normal.pdf( 0.0, NaN, 1.0 )\ny = base.dists.normal.pdf( 0.0, 0.0, NaN )\ny = base.dists.normal.pdf( 2.0, 0.0, -1.0 )\ny = base.dists.normal.pdf( 2.0, 8.0, 0.0 )\ny = base.dists.normal.pdf( 8.0, 8.0, 0.0 )\n","base.dists.normal.pdf.factory":"var myPDF = base.dists.normal.pdf.factory( 10.0, 2.0 );\nvar y = myPDF( 10.0 )\n","base.dists.normal.quantile":"var y = base.dists.normal.quantile( 0.8, 0.0, 1.0 )\ny = base.dists.normal.quantile( 0.5, 4.0, 2.0 )\ny = base.dists.normal.quantile( 1.1, 0.0, 1.0 )\ny = base.dists.normal.quantile( -0.2, 0.0, 1.0 )\ny = base.dists.normal.quantile( NaN, 0.0, 1.0 )\ny = base.dists.normal.quantile( 0.0, NaN, 1.0 )\ny = base.dists.normal.quantile( 0.0, 0.0, NaN )\ny = base.dists.normal.quantile( 0.5, 0.0, -1.0 )\ny = base.dists.normal.quantile( 0.3, 8.0, 0.0 )\ny = base.dists.normal.quantile( 0.9, 8.0, 0.0 )\n","base.dists.normal.quantile.factory":"var myQuantile = base.dists.normal.quantile.factory( 10.0, 2.0 );\nvar y = myQuantile( 0.5 )\n","base.dists.normal.skewness":"var y = base.dists.normal.skewness( 0.0, 1.0 )\ny = base.dists.normal.skewness( 4.0, 3.0 )\ny = base.dists.normal.skewness( NaN, 1.0 )\ny = base.dists.normal.skewness( 0.0, NaN )\ny = base.dists.normal.skewness( 0.0, 0.0 )\n","base.dists.normal.stdev":"var y = base.dists.normal.stdev( 0.0, 1.0 )\ny = base.dists.normal.stdev( 4.0, 3.0 )\ny = base.dists.normal.stdev( NaN, 1.0 )\ny = base.dists.normal.stdev( 0.0, NaN )\ny = base.dists.normal.stdev( 0.0, 0.0 )\n","base.dists.normal.variance":"var y = base.dists.normal.variance( 0.0, 1.0 )\ny = base.dists.normal.variance( 4.0, 3.0 )\ny = base.dists.normal.variance( NaN, 1.0 )\ny = base.dists.normal.variance( 0.0, NaN )\ny = base.dists.normal.variance( 0.0, 0.0 )\n","base.dists.pareto1.cdf":"var y = base.dists.pareto1.cdf( 2.0, 1.0, 1.0 )\ny = base.dists.pareto1.cdf( 5.0, 2.0, 4.0 )\ny = base.dists.pareto1.cdf( 4.0, 2.0, 2.0 )\ny = base.dists.pareto1.cdf( 1.9, 2.0, 2.0 )\ny = base.dists.pareto1.cdf( PINF, 4.0, 2.0 )\ny = base.dists.pareto1.cdf( 2.0, -1.0, 0.5 )\ny = base.dists.pareto1.cdf( 2.0, 0.5, -1.0 )\ny = base.dists.pareto1.cdf( NaN, 1.0, 1.0 )\ny = base.dists.pareto1.cdf( 0.0, NaN, 1.0 )\ny = base.dists.pareto1.cdf( 0.0, 1.0, NaN )\n","base.dists.pareto1.cdf.factory":"var myCDF = base.dists.pareto1.cdf.factory( 10.0, 2.0 );\nvar y = myCDF( 3.0 )\ny = myCDF( 2.5 )\n","base.dists.pareto1.entropy":"var v = base.dists.pareto1.entropy( 0.8, 1.0 )\nv = base.dists.pareto1.entropy( 4.0, 12.0 )\nv = base.dists.pareto1.entropy( 8.0, 2.0 )\n","base.dists.pareto1.kurtosis":"var v = base.dists.pareto1.kurtosis( 5.0, 1.0 )\nv = base.dists.pareto1.kurtosis( 4.5, 12.0 )\nv = base.dists.pareto1.kurtosis( 8.0, 2.0 )\n","base.dists.pareto1.logcdf":"var y = base.dists.pareto1.logcdf( 2.0, 1.0, 1.0 )\ny = base.dists.pareto1.logcdf( 5.0, 2.0, 4.0 )\ny = base.dists.pareto1.logcdf( 4.0, 2.0, 2.0 )\ny = base.dists.pareto1.logcdf( 1.9, 2.0, 2.0 )\ny = base.dists.pareto1.logcdf( PINF, 4.0, 2.0 )\ny = base.dists.pareto1.logcdf( 2.0, -1.0, 0.5 )\ny = base.dists.pareto1.logcdf( 2.0, 0.5, -1.0 )\ny = base.dists.pareto1.logcdf( NaN, 1.0, 1.0 )\ny = base.dists.pareto1.logcdf( 0.0, NaN, 1.0 )\ny = base.dists.pareto1.logcdf( 0.0, 1.0, NaN )\n","base.dists.pareto1.logcdf.factory":"var mylogCDF = base.dists.pareto1.logcdf.factory( 10.0, 2.0 );\nvar y = mylogCDF( 3.0 )\ny = mylogCDF( 2.5 )\n","base.dists.pareto1.logpdf":"var y = base.dists.pareto1.logpdf( 4.0, 1.0, 1.0 )\ny = base.dists.pareto1.logpdf( 20.0, 1.0, 10.0 )\ny = base.dists.pareto1.logpdf( 7.0, 2.0, 6.0 )\ny = base.dists.pareto1.logpdf( 7.0, 6.0, 3.0 )\ny = base.dists.pareto1.logpdf( 1.0, 4.0, 2.0 )\ny = base.dists.pareto1.logpdf( 1.5, 4.0, 2.0 )\ny = base.dists.pareto1.logpdf( 0.5, -1.0, 0.5 )\ny = base.dists.pareto1.logpdf( 0.5, 0.5, -1.0 )\ny = base.dists.pareto1.logpdf( NaN, 1.0, 1.0 )\ny = base.dists.pareto1.logpdf( 0.5, NaN, 1.0 )\ny = base.dists.pareto1.logpdf( 0.5, 1.0, NaN )\n","base.dists.pareto1.logpdf.factory":"var mylogPDF = base.dists.pareto1.logpdf.factory( 0.5, 0.5 );\nvar y = mylogPDF( 0.8 )\ny = mylogPDF( 2.0 )\n","base.dists.pareto1.mean":"var v = base.dists.pareto1.mean( 0.8, 1.0 )\nv = base.dists.pareto1.mean( 4.0, 12.0 )\nv = base.dists.pareto1.mean( 8.0, 2.0 )\n","base.dists.pareto1.median":"var v = base.dists.pareto1.median( 0.8, 1.0 )\nv = base.dists.pareto1.median( 4.0, 12.0 )\nv = base.dists.pareto1.median( 8.0, 2.0 )\n","base.dists.pareto1.mode":"var v = base.dists.pareto1.mode( 0.8, 1.0 )\nv = base.dists.pareto1.mode( 4.0, 12.0 )\nv = base.dists.pareto1.mode( 8.0, 2.0 )\n","base.dists.pareto1.Pareto1":"var pareto1 = base.dists.pareto1.Pareto1( 6.0, 5.0 );\npareto1.alpha\npareto1.beta\npareto1.entropy\npareto1.kurtosis\npareto1.mean\npareto1.median\npareto1.mode\npareto1.skewness\npareto1.variance\npareto1.cdf( 7.0 )\npareto1.logcdf( 7.0 )\npareto1.logpdf( 5.0 )\npareto1.pdf( 5.0 )\npareto1.quantile( 0.8 )\n","base.dists.pareto1.pdf":"var y = base.dists.pareto1.pdf( 4.0, 1.0, 1.0 )\ny = base.dists.pareto1.pdf( 20.0, 1.0, 10.0 )\ny = base.dists.pareto1.pdf( 7.0, 2.0, 6.0 )\ny = base.dists.pareto1.pdf( 7.0, 6.0, 3.0 )\ny = base.dists.pareto1.pdf( 1.0, 4.0, 2.0 )\ny = base.dists.pareto1.pdf( 1.5, 4.0, 2.0 )\ny = base.dists.pareto1.pdf( 0.5, -1.0, 0.5 )\ny = base.dists.pareto1.pdf( 0.5, 0.5, -1.0 )\ny = base.dists.pareto1.pdf( NaN, 1.0, 1.0 )\ny = base.dists.pareto1.pdf( 0.5, NaN, 1.0 )\ny = base.dists.pareto1.pdf( 0.5, 1.0, NaN )\n","base.dists.pareto1.pdf.factory":"var myPDF = base.dists.pareto1.pdf.factory( 0.5, 0.5 );\nvar y = myPDF( 0.8 )\ny = myPDF( 2.0 )\n","base.dists.pareto1.quantile":"var y = base.dists.pareto1.quantile( 0.8, 2.0, 1.0 )\ny = base.dists.pareto1.quantile( 0.8, 1.0, 10.0 )\ny = base.dists.pareto1.quantile( 0.1, 1.0, 10.0 )\ny = base.dists.pareto1.quantile( 1.1, 1.0, 1.0 )\ny = base.dists.pareto1.quantile( -0.2, 1.0, 1.0 )\ny = base.dists.pareto1.quantile( NaN, 1.0, 1.0 )\ny = base.dists.pareto1.quantile( 0.5, NaN, 1.0 )\ny = base.dists.pareto1.quantile( 0.5, 1.0, NaN )\ny = base.dists.pareto1.quantile( 0.5, -1.0, 1.0 )\ny = base.dists.pareto1.quantile( 0.5, 1.0, -1.0 )\n","base.dists.pareto1.quantile.factory":"var myQuantile = base.dists.pareto1.quantile.factory( 2.5, 0.5 );\nvar y = myQuantile( 0.5 )\ny = myQuantile( 0.8 )\n","base.dists.pareto1.skewness":"var v = base.dists.pareto1.skewness( 3.5, 1.0 )\nv = base.dists.pareto1.skewness( 4.0, 12.0 )\nv = base.dists.pareto1.skewness( 8.0, 2.0 )\n","base.dists.pareto1.stdev":"var v = base.dists.pareto1.stdev( 0.8, 1.0 )\nv = base.dists.pareto1.stdev( 4.0, 12.0 )\nv = base.dists.pareto1.stdev( 8.0, 2.0 )\n","base.dists.pareto1.variance":"var v = base.dists.pareto1.variance( 0.8, 1.0 )\nv = base.dists.pareto1.variance( 4.0, 12.0 )\nv = base.dists.pareto1.variance( 8.0, 2.0 )\n","base.dists.poisson.cdf":"var y = base.dists.poisson.cdf( 2.0, 0.5 )\ny = base.dists.poisson.cdf( 2.0, 10.0 )\ny = base.dists.poisson.cdf( -1.0, 4.0 )\ny = base.dists.poisson.cdf( NaN, 1.0 )\ny = base.dists.poisson.cdf( 0.0, NaN )\ny = base.dists.poisson.cdf( 2.0, -1.0 )\ny = base.dists.poisson.cdf( -2.0, 0.0 )\ny = base.dists.poisson.cdf( 0.0, 0.0 )\ny = base.dists.poisson.cdf( 10.0, 0.0 )\n","base.dists.poisson.cdf.factory":"var mycdf = base.dists.poisson.cdf.factory( 5.0 );\nvar y = mycdf( 3.0 )\ny = mycdf( 8.0 )\n","base.dists.poisson.entropy":"var v = base.dists.poisson.entropy( 11.0 )\nv = base.dists.poisson.entropy( 4.5 )\n","base.dists.poisson.kurtosis":"var v = base.dists.poisson.kurtosis( 11.0 )\nv = base.dists.poisson.kurtosis( 4.5 )\n","base.dists.poisson.logpmf":"var y = base.dists.poisson.logpmf( 4.0, 3.0 )\ny = base.dists.poisson.logpmf( 1.0, 3.0 )\ny = base.dists.poisson.logpmf( -1.0, 2.0 )\ny = base.dists.poisson.logpmf( 0.0, NaN )\ny = base.dists.poisson.logpmf( NaN, 0.5 )\ny = base.dists.poisson.logpmf( 2.0, -0.5 )\ny = base.dists.poisson.logpmf( 2.0, 0.0 )\ny = base.dists.poisson.logpmf( 0.0, 0.0 )\n","base.dists.poisson.logpmf.factory":"var mylogpmf = base.dists.poisson.logpmf.factory( 1.0 );\nvar y = mylogpmf( 3.0 )\ny = mylogpmf( 1.0 )\n","base.dists.poisson.mean":"var v = base.dists.poisson.mean( 11.0 )\nv = base.dists.poisson.mean( 4.5 )\n","base.dists.poisson.median":"var v = base.dists.poisson.median( 11.0 )\nv = base.dists.poisson.median( 4.5 )\n","base.dists.poisson.mgf":"var y = base.dists.poisson.mgf( 1.0, 1.5 )\ny = base.dists.poisson.mgf( 0.5, 0.5 )\ny = base.dists.poisson.mgf( NaN, 0.5 )\ny = base.dists.poisson.mgf( 0.0, NaN )\ny = base.dists.poisson.mgf( -2.0, -1.0 )\n","base.dists.poisson.mgf.factory":"var myMGF = base.dists.poisson.mgf.factory( 2.0 );\nvar y = myMGF( 0.1 )\n","base.dists.poisson.mode":"var v = base.dists.poisson.mode( 11.0 )\nv = base.dists.poisson.mode( 4.5 )\n","base.dists.poisson.pmf":"var y = base.dists.poisson.pmf( 4.0, 3.0 )\ny = base.dists.poisson.pmf( 1.0, 3.0 )\ny = base.dists.poisson.pmf( -1.0, 2.0 )\ny = base.dists.poisson.pmf( 0.0, NaN )\ny = base.dists.poisson.pmf( NaN, 0.5 )\ny = base.dists.poisson.pmf( 2.0, -0.5 )\ny = base.dists.poisson.pmf( 2.0, 0.0 )\ny = base.dists.poisson.pmf( 0.0, 0.0 )\n","base.dists.poisson.pmf.factory":"var mypmf = base.dists.poisson.pmf.factory( 1.0 );\nvar y = mypmf( 3.0 )\ny = mypmf( 1.0 )\n","base.dists.poisson.Poisson":"var poisson = base.dists.poisson.Poisson( 6.0 );\npoisson.lambda\npoisson.entropy\npoisson.kurtosis\npoisson.mean\npoisson.median\npoisson.mode\npoisson.skewness\npoisson.stdev\npoisson.variance\npoisson.cdf( 4.0 )\npoisson.logpmf( 2.0 )\npoisson.mgf( 0.5 )\npoisson.pmf( 2.0 )\npoisson.quantile( 0.5 )\n","base.dists.poisson.quantile":"var y = base.dists.poisson.quantile( 0.5, 2.0 )\ny = base.dists.poisson.quantile( 0.9, 4.0 )\ny = base.dists.poisson.quantile( 0.1, 200.0 )\ny = base.dists.poisson.quantile( 1.1, 0.0 )\ny = base.dists.poisson.quantile( -0.2, 0.0 )\ny = base.dists.poisson.quantile( NaN, 0.5 )\ny = base.dists.poisson.quantile( 0.0, NaN )\ny = base.dists.poisson.quantile( 2.0, -1.0 )\ny = base.dists.poisson.quantile( 0.1, 0.0 )\ny = base.dists.poisson.quantile( 0.9, 0.0 )\n","base.dists.poisson.quantile.factory":"var myQuantile = base.dists.poisson.quantile.factory( 0.4 );\nvar y = myQuantile( 0.4 )\ny = myQuantile( 1.0 )\n","base.dists.poisson.skewness":"var v = base.dists.poisson.skewness( 11.0 )\nv = base.dists.poisson.skewness( 4.5 )\n","base.dists.poisson.stdev":"var v = base.dists.poisson.stdev( 11.0 )\nv = base.dists.poisson.stdev( 4.5 )\n","base.dists.poisson.variance":"var v = base.dists.poisson.variance( 11.0 )\nv = base.dists.poisson.variance( 4.5 )\n","base.dists.rayleigh.cdf":"var y = base.dists.rayleigh.cdf( 2.0, 3.0 )\ny = base.dists.rayleigh.cdf( 1.0, 2.0 )\ny = base.dists.rayleigh.cdf( -1.0, 4.0 )\ny = base.dists.rayleigh.cdf( NaN, 1.0 )\ny = base.dists.rayleigh.cdf( 0.0, NaN )\ny = base.dists.rayleigh.cdf( 2.0, -1.0 )\ny = base.dists.rayleigh.cdf( -2.0, 0.0 )\ny = base.dists.rayleigh.cdf( 0.0, 0.0 )\ny = base.dists.rayleigh.cdf( 2.0, 0.0 )\n","base.dists.rayleigh.cdf.factory":"var myCDF = base.dists.rayleigh.cdf.factory( 0.5 );\nvar y = myCDF( 1.0 )\ny = myCDF( 0.5 )\n","base.dists.rayleigh.entropy":"var v = base.dists.rayleigh.entropy( 11.0 )\nv = base.dists.rayleigh.entropy( 4.5 )\n","base.dists.rayleigh.kurtosis":"var v = base.dists.rayleigh.kurtosis( 11.0 )\nv = base.dists.rayleigh.kurtosis( 4.5 )\n","base.dists.rayleigh.logcdf":"var y = base.dists.rayleigh.logcdf( 2.0, 3.0 )\ny = base.dists.rayleigh.logcdf( 1.0, 2.0 )\ny = base.dists.rayleigh.logcdf( -1.0, 4.0 )\ny = base.dists.rayleigh.logcdf( NaN, 1.0 )\ny = base.dists.rayleigh.logcdf( 0.0, NaN )\ny = base.dists.rayleigh.logcdf( 2.0, -1.0 )\n","base.dists.rayleigh.logcdf.factory":"var mylogcdf = base.dists.rayleigh.logcdf.factory( 0.5 );\nvar y = mylogcdf( 1.0 )\ny = mylogcdf( 0.5 )\n","base.dists.rayleigh.logpdf":"var y = base.dists.rayleigh.logpdf( 0.3, 1.0 )\ny = base.dists.rayleigh.logpdf( 2.0, 0.8 )\ny = base.dists.rayleigh.logpdf( -1.0, 0.5 )\ny = base.dists.rayleigh.logpdf( 0.0, NaN )\ny = base.dists.rayleigh.logpdf( NaN, 2.0 )\ny = base.dists.rayleigh.logpdf( 2.0, -1.0 )\n","base.dists.rayleigh.logpdf.factory":"var mylogpdf = base.dists.rayleigh.logpdf.factory( 4.0 );\nvar y = mylogpdf( 6.0 )\ny = mylogpdf( 4.0 )\n","base.dists.rayleigh.mean":"var v = base.dists.rayleigh.mean( 11.0 )\nv = base.dists.rayleigh.mean( 4.5 )\n","base.dists.rayleigh.median":"var v = base.dists.rayleigh.median( 11.0 )\nv = base.dists.rayleigh.median( 4.5 )\n","base.dists.rayleigh.mgf":"var y = base.dists.rayleigh.mgf( 1.0, 3.0 )\ny = base.dists.rayleigh.mgf( 1.0, 2.0 )\ny = base.dists.rayleigh.mgf( -1.0, 4.0 )\ny = base.dists.rayleigh.mgf( NaN, 1.0 )\ny = base.dists.rayleigh.mgf( 0.0, NaN )\ny = base.dists.rayleigh.mgf( 0.5, -1.0 )\n","base.dists.rayleigh.mgf.factory":"var myMGF = base.dists.rayleigh.mgf.factory( 0.5 );\nvar y = myMGF( 1.0 )\ny = myMGF( 0.5 )\n","base.dists.rayleigh.mode":"var v = base.dists.rayleigh.mode( 11.0 )\nv = base.dists.rayleigh.mode( 4.5 )\n","base.dists.rayleigh.pdf":"var y = base.dists.rayleigh.pdf( 0.3, 1.0 )\ny = base.dists.rayleigh.pdf( 2.0, 0.8 )\ny = base.dists.rayleigh.pdf( -1.0, 0.5 )\ny = base.dists.rayleigh.pdf( 0.0, NaN )\ny = base.dists.rayleigh.pdf( NaN, 2.0 )\ny = base.dists.rayleigh.pdf( 2.0, -1.0 )\ny = base.dists.rayleigh.pdf( -2.0, 0.0 )\ny = base.dists.rayleigh.pdf( 0.0, 0.0 )\ny = base.dists.rayleigh.pdf( 2.0, 0.0 )\n","base.dists.rayleigh.pdf.factory":"var myPDF = base.dists.rayleigh.pdf.factory( 4.0 );\nvar y = myPDF( 6.0 )\ny = myPDF( 4.0 )\n","base.dists.rayleigh.quantile":"var y = base.dists.rayleigh.quantile( 0.8, 1.0 )\ny = base.dists.rayleigh.quantile( 0.5, 4.0 )\ny = base.dists.rayleigh.quantile( 1.1, 1.0 )\ny = base.dists.rayleigh.quantile( -0.2, 1.0 )\ny = base.dists.rayleigh.quantile( NaN, 1.0 )\ny = base.dists.rayleigh.quantile( 0.0, NaN )\ny = base.dists.rayleigh.quantile( 0.5, -1.0 )\n","base.dists.rayleigh.quantile.factory":"var myQuantile = base.dists.rayleigh.quantile.factory( 0.4 );\nvar y = myQuantile( 0.4 )\ny = myQuantile( 1.0 )\n","base.dists.rayleigh.Rayleigh":"var rayleigh = base.dists.rayleigh.Rayleigh( 6.0 );\nrayleigh.sigma\nrayleigh.entropy\nrayleigh.kurtosis\nrayleigh.mean\nrayleigh.median\nrayleigh.mode\nrayleigh.skewness\nrayleigh.stdev\nrayleigh.variance\nrayleigh.cdf( 1.0 )\nrayleigh.logcdf( 1.0 )\nrayleigh.logpdf( 1.5 )\nrayleigh.mgf( -0.5 )\nrayleigh.pdf( 1.5 )\nrayleigh.quantile( 0.5 )\n","base.dists.rayleigh.skewness":"var v = base.dists.rayleigh.skewness( 11.0 )\nv = base.dists.rayleigh.skewness( 4.5 )\n","base.dists.rayleigh.stdev":"var v = base.dists.rayleigh.stdev( 9.0 )\nv = base.dists.rayleigh.stdev( 4.5 )\n","base.dists.rayleigh.variance":"var v = base.dists.rayleigh.variance( 9.0 )\nv = base.dists.rayleigh.variance( 4.5 )\n","base.dists.signrank.cdf":"var y = base.dists.signrank.cdf( 3, 7 )\ny = base.dists.signrank.cdf( 1.8, 3 )\ny = base.dists.signrank.cdf( -1.0, 40 )\ny = base.dists.signrank.cdf( NaN, 10 )\ny = base.dists.signrank.cdf( 0.0, NaN )\n","base.dists.signrank.cdf.factory":"var myCDF = base.dists.signrank.cdf.factory( 8 );\nvar y = myCDF( 5.7 )\ny = myCDF( 2.2 )\n","base.dists.signrank.pdf":"var y = base.dists.signrank.pdf( 3, 7 )\ny = base.dists.signrank.pdf( 1.8, 3 )\ny = base.dists.signrank.pdf( -1.0, 40 )\ny = base.dists.signrank.pdf( NaN, 10 )\ny = base.dists.signrank.pdf( 0.0, NaN )\n","base.dists.signrank.pdf.factory":"var myPDF = base.dists.signrank.pdf.factory( 8 );\nvar y = myPDF( 6.0 )\ny = myPDF( 2.0 )\n","base.dists.signrank.quantile":"var y = base.dists.signrank.quantile( 0.8, 5 )\ny = base.dists.signrank.quantile( 0.5, 4 )\ny = base.dists.signrank.quantile( 1.1, 5 )\ny = base.dists.signrank.quantile( -0.2, 5 )\ny = base.dists.signrank.quantile( NaN, 5 )\ny = base.dists.signrank.quantile( 0.0, NaN )\n","base.dists.signrank.quantile.factory":"var myQuantile = base.dists.signrank.quantile.factory( 8 );\nvar y = myQuantile( 0.4 )\ny = myQuantile( 1.0 )\n","base.dists.studentizedRange.cdf":"var y = base.dists.studentizedRange.cdf( 0.5, 3.0, 2.0 )\ny = base.dists.studentizedRange.cdf( 12.1, 17.0, 2.0 )\n","base.dists.studentizedRange.cdf.factory":"var mycdf = base.dists.studentizedRange.cdf.factory( 3.0, 2.0 );\nvar y = mycdf( 3.0 )\ny = mycdf( 1.0 )\n","base.dists.studentizedRange.quantile":"var y = quantile( 0.5, 3.0, 2.0 )\ny = quantile( 0.9, 17.0, 2.0 )\ny = quantile( 0.5, 3.0, 2.0, 2 )\ny = base.dists.studentizedRange.quantile( -0.2, 3.0, 3.0 )\ny = base.dists.studentizedRange.quantile( NaN, 2.0, 2.0 )\ny = base.dists.studentizedRange.quantile( 0.0, NaN, 2.0 )\ny = base.dists.studentizedRange.quantile( 0.5, -1.0, 2.0 )\n","base.dists.studentizedRange.quantile.factory":"var myQuantile = quantile.factory( 3.0, 3.0 );\nvar y = myQuantile( 0.5 )\n   ~1.791\ny = myQuantile( 0.8 )\n   ~3.245\n","base.dists.t.cdf":"var y = base.dists.t.cdf( 2.0, 0.1 )\ny = base.dists.t.cdf( 1.0, 2.0 )\ny = base.dists.t.cdf( -1.0, 4.0 )\ny = base.dists.t.cdf( NaN, 1.0 )\ny = base.dists.t.cdf( 0.0, NaN )\ny = base.dists.t.cdf( 2.0, -1.0 )\n","base.dists.t.cdf.factory":"var mycdf = base.dists.t.cdf.factory( 0.5 );\nvar y = mycdf( 3.0 )\ny = mycdf( 1.0 )\n","base.dists.t.entropy":"var v = base.dists.t.entropy( 11.0 )\nv = base.dists.t.entropy( 4.5 )\n","base.dists.t.kurtosis":"var v = base.dists.t.kurtosis( 11.0 )\nv = base.dists.t.kurtosis( 4.5 )\n","base.dists.t.logcdf":"var y = base.dists.t.logcdf( 2.0, 0.1 )\ny = base.dists.t.logcdf( 1.0, 2.0 )\ny = base.dists.t.logcdf( -1.0, 4.0 )\ny = base.dists.t.logcdf( NaN, 1.0 )\ny = base.dists.t.logcdf( 0.0, NaN )\ny = base.dists.t.logcdf( 2.0, -1.0 )\n","base.dists.t.logcdf.factory":"var mylogcdf = base.dists.t.logcdf.factory( 0.5 );\nvar y = mylogcdf( 3.0 )\ny = mylogcdf( 1.0 )\n","base.dists.t.logpdf":"var y = base.dists.t.logpdf( 0.3, 4.0 )\ny = base.dists.t.logpdf( 2.0, 0.7 )\ny = base.dists.t.logpdf( -1.0, 0.5 )\ny = base.dists.t.logpdf( 0.0, NaN )\ny = base.dists.t.logpdf( NaN, 2.0 )\ny = base.dists.t.logpdf( 2.0, -1.0 )\n","base.dists.t.logpdf.factory":"var mylogPDF = base.dists.t.logpdf.factory( 3.0 );\nvar y = mylogPDF( 1.0 )\n","base.dists.t.mean":"var v = base.dists.t.mean( 11.0 )\nv = base.dists.t.mean( 4.5 )\n","base.dists.t.median":"var v = base.dists.t.median( 11.0 )\nv = base.dists.t.median( 4.5 )\n","base.dists.t.mode":"var v = base.dists.t.mode( 11.0 )\nv = base.dists.t.mode( 4.5 )\n","base.dists.t.pdf":"var y = base.dists.t.pdf( 0.3, 4.0 )\ny = base.dists.t.pdf( 2.0, 0.7 )\ny = base.dists.t.pdf( -1.0, 0.5 )\ny = base.dists.t.pdf( 0.0, NaN )\ny = base.dists.t.pdf( NaN, 2.0 )\ny = base.dists.t.pdf( 2.0, -1.0 )\n","base.dists.t.pdf.factory":"var myPDF = base.dists.t.pdf.factory( 3.0 );\nvar y = myPDF( 1.0 )\n","base.dists.t.quantile":"var y = base.dists.t.quantile( 0.8, 1.0 )\ny = base.dists.t.quantile( 0.1, 1.0 )\ny = base.dists.t.quantile( 0.5, 0.1 )\ny = base.dists.t.quantile( -0.2, 0.1 )\ny = base.dists.t.quantile( NaN, 1.0 )\ny = base.dists.t.quantile( 0.0, NaN )\ny = base.dists.t.quantile( 0.5, -1.0 )\n","base.dists.t.quantile.factory":"var myQuantile = base.dists.t.quantile.factory( 4.0 );\nvar y = myQuantile( 0.2 )\ny = myQuantile( 0.9 )\n","base.dists.t.skewness":"var v = base.dists.t.skewness( 11.0 )\nv = base.dists.t.skewness( 4.5 )\n","base.dists.t.stdev":"var v = base.dists.t.stdev( 9.0 )\nv = base.dists.t.stdev( 4.5 )\n","base.dists.t.T":"var t = base.dists.t.T( 6.0 );\nt.v\nt.entropy\nt.kurtosis\nt.mean\nt.median\nt.mode\nt.skewness\nt.stdev\nt.variance\nt.cdf( 1.0 )\nt.logcdf( 1.0 )\nt.logpdf( 1.5 )\nt.pdf( 1.5 )\nt.quantile( 0.8 )\n","base.dists.t.variance":"var v = base.dists.t.variance( 9.0 )\nv = base.dists.t.variance( 4.5 )\n","base.dists.triangular.cdf":"var y = base.dists.triangular.cdf( 0.5, -1.0, 1.0, 0.0 )\ny = base.dists.triangular.cdf( 0.5, -1.0, 1.0, 0.5 )\ny = base.dists.triangular.cdf( -10.0, -20.0, 0.0, -2.0 )\ny = base.dists.triangular.cdf( -2.0, -1.0, 1.0, 0.0 )\ny = base.dists.triangular.cdf( NaN, 0.0, 1.0, 0.5 )\ny = base.dists.triangular.cdf( 0.0, NaN, 1.0, 0.5 )\ny = base.dists.triangular.cdf( 0.0, 0.0, NaN, 0.5 )\ny = base.dists.triangular.cdf( 2.0, 1.0, 0.0, NaN )\ny = base.dists.triangular.cdf( 2.0, 1.0, 0.0, 1.5 )\n","base.dists.triangular.cdf.factory":"var mycdf = base.dists.triangular.cdf.factory( 0.0, 10.0, 2.0 );\nvar y = mycdf( 0.5 )\ny = mycdf( 8.0 )\n","base.dists.triangular.entropy":"var v = base.dists.triangular.entropy( 0.0, 1.0, 0.8 )\nv = base.dists.triangular.entropy( 4.0, 12.0, 5.0 )\nv = base.dists.triangular.entropy( 2.0, 8.0, 5.0 )\n","base.dists.triangular.kurtosis":"var v = base.dists.triangular.kurtosis( 0.0, 1.0, 0.8 )\nv = base.dists.triangular.kurtosis( 4.0, 12.0, 5.0 )\nv = base.dists.triangular.kurtosis( 2.0, 8.0, 5.0 )\n","base.dists.triangular.logcdf":"var y = base.dists.triangular.logcdf( 0.5, -1.0, 1.0, 0.0 )\ny = base.dists.triangular.logcdf( 0.5, -1.0, 1.0, 0.5 )\ny = base.dists.triangular.logcdf( -10.0, -20.0, 0.0, -2.0 )\ny = base.dists.triangular.logcdf( -2.0, -1.0, 1.0, 0.0 )\ny = base.dists.triangular.logcdf( NaN, 0.0, 1.0, 0.5 )\ny = base.dists.triangular.logcdf( 0.0, NaN, 1.0, 0.5 )\ny = base.dists.triangular.logcdf( 0.0, 0.0, NaN, 0.5 )\ny = base.dists.triangular.logcdf( 2.0, 1.0, 0.0, NaN )\ny = base.dists.triangular.logcdf( 2.0, 1.0, 0.0, 1.5 )\n","base.dists.triangular.logcdf.factory":"var mylogcdf = base.dists.triangular.logcdf.factory( 0.0, 10.0, 2.0 );\nvar y = mylogcdf( 0.5 )\ny = mylogcdf( 8.0 )\n","base.dists.triangular.logpdf":"var y = base.dists.triangular.logpdf( 0.5, -1.0, 1.0, 0.0 )\ny = base.dists.triangular.logpdf( 0.5, -1.0, 1.0, 0.5 )\ny = base.dists.triangular.logpdf( -10.0, -20.0, 0.0, -2.0 )\ny = base.dists.triangular.logpdf( -2.0, -1.0, 1.0, 0.0 )\ny = base.dists.triangular.logpdf( NaN, 0.0, 1.0, 0.5 )\ny = base.dists.triangular.logpdf( 0.0, NaN, 1.0, 0.5 )\ny = base.dists.triangular.logpdf( 0.0, 0.0, NaN, 0.5 )\ny = base.dists.triangular.logpdf( 2.0, 1.0, 0.0, NaN )\ny = base.dists.triangular.logpdf( 2.0, 1.0, 0.0, 1.5 )\n","base.dists.triangular.logpdf.factory":"var mylogpdf = base.dists.triangular.logpdf.factory( 0.0, 10.0, 5.0 );\nvar y = mylogpdf( 2.0 )\ny = mylogpdf( 12.0 )\n","base.dists.triangular.mean":"var v = base.dists.triangular.mean( 0.0, 1.0, 0.8 )\nv = base.dists.triangular.mean( 4.0, 12.0, 5.0 )\nv = base.dists.triangular.mean( 2.0, 8.0, 5.0 )\n","base.dists.triangular.median":"var v = base.dists.triangular.median( 0.0, 1.0, 0.8 )\nv = base.dists.triangular.median( 4.0, 12.0, 5.0 )\nv = base.dists.triangular.median( 2.0, 8.0, 5.0 )\n","base.dists.triangular.mgf":"var y = base.dists.triangular.mgf( 0.5, -1.0, 1.0, 0.0 )\ny = base.dists.triangular.mgf( 0.5, -1.0, 1.0, 0.5 )\ny = base.dists.triangular.mgf( -0.3, -20.0, 0.0, -2.0 )\ny = base.dists.triangular.mgf( -2.0, -1.0, 1.0, 0.0 )\ny = base.dists.triangular.mgf( NaN, 0.0, 1.0, 0.5 )\ny = base.dists.triangular.mgf( 0.0, NaN, 1.0, 0.5 )\ny = base.dists.triangular.mgf( 0.0, 0.0, NaN, 0.5 )\ny = base.dists.triangular.mgf( 0.5, 1.0, 0.0, NaN )\ny = base.dists.triangular.mgf( 0.5, 1.0, 0.0, 1.5 )\n","base.dists.triangular.mgf.factory":"var mymgf = base.dists.triangular.mgf.factory( 0.0, 2.0, 1.0 );\nvar y = mymgf( -1.0 )\ny = mymgf( 2.0 )\n","base.dists.triangular.mode":"var v = base.dists.triangular.mode( 0.0, 1.0, 0.8 )\nv = base.dists.triangular.mode( 4.0, 12.0, 5.0 )\nv = base.dists.triangular.mode( 2.0, 8.0, 5.0 )\n","base.dists.triangular.pdf":"var y = base.dists.triangular.pdf( 0.5, -1.0, 1.0, 0.0 )\ny = base.dists.triangular.pdf( 0.5, -1.0, 1.0, 0.5 )\ny = base.dists.triangular.pdf( -10.0, -20.0, 0.0, -2.0 )\ny = base.dists.triangular.pdf( -2.0, -1.0, 1.0, 0.0 )\ny = base.dists.triangular.pdf( NaN, 0.0, 1.0, 0.5 )\ny = base.dists.triangular.pdf( 0.0, NaN, 1.0, 0.5 )\ny = base.dists.triangular.pdf( 0.0, 0.0, NaN, 0.5 )\ny = base.dists.triangular.pdf( 2.0, 1.0, 0.0, NaN )\ny = base.dists.triangular.pdf( 2.0, 1.0, 0.0, 1.5 )\n","base.dists.triangular.pdf.factory":"var mypdf = base.dists.triangular.pdf.factory( 0.0, 10.0, 5.0 );\nvar y = mypdf( 2.0 )\ny = mypdf( 12.0 )\n","base.dists.triangular.quantile":"var y = base.dists.triangular.quantile( 0.9, -1.0, 1.0, 0.0 )\ny = base.dists.triangular.quantile( 0.1, -1.0, 1.0, 0.5 )\ny = base.dists.triangular.quantile( 0.1, -20.0, 0.0, -2.0 )\ny = base.dists.triangular.quantile( 0.8, 0.0, 20.0, 0.0 )\ny = base.dists.triangular.quantile( 1.1, -1.0, 1.0, 0.0 )\ny = base.dists.triangular.quantile( -0.1, -1.0, 1.0, 0.0 )\ny = base.dists.triangular.quantile( NaN, 0.0, 1.0, 0.5 )\ny = base.dists.triangular.quantile( 0.3, NaN, 1.0, 0.5 )\ny = base.dists.triangular.quantile( 0.3, 0.0, NaN, 0.5 )\ny = base.dists.triangular.quantile( 0.3, 1.0, 0.0, NaN )\ny = base.dists.triangular.quantile( 0.3, 1.0, 0.0, 1.5 )\n","base.dists.triangular.quantile.factory":"var myquantile = base.dists.triangular.quantile.factory( 2.0, 4.0, 2.5 );\nvar y = myquantile( 0.4 )\ny = myquantile( 0.8 )\n","base.dists.triangular.skewness":"var v = base.dists.triangular.skewness( 0.0, 1.0, 0.8 )\nv = base.dists.triangular.skewness( 4.0, 12.0, 5.0 )\nv = base.dists.triangular.skewness( 2.0, 8.0, 5.0 )\n","base.dists.triangular.stdev":"var v = base.dists.triangular.stdev( 0.0, 1.0, 0.8 )\nv = base.dists.triangular.stdev( 4.0, 12.0, 5.0 )\nv = base.dists.triangular.stdev( 2.0, 8.0, 5.0 )\n","base.dists.triangular.Triangular":"var triangular = base.dists.triangular.Triangular( 0.0, 1.0, 0.5 );\ntriangular.a\ntriangular.b\ntriangular.c\ntriangular.entropy\ntriangular.kurtosis\ntriangular.mean\ntriangular.median\ntriangular.mode\ntriangular.skewness\ntriangular.stdev\ntriangular.variance\ntriangular.cdf( 0.8 )\ntriangular.logcdf( 0.8 )\ntriangular.logpdf( 0.8 )\ntriangular.mgf( 0.8 )\ntriangular.pdf( 0.8 )\ntriangular.quantile( 0.8 )\n","base.dists.triangular.variance":"var v = base.dists.triangular.variance( 0.0, 1.0, 0.8 )\nv = base.dists.triangular.variance( 4.0, 12.0, 5.0 )\nv = base.dists.triangular.variance( 2.0, 8.0, 5.0 )\n","base.dists.uniform.cdf":"var y = base.dists.uniform.cdf( 9.0, 0.0, 10.0 )\ny = base.dists.uniform.cdf( 0.5, 0.0, 2.0 )\ny = base.dists.uniform.cdf( PINF, 2.0, 4.0 )\ny = base.dists.uniform.cdf( NINF, 2.0, 4.0 )\ny = base.dists.uniform.cdf( NaN, 0.0, 1.0 )\ny = base.dists.uniform.cdf( 0.0, NaN, 1.0 )\ny = base.dists.uniform.cdf( 0.0, 0.0, NaN )\ny = base.dists.uniform.cdf( 2.0, 1.0, 0.0 )\n","base.dists.uniform.cdf.factory":"var mycdf = base.dists.uniform.cdf.factory( 0.0, 10.0 );\nvar y = mycdf( 0.5 )\ny = mycdf( 8.0 )\n","base.dists.uniform.entropy":"var v = base.dists.uniform.entropy( 0.0, 1.0 )\nv = base.dists.uniform.entropy( 4.0, 12.0 )\nv = base.dists.uniform.entropy( 2.0, 8.0 )\n","base.dists.uniform.kurtosis":"var v = base.dists.uniform.kurtosis( 0.0, 1.0 )\nv = base.dists.uniform.kurtosis( 4.0, 12.0 )\nv = base.dists.uniform.kurtosis( 2.0, 8.0 )\n","base.dists.uniform.logcdf":"var y = base.dists.uniform.logcdf( 9.0, 0.0, 10.0 )\ny = base.dists.uniform.logcdf( 0.5, 0.0, 2.0 )\ny = base.dists.uniform.logcdf( PINF, 2.0, 4.0 )\ny = base.dists.uniform.logcdf( NINF, 2.0, 4.0 )\ny = base.dists.uniform.logcdf( NaN, 0.0, 1.0 )\ny = base.dists.uniform.logcdf( 0.0, NaN, 1.0 )\ny = base.dists.uniform.logcdf( 0.0, 0.0, NaN )\ny = base.dists.uniform.logcdf( 2.0, 1.0, 0.0 )\n","base.dists.uniform.logcdf.factory":"var mylogcdf = base.dists.uniform.logcdf.factory( 0.0, 10.0 );\nvar y = mylogcdf( 0.5 )\ny = mylogcdf( 8.0 )\n","base.dists.uniform.logpdf":"var y = base.dists.uniform.logpdf( 2.0, 0.0, 4.0 )\ny = base.dists.uniform.logpdf( 5.0, 0.0, 4.0 )\ny = base.dists.uniform.logpdf( 0.25, 0.0, 1.0 )\ny = base.dists.uniform.logpdf( NaN, 0.0, 1.0 )\ny = base.dists.uniform.logpdf( 0.0, NaN, 1.0 )\ny = base.dists.uniform.logpdf( 0.0, 0.0, NaN )\ny = base.dists.uniform.logpdf( 2.0, 3.0, 1.0 )\n","base.dists.uniform.logpdf.factory":"var mylogPDF = base.dists.uniform.logpdf.factory( 6.0, 7.0 );\nvar y = mylogPDF( 7.0 )\ny = mylogPDF( 5.0 )\n","base.dists.uniform.mean":"var v = base.dists.uniform.mean( 0.0, 1.0 )\nv = base.dists.uniform.mean( 4.0, 12.0 )\nv = base.dists.uniform.mean( 2.0, 8.0 )\n","base.dists.uniform.median":"var v = base.dists.uniform.median( 0.0, 1.0 )\nv = base.dists.uniform.median( 4.0, 12.0 )\nv = base.dists.uniform.median( 2.0, 8.0 )\n","base.dists.uniform.mgf":"var y = base.dists.uniform.mgf( 2.0, 0.0, 4.0 )\ny = base.dists.uniform.mgf( -0.2, 0.0, 4.0 )\ny = base.dists.uniform.mgf( 2.0, 0.0, 1.0 )\ny = base.dists.uniform.mgf( 0.5, 3.0, 2.0 )\ny = base.dists.uniform.mgf( 0.5, 3.0, 3.0 )\ny = base.dists.uniform.mgf( NaN, 0.0, 1.0 )\ny = base.dists.uniform.mgf( 0.0, NaN, 1.0 )\ny = base.dists.uniform.mgf( 0.0, 0.0, NaN )\n","base.dists.uniform.mgf.factory":"var mymgf = base.dists.uniform.mgf.factory( 6.0, 7.0 );\nvar y = mymgf( 0.1 )\ny = mymgf( 1.1 )\n","base.dists.uniform.pdf":"var y = base.dists.uniform.pdf( 2.0, 0.0, 4.0 )\ny = base.dists.uniform.pdf( 5.0, 0.0, 4.0 )\ny = base.dists.uniform.pdf( 0.25, 0.0, 1.0 )\ny = base.dists.uniform.pdf( NaN, 0.0, 1.0 )\ny = base.dists.uniform.pdf( 0.0, NaN, 1.0 )\ny = base.dists.uniform.pdf( 0.0, 0.0, NaN )\ny = base.dists.uniform.pdf( 2.0, 3.0, 1.0 )\n","base.dists.uniform.pdf.factory":"var myPDF = base.dists.uniform.pdf.factory( 6.0, 7.0 );\nvar y = myPDF( 7.0 )\ny = myPDF( 5.0 )\n","base.dists.uniform.quantile":"var y = base.dists.uniform.quantile( 0.8, 0.0, 1.0 )\ny = base.dists.uniform.quantile( 0.5, 0.0, 10.0 )\ny = base.dists.uniform.quantile( 1.1, 0.0, 1.0 )\ny = base.dists.uniform.quantile( -0.2, 0.0, 1.0 )\ny = base.dists.uniform.quantile( NaN, 0.0, 1.0 )\ny = base.dists.uniform.quantile( 0.0, NaN, 1.0 )\ny = base.dists.uniform.quantile( 0.0, 0.0, NaN )\ny = base.dists.uniform.quantile( 0.5, 2.0, 1.0 )\n","base.dists.uniform.quantile.factory":"var myQuantile = base.dists.uniform.quantile.factory( 0.0, 4.0 );\nvar y = myQuantile( 0.8 )\n","base.dists.uniform.skewness":"var v = base.dists.uniform.skewness( 0.0, 1.0 )\nv = base.dists.uniform.skewness( 4.0, 12.0 )\nv = base.dists.uniform.skewness( 2.0, 8.0 )\n","base.dists.uniform.stdev":"var v = base.dists.uniform.stdev( 0.0, 1.0 )\nv = base.dists.uniform.stdev( 4.0, 12.0 )\nv = base.dists.uniform.stdev( 2.0, 8.0 )\n","base.dists.uniform.Uniform":"var uniform = base.dists.uniform.Uniform( 0.0, 1.0 );\nuniform.a\nuniform.b\nuniform.entropy\nuniform.kurtosis\nuniform.mean\nuniform.median\nuniform.skewness\nuniform.stdev\nuniform.variance\nuniform.cdf( 0.8 )\nuniform.logcdf( 0.5 )\nuniform.logpdf( 1.0 )\nuniform.mgf( 0.8 )\nuniform.pdf( 0.8 )\nuniform.quantile( 0.8 )\n","base.dists.uniform.variance":"var v = base.dists.uniform.variance( 0.0, 1.0 )\nv = base.dists.uniform.variance( 4.0, 12.0 )\nv = base.dists.uniform.variance( 2.0, 8.0 )\n","base.dists.weibull.cdf":"var y = base.dists.weibull.cdf( 2.0, 1.0, 1.0 )\ny = base.dists.weibull.cdf( -1.0, 2.0, 2.0 )\ny = base.dists.weibull.cdf( PINF, 4.0, 2.0 )\ny = base.dists.weibull.cdf( NINF, 4.0, 2.0 )\ny = base.dists.weibull.cdf( NaN, 0.0, 1.0 )\ny = base.dists.weibull.cdf( 0.0, NaN, 1.0 )\ny = base.dists.weibull.cdf( 0.0, 0.0, NaN )\ny = base.dists.weibull.cdf( 2.0, 0.0, -1.0 )\n","base.dists.weibull.cdf.factory":"var myCDF = base.dists.weibull.cdf.factory( 2.0, 10.0 );\nvar y = myCDF( 12.0 )\n","base.dists.weibull.entropy":"var v = base.dists.weibull.entropy( 1.0, 1.0 )\nv = base.dists.weibull.entropy( 4.0, 12.0 )\nv = base.dists.weibull.entropy( 8.0, 2.0 )\n","base.dists.weibull.kurtosis":"var v = base.dists.weibull.kurtosis( 1.0, 1.0 )\nv = base.dists.weibull.kurtosis( 4.0, 12.0 )\nv = base.dists.weibull.kurtosis( 8.0, 2.0 )\n","base.dists.weibull.logcdf":"var y = base.dists.weibull.logcdf( 2.0, 1.0, 1.0 )\ny = base.dists.weibull.logcdf( -1.0, 2.0, 2.0 )\ny = base.dists.weibull.logcdf( PINF, 4.0, 2.0 )\ny = base.dists.weibull.logcdf( NINF, 4.0, 2.0 )\ny = base.dists.weibull.logcdf( NaN, 0.0, 1.0 )\ny = base.dists.weibull.logcdf( 0.0, NaN, 1.0 )\ny = base.dists.weibull.logcdf( 0.0, 0.0, NaN )\ny = base.dists.weibull.logcdf( 2.0, 0.0, -1.0 )\n","base.dists.weibull.logcdf.factory":"var mylogcdf = base.dists.weibull.logcdf.factory( 2.0, 10.0 );\nvar y = mylogcdf( 12.0 )\n","base.dists.weibull.logpdf":"var y = base.dists.weibull.logpdf( 2.0, 1.0, 0.5 )\ny = base.dists.weibull.logpdf( 0.1, 1.0, 1.0 )\ny = base.dists.weibull.logpdf( -1.0, 4.0, 2.0 )\ny = base.dists.weibull.logpdf( NaN, 0.6, 1.0 )\ny = base.dists.weibull.logpdf( 0.0, NaN, 1.0 )\ny = base.dists.weibull.logpdf( 0.0, 0.0, NaN )\ny = base.dists.weibull.logpdf( 2.0, 0.0, -1.0 )\n","base.dists.weibull.logpdf.factory":"var mylofpdf = base.dists.weibull.logpdf.factory( 7.0, 6.0 );\ny = mylofpdf( 7.0 )\n","base.dists.weibull.mean":"var v = base.dists.weibull.mean( 1.0, 1.0 )\nv = base.dists.weibull.mean( 4.0, 12.0 )\nv = base.dists.weibull.mean( 8.0, 2.0 )\n","base.dists.weibull.median":"var v = base.dists.weibull.median( 1.0, 1.0 )\nv = base.dists.weibull.median( 4.0, 12.0 )\nv = base.dists.weibull.median( 8.0, 2.0 )\n","base.dists.weibull.mgf":"var y = base.dists.weibull.mgf( 1.0, 1.0, 0.5 )\ny = base.dists.weibull.mgf( -1.0, 4.0, 4.0 )\ny = base.dists.weibull.mgf( NaN, 1.0, 1.0 )\ny = base.dists.weibull.mgf( 0.0, NaN, 1.0 )\ny = base.dists.weibull.mgf( 0.0, 1.0, NaN )\ny = base.dists.weibull.mgf( 0.2, -1.0, 0.5 )\ny = base.dists.weibull.mgf( 0.2, 0.0, 0.5 )\ny = base.dists.weibull.mgf( 0.2, 0.5, -1.0 )\ny = base.dists.weibull.mgf( 0.2, 0.5, 0.0 )\n","base.dists.weibull.mgf.factory":"var myMGF = base.dists.weibull.mgf.factory( 8.0, 10.0 );\nvar y = myMGF( 0.8 )\ny = myMGF( 0.08 )\n","base.dists.weibull.mode":"var v = base.dists.weibull.mode( 1.0, 1.0 )\nv = base.dists.weibull.mode( 4.0, 12.0 )\nv = base.dists.weibull.mode( 8.0, 2.0 )\n","base.dists.weibull.pdf":"var y = base.dists.weibull.pdf( 2.0, 1.0, 0.5 )\ny = base.dists.weibull.pdf( 0.1, 1.0, 1.0 )\ny = base.dists.weibull.pdf( -1.0, 4.0, 2.0 )\ny = base.dists.weibull.pdf( NaN, 0.6, 1.0 )\ny = base.dists.weibull.pdf( 0.0, NaN, 1.0 )\ny = base.dists.weibull.pdf( 0.0, 0.0, NaN )\ny = base.dists.weibull.pdf( 2.0, 0.0, -1.0 )\n","base.dists.weibull.pdf.factory":"var myPDF = base.dists.weibull.pdf.factory( 7.0, 6.0 );\nvar y = myPDF( 7.0 )\n","base.dists.weibull.quantile":"var y = base.dists.weibull.quantile( 0.8, 1.0, 1.0 )\ny = base.dists.weibull.quantile( 0.5, 2.0, 4.0 )\ny = base.dists.weibull.quantile( 1.1, 1.0, 1.0 )\ny = base.dists.weibull.quantile( -0.2, 1.0, 1.0 )\ny = base.dists.weibull.quantile( NaN, 0.0, 1.0 )\ny = base.dists.weibull.quantile( 0.0, NaN, 1.0 )\ny = base.dists.weibull.quantile( 0.0, 0.0, NaN )\ny = base.dists.weibull.quantile( 0.5, 1.0, -1.0 )\n","base.dists.weibull.quantile.factory":"var myQuantile = base.dists.weibull.quantile.factory( 2.0, 10.0 );\nvar y = myQuantile( 0.4 )\n","base.dists.weibull.skewness":"var v = base.dists.weibull.skewness( 1.0, 1.0 )\nv = base.dists.weibull.skewness( 4.0, 12.0 )\nv = base.dists.weibull.skewness( 8.0, 2.0 )\n","base.dists.weibull.stdev":"var v = base.dists.weibull.stdev( 1.0, 1.0 )\nv = base.dists.weibull.stdev( 4.0, 12.0 )\nv = base.dists.weibull.stdev( 8.0, 2.0 )\n","base.dists.weibull.variance":"var v = base.dists.weibull.variance( 1.0, 1.0 )\nv = base.dists.weibull.variance( 4.0, 12.0 )\nv = base.dists.weibull.variance( 8.0, 2.0 )\n","base.dists.weibull.Weibull":"var weibull = base.dists.weibull.Weibull( 6.0, 5.0 );\nweibull.k\nweibull.lambda\nweibull.entropy\nweibull.kurtosis\nweibull.mean\nweibull.median\nweibull.mode\nweibull.skewness\nweibull.stdev\nweibull.variance\nweibull.cdf( 3.0 )\nweibull.logcdf( 3.0 )\nweibull.logpdf( 1.0 )\nweibull.mgf( -0.5 )\nweibull.pdf( 3.0 )\nweibull.quantile( 0.8 )\n","base.ellipe":"var y = base.ellipe( 0.5 )\ny = base.ellipe( -1.0 )\ny = base.ellipe( 2.0 )\ny = base.ellipe( PINF )\ny = base.ellipe( NINF )\ny = base.ellipe( NaN )\n","base.ellipj":"var v = base.ellipj( 0.3, 0.5 )\nv = base.ellipj( 0.0, 0.0 )\nv = base.ellipj( Infinity, 1.0 )\nv = base.ellipj( 0.0, -2.0)\nv = base.ellipj( NaN, NaN )\n","base.ellipj.assign":"var out = new Float64Array( 4 );\nvar v = base.ellipj.assign( 0.3, 0.5, out, 1, 0 )\nvar bool = ( v === out )\n","base.ellipj.sn":"var v = base.ellipj.sn( 0.3, 0.5 )\n","base.ellipj.cn":"var v = base.ellipj.cn( 0.3, 0.5 )\n","base.ellipj.dn":"var v = base.ellipj.dn( 0.3, 0.5 )\n","base.ellipj.am":"var v = base.ellipj.am( 0.3, 0.5 )\n","base.ellipk":"var y = base.ellipk( 0.5 )\ny = base.ellipk( -1.0 )\ny = base.ellipk( 2.0 )\ny = base.ellipk( PINF )\ny = base.ellipk( NINF )\ny = base.ellipk( NaN )\n","base.endsWith":"var bool = base.endsWith( 'beep', 'ep', 4 )\nbool = base.endsWith( 'Beep', 'op', 4 )\nbool = base.endsWith( 'Beep', 'ee', 3 )\nbool = base.endsWith( 'Beep', 'ee', -1 )\nbool = base.endsWith( 'beep', '', 4 )\n","base.epsdiff":"var d = base.epsdiff( 12.15, 12.149999999999999 )\nd = base.epsdiff( 2.4341309458983933, 2.4341309458633909, 'mean-abs' )\nfunction scale( x, y ) { return ( x > y ) ? y : x; };\nd = base.epsdiff( 1.0000000000000002, 1.0000000000000100, scale )\n","base.erf":"var y = base.erf( 2.0 )\ny = base.erf( -1.0 )\ny = base.erf( -0.0 )\ny = base.erf( NaN )\n","base.erfc":"var y = base.erfc( 2.0 )\ny = base.erfc( -1.0 )\ny = base.erfc( 0.0 )\ny = base.erfc( PINF )\ny = base.erfc( NINF )\ny = base.erfc( NaN )\n","base.erfcinv":"var y = base.erfcinv( 0.5 )\ny = base.erfcinv( 0.8 )\ny = base.erfcinv( 0.0 )\ny = base.erfcinv( 2.0 )\ny = base.erfcinv( NaN )\n","base.erfcx":"var y = base.erfcx( 1.0 )\ny = base.erfcx( -1.0 )\ny = base.erfcx( 0.0 )\ny = base.erfcx( NaN )\n","base.erfinv":"var y = base.erfinv( 0.5 )\ny = base.erfinv( 0.8 )\ny = base.erfinv( 0.0 )\ny = base.erfinv( -0.0 )\ny = base.erfinv( -1.0 )\ny = base.erfinv( 1.0 )\ny = base.erfinv( NaN )\n","base.eta":"var y = base.eta( 0.0 )\ny = base.eta( -1.0 )\ny = base.eta( 1.0 )\ny = base.eta( 3.14 )\ny = base.eta( NaN )\n","base.evalpoly":"var arr = [ 3.0, 2.0, 1.0 ];\nvar v = base.evalpoly( arr, 10.0 )\n","base.evalpoly.factory":"var f = base.evalpoly.factory( [ 3.0, 2.0, 1.0 ] );\nvar v = f( 10.0 )\nv = f( 5.0 )\n","base.evalrational":"var P = [ -6.0, -5.0, 4.0, 2.0 ];\nvar Q = [ 3.0, 0.5, 0.0, 0.0 ]; // zero-padded\nvar v = base.evalrational( P, Q, 6.0 )\n","base.evalrational.factory":"var P = [ 20.0, 8.0, 3.0 ];\nvar Q = [ 10.0, 9.0, 1.0 ];\nvar f = base.evalrational.factory( P, Q );\nvar v = f( 10.0 )\nv = f( 2.0 )\n","base.exp":"var y = base.exp( 4.0 )\ny = base.exp( -9.0 )\ny = base.exp( 0.0 )\ny = base.exp( NaN )\n","base.exp2":"var y = base.exp2( 3.0 )\ny = base.exp2( -9.0 )\ny = base.exp2( 0.0 )\ny = base.exp2( NaN )\n","base.exp10":"var y = base.exp10( 3.0 )\ny = base.exp10( -9.0 )\ny = base.exp10( 0.0 )\ny = base.exp10( NaN )\n","base.expit":"var y = base.expit( 0.0 )\ny = base.expit( 1.0 )\ny = base.expit( -1.0 )\ny = base.expit( Infinity )\ny = base.expit( NaN )\n","base.expm1":"var y = base.expm1( 0.2 )\ny = base.expm1( -9.0 )\ny = base.expm1( 0.0 )\ny = base.expm1( NaN )\n","base.expm1rel":"var y = base.expm1rel( 0.0 )\ny = base.expm1rel( 1.0 )\ny = base.expm1rel( -1.0 )\ny = base.expm1rel( NaN )\n","base.exponent":"var exponent = base.exponent( 3.14e-307 )\nexponent = base.exponent( -3.14 )\nexponent = base.exponent( 0.0 )\nexponent = base.exponent( NaN )\n","base.exponentf":"var exponent = base.exponentf( base.float64ToFloat32( 3.14e34 ) )\nexponent = base.exponentf( base.float64ToFloat32( 3.14e-34 ) )\nexponent = base.exponentf( base.float64ToFloat32( -3.14 ) )\nexponent = base.exponentf( 0.0 )\nexponent = base.exponentf( NaN )\n","base.factorial":"var y = base.factorial( 3.0 )\ny = base.factorial( -1.5 )\ny = base.factorial( -0.5 )\ny = base.factorial( 0.5 )\ny = base.factorial( -10.0 )\ny = base.factorial( 171.0 )\ny = base.factorial( NaN )\n","base.factorial2":"var y = base.factorial2( 3 )\ny = base.factorial2( 5 )\ny = base.factorial2( 6 )\ny = base.factorial2( 301 )\ny = base.factorial2( NaN )\n","base.factorialln":"var y = base.factorialln( 3.0 )\ny = base.factorialln( 2.4 )\ny = base.factorialln( -1.0 )\ny = base.factorialln( -1.5 )\ny = base.factorialln( NaN )\n","base.fallingFactorial":"var v = base.fallingFactorial( 0.9, 5 )\nv = base.fallingFactorial( -9.0, 3 )\nv = base.fallingFactorial( 0.0, 2 )\nv = base.fallingFactorial( 3.0, -2 )\n","base.fibonacci":"var y = base.fibonacci( 0 )\ny = base.fibonacci( 1 )\ny = base.fibonacci( 2 )\ny = base.fibonacci( 3 )\ny = base.fibonacci( 4 )\ny = base.fibonacci( 79 )\ny = base.fibonacci( NaN )\n","base.fibonacciIndex":"var n = base.fibonacciIndex( 2 )\nn = base.fibonacciIndex( 3 )\nn = base.fibonacciIndex( 5 )\nn = base.fibonacciIndex( NaN )\nn = base.fibonacciIndex( 1 )\n","base.fibpoly":"var v = base.fibpoly( 5, 2.0 )\n","base.fibpoly.factory":"var polyval = base.fibpoly.factory( 5 );\nvar v = polyval( 1.0 )\nv = polyval( 2.0 )\n","base.firstCodePoint":"var out = base.firstCodePoint( 'beep', 1 )\nout = base.firstCodePoint( 'Boop', 1 )\nout = base.firstCodePoint( 'foo bar', 5 )\n","base.firstCodeUnit":"var out = base.firstCodeUnit( 'beep', 1 )\nout = base.firstCodeUnit( 'Boop', 1 )\nout = base.firstCodeUnit( 'foo bar', 5 )\n","base.firstGraphemeCluster":"var out = base.firstGraphemeCluster( 'beep', 1 )\nout = base.firstGraphemeCluster( 'Boop', 1 )\nout = base.firstGraphemeCluster( 'foo bar', 5 )\n","base.flipsign":"var z = base.flipsign( -3.0, 10.0 )\nz = base.flipsign( -3.0, -1.0 )\nz = base.flipsign( 1.0, -0.0 )\nz = base.flipsign( -3.0, -0.0 )\nz = base.flipsign( -0.0, 1.0 )\nz = base.flipsign( 0.0, -1.0 )\n","base.flipsignf":"var z = base.flipsignf( -3.0, 10.0 )\nz = base.flipsignf( -3.0, -1.0 )\nz = base.flipsignf( 1.0, -0.0 )\nz = base.flipsignf( -3.0, -0.0 )\nz = base.flipsignf( -0.0, 1.0 )\nz = base.flipsignf( 0.0, -1.0 )\n","base.float32ToInt32":"var y = base.float32ToInt32( base.float64ToFloat32( 4294967295.0 ) )\ny = base.float32ToInt32( base.float64ToFloat32( 3.14 ) )\ny = base.float32ToInt32( base.float64ToFloat32( -3.14 ) )\ny = base.float32ToInt32( base.float64ToFloat32( NaN ) )\ny = base.float32ToInt32( FLOAT32_PINF )\ny = base.float32ToInt32( FLOAT32_NINF )\n","base.float32ToUint32":"var y = base.float32ToUint32( base.float64ToFloat32( 4294967297.0 ) )\ny = base.float32ToUint32( base.float64ToFloat32( 3.14 ) )\ny = base.float32ToUint32( base.float64ToFloat32( -3.14 ) )\ny = base.float32ToUint32( base.float64ToFloat32( NaN ) )\ny = base.float32ToUint32( FLOAT32_PINF )\ny = base.float32ToUint32( FLOAT32_NINF )\n","base.float64ToFloat32":"var y = base.float64ToFloat32( 1.337 )\n","base.float64ToInt32":"var y = base.float64ToInt32( 4294967295.0 )\ny = base.float64ToInt32( 3.14 )\ny = base.float64ToInt32( -3.14 )\ny = base.float64ToInt32( NaN )\ny = base.float64ToInt32( PINF )\ny = base.float64ToInt32( NINF )\n","base.float64ToInt64Bytes":"var y = base.float64ToInt64Bytes( 4294967297.0 )\n","base.float64ToInt64Bytes.assign":"var out = new Uint8Array( 16 );\nvar y = base.float64ToInt64Bytes( 4294967297.0, out, 2, 1 )\n","base.float64ToUint32":"var y = base.float64ToUint32( 4294967297.0 )\ny = base.float64ToUint32( 3.14 )\ny = base.float64ToUint32( -3.14 )\ny = base.float64ToUint32( NaN )\ny = base.float64ToUint32( PINF )\ny = base.float64ToUint32( NINF )\n","base.floor":"var y = base.floor( 3.14 )\ny = base.floor( -4.2 )\ny = base.floor( -4.6 )\ny = base.floor( 9.5 )\ny = base.floor( -0.0 )\n","base.floor2":"var y = base.floor2( 3.14 )\ny = base.floor2( -4.2 )\ny = base.floor2( -4.6 )\ny = base.floor2( 9.5 )\ny = base.floor2( 13.0 )\ny = base.floor2( -13.0 )\ny = base.floor2( -0.0 )\n","base.floor10":"var y = base.floor10( 3.14 )\ny = base.floor10( -4.2 )\ny = base.floor10( -4.6 )\ny = base.floor10( 9.5 )\ny = base.floor10( 13.0 )\ny = base.floor10( -13.0 )\ny = base.floor10( -0.0 )\n","base.floorb":"var y = base.floorb( 3.14159, -4, 10 )\ny = base.floorb( 3.14159, 0, 2 )\ny = base.floorb( 5.0, 1, 2 )\n","base.floorf":"var y = base.floorf( 3.14 )\ny = base.floorf( -4.2 )\ny = base.floorf( -4.6 )\ny = base.floorf( 9.5 )\ny = base.floorf( -0.0 )\n","base.floorn":"var y = base.floorn( 3.14159, -4 )\ny = base.floorn( 3.14159, 0 )\ny = base.floorn( 12368.0, 3 )\n","base.floorsd":"var y = base.floorsd( 3.14159, 5 )\ny = base.floorsd( 3.14159, 1 )\ny = base.floorsd( 12368.0, 2 )\ny = base.floorsd( 0.0313, 2, 2 )\n","base.forEachChar":"var n = 0;\nfunction fcn() { n += 1; };\nbase.forEachChar( 'hello world!', fcn );\nn\n","base.forEachCodePoint":"var n = 0;\nfunction fcn() { n += 1; };\nbase.forEachCodePoint( 'hello world!', fcn );\nn\n","base.forEachCodePointRight":"var n = 0;\nfunction fcn() { n += 1; };\nbase.forEachCodePointRight( 'hello world!', fcn );\nn\n","base.forEachGraphemeCluster":"var n = 0;\nfunction fcn() { n += 1; };\nbase.forEachGraphemeCluster( 'hello world!', fcn );\nn\n","base.forEachRight":"var n = 0;\nfunction fcn() { n += 1; };\nbase.forEachRight( 'hello world!', fcn );\nn\n","base.formatInterpolate":"var out = base.formatInterpolate( [ 'beep ', { 'specifier': 's' } ], 'boop' )\nout = base.formatInterpolate( [ 'baz ', { 'specifier': 'd', 'precision': 2 } ], 1 )\nout = base.formatInterpolate( [ { 'specifier': 'u', 'width': 6 } ], 12 )\n","base.formatTokenize":"var out = base.formatTokenize( 'Hello %s!' )\nout = base.formatTokenize( '%s %s %d' )\nout = base.formatTokenize( 'Pi: %.2f' )\n","base.fresnel":"var y = base.fresnel( 0.0 )\ny = base.fresnel( 1.0 )\ny = base.fresnel( PINF )\ny = base.fresnel( NINF )\ny = base.fresnel( NaN )\n","base.fresnel.assign":"var out = new Float64Array( 2 );\nvar v = base.fresnel.assign( 0.0, out, 1, 0 )\nvar bool = ( v === out )\n","base.fresnelc":"var y = base.fresnelc( 0.0 )\ny = base.fresnelc( 1.0 )\ny = base.fresnelc( PINF )\ny = base.fresnelc( NINF )\ny = base.fresnelc( NaN )\n","base.fresnels":"var y = base.fresnels( 0.0 )\ny = base.fresnels( 1.0 )\ny = base.fresnels( PINF )\ny = base.fresnels( NINF )\ny = base.fresnels( NaN )\n","base.frexp":"var out = base.frexp( 4.0 )\nout = base.frexp( 0.0 )\nout = base.frexp( -0.0 )\nout = base.frexp( NaN )\nout = base.frexp( PINF )\nout = base.frexp( NINF )\n","base.frexp.assign":"var out = new Float64Array( 2 );\nvar y = base.frexp.assign( 4.0, out, 1, 0 )\nvar bool = ( y === out )\n","base.fromBinaryString":"var bstr;\nbstr = '0100000000010000000000000000000000000000000000000000000000000000';\nvar val = base.fromBinaryString( bstr )\nbstr = '0100000000001001001000011111101101010100010001000010110100011000';\nval = base.fromBinaryString( bstr )\nbstr = '1111111111100001110011001111001110000101111010111100100010100000';\nval = base.fromBinaryString( bstr )\nbstr = '1000000000000000000000000000000000000000000000000001100011010011';\nval = base.fromBinaryString( bstr )\nbstr = '0000000000000000000000000000000000000000000000000000000000000001';\nval = base.fromBinaryString( bstr )\nbstr = '0000000000000000000000000000000000000000000000000000000000000000';\nval = base.fromBinaryString( bstr )\nbstr = '1000000000000000000000000000000000000000000000000000000000000000';\nval = base.fromBinaryString( bstr )\nbstr = '0111111111111000000000000000000000000000000000000000000000000000';\nval = base.fromBinaryString( bstr )\nbstr = '0111111111110000000000000000000000000000000000000000000000000000';\nval = base.fromBinaryString( bstr )\nbstr = '1111111111110000000000000000000000000000000000000000000000000000';\nval = base.fromBinaryString( bstr )\n","base.fromBinaryStringf":"var bstr = '01000000100000000000000000000000';\nvar val = base.fromBinaryStringf( bstr )\nbstr = '01000000010010010000111111011011';\nval = base.fromBinaryStringf( bstr )\nbstr = '11111111011011000011101000110011';\nval = base.fromBinaryStringf( bstr )\nbstr = '10000000000000000000000000010110';\nval = base.fromBinaryStringf( bstr )\nbstr = '00000000000000000000000000000001';\nval = base.fromBinaryStringf( bstr )\nbstr = '00000000000000000000000000000000';\nval = base.fromBinaryStringf( bstr )\nbstr = '10000000000000000000000000000000';\nval = base.fromBinaryStringf( bstr )\nbstr = '01111111110000000000000000000000';\nval = base.fromBinaryStringf( bstr )\nbstr = '01111111100000000000000000000000';\nval = base.fromBinaryStringf( bstr )\nbstr = '11111111100000000000000000000000';\nval = base.fromBinaryStringf( bstr )\n","base.fromBinaryStringUint8":"var bstr = '01010101';\nvar val = base.fromBinaryStringUint8( bstr )\nbstr = '00000000';\nval = base.fromBinaryStringUint8( bstr )\nbstr = '00000010';\nval = base.fromBinaryStringUint8( bstr )\nbstr = '11111111';\nval = base.fromBinaryStringUint8( bstr )\n","base.fromBinaryStringUint16":"var bstr = '0101010101010101';\nvar val = base.fromBinaryStringUint16( bstr )\nbstr = '0000000000000000';\nval = base.fromBinaryStringUint16( bstr )\nbstr = '0000000000000010';\nval = base.fromBinaryStringUint16( bstr )\nbstr = '1111111111111111';\nval = base.fromBinaryStringUint16( bstr )\n","base.fromBinaryStringUint32":"var bstr = '01010101010101010101010101010101';\nvar val = base.fromBinaryStringUint32( bstr )\nbstr = '00000000000000000000000000000000';\nval = base.fromBinaryStringUint32( bstr )\nbstr = '00000000000000000000000000000010';\nval = base.fromBinaryStringUint32( bstr )\nbstr = '11111111111111111111111111111111';\nval = base.fromBinaryStringUint32( bstr )\n","base.fromInt64Bytes":"var bytes = new Uint8Array( [ 255, 255, 255, 255, 255, 255, 255, 255 ] );\nvar y = base.fromInt64Bytes( bytes, 1, 0 )\n","base.fromWordf":"var word = 1068180177; // => 0 01111111 01010110010001011010001\nvar f32 = base.fromWordf( word ) // when printed, promoted to float64\n","base.fromWords":"var v = base.fromWords( 1774486211, 2479577218 )\nv = base.fromWords( 3221823995, 1413754136 )\nv = base.fromWords( 0, 0 )\nv = base.fromWords( 2147483648, 0 )\nv = base.fromWords( 2146959360, 0 )\nv = base.fromWords( 2146435072, 0 )\nv = base.fromWords( 4293918720, 0 )\n","base.gamma":"var y = base.gamma( 4.0 )\ny = base.gamma( -1.5 )\ny = base.gamma( -0.5 )\ny = base.gamma( 0.5 )\ny = base.gamma( 0.0 )\ny = base.gamma( -0.0 )\ny = base.gamma( NaN )\n","base.gamma1pm1":"var y = base.gamma1pm1( 0.2 )\ny = base.gamma1pm1( -6.7 )\ny = base.gamma1pm1( 0.0 )\ny = base.gamma1pm1( NaN )\n","base.gammaDeltaRatio":"var y = base.gammaDeltaRatio( 2.0, 3.0 )\ny = base.gammaDeltaRatio( 4.0, 0.5 )\ny = base.gammaDeltaRatio( 100.0, 0.0 )\ny = base.gammaDeltaRatio( NaN, 3.0 )\ny = base.gammaDeltaRatio( 5.0, NaN )\ny = base.gammaDeltaRatio( NaN, NaN )\n","base.gammainc":"var y = base.gammainc( 6.0, 2.0 )\ny = base.gammainc( 1.0, 2.0, true, true )\ny = base.gammainc( 7.0, 5.0 )\ny = base.gammainc( 7.0, 5.0, false )\ny = base.gammainc( NaN, 2.0 )\ny = base.gammainc( 6.0, NaN )\n","base.gammaincinv":"var y = base.gammaincinv( 0.5, 2.0 )\ny = base.gammaincinv( 0.1, 10.0 )\ny = base.gammaincinv( 0.75, 3.0 )\ny = base.gammaincinv( 0.75, 3.0, true )\ny = base.gammaincinv( 0.75, NaN )\ny = base.gammaincinv( NaN, 3.0 )\n","base.gammaLanczosSum":"var y = base.gammaLanczosSum( 4.0 )\ny = base.gammaLanczosSum( -1.5 )\ny = base.gammaLanczosSum( -0.5 )\ny = base.gammaLanczosSum( 0.5 )\ny = base.gammaLanczosSum( 0.0 )\ny = base.gammaLanczosSum( NaN )\n","base.gammaLanczosSumExpGScaled":"var y = base.gammaLanczosSumExpGScaled( 4.0 )\ny = base.gammaLanczosSumExpGScaled( -1.5 )\ny = base.gammaLanczosSumExpGScaled( -0.5 )\ny = base.gammaLanczosSumExpGScaled( 0.5 )\ny = base.gammaLanczosSumExpGScaled( 0.0 )\ny = base.gammaLanczosSumExpGScaled( NaN )\n","base.gammaln":"var y = base.gammaln( 1.0 )\ny = base.gammaln( 2.0 )\ny = base.gammaln( 4.0 )\ny = base.gammaln( -0.5 )\ny = base.gammaln( 0.5 )\ny = base.gammaln( 0.0 )\ny = base.gammaln( NaN )\n","base.gammasgn":"var y = base.gammasgn( 1.0 )\ny = base.gammasgn( -2.5 )\ny = base.gammasgn( 0.0 )\ny = base.gammasgn( NaN )\n","base.gcd":"var v = base.gcd( 48, 18 )\n","base.getHighWord":"var w = base.getHighWord( 3.14e201 )\n","base.getLowWord":"var w = base.getLowWord( 3.14e201 )\n","base.hacovercos":"var y = base.hacovercos( 3.14 )\ny = base.hacovercos( -4.2 )\ny = base.hacovercos( -4.6 )\ny = base.hacovercos( 9.5 )\ny = base.hacovercos( -0.0 )\n","base.hacoversin":"var y = base.hacoversin( 3.14 )\ny = base.hacoversin( -4.2 )\ny = base.hacoversin( -4.6 )\ny = base.hacoversin( 9.5 )\ny = base.hacoversin( -0.0 )\n","base.havercos":"var y = base.havercos( 3.14 )\ny = base.havercos( -4.2 )\ny = base.havercos( -4.6 )\ny = base.havercos( 9.5 )\ny = base.havercos( -0.0 )\n","base.haversin":"var y = base.haversin( 3.14 )\ny = base.haversin( -4.2 )\ny = base.haversin( -4.6 )\ny = base.haversin( 9.5 )\ny = base.haversin( -0.0 )\n","base.headercase":"var out = base.headercase( 'Hello World!' )\nout = base.headercase( 'beep boop' )\n","base.heaviside":"var y = base.heaviside( 3.14 )\ny = base.heaviside( -3.14 )\ny = base.heaviside( 0.0 )\ny = base.heaviside( 0.0, 'half-maximum' )\ny = base.heaviside( 0.0, 'left-continuous' )\ny = base.heaviside( 0.0, 'right-continuous' )\n","base.hermitepoly":"var y = base.hermitepoly( 1, 0.5 )\ny = base.hermitepoly( -1, 0.5 )\ny = base.hermitepoly( 0, 0.5 )\ny = base.hermitepoly( 2, 0.5 )\n","base.hermitepoly.factory":"var polyval = base.hermitepoly.factory( 2 );\nvar v = polyval( 0.5 )\n","base.hypot":"var h = base.hypot( -5.0, 12.0 )\nh = base.hypot( NaN, 12.0 )\nh = base.hypot( -0.0, -0.0 )\n","base.hypotf":"var h = base.hypotf( -5.0, 12.0 )\nh = base.hypotf( NaN, 12.0 )\nh = base.hypotf( -0.0, -0.0 )\n","base.identity":"var y = base.identity( -1.0 )\ny = base.identity( 2.0 )\ny = base.identity( 0.0 )\ny = base.identity( -0.0 )\ny = base.identity( NaN )\n","base.identityf":"var y = base.identityf( -1.0 )\ny = base.identityf( 2.0 )\ny = base.identityf( 0.0 )\ny = base.identityf( -0.0 )\ny = base.identityf( NaN )\n","base.imul":"var v = base.imul( -10|0, 4|0 )\n","base.imuldw":"var v = base.imuldw( 1, 10 )\n","base.imuldw.assign":"var out = [ 0, 0 ];\nvar v = base.imuldw.assign( 1, 10, out, 1, 0 )\nvar bool = ( v === out )\n","base.int2slice":"var s = base.int2slice( -1, 5, false );\ns.start\ns.stop\ns.step\n","base.int32ToUint32":"var y = base.int32ToUint32( base.float64ToInt32( -32 ) )\ny = base.int32ToUint32( base.float64ToInt32( 3 ) )\n","base.inv":"var y = base.inv( -1.0 )\ny = base.inv( 2.0 )\ny = base.inv( 0.0 )\ny = base.inv( -0.0 )\ny = base.inv( NaN )\n","base.invcase":"var out = base.invcase( 'Hello World!' )\nout = base.invcase( 'I am A tiny LITTLE teapot' )\n","base.invf":"var y = base.invf( -1.0 )\ny = base.invf( 2.0 )\ny = base.invf( 0.0 )\ny = base.invf( -0.0 )\ny = base.invf( NaN )\n","base.isComposite":"var bool = base.isComposite( 10.0 )\nbool = base.isComposite( 11.0 )\n","base.isCoprime":"var bool = base.isCoprime( 14.0, 15.0 )\nbool = base.isCoprime( 14.0, 21.0 )\n","base.isEven":"var bool = base.isEven( 5.0 )\nbool = base.isEven( -2.0 )\nbool = base.isEven( 0.0 )\nbool = base.isEven( NaN )\n","base.isEvenInt32":"var bool = base.isEvenInt32( 5 )\nbool = base.isEvenInt32( -2 )\nbool = base.isEvenInt32( 0 )\n","base.isFinite":"var bool = base.isFinite( 5.0 )\nbool = base.isFinite( -2.0e64 )\nbool = base.isFinite( PINF )\nbool = base.isFinite( NINF )\n","base.isFinitef":"var bool = base.isFinitef( 5.0 )\nbool = base.isFinitef( -1.0e38 )\nbool = base.isFinitef( FLOAT32_PINF )\nbool = base.isFinitef( FLOAT32_NINF )\n","base.isInfinite":"var bool = base.isInfinite( PINF )\nbool = base.isInfinite( NINF )\nbool = base.isInfinite( 5.0 )\nbool = base.isInfinite( NaN )\n","base.isInfinitef":"var bool = base.isInfinitef( FLOAT32_PINF )\nbool = base.isInfinitef( FLOAT32_NINF )\nbool = base.isInfinitef( 5.0 )\nbool = base.isInfinitef( NaN )\n","base.isInteger":"var bool = base.isInteger( 1.0 )\nbool = base.isInteger( 3.14 )\n","base.isnan":"var bool = base.isnan( NaN )\nbool = base.isnan( 7.0 )\n","base.isnanf":"var bool = base.isnanf( NaN )\nbool = base.isnanf( 7.0 )\n","base.isNegativeFinite":"var bool = base.isNegativeFinite( -3.14 )\nbool = base.isNegativeFinite( -Infinity )\nbool = base.isNegativeFinite( 2.0 )\nbool = base.isNegativeFinite( NaN )\nbool = base.isNegativeFinite( -0.0 )\n","base.isNegativeInteger":"var bool = base.isNegativeInteger( -1.0 )\nbool = base.isNegativeInteger( 0.0 )\nbool = base.isNegativeInteger( 10.0 )\n","base.isNegativeZero":"var bool = base.isNegativeZero( -0.0 )\nbool = base.isNegativeZero( 0.0 )\n","base.isNegativeZerof":"var bool = base.isNegativeZerof( -0.0 )\nbool = base.isNegativeZerof( 0.0 )\n","base.isNonNegativeFinite":"var out = base.isNonNegativeFinite( 5.0 )\nout = base.isNonNegativeFinite( 3.14 )\nout = base.isNonNegativeFinite( 0.0 )\nout = base.isNonNegativeFinite( Infinity )\nout = base.isNonNegativeFinite( -3.14 )\nout = base.isNonNegativeFinite( NaN )\n","base.isNonNegativeInteger":"var bool = base.isNonNegativeInteger( 1.0 )\nbool = base.isNonNegativeInteger( 0.0 )\nbool = base.isNonNegativeInteger( -10.0 )\n","base.isNonPositiveFinite":"var bool = base.isNonPositiveFinite( -3.14 )\nvar bool = base.isNonPositiveFinite( 0.0 )\nvar bool = base.isNonPositiveFinite( -Infinity )\nvar bool = base.isNonPositiveFinite( 3.14 )\nvar bool = base.isNonPositiveFinite( NaN )\n","base.isNonPositiveInteger":"var bool = base.isNonPositiveInteger( -1.0 )\nbool = base.isNonPositiveInteger( 0.0 )\nbool = base.isNonPositiveInteger( 10.0 )\n","base.isOdd":"var bool = base.isOdd( 5.0 )\nbool = base.isOdd( -2.0 )\nbool = base.isOdd( 0.0 )\nbool = base.isOdd( NaN )\n","base.isOddInt32":"var bool = base.isOddInt32( 5 )\nbool = base.isOddInt32( -2 )\nbool = base.isOddInt32( 0 )\n","base.isPositiveFinite":"var bool = base.isPositiveFinite( 5.0 )\nbool = base.isPositiveFinite( 3.14 )\nbool = base.isPositiveFinite( 0.0 )\nbool = base.isPositiveFinite( Infinity )\nbool = base.isPositiveFinite( -3.14 )\nbool = base.isPositiveFinite( NaN )\n","base.isPositiveInteger":"var bool = base.isPositiveInteger( 1.0 )\nbool = base.isPositiveInteger( 0.0 )\nbool = base.isPositiveInteger( -10.0 )\n","base.isPositiveZero":"var bool = base.isPositiveZero( 0.0 )\nbool = base.isPositiveZero( -0.0 )\n","base.isPositiveZerof":"var bool = base.isPositiveZerof( 0.0 )\nbool = base.isPositiveZerof( -0.0 )\n","base.isPow2Uint32":"var bool = base.isPow2Uint32( 2 )\nbool = base.isPow2Uint32( 5 )\n","base.isPrime":"var bool = base.isPrime( 11.0 )\nbool = base.isPrime( 3.14 )\n","base.isProbability":"var bool = base.isProbability( 0.5 )\nbool = base.isProbability( 3.14 )\nbool = base.isProbability( NaN )\n","base.isSafeInteger":"var bool = base.isSafeInteger( 1.0 )\nbool = base.isSafeInteger( 2.0e200 )\nbool = base.isSafeInteger( 3.14 )\n","base.kebabcase":"var out = base.kebabcase( 'Hello World!' )\nout = base.kebabcase( 'I am a tiny little teapot' )\n","base.kernelBetainc":"var out = base.kernelBetainc( 0.8, 1.0, 0.3, false, false )\nout = base.kernelBetainc( 0.2, 1.0, 2.0, true, false )\n","base.kernelBetainc.assign":"var out = [ 0.0, 0.0 ];\nvar v = base.kernelBetainc.assign( 0.2, 1.0, 2.0, true, true, out, 1, 0 )\nvar bool = ( v === out )\n","base.kernelBetaincinv":"var y = base.kernelBetaincinv( 3.0, 3.0, 0.2, 0.8 )\ny = base.kernelBetaincinv( 3.0, 3.0, 0.4, 0.6 )\ny = base.kernelBetaincinv( 1.0, 6.0, 0.4, 0.6 )\ny = base.kernelBetaincinv( 1.0, 6.0, 0.8, 0.2 )\n","base.kernelCos":"var out = base.kernelCos( 0.0, 0.0 )\nout = base.kernelCos( PI/6.0, 0.0 )\nout = base.kernelCos( 0.785, -1.144e-17 )\nout = base.kernelCos( NaN )\n","base.kernelLog1p":"var y = base.kernelLog1p( 1.0 )\ny = base.kernelLog1p( 1.4142135623730951 )\ny = base.kernelLog1p( NaN )\n","base.kernelSin":"var y = base.kernelSin( 0.0, 0.0 )\ny = base.kernelSin( PI/6.0, 0.0 )\ny = base.kernelSin( 0.619, 9.279e-18 )\ny = base.kernelSin( NaN, 0.0 )\ny = base.kernelSin( 2.0, NaN )\ny = base.kernelSin( NaN, NaN )\n","base.kernelTan":"var out = base.kernelTan( PI/4.0, 0.0, 1 )\nout = base.kernelTan( PI/4.0, 0.0, -1 )\nout = base.kernelTan( PI/6.0, 0.0, 1 )\nout = base.kernelTan( 0.664, 5.288e-17, 1 )\nout = base.kernelTan( NaN, 0.0, 1 )\nout = base.kernelTan( 3.0, NaN, 1 )\nout = base.kernelTan( 3.0, 0.0, NaN )\n","base.kroneckerDelta":"var y = base.kroneckerDelta( 3.14, 0.0 )\ny = base.kroneckerDelta( 3.14, 3.14 )\n","base.kroneckerDeltaf":"var y = base.kroneckerDeltaf( 3.14, 0.0 )\ny = base.kroneckerDeltaf( 3.14, 3.14 )\n","base.labs":"var v = base.labs( -1|0 )\nv = base.labs( 2|0 )\nv = base.labs( 0|0 )\n","base.last":"var out = base.last( 'hello', 1 )\nout = base.last( 'JavaScript', 6 )\nout = base.last( 'foo bar', 10 )\n","base.lastCodePoint":"var out = base.lastCodePoint( 'hello world', 1 )\nout = base.lastCodePoint( 'JavaScript', 6 )\nout = base.lastCodePoint( 'अनुच्छेद', 1 )\n","base.lastGraphemeCluster":"var out = base.lastGraphemeCluster( 'beep', 1 )\nout = base.lastGraphemeCluster( 'Boop', 2 )\nout = base.lastGraphemeCluster( 'JavaScript', 6 )\n","base.lcm":"var v = base.lcm( 21, 6 )\n","base.ldexp":"var x = base.ldexp( 0.5, 3 )\nx = base.ldexp( 4.0, -2 )\nx = base.ldexp( 0.0, 20 )\nx = base.ldexp( -0.0, 39 )\nx = base.ldexp( NaN, -101 )\nx = base.ldexp( PINF, 11 )\nx = base.ldexp( NINF, -118 )\n","base.leftPad":"var out = base.leftPad( 'a', 5, ' ' )\nout = base.leftPad( 'beep', 10, 'b' )\nout = base.leftPad( 'boop', 12, 'beep' )\n","base.leftTrim":"var out = base.leftTrim( ' \\r\\n\\t  Beep \\t\\t\\n  ' )\n","base.ln":"var y = base.ln( 4.0 )\ny = base.ln( 0.0 )\ny = base.ln( PINF )\ny = base.ln( NaN )\ny = base.ln( -4.0 )\n","base.log":"var y = base.log( 100.0, 10.0 )\ny = base.log( 16.0, 2.0 )\ny = base.log( 5.0, 1.0 )\ny = base.log( NaN, 2.0 )\ny = base.log( 1.0, NaN )\ny = base.log( -4.0, 2.0 )\ny = base.log( 4.0, -2.0 )\n","base.log1mexp":"var y = base.log1mexp( -10.0 )\ny = base.log1mexp( 0.0 )\ny = base.log1mexp( 5.0 )\ny = base.log1mexp( 10.0 )\ny = base.log1mexp( NaN )\n","base.log1p":"var y = base.log1p( 4.0 )\ny = base.log1p( -1.0 )\ny = base.log1p( 0.0 )\ny = base.log1p( -0.0 )\ny = base.log1p( -2.0 )\ny = base.log1p( NaN )\n","base.log1pexp":"var y = base.log1pexp( -10.0 )\ny = base.log1pexp( 0.0 )\ny = base.log1pexp( 5.0 )\ny = base.log1pexp( 34.0 )\ny = base.log1pexp( NaN )\n","base.log1pmx":"base.log1pmx( 1.1 )\nbase.log1pmx( 0.99 )\nbase.log1pmx( -0.99 )\nbase.log1pmx( -1.1 )\nbase.log1pmx( NaN )\n","base.log2":"var y = base.log2( 4.0 )\ny = base.log2( 8.0 )\ny = base.log2( 0.0 )\ny = base.log2( PINF )\ny = base.log2( NaN )\ny = base.log2( -4.0 )\n","base.log10":"var y = base.log10( 100.0 )\ny = base.log10( 8.0 )\ny = base.log10( 0.0 )\ny = base.log10( PINF )\ny = base.log10( NaN )\ny = base.log10( -4.0 )\n","base.logaddexp":"var v = base.logaddexp( 90.0, 90.0 )\nv = base.logaddexp( -20.0, 90.0 )\nv = base.logaddexp( 0.0, -100.0 )\nv = base.logaddexp( NaN, NaN )\n","base.logit":"var y = base.logit( 0.2 )\ny = base.logit( 0.9 )\ny = base.logit( -4.0 )\ny = base.logit( 1.5 )\ny = base.logit( NaN )\n","base.lowercase":"var out = base.lowercase( 'bEEp' )\n","base.lucas":"var y = base.lucas( 0 )\ny = base.lucas( 1 )\ny = base.lucas( 2 )\ny = base.lucas( 3 )\ny = base.lucas( 4 )\ny = base.lucas( 77 )\ny = base.lucas( NaN )\n","base.lucaspoly":"var v = base.lucaspoly( 5, 2.0 )\n","base.lucaspoly.factory":"var polyval = base.lucaspoly.factory( 5 );\nvar v = polyval( 1.0 )\nv = polyval( 2.0 )\n","base.max":"var v = base.max( 3.14, 4.2 )\nv = base.max( 3.14, NaN )\nv = base.max( +0.0, -0.0 )\n","base.maxabs":"var v = base.maxabs( 3.14, -4.2 )\nv = base.maxabs( 3.14, NaN )\nv = base.maxabs( +0.0, -0.0 )\n","base.maxabsn":"var v = base.maxabsn( 3.14, -4.2 )\nv = base.maxabsn( 5.9, 3.14, 4.2 )\nv = base.maxabsn( 3.14, NaN )\nv = base.maxabsn( +0.0, -0.0 )\n","base.maxn":"var v = base.maxn( 3.14, 4.2 )\nv = base.maxn( 5.9, 3.14, 4.2 )\nv = base.maxn( 3.14, NaN )\nv = base.maxn( +0.0, -0.0 )\n","base.min":"var v = base.min( 3.14, 4.2 )\nv = base.min( 3.14, NaN )\nv = base.min( +0.0, -0.0 )\n","base.minabs":"var v = base.minabs( 3.14, -4.2 )\nv = base.minabs( 3.14, NaN )\nv = base.minabs( +0.0, -0.0 )\n","base.minabsn":"var v = base.minabsn( 3.14, -4.2 )\nv = base.minabsn( 5.9, 3.14, 4.2 )\nv = base.minabsn( 3.14, NaN )\nv = base.minabsn( +0.0, -0.0 )\n","base.minmax":"var v = base.minmax( 3.14, 4.2 )\nv = base.minmax( 3.14, NaN )\nv = base.minmax( +0.0, -0.0 )\n","base.minmax.assign":"var out = [ 0.0, 0.0 ];\nvar v = base.minmax.assign( 3.14, -1.5, out, 1, 0 )\nvar bool = ( v === out )\n","base.minmaxabs":"var v = base.minmaxabs( 3.14, 4.2 )\nv = base.minmaxabs( -5.9, 3.14)\nv = base.minmaxabs( 3.14, NaN )\nv = base.minmaxabs( +0.0, -0.0 )\n","base.minmaxabs.assign":"var out = [ 0.0, 0.0 ];\nvar v = base.minmaxabs.assign( 3.14, -3.14, out, 1, 0 )\nvar bool = ( v === out )\n","base.minmaxabsn":"var v = base.minmaxabsn( 3.14, 4.2 )\nv = base.minmaxabsn( -5.9, 3.14, 4.2 )\nv = base.minmaxabsn( 3.14, NaN )\nv = base.minmaxabsn( +0.0, -0.0 )\nv = base.minmaxabsn( 3.14 )\n","base.minmaxabsn.assign":"var out = [ 0.0, 0.0 ];\nvar v = base.minmaxabsn.assign( 3.14, out, 1, 0 )\nvar bool = ( v === out )\n","base.minmaxn":"var v = base.minmaxn( 3.14, 4.2 )\nv = base.minmaxn( 5.9, 3.14, 4.2 )\nv = base.minmaxn( 3.14, NaN )\nv = base.minmaxn( +0.0, -0.0 )\nv = base.minmaxn( 3.14 )\n","base.minmaxn.assign":"var out = [ 0.0, 0.0 ];\nvar v = base.minmaxn.assign( 3.14, -1.5, out, 1, 0 )\nvar bool = ( v === out )\n","base.minn":"var v = base.minn( 3.14, 4.2 )\nv = base.minn( 5.9, 3.14, 4.2 )\nv = base.minn( 3.14, NaN )\nv = base.minn( +0.0, -0.0 )\n","base.modf":"var parts = base.modf( 3.14 )\nparts = base.modf( 3.14 )\nparts = base.modf( +0.0 )\nparts = base.modf( -0.0 )\nparts = base.modf( PINF )\nparts = base.modf( NINF )\nparts = base.modf( NaN )\n","base.modf.assign":"var out = new Float64Array( 2 );\nvar parts = base.modf.assign( 3.14, out, 1, 0 )\nvar bool = ( parts === out )\n","base.mul":"var v = base.mul( -1.0, 5.0 )\nv = base.mul( 2.0, 5.0 )\nv = base.mul( 0.0, 5.0 )\nv = base.mul( -0.0, 0.0 )\nv = base.mul( NaN, NaN )\n","base.mulf":"var v = base.mulf( -1.0, 5.0 )\nv = base.mulf( 2.0, 5.0 )\nv = base.mulf( 0.0, 5.0 )\nv = base.mulf( -0.0, 0.0 )\nv = base.mulf( NaN, NaN )\n","base.ndarray":"var b = [ 1, 2, 3, 4 ]; // underlying data buffer\nvar d = [ 2, 2 ]; // shape\nvar s = [ 2, 1 ]; // strides\nvar o = 0; // index offset\nvar arr = base.ndarray( 'generic', b, d, s, o, 'row-major' )\nvar v = arr.get( 1, 1 )\nv = arr.iget( 3 )\narr.set( 1, 1, 40 );\narr.get( 1, 1 )\narr.iset( 3, 99 );\narr.get( 1, 1 )\n","base.ndarray.prototype.byteLength":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = base.ndarray( 'float64', b, d, s, o, 'row-major' );\nvar sz = arr.byteLength\n","base.ndarray.prototype.BYTES_PER_ELEMENT":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = base.ndarray( 'float64', b, d, s, o, 'row-major' );\nvar sz = arr.BYTES_PER_ELEMENT\n","base.ndarray.prototype.data":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = base.ndarray( 'float64', b, d, s, o, 'row-major' );\nvar buf = arr.data\n","base.ndarray.prototype.dtype":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = base.ndarray( 'float64', b, d, s, o, 'row-major' );\nvar dt = arr.dtype\n","base.ndarray.prototype.flags":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = base.ndarray( 'float64', b, d, s, o, 'row-major' );\nvar fl = arr.flags\n","base.ndarray.prototype.length":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = base.ndarray( 'float64', b, d, s, o, 'row-major' );\nvar len = arr.length\n","base.ndarray.prototype.ndims":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = base.ndarray( 'float64', b, d, s, o, 'row-major' );\nvar n = arr.ndims\n","base.ndarray.prototype.offset":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = base.ndarray( 'float64', b, d, s, o, 'row-major' );\nvar v = arr.offset\n","base.ndarray.prototype.order: string":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = base.ndarray( 'float64', b, d, s, o, 'row-major' );\nvar ord = arr.order\n","base.ndarray.prototype.shape":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = base.ndarray( 'float64', b, d, s, o, 'row-major' );\nvar sh = arr.shape\n","base.ndarray.prototype.strides":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = base.ndarray( 'float64', b, d, s, o, 'row-major' );\nvar st = arr.strides\n","base.ndarray.prototype.get":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = base.ndarray( 'float64', b, d, s, o, 'row-major' );\nvar v = arr.get( 1, 1 )\n","base.ndarray.prototype.iget":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = base.ndarray( 'float64', b, d, s, o, 'row-major' );\nvar v = arr.iget( 3 )\n","base.ndarray.prototype.set":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = base.ndarray( 'float64', b, d, s, o, 'row-major' );\narr.set( 1, 1, -4.0 );\narr.get( 1, 1 )\n","base.ndarray.prototype.iset":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = base.ndarray( 'float64', b, d, s, o, 'row-major' );\narr.iset( 3, -4.0 );\narr.iget( 3 )\n","base.ndarray.prototype.toString":"var b = [ 1, 2, 3, 4 ];\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = base.ndarray( 'generic', b, d, s, o, 'row-major' );\narr.toString()\n","base.ndarray.prototype.toJSON":"var b = [ 1, 2, 3, 4 ];\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = base.ndarray( 'generic', b, d, s, o, 'row-major' );\narr.toJSON()\n","base.ndarrayUnary":"var xbuf = new Float64Array( [ -1.0, -2.0, -3.0, -4.0 ] );\nvar ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar dtype = 'float64';\nvar shape = [ 2, 2 ];\nvar sx = [ 2, 1 ];\nvar sy = [ 2, 1 ];\nvar ox = 0;\nvar oy = 0;\nvar order = 'row-major';\nvar x = ndarray( dtype, xbuf, shape, sx, ox, order );\nvar y = ndarray( dtype, ybuf, shape, sy, oy, order );\nbase.ndarrayUnary( [ x, y ], base.abs );\ny.data\nx = {\n 'dtype': dtype,\n 'data': xbuf,\n 'shape': shape,\n 'strides': sx,\n 'offset': ox,\n 'order': order\n };\ny = {\n 'dtype': dtype,\n 'data': ybuf,\n 'shape': shape,\n 'strides': sy,\n 'offset': oy,\n 'order': order\n };\nbase.ndarrayUnary( [ x, y ], base.abs );\ny.data\n","base.ndzeros":"var arr = base.ndzeros( 'float64', [ 2, 2 ], 'row-major' )\nvar sh = arr.shape\nvar dt = arr.dtype\n","base.ndzerosLike":"var x = base.ndzeros( 'float64', [ 2, 2 ], 'row-major' )\nvar sh = x.shape\nvar dt = x.dtype\nvar y = base.ndzerosLike( x )\nsh = y.shape\ndt = y.dtype\n","base.negafibonacci":"var y = base.negafibonacci( 0 )\ny = base.negafibonacci( -1 )\ny = base.negafibonacci( -2 )\ny = base.negafibonacci( -3 )\ny = base.negafibonacci( -4 )\ny = base.negafibonacci( -79 )\ny = base.negafibonacci( -80 )\ny = base.negafibonacci( NaN )\n","base.negalucas":"var y = base.negalucas( 0 )\ny = base.negalucas( -1 )\ny = base.negalucas( -2 )\ny = base.negalucas( -3 )\ny = base.negalucas( -4 )\ny = base.negalucas( -77 )\ny = base.negalucas( -78 )\ny = base.negalucas( NaN )\n","base.nonfibonacci":"var v = base.nonfibonacci( 1 )\nv = base.nonfibonacci( 2 )\nv = base.nonfibonacci( 3 )\nv = base.nonfibonacci( NaN )\n","base.normalize":"var out = base.normalize( 3.14e-319 )\nvar y = out[ 0 ];\nvar exponent = out[ 1 ];\nvar bool = ( y*base.pow(2.0, exponent) === 3.14e-319 )\nout = base.normalize( 0.0 )\nout = base.normalize( PINF )\nout = base.normalize( NINF )\nout = base.normalize( NaN )\n","base.normalize.assign":"var out = new Float64Array( 2 )\nvar v = base.normalize.assign( 3.14e-319, out, 1, 0 )\nvar bool = ( v === out )\n","base.normalizef":"var out = base.normalizef( base.float64ToFloat32( 1.401e-45 ) )\nvar y = out[ 0 ];\nvar exp = out[ 1 ];\nvar bool = ( y*base.pow(2,exp) === base.float64ToFloat32(1.401e-45) )\nout = base.normalizef( FLOAT32_PINF )\nout = base.normalizef( FLOAT32_NINF )\nout = base.normalizef( NaN )\n","base.normalizef.assign":"out = new Float32Array( 2 );\nvar v = base.normalizef.assign( base.float64ToFloat32( 1.401e-45 ), out, 1, 0 )\nbool = ( v === out )\n","base.normalizeSlice":"var s1 = new Slice( 1, 10, 1 );\nvar s2 = base.normalizeSlice( s1, 5, false );\ns2.start\ns2.stop\ns2.step\ns1 = new Slice( -2, null, -1 );\ns2 = base.normalizeSlice( s1, 10, false );\ns2.start\ns2.stop\ns2.step\n","base.normhermitepoly":"var y = base.normhermitepoly( 1, 0.5 )\ny = base.normhermitepoly( -1, 0.5 )\ny = base.normhermitepoly( 0, 0.5 )\ny = base.normhermitepoly( 2, 0.5 )\n","base.normhermitepoly.factory":"var f = base.normhermitepoly.factory( 2 );\nvar v = f( 0.5 )\n","base.pascalcase":"var out = base.pascalcase( 'Hello World!' )\nout = base.pascalcase( 'beep boop' )\n","base.pdiff":"var v = base.pdiff( 5.9, 3.14 )\nv = base.pdiff( 3.14, 4.2 )\nv = base.pdiff( 3.14, NaN )\nv = base.pdiff( -0.0, +0.0 )\n","base.pdifff":"var v = base.pdifff( 5.9, 3.15 )\nv = base.pdifff( 3.14, 4.2 )\nv = base.pdifff( 3.14, NaN )\nv = base.pdifff( -0.0, +0.0 )\n","base.percentEncode":"var out = base.percentEncode( '☃' )\n","base.polygamma":"var v = base.polygamma( 3, 1.2 )\nv = base.polygamma( 5, 1.2 )\nv = base.polygamma( 3, -4.9 )\nv = base.polygamma( -1, 5.3 )\nv = base.polygamma( 2, -1.0 )\n","base.pow":"var y = base.pow( 2.0, 3.0 )\ny = base.pow( 4.0, 0.5 )\ny = base.pow( 100.0, 0.0 )\ny = base.pow( PI, 5.0 )\ny = base.pow( PI, -0.2 )\ny = base.pow( NaN, 3.0 )\ny = base.pow( 5.0, NaN )\ny = base.pow( NaN, NaN )\n","base.powm1":"var y = base.powm1( 2.0, 3.0 )\ny = base.powm1( 4.0, 0.5 )\ny = base.powm1( 0.0, 100.0 )\ny = base.powm1( 100.0, 0.0 )\ny = base.powm1( 0.0, 0.0 )\ny = base.powm1( PI, 5.0 )\ny = base.powm1( NaN, 3.0 )\ny = base.powm1( 5.0, NaN )\n","base.rad2deg":"var d = base.rad2deg( PI/2.0 )\nd = base.rad2deg( -PI/4.0 )\nd = base.rad2deg( NaN )\nd = base.rad2deg( PI/6.0 )\n","base.rad2degf":"var d = base.rad2degf( 3.141592653589793 / 2.0 )\nd = base.rad2degf( -3.141592653589793 / 4.0 )\nd = base.rad2degf( NaN )\nd = base.rad2degf( 3.141592653589793 / 6.0 )\n","base.ramp":"var y = base.ramp( 3.14 )\ny = base.ramp( -3.14 )\n","base.rampf":"var y = base.rampf( 3.14 )\ny = base.rampf( -3.14 )\n","base.random.arcsine":"var r = base.random.arcsine( 2.0, 5.0 )\n","base.random.arcsine.factory":"var rand = base.random.arcsine.factory();\nvar r = rand( 0.0, 1.0 )\nr = rand( -2.0, 2.0 )\nrand = base.random.arcsine.factory( 0.0, 1.0 );\nr = rand()\nr = rand()\n","base.random.arcsine.NAME":"var str = base.random.arcsine.NAME\n","base.random.arcsine.PRNG":"var prng = base.random.arcsine.PRNG;\n","base.random.arcsine.seed":"var seed = base.random.arcsine.seed;\n","base.random.arcsine.seedLength":"var len = base.random.arcsine.seedLength;\n","base.random.arcsine.state":"var r = base.random.arcsine( 2.0, 4.0 )\nr = base.random.arcsine( 2.0, 4.0 )\nr = base.random.arcsine( 2.0, 4.0 )\nvar state = base.random.arcsine.state\nr = base.random.arcsine( 2.0, 4.0 )\nr = base.random.arcsine( 2.0, 4.0 )\nbase.random.arcsine.state = state;\nr = base.random.arcsine( 2.0, 4.0 )\nr = base.random.arcsine( 2.0, 4.0 )\n","base.random.arcsine.stateLength":"var len = base.random.arcsine.stateLength;\n","base.random.arcsine.byteLength":"var sz = base.random.arcsine.byteLength;\n","base.random.arcsine.toJSON":"var o = base.random.arcsine.toJSON()\n","base.random.bernoulli":"var r = base.random.bernoulli( 0.8 );\n","base.random.bernoulli.factory":"var rand = base.random.bernoulli.factory();\nvar r = rand( 0.3 );\nr = rand( 0.59 );\nrand = base.random.bernoulli.factory( 0.3 );\nr = rand();\nr = rand();\n","base.random.bernoulli.NAME":"var str = base.random.bernoulli.NAME\n","base.random.bernoulli.PRNG":"var prng = base.random.bernoulli.PRNG;\n","base.random.bernoulli.seed":"var seed = base.random.bernoulli.seed;\n","base.random.bernoulli.seedLength":"var len = base.random.bernoulli.seedLength;\n","base.random.bernoulli.state":"var r = base.random.bernoulli( 0.3 )\nr = base.random.bernoulli( 0.3 )\nr = base.random.bernoulli( 0.3 )\nvar state = base.random.bernoulli.state\nr = base.random.bernoulli( 0.3 )\nr = base.random.bernoulli( 0.3 )\nbase.random.bernoulli.state = state;\nr = base.random.bernoulli( 0.3 )\nr = base.random.bernoulli( 0.3 )\n","base.random.bernoulli.stateLength":"var len = base.random.bernoulli.stateLength;\n","base.random.bernoulli.byteLength":"var sz = base.random.bernoulli.byteLength;\n","base.random.bernoulli.toJSON":"var o = base.random.bernoulli.toJSON()\n","base.random.beta":"var r = base.random.beta( 2.0, 5.0 );\n","base.random.beta.factory":"var rand = base.random.beta.factory();\nvar r = rand( 1.5, 1.5 );\nr = rand( 2.0, 3.14 );\nrand = base.random.beta.factory( 1.5, 1.5 );\nr = rand();\nr = rand();\n","base.random.beta.NAME":"var str = base.random.beta.NAME\n","base.random.beta.PRNG":"var prng = base.random.beta.PRNG;\n","base.random.beta.seed":"var seed = base.random.beta.seed;\n","base.random.beta.seedLength":"var len = base.random.beta.seedLength;\n","base.random.beta.state":"var r = base.random.beta( 2.0, 5.0 )\nr = base.random.beta( 2.0, 5.0 )\nr = base.random.beta( 2.0, 5.0 )\nvar state = base.random.beta.state\nr = base.random.beta( 2.0, 5.0 )\nr = base.random.beta( 2.0, 5.0 )\nbase.random.beta.state = state;\nr = base.random.beta( 2.0, 5.0 )\nr = base.random.beta( 2.0, 5.0 )\n","base.random.beta.stateLength":"var len = base.random.beta.stateLength;\n","base.random.beta.byteLength":"var sz = base.random.beta.byteLength;\n","base.random.beta.toJSON":"var o = base.random.beta.toJSON()\n","base.random.betaprime":"var r = base.random.betaprime( 2.0, 5.0 );\n","base.random.betaprime.factory":"var rand = base.random.betaprime.factory();\nvar r = rand( 1.5, 1.5 );\nr = rand( 2.0, 3.14 );\nrand = base.random.betaprime.factory( 1.5, 1.5 );\nr = rand();\nr = rand();\n","base.random.betaprime.NAME":"var str = base.random.betaprime.NAME\n","base.random.betaprime.PRNG":"var prng = base.random.betaprime.PRNG;\n","base.random.betaprime.seed":"var seed = base.random.betaprime.seed;\n","base.random.betaprime.seedLength":"var len = base.random.betaprime.seedLength;\n","base.random.betaprime.state":"var r = base.random.betaprime( 2.0, 5.0 )\nr = base.random.betaprime( 2.0, 5.0 )\nr = base.random.betaprime( 2.0, 5.0 )\nvar state = base.random.betaprime.state\nr = base.random.betaprime( 2.0, 5.0 )\nr = base.random.betaprime( 2.0, 5.0 )\nbase.random.betaprime.state = state;\nr = base.random.betaprime( 2.0, 5.0 )\nr = base.random.betaprime( 2.0, 5.0 )\n","base.random.betaprime.stateLength":"var len = base.random.betaprime.stateLength;\n","base.random.betaprime.byteLength":"var sz = base.random.betaprime.byteLength;\n","base.random.betaprime.toJSON":"var o = base.random.betaprime.toJSON()\n","base.random.binomial":"var r = base.random.binomial( 20, 0.8 );\n","base.random.binomial.factory":"var rand = base.random.binomial.factory();\nvar r = rand( 20, 0.3 );\nr = rand( 10, 0.77 );\nrand = base.random.binomial.factory( 10, 0.8 );\nr = rand();\nr = rand();\n","base.random.binomial.NAME":"var str = base.random.binomial.NAME\n","base.random.binomial.PRNG":"var prng = base.random.binomial.PRNG;\n","base.random.binomial.seed":"var seed = base.random.binomial.seed;\n","base.random.binomial.seedLength":"var len = base.random.binomial.seedLength;\n","base.random.binomial.state":"var r = base.random.binomial( 20, 0.8 )\nr = base.random.binomial( 20, 0.8 )\nr = base.random.binomial( 20, 0.8 )\nvar state = base.random.binomial.state\nr = base.random.binomial( 20, 0.8 )\nr = base.random.binomial( 20, 0.8 )\nbase.random.binomial.state = state;\nr = base.random.binomial( 20, 0.8 )\nr = base.random.binomial( 20, 0.8 )\n","base.random.binomial.stateLength":"var len = base.random.binomial.stateLength;\n","base.random.binomial.byteLength":"var sz = base.random.binomial.byteLength;\n","base.random.binomial.toJSON":"var o = base.random.binomial.toJSON()\n","base.random.boxMuller":"var r = base.random.boxMuller();\n","base.random.boxMuller.factory":"var rand = base.random.boxMuller.factory();\nr = rand();\nr = rand();\n","base.random.boxMuller.NAME":"var str = base.random.boxMuller.NAME\n","base.random.boxMuller.PRNG":"var prng = base.random.boxMuller.PRNG;\n","base.random.boxMuller.seed":"var seed = base.random.boxMuller.seed;\n","base.random.boxMuller.seedLength":"var len = base.random.boxMuller.seedLength;\n","base.random.boxMuller.state":"var r = base.random.boxMuller()\nr = base.random.boxMuller()\nr = base.random.boxMuller()\nvar state = base.random.boxMuller.state\nr = base.random.boxMuller()\nr = base.random.boxMuller()\nbase.random.boxMuller.state = state;\nr = base.random.boxMuller()\nr = base.random.boxMuller()\n","base.random.boxMuller.stateLength":"var len = base.random.boxMuller.stateLength;\n","base.random.boxMuller.byteLength":"var sz = base.random.boxMuller.byteLength;\n","base.random.boxMuller.toJSON":"var o = base.random.boxMuller.toJSON()\n","base.random.cauchy":"var r = base.random.cauchy( 2.0, 5.0 );\n","base.random.cauchy.factory":"var rand = base.random.cauchy.factory();\nvar r = rand( 0.0, 1.5 );\nr = rand( -2.0, 2.0 );\nrand = base.random.cauchy.factory( 0.0, 1.5 );\nr = rand();\nr = rand();\n","base.random.cauchy.NAME":"var str = base.random.cauchy.NAME\n","base.random.cauchy.PRNG":"var prng = base.random.cauchy.PRNG;\n","base.random.cauchy.seed":"var seed = base.random.cauchy.seed;\n","base.random.cauchy.seedLength":"var len = base.random.cauchy.seedLength;\n","base.random.cauchy.state":"var r = base.random.cauchy( 2.0, 5.0 )\nr = base.random.cauchy( 2.0, 5.0 )\nr = base.random.cauchy( 2.0, 5.0 )\nvar state = base.random.cauchy.state\nr = base.random.cauchy( 2.0, 5.0 )\nr = base.random.cauchy( 2.0, 5.0 )\nbase.random.cauchy.state = state;\nr = base.random.cauchy( 2.0, 5.0 )\nr = base.random.cauchy( 2.0, 5.0 )\n","base.random.cauchy.stateLength":"var len = base.random.cauchy.stateLength;\n","base.random.cauchy.byteLength":"var sz = base.random.cauchy.byteLength;\n","base.random.cauchy.toJSON":"var o = base.random.cauchy.toJSON()\n","base.random.chi":"var r = base.random.chi( 2 );\n","base.random.chi.factory":"var rand = base.random.chi.factory();\nvar r = rand( 5 );\nr = rand( 3.14 );\nrand = base.random.chi.factory( 3 );\nr = rand();\nr = rand();\n","base.random.chi.NAME":"var str = base.random.chi.NAME\n","base.random.chi.PRNG":"var prng = base.random.chi.PRNG;\n","base.random.chi.seed":"var seed = base.random.chi.seed;\n","base.random.chi.seedLength":"var len = base.random.chi.seedLength;\n","base.random.chi.state":"var r = base.random.chi( 2 )\nr = base.random.chi( 2 )\nr = base.random.chi( 2 )\nvar state = base.random.chi.state\nr = base.random.chi( 2 )\nr = base.random.chi( 2 )\nbase.random.chi.state = state;\nr = base.random.chi( 2 )\nr = base.random.chi( 2 )\n","base.random.chi.stateLength":"var len = base.random.chi.stateLength;\n","base.random.chi.byteLength":"var sz = base.random.chi.byteLength;\n","base.random.chi.toJSON":"var o = base.random.chi.toJSON()\n","base.random.chisquare":"var r = base.random.chisquare( 2 );\n","base.random.chisquare.factory":"var rand = base.random.chisquare.factory();\nvar r = rand( 5 );\nr = rand( 3.14 );\nrand = base.random.chisquare.factory( 3 );\nr = rand();\nr = rand();\n","base.random.chisquare.NAME":"var str = base.random.chisquare.NAME\n","base.random.chisquare.PRNG":"var prng = base.random.chisquare.PRNG;\n","base.random.chisquare.seed":"var seed = base.random.chisquare.seed;\n","base.random.chisquare.seedLength":"var len = base.random.chisquare.seedLength;\n","base.random.chisquare.state":"var r = base.random.chisquare( 2 )\nr = base.random.chisquare( 2 )\nr = base.random.chisquare( 2 )\nvar state = base.random.chisquare.state\nr = base.random.chisquare( 2 )\nr = base.random.chisquare( 2 )\nbase.random.chisquare.state = state;\nr = base.random.chisquare( 2 )\nr = base.random.chisquare( 2 )\n","base.random.chisquare.stateLength":"var len = base.random.chisquare.stateLength;\n","base.random.chisquare.byteLength":"var sz = base.random.chisquare.byteLength;\n","base.random.chisquare.toJSON":"var o = base.random.chisquare.toJSON()\n","base.random.cosine":"var r = base.random.cosine( 2.0, 5.0 );\n","base.random.cosine.factory":"var rand = base.random.cosine.factory();\nvar r = rand( 0.1, 1.5 );\nr = rand( 2.0, 3.14 );\nrand = base.random.cosine.factory( 0.1, 1.5 );\nr = rand();\nr = rand();\n","base.random.cosine.NAME":"var str = base.random.cosine.NAME\n","base.random.cosine.PRNG":"var prng = base.random.cosine.PRNG;\n","base.random.cosine.seed":"var seed = base.random.cosine.seed;\n","base.random.cosine.seedLength":"var len = base.random.cosine.seedLength;\n","base.random.cosine.state":"var r = base.random.cosine( 2.0, 5.0 )\nr = base.random.cosine( 2.0, 5.0 )\nr = base.random.cosine( 2.0, 5.0 )\nvar state = base.random.cosine.state\nr = base.random.cosine( 2.0, 5.0 )\nr = base.random.cosine( 2.0, 5.0 )\nbase.random.cosine.state = state;\nr = base.random.cosine( 2.0, 5.0 )\nr = base.random.cosine( 2.0, 5.0 )\n","base.random.cosine.stateLength":"var len = base.random.cosine.stateLength;\n","base.random.cosine.byteLength":"var sz = base.random.cosine.byteLength;\n","base.random.cosine.toJSON":"var o = base.random.cosine.toJSON()\n","base.random.discreteUniform":"var r = base.random.discreteUniform( 2, 50 );\n","base.random.discreteUniform.factory":"var rand = base.random.discreteUniform.factory();\nvar r = rand( 0, 10 );\nr = rand( -20, 20 );\nrand = base.random.discreteUniform.factory( 0, 10 );\nr = rand();\nr = rand();\n","base.random.discreteUniform.NAME":"var str = base.random.discreteUniform.NAME\n","base.random.discreteUniform.PRNG":"var prng = base.random.discreteUniform.PRNG;\n","base.random.discreteUniform.seed":"var seed = base.random.discreteUniform.seed;\n","base.random.discreteUniform.seedLength":"var len = base.random.discreteUniform.seedLength;\n","base.random.discreteUniform.state":"var r = base.random.discreteUniform( 2, 50 )\nr = base.random.discreteUniform( 2, 50 )\nr = base.random.discreteUniform( 2, 50 )\nvar state = base.random.discreteUniform.state\nr = base.random.discreteUniform( 2, 50 )\nr = base.random.discreteUniform( 2, 50 )\nbase.random.discreteUniform.state = state;\nr = base.random.discreteUniform( 2, 50 )\nr = base.random.discreteUniform( 2, 50 )\n","base.random.discreteUniform.stateLength":"var len = base.random.discreteUniform.stateLength;\n","base.random.discreteUniform.byteLength":"var sz = base.random.discreteUniform.byteLength;\n","base.random.discreteUniform.toJSON":"var o = base.random.discreteUniform.toJSON()\n","base.random.erlang":"var r = base.random.erlang( 2, 5.0 );\n","base.random.erlang.factory":"var rand = base.random.erlang.factory();\nvar r = rand( 2, 1.0 );\nr = rand( 4, 3.14 );\nrand = base.random.erlang.factory( 2, 1.5 );\nr = rand();\nr = rand();\n","base.random.erlang.NAME":"var str = base.random.erlang.NAME\n","base.random.erlang.PRNG":"var prng = base.random.erlang.PRNG;\n","base.random.erlang.seed":"var seed = base.random.erlang.seed;\n","base.random.erlang.seedLength":"var len = base.random.erlang.seedLength;\n","base.random.erlang.state":"var r = base.random.erlang( 2, 5.0 )\nr = base.random.erlang( 2, 5.0 )\nr = base.random.erlang( 2, 5.0 )\nvar state = base.random.erlang.state\nr = base.random.erlang( 2, 5.0 )\nr = base.random.erlang( 2, 5.0 )\nbase.random.erlang.state = state;\nr = base.random.erlang( 2, 5.0 )\nr = base.random.erlang( 2, 5.0 )\n","base.random.erlang.stateLength":"var len = base.random.erlang.stateLength;\n","base.random.erlang.byteLength":"var sz = base.random.erlang.byteLength;\n","base.random.erlang.toJSON":"var o = base.random.erlang.toJSON()\n","base.random.exponential":"var r = base.random.exponential( 7.9 );\n","base.random.exponential.factory":"var rand = base.random.exponential.factory();\nvar r = rand( 5.0 );\nr = rand( 3.14 );\nrand = base.random.exponential.factory( 10.0 );\nr = rand();\nr = rand();\n","base.random.exponential.NAME":"var str = base.random.exponential.NAME\n","base.random.exponential.PRNG":"var prng = base.random.exponential.PRNG;\n","base.random.exponential.seed":"var seed = base.random.exponential.seed;\n","base.random.exponential.seedLength":"var len = base.random.exponential.seedLength;\n","base.random.exponential.state":"var r = base.random.exponential( 7.9 )\nr = base.random.exponential( 7.9 )\nr = base.random.exponential( 7.9 )\nvar state = base.random.exponential.state\nr = base.random.exponential( 7.9 )\nr = base.random.exponential( 7.9 )\nbase.random.exponential.state = state;\nr = base.random.exponential( 7.9 )\nr = base.random.exponential( 7.9 )\n","base.random.exponential.stateLength":"var len = base.random.exponential.stateLength;\n","base.random.exponential.byteLength":"var sz = base.random.exponential.byteLength;\n","base.random.exponential.toJSON":"var o = base.random.exponential.toJSON()\n","base.random.f":"var r = base.random.f( 2.0, 5.0 );\n","base.random.f.factory":"var rand = base.random.f.factory();\nvar r = rand( 1.5, 1.5 );\nr = rand( 3.0, 3.14 );\nrand = base.random.f.factory( 1.5, 1.5 );\nr = rand();\nr = rand();\n","base.random.f.NAME":"var str = base.random.f.NAME\n","base.random.f.PRNG":"var prng = base.random.f.PRNG;\n","base.random.f.seed":"var seed = base.random.f.seed;\n","base.random.f.seedLength":"var len = base.random.f.seedLength;\n","base.random.f.state":"var r = base.random.f( 1.5, 1.5 )\nr = base.random.f( 1.5, 1.5 )\nr = base.random.f( 1.5, 1.5 )\nvar state = base.random.f.state\nr = base.random.f( 1.5, 1.5 )\nr = base.random.f( 1.5, 1.5 )\nbase.random.f.state = state;\nr = base.random.f( 1.5, 1.5 )\nr = base.random.f( 1.5, 1.5 )\n","base.random.f.stateLength":"var len = base.random.f.stateLength;\n","base.random.f.byteLength":"var sz = base.random.f.byteLength;\n","base.random.f.toJSON":"var o = base.random.f.toJSON()\n","base.random.frechet":"var r = base.random.frechet( 2.0, 5.0, 3.33 );\n","base.random.frechet.factory":"var rand = base.random.frechet.factory();\nvar r = rand( 1.0, 1.0, 0.5 );\nr = rand( 2.0, 2.0, 1.0 );\nrand = base.random.frechet.factory( 1.0, 1.0, 0.5 );\nr = rand();\nr = rand();\n","base.random.frechet.NAME":"var str = base.random.frechet.NAME\n","base.random.frechet.PRNG":"var prng = base.random.frechet.PRNG;\n","base.random.frechet.seed":"var seed = base.random.frechet.seed;\n","base.random.frechet.seedLength":"var len = base.random.frechet.seedLength;\n","base.random.frechet.state":"var r = base.random.frechet( 1.0, 1.0, 0.5 )\nr = base.random.frechet( 1.0, 1.0, 0.5 )\nr = base.random.frechet( 1.0, 1.0, 0.5 )\nvar state = base.random.frechet.state\nr = base.random.frechet( 1.0, 1.0, 0.5 )\nr = base.random.frechet( 1.0, 1.0, 0.5 )\nbase.random.frechet.state = state;\nr = base.random.frechet( 1.0, 1.0, 0.5 )\nr = base.random.frechet( 1.0, 1.0, 0.5 )\n","base.random.frechet.stateLength":"var len = base.random.frechet.stateLength;\n","base.random.frechet.byteLength":"var sz = base.random.frechet.byteLength;\n","base.random.frechet.toJSON":"var o = base.random.frechet.toJSON()\n","base.random.gamma":"var r = base.random.gamma( 2.0, 5.0 );\n","base.random.gamma.factory":"var rand = base.random.gamma.factory();\nvar r = rand( 1.5, 1.5 );\nr = rand( 3.14, 2.25 );\nrand = base.random.gamma.factory( 1.5, 1.5 );\nr = rand();\nr = rand();\n","base.random.gamma.NAME":"var str = base.random.gamma.NAME\n","base.random.gamma.PRNG":"var prng = base.random.gamma.PRNG;\n","base.random.gamma.seed":"var seed = base.random.gamma.seed;\n","base.random.gamma.seedLength":"var len = base.random.gamma.seedLength;\n","base.random.gamma.state":"var r = base.random.gamma( 2.0, 5.0 )\nr = base.random.gamma( 2.0, 5.0 )\nr = base.random.gamma( 2.0, 5.0 )\nvar state = base.random.gamma.state\nr = base.random.gamma( 2.0, 5.0 )\nr = base.random.gamma( 2.0, 5.0 )\nbase.random.gamma.state = state;\nr = base.random.gamma( 2.0, 5.0 )\nr = base.random.gamma( 2.0, 5.0 )\n","base.random.gamma.stateLength":"var len = base.random.gamma.stateLength;\n","base.random.gamma.byteLength":"var sz = base.random.gamma.byteLength;\n","base.random.gamma.toJSON":"var o = base.random.gamma.toJSON()\n","base.random.geometric":"var r = base.random.geometric( 0.8 );\n","base.random.geometric.factory":"var rand = base.random.geometric.factory();\nvar r = rand( 0.3 );\nr = rand( 0.59 );\nrand = base.random.geometric.factory( 0.3 );\nr = rand();\nr = rand();\n","base.random.geometric.NAME":"var str = base.random.geometric.NAME\n","base.random.geometric.PRNG":"var prng = base.random.geometric.PRNG;\n","base.random.geometric.seed":"var seed = base.random.geometric.seed;\n","base.random.geometric.seedLength":"var len = base.random.geometric.seedLength;\n","base.random.geometric.state":"var r = base.random.geometric( 0.3 )\nr = base.random.geometric( 0.3 )\nr = base.random.geometric( 0.3 )\nvar state = base.random.geometric.state\nr = base.random.geometric( 0.3 )\nr = base.random.geometric( 0.3 )\nbase.random.geometric.state = state;\nr = base.random.geometric( 0.3 )\nr = base.random.geometric( 0.3 )\n","base.random.geometric.stateLength":"var len = base.random.geometric.stateLength;\n","base.random.geometric.byteLength":"var sz = base.random.geometric.byteLength;\n","base.random.geometric.toJSON":"var o = base.random.geometric.toJSON()\n","base.random.gumbel":"var r = base.random.gumbel( 2.0, 5.0 );\n","base.random.gumbel.factory":"var rand = base.random.gumbel.factory();\nvar r = rand( 0.1, 1.5 );\nr = rand( 2.0, 3.14 );\nrand = base.random.gumbel.factory( 0.1, 1.5 );\nr = rand();\nr = rand();\n","base.random.gumbel.NAME":"var str = base.random.gumbel.NAME\n","base.random.gumbel.PRNG":"var prng = base.random.gumbel.PRNG;\n","base.random.gumbel.seed":"var seed = base.random.gumbel.seed;\n","base.random.gumbel.seedLength":"var len = base.random.gumbel.seedLength;\n","base.random.gumbel.state":"var r = base.random.gumbel( 2.0, 5.0 )\nr = base.random.gumbel( 2.0, 5.0 )\nr = base.random.gumbel( 2.0, 5.0 )\nvar state = base.random.gumbel.state\nr = base.random.gumbel( 2.0, 5.0 )\nr = base.random.gumbel( 2.0, 5.0 )\nbase.random.gumbel.state = state;\nr = base.random.gumbel( 2.0, 5.0 )\nr = base.random.gumbel( 2.0, 5.0 )\n","base.random.gumbel.stateLength":"var len = base.random.gumbel.stateLength;\n","base.random.gumbel.byteLength":"var sz = base.random.gumbel.byteLength;\n","base.random.gumbel.toJSON":"var o = base.random.gumbel.toJSON()\n","base.random.hypergeometric":"var r = base.random.hypergeometric( 20, 10, 7 );\n","base.random.hypergeometric.factory":"var rand = base.random.hypergeometric.factory();\nvar r = rand( 20, 10, 15 );\nr = rand( 20, 10, 7 );\nrand = base.random.hypergeometric.factory( 20, 10, 15 );\nr = rand();\nr = rand();\n","base.random.hypergeometric.NAME":"var str = base.random.hypergeometric.NAME\n","base.random.hypergeometric.PRNG":"var prng = base.random.hypergeometric.PRNG;\n","base.random.hypergeometric.seed":"var seed = base.random.hypergeometric.seed;\n","base.random.hypergeometric.seedLength":"var len = base.random.hypergeometric.seedLength;\n","base.random.hypergeometric.state":"var r = base.random.hypergeometric( 20, 10, 15 )\nr = base.random.hypergeometric( 20, 10, 15 )\nr = base.random.hypergeometric( 20, 10, 15 )\nvar state = base.random.hypergeometric.state\nr = base.random.hypergeometric( 20, 10, 15 )\nr = base.random.hypergeometric( 20, 10, 15 )\nbase.random.hypergeometric.state = state;\nr = base.random.hypergeometric( 20, 10, 15 )\nr = base.random.hypergeometric( 20, 10, 15 )\n","base.random.hypergeometric.stateLength":"var len = base.random.hypergeometric.stateLength;\n","base.random.hypergeometric.byteLength":"var sz = base.random.hypergeometric.byteLength;\n","base.random.hypergeometric.toJSON":"var o = base.random.hypergeometric.toJSON()\n","base.random.improvedZiggurat":"var r = base.random.improvedZiggurat();\n","base.random.improvedZiggurat.factory":"var rand = base.random.improvedZiggurat.factory();\nr = rand();\nr = rand();\n","base.random.improvedZiggurat.NAME":"var str = base.random.improvedZiggurat.NAME\n","base.random.improvedZiggurat.PRNG":"var prng = base.random.improvedZiggurat.PRNG;\n","base.random.improvedZiggurat.seed":"var seed = base.random.improvedZiggurat.seed;\n","base.random.improvedZiggurat.seedLength":"var len = base.random.improvedZiggurat.seedLength;\n","base.random.improvedZiggurat.state":"var r = base.random.improvedZiggurat()\nr = base.random.improvedZiggurat()\nr = base.random.improvedZiggurat()\nvar state = base.random.improvedZiggurat.state\nr = base.random.improvedZiggurat()\nr = base.random.improvedZiggurat()\nbase.random.improvedZiggurat.state = state;\nr = base.random.improvedZiggurat()\nr = base.random.improvedZiggurat()\n","base.random.improvedZiggurat.stateLength":"var len = base.random.improvedZiggurat.stateLength;\n","base.random.improvedZiggurat.byteLength":"var sz = base.random.improvedZiggurat.byteLength;\n","base.random.improvedZiggurat.toJSON":"var o = base.random.improvedZiggurat.toJSON()\n","base.random.invgamma":"var r = base.random.invgamma( 2.0, 5.0 );\n","base.random.invgamma.factory":"var rand = base.random.invgamma.factory();\nvar r = rand( 1.5, 1.5 );\nr = rand( 3.14, 2.25 );\nrand = base.random.invgamma.factory( 1.5, 1.5 );\nr = rand();\nr = rand();\n","base.random.invgamma.NAME":"var str = base.random.invgamma.NAME\n","base.random.invgamma.PRNG":"var prng = base.random.invgamma.PRNG;\n","base.random.invgamma.seed":"var seed = base.random.invgamma.seed;\n","base.random.invgamma.seedLength":"var len = base.random.invgamma.seedLength;\n","base.random.invgamma.state":"var r = base.random.invgamma( 2.0, 5.0 )\nr = base.random.invgamma( 2.0, 5.0 )\nr = base.random.invgamma( 2.0, 5.0 )\nvar state = base.random.invgamma.state\nr = base.random.invgamma( 2.0, 5.0 )\nr = base.random.invgamma( 2.0, 5.0 )\nbase.random.invgamma.state = state;\nr = base.random.invgamma( 2.0, 5.0 )\nr = base.random.invgamma( 2.0, 5.0 )\n","base.random.invgamma.stateLength":"var len = base.random.invgamma.stateLength;\n","base.random.invgamma.byteLength":"var sz = base.random.invgamma.byteLength;\n","base.random.invgamma.toJSON":"var o = base.random.invgamma.toJSON()\n","base.random.kumaraswamy":"var r = base.random.kumaraswamy( 2.0, 5.0 );\n","base.random.kumaraswamy.factory":"var rand = base.random.kumaraswamy.factory();\nvar r = rand( 1.5, 1.5 );\nr = rand( 2.0, 3.14 );\nrand = base.random.kumaraswamy.factory( 1.5, 1.5 );\nr = rand();\nr = rand();\n","base.random.kumaraswamy.NAME":"var str = base.random.kumaraswamy.NAME\n","base.random.kumaraswamy.PRNG":"var prng = base.random.kumaraswamy.PRNG;\n","base.random.kumaraswamy.seed":"var seed = base.random.kumaraswamy.seed;\n","base.random.kumaraswamy.seedLength":"var len = base.random.kumaraswamy.seedLength;\n","base.random.kumaraswamy.state":"var r = base.random.kumaraswamy( 1.5, 1.5 )\nr = base.random.kumaraswamy( 1.5, 1.5 )\nr = base.random.kumaraswamy( 1.5, 1.5 )\nvar state = base.random.kumaraswamy.state\nr = base.random.kumaraswamy( 1.5, 1.5 )\nr = base.random.kumaraswamy( 1.5, 1.5 )\nbase.random.kumaraswamy.state = state;\nr = base.random.kumaraswamy( 1.5, 1.5 )\nr = base.random.kumaraswamy( 1.5, 1.5 )\n","base.random.kumaraswamy.stateLength":"var len = base.random.kumaraswamy.stateLength;\n","base.random.kumaraswamy.byteLength":"var sz = base.random.kumaraswamy.byteLength;\n","base.random.kumaraswamy.toJSON":"var o = base.random.kumaraswamy.toJSON()\n","base.random.laplace":"var r = base.random.laplace( 2.0, 5.0 );\n","base.random.laplace.factory":"var rand = base.random.laplace.factory();\nvar r = rand( 0.1, 1.5 );\nr = rand( 2.0, 3.14 );\nrand = base.random.laplace.factory( 0.1, 1.5 );\nr = rand();\nr = rand();\n","base.random.laplace.NAME":"var str = base.random.laplace.NAME\n","base.random.laplace.PRNG":"var prng = base.random.laplace.PRNG;\n","base.random.laplace.seed":"var seed = base.random.laplace.seed;\n","base.random.laplace.seedLength":"var len = base.random.laplace.seedLength;\n","base.random.laplace.state":"var r = base.random.laplace( 2.0, 5.0 )\nr = base.random.laplace( 2.0, 5.0 )\nr = base.random.laplace( 2.0, 5.0 )\nvar state = base.random.laplace.state\nr = base.random.laplace( 2.0, 5.0 )\nr = base.random.laplace( 2.0, 5.0 )\nbase.random.laplace.state = state;\nr = base.random.laplace( 2.0, 5.0 )\nr = base.random.laplace( 2.0, 5.0 )\n","base.random.laplace.stateLength":"var len = base.random.laplace.stateLength;\n","base.random.laplace.byteLength":"var sz = base.random.laplace.byteLength;\n","base.random.laplace.toJSON":"var o = base.random.laplace.toJSON()\n","base.random.levy":"var r = base.random.levy( 2.0, 5.0 );\n","base.random.levy.factory":"var rand = base.random.levy.factory();\nvar r = rand( 0.1, 1.5 );\nr = rand( 2.0, 3.14 );\nrand = base.random.levy.factory( 0.1, 1.5 );\nr = rand();\nr = rand();\n","base.random.levy.NAME":"var str = base.random.levy.NAME\n","base.random.levy.PRNG":"var prng = base.random.levy.PRNG;\n","base.random.levy.seed":"var seed = base.random.levy.seed;\n","base.random.levy.seedLength":"var len = base.random.levy.seedLength;\n","base.random.levy.state":"var r = base.random.levy( 2.0, 5.0 )\nr = base.random.levy( 2.0, 5.0 )\nr = base.random.levy( 2.0, 5.0 )\nvar state = base.random.levy.state\nr = base.random.levy( 2.0, 5.0 )\nr = base.random.levy( 2.0, 5.0 )\nbase.random.levy.state = state;\nr = base.random.levy( 2.0, 5.0 )\nr = base.random.levy( 2.0, 5.0 )\n","base.random.levy.stateLength":"var len = base.random.levy.stateLength;\n","base.random.levy.byteLength":"var sz = base.random.levy.byteLength;\n","base.random.levy.toJSON":"var o = base.random.levy.toJSON()\n","base.random.logistic":"var r = base.random.logistic( 2.0, 5.0 );\n","base.random.logistic.factory":"var rand = base.random.logistic.factory();\nvar r = rand( 0.1, 1.5 );\nr = rand( 2.0, 3.14 );\nrand = base.random.logistic.factory( 0.1, 1.5 );\nr = rand();\nr = rand();\n","base.random.logistic.NAME":"var str = base.random.logistic.NAME\n","base.random.logistic.PRNG":"var prng = base.random.logistic.PRNG;\n","base.random.logistic.seed":"var seed = base.random.logistic.seed;\n","base.random.logistic.seedLength":"var len = base.random.logistic.seedLength;\n","base.random.logistic.state":"var r = base.random.logistic( 2.0, 5.0 )\nr = base.random.logistic( 2.0, 5.0 )\nr = base.random.logistic( 2.0, 5.0 )\nvar state = base.random.logistic.state\nr = base.random.logistic( 2.0, 5.0 )\nr = base.random.logistic( 2.0, 5.0 )\nbase.random.logistic.state = state;\nr = base.random.logistic( 2.0, 5.0 )\nr = base.random.logistic( 2.0, 5.0 )\n","base.random.logistic.stateLength":"var len = base.random.logistic.stateLength;\n","base.random.logistic.byteLength":"var sz = base.random.logistic.byteLength;\n","base.random.logistic.toJSON":"var o = base.random.logistic.toJSON()\n","base.random.lognormal":"var r = base.random.lognormal( 2.0, 5.0 );\n","base.random.lognormal.factory":"var rand = base.random.lognormal.factory();\nvar r = rand( 0.1, 1.5 );\nr = rand( 2.0, 3.14 );\nrand = base.random.lognormal.factory( 0.1, 1.5 );\nr = rand();\nr = rand();\n","base.random.lognormal.NAME":"var str = base.random.lognormal.NAME\n","base.random.lognormal.PRNG":"var prng = base.random.lognormal.PRNG;\n","base.random.lognormal.seed":"var seed = base.random.lognormal.seed;\n","base.random.lognormal.seedLength":"var len = base.random.lognormal.seedLength;\n","base.random.lognormal.state":"var r = base.random.lognormal( 2.0, 5.0 )\nr = base.random.lognormal( 2.0, 5.0 )\nr = base.random.lognormal( 2.0, 5.0 )\nvar state = base.random.lognormal.state\nr = base.random.lognormal( 2.0, 5.0 )\nr = base.random.lognormal( 2.0, 5.0 )\nbase.random.lognormal.state = state;\nr = base.random.lognormal( 2.0, 5.0 )\nr = base.random.lognormal( 2.0, 5.0 )\n","base.random.lognormal.stateLength":"var len = base.random.lognormal.stateLength;\n","base.random.lognormal.byteLength":"var sz = base.random.lognormal.byteLength;\n","base.random.lognormal.toJSON":"var o = base.random.lognormal.toJSON()\n","base.random.minstd":"var r = base.random.minstd();\n","base.random.minstd.normalized":"var r = base.random.minstd.normalized();\n","base.random.minstd.factory":"var rand = base.random.minstd.factory();\nr = rand();\nr = rand();\nrand = base.random.minstd.factory( { 'seed': 1234 } );\nr = rand()\n","base.random.minstd.NAME":"var str = base.random.minstd.NAME\n","base.random.minstd.MIN":"var v = base.random.minstd.MIN\n","base.random.minstd.MAX":"var v = base.random.minstd.MAX\n","base.random.minstd.seed":"var seed = base.random.minstd.seed;\n","base.random.minstd.seedLength":"var len = base.random.minstd.seedLength;\n","base.random.minstd.state":"var r = base.random.minstd()\nr = base.random.minstd()\nr = base.random.minstd()\nvar state = base.random.minstd.state\nr = base.random.minstd()\nr = base.random.minstd()\nbase.random.minstd.state = state;\nr = base.random.minstd()\nr = base.random.minstd()\n","base.random.minstd.stateLength":"var len = base.random.minstd.stateLength;\n","base.random.minstd.byteLength":"var sz = base.random.minstd.byteLength;\n","base.random.minstd.toJSON":"var o = base.random.minstd.toJSON()\n","base.random.minstdShuffle":"var r = base.random.minstdShuffle();\n","base.random.minstdShuffle.normalized":"var r = base.random.minstdShuffle.normalized();\n","base.random.minstdShuffle.factory":"var rand = base.random.minstdShuffle.factory();\nr = rand();\nr = rand();\nrand = base.random.minstdShuffle.factory( { 'seed': 1234 } );\nr = rand()\n","base.random.minstdShuffle.NAME":"var str = base.random.minstdShuffle.NAME\n","base.random.minstdShuffle.MIN":"var v = base.random.minstdShuffle.MIN\n","base.random.minstdShuffle.MAX":"var v = base.random.minstdShuffle.MAX\n","base.random.minstdShuffle.seed":"var seed = base.random.minstdShuffle.seed;\n","base.random.minstdShuffle.seedLength":"var len = base.random.minstdShuffle.seedLength;\n","base.random.minstdShuffle.state":"var r = base.random.minstdShuffle()\nr = base.random.minstdShuffle()\nr = base.random.minstdShuffle()\nvar state = base.random.minstdShuffle.state\nr = base.random.minstdShuffle()\nr = base.random.minstdShuffle()\nbase.random.minstdShuffle.state = state;\nr = base.random.minstdShuffle()\nr = base.random.minstdShuffle()\n","base.random.minstdShuffle.stateLength":"var len = base.random.minstdShuffle.stateLength;\n","base.random.minstdShuffle.byteLength":"var sz = base.random.minstdShuffle.byteLength;\n","base.random.minstdShuffle.toJSON":"var o = base.random.minstdShuffle.toJSON()\n","base.random.mt19937":"var r = base.random.mt19937();\n","base.random.mt19937.normalized":"var r = base.random.mt19937.normalized();\n","base.random.mt19937.factory":"var rand = base.random.mt19937.factory();\nr = rand();\nr = rand();\nrand = base.random.mt19937.factory( { 'seed': 1234 } );\nr = rand()\n","base.random.mt19937.NAME":"var str = base.random.mt19937.NAME\n","base.random.mt19937.MIN":"var v = base.random.mt19937.MIN\n","base.random.mt19937.MAX":"var v = base.random.mt19937.MAX\n","base.random.mt19937.seed":"var seed = base.random.mt19937.seed;\n","base.random.mt19937.seedLength":"var len = base.random.mt19937.seedLength;\n","base.random.mt19937.state":"var r = base.random.mt19937()\nr = base.random.mt19937()\nr = base.random.mt19937()\nvar state = base.random.mt19937.state\nr = base.random.mt19937()\nr = base.random.mt19937()\nbase.random.mt19937.state = state;\nr = base.random.mt19937()\nr = base.random.mt19937()\n","base.random.mt19937.stateLength":"var len = base.random.mt19937.stateLength;\n","base.random.mt19937.byteLength":"var sz = base.random.mt19937.byteLength;\n","base.random.mt19937.toJSON":"var o = base.random.mt19937.toJSON()\n","base.random.negativeBinomial":"var r = base.random.negativeBinomial( 20, 0.8 );\n","base.random.negativeBinomial.factory":"var rand = base.random.negativeBinomial.factory();\nvar r = rand( 20, 0.3 );\nr = rand( 10, 0.77 );\nrand = base.random.negativeBinomial.factory( 10, 0.8 );\nr = rand();\nr = rand();\n","base.random.negativeBinomial.NAME":"var str = base.random.negativeBinomial.NAME\n","base.random.negativeBinomial.PRNG":"var prng = base.random.negativeBinomial.PRNG;\n","base.random.negativeBinomial.seed":"var seed = base.random.negativeBinomial.seed;\n","base.random.negativeBinomial.seedLength":"var len = base.random.negativeBinomial.seedLength;\n","base.random.negativeBinomial.state":"var r = base.random.negativeBinomial( 20, 0.3 )\nr = base.random.negativeBinomial( 20, 0.3 )\nr = base.random.negativeBinomial( 20, 0.3 )\nvar state = base.random.negativeBinomial.state\nr = base.random.negativeBinomial( 20, 0.3 )\nr = base.random.negativeBinomial( 20, 0.3 )\nbase.random.negativeBinomial.state = state;\nr = base.random.negativeBinomial( 20, 0.3 )\nr = base.random.negativeBinomial( 20, 0.3 )\n","base.random.negativeBinomial.stateLength":"var len = base.random.negativeBinomial.stateLength;\n","base.random.negativeBinomial.byteLength":"var sz = base.random.negativeBinomial.byteLength;\n","base.random.negativeBinomial.toJSON":"var o = base.random.negativeBinomial.toJSON()\n","base.random.normal":"var r = base.random.normal( 2.0, 5.0 );\n","base.random.normal.factory":"var rand = base.random.normal.factory();\nvar r = rand( 0.1, 1.5 );\nr = rand( 2.0, 3.14 );\nrand = base.random.normal.factory( 0.1, 1.5 );\nr = rand();\nr = rand();\n","base.random.normal.NAME":"var str = base.random.normal.NAME\n","base.random.normal.PRNG":"var prng = base.random.normal.PRNG;\n","base.random.normal.seed":"var seed = base.random.normal.seed;\n","base.random.normal.seedLength":"var len = base.random.normal.seedLength;\n","base.random.normal.state":"var r = base.random.normal( 2.0, 5.0 )\nr = base.random.normal( 2.0, 5.0 )\nr = base.random.normal( 2.0, 5.0 )\nvar state = base.random.normal.state\nr = base.random.normal( 2.0, 5.0 )\nr = base.random.normal( 2.0, 5.0 )\nbase.random.normal.state = state;\nr = base.random.normal( 2.0, 5.0 )\nr = base.random.normal( 2.0, 5.0 )\n","base.random.normal.stateLength":"var len = base.random.normal.stateLength;\n","base.random.normal.byteLength":"var sz = base.random.normal.byteLength;\n","base.random.normal.toJSON":"var o = base.random.normal.toJSON()\n","base.random.pareto1":"var r = base.random.pareto1( 2.0, 5.0 );\n","base.random.pareto1.factory":"var rand = base.random.pareto1.factory();\nvar r = rand( 1.5, 1.5 );\nr = rand( 2.0, 3.14 );\nrand = base.random.pareto1.factory( 1.5, 1.5 );\nr = rand();\nr = rand();\n","base.random.pareto1.NAME":"var str = base.random.pareto1.NAME\n","base.random.pareto1.PRNG":"var prng = base.random.pareto1.PRNG;\n","base.random.pareto1.seed":"var seed = base.random.pareto1.seed;\n","base.random.pareto1.seedLength":"var len = base.random.pareto1.seedLength;\n","base.random.pareto1.state":"var r = base.random.pareto1( 2.0, 5.0 )\nr = base.random.pareto1( 2.0, 5.0 )\nr = base.random.pareto1( 2.0, 5.0 )\nvar state = base.random.pareto1.state\nr = base.random.pareto1( 2.0, 5.0 )\nr = base.random.pareto1( 2.0, 5.0 )\nbase.random.pareto1.state = state;\nr = base.random.pareto1( 2.0, 5.0 )\nr = base.random.pareto1( 2.0, 5.0 )\n","base.random.pareto1.stateLength":"var len = base.random.pareto1.stateLength;\n","base.random.pareto1.byteLength":"var sz = base.random.pareto1.byteLength;\n","base.random.pareto1.toJSON":"var o = base.random.pareto1.toJSON()\n","base.random.poisson":"var r = base.random.poisson( 7.9 );\n","base.random.poisson.factory":"var rand = base.random.poisson.factory();\nvar r = rand( 4.0 );\nr = rand( 3.14 );\nrand = base.random.poisson.factory( 10.0 );\nr = rand();\nr = rand();\n","base.random.poisson.NAME":"var str = base.random.poisson.NAME\n","base.random.poisson.PRNG":"var prng = base.random.poisson.PRNG;\n","base.random.poisson.seed":"var seed = base.random.poisson.seed;\n","base.random.poisson.seedLength":"var len = base.random.poisson.seedLength;\n","base.random.poisson.state":"var r = base.random.poisson( 10.0 )\nr = base.random.poisson( 10.0 )\nr = base.random.poisson( 10.0 )\nvar state = base.random.poisson.state\nr = base.random.poisson( 10.0 )\nr = base.random.poisson( 10.0 )\nbase.random.poisson.state = state;\nr = base.random.poisson( 10.0 )\nr = base.random.poisson( 10.0 )\n","base.random.poisson.stateLength":"var len = base.random.poisson.stateLength;\n","base.random.poisson.byteLength":"var sz = base.random.poisson.byteLength;\n","base.random.poisson.toJSON":"var o = base.random.poisson.toJSON()\n","base.random.randi":"var r = base.random.randi();\n","base.random.randi.factory":"var randi = base.random.randi.factory();\nvar r = randi();\nr = randi();\nrandi = base.random.randi.factory({ 'name': 'minstd' });\nr = randi();\nr = randi();\n","base.random.randi.NAME":"var str = base.random.randi.NAME\n","base.random.randi.PRNG":"var prng = base.random.randi.PRNG;\n","base.random.randi.MIN":"var v = base.random.randi.MIN;\n","base.random.randi.MAX":"var v = base.random.randi.MAX;\n","base.random.randi.seed":"var seed = base.random.randi.seed;\n","base.random.randi.seedLength":"var len = base.random.randi.seedLength;\n","base.random.randi.state":"var r = base.random.randi()\nr = base.random.randi()\nr = base.random.randi()\nvar state = base.random.randi.state;\nr = base.random.randi()\nr = base.random.randi()\nbase.random.randi.state = state;\nr = base.random.randi()\nr = base.random.randi()\n","base.random.randi.stateLength":"var len = base.random.randi.stateLength;\n","base.random.randi.byteLength":"var sz = base.random.randi.byteLength;\n","base.random.randi.toJSON":"var o = base.random.randi.toJSON()\n","base.random.randn":"var r = base.random.randn();\n","base.random.randn.factory":"var rand = base.random.randn.factory();\nvar r = rand();\nr = rand();\nvar rand = base.random.randn.factory({ 'name': 'box-muller' });\nr = rand();\nr = rand();\n","base.random.randn.NAME":"var str = base.random.randn.NAME\n","base.random.randn.PRNG":"var prng = base.random.randn.PRNG;\n","base.random.randn.seed":"var seed = base.random.randn.seed;\n","base.random.randn.seedLength":"var len = base.random.randn.seedLength;\n","base.random.randn.state":"var r = base.random.randn()\nr = base.random.randn()\nr = base.random.randn()\nvar state = base.random.randn.state;\nr = base.random.randn()\nr = base.random.randn()\nbase.random.randn.state = state;\nr = base.random.randn()\nr = base.random.randn()\n","base.random.randn.stateLength":"var len = base.random.randn.stateLength;\n","base.random.randn.byteLength":"var sz = base.random.randn.byteLength;\n","base.random.randn.toJSON":"var o = base.random.randn.toJSON()\n","base.random.randu":"var r = base.random.randu();\n","base.random.randu.factory":"var rand = base.random.randu.factory();\nvar r = rand();\nr = rand();\nvar rand = base.random.randu.factory({ 'name': 'minstd' });\nr = rand();\nr = rand();\n","base.random.randu.NAME":"var str = base.random.randu.NAME\n","base.random.randu.PRNG":"var prng = base.random.randu.PRNG;\n","base.random.randu.MIN":"var v = base.random.randu.MIN;\n","base.random.randu.MAX":"var v = base.random.randu.MAX;\n","base.random.randu.seed":"var seed = base.random.randu.seed;\n","base.random.randu.seedLength":"var len = base.random.randu.seedLength;\n","base.random.randu.state":"var r = base.random.randu()\nr = base.random.randu()\nr = base.random.randu()\nvar state = base.random.randu.state;\nr = base.random.randu()\nr = base.random.randu()\nbase.random.randu.state = state;\nr = base.random.randu()\nr = base.random.randu()\n","base.random.randu.stateLength":"var len = base.random.randu.stateLength;\n","base.random.randu.byteLength":"var sz = base.random.randu.byteLength;\n","base.random.randu.toJSON":"var o = base.random.randu.toJSON()\n","base.random.rayleigh":"var r = base.random.rayleigh( 2.5 );\n","base.random.rayleigh.factory":"var rand = base.random.rayleigh.factory();\nvar r = rand( 5.0 );\nr = rand( 10.0 );\nrand = base.random.rayleigh.factory( 5.0 );\nr = rand();\nr = rand();\n","base.random.rayleigh.NAME":"var str = base.random.rayleigh.NAME\n","base.random.rayleigh.PRNG":"var prng = base.random.rayleigh.PRNG;\n","base.random.rayleigh.seed":"var seed = base.random.rayleigh.seed;\n","base.random.rayleigh.seedLength":"var len = base.random.rayleigh.seedLength;\n","base.random.rayleigh.state":"var r = base.random.rayleigh( 5.0 )\nr = base.random.rayleigh( 5.0 )\nr = base.random.rayleigh( 5.0 )\nvar state = base.random.rayleigh.state\nr = base.random.rayleigh( 5.0 )\nr = base.random.rayleigh( 5.0 )\nbase.random.rayleigh.state = state;\nr = base.random.rayleigh( 5.0 )\nr = base.random.rayleigh( 5.0 )\n","base.random.rayleigh.stateLength":"var len = base.random.rayleigh.stateLength;\n","base.random.rayleigh.byteLength":"var sz = base.random.rayleigh.byteLength;\n","base.random.rayleigh.toJSON":"var o = base.random.rayleigh.toJSON()\n","base.random.t":"var r = base.random.t( 2.0 );\n","base.random.t.factory":"var rand = base.random.t.factory();\nvar r = rand( 5.0 );\nr = rand( 3.14 );\nrand = base.random.t.factory( 5.0 );\nr = rand();\nr = rand();\n","base.random.t.NAME":"var str = base.random.t.NAME\n","base.random.t.PRNG":"var prng = base.random.t.PRNG;\n","base.random.t.seed":"var seed = base.random.t.seed;\n","base.random.t.seedLength":"var len = base.random.t.seedLength;\n","base.random.t.state":"var r = base.random.t( 10.0 )\nr = base.random.t( 10.0 )\nr = base.random.t( 10.0 )\nvar state = base.random.t.state\nr = base.random.t( 10.0 )\nr = base.random.t( 10.0 )\nbase.random.t.state = state;\nr = base.random.t( 10.0 )\nr = base.random.t( 10.0 )\n","base.random.t.stateLength":"var len = base.random.t.stateLength;\n","base.random.t.byteLength":"var sz = base.random.t.byteLength;\n","base.random.t.toJSON":"var o = base.random.t.toJSON()\n","base.random.triangular":"var r = base.random.triangular( 2.0, 5.0, 3.33 );\n","base.random.triangular.factory":"var rand = base.random.triangular.factory();\nvar r = rand( 0.0, 1.0, 0.5 );\nr = rand( -2.0, 2.0, 1.0 );\nrand = base.random.triangular.factory( 0.0, 1.0, 0.5 );\nr = rand();\nr = rand();\n","base.random.triangular.NAME":"var str = base.random.triangular.NAME\n","base.random.triangular.PRNG":"var prng = base.random.triangular.PRNG;\n","base.random.triangular.seed":"var seed = base.random.triangular.seed;\n","base.random.triangular.seedLength":"var len = base.random.triangular.seedLength;\n","base.random.triangular.state":"var r = base.random.triangular( 0.0, 1.0, 0.5 )\nr = base.random.triangular( 0.0, 1.0, 0.5 )\nr = base.random.triangular( 0.0, 1.0, 0.5 )\nvar state = base.random.triangular.state\nr = base.random.triangular( 0.0, 1.0, 0.5 )\nr = base.random.triangular( 0.0, 1.0, 0.5 )\nbase.random.triangular.state = state;\nr = base.random.triangular( 0.0, 1.0, 0.5 )\nr = base.random.triangular( 0.0, 1.0, 0.5 )\n","base.random.triangular.stateLength":"var len = base.random.triangular.stateLength;\n","base.random.triangular.byteLength":"var sz = base.random.triangular.byteLength;\n","base.random.triangular.toJSON":"var o = base.random.triangular.toJSON()\n","base.random.uniform":"var r = base.random.uniform( 2.0, 5.0 );\n","base.random.uniform.factory":"var rand = base.random.uniform.factory();\nvar r = rand( 0.0, 1.0 );\nr = rand( -2.0, 2.0 );\nrand = base.random.uniform.factory( 0.0, 1.0 );\nr = rand();\nr = rand();\n","base.random.uniform.NAME":"var str = base.random.uniform.NAME\n","base.random.uniform.PRNG":"var prng = base.random.uniform.PRNG;\n","base.random.uniform.seed":"var seed = base.random.uniform.seed;\n","base.random.uniform.seedLength":"var len = base.random.uniform.seedLength;\n","base.random.uniform.state":"var r = base.random.uniform( 2.0, 5.0 )\nr = base.random.uniform( 2.0, 5.0 )\nr = base.random.uniform( 2.0, 5.0 )\nvar state = base.random.uniform.state\nr = base.random.uniform( 2.0, 5.0 )\nr = base.random.uniform( 2.0, 5.0 )\nbase.random.uniform.state = state;\nr = base.random.uniform( 2.0, 5.0 )\nr = base.random.uniform( 2.0, 5.0 )\n","base.random.uniform.stateLength":"var len = base.random.uniform.stateLength;\n","base.random.uniform.byteLength":"var sz = base.random.uniform.byteLength;\n","base.random.uniform.toJSON":"var o = base.random.uniform.toJSON()\n","base.random.weibull":"var r = base.random.weibull( 2.0, 5.0 );\n","base.random.weibull.factory":"var rand = base.random.weibull.factory();\nvar r = rand( 0.1, 1.5 );\nr = rand( 2.0, 3.14 );\nrand = base.random.weibull.factory( 0.1, 1.5 );\nr = rand();\nr = rand();\n","base.random.weibull.NAME":"var str = base.random.weibull.NAME\n","base.random.weibull.PRNG":"var prng = base.random.weibull.PRNG;\n","base.random.weibull.seed":"var seed = base.random.weibull.seed;\n","base.random.weibull.seedLength":"var len = base.random.weibull.seedLength;\n","base.random.weibull.state":"var r = base.random.weibull( 2.0, 5.0 )\nr = base.random.weibull( 2.0, 5.0 )\nr = base.random.weibull( 2.0, 5.0 )\nvar state = base.random.weibull.state\nr = base.random.weibull( 2.0, 5.0 )\nr = base.random.weibull( 2.0, 5.0 )\nbase.random.weibull.state = state;\nr = base.random.weibull( 2.0, 5.0 )\nr = base.random.weibull( 2.0, 5.0 )\n","base.random.weibull.stateLength":"var len = base.random.weibull.stateLength;\n","base.random.weibull.byteLength":"var sz = base.random.weibull.byteLength;\n","base.random.weibull.toJSON":"var o = base.random.weibull.toJSON()\n","base.rcbrt":"var y = base.rcbrt( 8.0 )\ny = base.rcbrt( 1000.0 )\ny = base.rcbrt( 0.0 )\ny = base.rcbrt( PINF )\ny = base.rcbrt( -8.0 )\ny = base.rcbrt( NaN )\n","base.rcbrtf":"var y = base.rcbrtf( 8.0 )\ny = base.rcbrtf( 1000.0 )\ny = base.rcbrtf( 0.0 )\ny = base.rcbrtf( PINF )\ny = base.rcbrtf( -8.0 )\ny = base.rcbrtf( NaN )\n","base.reldiff":"var d = base.reldiff( 2.0, 5.0 )\nd = base.reldiff( -1.0, 3.14 )\nd = base.reldiff( -2.0, 5.0, 'max-abs' )\nd = base.reldiff( -2.0, 5.0, 'max' )\nd = base.reldiff( -2.0, 5.0, 'min-abs' )\nd = base.reldiff( -2.0, 5.0, 'min' )\nd = base.reldiff( -2.0, 5.0, 'mean-abs' )\nd = base.reldiff( -2.0, 5.0, 'mean' )\nd = base.reldiff( -2.0, 5.0, 'x' )\nd = base.reldiff( 5.0, -2.0, 'x' )\nd = base.reldiff( -2.0, 5.0, 'y' )\nd = base.reldiff( 5.0, -2.0, 'y' )\nfunction scale( x, y ) {\n var s;\n\n x = base.abs( x );\n y = base.abs( y );\n\n // Maximum absolute value:\n s = (x < y ) ? y : x;\n\n // Scale in units of epsilon:\n return s * EPS;\n };\nd = base.reldiff( 12.15, 12.149999999999999, scale )\n","base.removeFirst":"var out = base.removeFirst( 'beep', 1 )\nout = base.removeFirst( 'Boop', 1 )\nout = base.removeFirst( 'foo bar', 5 )\n","base.removeFirstCodePoint":"var out = base.removeFirstCodePoint( 'beep', 1 )\nout = base.removeFirstCodePoint( 'Boop', 1 )\nout = base.removeFirstCodePoint( 'foo bar', 5 )\n","base.removeFirstGraphemeCluster":"var out = base.removeFirstGraphemeCluster( 'beep', 1 )\nout = base.removeFirstGraphemeCluster( 'Boop', 1 )\nout = base.removeFirstGraphemeCluster( 'foo bar', 5 )\n","base.removeLast":"var out = base.removeLast( 'beep', 1 )\nout = base.removeLast( 'Boop', 1 )\nout = base.removeLast( 'foo bar', 5 )\n","base.removeLastCodePoint":"var out = base.removeLastCodePoint( 'beep', 1 )\nout = base.removeLastCodePoint( 'Boop', 1 )\nout = base.removeLastCodePoint( 'foo bar', 5 )\n","base.removeLastGraphemeCluster":"var out = base.removeLastGraphemeCluster( 'beep', 1 )\nout = base.removeLastGraphemeCluster( 'Boop', 1 )\nout = base.removeLastGraphemeCluster( 'foo bar', 5 )\n","base.rempio2":"var y = [ 0.0, 0.0 ];\nvar n = base.rempio2( 128.0, y )\nvar y1 = y[ 0 ]\nvar y2 = y[ 1 ]\n","base.repeat":"var out = base.repeat( 'a', 5 )\nout = base.repeat( '', 100 )\nout = base.repeat( 'beep', 0 )\n","base.replace":"function replacer( match, p1 ) { return '/'+p1+'/'; };\nvar str = 'Oranges and lemons';\nvar out = base.replace( str, /([^\\s]+)/gi, replacer )\nout = base.replace( 'beep', /e/, 'o' )\n","base.replaceAfter":"var out = base.replaceAfter( 'beep boop', ' ', 'foo', 0 )\nout = base.replaceAfter( 'beep boop', 'o', 'foo', 0 )\nout = base.replaceAfter( 'Hello World!', 'o', 'foo', 5 )\nout = base.replaceAfter( 'beep boop beep baz', 'beep', 'foo', 5 )\n","base.replaceAfterLast":"var str = 'beep boop';\nvar out = base.replaceAfterLast( str, ' ', 'foo', str.length )\nout = base.replaceAfterLast( str, 'o', 'foo', str.length )\nout = base.replaceAfterLast( 'Hello World!', 'o', 'foo', 5 )\n","base.replaceBefore":"var out = base.replaceBefore( 'beep boop', ' ', 'foo', 0 )\nout = base.replaceBefore( 'beep boop', 'o', 'foo', 0 )\n","base.replaceBeforeLast":"var str = 'beep boop';\nvar out = base.replaceBeforeLast( str, ' ', 'foo', str.length )\nout = base.replaceBeforeLast( str, 'o', 'foo', str.length )\nout = base.replaceBeforeLast( 'Hello World!', 'o', 'foo', 5 )\n","base.reverse":"var out = base.reverse( 'beep' )\nout = base.reverse( 'Boop' )\nout = base.reverse( 'foo bar' )\n","base.reverseCodePoints":"var out = base.reverseCodePoints( 'beep' )\nout = base.reverseCodePoints( 'Boop' )\nout = base.reverseCodePoints( 'foo bar' )\n","base.reverseGraphemeClusters":"var out = base.reverseGraphemeClusters( 'beep' )\nout = base.reverseGraphemeClusters( 'Boop' )\nout = base.reverseGraphemeClusters( 'foo bar' )\n","base.rightPad":"var out = base.rightPad( 'a', 5, ' ' )\nout = base.rightPad( 'beep', 10, 'b' )\nout = base.rightPad( 'boop', 12, 'beep' )\n","base.rightTrim":"var out = base.rightTrim( ' \\t\\t\\n  Beep \\r\\n\\t  ' )\n","base.risingFactorial":"var v = base.risingFactorial( 0.9, 5 )\nv = base.risingFactorial( -9.0, 3 )\nv = base.risingFactorial( 0.0, 2 )\nv = base.risingFactorial( 3.0, -2 )\n","base.rotl32":"var x = 2147483649;\nvar bStr = base.toBinaryStringUint32( x )\nvar y = base.rotl32( x, 10 )\nbstr = base.toBinaryStringUint32( y )\n","base.rotr32":"var x = 1;\nvar bStr = base.toBinaryStringUint32( x )\nvar y = base.rotr32( x, 10 )\nbstr = base.toBinaryStringUint32( y )\n","base.round":"var y = base.round( 3.14 )\ny = base.round( -4.2 )\ny = base.round( -4.6 )\ny = base.round( 9.5 )\ny = base.round( -0.0 )\n","base.round2":"var y = base.round2( 3.14 )\ny = base.round2( -4.2 )\ny = base.round2( -4.6 )\ny = base.round2( 9.5 )\ny = base.round2( 13.0 )\ny = base.round2( -13.0 )\ny = base.round2( -0.0 )\n","base.round10":"var y = base.round10( 3.14 )\ny = base.round10( -4.2 )\ny = base.round10( -4.6 )\ny = base.round10( 9.5 )\ny = base.round10( 13.0 )\ny = base.round10( -13.0 )\ny = base.round10( -0.0 )\n","base.roundb":"var y = base.roundb( 3.14159, -2, 10 )\ny = base.roundb( 3.14159, 0, 2 )\ny = base.roundb( 5.0, 1, 2 )\n","base.roundn":"var y = base.roundn( 3.14159, -2 )\ny = base.roundn( 3.14159, 0 )\ny = base.roundn( 12368.0, 3 )\n","base.roundsd":"var y = base.roundsd( 3.14159, 3 )\ny = base.roundsd( 3.14159, 1 )\ny = base.roundsd( 12368.0, 2 )\ny = base.roundsd( 0.0313, 2, 2 )\n","base.rsqrt":"var y = base.rsqrt( 4.0 )\ny = base.rsqrt( 100.0 )\ny = base.rsqrt( 0.0 )\ny = base.rsqrt( Infinity )\ny = base.rsqrt( -4.0 )\ny = base.rsqrt( NaN )\n","base.rsqrtf":"var y = base.rsqrtf( 4.0 )\ny = base.rsqrtf( 0.0 )\ny = base.rsqrtf( Infinity )\ny = base.rsqrtf( -4.0 )\ny = base.rsqrtf( NaN )\n","base.sargs2multislice":"var s = new base.sargs2multislice( 'null,null,null' );\ns.data\ns = new base.sargs2multislice( '10,Slice(0,10,1),null' );\ns.data\n","base.scalar2ndarray":"var x = base.scalar2ndarray( 1.0, 'float64', 'row-major' )\nvar sh = x.shape\nvar dt = x.dtype\nvar v = x.get()\n","base.secd":"var y = base.secd( 1.0 )\ny = base.secd( PI )\ny = base.secd( -PI )\ny = base.secd( NaN )\n","base.seq2multislice":"var s = new base.seq2multislice( '1:10', [ 10 ], false );\ns.data\ns = new base.seq2multislice( '4,2:5:2,:', [ 10, 10, 10 ], false );\ns.data\n","base.seq2slice":"var s = new base.seq2slice( '1:10', 10, false );\ns.start\ns.stop\ns.step\ns = new base.seq2slice( '2:5:2', 10, false );\ns.start\ns.stop\ns.step\n","base.setHighWord":"var high = 1072693248 >>> 0;\nvar y = base.setHighWord( PINF, high )\n","base.setLowWord":"var low = 5 >>> 0;\nvar x = 3.14e201;\nvar y = base.setLowWord( x, low )\nvar low = 12345678;\nvar y = base.setLowWord( PINF, low )\ny = base.setLowWord( NINF, low )\ny = base.setLowWord( NaN, low )\n","base.sici":"var y = base.sici( 3.0 )\ny = base.sici( 0.0 )\ny = base.sici( -9.0 )\ny = base.sici( NaN )\n","base.sici.assign":"var out = new Float64Array( 2 );\nvar y = base.sici.assign( 3.0, out, 1, 0 )\nvar bool = ( y === out )\n","base.signbit":"var bool = base.signbit( 4.0 )\nbool = base.signbit( -9.14e-34 )\nbool = base.signbit( 0.0 )\nbool = base.signbit( -0.0 )\n","base.signbitf":"var bool = base.signbitf( base.float64ToFloat32( 4.0 ) )\nbool = base.signbitf( base.float64ToFloat32( -9.14e-34 ) )\nbool = base.signbitf( 0.0 )\nbool = base.signbitf( -0.0 )\n","base.significandf":"var s = base.significandf( base.float64ToFloat32( 3.14e34 ) )\ns = base.significandf( base.float64ToFloat32( 3.14e-34 ) )\ns = base.significandf( base.float64ToFloat32( -3.14 ) )\ns = base.significandf( 0.0 )\ns = base.significandf( NaN )\n","base.signum":"var sign = base.signum( -5.0 )\nsign = base.signum( 5.0 )\nsign = base.signum( -0.0 )\nsign = base.signum( 0.0 )\nsign = base.signum( NaN )\n","base.signumf":"var sign = base.signumf( -5.0 )\nsign = base.signumf( 5.0 )\nsign = base.signumf( -0.0 )\nsign = base.signumf( 0.0 )\nsign = base.signumf( NaN )\n","base.sin":"var y = base.sin( 0.0 )\ny = base.sin( PI/2.0 )\ny = base.sin( -PI/6.0 )\ny = base.sin( NaN )\n","base.sinc":"var y = base.sinc( 0.5 )\ny = base.sinc( -1.2 )\ny = base.sinc( 0.0 )\ny = base.sinc( NaN )\n","base.sincos":"var y = base.sincos( 0.0 )\ny = base.sincos( PI/2.0 )\ny = base.sincos( -PI/6.0 )\ny = base.sincos( NaN )\nvar out = new Float64Array( 2 );\nvar v = base.sincos.assign( 0.0, out, 1, 0 )\nvar bool = ( v === out )\n","base.sincospi":"var y = base.sincospi( 0.0 )\ny = base.sincospi( 0.5 )\ny = base.sincospi( 0.1 )\ny = base.sincospi( NaN )\n","base.sincospi.assign":"var out = new Float64Array( 2 );\nvar v = base.sincospi.assign( 0.0, out, 1, 0 )\nvar bool = ( v === out )\n","base.sinh":"var y = base.sinh( 0.0 )\ny = base.sinh( 2.0 )\ny = base.sinh( -2.0 )\ny = base.sinh( NaN )\n","base.sinpi":"var y = base.sinpi( 0.0 )\ny = base.sinpi( 0.5 )\ny = base.sinpi( 0.9 )\ny = base.sinpi( NaN )\n","base.slice2seq":"var out = base.slice2seq( new Slice( 1, 10, 1 ) )\nout = base.slice2seq( new Slice( null, 10 ) )\n","base.sliceLength":"var s = new Slice( 1, 10, 1 );\nbase.sliceLength( s )\n","base.sliceNonReducedDimensions":"var s = new MultiSlice( 1, 3, null );\nvar out = base.sliceNonReducedDimensions( s )\n","base.sliceReducedDimensions":"var s = new MultiSlice( 1, 3, null );\nvar out = base.sliceReducedDimensions( s )\n","base.sliceShape":"var s = new Slice( 1, 10, 1 );\nvar ms = new MultiSlice( s, s );\nbase.sliceShape( ms )\n","base.snakecase":"var out = base.snakecase( 'Hello World!' )\nout = base.snakecase( 'I am a tiny little teapot' )\n","base.spence":"var y = base.spence( 3.0 )\ny = base.spence( 0.0 )\ny = base.spence( -9.0 )\ny = base.spence( NaN )\n","base.sqrt":"var y = base.sqrt( 4.0 )\ny = base.sqrt( 9.0 )\ny = base.sqrt( 0.0 )\ny = base.sqrt( -4.0 )\ny = base.sqrt( NaN )\n","base.sqrt1pm1":"var y = base.sqrt1pm1( 3.0 )\ny = base.sqrt1pm1( 0.5 )\ny = base.sqrt1pm1( 0.02 )\ny = base.sqrt1pm1( -0.5 )\ny = base.sqrt1pm1( -1.1 )\ny = base.sqrt1pm1( NaN )\n","base.sqrtf":"var y = base.sqrtf( 4.0 )\ny = base.sqrtf( 9.0 )\ny = base.sqrtf( 0.0 )\ny = base.sqrtf( -4.0 )\ny = base.sqrtf( NaN )\n","base.sqrtpi":"var y = base.sqrtpi( 4.0 )\ny = base.sqrtpi( 10.0 )\ny = base.sqrtpi( 0.0 )\ny = base.sqrtpi( -4.0 )\ny = base.sqrtpi( NaN )\n","base.startcase":"var out = base.startcase( 'beep boop' )\n","base.startsWith":"var bool = base.startsWith( 'Beep', 'Be', 0 )\nbool = base.startsWith( 'Beep', 'ep', 0 )\nbool = base.startsWith( 'Beep', 'ee', 1 )\nbool = base.startsWith( 'Beep', 'ee', -3 )\nbool = base.startsWith( 'Beep', '', 0 )\n","base.stickycase":"var out = base.stickycase( 'Hello World!' )\nout = base.stickycase( 'I am a tiny little teapot' )\n","base.strided.binary":"var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar shape = [ x.length ];\nvar strides = [ 1, 1, 1 ];\nfunction f( x, y ) { return x + y; };\nbase.strided.binary( [ x, y, z ], shape, strides, f );\nz\n","base.strided.binary.ndarray":"var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar shape = [ x.length ];\nvar strides = [ 1, 1, 1 ];\nvar offsets = [ 0, 0, 0 ];\nfunction f( x, y ) { return x + y; };\nbase.strided.binary.ndarray( [ x, y, z ], shape, strides, offsets, f );\nz\n","base.strided.binaryDtypeSignatures":"var dt = strided.dataTypes();\nvar out = base.strided.binaryDtypeSignatures( dt, dt, dt )\n","base.strided.binarySignatureCallbacks":"var dt = strided.dataTypes();\nvar sigs = base.strided.binaryDtypeSignatures( dt, dt, dt );\nvar t = {\n 'default': base.add,\n 'complex64': base.caddf,\n 'complex128': base.cadd\n };\nvar out = base.strided.binarySignatureCallbacks( t, sigs )\n","base.strided.ccopy":"var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y = new Complex64Array( [ 6.0, 7.0, 8.0, 9.0 ] );\nbase.strided.ccopy( x.length, x, 1, y, 1 );\nvar z = y.get( 0 );\nvar re = realf( z )\nvar im = imagf( z )\nx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\ny = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.ccopy( 2, x, -2, y, 1 );\nz = y.get( 0 );\nre = realf( z )\nim = imagf( z )\nvar x0 = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\nvar y0 = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Complex64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Complex64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.ccopy( 2, x1, -2, y1, 1 );\nz = y0.get( 2 );\nre = realf( z )\nim = imagf( z )\n","base.strided.ccopy.ndarray":"var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y = new Complex64Array( [ 6.0, 7.0, 8.0, 9.0 ] );\nbase.strided.ccopy.ndarray( x.length, x, 1, 0, y, 1, 0 );\nvar z = y.get( 0 );\nvar re = realf( z )\nvar im = imagf( z )\nx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\ny = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.ccopy.ndarray( 2, x, 2, 1, y, -1, y.length-1 );\nz = y.get( y.length-1 );\nre = realf( z )\nim = imagf( z )\n","base.strided.cmap":"var xbuf = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ];\nvar x = new Complex64Array( xbuf );\nvar y = new Complex64Array( x.length );\nbase.strided.cmap( x.length, x, 1, y, 1, base.cidentityf );\nvar v = y.get( 0 )\nvar re = real( v )\nvar im = imag( v )\ny = new Complex64Array( x.length );\nbase.strided.cmap( 2, x, 2, y, -1, base.cidentityf );\nv = y.get( 0 )\nre = real( v )\nim = imag( v )\nvar x0 = new Complex64Array( xbuf );\nvar y0 = new Complex64Array( x0.length );\nvar x1 = new Complex64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Complex64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.cmap( 2, x1, -2, y1, 1, base.cidentityf );\nv = y1.get( 0 )\nre = real( v )\nim = imag( v )\n","base.strided.cmap.ndarray":"var xbuf = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ];\nvar x = new Complex64Array( xbuf );\nvar y = new Complex64Array( x.length );\nbase.strided.cmap.ndarray( x.length, x, 1, 0, y, 1, 0, base.cidentityf );\nvar v = y.get( 0 )\nvar re = real( v )\nvar im = imag( v )\nx = new Complex64Array( xbuf );\ny = new Complex64Array( x.length );\nbase.strided.cmap.ndarray( 2, x, 2, 1, y, -1, y.length-1, base.cidentityf );\nv = y.get( y.length-1 )\nre = real( v )\nim = imag( v )\n","base.strided.cswap":"var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y = new Complex64Array( [ 6.0, 7.0, 8.0, 9.0 ] );\nbase.strided.cswap( x.length, x, 1, y, 1 );\nvar z = y.get( 0 );\nvar re = realf( z )\nvar im = imagf( z )\nz = x.get( 0 );\nre = realf( z )\nim = imagf( z )\nx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\ny = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.cswap( 2, x, -2, y, 1 );\nz = y.get( 0 );\nre = realf( z )\nim = imagf( z )\nz = x.get( 0 );\nre = realf( z )\nim = imagf( z )\nvar x0 = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\nvar y0 = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Complex64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Complex64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.cswap( 2, x1, -2, y1, 1 );\nz = y0.get( 2 );\nre = realf( z )\nim = imagf( z )\nz = x0.get( 1 );\nre = realf( z )\nim = imagf( z )\n","base.strided.cswap.ndarray":"var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y = new Complex64Array( [ 6.0, 7.0, 8.0, 9.0 ] );\nbase.strided.cswap.ndarray( x.length, x, 1, 0, y, 1, 0 );\nvar z = y.get( 0 );\nvar re = realf( z )\nvar im = imagf( z )\nz = x.get( 0 );\nre = realf( z )\nim = imagf( z )\nx = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );\ny = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.cswap.ndarray( 2, x, 2, 1, y, -1, y.length-1 );\nz = y.get( y.length-1 );\nre = realf( z )\nim = imagf( z )\nz = x.get( 1 );\nre = realf( z )\nim = imagf( z )\n","base.strided.cumax":"var x = [ 1.0, -2.0, 2.0 ];\nvar y = [ 0.0, 0.0, 0.0 ];\nbase.strided.cumax( x.length, x, 1, y, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.cumax( N, x, 2, y, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar y0 = new Float64Array( x0.length );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nN = base.floor( x0.length / 2 );\nbase.strided.cumax( N, x1, 2, y1, 1 )\ny0\n","base.strided.cumax.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nvar y = [ 0.0, 0.0, 0.0 ];\nbase.strided.cumax.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.cumax.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.cumaxabs":"var x = [ 1.0, -2.0, 2.0 ];\nvar y = [ 0.0, 0.0, 0.0 ];\nbase.strided.cumaxabs( x.length, x, 1, y, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.cumaxabs( N, x, 2, y, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar y0 = new Float64Array( x0.length );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nN = base.floor( x0.length / 2 );\nbase.strided.cumaxabs( N, x1, 2, y1, 1 )\ny0\n","base.strided.cumaxabs.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nvar y = [ 0.0, 0.0, 0.0 ];\nbase.strided.cumaxabs.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.cumaxabs.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.cumin":"var x = [ 1.0, -2.0, 2.0 ];\nvar y = [ 0.0, 0.0, 0.0 ];\nbase.strided.cumin( x.length, x, 1, y, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.cumin( N, x, 2, y, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar y0 = new Float64Array( x0.length );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nN = base.floor( x0.length / 2 );\nbase.strided.cumin( N, x1, 2, y1, 1 )\ny0\n","base.strided.cumin.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nvar y = [ 0.0, 0.0, 0.0 ];\nbase.strided.cumin.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.cumin.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.cuminabs":"var x = [ 1.0, -2.0, 2.0 ];\nvar y = [ 0.0, 0.0, 0.0 ];\nbase.strided.cuminabs( x.length, x, 1, y, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.cuminabs( N, x, 2, y, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar y0 = new Float64Array( x0.length );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nN = base.floor( x0.length / 2 );\nbase.strided.cuminabs( N, x1, 2, y1, 1 )\ny0\n","base.strided.cuminabs.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nvar y = [ 0.0, 0.0, 0.0 ];\nbase.strided.cuminabs.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.cuminabs.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.dabs":"var x = new Float64Array( [ -1.0, -2.0, -3.0, -4.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dabs( x.length, x, 1, y, 1 )\nvar N = base.floor( x.length / 2 );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dabs( N, x, 2, y, -1 )\nvar x0 = new Float64Array( [ -1.0, -2.0, -3.0, -4.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nN = base.floor( x0.length / 2 );\nbase.strided.dabs( N, x1, -2, y1, 1 )\ny0\n","base.strided.dabs.ndarray":"var x = new Float64Array( [ -1.0, -2.0, -3.0, -4.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dabs.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float64Array( [ -1.0, -2.0, -3.0, -4.0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dabs.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.dabs2":"var x = new Float64Array( [ -1.0, -2.0, -3.0, -4.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dabs2( x.length, x, 1, y, 1 )\nvar N = base.floor( x.length / 2 );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dabs2( N, x, 2, y, -1 )\nvar x0 = new Float64Array( [ -1.0, -2.0, -3.0, -4.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nN = base.floor( x0.length / 2 );\nbase.strided.dabs2( N, x1, -2, y1, 1 )\ny0\n","base.strided.dabs2.ndarray":"var x = new Float64Array( [ -1.0, -2.0, -3.0, -4.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dabs2.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float64Array( [ -1.0, -2.0, -3.0, -4.0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dabs2.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.dapx":"var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ] );\nbase.strided.dapx( x.length, 5.0, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ] );\nbase.strided.dapx( 3, 5.0, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.dapx( 3, 5.0, x1, 2 )\nx0\n","base.strided.dapx.ndarray":"var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ] );\nbase.strided.dapx.ndarray( x.length, 5.0, x, 1, 0 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nbase.strided.dapx.ndarray( 3, 5.0, x, 2, 1 )\n","base.strided.dapxsum":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dapxsum( x.length, 5.0, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nbase.strided.dapxsum( 3, 5.0, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.dapxsum( 3, 5.0, x1, 2 )\n","base.strided.dapxsum.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dapxsum.ndarray( x.length, 5.0, x, 1, 0 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.dapxsum.ndarray( 3, 5.0, x, 2, 1 )\n","base.strided.dapxsumkbn":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dapxsumkbn( x.length, 5.0, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nbase.strided.dapxsumkbn( 3, 5.0, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.dapxsumkbn( 3, 5.0, x1, 2)\n","base.strided.dapxsumkbn.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dapxsumkbn.ndarray( x.length, 5.0, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.dapxsumkbn.ndarray( 3, 5.0, x, 2, 1 )\n","base.strided.dapxsumkbn2":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dapxsumkbn2( x.length, 5.0, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nbase.strided.dapxsumkbn2( 3, 5.0, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.dapxsumkbn2( 3, 5.0, x1, 2 )\n","base.strided.dapxsumkbn2.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dapxsumkbn2.ndarray( x.length, 5.0, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.dapxsumkbn2.ndarray( 3, 5.0, x, 2, 1 )\n","base.strided.dapxsumors":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dapxsumors( x.length, 5.0, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nbase.strided.dapxsumors( 3, 5.0, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.dapxsumors( 3, 5.0, x1, 2 )\n","base.strided.dapxsumors.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dapxsumors.ndarray( x.length, 5.0, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.dapxsumors.ndarray( 3, 5.0, x, 2, 1 )\n","base.strided.dapxsumpw":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dapxsumpw( x.length, 5.0, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nbase.strided.dapxsumpw( 3, 5.0, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.dapxsumpw( 3, 5.0, x1, 2 )\n","base.strided.dapxsumpw.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dapxsumpw.ndarray( x.length, 5.0, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.dapxsumpw.ndarray( 3, 5.0, x, 2, 1 )\n","base.strided.dasum":"var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0 ] );\nvar s = base.strided.dasum( x.length, x, 1 )\ns = base.strided.dasum( 3, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\ns = base.strided.dasum( 3, x1, 2 )\n","base.strided.dasum.ndarray":"var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0 ] );\nvar s = base.strided.dasum.ndarray( x.length, x, 1, 0 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\ns = base.strided.dasum.ndarray( 3, x, -1, x.length-1 )\n","base.strided.dasumpw":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dasumpw( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dasumpw( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dasumpw( N, x1, stride )\n","base.strided.dasumpw.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dasumpw.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dasumpw.ndarray( N, x, 2, 1 )\n","base.strided.daxpy":"var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\nvar y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\nvar alpha = 5.0;\nbase.strided.daxpy( x.length, alpha, x, 1, y, 1 )\nx = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\nbase.strided.daxpy( 3, alpha, x, 2, y, -1 )\nvar x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\nvar y0 = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nbase.strided.daxpy( 3, 5.0, x1, -2, y1, 1 )\ny0\n","base.strided.daxpy.ndarray":"var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\nvar y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\nvar alpha = 5.0;\nbase.strided.daxpy.ndarray( x.length, alpha, x, 1, 0, y, 1, 0 )\nx = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\nbase.strided.daxpy.ndarray( 3, alpha, x, 2, 1, y, -1, y.length-1 )\n","base.strided.dcbrt":"var x = new Float64Array( [ 0.0, 1.0, 8.0, 27.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dcbrt( x.length, x, 1, y, 1 )\nvar N = base.floor( x.length / 2 );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dcbrt( N, x, 2, y, -1 )\nvar x0 = new Float64Array( [ 0.0, 1.0, 8.0, 27.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nN = base.floor( x0.length / 2 );\nbase.strided.dcbrt( N, x1, -2, y1, 1 )\ny0\n","base.strided.dcbrt.ndarray":"var x = new Float64Array( [ 0.0, 1.0, 8.0, 27.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dcbrt.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float64Array( [ 0.0, 1.0, 8.0, 27.0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dcbrt.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.dceil":"var x = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dceil( x.length, x, 1, y, 1 )\nvar N = base.floor( x.length / 2 );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dceil( N, x, 2, y, -1 )\nvar x0 = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nN = base.floor( x0.length / 2 );\nbase.strided.dceil( N, x1, -2, y1, 1 )\ny0\n","base.strided.dceil.ndarray":"var x = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dceil.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dceil.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.dcopy":"var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\nvar y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\nbase.strided.dcopy( x.length, x, 1, y, 1 )\nx = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\nbase.strided.dcopy( 3, x, -2, y, 1 )\nvar x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\nvar y0 = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nbase.strided.dcopy( 3, x1, -2, y1, 1 )\ny0\n","base.strided.dcopy.ndarray":"var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\nvar y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\nbase.strided.dcopy.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\nbase.strided.dcopy.ndarray( 3, x, 2, 1, y, -1, y.length-1 )\n","base.strided.dcumax":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float64Array( x.length );\nbase.strided.dcumax( x.length, x, 1, y, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\ny = new Float64Array( x.length );\nvar N = base.floor( x.length / 2 );\nbase.strided.dcumax( N, x, 2, y, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar y0 = new Float64Array( x0.length );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nN = base.floor( x0.length / 2 );\nbase.strided.dcumax( N, x1, 2, y1, 1 )\ny0\n","base.strided.dcumax.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float64Array( x.length );\nbase.strided.dcumax.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\ny = new Float64Array( x.length );\nvar N = base.floor( x.length / 2 );\nbase.strided.dcumax.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.dcumaxabs":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float64Array( x.length );\nbase.strided.dcumaxabs( x.length, x, 1, y, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\ny = new Float64Array( x.length );\nvar N = base.floor( x.length / 2 );\nbase.strided.dcumaxabs( N, x, 2, y, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar y0 = new Float64Array( x0.length );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nN = base.floor( x0.length / 2 );\nbase.strided.dcumaxabs( N, x1, 2, y1, 1 )\ny0\n","base.strided.dcumaxabs.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float64Array( x.length );\nbase.strided.dcumaxabs.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\ny = new Float64Array( x.length );\nvar N = base.floor( x.length / 2 );\nbase.strided.dcumaxabs.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.dcumin":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float64Array( x.length );\nbase.strided.dcumin( x.length, x, 1, y, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\ny = new Float64Array( x.length );\nvar N = base.floor( x.length / 2 );\nbase.strided.dcumin( N, x, 2, y, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar y0 = new Float64Array( x0.length );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nN = base.floor( x0.length / 2 );\nbase.strided.dcumin( N, x1, 2, y1, 1 )\ny0\n","base.strided.dcumin.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float64Array( x.length );\nbase.strided.dcumin.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\ny = new Float64Array( x.length );\nvar N = base.floor( x.length / 2 );\nbase.strided.dcumin.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.dcuminabs":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float64Array( x.length );\nbase.strided.dcuminabs( x.length, x, 1, y, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\ny = new Float64Array( x.length );\nvar N = base.floor( x.length / 2 );\nbase.strided.dcuminabs( N, x, 2, y, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar y0 = new Float64Array( x0.length );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nN = base.floor( x0.length / 2 );\nbase.strided.dcuminabs( N, x1, 2, y1, 1 )\ny0\n","base.strided.dcuminabs.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float64Array( x.length );\nbase.strided.dcuminabs.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\ny = new Float64Array( x.length );\nvar N = base.floor( x.length / 2 );\nbase.strided.dcuminabs.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.dcusum":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float64Array( x.length );\nbase.strided.dcusum( x.length, 0.0, x, 1, y, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\ny = new Float64Array( x.length );\nbase.strided.dcusum( 3, 0.0, x, 2, y, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar y0 = new Float64Array( x0.length );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nbase.strided.dcusum( 3, 0.0, x1, 2, y1, 1 )\ny0\n","base.strided.dcusum.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float64Array( x.length );\nbase.strided.dcusum.ndarray( x.length, 0.0, x, 1, 0, y, 1, 0 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\ny = new Float64Array( x.length );\nbase.strided.dcusum.ndarray( 3, 0.0, x, 2, 1, y, -1, y.length-1 )\n","base.strided.dcusumkbn":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float64Array( x.length );\nbase.strided.dcusumkbn( x.length, 0.0, x, 1, y, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\ny = new Float64Array( x.length );\nbase.strided.dcusumkbn( 3, 0.0, x, 2, y, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar y0 = new Float64Array( x0.length );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nbase.strided.dcusumkbn( 3, 0.0, x1, 2, y1, 1 )\ny0\n","base.strided.dcusumkbn.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float64Array( x.length );\nbase.strided.dcusumkbn.ndarray( x.length, 0.0, x, 1, 0, y, 1, 0 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\ny = new Float64Array( x.length );\nbase.strided.dcusumkbn.ndarray( 3, 0.0, x, 2, 1, y, -1, y.length-1 )\n","base.strided.dcusumkbn2":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float64Array( x.length );\nbase.strided.dcusumkbn2( x.length, 0.0, x, 1, y, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\ny = new Float64Array( x.length );\nbase.strided.dcusumkbn2( 3, 0.0, x, 2, y, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar y0 = new Float64Array( x0.length );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nbase.strided.dcusumkbn2( 3, 0.0, x1, 2, y1, 1 )\ny0\n","base.strided.dcusumkbn2.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float64Array( x.length );\nbase.strided.dcusumkbn2.ndarray( x.length, 0.0, x, 1, 0, y, 1, 0 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\ny = new Float64Array( x.length );\nbase.strided.dcusumkbn2.ndarray( 3, 0.0, x, 2, 1, y, -1, y.length-1 )\n","base.strided.dcusumors":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float64Array( x.length );\nbase.strided.dcusumors( x.length, 0.0, x, 1, y, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\ny = new Float64Array( x.length );\nbase.strided.dcusumors( 3, 0.0, x, 2, y, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar y0 = new Float64Array( x0.length );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nbase.strided.dcusumors( 3, 0.0, x1, 2, y1, 1 )\ny0\n","base.strided.dcusumors.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float64Array( x.length );\nbase.strided.dcusumors.ndarray( x.length, 0.0, x, 1, 0, y, 1, 0 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\ny = new Float64Array( x.length );\nbase.strided.dcusumors.ndarray( 3, 0.0, x, 2, 1, y, -1, y.length-1 )\n","base.strided.dcusumpw":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float64Array( x.length );\nbase.strided.dcusumpw( x.length, 0.0, x, 1, y, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\ny = new Float64Array( x.length );\nbase.strided.dcusumpw( 3, 0.0, x, 2, y, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar y0 = new Float64Array( x0.length );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nbase.strided.dcusumpw( 3, 0.0, x1, 2, y1, 1 )\ny0\n","base.strided.dcusumpw.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float64Array( x.length );\nbase.strided.dcusumpw.ndarray( x.length, 0.0, x, 1, 0, y, 1, 0 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\ny = new Float64Array( x.length );\nbase.strided.dcusumpw.ndarray( 3, 0.0, x, 2, 1, y, -1, y.length-1 )\n","base.strided.ddeg2rad":"var x = new Float64Array( [ 0.0, 30.0, 45.0, 60.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.ddeg2rad( x.length, x, 1, y, 1 )\nvar N = base.floor( x.length / 2 );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.ddeg2rad( N, x, 2, y, -1 )\nvar x0 = new Float64Array( [ 0.0, 30.0, 45.0, 60.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nN = base.floor( x0.length / 2 );\nbase.strided.ddeg2rad( N, x1, -2, y1, 1 )\ny0\n","base.strided.ddeg2rad.ndarray":"var x = new Float64Array( [ 0.0, 30.0, 45.0, 60.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.ddeg2rad.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float64Array( [ 0.0, 30.0, 45.0, 60.0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.ddeg2rad.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.ddot":"var x = new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\nvar y = new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\nvar out = base.strided.ddot( x.length, x, 1, y, 1 )\nx = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\nout = base.strided.ddot( 3, x, 2, y, -1 )\nx = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\nvar x1 = new Float64Array( x.buffer, x.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y.buffer, y.BYTES_PER_ELEMENT*3 );\nout = base.strided.ddot( 3, x1, -2, y1, 1 )\n","base.strided.ddot.ndarray":"var x = new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\nvar y = new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\nvar out = base.strided.ddot.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\nout = base.strided.ddot.ndarray( 3, x, 2, 0, y, 2, 0 )\nx = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\nout = base.strided.ddot.ndarray( 3, x, -2, x.length-1, y, 1, 3 )\n","base.strided.dfill":"var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ] );\nbase.strided.dfill( x.length, 5.0, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ] );\nbase.strided.dfill( 3, 5.0, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.dfill( 3, 5.0, x1, 2 )\nx0\n","base.strided.dfill.ndarray":"var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ] );\nbase.strided.dfill.ndarray( x.length, 5.0, x, 1, 0 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nbase.strided.dfill.ndarray( 3, 5.0, x, 2, 1 )\n","base.strided.dfloor":"var x = new Float64Array( [ -1.1, 1.1, 3.8, 4.5 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dfloor( x.length, x, 1, y, 1 )\nvar N = base.floor( x.length / 2 );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dfloor( N, x, 2, y, -1 )\nvar x0 = new Float64Array( [ -1.1, 1.1, 3.8, 4.5 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nN = base.floor( x0.length / 2 );\nbase.strided.dfloor( N, x1, -2, y1, 1 )\ny0\n","base.strided.dfloor.ndarray":"var x = new Float64Array( [ -1.1, 1.1, 3.8, 4.5 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dfloor.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float64Array( [ -1.1, 1.1, 3.8, 4.5 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dfloor.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.dinv":"var x = new Float64Array( [ -20.0, -1.0, 2.0, 4.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dinv( x.length, x, 1, y, 1 )\nvar N = base.floor( x.length / 2 );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dinv( N, x, 2, y, -1 )\nvar x0 = new Float64Array( [ -20.0, -1.0, 2.0, 4.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nN = base.floor( x0.length / 2 );\nbase.strided.dinv( N, x1, -2, y1, 1 )\ny0\n","base.strided.dinv.ndarray":"var x = new Float64Array( [ -20.0, -1.0, 2.0, 4.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dinv.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float64Array( [ -20.0, -1.0, 2.0, 4.0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dinv.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.dmap":"var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmap( x.length, x, 1, y, 1, base.identity )\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmap( 2, x, 2, y, -1, base.identity )\nvar x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.dmap( 2, x1, -2, y1, 1, base.identity )\ny0\n","base.strided.dmap.ndarray":"var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmap.ndarray( x.length, x, 1, 0, y, 1, 0, base.identity )\nx = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmap.ndarray( 2, x, 2, 1, y, -1, y.length-1, base.identity )\n","base.strided.dmap2":"var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmap2( x.length, x, 1, y, 1, z, 1, base.add )\nz = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmap2( 2, x, 2, y, -1, z, 1, base.add )\nvar x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nvar z1 = new Float64Array( z0.buffer, z0.BYTES_PER_ELEMENT*2 );\nbase.strided.dmap2( 2, x1, -2, y1, 1, z1, 1, base.add )\nz0\n","base.strided.dmap2.ndarray":"var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmap2.ndarray( x.length, x, 1, 0, y, 1, 0, z, 1, 0, base.add )\nx = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\ny = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nz = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmap2.ndarray( 2, x, 2, 1, y, -1, y.length-1, z, 1, 1, base.add )\n","base.strided.dmax":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dmax( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dmax( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dmax( N, x1, stride )\n","base.strided.dmax.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dmax.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dmax.ndarray( N, x, 2, 1 )\n","base.strided.dmaxabs":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dmaxabs( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dmaxabs( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dmaxabs( N, x1, stride )\n","base.strided.dmaxabs.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dmaxabs.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dmaxabs.ndarray( N, x, 2, 1 )\n","base.strided.dmaxabssorted":"var x = new Float64Array( [ -1.0, -2.0, -3.0 ] );\nbase.strided.dmaxabssorted( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dmaxabssorted( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 3.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dmaxabssorted( N, x1, stride )\n","base.strided.dmaxabssorted.ndarray":"var x = new Float64Array( [ -1.0, -2.0, -3.0 ] );\nbase.strided.dmaxabssorted.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 3.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dmaxabssorted.ndarray( N, x, 2, 1 )\n","base.strided.dmaxsorted":"var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\nbase.strided.dmaxsorted( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dmaxsorted( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 3.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dmaxsorted( N, x1, stride )\n","base.strided.dmaxsorted.ndarray":"var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\nbase.strided.dmaxsorted.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 3.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dmaxsorted.ndarray( N, x, 2, 1 )\n","base.strided.dmean":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dmean( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dmean( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dmean( N, x1, stride )\n","base.strided.dmean.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dmean.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dmean.ndarray( N, x, 2, 1 )\n","base.strided.dmeankbn":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dmeankbn( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dmeankbn( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dmeankbn( N, x1, stride )\n","base.strided.dmeankbn.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dmeankbn.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dmeankbn.ndarray( N, x, 2, 1 )\n","base.strided.dmeankbn2":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dmeankbn2( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dmeankbn2( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dmeankbn2( N, x1, stride )\n","base.strided.dmeankbn2.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dmeankbn2.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dmeankbn2.ndarray( N, x, 2, 1 )\n","base.strided.dmeanli":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dmeanli( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dmeanli( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dmeanli( N, x1, stride )\n","base.strided.dmeanli.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dmeanli.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dmeanli.ndarray( N, x, 2, 1 )\n","base.strided.dmeanlipw":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dmeanlipw( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dmeanlipw( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dmeanlipw( N, x1, stride )\n","base.strided.dmeanlipw.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dmeanlipw.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dmeanlipw.ndarray( N, x, 2, 1 )\n","base.strided.dmeanors":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dmeanors( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dmeanors( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dmeanors( N, x1, stride )\n","base.strided.dmeanors.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dmeanors.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dmeanors.ndarray( N, x, 2, 1 )\n","base.strided.dmeanpn":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dmeanpn( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dmeanpn( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dmeanpn( N, x1, stride )\n","base.strided.dmeanpn.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dmeanpn.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dmeanpn.ndarray( N, x, 2, 1 )\n","base.strided.dmeanpw":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dmeanpw( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dmeanpw( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dmeanpw( N, x1, stride )\n","base.strided.dmeanpw.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dmeanpw.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dmeanpw.ndarray( N, x, 2, 1 )\n","base.strided.dmeanstdev":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nvar out = new Float64Array( 2 );\nbase.strided.dmeanstdev( x.length, 1, x, 1, out, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nout = new Float64Array( 2 );\nvar N = base.floor( x.length / 2 );\nbase.strided.dmeanstdev( N, 1, x, 2, out, 1 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nout = new Float64Array( 2 );\nbase.strided.dmeanstdev( N, 1, x1, 2, out, 1 )\n","base.strided.dmeanstdev.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nvar out = new Float64Array( 2 );\nbase.strided.dmeanstdev.ndarray( x.length, 1, x, 1, 0, out, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 1.0 ] );\nvar N = base.floor( x.length / 2 );\nout = new Float64Array( 2 );\nbase.strided.dmeanstdev.ndarray( N, 1, x, 2, 1, out, 1, 0 )\n","base.strided.dmeanstdevpn":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nvar out = new Float64Array( 2 );\nbase.strided.dmeanstdevpn( x.length, 1, x, 1, out, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nout = new Float64Array( 2 );\nvar N = base.floor( x.length / 2 );\nbase.strided.dmeanstdevpn( N, 1, x, 2, out, 1 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nout = new Float64Array( 2 );\nbase.strided.dmeanstdevpn( N, 1, x1, 2, out, 1 )\n","base.strided.dmeanstdevpn.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nvar out = new Float64Array( 2 );\nbase.strided.dmeanstdevpn.ndarray( x.length, 1, x, 1, 0, out, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 1.0 ] );\nvar N = base.floor( x.length / 2 );\nout = new Float64Array( 2 );\nbase.strided.dmeanstdevpn.ndarray( N, 1, x, 2, 1, out, 1, 0 )\n","base.strided.dmeanvar":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nvar out = new Float64Array( 2 );\nbase.strided.dmeanvar( x.length, 1, x, 1, out, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nout = new Float64Array( 2 );\nvar N = base.floor( x.length / 2 );\nbase.strided.dmeanvar( N, 1, x, 2, out, 1 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nout = new Float64Array( 2 );\nbase.strided.dmeanvar( N, 1, x1, 2, out, 1 )\n","base.strided.dmeanvar.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nvar out = new Float64Array( 2 );\nbase.strided.dmeanvar.ndarray( x.length, 1, x, 1, 0, out, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 1.0 ] );\nvar N = base.floor( x.length / 2 );\nout = new Float64Array( 2 );\nbase.strided.dmeanvar.ndarray( N, 1, x, 2, 1, out, 1, 0 )\n","base.strided.dmeanvarpn":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nvar out = new Float64Array( 2 );\nbase.strided.dmeanvarpn( x.length, 1, x, 1, out, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nout = new Float64Array( 2 );\nvar N = base.floor( x.length / 2 );\nbase.strided.dmeanvarpn( N, 1, x, 2, out, 1 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nout = new Float64Array( 2 );\nbase.strided.dmeanvarpn( N, 1, x1, 2, out, 1 )\n","base.strided.dmeanvarpn.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nvar out = new Float64Array( 2 );\nbase.strided.dmeanvarpn.ndarray( x.length, 1, x, 1, 0, out, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 1.0 ] );\nvar N = base.floor( x.length / 2 );\nout = new Float64Array( 2 );\nbase.strided.dmeanvarpn.ndarray( N, 1, x, 2, 1, out, 1, 0 )\n","base.strided.dmeanwd":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dmeanwd( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dmeanwd( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dmeanwd( N, x1, stride )\n","base.strided.dmeanwd.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dmeanwd.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dmeanwd.ndarray( N, x, 2, 1 )\n","base.strided.dmediansorted":"var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\nbase.strided.dmediansorted( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dmediansorted( N, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 3.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.dmediansorted( N, x1, 2 )\n","base.strided.dmediansorted.ndarray":"var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\nbase.strided.dmediansorted.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 3.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dmediansorted.ndarray( N, x, 2, 1 )\n","base.strided.dmidrange":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dmidrange( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dmidrange( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dmidrange( N, x1, stride )\n","base.strided.dmidrange.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dmidrange.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dmidrange.ndarray( N, x, 2, 1 )\n","base.strided.dmin":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dmin( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dmin( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dmin( N, x1, stride )\n","base.strided.dmin.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dmin.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dmin.ndarray( N, x, 2, 1 )\n","base.strided.dminabs":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dminabs( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dminabs( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dminabs( N, x1, stride )\n","base.strided.dminabs.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dminabs.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dminabs.ndarray( N, x, 2, 1 )\n","base.strided.dminsorted":"var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\nbase.strided.dminsorted( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dminsorted( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 3.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dminsorted( N, x1, stride )\n","base.strided.dminsorted.ndarray":"var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\nbase.strided.dminsorted.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 3.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dminsorted.ndarray( N, x, 2, 1 )\n","base.strided.dmskabs":"var x = new Float64Array( [ -2.0, 1.0, -3.0, -5.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskabs( x.length, x, 1, m, 1, y, 1 )\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskabs( 2, x, 2, m, 2, y, -1 )\nvar x0 = new Float64Array( [ -2.0, 1.0, -3.0, -5.0 ] );\nvar m0 = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar m1 = new Uint8Array( m0.buffer, m0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.dmskabs( 2, x1, -2, m1, -2, y1, 1 )\ny0\n","base.strided.dmskabs.ndarray":"var x = new Float64Array( [ -2.0, 1.0, -3.0, -5.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskabs.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0 )\nx = new Float64Array( [ -2.0, 1.0, -3.0, -5.0 ] );\nm = new Uint8Array( [ 0, 0, 1, 0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskabs.ndarray( 2, x, 2, 1, m, 2, 1, y, -1, y.length-1 )\n","base.strided.dmskabs2":"var x = new Float64Array( [ -2.0, 1.0, -3.0, -5.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskabs2( x.length, x, 1, m, 1, y, 1 )\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskabs2( 2, x, 2, m, 2, y, -1 )\nvar x0 = new Float64Array( [ -2.0, 1.0, -3.0, -5.0 ] );\nvar m0 = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar m1 = new Uint8Array( m0.buffer, m0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.dmskabs2( 2, x1, -2, m1, -2, y1, 1 )\ny0\n","base.strided.dmskabs2.ndarray":"var x = new Float64Array( [ -2.0, 1.0, -3.0, -5.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskabs2.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0 )\nx = new Float64Array( [ -2.0, 1.0, -3.0, -5.0 ] );\nm = new Uint8Array( [ 0, 0, 1, 0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskabs2.ndarray( 2, x, 2, 1, m, 2, 1, y, -1, y.length-1 )\n","base.strided.dmskcbrt":"var x = new Float64Array( [ 0.0, 1.0, 8.0, 27.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskcbrt( x.length, x, 1, m, 1, y, 1 )\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskcbrt( 2, x, 2, m, 2, y, -1 )\nvar x0 = new Float64Array( [ 0.0, 1.0, 8.0, 27.0 ] );\nvar m0 = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar m1 = new Uint8Array( m0.buffer, m0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.dmskcbrt( 2, x1, -2, m1, -2, y1, 1 )\ny0\n","base.strided.dmskcbrt.ndarray":"var x = new Float64Array( [ 0.0, 1.0, 8.0, 27.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskcbrt.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0 )\nx = new Float64Array( [ 0.0, 1.0, 8.0, 27.0 ] );\nm = new Uint8Array( [ 0, 0, 1, 0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskcbrt.ndarray( 2, x, 2, 1, m, 2, 1, y, -1, y.length-1 )\n","base.strided.dmskceil":"var x = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskceil( x.length, x, 1, m, 1, y, 1 )\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskceil( 2, x, 2, m, 2, y, -1 )\nvar x0 = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar m0 = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar m1 = new Uint8Array( m0.buffer, m0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.dmskceil( 2, x1, -2, m1, -2, y1, 1 )\ny0\n","base.strided.dmskceil.ndarray":"var x = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskceil.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0 )\nx = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nm = new Uint8Array( [ 0, 0, 1, 0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskceil.ndarray( 2, x, 2, 1, m, 2, 1, y, -1, y.length-1 )\n","base.strided.dmskdeg2rad":"var x = new Float64Array( [ 0.0, 30.0, 45.0, 60.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskdeg2rad( x.length, x, 1, m, 1, y, 1 )\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskdeg2rad( 2, x, 2, m, 2, y, -1 )\nvar x0 = new Float64Array( [ 0.0, 30.0, 45.0, 60.0 ] );\nvar m0 = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar m1 = new Uint8Array( m0.buffer, m0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.dmskdeg2rad( 2, x1, -2, m1, -2, y1, 1 )\ny0\n","base.strided.dmskdeg2rad.ndarray":"var x = new Float64Array( [ 0.0, 30.0, 45.0, 60.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskdeg2rad.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0 )\nx = new Float64Array( [ 0.0, 30.0, 45.0, 60.0 ] );\nm = new Uint8Array( [ 0, 0, 1, 0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskdeg2rad.ndarray( 2, x, 2, 1, m, 2, 1, y, -1, y.length-1 )\n","base.strided.dmskfloor":"var x = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskfloor( x.length, x, 1, m, 1, y, 1 )\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskfloor( 2, x, 2, m, 2, y, -1 )\nvar x0 = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar m0 = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar m1 = new Uint8Array( m0.buffer, m0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.dmskfloor( 2, x1, -2, m1, -2, y1, 1 )\ny0\n","base.strided.dmskfloor.ndarray":"var x = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskfloor.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0 )\nx = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nm = new Uint8Array( [ 0, 0, 1, 0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskfloor.ndarray( 2, x, 2, 1, m, 2, 1, y, -1, y.length-1 )\n","base.strided.dmskinv":"var x = new Float64Array( [ -20.0, -1.0, 2.0, 4.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskinv( x.length, x, 1, m, 1, y, 1 )\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskinv( 2, x, 2, m, 2, y, -1 )\nvar x0 = new Float64Array( [ -20.0, -1.0, 2.0, 4.0 ] );\nvar m0 = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar m1 = new Uint8Array( m0.buffer, m0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.dmskinv( 2, x1, -2, m1, -2, y1, 1 )\ny0\n","base.strided.dmskinv.ndarray":"var x = new Float64Array( [ -20.0, -1.0, 2.0, 4.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskinv.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0 )\nx = new Float64Array( [ -20.0, -1.0, 2.0, 4.0 ] );\nm = new Uint8Array( [ 0, 0, 1, 0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskinv.ndarray( 2, x, 2, 1, m, 2, 1, y, -1, y.length-1 )\n","base.strided.dmskmap":"var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskmap( x.length, x, 1, m, 1, y, 1, base.identity )\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskmap( 2, x, 2, m, 2, y, -1, base.identity )\nvar x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar m0 = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar m1 = new Uint8Array( m0.buffer, m0.BYTES_PER_ELEMENT*2 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.dmskmap( 2, x1, -2, m1, 1, y1, 1, base.identity )\ny0\n","base.strided.dmskmap.ndarray":"var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskmap.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0, base.identity )\nx = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nm = new Uint8Array( [ 0, 0, 1, 0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskmap.ndarray( 2, x, 2, 1, m, 1, 2, y, -1, y.length-1, base.identity )\n","base.strided.dmskmap2":"var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nbase.strided.dmskmap2( x.length, x, 1, y, 1, m, 1, z, 1, base.add )\nz = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskmap2( 2, x, 2, y, -1, m, 2, z, -1, base.add )\nvar x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar m0 = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nvar z1 = new Float64Array( z0.buffer, z0.BYTES_PER_ELEMENT*2 );\nvar m1 = new Uint8Array( m0.buffer, m0.BYTES_PER_ELEMENT*2 );\nbase.strided.dmskmap2( 2, x1, -2, y1, 1, m1, 1, z1, 1, base.add )\nz0\n","base.strided.dmskmap2.ndarray":"var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nbase.strided.dmskmap2.ndarray( 4, x, 1, 0, y, 1, 0, m, 1, 0, z, 1, 0, base.add )\nx = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\ny = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nz = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nm = new Uint8Array( [ 0, 0, 1, 0 ] );\nbase.strided.dmskmap2.ndarray( 2, x, 2, 1, y, -1, 3, m, 1, 2, z, -1, 3, base.add )\n","base.strided.dmskmax":"var x = new Float64Array( [ 1.0, -2.0, 4.0, 2.0 ] );\nvar mask = new Uint8Array( [ 0, 0, 1, 0 ] );\nbase.strided.dmskmax( x.length, x, 1, mask, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, 4.0 ] );\nmask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dmskmax( N, x, 2, mask, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, 4.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar mask0 = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar mask1 = new Uint8Array( mask0.buffer, mask0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.dmskmax( N, x1, 2, mask1, 2 )\n","base.strided.dmskmax.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0, 4.0 ] );\nvar mask = new Uint8Array( [ 0, 0, 0, 1 ] );\nbase.strided.dmskmax.ndarray( x.length, x, 1, 0, mask, 1, 0 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, 4.0 ] );\nmask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dmskmax.ndarray( N, x, 2, 1, mask, 2, 1 )\n","base.strided.dmskmin":"var x = new Float64Array( [ 1.0, -2.0, -4.0, 2.0 ] );\nvar mask = new Uint8Array( [ 0, 0, 1, 0 ] );\nbase.strided.dmskmin( x.length, x, 1, mask, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, -4.0 ] );\nmask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dmskmin( N, x, 2, mask, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, -4.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar mask0 = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar mask1 = new Uint8Array( mask0.buffer, mask0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.dmskmin( N, x1, 2, mask1, 2 )\n","base.strided.dmskmin.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0, -4.0 ] );\nvar mask = new Uint8Array( [ 0, 0, 0, 1 ] );\nbase.strided.dmskmin.ndarray( x.length, x, 1, 0, mask, 1, 0 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, -4.0 ] );\nmask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dmskmin.ndarray( N, x, 2, 1, mask, 2, 1 )\n","base.strided.dmskramp":"var x = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskramp( x.length, x, 1, m, 1, y, 1 )\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskramp( 2, x, 2, m, 2, y, -1 )\nvar x0 = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar m0 = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar m1 = new Uint8Array( m0.buffer, m0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.dmskramp( 2, x1, -2, m1, -2, y1, 1 )\ny0\n","base.strided.dmskramp.ndarray":"var x = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskramp.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0 )\nx = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nm = new Uint8Array( [ 0, 0, 1, 0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskramp.ndarray( 2, x, 2, 1, m, 2, 1, y, -1, y.length-1 )\n","base.strided.dmskrange":"var x = new Float64Array( [ 1.0, -2.0, 4.0, 2.0 ] );\nvar mask = new Uint8Array( [ 0, 0, 1, 0 ] );\nbase.strided.dmskrange( x.length, x, 1, mask, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, 4.0 ] );\nmask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dmskrange( N, x, 2, mask, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, 4.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar mask0 = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar mask1 = new Uint8Array( mask0.buffer, mask0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.dmskrange( N, x1, 2, mask1, 2 )\n","base.strided.dmskrange.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0, 4.0 ] );\nvar mask = new Uint8Array( [ 0, 0, 0, 1 ] );\nbase.strided.dmskrange.ndarray( x.length, x, 1, 0, mask, 1, 0 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, 4.0 ] );\nmask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dmskrange.ndarray( N, x, 2, 1, mask, 2, 1 )\n","base.strided.dmskrsqrt":"var x = new Float64Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskrsqrt( x.length, x, 1, m, 1, y, 1 )\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskrsqrt( 2, x, 2, m, 2, y, -1 )\nvar x0 = new Float64Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nvar m0 = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar m1 = new Uint8Array( m0.buffer, m0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.dmskrsqrt( 2, x1, -2, m1, -2, y1, 1 )\ny0\n","base.strided.dmskrsqrt.ndarray":"var x = new Float64Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskrsqrt.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0 )\nx = new Float64Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nm = new Uint8Array( [ 0, 0, 1, 0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmskrsqrt.ndarray( 2, x, 2, 1, m, 2, 1, y, -1, y.length-1 )\n","base.strided.dmsksqrt":"var x = new Float64Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmsksqrt( x.length, x, 1, m, 1, y, 1 )\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmsksqrt( 2, x, 2, m, 2, y, -1 )\nvar x0 = new Float64Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nvar m0 = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar m1 = new Uint8Array( m0.buffer, m0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.dmsksqrt( 2, x1, -2, m1, -2, y1, 1 )\ny0\n","base.strided.dmsksqrt.ndarray":"var x = new Float64Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmsksqrt.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0 )\nx = new Float64Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nm = new Uint8Array( [ 0, 0, 1, 0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmsksqrt.ndarray( 2, x, 2, 1, m, 2, 1, y, -1, y.length-1 )\n","base.strided.dmsktrunc":"var x = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmsktrunc( x.length, x, 1, m, 1, y, 1 )\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmsktrunc( 2, x, 2, m, 2, y, -1 )\nvar x0 = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar m0 = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar m1 = new Uint8Array( m0.buffer, m0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.dmsktrunc( 2, x1, -2, m1, -2, y1, 1 )\ny0\n","base.strided.dmsktrunc.ndarray":"var x = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmsktrunc.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0 )\nx = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nm = new Uint8Array( [ 0, 0, 1, 0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dmsktrunc.ndarray( 2, x, 2, 1, m, 2, 1, y, -1, y.length-1 )\n","base.strided.dnanasum":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanasum( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ] );\nbase.strided.dnanasum( 4, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.dnanasum( 4, x1, 2 )\n","base.strided.dnanasum.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanasum.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nbase.strided.dnanasum.ndarray( 4, x, 2, 1 )\n","base.strided.dnanasumors":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanasumors( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dnanasumors( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dnanasumors( N, x1, stride )\n","base.strided.dnanasumors.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanasumors.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanasumors.ndarray( N, x, 2, 1 )\n","base.strided.dnanmax":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanmax( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dnanmax( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dnanmax( N, x1, stride )\n","base.strided.dnanmax.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0, NaN ] );\nbase.strided.dnanmax.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanmax.ndarray( N, x, 2, 1 )\n","base.strided.dnanmaxabs":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanmaxabs( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dnanmaxabs( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dnanmaxabs( N, x1, stride )\n","base.strided.dnanmaxabs.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0, NaN ] );\nbase.strided.dnanmaxabs.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanmaxabs.ndarray( N, x, 2, 1 )\n","base.strided.dnanmean":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanmean( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dnanmean( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dnanmean( N, x1, stride )\n","base.strided.dnanmean.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanmean.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanmean.ndarray( N, x, 2, 1 )\n","base.strided.dnanmeanors":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanmeanors( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dnanmeanors( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dnanmeanors( N, x1, stride )\n","base.strided.dnanmeanors.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanmeanors.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanmeanors.ndarray( N, x, 2, 1 )\n","base.strided.dnanmeanpn":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanmeanpn( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dnanmeanpn( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dnanmeanpn( N, x1, stride )\n","base.strided.dnanmeanpn.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanmeanpn.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanmeanpn.ndarray( N, x, 2, 1 )\n","base.strided.dnanmeanpw":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanmeanpw( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dnanmeanpw( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dnanmeanpw( N, x1, stride )\n","base.strided.dnanmeanpw.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanmeanpw.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanmeanpw.ndarray( N, x, 2, 1 )\n","base.strided.dnanmeanwd":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanmeanwd( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dnanmeanwd( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dnanmeanwd( N, x1, stride )\n","base.strided.dnanmeanwd.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanmeanwd.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanmeanwd.ndarray( N, x, 2, 1 )\n","base.strided.dnanmin":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanmin( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dnanmin( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dnanmin( N, x1, stride )\n","base.strided.dnanmin.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0, NaN ] );\nbase.strided.dnanmin.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanmin.ndarray( N, x, 2, 1 )\n","base.strided.dnanminabs":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanminabs( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dnanminabs( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dnanminabs( N, x1, stride )\n","base.strided.dnanminabs.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0, NaN ] );\nbase.strided.dnanminabs.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanminabs.ndarray( N, x, 2, 1 )\n","base.strided.dnanmskmax":"var x = new Float64Array( [ 1.0, -2.0, 4.0, 2.0, NaN ] );\nvar mask = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\nbase.strided.dnanmskmax( x.length, x, 1, mask, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, 4.0 ] );\nmask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanmskmax( N, x, 2, mask, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, 4.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar mask0 = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar mask1 = new Uint8Array( mask0.buffer, mask0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.dnanmskmax( N, x1, 2, mask1, 2 )\n","base.strided.dnanmskmax.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0, 4.0, NaN ] );\nvar mask = new Uint8Array( [ 0, 0, 0, 1, 0 ] );\nbase.strided.dnanmskmax.ndarray( x.length, x, 1, 0, mask, 1, 0 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, 4.0 ] );\nmask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanmskmax.ndarray( N, x, 2, 1, mask, 2, 1 )\n","base.strided.dnanmskmin":"var x = new Float64Array( [ 1.0, -2.0, -4.0, 2.0, NaN ] );\nvar mask = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\nbase.strided.dnanmskmin( x.length, x, 1, mask, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, -4.0 ] );\nmask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanmskmin( N, x, 2, mask, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, -4.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar mask0 = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar mask1 = new Uint8Array( mask0.buffer, mask0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.dnanmskmin( N, x1, 2, mask1, 2 )\n","base.strided.dnanmskmin.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0, -4.0, NaN ] );\nvar mask = new Uint8Array( [ 0, 0, 0, 1, 0 ] );\nbase.strided.dnanmskmin.ndarray( x.length, x, 1, 0, mask, 1, 0 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, -4.0 ] );\nmask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanmskmin.ndarray( N, x, 2, 1, mask, 2, 1 )\n","base.strided.dnanmskrange":"var x = new Float64Array( [ 1.0, -2.0, 4.0, 2.0, NaN ] );\nvar mask = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\nbase.strided.dnanmskrange( x.length, x, 1, mask, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, 4.0 ] );\nmask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanmskrange( N, x, 2, mask, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, 4.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar mask0 = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar mask1 = new Uint8Array( mask0.buffer, mask0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.dnanmskrange( N, x1, 2, mask1, 2 )\n","base.strided.dnanmskrange.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0, 4.0, NaN ] );\nvar mask = new Uint8Array( [ 0, 0, 0, 1, 0 ] );\nbase.strided.dnanmskrange.ndarray( x.length, x, 1, 0, mask, 1, 0 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, 4.0 ] );\nmask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanmskrange.ndarray( N, x, 2, 1, mask, 2, 1 )\n","base.strided.dnannsum":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nvar out = new Float64Array( 2 );\nbase.strided.dnannsum( x.length, x, 1, out, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ] );\nout = new Float64Array( 2 );\nbase.strided.dnannsum( 4, x, 2, out, 1 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 1.0, NaN, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nout = new Float64Array( 2 );\nbase.strided.dnannsum( 4, x1, 2, out, 1 )\n","base.strided.dnannsum.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nvar out = new Float64Array( 2 );\nbase.strided.dnannsum.ndarray( x.length, x, 1, 0, out, 1, 0 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 1.0, NaN, NaN ] );\nout = new Float64Array( 2 );\nbase.strided.dnannsum.ndarray( 4, x, 2, 1, out, 1, 0 )\n","base.strided.dnannsumkbn":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nvar out = new Float64Array( 2 );\nbase.strided.dnannsumkbn( x.length, x, 1, out, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ] );\nout = new Float64Array( 2 );\nbase.strided.dnannsumkbn( 4, x, 2, out, 1 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 1.0, NaN, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nout = new Float64Array( 2 );\nbase.strided.dnannsumkbn( 4, x1, 2, out, 1 )\n","base.strided.dnannsumkbn.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nvar out = new Float64Array( 2 );\nbase.strided.dnannsumkbn.ndarray( x.length, x, 1, 0, out, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 1.0, NaN, NaN ] );\nout = new Float64Array( 2 );\nbase.strided.dnannsumkbn.ndarray( 4, x, 2, 1, out, 1, 0 )\n","base.strided.dnannsumkbn2":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nvar out = new Float64Array( 2 );\nbase.strided.dnannsumkbn2( x.length, x, 1, out, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ] );\nout = new Float64Array( 2 );\nbase.strided.dnannsumkbn2( 4, x, 2, out, 1 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 1.0, NaN, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nout = new Float64Array( 2 );\nbase.strided.dnannsumkbn2( 4, x1, 2, out, 1 )\n","base.strided.dnannsumkbn2.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nvar out = new Float64Array( 2 );\nbase.strided.dnannsumkbn2.ndarray( x.length, x, 1, 0, out, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 1.0, NaN, NaN ] );\nout = new Float64Array( 2 );\nbase.strided.dnannsumkbn2.ndarray( 4, x, 2, 1, out, 1, 0 )\n","base.strided.dnannsumors":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nvar out = new Float64Array( 2 );\nbase.strided.dnannsumors( x.length, x, 1, out, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ] );\nout = new Float64Array( 2 );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnannsumors( N, x, 2, out, 1 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 1.0, NaN, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nout = new Float64Array( 2 );\nbase.strided.dnannsumors( N, x1, 2, out, 1 )\n","base.strided.dnannsumors.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nvar out = new Float64Array( 2 );\nbase.strided.dnannsumors.ndarray( x.length, x, 1, 0, out, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 1.0, NaN, NaN ] );\nvar N = base.floor( x.length / 2 );\nout = new Float64Array( 2 );\nbase.strided.dnannsumors.ndarray( N, x, 2, 1, out, 1, 0 )\n","base.strided.dnannsumpw":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nvar out = new Float64Array( 2 );\nbase.strided.dnannsumpw( x.length, x, 1, out, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ] );\nout = new Float64Array( 2 );\nbase.strided.dnannsumpw( 4, x, 2, out, 1 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 1.0, NaN, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nout = new Float64Array( 2 );\nbase.strided.dnannsumpw( 4, x1, 2, out, 1 )\n","base.strided.dnannsumpw.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nvar out = new Float64Array( 2 );\nbase.strided.dnannsumpw.ndarray( x.length, x, 1, 0, out, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 1.0, NaN, NaN ] );\nout = new Float64Array( 2 );\nbase.strided.dnannsumpw.ndarray( 4, x, 2, 1, out, 1, 0 )\n","base.strided.dnanrange":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanrange( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dnanrange( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dnanrange( N, x1, stride )\n","base.strided.dnanrange.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0, NaN ] );\nbase.strided.dnanrange.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanrange.ndarray( N, x, 2, 1 )\n","base.strided.dnanstdev":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanstdev( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dnanstdev( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dnanstdev( N, 1, x1, stride )\n","base.strided.dnanstdev.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanstdev.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanstdev.ndarray( N, 1, x, 2, 1 )\n","base.strided.dnanstdevch":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanstdevch( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dnanstdevch( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dnanstdevch( N, 1, x1, stride )\n","base.strided.dnanstdevch.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanstdevch.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanstdevch.ndarray( N, 1, x, 2, 1 )\n","base.strided.dnanstdevpn":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanstdevpn( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dnanstdevpn( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dnanstdevpn( N, 1, x1, stride )\n","base.strided.dnanstdevpn.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanstdevpn.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanstdevpn.ndarray( N, 1, x, 2, 1 )\n","base.strided.dnanstdevtk":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanstdevtk( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dnanstdevtk( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dnanstdevtk( N, 1, x1, stride )\n","base.strided.dnanstdevtk.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanstdevtk.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanstdevtk.ndarray( N, 1, x, 2, 1 )\n","base.strided.dnanstdevwd":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanstdevwd( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dnanstdevwd( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dnanstdevwd( N, 1, x1, stride )\n","base.strided.dnanstdevwd.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanstdevwd.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanstdevwd.ndarray( N, 1, x, 2, 1 )\n","base.strided.dnanstdevyc":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanstdevyc( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dnanstdevyc( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dnanstdevyc( N, 1, x1, stride )\n","base.strided.dnanstdevyc.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanstdevyc.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanstdevyc.ndarray( N, 1, x, 2, 1 )\n","base.strided.dnansum":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnansum( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ] );\nbase.strided.dnansum( 4, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.dnansum( 4, x1, 2 )\n","base.strided.dnansum.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnansum.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nbase.strided.dnansum.ndarray( 4, x, 2, 1 )\n","base.strided.dnansumkbn":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnansumkbn( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ] );\nbase.strided.dnansumkbn( 4, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.dnansumkbn( 4, x1, 2 )\n","base.strided.dnansumkbn.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnansumkbn.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nbase.strided.dnansumkbn.ndarray( 4, x, 2, 1 )\n","base.strided.dnansumkbn2":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnansumkbn2( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ] );\nbase.strided.dnansumkbn2( 4, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.dnansumkbn2( 4, x1, 2 )\n","base.strided.dnansumkbn2.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnansumkbn2.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nbase.strided.dnansumkbn2.ndarray( 4, x, 2, 1 )\n","base.strided.dnansumors":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnansumors( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dnansumors( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dnansumors( N, x1, stride )\n","base.strided.dnansumors.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnansumors.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnansumors.ndarray( N, x, 2, 1 )\n","base.strided.dnansumpw":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnansumpw( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dnansumpw( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dnansumpw( N, x1, stride )\n","base.strided.dnansumpw.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnansumpw.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnansumpw.ndarray( N, x, 2, 1 )\n","base.strided.dnanvariance":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanvariance( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dnanvariance( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dnanvariance( N, 1, x1, stride )\n","base.strided.dnanvariance.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanvariance.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanvariance.ndarray( N, 1, x, 2, 1 )\n","base.strided.dnanvariancech":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanvariancech( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dnanvariancech( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dnanvariancech( N, 1, x1, stride )\n","base.strided.dnanvariancech.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanvariancech.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanvariancech.ndarray( N, 1, x, 2, 1 )\n","base.strided.dnanvariancepn":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanvariancepn( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dnanvariancepn( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dnanvariancepn( N, 1, x1, stride )\n","base.strided.dnanvariancepn.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanvariancepn.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanvariancepn.ndarray( N, 1, x, 2, 1 )\n","base.strided.dnanvariancetk":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanvariancetk( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dnanvariancetk( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dnanvariancetk( N, 1, x1, stride )\n","base.strided.dnanvariancetk.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanvariancetk.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanvariancetk.ndarray( N, 1, x, 2, 1 )\n","base.strided.dnanvariancewd":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanvariancewd( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dnanvariancewd( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dnanvariancewd( N, 1, x1, stride )\n","base.strided.dnanvariancewd.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanvariancewd.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanvariancewd.ndarray( N, 1, x, 2, 1 )\n","base.strided.dnanvarianceyc":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanvarianceyc( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dnanvarianceyc( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dnanvarianceyc( N, 1, x1, stride )\n","base.strided.dnanvarianceyc.ndarray":"var x = new Float64Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dnanvarianceyc.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dnanvarianceyc.ndarray( N, 1, x, 2, 1 )\n","base.strided.dnrm2":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dnrm2( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nbase.strided.dnrm2( 3, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.dnrm2( 3, x1, 2 )\n","base.strided.dnrm2.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dnrm2.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.dnrm2.ndarray( 3, x, 2, 1 )\n","base.strided.dramp":"var x = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dramp( x.length, x, 1, y, 1 )\nvar N = base.floor( x.length / 2 );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dramp( N, x, 2, y, -1 )\nvar x0 = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nN = base.floor( x0.length / 2 );\nbase.strided.dramp( N, x1, -2, y1, 1 )\ny0\n","base.strided.dramp.ndarray":"var x = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dramp.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dramp.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.drange":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.drange( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.drange( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.drange( N, x1, stride )\n","base.strided.drange.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.drange.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.drange.ndarray( N, x, 2, 1 )\n","base.strided.drev":"var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ] );\nbase.strided.drev( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ] );\nbase.strided.drev( 3, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.drev( 3, x1, 2 )\nx0\n","base.strided.drev.ndarray":"var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ] );\nbase.strided.drev.ndarray( x.length, x, 1, 0 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nbase.strided.drev.ndarray( 3, x, 2, 1 )\n","base.strided.drsqrt":"var x = new Float64Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.drsqrt( x.length, x, 1, y, 1 )\nvar N = base.floor( x.length / 2 );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.drsqrt( N, x, 2, y, -1 )\nvar x0 = new Float64Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nN = base.floor( x0.length / 2 );\nbase.strided.drsqrt( N, x1, -2, y1, 1 )\ny0\n","base.strided.drsqrt.ndarray":"var x = new Float64Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.drsqrt.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float64Array( [ 0.0, 4.0, 9.0, 12.0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.drsqrt.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.dsapxsum":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsapxsum( x.length, 5.0, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nbase.strided.dsapxsum( 3, 5.0, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.dsapxsum( 3, 5.0, x1, 2 )\n","base.strided.dsapxsum.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsapxsum.ndarray( x.length, 5.0, x, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.dsapxsum.ndarray( 3, 5.0, x, 2, 1 )\n","base.strided.dsapxsumpw":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsapxsumpw( x.length, 5.0, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] )\nbase.strided.dsapxsumpw( 3, 5.0, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.dsapxsumpw( 3, 5.0, x1, 2 )\n","base.strided.dsapxsumpw.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsapxsumpw.ndarray( x.length, 5.0, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.dsapxsumpw.ndarray( 3, 5.0, x, 2, 1 )\n","base.strided.dscal":"var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ] );\nbase.strided.dscal( x.length, 5.0, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ] );\nbase.strided.dscal( 3, 5.0, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.dscal( 3, 5.0, x1, 2 )\nx0\n","base.strided.dscal.ndarray":"var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ] );\nbase.strided.dscal.ndarray( x.length, 5.0, x, 1, 0 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nbase.strided.dscal.ndarray( 3, 5.0, x, 2, 1 )\n","base.strided.dsdot":"var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\nvar y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\nvar dot = base.strided.dsdot( x.length, x, 1, y, 1 )\nx = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\ndot = base.strided.dsdot( 3, x, 2, y, -1 )\nx = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\nvar x1 = new Float32Array( x.buffer, x.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y.buffer, y.BYTES_PER_ELEMENT*3 );\ndot = base.strided.dsdot( 3, x1, -2, y1, 1 )\n","base.strided.dsdot.ndarray":"var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\nvar y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\nvar dot = base.strided.dsdot.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\ndot = base.strided.dsdot.ndarray( 3, x, 2, 0, y, 2, 0 )\nx = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\ndot = base.strided.dsdot.ndarray( 3, x, -2, x.length-1, y, 1, 3 )\n","base.strided.dsem":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsem( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dsem( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dsem( N, 1, x1, stride )\n","base.strided.dsem.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsem.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsem.ndarray( N, 1, x, 2, 1 )\n","base.strided.dsemch":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsemch( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dsemch( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dsemch( N, 1, x1, stride )\n","base.strided.dsemch.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsemch.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsemch.ndarray( N, 1, x, 2, 1 )\n","base.strided.dsempn":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsempn( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dsempn( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dsempn( N, 1, x1, stride )\n","base.strided.dsempn.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsempn.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsempn.ndarray( N, 1, x, 2, 1 )\n","base.strided.dsemtk":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsemtk( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dsemtk( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dsemtk( N, 1, x1, stride )\n","base.strided.dsemtk.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsemtk.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsemtk.ndarray( N, 1, x, 2, 1 )\n","base.strided.dsemwd":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsemwd( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dsemwd( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dsemwd( N, 1, x1, stride )\n","base.strided.dsemwd.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsemwd.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsemwd.ndarray( N, 1, x, 2, 1 )\n","base.strided.dsemyc":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsemyc( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dsemyc( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dsemyc( N, 1, x1, stride )\n","base.strided.dsemyc.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsemyc.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsemyc.ndarray( N, 1, x, 2, 1 )\n","base.strided.dsmean":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsmean( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dsmean( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dsmean( N, x1, stride )\n","base.strided.dsmean.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsmean.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsmean.ndarray( N, x, 2, 1 )\n","base.strided.dsmeanors":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsmeanors( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dsmeanors( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dsmeanors( N, x1, stride )\n","base.strided.dsmeanors.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsmeanors.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsmeanors.ndarray( N, x, 2, 1 )\n","base.strided.dsmeanpn":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsmeanpn( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dsmeanpn( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dsmeanpn( N, x1, stride )\n","base.strided.dsmeanpn.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsmeanpn.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsmeanpn.ndarray( N, x, 2, 1 )\n","base.strided.dsmeanpw":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsmeanpw( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dsmeanpw( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dsmeanpw( N, x1, stride )\n","base.strided.dsmeanpw.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsmeanpw.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsmeanpw.ndarray( N, x, 2, 1 )\n","base.strided.dsmeanwd":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsmeanwd( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dsmeanwd( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dsmeanwd( N, x1, stride )\n","base.strided.dsmeanwd.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsmeanwd.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsmeanwd.ndarray( N, x, 2, 1 )\n","base.strided.dsnanmean":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dsnanmean( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dsnanmean( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dsnanmean( N, x1, stride )\n","base.strided.dsnanmean.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dsnanmean.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsnanmean.ndarray( N, x, 2, 1 )\n","base.strided.dsnanmeanors":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dsnanmeanors( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dsnanmeanors( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dsnanmeanors( N, x1, stride )\n","base.strided.dsnanmeanors.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dsnanmeanors.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsnanmeanors.ndarray( N, x, 2, 1 )\n","base.strided.dsnanmeanpn":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dsnanmeanpn( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dsnanmeanpn( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dsnanmeanpn( N, x1, stride )\n","base.strided.dsnanmeanpn.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dsnanmeanpn.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsnanmeanpn.ndarray( N, x, 2, 1 )\n","base.strided.dsnanmeanwd":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dsnanmeanwd( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dsnanmeanwd( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dsnanmeanwd( N, x1, stride )\n","base.strided.dsnanmeanwd.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dsnanmeanwd.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsnanmeanwd.ndarray( N, x, 2, 1 )\n","base.strided.dsnannsumors":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nvar out = new Float64Array( 2 );\nbase.strided.dsnannsumors( x.length, x, 1, out, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ] );\nout = new Float64Array( 2 );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsnannsumors( N, x, 2, out, 1 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 1.0, NaN, NaN ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nout = new Float64Array( 2 );\nbase.strided.dsnannsumors( N, x1, 2, out, 1 )\n","base.strided.dsnannsumors.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nvar out = new Float64Array( 2 );\nbase.strided.dsnannsumors.ndarray( x.length, x, 1, 0, out, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 1.0, NaN, NaN ] );\nvar N = base.floor( x.length / 2 );\nout = new Float64Array( 2 );\nbase.strided.dsnannsumors.ndarray( N, x, 2, 1, out, 1, 0 )\n","base.strided.dsnansum":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dsnansum( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ] );\nbase.strided.dsnansum( 4, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.dsnansum( 4, x1, 2 )\n","base.strided.dsnansum.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dsnansum.ndarray( x.length, x, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.dsnansum.ndarray( 3, x, 2, 1 )\n","base.strided.dsnansumors":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dsnansumors( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dsnansumors( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dsnansumors( N, x1, stride )\n","base.strided.dsnansumors.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dsnansumors.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsnansumors.ndarray( N, x, 2, 1 )\n","base.strided.dsnansumpw":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dsnansumpw( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dsnansumpw( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dsnansumpw( N, x1, stride )\n","base.strided.dsnansumpw.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.dsnansumpw.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsnansumpw.ndarray( N, x, 2, 1 )\n","base.strided.dsort2hp":"var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nbase.strided.dsort2hp( x.length, 1, x, 1, y, 1 )\ny\nx = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\ny = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsort2hp( N, -1, x, 2, y, 2 )\ny\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y0 = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.dsort2hp( N, 1, x1, 2, y1, 2 )\nx0\ny0\n","base.strided.dsort2hp.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nbase.strided.dsort2hp.ndarray( x.length, 1, x, 1, 0, y, 1, 0 )\ny\nx = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\ny = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsort2hp.ndarray( N, 1, x, 2, 1, y, 2, 1 )\ny\n","base.strided.dsort2ins":"var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nbase.strided.dsort2ins( x.length, 1, x, 1, y, 1 )\ny\nx = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\ny = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsort2ins( N, -1, x, 2, y, 2 )\ny\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y0 = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.dsort2ins( N, 1, x1, 2, y1, 2 )\nx0\ny0\n","base.strided.dsort2ins.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nbase.strided.dsort2ins.ndarray( x.length, 1, x, 1, 0, y, 1, 0 )\ny\nx = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\ny = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsort2ins.ndarray( N, 1, x, 2, 1, y, 2, 1 )\ny\n","base.strided.dsort2sh":"var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nbase.strided.dsort2sh( x.length, 1, x, 1, y, 1 )\ny\nx = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\ny = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsort2sh( N, -1, x, 2, y, 2 )\ny\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y0 = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.dsort2sh( N, 1, x1, 2, y1, 2 )\nx0\ny0\n","base.strided.dsort2sh.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar y = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nbase.strided.dsort2sh.ndarray( x.length, 1, x, 1, 0, y, 1, 0 )\ny\nx = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\ny = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsort2sh.ndarray( N, 1, x, 2, 1, y, 2, 1 )\ny\n","base.strided.dsorthp":"var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nbase.strided.dsorthp( x.length, 1, x, 1 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsorthp( N, -1, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.dsorthp( N, 1, x1, 2 )\nx0\n","base.strided.dsorthp.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nbase.strided.dsorthp.ndarray( x.length, 1, x, 1, 0 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsorthp.ndarray( N, 1, x, 2, 1 )\n","base.strided.dsortins":"var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nbase.strided.dsortins( x.length, 1, x, 1 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsortins( N, -1, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.dsortins( N, 1, x1, 2 )\nx0\n","base.strided.dsortins.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nbase.strided.dsortins.ndarray( x.length, 1, x, 1, 0 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsortins.ndarray( N, 1, x, 2, 1 )\n","base.strided.dsortsh":"var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nbase.strided.dsortsh( x.length, 1, x, 1 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsortsh( N, -1, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.dsortsh( N, 1, x1, 2 )\nx0\n","base.strided.dsortsh.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nbase.strided.dsortsh.ndarray( x.length, 1, x, 1, 0 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsortsh.ndarray( N, 1, x, 2, 1 )\n","base.strided.dsqrt":"var x = new Float64Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dsqrt( x.length, x, 1, y, 1 )\nvar N = base.floor( x.length / 2 );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dsqrt( N, x, 2, y, -1 )\nvar x0 = new Float64Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nN = base.floor( x0.length / 2 );\nbase.strided.dsqrt( N, x1, -2, y1, 1 )\ny0\n","base.strided.dsqrt.ndarray":"var x = new Float64Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dsqrt.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float64Array( [ 0.0, 4.0, 9.0, 12.0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsqrt.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.dssum":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dssum( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nbase.strided.dssum( 3, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.dssum( 3, x1, 2 )\n","base.strided.dssum.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dssum.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.dssum.ndarray(3, x, 2, 1 )\n","base.strided.dssumors":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dssumors( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nbase.strided.dssumors( 3, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.dssumors( 3, x1, 2 )\n","base.strided.dssumors.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dssumors.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.dssumors.ndarray( 3, x, 2, 1 )\n","base.strided.dssumpw":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dssumpw( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar stride = 2;\nbase.strided.dssumpw( 3, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nstride = 2;\nbase.strided.dssumpw( 3, x1, stride )\n","base.strided.dssumpw.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dssumpw.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.dssumpw.ndarray( 3, x, 2, 1 )\n","base.strided.dstdev":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dstdev( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dstdev( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dstdev( N, 1, x1, stride )\n","base.strided.dstdev.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dstdev.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dstdev.ndarray( N, 1, x, 2, 1 )\n","base.strided.dstdevch":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dstdevch( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dstdevch( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dstdevch( N, 1, x1, stride )\n","base.strided.dstdevch.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dstdevch.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dstdevch.ndarray( N, 1, x, 2, 1 )\n","base.strided.dstdevpn":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dstdevpn( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dstdevpn( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dstdevpn( N, 1, x1, stride )\n","base.strided.dstdevpn.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dstdevpn.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dstdevpn.ndarray( N, 1, x, 2, 1 )\n","base.strided.dstdevtk":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dstdevtk( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dstdevtk( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dstdevtk( N, 1, x1, stride )\n","base.strided.dstdevtk.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dstdevtk.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dstdevtk.ndarray( N, 1, x, 2, 1 )\n","base.strided.dstdevwd":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dstdevwd( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dstdevwd( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dstdevwd( N, 1, x1, stride )\n","base.strided.dstdevwd.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dstdevwd.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dstdevwd.ndarray( N, 1, x, 2, 1 )\n","base.strided.dstdevyc":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dstdevyc( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dstdevyc( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dstdevyc( N, 1, x1, stride )\n","base.strided.dstdevyc.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dstdevyc.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dstdevyc.ndarray( N, 1, x, 2, 1 )\n","base.strided.dsum":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsum( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nbase.strided.dsum( 3, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.dsum( 3, x1, 2 )\n","base.strided.dsum.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsum.ndarray( x.length, x, 1, 0 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.dsum.ndarray( 3, x, 2, 1 )\n","base.strided.dsumkbn":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsumkbn( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nbase.strided.dsumkbn( 3, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.dsumkbn( 3, x1, 2 )\n","base.strided.dsumkbn.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsumkbn.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.dsumkbn.ndarray( 3, x, 2, 1 )\n","base.strided.dsumkbn2":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsumkbn2( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dsumkbn2( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dsumkbn2( N, x1, stride )\n","base.strided.dsumkbn2.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsumkbn2.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsumkbn2.ndarray( N, x, 2, 1 )\n","base.strided.dsumors":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsumors( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nbase.strided.dsumors( 3, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.dsumors( 3, x1, 2 )\n","base.strided.dsumors.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsumors.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.dsumors.ndarray( 3, x, 2, 1 )\n","base.strided.dsumpw":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsumpw( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nbase.strided.dsumpw( 3, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.dsumpw( 3, x1, 2 )\n","base.strided.dsumpw.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsumpw.ndarray( x.length, x, 1, 0 )\nx = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.dsumpw.ndarray( 3, x, 2, 1 )\n","base.strided.dsvariance":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsvariance( x.length, 1, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dsvariance( N, 1, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dsvariance( N, 1, x1, stride )\n","base.strided.dsvariance.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsvariance.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsvariance.ndarray( N, 1, x, 2, 1 )\n","base.strided.dsvariancepn":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsvariancepn( x.length, 1, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dsvariancepn( N, 1, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dsvariancepn( N, 1, x1, stride )\n","base.strided.dsvariancepn.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dsvariancepn.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dsvariancepn.ndarray( N, 1, x, 2, 1 )\n","base.strided.dswap":"var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\nvar y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\nbase.strided.dswap( x.length, x, 1, y, 1 )\nx = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\nbase.strided.dswap( 3, x, -2, y, 1 )\nvar x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\nvar y0 = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nbase.strided.dswap( 3, x1, -2, y1, 1 )\ny0\n","base.strided.dswap.ndarray":"var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\nvar y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\nbase.strided.dswap.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\nbase.strided.dswap.ndarray( 3, x, 2, 1, y, -1, y.length-1 )\n","base.strided.dtrunc":"var x = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dtrunc( x.length, x, 1, y, 1 )\nvar N = base.floor( x.length / 2 );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dtrunc( N, x, 2, y, -1 )\nvar x0 = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nN = base.floor( x0.length / 2 );\nbase.strided.dtrunc( N, x1, -2, y1, 1 )\ny0\n","base.strided.dtrunc.ndarray":"var x = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.dtrunc.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dtrunc.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.dtypeEnum2Str":"var out = base.strided.dtypeEnum2Str( base.strided.dtypeStr2Enum( 'float64' ) )\n","base.strided.dtypeResolveEnum":"var out = base.strided.dtypeResolveEnum( 'float64' )\nout = base.strided.dtypeResolveEnum( base.strided.dtypeStr2Enum( 'float64' ) )\n","base.strided.dtypeResolveStr":"var out = base.strided.dtypeResolveStr( 'float64' )\nout = base.strided.dtypeResolveStr( base.strided.dtypeStr2Enum( 'float64' ) )\n","base.strided.dtypeStr2Enum":"var out = base.strided.dtypeStr2Enum( 'float64' )\n","base.strided.dvariance":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dvariance( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dvariance( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dvariance( N, 1, x1, stride )\n","base.strided.dvariance.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dvariance.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dvariance.ndarray( N, 1, x, 2, 1 )\n","base.strided.dvariancech":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dvariancech( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dvariancech( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dvariancech( N, 1, x1, stride )\n","base.strided.dvariancech.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dvariancech.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dvariancech.ndarray( N, 1, x, 2, 1 )\n","base.strided.dvariancepn":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dvariancepn( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dvariancepn( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dvariancepn( N, 1, x1, stride )\n","base.strided.dvariancepn.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dvariancepn.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dvariancepn.ndarray( N, 1, x, 2, 1 )\n","base.strided.dvariancetk":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dvariancetk( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dvariancetk( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dvariancetk( N, 1, x1, stride )\n","base.strided.dvariancetk.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dvariancetk.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dvariancetk.ndarray( N, 1, x, 2, 1 )\n","base.strided.dvariancewd":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dvariancewd( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dvariancewd( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dvariancewd( N, 1, x1, stride )\n","base.strided.dvariancewd.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dvariancewd.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dvariancewd.ndarray( N, 1, x, 2, 1 )\n","base.strided.dvarianceyc":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dvarianceyc( x.length, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.dvarianceyc( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.dvarianceyc( N, 1, x1, stride )\n","base.strided.dvarianceyc.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dvarianceyc.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dvarianceyc.ndarray( N, 1, x, 2, 1 )\n","base.strided.dvarm":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dvarm( x.length, 1.0/3.0, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dvarm( N, 1.0/3.0, 1, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.dvarm( N, 1.0/3.0, 1, x1, 2 )\n","base.strided.dvarm.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dvarm.ndarray( x.length, 1.0/3.0, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dvarm.ndarray( N, 1.0/3.0, 1, x, 2, 1 )\n","base.strided.dvarmpn":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dvarmpn( x.length, 1.0/3.0, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dvarmpn( N, 1.0/3.0, 1, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.dvarmpn( N, 1.0/3.0, 1, x1, 2 )\n","base.strided.dvarmpn.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dvarmpn.ndarray( x.length, 1.0/3.0, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dvarmpn.ndarray( N, 1.0/3.0, 1, x, 2, 1 )\n","base.strided.dvarmtk":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dvarmtk( x.length, 1.0/3.0, 1, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dvarmtk( N, 1.0/3.0, 1, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.dvarmtk( N, 1.0/3.0, 1, x1, 2 )\n","base.strided.dvarmtk.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.dvarmtk.ndarray( x.length, 1.0/3.0, 1, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.dvarmtk.ndarray( N, 1.0/3.0, 1, x, 2, 1 )\n","base.strided.gapx":"var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ];\nvar alpha = 5.0;\nbase.strided.gapx( x.length, alpha, x, 1 )\nx = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ];\nvar N = base.floor( x.length / 2 );\nalpha = 5.0;\nvar stride = 2;\nbase.strided.gapx( N, alpha, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nalpha = 5.0;\nstride = 2;\nbase.strided.gapx( N, alpha, x1, stride )\nx0\n","base.strided.gapx.ndarray":"var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ];\nvar alpha = 5.0;\nbase.strided.gapx.ndarray( x.length, alpha, x, 1, 0 )\nx = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\nvar N = base.floor( x.length / 2 );\nalpha = 5.0;\nvar stride = 2;\nbase.strided.gapx.ndarray( N, alpha, x, stride, 1 )\n","base.strided.gapxsum":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.gapxsum( x.length, 5.0, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.gapxsum( N, 5.0, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.gapxsum( N, 5.0, x1, stride )\n","base.strided.gapxsum.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.gapxsum.ndarray( x.length, 5.0, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gapxsum.ndarray( N, 5.0, x, 2, 1 )\n","base.strided.gapxsumkbn":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.gapxsumkbn( x.length, 5.0, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.gapxsumkbn( N, 5.0, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.gapxsumkbn( N, 5.0, x1, stride )\n","base.strided.gapxsumkbn.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.gapxsumkbn.ndarray( x.length, 5.0, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gapxsumkbn.ndarray( N, 5.0, x, 2, 1 )\n","base.strided.gapxsumkbn2":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.gapxsumkbn2( x.length, 5.0, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.gapxsumkbn2( N, 5.0, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.gapxsumkbn2( N, 5.0, x1, stride )\n","base.strided.gapxsumkbn2.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.gapxsumkbn2.ndarray( x.length, 5.0, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gapxsumkbn2.ndarray( N, 5.0, x, 2, 1 )\n","base.strided.gapxsumors":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.gapxsumors( x.length, 5.0, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.gapxsumors( N, 5.0, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.gapxsumors( N, 5.0, x1, stride )\n","base.strided.gapxsumors.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.gapxsumors.ndarray( x.length, 5.0, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gapxsumors.ndarray( N, 5.0, x, 2, 1 )\n","base.strided.gapxsumpw":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.gapxsumpw( x.length, 5.0, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.gapxsumpw( N, 5.0, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.gapxsumpw( N, 5.0, x1, stride )\n","base.strided.gapxsumpw.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.gapxsumpw.ndarray( x.length, 5.0, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gapxsumpw.ndarray( N, 5.0, x, 2, 1 )\n","base.strided.gasum":"var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\nvar s = base.strided.gasum( x.length, x, 1 )\ns = base.strided.gasum( 3, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\ns = base.strided.gasum( 3, x1, 2 )\n","base.strided.gasum.ndarray":"var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\nvar s = base.strided.gasum.ndarray( x.length, x, 1, 0 )\nx = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\ns = base.strided.gasum.ndarray( 3, x, -1, x.length-1 )\n","base.strided.gasumpw":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.gasumpw( x.length, x, 1 )\nx = new Float64Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.gasumpw( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.gasumpw( N, x1, stride )\n","base.strided.gasumpw.ndarray":"var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.gasumpw.ndarray( x.length, x, 1, 0 )\nvar x = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.gasumpw.ndarray( N, x, 2, 1 )\n","base.strided.gaxpy":"var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\nvar y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\nbase.strided.gaxpy( x.length, 5.0, x, 1, y, 1 )\nx = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\ny = [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ];\nbase.strided.gaxpy( 3, 5.0, x, 2, y, -1 )\nvar x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\nvar y0 = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nbase.strided.gaxpy( 3, 5.0, x1, -2, y1, 1 )\ny0\n","base.strided.gaxpy.ndarray":"var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\nvar y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\nbase.strided.gaxpy.ndarray( x.length, 5.0, x, 1, 0, y, 1, 0 )\nx = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\ny = [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ];\nbase.strided.gaxpy.ndarray( 3, 5.0, x, 2, 1, y, -1, y.length-1 )\n","base.strided.gcopy":"var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\nvar y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\nbase.strided.gcopy( x.length, x, 1, y, 1 )\nx = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\ny = [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ];\nbase.strided.gcopy( 3, x, -2, y, 1 )\nvar x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\nvar y0 = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nbase.strided.gcopy( 3, x1, -2, y1, 1 )\ny0\n","base.strided.gcopy.ndarray":"var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\nvar y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\nbase.strided.gcopy.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\ny = [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ];\nbase.strided.gcopy.ndarray( 3, x, 2, 1, y, -1, y.length-1 )\n","base.strided.gcusum":"var x = [ 1.0, -2.0, 2.0 ];\nvar y = [ 0.0, 0.0, 0.0 ];\nbase.strided.gcusum( x.length, 0.0, x, 1, y, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gcusum( N, 0.0, x, 2, y, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar y0 = new Float64Array( x0.length );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nN = base.floor( x0.length / 2 );\nbase.strided.gcusum( N, 0.0, x1, 2, y1, 1 )\ny0\n","base.strided.gcusum.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nvar y = [ 0.0, 0.0, 0.0 ];\nbase.strided.gcusum.ndarray( x.length, 0.0, x, 1, 0, y, 1, 0 )\nx = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gcusum.ndarray( N, 0.0, x, 2, 1, y, -1, y.length-1 )\n","base.strided.gcusumkbn":"var x = [ 1.0, -2.0, 2.0 ];\nvar y = [ 0.0, 0.0, 0.0 ];\nbase.strided.gcusumkbn( x.length, 0.0, x, 1, y, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gcusumkbn( N, 0.0, x, 2, y, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar y0 = new Float64Array( x0.length );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nN = base.floor( x0.length / 2 );\nbase.strided.gcusumkbn( N, 0.0, x1, 2, y1, 1 )\ny0\n","base.strided.gcusumkbn.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nvar y = [ 0.0, 0.0, 0.0 ];\nbase.strided.gcusumkbn.ndarray( x.length, 0.0, x, 1, 0, y, 1, 0 )\nx = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gcusumkbn.ndarray( N, 0.0, x, 2, 1, y, -1, y.length-1 )\n","base.strided.gcusumkbn2":"var x = [ 1.0, -2.0, 2.0 ];\nvar y = [ 0.0, 0.0, 0.0 ];\nbase.strided.gcusumkbn2( x.length, 0.0, x, 1, y, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gcusumkbn2( N, 0.0, x, 2, y, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar y0 = new Float64Array( x0.length );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nN = base.floor( x0.length / 2 );\nbase.strided.gcusumkbn2( N, 0.0, x1, 2, y1, 1 )\ny0\n","base.strided.gcusumkbn2.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nvar y = [ 0.0, 0.0, 0.0 ];\nbase.strided.gcusumkbn2.ndarray( x.length, 0.0, x, 1, 0, y, 1, 0 )\nx = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gcusumkbn2.ndarray( N, 0.0, x, 2, 1, y, -1, y.length-1 )\n","base.strided.gcusumors":"var x = [ 1.0, -2.0, 2.0 ];\nvar y = [ 0.0, 0.0, 0.0 ];\nbase.strided.gcusumors( x.length, 0.0, x, 1, y, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gcusumors( N, 0.0, x, 2, y, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar y0 = new Float64Array( x0.length );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nN = base.floor( x0.length / 2 );\nbase.strided.gcusumors( N, 0.0, x1, 2, y1, 1 )\ny0\n","base.strided.gcusumors.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nvar y = [ 0.0, 0.0, 0.0 ];\nbase.strided.gcusumors.ndarray( x.length, 0.0, x, 1, 0, y, 1, 0 )\nx = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gcusumors.ndarray( N, 0.0, x, 2, 1, y, -1, y.length-1 )\n","base.strided.gcusumpw":"var x = [ 1.0, -2.0, 2.0 ];\nvar y = [ 0.0, 0.0, 0.0 ];\nbase.strided.gcusumpw( x.length, 0.0, x, 1, y, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gcusumpw( N, 0.0, x, 2, y, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar y0 = new Float64Array( x0.length );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nN = base.floor( x0.length / 2 );\nbase.strided.gcusumpw( N, 0.0, x1, 2, y1, 1 )\ny0\n","base.strided.gcusumpw.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nvar y = [ 0.0, 0.0, 0.0 ];\nbase.strided.gcusumpw.ndarray( x.length, 0.0, x, 1, 0, y, 1, 0 )\nx = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gcusumpw.ndarray( N, 0.0, x, 2, 1, y, -1, y.length-1 )\n","base.strided.gdot":"var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\nvar y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\nvar out = base.strided.gdot( x.length, x, 1, y, 1 )\nx = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\ny = [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ];\nout = base.strided.gdot( 3, x, 2, y, -1 )\nx = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\nvar x1 = new Float64Array( x.buffer, x.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y.buffer, y.BYTES_PER_ELEMENT*3 );\nout = base.strided.gdot( 3, x1, -2, y1, 1 )\n","base.strided.gdot.ndarray":"var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\nvar y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\nvar out = base.strided.gdot.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\ny = [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ];\nout = base.strided.gdot.ndarray( 3, x, 2, 0, y, 2, 0 )\nx = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\ny = [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ];\nout = base.strided.gdot.ndarray( 3, x, -2, x.length-1, y, 1, 3 )\n","base.strided.gfill":"var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ];\nbase.strided.gfill( x.length, 5.0, x, 1 )\nx = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gfill( N, 5.0, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.gfill( N, 5.0, x1, 2 )\nx0\n","base.strided.gfill.ndarray":"var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ];\nbase.strided.gfill.ndarray( x.length, 5.0, x, 1, 0 )\nx = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gfill.ndarray( N, 5.0, x, 2, 1 )\n","base.strided.gfillBy":"function fill() { return 5.0; };\nvar x = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ];\nbase.strided.gfillBy( x.length, x, 1, fill )\nx = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gfillBy( N, x, 2, fill )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.gfillBy( N, x1, 2, fill )\nx0\n","base.strided.gfillBy.ndarray":"function fill() { return 5.0; };\nvar x = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ];\nbase.strided.gfillBy.ndarray( x.length, x, 1, 0, fill )\nx = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gfillBy.ndarray( N, x, 2, 1, fill )\n","base.strided.gnannsumkbn":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nvar out = [ 0.0, 0 ];\nbase.strided.gnannsumkbn( x.length, x, 1, out, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ];\nout = [ 0.0, 0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gnannsumkbn( N, x, 2, out, 1 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 1.0, NaN, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nout = [ 0.0, 0 ];\nbase.strided.gnannsumkbn( N, x1, 2, out, 1 )\n","base.strided.gnannsumkbn.ndarray":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nvar out = [ 0.0, 0 ];\nbase.strided.gnannsumkbn.ndarray( x.length, x, 1, 0, out, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, 1.0, NaN, NaN ];\nvar N = base.floor( x.length / 2 );\nout = [ 0.0, 0 ];\nbase.strided.gnannsumkbn.ndarray( N, x, 2, 1, out, 1, 0 )\n","base.strided.gnansum":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.gnansum( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.gnansum( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.gnansum( N, x1, stride )\n","base.strided.gnansum.ndarray":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.gnansum.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gnansum.ndarray( N, x, 2, 1 )\n","base.strided.gnansumkbn":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.gnansumkbn( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.gnansumkbn( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.gnansumkbn( N, x1, stride )\n","base.strided.gnansumkbn.ndarray":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.gnansumkbn.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gnansumkbn.ndarray( N, x, 2, 1 )\n","base.strided.gnansumkbn2":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.gnansumkbn2( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.gnansumkbn2( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.gnansumkbn2( N, x1, stride )\n","base.strided.gnansumkbn2.ndarray":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.gnansumkbn2.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gnansumkbn2.ndarray( N, x, 2, 1 )\n","base.strided.gnansumors":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.gnansumors( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.gnansumors( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.gnansumors( N, x1, stride )\n","base.strided.gnansumors.ndarray":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.gnansumors.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gnansumors.ndarray( N, x, 2, 1 )\n","base.strided.gnansumpw":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.gnansumpw( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.gnansumpw( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.gnansumpw( N, x1, stride )\n","base.strided.gnansumpw.ndarray":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.gnansumpw.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gnansumpw.ndarray( N, x, 2, 1 )\n","base.strided.gnrm2":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.gnrm2( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nbase.strided.gnrm2( 3, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.gnrm2( 3, x1, 2 )\n","base.strided.gnrm2.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.gnrm2.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nbase.strided.gnrm2.ndarray( 3, x, 2, 1 )\n","base.strided.grev":"var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ];\nbase.strided.grev( x.length, x, 1 )\nx = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.grev( N, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.grev( N, x1, 2 )\nx0\n","base.strided.grev.ndarray":"var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ];\nbase.strided.grev.ndarray( x.length, x, 1, 0 )\nx = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.grev.ndarray( N, x, 2, 1 )\n","base.strided.gscal":"var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ];\nvar alpha = 5.0;\nbase.strided.gscal( x.length, alpha, x, 1 )\nx = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ];\nbase.strided.gscal( 3, 5.0, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.gscal( 3, 5.0, x1, 2 )\nx0\n","base.strided.gscal.ndarray":"var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ];\nbase.strided.gscal.ndarray( x.length, 5.0, x, 1, 0 )\nx = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\nbase.strided.gscal.ndarray( 3, 5.0, x, 2, 1 )\n","base.strided.gsort2hp":"var x = [ 1.0, -2.0, 3.0, -4.0 ];\nvar y = [ 0.0, 1.0, 2.0, 3.0 ];\nbase.strided.gsort2hp( x.length, 1, x, 1, y, 1 )\ny\nx = [ 1.0, -2.0, 3.0, -4.0 ];\ny = [ 0.0, 1.0, 2.0, 3.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gsort2hp( N, -1, x, 2, y, 2 )\ny\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y0 = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.gsort2hp( N, 1, x1, 2, y1, 2 )\nx0\ny0\n","base.strided.gsort2hp.ndarray":"var x = [ 1.0, -2.0, 3.0, -4.0 ];\nvar y = [ 0.0, 1.0, 2.0, 3.0 ];\nbase.strided.gsort2hp.ndarray( x.length, 1, x, 1, 0, y, 1, 0 )\ny\nx = [ 1.0, -2.0, 3.0, -4.0 ];\ny = [ 0.0, 1.0, 2.0, 3.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gsort2hp.ndarray( N, 1, x, 2, 1, y, 2, 1 )\ny\n","base.strided.gsort2ins":"var x = [ 1.0, -2.0, 3.0, -4.0 ];\nvar y = [ 0.0, 1.0, 2.0, 3.0 ];\nbase.strided.gsort2ins( x.length, 1, x, 1, y, 1 )\ny\nx = [ 1.0, -2.0, 3.0, -4.0 ];\ny = [ 0.0, 1.0, 2.0, 3.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gsort2ins( N, -1, x, 2, y, 2 )\ny\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y0 = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.gsort2ins( N, 1, x1, 2, y1, 2 )\nx0\ny0\n","base.strided.gsort2ins.ndarray":"var x = [ 1.0, -2.0, 3.0, -4.0 ];\nvar y = [ 0.0, 1.0, 2.0, 3.0 ];\nbase.strided.gsort2ins.ndarray( x.length, 1, x, 1, 0, y, 1, 0 )\ny\nx = [ 1.0, -2.0, 3.0, -4.0 ];\ny = [ 0.0, 1.0, 2.0, 3.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gsort2ins.ndarray( N, 1, x, 2, 1, y, 2, 1 )\ny\n","base.strided.gsort2sh":"var x = [ 1.0, -2.0, 3.0, -4.0 ];\nvar y = [ 0.0, 1.0, 2.0, 3.0 ];\nbase.strided.gsort2sh( x.length, 1, x, 1, y, 1 )\ny\nx = [ 1.0, -2.0, 3.0, -4.0 ];\ny = [ 0.0, 1.0, 2.0, 3.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gsort2sh( N, -1, x, 2, y, 2 )\ny\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y0 = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.gsort2sh( N, 1, x1, 2, y1, 2 )\nx0\ny0\n","base.strided.gsort2sh.ndarray":"var x = [ 1.0, -2.0, 3.0, -4.0 ];\nvar y = [ 0.0, 1.0, 2.0, 3.0 ];\nbase.strided.gsort2sh.ndarray( x.length, 1, x, 1, 0, y, 1, 0 )\ny\nx = [ 1.0, -2.0, 3.0, -4.0 ];\ny = [ 0.0, 1.0, 2.0, 3.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gsort2sh.ndarray( N, 1, x, 2, 1, y, 2, 1 )\ny\n","base.strided.gsorthp":"var x = [ 1.0, -2.0, 3.0, -4.0 ];\nbase.strided.gsorthp( x.length, 1, x, 1 )\nx = [ 1.0, -2.0, 3.0, -4.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gsorthp( N, -1, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.gsorthp( N, 1, x1, 2 )\nx0\n","base.strided.gsorthp.ndarray":"var x = [ 1.0, -2.0, 3.0, -4.0 ];\nbase.strided.gsorthp.ndarray( x.length, 1, x, 1, 0 )\nx = [ 1.0, -2.0, 3.0, -4.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gsorthp.ndarray( N, 1, x, 2, 1 )\n","base.strided.gsortins":"var x = [ 1.0, -2.0, 3.0, -4.0 ];\nbase.strided.gsortins( x.length, 1, x, 1 )\nx = [ 1.0, -2.0, 3.0, -4.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gsortins( N, -1, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.gsortins( N, 1, x1, 2 )\nx0\n","base.strided.gsortins.ndarray":"var x = [ 1.0, -2.0, 3.0, -4.0 ];\nbase.strided.gsortins.ndarray( x.length, 1, x, 1, 0 )\nx = [ 1.0, -2.0, 3.0, -4.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gsortins.ndarray( N, 1, x, 2, 1 )\n","base.strided.gsortsh":"var x = [ 1.0, -2.0, 3.0, -4.0 ];\nbase.strided.gsortsh( x.length, 1, x, 1 )\nx = [ 1.0, -2.0, 3.0, -4.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gsortsh( N, -1, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.gsortsh( N, 1, x1, 2 )\nx0\n","base.strided.gsortsh.ndarray":"var x = [ 1.0, -2.0, 3.0, -4.0 ];\nbase.strided.gsortsh.ndarray( x.length, 1, x, 1, 0 )\nx = [ 1.0, -2.0, 3.0, -4.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gsortsh.ndarray( N, 1, x, 2, 1 )\n","base.strided.gsum":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.gsum( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.gsum( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.gsum( N, x1, stride )\n","base.strided.gsum.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.gsum.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gsum.ndarray( N, x, 2, 1 )\n","base.strided.gsumkbn":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.gsumkbn( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.gsumkbn( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.gsumkbn( N, x1, stride )\n","base.strided.gsumkbn.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.gsumkbn.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gsumkbn.ndarray( N, x, 2, 1 )\n","base.strided.gsumkbn2":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.gsumkbn2( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.gsumkbn2( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.gsumkbn2( N, x1, stride )\n","base.strided.gsumkbn2.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.gsumkbn2.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gsumkbn2.ndarray( N, x, 2, 1 )\n","base.strided.gsumors":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.gsumors( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.gsumors( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.gsumors( N, x1, stride )\n","base.strided.gsumors.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.gsumors.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gsumors.ndarray( N, x, 2, 1 )\n","base.strided.gsumpw":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.gsumpw( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.gsumpw( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.gsumpw( N, x1, stride )\n","base.strided.gsumpw.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.gsumpw.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.gsumpw.ndarray( N, x, 2, 1 )\n","base.strided.gswap":"var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\nvar y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\nbase.strided.gswap( x.length, x, 1, y, 1 )\nx = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\ny = [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ];\nbase.strided.gswap( 3, x, -2, y, 1 )\nvar x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\nvar y0 = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nbase.strided.gswap( 3, x1, -2, y1, 1 )\ny0\n","base.strided.gswap.ndarray":"var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\nvar y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\nbase.strided.gswap.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\ny = [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ];\nbase.strided.gswap.ndarray( 3, x, 2, 1, y, -1, y.length-1 )\n","base.strided.mapBy":"var x = [ 1.0, -2.0, 3.0, -4.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v * 2.0; };\nbase.strided.mapBy( x.length, x, 1, y, 1, base.abs, clbk )\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nbase.strided.mapBy( 2, x, 2, y, -1, base.abs, clbk )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.mapBy( 2, x1, -2, y1, 1, base.abs, clbk )\ny0\n","base.strided.mapBy.ndarray":"var x = [ 1.0, -2.0, 3.0, -4.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v * 2.0; };\nbase.strided.mapBy.ndarray( x.length, x, 1, 0, y, 1, 0, base.abs, clbk )\nx = [ 1.0, -2.0, 3.0, -4.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nbase.strided.mapBy.ndarray( 2, x, 2, 1, y, -1, y.length-1, base.abs, clbk )\n","base.strided.mapBy2":"var x = [ 1.0, -2.0, 3.0, -4.0 ];\nvar y = [ 1.0, 1.0, 2.0, 2.0 ];\nvar z = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { v[0] *= 2.0; v[1] *= 2.0; return v; };\nbase.strided.mapBy2( x.length, x, 1, y, 1, z, 1, base.add, clbk )\nz = [ 0.0, 0.0, 0.0, 0.0 ];\nbase.strided.mapBy2( 2, x, 2, y, -1, z, -1, base.add, clbk )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar y0 = new Float64Array( [ 1.0, 1.0, 2.0, 2.0 ] );\nvar z0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nvar z1 = new Float64Array( z0.buffer, z0.BYTES_PER_ELEMENT*2 );\nbase.strided.mapBy2( 2, x1, -2, y1, 1, z1, 1, base.add, clbk )\nz0\n","base.strided.mapBy2.ndarray":"var x = [ 1.0, -2.0, 3.0, -4.0 ];\nvar y = [ 1.0, 1.0, 2.0, 2.0 ];\nvar z = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { v[0] *= 2.0; v[1] *= 2.0; return v; };\nbase.strided.mapBy2.ndarray( 4, x, 1, 0, y, 1, 0, z, 1, 0, base.add, clbk )\nx = [ 1.0, -2.0, 3.0, -4.0 ];\ny = [ 1.0, 1.0, 2.0, 2.0 ];\nz = [ 0.0, 0.0, 0.0, 0.0 ];\nbase.strided.mapBy2.ndarray( 2, x, 2, 1, y, -1, 3, z, 1, 0, base.add, clbk )\n","base.strided.max":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.max( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.max( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.max( N, x1, stride )\n","base.strided.max.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.max.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.max.ndarray( N, x, 2, 1 )\n","base.strided.maxabs":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.maxabs( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.maxabs( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.maxabs( N, x1, stride )\n","base.strided.maxabs.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.maxabs.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.maxabs.ndarray( N, x, 2, 1 )\n","base.strided.maxBy":"function accessor( v ) { return v * 2.0; };\nvar x = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ];\nbase.strided.maxBy( x.length, x, 1, accessor )\nx = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.maxBy( N, x, 2, accessor )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.maxBy( N, x1, 2, accessor )\n","base.strided.maxBy.ndarray":"function accessor( v ) { return v * 2.0; };\nvar x = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ];\nbase.strided.maxBy.ndarray( x.length, x, 1, 0, accessor )\nx = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.maxBy.ndarray( N, x, 2, 1, accessor )\n","base.strided.maxsorted":"var x = [ 1.0, 2.0, 3.0 ];\nbase.strided.maxsorted( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.maxsorted( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 3.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.maxsorted( N, x1, stride )\n","base.strided.maxsorted.ndarray":"var x = [ 1.0, 2.0, 3.0 ];\nbase.strided.maxsorted.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, 3.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.maxsorted.ndarray( N, x, 2, 1 )\n","base.strided.maxViewBufferIndex":"var idx = base.strided.maxViewBufferIndex( 3, 2, 10 )\n","base.strided.mean":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.mean( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.mean( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.mean( N, x1, stride )\n","base.strided.mean.ndarray":"var x =[ 1.0, -2.0, 2.0 ];\nbase.strided.mean.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.mean.ndarray( N, x, 2, 1 )\n","base.strided.meankbn":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.meankbn( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.meankbn( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.meankbn( N, x1, stride )\n","base.strided.meankbn.ndarray":"var x =[ 1.0, -2.0, 2.0 ];\nbase.strided.meankbn.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.meankbn.ndarray( N, x, 2, 1 )\n","base.strided.meankbn2":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.meankbn2( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.meankbn2( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.meankbn2( N, x1, stride )\n","base.strided.meankbn2.ndarray":"var x =[ 1.0, -2.0, 2.0 ];\nbase.strided.meankbn2.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.meankbn2.ndarray( N, x, 2, 1 )\n","base.strided.meanors":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.meanors( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.meanors( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.meanors( N, x1, stride )\n","base.strided.meanors.ndarray":"var x =[ 1.0, -2.0, 2.0 ];\nbase.strided.meanors.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.meanors.ndarray( N, x, 2, 1 )\n","base.strided.meanpn":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.meanpn( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.meanpn( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.meanpn( N, x1, stride )\n","base.strided.meanpn.ndarray":"var x =[ 1.0, -2.0, 2.0 ];\nbase.strided.meanpn.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.meanpn.ndarray( N, x, 2, 1 )\n","base.strided.meanpw":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.meanpw( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.meanpw( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.meanpw( N, x1, stride )\n","base.strided.meanpw.ndarray":"var x =[ 1.0, -2.0, 2.0 ];\nbase.strided.meanpw.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.meanpw.ndarray( N, x, 2, 1 )\n","base.strided.meanwd":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.meanwd( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.meanwd( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.meanwd( N, x1, stride )\n","base.strided.meanwd.ndarray":"var x =[ 1.0, -2.0, 2.0 ];\nbase.strided.meanwd.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.meanwd.ndarray( N, x, 2, 1 )\n","base.strided.mediansorted":"var x = [ 1.0, 2.0, 3.0 ];\nbase.strided.mediansorted( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.mediansorted( N, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 3.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.mediansorted( N, x1, 2 )\n","base.strided.mediansorted.ndarray":"var x = [ 1.0, 2.0, 3.0 ];\nbase.strided.mediansorted.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, 3.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.mediansorted.ndarray( N, x, 2, 1 )\n","base.strided.metaDataProps":"var meta = { 'nargs': 7, 'nin': 1, 'nout': 1 };\nvar dt = [ 'float64', 'float64' ];\nvar obj = {};\nbase.strided.metaDataProps( meta, dt, obj, false );\nobj.nargs\nobj.nin\nobj.nout\nobj.types\n","base.strided.min":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.min( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.min( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.min( N, x1, stride )\n","base.strided.min.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.min.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.min.ndarray( N, x, 2, 1 )\n","base.strided.minabs":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.minabs( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.minabs( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.minabs( N, x1, stride )\n","base.strided.minabs.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.minabs.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.minabs.ndarray( N, x, 2, 1 )\n","base.strided.minBy":"function accessor( v ) { return v * 2.0; };\nvar x = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ];\nbase.strided.minBy( x.length, x, 1, accessor )\nx = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.minBy( N, x, 2, accessor )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.minBy( N, x1, 2, accessor )\n","base.strided.minBy.ndarray":"function accessor( v ) { return v * 2.0; };\nvar x = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ];\nbase.strided.minBy.ndarray( x.length, x, 1, 0, accessor )\nx = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.minBy.ndarray( N, x, 2, 1, accessor )\n","base.strided.minsorted":"var x = [ 1.0, 2.0, 3.0 ];\nbase.strided.minsorted( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.minsorted( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 3.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.minsorted( N, x1, stride )\n","base.strided.minsorted.ndarray":"var x = [ 1.0, 2.0, 3.0 ];\nbase.strided.minsorted.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, 3.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.minsorted.ndarray( N, x, 2, 1 )\n","base.strided.minViewBufferIndex":"var idx = base.strided.minViewBufferIndex( 3, -2, 10 )\n","base.strided.mskmax":"var x = [ 1.0, -2.0, 4.0, 2.0 ];\nvar mask = [ 0, 0, 1, 0 ];\nbase.strided.mskmax( x.length, x, 1, mask, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, 4.0 ];\nmask = [ 0, 0, 0, 0, 0, 0, 1 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.mskmax( N, x, 2, mask, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, 4.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar mask0 = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar mask1 = new Uint8Array( mask0.buffer, mask0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.mskmax( N, x1, 2, mask1, 2 )\n","base.strided.mskmax.ndarray":"var x = [ 1.0, -2.0, 2.0, 4.0 ];\nvar mask = [ 0, 0, 0, 1 ];\nbase.strided.mskmax.ndarray( x.length, x, 1, 0, mask, 1, 0 )\nx = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, 4.0 ];\nmask = [ 0, 0, 0, 0, 0, 0, 1 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.mskmax.ndarray( N, x, 2, 1, mask, 2, 1 )\n","base.strided.mskmin":"var x = [ 1.0, -2.0, -4.0, 2.0 ];\nvar mask = [ 0, 0, 1, 0 ];\nbase.strided.mskmin( x.length, x, 1, mask, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, -4.0 ];\nmask = [ 0, 0, 0, 0, 0, 0, 1 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.mskmin( N, x, 2, mask, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, -4.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar mask0 = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar mask1 = new Uint8Array( mask0.buffer, mask0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.mskmin( N, x1, 2, mask1, 2 )\n","base.strided.mskmin.ndarray":"var x = [ 1.0, -2.0, 2.0, -4.0 ];\nvar mask = [ 0, 0, 0, 1 ];\nbase.strided.mskmin.ndarray( x.length, x, 1, 0, mask, 1, 0 )\nx = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, -4.0 ];\nmask = [ 0, 0, 0, 0, 0, 0, 1 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.mskmin.ndarray( N, x, 2, 1, mask, 2, 1 )\n","base.strided.mskrange":"var x = [ 1.0, -2.0, 4.0, 2.0 ];\nvar mask = [ 0, 0, 1, 0 ];\nbase.strided.mskrange( x.length, x, 1, mask, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, 4.0 ];\nmask = [ 0, 0, 0, 0, 0, 0, 1 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.mskrange( N, x, 2, mask, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, 4.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar mask0 = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar mask1 = new Uint8Array( mask0.buffer, mask0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.mskrange( N, x1, 2, mask1, 2 )\n","base.strided.mskrange.ndarray":"var x = [ 1.0, -2.0, 2.0, 4.0 ];\nvar mask = [ 0, 0, 0, 1 ];\nbase.strided.mskrange.ndarray( x.length, x, 1, 0, mask, 1, 0 )\nx = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, 4.0 ];\nmask = [ 0, 0, 0, 0, 0, 0, 1 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.mskrange.ndarray( N, x, 2, 1, mask, 2, 1 )\n","base.strided.mskunary":"var x = new Float64Array( [ -1.0, -2.0, -3.0, -4.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar shape = [ x.length ];\nvar strides = [ 1, 1, 1 ];\nbase.strided.mskunary( [ x, m, y ], shape, strides, base.abs );\ny\n","base.strided.mskunary.ndarray":"var x = new Float64Array( [ -1.0, -2.0, -3.0, -4.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar shape = [ x.length ];\nvar strides = [ 1, 1, 1 ];\nvar offsets = [ 0, 0, 0 ];\nbase.strided.mskunary.ndarray( [ x, m, y ], shape, strides, offsets, base.abs );\ny\n","base.strided.mskunaryDtypeSignatures":"var dt = strided.dataTypes();\nvar out = base.strided.mskunaryDtypeSignatures( dt, dt )\n","base.strided.mskunarySignatureCallbacks":"var dt = strided.dataTypes();\nvar sigs = base.strided.mskunaryDtypeSignatures( dt, dt );\nvar t = {\n 'default': base.identity,\n 'complex64': base.cidentityf,\n 'complex128': base.cidentity\n };\nvar out = base.strided.mskunarySignatureCallbacks( t, sigs )\n","base.strided.nanmax":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanmax( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.nanmax( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.nanmax( N, x1, stride )\n","base.strided.nanmax.ndarray":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanmax.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanmax.ndarray( N, x, 2, 1 )\n","base.strided.nanmaxabs":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanmaxabs( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.nanmaxabs( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.nanmaxabs( N, x1, stride )\n","base.strided.nanmaxabs.ndarray":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanmaxabs.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanmaxabs.ndarray( N, x, 2, 1 )\n","base.strided.nanmaxBy":"function accessor( v ) { return v * 2.0; };\nvar x = [ -2.0, 1.0, 3.0, -5.0, 4.0, NaN, -1.0, -3.0 ];\nbase.strided.nanmaxBy( x.length, x, 1, accessor )\nx = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanmaxBy( N, x, 2, accessor )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.nanmaxBy( N, x1, 2, accessor )\n","base.strided.nanmaxBy.ndarray":"function accessor( v ) { return v * 2.0; };\nvar x = [ -2.0, 1.0, 3.0, -5.0, 4.0, NaN, -1.0, -3.0 ];\nbase.strided.nanmaxBy.ndarray( x.length, x, 1, 0, accessor )\nx = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanmaxBy.ndarray( N, x, 2, 1, accessor )\n","base.strided.nanmean":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanmean( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.nanmean( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.nanmean( N, x1, stride )\n","base.strided.nanmean.ndarray":"var x =[ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanmean.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanmean.ndarray( N, x, 2, 1 )\n","base.strided.nanmeanors":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanmeanors( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.nanmeanors( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.nanmeanors( N, x1, stride )\n","base.strided.nanmeanors.ndarray":"var x =[ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanmeanors.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanmeanors.ndarray( N, x, 2, 1 )\n","base.strided.nanmeanpn":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanmeanpn( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.nanmeanpn( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.nanmeanpn( N, x1, stride )\n","base.strided.nanmeanpn.ndarray":"var x =[ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanmeanpn.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanmeanpn.ndarray( N, x, 2, 1 )\n","base.strided.nanmeanwd":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanmeanwd( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.nanmeanwd( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.nanmeanwd( N, x1, stride )\n","base.strided.nanmeanwd.ndarray":"var x =[ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanmeanwd.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanmeanwd.ndarray( N, x, 2, 1 )\n","base.strided.nanmin":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanmin( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.nanmin( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.nanmin( N, x1, stride )\n","base.strided.nanmin.ndarray":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanmin.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanmin.ndarray( N, x, 2, 1 )\n","base.strided.nanminabs":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanminabs( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.nanminabs( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.nanminabs( N, x1, stride )\n","base.strided.nanminabs.ndarray":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanminabs.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanminabs.ndarray( N, x, 2, 1 )\n","base.strided.nanminBy":"function accessor( v ) { return v * 2.0; };\nvar x = [ -2.0, 1.0, 3.0, -5.0, 4.0, NaN, -1.0, -3.0 ];\nbase.strided.nanminBy( x.length, x, 1, accessor )\nx = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, NaN, -3.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanminBy( N, x, 2, accessor )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.nanminBy( N, x1, 2, accessor )\n","base.strided.nanminBy.ndarray":"function accessor( v ) { return v * 2.0; };\nvar x = [ -2.0, 1.0, 3.0, -5.0, 4.0, NaN, -1.0, -3.0 ];\nbase.strided.nanminBy.ndarray( x.length, x, 1, 0, accessor )\nx = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanminBy.ndarray( N, x, 2, 1, accessor )\n","base.strided.nanmskmax":"var x = [ 1.0, -2.0, 4.0, 2.0, NaN ];\nvar mask = [ 0, 0, 1, 0, 0 ];\nbase.strided.nanmskmax( x.length, x, 1, mask, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, 4.0 ];\nmask = [ 0, 0, 0, 0, 0, 0, 1 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanmskmax( N, x, 2, mask, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, 4.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar mask0 = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar mask1 = new Uint8Array( mask0.buffer, mask0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.nanmskmax( N, x1, 2, mask1, 2 )\n","base.strided.nanmskmax.ndarray":"var x = [ 1.0, -2.0, 2.0, 4.0, NaN ];\nvar mask = [ 0, 0, 0, 1, 0 ];\nbase.strided.nanmskmax.ndarray( x.length, x, 1, 0, mask, 1, 0 )\nx = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, 4.0 ];\nmask = [ 0, 0, 0, 0, 0, 0, 1 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanmskmax.ndarray( N, x, 2, 1, mask, 2, 1 )\n","base.strided.nanmskmin":"var x = [ 1.0, -2.0, -4.0, 2.0, NaN ];\nvar mask = [ 0, 0, 1, 0, 0 ];\nbase.strided.nanmskmin( x.length, x, 1, mask, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, -4.0 ];\nmask = [ 0, 0, 0, 0, 0, 0, 1 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanmskmin( N, x, 2, mask, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, -4.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar mask0 = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar mask1 = new Uint8Array( mask0.buffer, mask0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.nanmskmin( N, x1, 2, mask1, 2 )\n","base.strided.nanmskmin.ndarray":"var x = [ 1.0, -2.0, 2.0, -4.0, NaN ];\nvar mask = [ 0, 0, 0, 1, 0 ];\nbase.strided.nanmskmin.ndarray( x.length, x, 1, 0, mask, 1, 0 )\nx = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, -4.0 ];\nmask = [ 0, 0, 0, 0, 0, 0, 1 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanmskmin.ndarray( N, x, 2, 1, mask, 2, 1 )\n","base.strided.nanmskrange":"var x = [ 1.0, -2.0, 4.0, 2.0, NaN ];\nvar mask = [ 0, 0, 1, 0, 0 ];\nbase.strided.nanmskrange( x.length, x, 1, mask, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, 4.0 ];\nmask = [ 0, 0, 0, 0, 0, 0, 1 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanmskrange( N, x, 2, mask, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, 4.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar mask0 = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar mask1 = new Uint8Array( mask0.buffer, mask0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.nanmskrange( N, x1, 2, mask1, 2 )\n","base.strided.nanmskrange.ndarray":"var x = [ 1.0, -2.0, 2.0, 4.0, NaN ];\nvar mask = [ 0, 0, 0, 1, 0 ];\nbase.strided.nanmskrange.ndarray( x.length, x, 1, 0, mask, 1, 0 )\nx = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, 4.0 ];\nmask = [ 0, 0, 0, 0, 0, 0, 1 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanmskrange.ndarray( N, x, 2, 1, mask, 2, 1 )\n","base.strided.nanrange":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanrange( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.nanrange( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.nanrange( N, x1, stride )\n","base.strided.nanrange.ndarray":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanrange.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanrange.ndarray( N, x, 2, 1 )\n","base.strided.nanrangeBy":"function accessor( v ) { return v * 2.0; };\nvar x = [ -2.0, 1.0, 3.0, -5.0, 4.0, NaN, -1.0, -3.0 ];\nbase.strided.nanrangeBy( x.length, x, 1, accessor )\nx = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0, 1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanrangeBy( N, x, 2, accessor )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.nanrangeBy( N, x1, 2, accessor )\n","base.strided.nanrangeBy.ndarray":"function accessor( v ) { return v * 2.0; };\nvar x = [ -2.0, 1.0, 3.0, -5.0, 4.0, NaN, -1.0, -3.0 ];\nbase.strided.nanrangeBy.ndarray( x.length, x, 1, 0, accessor )\nx = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanrangeBy.ndarray( N, x, 2, 1, accessor )\n","base.strided.nanstdev":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanstdev( x.length, 1, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanstdev( N, 1, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.nanstdev( N, 1, x1, 2 )\n","base.strided.nanstdev.ndarray":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanstdev.ndarray( x.length, 1, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanstdev.ndarray( N, 1, x, 2, 1 )\n","base.strided.nanstdevch":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanstdevch( x.length, 1, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanstdevch( N, 1, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.nanstdevch( N, 1, x1, 2 )\n","base.strided.nanstdevch.ndarray":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanstdevch.ndarray( x.length, 1, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanstdevch.ndarray( N, 1, x, 2, 1 )\n","base.strided.nanstdevpn":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanstdevpn( x.length, 1, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanstdevpn( N, 1, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.nanstdevpn( N, 1, x1, 2 )\n","base.strided.nanstdevpn.ndarray":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanstdevpn.ndarray( x.length, 1, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanstdevpn.ndarray( N, 1, x, 2, 1 )\n","base.strided.nanstdevtk":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanstdevtk( x.length, 1, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanstdevtk( N, 1, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.nanstdevtk( N, 1, x1, 2 )\n","base.strided.nanstdevtk.ndarray":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanstdevtk.ndarray( x.length, 1, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanstdevtk.ndarray( N, 1, x, 2, 1 )\n","base.strided.nanstdevwd":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanstdevwd( x.length, 1, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanstdevwd( N, 1, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.nanstdevwd( N, 1, x1, 2 )\n","base.strided.nanstdevwd.ndarray":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanstdevwd.ndarray( x.length, 1, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanstdevwd.ndarray( N, 1, x, 2, 1 )\n","base.strided.nanstdevyc":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanstdevyc( x.length, 1, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanstdevyc( N, 1, x, 2 )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.nanstdevyc( N, 1, x1, 2 )\n","base.strided.nanstdevyc.ndarray":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanstdevyc.ndarray( x.length, 1, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanstdevyc.ndarray( N, 1, x, 2, 1 )\n","base.strided.nanvariance":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanvariance( x.length, 1, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.nanvariance( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.nanvariance( N, 1, x1, stride )\n","base.strided.nanvariance.ndarray":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanvariance.ndarray( x.length, 1, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanvariance.ndarray( N, 1, x, 2, 1 )\n","base.strided.nanvariancech":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanvariancech( x.length, 1, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.nanvariancech( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.nanvariancech( N, 1, x1, stride )\n","base.strided.nanvariancech.ndarray":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanvariancech.ndarray( x.length, 1, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanvariancech.ndarray( N, 1, x, 2, 1 )\n","base.strided.nanvariancepn":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanvariancepn( x.length, 1, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.nanvariancepn( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.nanvariancepn( N, 1, x1, stride )\n","base.strided.nanvariancepn.ndarray":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanvariancepn.ndarray( x.length, 1, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanvariancepn.ndarray( N, 1, x, 2, 1 )\n","base.strided.nanvariancetk":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanvariancetk( x.length, 1, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.nanvariancetk( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.nanvariancetk( N, 1, x1, stride )\n","base.strided.nanvariancetk.ndarray":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanvariancetk.ndarray( x.length, 1, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanvariancetk.ndarray( N, 1, x, 2, 1 )\n","base.strided.nanvariancewd":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanvariancewd( x.length, 1, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.nanvariancewd( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.nanvariancewd( N, 1, x1, stride )\n","base.strided.nanvariancewd.ndarray":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanvariancewd.ndarray( x.length, 1, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanvariancewd.ndarray( N, 1, x, 2, 1 )\n","base.strided.nanvarianceyc":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanvarianceyc( x.length, 1, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.nanvarianceyc( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.nanvarianceyc( N, 1, x1, stride )\n","base.strided.nanvarianceyc.ndarray":"var x = [ 1.0, -2.0, NaN, 2.0 ];\nbase.strided.nanvarianceyc.ndarray( x.length, 1, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.nanvarianceyc.ndarray( N, 1, x, 2, 1 )\n","base.strided.nullary":"var x = new Float64Array( [ -1.0, -2.0, -3.0, -4.0 ] );\nvar shape = [ x.length ];\nvar strides = [ 1, 1 ];\nvar fcn = constantFunction( 3.0 );\nbase.strided.nullary( [ x ], shape, strides, fcn );\nx\n","base.strided.nullary.ndarray":"var x = new Float64Array( [ -1.0, -2.0, -3.0, -4.0 ] );\nvar shape = [ x.length ];\nvar strides = [ 1 ];\nvar offsets = [ 0 ];\nvar fcn = constantFunction( 3.0 );\nbase.strided.nullary.ndarray( [ x ], shape, strides, offsets, fcn );\nx\n","base.strided.offsetView":"var x = new Float64Array( 10 );\nvar out = base.strided.offsetView( x, 0 )\nvar bool = ( out.buffer === x.buffer )\n","base.strided.quaternary":"var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar w = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar u = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar shape = [ x.length ];\nvar strides = [ 1, 1, 1, 1, 1 ];\nfunction f( x, y, z, w ) { return x + y + z + w; };\nbase.strided.quaternary( [ x, y, z, w, u ], shape, strides, f );\nu\n","base.strided.quaternary.ndarray":"var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar w = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar u = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar shape = [ x.length ];\nvar strides = [ 1, 1, 1, 1, 1 ];\nvar offsets = [ 0, 0, 0, 0, 0 ];\nfunction f( x, y, z, w ) { return x + y + z + w; };\nbase.strided.quaternary.ndarray( [ x, y, z, w, u ], shape, strides, offsets, f );\nu\n","base.strided.quinary":"var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar w = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar u = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar v = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar shape = [ x.length ];\nvar strides = [ 1, 1, 1, 1, 1, 1 ];\nfunction f( x, y, z, w, u ) { return x + y + z + w + u; };\nbase.strided.quinary( [ x, y, z, w, u, v ], shape, strides, f );\nv\n","base.strided.quinary.ndarray":"var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar w = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar u = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar v = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar shape = [ x.length ];\nvar strides = [ 1, 1, 1, 1, 1, 1 ];\nvar offsets = [ 0, 0, 0, 0, 0, 0 ];\nfunction f( x, y, z, w, u ) { return x + y + z + w + u; };\nbase.strided.quinary.ndarray( [ x, y, z, w, u, v ], shape, strides, offsets, f );\nv\n","base.strided.range":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.range( x.length, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.range( N, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.range( N, x1, stride )\n","base.strided.range.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.range.ndarray( x.length, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.range.ndarray( N, x, 2, 1 )\n","base.strided.rangeBy":"function accessor( v ) { return v * 2.0; };\nvar x = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ];\nbase.strided.rangeBy( x.length, x, 1, accessor )\nx = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.rangeBy( N, x, 2, accessor )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.rangeBy( N, x1, 2, accessor )\n","base.strided.rangeBy.ndarray":"function accessor( v ) { return v * 2.0; };\nvar x = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ];\nbase.strided.rangeBy.ndarray( x.length, x, 1, 0, accessor )\nx = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.rangeBy.ndarray( N, x, 2, 1, accessor )\n","base.strided.reinterpretComplex":"var x = new Complex128Array( 10 );\nvar out = base.strided.reinterpretComplex( x, 0 )\nvar bool = ( out.buffer === x.buffer )\nx = new Complex64Array( 10 );\nout = base.strided.reinterpretComplex( x, 0 )\nbool = ( out.buffer === x.buffer )\n","base.strided.reinterpretComplex64":"var x = new Complex64Array( 10 );\nvar out = base.strided.reinterpretComplex64( x, 0 )\nvar bool = ( out.buffer === x.buffer )\n","base.strided.reinterpretComplex128":"var x = new Complex128Array( 10 );\nvar out = base.strided.reinterpretComplex128( x, 0 )\nvar bool = ( out.buffer === x.buffer )\n","base.strided.sabs":"var x = new Float32Array( [ -1.0, -2.0, -3.0, -4.0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.sabs( x.length, x, 1, y, 1 )\nvar N = base.floor( x.length / 2 );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.sabs( N, x, 2, y, -1 )\nvar x0 = new Float32Array( [ -1.0, -2.0, -3.0, -4.0 ] );\nvar y0 = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nN = base.floor( x0.length / 2 );\nbase.strided.sabs( N, x1, -2, y1, 1 )\ny0\n","base.strided.sabs.ndarray":"var x = new Float32Array( [ -1.0, -2.0, -3.0, -4.0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.sabs.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float32Array( [ -1.0, -2.0, -3.0, -4.0 ] );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.sabs.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.sabs2":"var x = new Float32Array( [ -1.0, -2.0, -3.0, -4.0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.sabs2( x.length, x, 1, y, 1 )\nvar N = base.floor( x.length / 2 );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.sabs2( N, x, 2, y, -1 )\nvar x0 = new Float32Array( [ -1.0, -2.0, -3.0, -4.0 ] );\nvar y0 = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nN = base.floor( x0.length / 2 );\nbase.strided.sabs2( N, x1, -2, y1, 1 )\ny0\n","base.strided.sabs2.ndarray":"var x = new Float32Array( [ -1.0, -2.0, -3.0, -4.0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.sabs2.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float32Array( [ -1.0, -2.0, -3.0, -4.0 ] );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.sabs2.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.sapx":"var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ] );\nbase.strided.sapx( x.length, 5.0, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ] );\nbase.strided.sapx( 3, 5.0, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.sapx( 3, 5.0, x1, 2 )\nx0\n","base.strided.sapx.ndarray":"var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ] );\nbase.strided.sapx.ndarray( x.length, 5.0, x, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nbase.strided.sapx.ndarray( 3, 5.0, x, 2, 1 )\n","base.strided.sapxsum":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sapxsum( x.length, 5.0, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nbase.strided.sapxsum( 3, 5.0, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.sapxsum( 3, 5.0, x1, 2 )\n","base.strided.sapxsum.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sapxsum.ndarray( x.length, 5.0, x, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.sapxsum.ndarray( 3, 5.0, x, 2, 1 )\n","base.strided.sapxsumkbn":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sapxsumkbn( x.length, 5.0, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nbase.strided.sapxsumkbn( 3, 5.0, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.sapxsumkbn( 3, 5.0, x1, 2 )\n","base.strided.sapxsumkbn.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sapxsumkbn.ndarray( x.length, 5.0, x, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.sapxsumkbn.ndarray( 3, 5.0, x, 2, 1 )\n","base.strided.sapxsumkbn2":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sapxsumkbn2( x.length, 5.0, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nbase.strided.sapxsumkbn2( 3, 5.0, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.sapxsumkbn2( 3, 5.0, x1, 2 )\n","base.strided.sapxsumkbn2.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sapxsumkbn2.ndarray( x.length, 5.0, x, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.sapxsumkbn2.ndarray( 3, 5.0, x, 2, 1 )\n","base.strided.sapxsumors":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sapxsumors( x.length, 5.0, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.sapxsumors( N, 5.0, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.sapxsumors( N, 5.0, x1, stride )\n","base.strided.sapxsumors.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sapxsumors.ndarray( x.length, 5.0, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.sapxsumors.ndarray( N, 5.0, x, 2, 1 )\n","base.strided.sapxsumpw":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sapxsumpw( x.length, 5.0, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar stride = 2;\nbase.strided.sapxsumpw( 3, 5.0, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nstride = 2;\nbase.strided.sapxsumpw( 3, 5.0, x1, stride )\n","base.strided.sapxsumpw.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sapxsumpw.ndarray( x.length, 5.0, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.sapxsumpw.ndarray( 3, 5.0, x, 2, 1 )\n","base.strided.sasum":"var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0 ] );\nvar s = base.strided.sasum( x.length, x, 1 )\ns = base.strided.sasum( 3, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\ns = base.strided.sasum( 3, x1, 2 )\n","base.strided.sasum.ndarray":"var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0 ] );\nvar s = base.strided.sasum.ndarray( x.length, x, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\ns = base.strided.sasum.ndarray( 3, x, -1, x.length-1 )\n","base.strided.sasumpw":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sasumpw( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nbase.strided.sasumpw( 3, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.sasumpw( 3, x1, 2 )\n","base.strided.sasumpw.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sasumpw.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.sasumpw.ndarray( 3, x, 2, 1 )\n","base.strided.saxpy":"var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\nvar y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\nvar alpha = 5.0;\nbase.strided.saxpy( x.length, alpha, x, 1, y, 1 )\nx = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\nbase.strided.saxpy( 3, alpha, x, 2, y, -1 )\nvar x0 = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\nvar y0 = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nbase.strided.saxpy( 3, 5.0, x1, -2, y1, 1 )\ny0\n","base.strided.saxpy.ndarray":"var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\nvar y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\nvar alpha = 5.0;\nbase.strided.saxpy.ndarray( x.length, alpha, x, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\nbase.strided.saxpy.ndarray( 3, alpha, x, 2, 1, y, -1, y.length-1 )\n","base.strided.scbrt":"var x = new Float32Array( [ 0.0, 1.0, 8.0, 27.0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.scbrt( x.length, x, 1, y, 1 )\nvar N = base.floor( x.length / 2 );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.scbrt( N, x, 2, y, -1 )\nvar x0 = new Float32Array( [ 0.0, 1.0, 8.0, 27.0 ] );\nvar y0 = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nN = base.floor( x0.length / 2 );\nbase.strided.scbrt( N, x1, -2, y1, 1 )\ny0\n","base.strided.scbrt.ndarray":"var x = new Float32Array( [ 0.0, 1.0, 8.0, 27.0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.scbrt.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 0.0, 1.0, 8.0, 27.0 ] );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.scbrt.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.sceil":"var x = new Float32Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.sceil( x.length, x, 1, y, 1 )\nvar N = base.floor( x.length / 2 );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.sceil( N, x, 2, y, -1 )\nvar x0 = new Float32Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar y0 = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nN = base.floor( x0.length / 2 );\nbase.strided.sceil( N, x1, -2, y1, 1 )\ny0\n","base.strided.sceil.ndarray":"var x = new Float32Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.sceil.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 1.1, 2.5, -3.5, 4.0 ] );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.sceil.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.scopy":"var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\nvar y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\nbase.strided.scopy( x.length, x, 1, y, 1 )\nx = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\nbase.strided.scopy( 3, x, -2, y, 1 )\nvar x0 = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\nvar y0 = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nbase.strided.scopy( 3, x1, -2, y1, 1 )\ny0\n","base.strided.scopy.ndarray":"var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\nvar y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\nbase.strided.scopy.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\nbase.strided.scopy.ndarray( 3, x, 2, 1, y, -1, y.length-1 )\n","base.strided.scumax":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float32Array( x.length );\nbase.strided.scumax( x.length, x, 1, y, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\ny = new Float32Array( x.length );\nvar N = base.floor( x.length / 2 );\nbase.strided.scumax( N, x, 2, y, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar y0 = new Float32Array( x0.length );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nN = base.floor( x0.length / 2 );\nbase.strided.scumax( N, x1, 2, y1, 1 )\ny0\n","base.strided.scumax.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float32Array( x.length );\nbase.strided.scumax.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\ny = new Float32Array( x.length );\nvar N = base.floor( x.length / 2 );\nbase.strided.scumax.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.scumaxabs":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float32Array( x.length );\nbase.strided.scumaxabs( x.length, x, 1, y, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\ny = new Float32Array( x.length );\nvar N = base.floor( x.length / 2 );\nbase.strided.scumaxabs( N, x, 2, y, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar y0 = new Float32Array( x0.length );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nN = base.floor( x0.length / 2 );\nbase.strided.scumaxabs( N, x1, 2, y1, 1 )\ny0\n","base.strided.scumaxabs.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float32Array( x.length );\nbase.strided.scumaxabs.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\ny = new Float32Array( x.length );\nvar N = base.floor( x.length / 2 );\nbase.strided.scumaxabs.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.scumin":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float32Array( x.length );\nbase.strided.scumin( x.length, x, 1, y, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\ny = new Float32Array( x.length );\nvar N = base.floor( x.length / 2 );\nbase.strided.scumin( N, x, 2, y, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar y0 = new Float32Array( x0.length );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nN = base.floor( x0.length / 2 );\nbase.strided.scumin( N, x1, 2, y1, 1 )\ny0\n","base.strided.scumin.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float32Array( x.length );\nbase.strided.scumin.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\ny = new Float32Array( x.length );\nvar N = base.floor( x.length / 2 );\nbase.strided.scumin.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.scuminabs":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float32Array( x.length );\nbase.strided.scuminabs( x.length, x, 1, y, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\ny = new Float32Array( x.length );\nvar N = base.floor( x.length / 2 );\nbase.strided.scuminabs( N, x, 2, y, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar y0 = new Float32Array( x0.length );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nN = base.floor( x0.length / 2 );\nbase.strided.scuminabs( N, x1, 2, y1, 1 )\ny0\n","base.strided.scuminabs.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float32Array( x.length );\nbase.strided.scuminabs.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\ny = new Float32Array( x.length );\nvar N = base.floor( x.length / 2 );\nbase.strided.scuminabs.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.scusum":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float32Array( x.length );\nbase.strided.scusum( x.length, 0.0, x, 1, y, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\ny = new Float32Array( x.length );\nbase.strided.scusum( 3, 0.0, x, 2, y, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar y0 = new Float32Array( x0.length );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nbase.strided.scusum( 3, 0.0, x1, 2, y1, 1 )\ny0\n","base.strided.scusum.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float32Array( x.length );\nbase.strided.scusum.ndarray( x.length, 0.0, x, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\ny = new Float32Array( x.length );\nbase.strided.scusum.ndarray( 3, 0.0, x, 2, 1, y, -1, y.length-1 )\n","base.strided.scusumkbn":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float32Array( x.length );\nbase.strided.scusumkbn( x.length, 0.0, x, 1, y, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\ny = new Float32Array( x.length );\nbase.strided.scusumkbn( 3, 0.0, x, 2, y, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar y0 = new Float32Array( x0.length );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nN = base.floor( x0.length / 2 );\nbase.strided.scusumkbn( N, 0.0, x1, 2, y1, 1 )\ny0\n","base.strided.scusumkbn.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float32Array( x.length );\nbase.strided.scusumkbn.ndarray( x.length, 0.0, x, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\ny = new Float32Array( x.length );\nbase.strided.scusumkbn.ndarray( 3, 0.0, x, 2, 1, y, -1, y.length-1 )\n","base.strided.scusumkbn2":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float32Array( x.length );\nbase.strided.scusumkbn2( x.length, 0.0, x, 1, y, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\ny = new Float32Array( x.length );\nbase.strided.scusumkbn2( 3, 0.0, x, 2, y, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar y0 = new Float32Array( x0.length );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nN = base.floor( x0.length / 2 );\nbase.strided.scusumkbn2( N, 0.0, x1, 2, y1, 1 )\ny0\n","base.strided.scusumkbn2.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float32Array( x.length );\nbase.strided.scusumkbn2.ndarray( x.length, 0.0, x, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\ny = new Float32Array( x.length );\nbase.strided.scusumkbn2.ndarray( 3, 0.0, x, 2, 1, y, -1, y.length-1 )\n","base.strided.scusumors":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float32Array( x.length );\nbase.strided.scusumors( x.length, 0.0, x, 1, y, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\ny = new Float32Array( x.length );\nbase.strided.scusumors( 3, 0.0, x, 2, y, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar y0 = new Float32Array( x0.length );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nbase.strided.scusumors( 3, 0.0, x1, 2, y1, 1 )\ny0\n","base.strided.scusumors.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float32Array( x.length );\nbase.strided.scusumors.ndarray( x.length, 0.0, x, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\ny = new Float32Array( x.length );\nbase.strided.scusumors.ndarray( 3, 0.0, x, 2, 1, y, -1, y.length-1 )\n","base.strided.scusumpw":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float32Array( x.length );\nbase.strided.scusumpw( x.length, 0.0, x, 1, y, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\ny = new Float32Array( x.length );\nbase.strided.scusumpw( 3, 0.0, x, 2, y, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar y0 = new Float32Array( x0.length );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nbase.strided.scusumpw( 3, 0.0, x1, 2, y1, 1 )\ny0\n","base.strided.scusumpw.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nvar y = new Float32Array( x.length );\nbase.strided.scusumpw.ndarray( x.length, 0.0, x, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\ny = new Float32Array( x.length );\nbase.strided.scusumpw.ndarray( 3, 0.0, x, 2, 1, y, -1, y.length-1 )\n","base.strided.sdeg2rad":"var x = new Float32Array( [ 0.0, 30.0, 45.0, 60.0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.sdeg2rad( x.length, x, 1, y, 1 )\nvar N = base.floor( x.length / 2 );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.sdeg2rad( N, x, 2, y, -1 )\nvar x0 = new Float32Array( [ 0.0, 30.0, 45.0, 60.0 ] );\nvar y0 = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nN = base.floor( x0.length / 2 );\nbase.strided.sdeg2rad( N, x1, -2, y1, 1 )\ny0\n","base.strided.sdeg2rad.ndarray":"var x = new Float32Array( [ 0.0, 30.0, 45.0, 60.0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.sdeg2rad.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 0.0, 30.0, 45.0, 60.0 ] );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.sdeg2rad.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.sdot":"var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\nvar y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\nvar out = base.strided.sdot( x.length, x, 1, y, 1 )\nx = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\nout = base.strided.sdot( 3, x, 2, y, -1 )\nx = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\nvar x1 = new Float32Array( x.buffer, x.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y.buffer, y.BYTES_PER_ELEMENT*3 );\nout = base.strided.sdot( 3, x1, -2, y1, 1 )\n","base.strided.sdot.ndarray":"var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\nvar y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\nvar out = base.strided.sdot.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\nout = base.strided.sdot.ndarray( 3, x, 2, 0, y, 2, 0 )\nx = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\nout = base.strided.sdot.ndarray( 3, x, -2, x.length-1, y, 1, 3 )\n","base.strided.sdsapxsum":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sdsapxsum( x.length, 5.0, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nbase.strided.sdsapxsum( 3, 5.0, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.sdsapxsum( 3, 5.0, x1, 2 )\n","base.strided.sdsapxsum.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sdsapxsum.ndarray( x.length, 5.0, x, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.sdsapxsum.ndarray( 3, 5.0, x, 2, 1 )\n","base.strided.sdsapxsumpw":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sdsapxsumpw( x.length, 5.0, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nbase.strided.sdsapxsumpw( 3, 5.0, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.sdsapxsumpw( 3, 5.0, x1, 2 )\n","base.strided.sdsapxsumpw.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sdsapxsumpw.ndarray( x.length, 5.0, x, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.sdsapxsumpw.ndarray( 3, 5.0, x, 2, 1 )\n","base.strided.sdsdot":"var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\nvar y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\nvar out = base.strided.sdsdot( x.length, 0.0, x, 1, y, 1 )\nx = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\nout = base.strided.sdsdot( 3, 0.0, x, 2, y, -1 )\nx = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\nvar x1 = new Float32Array( x.buffer, x.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y.buffer, y.BYTES_PER_ELEMENT*3 );\nout = base.strided.sdsdot( 3, 0.0, x1, -2, y1, 1 )\n","base.strided.sdsdot.ndarray":"var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\nvar y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\nvar out = base.strided.sdsdot.ndarray( x.length, 0.0, x, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\nout = base.strided.sdsdot.ndarray( 3, 0.0, x, 2, 0, y, 2, 0 )\nx = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\nout = base.strided.sdsdot.ndarray( 3, 0.0, x, -2, x.length-1, y, 1, 3 )\n","base.strided.sdsmean":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sdsmean( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.sdsmean( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.sdsmean( N, x1, stride )\n","base.strided.sdsmean.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sdsmean.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.sdsmean.ndarray( N, x, 2, 1 )\n","base.strided.sdsmeanors":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sdsmeanors( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.sdsmeanors( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.sdsmeanors( N, x1, stride )\n","base.strided.sdsmeanors.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sdsmeanors.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.sdsmeanors.ndarray( N, x, 2, 1 )\n","base.strided.sdsnanmean":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.sdsnanmean( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.sdsnanmean( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.sdsnanmean( N, x1, stride )\n","base.strided.sdsnanmean.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.sdsnanmean.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.sdsnanmean.ndarray( N, x, 2, 1 )\n","base.strided.sdsnanmeanors":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.sdsnanmeanors( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.sdsnanmeanors( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.sdsnanmeanors( N, x1, stride )\n","base.strided.sdsnanmeanors.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.sdsnanmeanors.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.sdsnanmeanors.ndarray( N, x, 2, 1 )\n","base.strided.sdsnansum":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.sdsnansum( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ] );\nvar stride = 2;\nbase.strided.sdsnansum( 4, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nstride = 2;\nbase.strided.sdsnansum( 4, x1, stride )\n","base.strided.sdsnansum.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.sdsnansum.ndarray( x.length, x, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nbase.strided.sdsnansum.ndarray( 4, x, 2, 1 )\n","base.strided.sdsnansumpw":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.sdsnansumpw( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.sdsnansumpw( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.sdsnansumpw( N, x1, stride )\n","base.strided.sdsnansumpw.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.sdsnansumpw.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.sdsnansumpw.ndarray( N, x, 2, 1 )\n","base.strided.sdssum":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sdssum( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar stride = 2;\nbase.strided.sdssum( 3, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nstride = 2;\nbase.strided.sdssum( 3, x1, stride )\n","base.strided.sdssum.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sdssum.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.sdssum.ndarray( 3, x, 2, 1 )\n","base.strided.sdssumpw":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sdssumpw( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar stride = 2;\nbase.strided.sdssumpw( 3, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nstride = 2;\nbase.strided.sdssumpw( 3, x1, stride )\n","base.strided.sdssumpw.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sdssumpw.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.sdssumpw.ndarray( 3, x, 2, 1 )\n","base.strided.sfill":"var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ] );\nbase.strided.sfill( x.length, 5.0, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ] );\nbase.strided.sfill( 3, 5.0, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.sfill( 3, 5.0, x1, 2 )\nx0\n","base.strided.sfill.ndarray":"var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ] );\nbase.strided.sfill.ndarray( x.length, 5.0, x, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nbase.strided.sfill.ndarray( 3, 5.0, x, 2, 1 )\n","base.strided.sfloor":"var x = new Float32Array( [ -1.1, 1.1, 3.8, 4.5 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.sfloor( x.length, x, 1, y, 1 )\nvar N = base.floor( x.length / 2 );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.sfloor( N, x, 2, y, -1 )\nvar x0 = new Float32Array( [ -1.1, 1.1, 3.8, 4.5 ] );\nvar y0 = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nN = base.floor( x0.length / 2 );\nbase.strided.sfloor( N, x1, -2, y1, 1 )\ny0\n","base.strided.sfloor.ndarray":"var x = new Float32Array( [ -1.1, 1.1, 3.8, 4.5 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.sfloor.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float32Array( [ -1.1, 1.1, 3.8, 4.5 ] );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.sfloor.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.sinv":"var x = new Float32Array( [ -20.0, -1.0, 2.0, 4.0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.sinv( x.length, x, 1, y, 1 )\nvar N = base.floor( x.length / 2 );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.sinv( N, x, 2, y, -1 )\nvar x0 = new Float32Array( [ -20.0, -1.0, 2.0, 4.0 ] );\nvar y0 = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nN = base.floor( x0.length / 2 );\nbase.strided.sinv( N, x1, -2, y1, 1 )\ny0\n","base.strided.sinv.ndarray":"var x = new Float32Array( [ -20.0, -1.0, 2.0, 4.0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.sinv.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float32Array( [ -20.0, -1.0, 2.0, 4.0 ] );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.sinv.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.smap":"var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smap( x.length, x, 1, y, 1, base.identityf )\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smap( 2, x, 2, y, -1, base.identityf )\nvar x0 = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y0 = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.smap( 2, x1, -2, y1, 1, base.identityf )\ny0\n","base.strided.smap.ndarray":"var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smap.ndarray( x.length, x, 1, 0, y, 1, 0, base.identityf )\nx = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smap.ndarray( 2, x, 2, 1, y, -1, y.length-1, base.identityf )\n","base.strided.smap2":"var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smap2( x.length, x, 1, y, 1, z, 1, base.addf )\nz = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smap2( 2, x, 2, y, -1, z, 1, base.addf )\nvar x0 = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y0 = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z0 = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nvar z1 = new Float32Array( z0.buffer, z0.BYTES_PER_ELEMENT*2 );\nbase.strided.smap2( 2, x1, -2, y1, 1, z1, 1, base.addf )\nz0\n","base.strided.smap2.ndarray":"var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smap2.ndarray( x.length, x, 1, 0, y, 1, 0, z, 1, 0, base.addf )\nx = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\ny = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nz = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smap2.ndarray( 2, x, 2, 1, y, -1, y.length-1, z, 1, 1, base.addf )\n","base.strided.smax":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.smax( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.smax( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.smax( N, x1, stride )\n","base.strided.smax.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.smax.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.smax.ndarray( N, x, 2, 1 )\n","base.strided.smaxabs":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.smaxabs( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.smaxabs( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.smaxabs( N, x1, stride )\n","base.strided.smaxabs.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.smaxabs.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.smaxabs.ndarray( N, x, 2, 1 )\n","base.strided.smaxabssorted":"var x = new Float32Array( [ -1.0, -2.0, -3.0 ] );\nbase.strided.smaxabssorted( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.smaxabssorted( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 3.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.smaxabssorted( N, x1, stride )\n","base.strided.smaxabssorted.ndarray":"var x = new Float32Array( [ -1.0, -2.0, -3.0 ] );\nbase.strided.smaxabssorted.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 3.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.smaxabssorted.ndarray( N, x, 2, 1 )\n","base.strided.smaxsorted":"var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\nbase.strided.smaxsorted( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.smaxsorted( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 3.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.smaxsorted( N, x1, stride )\n","base.strided.smaxsorted.ndarray":"var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\nbase.strided.smaxsorted.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 3.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.smaxsorted.ndarray( N, x, 2, 1 )\n","base.strided.smean":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.smean( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.smean( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.smean( N, x1, stride )\n","base.strided.smean.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.smean.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.smean.ndarray( N, x, 2, 1 )\n","base.strided.smeankbn":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.smeankbn( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.smeankbn( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.smeankbn( N, x1, stride )\n","base.strided.smeankbn.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.smeankbn.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.smeankbn.ndarray( N, x, 2, 1 )\n","base.strided.smeankbn2":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.smeankbn2( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.smeankbn2( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.smeankbn2( N, x1, stride )\n","base.strided.smeankbn2.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.smeankbn2.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.smeankbn2.ndarray( N, x, 2, 1 )\n","base.strided.smeanli":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.smeanli( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.smeanli( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.smeanli( N, x1, stride )\n","base.strided.smeanli.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.smeanli.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.smeanli.ndarray( N, x, 2, 1 )\n","base.strided.smeanlipw":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.smeanlipw( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.smeanlipw( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.smeanlipw( N, x1, stride )\n","base.strided.smeanlipw.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.smeanlipw.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.smeanlipw.ndarray( N, x, 2, 1 )\n","base.strided.smeanors":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.smeanors( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.smeanors( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.smeanors( N, x1, stride )\n","base.strided.smeanors.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.smeanors.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.smeanors.ndarray( N, x, 2, 1 )\n","base.strided.smeanpn":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.smeanpn( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.smeanpn( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.smeanpn( N, x1, stride )\n","base.strided.smeanpn.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.smeanpn.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.smeanpn.ndarray( N, x, 2, 1 )\n","base.strided.smeanpw":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.smeanpw( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.smeanpw( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.smeanpw( N, x1, stride )\n","base.strided.smeanpw.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.smeanpw.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.smeanpw.ndarray( N, x, 2, 1 )\n","base.strided.smeanwd":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.smeanwd( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.smeanwd( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.smeanwd( N, x1, stride )\n","base.strided.smeanwd.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.smeanwd.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.smeanwd.ndarray( N, x, 2, 1 )\n","base.strided.smediansorted":"var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\nbase.strided.smediansorted( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.smediansorted( N, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 3.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.smediansorted( N, x1, 2 )\n","base.strided.smediansorted.ndarray":"var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\nbase.strided.smediansorted.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 3.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.smediansorted.ndarray( N, x, 2, 1 )\n","base.strided.smidrange":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.smidrange( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.smidrange( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.smidrange( N, x1, stride )\n","base.strided.smidrange.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.smidrange.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.smidrange.ndarray( N, x, 2, 1 )\n","base.strided.smin":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.smin( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.smin( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.smin( N, x1, stride )\n","base.strided.smin.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.smin.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.smin.ndarray( N, x, 2, 1 )\n","base.strided.sminabs":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sminabs( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.sminabs( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.sminabs( N, x1, stride )\n","base.strided.sminabs.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sminabs.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.sminabs.ndarray( N, x, 2, 1 )\n","base.strided.sminsorted":"var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\nbase.strided.sminsorted( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.sminsorted( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 3.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.sminsorted( N, x1, stride )\n","base.strided.sminsorted.ndarray":"var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\nbase.strided.sminsorted.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, 3.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.sminsorted.ndarray( N, x, 2, 1 )\n","base.strided.smskabs":"var x = new Float32Array( [ -2.0, 1.0, -3.0, -5.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskabs( x.length, x, 1, m, 1, y, 1 )\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskabs( 2, x, 2, m, 2, y, -1 )\nvar x0 = new Float32Array( [ -2.0, 1.0, -3.0, -5.0 ] );\nvar m0 = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y0 = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar m1 = new Uint8Array( m0.buffer, m0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.smskabs( 2, x1, -2, m1, -2, y1, 1 )\ny0\n","base.strided.smskabs.ndarray":"var x = new Float32Array( [ -2.0, 1.0, -3.0, -5.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskabs.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0 )\nx = new Float32Array( [ -2.0, 1.0, -3.0, -5.0 ] );\nm = new Uint8Array( [ 0, 0, 1, 0 ] );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskabs.ndarray( 2, x, 2, 1, m, 2, 1, y, -1, y.length-1 )\n","base.strided.smskabs2":"var x = new Float32Array( [ -2.0, 1.0, -3.0, -5.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskabs2( x.length, x, 1, m, 1, y, 1 )\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskabs2( 2, x, 2, m, 2, y, -1 )\nvar x0 = new Float32Array( [ -2.0, 1.0, -3.0, -5.0 ] );\nvar m0 = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y0 = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar m1 = new Uint8Array( m0.buffer, m0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.smskabs2( 2, x1, -2, m1, -2, y1, 1 )\ny0\n","base.strided.smskabs2.ndarray":"var x = new Float32Array( [ -2.0, 1.0, -3.0, -5.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskabs2.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0 )\nx = new Float32Array( [ -2.0, 1.0, -3.0, -5.0 ] );\nm = new Uint8Array( [ 0, 0, 1, 0 ] );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskabs2.ndarray( 2, x, 2, 1, m, 2, 1, y, -1, y.length-1 )\n","base.strided.smskcbrt":"var x = new Float32Array( [ 0.0, 1.0, 8.0, 27.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskcbrt( x.length, x, 1, m, 1, y, 1 )\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskcbrt( 2, x, 2, m, 2, y, -1 )\nvar x0 = new Float32Array( [ 0.0, 1.0, 8.0, 27.0 ] );\nvar m0 = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y0 = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar m1 = new Uint8Array( m0.buffer, m0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.smskcbrt( 2, x1, -2, m1, -2, y1, 1 )\ny0\n","base.strided.smskcbrt.ndarray":"var x = new Float32Array( [ 0.0, 1.0, 8.0, 27.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskcbrt.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 0.0, 1.0, 8.0, 27.0 ] );\nm = new Uint8Array( [ 0, 0, 1, 0 ] );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskcbrt.ndarray( 2, x, 2, 1, m, 2, 1, y, -1, y.length-1 )\n","base.strided.smskceil":"var x = new Float32Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskceil( x.length, x, 1, m, 1, y, 1 )\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskceil( 2, x, 2, m, 2, y, -1 )\nvar x0 = new Float32Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar m0 = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y0 = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar m1 = new Uint8Array( m0.buffer, m0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.smskceil( 2, x1, -2, m1, -2, y1, 1 )\ny0\n","base.strided.smskceil.ndarray":"var x = new Float32Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskceil.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nm = new Uint8Array( [ 0, 0, 1, 0 ] );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskceil.ndarray( 2, x, 2, 1, m, 2, 1, y, -1, y.length-1 )\n","base.strided.smskdeg2rad":"var x = new Float32Array( [ 0.0, 30.0, 45.0, 60.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskdeg2rad( x.length, x, 1, m, 1, y, 1 )\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskdeg2rad( 2, x, 2, m, 2, y, -1 )\nvar x0 = new Float32Array( [ 0.0, 30.0, 45.0, 60.0 ] );\nvar m0 = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y0 = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar m1 = new Uint8Array( m0.buffer, m0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.smskdeg2rad( 2, x1, -2, m1, -2, y1, 1 )\ny0\n","base.strided.smskdeg2rad.ndarray":"var x = new Float32Array( [ 0.0, 30.0, 45.0, 60.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskdeg2rad.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 0.0, 30.0, 45.0, 60.0 ] );\nm = new Uint8Array( [ 0, 0, 1, 0 ] );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskdeg2rad.ndarray( 2, x, 2, 1, m, 2, 1, y, -1, y.length-1 )\n","base.strided.smskfloor":"var x = new Float32Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskfloor( x.length, x, 1, m, 1, y, 1 )\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskfloor( 2, x, 2, m, 2, y, -1 )\nvar x0 = new Float32Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar m0 = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y0 = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar m1 = new Uint8Array( m0.buffer, m0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.smskfloor( 2, x1, -2, m1, -2, y1, 1 )\ny0\n","base.strided.smskfloor.ndarray":"var x = new Float32Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskfloor.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nm = new Uint8Array( [ 0, 0, 1, 0 ] );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskfloor.ndarray( 2, x, 2, 1, m, 2, 1, y, -1, y.length-1 )\n","base.strided.smskinv":"var x = new Float32Array( [ -20.0, -1.0, 2.0, 4.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskinv( x.length, x, 1, m, 1, y, 1 )\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskinv( 2, x, 2, m, 2, y, -1 )\nvar x0 = new Float32Array( [ -20.0, -1.0, 2.0, 4.0 ] );\nvar m0 = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y0 = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar m1 = new Uint8Array( m0.buffer, m0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.smskinv( 2, x1, -2, m1, -2, y1, 1 )\ny0\n","base.strided.smskinv.ndarray":"var x = new Float32Array( [ -20.0, -1.0, 2.0, 4.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskinv.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0 )\nx = new Float32Array( [ -20.0, -1.0, 2.0, 4.0 ] );\nm = new Uint8Array( [ 0, 0, 1, 0 ] );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskinv.ndarray( 2, x, 2, 1, m, 2, 1, y, -1, y.length-1 )\n","base.strided.smskmap":"var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskmap( x.length, x, 1, m, 1, y, 1, base.identity )\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskmap( 2, x, 2, m, 2, y, -1, base.identity )\nvar x0 = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar m0 = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y0 = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar m1 = new Uint8Array( m0.buffer, m0.BYTES_PER_ELEMENT*2 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.smskmap( 2, x1, -2, m1, 1, y1, 1, base.identity )\ny0\n","base.strided.smskmap.ndarray":"var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskmap.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0, base.identity )\nx = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nm = new Uint8Array( [ 0, 0, 1, 0 ] );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskmap.ndarray( 2, x, 2, 1, m, 1, 2, y, -1, y.length-1, base.identity )\n","base.strided.smskmap2":"var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nbase.strided.smskmap2( x.length, x, 1, y, 1, m, 1, z, 1, base.addf )\nz = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskmap2( 2, x, 2, y, -1, m, 2, z, -1, base.addf )\nvar x0 = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y0 = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z0 = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar m0 = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nvar z1 = new Float32Array( z0.buffer, z0.BYTES_PER_ELEMENT*2 );\nvar m1 = new Uint8Array( m0.buffer, m0.BYTES_PER_ELEMENT*2 );\nbase.strided.smskmap2( 2, x1, -2, y1, 1, m1, 1, z1, 1, base.addf )\nz0\n","base.strided.smskmap2.ndarray":"var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nbase.strided.smskmap2.ndarray( 4, x, 1, 0, y, 1, 0, m, 1, 0, z, 1, 0, base.addf )\nx = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\ny = new Float32Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nz = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nm = new Uint8Array( [ 0, 0, 1, 0 ] );\nbase.strided.smskmap2.ndarray( 2, x, 2, 1, y, -1, 3, m, 1, 2, z, -1, 3, base.addf )\n","base.strided.smskmax":"var x = new Float32Array( [ 1.0, -2.0, 4.0, 2.0 ] );\nvar mask = new Uint8Array( [ 0, 0, 1, 0 ] );\nbase.strided.smskmax( x.length, x, 1, mask, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, 4.0 ] );\nmask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.smskmax( N, x, 2, mask, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, 4.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar mask0 = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar mask1 = new Uint8Array( mask0.buffer, mask0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.smskmax( N, x1, 2, mask1, 2 )\n","base.strided.smskmax.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0, 4.0 ] );\nvar mask = new Uint8Array( [ 0, 0, 0, 1 ] );\nbase.strided.smskmax.ndarray( x.length, x, 1, 0, mask, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, 4.0 ] );\nmask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.smskmax.ndarray( N, x, 2, 1, mask, 2, 1 )\n","base.strided.smskmin":"var x = new Float32Array( [ 1.0, -2.0, -4.0, 2.0 ] );\nvar mask = new Uint8Array( [ 0, 0, 1, 0 ] );\nbase.strided.smskmin( x.length, x, 1, mask, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, -4.0 ] );\nmask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.smskmin( N, x, 2, mask, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, -4.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar mask0 = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar mask1 = new Uint8Array( mask0.buffer, mask0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.smskmin( N, x1, 2, mask1, 2 )\n","base.strided.smskmin.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0, -4.0 ] );\nvar mask = new Uint8Array( [ 0, 0, 0, 1 ] );\nbase.strided.smskmin.ndarray( x.length, x, 1, 0, mask, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, -4.0 ] );\nmask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.smskmin.ndarray( N, x, 2, 1, mask, 2, 1 )\n","base.strided.smskramp":"var x = new Float32Array( [ 1.0, 2.0, -3.0, 4.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskramp( x.length, x, 1, m, 1, y, 1 )\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskramp( 2, x, 2, m, 2, y, -1 )\nvar x0 = new Float32Array( [ 1.0, 2.0, -3.0, 4.0 ] );\nvar m0 = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y0 = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar m1 = new Uint8Array( m0.buffer, m0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.smskramp( 2, x1, -2, m1, -2, y1, 1 )\ny0\n","base.strided.smskramp.ndarray":"var x = new Float32Array( [ 1.0, 2.0, -3.0, 4.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskramp.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 1.0, 2.0, -3.0, 4.0 ] );\nm = new Uint8Array( [ 0, 0, 1, 0 ] );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskramp.ndarray( 2, x, 2, 1, m, 2, 1, y, -1, y.length-1 )\n","base.strided.smskrange":"var x = new Float32Array( [ 1.0, -2.0, 4.0, 2.0 ] );\nvar mask = new Uint8Array( [ 0, 0, 1, 0 ] );\nbase.strided.smskrange( x.length, x, 1, mask, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, 4.0 ] );\nmask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.smskrange( N, x, 2, mask, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, 4.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar mask0 = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar mask1 = new Uint8Array( mask0.buffer, mask0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.smskrange( N, x1, 2, mask1, 2 )\n","base.strided.smskrange.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0, 4.0 ] );\nvar mask = new Uint8Array( [ 0, 0, 0, 1 ] );\nbase.strided.smskrange.ndarray( x.length, x, 1, 0, mask, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, 4.0 ] );\nmask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.smskrange.ndarray( N, x, 2, 1, mask, 2, 1 )\n","base.strided.smskrsqrt":"var x = new Float32Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskrsqrt( x.length, x, 1, m, 1, y, 1 )\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskrsqrt( 2, x, 2, m, 2, y, -1 )\nvar x0 = new Float32Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nvar m0 = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y0 = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar m1 = new Uint8Array( m0.buffer, m0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.smskrsqrt( 2, x1, -2, m1, -2, y1, 1 )\ny0\n","base.strided.smskrsqrt.ndarray":"var x = new Float32Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskrsqrt.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nm = new Uint8Array( [ 0, 0, 1, 0 ] );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smskrsqrt.ndarray( 2, x, 2, 1, m, 2, 1, y, -1, y.length-1 )\n","base.strided.smsksqrt":"var x = new Float32Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smsksqrt( x.length, x, 1, m, 1, y, 1 )\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smsksqrt( 2, x, 2, m, 2, y, -1 )\nvar x0 = new Float32Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nvar m0 = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y0 = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar m1 = new Uint8Array( m0.buffer, m0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.smsksqrt( 2, x1, -2, m1, -2, y1, 1 )\ny0\n","base.strided.smsksqrt.ndarray":"var x = new Float32Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smsksqrt.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nm = new Uint8Array( [ 0, 0, 1, 0 ] );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smsksqrt.ndarray( 2, x, 2, 1, m, 2, 1, y, -1, y.length-1 )\n","base.strided.smsktrunc":"var x = new Float32Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smsktrunc( x.length, x, 1, m, 1, y, 1 )\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smsktrunc( 2, x, 2, m, 2, y, -1 )\nvar x0 = new Float32Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar m0 = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y0 = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar m1 = new Uint8Array( m0.buffer, m0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.smsktrunc( 2, x1, -2, m1, -2, y1, 1 )\ny0\n","base.strided.smsktrunc.ndarray":"var x = new Float32Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar m = new Uint8Array( [ 0, 0, 1, 0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smsktrunc.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nm = new Uint8Array( [ 0, 0, 1, 0 ] );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.smsktrunc.ndarray( 2, x, 2, 1, m, 2, 1, y, -1, y.length-1 )\n","base.strided.snanmax":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanmax( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.snanmax( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.snanmax( N, x1, stride )\n","base.strided.snanmax.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0, NaN ] );\nbase.strided.snanmax.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanmax.ndarray( N, x, 2, 1 )\n","base.strided.snanmaxabs":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanmaxabs( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.snanmaxabs( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.snanmaxabs( N, x1, stride )\n","base.strided.snanmaxabs.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0, NaN ] );\nbase.strided.snanmaxabs.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanmaxabs.ndarray( N, x, 2, 1 )\n","base.strided.snanmean":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanmean( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.snanmean( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.snanmean( N, x1, stride )\n","base.strided.snanmean.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanmean.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanmean.ndarray( N, x, 2, 1 )\n","base.strided.snanmeanors":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanmeanors( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.snanmeanors( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.snanmeanors( N, x1, stride )\n","base.strided.snanmeanors.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanmeanors.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanmeanors.ndarray( N, x, 2, 1 )\n","base.strided.snanmeanpn":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanmeanpn( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.snanmeanpn( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.snanmeanpn( N, x1, stride )\n","base.strided.snanmeanpn.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanmeanpn.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanmeanpn.ndarray( N, x, 2, 1 )\n","base.strided.snanmeanwd":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanmeanwd( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.snanmeanwd( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.snanmeanwd( N, x1, stride )\n","base.strided.snanmeanwd.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanmeanwd.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanmeanwd.ndarray( N, x, 2, 1 )\n","base.strided.snanmin":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanmin( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.snanmin( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.snanmin( N, x1, stride )\n","base.strided.snanmin.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0, NaN ] );\nbase.strided.snanmin.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanmin.ndarray( N, x, 2, 1 )\n","base.strided.snanminabs":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanminabs( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.snanminabs( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.snanminabs( N, x1, stride )\n","base.strided.snanminabs.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0, NaN ] );\nbase.strided.snanminabs.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanminabs.ndarray( N, x, 2, 1 )\n","base.strided.snanmskmax":"var x = new Float32Array( [ 1.0, -2.0, 4.0, 2.0, NaN ] );\nvar mask = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\nbase.strided.snanmskmax( x.length, x, 1, mask, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, 4.0 ] );\nmask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanmskmax( N, x, 2, mask, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, 4.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar mask0 = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar mask1 = new Uint8Array( mask0.buffer, mask0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.snanmskmax( N, x1, 2, mask1, 2 )\n","base.strided.snanmskmax.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0, 4.0, NaN ] );\nvar mask = new Uint8Array( [ 0, 0, 0, 1, 0 ] );\nbase.strided.snanmskmax.ndarray( x.length, x, 1, 0, mask, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, 4.0 ] );\nmask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanmskmax.ndarray( N, x, 2, 1, mask, 2, 1 )\n","base.strided.snanmskmin":"var x = new Float32Array( [ 1.0, -2.0, -4.0, 2.0, NaN ] );\nvar mask = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\nbase.strided.snanmskmin( x.length, x, 1, mask, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, -4.0 ] );\nmask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanmskmin( N, x, 2, mask, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, -4.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar mask0 = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar mask1 = new Uint8Array( mask0.buffer, mask0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.snanmskmin( N, x1, 2, mask1, 2 )\n","base.strided.snanmskmin.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0, -4.0, NaN ] );\nvar mask = new Uint8Array( [ 0, 0, 0, 1, 0 ] );\nbase.strided.snanmskmin.ndarray( x.length, x, 1, 0, mask, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, -4.0 ] );\nmask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanmskmin.ndarray( N, x, 2, 1, mask, 2, 1 )\n","base.strided.snanmskrange":"var x = new Float32Array( [ 1.0, -2.0, 4.0, 2.0, NaN ] );\nvar mask = new Uint8Array( [ 0, 0, 1, 0, 0 ] );\nbase.strided.snanmskrange( x.length, x, 1, mask, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, 4.0 ] );\nmask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanmskrange( N, x, 2, mask, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, 4.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar mask0 = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar mask1 = new Uint8Array( mask0.buffer, mask0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.snanmskrange( N, x1, 2, mask1, 2 )\n","base.strided.snanmskrange.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0, 4.0, NaN ] );\nvar mask = new Uint8Array( [ 0, 0, 0, 1, 0 ] );\nbase.strided.snanmskrange.ndarray( x.length, x, 1, 0, mask, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, 4.0 ] );\nmask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 1 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanmskrange.ndarray( N, x, 2, 1, mask, 2, 1 )\n","base.strided.snanrange":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanrange( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.snanrange( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.snanrange( N, x1, stride )\n","base.strided.snanrange.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0, NaN ] );\nbase.strided.snanrange.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanrange.ndarray( N, x, 2, 1 )\n","base.strided.snanstdev":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanstdev( x.length, 1, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.snanstdev( N, 1, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.snanstdev( N, 1, x1, stride )\n","base.strided.snanstdev.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanstdev.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanstdev.ndarray( N, 1, x, 2, 1 )\n","base.strided.snanstdevch":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanstdevch( x.length, 1, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.snanstdevch( N, 1, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.snanstdevch( N, 1, x1, stride )\n","base.strided.snanstdevch.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanstdevch.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanstdevch.ndarray( N, 1, x, 2, 1 )\n","base.strided.snanstdevpn":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanstdevpn( x.length, 1, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.snanstdevpn( N, 1, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.snanstdevpn( N, 1, x1, stride )\n","base.strided.snanstdevpn.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanstdevpn.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanstdevpn.ndarray( N, 1, x, 2, 1 )\n","base.strided.snanstdevtk":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanstdevtk( x.length, 1, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.snanstdevtk( N, 1, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.snanstdevtk( N, 1, x1, stride )\n","base.strided.snanstdevtk.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanstdevtk.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanstdevtk.ndarray( N, 1, x, 2, 1 )\n","base.strided.snanstdevwd":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanstdevwd( x.length, 1, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.snanstdevwd( N, 1, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.snanstdevwd( N, 1, x1, stride )\n","base.strided.snanstdevwd.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanstdevwd.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanstdevwd.ndarray( N, 1, x, 2, 1 )\n","base.strided.snanstdevyc":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanstdevyc( x.length, 1, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.snanstdevyc( N, 1, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.snanstdevyc( N, 1, x1, stride )\n","base.strided.snanstdevyc.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanstdevyc.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanstdevyc.ndarray( N, 1, x, 2, 1 )\n","base.strided.snansum":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snansum( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ] );\nbase.strided.snansum( 4, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.snansum( 4, x1, 2 )\n","base.strided.snansum.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snansum.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nbase.strided.snansum.ndarray( 4, x, 2, 1 )\n","base.strided.snansumkbn":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snansumkbn( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ] );\nvar stride = 2;\nbase.strided.snansumkbn( 4, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nstride = 2;\nbase.strided.snansumkbn( 4, x1, stride )\n","base.strided.snansumkbn.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snansumkbn.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nbase.strided.snansumkbn.ndarray( 4, x, 2, 1 )\n","base.strided.snansumkbn2":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snansumkbn2( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.snansumkbn2( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.snansumkbn2( N, x1, stride )\n","base.strided.snansumkbn2.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snansumkbn2.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snansumkbn2.ndarray( N, x, 2, 1 )\n","base.strided.snansumors":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snansumors( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ] );\nvar N = 4;\nvar stride = 2;\nbase.strided.snansumors( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = 4;\nstride = 2;\nbase.strided.snansumors( N, x1, stride )\n","base.strided.snansumors.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snansumors.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar N = 4;\nbase.strided.snansumors.ndarray( N, x, 2, 1 )\n","base.strided.snansumpw":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snansumpw( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ] );\nbase.strided.snansumpw( 4, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.snansumpw( 4, x1, 2 )\n","base.strided.snansumpw.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snansumpw.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );\nbase.strided.snansumpw.ndarray( 4, x, 2, 1 )\n","base.strided.snanvariance":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanvariance( x.length, 1, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanvariance( N, 1, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.snanvariance( N, 1, x1, 2 )\n","base.strided.snanvariance.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanvariance.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanvariance.ndarray( N, 1, x, 2, 1 )\n","base.strided.snanvariancech":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanvariancech( x.length, 1, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanvariancech( N, 1, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.snanvariancech( N, 1, x1, 2 )\n","base.strided.snanvariancech.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanvariancech.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanvariancech.ndarray( N, 1, x, 2, 1 )\n","base.strided.snanvariancepn":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanvariancepn( x.length, 1, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanvariancepn( N, 1, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.snanvariancepn( N, 1, x1, 2 )\n","base.strided.snanvariancepn.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanvariancepn.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanvariancepn.ndarray( N, 1, x, 2, 1 )\n","base.strided.snanvariancetk":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanvariancetk( x.length, 1, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanvariancetk( N, 1, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.snanvariancetk( N, 1, x1, 2 )\n","base.strided.snanvariancetk.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanvariancetk.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanvariancetk.ndarray( N, 1, x, 2, 1 )\n","base.strided.snanvariancewd":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanvariancewd( x.length, 1, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanvariancewd( N, 1, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.snanvariancewd( N, 1, x1, 2 )\n","base.strided.snanvariancewd.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanvariancewd.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanvariancewd.ndarray( N, 1, x, 2, 1 )\n","base.strided.snanvarianceyc":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanvarianceyc( x.length, 1, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanvarianceyc( N, 1, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.snanvarianceyc( N, 1, x1, 2 )\n","base.strided.snanvarianceyc.ndarray":"var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\nbase.strided.snanvarianceyc.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.snanvarianceyc.ndarray( N, 1, x, 2, 1 )\n","base.strided.snrm2":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.snrm2( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nbase.strided.snrm2( 3, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.snrm2( 3, x1, 2 )\n","base.strided.snrm2.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.snrm2.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.snrm2.ndarray( 3, x, 2, 1 )\n","base.strided.sramp":"var x = new Float32Array( [ 1.0, 2.0, -3.0, 4.0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.sramp( x.length, x, 1, y, 1 )\nvar N = base.floor( x.length / 2 );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.sramp( N, x, 2, y, -1 )\nvar x0 = new Float32Array( [ 1.0, 2.0, -3.0, 4.0 ] );\nvar y0 = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nN = base.floor( x0.length / 2 );\nbase.strided.sramp( N, x1, -2, y1, 1 )\ny0\n","base.strided.sramp.ndarray":"var x = new Float32Array( [ 1.0, 2.0, -3.0, 4.0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.sramp.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 1.0, 2.0, -3.0, 4.0 ] );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.sramp.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.srange":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.srange( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.srange( N, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.srange( N, x1, stride )\n","base.strided.srange.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.srange.ndarray( x.length, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.srange.ndarray( N, x, 2, 1 )\n","base.strided.srev":"var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ] );\nbase.strided.srev( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ] );\nbase.strided.srev( 3, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.srev( 3, x1, 2 )\nx0\n","base.strided.srev.ndarray":"var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ] );\nbase.strided.srev.ndarray( x.length, x, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nbase.strided.srev.ndarray( 3, x, 2, 1 )\n","base.strided.srsqrt":"var x = new Float32Array( [ 1.0, 4.0, 9.0, 12.0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.srsqrt( x.length, x, 1, y, 1 )\nvar N = base.floor( x.length / 2 );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.srsqrt( N, x, 2, y, -1 )\nvar x0 = new Float32Array( [ 1.0, 4.0, 9.0, 12.0 ] );\nvar y0 = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nN = base.floor( x0.length / 2 );\nbase.strided.srsqrt( N, x1, -2, y1, 1 )\ny0\n","base.strided.srsqrt.ndarray":"var x = new Float32Array( [ 1.0, 4.0, 9.0, 12.0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.srsqrt.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 1.0, 4.0, 9.0, 12.0 ] );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.srsqrt.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.sscal":"var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ] );\nbase.strided.sscal( x.length, 5.0, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ] );\nbase.strided.sscal( 3, 5.0, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.sscal( 3, 5.0, x1, 2 )\nx0\n","base.strided.sscal.ndarray":"var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ] );\nbase.strided.sscal.ndarray( x.length, 5.0, x, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\nbase.strided.sscal.ndarray( 3, 5.0, x, 2, 1 )\n","base.strided.ssort2hp":"var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nbase.strided.ssort2hp( x.length, 1, x, 1, y, 1 )\ny\nx = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\ny = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.ssort2hp( N, -1, x, 2, y, 2 )\ny\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y0 = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.ssort2hp( N, 1, x1, 2, y1, 2 )\nx0\ny0\n","base.strided.ssort2hp.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nbase.strided.ssort2hp.ndarray( x.length, 1, x, 1, 0, y, 1, 0 )\ny\nx = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\ny = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.ssort2hp.ndarray( N, 1, x, 2, 1, y, 2, 1 )\ny\n","base.strided.ssort2ins":"var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nbase.strided.ssort2ins( x.length, 1, x, 1, y, 1 )\ny\nx = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\ny = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nbase.strided.ssort2ins( 2, -1, x, 2, y, 2 )\ny\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y0 = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*1 );\nbase.strided.ssort2ins( 2, 1, x1, 2, y1, 2 )\nx0\ny0\n","base.strided.ssort2ins.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nbase.strided.ssort2ins.ndarray( x.length, 1, x, 1, 0, y, 1, 0 )\ny\nx = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\ny = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nbase.strided.ssort2ins.ndarray( 2, 1, x, 2, 1, y, 2, 1 )\ny\n","base.strided.ssort2sh":"var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nbase.strided.ssort2sh( x.length, 1, x, 1, y, 1 )\ny\nx = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\ny = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.ssort2sh( N, -1, x, 2, y, 2 )\ny\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y0 = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.ssort2sh( N, 1, x1, 2, y1, 2 )\nx0\ny0\n","base.strided.ssort2sh.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar y = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nbase.strided.ssort2sh.ndarray( x.length, 1, x, 1, 0, y, 1, 0 )\ny\nx = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\ny = new Float32Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.ssort2sh.ndarray( N, 1, x, 2, 1, y, 2, 1 )\ny\n","base.strided.ssorthp":"var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nbase.strided.ssorthp( x.length, 1, x, 1 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nbase.strided.ssorthp( 2, -1, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.ssorthp( 2, 1, x1, 2 )\nx0\n","base.strided.ssorthp.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nbase.strided.ssorthp.ndarray( x.length, 1, x, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nbase.strided.ssorthp.ndarray( 2, 1, x, 2, 1 )\n","base.strided.ssortins":"var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nbase.strided.ssortins( x.length, 1, x, 1 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.ssortins( N, -1, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nbase.strided.ssortins( N, 1, x1, 2 )\nx0\n","base.strided.ssortins.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nbase.strided.ssortins.ndarray( x.length, 1, x, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.ssortins.ndarray( N, 1, x, 2, 1 )\n","base.strided.ssortsh":"var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nbase.strided.ssortsh( x.length, 1, x, 1 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nbase.strided.ssortsh( 2, -1, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.ssortsh( 2, 1, x1, 2 )\nx0\n","base.strided.ssortsh.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nbase.strided.ssortsh.ndarray( x.length, 1, x, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nbase.strided.ssortsh.ndarray( 2, 1, x, 2, 1 )\n","base.strided.ssqrt":"var x = new Float32Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.ssqrt( x.length, x, 1, y, 1 )\nvar N = base.floor( x.length / 2 );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.ssqrt( N, x, 2, y, -1 )\nvar x0 = new Float32Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nvar y0 = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nN = base.floor( x0.length / 2 );\nbase.strided.ssqrt( N, x1, -2, y1, 1 )\ny0\n","base.strided.ssqrt.ndarray":"var x = new Float32Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.ssqrt.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 0.0, 4.0, 9.0, 12.0 ] );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.ssqrt.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.sstdev":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sstdev( x.length, 1, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.sstdev( N, 1, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.sstdev( N, 1, x1, stride )\n","base.strided.sstdev.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sstdev.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.sstdev.ndarray( N, 1, x, 2, 1 )\n","base.strided.sstdevch":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sstdevch( x.length, 1, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.sstdevch( N, 1, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.sstdevch( N, 1, x1, stride )\n","base.strided.sstdevch.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sstdevch.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.sstdevch.ndarray( N, 1, x, 2, 1 )\n","base.strided.sstdevpn":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sstdevpn( x.length, 1, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.sstdevpn( N, 1, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.sstdevpn( N, 1, x1, stride )\n","base.strided.sstdevpn.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sstdevpn.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.sstdevpn.ndarray( N, 1, x, 2, 1 )\n","base.strided.sstdevtk":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sstdevtk( x.length, 1, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.sstdevtk( N, 1, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.sstdevtk( N, 1, x1, stride )\n","base.strided.sstdevtk.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sstdevtk.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.sstdevtk.ndarray( N, 1, x, 2, 1 )\n","base.strided.sstdevwd":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sstdevwd( x.length, 1, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.sstdevwd( N, 1, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.sstdevwd( N, 1, x1, stride )\n","base.strided.sstdevwd.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sstdevwd.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.sstdevwd.ndarray( N, 1, x, 2, 1 )\n","base.strided.sstdevyc":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sstdevyc( x.length, 1, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.sstdevyc( N, 1, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.sstdevyc( N, 1, x1, stride )\n","base.strided.sstdevyc.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.sstdevyc.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.sstdevyc.ndarray( N, 1, x, 2, 1 )\n","base.strided.ssum":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.ssum( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nbase.strided.ssum( 3, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.ssum( 3, x1, 2 )\n","base.strided.ssum.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.ssum.ndarray( x.length, x, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.ssum.ndarray( 3, x, 2, 1 )\n","base.strided.ssumkbn":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.ssumkbn( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nbase.strided.ssumkbn( 3, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.ssumkbn( 3, x1, 2 )\n","base.strided.ssumkbn.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.ssumkbn.ndarray( x.length, x, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.ssumkbn.ndarray( 3, x, 2, 1 )\n","base.strided.ssumkbn2":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.ssumkbn2( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nbase.strided.ssumkbn2( 3, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.ssumkbn2( 3, x1, 2 )\n","base.strided.ssumkbn2.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.ssumkbn2.ndarray( x.length, x, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.ssumkbn2.ndarray( 3, x, 2, 1 )\n","base.strided.ssumors":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.ssumors( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nbase.strided.ssumors( 3, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.ssumors( 3, x1, 2 )\n","base.strided.ssumors.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.ssumors.ndarray( x.length, x, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.ssumors.ndarray( 3, x, 2, 1 )\n","base.strided.ssumpw":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.ssumpw( x.length, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nbase.strided.ssumpw( 3, x, 2 )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nbase.strided.ssumpw( 3, x1, 2 )\n","base.strided.ssumpw.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.ssumpw.ndarray( x.length, x, 1, 0 )\nx = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nbase.strided.ssumpw.ndarray( 3, x, 2, 1 )\n","base.strided.sswap":"var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\nvar y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\nbase.strided.sswap( x.length, x, 1, y, 1 )\nx = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\nbase.strided.sswap( 3, x, -2, y, 1 )\nvar x0 = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\nvar y0 = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\nbase.strided.sswap( 3, x1, -2, y1, 1 )\ny0\n","base.strided.sswap.ndarray":"var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\nvar y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\nbase.strided.sswap.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\ny = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\nbase.strided.sswap.ndarray( 3, x, 2, 1, y, -1, y.length-1 )\n","base.strided.stdev":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.stdev( x.length, 1, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.stdev( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.stdev( N, 1, x1, stride )\n","base.strided.stdev.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.stdev.ndarray( x.length, 1, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.stdev.ndarray( N, 1, x, 2, 1 )\n","base.strided.stdevch":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.stdevch( x.length, 1, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.stdevch( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.stdevch( N, 1, x1, stride )\n","base.strided.stdevch.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.stdevch.ndarray( x.length, 1, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.stdevch.ndarray( N, 1, x, 2, 1 )\n","base.strided.stdevpn":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.stdevpn( x.length, 1, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.stdevpn( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.stdevpn( N, 1, x1, stride )\n","base.strided.stdevpn.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.stdevpn.ndarray( x.length, 1, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.stdevpn.ndarray( N, 1, x, 2, 1 )\n","base.strided.stdevtk":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.stdevtk( x.length, 1, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.stdevtk( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.stdevtk( N, 1, x1, stride )\n","base.strided.stdevtk.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.stdevtk.ndarray( x.length, 1, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.stdevtk.ndarray( N, 1, x, 2, 1 )\n","base.strided.stdevwd":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.stdevwd( x.length, 1, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.stdevwd( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.stdevwd( N, 1, x1, stride )\n","base.strided.stdevwd.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.stdevwd.ndarray( x.length, 1, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.stdevwd.ndarray( N, 1, x, 2, 1 )\n","base.strided.stdevyc":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.stdevyc( x.length, 1, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.stdevyc( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.stdevyc( N, 1, x1, stride )\n","base.strided.stdevyc.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.stdevyc.ndarray( x.length, 1, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.stdevyc.ndarray( N, 1, x, 2, 1 )\n","base.strided.strunc":"var x = new Float32Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.strunc( x.length, x, 1, y, 1 )\nvar N = base.floor( x.length / 2 );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.strunc( N, x, 2, y, -1 )\nvar x0 = new Float32Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar y0 = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nN = base.floor( x0.length / 2 );\nbase.strided.strunc( N, x1, -2, y1, 1 )\ny0\n","base.strided.strunc.ndarray":"var x = new Float32Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar y = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nbase.strided.strunc.ndarray( x.length, x, 1, 0, y, 1, 0 )\nx = new Float32Array( [ 1.1, 2.5, -3.5, 4.0 ] );\ny = new Float32Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.strunc.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n","base.strided.svariance":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.svariance( x.length, 1, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.svariance( N, 1, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.svariance( N, 1, x1, stride )\n","base.strided.svariance.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.svariance.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.svariance.ndarray( N, 1, x, 2, 1 )\n","base.strided.svariancech":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.svariancech( x.length, 1, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.svariancech( N, 1, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.svariancech( N, 1, x1, stride )\n","base.strided.svariancech.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.svariancech.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.svariancech.ndarray( N, 1, x, 2, 1 )\n","base.strided.svariancepn":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.svariancepn( x.length, 1, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.svariancepn( N, 1, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.svariancepn( N, 1, x1, stride )\n","base.strided.svariancepn.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.svariancepn.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.svariancepn.ndarray( N, 1, x, 2, 1 )\n","base.strided.svariancetk":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.svariancetk( x.length, 1, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.svariancetk( N, 1, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.svariancetk( N, 1, x1, stride )\n","base.strided.svariancetk.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.svariancetk.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.svariancetk.ndarray( N, 1, x, 2, 1 )\n","base.strided.svariancewd":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.svariancewd( x.length, 1, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.svariancewd( N, 1, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.svariancewd( N, 1, x1, stride )\n","base.strided.svariancewd.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.svariancewd.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.svariancewd.ndarray( N, 1, x, 2, 1 )\n","base.strided.svarianceyc":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.svarianceyc( x.length, 1, x, 1 )\nx = new Float32Array( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.svarianceyc( N, 1, x, stride )\nvar x0 = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.svarianceyc( N, 1, x1, stride )\n","base.strided.svarianceyc.ndarray":"var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\nbase.strided.svarianceyc.ndarray( x.length, 1, x, 1, 0 )\nvar x = new Float32Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar N = base.floor( x.length / 2 );\nbase.strided.svarianceyc.ndarray( N, 1, x, 2, 1 )\n","base.strided.ternary":"var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar w = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar shape = [ x.length ];\nvar strides = [ 1, 1, 1, 1 ];\nfunction f( x, y, z ) { return x + y + z; };\nbase.strided.ternary( [ x, y, z, w ], shape, strides, f );\nw\n","base.strided.ternary.ndarray":"var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar w = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar shape = [ x.length ];\nvar strides = [ 1, 1, 1, 1 ];\nvar offsets = [ 0, 0, 0, 0 ];\nfunction f( x, y, z ) { return x + y + z; };\nbase.strided.ternary.ndarray( [ x, y, z, w ], shape, strides, offsets, f );\nw\n","base.strided.unary":"var x = new Float64Array( [ -1.0, -2.0, -3.0, -4.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar shape = [ x.length ];\nvar strides = [ 1, 1 ];\nbase.strided.unary( [ x, y ], shape, strides, base.abs );\ny\n","base.strided.unary.ndarray":"var x = new Float64Array( [ -1.0, -2.0, -3.0, -4.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar shape = [ x.length ];\nvar strides = [ 1, 1 ];\nvar offsets = [ 0, 0 ];\nbase.strided.unary.ndarray( [ x, y ], shape, strides, offsets, base.abs );\ny\n","base.strided.unaryBy":"var x = [ 1.0, -2.0, 3.0, -4.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nvar sh = [ x.length ];\nvar st = [ 1, 1 ];\nfunction clbk( v ) { return v * 2.0; };\nbase.strided.unaryBy( [ x, y ], sh, st, base.abs, clbk );\ny\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nsh = [ 2 ];\nst = [ 2, -1 ];\nbase.strided.unaryBy( [ x, y ], sh, st, base.abs, clbk );\ny\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nsh = [ 2 ];\nst = [ -2, 1 ];\nbase.strided.unaryBy( [ x1, y1 ], sh, st, base.abs, clbk );\ny1\ny0\n","base.strided.unaryBy.ndarray":"var x = [ 1.0, -2.0, 3.0, -4.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nvar sh = [ x.length ];\nvar st = [ 1, 1 ];\nvar o = [ 0, 0 ];\nfunction clbk( v ) { return v * 2.0; };\nbase.strided.unaryBy.ndarray( [ x, y ], sh, st, o, base.abs, clbk );\ny\nx = [ 1.0, -2.0, 3.0, -4.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nsh = [ 2 ];\nst = [ 2, -1 ];\no = [ 1, y.length-1 ];\nbase.strided.unaryBy.ndarray( [ x, y ], sh, st, o, base.abs, clbk );\ny\n","base.strided.unaryDtypeSignatures":"var dt = strided.dataTypes();\nvar out = base.strided.unaryDtypeSignatures( dt, dt )\n","base.strided.unarySignatureCallbacks":"var dt = strided.dataTypes();\nvar sigs = base.strided.unaryDtypeSignatures( dt, dt );\nvar t = {\n 'default': base.identity,\n 'complex64': base.cidentityf,\n 'complex128': base.cidentity\n };\nvar out = base.strided.unarySignatureCallbacks( t, sigs )\n","base.strided.variance":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.variance( x.length, 1, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.variance( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.variance( N, 1, x1, stride )\n","base.strided.variance.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.variance.ndarray( x.length, 1, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.variance.ndarray( N, 1, x, 2, 1 )\n","base.strided.variancech":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.variancech( x.length, 1, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.variancech( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.variancech( N, 1, x1, stride )\n","base.strided.variancech.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.variancech.ndarray( x.length, 1, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.variancech.ndarray( N, 1, x, 2, 1 )\n","base.strided.variancepn":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.variancepn( x.length, 1, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.variancepn( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.variancepn( N, 1, x1, stride )\n","base.strided.variancepn.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.variancepn.ndarray( x.length, 1, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.variancepn.ndarray( N, 1, x, 2, 1 )\n","base.strided.variancetk":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.variancetk( x.length, 1, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.variancetk( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.variancetk( N, 1, x1, stride )\n","base.strided.variancetk.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.variancetk.ndarray( x.length, 1, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.variancetk.ndarray( N, 1, x, 2, 1 )\n","base.strided.variancewd":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.variancewd( x.length, 1, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.variancewd( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.variancewd( N, 1, x1, stride )\n","base.strided.variancewd.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.variancewd.ndarray( x.length, 1, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.variancewd.ndarray( N, 1, x, 2, 1 )\n","base.strided.varianceyc":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.varianceyc( x.length, 1, x, 1 )\nx = [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nvar stride = 2;\nbase.strided.varianceyc( N, 1, x, stride )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nN = base.floor( x0.length / 2 );\nstride = 2;\nbase.strided.varianceyc( N, 1, x1, stride )\n","base.strided.varianceyc.ndarray":"var x = [ 1.0, -2.0, 2.0 ];\nbase.strided.varianceyc.ndarray( x.length, 1, x, 1, 0 )\nvar x = [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0 ];\nvar N = base.floor( x.length / 2 );\nbase.strided.varianceyc.ndarray( N, 1, x, 2, 1 )\n","base.strided.zmap":"var xbuf = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ];\nvar x = new Complex128Array( xbuf );\nvar y = new Complex128Array( x.length );\nbase.strided.zmap( x.length, x, 1, y, 1, base.cidentity );\nvar v = y.get( 0 )\nvar re = real( v )\nvar im = imag( v )\ny = new Complex128Array( x.length );\nbase.strided.zmap( 2, x, 2, y, -1, base.cidentity );\nv = y.get( 0 )\nre = real( v )\nim = imag( v )\nvar x0 = new Complex128Array( xbuf );\nvar y0 = new Complex128Array( x0.length );\nvar x1 = new Complex128Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Complex128Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nbase.strided.zmap( 2, x1, -2, y1, 1, base.cidentity );\nv = y1.get( 0 )\nre = real( v )\nim = imag( v )\n","base.strided.zmap.ndarray":"var xbuf = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ];\nvar x = new Complex128Array( xbuf );\nvar y = new Complex128Array( x.length );\nbase.strided.zmap.ndarray( x.length, x, 1, 0, y, 1, 0, base.cidentity );\nvar v = y.get( 0 )\nvar re = real( v )\nvar im = imag( v )\nx = new Complex128Array( xbuf );\ny = new Complex128Array( x.length );\nbase.strided.zmap.ndarray( 2, x, 2, 1, y, -1, y.length-1, base.cidentity );\nv = y.get( y.length-1 )\nre = real( v )\nim = imag( v )\n","base.str2multislice":"var s = new base.str2multislice( 'MultiSlice(null,null,null)' );\ns.data\ns = new base.str2multislice( 'MultiSlice(10,Slice(0,10,1),null)' );\ns.data\n","base.str2slice":"var s = new base.str2slice( 'Slice(1,10,1)' );\ns.start\ns.stop\ns.step\ns = new base.str2slice( 'Slice(2,5,2)' );\ns.start\ns.stop\ns.step\n","base.sub":"var v = base.sub( -1.0, 5.0 )\nv = base.sub( 2.0, 5.0 )\nv = base.sub( 0.0, 5.0 )\nv = base.sub( -0.0, 0.0 )\nv = base.sub( NaN, NaN )\n","base.subf":"var v = base.subf( -1.0, 5.0 )\nv = base.subf( 2.0, 5.0 )\nv = base.subf( 0.0, 5.0 )\nv = base.subf( -0.0, 0.0 )\nv = base.subf( NaN, NaN )\n","base.sumSeries":"function* geometricSeriesGenerator( x ) {\n var exponent = 0;\n while ( true ) {\n     yield Math.pow( x, exponent );\n     exponent += 1;\n }\n };\nvar gen = geometricSeriesGenerator( 0.9 );\nvar out = base.sumSeries( gen )\nfunction geometricSeriesClosure( x ) {\n var exponent = -1;\n return function() {\n     exponent += 1;\n     return Math.pow( x, exponent );\n };\n };\ngen = geometricSeriesClosure( 0.9 );\nout = base.sumSeries( gen )\nout = base.sumSeries( geometricSeriesGenerator( 0.5 ), { 'initialValue': 1 } )\nout = base.sumSeries( geometricSeriesGenerator( 0.5 ), { 'maxTerms': 10 } )\nout = base.sumSeries( geometricSeriesGenerator( 0.5 ), { 'tolerance': 1e-3 } )\n","base.tan":"var y = base.tan( 0.0 )\ny = base.tan( -PI/4.0 )\ny = base.tan( PI/4.0 )\ny = base.tan( NaN )\n","base.tand":"var y = base.tand( 0.0 )\ny = base.tand( 90.0 )\ny = base.tand( 60.0 )\ny = base.tand( NaN )\n","base.tanh":"var y = base.tanh( 0.0 )\nvar y = base.tanh( -0.0 )\ny = base.tanh( 2.0 )\ny = base.tanh( -2.0 )\ny = base.tanh( NaN )\n","base.toBinaryString":"var str = base.toBinaryString( 4.0 )\nstr = base.toBinaryString( PI )\nstr = base.toBinaryString( -1.0e308 )\nstr = base.toBinaryString( -3.14e-320 )\nstr = base.toBinaryString( 5.0e-324 )\nstr = base.toBinaryString( 0.0 )\nstr = base.toBinaryString( -0.0 )\nstr = base.toBinaryString( NaN )\nstr = base.toBinaryString( PINF )\nstr = base.toBinaryString( NINF )\n","base.toBinaryStringf":"var str = base.toBinaryStringf( base.float64ToFloat32( 4.0 ) )\nstr = base.toBinaryStringf( base.float64ToFloat32( PI ) )\nstr = base.toBinaryStringf( base.float64ToFloat32( -1.0e38 ) )\nstr = base.toBinaryStringf( base.float64ToFloat32( -3.14e-39 ) )\nstr = base.toBinaryStringf( base.float64ToFloat32( 1.4e-45 ) )\nstr = base.toBinaryStringf( 0.0 )\nstr = base.toBinaryStringf( -0.0 )\nstr = base.toBinaryStringf( NaN )\nstr = base.toBinaryStringf( FLOAT32_PINF )\nstr = base.toBinaryStringf( FLOAT32_NINF )\n","base.toBinaryStringUint8":"var a = new Uint8Array( [ 1, 4, 9 ] );\nvar str = base.toBinaryStringUint8( a[ 0 ] )\nstr = base.toBinaryStringUint8( a[ 1 ] )\nstr = base.toBinaryStringUint8( a[ 2 ] )\n","base.toBinaryStringUint16":"var a = new Uint16Array( [ 1, 4, 9 ] );\nvar str = base.toBinaryStringUint16( a[ 0 ] )\nstr = base.toBinaryStringUint16( a[ 1 ] )\nstr = base.toBinaryStringUint16( a[ 2 ] )\n","base.toBinaryStringUint32":"var a = new Uint32Array( [ 1, 4, 9 ] );\nvar str = base.toBinaryStringUint32( a[ 0 ] )\nstr = base.toBinaryStringUint32( a[ 1 ] )\nstr = base.toBinaryStringUint32( a[ 2 ] )\n","base.toWordf":"var f32 = base.float64ToFloat32( 1.337 )\nvar w = base.toWordf( f32 )\n","base.toWords":"var w = base.toWords( 3.14e201 )\n","base.toWords.assign":"var out = new Uint32Array( 2 );\nvar w = base.toWords.assign( 3.14e201, out, 1, 0 )\nvar bool = ( w === out )\n","base.transpose":"var x = array( [ [ 1, 2, 3 ], [ 4, 5, 6 ] ] )\nvar sh = x.shape\nvar y = base.transpose( x )\nsh = y.shape\nvar bool = ( x.data === y.data )\nbool = ( x.get( 0, 1 ) === y.get( 1, 0 ) )\n","base.tribonacci":"var y = base.tribonacci( 0 )\ny = base.tribonacci( 1 )\ny = base.tribonacci( 2 )\ny = base.tribonacci( 3 )\ny = base.tribonacci( 4 )\ny = base.tribonacci( 64 )\ny = base.tribonacci( NaN )\n","base.trigamma":"var y = base.trigamma( -2.5 )\ny = base.trigamma( 1.0 )\ny = base.trigamma( 10.0 )\ny = base.trigamma( NaN )\ny = base.trigamma( -1.0 )\n","base.trim":"var out = base.trim( ' \\t\\t\\n  Beep \\r\\n\\t  ' )\n","base.trunc":"var y = base.trunc( 3.14 )\ny = base.trunc( -4.2 )\ny = base.trunc( -4.6 )\ny = base.trunc( 9.5 )\ny = base.trunc( -0.0 )\n","base.trunc2":"var y = base.trunc2( 3.14 )\ny = base.trunc2( -4.2 )\ny = base.trunc2( -4.6 )\ny = base.trunc2( 9.5 )\ny = base.trunc2( 13.0 )\ny = base.trunc2( -13.0 )\ny = base.trunc2( -0.0 )\n","base.trunc10":"var y = base.trunc10( 3.14 )\ny = base.trunc10( -4.2 )\ny = base.trunc10( -4.6 )\ny = base.trunc10( 9.5 )\ny = base.trunc10( 13.0 )\ny = base.trunc10( -13.0 )\ny = base.trunc10( -0.0 )\n","base.truncateMiddle":"var str = 'beep boop';\nvar out = base.truncateMiddle( str, 5, '...' )\nout = base.truncateMiddle( str, 5, '|' )\n","base.truncb":"var y = base.truncb( 3.14159, -4, 10 )\ny = base.truncb( 3.14159, 0, 2 )\ny = base.truncb( 5.0, 1, 2 )\n","base.truncf":"var y = base.truncf( 3.14 )\ny = base.truncf( -4.2 )\ny = base.truncf( -4.6 )\ny = base.truncf( 9.5 )\ny = base.truncf( -0.0 )\n","base.truncn":"var y = base.truncn( 3.14159, -4 )\ny = base.truncn( 3.14159, 0 )\ny = base.truncn( 12368.0, 3 )\n","base.truncsd":"var y = base.truncsd( 3.14159, 5 )\ny = base.truncsd( 3.14159, 1 )\ny = base.truncsd( 12368.0, 2 )\ny = base.truncsd( 0.0313, 2, 2 )\n","base.uint32ToInt32":"var y = base.uint32ToInt32( base.float64ToUint32( 4294967295 ) )\ny = base.uint32ToInt32( base.float64ToUint32( 3 ) )\n","base.umul":"var v = base.umul( 10>>>0, 4>>>0 )\n","base.umuldw":"var v = base.umuldw( 1, 10 )\n","base.umuldw.assign":"var out = [ 0, 0 ];\nvar v = base.umuldw.assign( 1, 10, out, 1, 0 )\nvar bool = ( v === out )\n","base.uncapitalize":"var out = base.uncapitalize( 'Beep' )\nout = base.uncapitalize( 'bOOp' )\n","base.uppercase":"var out = base.uppercase( 'bEEp' )\n","base.vercos":"var y = base.vercos( 3.14 )\ny = base.vercos( -4.2 )\ny = base.vercos( -4.6 )\ny = base.vercos( 9.5 )\ny = base.vercos( -0.0 )\n","base.versin":"var y = base.versin( 3.14 )\ny = base.versin( -4.2 )\ny = base.versin( -4.6 )\ny = base.versin( 9.5 )\ny = base.versin( -0.0 )\n","base.wrap":"var y = base.wrap( 3.14, 0.0, 5.0 )\ny = base.wrap( -3.14, 0.0, 5.0 )\ny = base.wrap( 3.14, 0.0, 3.0 )\ny = base.wrap( -0.0, 0.0, 5.0 )\ny = base.wrap( 0.0, -3.14, -0.0 )\ny = base.wrap( NaN, 0.0, 5.0 )\n","base.xlog1py":"var out = base.xlog1py( 3.0, 2.0 )\nout = base.xlog1py( 1.5, 5.9 )\nout = base.xlog1py( 0.9, 1.0 )\nout = base.xlog1py( 1.0, 0.0 )\nout = base.xlog1py( 0.0, -2.0 )\nout = base.xlog1py( 1.5, NaN )\nout = base.xlog1py( 0.0, NaN )\nout = base.xlog1py( NaN, 2.3 )\n","base.xlogy":"var out = base.xlogy( 3.0, 2.0 )\nout = base.xlogy( 1.5, 5.9 )\nout = base.xlogy( 0.9, 1.0 )\nout = base.xlogy( 0.0, -2.0 )\nout = base.xlogy( 1.5, NaN )\nout = base.xlogy( 0.0, NaN )\nout = base.xlogy( NaN, 2.3 )\n","base.zeta":"var y = base.zeta( 1.1 )\ny = base.zeta( -4.0 )\ny = base.zeta( 70.0 )\ny = base.zeta( 0.5 )\ny = base.zeta( NaN )\ny = base.zeta( 1.0 )\n","BERNDT_CPS_WAGES_1985":"var data = BERNDT_CPS_WAGES_1985()\n","bifurcate":"var collection = [ 'beep', 'boop', 'foo', 'bar' ];\nvar f = [ true, true, false, true ];\nvar out = bifurcate( collection, f )\nf = [ 1, 1, 0, 1 ];\nout = bifurcate( collection, f )\nf = [ true, true, false, true ];\nvar opts = { 'returns': 'indices' };\nout = bifurcate( collection, opts, f )\nopts = { 'returns': '*' };\nout = bifurcate( collection, opts, f )\n","bifurcateBy":"function predicate( v ) { return v[ 0 ] === 'b'; };\nvar collection = [ 'beep', 'boop', 'foo', 'bar' ];\nvar out = bifurcateBy( collection, predicate )\nvar opts = { 'returns': 'indices' };\nout = bifurcateBy( collection, opts, predicate )\nopts = { 'returns': '*' };\nout = bifurcateBy( collection, opts, predicate )\n","bifurcateByAsync":"function predicate( value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, ( index%2 === 0 ) );\n }\n };\nfunction done( error, result ) {\n if ( error ) {\n     throw error;\n }\n console.log( result );\n };\nvar arr = [ 3000, 2500, 1000 ];\nbifurcateByAsync( arr, predicate, done )\nvar opts = { 'returns': 'indices' };\nbifurcateByAsync( arr, opts, predicate, done )\nopts = { 'returns': '*' };\nbifurcateByAsync( arr, opts, predicate, done )\nfunction predicate( value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, ( index%2 === 0 ) );\n }\n };\nfunction done( error, result ) {\n if ( error ) {\n     throw error;\n }\n console.log( result );\n };\nvar opts = { 'limit': 2 };\nvar arr = [ 3000, 2500, 1000 ];\nbifurcateByAsync( arr, opts, predicate, done )\nfunction predicate( value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, ( index%2 === 0 ) );\n }\n };\nfunction done( error, result ) {\n if ( error ) {\n     throw error;\n }\n console.log( result );\n };\nvar opts = { 'series': true };\nvar arr = [ 3000, 2500, 1000 ];\nbifurcateByAsync( arr, opts, predicate, done )\n","bifurcateByAsync.factory":"function predicate( value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, ( index%2 === 0 ) );\n }\n };\nvar opts = { 'series': true };\nvar f = bifurcateByAsync.factory( opts, predicate );\nfunction done( error, result ) {\n if ( error ) {\n     throw error;\n }\n console.log( result );\n };\nvar arr = [ 3000, 2500, 1000 ];\nf( arr, done )\narr = [ 2000, 1500, 1000 ];\nf( arr, done )\n","bifurcateIn":"function Foo() { this.a = 'beep'; this.b = 'boop'; return this; };\nFoo.prototype = Object.create( null );\nFoo.prototype.c = 'foo';\nFoo.prototype.d = 'bar';\nvar obj = new Foo();\nfunction predicate( v ) { return v[ 0 ] === 'b'; };\nvar out = bifurcateIn( obj, predicate )\nvar opts = { 'returns': 'keys' };\nout = bifurcateIn( obj, opts, predicate )\nopts = { 'returns': '*' };\nout = bifurcateIn( obj, opts, predicate )\n","bifurcateOwn":"function predicate( v ) { return v[ 0 ] === 'b'; };\nvar obj = { 'a': 'beep', 'b': 'boop', 'c': 'foo', 'd': 'bar' };\nvar out = bifurcateOwn( obj, predicate )\nvar opts = { 'returns': 'keys' };\nout = bifurcateOwn( obj, opts, predicate )\nopts = { 'returns': '*' };\nout = bifurcateOwn( obj, opts, predicate )\n","BigInt":"var v = ( BigInt ) ? BigInt( '1' ) : null\n","binomialTest":"var out = binomialTest( 682, 925 )\nout = binomialTest( [ 682, 925 - 682 ] )\nout = binomialTest( 21, 40, {\n 'p': 0.4,\n 'alternative': 'greater'\n })\n","Boolean":"var b = new Boolean( null )\nb = Boolean( null )\nb = Boolean( [] )\n","Boolean.prototype.toString":"var b = new Boolean( true )\nb.toString()\n","Boolean.prototype.valueOf":"var b = new Boolean( true )\nb.valueOf()\n","BooleanArray":"var arr = new BooleanArray()\nvar arr = new BooleanArray( 10 )\nvar len = arr.length\nvar arr1 = new BooleanArray( [ true, false, false, true ] )\nvar arr2 = new BooleanArray( arr1 )\nvar len = arr2.length\nvar buf = new Uint8Array( [ 1, 0, 0, 1 ] )\nvar arr = new BooleanArray( buf )\nvar len = arr.length\nvar arr1 = new BooleanArray( [ true, false, false, true ] )\nvar len = arr1.length\nvar arr2 = new BooleanArray( [ {}, null, '', 4 ] );\nlen = arr2.length\nvar buf = new ArrayBuffer( 240 );\nvar arr1 = new BooleanArray( buf )\nvar len = arr1.length\nvar arr2 = new BooleanArray( buf, 8 )\nlen = arr2.length\nvar arr3 = new BooleanArray( buf, 8, 20 )\nlen = arr3.length\n","BooleanArray.from":"function map( v ) { return !v };\nvar src = [ true, false ];\nvar arr = BooleanArray.from( src, map )\nvar len = arr.length\nvar v = arr.get( 0 )\nv = arr.get( 1 )\n","BooleanArray.of":"var arr = BooleanArray.of( true, false, false, true )\nvar len = arr.length\n","BooleanArray.BYTES_PER_ELEMENT":"var nbytes = BooleanArray.BYTES_PER_ELEMENT\n","BooleanArray.name":"var str = BooleanArray.name\n","BooleanArray.prototype.buffer":"var arr = new BooleanArray( 2 )\nvar buf = arr.buffer\n","BooleanArray.prototype.byteLength":"var arr = new BooleanArray( 10 )\nvar nbytes = arr.byteLength\n","BooleanArray.prototype.byteOffset":"var arr = new BooleanArray( 10 )\nvar offset = arr.byteOffset\nvar buf = new ArrayBuffer( 240 )\narr = new BooleanArray( buf, 64 )\noffset = arr.byteOffset\n","BooleanArray.prototype.BYTES_PER_ELEMENT":"var arr = new BooleanArray( 10 )\narr.BYTES_PER_ELEMENT\n","BooleanArray.prototype.length":"var arr = new BooleanArray( 10 )\nvar len = arr.length\n","BooleanArray.prototype.every":"function predicate( v ) { return v === true; };\nvar arr = new BooleanArray( [ true, true, true ] )\nvar bool = arr.every( predicate )\n","BooleanArray.prototype.find":"function predicate( v ) { return v === true; };\nvar arr = new BooleanArray( [ true, false, true ] )\nvar v = arr.find( predicate )\n","BooleanArray.prototype.findIndex":"function predicate( v ) { return v === true; };\nvar arr = new BooleanArray( [ true, false, true ] )\nvar idx = arr.findIndex( predicate )\n","BooleanArray.prototype.findLast":"function predicate( v ) { return v === true; };\nvar arr = new BooleanArray( [ true, false, true ] )\nvar v = arr.findLast( predicate )\n","BooleanArray.prototype.findLastIndex":"function predicate( v ) { return v === true; };\nvar arr = new BooleanArray( [ true, false, true ] )\nvar idx = arr.findLastIndex( predicate )\n","BooleanArray.prototype.get":"var arr = new BooleanArray( 10 )\narr.set( true, 0 );\nvar v = arr.get( 0 )\n","BooleanArray.prototype.indexOf":"var arr = new BooleanArray( [ true, false, true, true, true ] )\nvar idx = arr.indexOf( true )\nidx = arr.indexOf( false, 3 )\n","BooleanArray.prototype.lastIndexOf":"var arr = new BooleanArray( [ true, true, true, false, true ] )\nvar idx = arr.lastIndexOf( false )\nidx = arr.lastIndexOf( false, 2 )\n","BooleanArray.prototype.map":"function invert( v ) { return !v; };\nvar arr = new BooleanArray( [ true, false, true ] )\nvar out = arr.map( invert )\nvar v = out.get( 0 )\nv = out.get( 1 )\nv = out.get( 2 )\n","BooleanArray.prototype.reverse":"var arr = new BooleanArray( [ true, false, false ] )\narr.reverse();\nvar v = arr.get( 0 )\nv = arr.get( 1 )\nv = arr.get( 2 )\n","BooleanArray.prototype.set":"var arr = new BooleanArray( 2 )\narr.set( false );\nvar v = arr.get( 0 )\narr.set( true, 1 );\nv = arr.get( 1 )\n","BooleanArray.prototype.some":"function predicate( v ) { return v === true; };\nvar arr = new BooleanArray( [ false, true, false ] )\nvar bool = arr.some( predicate )\n","BooleanArray.prototype.sort":"function compare( a, b ) { return a === true ? -1 : 1; };\nvar arr = new BooleanArray( [ true, false, true ] )\narr.sort( compare );\nvar v = arr.get( 0 )\nv = arr.get( 1 )\nv = arr.get( 2 )\n","BooleanArray.prototype.toReversed":"var arr = new BooleanArray( [ true, false, false ] )\nvar out = arr.toReversed()\nvar v = out.get( 0 )\nv = out.get( 1 )\nv = out.get( 2 )\n","BooleanArray.prototype.toSorted":"function compare( a, b ) { return a === true ? -1 : 1; };\nvar arr = new BooleanArray( [ true, false, true ] )\nvar out = arr.toSorted( compare );\nvar v = out.get( 0 )\nv = out.get( 1 )\nv = out.get( 2 )\n","broadcastArray":"var x = array( [ [ 1, 2 ], [ 3, 4 ] ] )\nvar sh = x.shape\nvar y = broadcastArray( x, [ 3, 2, 2 ] )\nsh = y.shape\nvar v = y.get( 0, 0, 0 )\nv = y.get( 0, 0, 1 )\nv = y.get( 0, 1, 0 )\nv = y.get( 0, 1, 1 )\nv = y.get( 1, 0, 0 )\nv = y.get( 1, 1, 0 )\nv = y.get( 2, 0, 0 )\nv = y.get( 2, 1, 1 )\n","broadcastArrays":"var x = array( [ [ 1, 2 ], [ 3, 4 ] ] )\nvar sh = x.shape\nvar y = ndzeros( [ 3, 2, 2 ] )\nvar out = broadcastArrays( [ x, y ] )\nvar bx = out[ 0 ]\nsh = bx.shape\nvar v = bx.get( 0, 0, 0 )\nv = bx.get( 0, 0, 1 )\nv = bx.get( 0, 1, 0 )\nv = bx.get( 0, 1, 1 )\nv = bx.get( 1, 0, 0 )\nv = bx.get( 1, 1, 0 )\nv = bx.get( 2, 0, 0 )\nv = bx.get( 2, 1, 1 )\n","Buffer":"var b = new Buffer( 4 )\nvar b1 = new Buffer( [ 1, 2, 3, 4 ] );\nvar b2 = new Buffer( b1 )\nvar b = new Buffer( [ 1, 2, 3, 4 ] )\nvar b = new Buffer( 'beep boop' )\n","buffer2json":"var buf = new allocUnsafe( 2 );\nbuf[ 0 ] = 1;\nbuf[ 1 ] = 2;\nvar json = buffer2json( buf )\n","BYTE_ORDER":"BYTE_ORDER\n","camelcase":"var out = camelcase( 'Hello World!' )\nout = camelcase( 'beep boop' )\n","capitalize":"var out = capitalize( 'beep' )\nout = capitalize( 'Boop' )\n","capitalizeKeys":"var obj = { 'aa': 1, 'bb': 2 };\nvar out = capitalizeKeys( obj )\n","CATALAN":"CATALAN\n","CBRT_EPS":"CBRT_EPS\n","CDC_NCHS_US_BIRTHS_1969_1988":"var data = CDC_NCHS_US_BIRTHS_1969_1988()\n","CDC_NCHS_US_BIRTHS_1994_2003":"var data = CDC_NCHS_US_BIRTHS_1994_2003()\n","CDC_NCHS_US_INFANT_MORTALITY_BW_1915_2013":"var data = CDC_NCHS_US_INFANT_MORTALITY_BW_1915_2013()\n","chdir":"var err = chdir( '/path/to/current/working/directory' )\n","chi2gof":"var x = [ 89, 37, 30, 28, 2 ];\nvar p = [ 0.40, 0.20, 0.20, 0.15, 0.05 ];\nvar out = chi2gof( x, p );\nvar o = out.toJSON()\nout.toString()\nvar opts = { 'alpha': 0.01 };\nout = chi2gof( x, p, opts );\nout.toString()\nx = [ 89, 37, 30, 28, 2 ];\np = [ 0.40, 0.20, 0.20, 0.15, 0.05 ];\nopts = { 'simulate': true, 'iterations': 1000 };\nout = chi2gof( x, p, opts );\nout.toString()\nvar lambda = 3.0;\nvar rpois = base.random.poisson.factory( lambda );\nvar len = 400;\nx = [];\nfor ( var i = 0; i < len; i++ ) { x.push( rpois() ); };\nvar freqs = new Int32Array( len );\nfor ( i = 0; i < len; i++ ) { freqs[ x[ i ] ] += 1; };\nout = chi2gof( freqs, 'poisson', lambda );\nout.toString()\n","chi2test":"var x = [ [ 20, 30 ], [ 30, 20 ] ];\nvar out = chi2test( x );\nvar o = out.toJSON()\nout.toString()\nvar opts = { 'alpha': 0.1 };\nout = chi2test( x, opts );\no = out.toJSON()\nout.toString()\nopts = { 'correct': false };\nout = chi2test( x, opts );\nout.toString()\n","circarray2iterator":"var it = circarray2iterator( [ 1, 2, 3, 4 ] );\nvar v = it.next().value\nv = it.next().value\n","circularArrayStream":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 15 };\nvar s = circularArrayStream( [ 1, 2, 3 ], opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","circularArrayStream.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = circularArrayStream.factory( opts );\n","circularArrayStream.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 15 };\nvar s = circularArrayStream.objectMode( [ 1, 2, 3 ], opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","CircularBuffer":"var b = CircularBuffer( 3 );\nb.push( 'foo' );\nb.push( 'bar' );\nb.push( 'beep' );\nb.length\nb.count\nb.push( 'boop' )\n","CircularBuffer.prototype.clear":"var b = CircularBuffer( 3 );\nb.push( 'foo' );\nb.push( 'bar' );\nb.push( 'beep' );\nb.count\nb.clear();\nb.count\n","CircularBuffer.prototype.count":"var b = CircularBuffer( 3 );\nb.count\nb.push( 'foo' );\nb.count\nb.push( 'bar' );\nb.count\n","CircularBuffer.prototype.full":"var b = CircularBuffer( 3 );\nb.full\nb.push( 'foo' );\nb.push( 'bar' );\nb.push( 'beep' );\nb.full\n","CircularBuffer.prototype.iterator":"var b = CircularBuffer( 3 );\nb.push( 'foo' );\nb.push( 'bar' );\nb.push( 'beep' );\nb.push( 'boop' );\nvar it = b.iterator( b.length );\nvar v = it.next().value\nv = it.next().value\nv = it.next().value\nvar bool = it.next().done\n","CircularBuffer.prototype.length":"var b = CircularBuffer( [ 0, 0, 0 ] );\nvar len = b.length\n","CircularBuffer.prototype.push":"var b = CircularBuffer( 3 );\nb.push( 'foo' )\nb.push( 'bar' )\nb.push( 'beep' )\nb.push( 'boop' )\n","CircularBuffer.prototype.toArray":"var b = CircularBuffer( 3 );\nb.push( 'foo' );\nb.push( 'bar' );\nb.push( 'beep' );\nb.push( 'boop' );\nvar vals = b.toArray()\n","CircularBuffer.prototype.toJSON":"var b = CircularBuffer( 3 );\nb.push( 'foo' );\nb.push( 'bar' );\nb.push( 'beep' );\nb.push( 'boop' );\nvar o = b.toJSON()\n","close":"function done( error ) {\n if ( error ) {\n     console.error( error.message );\n }\n };\nvar fd = open.sync( './beep/boop.js', 'r+' );\nif ( !isError( fd ) ) { close( fd, done ); };\n","close.sync":"var fd = open.sync( './beep/boop.js', 'r+' );\nif ( !isError( fd ) ) { close.sync( fd ); };\n","CMUDICT":"var data = CMUDICT();\nvar dict = data.dict\nvar phones = data.phones\nvar symbols = data.symbols\nvar vp = data.vp\n","codePointAt":"var out = codePointAt( 'last man standing', 4 )\nout = codePointAt( 'presidential election', 8, true )\nout = codePointAt( 'अनुच्छेद', 2 )\nout = codePointAt( '🌷', 1, true )\n","commonKeys":"var obj1 = { 'a': 1, 'b': 2 };\nvar obj2 = { 'a': 1, 'b': 2, 'c': 3, 'd': 4 };\nvar keys = commonKeys( obj1, obj2 )\n","commonKeysIn":"var obj1 = { 'a': 1, 'b': 2 };\nvar obj2 = { 'a': 1, 'b': 2, 'c': 3, 'd': 4 };\nvar keys = commonKeysIn( obj1, obj2 )\n","complex":"var z = complex( 5.0, 3.0, 'float64' )\nz = complex( 5.0, 3.0, 'float32' )\n","Complex64":"var z = new Complex64( 5.0, 3.0 )\nz.re\nz.im\n","Complex64.BYTES_PER_ELEMENT":"var s = Complex64.BYTES_PER_ELEMENT\n","Complex64.prototype.BYTES_PER_ELEMENT":"var z = new Complex64( 5.0, 3.0 )\nvar s = z.BYTES_PER_ELEMENT\n","Complex64.prototype.byteLength":"var z = new Complex64( 5.0, 3.0 )\nvar s = z.byteLength\n","COMPLEX64_NAN":"COMPLEX64_NAN\n","COMPLEX64_NUM_BYTES":"COMPLEX64_NUM_BYTES\n","COMPLEX64_ZERO":"COMPLEX64_ZERO\n","Complex64Array":"var arr = new Complex64Array()\nvar arr = new Complex64Array( 10 )\nvar len = arr.length\nvar arr1 = new Complex64Array( [ 1.0, -1.0, 2.0, -2.0 ] )\nvar arr2 = new Complex64Array( arr1 )\nvar len = arr2.length\nvar buf = new Float32Array( [ 1.0, -1.0, 2.0, -2.0 ] )\nvar arr = new Complex64Array( buf )\nvar len = arr.length\nvar arr1 = new Complex64Array( [ 1.0, -1.0, 2.0, -2.0 ] )\nvar len = arr1.length\nvar buf = [ new Complex64( 1.0, -1.0 ), new Complex64( 2.0, -2.0 )];\nvar arr2 = new Complex64Array( buf )\nlen = arr2.length\nvar buf = new ArrayBuffer( 240 );\nvar arr1 = new Complex64Array( buf )\nvar len = arr1.length\nvar arr2 = new Complex64Array( buf, 8 )\nlen = arr2.length\nvar arr3 = new Complex64Array( buf, 8, 20 )\nlen = arr3.length\n","Complex64Array.from":"function clbkFcn( v ) { return v * 2.0 };\nvar arr = Complex64Array.from( [ 1.0, -1.0, 2.0, -2.0 ], clbkFcn )\nvar len = arr.length\nvar z = arr.get( 0 )\nvar re = realf( z )\nvar im = imagf( z )\n","Complex64Array.of":"var arr = Complex64Array.of( 1.0, -1.0, 2.0, -2.0 )\nvar len = arr.length\nvar z1 = new Complex64( 1.0, -1.0 );\nvar z2 = new Complex64( 2.0, -2.0 );\narr = Complex64Array.of( z1, z2 )\nlen = arr.length\nvar z = arr.get( 0 )\nvar re = realf( z )\nvar im = imagf( z )\n","Complex64Array.BYTES_PER_ELEMENT":"var nbytes = Complex64Array.BYTES_PER_ELEMENT\n","Complex64Array.name":"var str = Complex64Array.name\n","Complex64Array.prototype.buffer":"var arr = new Complex64Array( 2 )\nvar buf = arr.buffer\n","Complex64Array.prototype.byteLength":"var arr = new Complex64Array( 10 )\nvar nbytes = arr.byteLength\n","Complex64Array.prototype.byteOffset":"var arr = new Complex64Array( 5 )\nvar offset = arr.byteOffset\nvar buf = new ArrayBuffer( 240 );\narr = new Complex64Array( buf, 64 )\noffset = arr.byteOffset\n","Complex64Array.prototype.BYTES_PER_ELEMENT":"var arr = new Complex64Array( 10 )\narr.BYTES_PER_ELEMENT\n","Complex64Array.prototype.length":"var arr = new Complex64Array( 10 )\nvar len = arr.length\n","Complex64Array.prototype.at":"var arr = new Complex64Array( [ 1.0, -1.0, 2.0, -2.0 ] )\nvar z = arr.at( 1 )\nvar re = realf( z )\nvar im = imagf( z )\n","Complex64Array.prototype.copyWithin":"var arr = new Complex64Array( [ 1.0, -1.0, 2.0, -2.0, 3.0, -3.0, 4.0, -4.0 ] )\narr.copyWithin( 0, 2 )\nvar z = arr.get( 0 )\nvar re = realf( z )\nvar im = imagf( z )\n","Complex64Array.prototype.entries":"var arr = new Complex64Array( [ 1.0, -1.0, 2.0, -2.0, 3.0, -3.0 ] )\nvar it = arr.entries();\nvar v = it.next().value\nvar re = realf( v[ 1 ] )\nvar im = imagf( v[ 1 ] )\nv = it.next().value\nre = realf( v[ 1 ] )\nim = imagf( v[ 1 ] )\nv = it.next().value\nre = realf( v[ 1 ] )\nim = imagf( v[ 1 ] )\nvar bool = it.next().done\n","Complex64Array.prototype.every":"function predicate( v ) { return ( realf( v ) > 0.0 ); };\nvar arr = new Complex64Array( [ 1.0, -1.0, 2.0, -2.0 ] )\nvar bool = arr.every( predicate )\n","Complex64Array.prototype.fill":"var arr = new Complex64Array( 3 )\narr.fill( new Complex64( 1.0, 1.0 ) );\nvar z = arr.get( 0 )\nvar re = realf( z )\nvar im = imagf( z )\nz = arr.get( 1 )\nre = realf( z )\nim = imagf( z )\nz = arr.get( 2 )\nre = realf( z )\nim = imagf( z )\n","Complex64Array.prototype.filter":"function predicate( v ) { return ( realf( v ) === imagf( v ) ); };\nvar arr = new Complex64Array( [ 1.0, -1.0, 2.0, 2.0, 3.0, -3.0 ] )\nvar out = arr.filter( predicate )\nvar len = out.length\nvar z = out.get( 0 )\nvar re = realf( z )\nvar im = imagf( z )\n","Complex64Array.prototype.find":"function predicate( v ) { return ( realf( v ) === imagf( v ) ); };\nvar arr = new Complex64Array( [ 1.0, 1.0, 2.0, 2.0, 3.0, -3.0 ] )\nvar z = arr.find( predicate )\nvar re = realf( z )\nvar im = imagf( z )\n","Complex64Array.prototype.findIndex":"function predicate( v ) { return ( realf( v ) === imagf( v ) ); };\nvar arr = new Complex64Array( [ 1.0, 1.0, 2.0, 2.0, 3.0, -3.0 ] )\nvar idx = arr.findIndex( predicate )\n","Complex64Array.prototype.findLast":"function predicate( v ) { return ( realf( v ) === imagf( v ) ); };\nvar arr = new Complex64Array( [ 1.0, 1.0, 2.0, 2.0, 3.0, -3.0 ] )\nvar z = arr.findLast( predicate )\nvar re = realf( z )\nvar im = imagf( z )\n","Complex64Array.prototype.findLastIndex":"function predicate( v ) { return ( realf( v ) === imagf( v ) ); };\nvar arr = new Complex64Array( [ 1.0, 1.0, 2.0, 2.0, 3.0, -3.0 ] )\nvar idx = arr.findLastIndex( predicate )\n","Complex64Array.prototype.forEach":"var str = '%';\nfunction clbk( v ) { str += v.toString() + '%'; };\nvar arr = new Complex64Array( [ 1.0, -1.0, 2.0, -2.0 ] )\narr.forEach( clbk );\nstr\n","Complex64Array.prototype.get":"var arr = new Complex64Array( [ 1.0, -1.0, 2.0, -2.0 ] )\nvar z = arr.get( 1 )\nvar re = realf( z )\nvar im = imagf( z )\n","Complex64Array.prototype.includes":"var arr = new Complex64Array( [ 1.0, -1.0, 2.0, -2.0, 3.0, -3.0, 4.0, -4.0 ] )\nvar bool = arr.includes( new Complex64( 3.0, -3.0 ) )\nbool = arr.includes( new Complex64( 3.0, -3.0 ), 3 )\n","Complex64Array.prototype.indexOf":"var arr = new Complex64Array( [ 1.0, -1.0, 2.0, -2.0, 3.0, -3.0, 4.0, -4.0 ] )\nvar idx = arr.indexOf( new Complex64( 3.0, -3.0 ) )\nidx = arr.indexOf( new Complex64( 3.0, -3.0 ), 3 )\n","Complex64Array.prototype.join":"var arr = new Complex64Array( [ 1.0, -1.0, 2.0, -2.0 ] )\nvar str = arr.join()\nstr = arr.join( '/' )\n","Complex64Array.prototype.keys":"var arr = new Complex64Array( [ 1.0, -1.0, 2.0, -2.0 ] )\nvar it = arr.keys();\nvar v = it.next().value\nv = it.next().value\nv = it.next().done\n","Complex64Array.prototype.lastIndexOf":"var arr = new Complex64Array( [ 1.0, -1.0, 2.0, -2.0, 3.0, -3.0, 1.0, -1.0 ] )\nvar idx = arr.lastIndexOf( new Complex64( 1.0, -1.0 ) )\nidx = arr.lastIndexOf( new Complex64( 1.0, -1.0 ), 2 )\n","Complex64Array.prototype.map":"function clbk( v ) { return v; };\nvar arr = new Complex64Array( [ 1.0, -1.0, 2.0, -2.0 ] )\nvar out = arr.map( clbk )\nvar z = out.get( 0 )\nvar re = realf( z )\nvar im = imagf( z )\nz = out.get( 1 )\nre = realf( z )\nim = imagf( z )\n","Complex64Array.prototype.reduce":"var arr = new Complex64Array( [ 1.0, -1.0, 2.0, -2.0 ] )\nvar z = arr.reduce( base.caddf )\nvar re = realf( z )\nvar im = imagf( z )\n","Complex64Array.prototype.reduceRight":"var arr = new Complex64Array( [ 1.0, -1.0, 2.0, -2.0 ] )\nvar z = arr.reduceRight( base.caddf )\nvar re = realf( z )\nvar im = imagf( z )\n","Complex64Array.prototype.reverse":"var arr = new Complex64Array( [ 1.0, -1.0, 2.0, -2.0, 3.0, -3.0 ] )\narr.reverse();\nvar z = arr.get( 0 )\nvar re = realf( z )\nvar im = imagf( z )\nz = arr.get( 1 )\nre = realf( z )\nim = imagf( z )\nz = arr.get( 2 )\nre = realf( z )\nim = imagf( z )\n","Complex64Array.prototype.set":"var arr = new Complex64Array( 2 )\narr.set( new Complex64( 1.0, -1.0 ) );\nvar z = arr.get( 0 )\nvar re = realf( z )\nvar im = imagf( z )\narr.set( new Complex64( 2.0, -2.0 ), 1 );\nz = arr.get( 1 )\nre = realf( z )\nim = imagf( z )\n","Complex64Array.prototype.slice":"var arr = new Complex64Array( [ 1.0, -1.0, 2.0, -2.0, 3.0, -3.0 ] )\nvar out = arr.slice( 1 )\nvar len = out.length\nvar z = out.get( 0 )\nvar re = realf( z )\nvar im = imagf( z )\nz = out.get( 1 )\nre = realf( z )\nim = imagf( z )\n","Complex64Array.prototype.some":"function predicate( v ) { return ( realf( v ) === imagf( v ) ); };\nvar arr = new Complex64Array( [ 1.0, -1.0, 2.0, 2.0, 3.0, -3.0 ] )\nvar bool = arr.some( predicate )\n","Complex64Array.prototype.sort":"function compare( a, b ) { return ( realf( a ) - realf( b ) ); };\nvar arr = new Complex64Array( [ 2.0, -2.0, 3.0, -3.0, 1.0, -1.0 ] )\narr.sort( compare );\nvar z = arr.get( 0 )\nvar re = realf( z )\nvar im = imagf( z )\nz = arr.get( 1 )\nre = realf( z )\nim = imagf( z )\nz = arr.get( 2 )\nre = realf( z )\nim = imagf( z )\n","Complex64Array.prototype.subarray":"var arr = new Complex64Array( [ 1.0, -1.0, 2.0, -2.0, 3.0, -3.0, 4.0, -4.0 ] )\nvar out = arr.subarray( 1, 3 )\nvar len = out.length\nvar z = out.get( 0 )\nvar re = realf( z )\nvar im = imagf( z )\nz = out.get( 1 )\nre = realf( z )\nim = imagf( z )\n","Complex64Array.prototype.toLocaleString":"var arr = new Complex64Array( [ 1.0, 1.0, 2.0, 2.0 ] )\nvar str = arr.toLocaleString()\n","Complex64Array.prototype.toReversed":"var arr = new Complex64Array( [ 1.0, 1.0, 2.0, 2.0, 3.0, 3.0 ] )\nvar out = arr.toReversed()\nvar z = out.get( 0 )\nvar re = realf( z )\nvar im = imagf( z )\nz = out.get( 1 )\nre = realf( z )\nim = imagf( z )\nz = out.get( 2 )\nre = realf( z )\nim = imagf( z )\n","Complex64Array.prototype.toSorted":"function compare( a, b ) { return ( realf( a ) - realf( b ) ); };\nvar arr = new Complex64Array( [ 2.0, -2.0, 3.0, -3.0, 1.0, -1.0 ] )\nvar out = arr.toSorted( compare );\nvar z = out.get( 0 )\nvar re = realf( z )\nvar im = imagf( z )\nz = out.get( 1 )\nre = realf( z )\nim = imagf( z )\nz = out.get( 2 )\nre = realf( z )\nim = imagf( z )\n","Complex64Array.prototype.toString":"var arr = new Complex64Array( [ 1.0, 1.0, 2.0, -2.0, 3.0, 3.0 ] )\nvar str = arr.toString()\n","Complex64Array.prototype.values":"var arr = new Complex64Array( [ 1.0, -1.0, 2.0, -2.0 ] )\nvar it = arr.values();\nvar v = it.next().value\nvar re = realf( v )\nvar im = imagf( v )\nv = it.next().value\nre = realf( v )\nim = imagf( v )\nvar bool = it.next().done\n","Complex64Array.prototype.with":"var arr = new Complex64Array( [ 1.0, -1.0, 2.0, -2.0 ] )\nvar out = arr.with( 1, new Complex64( 3.0, -3.0 ) )\nvar z = out.get( 1 )\nvar re = realf( z )\nvar im = imagf( z )\n","Complex128.BYTES_PER_ELEMENT":"var s = Complex128.BYTES_PER_ELEMENT\n","Complex128.prototype.BYTES_PER_ELEMENT":"var z = new Complex128( 5.0, 3.0 )\nvar s = z.BYTES_PER_ELEMENT\n","Complex128.prototype.byteLength":"var z = new Complex128( 5.0, 3.0 )\nvar s = z.byteLength\n","COMPLEX128_NAN":"COMPLEX128_NAN\n","COMPLEX128_NUM_BYTES":"COMPLEX128_NUM_BYTES\n","COMPLEX128_ZERO":"COMPLEX128_ZERO\n","Complex128Array":"var arr = new Complex128Array()\nvar arr = new Complex128Array( 10 )\nvar len = arr.length\nvar arr1 = new Complex128Array( [ 1.0, -1.0, 2.0, -2.0 ] )\nvar arr2 = new Complex128Array( arr1 )\nvar len = arr2.length\nvar buf = new Float64Array( [ 1.0, -1.0, 2.0, -2.0 ] )\nvar arr = new Complex128Array( buf )\nvar len = arr.length\nvar arr1 = new Complex128Array( [ 1.0, -1.0, 2.0, -2.0 ] )\nvar len = arr1.length\nvar buf = [ new Complex128( 1.0, -1.0 ), new Complex128( 2.0, -2.0 ) ];\nvar arr2 = new Complex128Array( buf )\nlen = arr2.length\nvar buf = new ArrayBuffer( 480 );\nvar arr1 = new Complex128Array( buf )\nvar len = arr1.length\nvar arr2 = new Complex128Array( buf, 16 )\nlen = arr2.length\nvar arr3 = new Complex128Array( buf, 16, 20 )\nlen = arr3.length\n","Complex128Array.from":"function clbkFcn( v ) { return v * 2.0 };\nvar arr = Complex128Array.from( [ 1.0, -1.0, 2.0, -2.0 ], clbkFcn )\nvar len = arr.length\nvar z = arr.get( 0 )\nvar re = real( z )\nvar im = imag( z )\n","Complex128Array.of":"var arr = Complex128Array.of( 1.0, -1.0, 2.0, -2.0 )\nvar len = arr.length\nvar z1 = new Complex128( 1.0, -1.0 );\nvar z2 = new Complex128( 2.0, -2.0 );\narr = Complex128Array.of( z1, z2 )\nlen = arr.length\nvar z = arr.get( 0 )\nvar re = real( z )\nvar im = imag( z )\n","Complex128Array.BYTES_PER_ELEMENT":"var nbytes = Complex128Array.BYTES_PER_ELEMENT\n","Complex128Array.name":"var str = Complex128Array.name\n","Complex128Array.prototype.buffer":"var arr = new Complex128Array( 2 )\nvar buf = arr.buffer\n","Complex128Array.prototype.byteLength":"var arr = new Complex128Array( 10 )\nvar nbytes = arr.byteLength\n","Complex128Array.prototype.byteOffset":"var arr = new Complex128Array( 10 )\nvar offset = arr.byteOffset\nvar buf = new ArrayBuffer( 480 );\narr = new Complex128Array( buf, 128 )\noffset = arr.byteOffset\n","Complex128Array.prototype.BYTES_PER_ELEMENT":"var arr = new Complex128Array( 10 )\narr.BYTES_PER_ELEMENT\n","Complex128Array.prototype.length":"var arr = new Complex128Array( 10 )\nvar len = arr.length\n","Complex128Array.prototype.at":"var arr = new Complex128Array( [ 1.0, -1.0, 2.0, -2.0 ] )\nvar z = arr.at( 1 )\nvar re = real( z )\nvar im = imag( z )\n","Complex128Array.prototype.copyWithin":"var arr = new Complex128Array( [ 1.0, -1.0, 2.0, -2.0, 3.0, -3.0, 4.0, -4.0 ] )\narr.copyWithin( 0, 2 )\nvar z = arr.get( 0 )\nvar re = real( z )\nvar im = imag( z )\n","Complex128Array.prototype.entries":"var arr = new Complex128Array( [ 1.0, -1.0, 2.0, -2.0, 3.0, -3.0 ] )\nvar it = arr.entries();\nvar v = it.next().value\nvar re = real( v[ 1 ] )\nvar im = imag( v[ 1 ] )\nv = it.next().value\nre = real( v[ 1 ] )\nim = imag( v[ 1 ] )\nv = it.next().value\nre = real( v[ 1 ] )\nim = imag( v[ 1 ] )\nvar bool = it.next().done\n","Complex128Array.prototype.every":"function predicate( v ) { return ( real( v ) > 0.0 ); };\nvar arr = new Complex128Array( [ 1.0, -1.0, 2.0, -2.0 ] )\nvar bool = arr.every( predicate )\n","Complex128Array.prototype.fill":"var arr = new Complex128Array( 3 )\narr.fill( new Complex128( 1.0, 1.0 ) );\nvar z = arr.get( 0 )\nvar re = real( z )\nvar im = imag( z )\nz = arr.get( 1 )\nre = real( z )\nim = imag( z )\nz = arr.get( 2 )\nre = real( z )\nim = imag( z )\n","Complex128Array.prototype.filter":"function predicate( v ) { return ( real( v ) === imag( v ) ); };\nvar arr = new Complex128Array( [ 1.0, -1.0, 2.0, 2.0, 3.0, -3.0 ] )\nvar out = arr.filter( predicate )\nvar len = out.length\nvar z = out.get( 0 )\nvar re = real( z )\nvar im = imag( z )\n","Complex128Array.prototype.find":"function predicate( v ) { return ( real( v ) === imag( v ) ); };\nvar arr = new Complex128Array( [ 1.0, 1.0, 2.0, 2.0, 3.0, -3.0 ] )\nvar z = arr.find( predicate )\nvar re = real( z )\nvar im = imag( z )\n","Complex128Array.prototype.findIndex":"function predicate( v ) { return ( real( v ) === imag( v ) ); };\nvar arr = new Complex128Array( [ 1.0, 1.0, 2.0, 2.0, 3.0, -3.0 ] )\nvar idx = arr.findIndex( predicate )\n","Complex128Array.prototype.findLast":"function predicate( v ) { return ( real( v ) === imag( v ) ); };\nvar arr = new Complex128Array( [ 1.0, 1.0, 2.0, 2.0, 3.0, -3.0 ] )\nvar z = arr.findLast( predicate )\nvar re = real( z )\nvar im = imag( z )\n","Complex128Array.prototype.findLastIndex":"function predicate( v ) { return ( real( v ) === imag( v ) ); };\nvar arr = new Complex128Array( [ 1.0, 1.0, 2.0, 2.0, 3.0, -3.0 ] )\nvar idx = arr.findLastIndex( predicate )\n","Complex128Array.prototype.forEach":"var str = '%';\nfunction clbk( v ) { str += v.toString() + '%'; };\nvar arr = new Complex128Array( [ 1.0, -1.0, 2.0, -2.0 ] )\narr.forEach( clbk );\nstr\n","Complex128Array.prototype.get":"var arr = new Complex128Array( [ 1.0, -1.0, 2.0, -2.0 ] )\nvar z = arr.get( 1 )\nvar re = real( z )\nvar im = imag( z )\n","Complex128Array.prototype.includes":"var arr = new Complex128Array( [ 1.0, -1.0, 2.0, -2.0, 3.0, -3.0, 4.0, -4.0 ] )\nvar bool = arr.includes( new Complex128( 3.0, -3.0 ) )\nbool = arr.includes( new Complex128( 3.0, -3.0 ), 3 )\n","Complex128Array.prototype.indexOf":"var arr = new Complex128Array( [ 1.0, -1.0, 2.0, -2.0, 3.0, -3.0, 4.0, -4.0 ] )\nvar idx = arr.indexOf( new Complex128( 3.0, -3.0 ) )\nidx = arr.indexOf( new Complex128( 3.0, -3.0 ), 3 )\n","Complex128Array.prototype.join":"var arr = new Complex128Array( [ 1.0, -1.0, 2.0, -2.0 ] )\nvar str = arr.join()\nstr = arr.join( '/' )\n","Complex128Array.prototype.keys":"var arr = new Complex128Array( [ 1.0, -1.0, 2.0, -2.0 ] )\nvar it = arr.keys();\nvar v = it.next().value\nv = it.next().value\nv = it.next().done\n","Complex128Array.prototype.lastIndexOf":"var arr = new Complex128Array( [ 1.0, -1.0, 2.0, -2.0, 3.0, -3.0, 1.0, -1.0 ] )\nvar idx = arr.lastIndexOf( new Complex128( 1.0, -1.0 ) )\nidx = arr.lastIndexOf( new Complex128( 1.0, -1.0 ), 2 )\n","Complex128Array.prototype.map":"function clbk( v ) { return v; };\nvar arr = new Complex128Array( [ 1.0, -1.0, 2.0, -2.0 ] )\nvar out = arr.map( clbk )\nvar z = out.get( 0 )\nvar re = real( z )\nvar im = imag( z )\nz = out.get( 1 )\nre = real( z )\nim = imag( z )\n","Complex128Array.prototype.reduce":"var arr = new Complex128Array( [ 1.0, -1.0, 2.0, -2.0 ] )\nvar z = arr.reduce( base.cadd )\nvar re = real( z )\nvar im = imag( z )\n","Complex128Array.prototype.reduceRight":"var arr = new Complex128Array( [ 1.0, -1.0, 2.0, -2.0 ] )\nvar z = arr.reduceRight( base.cadd )\nvar re = real( z )\nvar im = imag( z )\n","Complex128Array.prototype.reverse":"var arr = new Complex128Array( [ 1.0, -1.0, 2.0, -2.0, 3.0, -3.0 ] )\narr.reverse();\nvar z = arr.get( 0 )\nvar re = real( z )\nvar im = imag( z )\nz = arr.get( 1 )\nre = real( z )\nim = imag( z )\nz = arr.get( 2 )\nre = real( z )\nim = imag( z )\n","Complex128Array.prototype.set":"var arr = new Complex128Array( 2 )\narr.set( new Complex128( 1.0, -1.0 ) );\nvar z = arr.get( 0 )\nvar re = real( z )\nvar im = imag( z )\narr.set( new Complex128( 2.0, -2.0 ), 1 );\nz = arr.get( 1 )\nre = real( z )\nim = imag( z )\n","Complex128Array.prototype.slice":"var arr = new Complex128Array( [ 1.0, -1.0, 2.0, -2.0, 3.0, -3.0 ] )\nvar out = arr.slice( 1 )\nvar len = out.length\nvar z = out.get( 0 )\nvar re = real( z )\nvar im = imag( z )\nz = out.get( 1 )\nre = real( z )\nim = imag( z )\n","Complex128Array.prototype.some":"function predicate( v ) { return ( real( v ) === imag( v ) ); };\nvar arr = new Complex128Array( [ 1.0, -1.0, 2.0, 2.0, 3.0, -3.0 ] )\nvar bool = arr.some( predicate )\n","Complex128Array.prototype.sort":"function compare( a, b ) { return ( real( a ) - real( b ) ); };\nvar arr = new Complex128Array( [ 2.0, -2.0, 3.0, -3.0, 1.0, -1.0 ] )\narr.sort( compare );\nvar z = arr.get( 0 )\nvar re = real( z )\nvar im = imag( z )\nz = arr.get( 1 )\nre = real( z )\nim = imag( z )\nz = arr.get( 2 )\nre = real( z )\nim = imag( z )\n","Complex128Array.prototype.subarray":"var arr = new Complex128Array( [ 1.0, -1.0, 2.0, -2.0, 3.0, -3.0, 4.0, -4.0 ] )\nvar out = arr.subarray( 1, 3 )\nvar len = out.length\nvar z = out.get( 0 )\nvar re = real( z )\nvar im = imag( z )\nz = out.get( 1 )\nre = real( z )\nim = imag( z )\n","Complex128Array.prototype.toLocaleString":"var arr = new Complex128Array( [ 1.0, 1.0, 2.0, 2.0 ] )\nvar str = arr.toLocaleString()\n","Complex128Array.prototype.toReversed":"var arr = new Complex128Array( [ 1.0, 1.0, 2.0, 2.0, 3.0, 3.0 ] )\nvar out = arr.toReversed()\nvar z = out.get( 0 )\nvar re = real( z )\nvar im = imag( z )\nz = out.get( 1 )\nre = real( z )\nim = imag( z )\nz = out.get( 2 )\nre = real( z )\nim = imag( z )\n","Complex128Array.prototype.toSorted":"function compare( a, b ) { return ( real( a ) - real( b ) ); };\nvar arr = new Complex128Array( [ 2.0, -2.0, 3.0, -3.0, 1.0, -1.0 ] )\nvar out = arr.toSorted( compare );\nvar z = out.get( 0 )\nvar re = real( z )\nvar im = imag( z )\nz = out.get( 1 )\nre = real( z )\nim = imag( z )\nz = out.get( 2 )\nre = real( z )\nim = imag( z )\n","Complex128Array.prototype.toString":"var arr = new Complex128Array( [ 1.0, 1.0, 2.0, -2.0, 3.0, 3.0 ] )\nvar str = arr.toString()\n","Complex128Array.prototype.values":"var arr = new Complex128Array( [ 1.0, -1.0, 2.0, -2.0 ] )\nvar it = arr.values();\nvar v = it.next().value\nvar re = real( v )\nvar im = imag( v )\nv = it.next().value\nre = real( v )\nim = imag( v )\nvar bool = it.next().done\n","Complex128Array.prototype.with":"var arr = new Complex128Array( [ 1.0, -1.0, 2.0, -2.0 ] )\nvar out = arr.with( 1, new Complex64( 3.0, -3.0 ) )\nvar z = out.get( 1 )\nvar re = real( z )\nvar im = imag( z )\n","complexarray":"var arr = complexarray()\narr = complexarray( 'complex64' )\nvar arr = complexarray( 5 )\narr = complexarray( 5, 'complex64' )\nvar arr1 = complexarray( [ 0.5, 0.5, 0.5, 0.5 ] );\nvar arr2 = complexarray( arr1, 'complex64' )\nvar arr1 = [ 0.5, 0.5, 0.5, 0.5 ];\nvar arr2 = complexarray( arr1, 'complex64' )\nvar buf = new ArrayBuffer( 64 );\nvar arr = complexarray( buf, 0, 8, 'complex64' )\n","complexarrayCtors":"var ctor = complexarrayCtors( 'complex64' )\nctor = complexarrayCtors( 'float32' )\n","complexarrayDataTypes":"var out = complexarrayDataTypes()\n","complexCtors":"var ctor = complexCtors( 'complex128' )\nctor = complexCtors( 'complex' )\n","complexDataType":"var v = new Complex128( 1.0, 2.0 );\nvar dt = complexDataType( v )\ndt = complexDataType( 'beep' )\n","complexDataTypes":"var out = complexDataTypes()\n","complexPromotionRules":"var out = complexPromotionRules( 'complex128', 'complex64' )\n","compose":"function a( x ) {\nreturn 2 * x;\n }\nfunction b( x ) {\nreturn x + 3;\n }\nfunction c( x ) {\nreturn x / 5;\n }\nvar f = compose( c, b, a );\nvar z = f( 6 )\n","composeAsync":"function a( x, next ) {\nsetTimeout( onTimeout, 0 );\nfunction onTimeout() {\n    next( null, 2*x );\n}\n };\nfunction b( x, next ) {\nsetTimeout( onTimeout, 0 );\nfunction onTimeout() {\n    next( null, x+3 );\n}\n };\nfunction c( x, next ) {\nsetTimeout( onTimeout, 0 );\nfunction onTimeout() {\n    next( null, x/5 );\n}\n };\nvar f = composeAsync( c, b, a );\nfunction done( error, result ) {\nif ( error ) {\n    throw error;\n}\nconsole.log( result );\n };\nf( 6, done )\n","configdir":"var dir = configdir()\ndir = configdir( 'appname/config' )\n","conj":"var z = new Complex128( 5.0, 3.0 );\nz.toString()\nvar v = conj( z );\nv.toString()\n","conjf":"var z = new Complex64( 5.0, 3.0 );\nz.toString()\nvar v = conjf( z );\nv.toString()\n","constantcase":"var out = constantcase( 'Hello World!' )\nout = constantcase( 'I am a tiny little teapot' )\n","constantFunction":"var fcn = constantFunction( 3.14 );\nvar v = fcn()\nv = fcn()\nv = fcn()\n","constantStream":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = constantStream( 'beep', opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","constantStream.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = constantStream.factory( opts );\n","constantStream.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = constantStream.objectMode( 3.14, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","constructorName":"var v = constructorName( 'a' )\nv = constructorName( {} )\nv = constructorName( true )\n","contains":"var bool = contains( 'Hello World', 'World' )\nbool = contains( 'Hello World', 'world' )\nbool = contains( [ 1, 2, 3, 4 ], 2 )\nbool = contains( [ NaN, 2, 3, 4 ], NaN )\nbool = contains( 'Hello World', 'Hello', 6 )\nbool = contains( [ true, NaN, false ], true, 1 )\n","convertArray":"var arr = [ 1.0, 2.0, 3.0, 4.0 ];\nvar out = convertArray( arr, 'float32' )\n","convertArraySame":"var x = [ 1.0, 2.0, 3.0, 4.0 ];\nvar y = new Float32Array( 0 );\nvar out = convertArraySame( x, y )\n","convertPath":"var out = convertPath( '/c/foo/bar/beep.c', 'win32' )\nout = convertPath( '/c/foo/bar/beep.c', 'mixed' )\nout = convertPath( '/c/foo/bar/beep.c', 'posix' )\nout = convertPath( 'C:\\\\\\\\foo\\\\bar\\\\beep.c', 'win32' )\nout = convertPath( 'C:\\\\\\\\foo\\\\bar\\\\beep.c', 'mixed' )\nout = convertPath( 'C:\\\\\\\\foo\\\\bar\\\\beep.c', 'posix' )\n","copy":"var value = [ { 'a': 1, 'b': true, 'c': [ 1, 2, 3 ] } ];\nvar out = copy( value )\nvar bool = ( value[ 0 ].c === out[ 0 ].c )\nvalue = [ { 'a': 1, 'b': true, 'c': [ 1, 2, 3 ] } ];\nout = copy( value, 1 );\nbool = ( value[ 0 ] === out[ 0 ] )\nbool = ( value[ 0 ].c === out[ 0 ].c )\n","copyBuffer":"var b1 = array2buffer( [ 1, 2, 3, 4 ] );\nvar b2 = copyBuffer( b1 )\n","countBy":"function indicator( v ) {\n if ( v[ 0 ] === 'b' ) {\n     return 'b';\n }\n return 'other';\n };\nvar collection = [ 'beep', 'boop', 'foo', 'bar' ];\nvar out = countBy( collection, indicator )\n","countByAsync":"function indicator( value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, ( index%2 === 0 ) ? 'even': 'odd' );\n }\n };\nfunction done( error, result ) {\n if ( error ) {\n     throw error;\n }\n console.log( result );\n };\nvar arr = [ 3000, 2500, 1000 ];\ncountByAsync( arr, indicator, done )\nfunction indicator( value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, ( index%2 === 0 ) ? 'even' : 'odd' );\n }\n };\nfunction done( error, result ) {\n if ( error ) {\n     throw error;\n }\n console.log( result );\n };\nvar opts = { 'limit': 2 };\nvar arr = [ 3000, 2500, 1000 ];\ncountByAsync( arr, opts, indicator, done )\nfunction indicator( value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, ( index%2 === 0 ) ? 'even' : 'odd' );\n }\n };\nfunction done( error, result ) {\n if ( error ) {\n     throw error;\n }\n console.log( result );\n };\nvar opts = { 'series': true };\nvar arr = [ 3000, 2500, 1000 ];\ncountByAsync( arr, opts, indicator, done )\n","countByAsync.factory":"function indicator( value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, ( index%2 === 0 ) ? 'even' : 'odd' );\n }\n };\nvar opts = { 'series': true };\nvar f = countByAsync.factory( opts, indicator );\nfunction done( error, result ) {\n if ( error ) {\n     throw error;\n }\n console.log( result );\n };\nvar arr = [ 3000, 2500, 1000 ];\nf( arr, done )\narr = [ 2000, 1500, 1000, 500 ];\nf( arr, done )\n","currentYear":"var y = currentYear()\n","curry":"function add( x, y ) { return x + y; };\nvar f = curry( add );\nvar sum = f( 2 )( 3 )\nfunction add() { return arguments[ 0 ] + arguments[ 1 ]; };\nf = curry( add, 2 );\nsum = f( 2 )( 3 )\nvar obj = {\n 'name': 'Ada',\n 'greet': function greet( word1, word2 ) {\n    return word1 + ' ' + word2 + ', ' + this.name + '!'\n }\n };\nf = curry( obj.greet, obj );\nvar str = f( 'Hello' )( 'there' )\n","curryRight":"function add( x, y ) { return x + y; };\nvar f = curryRight( add );\nvar sum = f( 2 )( 3 )\nfunction add() { return arguments[ 0 ] + arguments[ 1 ]; };\nf = curryRight( add, 2 );\nsum = f( 2 )( 3 )\nvar obj = {\n 'name': 'Ada',\n 'greet': function greet( word1, word2 ) {\n     return word1 + ' ' + word2 + ', ' + this.name + '!'\n }\n };\nf = curryRight( obj.greet, obj );\nvar str = f( 'there' )( 'Hello' )\n","cwd":"var dir = cwd()\n","DALE_CHALL_NEW":"var list = DALE_CHALL_NEW()\n","datasets":"var out = datasets( 'MONTH_NAMES_EN' )\nvar opts = { 'data': 'cities' };\nout = datasets( 'MINARD_NAPOLEONS_MARCH', opts )\n","DataView":"var buf = new ArrayBuffer( 5 )\nvar dv = new DataView( buf )\n","DataView.prototype.buffer":"var buf1 = new ArrayBuffer( 5 );\nvar dv = new DataView( buf1 );\nvar buf2 = dv.buffer\nvar b = ( buf1 === buf2 )\n","DataView.prototype.byteLength":"var buf = new ArrayBuffer( 5 );\nvar dv = new DataView( buf );\ndv.byteLength\n","DataView.prototype.byteOffset":"var buf = new ArrayBuffer( 5 );\nvar dv = new DataView( buf, 2 );\ndv.byteLength\ndv.byteOffset\n","datespace":"var stop = '2014-12-02T07:00:54.973Z';\nvar start = new Date( stop ) - 60000;\nvar arr = datespace( start, stop, 6 )\nvar opts = { 'round': 'ceil' };\narr = datespace( 1417503655000, 1417503655001, 3, opts )\n","dayOfQuarter":"var day = dayOfQuarter()\nday = dayOfQuarter( new Date() )\nday = dayOfQuarter( 12, 31, 2017 )\nday = dayOfQuarter( 'dec', 31, 2017 )\nday = dayOfQuarter( 'december', 31, 2017 )\n","dayOfYear":"var day = dayOfYear()\nday = dayOfYear( new Date() )\nday = dayOfYear( 12, 31, 2016 )\nday = dayOfYear( 'dec', 31, 2016 )\nday = dayOfYear( 'december', 31, 2016 )\n","daysInMonth":"var num = daysInMonth()\nnum = daysInMonth( 2 )\nnum = daysInMonth( 2, 2016 )\nnum = daysInMonth( 2, 2017 )\nnum = daysInMonth( 'feb', 2016 )\nnum = daysInMonth( 'february', 2016 )\n","daysInYear":"var num = daysInYear()\nnum = daysInYear( 2016 )\nnum = daysInYear( 2017 )\n","ddot":"var x = array( new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\nvar y = array( new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\nddot( x, y )\n","debugSinkStream":"var s = debugSinkStream( { 'name': 'foo' } );\ns.write( 'a' );\ns.write( 'b' );\ns.write( 'c' );\ns.end();\n","debugSinkStream.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = debugSinkStream.factory( opts );\n","debugSinkStream.objectMode":"var s = debugSinkStream.objectMode( { 'name': 'foo' } );\ns.write( { 'value': 'a' } );\ns.write( { 'value': 'b' } );\ns.write( { 'value': 'c' } );\ns.end();\n","debugStream":"var s = debugStream( { 'name': 'foo' } );\ns.write( 'a' );\ns.write( 'b' );\ns.write( 'c' );\ns.end();\n","debugStream.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = debugStream.factory( opts );\n","debugStream.objectMode":"var s = debugStream.objectMode( { 'name': 'foo' } );\ns.write( { 'value': 'a' } );\ns.write( { 'value': 'b' } );\ns.write( { 'value': 'c' } );\ns.end();\n","decorateAfter":"function f( v ) { return -v; };\nvar fcn = decorateAfter( base.abs, 1, f );\nvar v = fcn( -5 )\nv = fcn( 5 )\n","decorateAfter.factory":"function f( v ) { return -v; };\nvar fcn = decorateAfter.factory( base.abs, 1, f );\nvar v = fcn( -5 )\nv = fcn( 5 )\n","deepEqual":"var bool = deepEqual( [ 1, 2, 3 ], [ 1, 2, 3 ] )\nbool = deepEqual( [ 1, 2, 3 ], [ 1, 2, '3' ] )\nbool = deepEqual( { 'a': 2 }, { 'a': [ 2 ] } )\n","deepGet":"var obj = { 'a': { 'b': { 'c': 'd' } } };\nvar val = deepGet( obj, 'a.b.c' )\nvar obj = { 'a': { 'b': { 'c': 'd' } } };\nvar val = deepGet( obj, 'a/b/c', { 'sep': '/' } )\n","deepGet.factory":"var dget = deepGet.factory( 'a/b/c', { 'sep': '/' } );\nvar obj = { 'a': { 'b': { 'c': 'd' } } };\nvar val = dget( obj )\n","deepHasOwnProp":"var obj = { 'a': { 'b': { 'c': 'd' } } };\nvar bool = deepHasOwnProp( obj, 'a.b.c' )\nobj = { 'a': { 'b': { 'c': 'd' } } };\nbool = deepHasOwnProp( obj, 'a/b/c', { 'sep': '/' } )\n","deepHasOwnProp.factory":"var has = deepHasOwnProp.factory( 'a/b/c', { 'sep': '/' } );\nvar obj = { 'a': { 'b': { 'c': 'd' } } };\nvar bool = has( obj )\n","deepHasProp":"function Foo() { return this; };\nFoo.prototype.b = { 'c': 'd' };\nvar obj = { 'a': new Foo() };\nvar bool = deepHasProp( obj, 'a.b.c' )\nbool = deepHasProp( obj, 'a/b/c', { 'sep': '/' } )\n","deepHasProp.factory":"function Foo() { return this; };\nFoo.prototype.b = { 'c': 'd' };\nvar has = deepHasProp.factory( 'a/b/c', { 'sep': '/' } );\nvar obj = { 'a': new Foo() };\nvar bool = has( obj )\n","deepPluck":"var arr = [\n { 'a': { 'b': { 'c': 1 } } },\n { 'a': { 'b': { 'c': 2 } } }\n ];\nvar out = deepPluck( arr, 'a.b.c' )\narr = [\n { 'a': [ 0, 1, 2 ] },\n { 'a': [ 3, 4, 5 ] }\n ];\nout = deepPluck( arr, [ 'a', 1 ] )\n","deepSet":"var obj = { 'a': { 'b': { 'c': 'd' } } };\nvar bool = deepSet( obj, 'a.b.c', 'beep' )\nobj = { 'a': { 'b': { 'c': 'd' } } };\nbool = deepSet( obj, 'a/b/c', 'beep', { 'sep': '/' } );\nobj\nbool = deepSet( obj, 'a.e.c', 'boop', { 'create': true } );\nobj\n","deepSet.factory":"var dset = deepSet.factory( 'a/b/c', {\n 'create': true,\n 'sep': '/'\n });\nvar obj = { 'a': { 'b': { 'c': 'd' } } };\nvar bool = dset( obj, 'beep' )\nobj\n","defineMemoizedProperty":"var obj = {};\nfunction foo() {\n return 'bar';\n };\ndefineMemoizedProperty( obj, 'foo', {\n 'configurable': false,\n 'enumerable': true,\n 'writable': false,\n 'value': foo\n });\nobj.foo\n","defineProperties":"var obj = {};\ndefineProperties( obj, {\n 'foo': {\n     'value': 'bar',\n     'writable': false,\n     'configurable': false,\n     'enumerable': true\n },\n 'baz': {\n     'value': 13\n }\n });\nobj.foo\nobj.baz\n","defineProperty":"var obj = {};\ndefineProperty( obj, 'foo', {\n 'value': 'bar',\n 'enumerable': true,\n 'writable': false\n });\nobj.foo = 'boop';\nobj\n","dirname":"var dir = dirname( './foo/bar/index.js' )\n","dotcase":"var out = dotcase( 'Hello World!' )\nout = dotcase( 'beep boop' )\n","DoublyLinkedList":"var list = DoublyLinkedList();\nlist.push( 'foo' ).push( 'bar' );\nlist.length\nlist.pop()\nlist.length\nlist.pop()\nlist.length\n","doUntil":"function predicate( i ) { return ( i >= 5 ); };\nfunction beep( i ) { console.log( 'boop: %d', i ); };\ndoUntil( beep, predicate )\n","doUntilAsync":"function fcn( i, next ) {\n setTimeout( onTimeout, i );\n function onTimeout() {\n     next( null, 'boop'+i );\n }\n };\nfunction predicate( i, clbk ) { clbk( null, i >= 5 ); };\nfunction done( error, result ) {\n if ( error ) {\n     throw error;\n }\n console.log( result );\n };\ndoUntilAsync( fcn, predicate, done )\n","doUntilEach":"function predicate( v ) { return v !== v; };\nfunction logger( v, i ) { console.log( '%s: %d', i, v ); };\nvar arr = [ 1, 2, 3, 4, NaN, 5 ];\ndoUntilEach( arr, logger, predicate )\n","doUntilEachRight":"function predicate( v ) { return v !== v; };\nfunction logger( v, i ) { console.log( '%s: %d', i, v ); };\nvar arr = [ 1, NaN, 2, 3, 4, 5 ];\ndoUntilEachRight( arr, logger, predicate )\n","doWhile":"function predicate( i ) { return ( i < 5 ); };\nfunction beep( i ) { console.log( 'boop: %d', i ); };\ndoWhile( beep, predicate )\n","doWhileAsync":"function fcn( i, next ) {\n setTimeout( onTimeout, i );\n function onTimeout() {\n     next( null, 'boop'+i );\n }\n };\nfunction predicate( i, clbk ) { clbk( null, i < 5 ); };\nfunction done( error, result ) {\n if ( error ) {\n     throw error;\n }\n console.log( result );\n };\ndoWhileAsync( fcn, predicate, done )\n","doWhileEach":"function predicate( v ) { return v === v; };\nfunction logger( v, i ) { console.log( '%s: %d', i, v ); };\nvar arr = [ 1, 2, 3, 4, NaN, 5 ];\ndoWhileEach( arr, logger, predicate )\n","doWhileEachRight":"function predicate( v ) { return v === v; };\nfunction logger( v, i ) { console.log( '%s: %d', i, v ); };\nvar arr = [ 1, NaN, 2, 3, 4, 5 ];\ndoWhileEachRight( arr, logger, predicate )\n","dswap":"var x = array( new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\nvar y = array( new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\ndswap( x, y );\nx.data\ny.data\n","E":"E\n","EMOJI":"var data = EMOJI()\n","EMOJI_CODE_PICTO":"var out = EMOJI_CODE_PICTO()\n","EMOJI_PICTO_CODE":"var out = EMOJI_PICTO_CODE()\n","emptyStream":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar s = emptyStream();\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","emptyStream.factory":"var opts = { 'objectMode': true };\nvar createStream = emptyStream.factory( opts );\n","emptyStream.objectMode":"function fcn( v ) { console.log( v ); };\nvar s = emptyStream.objectMode();\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","endsWith":"var bool = endsWith( 'beep', 'ep' )\nbool = endsWith( 'Beep', 'op' )\nbool = endsWith( 'Beep', 'ee', 3 )\nbool = endsWith( 'Beep', 'ee', -1 )\nbool = endsWith( 'beep', '' )\n","enumerableProperties":"function Foo() { this.beep = 'boop'; return this; };\nFoo.prototype.foo = 'bar';\nvar obj = new Foo();\nvar props = enumerableProperties( obj )\n","enumerablePropertiesIn":"var props = enumerablePropertiesIn( [] )\n","enumerablePropertySymbols":"var obj = {};\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = true;\ndesc.writable = true;\ndesc.value = 'boop';\nvar sym = ( Symbol ) ? Symbol( 'beep' ) : 'beep';\ndefineProperty( obj, sym, desc );\nvar symbols = enumerablePropertySymbols( obj )\n","enumerablePropertySymbolsIn":"var obj = {};\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = true;\ndesc.writable = true;\ndesc.value = 'boop';\nvar sym = ( Symbol ) ? Symbol( 'beep' ) : 'beep';\ndefineProperty( obj, sym, desc );\nvar symbols = enumerablePropertySymbolsIn( obj )\n","ENV":"var user = ENV.USER\n","EPS":"EPS\n","error2json":"var err = new Error( 'beep' );\nvar json = error2json( err )\n","EULERGAMMA":"EULERGAMMA\n","every":"var arr = [ 1, 1, 1, 1, 1 ];\nvar bool = every( arr )\n","everyBy":"function positive( v ) { return ( v > 0 ); };\nvar arr = [ 1, 2, 3, 4 ];\nvar bool = everyBy( arr, positive )\n","everyByAsync":"function predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, true );\n }\n };\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar arr = [ 3000, 2500, 1000 ];\neveryByAsync( arr, predicate, done )\nfunction predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, true );\n }\n };\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar opts = { 'limit': 2 };\nvar arr = [ 3000, 2500, 1000 ];\neveryByAsync( arr, opts, predicate, done )\nfunction predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, true );\n }\n };\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar opts = { 'series': true };\nvar arr = [ 3000, 2500, 1000 ];\neveryByAsync( arr, opts, predicate, done )\n","everyByAsync.factory":"function predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, true );\n }\n };\nvar opts = { 'series': true };\nvar f = everyByAsync.factory( opts, predicate );\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar arr = [ 3000, 2500, 1000 ];\nf( arr, done )\narr = [ 2000, 1500, 1000 ];\nf( arr, done )\n","everyByRight":"function positive( v ) { return ( v > 0 ); };\nvar arr = [ 1, 2, 3, 4 ];\nvar bool = everyByRight( arr, positive )\n","everyByRightAsync":"function predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, true );\n }\n };\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar arr = [ 1000, 2500, 3000 ];\neveryByRightAsync( arr, predicate, done )\nfunction predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, true );\n }\n };\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar opts = { 'limit': 2 };\nvar arr = [ 1000, 2500, 3000 ];\neveryByRightAsync( arr, opts, predicate, done )\nfunction predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, true );\n }\n };\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar opts = { 'series': true };\nvar arr = [ 1000, 2500, 3000 ];\neveryByRightAsync( arr, opts, predicate, done )\n","everyByRightAsync.factory":"function predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, true );\n }\n };\nvar opts = { 'series': true };\nvar f = everyByRightAsync.factory( opts, predicate );\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar arr = [ 1000, 2500, 3000 ];\nf( arr, done )\narr = [ 1000, 1500, 2000 ];\nf( arr, done )\n","everyInBy":"function positive( v ) { return ( v > 0 ); };\nvar o = {a: 1, b: 2, c: 3};\nvar bool = everyInBy( o, positive )\n","everyOwnBy":"function positive( v ) { return ( v > 0 ); };\nvar obj = { 'a': 1, 'b': 2, 'c': 3 };\nvar bool = everyOwnBy( obj, positive )\n","evil":"var v = evil( '5*4*3*2*1' )\n","EXEC_PATH":"EXEC_PATH\n","exists":"function done( error, bool ) { console.log( bool ); };\nexists( './beep/boop', done );\n","exists.sync":"var bool = exists.sync( './beep/boop' )\n","expandAcronyms":"var str = 'LOL, this is fun. I am ROFL.';\nvar out = expandAcronyms( str )\nstr = 'brb, I need to check my mail. thx!';\nout = expandAcronyms( str )\n","expandContractions":"var str = 'I won\\'t be able to get y\\'all out of this one.';\nvar out = expandContractions( str )\nstr = 'It oughtn\\'t to be my fault, because, you know, I didn\\'t know';\nout = expandContractions( str )\n","extname":"var ext = extname( 'index.js' )\n","FancyArray":"var b = [ 1.0, 2.0, 3.0, 4.0 ]; // underlying data buffer\nvar d = [ 2, 2 ]; // shape\nvar s = [ 2, 1 ]; // strides\nvar o = 0; // index offset\nvar arr = FancyArray( 'generic', b, d, s, o, 'row-major' )\nvar v = arr.get( 1, 1 )\nv = arr.iget( 3 )\narr.set( 1, 1, 40.0 );\narr.get( 1, 1 )\narr.iset( 3, 99.0 );\narr.get( 1, 1 )\n","FancyArray.prototype.byteLength":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = FancyArray( 'float64', b, d, s, o, 'row-major' );\nvar sz = arr.byteLength\n","FancyArray.prototype.BYTES_PER_ELEMENT":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = FancyArray( 'float64', b, d, s, o, 'row-major' );\nvar sz = arr.BYTES_PER_ELEMENT\n","FancyArray.prototype.data":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = FancyArray( 'float64', b, d, s, o, 'row-major' );\nvar buf = arr.data\n","FancyArray.prototype.dtype":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = FancyArray( 'float64', b, d, s, o, 'row-major' );\nvar dt = arr.dtype\n","FancyArray.prototype.flags":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = FancyArray( 'float64', b, d, s, o, 'row-major' );\nvar fl = arr.flags\n","FancyArray.prototype.length":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = FancyArray( 'float64', b, d, s, o, 'row-major' );\nvar len = arr.length\n","FancyArray.prototype.ndims":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = FancyArray( 'float64', b, d, s, o, 'row-major' );\nvar n = arr.ndims\n","FancyArray.prototype.offset":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = FancyArray( 'float64', b, d, s, o, 'row-major' );\nvar v = arr.offset\n","FancyArray.prototype.order":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = FancyArray( 'float64', b, d, s, o, 'row-major' );\nvar ord = arr.order\n","FancyArray.prototype.shape":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = FancyArray( 'float64', b, d, s, o, 'row-major' );\nvar sh = arr.shape\n","FancyArray.prototype.strides":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = FancyArray( 'float64', b, d, s, o, 'row-major' );\nvar st = arr.strides\n","FancyArray.prototype.get":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = FancyArray( 'float64', b, d, s, o, 'row-major' );\nvar v = arr.get( 1, 1 )\n","FancyArray.prototype.iget":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = FancyArray( 'float64', b, d, s, o, 'row-major' );\nvar v = arr.iget( 3 )\n","FancyArray.prototype.set":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = FancyArray( 'float64', b, d, s, o, 'row-major' );\narr.set( 1, 1, -4.0 );\narr.get( 1, 1 )\n","FancyArray.prototype.iset":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = FancyArray( 'float64', b, d, s, o, 'row-major' );\narr.iset( 3, -4.0 );\narr.iget( 3 )\n","FancyArray.prototype.toString":"var b = [ 1, 2, 3, 4 ];\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = FancyArray( 'generic', b, d, s, o, 'row-major' );\narr.toString()\n","FancyArray.prototype.toJSON":"var b = [ 1, 2, 3, 4 ];\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = FancyArray( 'generic', b, d, s, o, 'row-major' );\narr.toJSON()\n","fastmath.abs":"var v = fastmath.abs( -1.0 )\nv = fastmath.abs( 2.0 )\nv = fastmath.abs( 0.0 )\nv = fastmath.abs( -0.0 )\nv = fastmath.abs( NaN )\n","fastmath.acosh":"var v = fastmath.acosh( 1.0 )\nv = fastmath.acosh( 2.0 )\nv = fastmath.acosh( NaN )\nv = fastmath.acosh( 1.0e308 )\n","fastmath.ampbm":"var h = fastmath.ampbm( 5.0, 12.0 )\n","fastmath.ampbm.factory":"var hypot = fastmath.ampbm.factory( 1.0, 0.5 )\n","fastmath.asinh":"var v = fastmath.asinh( 0.0 )\nv = fastmath.asinh( 2.0 )\nv = fastmath.asinh( -2.0 )\nv = fastmath.asinh( NaN )\nv = fastmath.asinh( 1.0e200 )\nv = fastmath.asinh( 1.0e-50 )\n","fastmath.atanh":"var v = fastmath.atanh( 0.0 )\nv = fastmath.atanh( 0.9 )\nv = fastmath.atanh( 1.0 )\nv = fastmath.atanh( -1.0 )\nv = fastmath.atanh( NaN )\nv = fastmath.atanh( 1.0e-17 )\n","fastmath.hypot":"var h = fastmath.hypot( -5.0, 12.0 )\nh = fastmath.hypot( 1.0e154, 1.0e154 )\nh = fastmath.hypot( 1e-200, 1.0e-200 )\n","fastmath.log2Uint32":"var v = fastmath.log2Uint32( 4 >>> 0 )\nv = fastmath.log2Uint32( 8 >>> 0 )\nv = fastmath.log2Uint32( 9 >>> 0 )\n","fastmath.max":"var v = fastmath.max( 3.14, 4.2 )\nv = fastmath.max( 3.14, NaN )\nv = fastmath.max( NaN, 3.14 )\nv = fastmath.max( -0.0, +0.0 )\nv = fastmath.max( +0.0, -0.0 )\n","fastmath.min":"var v = fastmath.min( 3.14, 4.2 )\nv = fastmath.min( 3.14, NaN )\nv = fastmath.min( NaN, 3.14 )\nv = fastmath.min( -0.0, +0.0 )\nv = fastmath.min( +0.0, -0.0 )\n","fastmath.powint":"var v = fastmath.powint( 2.0, 3 )\nv = fastmath.powint( 3.14, 0 )\nv = fastmath.powint( 2.0, -2 )\nv = fastmath.powint( 0.0, 0 )\nv = fastmath.powint( -3.14, 1 )\nv = fastmath.powint( NaN, 0 )\n","fastmath.sqrtUint32":"var v = fastmath.sqrtUint32( 9 >>> 0 )\nv = fastmath.sqrtUint32( 2 >>> 0 )\nv = fastmath.sqrtUint32( 3 >>> 0 )\nv = fastmath.sqrtUint32( 0 >>> 0 )\n","FEMALE_FIRST_NAMES_EN":"var list = FEMALE_FIRST_NAMES_EN()\n","FIFO":"var q = FIFO();\nq.push( 'foo' ).push( 'bar' );\nq.length\nq.pop()\nq.length\nq.pop()\nq.length\n","filledarray":"var arr = filledarray()\narr = filledarray( 'float32' )\nvar arr = filledarray( 1.0, 5 )\narr = filledarray( 1, 5, 'int32' )\nvar arr1 = filledarray( 2.0, [ 0.5, 0.5, 0.5 ] )\nvar arr2 = filledarray( 1.0, arr1, 'float32' )\nvar arr1 = iterConstant( 3.0, {'iter': 3} );\nvar arr2 = filledarray( 1.0, arr1, 'float32' )\nvar buf = new ArrayBuffer( 16 );\nvar arr = filledarray( 1.0, buf, 0, 4, 'float32' )\n","filledarrayBy":"var arr = filledarrayBy()\narr = filledarrayBy( 'float32' )\nfunction clbk() { return 1.0; };\nvar arr = filledarrayBy( 5, clbk )\narr = filledarrayBy( 5, 'int32', clbk )\nvar arr1 = filledarrayBy( [ 0.5, 0.5, 0.5 ], constantFunction( 2.0 ) )\nvar arr2 = filledarrayBy( arr1, 'float32', constantFunction( 1.0 ) )\nvar arr1 = iterConstant( 3.0, {'iter': 3} );\nvar arr2 = filledarrayBy( arr1, 'float32', constantFunction( 1.0 ) )\nvar buf = new ArrayBuffer( 16 );\nvar arr = filledarrayBy( buf, 0, 4, 'float32', constantFunction( 1.0 ) )\n","filterArguments":"function foo( a, b ) { return [ a, b ]; };\nfunction predicate( v ) { return ( v !== 2 ); };\nvar bar = filterArguments( foo, predicate );\nvar out = bar( 1, 2, 3 )\n","find":"var data = [ 30, 20, 50, 60, 10 ];\nfunction condition( val ) { return val > 20; };\nvar vals = find( data, condition )\ndata = [ 30, 20, 50, 60, 10 ];\nvar opts = { 'k': 2, 'returns': 'values' };\nvals = find( data, opts, condition )\ndata = [ 30, 20, 50, 60, 10 ];\nopts = { 'k': -2, 'returns': '*' };\nvals = find( data, opts, condition )\n","firstChar":"var out = firstChar( 'beep' )\nout = firstChar( 'Boop', 1 )\nout = firstChar( 'foo bar', 5 )\n","FIVETHIRTYEIGHT_FFQ":"var data = FIVETHIRTYEIGHT_FFQ()\n","flattenArray":"var arr = [ 1, [ 2, [ 3, [ 4, [ 5 ], 6 ], 7 ], 8 ], 9 ];\nvar out = flattenArray( arr )\narr = [ 1, [ 2, [ 3, [ 4, [ 5 ], 6 ], 7 ], 8 ], 9 ];\nout = flattenArray( arr, { 'depth': 2 } )\nvar bool = ( arr[ 1 ][ 1 ][ 1 ] === out[ 3 ] )\narr = [ 1, [ 2, [ 3, [ 4, [ 5 ], 6 ], 7 ], 8 ], 9 ];\nout = flattenArray( arr, { 'depth': 2, 'copy': true } )\nbool = ( arr[ 1 ][ 1 ][ 1 ] === out[ 3 ] )\n","flattenArray.factory":"var flatten = flattenArray.factory( [ 2, 2 ], {\n 'copy': false\n });\nvar out = flatten( [ [ 1, 2 ], [ 3, 4 ] ] )\nout = flatten( [ [ 5, 6 ], [ 7, 8 ] ] )\n","flattenObject":"var obj = { 'a': { 'b': { 'c': 'd' } } };\nvar out = flattenObject( obj )\nobj = { 'a': { 'b': { 'c': 'd' } } };\nout = flattenObject( obj, { 'depth': 1 } )\nvar bool = ( obj.a.b === out[ 'a.b' ] )\nobj = { 'a': { 'b': { 'c': 'd' } } };\nout = flattenObject( obj, { 'delimiter': '-|-' } )\nobj = { 'a': { 'b': [ 1, 2, 3 ] } };\nout = flattenObject( obj, { 'flattenArrays': true } )\n","flattenObject.factory":"var flatten = flattenObject.factory({\n 'depth': 1,\n 'copy': true,\n 'delimiter': '|'\n });\nvar obj = { 'a': { 'b': { 'c': 'd' } } };\nvar out = flatten( obj )\n","flignerTest":"var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\nvar y = [ 3.8, 2.7, 4.0, 2.4 ];\nvar z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\nvar out = flignerTest( x, y, z )\nvar arr = [ 2.9, 3.0, 2.5, 2.6, 3.2,\n 3.8, 2.7, 4.0, 2.4,\n 2.8, 3.4, 3.7, 2.2, 2.0\n ];\nvar groups = [\n 'a', 'a', 'a', 'a', 'a',\n 'b', 'b', 'b', 'b',\n 'c', 'c', 'c', 'c', 'c'\n ];\nout = flignerTest( arr, { 'groups': groups } )\n","FLOAT_WORD_ORDER":"FLOAT_WORD_ORDER\n","FLOAT16_CBRT_EPS":"FLOAT16_CBRT_EPS\n","FLOAT16_EPS":"FLOAT16_EPS\n","FLOAT16_EXPONENT_BIAS":"FLOAT16_EXPONENT_BIAS\n","FLOAT16_MAX":"FLOAT16_MAX\n","FLOAT16_MAX_SAFE_INTEGER":"FLOAT16_MAX_SAFE_INTEGER\n","FLOAT16_MIN_SAFE_INTEGER":"FLOAT16_MIN_SAFE_INTEGER\n","FLOAT16_NINF":"FLOAT16_NINF\n","FLOAT16_NUM_BYTES":"FLOAT16_NUM_BYTES\n","FLOAT16_PINF":"FLOAT16_PINF\n","FLOAT16_PRECISION":"FLOAT16_PRECISION\n","FLOAT16_SMALLEST_NORMAL":"FLOAT16_SMALLEST_NORMAL\n","FLOAT16_SMALLEST_SUBNORMAL":"FLOAT16_SMALLEST_SUBNORMAL\n","FLOAT16_SQRT_EPS":"FLOAT16_SQRT_EPS\n","FLOAT32_ABS_MASK":"FLOAT32_ABS_MASK\nbase.toBinaryStringUint32( FLOAT32_ABS_MASK )\n","FLOAT32_CBRT_EPS":"FLOAT32_CBRT_EPS\n","FLOAT32_EPS":"FLOAT32_EPS\n","FLOAT32_EXPONENT_BIAS":"FLOAT32_EXPONENT_BIAS\n","FLOAT32_EXPONENT_MASK":"FLOAT32_EXPONENT_MASK\nbase.toBinaryStringUint32( FLOAT32_EXPONENT_MASK )\n","FLOAT32_FOURTH_PI":"FLOAT32_FOURTH_PI\n","FLOAT32_HALF_PI":"FLOAT32_HALF_PI\n","FLOAT32_MAX":"FLOAT32_MAX\n","FLOAT32_MAX_SAFE_INTEGER":"FLOAT32_MAX_SAFE_INTEGER\n","FLOAT32_MIN_SAFE_INTEGER":"FLOAT32_MIN_SAFE_INTEGER\n","FLOAT32_NAN":"FLOAT32_NAN\n","FLOAT32_NINF":"FLOAT32_NINF\n","FLOAT32_NUM_BYTES":"FLOAT32_NUM_BYTES\n","FLOAT32_PI":"FLOAT32_PI\n","FLOAT32_PINF":"FLOAT32_PINF\n","FLOAT32_PRECISION":"FLOAT32_PRECISION\n","FLOAT32_SIGN_MASK":"FLOAT32_SIGN_MASK\nbase.toBinaryStringUint32( FLOAT32_SIGN_MASK )\n","FLOAT32_SIGNIFICAND_MASK":"FLOAT32_SIGNIFICAND_MASK\nbase.toBinaryStringUint32( FLOAT32_SIGNIFICAND_MASK )\n","FLOAT32_SMALLEST_NORMAL":"FLOAT32_SMALLEST_NORMAL\n","FLOAT32_SMALLEST_SUBNORMAL":"FLOAT32_SMALLEST_SUBNORMAL\n","FLOAT32_SQRT_EPS":"FLOAT32_SQRT_EPS\n","FLOAT32_TWO_PI":"FLOAT32_TWO_PI\n","Float32Array":"var arr = new Float32Array()\nvar arr = new Float32Array( 5 )\nvar arr1 = new Float64Array( [ 0.5, 0.5, 0.5 ] );\nvar arr2 = new Float32Array( arr1 )\nvar arr1 = [ 0.5, 0.5, 0.5 ];\nvar arr2 = new Float32Array( arr1 )\nvar buf = new ArrayBuffer( 16 );\nvar arr = new Float32Array( buf, 0, 4 )\n","Float32Array.from":"function mapFcn( v ) { return v * 2.0; };\nvar arr = Float32Array.from( [ 1.0, -1.0 ], mapFcn )\n","Float32Array.of":"var arr = Float32Array.of( 2.0, -2.0 )\n","Float32Array.BYTES_PER_ELEMENT":"Float32Array.BYTES_PER_ELEMENT\n","Float32Array.name":"Float32Array.name\n","Float32Array.prototype.buffer":"var arr = new Float32Array( 5 );\narr.buffer\n","Float32Array.prototype.byteLength":"var arr = new Float32Array( 5 );\narr.byteLength\n","Float32Array.prototype.byteOffset":"var arr = new Float32Array( 5 );\narr.byteOffset\n","Float32Array.prototype.BYTES_PER_ELEMENT":"var arr = new Float32Array( 5 );\narr.BYTES_PER_ELEMENT\n","Float32Array.prototype.length":"var arr = new Float32Array( 5 );\narr.length\n","Float32Array.prototype.copyWithin":"var arr = new Float32Array( [ 2.0, -2.0, 1.0, -1.0, 1.0 ] );\narr.copyWithin( 3, 0, 2 );\narr[ 3 ]\narr[ 4 ]\n","Float32Array.prototype.entries":"var arr = new Float32Array( [ 1.0, -1.0 ] );\nit = arr.entries();\nit.next().value\nit.next().value\nit.next().done\n","Float32Array.prototype.every":"var arr = new Float32Array( [ 1.0, -1.0 ] );\nfunction predicate( v ) { return ( v >= 0.0 ); };\narr.every( predicate )\n","Float32Array.prototype.fill":"var arr = new Float32Array( [ 1.0, -1.0 ] );\narr.fill( 2.0 );\narr[ 0 ]\narr[ 1 ]\n","Float32Array.prototype.filter":"var arr1 = new Float32Array( [ 1.0, 0.0, -1.0 ] );\nfunction predicate( v ) { return ( v >= 0.0 ); };\nvar arr2 = arr1.filter( predicate );\narr2.length\n","Float32Array.prototype.find":"var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] );\nfunction predicate( v ) { return ( v < 0.0 ); };\nvar v = arr.find( predicate )\n","Float32Array.prototype.findIndex":"var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] );\nfunction predicate( v ) { return ( v < 0.0 ); };\nvar idx = arr.findIndex( predicate )\n","Float32Array.prototype.forEach":"var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] );\nvar str = ' ';\nfunction fcn( v, i ) { str += i + ':' + v + ' '; };\narr.forEach( fcn );\nstr\n","Float32Array.prototype.includes":"var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] );\nvar bool = arr.includes( 2.0 )\nbool = arr.includes( -1.0 )\n","Float32Array.prototype.indexOf":"var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] );\nvar idx = arr.indexOf( 2.0 )\nidx = arr.indexOf( -1.0 )\n","Float32Array.prototype.join":"var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] );\narr.join( '|' )\n","Float32Array.prototype.keys":"var arr = new Float32Array( [ 1.0, -1.0 ] );\nit = arr.keys();\nit.next().value\nit.next().value\nit.next().done\n","Float32Array.prototype.lastIndexOf":"var arr = new Float32Array( [ 1.0, 0.0, -1.0, 0.0, 1.0 ] );\nvar idx = arr.lastIndexOf( 2.0 )\nidx = arr.lastIndexOf( 0.0 )\n","Float32Array.prototype.map":"var arr1 = new Float32Array( [ 1.0, 0.0, -1.0 ] );\nfunction fcn( v ) { return v * 2.0; };\nvar arr2 = arr1.map( fcn )\n","Float32Array.prototype.reduce":"var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] );\nfunction fcn( acc, v ) { return acc + (v*v); };\nvar v = arr.reduce( fcn, 0.0 )\n","Float32Array.prototype.reduceRight":"var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] );\nfunction fcn( acc, v ) { return acc + (v*v); };\nvar v = arr.reduceRight( fcn, 0.0 )\n","Float32Array.prototype.reverse":"var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] )\narr.reverse()\n","Float32Array.prototype.set":"var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] );\narr.set( [ -2.0, 2.0 ], 1 );\narr[ 1 ]\narr[ 2 ]\n","Float32Array.prototype.slice":"var arr1 = new Float32Array( [ 1.0, 0.0, -1.0 ] );\nvar arr2 = arr1.slice( 1 );\narr2.length\narr2[ 0 ]\narr2[ 1 ]\n","Float32Array.prototype.some":"var arr = new Float32Array( [ 1.0, -1.0 ] );\nfunction predicate( v ) { return ( v < 0.0 ); };\narr.some( predicate )\n","Float32Array.prototype.sort":"var arr = new Float32Array( [ 1.0, -1.0, 0.0, 2.0, -2.0 ] );\narr.sort()\n","Float32Array.prototype.subarray":"var arr1 = new Float32Array( [ 1.0, -1.0, 0.0, 2.0, -2.0 ] );\nvar arr2 = arr1.subarray( 2 )\n","Float32Array.prototype.toLocaleString":"var arr = new Float32Array( [ 1.0, -1.0, 0.0 ] );\narr.toLocaleString()\n","Float32Array.prototype.toString":"var arr = new Float32Array( [ 1.0, -1.0, 0.0 ] );\narr.toString()\n","Float32Array.prototype.values":"var arr = new Float32Array( [ 1.0, -1.0 ] );\nit = arr.values();\nit.next().value\nit.next().value\nit.next().done\n","FLOAT64_EXPONENT_BIAS":"FLOAT64_EXPONENT_BIAS\n","FLOAT64_HIGH_WORD_ABS_MASK":"FLOAT64_HIGH_WORD_ABS_MASK\nbase.toBinaryStringUint32( FLOAT64_HIGH_WORD_ABS_MASK )\n","FLOAT64_HIGH_WORD_EXPONENT_MASK":"FLOAT64_HIGH_WORD_EXPONENT_MASK\nbase.toBinaryStringUint32( FLOAT64_HIGH_WORD_EXPONENT_MASK )\n","FLOAT64_HIGH_WORD_SIGN_MASK":"FLOAT64_HIGH_WORD_SIGN_MASK\nbase.toBinaryStringUint32( FLOAT64_HIGH_WORD_SIGN_MASK )\n","FLOAT64_HIGH_WORD_SIGNIFICAND_MASK":"FLOAT64_HIGH_WORD_SIGNIFICAND_MASK\nbase.toBinaryStringUint32( FLOAT64_HIGH_WORD_SIGNIFICAND_MASK )\n","FLOAT64_MAX":"FLOAT64_MAX\n","FLOAT64_MAX_BASE2_EXPONENT":"FLOAT64_MAX_BASE2_EXPONENT\n","FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL":"FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL\n","FLOAT64_MAX_BASE10_EXPONENT":"FLOAT64_MAX_BASE10_EXPONENT\n","FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL":"FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL\n","FLOAT64_MAX_LN":"FLOAT64_MAX_LN\n","FLOAT64_MAX_SAFE_FIBONACCI":"FLOAT64_MAX_SAFE_FIBONACCI\n","FLOAT64_MAX_SAFE_INTEGER":"FLOAT64_MAX_SAFE_INTEGER\n","FLOAT64_MAX_SAFE_LUCAS":"FLOAT64_MAX_SAFE_LUCAS\n","FLOAT64_MAX_SAFE_NTH_FIBONACCI":"FLOAT64_MAX_SAFE_NTH_FIBONACCI\n","FLOAT64_MAX_SAFE_NTH_LUCAS":"FLOAT64_MAX_SAFE_NTH_LUCAS\n","FLOAT64_MIN_BASE2_EXPONENT":"FLOAT64_MIN_BASE2_EXPONENT\n","FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL":"FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL\n","FLOAT64_MIN_BASE10_EXPONENT":"FLOAT64_MIN_BASE10_EXPONENT\n","FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL":"FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL\n","FLOAT64_MIN_LN":"FLOAT64_MIN_LN\n","FLOAT64_MIN_SAFE_INTEGER":"FLOAT64_MIN_SAFE_INTEGER\n","FLOAT64_NUM_BYTES":"FLOAT64_NUM_BYTES\n","FLOAT64_PRECISION":"FLOAT64_PRECISION\n","FLOAT64_SMALLEST_NORMAL":"FLOAT64_SMALLEST_NORMAL\n","FLOAT64_SMALLEST_SUBNORMAL":"FLOAT64_SMALLEST_SUBNORMAL\n","Float64Array":"var arr = new Float64Array()\nvar arr = new Float64Array( 5 )\nvar arr1 = new Float32Array( [ 0.5, 0.5, 0.5 ] );\nvar arr2 = new Float64Array( arr1 )\nvar arr1 = [ 0.5, 0.5, 0.5 ];\nvar arr2 = new Float64Array( arr1 )\nvar buf = new ArrayBuffer( 32 );\nvar arr = new Float64Array( buf, 0, 4 )\n","Float64Array.from":"function mapFcn( v ) { return v * 2.0; };\nvar arr = Float64Array.from( [ 1.0, -1.0 ], mapFcn )\n","Float64Array.of":"var arr = Float64Array.of( 2.0, -2.0 )\n","Float64Array.BYTES_PER_ELEMENT":"Float64Array.BYTES_PER_ELEMENT\n","Float64Array.name":"Float64Array.name\n","Float64Array.prototype.buffer":"var arr = new Float64Array( 5 );\narr.buffer\n","Float64Array.prototype.byteLength":"var arr = new Float64Array( 5 );\narr.byteLength\n","Float64Array.prototype.byteOffset":"var arr = new Float64Array( 5 );\narr.byteOffset\n","Float64Array.prototype.BYTES_PER_ELEMENT":"var arr = new Float64Array( 5 );\narr.BYTES_PER_ELEMENT\n","Float64Array.prototype.length":"var arr = new Float64Array( 5 );\narr.length\n","Float64Array.prototype.copyWithin":"var arr = new Float64Array( [ 2.0, -2.0, 1.0, -1.0, 1.0 ] );\narr.copyWithin( 3, 0, 2 );\narr[ 3 ]\narr[ 4 ]\n","Float64Array.prototype.entries":"var arr = new Float64Array( [ 1.0, -1.0 ] );\nit = arr.entries();\nit.next().value\nit.next().value\nit.next().done\n","Float64Array.prototype.every":"var arr = new Float64Array( [ 1.0, -1.0 ] );\nfunction predicate( v ) { return ( v >= 0.0 ); };\narr.every( predicate )\n","Float64Array.prototype.fill":"var arr = new Float64Array( [ 1.0, -1.0 ] );\narr.fill( 2.0 );\narr[ 0 ]\narr[ 1 ]\n","Float64Array.prototype.filter":"var arr1 = new Float64Array( [ 1.0, 0.0, -1.0 ] );\nfunction predicate( v ) { return ( v >= 0.0 ); };\nvar arr2 = arr1.filter( predicate );\narr2.length\n","Float64Array.prototype.find":"var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] );\nfunction predicate( v ) { return ( v < 0.0 ); };\nvar v = arr.find( predicate )\n","Float64Array.prototype.findIndex":"var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] );\nfunction predicate( v ) { return ( v < 0.0 ); };\nvar idx = arr.findIndex( predicate )\n","Float64Array.prototype.forEach":"var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] );\nvar str = ' ';\nfunction fcn( v, i ) { str += i + ':' + v + ' '; };\narr.forEach( fcn );\nstr\n","Float64Array.prototype.includes":"var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] );\nvar bool = arr.includes( 2.0 )\nbool = arr.includes( -1.0 )\n","Float64Array.prototype.indexOf":"var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] );\nvar idx = arr.indexOf( 2.0 )\nidx = arr.indexOf( -1.0 )\n","Float64Array.prototype.join":"var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] );\narr.join( '|' )\n","Float64Array.prototype.keys":"var arr = new Float64Array( [ 1.0, -1.0 ] );\nit = arr.keys();\nit.next().value\nit.next().value\nit.next().done\n","Float64Array.prototype.lastIndexOf":"var arr = new Float64Array( [ 1.0, 0.0, -1.0, 0.0, 1.0 ] );\nvar idx = arr.lastIndexOf( 2.0 )\nidx = arr.lastIndexOf( 0.0 )\n","Float64Array.prototype.map":"var arr1 = new Float64Array( [ 1.0, 0.0, -1.0 ] );\nfunction fcn( v ) { return v * 2.0; };\nvar arr2 = arr1.map( fcn )\n","Float64Array.prototype.reduce":"var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] );\nfunction fcn( acc, v ) { return acc + (v*v); };\nvar v = arr.reduce( fcn, 0.0 )\n","Float64Array.prototype.reduceRight":"var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] );\nfunction fcn( acc, v ) { return acc + (v*v); };\nvar v = arr.reduceRight( fcn, 0.0 )\n","Float64Array.prototype.reverse":"var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] )\narr.reverse()\n","Float64Array.prototype.set":"var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] );\narr.set( [ -2.0, 2.0 ], 1 );\narr[ 1 ]\narr[ 2 ]\n","Float64Array.prototype.slice":"var arr1 = new Float64Array( [ 1.0, 0.0, -1.0 ] );\nvar arr2 = arr1.slice( 1 );\narr2.length\narr2[ 0 ]\narr2[ 1 ]\n","Float64Array.prototype.some":"var arr = new Float64Array( [ 1.0, -1.0 ] );\nfunction predicate( v ) { return ( v < 0.0 ); };\narr.some( predicate )\n","Float64Array.prototype.sort":"var arr = new Float64Array( [ 1.0, -1.0, 0.0, 2.0, -2.0 ] );\narr.sort()\n","Float64Array.prototype.subarray":"var arr1 = new Float64Array( [ 1.0, -1.0, 0.0, 2.0, -2.0 ] );\nvar arr2 = arr1.subarray( 2 )\n","Float64Array.prototype.toLocaleString":"var arr = new Float64Array( [ 1.0, -1.0, 0.0 ] );\narr.toLocaleString()\n","Float64Array.prototype.toString":"var arr = new Float64Array( [ 1.0, -1.0, 0.0 ] );\narr.toString()\n","Float64Array.prototype.values":"var arr = new Float64Array( [ 1.0, -1.0 ] );\nit = arr.values();\nit.next().value\nit.next().value\nit.next().done\n","forEach":"function logger( v, i ) { console.log( '%s: %d', i, v ); };\nvar arr = [ 1, 2, 3, 4 ];\nforEach( arr, logger )\n","forEachAsync":"function onDuration( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next();\n }\n };\nfunction done( error ) {\n if ( error ) {\n     throw error;\n }\n console.log( 'Done.' );\n };\nvar arr = [ 3000, 2500, 1000 ];\nforEachAsync( arr, onDuration, done )\nfunction onDuration( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next();\n }\n };\nfunction done( error ) {\n if ( error ) {\n     throw error;\n }\n console.log( 'Done.' );\n };\nvar opts = { 'limit': 2 };\nvar arr = [ 3000, 2500, 1000 ];\nforEachAsync( arr, opts, onDuration, done )\nfunction onDuration( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next();\n }\n };\nfunction done( error ) {\n if ( error ) {\n     throw error;\n }\n console.log( 'Done.' );\n };\nvar opts = { 'series': true };\nvar arr = [ 3000, 2500, 1000 ];\nforEachAsync( arr, opts, onDuration, done )\n","forEachAsync.factory":"function onDuration( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next();\n }\n };\nvar opts = { 'series': true };\nvar f = forEachAsync.factory( opts, onDuration );\nfunction done( error ) {\n if ( error ) {\n     throw error;\n }\n console.log( 'Done.' );\n };\nvar arr = [ 3000, 2500, 1000 ];\nf( arr, done )\narr = [ 2000, 1500, 1000 ];\nf( arr, done )\n","forEachChar":"var n = 0;\nfunction fcn() { n += 1; };\nforEachChar( 'hello world!', fcn );\nn\n","forEachRight":"function logger( v, i ) { console.log( '%s: %d', i, v ); };\nvar arr = [ 1, 2, 3, 4 ];\nforEachRight( arr, logger )\n","forEachRightAsync":"function onDuration( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next();\n }\n };\nfunction done( error ) {\n if ( error ) {\n     throw error;\n }\n console.log( 'Done.' );\n };\nvar arr = [ 1000, 2500, 3000 ];\nforEachRightAsync( arr, onDuration, done )\nfunction onDuration( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next();\n }\n };\nfunction done( error ) {\n if ( error ) {\n     throw error;\n }\n console.log( 'Done.' );\n };\nvar opts = { 'limit': 2 };\nvar arr = [ 1000, 2500, 3000 ];\nforEachRightAsync( arr, opts, onDuration, done )\nfunction onDuration( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next();\n }\n };\nfunction done( error ) {\n if ( error ) {\n     throw error;\n }\n console.log( 'Done.' );\n };\nvar opts = { 'series': true };\nvar arr = [ 1000, 2500, 3000 ];\nforEachRightAsync( arr, opts, onDuration, done )\n","forEachRightAsync.factory":"function onDuration( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next();\n }\n };\nvar opts = { 'series': true };\nvar f = forEachRightAsync.factory( opts, onDuration );\nfunction done( error ) {\n if ( error ) {\n     throw error;\n }\n console.log( 'Done.' );\n };\nvar arr = [ 1000, 2500, 3000 ];\nf( arr, done )\narr = [ 1000, 1500, 2000 ];\nf( arr, done )\n","forIn":"function logger( v, k ) { console.log( '%s: %d', k, v ); };\nfunction Foo() { return this; };\nFoo.prototype.beep = 'boop';\nvar obj = new Foo();\nforIn( obj, logger )\n","format":"var out = format( 'Hello, %s!', 'World' )\nout = format( '%s %s', 'Hello', 'World' )\nout = format( 'Pi: %.2f', PI )\n","forOwn":"function logger( v, k ) { console.log( '%s: %d', k, v ); };\nvar obj = { 'a': 1, 'b': 2, 'c': 3, 'd': 4 };\nforOwn( obj, logger )\n","FOURTH_PI":"FOURTH_PI\n","FOURTH_ROOT_EPS":"FOURTH_ROOT_EPS\n","FRB_SF_WAGE_RIGIDITY":"var data = FRB_SF_WAGE_RIGIDITY()\n","fromCodePoint":"var out = fromCodePoint( 9731 )\nout = fromCodePoint( [ 9731 ] )\nout = fromCodePoint( 97, 98, 99 )\nout = fromCodePoint( [ 97, 98, 99 ] )\n","Function":"var f = new Function( 'x', 'y', 'return x + y' );\nf( 1, 2 )\n","Function.prototype.apply":"var f = new Function( 'x', 'y', 'return x + y' );\nf.apply( null, [ 1, 2 ] )\n","Function.prototype.call":"var f = new Function( 'x', 'y', 'return x + y' );\nf.call( null, 1, 2 )\n","Function.prototype.bind":"var f = new Function( 'x', 'y', 'return x + y' );\nvar g = f.bind( null, 1 );\ng( 2 )\n","Function.prototype.toString":"var f = new Function( 'x', 'y', 'return x + y' );\nf.toString()\n","Function.prototype.length":"var f = new Function( 'x', 'y', 'return x + y' );\nf.length\n","Function.prototype.name":"var f = new Function( 'x', 'y', 'return x + y' );\nf.name\nvar f = new Function( 'x', 'y', 'return x + y' );\nf.name = 'add';\nf.name\n","Function.prototype.prototype":"var f = new Function( 'x', 'y', 'return x + y' );\nf.prototype\n","function2string":"function2string( base.erf )\n","functionName":"var v = functionName( String )\nv = functionName( function foo(){} )\nv = functionName( function(){} )\n","functionSequence":"function a( x ) { return 2 * x; };\nfunction b( x ) { return x + 3; };\nfunction c( x ) { return x / 5; };\nvar f = functionSequence( a, b, c );\nvar z = f( 6 )\n","functionSequenceAsync":"function a( x, next ) {\nsetTimeout( onTimeout, 0 );\nfunction onTimeout() {\n    next( null, 2*x );\n}\n };\nfunction b( x, next ) {\nsetTimeout( onTimeout, 0 );\nfunction onTimeout() {\n    next( null, x+3 );\n}\n };\nfunction c( x, next ) {\nsetTimeout( onTimeout, 0 );\nfunction onTimeout() {\n    next( null, x/5 );\n}\n };\nvar f = functionSequenceAsync( a, b, c );\nfunction done( error, result ) {\nif ( error ) {\n    throw error;\n}\nconsole.log( result );\n };\nf( 6, done )\n","GAMMA_LANCZOS_G":"GAMMA_LANCZOS_G\n","gdot":"var x = array( new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\nvar y = array( new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\ngdot( x, y )\nx = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\ny = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\ngdot( x, y )\n","getegid":"var gid = getegid()\n","geteuid":"var uid = geteuid()\n","getgid":"var gid = getgid()\n","getGlobal":"var g = getGlobal()\n","getPrototypeOf":"var proto = getPrototypeOf( {} )\n","getuid":"var uid = getuid()\n","GLAISHER":"GLAISHER\n","graphemeClusters2iterator":"var it = graphemeClusters2iterator( '🌷🍕' );\nvar v = it.next().value\nv = it.next().value\nvar bool = it.next().done\n","graphemeClusters2iteratorRight":"var it = graphemeClusters2iteratorRight( '🌷🍕' );\nvar v = it.next().value\nv = it.next().value\nvar bool = it.next().done\n","group":"var collection = [ 'beep', 'boop', 'foo', 'bar' ];\nvar groups = [ 'b', 'b', 'f', 'b' ];\nvar out = group( collection, groups )\ngroups = [ 1, 1, 2, 1 ];\nout = group( collection, groups )\ngroups = [ 'b', 'b', 'f', 'b' ];\nvar opts = { 'returns': 'indices' };\nout = group( collection, opts, groups )\nopts = { 'returns': '*' };\nout = group( collection, opts, groups )\n","groupBy":"function indicator( v ) {\n if ( v[ 0 ] === 'b' ) {\n     return 'b';\n }\n return 'other';\n };\nvar collection = [ 'beep', 'boop', 'foo', 'bar' ];\nvar out = groupBy( collection, indicator )\nvar opts = { 'returns': 'indices' };\nout = groupBy( collection, opts, indicator )\nopts = { 'returns': '*' };\nout = groupBy( collection, opts, indicator )\n","groupByAsync":"function indicator( value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, ( index%2 === 0 ) );\n }\n };\nfunction done( error, result ) {\n if ( error ) {\n     throw error;\n }\n console.log( result );\n };\nvar arr = [ 3000, 2500, 1000 ];\ngroupByAsync( arr, indicator, done )\nvar opts = { 'returns': 'indices' };\ngroupByAsync( arr, opts, indicator, done )\nopts = { 'returns': '*' };\ngroupByAsync( arr, opts, indicator, done )\nfunction indicator( value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, ( index%2 === 0 ) );\n }\n };\nfunction done( error, result ) {\n if ( error ) {\n     throw error;\n }\n console.log( result );\n };\nvar opts = { 'limit': 2 };\nvar arr = [ 3000, 2500, 1000 ];\ngroupByAsync( arr, opts, indicator, done )\nfunction indicator( value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, ( index%2 === 0 ) );\n }\n };\nfunction done( error, result ) {\n if ( error ) {\n     throw error;\n }\n console.log( result );\n };\nvar opts = { 'series': true };\nvar arr = [ 3000, 2500, 1000 ];\ngroupByAsync( arr, opts, indicator, done )\n","groupByAsync.factory":"function indicator( value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, ( index%2 === 0 ) );\n }\n };\nvar opts = { 'series': true };\nvar f = groupByAsync.factory( opts, indicator );\nfunction done( error, result ) {\n if ( error ) {\n     throw error;\n }\n console.log( result );\n };\nvar arr = [ 3000, 2500, 1000 ];\nf( arr, done )\narr = [ 2000, 1500, 1000 ];\nf( arr, done )\n","groupIn":"function indicator( v ) {\n if ( v[ 0 ] === 'b' ) {\n     return 'b';\n }\n return 'other';\n };\nfunction Foo() { this.a = 'beep'; this.b = 'boop'; return this; };\nFoo.prototype = Object.create( null );\nFoo.prototype.c = 'foo';\nFoo.prototype.d = 'bar';\nvar obj = new Foo();\nvar out = groupIn( obj, indicator )\nvar opts = { 'returns': 'keys' };\nout = groupIn( obj, opts, indicator )\nopts = { 'returns': '*' };\nout = groupIn( obj, opts, indicator )\n","groupOwn":"function indicator( v ) {\n if ( v[ 0 ] === 'b' ) {\n     return 'b';\n }\n return 'other';\n };\nvar obj = { 'a': 'beep', 'b': 'boop', 'c': 'foo', 'd': 'bar' };\nvar out = groupOwn( obj, indicator )\nvar opts = { 'returns': 'keys' };\nout = groupOwn( obj, opts, indicator )\nopts = { 'returns': '*' };\nout = groupOwn( obj, opts, indicator )\n","gswap":"var x = array( new Float64Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\nvar y = array( new Float64Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\ngswap( x, y );\nx.data\ny.data\nx = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];\ny = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];\ngswap( x, y );\nx\ny\n","HALF_LN2":"HALF_LN2\n","HALF_PI":"HALF_PI\n","HARRISON_BOSTON_HOUSE_PRICES":"var data = HARRISON_BOSTON_HOUSE_PRICES()\n","HARRISON_BOSTON_HOUSE_PRICES_CORRECTED":"var data = HARRISON_BOSTON_HOUSE_PRICES_CORRECTED()\n","hasArrayBufferSupport":"var bool = hasArrayBufferSupport()\n","hasArrowFunctionSupport":"var bool = hasArrowFunctionSupport()\n","hasAsyncAwaitSupport":"var bool = hasAsyncAwaitSupport()\n","hasAsyncIteratorSymbolSupport":"var bool = hasAsyncIteratorSymbolSupport()\n","hasBigInt64ArraySupport":"var bool = hasBigInt64ArraySupport()\n","hasBigIntSupport":"var bool = hasBigIntSupport()\n","hasBigUint64ArraySupport":"var bool = hasBigUint64ArraySupport()\n","hasClassSupport":"var bool = hasClassSupport()\n","hasDataViewSupport":"var bool = hasDataViewSupport()\n","hasDefinePropertiesSupport":"var bool = hasDefinePropertiesSupport()\n","hasDefinePropertySupport":"var bool = hasDefinePropertySupport()\n","hasFloat32ArraySupport":"var bool = hasFloat32ArraySupport()\n","hasFloat64ArraySupport":"var bool = hasFloat64ArraySupport()\n","hasFunctionNameSupport":"var bool = hasFunctionNameSupport()\n","hasGeneratorSupport":"var bool = hasGeneratorSupport()\n","hasGlobalThisSupport":"var bool = hasGlobalThisSupport()\n","hasInt8ArraySupport":"var bool = hasInt8ArraySupport()\n","hasInt16ArraySupport":"var bool = hasInt16ArraySupport()\n","hasInt32ArraySupport":"var bool = hasInt32ArraySupport()\n","hasIteratorSymbolSupport":"var bool = hasIteratorSymbolSupport()\n","hasMapSupport":"var bool = hasMapSupport()\n","hasNodeBufferSupport":"var bool = hasNodeBufferSupport()\n","hasOwnProp":"var beep = { 'boop': true };\nvar bool = hasOwnProp( beep, 'boop' )\nbool = hasOwnProp( beep, 'bop' )\n","hasProp":"var beep = { 'boop': true };\nvar bool = hasProp( beep, 'boop' )\nbool = hasProp( beep, 'toString' )\nbool = hasProp( beep, 'bop' )\n","hasProxySupport":"var bool = hasProxySupport()\n","hasSetSupport":"var bool = hasSetSupport()\n","hasSharedArrayBufferSupport":"var bool = hasSharedArrayBufferSupport()\n","hasSymbolSupport":"var bool = hasSymbolSupport()\n","hasToStringTagSupport":"var bool = hasToStringTagSupport()\n","hasUint8ArraySupport":"var bool = hasUint8ArraySupport()\n","hasUint8ClampedArraySupport":"var bool = hasUint8ClampedArraySupport()\n","hasUint16ArraySupport":"var bool = hasUint16ArraySupport()\n","hasUint32ArraySupport":"var bool = hasUint32ArraySupport()\n","hasUTF16SurrogatePairAt":"var out = hasUTF16SurrogatePairAt( '🌷', 0 )\nout = hasUTF16SurrogatePairAt( '🌷', 1 )\n","hasWeakMapSupport":"var bool = hasWeakMapSupport()\n","hasWeakSetSupport":"var bool = hasWeakSetSupport()\n","hasWebAssemblySupport":"var bool = hasWebAssemblySupport()\n","headercase":"var out = headercase( 'Hello World!' )\nout = headercase( 'beep boop' )\n","HERNDON_VENUS_SEMIDIAMETERS":"var d = HERNDON_VENUS_SEMIDIAMETERS()\n","homedir":"var home = homedir()\n","HOURS_IN_DAY":"var days = 3.14;\nvar hrs = days * HOURS_IN_DAY\n","HOURS_IN_WEEK":"var wks = 3.14;\nvar hrs = wks * HOURS_IN_WEEK\n","hoursInMonth":"var num = hoursInMonth()\nnum = hoursInMonth( 2 )\nnum = hoursInMonth( 2, 2016 )\nnum = hoursInMonth( 2, 2017 )\nnum = hoursInMonth( 'feb', 2016 )\nnum = hoursInMonth( 'february', 2016 )\n","hoursInYear":"var num = hoursInYear()\nnum = hoursInYear( 2016 )\nnum = hoursInYear( 2017 )\n","httpServer":"var createServer = httpServer()\nfunction onRequest( request, response ) {\nconsole.log( request.url );\nresponse.end( 'OK' );\n };\ncreateServer = httpServer( onRequest )\nvar opts = { 'port': 7331 };\ncreateServer = httpServer( opts )\n","identity":"var v = identity( 3.14 )\n","ifelse":"var z = ifelse( true, 1.0, -1.0 )\nz = ifelse( false, 1.0, -1.0 )\n","ifelseAsync":"function predicate( clbk ) {\n setTimeout( onTimeout, 0 );\n function onTimeout() {\n     clbk( null, true );\n }\n };\nfunction done( error, result ) {\n if ( error ) {\n     throw error;\n }\n console.log( result );\n };\nifelseAsync( predicate, 'beep', 'boop', done )\n","ifthen":"function x() { return 1.0; };\nfunction y() { return -1.0; };\nvar z = ifthen( true, x, y )\nz = ifthen( false, x, y )\n","ifthenAsync":"function predicate( clbk ) {\n setTimeout( onTimeout, 0 );\n function onTimeout() {\n     clbk( null, false );\n }\n };\nfunction x( clbk ) {\n setTimeout( onTimeout, 0 );\n function onTimeout() {\n     clbk( null, 'beep' );\n }\n };\nfunction y( clbk ) {\n setTimeout( onTimeout, 0 );\n function onTimeout() {\n     clbk( null, 'boop' );\n }\n };\nfunction done( error, result ) {\n if ( error ) {\n     throw error;\n }\n console.log( result );\n };\nifthenAsync( predicate, x, y, done )\n","imag":"var z = new Complex128( 5.0, 3.0 );\nvar im = imag( z )\n","imagf":"var z = new Complex64( 5.0, 3.0 );\nvar im = imagf( z )\n","IMG_ACANTHUS_MOLLIS":"var img = IMG_ACANTHUS_MOLLIS()\n","IMG_AIRPLANE_FROM_ABOVE":"var img = IMG_AIRPLANE_FROM_ABOVE()\n","IMG_ALLIUM_OREOPHILUM":"var img = IMG_ALLIUM_OREOPHILUM()\n","IMG_BLACK_CANYON":"var img = IMG_BLACK_CANYON()\n","IMG_DUST_BOWL_HOME":"var img = IMG_DUST_BOWL_HOME()\n","IMG_FRENCH_ALPINE_LANDSCAPE":"var img = IMG_FRENCH_ALPINE_LANDSCAPE()\n","IMG_LOCOMOTION_HOUSE_CAT":"var img = IMG_LOCOMOTION_HOUSE_CAT()\n","IMG_LOCOMOTION_NUDE_MALE":"var img = IMG_LOCOMOTION_NUDE_MALE()\n","IMG_MARCH_PASTORAL":"var img = IMG_MARCH_PASTORAL()\n","IMG_NAGASAKI_BOATS":"var img = IMG_NAGASAKI_BOATS()\n","incrapcorr":"var accumulator = incrapcorr();\nvar ar = accumulator()\nar = accumulator( 2.0, 1.0 )\nar = accumulator( -5.0, 3.14 )\nar = accumulator()\n","incrBinaryClassification":"var opts = {};\nopts.intercept = true;\nopts.lambda = 1.0e-5;\nvar acc = incrBinaryClassification( 3, opts );\nvar buf = new Float64Array( [ 2.3, 1.0, 5.0 ] );\nvar x = array( buf );\nvar coefs = acc( x, 1 )\nbuf = new Float64Array( [ 2.3, 5.3, 8.6 ] );\nx = array( buf );\nvar yhat = acc.predict( x )\n","incrcount":"var accumulator = incrcount();\nvar v = accumulator()\nv = accumulator( 2.0 )\nv = accumulator( -5.0 )\nv = accumulator()\n","incrcovariance":"var accumulator = incrcovariance();\nvar v = accumulator()\nv = accumulator( 2.0, 1.0 )\nv = accumulator( -5.0, 3.14 )\nv = accumulator()\n","incrcovmat":"var accumulator = incrcovmat( 2 );\nvar out = accumulator()\nvar buf = new Float64Array( 2 );\nvar shape = [ 2 ];\nvar strides = [ 1 ];\nvar v = ndarray( 'float64', buf, shape, strides, 0, 'row-major' );\nv.set( 0, 2.0 );\nv.set( 1, 1.0 );\nout = accumulator( v )\nv.set( 0, -5.0 );\nv.set( 1, 3.14 );\nout = accumulator( v )\nout = accumulator()\n","incrcv":"var accumulator = incrcv();\nvar cv = accumulator()\ncv = accumulator( 2.0 )\ncv = accumulator( 1.0 )\ncv = accumulator()\n","increwmean":"var accumulator = increwmean( 0.5 );\nvar v = accumulator()\nv = accumulator( 2.0 )\nv = accumulator( -5.0 )\nv = accumulator()\n","increwstdev":"var accumulator = increwstdev( 0.5 );\nvar s = accumulator()\ns = accumulator( 2.0 )\ns = accumulator( -5.0 )\ns = accumulator()\n","increwvariance":"var accumulator = increwvariance( 0.5 );\nvar v = accumulator()\nv = accumulator( 2.0 )\nv = accumulator( -5.0 )\nv = accumulator()\n","incrgmean":"var accumulator = incrgmean();\nvar v = accumulator()\nv = accumulator( 2.0 )\nv = accumulator( 5.0 )\nv = accumulator()\n","incrgrubbs":"var acc = incrgrubbs();\nvar res = acc()\nfor ( var i = 0; i < 200; i++ ) {\n res = acc( base.random.normal( 10.0, 5.0 ) );\n };\nres.print()\n","incrhmean":"var accumulator = incrhmean();\nvar v = accumulator()\nv = accumulator( 2.0 )\nv = accumulator( 5.0 )\nv = accumulator()\n","incrkmeans":"var accumulator = incrkmeans( 5, 2 );\nvar buf = new Float64Array( 2 );\nvar shape = [ 2 ];\nvar strides = [ 1 ];\nvar v = ndarray( 'float64', buf, shape, strides, 0, 'row-major' );\nv.set( 0, 2.0 );\nv.set( 1, 1.0 );\nout = accumulator( v );\nv.set( 0, -5.0 );\nv.set( 1, 3.14 );\nout = accumulator( v );\n","incrkurtosis":"var accumulator = incrkurtosis();\nvar v = accumulator( 2.0 )\nv = accumulator( 2.0 )\nv = accumulator( -4.0 )\nv = accumulator( -4.0 )\n","incrmaape":"var accumulator = incrmaape();\nvar m = accumulator()\nm = accumulator( 2.0, 3.0 )\nm = accumulator( 5.0, 2.0 )\nm = accumulator()\n","incrmae":"var accumulator = incrmae();\nvar m = accumulator()\nm = accumulator( 2.0, 3.0 )\nm = accumulator( -5.0, 2.0 )\nm = accumulator()\n","incrmapcorr":"var accumulator = incrmapcorr( 3 );\nvar ar = accumulator()\nar = accumulator( 2.0, 1.0 )\nar = accumulator( -5.0, 3.14 )\nar = accumulator( 3.0, -1.0 )\nar = accumulator( 5.0, -9.5 )\nar = accumulator()\n","incrmape":"var accumulator = incrmape();\nvar m = accumulator()\nm = accumulator( 2.0, 3.0 )\nm = accumulator( 5.0, 2.0 )\nm = accumulator()\n","incrmax":"var accumulator = incrmax();\nvar m = accumulator()\nm = accumulator( 3.14 )\nm = accumulator( -5.0 )\nm = accumulator( 10.1 )\nm = accumulator()\n","incrmaxabs":"var accumulator = incrmaxabs();\nvar m = accumulator()\nm = accumulator( 3.14 )\nm = accumulator( -5.0 )\nm = accumulator( 10.1 )\nm = accumulator()\n","incrmcovariance":"var accumulator = incrmcovariance( 3 );\nvar v = accumulator()\nv = accumulator( 2.0, 1.0 )\nv = accumulator( -5.0, 3.14 )\nv = accumulator( 3.0, -1.0 )\nv = accumulator( 5.0, -9.5 )\nv = accumulator()\n","incrmcv":"var accumulator = incrmcv( 3 );\nvar cv = accumulator()\ncv = accumulator( 2.0 )\ncv = accumulator( 1.0 )\ncv = accumulator( 3.0 )\ncv = accumulator( 7.0 )\ncv = accumulator()\n","incrmda":"var accumulator = incrmda();\nvar m = accumulator()\nm = accumulator( 2.0, 3.0 )\nm = accumulator( -5.0, 4.0 )\nm = accumulator()\n","incrme":"var accumulator = incrme();\nvar m = accumulator()\nm = accumulator( 2.0, 3.0 )\nm = accumulator( -5.0, 2.0 )\nm = accumulator()\n","incrmean":"var accumulator = incrmean();\nvar mu = accumulator()\nmu = accumulator( 2.0 )\nmu = accumulator( -5.0 )\nmu = accumulator()\n","incrmeanabs":"var accumulator = incrmeanabs();\nvar mu = accumulator()\nmu = accumulator( 2.0 )\nmu = accumulator( -5.0 )\nmu = accumulator()\n","incrmeanabs2":"var accumulator = incrmeanabs2();\nvar mu = accumulator()\nmu = accumulator( 2.0 )\nmu = accumulator( -5.0 )\nmu = accumulator()\n","incrmeanstdev":"var accumulator = incrmeanstdev();\nvar ms = accumulator()\nms = accumulator( 2.0 )\nms = accumulator( -5.0 )\nms = accumulator( 3.0 )\nms = accumulator( 5.0 )\nms = accumulator()\n","incrmeanvar":"var accumulator = incrmeanvar();\nvar mv = accumulator()\nmv = accumulator( 2.0 )\nmv = accumulator( -5.0 )\nmv = accumulator( 3.0 )\nmv = accumulator( 5.0 )\nmv = accumulator()\n","incrmgmean":"var accumulator = incrmgmean( 3 );\nvar v = accumulator()\nv = accumulator( 2.0 )\nv = accumulator( 5.0 )\nv = accumulator( 3.0 )\nv = accumulator( 5.0 )\nv = accumulator()\n","incrmgrubbs":"var acc = incrmgrubbs( 20 );\nvar res = acc()\nfor ( var i = 0; i < 200; i++ ) {\n res = acc( base.random.normal( 10.0, 5.0 ) );\n };\nres.print()\n","incrmhmean":"var accumulator = incrmhmean( 3 );\nvar v = accumulator()\nv = accumulator( 2.0 )\nv = accumulator( 5.0 )\nv = accumulator( 3.0 )\nv = accumulator( 5.0 )\nv = accumulator()\n","incrmidrange":"var accumulator = incrmidrange();\nvar v = accumulator()\nv = accumulator( 3.14 )\nv = accumulator( -5.0 )\nv = accumulator( 10.1 )\nv = accumulator()\n","incrmin":"var accumulator = incrmin();\nvar m = accumulator()\nm = accumulator( 3.14 )\nm = accumulator( -5.0 )\nm = accumulator( 10.1 )\nm = accumulator()\n","incrminabs":"var accumulator = incrminabs();\nvar m = accumulator()\nm = accumulator( 3.14 )\nm = accumulator( -5.0 )\nm = accumulator( 10.1 )\nm = accumulator()\n","incrminmax":"var accumulator = incrminmax();\nvar mm = accumulator()\nmm = accumulator( 2.0 )\nmm = accumulator( -5.0 )\nmm = accumulator( 3.0 )\nmm = accumulator( 5.0 )\nmm = accumulator()\n","incrminmaxabs":"var accumulator = incrminmaxabs();\nvar mm = accumulator()\nmm = accumulator( 2.0 )\nmm = accumulator( -5.0 )\nmm = accumulator( 3.0 )\nmm = accumulator( 5.0 )\nmm = accumulator()\n","incrmmaape":"var accumulator = incrmmaape( 3 );\nvar m = accumulator()\nm = accumulator( 2.0, 3.0 )\nm = accumulator( 5.0, 2.0 )\nm = accumulator( 3.0, 2.0 )\nm = accumulator( 2.0, 5.0 )\nm = accumulator()\n","incrmmae":"var accumulator = incrmmae( 3 );\nvar m = accumulator()\nm = accumulator( 2.0, 3.0 )\nm = accumulator( -5.0, 2.0 )\nm = accumulator( 3.0, 2.0 )\nm = accumulator( 5.0, -2.0 )\nm = accumulator()\n","incrmmape":"var accumulator = incrmmape( 3 );\nvar m = accumulator()\nm = accumulator( 2.0, 3.0 )\nm = accumulator( 5.0, 2.0 )\nm = accumulator( 3.0, 2.0 )\nm = accumulator( 2.0, 5.0 )\nm = accumulator()\n","incrmmax":"var accumulator = incrmmax( 3 );\nvar m = accumulator()\nm = accumulator( 2.0 )\nm = accumulator( -5.0 )\nm = accumulator( 3.0 )\nm = accumulator( 5.0 )\nm = accumulator()\n","incrmmaxabs":"var accumulator = incrmmaxabs( 3 );\nvar m = accumulator()\nm = accumulator( 2.0 )\nm = accumulator( -5.0 )\nm = accumulator( 3.0 )\nm = accumulator( 5.0 )\nm = accumulator()\n","incrmmda":"var accumulator = incrmmda( 3 );\nvar m = accumulator()\nm = accumulator( 2.0, 3.0 )\nm = accumulator( 5.0, 2.0 )\nm = accumulator( 3.0, 2.0 )\nm = accumulator( 4.0, 5.0 )\nm = accumulator()\n","incrmme":"var accumulator = incrmme( 3 );\nvar m = accumulator()\nm = accumulator( 2.0, 3.0 )\nm = accumulator( -5.0, 2.0 )\nm = accumulator( 3.0, 2.0 )\nm = accumulator( 5.0, -2.0 )\nm = accumulator()\n","incrmmean":"var accumulator = incrmmean( 3 );\nvar mu = accumulator()\nmu = accumulator( 2.0 )\nmu = accumulator( -5.0 )\nmu = accumulator( 3.0 )\nmu = accumulator( 5.0 )\nmu = accumulator()\n","incrmmeanabs":"var accumulator = incrmmeanabs( 3 );\nvar mu = accumulator()\nmu = accumulator( 2.0 )\nmu = accumulator( -5.0 )\nmu = accumulator( 3.0 )\nmu = accumulator( 5.0 )\nmu = accumulator()\n","incrmmeanabs2":"var accumulator = incrmmeanabs2( 3 );\nvar m = accumulator()\nm = accumulator( 2.0 )\nm = accumulator( -5.0 )\nm = accumulator( 3.0 )\nm = accumulator( 5.0 )\nm = accumulator()\n","incrmmeanstdev":"var accumulator = incrmmeanstdev( 3 );\nvar v = accumulator()\nv = accumulator( 2.0 )\nv = accumulator( -5.0 )\nv = accumulator( 3.0 )\nv = accumulator( 5.0 )\nv = accumulator()\n","incrmmeanvar":"var accumulator = incrmmeanvar( 3 );\nvar v = accumulator()\nv = accumulator( 2.0 )\nv = accumulator( -5.0 )\nv = accumulator( 3.0 )\nv = accumulator( 5.0 )\nv = accumulator()\n","incrmmidrange":"var accumulator = incrmmidrange( 3 );\nvar mr = accumulator()\nmr = accumulator( 2.0 )\nmr = accumulator( -5.0 )\nmr = accumulator( 3.0 )\nmr = accumulator( 5.0 )\nmr = accumulator()\n","incrmmin":"var accumulator = incrmmin( 3 );\nvar m = accumulator()\nm = accumulator( 2.0 )\nm = accumulator( -5.0 )\nm = accumulator( 3.0 )\nm = accumulator( 5.0 )\nm = accumulator()\n","incrmminabs":"var accumulator = incrmminabs( 3 );\nvar m = accumulator()\nm = accumulator( 2.0 )\nm = accumulator( -5.0 )\nm = accumulator( 3.0 )\nm = accumulator( 5.0 )\nm = accumulator()\n","incrmminmax":"var accumulator = incrmminmax( 3 );\nvar mm = accumulator()\nmm = accumulator( 2.0 )\nmm = accumulator( -5.0 )\nmm = accumulator( 3.0 )\nmm = accumulator( 5.0 )\nmm = accumulator()\n","incrmminmaxabs":"var accumulator = incrmminmaxabs( 3 );\nvar mm = accumulator()\nmm = accumulator( 2.0 )\nmm = accumulator( -5.0 )\nmm = accumulator( 3.0 )\nmm = accumulator( 5.0 )\nmm = accumulator()\n","incrmmpe":"var accumulator = incrmmpe( 3 );\nvar m = accumulator()\nm = accumulator( 2.0, 3.0 )\nm = accumulator( 5.0, 2.0 )\nm = accumulator( 3.0, 2.0 )\nm = accumulator( 2.0, 5.0 )\nm = accumulator()\n","incrmmse":"var accumulator = incrmmse( 3 );\nvar m = accumulator()\nm = accumulator( 2.0, 3.0 )\nm = accumulator( -5.0, 2.0 )\nm = accumulator( 3.0, 2.0 )\nm = accumulator( 5.0, -2.0 )\nm = accumulator()\n","incrmpcorr":"var accumulator = incrmpcorr( 3 );\nvar r = accumulator()\nr = accumulator( 2.0, 1.0 )\nr = accumulator( -5.0, 3.14 )\nr = accumulator( 3.0, -1.0 )\nr = accumulator( 5.0, -9.5 )\nr = accumulator()\n","incrmpcorr2":"var accumulator = incrmpcorr2( 3 );\nvar r2 = accumulator()\nr2 = accumulator( 2.0, 1.0 )\nr2 = accumulator( -5.0, 3.14 )\nr2 = accumulator( 3.0, -1.0 )\nr2 = accumulator( 5.0, -9.5 )\nr2 = accumulator()\n","incrmpcorrdist":"var accumulator = incrmpcorrdist( 3 );\nvar d = accumulator()\nd = accumulator( 2.0, 1.0 )\nd = accumulator( -5.0, 3.14 )\nd = accumulator( 3.0, -1.0 )\nd = accumulator( 5.0, -9.5 )\nd = accumulator()\n","incrmpe":"var accumulator = incrmpe();\nvar m = accumulator()\nm = accumulator( 2.0, 3.0 )\nm = accumulator( 5.0, 2.0 )\nm = accumulator()\n","incrmprod":"var accumulator = incrmprod( 3 );\nvar p = accumulator()\np = accumulator( 2.0 )\np = accumulator( -5.0 )\np = accumulator( 3.0 )\np = accumulator( 5.0 )\np = accumulator()\n","incrmrange":"var accumulator = incrmrange( 3 );\nvar r = accumulator()\nr = accumulator( 2.0 )\nr = accumulator( -5.0 )\nr = accumulator( 3.0 )\nr = accumulator( 5.0 )\nr = accumulator()\n","incrmrmse":"var accumulator = incrmrmse( 3 );\nvar r = accumulator()\nr = accumulator( 2.0, 3.0 )\nr = accumulator( -5.0, 2.0 )\nr = accumulator( 3.0, 2.0 )\nr = accumulator( 5.0, -2.0 )\nr = accumulator()\n","incrmrss":"var accumulator = incrmrss( 3 );\nvar r = accumulator()\nr = accumulator( 2.0, 3.0 )\nr = accumulator( -5.0, 2.0 )\nr = accumulator( 3.0, 2.0 )\nr = accumulator( 5.0, -2.0 )\nr = accumulator()\n","incrmse":"var accumulator = incrmse();\nvar m = accumulator()\nm = accumulator( 2.0, 3.0 )\nm = accumulator( -5.0, 2.0 )\nm = accumulator()\n","incrmstdev":"var accumulator = incrmstdev( 3 );\nvar s = accumulator()\ns = accumulator( 2.0 )\ns = accumulator( -5.0 )\ns = accumulator( 3.0 )\ns = accumulator( 5.0 )\ns = accumulator()\n","incrmsum":"var accumulator = incrmsum( 3 );\nvar s = accumulator()\ns = accumulator( 2.0 )\ns = accumulator( -5.0 )\ns = accumulator( 3.0 )\ns = accumulator( 5.0 )\ns = accumulator()\n","incrmsumabs":"var accumulator = incrmsumabs( 3 );\nvar s = accumulator()\ns = accumulator( 2.0 )\ns = accumulator( -5.0 )\ns = accumulator( 3.0 )\ns = accumulator( -5.0 )\ns = accumulator()\n","incrmsumabs2":"var accumulator = incrmsumabs2( 3 );\nvar s = accumulator()\ns = accumulator( 2.0 )\ns = accumulator( -5.0 )\ns = accumulator( 3.0 )\ns = accumulator( -5.0 )\ns = accumulator()\n","incrmsummary":"var accumulator = incrmsummary( 3 );\nvar s = accumulator()\ns = accumulator( 2.0 )\ns = accumulator( -5.0 )\ns = accumulator()\n","incrmsumprod":"var accumulator = incrmsumprod( 3 );\nvar s = accumulator()\ns = accumulator( 2.0, 3.0 )\ns = accumulator( -5.0, 2.0 )\ns = accumulator( 3.0, -2.0 )\ns = accumulator( 5.0, 3.0 )\ns = accumulator()\n","incrmvariance":"var accumulator = incrmvariance( 3 );\nvar s2 = accumulator()\ns2 = accumulator( 2.0 )\ns2 = accumulator( -5.0 )\ns2 = accumulator( 3.0 )\ns2 = accumulator( 5.0 )\ns2 = accumulator()\n","incrmvmr":"var accumulator = incrmvmr( 3 );\nvar F = accumulator()\nF = accumulator( 2.0 )\nF = accumulator( 1.0 )\nF = accumulator( 3.0 )\nF = accumulator( 7.0 )\nF = accumulator()\n","incrnancount":"var accumulator = incrnancount();\nvar v = accumulator()\nv = accumulator( 2.0 )\nv = accumulator( -5.0 )\nv = accumulator()\n","incrnansum":"var accumulator = incrnansum();\nvar s = accumulator()\ns = accumulator( 2.0 )\ns = accumulator( NaN )\ns = accumulator( -5.0 )\ns = accumulator()\n","incrnansumabs":"var accumulator = incrnansumabs();\nvar s = accumulator()\ns = accumulator( 2.0 )\ns = accumulator( NaN )\ns = accumulator( -5.0 )\ns = accumulator()\n","incrnansumabs2":"var accumulator = incrnansumabs2();\nvar s = accumulator()\ns = accumulator( 2.0 )\ns = accumulator( NaN )\ns = accumulator( -5.0 )\ns = accumulator()\n","incrpcorr":"var accumulator = incrpcorr();\nvar r = accumulator()\nr = accumulator( 2.0, 1.0 )\nr = accumulator( -5.0, 3.14 )\nr = accumulator()\n","incrpcorr2":"var accumulator = incrpcorr2();\nvar r2 = accumulator()\nr2 = accumulator( 2.0, 1.0 )\nr2 = accumulator( -5.0, 3.14 )\nr2 = accumulator()\n","incrpcorrdist":"var accumulator = incrpcorrdist();\nvar d = accumulator()\nd = accumulator( 2.0, 1.0 )\nd = accumulator( -5.0, 3.14 )\nd = accumulator()\n","incrpcorrdistmat":"var accumulator = incrpcorrdistmat( 2 );\nvar out = accumulator()\nvar buf = new Float64Array( 2 );\nvar shape = [ 2 ];\nvar strides = [ 1 ];\nvar v = ndarray( 'float64', buf, shape, strides, 0, 'row-major' );\nv.set( 0, 2.0 );\nv.set( 1, 1.0 );\nout = accumulator( v )\nv.set( 0, -5.0 );\nv.set( 1, 3.14 );\nout = accumulator( v )\nout = accumulator()\n","incrpcorrmat":"var accumulator = incrpcorrmat( 2 );\nvar out = accumulator()\nvar buf = new Float64Array( 2 );\nvar shape = [ 2 ];\nvar strides = [ 1 ];\nvar v = ndarray( 'float64', buf, shape, strides, 0, 'row-major' );\nv.set( 0, 2.0 );\nv.set( 1, 1.0 );\nout = accumulator( v )\nv.set( 0, -5.0 );\nv.set( 1, 3.14 );\nout = accumulator( v )\nout = accumulator()\n","incrprod":"var accumulator = incrprod();\nvar v = accumulator()\nv = accumulator( 2.0 )\nv = accumulator( -5.0 )\nv = accumulator()\n","incrrange":"var accumulator = incrrange();\nvar v = accumulator()\nv = accumulator( -2.0 )\nv = accumulator( 1.0 )\nv = accumulator( 3.0 )\nv = accumulator()\n","incrrmse":"var accumulator = incrrmse();\nvar r = accumulator()\nr = accumulator( 2.0, 3.0 )\nr = accumulator( -5.0, 2.0 )\nr = accumulator()\n","incrrss":"var accumulator = incrrss();\nvar r = accumulator()\nr = accumulator( 2.0, 3.0 )\nr = accumulator( -5.0, 2.0 )\nr = accumulator()\n","incrskewness":"var accumulator = incrskewness();\nvar v = accumulator( 2.0 )\nv = accumulator( -5.0 )\nv = accumulator( -10.0 )\nv = accumulator()\n","incrspace":"var arr = incrspace( 0, 11, 2 )\n","incrstdev":"var accumulator = incrstdev();\nvar s = accumulator()\ns = accumulator( 2.0 )\ns = accumulator( -5.0 )\ns = accumulator()\n","incrsum":"var accumulator = incrsum();\nvar s = accumulator()\ns = accumulator( 2.0 )\ns = accumulator( -5.0 )\ns = accumulator()\n","incrsumabs":"var accumulator = incrsumabs();\nvar s = accumulator()\ns = accumulator( 2.0 )\ns = accumulator( -5.0 )\ns = accumulator()\n","incrsumabs2":"var accumulator = incrsumabs2();\nvar s = accumulator()\ns = accumulator( 2.0 )\ns = accumulator( -5.0 )\ns = accumulator()\n","incrsummary":"var accumulator = incrsummary();\nvar s = accumulator()\ns = accumulator( 2.0 )\ns = accumulator( -5.0 )\ns = accumulator()\n","incrsumprod":"var accumulator = incrsumprod();\nvar s = accumulator()\ns = accumulator( 2.0, 3.0 )\ns = accumulator( -5.0, 2.0 )\ns = accumulator()\n","incrvariance":"var accumulator = incrvariance();\nvar s2 = accumulator()\ns2 = accumulator( 2.0 )\ns2 = accumulator( -5.0 )\ns2 = accumulator()\n","incrvmr":"var accumulator = incrvmr();\nvar D = accumulator()\nD = accumulator( 2.0 )\nD = accumulator( 1.0 )\nD = accumulator()\n","incrwmean":"var accumulator = incrwmean();\nvar mu = accumulator()\nmu = accumulator( 2.0, 1.0 )\nmu = accumulator( 2.0, 0.5 )\nmu = accumulator( 3.0, 1.5 )\nmu = accumulator()\n","ind2sub":"var d = [ 3, 3, 3 ];\nvar s = ind2sub( d, 17 )\n","ind2sub.assign":"var d = [ 3, 3, 3 ];\nvar out = [ 0, 0, 0 ];\nvar s = ind2sub.assign( d, 17, out )\nvar bool = ( s === out )\n","indexOf":"var arr = [ 4, 3, 2, 1 ];\nvar idx = indexOf( arr, 3 )\narr = [ 4, 3, 2, 1 ];\nidx = indexOf( arr, 5 )\narr = [ 1, 2, 3, 4, 5, 2, 6 ];\nidx = indexOf( arr, 2, 3 )\narr = [ 1, 2, 3, 4, 2, 5 ];\nidx = indexOf( arr, 2, 10 )\narr = [ 1, 2, 3, 4, 5, 2, 6, 2 ];\nidx = indexOf( arr, 2, -4 )\nidx = indexOf( arr, 2, -1 )\narr = [ 1, 2, 3, 4, 5, 2, 6 ];\nidx = indexOf( arr, 2, -10 )\nvar str = 'bebop';\nidx = indexOf( str, 'o' )\n","inherit":"function Foo() { return this; };\nFoo.prototype.beep = function beep() { return 'boop'; };\nfunction Bar() { Foo.call( this ); return this; };\ninherit( Bar, Foo );\nvar bar = new Bar();\nvar v = bar.beep()\n","inheritedEnumerableProperties":"var props = inheritedEnumerableProperties( {} )\n","inheritedEnumerablePropertySymbols":"var symbols = inheritedEnumerablePropertySymbols( [] )\n","inheritedKeys":"var keys = inheritedKeys( {} )\n","inheritedNonEnumerableProperties":"var props = inheritedNonEnumerableProperties( {} )\n","inheritedNonEnumerablePropertyNames":"var keys = inheritedNonEnumerablePropertyNames( {} )\n","inheritedNonEnumerablePropertySymbols":"var symbols = inheritedNonEnumerablePropertySymbols( [] )\n","inheritedProperties":"var symbols = inheritedProperties( [] )\n","inheritedPropertyDescriptor":"var desc = inheritedPropertyDescriptor( {}, 'toString' )\n","inheritedPropertyDescriptors":"function Foo() { this.beep = 'boop'; return this; };\nFoo.prototype.foo = 'bar';\nvar obj = new Foo();\nvar desc = inheritedPropertyDescriptors( obj )\n","inheritedPropertyNames":"var keys = inheritedPropertyNames( [] )\n","inheritedPropertySymbols":"var symbols = inheritedPropertySymbols( [] )\n","inheritedWritableProperties":"var props = inheritedWritableProperties( {} )\n","inheritedWritablePropertyNames":"var keys = inheritedWritablePropertyNames( {} )\n","inheritedWritablePropertySymbols":"var symbols = inheritedWritablePropertySymbols( [] )\n","inmap":"function foo( v, i ) { return v * i; };\nvar arr = [ 1.0, 2.0, 3.0 ];\nvar out = inmap( arr, foo )\nvar bool = ( out === arr )\n","inmapAsync":"function fcn( value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, value*index );\n }\n };\nfunction done( error, collection ) {\n if ( error ) {\n     throw error;\n }\n console.log( collection === arr );\n console.log( collection );\n };\nvar arr = [ 3000, 2500, 1000 ];\ninmapAsync( arr, fcn, done )\nfunction fcn( value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, value*index );\n }\n };\nfunction done( error, collection ) {\n if ( error ) {\n     throw error;\n }\n console.log( collection === arr );\n console.log( collection );\n };\nvar opts = { 'limit': 2 };\nvar arr = [ 3000, 2500, 1000 ];\ninmapAsync( arr, opts, fcn, done )\nfunction fcn( value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, value*index );\n }\n };\nfunction done( error, collection ) {\n if ( error ) {\n     throw error;\n }\n console.log( collection === arr );\n console.log( collection );\n };\nvar opts = { 'series': true };\nvar arr = [ 3000, 2500, 1000 ];\ninmapAsync( arr, opts, fcn, done )\n","inmapAsync.factory":"function fcn( value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, value*index );\n }\n };\nvar opts = { 'series': true };\nvar f = inmapAsync.factory( opts, fcn );\nfunction done( error, collection ) {\n if ( error ) {\n     throw error;\n }\n console.log( collection === arr );\n console.log( collection );\n };\nvar arr = [ 3000, 2500, 1000 ];\nf( arr, done )\narr = [ 2000, 1500, 1000 ];\nf( arr, done )\n","inmapRight":"function foo( v, i ) { console.log( '%s: %d', i, v ); return v * i; };\nvar arr = [ 1.0, 2.0, 3.0 ];\nvar out = inmapRight( arr, foo )\nvar bool = ( out === arr )\n","inmapRightAsync":"function fcn( value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, value*index );\n }\n };\nfunction done( error, collection ) {\n if ( error ) {\n     throw error;\n }\n console.log( collection === arr );\n console.log( collection );\n };\nvar arr = [ 1000, 2500, 3000 ];\ninmapRightAsync( arr, fcn, done )\nfunction fcn( value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, value*index );\n }\n };\nfunction done( error, collection ) {\n if ( error ) {\n     throw error;\n }\n console.log( collection === arr );\n console.log( collection );\n };\nvar opts = { 'limit': 2 };\nvar arr = [ 1000, 2500, 3000 ];\ninmapRightAsync( arr, opts, fcn, done )\nfunction fcn( value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, value*index );\n }\n };\nfunction done( error, collection ) {\n if ( error ) {\n     throw error;\n }\n console.log( collection === arr );\n console.log( collection );\n };\nvar opts = { 'series': true };\nvar arr = [ 1000, 2500, 3000 ];\ninmapRightAsync( arr, opts, fcn, done )\n","inmapRightAsync.factory":"function fcn( value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, value*index );\n }\n };\nvar opts = { 'series': true };\nvar f = inmapRightAsync.factory( opts, fcn );\nfunction done( error, collection ) {\n if ( error ) {\n     throw error;\n }\n console.log( collection === arr );\n console.log( collection );\n };\nvar arr = [ 1000, 2500, 3000 ];\nf( arr, done )\narr = [ 1000, 1500, 2000 ];\nf( arr, done )\n","inspectSinkStream":"function clbk( chunk, idx ) { console.log( chunk.toString() ); };\nvar s = inspectSinkStream( clbk );\ns.write( 'a' );\ns.write( 'b' );\ns.write( 'c' );\ns.end();\n","inspectSinkStream.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = inspectSinkStream.factory( opts );\nfunction clbk( chunk, idx ) { console.log( chunk.toString() ); };\nvar s = createStream( clbk );\ns.write( 'a' );\ns.write( 'b' );\ns.write( 'c' );\ns.end();\n","inspectSinkStream.objectMode":"function clbk( chunk, idx ) { console.log( chunk.toString() ); };\nvar s = inspectSinkStream.objectMode( clbk );\ns.write( { 'value': 'a' } );\ns.write( { 'value': 'b' } );\ns.write( { 'value': 'c' } );\ns.end();\n","inspectStream":"function clbk( chunk, idx ) { console.log( chunk.toString() ); };\nvar s = inspectStream( clbk );\ns.write( 'a' );\ns.write( 'b' );\ns.write( 'c' );\ns.end();\n","inspectStream.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = inspectStream.factory( opts );\nfunction clbk( chunk, idx ) { console.log( chunk.toString() ); };\nvar s = createStream( clbk );\ns.write( 'a' );\ns.write( 'b' );\ns.write( 'c' );\ns.end();\n","inspectStream.objectMode":"function clbk( chunk, idx ) { console.log( chunk.toString() ); };\nvar s = inspectStream.objectMode( clbk );\ns.write( { 'value': 'a' } );\ns.write( { 'value': 'b' } );\ns.write( { 'value': 'c' } );\ns.end();\n","instanceOf":"var bool = instanceOf( [], Array )\nbool = instanceOf( {}, Object )\nbool = instanceOf( null, Object )\n","INT8_MAX":"INT8_MAX\n","INT8_MIN":"INT8_MIN\n","INT8_NUM_BYTES":"INT8_NUM_BYTES\n","Int8Array":"var arr = new Int8Array()\nvar arr = new Int8Array( 5 )\nvar arr1 = new Int32Array( [ 5, 5, 5 ] );\nvar arr2 = new Int8Array( arr1 )\nvar arr1 = [ 5.0, 5.0, 5.0 ];\nvar arr2 = new Int8Array( arr1 )\nvar buf = new ArrayBuffer( 4 );\nvar arr = new Int8Array( buf, 0, 4 )\n","Int8Array.from":"function mapFcn( v ) { return v * 2; };\nvar arr = Int8Array.from( [ 1, 2 ], mapFcn )\n","Int8Array.of":"var arr = Int8Array.of( 1, 2 )\n","Int8Array.BYTES_PER_ELEMENT":"Int8Array.BYTES_PER_ELEMENT\n","Int8Array.name":"Int8Array.name\n","Int8Array.prototype.buffer":"var arr = new Int8Array( 5 );\narr.buffer\n","Int8Array.prototype.byteLength":"var arr = new Int8Array( 5 );\narr.byteLength\n","Int8Array.prototype.byteOffset":"var arr = new Int8Array( 5 );\narr.byteOffset\n","Int8Array.prototype.BYTES_PER_ELEMENT":"var arr = new Int8Array( 5 );\narr.BYTES_PER_ELEMENT\n","Int8Array.prototype.length":"var arr = new Int8Array( 5 );\narr.length\n","Int8Array.prototype.copyWithin":"var arr = new Int8Array( [ 1, 2, 3, 4, 5 ] );\narr.copyWithin( 3, 0, 2 );\narr[ 3 ]\narr[ 4 ]\n","Int8Array.prototype.entries":"var arr = new Int8Array( [ 1, 2 ] );\nit = arr.entries();\nit.next().value\nit.next().value\nit.next().done\n","Int8Array.prototype.every":"var arr = new Int8Array( [ 1, 2 ] );\nfunction predicate( v ) { return ( v <= 1 ); };\narr.every( predicate )\n","Int8Array.prototype.fill":"var arr = new Int8Array( [ 1, 2 ] );\narr.fill( 3 );\narr[ 0 ]\narr[ 1 ]\n","Int8Array.prototype.filter":"var arr1 = new Int8Array( [ 1, 2, 3 ] );\nfunction predicate( v ) { return ( v > 1 ); };\nvar arr2 = arr1.filter( predicate );\narr2.length\n","Int8Array.prototype.find":"var arr = new Int8Array( [ 1, 2, 3 ] );\nfunction predicate( v ) { return ( v > 2 ); };\nvar v = arr.find( predicate )\n","Int8Array.prototype.findIndex":"var arr = new Int8Array( [ 1, 2, 3 ] );\nfunction predicate( v ) { return ( v > 2 ); };\nvar idx = arr.findIndex( predicate )\n","Int8Array.prototype.forEach":"var arr = new Int8Array( [ 3, 2, 1 ] );\nvar str = ' ';\nfunction fcn( v, i ) { str += i + ':' + v + ' '; };\narr.forEach( fcn );\nstr\n","Int8Array.prototype.includes":"var arr = new Int8Array( [ 1, 2, 3 ] );\nvar bool = arr.includes( 4 )\nbool = arr.includes( 3 )\n","Int8Array.prototype.indexOf":"var arr = new Int8Array( [ 1, 2, 3 ] );\nvar idx = arr.indexOf( 4 )\nidx = arr.indexOf( 3 )\n","Int8Array.prototype.join":"var arr = new Int8Array( [ 1, 2, 3 ] );\narr.join( '|' )\n","Int8Array.prototype.keys":"var arr = new Int8Array( [ 1, 2 ] );\nit = arr.keys();\nit.next().value\nit.next().value\nit.next().done\n","Int8Array.prototype.lastIndexOf":"var arr = new Int8Array( [ 1, 0, 2, 0, 1 ] );\nvar idx = arr.lastIndexOf( 3 )\nidx = arr.lastIndexOf( 0 )\n","Int8Array.prototype.map":"var arr1 = new Int8Array( [ 1, 2, 3 ] );\nfunction fcn( v ) { return v * 2; };\nvar arr2 = arr1.map( fcn )\n","Int8Array.prototype.reduce":"var arr = new Int8Array( [ 1, 2, 3 ] );\nfunction fcn( acc, v ) { return acc + (v*v); };\nvar v = arr.reduce( fcn, 0 )\n","Int8Array.prototype.reduceRight":"var arr = new Int8Array( [ 1, 2, 3 ] );\nfunction fcn( acc, v ) { return acc + (v*v); };\nvar v = arr.reduceRight( fcn, 0 )\n","Int8Array.prototype.reverse":"var arr = new Int8Array( [ 1, 2, 3 ] )\narr.reverse()\n","Int8Array.prototype.set":"var arr = new Int8Array( [ 1, 2, 3 ] );\narr.set( [ 4, 4 ], 1 );\narr[ 1 ]\narr[ 2 ]\n","Int8Array.prototype.slice":"var arr1 = new Int8Array( [ 1, 2, 3 ] );\nvar arr2 = arr1.slice( 1 );\narr2.length\narr2[ 0 ]\narr2[ 1 ]\n","Int8Array.prototype.some":"var arr = new Int8Array( [ 1, 2 ] );\nfunction predicate( v ) { return ( v > 1 ); };\narr.some( predicate )\n","Int8Array.prototype.sort":"var arr = new Int8Array( [ 1, 2, 0, 2, 1 ] );\narr.sort()\n","Int8Array.prototype.subarray":"var arr1 = new Int8Array( [ 1, 2, 3, 4, 5 ] );\nvar arr2 = arr1.subarray( 2 )\n","Int8Array.prototype.toLocaleString":"var arr = new Int8Array( [ 1, 2, 3 ] );\narr.toLocaleString()\n","Int8Array.prototype.toString":"var arr = new Int8Array( [ 1, 2, 3 ] );\narr.toString()\n","Int8Array.prototype.values":"var arr = new Int8Array( [ 1, 2 ] );\nit = arr.values();\nit.next().value\nit.next().value\nit.next().done\n","INT16_MAX":"INT16_MAX\n","INT16_MIN":"INT16_MIN\n","INT16_NUM_BYTES":"INT16_NUM_BYTES\n","Int16Array":"var arr = new Int16Array()\nvar arr = new Int16Array( 5 )\nvar arr1 = new Int32Array( [ 5, 5, 5 ] );\nvar arr2 = new Int16Array( arr1 )\nvar arr1 = [ 5.0, 5.0, 5.0 ];\nvar arr2 = new Int16Array( arr1 )\nvar buf = new ArrayBuffer( 8 );\nvar arr = new Int16Array( buf, 0, 4 )\n","Int16Array.from":"function mapFcn( v ) { return v * 2; };\nvar arr = Int16Array.from( [ 1, 2 ], mapFcn )\n","Int16Array.of":"var arr = Int16Array.of( 1, 2 )\n","Int16Array.BYTES_PER_ELEMENT":"Int16Array.BYTES_PER_ELEMENT\n","Int16Array.name":"Int16Array.name\n","Int16Array.prototype.buffer":"var arr = new Int16Array( 5 );\narr.buffer\n","Int16Array.prototype.byteLength":"var arr = new Int16Array( 5 );\narr.byteLength\n","Int16Array.prototype.byteOffset":"var arr = new Int16Array( 5 );\narr.byteOffset\n","Int16Array.prototype.BYTES_PER_ELEMENT":"var arr = new Int16Array( 5 );\narr.BYTES_PER_ELEMENT\n","Int16Array.prototype.length":"var arr = new Int16Array( 5 );\narr.length\n","Int16Array.prototype.copyWithin":"var arr = new Int16Array( [ 1, 2, 3, 4, 5 ] );\narr.copyWithin( 3, 0, 2 );\narr[ 3 ]\narr[ 4 ]\n","Int16Array.prototype.entries":"var arr = new Int16Array( [ 1, 2 ] );\nit = arr.entries();\nit.next().value\nit.next().value\nit.next().done\n","Int16Array.prototype.every":"var arr = new Int16Array( [ 1, 2 ] );\nfunction predicate( v ) { return ( v <= 1 ); };\narr.every( predicate )\n","Int16Array.prototype.fill":"var arr = new Int16Array( [ 1, 2 ] );\narr.fill( 3 );\narr[ 0 ]\narr[ 1 ]\n","Int16Array.prototype.filter":"var arr1 = new Int16Array( [ 1, 2, 3 ] );\nfunction predicate( v ) { return ( v > 1 ); };\nvar arr2 = arr1.filter( predicate );\narr2.length\n","Int16Array.prototype.find":"var arr = new Int16Array( [ 1, 2, 3 ] );\nfunction predicate( v ) { return ( v > 2 ); };\nvar v = arr.find( predicate )\n","Int16Array.prototype.findIndex":"var arr = new Int16Array( [ 1, 2, 3 ] );\nfunction predicate( v ) { return ( v > 2 ); };\nvar idx = arr.findIndex( predicate )\n","Int16Array.prototype.forEach":"var arr = new Int16Array( [ 3, 2, 1 ] );\nvar str = ' ';\nfunction fcn( v, i ) { str += i + ':' + v + ' '; };\narr.forEach( fcn );\nstr\n","Int16Array.prototype.includes":"var arr = new Int16Array( [ 1, 2, 3 ] );\nvar bool = arr.includes( 4 )\nbool = arr.includes( 3 )\n","Int16Array.prototype.indexOf":"var arr = new Int16Array( [ 1, 2, 3 ] );\nvar idx = arr.indexOf( 4 )\nidx = arr.indexOf( 3 )\n","Int16Array.prototype.join":"var arr = new Int16Array( [ 1, 2, 3 ] );\narr.join( '|' )\n","Int16Array.prototype.keys":"var arr = new Int16Array( [ 1, 2 ] );\nit = arr.keys();\nit.next().value\nit.next().value\nit.next().done\n","Int16Array.prototype.lastIndexOf":"var arr = new Int16Array( [ 1, 0, 2, 0, 1 ] );\nvar idx = arr.lastIndexOf( 3 )\nidx = arr.lastIndexOf( 0 )\n","Int16Array.prototype.map":"var arr1 = new Int16Array( [ 1, 2, 3 ] );\nfunction fcn( v ) { return v * 2; };\nvar arr2 = arr1.map( fcn )\n","Int16Array.prototype.reduce":"var arr = new Int16Array( [ 1, 2, 3 ] );\nfunction fcn( acc, v ) { return acc + (v*v); };\nvar v = arr.reduce( fcn, 0 )\n","Int16Array.prototype.reduceRight":"var arr = new Int16Array( [ 1, 2, 3 ] );\nfunction fcn( acc, v ) { return acc + (v*v); };\nvar v = arr.reduceRight( fcn, 0 )\n","Int16Array.prototype.reverse":"var arr = new Int16Array( [ 1, 2, 3 ] )\narr.reverse()\n","Int16Array.prototype.set":"var arr = new Int16Array( [ 1, 2, 3 ] );\narr.set( [ 4, 4 ], 1 );\narr[ 1 ]\narr[ 2 ]\n","Int16Array.prototype.slice":"var arr1 = new Int16Array( [ 1, 2, 3 ] );\nvar arr2 = arr1.slice( 1 );\narr2.length\narr2[ 0 ]\narr2[ 1 ]\n","Int16Array.prototype.some":"var arr = new Int16Array( [ 1, 2 ] );\nfunction predicate( v ) { return ( v > 1 ); };\narr.some( predicate )\n","Int16Array.prototype.sort":"var arr = new Int16Array( [ 1, 2, 0, 2, 1 ] );\narr.sort()\n","Int16Array.prototype.subarray":"var arr1 = new Int16Array( [ 1, 2, 3, 4, 5 ] );\nvar arr2 = arr1.subarray( 2 )\n","Int16Array.prototype.toLocaleString":"var arr = new Int16Array( [ 1, 2, 3 ] );\narr.toLocaleString()\n","Int16Array.prototype.toString":"var arr = new Int16Array( [ 1, 2, 3 ] );\narr.toString()\n","Int16Array.prototype.values":"var arr = new Int16Array( [ 1, 2 ] );\nit = arr.values();\nit.next().value\nit.next().value\nit.next().done\n","INT32_MAX":"INT32_MAX\n","INT32_MIN":"INT32_MIN\n","INT32_NUM_BYTES":"INT32_NUM_BYTES\n","Int32Array":"var arr = new Int32Array()\nvar arr = new Int32Array( 5 )\nvar arr1 = new Int16Array( [ 5, 5, 5 ] );\nvar arr2 = new Int32Array( arr1 )\nvar arr1 = [ 5.0, 5.0, 5.0 ];\nvar arr2 = new Int32Array( arr1 )\nvar buf = new ArrayBuffer( 16 );\nvar arr = new Int32Array( buf, 0, 4 )\n","Int32Array.from":"function mapFcn( v ) { return v * 2; };\nvar arr = Int32Array.from( [ 1, 2 ], mapFcn )\n","Int32Array.of":"var arr = Int32Array.of( 1, 2 )\n","Int32Array.BYTES_PER_ELEMENT":"Int32Array.BYTES_PER_ELEMENT\n","Int32Array.name":"Int32Array.name\n","Int32Array.prototype.buffer":"var arr = new Int32Array( 5 );\narr.buffer\n","Int32Array.prototype.byteLength":"var arr = new Int32Array( 5 );\narr.byteLength\n","Int32Array.prototype.byteOffset":"var arr = new Int32Array( 5 );\narr.byteOffset\n","Int32Array.prototype.BYTES_PER_ELEMENT":"var arr = new Int32Array( 5 );\narr.BYTES_PER_ELEMENT\n","Int32Array.prototype.length":"var arr = new Int32Array( 5 );\narr.length\n","Int32Array.prototype.copyWithin":"var arr = new Int32Array( [ 1, 2, 3, 4, 5 ] );\narr.copyWithin( 3, 0, 2 );\narr[ 3 ]\narr[ 4 ]\n","Int32Array.prototype.entries":"var arr = new Int32Array( [ 1, 2 ] );\nit = arr.entries();\nit.next().value\nit.next().value\nit.next().done\n","Int32Array.prototype.every":"var arr = new Int32Array( [ 1, 2 ] );\nfunction predicate( v ) { return ( v <= 1 ); };\narr.every( predicate )\n","Int32Array.prototype.fill":"var arr = new Int32Array( [ 1, 2 ] );\narr.fill( 3 );\narr[ 0 ]\narr[ 1 ]\n","Int32Array.prototype.filter":"var arr1 = new Int32Array( [ 1, 2, 3 ] );\nfunction predicate( v ) { return ( v > 1 ); };\nvar arr2 = arr1.filter( predicate );\narr2.length\n","Int32Array.prototype.find":"var arr = new Int32Array( [ 1, 2, 3 ] );\nfunction predicate( v ) { return ( v > 2 ); };\nvar v = arr.find( predicate )\n","Int32Array.prototype.findIndex":"var arr = new Int32Array( [ 1, 2, 3 ] );\nfunction predicate( v ) { return ( v > 2 ); };\nvar idx = arr.findIndex( predicate )\n","Int32Array.prototype.forEach":"var arr = new Int32Array( [ 3, 2, 1 ] );\nvar str = ' ';\nfunction fcn( v, i ) { str += i + ':' + v + ' '; };\narr.forEach( fcn );\nstr\n","Int32Array.prototype.includes":"var arr = new Int32Array( [ 1, 2, 3 ] );\nvar bool = arr.includes( 4 )\nbool = arr.includes( 3 )\n","Int32Array.prototype.indexOf":"var arr = new Int32Array( [ 1, 2, 3 ] );\nvar idx = arr.indexOf( 4 )\nidx = arr.indexOf( 3 )\n","Int32Array.prototype.join":"var arr = new Int32Array( [ 1, 2, 3 ] );\narr.join( '|' )\n","Int32Array.prototype.keys":"var arr = new Int32Array( [ 1, 2 ] );\nit = arr.keys();\nit.next().value\nit.next().value\nit.next().done\n","Int32Array.prototype.lastIndexOf":"var arr = new Int32Array( [ 1, 0, 2, 0, 1 ] );\nvar idx = arr.lastIndexOf( 3 )\nidx = arr.lastIndexOf( 0 )\n","Int32Array.prototype.map":"var arr1 = new Int32Array( [ 1, 2, 3 ] );\nfunction fcn( v ) { return v * 2; };\nvar arr2 = arr1.map( fcn )\n","Int32Array.prototype.reduce":"var arr = new Int32Array( [ 1, 2, 3 ] );\nfunction fcn( acc, v ) { return acc + (v*v); };\nvar v = arr.reduce( fcn, 0 )\n","Int32Array.prototype.reduceRight":"var arr = new Int32Array( [ 1, 2, 3 ] );\nfunction fcn( acc, v ) { return acc + (v*v); };\nvar v = arr.reduceRight( fcn, 0 )\n","Int32Array.prototype.reverse":"var arr = new Int32Array( [ 1, 2, 3 ] )\narr.reverse()\n","Int32Array.prototype.set":"var arr = new Int32Array( [ 1, 2, 3 ] );\narr.set( [ 4, 4 ], 1 );\narr[ 1 ]\narr[ 2 ]\n","Int32Array.prototype.slice":"var arr1 = new Int32Array( [ 1, 2, 3 ] );\nvar arr2 = arr1.slice( 1 );\narr2.length\narr2[ 0 ]\narr2[ 1 ]\n","Int32Array.prototype.some":"var arr = new Int32Array( [ 1, 2 ] );\nfunction predicate( v ) { return ( v > 1 ); };\narr.some( predicate )\n","Int32Array.prototype.sort":"var arr = new Int32Array( [ 1, 2, 0, 2, 1 ] );\narr.sort()\n","Int32Array.prototype.subarray":"var arr1 = new Int32Array( [ 1, 2, 3, 4, 5 ] );\nvar arr2 = arr1.subarray( 2 )\n","Int32Array.prototype.toLocaleString":"var arr = new Int32Array( [ 1, 2, 3 ] );\narr.toLocaleString()\n","Int32Array.prototype.toString":"var arr = new Int32Array( [ 1, 2, 3 ] );\narr.toString()\n","Int32Array.prototype.values":"var arr = new Int32Array( [ 1, 2 ] );\nit = arr.values();\nit.next().value\nit.next().value\nit.next().done\n","IS_BIG_ENDIAN":"IS_BIG_ENDIAN\n","IS_BROWSER":"IS_BROWSER\n","IS_DARWIN":"IS_DARWIN\n","IS_DOCKER":"IS_DOCKER\n","IS_ELECTRON":"IS_ELECTRON\n","IS_ELECTRON_MAIN":"IS_ELECTRON_MAIN\n","IS_ELECTRON_RENDERER":"IS_ELECTRON_RENDERER\n","IS_LITTLE_ENDIAN":"IS_LITTLE_ENDIAN\n","IS_MOBILE":"IS_MOBILE\n","IS_NODE":"IS_NODE\n","IS_TOUCH_DEVICE":"IS_TOUCH_DEVICE\n","IS_WEB_WORKER":"IS_WEB_WORKER\n","IS_WINDOWS":"IS_WINDOWS\n","isAbsoluteHttpURI":"var bool = isAbsoluteHttpURI( 'http://example.com/' )\nbool = isAbsoluteHttpURI( 'example.com' )\nbool = isAbsoluteHttpURI( 'foo@bar.com' )\n","isAbsolutePath":"var bool = isAbsolutePath( 'C:\\\\foo\\\\bar\\\\baz' )\nbool = isAbsolutePath( '/foo/bar/baz' )\n","isAbsolutePath.posix":"var bool = isAbsolutePath.posix( '/foo/bar/baz' )\nbool = isAbsolutePath.posix( 'foo/bar/baz' )\n","isAbsolutePath.win32":"var bool = isAbsolutePath.win32( 'C:\\\\foo\\\\bar\\\\baz' )\nbool = isAbsolutePath.win32( 'foo\\\\bar\\\\baz' )\n","isAbsoluteURI":"var bool = isAbsoluteURI( 'http://example.com/' )\nbool = isAbsoluteURI( 'example.com' )\nbool = isAbsoluteURI( 'foo@bar.com' )\n","isAccessorArray":"var bool = isAccessorArray( new Complex64Array( 10 ) )\nbool = isAccessorArray( [] )\nbool = isAccessorArray( { 'length': 0 } )\nbool = isAccessorArray( {} )\n","isAccessorProperty":"var obj = { 'boop': true };\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = false;\ndesc.get = function getter() { return 'beep'; };\ndefineProperty( obj, 'beep', desc );\nvar bool = isAccessorProperty( obj, 'boop' )\nbool = isAccessorProperty( obj, 'beep' )\n","isAccessorPropertyIn":"var obj = { 'boop': true };\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = false;\ndesc.get = function getter() { return 'beep'; };\ndefineProperty( obj, 'beep', desc );\nvar bool = isAccessorPropertyIn( obj, 'boop' )\nbool = isAccessorPropertyIn( obj, 'beep' )\n","isAlphagram":"var out = isAlphagram( 'beep' )\nout = isAlphagram( 'zba' )\nout = isAlphagram( '' )\n","isAlphaNumeric":"var bool = isAlphaNumeric( 'abc0123456789' )\nbool = isAlphaNumeric( 'abcdef' )\nbool = isAlphaNumeric( '0xff' )\nbool = isAlphaNumeric( '' )\n","isAnagram":"var str1 = 'I am a weakish speller';\nvar str2 = 'William Shakespeare';\nvar bool = isAnagram( str1, str2 )\nbool = isAnagram( 'bat', 'tabba' )\n","isArguments":"function foo() { return arguments; };\nvar bool = isArguments( foo() )\nbool = isArguments( [] )\n","isArray":"var bool = isArray( [] )\nbool = isArray( {} )\n","isArrayArray":"var bool = isArrayArray( [ [], [] ] )\nbool = isArrayArray( [ {}, {} ] )\nbool = isArrayArray( [] )\n","isArrayBuffer":"var bool = isArrayBuffer( new ArrayBuffer( 10 ) )\nbool = isArrayBuffer( [] )\n","isArrayBufferView":"var bool = isArrayBufferView( new Int8Array() )\nbool = isArrayBufferView( [] )\n","isArrayLength":"var bool = isArrayLength( 5 )\nbool = isArrayLength( 2.0e200 )\nbool = isArrayLength( -3.14 )\nbool = isArrayLength( null )\n","isArrayLike":"var bool = isArrayLike( [] )\nbool = isArrayLike( { 'length': 10 } )\nbool = isArrayLike( 'beep' )\nbool = isArrayLike( null )\n","isArrayLikeObject":"var bool = isArrayLikeObject( [] )\nbool = isArrayLikeObject( { 'length': 10 } )\nbool = isArrayLikeObject( 'beep' )\n","isArrowFunction":"function beep() {};\nvar bool = isArrowFunction( beep )\nbool = isArrowFunction( {} )\n","isASCII":"var str = 'beep boop';\nvar bool = isASCII( str )\nbool = isASCII( fromCodePoint( 130 ) )\n","isBetween":"var bool = isBetween( 3.14, 3.0, 4.0 )\nbool = isBetween( 3.0, 3.0, 4.0 )\nbool = isBetween( 4.0, 3.0, 4.0 )\nbool = isBetween( 3.0, 3.14, 4.0 )\nbool = isBetween( 3.14, 3.14, 4.0, 'open', 'closed' )\nbool = isBetween( 3.14, 3.0, 3.14, 'closed', 'open' )\n","isBetweenArray":"var arr = [ 3.0, 3.14, 4.0 ];\nvar bool = isBetweenArray( arr, 3.0, 4.0 )\nbool = isBetweenArray( arr, 3.14, 4.0 )\nbool = isBetweenArray( arr, 3.0, 3.14 )\nbool = isBetweenArray( arr, 3.0, 4.0, 'open', 'closed' )\nbool = isBetweenArray( arr, 3.0, 4.0, 'closed', 'open' )\n","isBigInt":"var bool = isBigInt( BigInt( '1' ) )\nbool = isBigInt( Object( BigInt( '1' ) ) )\nbool = isBigInt( {} )\nbool = isBigInt( null )\nbool = isBigInt( true )\n","isBigInt64Array":"var bool = isBigInt64Array( new BigInt64Array( 10 ) )\nbool = isBigInt64Array( [] )\n","isBigUint64Array":"var bool = isBigUint64Array( new BigUint64Array( 10 ) )\nbool = isBigUint64Array( [] )\n","isBinaryString":"var bool = isBinaryString( '1000101' )\nbool = isBinaryString( 'beep' )\nbool = isBinaryString( '' )\n","isBlankString":"var bool = isBlankString( '   ' )\nbool = isBlankString( 'beep' )\nbool = isBlankString( null )\n","isBoolean":"var bool = isBoolean( false )\nbool = isBoolean( new Boolean( false ) )\n","isBoolean.isPrimitive":"var bool = isBoolean.isPrimitive( true )\nbool = isBoolean.isPrimitive( false )\nbool = isBoolean.isPrimitive( new Boolean( true ) )\n","isBoolean.isObject":"var bool = isBoolean.isObject( true )\nbool = isBoolean.isObject( new Boolean( false ) )\n","isBooleanArray":"var bool = isBooleanArray( [ true, false, true ] )\nbool = isBooleanArray( [ true, 'abc', false ] )\n","isBooleanArray.primitives":"var bool = isBooleanArray.primitives( [ true, false ] )\nbool = isBooleanArray.primitives( [ false, new Boolean( true ) ] )\n","isBooleanArray.objects":"var bool = isBooleanArray.objects( [ new Boolean( false ), true ] )\nbool = isBooleanArray.objects( [ new Boolean( false ), new Boolean( true ) ] )\n","isBoxedPrimitive":"var bool = isBoxedPrimitive( new Boolean( false ) )\nbool = isBoxedPrimitive( true )\n","isBuffer":"var bool = isBuffer( new Buffer( 'beep' ) )\nbool = isBuffer( new Buffer( [ 1, 2, 3, 4 ] ) )\nbool = isBuffer( {} )\nbool = isBuffer( [] )\n","isCamelcase":"var bool = isCamelcase( 'helloWorld' )\nbool = isCamelcase( 'hello world' )\n","isCapitalized":"var bool = isCapitalized( 'Hello' )\nbool = isCapitalized( 'world' )\n","isCentrosymmetricMatrix":"var buf = [ 2, 1, 1, 2 ];\nvar M = ndarray( 'generic', buf, [ 2, 2 ], [ 2, 1 ], 0, 'row-major' );\nvar bool = isCentrosymmetricMatrix( M )\nbool = isCentrosymmetricMatrix( [ 1, 2, 3, 4 ] )\nbool = isCentrosymmetricMatrix( 3.14 )\nbool = isCentrosymmetricMatrix( {} )\n","isCircular":"var obj = { 'beep': 'boop' };\nobj.self = obj;\nvar bool = isCircular( obj )\nbool = isCircular( {} )\nbool = isCircular( null )\n","isCircularArray":"var arr = [ 1, 2, 3 ];\narr.push( arr );\nvar bool = isCircularArray( arr )\nbool = isCircularArray( [] )\nbool = isCircularArray( null )\n","isCircularPlainObject":"var obj = { 'beep': 'boop' };\nobj.self = obj;\nvar bool = isCircularPlainObject( obj )\nbool = isCircularPlainObject( {} )\nbool = isCircularPlainObject( null )\n","isClass":"var bool = isClass( class Person {} )\nbool = isClass( function Person() {} )\nbool = isClass( {} )\nbool = isClass( null )\nbool = isClass( true )\n","isCollection":"var bool = isCollection( [] )\nbool = isCollection( { 'length': 0 } )\nbool = isCollection( {} )\n","isComplex":"var bool = isComplex( new Complex64( 2.0, 2.0 ) )\nbool = isComplex( new Complex128( 3.0, 1.0 ) )\nbool = isComplex( 3.14 )\nbool = isComplex( {} )\n","isComplex64":"var bool = isComplex64( new Complex64( 2.0, 2.0 ) )\nbool = isComplex64( new Complex128( 3.0, 1.0 ) )\nbool = isComplex64( 3.14 )\nbool = isComplex64( {} )\n","isComplex64Array":"var bool = isComplex64Array( new Complex64Array( 10 ) )\nbool = isComplex64Array( [] )\n","isComplex64MatrixLike":"var M = {};\nM.data = new Complex64Array( [ 0, 0, 0, 0, 0, 0, 0, 0 ] );\nM.ndims = 2;\nM.shape = [ 2, 2 ];\nM.strides = [ 2, 1 ];\nM.offset = 0;\nM.order = 'row-major';\nM.dtype = 'complex64';\nM.length = 4;\nM.flags = {};\nM.get = function get( i, j ) {};\nM.set = function set( i, j ) {};\nvar bool = isComplex64MatrixLike( M )\nbool = isComplex64MatrixLike( [ 1, 2, 3, 4 ] )\nbool = isComplex64MatrixLike( 3.14 )\nbool = isComplex64MatrixLike( {} )\n","isComplex64ndarrayLike":"var M = {};\nM.data = new Complex64Array( [ 0, 0, 0, 0, 0, 0, 0, 0 ] );\nM.ndims = 2;\nM.shape = [ 2, 2 ];\nM.strides = [ 2, 1 ];\nM.offset = 0;\nM.order = 'row-major';\nM.dtype = 'complex64';\nM.length = 4;\nM.flags = {};\nM.get = function get( i, j ) {};\nM.set = function set( i, j ) {};\nvar bool = isComplex64ndarrayLike( M )\nbool = isComplex64ndarrayLike( [ 1, 2, 3, 4 ] )\nbool = isComplex64ndarrayLike( 3.14 )\nbool = isComplex64ndarrayLike( {} )\n","isComplex64VectorLike":"var M = {};\nM.data = new Complex64Array( [ 0, 0, 0, 0, 0, 0, 0, 0 ] );\nM.ndims = 1;\nM.shape = [ 4 ];\nM.strides = [ 1 ];\nM.offset = 0;\nM.order = 'row-major';\nM.dtype = 'complex64';\nM.length = 4;\nM.flags = {};\nM.get = function get( i, j ) {};\nM.set = function set( i, j ) {};\nvar bool = isComplex64VectorLike( M )\nbool = isComplex64VectorLike( [ 1, 2, 3, 4 ] )\nbool = isComplex64VectorLike( 3.14 )\nbool = isComplex64VectorLike( {} )\n","isComplex128":"var bool = isComplex128( new Complex128( 3.0, 1.0 ) )\nbool = isComplex128( new Complex64( 2.0, 2.0 ) )\nbool = isComplex128( 3.14 )\nbool = isComplex128( {} )\n","isComplex128Array":"var bool = isComplex128Array( new Complex128Array( 10 ) )\nbool = isComplex128Array( [] )\n","isComplex128MatrixLike":"var M = {};\nM.data = new Complex128Array( [ 0, 0, 0, 0, 0, 0, 0, 0 ] );\nM.ndims = 2;\nM.shape = [ 2, 2 ];\nM.strides = [ 2, 1 ];\nM.offset = 0;\nM.order = 'row-major';\nM.dtype = 'complex128';\nM.length = 4;\nM.flags = {};\nM.get = function get( i, j ) {};\nM.set = function set( i, j ) {};\nvar bool = isComplex128MatrixLike( M )\nbool = isComplex128MatrixLike( [ 1, 2, 3, 4 ] )\nbool = isComplex128MatrixLike( 3.14 )\nbool = isComplex128MatrixLike( {} )\n","isComplex128ndarrayLike":"var M = {};\nM.data = new Complex128Array( [ 0, 0, 0, 0, 0, 0, 0, 0 ] );\nM.ndims = 2;\nM.shape = [ 2, 2 ];\nM.strides = [ 2, 1 ];\nM.offset = 0;\nM.order = 'row-major';\nM.dtype = 'complex128';\nM.length = 4;\nM.flags = {};\nM.get = function get( i, j ) {};\nM.set = function set( i, j ) {};\nvar bool = isComplex128ndarrayLike( M )\nbool = isComplex128ndarrayLike( [ 1, 2, 3, 4 ] )\nbool = isComplex128ndarrayLike( 3.14 )\nbool = isComplex128ndarrayLike( {} )\n","isComplex128VectorLike":"var M = {};\nM.data = new Complex128Array( [ 0, 0, 0, 0, 0, 0, 0, 0 ] );\nM.ndims = 1;\nM.shape = [ 4 ];\nM.strides = [ 1 ];\nM.offset = 0;\nM.order = 'row-major';\nM.dtype = 'complex128';\nM.length = 4;\nM.flags = {};\nM.get = function get( i, j ) {};\nM.set = function set( i, j ) {};\nvar bool = isComplex128VectorLike( M )\nbool = isComplex128VectorLike( [ 1, 2, 3, 4 ] )\nbool = isComplex128VectorLike( 3.14 )\nbool = isComplex128VectorLike( {} )\n","isComplexLike":"var bool = isComplexLike( new Complex64( 2.0, 2.0 ) )\nbool = isComplexLike( new Complex128( 3.0, 1.0 ) )\nbool = isComplexLike( 3.14 )\nbool = isComplexLike( {} )\n","isComplexTypedArray":"var bool = isComplexTypedArray( new Complex64Array( 10 ) )\n","isComplexTypedArrayLike":"var bool = isComplexTypedArrayLike( new Complex128Array() )\nbool = isComplexTypedArrayLike({\n'length': 10,\n'byteOffset': 0,\n'byteLength': 10,\n'BYTES_PER_ELEMENT': 4,\n'get': function get() {},\n'set': function set() {}\n })\n","isComposite":"var bool = isComposite( 4.0 )\nbool = isComposite( new Number( 4.0 ) )\nbool = isComposite( 3.14 )\nbool = isComposite( -4.0 )\nbool = isComposite( null )\n","isComposite.isPrimitive":"var bool = isComposite.isPrimitive( 4.0 )\nbool = isComposite.isPrimitive( new Number( 4.0 ) )\n","isComposite.isObject":"var bool = isComposite.isObject( 4.0 )\nbool = isComposite.isObject( new Number( 4.0 ) )\n","isConfigurableProperty":"var obj = { 'boop': true };\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = true;\ndesc.writable = true;\ndesc.value = true;\ndefineProperty( obj, 'beep', desc );\nvar bool = isConfigurableProperty( obj, 'boop' )\nbool = isConfigurableProperty( obj, 'beep' )\n","isConfigurablePropertyIn":"var obj = { 'boop': true };\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = true;\ndesc.writable = true;\ndesc.value = true;\ndefineProperty( obj, 'beep', desc );\nvar bool = isConfigurablePropertyIn( obj, 'boop' )\nbool = isConfigurablePropertyIn( obj, 'beep' )\n","isConstantcase":"var bool = isConstantcase( 'BEEP_BOOP' )\nbool = isConstantcase( 'BEEP and BOOP' )\n","isCubeNumber":"var bool = isCubeNumber( 8.0 )\nbool = isCubeNumber( new Number( 8.0 ) )\nbool = isCubeNumber( 3.14 )\nbool = isCubeNumber( -5.0 )\nbool = isCubeNumber( null )\n","isCubeNumber.isPrimitive":"var bool = isCubeNumber.isPrimitive( 8.0 )\nbool = isCubeNumber.isPrimitive( new Number( 8.0 ) )\n","isCubeNumber.isObject":"var bool = isCubeNumber.isObject( 8.0 )\nbool = isCubeNumber.isObject( new Number( 8.0 ) )\n","isCurrentYear":"var bool = isCurrentYear( new Date() )\nbool = isCurrentYear( currentYear() )\nbool = isCurrentYear( 2021 )\nbool = isCurrentYear( null )\n","isDataProperty":"var obj = { 'boop': true };\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = false;\ndesc.get = function getter() { return 'beep'; };\ndefineProperty( obj, 'beep', desc );\nvar bool = isDataProperty( obj, 'boop' )\nbool = isDataProperty( obj, 'beep' )\n","isDataPropertyIn":"var obj = { 'boop': true };\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = false;\ndesc.get = function getter() { return 'beep'; };\ndefineProperty( obj, 'beep', desc );\nvar bool = isDataPropertyIn( obj, 'boop' )\nbool = isDataPropertyIn( obj, 'beep' )\n","isDataView":"var buf = new ArrayBuffer( 10 );\nvar bool = isDataView( new DataView( buf ) )\nbool = isDataView( [] )\n","isDateObject":"var bool = isDateObject( new Date() )\nbool = isDateObject( '2017-01-01' )\n","isDateObjectArray":"var bool = isDateObjectArray( [ new Date(), new Date() ] )\nbool = isDateObjectArray( [ {}, {} ] )\nbool = isDateObjectArray( [ new Date(), '2011-01-01' ] )\nbool = isDateObjectArray( [] )\n","isDigitString":"var bool = isDigitString( '0123456789' )\nbool = isDigitString( 'abcdef' )\nbool = isDigitString( '0xff' )\nbool = isDigitString( '' )\n","isDomainName":"var bool = isDomainName( 'example.com' )\nbool = isDomainName( 'foo@bar.com' )\n","isDurationString":"var bool = isDurationString( '1d' )\nbool = isDurationString( '1h' )\nbool = isDurationString( 'beep' )\n","isEmailAddress":"var bool = isEmailAddress( 'beep@boop.com' )\nbool = isEmailAddress( 'beep' )\nbool = isEmailAddress( null )\n","isEmptyArray":"var bool = isEmptyArray( [] )\nbool = isEmptyArray( [ 1, 2, 3 ] )\nbool = isEmptyArray( {} )\n","isEmptyArrayLikeObject":"var bool = isEmptyArrayLikeObject( [] )\nbool = isEmptyArrayLikeObject( { 'length': 0 } )\nbool = isEmptyArrayLikeObject( '' )\n","isEmptyCollection":"var bool = isEmptyCollection( [] )\nbool = isEmptyCollection( { 'length': 0 } )\nbool = isEmptyCollection( [ 1, 2, 3 ] )\nbool = isEmptyCollection( {} )\n","isEmptyObject":"var bool = isEmptyObject( {} )\nbool = isEmptyObject( { 'beep': 'boop' } )\nbool = isEmptyObject( [] )\n","isEmptyString":"var bool = isEmptyString( '' )\nbool = isEmptyString( new String( '' ) )\nbool = isEmptyString( 'beep' )\nbool = isEmptyString( [] )\n","isEmptyString.isPrimitive":"var bool = isEmptyString.isPrimitive( '' )\nbool = isEmptyString.isPrimitive( new String( '' ) )\n","isEmptyString.isObject":"var bool = isEmptyString.isObject( new String( '' ) )\nbool = isEmptyString.isObject( '' )\n","isEnumerableProperty":"var beep = { 'boop': true };\nvar bool = isEnumerableProperty( beep, 'boop' )\nbool = isEnumerableProperty( beep, 'hasOwnProperty' )\n","isEnumerablePropertyIn":"var obj = { 'boop': true };\nvar desc = {};\ndesc.configurable = true;\ndesc.enumerable = false;\ndesc.writable = true;\ndesc.value = true;\ndefineProperty( obj, 'beep', desc );\nvar bool = isEnumerablePropertyIn( obj, 'boop' )\nbool = isEnumerablePropertyIn( obj, 'beep' )\n","isError":"var bool = isError( new Error( 'beep' ) )\nbool = isError( {} )\n","isEvalError":"var bool = isEvalError( new EvalError( 'beep' ) )\nbool = isEvalError( {} )\n","isEven":"var bool = isEven( 4.0 )\nbool = isEven( new Number( 4.0 ) )\nbool = isEven( 3.0 )\nbool = isEven( -3.14 )\nbool = isEven( null )\n","isEven.isPrimitive":"var bool = isEven.isPrimitive( -4.0 )\nbool = isEven.isPrimitive( new Number( -4.0 ) )\n","isEven.isObject":"var bool = isEven.isObject( 4.0 )\nbool = isEven.isObject( new Number( 4.0 ) )\n","isFalsy":"var bool = isFalsy( false )\nbool = isFalsy( '' )\nbool = isFalsy( 0 )\nbool = isFalsy( null )\nbool = isFalsy( void 0 )\nbool = isFalsy( NaN )\nbool = isFalsy( {} )\nbool = isFalsy( [] )\n","isFalsyArray":"var bool = isFalsyArray( [ null, '' ] )\nbool = isFalsyArray( [ {}, [] ] )\nbool = isFalsyArray( [] )\n","isFinite":"var bool = isFinite( 5.0 )\nbool = isFinite( new Number( 5.0 ) )\nbool = isFinite( 1.0/0.0 )\nbool = isFinite( null )\n","isFinite.isPrimitive":"var bool = isFinite.isPrimitive( -3.0 )\nbool = isFinite.isPrimitive( new Number( -3.0 ) )\n","isFinite.isObject":"var bool = isFinite.isObject( 3.0 )\nbool = isFinite.isObject( new Number( 3.0 ) )\n","isFiniteArray":"var bool = isFiniteArray( [ -3.0, new Number(0.0), 2.0 ] )\nbool = isFiniteArray( [ -3.0, 1.0/0.0 ] )\n","isFiniteArray.primitives":"var bool = isFiniteArray.primitives( [ -1.0, 10.0 ] )\nbool = isFiniteArray.primitives( [ -1.0, 0.0, 5.0 ] )\nbool = isFiniteArray.primitives( [ -3.0, new Number(-1.0) ] )\n","isFiniteArray.objects":"var bool = isFiniteArray.objects( [ new Number(1.0), new Number(3.0) ] )\nbool = isFiniteArray.objects( [ -1.0, 0.0, 3.0 ] )\nbool = isFiniteArray.objects( [ 3.0, new Number(-1.0) ] )\n","isFloat32Array":"var bool = isFloat32Array( new Float32Array( 10 ) )\nbool = isFloat32Array( [] )\n","isFloat32MatrixLike":"var M = {};\nM.data = new Float32Array( [ 0, 0, 0, 0 ] );\nM.ndims = 2;\nM.shape = [ 2, 2 ];\nM.strides = [ 2, 1 ];\nM.offset = 0;\nM.order = 'row-major';\nM.dtype = 'float32';\nM.length = 4;\nM.flags = {};\nM.get = function get( i, j ) {};\nM.set = function set( i, j ) {};\nvar bool = isFloat32MatrixLike( M )\nbool = isFloat32MatrixLike( [ 1, 2, 3, 4 ] )\nbool = isFloat32MatrixLike( 3.14 )\nbool = isFloat32MatrixLike( {} )\n","isFloat32ndarrayLike":"var M = {};\nM.data = new Float32Array( [ 0, 0, 0, 0 ] );\nM.ndims = 2;\nM.shape = [ 2, 2 ];\nM.strides = [ 2, 1 ];\nM.offset = 0;\nM.order = 'row-major';\nM.dtype = 'float32';\nM.length = 4;\nM.flags = {};\nM.get = function get( i, j ) {};\nM.set = function set( i, j ) {};\nvar bool = isFloat32ndarrayLike( M )\nbool = isFloat32ndarrayLike( [ 1, 2, 3, 4 ] )\nbool = isFloat32ndarrayLike( 3.14 )\nbool = isFloat32ndarrayLike( {} )\n","isFloat32VectorLike":"var M = {};\nM.data = new Float32Array( [ 0, 0, 0, 0 ] );\nM.ndims = 1;\nM.shape = [ 4 ];\nM.strides = [ 1 ];\nM.offset = 0;\nM.order = 'row-major';\nM.dtype = 'float32';\nM.length = 4;\nM.flags = {};\nM.get = function get( i, j ) {};\nM.set = function set( i, j ) {};\nvar bool = isFloat32VectorLike( M )\nbool = isFloat32VectorLike( [ 1, 2, 3, 4 ] )\nbool = isFloat32VectorLike( 3.14 )\nbool = isFloat32VectorLike( {} )\n","isFloat64Array":"var bool = isFloat64Array( new Float64Array( 10 ) )\nbool = isFloat64Array( [] )\n","isFloat64MatrixLike":"var M = {};\nM.data = new Float64Array( [ 0, 0, 0, 0 ] );\nM.ndims = 2;\nM.shape = [ 2, 2 ];\nM.strides = [ 2, 1 ];\nM.offset = 0;\nM.order = 'row-major';\nM.dtype = 'float64';\nM.length = 4;\nM.flags = {};\nM.get = function get( i, j ) {};\nM.set = function set( i, j ) {};\nvar bool = isFloat64MatrixLike( M )\nbool = isFloat64MatrixLike( [ 1, 2, 3, 4 ] )\nbool = isFloat64MatrixLike( 3.14 )\nbool = isFloat64MatrixLike( {} )\n","isFloat64ndarrayLike":"var M = {};\nM.data = new Float64Array( [ 0, 0, 0, 0 ] );\nM.ndims = 2;\nM.shape = [ 2, 2 ];\nM.strides = [ 2, 1 ];\nM.offset = 0;\nM.order = 'row-major';\nM.dtype = 'float64';\nM.length = 4;\nM.flags = {};\nM.get = function get( i, j ) {};\nM.set = function set( i, j ) {};\nvar bool = isFloat64ndarrayLike( M )\nbool = isFloat64ndarrayLike( [ 1, 2, 3, 4 ] )\nbool = isFloat64ndarrayLike( 3.14 )\nbool = isFloat64ndarrayLike( {} )\n","isFloat64VectorLike":"var M = {};\nM.data = new Float64Array( [ 0, 0, 0, 0 ] );\nM.ndims = 1;\nM.shape = [ 4 ];\nM.strides = [ 1 ];\nM.offset = 0;\nM.order = 'row-major';\nM.dtype = 'float64';\nM.length = 4;\nM.flags = {};\nM.get = function get( i, j ) {};\nM.set = function set( i, j ) {};\nvar bool = isFloat64VectorLike( M )\nbool = isFloat64VectorLike( [ 1, 2, 3, 4 ] )\nbool = isFloat64VectorLike( 3.14 )\nbool = isFloat64VectorLike( {} )\n","isFunction":"function beep() {};\nvar bool = isFunction( beep )\nbool = isFunction( {} )\n","isFunctionArray":"function beep() {};\nfunction boop() {};\nvar bool = isFunctionArray( [ beep, boop ] )\nbool = isFunctionArray( [ {}, beep ] )\nbool = isFunctionArray( [] )\n","isGeneratorObject":"function* generateID() {\n var idx = 0;\n while ( idx < idx+1 ) {\n     yield idx;\n     idx += 1;\n }\n };\nvar bool = isGeneratorObject( generateID() )\nbool = isGeneratorObject( generateID )\nbool = isGeneratorObject( {} )\nbool = isGeneratorObject( null )\n","isGeneratorObjectLike":"var obj = {\n 'next': function noop() {},\n 'return': function noop() {},\n 'throw': function noop() {}\n };\nvar bool = isGeneratorObjectLike( obj )\nbool = isGeneratorObjectLike( {} )\nbool = isGeneratorObjectLike( null )\n","isgzipBuffer":"var buf = new Uint8Array( 20 );\nbuf[ 0 ] = 31;  // 0x1f => magic number\nbuf[ 1 ] = 139; // 0x8b\nbuf[ 2 ] = 8;   // 0x08 => compression method\nvar bool = isgzipBuffer( buf )\nbool = isgzipBuffer( [] )\n","isHexString":"var bool = isHexString( '0123456789abcdefABCDEF' )\nbool = isHexString( '0xffffff' )\nbool = isHexString( 'x' )\nbool = isHexString( '' )\n","isInfinite":"var bool = isInfinite( 1.0/0.0 )\nbool = isInfinite( new Number( -1.0/0.0 ) )\nbool = isInfinite( 5.0 )\nbool = isInfinite( '1.0/0.0' )\n","isInfinite.isPrimitive":"var bool = isInfinite.isPrimitive( -1.0/0.0 )\nbool = isInfinite.isPrimitive( new Number( -1.0/0.0 ) )\n","isInfinite.isObject":"var bool = isInfinite.isObject( 1.0/0.0 )\nbool = isInfinite.isObject( new Number( 1.0/0.0 ) )\n","isInheritedProperty":"var beep = { 'boop': true };\nvar bool = isInheritedProperty( beep, 'boop' )\nbool = isInheritedProperty( beep, 'toString' )\nbool = isInheritedProperty( beep, 'bop' )\n","isInt8Array":"var bool = isInt8Array( new Int8Array( 10 ) )\nbool = isInt8Array( [] )\n","isInt16Array":"var bool = isInt16Array( new Int16Array( 10 ) )\nbool = isInt16Array( [] )\n","isInt32Array":"var bool = isInt32Array( new Int32Array( 10 ) )\nbool = isInt32Array( [] )\n","isInteger":"var bool = isInteger( 5.0 )\nbool = isInteger( new Number( 5.0 ) )\nbool = isInteger( -3.14 )\nbool = isInteger( null )\n","isInteger.isPrimitive":"var bool = isInteger.isPrimitive( -3.0 )\nbool = isInteger.isPrimitive( new Number( -3.0 ) )\n","isInteger.isObject":"var bool = isInteger.isObject( 3.0 )\nbool = isInteger.isObject( new Number( 3.0 ) )\n","isIntegerArray":"var bool = isIntegerArray( [ -3.0, new Number(0.0), 2.0 ] )\nbool = isIntegerArray( [ -3.0, '3.0' ] )\n","isIntegerArray.primitives":"var bool = isIntegerArray.primitives( [ -1.0, 10.0 ] )\nbool = isIntegerArray.primitives( [ -1.0, 0.0, 5.0 ] )\nbool = isIntegerArray.primitives( [ -3.0, new Number(-1.0) ] )\n","isIntegerArray.objects":"var bool = isIntegerArray.objects( [ new Number(1.0), new Number(3.0) ] )\nbool = isIntegerArray.objects( [ -1.0, 0.0, 3.0 ] )\nbool = isIntegerArray.objects( [ 3.0, new Number(-1.0) ] )\n","isIterableLike":"var bool = isIterableLike( [ 1, 2, 3 ] )\nbool = isIterableLike( {} )\nbool = isIterableLike( null )\n","isIteratorLike":"var obj = {\n 'next': function noop() {}\n };\nvar bool = isIteratorLike( obj )\nbool = isIteratorLike( {} )\nbool = isIteratorLike( null )\n","isJSON":"var bool = isJSON( '{\"a\":5}' )\nbool = isJSON( '{a\":5}' )\n","isKebabcase":"var bool = isKebabcase( 'beep-boop' )\nbool = isKebabcase( 'BEEP_BOOP' )\n","isLeapYear":"var bool = isLeapYear( new Date() )\nbool = isLeapYear( 1996 )\nbool = isLeapYear( 2001 )\n","isLocalhost":"var bool = isLocalhost( 'localhost' )\nbool = isLocalhost( '127.0.0.1' )\nbool = isLocalhost( 'stdlib.io' )\n","isLowercase":"var bool = isLowercase( 'hello' )\nbool = isLowercase( 'World' )\n","isMatrixLike":"var M = {};\nM.data = [ 0, 0, 0, 0 ];\nM.ndims = 2;\nM.shape = [ 2, 2 ];\nM.strides = [ 2, 1 ];\nM.offset = 0;\nM.order = 'row-major';\nM.dtype = 'generic';\nM.length = 4;\nM.flags = {};\nM.get = function get( i, j ) {};\nM.set = function set( i, j ) {};\nvar bool = isMatrixLike( M )\nbool = isMatrixLike( [ 1, 2, 3, 4 ] )\nbool = isMatrixLike( 3.14 )\nbool = isMatrixLike( {} )\n","isMethod":"var beep = { 'boop': function beep() { return 'beep'; } };\nvar bool = isMethod( beep, 'boop' )\nbool = isMethod( beep, 'toString' )\n","isMethodIn":"var beep = { 'boop': true };\nvar bool = isMethodIn( beep, 'toString' )\nbool = isMethodIn( beep, 'boop' )\nbool = isMethodIn( beep, 'bop' )\n","isMultiSlice":"var bool = isMultiSlice( new MultiSlice() )\nbool = isMultiSlice( 3.14 )\nbool = isMultiSlice( {} )\n","isNamedTypedTupleLike":"var Point = namedtypedtuple( [ 'x', 'y' ] );\nvar p = new Point();\nvar bool = isNamedTypedTupleLike( p )\nbool = isNamedTypedTupleLike( [ 1, 2, 3, 4 ] )\nbool = isNamedTypedTupleLike( 3.14 )\nbool = isNamedTypedTupleLike( {} )\n","isnan":"var bool = isnan( NaN )\nbool = isnan( new Number( NaN ) )\nbool = isnan( 3.14 )\nbool = isnan( null )\n","isnan.isPrimitive":"var bool = isnan.isPrimitive( NaN )\nbool = isnan.isPrimitive( 3.14 )\nbool = isnan.isPrimitive( new Number( NaN ) )\n","isnan.isObject":"var bool = isnan.isObject( NaN )\nbool = isnan.isObject( new Number( NaN ) )\n","isNaNArray":"var bool = isNaNArray( [ NaN, NaN, NaN ] )\nbool = isNaNArray( [ NaN, 2 ] )\n","isNaNArray.primitives":"var bool = isNaNArray.primitives( [ NaN, new Number( NaN ) ] )\nbool = isNaNArray.primitives( [ NaN, NaN, NaN ] )\n","isNaNArray.objects":"var bool = isNaNArray.objects( [ new Number( NaN ), new Number( NaN ) ] )\nbool = isNaNArray.objects( [ NaN, new Number( NaN ), new Number( NaN ) ] )\nbool = isNaNArray.objects( [ NaN, NaN, NaN ] )\n","isNativeFunction":"var bool = isNativeFunction( Date )\nfunction beep() {};\nbool = isNativeFunction( beep )\nbool = isNativeFunction( {} )\n","isndarrayLike":"var M = {};\nM.data = [ 0, 0, 0, 0 ];\nM.ndims = 2;\nM.shape = [ 2, 2 ];\nM.strides = [ 2, 1 ];\nM.offset = 0;\nM.order = 'row-major';\nM.dtype = 'generic';\nM.length = 4;\nM.flags = {};\nM.get = function get( i, j ) {};\nM.set = function set( i, j ) {};\nvar bool = isndarrayLike( M )\nbool = isndarrayLike( [ 1, 2, 3, 4 ] )\nbool = isndarrayLike( 3.14 )\nbool = isndarrayLike( {} )\n","isNegativeFinite":"var bool = isNegativeFinite( -5.0 )\nbool = isNegativeFinite( new Number( -5.0 ) )\nbool = isNegativeFinite( -3.14 )\nbool = isNegativeFinite( 5.0 )\nbool = isNegativeFinite( null )\nbool = isNegativeFinite( -1.0/0.0 )\nbool = isNegativeFinite( new Number( -1.0/0.0 ) )\n","isNegativeFinite.isPrimitive":"var bool = isNegativeFinite.isPrimitive( -3.0 )\nbool = isNegativeFinite.isPrimitive( new Number( -3.0 ) )\nvar bool = isNegativeFinite.isPrimitive( -1.0/0.0 )\nbool = isNegativeFinite.isPrimitive( new Number( -1.0/0.0 ) )\n","isNegativeFinite.isObject":"var bool = isNegativeFinite.isObject( -3.0 )\nbool = isNegativeFinite.isObject( new Number( -3.0 ) )\nbool = isNegativeFinite.isObject( -1.0/0.0 )\nbool = isNegativeFinite.isObject( new Number( -1.0/0.0 ) )\n","isNegativeInteger":"var bool = isNegativeInteger( -5.0 )\nbool = isNegativeInteger( new Number( -5.0 ) )\nbool = isNegativeInteger( 5.0 )\nbool = isNegativeInteger( -3.14 )\nbool = isNegativeInteger( null )\n","isNegativeInteger.isPrimitive":"var bool = isNegativeInteger.isPrimitive( -3.0 )\nbool = isNegativeInteger.isPrimitive( new Number( -3.0 ) )\n","isNegativeInteger.isObject":"var bool = isNegativeInteger.isObject( -3.0 )\nbool = isNegativeInteger.isObject( new Number( -3.0 ) )\n","isNegativeIntegerArray":"var bool = isNegativeIntegerArray( [ -3.0, new Number(-3.0) ] )\nbool = isNegativeIntegerArray( [ -3.0, '-3.0' ] )\n","isNegativeIntegerArray.primitives":"var bool = isNegativeIntegerArray.primitives( [ -1.0, -10.0 ] )\nbool = isNegativeIntegerArray.primitives( [ -1.0, 0.0, -10.0 ] )\nbool = isNegativeIntegerArray.primitives( [ -3.0, new Number(-1.0) ] )\n","isNegativeIntegerArray.objects":"var bool = isNegativeIntegerArray.objects( [ new Number(-1.0), new Number(-10.0) ] )\nbool = isNegativeIntegerArray.objects( [ -1.0, 0.0, -10.0 ] )\nbool = isNegativeIntegerArray.objects( [ -3.0, new Number(-1.0) ] )\n","isNegativeNumber":"var bool = isNegativeNumber( -5.0 )\nbool = isNegativeNumber( new Number( -5.0 ) )\nbool = isNegativeNumber( -3.14 )\nbool = isNegativeNumber( 5.0 )\nbool = isNegativeNumber( null )\n","isNegativeNumber.isPrimitive":"var bool = isNegativeNumber.isPrimitive( -3.0 )\nbool = isNegativeNumber.isPrimitive( new Number( -3.0 ) )\n","isNegativeNumber.isObject":"var bool = isNegativeNumber.isObject( -3.0 )\nbool = isNegativeNumber.isObject( new Number( -3.0 ) )\n","isNegativeNumberArray":"var bool = isNegativeNumberArray( [ -3.0, new Number(-3.0) ] )\nbool = isNegativeNumberArray( [ -3.0, '-3.0' ] )\n","isNegativeNumberArray.primitives":"var bool = isNegativeNumberArray.primitives( [ -1.0, -10.0 ] )\nbool = isNegativeNumberArray.primitives( [ -1.0, 0.0, -10.0 ] )\nbool = isNegativeNumberArray.primitives( [ -3.0, new Number(-1.0) ] )\n","isNegativeNumberArray.objects":"var bool = isNegativeNumberArray.objects( [ new Number(-1.0), new Number(-10.0) ] )\nbool = isNegativeNumberArray.objects( [ -1.0, 0.0, -10.0 ] )\nbool = isNegativeNumberArray.objects( [ -3.0, new Number(-1.0) ] )\n","isNegativeZero":"var bool = isNegativeZero( -0.0 )\nbool = isNegativeZero( new Number( -0.0 ) )\nbool = isNegativeZero( -3.14 )\nbool = isNegativeZero( 0.0 )\nbool = isNegativeZero( null )\n","isNegativeZero.isPrimitive":"var bool = isNegativeZero.isPrimitive( -0.0 )\nbool = isNegativeZero.isPrimitive( new Number( -0.0 ) )\n","isNegativeZero.isObject":"var bool = isNegativeZero.isObject( -0.0 )\nbool = isNegativeZero.isObject( new Number( -0.0 ) )\n","isNodeBuiltin":"var bool = isNodeBuiltin( 'cluster' )\nbool = isNodeBuiltin( 'crypto' )\nbool = isNodeBuiltin( 'fs-extra' )\nbool = isNodeBuiltin( '' )\n","isNodeDuplexStreamLike":"var Stream = require( 'stream' ).Duplex;\ns = new Stream();\nvar bool = isNodeDuplexStreamLike( s )\nbool = isNodeDuplexStreamLike( {} )\n","isNodeReadableStreamLike":"var Stream = require( 'stream' ).Readable;\ns = new Stream();\nvar bool = isNodeReadableStreamLike( s )\nbool = isNodeReadableStreamLike( {} )\n","isNodeREPL":"var bool = isNodeREPL()\n","isNodeStreamLike":"var Stream = require( 'stream' ).Stream;\ns = new Stream();\nvar bool = isNodeStreamLike( s )\nbool = isNodeStreamLike( {} )\n","isNodeTransformStreamLike":"var Stream = require( 'stream' ).Transform;\ns = new Stream();\nvar bool = isNodeTransformStreamLike( s )\nbool = isNodeTransformStreamLike( {} )\n","isNodeWritableStreamLike":"var Stream = require( 'stream' ).Writable;\ns = new Stream();\nvar bool = isNodeWritableStreamLike( s )\nbool = isNodeWritableStreamLike( {} )\n","isNonConfigurableProperty":"var obj = { 'boop': true };\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = true;\ndesc.writable = true;\ndesc.value = 'beep';\ndefineProperty( obj, 'beep', desc );\nvar bool = isNonConfigurableProperty( obj, 'boop' )\nbool = isNonConfigurableProperty( obj, 'beep' )\n","isNonConfigurablePropertyIn":"var obj = { 'boop': true };\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = true;\ndesc.writable = true;\ndesc.value = true;\ndefineProperty( obj, 'beep', desc );\nvar bool = isNonConfigurablePropertyIn( obj, 'boop' )\nbool = isNonConfigurablePropertyIn( obj, 'beep' )\n","isNonEnumerableProperty":"var obj = { 'boop': true };\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = false;\ndesc.writable = true;\ndesc.value = 'beep';\ndefineProperty( obj, 'beep', desc );\nvar bool = isNonEnumerableProperty( obj, 'boop' )\nbool = isNonEnumerableProperty( obj, 'beep' )\n","isNonEnumerablePropertyIn":"var obj = { 'boop': true };\nvar desc = {};\ndesc.configurable = true;\ndesc.enumerable = false;\ndesc.writable = true;\ndesc.value = true;\ndefineProperty( obj, 'beep', desc );\nvar bool = isNonEnumerablePropertyIn( obj, 'boop' )\nbool = isNonEnumerablePropertyIn( obj, 'beep' )\n","isNonNegativeFinite":"var bool = isNonNegativeFinite( 5.0 )\nbool = isNonNegativeFinite( new Number( 5.0 ) )\nbool = isNonNegativeFinite( 3.14 )\nbool = isNonNegativeFinite( -5.0 )\nbool = isNonNegativeFinite( null )\nbool = isNonNegativeFinite( PINF )\n","isNonNegativeFinite.isPrimitive":"var bool = isNonNegativeFinite.isPrimitive( 3.0 )\nbool = isNonNegativeFinite.isPrimitive( new Number( 3.0 ) )\n","isNonNegativeFinite.isObject":"var bool = isNonNegativeFinite.isObject( 3.0 )\nbool = isNonNegativeFinite.isObject( new Number( 3.0 ) )\n","isNonNegativeInteger":"var bool = isNonNegativeInteger( 5.0 )\nbool = isNonNegativeInteger( new Number( 5.0 ) )\nbool = isNonNegativeInteger( 3.14 )\nbool = isNonNegativeInteger( -5.0 )\nbool = isNonNegativeInteger( null )\n","isNonNegativeInteger.isPrimitive":"var bool = isNonNegativeInteger.isPrimitive( 3.0 )\nbool = isNonNegativeInteger.isPrimitive( new Number( 3.0 ) )\n","isNonNegativeInteger.isObject":"var bool = isNonNegativeInteger.isObject( 3.0 )\nbool = isNonNegativeInteger.isObject( new Number( 3.0 ) )\n","isNonNegativeIntegerArray":"var bool = isNonNegativeIntegerArray( [ 3.0, new Number(3.0) ] )\nbool = isNonNegativeIntegerArray( [ 3.0, '3.0' ] )\n","isNonNegativeIntegerArray.primitives":"var bool = isNonNegativeIntegerArray.primitives( [ 1.0, 0.0, 10.0 ] )\nbool = isNonNegativeIntegerArray.primitives( [ 3.0, new Number(1.0) ] )\n","isNonNegativeIntegerArray.objects":"var bool = isNonNegativeIntegerArray.objects( [ new Number(1.0), new Number(10.0) ] )\nbool = isNonNegativeIntegerArray.objects( [ 1.0, 0.0, 10.0 ] )\nbool = isNonNegativeIntegerArray.objects( [ 3.0, new Number(1.0) ] )\n","isNonNegativeNumber":"var bool = isNonNegativeNumber( 5.0 )\nbool = isNonNegativeNumber( new Number( 5.0 ) )\nbool = isNonNegativeNumber( 3.14 )\nbool = isNonNegativeNumber( -5.0 )\nbool = isNonNegativeNumber( null )\n","isNonNegativeNumber.isPrimitive":"var bool = isNonNegativeNumber.isPrimitive( 3.0 )\nbool = isNonNegativeNumber.isPrimitive( new Number( 3.0 ) )\n","isNonNegativeNumber.isObject":"var bool = isNonNegativeNumber.isObject( 3.0 )\nbool = isNonNegativeNumber.isObject( new Number( 3.0 ) )\n","isNonNegativeNumberArray":"var bool = isNonNegativeNumberArray( [ 3.0, new Number(3.0) ] )\nbool = isNonNegativeNumberArray( [ 3.0, '3.0' ] )\n","isNonNegativeNumberArray.primitives":"var bool = isNonNegativeNumberArray.primitives( [ 1.0, 0.0, 10.0 ] )\nbool = isNonNegativeNumberArray.primitives( [ 3.0, new Number(1.0) ] )\n","isNonNegativeNumberArray.objects":"var bool = isNonNegativeNumberArray.objects( [ new Number(1.0), new Number(10.0) ] )\nbool = isNonNegativeNumberArray.objects( [ 1.0, 0.0, 10.0 ] )\nbool = isNonNegativeNumberArray.objects( [ 3.0, new Number(1.0) ] )\n","isNonPositiveFinite":"var bool = isNonPositiveFinite( -5.0 )\nbool = isNonPositiveFinite( new Number( -5.0 ) )\nbool = isNonPositiveFinite( -3.14 )\nbool = isNonPositiveFinite( 5.0 )\nbool = isNonPositiveFinite( null )\n","isNonPositiveFinite.isPrimitive":"var bool = isNonPositiveFinite.isPrimitive( -3.0 )\nbool = isNonPositiveFinite.isPrimitive( new Number( -3.0 ) )\n","isNonPositiveFinite.isObject":"var bool = isNonPositiveFinite.isObject( -3.0 )\nbool = isNonPositiveFinite.isObject( new Number( -3.0 ) )\n","isNonPositiveInteger":"var bool = isNonPositiveInteger( -5.0 )\nbool = isNonPositiveInteger( new Number( -5.0 ) )\nbool = isNonPositiveInteger( 5.0 )\nbool = isNonPositiveInteger( -3.14 )\nbool = isNonPositiveInteger( null )\n","isNonPositiveInteger.isPrimitive":"var bool = isNonPositiveInteger.isPrimitive( -3.0 )\nbool = isNonPositiveInteger.isPrimitive( new Number( -3.0 ) )\n","isNonPositiveInteger.isObject":"var bool = isNonPositiveInteger.isObject( -3.0 )\nbool = isNonPositiveInteger.isObject( new Number( -3.0 ) )\n","isNonPositiveIntegerArray":"var bool = isNonPositiveIntegerArray( [ -3.0, new Number(-3.0) ] )\nbool = isNonPositiveIntegerArray( [ -3.0, '-3.0' ] )\n","isNonPositiveIntegerArray.primitives":"var bool = isNonPositiveIntegerArray.primitives( [ -1.0, 0.0, -10.0 ] )\nbool = isNonPositiveIntegerArray.primitives( [ -3.0, new Number(-1.0) ] )\n","isNonPositiveIntegerArray.objects":"var bool = isNonPositiveIntegerArray.objects( [ new Number(-1.0), new Number(-10.0) ] )\nbool = isNonPositiveIntegerArray.objects( [ -1.0, 0.0, -10.0 ] )\nbool = isNonPositiveIntegerArray.objects( [ -3.0, new Number(-1.0) ] )\n","isNonPositiveNumber":"var bool = isNonPositiveNumber( -5.0 )\nbool = isNonPositiveNumber( new Number( -5.0 ) )\nbool = isNonPositiveNumber( -3.14 )\nbool = isNonPositiveNumber( 5.0 )\nbool = isNonPositiveNumber( null )\n","isNonPositiveNumber.isPrimitive":"var bool = isNonPositiveNumber.isPrimitive( -3.0 )\nbool = isNonPositiveNumber.isPrimitive( new Number( -3.0 ) )\n","isNonPositiveNumber.isObject":"var bool = isNonPositiveNumber.isObject( -3.0 )\nbool = isNonPositiveNumber.isObject( new Number( -3.0 ) )\n","isNonPositiveNumberArray":"var bool = isNonPositiveNumberArray( [ -3.0, new Number(-3.0) ] )\nbool = isNonPositiveNumberArray( [ -3.0, '-3.0' ] )\n","isNonPositiveNumberArray.primitives":"var bool = isNonPositiveNumberArray.primitives( [ -1.0, 0.0, -10.0 ] )\nbool = isNonPositiveNumberArray.primitives( [ -3.0, new Number(-1.0) ] )\n","isNonPositiveNumberArray.objects":"var bool = isNonPositiveNumberArray.objects( [ new Number(-1.0), new Number(-10.0) ] )\nbool = isNonPositiveNumberArray.objects( [ -1.0, 0.0, -10.0 ] )\nbool = isNonPositiveNumberArray.objects( [ -3.0, new Number(-1.0) ] )\n","isNonSymmetricMatrix":"var buf = [ 1, 2, 3, 4 ];\nvar sh = [ 2, 2 ];\nvar st = [ 2, 1 ];\nvar M = ndarray( 'generic', buf, sh, st, 0, 'row-major' );\nvar bool = isNonSymmetricMatrix( M )\nbool = isNonSymmetricMatrix( [ 1, 2, 3, 4 ] )\nbool = isNonSymmetricMatrix( 3.14 )\nbool = isNonSymmetricMatrix( {} )\n","isNull":"var bool = isNull( null )\nbool = isNull( true )\n","isNullArray":"var bool = isNullArray( [ null, null, null ] )\nbool = isNullArray( [ NaN, 2, null ] )\n","isNumber":"var bool = isNumber( 3.14 )\nbool = isNumber( new Number( 3.14 ) )\nbool = isNumber( NaN )\nbool = isNumber( null )\n","isNumber.isPrimitive":"var bool = isNumber.isPrimitive( 3.14 )\nbool = isNumber.isPrimitive( NaN )\nbool = isNumber.isPrimitive( new Number( 3.14 ) )\n","isNumber.isObject":"var bool = isNumber.isObject( 3.14 )\nbool = isNumber.isObject( new Number( 3.14 ) )\n","isNumberArray":"var bool = isNumberArray( [ 1, 2, 3 ] )\nbool = isNumberArray( [ '1', 2, 3 ] )\n","isNumberArray.primitives":"var arr = [ 1, 2, 3 ];\nvar bool = isNumberArray.primitives( arr )\narr = [ 1, new Number( 2 ) ];\nbool = isNumberArray.primitives( arr )\n","isNumberArray.objects":"var arr = [ new Number( 1 ), new Number( 2 ) ];\nvar bool = isNumberArray.objects( arr )\narr = [ new Number( 1 ), 2 ];\nbool = isNumberArray.objects( arr )\n","isNumericArray":"var bool = isNumericArray( new Int8Array( 10 ) )\nbool = isNumericArray( [ 1, 2, 3 ] )\nbool = isNumericArray( [ '1', '2', '3' ] )\n","isObject":"var bool = isObject( {} )\nbool = isObject( true )\n","isObjectArray":"var bool = isObjectArray( [ {}, new Number(3.0) ] )\nbool = isObjectArray( [ {}, { 'beep': 'boop' } ] )\nbool = isObjectArray( [ {}, '3.0' ] )\n","isObjectLike":"var bool = isObjectLike( {} )\nbool = isObjectLike( [] )\nbool = isObjectLike( null )\n","isOdd":"var bool = isOdd( 5.0 )\nbool = isOdd( new Number( 5.0 ) )\nbool = isOdd( 4.0 )\nbool = isOdd( new Number( 4.0 ) )\nbool = isOdd( -3.14 )\nbool = isOdd( null )\n","isOdd.isPrimitive":"var bool = isOdd.isPrimitive( -5.0 )\nbool = isOdd.isPrimitive( new Number( -5.0 ) )\n","isOdd.isObject":"var bool = isOdd.isObject( 5.0 )\nbool = isOdd.isObject( new Number( 5.0 ) )\n","isoWeeksInYear":"var num = isoWeeksInYear()\nnum = isoWeeksInYear( 2015 )\nnum = isoWeeksInYear( 2017 )\n","isPascalcase":"var bool = isPascalcase( 'HelloWorld' )\nbool = isPascalcase( 'hello-world' )\n","isPersymmetricMatrix":"var buf = [ 1, 2, 3, 1 ];\nvar sh = [ 2, 2 ];\nvar st = [ 2, 1 ];\nvar M = ndarray( 'generic', buf, sh, st, 0, 'row-major' );\nvar bool = isPersymmetricMatrix( M )\nbool = isPersymmetricMatrix( [ 1, 2, 3, 4 ] )\nbool = isPersymmetricMatrix( 3.14 )\nbool = isPersymmetricMatrix( {} )\n","isPlainObject":"var bool = isPlainObject( {} )\nbool = isPlainObject( null )\n","isPlainObjectArray":"var bool = isPlainObjectArray( [ {}, { 'beep': 'boop' } ] )\nbool = isPlainObjectArray( [ {}, new Number(3.0) ] )\nbool = isPlainObjectArray( [ {}, '3.0' ] )\n","isPositiveFinite":"var bool = isPositiveFinite( 5.0 )\nbool = isPositiveFinite( new Number( 5.0 ) )\nbool = isPositiveFinite( 3.14 )\nbool = isPositiveFinite( -5.0 )\nvar bool = isPositiveFinite( 1.0/0.0 )\nbool = isPositiveFinite( new Number( 1.0/0.0 ) )\nbool = isPositiveFinite( null )\n","isPositiveFinite.isPrimitive":"var bool = isPositiveFinite.isPrimitive( 3.0 )\nvar bool = isPositiveFinite.isPrimitive( 1.0/0.0 )\nbool = isPositiveFinite.isPrimitive( new Number( 3.0 ) )\n","isPositiveFinite.isObject":"var bool = isPositiveFinite.isObject( 3.0 )\nbool = isPositiveFinite.isObject( new Number( 3.0 ) )\nbool = isPositiveFinite.isObject( new Number( 1.0/0.0 ) )\n","isPositiveInteger":"var bool = isPositiveInteger( 5.0 )\nbool = isPositiveInteger( new Number( 5.0 ) )\nbool = isPositiveInteger( 3.14 )\nbool = isPositiveInteger( -5.0 )\nbool = isPositiveInteger( null )\n","isPositiveInteger.isPrimitive":"var bool = isPositiveInteger.isPrimitive( 3.0 )\nbool = isPositiveInteger.isPrimitive( new Number( 3.0 ) )\n","isPositiveInteger.isObject":"var bool = isPositiveInteger.isObject( 3.0 )\nbool = isPositiveInteger.isObject( new Number( 3.0 ) )\n","isPositiveIntegerArray":"var bool = isPositiveIntegerArray( [ 3.0, new Number(3.0) ] )\nbool = isPositiveIntegerArray( [ 3.0, '3.0' ] )\n","isPositiveIntegerArray.primitives":"var bool = isPositiveIntegerArray.primitives( [ 1.0, 10.0 ] )\nbool = isPositiveIntegerArray.primitives( [ 1.0, 0.0, 10.0 ] )\nbool = isPositiveIntegerArray.primitives( [ 3.0, new Number(1.0) ] )\n","isPositiveIntegerArray.objects":"var bool = isPositiveIntegerArray.objects( [ new Number(1.0), new Number(10.0) ] )\nbool = isPositiveIntegerArray.objects( [ 1.0, 2.0, 10.0 ] )\nbool = isPositiveIntegerArray.objects( [ 3.0, new Number(1.0) ] )\n","isPositiveNumber":"var bool = isPositiveNumber( 5.0 )\nbool = isPositiveNumber( new Number( 5.0 ) )\nbool = isPositiveNumber( 3.14 )\nbool = isPositiveNumber( -5.0 )\nbool = isPositiveNumber( null )\n","isPositiveNumber.isPrimitive":"var bool = isPositiveNumber.isPrimitive( 3.0 )\nbool = isPositiveNumber.isPrimitive( new Number( 3.0 ) )\n","isPositiveNumber.isObject":"var bool = isPositiveNumber.isObject( 3.0 )\nbool = isPositiveNumber.isObject( new Number( 3.0 ) )\n","isPositiveNumberArray":"var bool = isPositiveNumberArray( [ 3.0, new Number(3.0) ] )\nbool = isPositiveNumberArray( [ 3.0, '3.0' ] )\n","isPositiveNumberArray.primitives":"var bool = isPositiveNumberArray.primitives( [ 1.0, 10.0 ] )\nbool = isPositiveNumberArray.primitives( [ 1.0, 0.0, 10.0 ] )\nbool = isPositiveNumberArray.primitives( [ 3.0, new Number(1.0) ] )\n","isPositiveNumberArray.objects":"var bool = isPositiveNumberArray.objects( [ new Number(1.0), new Number(10.0) ] )\nbool = isPositiveNumberArray.objects( [ 1.0, 2.0, 10.0 ] )\nbool = isPositiveNumberArray.objects( [ 3.0, new Number(1.0) ] )\n","isPositiveZero":"var bool = isPositiveZero( 0.0 )\nbool = isPositiveZero( new Number( 0.0 ) )\nbool = isPositiveZero( -3.14 )\nbool = isPositiveZero( -0.0 )\nbool = isPositiveZero( null )\n","isPositiveZero.isPrimitive":"var bool = isPositiveZero.isPrimitive( 0.0 )\nbool = isPositiveZero.isPrimitive( new Number( 0.0 ) )\n","isPositiveZero.isObject":"var bool = isPositiveZero.isObject( 0.0 )\nbool = isPositiveZero.isObject( new Number( 0.0 ) )\n","isPrime":"var bool = isPrime( 5.0 )\nbool = isPrime( new Number( 5.0 ) )\nbool = isPrime( 3.14 )\nbool = isPrime( -5.0 )\nbool = isPrime( null )\n","isPrime.isPrimitive":"var bool = isPrime.isPrimitive( 5.0 )\nbool = isPrime.isPrimitive( new Number( 5.0 ) )\n","isPrime.isObject":"var bool = isPrime.isObject( 5.0 )\nbool = isPrime.isObject( new Number( 5.0 ) )\n","isPrimitive":"var bool = isPrimitive( true )\nbool = isPrimitive( {} )\n","isPrimitiveArray":"var bool = isPrimitiveArray( [ '3', 2, null ] )\nbool = isPrimitiveArray( [ {}, 2, 1 ] )\nbool = isPrimitiveArray( [ new String('abc'), '3.0' ] )\n","isPRNGLike":"var bool = isPRNGLike( base.random.randu )\nbool = isPRNGLike( [ 1, 2, 3, 4 ] )\nbool = isPRNGLike( 3.14 )\nbool = isPRNGLike( {} )\n","isProbability":"var bool = isProbability( 0.5 )\nbool = isProbability( new Number( 0.5 ) )\nbool = isProbability( 3.14 )\nbool = isProbability( -5.0 )\nbool = isProbability( null )\n","isProbability.isPrimitive":"var bool = isProbability.isPrimitive( 0.3 )\nbool = isProbability.isPrimitive( new Number( 0.3 ) )\n","isProbability.isObject":"var bool = isProbability.isObject( 0.77 )\nbool = isProbability.isObject( new Number( 0.77 ) )\n","isProbabilityArray":"var bool = isProbabilityArray( [ 0.5, new Number(0.8) ] )\nbool = isProbabilityArray( [ 0.8, 1.2 ] )\nbool = isProbabilityArray( [ 0.8, '0.2' ] )\n","isProbabilityArray.primitives":"var bool = isProbabilityArray.primitives( [ 1.0, 0.0, 0.5 ] )\nbool = isProbabilityArray.primitives( [ 0.3, new Number(0.4) ] )\n","isProbabilityArray.objects":"var bool = isProbabilityArray.objects( [ new Number(0.7), new Number(1.0) ] )\nbool = isProbabilityArray.objects( [ 1.0, 0.0, new Number(0.7) ] )\n","isPropertyKey":"var out = isPropertyKey( 'foo' )\nout = isPropertyKey( 1 )\nout = isPropertyKey( true )\n","isPrototypeOf":"function Foo() { return this; };\nfunction Bar() { return this; };\ninherit( Bar, Foo );\nvar bar = new Bar();\nvar bool = isPrototypeOf( bar, Foo.prototype )\n","isRaggedNestedArray":"var bool = isRaggedNestedArray( [ [ 1, 2, 3 ], [ 4, 5 ] ] )\nbool = isRaggedNestedArray( [ [ 1, 2, 3 ], [ 4, 5, 6 ] ] )\nbool = isRaggedNestedArray( 'beep' )\n","isRangeError":"var bool = isRangeError( new RangeError( 'beep' ) )\nbool = isRangeError( {} )\n","isReadableProperty":"var obj = { 'boop': true };\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = false;\ndesc.set = function setter( v ) { obj.boop = v; };\ndefineProperty( obj, 'beep', desc );\nvar bool = isReadableProperty( obj, 'boop' )\nbool = isReadableProperty( obj, 'beep' )\n","isReadablePropertyIn":"var obj = { 'boop': true };\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = false;\ndesc.set = function setter( v ) { obj.boop = v; };\ndefineProperty( obj, 'beep', desc );\nvar bool = isReadablePropertyIn( obj, 'boop' )\nbool = isReadablePropertyIn( obj, 'beep' )\n","isReadOnlyProperty":"var obj = { 'boop': true };\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = true;\ndesc.writable = false;\ndesc.value = true;\ndefineProperty( obj, 'beep', desc );\nvar bool = isReadOnlyProperty( obj, 'boop' )\nbool = isReadOnlyProperty( obj, 'beep' )\n","isReadOnlyPropertyIn":"var obj = { 'boop': true };\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = true;\ndesc.writable = false;\ndesc.value = true;\ndefineProperty( obj, 'beep', desc );\nvar bool = isReadOnlyPropertyIn( obj, 'boop' )\nbool = isReadOnlyPropertyIn( obj, 'beep' )\n","isReadWriteProperty":"var obj = { 'boop': true };\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = false;\ndesc.set = function setter( v ) { obj.boop = v; };\ndefineProperty( obj, 'beep', desc );\nvar bool = isReadWriteProperty( obj, 'boop' )\nbool = isReadWriteProperty( obj, 'beep' )\n","isReadWritePropertyIn":"var obj = { 'boop': true };\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = false;\ndesc.set = function setter( v ) { obj.boop = v; };\ndefineProperty( obj, 'beep', desc );\nvar bool = isReadWritePropertyIn( obj, 'boop' )\nbool = isReadWritePropertyIn( obj, 'beep' )\n","isReferenceError":"var bool = isReferenceError( new ReferenceError( 'beep' ) )\nbool = isReferenceError( {} )\n","isRegExp":"var bool = isRegExp( /\\.+/ )\nbool = isRegExp( {} )\n","isRegExpString":"var bool = isRegExpString( '/beep/' )\nbool = isRegExpString( 'beep' )\nbool = isRegExpString( '' )\nbool = isRegExpString( null )\n","isRelativePath":"var bool = isRelativePath( 'foo\\\\bar\\\\baz' )\nbool = isRelativePath( './foo/bar/baz' )\n","isRelativePath.posix":"var bool = isRelativePath.posix( './foo/bar/baz' )\nbool = isRelativePath.posix( '/foo/../bar/baz' )\n","isRelativePath.win32":"var bool = isRelativePath( 'foo\\\\bar\\\\baz' )\nbool = isRelativePath( 'C:\\\\foo\\\\..\\\\bar\\\\baz' )\n","isRelativeURI":"var bool = isRelativeURI( '/images/example.png' )\nbool = isRelativeURI( 'http://www.example.com' )\nbool = isRelativeURI( null )\n","isSafeInteger":"var bool = isSafeInteger( 5.0 )\nbool = isSafeInteger( new Number( 5.0 ) )\nbool = isSafeInteger( 2.0e200 )\nbool = isSafeInteger( -3.14 )\nbool = isSafeInteger( null )\n","isSafeInteger.isPrimitive":"var bool = isSafeInteger.isPrimitive( -3.0 )\nbool = isSafeInteger.isPrimitive( new Number( -3.0 ) )\n","isSafeInteger.isObject":"var bool = isSafeInteger.isObject( 3.0 )\nbool = isSafeInteger.isObject( new Number( 3.0 ) )\n","isSafeIntegerArray":"var arr = [ -3.0, new Number(0.0), 2.0 ];\nvar bool = isSafeIntegerArray( arr )\narr = [ -3.0, '3.0' ];\nbool = isSafeIntegerArray( arr )\n","isSafeIntegerArray.primitives":"var arr = [ -1.0, 10.0 ];\nvar bool = isSafeIntegerArray.primitives( arr )\narr = [ -1.0, 0.0, 5.0 ];\nbool = isSafeIntegerArray.primitives( arr )\narr = [ -3.0, new Number(-1.0) ];\nbool = isSafeIntegerArray.primitives( arr )\n","isSafeIntegerArray.objects":"var arr = [ new Number(1.0), new Number(3.0) ];\nvar bool = isSafeIntegerArray.objects( arr )\narr = [ -1.0, 0.0, 3.0 ];\nbool = isSafeIntegerArray.objects( arr )\narr = [ 3.0, new Number(-1.0) ];\nbool = isSafeIntegerArray.objects( arr )\n","isSameArray":"var x = [ 1.0, 2.0, 3.0 ];\nvar y = [ 1.0, 2.0, 3.0 ];\nvar bool = isSameArray( x, y )\nx = [ NaN, NaN, NaN ];\ny = [ NaN, NaN, NaN ];\nbool = isSameArray( x, y )\n","isSameComplex64":"var x = new Complex64( 1.0, 2.0 );\nvar y = new Complex64( 1.0, 2.0 );\nvar bool = isSameComplex64( x, y )\nx = new Complex64( NaN, NaN );\ny = new Complex64( NaN, NaN );\nbool = isSameComplex64( x, y )\n","isSameComplex64Array":"var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar bool = isSameComplex64Array( x, y )\nx = new Complex64Array( [ NaN, NaN, NaN, NaN ] );\ny = new Complex64Array( [ NaN, NaN, NaN, NaN ] );\nbool = isSameComplex64Array( x, y )\n","isSameComplex128":"var x = new Complex128( 1.0, 2.0 );\nvar y = new Complex128( 1.0, 2.0 );\nvar bool = isSameComplex128( x, y )\nx = new Complex128( NaN, NaN );\ny = new Complex128( NaN, NaN );\nbool = isSameComplex128( x, y )\n","isSameComplex128Array":"var x = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y = new Complex128Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar bool = isSameComplex128Array( x, y )\nx = new Complex128Array( [ NaN, NaN, NaN, NaN ] );\ny = new Complex128Array( [ NaN, NaN, NaN, NaN ] );\nbool = isSameComplex128Array( x, y )\n","isSameDateObject":"var d1 = new Date( 2024, 11, 31, 23, 59, 59, 999 );\nvar d2 = new Date( 2024, 11, 31, 23, 59, 59, 999 );\nvar bool = isSameDateObject( d1, d2 )\nvar d1 = new Date( 2024, 11, 31, 23, 59, 59, 999 );\nvar d2 = new Date( 2024, 11, 31, 23, 59, 59, 78 );\nvar bool = isSameDateObject( d1, d2 )\n","isSameFloat32Array":"var x = new Float32Array( [ 1.0, 2.0, 3.0 ] );\nvar y = new Float32Array( [ 1.0, 2.0, 3.0 ] );\nvar bool = isSameFloat32Array( x, y )\nx = new Float32Array( [ NaN, NaN, NaN ] );\ny = new Float32Array( [ NaN, NaN, NaN ] );\nbool = isSameFloat32Array( x, y )\n","isSameFloat64Array":"var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );\nvar y = new Float64Array( [ 1.0, 2.0, 3.0 ] );\nvar bool = isSameFloat64Array( x, y )\nx = new Float64Array( [ NaN, NaN, NaN ] );\ny = new Float64Array( [ NaN, NaN, NaN ] );\nbool = isSameFloat64Array( x, y )\n","isSameNativeClass":"var bool = isSameNativeClass( 3.14, new Number( 3.14 ) )\nbool = isSameNativeClass( 'beep', 'boop' )\nbool = isSameNativeClass( {}, [] )\n","isSameType":"var bool = isSameType( true, true )\nbool = isSameType( {}, [] )\nbool = isSameType( 3.12, -3.12 )\nbool = isSameType( 0.0, '0.0' )\n","isSameValue":"var bool = isSameValue( true, true )\nbool = isSameValue( {}, {} )\nbool = isSameValue( -0.0, -0.0 )\nbool = isSameValue( -0.0, 0.0 )\nbool = isSameValue( NaN, NaN )\n","isSameValueZero":"var bool = isSameValueZero( true, true )\nbool = isSameValueZero( {}, {} )\nbool = isSameValueZero( -0.0, -0.0 )\nbool = isSameValueZero( -0.0, 0.0 )\nbool = isSameValueZero( NaN, NaN )\n","isSemVer":"var bool = isSemVer( '1.0.0' )\nbool = isSemVer( '1.0.0-alpha.1' )\nbool = isSemVer( '0.1' )\nbool = isSemVer( null )\n","isSharedArrayBuffer":"var bool = isSharedArrayBuffer( new SharedArrayBuffer( 10 ) )\nbool = isSharedArrayBuffer( [] )\n","isSkewCentrosymmetricMatrix":"var buf = [ 2, 1, -1, -2 ];\nvar sh = [ 2, 2 ];\nvar st = [ 2, 1 ];\nvar M = ndarray( 'generic', buf, sh, st, 0, 'row-major' );\nvar bool = isSkewCentrosymmetricMatrix( M )\nbool = isSkewCentrosymmetricMatrix( [ 1, 2, 3, 4 ] )\nbool = isSkewCentrosymmetricMatrix( 3.14 )\nbool = isSkewCentrosymmetricMatrix( {} )\n","isSkewPersymmetricMatrix":"var buf = [ 1, 0, 0, -1 ];\nvar sh = [ 2, 2 ];\nvar st = [ 2, 1 ];\nvar M = ndarray( 'generic', buf, sh, st, 0, 'row-major' );\nvar bool = isSkewPersymmetricMatrix( M )\nbool = isSkewPersymmetricMatrix( [ 1, 2, 3, 4 ] )\nbool = isSkewPersymmetricMatrix( 3.14 )\nbool = isSkewPersymmetricMatrix( {} )\n","isSkewSymmetricMatrix":"var buf = [ 0, -1, 1, 0 ];\nvar sh = [ 2, 2 ];\nvar st = [ 2, 1 ];\nvar M = ndarray( 'generic', buf, sh, st, 0, 'row-major' );\nvar bool = isSkewSymmetricMatrix( M )\nbool = isSkewSymmetricMatrix( [ 1, 2, 3, 4 ] )\nbool = isSkewSymmetricMatrix( 3.14 )\nbool = isSkewSymmetricMatrix( {} )\n","isSlice":"var bool = isSlice( new Slice( 10 ) )\nbool = isSlice( 3.14 )\nbool = isSlice( {} )\n","isSnakecase":"var bool = isSnakecase( 'hello_world' )\nbool = isSnakecase( 'Hello World' )\n","isSquareMatrix":"var buf = [ 0, 0, 0, 0 ];\nvar sh = [ 2, 2 ];\nvar st = [ 2, 1 ];\nvar M = ndarray( 'generic', buf, sh, st, 0, 'row-major' );\nvar bool = isSquareMatrix( M )\nbool = isSquareMatrix( [ 1, 2, 3, 4 ] )\nbool = isSquareMatrix( 3.14 )\nbool = isSquareMatrix( {} )\n","isSquareNumber":"var bool = isSquareNumber( 4.0 )\nbool = isSquareNumber( new Number( 4.0 ) )\nbool = isSquareNumber( 3.14 )\nbool = isSquareNumber( -5.0 )\nbool = isSquareNumber( null )\n","isSquareNumber.isPrimitive":"var bool = isSquareNumber.isPrimitive( 4.0 )\nbool = isSquareNumber.isPrimitive( new Number( 4.0 ) )\n","isSquareNumber.isObject":"var bool = isSquareNumber.isObject( 4.0 )\nbool = isSquareNumber.isObject( new Number( 4.0 ) )\n","isSquareTriangularNumber":"var bool = isSquareTriangularNumber( 36.0 )\nbool = isSquareTriangularNumber( new Number( 36.0 ) )\nbool = isSquareTriangularNumber( 3.14 )\nbool = isSquareTriangularNumber( -5.0 )\nbool = isSquareTriangularNumber( null )\n","isSquareTriangularNumber.isPrimitive":"var bool = isSquareTriangularNumber.isPrimitive( 36.0 )\nbool = isSquareTriangularNumber.isPrimitive( new Number( 36.0 ) )\n","isSquareTriangularNumber.isObject":"var bool = isSquareTriangularNumber.isObject( 36.0 )\nbool = isSquareTriangularNumber.isObject( new Number( 36.0 ) )\n","isStartcase":"var bool = isStartcase( 'Beep Boop' )\nbool = isStartcase( 'Beep and Boop' )\n","isStrictEqual":"var bool = isStrictEqual( true, true )\nbool = isStrictEqual( {}, {} )\nbool = isStrictEqual( -0.0, -0.0 )\nbool = isStrictEqual( -0.0, 0.0 )\nbool = isStrictEqual( NaN, NaN )\n","isString":"var bool = isString( 'beep' )\nbool = isString( new String( 'beep' ) )\nbool = isString( 5 )\n","isString.isPrimitive":"var bool = isString.isPrimitive( 'beep' )\nbool = isString.isPrimitive( new String( 'beep' ) )\n","isString.isObject":"var bool = isString.isObject( new String( 'beep' ) )\nbool = isString.isObject( 'beep' )\n","isStringArray":"var bool = isStringArray( [ 'abc', 'def' ] )\nbool = isStringArray( [ 'abc', 123 ] )\n","isStringArray.primitives":"var arr = [ 'abc', 'def' ];\nvar bool = isStringArray.primitives( arr )\narr = [ 'abc', new String( 'def' ) ];\nbool = isStringArray.primitives( arr )\n","isStringArray.objects":"var arr = [ new String( 'ab' ), new String( 'cd' ) ];\nvar bool = isStringArray.objects( arr )\narr = [ new String( 'abc' ), 'def' ];\nbool = isStringArray.objects( arr )\n","isSymbol":"var bool = isSymbol( Symbol( 'beep' ) )\nbool = isSymbol( Object( Symbol( 'beep' ) ) )\nbool = isSymbol( {} )\nbool = isSymbol( null )\nbool = isSymbol( true )\n","isSymbolArray":"var bool = isSymbolArray( [ Symbol( 'beep' ), Symbol( 'boop' ) ] )\nbool = isSymbolArray( Symbol( 'beep' ) )\nbool = isSymbolArray( [] )\nbool = isSymbolArray( {} )\nbool = isSymbolArray( null )\nbool = isSymbolArray( true )\n","isSymbolArray.primitives":"var bool = isSymbolArray.primitives( [ Symbol( 'beep' ) ] )\nbool = isSymbolArray.primitives( [ Object( Symbol( 'beep' ) ) ] )\nbool = isSymbolArray.primitives( [] )\nbool = isSymbolArray.primitives( {} )\nbool = isSymbolArray.primitives( null )\nbool = isSymbolArray.primitives( true )\n","isSymbolArray.objects":"var bool = isSymbolArray.objects( [ Object( Symbol( 'beep' ) ) ] )\nbool = isSymbolArray.objects( [ Symbol( 'beep' ) ] )\nbool = isSymbolArray.objects( [] )\nbool = isSymbolArray.objects( {} )\nbool = isSymbolArray.objects( null )\nbool = isSymbolArray.objects( true )\n","isSymmetricMatrix":"var buf = [ 0, 1, 1, 2 ];\nvar sh = [ 2, 2 ];\nvar st = [ 2, 1 ];\nvar M = ndarray( 'generic', buf, sh, st, 0, 'row-major' );\nvar bool = isSymmetricMatrix( M )\nbool = isSymmetricMatrix( [ 1, 2, 3, 4 ] )\nbool = isSymmetricMatrix( 3.14 )\nbool = isSymmetricMatrix( {} )\n","isSyntaxError":"var bool = isSyntaxError( new SyntaxError( 'beep' ) )\nbool = isSyntaxError( {} )\n","isTriangularNumber":"var bool = isTriangularNumber( 36.0 )\nbool = isTriangularNumber( new Number( 36.0 ) )\nbool = isTriangularNumber( 3.14 )\nbool = isTriangularNumber( -5.0 )\nbool = isTriangularNumber( null )\n","isTriangularNumber.isPrimitive":"var bool = isTriangularNumber.isPrimitive( 36.0 )\nbool = isTriangularNumber.isPrimitive( new Number( 36.0 ) )\n","isTriangularNumber.isObject":"var bool = isTriangularNumber.isObject( 36.0 )\nbool = isTriangularNumber.isObject( new Number( 36.0 ) )\n","isTruthy":"var bool = isTruthy( true )\nbool = isTruthy( {} )\nbool = isTruthy( [] )\nbool = isTruthy( false )\nbool = isTruthy( '' )\nbool = isTruthy( 0 )\nbool = isTruthy( null )\nbool = isTruthy( void 0 )\nbool = isTruthy( NaN )\n","isTruthyArray":"var bool = isTruthyArray( [ {}, [] ] )\nbool = isTruthyArray( [ null, '' ] )\nbool = isTruthyArray( [] )\n","isTypedArray":"var bool = isTypedArray( new Int8Array( 10 ) )\n","isTypedArrayLength":"var bool = isTypedArrayLength( 5 )\nbool = isTypedArrayLength( 2.0e200 )\nbool = isTypedArrayLength( -3.14 )\nbool = isTypedArrayLength( null )\n","isTypedArrayLike":"var bool = isTypedArrayLike( new Int16Array() )\nbool = isTypedArrayLike({\n'length': 10,\n'byteOffset': 0,\n'byteLength': 10,\n'BYTES_PER_ELEMENT': 4\n })\n","isTypeError":"var bool = isTypeError( new TypeError( 'beep' ) )\nbool = isTypeError( {} )\n","isUint8Array":"var bool = isUint8Array( new Uint8Array( 10 ) )\nbool = isUint8Array( [] )\n","isUint8ClampedArray":"var bool = isUint8ClampedArray( new Uint8ClampedArray( 10 ) )\nbool = isUint8ClampedArray( [] )\n","isUint16Array":"var bool = isUint16Array( new Uint16Array( 10 ) )\nbool = isUint16Array( [] )\n","isUint32Array":"var bool = isUint32Array( new Uint32Array( 10 ) )\nbool = isUint32Array( [] )\n","isUNCPath":"var bool = isUNCPath( '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz' )\nbool = isUNCPath( '/foo/bar/baz' )\n","isUndefined":"var bool = isUndefined( void 0 )\nbool = isUndefined( null )\n","isUndefinedOrNull":"var bool = isUndefinedOrNull( void 0 )\nbool = isUndefinedOrNull( null )\nbool = isUndefinedOrNull( false )\n","isUnityProbabilityArray":"var bool = isUnityProbabilityArray( [ 0.25, 0.5, 0.25 ] )\nbool = isUnityProbabilityArray( new Uint8Array( [ 0, 1 ] ) )\nbool = isUnityProbabilityArray( [ 0.4, 0.4, 0.4 ] )\nbool = isUnityProbabilityArray( [ 3.14, 0.0 ] )\n","isUppercase":"var bool = isUppercase( 'HELLO' )\nbool = isUppercase( 'World' )\n","isURI":"var bool = isURI( 'http://google.com' )\nbool = isURI( 'http://localhost/' )\nbool = isURI( 'http://example.w3.org/path%20with%20spaces.html' )\nbool = isURI( 'ftp://ftp.is.co.za/rfc/rfc1808.txt' )\nbool = isURI( '' )\nbool = isURI( 'foo@bar' )\nbool = isURI( '://foo/' )\nbool = isURI( 'http://<foo>' )\nbool = isURI( 'http:////foo.html' )\nbool = isURI( 'http://example.w3.org/%a' )\n","isURIError":"var bool = isURIError( new URIError( 'beep' ) )\nbool = isURIError( {} )\n","isVectorLike":"var M = {};\nM.data = [ 0, 0, 0, 0 ];\nM.ndims = 1;\nM.shape = [ 4 ];\nM.strides = [ 1 ];\nM.offset = 0;\nM.order = 'row-major';\nM.dtype = 'generic';\nM.length = 4;\nM.flags = {};\nM.get = function get( i, j ) {};\nM.set = function set( i, j ) {};\nvar bool = isVectorLike( M )\nbool = isVectorLike( [ 1, 2, 3, 4 ] )\nbool = isVectorLike( 3.14 )\nbool = isVectorLike( {} )\n","isWellFormedString":"var bool = isWellFormedString( '' )\nbool = isWellFormedString( new String( '' ) )\nbool = isWellFormedString( '\\uDBFF' )\nbool = isWellFormedString( '\\uDBFFFF\\uDBFF' )\nbool = isWellFormedString( [] )\nbool = isWellFormedString( '-5' )\nbool = isWellFormedString( null )\n","isWellFormedString.isPrimitive":"var bool = isWellFormedString.isPrimitive( '' )\nbool = isWellFormedString.isPrimitive( new String( '' ) )\n","isWellFormedString.isObject":"var bool = isWellFormedString.isObject( '' )\nbool = isWellFormedString.isObject( new String( '' ) )\n","isWhitespace":"var bool = isWhitespace( '       ' )\nbool = isWhitespace( 'abcdef' )\nbool = isWhitespace( '' )\n","isWritableProperty":"var obj = { 'boop': true };\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = false;\ndesc.writable = false;\ndesc.value = 'beep';\ndefineProperty( obj, 'beep', desc );\nvar bool = isWritableProperty( obj, 'boop' )\nbool = isWritableProperty( obj, 'beep' )\n","isWritablePropertyIn":"var obj = { 'boop': true };\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = false;\ndesc.writable = false;\ndesc.value = 'beep';\ndefineProperty( obj, 'beep', desc );\nvar bool = isWritablePropertyIn( obj, 'boop' )\nbool = isWritablePropertyIn( obj, 'beep' )\n","isWriteOnlyProperty":"var obj = { 'boop': true };\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = true;\ndesc.set = function setter( v ) { obj.boop = v; };\ndefineProperty( obj, 'beep', desc );\nvar bool = isWriteOnlyProperty( obj, 'boop' )\nbool = isWriteOnlyProperty( obj, 'beep' )\n","isWriteOnlyPropertyIn":"var obj = { 'boop': true };\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = true;\ndesc.set = function setter( v ) { obj.boop = v; };\ndefineProperty( obj, 'beep', desc );\nvar bool = isWriteOnlyPropertyIn( obj, 'boop' )\nbool = isWriteOnlyPropertyIn( obj, 'beep' )\n","iterAbs":"var it = iterAbs( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterAbs2":"var it = iterAbs2( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterAcos":"var it = iterAcos( random.iterators.uniform( -1.0, 1.0 ) );\nvar r = it.next().value\nr = it.next().value\n","iterAcosh":"var it = iterAcosh( random.iterators.uniform( 1.0, 10.0 ) );\nvar r = it.next().value\nr = it.next().value\n","iterAcot":"var it = iterAcot( random.iterators.uniform( -5.0, 5.0 ) );\nvar r = it.next().value\nr = it.next().value\n","iterAcoth":"var it = iterAcoth( random.iterators.uniform( 1.0, 10.0 ) );\nvar r = it.next().value\nr = it.next().value\n","iterAcovercos":"var it = iterAcovercos( random.iterators.uniform( -2.0, 0.0 ) );\nvar r = it.next().value\nr = it.next().value\n","iterAcoversin":"var it = iterAcoversin( random.iterators.uniform( 0.0, 2.0 ) );\nvar r = it.next().value\nr = it.next().value\n","iterAdd":"var it1 = array2iterator( [ 1.0, 2.0 ] );\nvar it2 = array2iterator( [ 3.0, 4.0 ] );\nvar it = iterAdd( it1, it2 );\nvar v = it.next().value\nv = it.next().value\nvar bool = it.next().done\n","iterAdvance":"var arr = array2iterator( [ 0, 0, 0, 0, 1 ] );\nvar it = iterAdvance( arr, 4 );\nvar v = it.next().value\nvar bool = it.next().done\n","iterAhavercos":"var it = iterAhavercos( random.iterators.uniform( 0.0, 1.0 ) );\nvar r = it.next().value\nr = it.next().value\n","iterAhaversin":"var it = iterAhaversin( random.iterators.uniform( 0.0, 1.0 ) );\nvar r = it.next().value\nr = it.next().value\n","iterAny":"var arr = array2iterator( [ 0, 0, 0, 0, 1 ] );\nvar bool = iterAny( arr )\n","iterAnyBy":"var arr = array2iterator( [ 0, 0, 0, 0, 1 ] );\nfunction fcn( v ) { return ( v === 1 ); };\nvar bool = iterAnyBy( arr, fcn )\n","iterAsin":"var it = iterAsin( random.iterators.uniform( -1.0, 1.0 ) );\nvar r = it.next().value\nr = it.next().value\n","iterAsinh":"var it = iterAsinh( random.iterators.uniform( -2.0, 2.0 ) );\nvar r = it.next().value\nr = it.next().value\n","iterAtan":"var it = iterAtan( random.iterators.uniform( -2.0, 2.0 ) );\nvar r = it.next().value\nr = it.next().value\n","iterAtan2":"var x = random.iterators.uniform( -2.0, 2.0 );\nvar y = random.iterators.uniform( -2.0, 2.0 );\nvar it = iterAtan2( y, x );\nvar r = it.next().value\nr = it.next().value\n","iterAtanh":"var it = iterAtanh( random.iterators.uniform( -1.0, 1.0 ) );\nvar r = it.next().value\nr = it.next().value\n","iterator2array":"var opts = { 'iter': 10 };\nvar arr = iterator2array( random.iterators.randu( opts ) )\n","iterator2arrayview":"var it = random.iterators.randu({ 'iter': 10 });\nvar out = new Float64Array( 20 );\nvar arr = iterator2arrayview( it, out, 5, 15 )\n","iterator2arrayviewRight":"var it = random.iterators.randu({ 'iter': 10 });\nvar out = new Float64Array( 20 );\nvar arr = iterator2arrayviewRight( it, out, 5, 15 )\n","iteratorStream":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar it = random.iterators.randu( opts );\nvar s = iteratorStream( it );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","iteratorStream.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = iteratorStream.factory( opts );\n","iteratorStream.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar it = random.iterators.randu( opts );\nvar s = iteratorStream.objectMode( it );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","IteratorSymbol":"var s = IteratorSymbol\n","iterAvercos":"var it = iterAvercos( random.iterators.uniform( -2.0, 0.0 ) );\nvar r = it.next().value\nr = it.next().value\n","iterAversin":"var it = iterAversin( random.iterators.uniform( 0.0, 2.0 ) );\nvar r = it.next().value\nr = it.next().value\n","iterawgn":"var src = iterSineWave();\nvar it = iterawgn( src, 0.5 );\nvar v = it.next().value\nv = it.next().value\n","iterawln":"var src = iterSineWave();\nvar it = iterawln( src, 0.5 );\nvar v = it.next().value\nv = it.next().value\n","iterawun":"var src = iterSineWave();\nvar it = iterawun( src, 0.5 );\nvar v = it.next().value\nv = it.next().value\n","iterBartlettHannPulse":"var it = iterBartlettHannPulse();\nvar v = it.next().value\nv = it.next().value\n","iterBartlettPulse":"var it = iterBartlettPulse();\nvar v = it.next().value\nv = it.next().value\n","iterBesselj0":"var it = iterBesselj0( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterBesselj1":"var it = iterBesselj1( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterBessely0":"var it = iterBessely0( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterBessely1":"var it = iterBessely1( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterBeta":"var x = random.iterators.uniform( 0.0, 2.0 );\nvar y = random.iterators.uniform( 0.0, 2.0 );\nvar it = iterBeta( x, y );\nvar r = it.next().value\nr = it.next().value\n","iterBetaln":"var x = random.iterators.uniform( 0.0, 2.0 );\nvar y = random.iterators.uniform( 0.0, 2.0 );\nvar it = iterBetaln( x, y );\nvar r = it.next().value\nr = it.next().value\n","iterBinet":"var it = iterBinet( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterCbrt":"var it = iterCbrt( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterCeil":"var it = iterCeil( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterCeil2":"var it = iterCeil2( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterCeil10":"var it = iterCeil10( random.iterators.uniform( -100.0, 100.0 ) );\nvar r = it.next().value\nr = it.next().value\n","iterCompositesSeq":"var it = iterCompositesSeq();\nvar v = it.next().value\nv = it.next().value\nv = it.next().value\n","iterConcat":"var it1 = array2iterator( [ 1, 2 ] );\nvar it2 = array2iterator( [ 3, 4 ] );\nvar it = iterConcat( it1, it2 );\nvar v = it.next().value\nv = it.next().value\nv = it.next().value\nv = it.next().value\nvar bool = it.next().done\n","iterConstant":"var it = iterConstant( 3.14 );\nvar v = it.next().value\nv = it.next().value\n","iterContinuedFraction":"var terms = array2iterator( [ 3, 4, 12, 4 ] );\nvar v = iterContinuedFraction( terms )\n","iterContinuedFractionSeq":"var it = iterContinuedFractionSeq( 3.245 );\nvar v = it.next().value\nv = it.next().value\nv = it.next().value\nv = it.next().value\nvar bool = it.next().done\nit = iterContinuedFractionSeq( 3.245, { 'returns': 'convergents' } );\nv = it.next().value\nv = it.next().value\nv = it.next().value\nv = it.next().value\nbool = it.next().done\n","iterCos":"var it = iterCos( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterCosh":"var r = random.iterators.uniform( -5.0, 5.0 );\nvar it = iterCosh( r );\nvar v = it.next().value\nv = it.next().value\n","iterCosineWave":"var it = iterCosineWave();\nvar v = it.next().value\nv = it.next().value\n","iterCosm1":"var r = random.iterators.uniform( 0.0, 6.28 );\nvar it = iterCosm1( r );\nvar v = it.next().value\nv = it.next().value\n","iterCospi":"var it = iterCospi( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterCounter":"var it = iterCounter( random.iterators.randu() );\nvar v = it.next().value\nv = it.next().value\n","iterCovercos":"var r = random.iterators.uniform( 0.0, 6.28 );\nvar it = iterCovercos( r );\nvar v = it.next().value\nv = it.next().value\n","iterCoversin":"var r = random.iterators.uniform( 0.0, 6.28 );\nvar it = iterCoversin( r );\nvar v = it.next().value\nv = it.next().value\n","iterCubesSeq":"var it = iterCubesSeq();\nvar v = it.next().value\nv = it.next().value\nv = it.next().value\n","itercugmean":"var arr = array2iterator( [ 2.0, 5.0, 3.0, 5.0 ] );\nvar it = itercugmean( arr );\nvar v = it.next().value\nv = it.next().value\nv = it.next().value\nv = it.next().value\n","itercuhmean":"var arr = array2iterator( [ 2.0, 5.0, 3.0, 5.0 ] );\nvar it = itercuhmean( arr );\nvar v = it.next().value\nv = it.next().value\nv = it.next().value\nv = it.next().value\n","itercumax":"var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\nvar it = itercumax( arr );\nvar m = it.next().value\nm = it.next().value\nm = it.next().value\nm = it.next().value\n","itercumaxabs":"var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\nvar it = itercumaxabs( arr );\nvar m = it.next().value\nm = it.next().value\nm = it.next().value\nm = it.next().value\n","itercumean":"var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\nvar it = itercumean( arr );\nvar m = it.next().value\nm = it.next().value\nm = it.next().value\nm = it.next().value\n","itercumeanabs":"var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\nvar it = itercumeanabs( arr );\nvar m = it.next().value\nm = it.next().value\nm = it.next().value\nm = it.next().value\n","itercumeanabs2":"var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\nvar it = itercumeanabs2( arr );\nvar m = it.next().value\nm = it.next().value\nm = it.next().value\nm = it.next().value\n","itercumidrange":"var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\nvar it = itercumidrange( arr );\nvar v = it.next().value\nv = it.next().value\nv = it.next().value\nv = it.next().value\n","itercumin":"var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\nvar it = itercumin( arr );\nvar m = it.next().value\nm = it.next().value\nm = it.next().value\nm = it.next().value\n","itercuminabs":"var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\nvar it = itercuminabs( arr );\nvar m = it.next().value\nm = it.next().value\nm = it.next().value\nm = it.next().value\n","itercuprod":"var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\nvar it = itercuprod( arr );\nvar p = it.next().value\np = it.next().value\np = it.next().value\np = it.next().value\n","itercurange":"var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\nvar it = itercurange( arr );\nvar r = it.next().value\nr = it.next().value\nr = it.next().value\nr = it.next().value\n","itercusum":"var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\nvar it = itercusum( arr );\nvar s = it.next().value\ns = it.next().value\ns = it.next().value\ns = it.next().value\n","itercusumabs":"var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\nvar it = itercusumabs( arr );\nvar s = it.next().value\ns = it.next().value\ns = it.next().value\ns = it.next().value\n","itercusumabs2":"var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\nvar it = itercusumabs2( arr );\nvar s = it.next().value\ns = it.next().value\ns = it.next().value\ns = it.next().value\n","iterDatespace":"var t1 = new Date();\nvar it = iterDatespace( t1, new Date( t1.getTime()+86400000 ) );\nvar v = it.next().value\nv = it.next().value\n","iterDedupe":"var arr = array2iterator( [ 1, 1, 2, 3, 3 ] );\nvar it = iterDedupe( arr );\nvar v = it.next().value\nv = it.next().value\nv = it.next().value\n","iterDedupeBy":"var arr = array2iterator( [ 1, 1, 2, 3, 3 ] );\nfunction fcn( v ) { return v; };\nvar it = iterDedupeBy( arr, fcn );\nvar v = it.next().value\nv = it.next().value\nv = it.next().value\n","iterDeg2rad":"var r = random.iterators.uniform( -360.0, 360.0 );\nvar it = iterDeg2rad( r );\nvar v = it.next().value\nv = it.next().value\n","iterDigamma":"var r = random.iterators.uniform( 0.01, 5.0 );\nvar it = iterDigamma( r );\nvar v = it.next().value\nv = it.next().value\n","iterDiracComb":"var it = iterDiracComb();\nvar v = it.next().value\nv = it.next().value\n","iterDiracDelta":"var it = iterDiracDelta( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterDivide":"var it1 = array2iterator( [ 3.0, 2.0 ] );\nvar it2 = array2iterator( [ 1.0, 4.0 ] );\nvar it = iterDivide( it1, it2 );\nvar v = it.next().value\nv = it.next().value\nvar bool = it.next().done\n","iterDoWhileEach":"function predicate( v ) { return v === v };\nfunction f( v ) { if ( v !== v ) { throw new Error( 'beep' ); } };\nvar it = iterDoWhileEach( random.iterators.randu(), predicate, f );\nvar r = it.next().value\nr = it.next().value\n","iterEllipe":"var r = random.iterators.uniform( -1.0, 1.0 );\nvar it = iterEllipe( r );\nvar v = it.next().value\nv = it.next().value\n","iterEllipk":"var r = random.iterators.uniform( -1.0, 1.0 );\nvar it = iterEllipk( r );\nvar v = it.next().value\nv = it.next().value\n","iterEmpty":"var it = iterEmpty();\nvar bool = it.next().done\n","iterErf":"var it = iterErf( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterErfc":"var it = iterErfc( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterErfcinv":"var it = iterErfcinv( random.iterators.uniform( 0.0, 2.0 ) );\nvar r = it.next().value\nr = it.next().value\n","iterErfinv":"var it = iterErfinv( random.iterators.uniform( -1.0, 1.0 ) );\nvar r = it.next().value\nr = it.next().value\n","iterEta":"var it = iterEta( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterEvenIntegersSeq":"var it = iterEvenIntegersSeq();\nvar v = it.next().value\nv = it.next().value\nv = it.next().value\n","iterEvery":"var arr = array2iterator( [ 1, 1, 1, 1, 0 ] );\nvar bool = iterEvery( arr )\n","iterEveryBy":"var arr = array2iterator( [ 1, 1, 1, 1, 1 ] );\nfunction fcn( v ) { return ( v > 0 ); };\nvar bool = iterEveryBy( arr, fcn )\n","iterExp":"var it = iterExp( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterExp2":"var r = random.iterators.uniform( -50.0, 50.0 );\nvar it = iterExp2( r );\nvar v = it.next().value\nv = it.next().value\n","iterExp10":"var r = random.iterators.uniform( -50.0, 50.0 );\nvar it = iterExp10( r );\nvar v = it.next().value\nv = it.next().value\n","iterExpit":"var r = random.iterators.uniform( 0.0, 1.0 );\nvar it = iterExpit( r );\nvar v = it.next().value\nv = it.next().value\n","iterExpm1":"var r = random.iterators.uniform( -5.0, 5.0 );\nvar it = iterExpm1( r );\nvar v = it.next().value\nv = it.next().value\n","iterExpm1rel":"var r = random.iterators.uniform( -50.0, 50.0 );\nvar it = iterExpm1rel( r );\nvar v = it.next().value\nv = it.next().value\n","iterFactorial":"var it = iterFactorial( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterFactorialln":"var it = iterFactorialln( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterFactorialsSeq":"var it = iterFactorialsSeq();\nvar v = it.next().value\nv = it.next().value\nv = it.next().value\n","iterFibonacciSeq":"var it = iterFibonacciSeq();\nvar v = it.next().value\nv = it.next().value\n","iterFifthPowersSeq":"var it = iterFifthPowersSeq();\nvar v = it.next().value\nv = it.next().value\nv = it.next().value\n","iterFill":"var it = iterFill( random.iterators.randu(), 3.14, 0, 2 );\nvar r = it.next().value\nr = it.next().value\nr = it.next().value\n","iterFilter":"function f( v ) { return ( v > 2 ); };\nvar it1 = array2iterator( [ 1, 3, 2, 4 ] );\nvar it2 = iterFilter( it1, f );\nvar v = it2.next().value\nv = it2.next().value\n","iterFilterMap":"function f( v ) { if ( v > 2 ) { return v * 10 }; };\nvar it1 = array2iterator( [ 1, 3, 2, 4 ] );\nvar it2 = iterFilterMap( it1, f );\nvar v = it2.next().value\nv = it2.next().value\n","iterFirst":"var arr = array2iterator( [ 1, 0, 0, 0, 0 ] );\nvar v = iterFirst( arr )\n","iterFlatTopPulse":"var it = iterFlatTopPulse();\nvar v = it.next().value\nv = it.next().value\n","iterFloor":"var it = iterFloor( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterFloor2":"var it = iterFloor2( random.iterators.uniform( -100.0, 100.0 ) );\nvar r = it.next().value\nr = it.next().value\n","iterFloor10":"var it = iterFloor10( random.iterators.uniform( -100.0, 100.0 ) );\nvar r = it.next().value\nr = it.next().value\n","iterFlow":"var o = {};\no.head = iterHead;\no.some = iterSome;\nvar fiter = iterFlow( o )\n","iterForEach":"function f( v ) { if ( v !== v ) { throw new Error( 'beep' ); } };\nvar it = iterForEach( random.iterators.randu(), f );\nvar r = it.next().value\nr = it.next().value\n","iterFourthPowersSeq":"var it = iterFourthPowersSeq();\nvar v = it.next().value\nv = it.next().value\nv = it.next().value\n","iterFresnelc":"var r = random.iterators.uniform( 0.0, 10.0 );\nvar it = iterFresnelc( r );\nvar v = it.next().value\nv = it.next().value\n","iterFresnels":"var r = random.iterators.uniform( 0.0, 10.0 );\nvar it = iterFresnels( r );\nvar v = it.next().value\nv = it.next().value\n","iterGamma":"var it = iterGamma( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterGamma1pm1":"var r = random.iterators.uniform( -5.0, 5.0 );\nvar it = iterGamma1pm1( r );\nvar v = it.next().value\nv = it.next().value\n","iterGammaln":"var it = iterGammaln( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterHacovercos":"var r = random.iterators.uniform( 0.0, 6.28 );\nvar it = iterHacovercos( r );\nvar v = it.next().value\nv = it.next().value\n","iterHacoversin":"var r = random.iterators.uniform( 0.0, 6.28 );\nvar it = iterHacoversin( r );\nvar v = it.next().value\nv = it.next().value\n","iterHannPulse":"var it = iterHannPulse();\nvar v = it.next().value\nv = it.next().value\n","iterHavercos":"var r = random.iterators.uniform( 0.0, 6.28 );\nvar it = iterHavercos( r );\nvar v = it.next().value\nv = it.next().value\n","iterHaversin":"var r = random.iterators.uniform( 0.0, 6.28 );\nvar it = iterHaversin( r );\nvar v = it.next().value\nv = it.next().value\n","iterHead":"var it = iterHead( random.iterators.randu(), 5 );\nvar r = it.next().value\nr = it.next().value\n","iterIncrspace":"var it = iterIncrspace( 0, 101, 2 );\nvar v = it.next().value\nv = it.next().value\n","iterIntegersSeq":"var it = iterIntegersSeq();\nvar v = it.next().value\nv = it.next().value\nv = it.next().value\n","iterIntersection":"var it1 = array2iterator( [ 1, 2, 1, 2, 4 ] );\nvar it2 = array2iterator( [ 1, 2, 5, 2, 3 ] );\nvar it = iterIntersection( it1, it2 );\nvar v = it.next().value\nv = it.next().value\nvar bool = it.next().done\n","iterIntersectionByHash":"var it1 = array2iterator( [ 1, 2, 1, 2, 4 ] );\nvar it2 = array2iterator( [ 1, 2, 5, 2, 3 ] );\nfunction f( v ) { return v.toString(); };\nvar it = iterIntersectionByHash( it1, it2, f );\nvar v = it.next().value\nv = it.next().value\nvar bool = it.next().done\n","iterInv":"var it = iterInv( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterLanczosPulse":"var it = iterLanczosPulse();\nvar v = it.next().value\nv = it.next().value\n","iterLast":"var arr = array2iterator( [ 0, 0, 0, 0, 1 ] );\nvar v = iterLast( arr )\n","iterLength":"var arr = array2iterator( [ 0, 0, 0, 0, 1 ] );\nvar len = iterLength( arr )\n","iterLinspace":"var it = iterLinspace( 0, 99, 100 );\nvar v = it.next().value\nv = it.next().value\n","iterLn":"var it = iterLn( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterLog":"var x = random.iterators.uniform( 0.0, 100.0 );\nvar y = random.iterators.uniform( 0.0, 10.0 );\nvar it = iterLog( x, y );\nvar r = it.next().value\nr = it.next().value\n","iterLog1mexp":"var it = iterLog1mexp( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterLog1p":"var it = iterLog1p( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterLog1pexp":"var it = iterLog1pexp( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterLog2":"var it = iterLog2( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterLog10":"var it = iterLog10( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterLogit":"var r = random.iterators.uniform( 0.0, 1.0 );\nvar it = iterLogit( r );\nvar v = it.next().value\nv = it.next().value\n","iterLogspace":"var it = iterLogspace( 0, 3, 4 );\nvar v = it.next().value\nv = it.next().value\n","iterLucasSeq":"var it = iterLucasSeq();\nvar v = it.next().value\nv = it.next().value\n","iterMap":"function f( v ) { return v * 10.0; };\nvar it = iterMap( random.iterators.randu(), f );\nvar r = it.next().value\nr = it.next().value\n","iterMapN":"var it1 = array2iterator( [ 1.0, 2.0 ] );\nvar it2 = array2iterator( [ 3.0, 4.0 ] );\nfunction fcn( x, y ) { return x + y; };\nvar it = iterMapN( it1, it2, fcn );\nvar v = it.next().value\nv = it.next().value\nvar bool = it.next().done\n","itermax":"var arr = array2iterator( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar m = itermax( arr )\n","itermaxabs":"var arr = array2iterator( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar m = itermaxabs( arr )\n","itermean":"var arr = array2iterator( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar m = itermean( arr )\n","itermeanabs":"var arr = array2iterator( [ 1.0, -2.0, -3.0, 4.0 ] );\nvar m = itermeanabs( arr )\n","itermeanabs2":"var arr = array2iterator( [ 1.0, -2.0, -3.0, 4.0 ] );\nvar m = itermeanabs2( arr )\n","itermidrange":"var arr = array2iterator( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar v = itermidrange( arr )\n","itermin":"var arr = array2iterator( [ 1.0, -2.0, -3.0, 4.0 ] );\nvar m = itermin( arr )\n","iterminabs":"var arr = array2iterator( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar m = iterminabs( arr )\n","itermmax":"var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\nvar it = itermmax( arr, 3 );\nvar m = it.next().value\nm = it.next().value\nm = it.next().value\nm = it.next().value\n","itermmaxabs":"var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\nvar it = itermmaxabs( arr, 3 );\nvar m = it.next().value\nm = it.next().value\nm = it.next().value\nm = it.next().value\n","itermmean":"var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\nvar it = itermmean( arr, 3 );\nvar m = it.next().value\nm = it.next().value\nm = it.next().value\nm = it.next().value\n","itermmeanabs":"var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\nvar it = itermmeanabs( arr, 3 );\nvar m = it.next().value\nm = it.next().value\nm = it.next().value\nm = it.next().value\n","itermmeanabs2":"var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\nvar it = itermmeanabs2( arr, 3 );\nvar m = it.next().value\nm = it.next().value\nm = it.next().value\nm = it.next().value\n","itermmidrange":"var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\nvar it = itermmidrange( arr, 3 );\nvar v = it.next().value\nv = it.next().value\nv = it.next().value\nv = it.next().value\n","itermmin":"var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\nvar it = itermmin( arr, 3 );\nvar m = it.next().value\nm = it.next().value\nm = it.next().value\nm = it.next().value\n","itermminabs":"var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\nvar it = itermminabs( arr, 3 );\nvar m = it.next().value\nm = it.next().value\nm = it.next().value\nm = it.next().value\n","iterMod":"var it1 = array2iterator( [ 3.0, 2.0 ] );\nvar it2 = array2iterator( [ 1.0, 4.0 ] );\nvar it = iterMod( it1, it2 );\nvar v = it.next().value\nv = it.next().value\nvar bool = it.next().done\n","itermprod":"var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\nvar it = itermprod( arr, 3 );\nvar p = it.next().value\np = it.next().value\np = it.next().value\np = it.next().value\n","itermrange":"var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\nvar it = itermrange( arr, 3 );\nvar m = it.next().value\nm = it.next().value\nm = it.next().value\nm = it.next().value\n","itermsum":"var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\nvar it = itermsum( arr, 3 );\nvar s = it.next().value\ns = it.next().value\ns = it.next().value\ns = it.next().value\n","itermsumabs":"var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\nvar it = itermsumabs( arr, 3 );\nvar s = it.next().value\ns = it.next().value\ns = it.next().value\ns = it.next().value\n","itermsumabs2":"var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\nvar it = itermsumabs2( arr, 3 );\nvar s = it.next().value\ns = it.next().value\ns = it.next().value\ns = it.next().value\n","iterMultiply":"var it1 = array2iterator( [ 1.0, 2.0 ] );\nvar it2 = array2iterator( [ 3.0, 4.0 ] );\nvar it = iterMultiply( it1, it2 );\nvar v = it.next().value\nv = it.next().value\nvar bool = it.next().done\n","iterNegaFibonacciSeq":"var it = iterNegaFibonacciSeq();\nvar v = it.next().value\nv = it.next().value\n","iterNegaLucasSeq":"var it = iterNegaLucasSeq();\nvar v = it.next().value\nv = it.next().value\n","iterNegativeEvenIntegersSeq":"var it = iterNegativeEvenIntegersSeq();\nvar v = it.next().value\nv = it.next().value\n","iterNegativeIntegersSeq":"var it = iterNegativeIntegersSeq();\nvar v = it.next().value\nv = it.next().value\n","iterNegativeOddIntegersSeq":"var it = iterNegativeOddIntegersSeq();\nvar v = it.next().value\nv = it.next().value\n","iterNone":"var arr = array2iterator( [ 0, 0, 0, 0, 1 ] );\nvar bool = iterNone( arr )\n","iterNoneBy":"var arr = array2iterator( [ 1, 1, 1, 1, 1 ] );\nfunction fcn( v ) { return ( v <= 0 ); };\nvar bool = iterNoneBy( arr, fcn )\n","iterNonFibonacciSeq":"var it = iterNonFibonacciSeq();\nvar v = it.next().value\nv = it.next().value\n","iterNonNegativeEvenIntegersSeq":"var it = iterNonNegativeEvenIntegersSeq();\nvar v = it.next().value\nv = it.next().value\n","iterNonNegativeIntegersSeq":"var it = iterNonNegativeIntegersSeq();\nvar v = it.next().value\nv = it.next().value\n","iterNonPositiveEvenIntegersSeq":"var it = iterNonPositiveEvenIntegersSeq();\nvar v = it.next().value\nv = it.next().value\n","iterNonPositiveIntegersSeq":"var it = iterNonPositiveIntegersSeq();\nvar v = it.next().value\nv = it.next().value\n","iterNonSquaresSeq":"var it = iterNonSquaresSeq();\nvar v = it.next().value\nv = it.next().value\nv = it.next().value\n","iterNth":"var arr = array2iterator( [ 0, 0, 1, 0, 0 ] );\nvar v = iterNth( arr, 3 )\n","iterOddIntegersSeq":"var it = iterOddIntegersSeq();\nvar v = it.next().value\nv = it.next().value\nv = it.next().value\n","iterPeriodicSinc":"var it = iterPeriodicSinc( 7 );\nvar v = it.next().value\nv = it.next().value\n","iterPipeline":"var it1 = iterThunk( iterHead, 100 );\nfunction f( r ) { return ( r > 0.95 ); };\nvar it2 = iterThunk( iterSomeBy, 5, f );\nvar p = iterPipeline( it1, it2 );\nvar bool = p( random.iterators.randu() )\n","iterPop":"var it1 = array2iterator( [ 1, 2 ] );\nvar it2 = iterPop( it1 );\nvar v = it2.next().value\nvar bool = it2.next().done\n","iterPositiveEvenIntegersSeq":"var it = iterPositiveEvenIntegersSeq();\nvar v = it.next().value\nv = it.next().value\n","iterPositiveIntegersSeq":"var it = iterPositiveIntegersSeq();\nvar v = it.next().value\nv = it.next().value\n","iterPositiveOddIntegersSeq":"var it = iterPositiveOddIntegersSeq();\nvar v = it.next().value\nv = it.next().value\n","iterPow":"var x = random.iterators.uniform( 0.0, 2.0 );\nvar y = random.iterators.uniform( -2.0, 2.0 );\nvar it = iterPow( x, y );\nvar r = it.next().value\nr = it.next().value\n","iterPrimesSeq":"var it = iterPrimesSeq();\nvar v = it.next().value\nv = it.next().value\nv = it.next().value\n","iterprod":"var arr = array2iterator( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar s = iterprod( arr )\n","iterPulse":"var it = iterPulse();\nvar v = it.next().value\nv = it.next().value\n","iterPush":"var it1 = array2iterator( [ 1, 2 ] );\nvar it2 = iterPush( it1, 3, 4 );\nvar v = it2.next().value\nv = it2.next().value\nv = it2.next().value\nv = it2.next().value\nvar bool = it2.next().done\n","iterRad2deg":"var r = random.iterators.uniform( 0.0, 6.28 );\nvar it = iterRad2deg( r );\nvar v = it.next().value\nv = it.next().value\n","iterRamp":"var it = iterRamp( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterrange":"var arr = array2iterator( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar v = iterrange( arr )\n","iterReject":"function f( v ) { return ( v > 2 ); };\nvar it1 = array2iterator( [ 1, 3, 2, 4 ] );\nvar it2 = iterReject( it1, f );\nvar v = it2.next().value\nv = it2.next().value\n","iterReplicate":"var it1 = array2iterator( [ 1, 2, 3, 4 ] );\nvar it2 = iterReplicate( it1, 2 );\nvar v = it2.next().value\nv = it2.next().value\nv = it2.next().value\nv = it2.next().value\n","iterReplicateBy":"var it1 = array2iterator( [ 1, 2, 3, 4 ] );\nfunction f( v, i ) { return i + 1; };\nvar it2 = iterReplicateBy( it1, f );\nvar v = it2.next().value\nv = it2.next().value\nv = it2.next().value\nv = it2.next().value\nv = it2.next().value\nv = it2.next().value\nv = it2.next().value\n","iterRound":"var it = iterRound( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterRound2":"var it = iterRound2( random.iterators.uniform( -100.0, 100.0 ) );\nvar r = it.next().value\nr = it.next().value\n","iterRound10":"var it = iterRound10( random.iterators.uniform( -100.0, 100.0 ) );\nvar r = it.next().value\nr = it.next().value\n","iterRsqrt":"var it = iterRsqrt( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterSawtoothWave":"var it = iterSawtoothWave();\nvar v = it.next().value\nv = it.next().value\n","iterShift":"var it1 = array2iterator( [ 1, 2 ] );\nvar it2 = iterShift( it1 );\nvar v = it2.next().value\nvar bool = it2.next().done\n","iterSignum":"var it = iterSignum( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterSin":"var it = iterSin( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterSinc":"var r = random.iterators.uniform( -5.0, 5.0 );\nvar it = iterSinc( r );\nvar v = it.next().value\nv = it.next().value\n","iterSineWave":"var it = iterSineWave();\nvar v = it.next().value\nv = it.next().value\n","iterSinh":"var r = random.iterators.uniform( -5.0, 5.0 );\nvar it = iterSinh( r );\nvar v = it.next().value\nv = it.next().value\n","iterSinpi":"var it = iterSinpi( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterSlice":"var it = iterSlice( random.iterators.randu(), 5, 10 );\nvar r = it.next().value\nr = it.next().value\n","iterSome":"var arr = array2iterator( [ 0, 0, 1, 1, 1 ] );\nvar bool = iterSome( arr, 3 )\n","iterSomeBy":"var arr = array2iterator( [ 1, 1, 0, 0, 1 ] );\nfunction fcn( v ) { return ( v > 0 ); };\nvar bool = iterSomeBy( arr, 3, fcn )\n","iterSpence":"var r = random.iterators.uniform( 0.0, 100.0 );\nvar it = iterSpence( r );\nvar v = it.next().value\nv = it.next().value\n","iterSqrt":"var it = iterSqrt( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterSqrt1pm1":"var r = random.iterators.uniform( 0.0, 100.0 );\nvar it = iterSqrt1pm1( r );\nvar v = it.next().value\nv = it.next().value\n","iterSquaredTriangularSeq":"var it = iterSquaredTriangularSeq();\nvar v = it.next().value\nv = it.next().value\nv = it.next().value\n","iterSquaresSeq":"var it = iterSquaresSeq();\nvar v = it.next().value\nv = it.next().value\nv = it.next().value\n","iterSquareWave":"var it = iterSquareWave();\nvar v = it.next().value\nv = it.next().value\n","iterstdev":"var arr = array2iterator( [ 2.0, -5.0 ] );\nvar m = iterstdev( arr )\n","iterStep":"var it = iterStep( 0, 2, 10 );\nvar v = it.next().value\nv = it.next().value\n","iterStrided":"var arr = array2iterator( [ 0, 1, 2, 3, 4, 5, 6 ] );\nvar it = iterStrided( arr, 2, 1 );\nvar r = it.next().value\nr = it.next().value\n","iterStridedBy":"var arr = array2iterator( [ 0, 1, 2, 3, 4, 5, 6 ] );\nfunction stride( v, i ) { return (i % 10)+1; };\nvar it = iterStridedBy( arr, stride );\nvar r = it.next().value\nr = it.next().value\nr = it.next().value\n","iterSubtract":"var it1 = array2iterator( [ 1.0, 5.0 ] );\nvar it2 = array2iterator( [ 3.0, 4.0 ] );\nvar it = iterSubtract( it1, it2 );\nvar v = it.next().value\nv = it.next().value\nvar bool = it.next().done\n","itersum":"var arr = array2iterator( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar s = itersum( arr )\n","itersumabs":"var arr = array2iterator( [ -1.0, 2.0, -3.0, 4.0 ] );\nvar s = itersumabs( arr )\n","itersumabs2":"var arr = array2iterator( [ -1.0, 2.0, -3.0, 4.0 ] );\nvar s = itersumabs2( arr )\n","iterTan":"var r = random.iterators.uniform( -1.57, 1.57 );\nvar it = iterTan( r );\nvar v = it.next().value\nv = it.next().value\n","iterTanh":"var r = random.iterators.uniform( -4.0, 4.0 );\nvar it = iterTanh( r );\nvar v = it.next().value\nv = it.next().value\n","iterThunk":"var fcn = iterThunk( iterSome, 3 );\nvar arr = array2iterator( [ 0, 0, 1, 1, 1 ] );\nvar bool = fcn( arr )\n","iterTriangleWave":"var it = iterTriangleWave();\nvar v = it.next().value\nv = it.next().value\n","iterTriangularSeq":"var it = iterTriangularSeq();\nvar v = it.next().value\nv = it.next().value\nv = it.next().value\n","iterTribonnaciSeq":"var it = iterTribonnaciSeq();\nvar v = it.next().value\nv = it.next().value\n","iterTrigamma":"var r = random.iterators.uniform( 0.01, 50.0 );\nvar it = iterTrigamma( r );\nvar v = it.next().value\nv = it.next().value\n","iterTrunc":"var it = iterTrunc( random.iterators.randu() );\nvar r = it.next().value\nr = it.next().value\n","iterTrunc2":"var it = iterTrunc2( random.iterators.uniform( -100.0, 100.0 ) );\nvar r = it.next().value\nr = it.next().value\n","iterTrunc10":"var it = iterTrunc10( random.iterators.uniform( -100.0, 100.0 ) );\nvar r = it.next().value\nr = it.next().value\n","iterUnion":"var it1 = array2iterator( [ 1, 2, 1, 2, 4 ] );\nvar it2 = array2iterator( [ 1, 2, 5, 2, 3 ] );\nvar it = iterUnion( it1, it2 );\nvar v = it.next().value\nv = it.next().value\nv = it.next().value\nv = it.next().value\nv = it.next().value\nvar bool = it.next().done\n","iterUnique":"var it1 = array2iterator( [ 1, 2, 1, 2, 4 ] );\nvar it2 = iterUnique( it1 );\nvar v = it2.next().value\nv = it2.next().value\nv = it2.next().value\nvar bool = it2.next().done\n","iterUniqueBy":"var it1 = array2iterator( [ 1, 2, 1, 2, 4 ] );\nfunction f( a, b ) { return ( a !== b ); };\nvar it2 = iterUniqueBy( it1, f );\nvar v = it2.next().value\nv = it2.next().value\nv = it2.next().value\nvar bool = it2.next().done\n","iterUniqueByHash":"var it1 = array2iterator( [ 1, 2, 1, 2, 4 ] );\nfunction f( v ) { return v.toString(); };\nvar it2 = iterUniqueByHash( it1, f );\nvar v = it2.next().value\nv = it2.next().value\nv = it2.next().value\nvar bool = it2.next().done\n","iterUnitspace":"var it = iterUnitspace( 0, 99 );\nvar v = it.next().value\nv = it.next().value\n","iterUnshift":"var it1 = array2iterator( [ 1, 2 ] );\nvar it2 = iterUnshift( it1, 3, 4 );\nvar v = it2.next().value\nv = it2.next().value\nv = it2.next().value\nv = it2.next().value\nvar bool = it2.next().done\n","iterUntilEach":"function predicate( v ) { return v !== v };\nfunction f( v ) { if ( v !== v ) { throw new Error( 'beep' ); } };\nvar it = iterUntilEach( random.iterators.randu(), predicate, f );\nvar r = it.next().value\nr = it.next().value\n","itervariance":"var arr = array2iterator( [ 2.0, -5.0 ] );\nvar s2 = itervariance( arr )\n","iterVercos":"var r = random.iterators.uniform( 0.0, 6.28 );\nvar it = iterVercos( r );\nvar v = it.next().value\nv = it.next().value\n","iterVersin":"var r = random.iterators.uniform( 0.0, 6.28 );\nvar it = iterVersin( r );\nvar v = it.next().value\nv = it.next().value\n","iterWhileEach":"function predicate( v ) { return v === v };\nfunction f( v ) { if ( v !== v ) { throw new Error( 'beep' ); } };\nvar it = iterWhileEach( random.iterators.randu(), predicate, f );\nvar r = it.next().value\nr = it.next().value\n","iterZeta":"var r = random.iterators.uniform( 1.1, 50.0 );\nvar it = iterZeta( r );\nvar v = it.next().value\nv = it.next().value\n","joinStream":"var s = joinStream();\ns.write( 'a' );\ns.write( 'b' );\ns.write( 'c' );\ns.end();\n","joinStream.factory":"var opts = { 'highWaterMark': 64 };\nvar createStream = joinStream.factory( opts );\nvar s = createStream();\ns.write( 'a' );\ns.write( 'b' );\ns.write( 'c' );\ns.end();\n","joinStream.objectMode":"var s = joinStream.objectMode();\ns.write( { 'value': 'a' } );\ns.write( { 'value': 'b' } );\ns.write( { 'value': 'c' } );\ns.end();\n","kde2d":"var x = [ 1, 3, 5, 6, 21, 23, 16, 17, 20, 10 ];\nvar y = [ 0.40, 0.20, 0.20, 0.15, 0.05, 0.55, 0.6, 0.33, 0.8, 0.41 ];\nvar out = kde2d( x, y )\n","kebabcase":"var out = kebabcase( 'Hello World!' )\nout = kebabcase( 'I am a tiny little teapot' )\n","keyBy":"function toKey( v ) { return v.a; };\nvar arr = [ { 'a': 1 }, { 'a': 2 } ];\nkeyBy( arr, toKey )\n","keyByRight":"function toKey( v ) { return v.a; };\nvar arr = [ { 'a': 1 }, { 'a': 2 } ];\nkeyByRight( arr, toKey )\n","keysIn":"function Foo() { this.beep = 'boop'; return this; };\nFoo.prototype.foo = 'bar';\nvar obj = new Foo();\nvar keys = keysIn( obj )\n","kruskalTest":"var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\nvar y = [ 3.8, 2.7, 4.0, 2.4 ];\nvar z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\nvar out = kruskalTest( x, y, z )\nvar arr = [ 2.9, 3.0, 2.5, 2.6, 3.2,\n 3.8, 2.7, 4.0, 2.4,\n 2.8, 3.4, 3.7, 2.2, 2.0\n ];\nvar groups = [\n 'a', 'a', 'a', 'a', 'a',\n 'b', 'b', 'b', 'b',\n 'c', 'c', 'c', 'c', 'c'\n ];\nout = kruskalTest( arr, { 'groups': groups } )\n","kstest":"var rnorm = base.random.normal.factory({ 'seed': 4839 } );\nvar x = new Array( 100 );\nfor ( var i = 0; i < 100; i++ ) { x[ i ] = rnorm( 3.0, 1.0 ); }\nvar out = kstest( x, 'normal', 0.0, 1.0 )\nout = kstest( x, 'normal', 3.0, 1.0 )\nrunif = base.random.uniform.factory( 0.0, 1.0, { 'seed': 8798 } )\nx = new Array( 100 );\nfor ( i = 0; i < x.length; i++ ) { x[ i ] = runif(); }\nout = kstest( x, 'uniform', 0.0, 1.0 )\nout.print()\nout = kstest( x, 'uniform', 0.0, 1.0, { 'alpha': 0.1 } )\nrunif = base.random.uniform.factory( 0.0, 1.0, { 'seed': 8798 } );\nx = new Array( 100 );\nfor ( i = 0; i < x.length; i++ ) { x[ i ] = runif(); }\nout = kstest( x, 'uniform', 0.0, 1.0, { 'alternative': 'less' } )\nout = kstest( x, 'uniform', 0.0, 1.0, { 'alternative': 'greater' } )\nx = [ 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9 ];\nout = kstest( x, 'uniform', 0.0, 1.0, { 'sorted': true } )\n","last":"var out = last( 'beep' )\nout = last( 'Boop', 2 )\nout = last( 'foo bar', 3 )\n","leveneTest":"var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\nvar y = [ 3.8, 2.7, 4.0, 2.4 ];\nvar z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\nvar out = leveneTest( x, y, z )\nvar arr = [ 2.9, 3.0, 2.5, 2.6, 3.2,\n 3.8, 2.7, 4.0, 2.4,\n 2.8, 3.4, 3.7, 2.2, 2.0\n ];\nvar groups = [\n 'a', 'a', 'a', 'a', 'a',\n 'b', 'b', 'b', 'b',\n 'c', 'c', 'c', 'c', 'c'\n ];\nout = leveneTest( arr, { 'groups': groups } )\n","LinkedList":"var list = LinkedList();\nlist.push( 'foo' ).push( 'bar' );\nlist.length\nlist.pop()\nlist.length\nlist.pop()\nlist.length\n","linspace":"var arr = linspace( 0.0, 100.0, 6 )\narr = linspace( 0.0, 100.0, 5, { 'endpoint': false } )\narr = linspace( 0.0, 100.0, 6, { 'dtype': 'generic' } )\n","linspace.assign":"var arr = [ 0, 0, 0, 0, 0, 0 ];\nvar out = linspace.assign( 0, 100, arr )\nvar bool = ( arr === out )\narr = [ 0, 0, 0, 0, 0 ];\nout = linspace.assign( 0, 100, arr, { 'endpoint': false } )\n","LIU_NEGATIVE_OPINION_WORDS_EN":"var list = LIU_NEGATIVE_OPINION_WORDS_EN()\n","LIU_POSITIVE_OPINION_WORDS_EN":"var list = LIU_POSITIVE_OPINION_WORDS_EN()\n","LN_HALF":"LN_HALF\n","LN_PI":"LN_PI\n","LN_SQRT_TWO_PI":"LN_SQRT_TWO_PI\n","LN_TWO_PI":"LN_TWO_PI\n","LN2":"LN2\n","LN10":"LN10\n","LOG2E":"LOG2E\n","LOG10E":"LOG10E\n","logspace":"var arr = logspace( 0, 2, 6 )\n","lowercase":"var out = lowercase( 'bEEp' )\n","lowercaseKeys":"var obj = { 'A': 1, 'B': 2 };\nvar out = lowercaseKeys( obj )\n","lowess":"var x = new Float64Array( 100 );\nvar y = new Float64Array( x.length );\nfor ( var i = 0; i < x.length; i++ ) {\n x[ i ] = i;\n y[ i ] = ( 0.5*i ) + ( 10.0*base.random.randn() );\n }\nvar out = lowess( x, y );\nvar yhat = out.y;\nvar h = Plot( [ x, x ], [ y, yhat ] );\nh.lineStyle = [ 'none', '-' ];\nh.symbols = [ 'closed-circle', 'none' ];\nh.view( 'window' );\n","lpad":"var out = lpad( 'a', 5 )\nout = lpad( 'beep', 10, 'b' )\nout = lpad( 'boop', 12, 'beep' )\n","ltrim":"var out = ltrim( ' \\r\\n\\t  Beep \\t\\t\\n  ' )\n","ltrimN":"var out = ltrimN( '  abc  ', 2 )\nvar out = ltrimN( '!!!abc!!!', 2, '!' )\n","MALE_FIRST_NAMES_EN":"var list = MALE_FIRST_NAMES_EN()\n","map":"var f = naryFunction( base.abs, 1 );\nvar arr = [ -1, -2, -3, -4, -5, -6 ];\nvar out = map( arr, f )\narr = array( arr, { 'shape': [ 2, 3 ] } );\nout = map( arr, f );\nvar v = out.get( 1, 1 )\n","map.assign":"var f = naryFunction( base.abs, 1 );\nvar arr = [ -1, -2, -3, -4, -5, -6 ];\nvar out = [ 0, 0, 0, 0, 0, 0 ];\nmap.assign( arr, out, f );\nout\nvar opts = { 'shape': [ 2, 3 ] };\narr = array( arr, opts );\nout = array( [ 0, 0, 0, 0, 0, 0 ], opts );\nmap.assign( arr, out, f );\nvar v = out.get( 1, 1 )\n","map2":"var f = naryFunction( base.add, 2 );\nvar x = [ 1, 2, 3, 4, 5, 6 ];\nvar y = [ 1, 1, 1, 1, 1, 1 ];\nvar out = map2( x, y, f )\nx = array( x, { 'shape': [ 2, 3 ] } );\ny = array( y, { 'shape': [ 2, 3 ] } );\nout = map2( x, y, f );\nvar v = out.get( 1, 1 )\n","map2.assign":"var f = naryFunction( base.add, 2 );\nvar x = [ 1, 2, 3, 4, 5, 6 ];\nvar y = [ 1, 1, 1, 1, 1, 1 ];\nvar out = [ 0, 0, 0, 0, 0, 0 ];\nmap2.assign( x, y, out, f );\nout\nvar opts = { 'shape': [ 2, 3 ] };\nx = array( x, opts );\ny = array( y, opts );\nout = array( [ 0, 0, 0, 0, 0, 0 ], opts );\nmap2.assign( x, y, out, f );\nvar v = out.get( 1, 1 )\n","map2d":"var f = naryFunction( base.abs, 1 );\nvar arr = [ [ -1, -2, -3 ], [ -4, -5, -6 ] ];\nvar out = map2d( arr, f );\nout[ 0 ]\nout[ 1 ]\n","map2Right":"var f = naryFunction( base.add, 2 );\nvar x = [ 1, 2, 3, 4, 5, 6 ];\nvar y = [ 1, 1, 1, 1, 1, 1 ];\nvar out = map2Right( x, y, f )\nx = array( x, { 'shape': [ 2, 3 ] } );\ny = array( y, { 'shape': [ 2, 3 ] } );\nout = map2Right( x, y, f );\nvar v = out.get( 1, 1 )\n","map2Right.assign":"var f = naryFunction( base.add, 2 );\nvar x = [ 1, 2, 3, 4, 5, 6 ];\nvar y = [ 1, 1, 1, 1, 1, 1 ];\nvar out = [ 0, 0, 0, 0, 0, 0 ];\nmap2Right.assign( x, y, out, f );\nout\nvar opts = { 'shape': [ 2, 3 ] };\nx = array( x, opts );\ny = array( y, opts );\nout = array( [ 0, 0, 0, 0, 0, 0 ], opts );\nmap2Right.assign( x, y, out, f );\nvar v = out.get( 1, 1 )\n","map3d":"var f = naryFunction( base.abs, 1 );\nvar arr = [ [ [ -1, -2, -3 ] ], [ [ -4, -5, -6 ] ] ];\nvar out = map3d( arr, f );\nout[ 0 ][ 0 ]\nout[ 1 ][ 0 ]\n","map4d":"var f = naryFunction( base.abs, 1 );\nvar arr = [ [ [ [ -1, -2, -3 ] ] ], [ [ [ -4, -5, -6 ] ] ] ];\nvar out = map4d( arr, f );\nout[ 0 ][ 0 ][ 0 ]\nout[ 1 ][ 0 ][ 0 ]\n","map5d":"var f = naryFunction( base.abs, 1 );\nvar arr = [ [ [ [ [ -1, -2, -3 ] ] ] ], [ [ [ [ -4, -5, -6 ] ] ] ] ];\nvar out = map5d( arr, f );\nout[ 0 ][ 0 ][ 0 ][ 0 ]\nout[ 1 ][ 0 ][ 0 ][ 0 ]\n","mapArguments":"function foo( a, b, c ) { return [ a, b, c ]; };\nfunction clbk( v ) { return v * 2; };\nvar bar = mapArguments( foo, clbk );\nvar out = bar( 1, 2, 3 )\n","mapFun":"function fcn( i ) { return i; };\nvar arr = mapFun( fcn, 5 )\n","mapFunAsync":"function fcn( i, next ) {\n setTimeout( onTimeout, 0 );\n function onTimeout() {\n     next( null, i );\n }\n };\nfunction done( error, arr ) {\n if ( error ) {\n     throw error;\n }\n console.log( arr );\n };\nmapFunAsync( fcn, 10, done )\nfunction fcn( i, next ) {\n setTimeout( onTimeout, 0 );\n function onTimeout() {\n     next( null, i );\n }\n };\nfunction done( error, arr ) {\n if ( error ) {\n     throw error;\n }\n console.log( arr );\n };\nvar opts = { 'limit': 2 };\nmapFunAsync( fcn, 10, opts, done )\nfunction fcn( i, next ) {\n setTimeout( onTimeout, 0 );\n function onTimeout() {\n     next( null, i );\n }\n };\nfunction done( error, arr ) {\n if ( error ) {\n     throw error;\n }\n console.log( arr );\n };\nvar opts = { 'series': true };\nmapFunAsync( fcn, 10, opts, done )\n","mapFunAsync.factory":"function fcn( i, next ) {\n setTimeout( onTimeout, 0 );\n function onTimeout() {\n     next( null, i );\n }\n };\nvar opts = { 'series': true };\nvar f = mapFunAsync.factory( opts, fcn );\nfunction done( error, arr ) {\n if ( error ) {\n     throw error;\n }\n console.log( arr );\n };\nf( 10, done )\n","mapKeys":"function transform( key, value ) { return key + value; };\nvar obj = { 'a': 1, 'b': 2 };\nvar out = mapKeys( obj, transform )\n","mapKeysAsync":"function transform( key, value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     next( null, key+':'+value );\n }\n };\nfunction done( error, out ) {\n if ( error ) {\n     throw error;\n }\n console.log( out );\n };\nvar obj = { 'a': 1, 'b': 2 };\nmapKeysAsync( obj, transform, done )\nfunction transform( key, value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     next( null, key+':'+value );\n }\n };\nfunction done( error, out ) {\n if ( error ) {\n     throw error;\n }\n console.log( out );\n };\nvar opts = { 'limit': 2 };\nvar obj = { 'a': 1, 'b': 2, 'c': 3 };\nmapKeysAsync( obj, opts, transform, done )\nfunction transform( key, value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     next( null, key+':'+value );\n }\n };\nfunction done( error, out ) {\n if ( error ) {\n     throw error;\n }\n console.log( out );\n };\nvar opts = { 'series': true };\nvar obj = { 'a': 1, 'b': 2, 'c': 3 };\nmapKeysAsync( obj, opts, transform, done )\n","mapKeysAsync.factory":"function transform( key, value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     next( null, key+':'+value );\n }\n };\nvar opts = { 'series': true };\nvar f = mapKeysAsync.factory( opts, transform );\nfunction done( error, out ) {\n if ( error ) {\n     throw error;\n }\n console.log( out );\n };\nvar obj = { 'a': 1, 'b': 2, 'c': 3 };\nf( obj, done )\nobj = { 'beep': 'boop' };\nf( obj, done )\n","mapReduce":"var f1 = naryFunction( base.abs, 1 );\nvar f2 = naryFunction( base.add, 2 );\nvar arr = [ -1.0, -2.0, -3.0, -4.0, -5.0, -6.0 ];\nvar out = mapReduce( arr, 0.0, f1, f2 )\narr = array( arr, { 'shape': [ 2, 3 ] } );\nout = mapReduce( arr, 0.0, f1, f2 )\n","mapReduceRight":"var f1 = naryFunction( base.abs, 1 );\nvar f2 = naryFunction( base.add, 2 );\nvar arr = [ -1.0, -2.0, -3.0, -4.0, -5.0, -6.0 ];\nvar out = mapReduceRight( arr, 0.0, f1, f2 )\narr = array( arr, { 'shape': [ 2, 3 ] } );\nout = mapReduceRight( arr, 0.0, f1, f2 )\n","mapRight":"var f = naryFunction( base.abs, 1 );\nvar arr = [ -1, -2, -3, -4, -5, -6 ];\nvar out = mapRight( arr, f )\narr = array( arr, { 'shape': [ 2, 3 ] } );\nout = mapRight( arr, f );\nvar v = out.get( 1, 1 )\n","mapRight.assign":"var f = naryFunction( base.abs, 1 );\nvar arr = [ -1, -2, -3, -4, -5, -6 ];\nvar out = [ 0, 0, 0, 0, 0, 0 ];\nmapRight.assign( arr, out, f );\nout\nvar opts = { 'shape': [ 2, 3 ] };\narr = array( arr, opts );\nout = array( [ 0, 0, 0, 0, 0, 0 ], opts );\nmapRight.assign( arr, out, f );\nvar v = out.get( 1, 1 )\n","mapValues":"function transform( value, key ) { return key + value; };\nvar obj = { 'a': 1, 'b': 2 };\nvar out = mapValues( obj, transform )\n","mapValuesAsync":"function transform( value, key, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     next( null, key+':'+value );\n }\n };\nfunction done( error, out ) {\n if ( error ) {\n     throw error;\n }\n console.log( out );\n };\nvar obj = { 'a': 1, 'b': 2 };\nmapValuesAsync( obj, transform, done )\nfunction transform( value, key, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     next( null, key+':'+value );\n }\n };\nfunction done( error, out ) {\n if ( error ) {\n     throw error;\n }\n console.log( out );\n };\nvar opts = { 'limit': 2 };\nvar obj = { 'a': 1, 'b': 2, 'c': 3 };\nmapValuesAsync( obj, opts, transform, done )\nfunction transform( value, key, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     next( null, key+':'+value );\n }\n };\nfunction done( error, out ) {\n if ( error ) {\n     throw error;\n }\n console.log( out );\n };\nvar opts = { 'series': true };\nvar obj = { 'a': 1, 'b': 2, 'c': 3 };\nmapValuesAsync( obj, opts, transform, done )\n","mapValuesAsync.factory":"function transform( value, key, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     next( null, key+':'+value );\n }\n };\nvar opts = { 'series': true };\nvar f = mapValuesAsync.factory( opts, transform );\nfunction done( error, out ) {\n if ( error ) {\n     throw error;\n }\n console.log( out );\n };\nvar obj = { 'a': 1, 'b': 2, 'c': 3 };\nf( obj, done )\nobj = { 'beep': 'boop' };\nf( obj, done )\n","maskArguments":"function foo( a, b ) { return [ a, b ]; };\nvar bar = maskArguments( foo, [ 1, 0, 1 ] );\nvar out = bar( 1, 2, 3 )\n","MAX_ARRAY_LENGTH":"MAX_ARRAY_LENGTH\n","MAX_TYPED_ARRAY_LENGTH":"MAX_TYPED_ARRAY_LENGTH\n","maybeBroadcastArray":"var x = array( [ [ 1, 2 ], [ 3, 4 ] ] )\nvar sh = x.shape\nvar y = maybeBroadcastArray( x, [ 3, 2, 2 ] )\nsh = y.shape\nvar v = y.get( 0, 0, 0 )\nv = y.get( 0, 0, 1 )\nv = y.get( 0, 1, 0 )\nv = y.get( 0, 1, 1 )\nv = y.get( 1, 0, 0 )\nv = y.get( 1, 1, 0 )\nv = y.get( 2, 0, 0 )\nv = y.get( 2, 1, 1 )\n","maybeBroadcastArrays":"var x = array( [ [ 1, 2 ], [ 3, 4 ] ] )\nvar sh = x.shape\nvar y = ndzeros( [ 3, 2, 2 ] )\nvar out = maybeBroadcastArrays( [ x, y ] )\nvar bx = out[ 0 ]\nsh = bx.shape\nvar v = bx.get( 0, 0, 0 )\nv = bx.get( 0, 0, 1 )\nv = bx.get( 0, 1, 0 )\nv = bx.get( 0, 1, 1 )\nv = bx.get( 1, 0, 0 )\nv = bx.get( 1, 1, 0 )\nv = bx.get( 2, 0, 0 )\nv = bx.get( 2, 1, 1 )\n","memoize":"function factorial( n ) {\n var prod;\n var i;\n prod = 1;\n for ( i = n; i > 1; i-- ) {\n     prod *= i;\n }\n return prod;\n };\nvar memoized = memoize( factorial );\nvar v = memoized( 5 )\nv = memoized( 5 )\n","merge":"var target = { 'a': 'beep' };\nvar source = { 'a': 'boop', 'b': 'bap' };\nvar out = merge( target, source )\nvar bool = ( out === target )\n","merge.factory":"var opts = {\n 'level': 100,\n 'copy': true,\n 'override': true,\n 'extend': true\n };\nvar merge = merge.factory( opts )\nmerge = merge.factory( { 'level': 2 } );\nvar target = {\n '1': { 'a': 'beep', '2': { '3': null, 'b': [ 5, 6, 7 ] } }\n };\nvar source = {\n '1': { 'b': 'boop', '2': { '3': [ 1, 2, 3 ] } }\n };\nvar out = merge( target, source )\nmerge = merge.factory( { 'copy': false } );\ntarget = {};\nsource = { 'a': [ 1, 2, 3 ] };\nout = merge( target, source );\nvar bool = ( out.a === source.a )\nmerge = merge.factory( { 'override': false } );\ntarget = { 'a': 'beep', 'b': 'boop' };\nsource = { 'a': null, 'c': 'bop' };\nout = merge( target, source )\nfunction strategy( a, b, key ) {\n // a => target value\n // b => source value\n // key => object key\n if ( key === 'a' ) {\n     return b;\n }\n if ( key === 'b' ) {\n     return a;\n }\n return 'bebop';\n };\nmerge = merge.factory( { 'override': strategy } );\ntarget = { 'a': 'beep', 'b': 'boop', 'c': 1234 };\nsource = { 'a': null, 'b': {}, 'c': 'bop' };\nout = merge( target, source )\nmerge = merge.factory( { 'extend': false } );\ntarget = { 'a': 'beep', 'b': 'boop' };\nsource = { 'b': 'hello', 'c': 'world' };\nout = merge( target, source )\n","MILLISECONDS_IN_DAY":"var days = 3.14;\nvar ms = days * MILLISECONDS_IN_DAY\n","MILLISECONDS_IN_HOUR":"var hrs = 3.14;\nvar ms = hrs * MILLISECONDS_IN_HOUR\n","MILLISECONDS_IN_MINUTE":"var mins = 3.14;\nvar ms = mins * MILLISECONDS_IN_MINUTE\n","MILLISECONDS_IN_SECOND":"var secs = 3.14;\nvar ms = secs * MILLISECONDS_IN_SECOND\n","MILLISECONDS_IN_WEEK":"var weeks = 3.14;\nvar ms = weeks * MILLISECONDS_IN_WEEK\n","MINARD_NAPOLEONS_MARCH":"var data = MINARD_NAPOLEONS_MARCH();\nvar army = data.army\nvar cities = data.cities\nvar labels = data.labels\nvar river = data.river\nvar t = data.temperature\n","MINUTES_IN_DAY":"var days = 3.14;\nvar mins = days * MINUTES_IN_DAY\n","MINUTES_IN_HOUR":"var hrs = 3.14;\nvar mins = hrs * MINUTES_IN_HOUR\n","MINUTES_IN_WEEK":"var wks = 3.14;\nvar mins = wks * MINUTES_IN_WEEK\n","minutesInMonth":"var num = minutesInMonth()\nnum = minutesInMonth( 2 )\nnum = minutesInMonth( 2, 2016 )\nnum = minutesInMonth( 2, 2017 )\nnum = minutesInMonth( 'feb', 2016 )\nnum = minutesInMonth( 'february', 2016 )\n","minutesInYear":"var num = minutesInYear()\nnum = minutesInYear( 2016 )\nnum = minutesInYear( 2017 )\n","MOBY_DICK":"var data = MOBY_DICK()\n","MONTH_NAMES_EN":"var list = MONTH_NAMES_EN()\n","MONTHS_IN_YEAR":"var yrs = 3.14;\nvar mons = yrs * MONTHS_IN_YEAR\n","moveProperty":"var obj1 = { 'a': 'b' };\nvar obj2 = {};\nvar bool = moveProperty( obj1, 'a', obj2 )\nbool = moveProperty( obj1, 'c', obj2 )\n","MultiSlice":"var s = new Slice( 2, 10 );\nvar ms = new MultiSlice( 2, s, 1 );\n","MultiSlice.prototype.ndims":"var s = new Slice( 2, 10 );\nvar ms = new MultiSlice( 2, s, 1 );\nms.ndims\n","MultiSlice.prototype.data":"var s = new Slice( 2, 10 );\nvar ms = new MultiSlice( 2, s, 1 );\nms.data\n","MultiSlice.prototype.toString":"var s = new Slice( 2, 10 );\nvar ms = new MultiSlice( 2, s, 1 );\nms.toString()\n","MultiSlice.prototype.toJSON":"var s = new Slice( 2, 10, 1 );\nvar ms = new MultiSlice( 2, s );\nms.toJSON()\n","namedtypedtuple":"var opts = {};\nopts.name = 'Point';\nvar factory = namedtypedtuple( [ 'x', 'y' ], opts );\nvar tuple = factory();\n","NAN":"NAN\n","naryFunction":"function foo( a, b, c ) { return [ a, b, c ]; };\nvar bar = naryFunction( foo, 2 );\nvar out = bar( 1, 2, 3 )\n","nativeClass":"var str = nativeClass( 'a' )\nstr = nativeClass( 5 )\nfunction Beep(){};\nstr = nativeClass( new Beep() )\n","ndarray":"var b = [ 1.0, 2.0, 3.0, 4.0 ]; // underlying data buffer\nvar d = [ 2, 2 ]; // shape\nvar s = [ 2, 1 ]; // strides\nvar o = 0; // index offset\nvar arr = ndarray( 'generic', b, d, s, o, 'row-major' )\nvar v = arr.get( 1, 1 )\nv = arr.iget( 3 )\narr.set( 1, 1, 40.0 );\narr.get( 1, 1 )\narr.iset( 3, 99.0 );\narr.get( 1, 1 )\n","ndarray.prototype.byteLength":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = ndarray( 'float64', b, d, s, o, 'row-major' );\nvar sz = arr.byteLength\n","ndarray.prototype.BYTES_PER_ELEMENT":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = ndarray( 'float64', b, d, s, o, 'row-major' );\nvar sz = arr.BYTES_PER_ELEMENT\n","ndarray.prototype.data":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = ndarray( 'float64', b, d, s, o, 'row-major' );\nvar buf = arr.data\n","ndarray.prototype.dtype":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = ndarray( 'float64', b, d, s, o, 'row-major' );\nvar dt = arr.dtype\n","ndarray.prototype.flags":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = ndarray( 'float64', b, d, s, o, 'row-major' );\nvar fl = arr.flags\n","ndarray.prototype.length":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = ndarray( 'float64', b, d, s, o, 'row-major' );\nvar len = arr.length\n","ndarray.prototype.ndims":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = ndarray( 'float64', b, d, s, o, 'row-major' );\nvar n = arr.ndims\n","ndarray.prototype.offset":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = ndarray( 'float64', b, d, s, o, 'row-major' );\nvar v = arr.offset\n","ndarray.prototype.order":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = ndarray( 'float64', b, d, s, o, 'row-major' );\nvar ord = arr.order\n","ndarray.prototype.shape":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = ndarray( 'float64', b, d, s, o, 'row-major' );\nvar sh = arr.shape\n","ndarray.prototype.strides":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = ndarray( 'float64', b, d, s, o, 'row-major' );\nvar st = arr.strides\n","ndarray.prototype.get":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = ndarray( 'float64', b, d, s, o, 'row-major' );\nvar v = arr.get( 1, 1 )\n","ndarray.prototype.iget":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = ndarray( 'float64', b, d, s, o, 'row-major' );\nvar v = arr.iget( 3 )\n","ndarray.prototype.set":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = ndarray( 'float64', b, d, s, o, 'row-major' );\narr.set( 1, 1, -4.0 );\narr.get( 1, 1 )\n","ndarray.prototype.iset":"var b = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = ndarray( 'float64', b, d, s, o, 'row-major' );\narr.iset( 3, -4.0 );\narr.iget( 3 )\n","ndarray.prototype.toString":"var b = [ 1, 2, 3, 4 ];\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = ndarray( 'generic', b, d, s, o, 'row-major' );\narr.toString()\n","ndarray.prototype.toJSON":"var b = [ 1, 2, 3, 4 ];\nvar d = [ 2, 2 ];\nvar s = [ 2, 1 ];\nvar o = 0;\nvar arr = ndarray( 'generic', b, d, s, o, 'row-major' );\narr.toJSON()\n","ndarray2array":"var arr = array( [ [ 1, 2 ], [ 3, 4 ] ] );\nvar out = ndarray2array( arr )\n","ndarrayCastingModes":"var out = ndarrayCastingModes()\n","ndarrayDataBuffer":"var opts = { 'dtype': 'float64' };\nvar out = ndarrayDataBuffer( ndzeros( [ 3, 3, 3 ], opts ) )\n","ndarrayDataType":"var opts = { 'dtype': 'float64' };\nvar dt = ndarrayDataType( ndzeros( [ 3, 3, 3 ], opts ) )\n","ndarrayDataTypes":"var out = ndarrayDataTypes()\nout = ndarrayDataTypes( 'floating_point' )\n","ndarrayDispatch":"var t = [ 'float64', 'float64', 'float32', 'float32' ];\nvar d = [ base.abs, base.absf ];\nvar f = ndarrayDispatch( base.ndarrayUnary, t, d, 2, 1, 1 );\nvar xbuf = new Float64Array( [ -1.0, -2.0, -3.0, -4.0 ] );\nvar x = ndarray( 'float64', xbuf, [ 4 ], [ 1 ], 0, 'row-major' );\nvar ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar y = ndarray( 'float64', ybuf, [ 4 ], [ 1 ], 0, 'row-major' );\nf( x, y );\nybuf\n","ndarrayFlag":"var out = ndarrayFlag( ndzeros( [ 3, 3, 3 ] ), 'READONLY' )\n","ndarrayFlags":"var out = ndarrayFlags( ndzeros( [ 3, 3, 3 ] ) )\n","ndarrayIndexModes":"var out = ndarrayIndexModes()\n","ndarrayMinDataType":"var dt = ndarrayMinDataType( 3.141592653589793 )\ndt = ndarrayMinDataType( 3 )\ndt = ndarrayMinDataType( -3 )\ndt = ndarrayMinDataType( '-3' )\n","ndarrayMostlySafeCasts":"var out = ndarrayMostlySafeCasts( 'float32' )\n","ndarrayNextDataType":"var out = ndarrayNextDataType( 'float32' )\n","ndarrayOffset":"var n = ndarrayOffset( ndzeros( [ 3, 3, 3 ] ) )\n","ndarrayOrder":"var opts = { 'order': 'row-major' };\nvar dt = ndarrayOrder( ndzeros( [ 3, 3, 3 ], opts ) )\n","ndarrayOrders":"var out = ndarrayOrders()\n","ndarrayPromotionRules":"var out = ndarrayPromotionRules( 'float32', 'int32' )\n","ndarraySafeCasts":"var out = ndarraySafeCasts( 'float32' )\n","ndarraySameKindCasts":"var out = ndarraySameKindCasts( 'float32' )\n","ndarrayShape":"var out = ndarrayShape( ndzeros( [ 3, 3, 3 ] ) )\n","ndarrayStride":"var out = ndarrayStride( ndzeros( [ 3, 3, 3 ] ), 0 )\n","ndarrayStrides":"var out = ndarrayStrides( ndzeros( [ 3, 3, 3 ] ) )\n","ndat":"var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\nndat( x, 0, 1 )\nndat( x, 1, 0 )\n","ndempty":"var arr = ndempty( [ 2, 2 ] )\nvar sh = arr.shape\nvar dt = arr.dtype\n","ndemptyLike":"var x = base.ndzeros( 'float64', [ 2, 2 ], 'row-major' )\nvar sh = x.shape\nvar dt = x.dtype\nvar y = ndemptyLike( x )\nsh = y.shape\ndt = y.dtype\n","ndims":"var n = ndims( ndzeros( [ 3, 3, 3 ] ) )\n","nditerColumnEntries":"var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\nvar it = nditerColumnEntries( x );\nvar v = it.next().value;\nv[ 0 ]\nndarray2array( v[ 1 ] )\nv = it.next().value;\nv[ 0 ]\nndarray2array( v[ 1 ] )\n","nditerColumns":"var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\nvar it = nditerColumns( x );\nvar v = it.next().value;\nndarray2array( v )\nv = it.next().value;\nndarray2array( v )\n","nditerEntries":"var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\nvar it = nditerEntries( x );\nvar v = it.next().value\nv = it.next().value\n","nditerIndices":"var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\nvar it = nditerIndices( x.shape );\nvar v = it.next().value\nv = it.next().value\n","nditerMatrices":"var x = array( [ [ [ 1, 2 ], [ 3, 4 ] ] ] );\nvar it = nditerMatrices( x );\nvar v = it.next().value;\nndarray2array( v )\n","nditerMatrixEntries":"var x = array( [ [ [ 1, 2 ], [ 3, 4 ] ] ] );\nvar it = nditerMatrixEntries( x );\nvar v = it.next().value;\nv[ 0 ]\nndarray2array( v[ 1 ] )\n","nditerRowEntries":"var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\nvar it = nditerRowEntries( x );\nvar v = it.next().value;\nv[ 0 ]\nndarray2array( v[ 1 ] )\nv = it.next().value;\nv[ 0 ]\nndarray2array( v[ 1 ] )\n","nditerRows":"var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\nvar it = nditerRows( x );\nvar v = it.next().value;\nndarray2array( v )\nv = it.next().value;\nndarray2array( v )\n","nditerValues":"var x = array( [ [ 1, 2 ], [ 3, 4 ] ] );\nvar it = nditerValues( x );\nvar v = it.next().value\nv = it.next().value\n","ndslice":"var x = array( [ [ 1, 2 ], [ 3, 4 ] ] )\nx.shape\nvar s = new MultiSlice( null, 1 )\nvar y = ndslice( x, s )\ny.shape\nndarray2array( y )\n","ndsliceAssign":"var y = ndzeros( [ 2, 2 ] )\nvar x = scalar2ndarray( 3.0 )\nvar s = new MultiSlice( null, 1 )\nvar out = ndsliceAssign( x, y, s )\nvar bool = ( out === y )\nndarray2array( y )\n","ndsliceDimension":"var x = array( [ [ 1, 2 ], [ 3, 4 ] ] )\nx.shape\nvar y = ndsliceDimension( x, 1, 1 )\ny.shape\nndarray2array( y )\n","ndsliceDimensionFrom":"var x = array( [ [ 1, 2 ], [ 3, 4 ] ] )\nx.shape\nvar y = ndsliceDimensionFrom( x, 1, 1 )\ny.shape\nndarray2array( y )\n","ndsliceDimensionTo":"var x = array( [ [ 1, 2 ], [ 3, 4 ] ] )\nx.shape\nvar y = ndsliceDimensionTo( x, 1, 1 )\ny.shape\nndarray2array( y )\n","ndsliceFrom":"var x = array( [ [ 1, 2 ], [ 3, 4 ] ] )\nx.shape\nvar y = ndsliceFrom( x, 0, 1 )\ny.shape\nndarray2array( y )\n","ndsliceTo":"var x = array( [ [ 1, 2 ], [ 3, 4 ] ] )\nx.shape\nvar y = ndsliceTo( x, 1, 1 )\ny.shape\nndarray2array( y )\n","ndzeros":"var arr = ndzeros( [ 2, 2 ] )\nvar sh = arr.shape\nvar dt = arr.dtype\n","ndzerosLike":"var x = base.ndzeros( 'float64', [ 2, 2 ], 'row-major' )\nvar sh = x.shape\nvar dt = x.dtype\nvar y = ndzerosLike( x )\nsh = y.shape\ndt = y.dtype\n","nextGraphemeClusterBreak":"var out = nextGraphemeClusterBreak( 'last man standing', 4 )\nout = nextGraphemeClusterBreak( 'presidential election', 8 )\nout = nextGraphemeClusterBreak( 'अनुच्छेद', 1 )\nout = nextGraphemeClusterBreak( '🌷' )\n","nextTick":"function f() { console.log( 'beep' ); };\nnextTick( f )\n","NIGHTINGALES_ROSE":"var data = NIGHTINGALES_ROSE()\n","NINF":"NINF\n","NODE_VERSION":"NODE_VERSION\n","none":"var arr = [ 0, 0, 0, 0, 0 ];\nvar bool = none( arr )\n","noneBy":"function negative( v ) { return ( v < 0 ); };\nvar arr = [ 1, 2, 3, 4 ];\nvar bool = noneBy( arr, negative )\n","noneByAsync":"function predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, false );\n }\n };\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar arr = [ 3000, 2500, 1000 ];\nnoneByAsync( arr, predicate, done )\nfunction predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, false );\n }\n };\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar opts = { 'limit': 2 };\nvar arr = [ 3000, 2500, 1000 ];\nnoneByAsync( arr, opts, predicate, done )\nfunction predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, false );\n }\n };\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar opts = { 'series': true };\nvar arr = [ 3000, 2500, 1000 ];\nnoneByAsync( arr, opts, predicate, done )\n","noneByAsync.factory":"function predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, false );\n }\n };\nvar opts = { 'series': true };\nvar f = noneByAsync.factory( opts, predicate );\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar arr = [ 3000, 2500, 1000 ];\nf( arr, done )\narr = [ 2000, 1500, 1000 ];\nf( arr, done )\n","noneByRight":"function positive( v ) { return ( v > 0 ); };\nvar arr = [ -1, -2, -3, -4 ];\nvar bool = noneByRight( arr, positive )\n","noneByRightAsync":"function predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, false );\n }\n };\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar arr = [ 1000, 2500, 3000 ];\nnoneByRightAsync( arr, predicate, done )\nfunction predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, false );\n }\n };\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar opts = { 'limit': 2 };\nvar arr = [ 1000, 2500, 3000 ];\nnoneByRightAsync( arr, opts, predicate, done )\nfunction predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, false );\n }\n };\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar opts = { 'series': true };\nvar arr = [ 1000, 2500, 3000 ];\nnoneByRightAsync( arr, opts, predicate, done )\n","noneByRightAsync.factory":"function predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, false );\n }\n };\nvar opts = { 'series': true };\nvar f = noneByRightAsync.factory( opts, predicate );\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar arr = [ 1000, 2500, 3000 ];\nf( arr, done )\narr = [ 1000, 1500, 2000 ];\nf( arr, done )\n","noneInBy":"function negative( v ) { return ( v < 0 ); };\nvar obj = { 'a': 1, 'b': 2, 'c': 4 };\nvar bool = noneInBy( obj, negative )\n","nonEnumerableProperties":"var obj = {};\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = false;\ndesc.writable = false;\ndesc.value = 'boop';\ndefineProperty( obj, 'beep', desc );\nvar props = nonEnumerableProperties( obj )\n","nonEnumerablePropertiesIn":"var props = nonEnumerablePropertiesIn( [] )\n","nonEnumerablePropertyNames":"var obj = {};\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = false;\ndesc.writable = true;\ndesc.value = 'boop';\ndefineProperty( obj, 'beep', desc );\nvar keys = nonEnumerablePropertyNames( obj )\n","nonEnumerablePropertyNamesIn":"var obj = {};\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = false;\ndesc.writable = true;\ndesc.value = 'boop';\ndefineProperty( obj, 'beep', desc );\nvar keys = nonEnumerablePropertyNamesIn( obj )\n","nonEnumerablePropertySymbols":"var obj = {};\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = false;\ndesc.writable = true;\ndesc.value = 'boop';\nvar sym = ( Symbol ) ? Symbol( 'beep' ) : 'beep';\ndefineProperty( obj, sym, desc );\nvar symbols = nonEnumerablePropertySymbols( obj )\n","nonEnumerablePropertySymbolsIn":"var obj = {};\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = false;\ndesc.writable = true;\ndesc.value = 'boop';\nvar sym = ( Symbol ) ? Symbol( 'beep' ) : 'beep';\ndefineProperty( obj, sym, desc );\nvar symbols = nonEnumerablePropertySymbolsIn( obj )\n","noneOwnBy":"function isUnderage( v ) { return ( v < 18 ); };\nvar obj = { 'a': 11, 'b': 12, 'c': 22 };\nvar bool = noneOwnBy( obj, isUnderage )\n","nonIndexKeys":"function Foo() { this.beep = 'boop'; this[0] = 3.14; return this; };\nFoo.prototype.foo = 'bar';\nvar obj = new Foo();\nvar keys = nonIndexKeys( obj )\n","noop":"noop();\n","now":"var ts = now()\n","NUM_CPUS":"NUM_CPUS\n","num2words":"var out = num2words( 123 )\nout = num2words( 16.31 )\nout = num2words( 123, { 'lang': 'de' } )\n","Number":"var v = new Number( 5 )\n","numel":"var n = numel( ndzeros( [ 3, 3, 3 ] ) )\n","numelDimension":"var out = numelDimension( ndzeros( [ 4, 2, 3 ] ), 0 )\n","numGraphemeClusters":"var out = numGraphemeClusters( 'beep' )\nout = numGraphemeClusters( '🌷' )\n","Object":"var o = new Object( null )\no = new Object( 5.0 )\no = new Object( 'beep' )\n","Object.assign":"var o = Object.assign( {}, { 'a': 1 }, { 'b': 2 } )\n","Object.create":"var o = Object.create( {}, { 'a': { 'value': 1 } } )\n","Object.defineProperties":"var o = Object.defineProperties( {}, { 'a': { 'value': 1 } } )\n","Object.defineProperty":"var o = Object.defineProperty( {}, 'a', {\n","Object.entries":"var o = Object.entries( { 'a': 1, 'b': 2 } )\n","Object.freeze":"var o = Object.freeze( { 'a': 1 } )\n","Object.getOwnPropertyDescriptor":"var o = Object.getOwnPropertyDescriptor( { 'a': 1 }, 'a' )\n","Object.getOwnPropertyDescriptors":"var o = Object.getOwnPropertyDescriptors( { 'a': 1, 'b': 2 } )\n","Object.getOwnPropertyNames":"var o = Object.getOwnPropertyNames( { 'a': 1, 'b': 2 } )\n","Object.getOwnPropertySymbols":"var o = Object.getOwnPropertySymbols( { 'a': 1, 'b': 2 } )\n","Object.getPrototypeOf":"var o = Object.getPrototypeOf( { 'a': 1, 'b': 2 } )\n","Object.hasOwn":"var o = Object.hasOwn( { 'a': 1, 'b': 2 }, 'a' )\n","Object.is":"var o = Object.is( 1, 1 )\nvar o = Object.is( 1, '1' )\n","Object.isExtensible":"var o = Object.isExtensible( { 'a': 1 } )\n","Object.isFrozen":"var o = Object.isFrozen( { 'a': 1 } )\nvar o = Object.isFrozen( Object.freeze( { 'a': 1 } ) )\n","Object.isSealed":"var o = Object.isSealed( { 'a': 1 } )\nvar o = Object.isSealed( Object.seal( { 'a': 1 } ) )\n","Object.keys":"var o = Object.keys( { 'a': 1, 'b': 2 } )\n","Object.preventExtensions":"var o = Object.preventExtensions( { 'a': 1 } )\no.b = 2;\no\n","Object.seal":"var o = Object.seal( { 'a': 1 } )\no.b = 2;\no\ndelete o.a;\no\n","Object.setPrototypeOf":"var o = Object.setPrototypeOf( { 'a': 1 }, { 'b': 2 } )\no.b\n","Object.values":"var o = Object.values( { 'a': 1, 'b': 2 } )\n","Object.prototype.toLocaleString":"var o = Object.prototype.toLocaleString.call( { 'a': 1, 'b': 2 } )\n","Object.prototype.toString":"var o = Object.prototype.toString.call( { 'a': 1, 'b': 2 } )\n","Object.prototype.valueOf":"var o = Object.prototype.valueOf.call( { 'a': 1, 'b': 2 } )\n","Object.prototype.hasOwnProperty":"var o = Object.prototype.hasOwnProperty.call( { 'a': 1, 'b': 2 }, 'a' )\n","Object.prototype.isPrototypeOf":"var p = { 'a': 1 };\nvar o = { '__proto__': p };\nvar b = o.isPrototypeOf( p );\n","Object.prototype.propertyIsEnumerable":"var o = { 'a': 1, 'b': 2 };\nvar bool = Object.prototype.propertyIsEnumerable.call( o, 'a' )\n","Object.prototype.constructor":"var o = new Object( null );\nvar ctr = o.constructor;\n","objectEntries":"var obj = { 'beep': 'boop', 'foo': 'bar' };\nvar entries = objectEntries( obj )\n","objectEntriesIn":"function Foo() { this.beep = 'boop'; return this; };\nFoo.prototype.foo = 'bar';\nvar obj = new Foo();\nvar entries = objectEntriesIn( obj )\n","objectFromEntries":"var entries = [ [ 'beep', 'boop' ], [ 'foo', 'bar' ] ];\nvar obj = objectFromEntries( entries )\n","objectInverse":"var obj = { 'a': 'beep', 'b': 'boop' };\nvar out = objectInverse( obj )\nobj = { 'a': 'beep', 'b': 'beep' };\nout = objectInverse( obj )\nobj = {};\nobj.a = 'beep';\nobj.b = 'boop';\nobj.c = 'beep';\nout = objectInverse( obj, { 'duplicates': false } )\n","objectInverseBy":"function transform( key, value ) { return key + value; };\nvar obj = { 'a': 'beep', 'b': 'boop' };\nvar out = objectInverseBy( obj, transform )\nfunction transform( key, value ) { return value; };\nobj = { 'a': 'beep', 'b': 'beep' };\nout = objectInverseBy( obj, transform )\nobj = {};\nobj.a = 'beep';\nobj.b = 'boop';\nobj.c = 'beep';\nout = objectInverseBy( obj, { 'duplicates': false }, transform )\n","objectKeys":"function Foo() { this.beep = 'boop'; return this; };\nFoo.prototype.foo = 'bar';\nvar obj = new Foo();\nvar keys = objectKeys( obj )\n","objectValues":"var obj = { 'beep': 'boop', 'foo': 'bar' };\nvar vals = objectValues( obj )\n","objectValuesIn":"function Foo() { this.beep = 'boop'; return this; };\nFoo.prototype.foo = 'bar';\nvar obj = new Foo();\nvar values = objectValuesIn( obj )\n","omit":"var obj1 = { 'a': 1, 'b': 2 };\nvar obj2 = omit( obj1, 'b' )\n","omitBy":"function predicate( key, value ) { return ( value > 1 ); };\nvar obj1 = { 'a': 1, 'b': 2 };\nvar obj2 = omitBy( obj1, predicate )\n","open":"function onOpen( error, fd ) {\n if ( error ) {\n     console.error( error.message );\n } else {\n     close.sync( fd );\n }\n };\nopen( './beep/boop.txt', onOpen );\n","open.sync":"var fd = open.sync( './beep/boop.txt' );\nif ( !isError( fd ) ) { close.sync( fd ); };\n","openURL":"var out = openURL( 'https://google.com' );\n","ordinalize":"var out = ordinalize( '1' )\nout = ordinalize( 2, { 'suffixOnly': true } )\nout = ordinalize( '3', { 'lang': 'es' } )\n","PACE_BOSTON_HOUSE_PRICES":"var data = PACE_BOSTON_HOUSE_PRICES()\n","pad":"var out = pad( 'a', 5 )\nout = pad( 'a', 10, { 'lpad': 'b' } )\nout = pad( 'a', 12, { 'rpad': 'b' } )\nvar opts = { 'lpad': 'a', 'rpad': 'c' };\nout = pad( 'b', 11, opts )\nopts.centerRight = false;\nout = pad( 'b', 10, opts )\nopts.centerRight = true;\nout = pad( 'b', 10, opts )\nopts = { 'lpad': 'boop', 'rpad': 'woot' };\nout = pad( 'beep', 10, opts )\nout = pad( 'beep', 2 )\nopts = { 'lpad': 'b' };\nout = pad( 'beep', 2, opts )\nopts = { 'lpad': '@', 'rpad': '!' };\nout = pad( 'beep', 2, opts )\nout = pad( 'abcdef', 3, opts )\nopts.centerRight = true;\nout = pad( 'abcdef', 3, opts )\n","padjust":"var pvalues = [ 0.008, 0.03, 0.123, 0.6, 0.2 ];\nvar out = padjust( pvalues, 'bh' )\nout = padjust( pvalues, 'bonferroni' )\nout = padjust( pvalues, 'by' )\nout = padjust( pvalues, 'holm' )\nout = padjust( pvalues, 'hommel' )\n","papply":"function add( x, y ) { return x + y; };\nvar add2 = papply( add, 2 );\nvar sum = add2( 3 )\n","papplyRight":"function say( text, name ) { return text + ', ' + name + '.'; };\nvar toGrace = papplyRight( say, 'Grace Hopper' );\nvar str = toGrace( 'Hello' )\nstr = toGrace( 'Thank you' )\n","parallel":"function done( error ) { if ( error ) { throw error; } };\nvar files = [ './a.js', './b.js' ];\nparallel( files, done );\nvar opts = { 'workers': 8 };\nparallel( files, opts, done );\n","parseJSON":"var obj = parseJSON( '{\"beep\":\"boop\"}' )\nfunction reviver( key, value ) {\n if ( key === '' ) { return value; }\n if ( key === 'beep' ) { return value; }\n };\nvar str = '{\"beep\":\"boop\",\"a\":\"b\"}';\nvar out = parseJSON( str, reviver )\n","pascalcase":"var out = pascalcase( 'Hello World!' )\nout = pascalcase( 'beep boop' )\n","PATH_DELIMITER":"PATH_DELIMITER\nvar path = '/usr/bin:/bin:/usr/sbin';\nvar parts = path.split( PATH_DELIMITER )\npath = 'C:\\\\Windows\\\\system32;C:\\\\Windows';\nparts = path.split( PATH_DELIMITER )\n","PATH_DELIMITER_POSIX":"PATH_DELIMITER_POSIX\nvar PATH = '/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin';\nvar paths = PATH.split( PATH_DELIMITER_POSIX )\n","PATH_DELIMITER_WIN32":"PATH_DELIMITER_WIN32\nvar PATH = 'C:\\\\Windows\\\\system32;C:\\\\Windows;C:\\\\Program Files\\\\node\\\\';\nvar paths = PATH.split( PATH_DELIMITER_WIN32 )\n","PATH_SEP":"PATH_SEP\nvar parts = 'foo\\\\bar\\\\baz'.split( PATH_SEP )\nparts = 'foo/bar/baz'.split( PATH_SEP )\n","PATH_SEP_POSIX":"PATH_SEP_POSIX\nvar parts = 'foo/bar/baz'.split( PATH_SEP_POSIX )\n","PATH_SEP_WIN32":"PATH_SEP_WIN32\nvar parts = 'foo\\\\bar\\\\baz'.split( PATH_SEP_WIN32 )\n","pcorrtest":"var rho = 0.5;\nvar x = new Array( 300 );\nvar y = new Array( 300 );\nfor ( var i = 0; i < 300; i++ ) {\nx[ i ] = base.random.normal( 0.0, 1.0 );\ny[ i ] = ( rho * x[ i ] ) + base.random.normal( 0.0,\nbase.sqrt( 1.0 - (rho*rho) ) );\n }\nvar out = pcorrtest( x, y )\nvar table = out.print()\n","percentEncode":"var out = percentEncode( '☃' )\n","PHI":"PHI\n","PI":"PI\n","PI_SQUARED":"PI_SQUARED\n","pick":"var obj1 = { 'a': 1, 'b': 2 };\nvar obj2 = pick( obj1, 'b' )\n","pickArguments":"function foo( a, b ) { return [ a, b ]; };\nvar bar = pickArguments( foo, [ 0, 2 ] );\nvar out = bar( 1, 2, 3 )\n","pickBy":"function predicate( key, value ) {\n return ( value > 1 );\n };\nvar obj1 = { 'a': 1, 'b': 2 };\nvar obj2 = pickBy( obj1, predicate )\n","PINF":"PINF\n","pkg2alias":"var v = pkg2alias( '@stdlib/math/base/special/sin' )\nv = pkg2alias( '@stdlib/math-base-special-sin' )\n","pkg2related":"var v = pkg2related( '@stdlib/math/base/special/sin' )\nv = pkg2related( '@stdlib/math-base-special-sin' )\n","pkg2standalone":"var v = pkg2standalone( '@stdlib/math/base/special/sin' )\n","PLATFORM":"PLATFORM\n","plot":"var plot = plot()\nvar x = [[0.10, 0.20, 0.30]];\nvar y = [[0.52, 0.79, 0.64]];\nplot = plot( x, y )\n","Plot":"var plot = Plot()\nvar x = [[0.10, 0.20, 0.30]];\nvar y = [[0.52, 0.79, 0.64]];\nplot = Plot( x, y )\n","pluck":"var arr = [\n { 'a': 1, 'b': 2 },\n { 'a': 0.5, 'b': 3 }\n ];\nvar out = pluck( arr, 'a' )\narr = [\n { 'a': 1, 'b': 2 },\n { 'a': 0.5, 'b': 3 }\n ];\nout = pluck( arr, 'a', { 'copy': false } )\nvar bool = ( arr[ 0 ] === out[ 0 ] )\n","pop":"var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\nvar out = pop( arr )\narr = new Float64Array( [ 1.0, 2.0 ] );\nout = pop( arr )\narr = { 'length': 2, '0': 1.0, '1': 2.0 };\nout = pop( arr )\n","porterStemmer":"var out = porterStemmer( 'walking' )\nout = porterStemmer( 'walked' )\nout = porterStemmer( 'walks' )\nout = porterStemmer( '' )\n","prepend":"var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\narr = prepend( arr, [ 6.0, 7.0 ] )\narr = new Float64Array( [ 1.0, 2.0 ] );\narr = prepend( arr, [ 3.0, 4.0 ] )\narr = { 'length': 1, '0': 1.0 };\narr = prepend( arr, [ 2.0, 3.0 ] )\n","prevGraphemeClusterBreak":"var out = prevGraphemeClusterBreak( 'last man standing', 4 )\nout = prevGraphemeClusterBreak( 'presidential election', 8 )\nout = prevGraphemeClusterBreak( 'अनुच्छेद', 2 )\nout = prevGraphemeClusterBreak( '🌷', 1 )\n","PRIMES_100K":"var list = PRIMES_100K()\n","properties":"function Foo() { this.beep = 'boop'; return this; };\nFoo.prototype.foo = 'bar';\nvar obj = new Foo();\nvar props = properties( obj )\n","propertiesIn":"var props = propertiesIn( [] )\n","propertyDescriptor":"var obj = { 'a': 'b' };\nvar desc = propertyDescriptor( obj, 'a' )\n","propertyDescriptorIn":"var obj = { 'a': 'b' };\nvar desc = propertyDescriptorIn( obj, 'a' )\n","propertyDescriptors":"var obj = { 'a': 'b' };\nvar desc = propertyDescriptors( obj )\n","propertyDescriptorsIn":"function Foo() { this.beep = 'boop'; return this; };\nFoo.prototype.foo = 'bar';\nvar obj = new Foo();\nvar desc = propertyDescriptorsIn( obj )\n","propertyNames":"function Foo() { this.beep = 'boop'; return this; };\nFoo.prototype.foo = 'bar';\nvar obj = new Foo();\nvar keys = propertyNames( obj )\n","propertyNamesIn":"function Foo() { this.beep = 'boop'; return this; };\nFoo.prototype.foo = 'bar';\nvar obj = new Foo();\nvar keys = propertyNamesIn( obj )\n","propertySymbols":"var s = propertySymbols( {} )\n","propertySymbolsIn":"var s = propertySymbolsIn( [] )\n","Proxy":"function get( obj, prop ) { return obj[ prop ] * 2.0 };\nvar h = { 'get': get };\nvar p = new Proxy( {}, h );\np.a = 3.14;\np.a\n","Proxy.revocable":"function get( obj, prop ) { return obj[ prop ] * 2.0 };\nvar h = { 'get': get };\nvar p = Proxy.revocable( {}, h );\np.proxy.a = 3.14;\np.proxy.a\np.revoke();\n","push":"var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\narr = push( arr, 6.0, 7.0 )\narr = new Float64Array( [ 1.0, 2.0 ] );\narr = push( arr, 3.0, 4.0 )\narr = { 'length': 0 };\narr = push( arr, 1.0, 2.0 )\n","quarterOfYear":"var q = quarterOfYear( new Date() )\nq = quarterOfYear( 4 )\nq = quarterOfYear( 'June' )\nq = quarterOfYear( 'April' )\nq = quarterOfYear( 'apr' )\n","random.array.arcsine":"var out = random.array.arcsine( 3, 2.0, 5.0 )\n","random.array.arcsine.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.arcsine.assign( 2.0, 5.0, x )\nvar bool = ( out === x )\n","random.array.arcsine.factory":"var fcn = random.array.arcsine.factory();\nvar out = fcn( 3, 2.0, 5.0 )\nfcn = random.array.arcsine.factory( 2.0, 5.0 );\nout = fcn( 3 )\n","random.array.arcsine.PRNG":"var prng = random.array.arcsine.PRNG;\n","random.array.arcsine.seed":"var seed = random.array.arcsine.seed;\n","random.array.arcsine.seedLength":"var len = random.array.arcsine.seedLength;\n","random.array.arcsine.state":"var out = random.array.arcsine( 3, 2.0, 5.0 )\nvar state = random.array.arcsine.state\nout = random.array.arcsine( 3, 2.0, 5.0 )\nout = random.array.arcsine( 3, 2.0, 5.0 )\nrandom.array.arcsine.state = state;\nout = random.array.arcsine( 3, 2.0, 5.0 )\n","random.array.arcsine.stateLength":"var len = random.array.arcsine.stateLength;\n","random.array.arcsine.byteLength":"var sz = random.array.arcsine.byteLength;\n","random.array.bernoulli":"var out = random.array.bernoulli( 3, 0.5 )\n","random.array.bernoulli.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.bernoulli.assign( 0.5, x )\nvar bool = ( out === x )\n","random.array.bernoulli.factory":"var fcn = random.array.bernoulli.factory();\nvar out = fcn( 3, 0.5 )\nfcn = random.array.bernoulli.factory( 0.5 );\nout = fcn( 3 )\n","random.array.bernoulli.PRNG":"var prng = random.array.bernoulli.PRNG;\n","random.array.bernoulli.seed":"var seed = random.array.bernoulli.seed;\n","random.array.bernoulli.seedLength":"var len = random.array.bernoulli.seedLength;\n","random.array.bernoulli.state":"var out = random.array.bernoulli( 3, 0.5 )\nvar state = random.array.bernoulli.state\nout = random.array.bernoulli( 3, 0.5 )\nout = random.array.bernoulli( 3, 0.5 )\nrandom.array.bernoulli.state = state;\nout = random.array.bernoulli( 3, 0.5 )\n","random.array.bernoulli.stateLength":"var len = random.array.bernoulli.stateLength;\n","random.array.bernoulli.byteLength":"var sz = random.array.bernoulli.byteLength;\n","random.array.beta":"var out = random.array.beta( 3, 2.0, 5.0 )\n","random.array.beta.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.beta.assign( 2.0, 5.0, x )\nvar bool = ( out === x )\n","random.array.beta.factory":"var fcn = random.array.beta.factory();\nvar out = fcn( 3, 2.0, 5.0 )\nfcn = random.array.beta.factory( 2.0, 5.0 );\nout = fcn( 3 )\n","random.array.beta.PRNG":"var prng = random.array.beta.PRNG;\n","random.array.beta.seed":"var seed = random.array.beta.seed;\n","random.array.beta.seedLength":"var len = random.array.beta.seedLength;\n","random.array.beta.state":"var out = random.array.beta( 3, 2.0, 5.0 )\nvar state = random.array.beta.state\nout = random.array.beta( 3, 2.0, 5.0 )\nout = random.array.beta( 3, 2.0, 5.0 )\nrandom.array.beta.state = state;\nout = random.array.beta( 3, 2.0, 5.0 )\n","random.array.beta.stateLength":"var len = random.array.beta.stateLength;\n","random.array.beta.byteLength":"var sz = random.array.beta.byteLength;\n","random.array.betaprime":"var out = random.array.betaprime( 3, 2.0, 5.0 )\n","random.array.betaprime.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.betaprime.assign( 2.0, 5.0, x )\nvar bool = ( out === x )\n","random.array.betaprime.factory":"var fcn = random.array.betaprime.factory();\nvar out = fcn( 3, 2.0, 5.0 )\nfcn = random.array.betaprime.factory( 2.0, 5.0 );\nout = fcn( 3 )\n","random.array.betaprime.PRNG":"var prng = random.array.betaprime.PRNG;\n","random.array.betaprime.seed":"var seed = random.array.betaprime.seed;\n","random.array.betaprime.seedLength":"var len = random.array.betaprime.seedLength;\n","random.array.betaprime.state":"var out = random.array.betaprime( 3, 2.0, 5.0 )\nvar state = random.array.betaprime.state\nout = random.array.betaprime( 3, 2.0, 5.0 )\nout = random.array.betaprime( 3, 2.0, 5.0 )\nrandom.array.betaprime.state = state;\nout = random.array.betaprime( 3, 2.0, 5.0 )\n","random.array.betaprime.stateLength":"var len = random.array.betaprime.stateLength;\n","random.array.betaprime.byteLength":"var sz = random.array.betaprime.byteLength;\n","random.array.binomial":"var out = random.array.binomial( 3, 17, 0.5 )\n","random.array.binomial.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.binomial.assign( 17, 0.5, x )\nvar bool = ( out === x )\n","random.array.binomial.factory":"var fcn = random.array.binomial.factory();\nvar out = fcn( 3, 17, 0.5 )\nfcn = random.array.binomial.factory( 17, 0.5 );\nout = fcn( 3 )\n","random.array.binomial.PRNG":"var prng = random.array.binomial.PRNG;\n","random.array.binomial.seed":"var seed = random.array.binomial.seed;\n","random.array.binomial.seedLength":"var len = random.array.binomial.seedLength;\n","random.array.binomial.state":"var out = random.array.binomial( 3, 17, 0.5 )\nvar state = random.array.binomial.state\nout = random.array.binomial( 3, 17, 0.5 )\nout = random.array.binomial( 3, 17, 0.5 )\nrandom.array.binomial.state = state;\nout = random.array.binomial( 3, 17, 0.5 )\n","random.array.binomial.stateLength":"var len = random.array.binomial.stateLength;\n","random.array.binomial.byteLength":"var sz = random.array.binomial.byteLength;\n","random.array.cauchy":"var out = random.array.cauchy( 3, 2.0, 5.0 )\n","random.array.cauchy.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.cauchy.assign( 2.0, 5.0, x )\nvar bool = ( out === x )\n","random.array.cauchy.factory":"var fcn = random.array.cauchy.factory();\nvar out = fcn( 3, 2.0, 5.0 )\nfcn = random.array.cauchy.factory( 2.0, 5.0 );\nout = fcn( 3 )\n","random.array.cauchy.PRNG":"var prng = random.array.cauchy.PRNG;\n","random.array.cauchy.seed":"var seed = random.array.cauchy.seed;\n","random.array.cauchy.seedLength":"var len = random.array.cauchy.seedLength;\n","random.array.cauchy.state":"var out = random.array.cauchy( 3, 2.0, 5.0 )\nvar state = random.array.cauchy.state\nout = random.array.cauchy( 3, 2.0, 5.0 )\nout = random.array.cauchy( 3, 2.0, 5.0 )\nrandom.array.cauchy.state = state;\nout = random.array.cauchy( 3, 2.0, 5.0 )\n","random.array.cauchy.stateLength":"var len = random.array.cauchy.stateLength;\n","random.array.cauchy.byteLength":"var sz = random.array.cauchy.byteLength;\n","random.array.chi":"var out = random.array.chi( 3, 2.0 )\n","random.array.chi.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.chi.assign( 2.0, x )\nvar bool = ( out === x )\n","random.array.chi.factory":"var fcn = random.array.chi.factory();\nvar out = fcn( 3, 2.0 )\nfcn = random.array.chi.factory( 2.0 );\nout = fcn( 3 )\n","random.array.chi.PRNG":"var prng = random.array.chi.PRNG;\n","random.array.chi.seed":"var seed = random.array.chi.seed;\n","random.array.chi.seedLength":"var len = random.array.chi.seedLength;\n","random.array.chi.state":"var out = random.array.chi( 3, 2.0 )\nvar state = random.array.chi.state\nout = random.array.chi( 3, 2.0 )\nout = random.array.chi( 3, 2.0 )\nrandom.array.chi.state = state;\nout = random.array.chi( 3, 2.0 )\n","random.array.chi.stateLength":"var len = random.array.chi.stateLength;\n","random.array.chi.byteLength":"var sz = random.array.chi.byteLength;\n","random.array.chisquare":"var out = random.array.chisquare( 3, 2.0 )\n","random.array.chisquare.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.chisquare.assign( 2.0, x )\nvar bool = ( out === x )\n","random.array.chisquare.factory":"var fcn = random.array.chisquare.factory();\nvar out = fcn( 3, 2.0 )\nfcn = random.array.chisquare.factory( 2.0 );\nout = fcn( 3 )\n","random.array.chisquare.PRNG":"var prng = random.array.chisquare.PRNG;\n","random.array.chisquare.seed":"var seed = random.array.chisquare.seed;\n","random.array.chisquare.seedLength":"var len = random.array.chisquare.seedLength;\n","random.array.chisquare.state":"var out = random.array.chisquare( 3, 2.0 )\nvar state = random.array.chisquare.state\nout = random.array.chisquare( 3, 2.0 )\nout = random.array.chisquare( 3, 2.0 )\nrandom.array.chisquare.state = state;\nout = random.array.chisquare( 3, 2.0 )\n","random.array.chisquare.stateLength":"var len = random.array.chisquare.stateLength;\n","random.array.chisquare.byteLength":"var sz = random.array.chisquare.byteLength;\n","random.array.cosine":"var out = random.array.cosine( 3, 2.0, 5.0 )\n","random.array.cosine.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.cosine.assign( 2.0, 5.0, x )\nvar bool = ( out === x )\n","random.array.cosine.factory":"var fcn = random.array.cosine.factory();\nvar out = fcn( 3, 2.0, 5.0 )\nfcn = random.array.cosine.factory( 2.0, 5.0 );\nout = fcn( 3 )\n","random.array.cosine.PRNG":"var prng = random.array.cosine.PRNG;\n","random.array.cosine.seed":"var seed = random.array.cosine.seed;\n","random.array.cosine.seedLength":"var len = random.array.cosine.seedLength;\n","random.array.cosine.state":"var out = random.array.cosine( 3, 2.0, 5.0 )\nvar state = random.array.cosine.state\nout = random.array.cosine( 3, 2.0, 5.0 )\nout = random.array.cosine( 3, 2.0, 5.0 )\nrandom.array.cosine.state = state;\nout = random.array.cosine( 3, 2.0, 5.0 )\n","random.array.cosine.stateLength":"var len = random.array.cosine.stateLength;\n","random.array.cosine.byteLength":"var sz = random.array.cosine.byteLength;\n","random.array.discreteUniform":"var out = random.array.discreteUniform( 3, -10, 10 )\n","random.array.discreteUniform.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.discreteUniform.assign( -10, 10, x )\nvar bool = ( out === x )\n","random.array.discreteUniform.factory":"var fcn = random.array.discreteUniform.factory();\nvar out = fcn( 3, -10, 10 )\nfcn = random.array.discreteUniform.factory( -10, 10 );\nout = fcn( 3 )\n","random.array.discreteUniform.PRNG":"var prng = random.array.discreteUniform.PRNG;\n","random.array.discreteUniform.seed":"var seed = random.array.discreteUniform.seed;\n","random.array.discreteUniform.seedLength":"var len = random.array.discreteUniform.seedLength;\n","random.array.discreteUniform.state":"var out = random.array.discreteUniform( 3, -10, 10 )\nvar state = random.array.discreteUniform.state\nout = random.array.discreteUniform( 3, -10, 10 )\nout = random.array.discreteUniform( 3, -10, 10 )\nrandom.array.discreteUniform.state = state;\nout = random.array.discreteUniform( 3, -10, 10 )\n","random.array.discreteUniform.stateLength":"var len = random.array.discreteUniform.stateLength;\n","random.array.discreteUniform.byteLength":"var sz = random.array.discreteUniform.byteLength;\n","random.array.erlang":"var out = random.array.erlang( 3, 2, 5.0 )\n","random.array.erlang.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.erlang.assign( 2, 5.0, x )\nvar bool = ( out === x )\n","random.array.erlang.factory":"var fcn = random.array.erlang.factory();\nvar out = fcn( 3, 2, 5.0 )\nfcn = random.array.erlang.factory( 2, 5.0 );\nout = fcn( 3 )\n","random.array.erlang.PRNG":"var prng = random.array.erlang.PRNG;\n","random.array.erlang.seed":"var seed = random.array.erlang.seed;\n","random.array.erlang.seedLength":"var len = random.array.erlang.seedLength;\n","random.array.erlang.state":"var out = random.array.erlang( 3, 2, 5.0 )\nvar state = random.array.erlang.state\nout = random.array.erlang( 3, 2, 5.0 )\nout = random.array.erlang( 3, 2, 5.0 )\nrandom.array.erlang.state = state;\nout = random.array.erlang( 3, 2, 5.0 )\n","random.array.erlang.stateLength":"var len = random.array.erlang.stateLength;\n","random.array.erlang.byteLength":"var sz = random.array.erlang.byteLength;\n","random.array.exponential":"var out = random.array.exponential( 3, 2.0 )\n","random.array.exponential.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.exponential.assign( 2.0, x )\nvar bool = ( out === x )\n","random.array.exponential.factory":"var fcn = random.array.exponential.factory();\nvar out = fcn( 3, 2.0 )\nfcn = random.array.exponential.factory( 2.0 );\nout = fcn( 3 )\n","random.array.exponential.PRNG":"var prng = random.array.exponential.PRNG;\n","random.array.exponential.seed":"var seed = random.array.exponential.seed;\n","random.array.exponential.seedLength":"var len = random.array.exponential.seedLength;\n","random.array.exponential.state":"var out = random.array.exponential( 3, 2.0 )\nvar state = random.array.exponential.state\nout = random.array.exponential( 3, 2.0 )\nout = random.array.exponential( 3, 2.0 )\nrandom.array.exponential.state = state;\nout = random.array.exponential( 3, 2.0 )\n","random.array.exponential.stateLength":"var len = random.array.exponential.stateLength;\n","random.array.exponential.byteLength":"var sz = random.array.exponential.byteLength;\n","random.array.f":"var out = random.array.f( 3, 2.0, 5.0 )\n","random.array.f.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.f.assign( 2.0, 5.0, x )\nvar bool = ( out === x )\n","random.array.f.factory":"var fcn = random.array.f.factory();\nvar out = fcn( 3, 2.0, 5.0 )\nfcn = random.array.f.factory( 2.0, 5.0 );\nout = fcn( 3 )\n","random.array.f.PRNG":"var prng = random.array.f.PRNG;\n","random.array.f.seed":"var seed = random.array.f.seed;\n","random.array.f.seedLength":"var len = random.array.f.seedLength;\n","random.array.f.state":"var out = random.array.f( 3, 2.0, 5.0 )\nvar state = random.array.f.state\nout = random.array.f( 3, 2.0, 5.0 )\nout = random.array.f( 3, 2.0, 5.0 )\nrandom.array.f.state = state;\nout = random.array.f( 3, 2.0, 5.0 )\n","random.array.f.stateLength":"var len = random.array.f.stateLength;\n","random.array.f.byteLength":"var sz = random.array.f.byteLength;\n","random.array.frechet":"var out = random.array.frechet( 3, 2.0, 5.0, 3.0 )\n","random.array.frechet.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.frechet.assign( 2.0, 5.0, 3.0, x )\nvar bool = ( out === x )\n","random.array.frechet.factory":"var fcn = random.array.frechet.factory();\nvar out = fcn( 3, 2.0, 5.0, 3.0 )\nfcn = random.array.frechet.factory( 2.0, 5.0, 3.0 );\nout = fcn( 3 )\n","random.array.frechet.PRNG":"var prng = random.array.frechet.PRNG;\n","random.array.frechet.seed":"var seed = random.array.frechet.seed;\n","random.array.frechet.seedLength":"var len = random.array.frechet.seedLength;\n","random.array.frechet.state":"var out = random.array.frechet( 3, 2.0, 5.0, 3.0 )\nvar state = random.array.frechet.state\nout = random.array.frechet( 3, 2.0, 5.0, 3.0 )\nout = random.array.frechet( 3, 2.0, 5.0, 3.0 )\nrandom.array.frechet.state = state;\nout = random.array.frechet( 3, 2.0, 5.0, 3.0 )\n","random.array.frechet.stateLength":"var len = random.array.frechet.stateLength;\n","random.array.frechet.byteLength":"var sz = random.array.frechet.byteLength;\n","random.array.gamma":"var out = random.array.gamma( 3, 2.0, 5.0 )\n","random.array.gamma.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.gamma.assign( 2.0, 5.0, x )\nvar bool = ( out === x )\n","random.array.gamma.factory":"var fcn = random.array.gamma.factory();\nvar out = fcn( 3, 2.0, 5.0 )\nfcn = random.array.gamma.factory( 2.0, 5.0 );\nout = fcn( 3 )\n","random.array.gamma.PRNG":"var prng = random.array.gamma.PRNG;\n","random.array.gamma.seed":"var seed = random.array.gamma.seed;\n","random.array.gamma.seedLength":"var len = random.array.gamma.seedLength;\n","random.array.gamma.state":"var out = random.array.gamma( 3, 2.0, 5.0 )\nvar state = random.array.gamma.state\nout = random.array.gamma( 3, 2.0, 5.0 )\nout = random.array.gamma( 3, 2.0, 5.0 )\nrandom.array.gamma.state = state;\nout = random.array.gamma( 3, 2.0, 5.0 )\n","random.array.gamma.stateLength":"var len = random.array.gamma.stateLength;\n","random.array.gamma.byteLength":"var sz = random.array.gamma.byteLength;\n","random.array.geometric":"var out = random.array.geometric( 3, 0.01 )\n","random.array.geometric.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.geometric.assign( 0.01, x )\nvar bool = ( out === x )\n","random.array.geometric.factory":"var fcn = random.array.geometric.factory();\nvar out = fcn( 3, 0.01 )\nfcn = random.array.geometric.factory( 0.01 );\nout = fcn( 3 )\n","random.array.geometric.PRNG":"var prng = random.array.geometric.PRNG;\n","random.array.geometric.seed":"var seed = random.array.geometric.seed;\n","random.array.geometric.seedLength":"var len = random.array.geometric.seedLength;\n","random.array.geometric.state":"var out = random.array.geometric( 3, 0.01 )\nvar state = random.array.geometric.state\nout = random.array.geometric( 3, 0.01 )\nout = random.array.geometric( 3, 0.01 )\nrandom.array.geometric.state = state;\nout = random.array.geometric( 3, 0.01 )\n","random.array.geometric.stateLength":"var len = random.array.geometric.stateLength;\n","random.array.geometric.byteLength":"var sz = random.array.geometric.byteLength;\n","random.array.gumbel":"var out = random.array.gumbel( 3, 2.0, 5.0 )\n","random.array.gumbel.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.gumbel.assign( 2.0, 5.0, x )\nvar bool = ( out === x )\n","random.array.gumbel.factory":"var fcn = random.array.gumbel.factory();\nvar out = fcn( 3, 2.0, 5.0 )\nfcn = random.array.gumbel.factory( 2.0, 5.0 );\nout = fcn( 3 )\n","random.array.gumbel.PRNG":"var prng = random.array.gumbel.PRNG;\n","random.array.gumbel.seed":"var seed = random.array.gumbel.seed;\n","random.array.gumbel.seedLength":"var len = random.array.gumbel.seedLength;\n","random.array.gumbel.state":"var out = random.array.gumbel( 3, 2.0, 5.0 )\nvar state = random.array.gumbel.state\nout = random.array.gumbel( 3, 2.0, 5.0 )\nout = random.array.gumbel( 3, 2.0, 5.0 )\nrandom.array.gumbel.state = state;\nout = random.array.gumbel( 3, 2.0, 5.0 )\n","random.array.gumbel.stateLength":"var len = random.array.gumbel.stateLength;\n","random.array.gumbel.byteLength":"var sz = random.array.gumbel.byteLength;\n","random.array.hypergeometric":"var out = random.array.hypergeometric( 3, 20, 10, 7 )\n","random.array.hypergeometric.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.hypergeometric.assign( 20, 10, 7, x )\nvar bool = ( out === x )\n","random.array.hypergeometric.factory":"var fcn = random.array.hypergeometric.factory();\nvar out = fcn( 3, 20, 10, 7 )\nfcn = random.array.hypergeometric.factory( 20, 10, 7 );\nout = fcn( 3 )\n","random.array.hypergeometric.PRNG":"var prng = random.array.hypergeometric.PRNG;\n","random.array.hypergeometric.seed":"var seed = random.array.hypergeometric.seed;\n","random.array.hypergeometric.seedLength":"var len = random.array.hypergeometric.seedLength;\n","random.array.hypergeometric.state":"var out = random.array.hypergeometric( 3, 20, 10, 7 )\nvar state = random.array.hypergeometric.state\nout = random.array.hypergeometric( 3, 20, 10, 7 )\nout = random.array.hypergeometric( 3, 20, 10, 7 )\nrandom.array.hypergeometric.state = state;\nout = random.array.hypergeometric( 3, 20, 10, 7 )\n","random.array.hypergeometric.stateLength":"var len = random.array.hypergeometric.stateLength;\n","random.array.hypergeometric.byteLength":"var sz = random.array.hypergeometric.byteLength;\n","random.array.invgamma":"var out = random.array.invgamma( 3, 2.0, 5.0 )\n","random.array.invgamma.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.invgamma.assign( 2.0, 5.0, x )\nvar bool = ( out === x )\n","random.array.invgamma.factory":"var fcn = random.array.invgamma.factory();\nvar out = fcn( 3, 2.0, 5.0 )\nfcn = random.array.invgamma.factory( 2.0, 5.0 );\nout = fcn( 3 )\n","random.array.invgamma.PRNG":"var prng = random.array.invgamma.PRNG;\n","random.array.invgamma.seed":"var seed = random.array.invgamma.seed;\n","random.array.invgamma.seedLength":"var len = random.array.invgamma.seedLength;\n","random.array.invgamma.state":"var out = random.array.invgamma( 3, 2.0, 5.0 )\nvar state = random.array.invgamma.state\nout = random.array.invgamma( 3, 2.0, 5.0 )\nout = random.array.invgamma( 3, 2.0, 5.0 )\nrandom.array.invgamma.state = state;\nout = random.array.invgamma( 3, 2.0, 5.0 )\n","random.array.invgamma.stateLength":"var len = random.array.invgamma.stateLength;\n","random.array.invgamma.byteLength":"var sz = random.array.invgamma.byteLength;\n","random.array.kumaraswamy":"var out = random.array.kumaraswamy( 3, 2.0, 5.0 )\n","random.array.kumaraswamy.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.kumaraswamy.assign( 2.0, 5.0, x )\nvar bool = ( out === x )\n","random.array.kumaraswamy.factory":"var fcn = random.array.kumaraswamy.factory();\nvar out = fcn( 3, 2.0, 5.0 )\nfcn = random.array.kumaraswamy.factory( 2.0, 5.0 );\nout = fcn( 3 )\n","random.array.kumaraswamy.PRNG":"var prng = random.array.kumaraswamy.PRNG;\n","random.array.kumaraswamy.seed":"var seed = random.array.kumaraswamy.seed;\n","random.array.kumaraswamy.seedLength":"var len = random.array.kumaraswamy.seedLength;\n","random.array.kumaraswamy.state":"var out = random.array.kumaraswamy( 3, 2.0, 5.0 )\nvar state = random.array.kumaraswamy.state\nout = random.array.kumaraswamy( 3, 2.0, 5.0 )\nout = random.array.kumaraswamy( 3, 2.0, 5.0 )\nrandom.array.kumaraswamy.state = state;\nout = random.array.kumaraswamy( 3, 2.0, 5.0 )\n","random.array.kumaraswamy.stateLength":"var len = random.array.kumaraswamy.stateLength;\n","random.array.kumaraswamy.byteLength":"var sz = random.array.kumaraswamy.byteLength;\n","random.array.laplace":"var out = random.array.laplace( 3, 2.0, 5.0 )\n","random.array.laplace.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.laplace.assign( 2.0, 5.0, x )\nvar bool = ( out === x )\n","random.array.laplace.factory":"var fcn = random.array.laplace.factory();\nvar out = fcn( 3, 2.0, 5.0 )\nfcn = random.array.laplace.factory( 2.0, 5.0 );\nout = fcn( 3 )\n","random.array.laplace.PRNG":"var prng = random.array.laplace.PRNG;\n","random.array.laplace.seed":"var seed = random.array.laplace.seed;\n","random.array.laplace.seedLength":"var len = random.array.laplace.seedLength;\n","random.array.laplace.state":"var out = random.array.laplace( 3, 2.0, 5.0 )\nvar state = random.array.laplace.state\nout = random.array.laplace( 3, 2.0, 5.0 )\nout = random.array.laplace( 3, 2.0, 5.0 )\nrandom.array.laplace.state = state;\nout = random.array.laplace( 3, 2.0, 5.0 )\n","random.array.laplace.stateLength":"var len = random.array.laplace.stateLength;\n","random.array.laplace.byteLength":"var sz = random.array.laplace.byteLength;\n","random.array.levy":"var out = random.array.levy( 3, 2.0, 5.0 )\n","random.array.levy.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.levy.assign( 2.0, 5.0, x )\nvar bool = ( out === x )\n","random.array.levy.factory":"var fcn = random.array.levy.factory();\nvar out = fcn( 3, 2.0, 5.0 )\nfcn = random.array.levy.factory( 2.0, 5.0 );\nout = fcn( 3 )\n","random.array.levy.PRNG":"var prng = random.array.levy.PRNG;\n","random.array.levy.seed":"var seed = random.array.levy.seed;\n","random.array.levy.seedLength":"var len = random.array.levy.seedLength;\n","random.array.levy.state":"var out = random.array.levy( 3, 2.0, 5.0 )\nvar state = random.array.levy.state\nout = random.array.levy( 3, 2.0, 5.0 )\nout = random.array.levy( 3, 2.0, 5.0 )\nrandom.array.levy.state = state;\nout = random.array.levy( 3, 2.0, 5.0 )\n","random.array.levy.stateLength":"var len = random.array.levy.stateLength;\n","random.array.levy.byteLength":"var sz = random.array.levy.byteLength;\n","random.array.logistic":"var out = random.array.logistic( 3, 2.0, 5.0 )\n","random.array.logistic.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.logistic.assign( 2.0, 5.0, x )\nvar bool = ( out === x )\n","random.array.logistic.factory":"var fcn = random.array.logistic.factory();\nvar out = fcn( 3, 2.0, 5.0 )\nfcn = random.array.logistic.factory( 2.0, 5.0 );\nout = fcn( 3 )\n","random.array.logistic.PRNG":"var prng = random.array.logistic.PRNG;\n","random.array.logistic.seed":"var seed = random.array.logistic.seed;\n","random.array.logistic.seedLength":"var len = random.array.logistic.seedLength;\n","random.array.logistic.state":"var out = random.array.logistic( 3, 2.0, 5.0 )\nvar state = random.array.logistic.state\nout = random.array.logistic( 3, 2.0, 5.0 )\nout = random.array.logistic( 3, 2.0, 5.0 )\nrandom.array.logistic.state = state;\nout = random.array.logistic( 3, 2.0, 5.0 )\n","random.array.logistic.stateLength":"var len = random.array.logistic.stateLength;\n","random.array.logistic.byteLength":"var sz = random.array.logistic.byteLength;\n","random.array.lognormal":"var out = random.array.lognormal( 3, 2.0, 5.0 )\n","random.array.lognormal.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.lognormal.assign( 2.0, 5.0, x )\nvar bool = ( out === x )\n","random.array.lognormal.factory":"var fcn = random.array.lognormal.factory();\nvar out = fcn( 3, 2.0, 5.0 )\nfcn = random.array.lognormal.factory( 2.0, 5.0 );\nout = fcn( 3 )\n","random.array.lognormal.PRNG":"var prng = random.array.lognormal.PRNG;\n","random.array.lognormal.seed":"var seed = random.array.lognormal.seed;\n","random.array.lognormal.seedLength":"var len = random.array.lognormal.seedLength;\n","random.array.lognormal.state":"var out = random.array.lognormal( 3, 2.0, 5.0 )\nvar state = random.array.lognormal.state\nout = random.array.lognormal( 3, 2.0, 5.0 )\nout = random.array.lognormal( 3, 2.0, 5.0 )\nrandom.array.lognormal.state = state;\nout = random.array.lognormal( 3, 2.0, 5.0 )\n","random.array.lognormal.stateLength":"var len = random.array.lognormal.stateLength;\n","random.array.lognormal.byteLength":"var sz = random.array.lognormal.byteLength;\n","random.array.minstd":"var out = random.array.minstd( 3 )\n","random.array.minstd.normalized":"var out = random.array.minstd.normalized( 3 )\n","random.array.minstd.factory":"var fcn = random.array.minstd.factory();\nvar out = fcn( 3 )\n","random.array.minstd.PRNG":"var prng = random.array.minstd.PRNG;\n","random.array.minstd.seed":"var seed = random.array.minstd.seed;\n","random.array.minstd.seedLength":"var len = random.array.minstd.seedLength;\n","random.array.minstd.state":"var out = random.array.minstd( 3 )\nvar state = random.array.minstd.state;\nout = random.array.minstd( 3 )\nout = random.array.minstd( 3 )\nrandom.array.minstd.state = state;\nout = random.array.minstd( 3 )\n","random.array.minstd.stateLength":"var len = random.array.minstd.stateLength;\n","random.array.minstd.byteLength":"var sz = random.array.minstd.byteLength;\n","random.array.minstdShuffle":"var out = random.array.minstdShuffle( 3 )\n","random.array.minstdShuffle.normalized":"var out = random.array.minstdShuffle.normalized( 3 )\n","random.array.minstdShuffle.factory":"var fcn = random.array.minstdShuffle.factory();\nvar out = fcn( 3 )\n","random.array.minstdShuffle.PRNG":"var prng = random.array.minstdShuffle.PRNG;\n","random.array.minstdShuffle.seed":"var seed = random.array.minstdShuffle.seed;\n","random.array.minstdShuffle.seedLength":"var len = random.array.minstdShuffle.seedLength;\n","random.array.minstdShuffle.state":"var out = random.array.minstdShuffle( 3 )\nvar state = random.array.minstdShuffle.state;\nout = random.array.minstdShuffle( 3 )\nout = random.array.minstdShuffle( 3 )\nrandom.array.minstdShuffle.state = state;\nout = random.array.minstdShuffle( 3 )\n","random.array.minstdShuffle.stateLength":"var len = random.array.minstdShuffle.stateLength;\n","random.array.minstdShuffle.byteLength":"var sz = random.array.minstdShuffle.byteLength;\n","random.array.mt19937":"var out = random.array.mt19937( 3 )\n","random.array.mt19937.normalized":"var out = random.array.mt19937.normalized( 3 )\n","random.array.mt19937.factory":"var fcn = random.array.mt19937.factory();\nvar out = fcn( 3 )\n","random.array.mt19937.PRNG":"var prng = random.array.mt19937.PRNG;\n","random.array.mt19937.seed":"var seed = random.array.mt19937.seed;\n","random.array.mt19937.seedLength":"var len = random.array.mt19937.seedLength;\n","random.array.mt19937.state":"var out = random.array.mt19937( 3 )\nvar state = random.array.mt19937.state;\nout = random.array.mt19937( 3 )\nout = random.array.mt19937( 3 )\nrandom.array.mt19937.state = state;\nout = random.array.mt19937( 3 )\n","random.array.mt19937.stateLength":"var len = random.array.mt19937.stateLength;\n","random.array.mt19937.byteLength":"var sz = random.array.mt19937.byteLength;\n","random.array.negativeBinomial":"var out = random.array.negativeBinomial( 3, 10, 0.5 )\n","random.array.negativeBinomial.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.negativeBinomial.assign( 10, 0.5, x )\nvar bool = ( out === x )\n","random.array.negativeBinomial.factory":"var fcn = random.array.negativeBinomial.factory();\nvar out = fcn( 3, 10, 0.5 )\nfcn = random.array.negativeBinomial.factory( 10, 0.5 );\nout = fcn( 3 )\n","random.array.negativeBinomial.PRNG":"var prng = random.array.negativeBinomial.PRNG;\n","random.array.negativeBinomial.seed":"var seed = random.array.negativeBinomial.seed;\n","random.array.negativeBinomial.seedLength":"var len = random.array.negativeBinomial.seedLength;\n","random.array.negativeBinomial.state":"var out = random.array.negativeBinomial( 3, 10, 0.5 )\nvar state = random.array.negativeBinomial.state\nout = random.array.negativeBinomial( 3, 10, 0.5 )\nout = random.array.negativeBinomial( 3, 10, 0.5 )\nrandom.array.negativeBinomial.state = state;\nout = random.array.negativeBinomial( 3, 10, 0.5 )\n","random.array.negativeBinomial.stateLength":"var len = random.array.negativeBinomial.stateLength;\n","random.array.negativeBinomial.byteLength":"var sz = random.array.negativeBinomial.byteLength;\n","random.array.normal":"var out = random.array.normal( 3, 2.0, 5.0 )\n","random.array.normal.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.normal.assign( 2.0, 5.0, x )\nvar bool = ( out === x )\n","random.array.normal.factory":"var fcn = random.array.normal.factory();\nvar out = fcn( 3, 2.0, 5.0 )\nfcn = random.array.normal.factory( 2.0, 5.0 );\nout = fcn( 3 )\n","random.array.normal.PRNG":"var prng = random.array.normal.PRNG;\n","random.array.normal.seed":"var seed = random.array.normal.seed;\n","random.array.normal.seedLength":"var len = random.array.normal.seedLength;\n","random.array.normal.state":"var out = random.array.normal( 3, 2.0, 5.0 )\nvar state = random.array.normal.state\nout = random.array.normal( 3, 2.0, 5.0 )\nout = random.array.normal( 3, 2.0, 5.0 )\nrandom.array.normal.state = state;\nout = random.array.normal( 3, 2.0, 5.0 )\n","random.array.normal.stateLength":"var len = random.array.normal.stateLength;\n","random.array.normal.byteLength":"var sz = random.array.normal.byteLength;\n","random.array.pareto1":"var out = random.array.pareto1( 3, 2.0, 5.0 )\n","random.array.pareto1.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.pareto1.assign( 2.0, 5.0, x )\nvar bool = ( out === x )\n","random.array.pareto1.factory":"var fcn = random.array.pareto1.factory();\nvar out = fcn( 3, 2.0, 5.0 )\nfcn = random.array.pareto1.factory( 2.0, 5.0 );\nout = fcn( 3 )\n","random.array.pareto1.PRNG":"var prng = random.array.pareto1.PRNG;\n","random.array.pareto1.seed":"var seed = random.array.pareto1.seed;\n","random.array.pareto1.seedLength":"var len = random.array.pareto1.seedLength;\n","random.array.pareto1.state":"var out = random.array.pareto1( 3, 2.0, 5.0 )\nvar state = random.array.pareto1.state\nout = random.array.pareto1( 3, 2.0, 5.0 )\nout = random.array.pareto1( 3, 2.0, 5.0 )\nrandom.array.pareto1.state = state;\nout = random.array.pareto1( 3, 2.0, 5.0 )\n","random.array.pareto1.stateLength":"var len = random.array.pareto1.stateLength;\n","random.array.pareto1.byteLength":"var sz = random.array.pareto1.byteLength;\n","random.array.poisson":"var out = random.array.poisson( 3, 2.0 )\n","random.array.poisson.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.poisson.assign( 2.0, x )\nvar bool = ( out === x )\n","random.array.poisson.factory":"var fcn = random.array.poisson.factory();\nvar out = fcn( 3, 2.0 )\nfcn = random.array.poisson.factory( 2.0 );\nout = fcn( 3 )\n","random.array.poisson.PRNG":"var prng = random.array.poisson.PRNG;\n","random.array.poisson.seed":"var seed = random.array.poisson.seed;\n","random.array.poisson.seedLength":"var len = random.array.poisson.seedLength;\n","random.array.poisson.state":"var out = random.array.poisson( 3, 2.0 )\nvar state = random.array.poisson.state\nout = random.array.poisson( 3, 2.0 )\nout = random.array.poisson( 3, 2.0 )\nrandom.array.poisson.state = state;\nout = random.array.poisson( 3, 2.0 )\n","random.array.poisson.stateLength":"var len = random.array.poisson.stateLength;\n","random.array.poisson.byteLength":"var sz = random.array.poisson.byteLength;\n","random.array.randu":"var out = random.array.randu( 3 )\n","random.array.randu.factory":"var fcn = random.array.randu.factory();\nvar out = fcn( 3 )\n","random.array.randu.PRNG":"var prng = random.array.randu.PRNG;\n","random.array.randu.seed":"var seed = random.array.randu.seed;\n","random.array.randu.seedLength":"var len = random.array.randu.seedLength;\n","random.array.randu.state":"var out = random.array.randu( 3 )\nvar state = random.array.randu.state;\nout = random.array.randu( 3 )\nout = random.array.randu( 3 )\nrandom.array.randu.state = state;\nout = random.array.randu( 3 )\n","random.array.randu.stateLength":"var len = random.array.randu.stateLength;\n","random.array.randu.byteLength":"var sz = random.array.randu.byteLength;\n","random.array.rayleigh":"var out = random.array.rayleigh( 3, 2.0 )\n","random.array.rayleigh.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.rayleigh.assign( 2.0, x )\nvar bool = ( out === x )\n","random.array.rayleigh.factory":"var fcn = random.array.rayleigh.factory();\nvar out = fcn( 3, 2.0 )\nfcn = random.array.rayleigh.factory( 2.0 );\nout = fcn( 3 )\n","random.array.rayleigh.PRNG":"var prng = random.array.rayleigh.PRNG;\n","random.array.rayleigh.seed":"var seed = random.array.rayleigh.seed;\n","random.array.rayleigh.seedLength":"var len = random.array.rayleigh.seedLength;\n","random.array.rayleigh.state":"var out = random.array.rayleigh( 3, 2.0 )\nvar state = random.array.rayleigh.state\nout = random.array.rayleigh( 3, 2.0 )\nout = random.array.rayleigh( 3, 2.0 )\nrandom.array.rayleigh.state = state;\nout = random.array.rayleigh( 3, 2.0 )\n","random.array.rayleigh.stateLength":"var len = random.array.rayleigh.stateLength;\n","random.array.rayleigh.byteLength":"var sz = random.array.rayleigh.byteLength;\n","random.array.t":"var out = random.array.t( 3, 2.0 )\n","random.array.t.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.t.assign( 2.0, x )\nvar bool = ( out === x )\n","random.array.t.factory":"var fcn = random.array.t.factory();\nvar out = fcn( 3, 2.0 )\nfcn = random.array.t.factory( 2.0 );\nout = fcn( 3 )\n","random.array.t.PRNG":"var prng = random.array.t.PRNG;\n","random.array.t.seed":"var seed = random.array.t.seed;\n","random.array.t.seedLength":"var len = random.array.t.seedLength;\n","random.array.t.state":"var out = random.array.t( 3, 2.0 )\nvar state = random.array.t.state\nout = random.array.t( 3, 2.0 )\nout = random.array.t( 3, 2.0 )\nrandom.array.t.state = state;\nout = random.array.t( 3, 2.0 )\n","random.array.t.stateLength":"var len = random.array.t.stateLength;\n","random.array.t.byteLength":"var sz = random.array.t.byteLength;\n","random.array.triangular":"var out = random.array.triangular( 3, 2.0, 5.0, 3.0 )\n","random.array.triangular.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.triangular.assign( 2.0, 5.0, 3.0, x )\nvar bool = ( out === x )\n","random.array.triangular.factory":"var fcn = random.array.triangular.factory();\nvar out = fcn( 3, 2.0, 5.0, 3.0 )\nfcn = random.array.triangular.factory( 2.0, 5.0, 3.0 );\nout = fcn( 3 )\n","random.array.triangular.PRNG":"var prng = random.array.triangular.PRNG;\n","random.array.triangular.seed":"var seed = random.array.triangular.seed;\n","random.array.triangular.seedLength":"var len = random.array.triangular.seedLength;\n","random.array.triangular.state":"var out = random.array.triangular( 3, 2.0, 5.0, 3.0 )\nvar state = random.array.triangular.state\nout = random.array.triangular( 3, 2.0, 5.0, 3.0 )\nout = random.array.triangular( 3, 2.0, 5.0, 3.0 )\nrandom.array.triangular.state = state;\nout = random.array.triangular( 3, 2.0, 5.0, 3.0 )\n","random.array.triangular.stateLength":"var len = random.array.triangular.stateLength;\n","random.array.triangular.byteLength":"var sz = random.array.triangular.byteLength;\n","random.array.uniform":"var out = random.array.uniform( 3, 2.0, 5.0 )\n","random.array.uniform.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.uniform.assign( 2.0, 5.0, x )\nvar bool = ( out === x )\n","random.array.uniform.factory":"var fcn = random.array.uniform.factory();\nvar out = fcn( 3, 2.0, 5.0 )\nfcn = random.array.uniform.factory( 2.0, 5.0 );\nout = fcn( 3 )\n","random.array.uniform.PRNG":"var prng = random.array.uniform.PRNG;\n","random.array.uniform.seed":"var seed = random.array.uniform.seed;\n","random.array.uniform.seedLength":"var len = random.array.uniform.seedLength;\n","random.array.uniform.state":"var out = random.array.uniform( 3, 2.0, 5.0 )\nvar state = random.array.uniform.state\nout = random.array.uniform( 3, 2.0, 5.0 )\nout = random.array.uniform( 3, 2.0, 5.0 )\nrandom.array.uniform.state = state;\nout = random.array.uniform( 3, 2.0, 5.0 )\n","random.array.uniform.stateLength":"var len = random.array.uniform.stateLength;\n","random.array.uniform.byteLength":"var sz = random.array.uniform.byteLength;\n","random.array.weibull":"var out = random.array.weibull( 3, 2.0, 5.0 )\n","random.array.weibull.assign":"var x = azeros( 3, 'float64' );\nvar out = random.array.weibull.assign( 2.0, 5.0, x )\nvar bool = ( out === x )\n","random.array.weibull.factory":"var fcn = random.array.weibull.factory();\nvar out = fcn( 3, 2.0, 5.0 )\nfcn = random.array.weibull.factory( 2.0, 5.0 );\nout = fcn( 3 )\n","random.array.weibull.PRNG":"var prng = random.array.weibull.PRNG;\n","random.array.weibull.seed":"var seed = random.array.weibull.seed;\n","random.array.weibull.seedLength":"var len = random.array.weibull.seedLength;\n","random.array.weibull.state":"var out = random.array.weibull( 3, 2.0, 5.0 )\nvar state = random.array.weibull.state\nout = random.array.weibull( 3, 2.0, 5.0 )\nout = random.array.weibull( 3, 2.0, 5.0 )\nrandom.array.weibull.state = state;\nout = random.array.weibull( 3, 2.0, 5.0 )\n","random.array.weibull.stateLength":"var len = random.array.weibull.stateLength;\n","random.array.weibull.byteLength":"var sz = random.array.weibull.byteLength;\n","random.iterators.arcsine":"var it = random.iterators.arcsine( 0.0, 1.0 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.bernoulli":"var it = random.iterators.bernoulli( 0.3 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.beta":"var it = random.iterators.beta( 1.0, 1.0 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.betaprime":"var it = random.iterators.betaprime( 1.0, 1.0 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.binomial":"var it = random.iterators.binomial( 10, 0.3 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.boxMuller":"var it = random.iterators.boxMuller();\nvar r = it.next().value\nr = it.next().value\n","random.iterators.cauchy":"var it = random.iterators.cauchy( 0.0, 1.0 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.chi":"var it = random.iterators.chi( 1.5 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.chisquare":"var it = random.iterators.chisquare( 1.5 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.cosine":"var it = random.iterators.cosine( 0.0, 1.0 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.discreteUniform":"var it = random.iterators.discreteUniform( 0, 3 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.erlang":"var it = random.iterators.erlang( 1, 1.5 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.exponential":"var it = random.iterators.exponential( 1.5 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.f":"var it = random.iterators.f( 1.0, 1.0 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.frechet":"var it = random.iterators.frechet( 1.0, 1.0, 0.0 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.gamma":"var it = random.iterators.gamma( 1.0, 1.0 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.geometric":"var it = random.iterators.geometric( 0.3 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.gumbel":"var it = random.iterators.gumbel( 0.0, 1.0 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.hypergeometric":"var it = random.iterators.hypergeometric( 20, 10, 7 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.improvedZiggurat":"var it = random.iterators.improvedZiggurat();\nvar r = it.next().value\nr = it.next().value\n","random.iterators.invgamma":"var it = random.iterators.invgamma( 1.0, 1.0 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.kumaraswamy":"var it = random.iterators.kumaraswamy( 1.0, 1.0 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.laplace":"var it = random.iterators.laplace( 0.0, 1.0 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.levy":"var it = random.iterators.levy( 0.0, 1.0 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.logistic":"var it = random.iterators.logistic( 0.0, 1.0 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.lognormal":"var it = random.iterators.lognormal( 0.0, 1.0 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.minstd":"var it = random.iterators.minstd();\nvar r = it.next().value\nr = it.next().value\n","random.iterators.minstdShuffle":"var it = random.iterators.minstdShuffle();\nvar r = it.next().value\nr = it.next().value\n","random.iterators.mt19937":"var it = random.iterators.mt19937();\nvar r = it.next().value\nr = it.next().value\n","random.iterators.negativeBinomial":"var it = random.iterators.negativeBinomial( 10, 0.3 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.normal":"var it = random.iterators.normal( 0.0, 1.0 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.pareto1":"var it = random.iterators.pareto1( 1.0, 1.0 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.poisson":"var it = random.iterators.poisson( 1.5 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.randi":"var it = random.iterators.randi();\nvar r = it.next().value\nr = it.next().value\n","random.iterators.randn":"var it = random.iterators.randn();\nvar r = it.next().value\nr = it.next().value\n","random.iterators.randu":"var it = random.iterators.randu();\nvar r = it.next().value\nr = it.next().value\n","random.iterators.rayleigh":"var it = random.iterators.rayleigh( 1.5 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.t":"var it = random.iterators.t( 1.5 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.triangular":"var it = random.iterators.triangular( 0.0, 1.0, 0.3 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.uniform":"var it = random.iterators.uniform( 0.0, 1.0 );\nvar r = it.next().value\nr = it.next().value\n","random.iterators.weibull":"var it = random.iterators.weibull( 1.0, 1.0 );\nvar r = it.next().value\nr = it.next().value\n","random.streams.arcsine":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.arcsine( 2.0, 5.0, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.arcsine.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.arcsine.factory( opts );\n","random.streams.arcsine.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.arcsine.objectMode( 2.0, 5.0, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.bernoulli":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.bernoulli( 0.5, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.bernoulli.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.bernoulli.factory( opts );\n","random.streams.bernoulli.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.bernoulli.objectMode( 0.3, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.beta":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.beta( 2.0, 5.0, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.beta.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.beta.factory( opts );\n","random.streams.beta.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.beta.objectMode( 2.0, 5.0, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.betaprime":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.betaprime( 2.0, 5.0, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.betaprime.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.betaprime.factory( opts );\n","random.streams.betaprime.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.betaprime.objectMode( 2.0, 5.0, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.binomial":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.binomial( 20, 0.5, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.binomial.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.binomial.factory( opts );\n","random.streams.binomial.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.binomial.objectMode( 20, 0.5, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.boxMuller":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.boxMuller( opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.boxMuller.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.boxMuller.factory( opts );\n","random.streams.boxMuller.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.boxMuller.objectMode( opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.cauchy":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.cauchy( 2.0, 5.0, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.cauchy.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.cauchy.factory( opts );\n","random.streams.cauchy.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.cauchy.objectMode( 2.0, 5.0, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.chi":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.chi( 3.0, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.chi.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.chi.factory( opts );\n","random.streams.chi.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.chi.objectMode( 5.0, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.chisquare":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.chisquare( 3.0, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.chisquare.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.chisquare.factory( opts );\n","random.streams.chisquare.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.chisquare.objectMode( 5.0, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.cosine":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.cosine( 2.0, 5.0, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.cosine.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.cosine.factory( opts );\n","random.streams.cosine.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.cosine.objectMode( 2.0, 5.0, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.discreteUniform":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.discreteUniform( 2, 5, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.discreteUniform.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.discreteUniform.factory( opts );\n","random.streams.discreteUniform.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.discreteUniform.objectMode( 2, 5, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.erlang":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.erlang( 2, 5.0, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.erlang.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.erlang.factory( opts );\n","random.streams.erlang.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.erlang.objectMode( 2, 5.0, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.exponential":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.exponential( 3.0, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.exponential.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.exponential.factory( opts );\n","random.streams.exponential.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.exponential.objectMode( 5.0, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.f":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.f( 2.0, 5.0, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.f.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.f.factory( opts );\n","random.streams.f.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.f.objectMode( 2.0, 5.0, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.frechet":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.frechet( 2.0, 5.0, 3.0, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.frechet.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.frechet.factory( opts );\n","random.streams.frechet.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.frechet.objectMode( 2.0, 5.0, 3.0, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.gamma":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.gamma( 2.0, 5.0, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.gamma.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.gamma.factory( opts );\n","random.streams.gamma.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.gamma.objectMode( 2.0, 5.0, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.geometric":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.geometric( 0.5, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.geometric.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.geometric.factory( opts );\n","random.streams.geometric.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.geometric.objectMode( 0.3, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.gumbel":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.gumbel( 2.0, 5.0, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.gumbel.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.gumbel.factory( opts );\n","random.streams.gumbel.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.gumbel.objectMode( 2.0, 5.0, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.hypergeometric":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.hypergeometric( 5, 3, 2, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.hypergeometric.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.hypergeometric.factory( opts );\n","random.streams.hypergeometric.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.hypergeometric.objectMode( 5, 3, 2, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.improvedZiggurat":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.improvedZiggurat( opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.improvedZiggurat.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.improvedZiggurat.factory( opts );\n","random.streams.improvedZiggurat.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.improvedZiggurat.objectMode( opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.invgamma":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.invgamma( 2.0, 5.0, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.invgamma.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.invgamma.factory( opts );\n","random.streams.invgamma.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.invgamma.objectMode( 2.0, 5.0, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.kumaraswamy":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.kumaraswamy( 2.0, 5.0, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.kumaraswamy.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.kumaraswamy.factory( opts );\n","random.streams.kumaraswamy.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.kumaraswamy.objectMode( 2.0, 5.0, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.laplace":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.laplace( 2.0, 5.0, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.laplace.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.laplace.factory( opts );\n","random.streams.laplace.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.laplace.objectMode( 2.0, 5.0, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.levy":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.levy( 2.0, 5.0, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.levy.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.levy.factory( opts );\n","random.streams.levy.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.levy.objectMode( 2.0, 5.0, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.logistic":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.logistic( 2.0, 5.0, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.logistic.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.logistic.factory( opts );\n","random.streams.logistic.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.logistic.objectMode( 2.0, 5.0, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.lognormal":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.lognormal( 2.0, 5.0, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.lognormal.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.lognormal.factory( opts );\n","random.streams.lognormal.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.lognormal.objectMode( 2.0, 5.0, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.minstd":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.minstd( opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.minstd.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.minstd.factory( opts );\n","random.streams.minstd.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.minstd.objectMode( opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.minstdShuffle":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.minstdShuffle( opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.minstdShuffle.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.minstdShuffle.factory( opts );\n","random.streams.minstdShuffle.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.minstdShuffle.objectMode( opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.mt19937":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.mt19937( opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.mt19937.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.mt19937.factory( opts );\n","random.streams.mt19937.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.mt19937.objectMode( opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.negativeBinomial":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.negativeBinomial( 20.0, 0.5, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.negativeBinomial.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.negativeBinomial.factory( opts );\n","random.streams.negativeBinomial.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.negativeBinomial.objectMode( 20.0, 0.5, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.normal":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.normal( 2.0, 5.0, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.normal.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.normal.factory( opts );\n","random.streams.normal.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.normal.objectMode( 2.0, 5.0, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.pareto1":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.pareto1( 2.0, 5.0, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.pareto1.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.pareto1.factory( opts );\n","random.streams.pareto1.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.pareto1.objectMode( 2.0, 5.0, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.poisson":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.poisson( 3.0, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.poisson.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.poisson.factory( opts );\n","random.streams.poisson.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.poisson.objectMode( 5.0, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.randi":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.randi( opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.randi.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.randi.factory( opts );\n","random.streams.randi.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.randi.objectMode( opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.randn":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.randn( opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.randn.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.randn.factory( opts );\n","random.streams.randn.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.randn.objectMode( opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.randu":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.randu( opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.randu.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.randu.factory( opts );\n","random.streams.randu.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.randu.objectMode( opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.rayleigh":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.rayleigh( 3.0, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.rayleigh.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.rayleigh.factory( opts );\n","random.streams.rayleigh.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.rayleigh.objectMode( 5.0, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.t":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.t( 3.0, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.t.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.t.factory( opts );\n","random.streams.t.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.t.objectMode( 5.0, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.triangular":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.triangular( 2.0, 5.0, 4.0, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.triangular.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.triangular.factory( opts );\n","random.streams.triangular.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.triangular.objectMode( 2.0, 5.0, 4.0, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.uniform":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.uniform( 2.0, 5.0, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.uniform.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.uniform.factory( opts );\n","random.streams.uniform.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.uniform.objectMode( 2.0, 5.0, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.streams.weibull":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.weibull( 2.0, 5.0, opts );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","random.streams.weibull.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = random.streams.weibull.factory( opts );\n","random.streams.weibull.objectMode":"function fcn( v ) { console.log( v ); };\nvar opts = { 'iter': 10 };\nvar s = random.streams.weibull.objectMode( 2.0, 5.0, opts );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","random.strided.arcsine":"var a = linspace( 0.0, 1.0, 5 );\nvar b = linspace( 2.0, 5.0, 5 );\nvar out = azeros( 5, 'generic' );\nrandom.strided.arcsine( out.length, a, 1, b, 1, out, 1 )\na = linspace( 0.0, 1.0, 6 );\nb = linspace( 2.0, 5.0, 6 );\nout = azeros( 6, 'generic' );\nrandom.strided.arcsine( 3, a, -2, b, 1, out, 1 )\n","random.strided.arcsine.ndarray":"var a = linspace( 0.0, 1.0, 5 );\nvar b = linspace( 2.0, 5.0, 5 );\nvar out = azeros( 5, 'generic' );\nrandom.strided.arcsine.ndarray( out.length, a, 1, 0, b, 1, 0, out, 1, 0 )\na = linspace( 0.0, 1.0, 6 );\nb = linspace( 2.0, 5.0, 6 );\nout = azeros( 6, 'generic' );\nrandom.strided.arcsine.ndarray( 3, a, 2, 1, b, -1, b.length-1, out, 1, 0 )\n","random.strided.bernoulli":"var out = azeros( 5, 'generic' );\nrandom.strided.bernoulli( out.length, [ 0.5 ], 0, out, 1 )\n","random.strided.bernoulli.ndarray":"var out = azeros( 5, 'generic' );\nrandom.strided.bernoulli.ndarray( out.length, [ 0.5 ], 0, 0, out, 1, 0 )\n","random.strided.bernoulli.factory":"var fcn = random.strided.bernoulli.factory();\nvar out = azeros( 5, 'generic' );\nfcn( out.length, [ 0.5 ], 0, out, 1 )\n","random.strided.bernoulli.PRNG":"var prng = random.strided.bernoulli.PRNG;\n","random.strided.bernoulli.seed":"var seed = random.strided.bernoulli.seed;\n","random.strided.bernoulli.seedLength":"var len = random.strided.bernoulli.seedLength;\n","random.strided.bernoulli.state":"var out = azeros( 3, 'generic' );\nrandom.strided.bernoulli( out.length, [ 0.5 ], 0, out, 1 )\nvar state = random.strided.bernoulli.state\nout = azeros( 3, 'generic' );\nrandom.strided.bernoulli( out.length, [ 0.5 ], 0, out, 1 )\nout = azeros( 3, 'generic' );\nrandom.strided.bernoulli( out.length, [ 0.5 ], 0, out, 1 )\nrandom.strided.bernoulli.state = state;\nout = azeros( 3, 'generic' );\nrandom.strided.bernoulli( out.length, [ 0.5 ], 0, out, 1 )\n","random.strided.bernoulli.stateLength":"var len = random.strided.bernoulli.stateLength;\n","random.strided.bernoulli.byteLength":"var sz = random.strided.bernoulli.byteLength;\n","random.strided.beta":"var a = linspace( 1.0, 5.0, 5 );\nvar b = linspace( 1.0, 5.0, 5 );\nvar out = azeros( 5, 'generic' );\nrandom.strided.beta( out.length, a, 1, b, 1, out, 1 )\na = linspace( 1.0, 5.0, 6 );\nb = linspace( 1.0, 5.0, 6 );\nout = azeros( 6, 'generic' );\nrandom.strided.beta( 3, a, -2, b, 1, out, 1 )\n","random.strided.beta.ndarray":"var a = linspace( 1.0, 5.0, 5 );\nvar b = linspace( 1.0, 5.0, 5 );\nvar out = azeros( 5, 'generic' );\nrandom.strided.beta.ndarray( out.length, a, 1, 0, b, 1, 0, out, 1, 0 )\na = linspace( 1.0, 5.0, 6 );\nb = linspace( 1.0, 5.0, 6 );\nout = azeros( 6, 'generic' );\nrandom.strided.beta.ndarray( 3, a, 2, 1, b, -1, b.length-1, out, 1, 0 )\n","random.strided.betaprime":"var a = linspace( 1.0, 5.0, 5 );\nvar b = linspace( 1.0, 5.0, 5 );\nvar out = azeros( 5, 'generic' );\nrandom.strided.betaprime( out.length, a, 1, b, 1, out, 1 )\na = linspace( 1.0, 5.0, 6 );\nb = linspace( 1.0, 5.0, 6 );\nout = azeros( 6, 'generic' );\nrandom.strided.betaprime( 3, a, -2, b, 1, out, 1 )\n","random.strided.betaprime.ndarray":"var a = linspace( 1.0, 5.0, 5 );\nvar b = linspace( 1.0, 5.0, 5 );\nvar out = azeros( 5, 'generic' );\nrandom.strided.betaprime.ndarray( out.length, a, 1, 0, b, 1, 0, out, 1, 0 )\na = linspace( 1.0, 5.0, 6 );\nb = linspace( 1.0, 5.0, 6 );\nout = azeros( 6, 'generic' );\nrandom.strided.betaprime.ndarray( 3, a, 2, 1, b, -1, b.length-1, out, 1, 0 )\n","random.strided.chi":"var out = azeros( 5, 'generic' );\nrandom.strided.chi( out.length, [ 2.0 ], 0, out, 1 )\n","random.strided.chi.ndarray":"var out = azeros( 5, 'generic' );\nrandom.strided.chi.ndarray( out.length, [ 2.0 ], 0, 0, out, 1, 0 )\n","random.strided.chi.factory":"var fcn = random.strided.chi.factory();\nvar out = azeros( 5, 'generic' );\nfcn( out.length, [ 2.0 ], 0, out, 1 )\n","random.strided.chi.PRNG":"var prng = random.strided.chi.PRNG;\n","random.strided.chi.seed":"var seed = random.strided.chi.seed;\n","random.strided.chi.seedLength":"var len = random.strided.chi.seedLength;\n","random.strided.chi.state":"var out = azeros( 3, 'generic' );\nrandom.strided.chi( out.length, [ 2.0 ], 0, out, 1 )\nvar state = random.strided.chi.state\nout = azeros( 3, 'generic' );\nrandom.strided.chi( out.length, [ 2.0 ], 0, out, 1 )\nout = azeros( 3, 'generic' );\nrandom.strided.chi( out.length, [ 2.0 ], 0, out, 1 )\nrandom.strided.chi.state = state;\nout = azeros( 3, 'generic' );\nrandom.strided.chi( out.length, [ 2.0 ], 0, out, 1 )\n","random.strided.chi.stateLength":"var len = random.strided.chi.stateLength;\n","random.strided.chi.byteLength":"var sz = random.strided.chi.byteLength;\n","random.strided.chisquare":"var out = azeros( 5, 'generic' );\nrandom.strided.chisquare( out.length, [ 2.0 ], 0, out, 1 )\n","random.strided.chisquare.ndarray":"var out = azeros( 5, 'generic' );\nrandom.strided.chisquare.ndarray( out.length, [ 2.0 ], 0, 0, out, 1, 0 )\n","random.strided.chisquare.factory":"var fcn = random.strided.chisquare.factory();\nvar out = azeros( 5, 'generic' );\nfcn( out.length, [ 2.0 ], 0, out, 1 )\n","random.strided.chisquare.PRNG":"var prng = random.strided.chisquare.PRNG;\n","random.strided.chisquare.seed":"var seed = random.strided.chisquare.seed;\n","random.strided.chisquare.seedLength":"var len = random.strided.chisquare.seedLength;\n","random.strided.chisquare.state":"var out = azeros( 3, 'generic' );\nrandom.strided.chisquare( out.length, [ 2.0 ], 0, out, 1 )\nvar state = random.strided.chisquare.state\nout = azeros( 3, 'generic' );\nrandom.strided.chisquare( out.length, [ 2.0 ], 0, out, 1 )\nout = azeros( 3, 'generic' );\nrandom.strided.chisquare( out.length, [ 2.0 ], 0, out, 1 )\nrandom.strided.chisquare.state = state;\nout = azeros( 3, 'generic' );\nrandom.strided.chisquare( out.length, [ 2.0 ], 0, out, 1 )\n","random.strided.chisquare.stateLength":"var len = random.strided.chisquare.stateLength;\n","random.strided.chisquare.byteLength":"var sz = random.strided.chisquare.byteLength;\n","random.strided.cosine":"var mu = linspace( 0.0, 1.0, 5 );\nvar s = linspace( 2.0, 5.0, 5 );\nvar out = azeros( 5, 'generic' );\nrandom.strided.cosine( out.length, mu, 1, s, 1, out, 1 )\nmu = linspace( 0.0, 1.0, 6 );\ns = linspace( 2.0, 5.0, 6 );\nout = azeros( 6, 'generic' );\nrandom.strided.cosine( 3, mu, -2, s, 1, out, 1 )\n","random.strided.cosine.ndarray":"var mu = linspace( 0.0, 1.0, 5 );\nvar s = linspace( 2.0, 5.0, 5 );\nvar out = azeros( 5, 'generic' );\nrandom.strided.cosine.ndarray( out.length, mu, 1, 0, s, 1, 0, out, 1, 0 )\nmu = linspace( 0.0, 1.0, 6 );\ns = linspace( 2.0, 5.0, 6 );\nout = azeros( 6, 'generic' );\nrandom.strided.cosine.ndarray( 3, mu, 2, 1, s, -1, s.length-1, out, 1, 0 )\n","random.strided.discreteUniform":"var a = [ -10, -5, 0, 5, 10 ];\nvar b = [ 20, 20, 20, 20, 20 ];\nvar out = azeros( 5, 'generic' );\nrandom.strided.discreteUniform( out.length, a, 1, b, 1, out, 1 )\na = [ -10, -5, 0, 5, 10, 15 ];\nb = [ 20, 20, 20, 20, 20, 20 ];\nout = azeros( 6, 'generic' );\nrandom.strided.discreteUniform( 3, a, -2, b, 1, out, 1 )\n","random.strided.discreteUniform.ndarray":"var a = [ -10, -5, 0, 5, 10 ];\nvar b = [ 20, 20, 20, 20, 20 ];\nvar out = azeros( 5, 'generic' );\nrandom.strided.discreteUniform.ndarray( out.length, a, 1, 0, b, 1, 0, out, 1, 0 )\na = [ -10, -5, 0, 5, 10, 15 ];\nb = [ 20, 20, 20, 20, 20, 20 ];\nout = azeros( 6, 'generic' );\nrandom.strided.discreteUniform.ndarray( 3, a, 2, 1, b, -1, b.length-1, out, 1, 0 )\n","random.strided.exponential":"var out = azeros( 5, 'generic' );\nrandom.strided.exponential( out.length, [ 2.0 ], 0, out, 1 )\n","random.strided.exponential.ndarray":"var out = azeros( 5, 'generic' );\nrandom.strided.exponential.ndarray( out.length, [ 2.0 ], 0, 0, out, 1, 0 )\n","random.strided.exponential.factory":"var fcn = random.strided.exponential.factory();\nvar out = azeros( 5, 'generic' );\nfcn( out.length, [ 2.0 ], 0, out, 1 )\n","random.strided.exponential.PRNG":"var prng = random.strided.exponential.PRNG;\n","random.strided.exponential.seed":"var seed = random.strided.exponential.seed;\n","random.strided.exponential.seedLength":"var len = random.strided.exponential.seedLength;\n","random.strided.exponential.state":"var out = azeros( 3, 'generic' );\nrandom.strided.exponential( out.length, [ 2.0 ], 0, out, 1 )\nvar state = random.strided.exponential.state\nout = azeros( 3, 'generic' );\nrandom.strided.exponential( out.length, [ 2.0 ], 0, out, 1 )\nout = azeros( 3, 'generic' );\nrandom.strided.exponential( out.length, [ 2.0 ], 0, out, 1 )\nrandom.strided.exponential.state = state;\nout = azeros( 3, 'generic' );\nrandom.strided.exponential( out.length, [ 2.0 ], 0, out, 1 )\n","random.strided.exponential.stateLength":"var len = random.strided.exponential.stateLength;\n","random.strided.exponential.byteLength":"var sz = random.strided.exponential.byteLength;\n","random.strided.gamma":"var a = linspace( 1.0, 5.0, 5 );\nvar b = linspace( 1.0, 5.0, 5 );\nvar out = azeros( 5, 'generic' );\nrandom.strided.gamma( out.length, a, 1, b, 1, out, 1 )\na = linspace( 1.0, 5.0, 6 );\nb = linspace( 1.0, 5.0, 6 );\nout = azeros( 6, 'generic' );\nrandom.strided.gamma( 3, a, -2, b, 1, out, 1 )\n","random.strided.gamma.ndarray":"var a = linspace( 1.0, 5.0, 5 );\nvar b = linspace( 1.0, 5.0, 5 );\nvar out = azeros( 5, 'generic' );\nrandom.strided.gamma.ndarray( out.length, a, 1, 0, b, 1, 0, out, 1, 0 )\na = linspace( 1.0, 5.0, 6 );\nb = linspace( 1.0, 5.0, 6 );\nout = azeros( 6, 'generic' );\nrandom.strided.gamma.ndarray( 3, a, 2, 1, b, -1, b.length-1, out, 1, 0 )\n","random.strided.geometric":"var out = azeros( 5, 'generic' );\nrandom.strided.geometric( out.length, [ 0.01 ], 0, out, 1 )\n","random.strided.geometric.ndarray":"var out = azeros( 5, 'generic' );\nrandom.strided.geometric.ndarray( out.length, [ 0.01 ], 0, 0, out, 1, 0 )\n","random.strided.geometric.factory":"var fcn = random.strided.geometric.factory();\nvar out = azeros( 5, 'generic' );\nfcn( out.length, [ 0.01 ], 0, out, 1 )\n","random.strided.geometric.PRNG":"var prng = random.strided.geometric.PRNG;\n","random.strided.geometric.seed":"var seed = random.strided.geometric.seed;\n","random.strided.geometric.seedLength":"var len = random.strided.geometric.seedLength;\n","random.strided.geometric.state":"var out = azeros( 3, 'generic' );\nrandom.strided.geometric( out.length, [ 0.01 ], 0, out, 1 )\nvar state = random.strided.geometric.state\nout = azeros( 3, 'generic' );\nrandom.strided.geometric( out.length, [ 0.01 ], 0, out, 1 )\nout = azeros( 3, 'generic' );\nrandom.strided.geometric( out.length, [ 0.01 ], 0, out, 1 )\nrandom.strided.geometric.state = state;\nout = azeros( 3, 'generic' );\nrandom.strided.geometric( out.length, [ 0.01 ], 0, out, 1 )\n","random.strided.geometric.stateLength":"var len = random.strided.geometric.stateLength;\n","random.strided.geometric.byteLength":"var sz = random.strided.geometric.byteLength;\n","random.strided.invgamma":"var a = linspace( 1.0, 5.0, 5 );\nvar b = linspace( 1.0, 5.0, 5 );\nvar out = azeros( 5, 'generic' );\nrandom.strided.invgamma( out.length, a, 1, b, 1, out, 1 )\na = linspace( 1.0, 5.0, 6 );\nb = linspace( 1.0, 5.0, 6 );\nout = azeros( 6, 'generic' );\nrandom.strided.invgamma( 3, a, -2, b, 1, out, 1 )\n","random.strided.invgamma.ndarray":"var a = linspace( 1.0, 5.0, 5 );\nvar b = linspace( 1.0, 5.0, 5 );\nvar out = azeros( 5, 'generic' );\nrandom.strided.invgamma.ndarray( out.length, a, 1, 0, b, 1, 0, out, 1, 0 )\na = linspace( 1.0, 5.0, 6 );\nb = linspace( 1.0, 5.0, 6 );\nout = azeros( 6, 'generic' );\nrandom.strided.invgamma.ndarray( 3, a, 2, 1, b, -1, b.length-1, out, 1, 0 )\n","random.strided.lognormal":"var mu = linspace( 0.0, 1.0, 5 );\nvar sigma = linspace( 2.0, 5.0, 5 );\nvar out = azeros( 5, 'generic' );\nrandom.strided.lognormal( out.length, mu, 1, sigma, 1, out, 1 )\nmu = linspace( 0.0, 1.0, 6 );\nsigma = linspace( 2.0, 5.0, 6 );\nout = azeros( 6, 'generic' );\nrandom.strided.lognormal( 3, mu, -2, sigma, 1, out, 1 )\n","random.strided.lognormal.ndarray":"var mu = linspace( 0.0, 1.0, 5 );\nvar sigma = linspace( 2.0, 5.0, 5 );\nvar out = azeros( 5, 'generic' );\nrandom.strided.lognormal.ndarray( out.length, mu, 1, 0, sigma, 1, 0, out, 1, 0 )\nmu = linspace( 0.0, 1.0, 6 );\nsigma = linspace( 2.0, 5.0, 6 );\nout = azeros( 6, 'generic' );\nrandom.strided.lognormal.ndarray( 3, mu, 2, 1, sigma, -1, sigma.length-1, out, 1, 0 )\n","random.strided.minstd":"var out = azeros( 5, 'generic' );\nrandom.strided.minstd( out.length, out, 1 )\n","random.strided.minstd.ndarray":"var out = azeros( 5, 'generic' );\nrandom.strided.minstd.ndarray( out.length, out, 1, 0 )\n","random.strided.minstd.normalized":"var out = azeros( 5, 'generic' );\nrandom.strided.minstd.normalized( out.length, out, 1 )\n","random.strided.minstd.normalized.ndarray":"var out = azeros( 5, 'generic' );\nrandom.strided.minstd.normalized.ndarray( out.length, out, 1, 0 )\n","random.strided.minstdShuffle":"var out = azeros( 5, 'generic' );\nrandom.strided.minstdShuffle( out.length, out, 1 )\n","random.strided.minstdShuffle.ndarray":"var out = azeros( 5, 'generic' );\nrandom.strided.minstdShuffle.ndarray( out.length, out, 1, 0 )\n","random.strided.minstdShuffle.normalized":"var out = azeros( 5, 'generic' );\nrandom.strided.minstdShuffle.normalized( out.length, out, 1 )\n","random.strided.minstdShuffle.normalized.ndarray":"var out = azeros( 5, 'generic' );\nrandom.strided.minstdShuffle.normalized.ndarray( out.length, out, 1, 0 )\n","random.strided.mt19937":"var out = azeros( 5, 'generic' );\nrandom.strided.mt19937( out.length, out, 1 )\n","random.strided.mt19937.ndarray":"var out = azeros( 5, 'generic' );\nrandom.strided.mt19937.ndarray( out.length, out, 1, 0 )\n","random.strided.mt19937.normalized":"var out = azeros( 5, 'generic' );\nrandom.strided.mt19937.normalized( out.length, out, 1 )\n","random.strided.mt19937.normalized.ndarray":"var out = azeros( 5, 'generic' );\nrandom.strided.mt19937.normalized.ndarray( out.length, out, 1, 0 )\n","random.strided.normal":"var mu = linspace( 0.0, 1.0, 5 );\nvar sigma = linspace( 2.0, 5.0, 5 );\nvar out = azeros( 5, 'generic' );\nrandom.strided.normal( out.length, mu, 1, sigma, 1, out, 1 )\nmu = linspace( 0.0, 1.0, 6 );\nsigma = linspace( 2.0, 5.0, 6 );\nout = azeros( 6, 'generic' );\nrandom.strided.normal( 3, mu, -2, sigma, 1, out, 1 )\n","random.strided.normal.ndarray":"var mu = linspace( 0.0, 1.0, 5 );\nvar sigma = linspace( 2.0, 5.0, 5 );\nvar out = azeros( 5, 'generic' );\nrandom.strided.normal.ndarray( out.length, mu, 1, 0, sigma, 1, 0, out, 1, 0 )\nmu = linspace( 0.0, 1.0, 6 );\nsigma = linspace( 2.0, 5.0, 6 );\nout = azeros( 6, 'generic' );\nrandom.strided.normal.ndarray( 3, mu, 2, 1, sigma, -1, sigma.length-1, out, 1, 0 )\n","random.strided.poisson":"var out = azeros( 5, 'generic' );\nrandom.strided.poisson( out.length, [ 2.0 ], 0, out, 1 )\n","random.strided.poisson.ndarray":"var out = azeros( 5, 'generic' );\nrandom.strided.poisson.ndarray( out.length, [ 2.0 ], 0, 0, out, 1, 0 )\n","random.strided.poisson.factory":"var fcn = random.strided.poisson.factory();\nvar out = azeros( 5, 'generic' );\nfcn( out.length, [ 2.0 ], 0, out, 1 )\n","random.strided.poisson.PRNG":"var prng = random.strided.poisson.PRNG;\n","random.strided.poisson.seed":"var seed = random.strided.poisson.seed;\n","random.strided.poisson.seedLength":"var len = random.strided.poisson.seedLength;\n","random.strided.poisson.state":"var out = azeros( 3, 'generic' );\nrandom.strided.poisson( out.length, [ 2.0 ], 0, out, 1 )\nvar state = random.strided.poisson.state\nout = azeros( 3, 'generic' );\nrandom.strided.poisson( out.length, [ 2.0 ], 0, out, 1 )\nout = azeros( 3, 'generic' );\nrandom.strided.poisson( out.length, [ 2.0 ], 0, out, 1 )\nrandom.strided.poisson.state = state;\nout = azeros( 3, 'generic' );\nrandom.strided.poisson( out.length, [ 2.0 ], 0, out, 1 )\n","random.strided.poisson.stateLength":"var len = random.strided.poisson.stateLength;\n","random.strided.poisson.byteLength":"var sz = random.strided.poisson.byteLength;\n","random.strided.randu":"var out = azeros( 5, 'generic' );\nrandom.strided.randu( out.length, out, 1 )\n","random.strided.randu.ndarray":"var out = azeros( 5, 'generic' );\nrandom.strided.randu.ndarray( out.length, out, 1, 0 )\n","random.strided.rayleigh":"var out = azeros( 5, 'generic' );\nrandom.strided.rayleigh( out.length, [ 2.0 ], 0, out, 1 )\n","random.strided.rayleigh.ndarray":"var out = azeros( 5, 'generic' );\nrandom.strided.rayleigh.ndarray( out.length, [ 2.0 ], 0, 0, out, 1, 0 )\n","random.strided.rayleigh.factory":"var fcn = random.strided.rayleigh.factory();\nvar out = azeros( 5, 'generic' );\nfcn( out.length, [ 2.0 ], 0, out, 1 )\n","random.strided.rayleigh.PRNG":"var prng = random.strided.rayleigh.PRNG;\n","random.strided.rayleigh.seed":"var seed = random.strided.rayleigh.seed;\n","random.strided.rayleigh.seedLength":"var len = random.strided.rayleigh.seedLength;\n","random.strided.rayleigh.state":"var out = azeros( 3, 'generic' );\nrandom.strided.rayleigh( out.length, [ 2.0 ], 0, out, 1 )\nvar state = random.strided.rayleigh.state\nout = azeros( 3, 'generic' );\nrandom.strided.rayleigh( out.length, [ 2.0 ], 0, out, 1 )\nout = azeros( 3, 'generic' );\nrandom.strided.rayleigh( out.length, [ 2.0 ], 0, out, 1 )\nrandom.strided.rayleigh.state = state;\nout = azeros( 3, 'generic' );\nrandom.strided.rayleigh( out.length, [ 2.0 ], 0, out, 1 )\n","random.strided.rayleigh.stateLength":"var len = random.strided.rayleigh.stateLength;\n","random.strided.rayleigh.byteLength":"var sz = random.strided.rayleigh.byteLength;\n","random.strided.t":"var out = azeros( 5, 'generic' );\nrandom.strided.t( out.length, [ 2.0 ], 0, out, 1 )\n","random.strided.t.ndarray":"var out = azeros( 5, 'generic' );\nrandom.strided.t.ndarray( out.length, [ 2.0 ], 0, 0, out, 1, 0 )\n","random.strided.t.factory":"var fcn = random.strided.t.factory();\nvar out = azeros( 5, 'generic' );\nfcn( out.length, [ 2.0 ], 0, out, 1 )\n","random.strided.t.PRNG":"var prng = random.strided.t.PRNG;\n","random.strided.t.seed":"var seed = random.strided.t.seed;\n","random.strided.t.seedLength":"var len = random.strided.t.seedLength;\n","random.strided.t.state":"var out = azeros( 3, 'generic' );\nrandom.strided.t( out.length, [ 2.0 ], 0, out, 1 )\nvar state = random.strided.t.state\nout = azeros( 3, 'generic' );\nrandom.strided.t( out.length, [ 2.0 ], 0, out, 1 )\nout = azeros( 3, 'generic' );\nrandom.strided.t( out.length, [ 2.0 ], 0, out, 1 )\nrandom.strided.t.state = state;\nout = azeros( 3, 'generic' );\nrandom.strided.t( out.length, [ 2.0 ], 0, out, 1 )\n","random.strided.t.stateLength":"var len = random.strided.t.stateLength;\n","random.strided.t.byteLength":"var sz = random.strided.t.byteLength;\n","random.strided.uniform":"var a = linspace( 0.0, 1.0, 5 );\nvar b = linspace( 2.0, 5.0, 5 );\nvar out = azeros( 5, 'generic' );\nrandom.strided.uniform( out.length, a, 1, b, 1, out, 1 )\na = linspace( 0.0, 1.0, 6 );\nb = linspace( 2.0, 5.0, 6 );\nout = azeros( 6, 'generic' );\nrandom.strided.uniform( 3, a, -2, b, 1, out, 1 )\n","random.strided.uniform.ndarray":"var a = linspace( 0.0, 1.0, 5 );\nvar b = linspace( 2.0, 5.0, 5 );\nvar out = azeros( 5, 'generic' );\nrandom.strided.uniform.ndarray( out.length, a, 1, 0, b, 1, 0, out, 1, 0 )\na = linspace( 0.0, 1.0, 6 );\nb = linspace( 2.0, 5.0, 6 );\nout = azeros( 6, 'generic' );\nrandom.strided.uniform.ndarray( 3, a, 2, 1, b, -1, b.length-1, out, 1, 0 )\n","random.strided.weibull":"var a = linspace( 1.0, 5.0, 5 );\nvar b = linspace( 1.0, 5.0, 5 );\nvar out = azeros( 5, 'generic' );\nrandom.strided.weibull( out.length, a, 1, b, 1, out, 1 )\na = linspace( 1.0, 5.0, 6 );\nb = linspace( 1.0, 5.0, 6 );\nout = azeros( 6, 'generic' );\nrandom.strided.weibull( 3, a, -2, b, 1, out, 1 )\n","random.strided.weibull.ndarray":"var a = linspace( 1.0, 5.0, 5 );\nvar b = linspace( 1.0, 5.0, 5 );\nvar out = azeros( 5, 'generic' );\nrandom.strided.weibull.ndarray( out.length, a, 1, 0, b, 1, 0, out, 1, 0 )\na = linspace( 1.0, 5.0, 6 );\nb = linspace( 1.0, 5.0, 6 );\nout = azeros( 6, 'generic' );\nrandom.strided.weibull.ndarray( 3, a, 2, 1, b, -1, b.length-1, out, 1, 0 )\n","ranks":"var arr = [ 1.1, 2.0, 3.5, 0.0, 2.4 ] ;\nvar out = ranks( arr )\narr =  [ 2, 2, 1, 4, 3 ];\nout = ranks( arr )\narr = [ null, 2, 2, 1, 4, 3, NaN, NaN ];\nout = ranks( arr )\n","readDir":"function onRead( error, data ) {\n if ( error ) {\n     console.error( error.message );\n } else {\n     console.log( data );\n }\n };\nreadDir( './beep/boop', onRead );\n","readDir.sync":"var out = readDir.sync( './beep/boop' );\n","readFile":"function onRead( error, data ) {\n if ( error ) {\n     console.error( error.message );\n } else {\n     console.log( data );\n }\n };\nreadFile( './beep/boop.js', onRead );\n","readFile.sync":"var out = readFile.sync( './beep/boop.js' );\n","readFileList":"function onRead( error, data ) {\n if ( error ) {\n     console.error( error.message );\n } else {\n     console.log( data );\n }\n };\nvar filepaths = [ './beep/boop.txt', './foo/bar.txt' ];\nreadFileList( filepaths, onRead );\n","readFileList.sync":"var filepaths = [ './beep/boop.txt', './foo/bar.txt' ];\nvar out = readFileList.sync( filepaths );\n","readJSON":"function onRead( error, data ) {\n if ( error ) {\n     console.error( error.message );\n } else {\n     console.log( data );\n }\n };\nreadJSON( './beep/boop.json', onRead );\n","readJSON.sync":"var out = readJSON.sync( './beep/boop.json' );\n","readWASM":"function onRead( error, data ) {\n if ( error ) {\n     console.error( error.message );\n } else {\n     console.log( data );\n }\n };\nreadWASM( './beep/boop.wasm', onRead );\n","readWASM.sync":"var out = readWASM.sync( './beep/boop.wasm' );\n","real":"var z = new Complex128( 5.0, 3.0 );\nvar re = real( z )\n","realarray":"var arr = realarray()\narr = realarray( 'float32' )\nvar arr = realarray( 5 )\narr = realarray( 5, 'int32' )\nvar arr1 = realarray( [ 0.5, 0.5, 0.5 ] );\nvar arr2 = realarray( arr1, 'float32' )\nvar arr1 = [ 0.5, 0.5, 0.5 ];\nvar arr2 = realarray( arr1, 'float32' )\nvar buf = new ArrayBuffer( 16 );\nvar arr = realarray( buf, 0, 4, 'float32' )\n","realarrayCtors":"var ctor = realarrayCtors( 'float64' )\nctor = realarrayCtors( 'float' )\n","realarrayDataTypes":"var out = realarrayDataTypes()\n","realf":"var z = new Complex64( 5.0, 3.0 );\nvar re = realf( z )\n","realmax":"var m = realmax( 'float16' )\nm = realmax( 'float32' )\n","realmin":"var m = realmin( 'float16' )\nm = realmin( 'float32' )\n","reBasename":"var RE = reBasename()\nvar RE_POSIX = reBasename( 'posix' );\nvar RE_WIN32 = reBasename( 'win32' );\nvar str = RE.toString();\nvar bool = ( str === RE_POSIX.toString() || str === RE_WIN32.toString() )\n","reBasename.REGEXP":"var RE = reBasename.REGEXP\n","reBasename.REGEXP_POSIX":"var base = reBasename.REGEXP_POSIX.exec( '/foo/bar/index.js' )[ 1 ]\n","reBasename.REGEXP_WIN32":"var base = reBasename.REGEXP_WIN32.exec( 'C:\\\\foo\\\\bar\\\\index.js' )[ 1 ]\n","reBasenamePosix":"var RE_BASENAME_POSIX = reBasenamePosix();\nvar base = RE_BASENAME_POSIX.exec( '/foo/bar/index.js' )[ 1 ]\nbase = RE_BASENAME_POSIX.exec( './foo/bar/.gitignore' )[ 1 ]\nbase = RE_BASENAME_POSIX.exec( 'foo/file.pdf' )[ 1 ]\nbase = RE_BASENAME_POSIX.exec( '/foo/bar/file' )[ 1 ]\nbase = RE_BASENAME_POSIX.exec( 'index.js' )[ 1 ]\nbase = RE_BASENAME_POSIX.exec( '.' )[ 1 ]\nbase = RE_BASENAME_POSIX.exec( './' )[ 1 ]\nbase = RE_BASENAME_POSIX.exec( '' )[ 1 ]\n","reBasenamePosix.REGEXP":"var base = reBasenamePosix.REGEXP.exec( 'foo/bar/index.js' )[ 1 ]\n","reBasenameWindows":"var RE_BASENAME_WINDOWS = reBasenameWindows();\nvar base = RE_BASENAME_WINDOWS.exec( '\\\\foo\\\\bar\\\\index.js' )[ 1 ]\nbase = RE_BASENAME_WINDOWS.exec( 'C:\\\\foo\\\\bar\\\\.gitignore' )[ 1 ]\nbase = RE_BASENAME_WINDOWS.exec( 'foo\\\\file.pdf' )[ 1 ]\nbase = RE_BASENAME_WINDOWS.exec( 'foo\\\\bar\\\\file' )[ 1 ]\nbase = RE_BASENAME_WINDOWS.exec( 'index.js' )[ 1 ]\nbase = RE_BASENAME_WINDOWS.exec( '.' )[ 1 ]\nbase = RE_BASENAME_WINDOWS.exec( '' )[ 1 ]\n","reBasenameWindows.REGEXP":"var match = reBasenameWindows.REGEXP.exec( 'foo\\\\file.pdf' )[ 1 ]\n","reColorHexadecimal":"var RE = reColorHexadecimal();\nvar bool = RE.test( 'ffffff' )\nbool = RE.test( '000' )\nbool = RE.test( 'beep' )\n","reColorHexadecimal.REGEXP":"var bool = reColorHexadecimal.REGEXP.test( 'ffffff' )\nbool = reColorHexadecimal.REGEXP.test( '000' )\nbool = reColorHexadecimal.REGEXP.test( 'beep' )\n","reColorHexadecimal.REGEXP_SHORTHAND":"var bool = reColorHexadecimal.REGEXP_SHORTHAND.test( 'ffffff' )\nbool = reColorHexadecimal.REGEXP_SHORTHAND.test( '000' )\nbool = reColorHexadecimal.REGEXP_SHORTHAND.test( 'beep' )\n","reColorHexadecimal.REGEXP_EITHER":"var bool = reColorHexadecimal.REGEXP_EITHER.test( 'ffffff' )\nbool = reColorHexadecimal.REGEXP_EITHER.test( '000' )\nbool = reColorHexadecimal.REGEXP_EITHER.test( 'beep' )\n","reDecimalNumber":"var RE = reDecimalNumber();\nvar bool = RE.test( '1.234' )\nbool = RE.test( '-1.234' )\nbool = RE.test( '0.0' )\nbool = RE.test( '.0' )\nbool = RE.test( '0' )\nbool = RE.test( 'beep' )\nvar re = reDecimalNumber({ 'flags': 'g' });\nvar str = '1.234 5.6, 7.8';\nvar out = str.match( re )\n","reDecimalNumber.REGEXP":"var RE = reDecimalNumber.REGEXP;\nvar bool = RE.test( '1.234' )\nbool = RE.test( '-1.234' )\n","reDecimalNumber.REGEXP_CAPTURE":"var RE = reDecimalNumber.REGEXP_CAPTURE;\nvar str = '1.02';\nvar out = replace( str, RE, '$1 x $1' )\n","reDirname":"var RE = reDirname()\nvar RE_POSIX = reDirname( 'posix' );\nvar dir = RE_POSIX.exec( '/foo/bar/index.js' )[ 1 ]\nvar RE_WIN32 = reDirname( 'win32' );\ndir = RE_WIN32.exec( 'C:\\\\foo\\\\bar\\\\index.js' )[ 1 ]\nvar str = RE.toString();\nvar bool = ( str === RE_POSIX.toString() || str === RE_WIN32.toString() )\n","reDirname.REGEXP":"var RE = reDirname.REGEXP\n","reDirname.REGEXP_POSIX":"var dir = reDirname.REGEXP_POSIX.exec( '/foo/bar/index.js' )[ 1 ]\n","reDirname.REGEXP_WIN32":"var dir = reDirname.REGEXP_WIN32.exec( 'C:\\\\foo\\\\bar\\\\index.js' )[ 1 ]\n","reDirnamePosix":"var RE = reDirnamePosix();\nvar dir = RE.exec( '/foo/bar/index.js' )[ 1 ]\ndir = RE.exec( './foo/bar/.gitignore' )[ 1 ]\ndir = RE.exec( 'foo/file.pdf' )[ 1 ]\ndir = RE.exec( '/foo/bar/file' )[ 1 ]\ndir = RE.exec( 'index.js' )[ 1 ]\ndir = RE.exec( '.' )[ 1 ]\ndir = RE.exec( './' )[ 1 ]\ndir = RE.exec( '' )[ 1 ]\n","reDirnamePosix.REGEXP":"var ext = reDirnamePosix.REGEXP.exec( '/foo/bar/index.js' )[ 1 ]\n","reDirnameWindows":"var RE = reDirnameWindows();\nvar dir = RE.exec( 'foo\\\\bar\\\\index.js' )[ 1 ]\ndir = RE.exec( 'C:\\\\foo\\\\bar\\\\.gitignore' )[ 1 ]\ndir = RE.exec( 'foo\\\\file.pdf' )[ 1 ]\ndir = RE.exec( '\\\\foo\\\\bar\\\\file' )[ 1 ]\ndir = RE.exec( 'index.js' )[ 1 ]\ndir = RE.exec( '' )[ 1 ]\n","reDirnameWindows.REGEXP":"var dir = reDirnameWindows.REGEXP.exec( 'foo\\\\bar\\\\index.js' )[ 1 ]\n","reduce":"var f = naryFunction( base.add, 2 );\nvar arr = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\nvar out = reduce( arr, 0.0, f )\narr = array( arr, { 'shape': [ 2, 3 ] } );\nout = reduce( arr, 0.0, f )\n","reduce2d":"var f = naryFunction( base.add, 2 );\nvar arr = [ [ 1, 2, 3 ], [ 4, 5, 6 ] ];\nvar out = reduce2d( arr, [ 0, 0 ], f )\n","reduceAsync":"function fcn( acc, value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     acc.sum += value;\n     next( null, acc );\n }\n };\nfunction done( error, acc ) {\n if ( error ) {\n     throw error;\n }\n console.log( acc.sum );\n };\nvar arr = [ 3000, 2500, 1000 ];\nvar acc = { 'sum': 0 };\nreduceAsync( arr, acc, fcn, done )\nfunction fcn( acc, value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     acc.sum += value;\n     next( null, acc );\n }\n };\nfunction done( error, acc ) {\n if ( error ) {\n     throw error;\n }\n console.log( acc.sum );\n };\nvar opts = { 'limit': 2 };\nvar arr = [ 3000, 2500, 1000 ];\nvar acc = { 'sum': 0 };\nreduceAsync( arr, acc, opts, fcn, done )\nfunction fcn( acc, value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     acc.sum += value;\n     next( null, acc );\n }\n };\nfunction done( error, acc ) {\n if ( error ) {\n     throw error;\n }\n console.log( acc.sum );\n };\nvar opts = { 'series': false };\nvar arr = [ 3000, 2500, 1000 ];\nvar acc = { 'sum': 0 };\nreduceAsync( arr, acc, opts, fcn, done )\n","reduceAsync.factory":"function fcn( acc, value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     acc.sum += value;\n     next( null, acc );\n }\n };\nvar opts = { 'series': false };\nvar f = reduceAsync.factory( opts, fcn );\nfunction done( error, acc ) {\n if ( error ) {\n     throw error;\n }\n console.log( acc.sum );\n };\nvar arr = [ 3000, 2500, 1000 ];\nvar acc = { 'sum': 0 };\nf( arr, acc, done )\nacc = { 'sum': 0 };\narr = [ 2000, 1500, 1000 ];\nf( arr, acc, done )\n","reduceRight":"var f = naryFunction( base.add, 2 );\nvar arr = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\nvar out = reduceRight( arr, 0.0, f )\narr = array( arr, { 'shape': [ 2, 3 ] } );\nout = reduceRight( arr, 0.0, f )\n","reduceRightAsync":"function fcn( acc, value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     acc.sum += value;\n     next( null, acc );\n }\n };\nfunction done( error, acc ) {\n if ( error ) {\n     throw error;\n }\n console.log( acc.sum );\n };\nvar arr = [ 1000, 2500, 3000 ];\nvar acc = { 'sum': 0 };\nreduceRightAsync( arr, acc, fcn, done )\nfunction fcn( acc, value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     acc.sum += value;\n     next( null, acc );\n }\n };\nfunction done( error, acc ) {\n if ( error ) {\n     throw error;\n }\n console.log( acc.sum );\n };\nvar opts = { 'limit': 2 };\nvar arr = [ 1000, 2500, 3000 ];\nvar acc = { 'sum': 0 };\nreduceRightAsync( arr, acc, opts, fcn, done )\nfunction fcn( acc, value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     acc.sum += value;\n     next( null, acc );\n }\n };\nfunction done( error, acc ) {\n if ( error ) {\n     throw error;\n }\n console.log( acc.sum );\n };\nvar opts = { 'series': false };\nvar arr = [ 1000, 2500, 3000 ];\nvar acc = { 'sum': 0 };\nreduceRightAsync( arr, acc, opts, fcn, done )\n","reduceRightAsync.factory":"function fcn( acc, value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     acc.sum += value;\n     next( null, acc );\n }\n };\nvar opts = { 'series': false };\nvar f = reduceRightAsync.factory( opts, fcn );\nfunction done( error, acc ) {\n if ( error ) {\n     throw error;\n }\n console.log( acc.sum );\n };\nvar arr = [ 1000, 2500, 3000 ];\nvar acc = { 'sum': 0 };\nf( arr, acc, done )\nacc = { 'sum': 0 };\narr = [ 1000, 1500, 2000 ];\nf( arr, acc, done )\n","reDurationString":"var RE = reDurationString();\nvar parts = RE.exec( '3d2ms' )\nparts = RE.exec( '4h3m20s' )\n","reDurationString.REGEXP":"var bool = reDurationString.REGEXP.test( '3d2ms' )\nbool = reDurationString.REGEXP.test( 'foo' )\n","reEOL":"var RE_EOL = reEOL();\nvar bool = RE_EOL.test( '\\n' )\nbool = RE_EOL.test( '\\r\\n' )\nbool = RE_EOL.test( '\\\\r\\\\n' )\n","reEOL.REGEXP":"var bool = reEOL.REGEXP.test( 'abc' )\n","reEOL.REGEXP_CAPTURE":"var parts = reEOL.REGEXP_CAPTURE.exec( '\\n' )\n","reExtendedLengthPath":"var RE = reExtendedLengthPath();\nvar path = '\\\\\\\\?\\\\C:\\\\foo\\\\bar';\nvar bool = RE.test( path )\npath = '\\\\\\\\?\\\\UNC\\\\server\\\\share';\nbool = RE.test( path )\npath = 'C:\\\\foo\\\\bar';\nbool = RE.test( path )\npath = '/c/foo/bar';\nbool = RE.test( path )\npath = '/foo/bar';\nbool = RE.test( path )\n","reExtendedLengthPath.REGEXP":"var bool = reExtendedLengthPath.REGEXP.test( 'C:\\\\foo\\\\bar' )\n","reExtname":"var RE = reExtname()\nvar RE_POSIX = reExtname( 'posix' );\nvar ext = RE_POSIX.exec( '/foo/bar/index.js' )[ 1 ]\nvar RE_WIN32 = reExtname( 'win32' );\next = RE.exec( 'C:\\\\foo\\\\bar\\\\index.js' )[ 1 ]\nvar str = RE.toString();\nvar bool = ( str === RE_POSIX.toString() || str === RE_WIN32.toString() )\n","reExtname.REGEXP":"var RE = reExtname.REGEXP\n","reExtname.REGEXP_POSIX":"var ext = reExtname.REGEXP_POSIX.exec( '/foo/bar/index.js' )[ 1 ]\n","reExtname.REGEXP_WIN32":"var ext = reExtname.REGEXP_WIN32.exec( 'C:\\\\foo\\\\bar\\\\index.js' )[ 1 ]\n","reExtnamePosix":"var RE = reExtnamePosix();\nvar ext = RE.exec( '/foo/bar/index.js' )[ 1 ]\next = RE.exec( './foo/bar/.gitignore' )[ 1 ]\next = RE.exec( 'foo/file.pdf' )[ 1 ]\next = RE.exec( '/foo/bar/file' )[ 1 ]\next = RE.exec( 'index.js' )[ 1 ]\next = RE.exec( '.' )[ 1 ]\next = RE.exec( './' )[ 1 ]\next = RE.exec( '' )[ 1 ]\n","reExtnamePosix.REGEXP":"var ext = reExtnamePosix.REGEXP.exec( '/foo/bar/index.js' )[ 1 ]\n","reExtnameWindows":"var RE = reExtnameWindows();\nvar ext = RE.exec( 'C:\\\\foo\\\\bar\\\\index.js' )[ 1 ]\next = RE.exec( 'C:\\\\foo\\\\bar\\\\.gitignore' )[ 1 ]\next = RE.exec( 'foo\\\\file.pdf' )[ 1 ]\next = RE.exec( '\\\\foo\\\\bar\\\\file' )[ 1 ]\next = RE.exec( 'beep\\\\boop.' )[ 1 ]\next = RE.exec( 'index.js' )[ 1 ]\next = RE.exec( '' )[ 1 ]\n","reExtnameWindows.REGEXP":"var ext = reExtnameWindows.REGEXP.exec( 'C:\\\\foo\\\\bar\\\\index.js' )[ 1 ]\n","reFilename":"var RE = reFilename()\nvar RE_POSIX = reFilename( 'posix' );\nvar parts = RE_POSIX.exec( '/foo/bar/index.js' ).slice()\nvar RE_WIN32 = reFilename( 'win32' );\nparts = RE.exec( 'C:\\\\foo\\\\bar\\\\index.js' ).slice()\nvar str = RE.toString();\nvar bool = ( str === RE_POSIX.toString() || str === RE_WIN32.toString() )\n","reFilename.REGEXP":"var RE = reFilename.REGEXP\n","reFilename.REGEXP_POSIX":"var f = '/foo/bar/index.js';\nvar parts = reFilename.REGEXP_POSIX.exec( f ).slice()\n","reFilename.REGEXP_WIN32":"var f = 'C:\\\\foo\\\\bar\\\\index.js';\nvar parts = reFilename.REGEXP_WIN32.exec( f ).slice()\n","reFilenamePosix":"var RE = reFilenamePosix();\nvar parts = RE.exec( '/foo/bar/index.js' ).slice()\nparts = RE.exec( './foo/bar/.gitignore' ).slice()\nparts = RE.exec( 'foo/file.pdf' ).slice()\nparts = RE.exec( '/foo/bar/file' ).slice()\nparts = RE.exec( 'index.js' ).slice()\nparts = RE.exec( '.' ).slice()\nparts = RE.exec( './' ).slice()\nparts = RE.exec( '' ).slice()\n","reFilenamePosix.REGEXP":"var parts = reFilenamePosix.REGEXP.exec( '/foo/bar/index.js' ).slice()\n","reFilenameWindows":"var RE = reFilenameWindows();\nvar parts = RE.exec( 'C:\\\\foo\\\\bar\\\\index.js' ).slice()\nparts = RE.exec( '\\\\foo\\\\bar\\\\.gitignore' ).slice()\nparts = RE.exec( 'foo\\\\file.pdf' ).slice()\nparts = RE.exec( '\\\\foo\\\\bar\\\\file' ).slice()\nparts = RE.exec( 'index.js' ).slice()\nparts = RE.exec( '.' ).slice()\nparts = RE.exec( './' ).slice()\nparts = RE.exec( '' ).slice()\n","reFilenameWindows.REGEXP":"var parts = reFilenameWindows.REGEXP.exec( 'C:\\\\foo\\\\bar\\\\index.js' ).slice()\n","reFromString":"var re = reFromString( '/beep/' )\nre = reFromString( '/beep' )\n","reFunctionName":"var RE_FUNCTION_NAME = reFunctionName();\nfunction beep() { return 'boop'; };\nvar name = RE_FUNCTION_NAME.exec( beep.toString() )[ 1 ]\nname = RE_FUNCTION_NAME.exec( function () {} )[ 1 ]\n","reFunctionName.REGEXP":"var str = reFunctionName.REGEXP.exec( Math.sqrt.toString() )[ 1 ]\n","regexp2json":"var json = regexp2json( /ab+c/ )\n","reim":"var z = new Complex128( 5.0, 3.0 );\nvar out = reim( z )\n","reimf":"var z = new Complex64( 5.0, 3.0 );\nvar out = reimf( z )\n","rejectArguments":"function foo( a, b ) { return [ a, b ]; };\nfunction predicate( v ) { return ( v === 2 ); };\nvar bar = rejectArguments( foo, predicate );\nvar out = bar( 1, 2, 3 )\n","removeFirst":"var out = removeFirst( 'beep' )\nout = removeFirst( 'Boop' )\nout = removeFirst( 'foo bar', 4 )\n","removeLast":"var out = removeLast( 'beep' )\nout = removeLast( 'Boop' )\nout = removeLast( 'foo bar', 4 )\n","removePunctuation":"var str = 'Sun Tzu said: \"A leader leads by example not by force.\"';\nvar out = removePunctuation( str )\nstr = 'This function removes these characters: `{}[]:,!/<>().;~|?\\'\"';\nout = removePunctuation( str )\n","removeUTF8BOM":"var out = removeUTF8BOM( '\\ufeffbeep' )\n","removeWords":"var out = removeWords( 'beep boop Foo bar', [ 'boop', 'foo' ] )\nout = removeWords( 'beep boop Foo bar', [ 'boop', 'foo' ], true )\n","rename":"function done( error ) {\n if ( error ) {\n     console.error( error.message );\n }\n };\nrename( './beep/boop.txt', './beep/foo.txt', done );\n","rename.sync":"var err = rename.sync( './beep/boop.txt', './beep/foo.txt' );\n","reNativeFunction":"var RE = reNativeFunction();\nvar bool = RE.test( Date.toString() )\nbool = RE.test( (function noop() {}).toString() )\n","reNativeFunction.REGEXP":"var bool = reNativeFunction.REGEXP.test( Date.toString() )\nbool = reNativeFunction.REGEXP.test( (function noop() {}).toString() )\n","reorderArguments":"function foo( a, b, c ) { return [ a, b, c ]; };\nvar bar = reorderArguments( foo, [ 2, 0, 1 ] );\nvar out = bar( 1, 2, 3 )\n","repeat":"var out = repeat( 'a', 5 )\nout = repeat( '', 100 )\nout = repeat( 'beep', 0 )\n","replace":"var out = replace( 'beep', 'e', 'o' )\nfunction replacer( match, p1 ) { return '/'+p1+'/'; };\nvar str = 'Oranges and lemons';\nout = replace( str, /([^\\s]+)/gi, replacer )\nout = replace( 'beep', /e/, 'o' )\n","replaceBefore":"var str = 'beep boop';\nvar out = replaceBefore( str, ' ', 'foo' )\nout = replaceBefore( str, 'o', 'foo' )\n","reRegExp":"var RE = reRegExp();\nvar bool = RE.test( '/^beep$/' )\nbool = RE.test( '/boop' )\nbool = RE.test( '/^\\/([^\\/]+)\\/(.*)$/' )\nbool = RE.test( '/^\\\\/([^\\\\/]+)\\\\/(.*)$/' )\n","reRegExp.REGEXP":"var bool = reRegExp.REGEXP.test( '/^beep$/' )\nbool = reRegExp.REGEXP.test( '/boop' )\n","rescape":"var str = rescape( '[A-Z]*' )\n","reSemVer":"var RE_SEMVER = reSemVer()\nvar bool = RE_SEMVER.test( '1.0.0' )\nbool = RE_SEMVER.test( '1.0.0-alpha.1' )\nbool = RE_SEMVER.test( 'abc' )\nbool = RE_SEMVER.test( '1.0.0-alpha.1+build.1' )\n","reSemVer.REGEXP":"var bool = reSemVer.REGEXP.test( '1.0.0' )\nbool = reSemVer.REGEXP.test( '-1.0.0-alpha.1' )\n","resolveParentPath":"function onPath( error, path ) {\n if ( error ) {\n     console.error( error.message );\n } else {\n     console.log( path );\n }\n };\nresolveParentPath( 'package.json', onPath );\n","resolveParentPath.sync":"var out = resolveParentPath.sync( 'package.json' );\n","resolveParentPathBy":"function predicate( path, next ) {\n setTimeout( onTimeout, path );\n function onTimeout() {\n     console.log( path );\n     next( null, false );\n }\n };\nfunction onPath( error, path ) {\n if ( error ) {\n     console.error( error.message );\n } else {\n     console.log( path );\n }\n };\nresolveParentPathBy( 'package.json', predicate, onPath );\n","resolveParentPathBy.sync":"function predicate() { return false; };\nvar out = resolveParentPathBy.sync( 'package.json', predicate );\n","reUncPath":"var RE = reUncPath();\nvar path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz:a:b';\nvar bool = RE.test( path )\npath = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz::b';\nbool = RE.test( path )\npath = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz:a';\nbool = RE.test( path )\npath = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz';\nbool = RE.test( path )\npath = '\\\\\\\\server\\\\share\\\\foo\\\\bar';\nbool = RE.test( path )\npath = '\\\\\\\\server\\\\share\\\\foo';\nbool = RE.test( path )\npath = '\\\\\\\\server\\\\share';\nbool = RE.test( path )\npath = '\\\\\\\\server\\\\\\\\share';\nbool = RE.test( path )\npath = '\\\\\\\\\\\\\\\\server\\\\share';\nbool = RE.test( path )\npath = 'beep boop \\\\\\\\server\\\\share';\nbool = RE.test( path )\npath = '\\\\\\\\server';\nbool = RE.test( path )\npath = '\\\\';\nbool = RE.test( path )\npath = '';\nbool = RE.test( path )\npath = '\\\\\\\\server\\\\share\\\\';\nbool = RE.test( path )\npath = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz:';\nbool = RE.test( path )\npath = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz:a:';\nbool = RE.test( path )\npath = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz::';\nbool = RE.test( path )\npath = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz:a:b:c';\nbool = RE.test( path )\npath = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\';\nbool = RE.test( path )\npath = '//server/share';\nbool = RE.test( path )\npath = '/foo/bar';\nbool = RE.test( path )\npath = 'foo/bar';\nbool = RE.test( path )\npath = './foo/bar';\nbool = RE.test( path )\npath = '/foo/../bar';\nbool = RE.test( path )\n","reUncPath.REGEXP":"var path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz:a:b';\nvar bool = reUncPath.REGEXP.test( path )\npath = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz::b';\nbool = reUncPath.REGEXP.test( path )\n","reUtf16SurrogatePair":"var RE = reUtf16SurrogatePair();\nvar bool = RE.test( 'abc\\uD800\\uDC00def' )\nbool = RE.test( 'abcdef' )\n","reUtf16SurrogatePair.REGEXP":"var RE = reUtf16SurrogatePair.REGEXP;\nvar bool = RE.test( 'abc\\uD800\\uDC00def' )\nbool = RE.test( 'abcdef' )\n","reUtf16UnpairedSurrogate":"var RE = reUtf16UnpairedSurrogate();\nvar bool = RE.test( 'abc' )\nbool = RE.test( '\\uD800' )\n","reUtf16UnpairedSurrogate.REGEXP":"var RE = reUtf16UnpairedSurrogate.REGEXP;\nvar bool = RE.test( 'abc' )\nbool = RE.test( '\\uD800' )\n","reverseArguments":"function foo( a, b, c ) { return [ a, b, c ]; };\nvar bar = reverseArguments( foo );\nvar out = bar( 1, 2, 3 )\n","reverseString":"var out = reverseString( 'foo' )\nout = reverseString( 'abcdef' )\n","reviveBasePRNG":"var str = JSON.stringify( base.random.mt19937 );\nvar r = parseJSON( str, reviveBasePRNG )\n","reviveBuffer":"var str = '{\"type\":\"Buffer\",\"data\":[5,3]}';\nvar buf = parseJSON( str, reviveBuffer )\n","reviveComplex":"var str = '{\"type\":\"Complex128\",\"re\":5,\"im\":3}';\nvar z = parseJSON( str, reviveComplex )\n","reviveComplex64":"var str = '{\"type\":\"Complex64\",\"re\":5,\"im\":3}';\nvar z = parseJSON( str, reviveComplex64 )\n","reviveComplex128":"var str = '{\"type\":\"Complex128\",\"re\":5,\"im\":3}';\nvar z = parseJSON( str, reviveComplex128 )\n","reviveError":"var str = '{\"type\":\"TypeError\",\"message\":\"beep\"}';\nvar err = JSON.parse( str, reviveError )\n","reviveRegExp":"var str = '{\"type\":\"RegExp\",\"pattern\":\"ab+c\",\"flags\":\"\"}';\nvar v = parseJSON( str, reviveRegExp )\n","reviveTypedArray":"var str = '{\"type\":\"Float64Array\",\"data\":[5,3]}';\nvar arr = parseJSON( str, reviveTypedArray )\n","reWhitespace":"var RE = reWhitespace();\nvar bool = RE.test( '\\n' )\nbool = RE.test( ' ' )\nbool = RE.test( 'a' )\n","reWhitespace.REGEXP":"var RE = reWhitespace.REGEXP;\nvar bool = RE.test( '\\n' )\nbool = RE.test( ' ' )\nbool = RE.test( 'a' )\n","reWhitespace.REGEXP_CAPTURE":"var RE = reWhitespace.REGEXP_CAPTURE;\nvar str = 'Duplicate capture';\nvar out = replace( str, RE, '$1$1' )\n","rpad":"var out = rpad( 'a', 5 )\nout = rpad( 'beep', 10, 'p' )\nout = rpad( 'beep', 12, 'boop' )\n","rtrim":"var out = rtrim( ' \\t\\t\\n  Beep \\r\\n\\t  ' )\n","rtrimN":"var out = rtrimN( '  abc  ', 2 )\nvar out = rtrimN( '!!!abc!!!', 2, '!' )\n","safeintmax":"var m = safeintmax( 'float16' )\nm = safeintmax( 'float32' )\n","safeintmin":"var m = safeintmin( 'float16' )\nm = safeintmin( 'float32' )\n","sample":"var out = sample( 'abc' )\nout = sample( [ 3, 6, 9 ] )\nvar bool = ( out.length === 3 )\nout = sample( [ 3, null, NaN, 'abc', function(){} ] )\nout = sample( [ 3, 6, 9 ], { 'size': 10 } )\nout = sample( [ 0, 1 ], { 'size': 20 } )\nout = sample( [ 1, 2, 3, 4, 5, 6 ], { 'replace': false, 'size': 3 } )\nout = sample( [ 0, 1 ], { 'replace': false } )\nvar x = [ 1, 2, 3, 4, 5, 6 ];\nvar probs = [ 0.1, 0.1, 0.1, 0.1, 0.1, 0.5 ];\nout = sample( x, { 'probs': probs } )\nout = sample( x, { 'probs': probs, 'size': 3, 'replace': false } )\n","sample.factory":"var mysample = sample.factory({ 'seed': 232 } );\nvar out = mysample( 'abcdefg' )\nvar pool = [ 1, 2, 3, 4, 5, 6 ];\nmysample = sample.factory( pool, { 'seed': 232, 'size': 2 } );\nout = mysample()\nout = mysample()\nvar opts = { 'seed': 474, 'size': 3, 'mutate': true, 'replace': false };\npool = [ 1, 2, 3, 4, 5, 6 ];\nmysample = sample.factory( pool, opts );\nout = mysample()\nout = mysample()\nout = mysample()\nmysample = sample.factory( [ 0, 1 ], { 'size': 2 } );\nout = mysample()\nout = mysample({ 'size': 10 })\nmysample = sample.factory( [ 0, 1 ], { 'size': 2 } );\nout = mysample()\nout = mysample({ 'replace': false })\nout = mysample()\n","SAVOY_STOPWORDS_FIN":"var list = SAVOY_STOPWORDS_FIN()\n","SAVOY_STOPWORDS_FR":"var list = SAVOY_STOPWORDS_FR()\n","SAVOY_STOPWORDS_GER":"var list = SAVOY_STOPWORDS_GER()\n","SAVOY_STOPWORDS_IT":"var list = SAVOY_STOPWORDS_IT()\n","SAVOY_STOPWORDS_POR":"var list = SAVOY_STOPWORDS_POR()\n","SAVOY_STOPWORDS_SP":"var list = SAVOY_STOPWORDS_SP()\n","SAVOY_STOPWORDS_SWE":"var list = SAVOY_STOPWORDS_SWE()\n","scalar2array":"var x = scalar2array( 1.0 )\n","scalar2ndarray":"var x = scalar2ndarray( 1.0 )\nvar sh = x.shape\nvar dt = x.dtype\nvar v = x.get()\n","sdot":"var x = array( new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\nvar y = array( new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\nsdot( x, y )\n","SECONDS_IN_DAY":"var days = 3.14;\nvar secs = days * SECONDS_IN_DAY\n","SECONDS_IN_HOUR":"var hrs = 3.14;\nvar secs = hrs * SECONDS_IN_HOUR\n","SECONDS_IN_MINUTE":"var mins = 3.14;\nvar secs = mins * SECONDS_IN_MINUTE\n","SECONDS_IN_WEEK":"var wks = 3.14;\nvar secs = wks * SECONDS_IN_WEEK\n","secondsInMonth":"var num = secondsInMonth()\nnum = secondsInMonth( 2 )\nnum = secondsInMonth( 2, 2016 )\nnum = secondsInMonth( 2, 2017 )\nnum = secondsInMonth( 'feb', 2016 )\nnum = secondsInMonth( 'february', 2016 )\n","secondsInYear":"var num = secondsInYear()\nnum = secondsInYear( 2016 )\nnum = secondsInYear( 2017 )\n","sentencize":"var out = sentencize( 'Hello Mrs. Maple, could you call me back?' )\nout = sentencize( 'Hello World! How are you?' )\n","seq2slice":"var s = new seq2slice( '1:10', 10, false );\ns.start\ns.stop\ns.step\ns = new seq2slice( '2:5:2', 10, false );\ns.start\ns.stop\ns.step\n","setConfigurableReadOnly":"var obj = {};\nsetConfigurableReadOnly( obj, 'foo', 'bar' );\nobj.foo = 'boop';\nobj\n","setConfigurableReadOnlyAccessor":"var obj = {};\nfunction getter() { return 'bar'; };\nsetConfigurableReadOnlyAccessor( obj, 'foo', getter );\nobj.foo\n","setConfigurableReadWriteAccessor":"var obj = {};\nvar name = 'bar';\nfunction getter() { return name + ' foo'; };\nfunction setter( v ) { name = v; };\nsetConfigurableReadWriteAccessor( obj, 'foo', getter, setter );\nobj.foo\nobj.foo = 'beep';\nobj.foo\n","setConfigurableWriteOnlyAccessor":"var obj = {};\nvar val = '';\nfunction setter( v ) { val = v; };\nsetConfigurableWriteOnlyAccessor( obj, 'foo', setter );\nobj.foo = 'bar';\nval\n","setMemoizedConfigurableReadOnly":"var obj = {};\nfunction foo() { return 'bar'; };\nsetMemoizedConfigurableReadOnly( obj, 'foo', foo );\nobj.foo\n","setMemoizedReadOnly":"var obj = {};\nfunction foo() { return 'bar'; };\nsetMemoizedReadOnly( obj, 'foo', foo );\nobj.foo\n","setNonEnumerableProperty":"var obj = {};\nsetNonEnumerableProperty( obj, 'foo', 'bar' );\nobj.foo\nobjectKeys( obj )\n","setNonEnumerableReadOnly":"var obj = {};\nsetNonEnumerableReadOnly( obj, 'foo', 'bar' );\nobj.foo = 'boop';\nobj\n","setNonEnumerableReadOnlyAccessor":"var obj = {};\nfunction getter() { return 'bar'; };\nsetNonEnumerableReadOnlyAccessor( obj, 'foo', getter );\nobj.foo\n","setNonEnumerableReadWriteAccessor":"var obj = {};\nvar name = 'bar';\nfunction getter() { return name + ' foo'; };\nfunction setter( v ) { name = v; };\nsetNonEnumerableReadWriteAccessor( obj, 'foo', getter, setter );\nobj.foo\nobj.foo = 'beep';\nobj.foo\n","setNonEnumerableWriteOnlyAccessor":"var obj = {};\nvar val = '';\nfunction setter( v ) { val = v; };\nsetNonEnumerableWriteOnlyAccessor( obj, 'foo', setter );\nobj.foo = 'bar';\nval\n","setReadOnly":"var obj = {};\nsetReadOnly( obj, 'foo', 'bar' );\nobj.foo = 'boop';\nobj\n","setReadOnlyAccessor":"var obj = {};\nfunction getter() { return 'bar'; };\nsetReadOnlyAccessor( obj, 'foo', getter );\nobj.foo\n","setReadWriteAccessor":"var obj = {};\nvar name = 'bar';\nfunction getter() { return name + ' foo'; };\nfunction setter( v ) { name = v; };\nsetReadWriteAccessor( obj, 'foo', getter, setter );\nobj.foo\nobj.foo = 'beep';\nobj.foo\n","setWriteOnlyAccessor":"var obj = {};\nvar val = '';\nfunction setter( v ) { val = v; };\nsetWriteOnlyAccessor( obj, 'foo', setter );\nobj.foo = 'bar';\nval\n","SharedArrayBuffer":"var buf = new SharedArrayBuffer( 5 )\n","SharedArrayBuffer.length":"SharedArrayBuffer.length\n","SharedArrayBuffer.prototype.byteLength":"var buf = new SharedArrayBuffer( 5 );\nbuf.byteLength\n","SharedArrayBuffer.prototype.slice":"var b1 = new SharedArrayBuffer( 10 );\nvar b2 = b1.slice( 2, 6 );\nvar bool = ( b1 === b2 )\nb2.byteLength\n","shift":"var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\nvar out = shift( arr )\narr = new Float64Array( [ 1.0, 2.0 ] );\nout = shift( arr )\narr = { 'length': 2, '0': 1.0, '1': 2.0 };\nout = shift( arr )\n","shuffle":"var data = [ 1, 2, 3 ];\nvar out = shuffle( data )\nout = shuffle( data, { 'copy': 'none' } );\nvar bool = ( data === out )\n","shuffle.factory":"var myshuffle = shuffle.factory();\nmyshuffle = shuffle.factory({ 'seed': 239 });\nvar arr = [ 0, 1, 2, 3, 4 ];\nvar out = myshuffle( arr )\nmyshuffle = shuffle.factory({ 'copy': 'none', 'seed': 867 });\narr = [ 1, 2, 3, 4, 5, 6 ];\nout = myshuffle( arr );\nvar bool = ( arr === out )\narr = [ 1, 2, 3, 4 ];\nout = myshuffle( arr, { 'copy': 'shallow' } );\nbool = ( arr === out )\n","sizeOf":"var s = sizeOf( 'int8' )\ns = sizeOf( 'uint32' )\n","Slice":"var s = new Slice();\ns = new Slice( 10 );\nvar s = new Slice( 2, 10 );\ns = new Slice( 2, 10, 1 );\n","Slice.prototype.start":"var s = new Slice( 10 );\ns.start\ns = new Slice( 2, 10 );\ns.start\n","Slice.prototype.stop":"var s = new Slice( 10 );\ns.stop\ns = new Slice( 2, 10 );\ns.stop\n","Slice.prototype.step":"var s = new Slice( 10 );\ns.step\ns = new Slice( 2, 10 );\ns.step\ns = new Slice( 2, 10, 1 );\ns.step\n","Slice.prototype.toString":"var s = new Slice( 10 );\ns.toString()\ns = new Slice( 2, 10, 1 );\ns.toString()\n","Slice.prototype.toJSON":"var s = new Slice( 10 );\ns.toJSON()\ns = new Slice( 2, 10, 1 );\ns.toJSON()\n","snakecase":"var out = snakecase( 'Hello World!' )\nout = snakecase( 'I am a tiny little teapot' )\n","some":"var arr = [ 0, 0, 1, 2, 3 ];\nvar bool = some( arr, 3 )\n","someBy":"function negative( v ) { return ( v < 0 ); };\nvar arr = [ 1, 2, -3, 4, -1 ];\nvar bool = someBy( arr, 2, negative )\n","someByAsync":"function predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, false );\n }\n };\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar arr = [ 3000, 2500, 1000 ];\nsomeByAsync( arr, 2, predicate, done )\nfunction predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, false );\n }\n };\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar opts = { 'limit': 2 };\nvar arr = [ 3000, 2500, 1000 ];\nsomeByAsync( arr, 2, opts, predicate, done )\nfunction predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, false );\n }\n };\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar opts = { 'series': true };\nvar arr = [ 3000, 2500, 1000 ];\nsomeByAsync( arr, 2, opts, predicate, done )\n","someByAsync.factory":"function predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, false );\n }\n };\nvar opts = { 'series': true };\nvar f = someByAsync.factory( opts, predicate );\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar arr = [ 3000, 2500, 1000 ];\nf( arr, 2, done )\narr = [ 2000, 1500, 1000 ];\nf( arr, 2, done )\n","someByRight":"function negative( v ) { return ( v < 0 ); };\nvar arr = [ -1, 1, -2, 3, 4 ];\nvar bool = someByRight( arr, 2, negative )\n","someByRightAsync":"function predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, false );\n }\n };\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar arr = [ 1000, 2500, 3000 ];\nsomeByRightAsync( arr, 2, predicate, done )\nfunction predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, false );\n }\n };\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar opts = { 'limit': 2 };\nvar arr = [ 1000, 2500, 3000 ];\nsomeByRightAsync( arr, 2, opts, predicate, done )\nfunction predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, false );\n }\n };\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar opts = { 'series': true };\nvar arr = [ 1000, 2500, 3000 ];\nsomeByRightAsync( arr, 2, opts, predicate, done )\n","someByRightAsync.factory":"function predicate( value, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, false );\n }\n };\nvar opts = { 'series': true };\nvar f = someByRightAsync.factory( opts, predicate );\nfunction done( error, bool ) {\n if ( error ) {\n     throw error;\n }\n console.log( bool );\n };\nvar arr = [ 1000, 2500, 3000 ];\nf( arr, 2, done )\narr = [ 1000, 1500, 2000 ];\nf( arr, 2, done )\n","someInBy":"function negative( v ) { return ( v < 0 ); };\nvar obj = { 'a': 1, 'b': 2, 'c': -3, 'd': 4, 'e': -1 };\nvar bool = someInBy( obj, 2, negative )\n","someOwnBy":"function negative( v ) { return ( v < 0 ); };\nvar obj = { a: 1, b: 2, c: -3, d: 4, e: -1 };\nvar bool = someOwnBy( obj, 2, negative )\n","SOTU":"var out = SOTU()\nvar opts = { 'name': 'Barack Obama' };\nout = SOTU( opts )\nopts = { 'party': [ 'Democratic', 'Federalist' ] };\nout = SOTU( opts )\nopts = { 'year': [ 2008, 2009, 2011 ] };\nout = SOTU( opts )\nopts = { 'range': [ 2008, 2016 ] }\nout = SOTU( opts )\n","SPACHE_REVISED":"var list = SPACHE_REVISED()\n","SPAM_ASSASSIN":"var data = SPAM_ASSASSIN()\n","SparklineBase":"var sparkline = new SparklineBase()\nvar data = [ 1, 2, 3 ];\nsparkline = new SparklineBase( data )\n","sparsearray2iterator":"var it = sparsearray2iterator( [ 1, , 3, 4 ] );\nvar v = it.next().value\nv = it.next().value\n","sparsearray2iteratorRight":"var it = sparsearray2iteratorRight( [ 1, 2, , 4 ] );\nvar v = it.next().value\nv = it.next().value\n","splitStream":"var s = splitStream();\ns.write( 'a\\nb\\nc' );\ns.end();\n","splitStream.factory":"var opts = { 'highWaterMark': 64 };\nvar createStream = splitStream.factory( opts );\nvar s = createStream();\ns.write( 'a\\nb\\nc' );\ns.end();\n","splitStream.objectMode":"var s = splitStream.objectMode();\ns.write( 'a\\nb\\c' );\ns.end();\n","SQRT_EPS":"SQRT_EPS\n","SQRT_HALF":"SQRT_HALF\n","SQRT_HALF_PI":"SQRT_HALF_PI\n","SQRT_PHI":"SQRT_PHI\n","SQRT_PI":"SQRT_PI\n","SQRT_THREE":"SQRT_THREE\n","SQRT_TWO":"SQRT_TWO\n","SQRT_TWO_PI":"SQRT_TWO_PI\n","SSA_US_BIRTHS_2000_2014":"var data = SSA_US_BIRTHS_2000_2014()\n","sswap":"var x = array( new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] ) );\nvar y = array( new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] ) );\nsswap( x, y );\nx.data\ny.data\n","Stack":"var s = Stack();\ns.push( 'foo' ).push( 'bar' );\ns.length\ns.pop()\ns.length\ns.pop()\ns.length\n","standalone2pkg":"var v = standalone2pkg( '@stdlib/math-base-special-sin' )\n","STANDARD_CARD_DECK":"var list = STANDARD_CARD_DECK()\n","startcase":"var out = startcase( 'beep boop' )\n","startsWith":"var bool = startsWith( 'Beep', 'Be' )\nbool = startsWith( 'Beep', 'ep' )\nbool = startsWith( 'Beep', 'ee', 1 )\nbool = startsWith( 'Beep', 'ee', -3 )\nbool = startsWith( 'Beep', '' )\n","STOPWORDS_EN":"var list = STOPWORDS_EN()\n","strided.abs":"var x = new Float64Array( [ -1.0, -2.0, -3.0, -4.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.abs( x.length, 'float64', x, 1, 'float64', y, 1 )\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.abs( 2, x, 2, y, -1 )\nvar x0 = new Float64Array( [ -1.0, -2.0, -3.0, -4.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.abs( 2, 'float64', x1, -2, 'float64', y1, 1 )\ny0\n","strided.abs.ndarray":"var x = new Float64Array( [ -1.0, -2.0, -3.0, -4.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.abs.ndarray( x.length, 'float64', x, 1, 0, 'float64', y, 1, 0 )\nx = new Float64Array( [ -1.0, -2.0, -3.0, -4.0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.abs.ndarray( 2, 'float64', x, 2, 1, 'float64', y, -1, y.length-1 )\n","strided.abs2":"var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.abs2( x.length, 'float64', x, 1, 'float64', y, 1 )\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.abs2( 2, 'float64', x, 2, 'float64', y, -1 )\nvar x0 = new Float64Array( [ -2.0, 1.0, 3.0, -5.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.abs2( 2, 'float64', x1, -2, 'float64', y1, 1 )\ny0\n","strided.abs2.ndarray":"var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.abs2.ndarray( x.length, 'float64', x, 1, 0, 'float64', y, 1, 0 )\nx = new Float64Array( [ -2.0, 1.0, 3.0, -5.0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.abs2.ndarray( 2, 'float64', x, 2, 1, 'float64', y, -1, y.length-1 )\n","strided.abs2By":"var x = [ -1.0, -2.0, -3.0, -4.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.abs2By( x.length, x, 1, y, 1, clbk )\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.abs2By( 2, x, 2, y, -1, clbk )\nvar x0 = new Float64Array( [ -1.0, -2.0, -3.0, -4.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.abs2By( 2, x1, -2, y1, 1, clbk )\ny0\n","strided.abs2By.ndarray":"var x = [ -1.0, -2.0, -3.0, -4.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.abs2By.ndarray( x.length, x, 1, 0, y, 1, 0, clbk )\nx = [ -1.0, -2.0, -3.0, -4.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.abs2By.ndarray( 2, x, 2, 1, y, -1, y.length-1, clbk )\n","strided.absBy":"var x = [ 1.0, -2.0, 3.0, -4.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v * 2.0; };\nstrided.absBy( x.length, x, 1, y, 1, clbk )\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.absBy( 2, x, 2, y, -1, clbk )\nvar x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.absBy( 2, x1, -2, y1, 1, clbk )\ny0\n","strided.absBy.ndarray":"var x = [ 1.0, -2.0, 3.0, -4.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v * 2.0; };\nstrided.absBy.ndarray( x.length, x, 1, 0, y, 1, 0, clbk )\nx = [ 1.0, -2.0, 3.0, -4.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.absBy.ndarray( 2, x, 2, 1, y, -1, y.length-1, clbk )\n","strided.acosBy":"var x = [ 1.0, 0.707, 0.866, -0.707 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.acosBy( x.length, x, 1, y, 1, clbk )\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.acosBy( 2, x, 2, y, -1, clbk )\nvar x0 = new Float64Array( [ 1.0, 0.707, 0.866, -0.707 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.acosBy( 2, x1, -2, y1, 1, clbk )\ny0\n","strided.acosBy.ndarray":"var x = [ 1.0, 0.707, 0.866, -0.707 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.acosBy.ndarray( x.length, x, 1, 0, y, 1, 0, clbk )\nx = [ 1.0, 0.707, 0.866, -0.707 ];\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.acosBy.ndarray( 2, x, 2, 1, y, -1, y.length-1, clbk )\n","strided.acoshBy":"var x = [ 1.0, 1.5, 2.0, 2.5 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.acoshBy( x.length, x, 1, y, 1, clbk )\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.acoshBy( 2, x, 2, y, -1, clbk )\nvar x0 = new Float64Array( [ 1.0, 1.5, 2.0, 2.5 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.acoshBy( 2, x1, -2, y1, 1, clbk )\ny0\n","strided.acoshBy.ndarray":"var x = [ 1.0, 1.5, 2.0, 2.5 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.acoshBy.ndarray( x.length, x, 1, 0, y, 1, 0, clbk )\nx = [ 1.0, 1.5, 2.0, 2.5 ];\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.acoshBy.ndarray( 2, x, 2, 1, y, -1, y.length-1, clbk )\n","strided.acotBy":"var x = [ -2.5, -1.5, -0.5, 0.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.acotBy( x.length, x, 1, y, 1, clbk )\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.acotBy( 2, x, 2, y, -1, clbk )\nvar x0 = new Float64Array( [ -2.5, -1.5, -0.5, 0.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.acotBy( 2, x1, -2, y1, 1, clbk )\ny0\n","strided.acotBy.ndarray":"var x = [ -2.5, -1.5, -0.5, 0.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.acotBy.ndarray( x.length, x, 1, 0, y, 1, 0, clbk )\nx = [ -2.5, -1.5, -0.5, 0.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.acotBy.ndarray( 2, x, 2, 1, y, -1, y.length-1, clbk )\n","strided.acothBy":"var x = [ -5.0, -4.0, -3.0, -1.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.acothBy( x.length, x, 1, y, 1, clbk )\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.acothBy( 2, x, 2, y, -1, clbk )\nvar x0 = new Float64Array( [ -5.0, -4.0, -3.0, -1.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.acothBy( 2, x1, -2, y1, 1, clbk )\ny0\n","strided.acothBy.ndarray":"var x = [ -5.0, -4.0, -3.0, -1.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.acothBy.ndarray( x.length, x, 1, 0, y, 1, 0, clbk )\nx = [ -5.0, -4.0, -3.0, -1.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.acothBy.ndarray( 2, x, 2, 1, y, -1, y.length-1, clbk )\n","strided.acovercosBy":"var x = [ 0.0, -1.57, -0.5, -1.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.acovercosBy( x.length, x, 1, y, 1, clbk )\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.acovercosBy( 2, x, 2, y, -1, clbk )\nvar x0 = new Float64Array( [ 0.0, -1.57, -0.5, -1.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.acovercosBy( 2, x1, -2, y1, 1, clbk )\ny0\n","strided.acovercosBy.ndarray":"var x = [ 0.0, -1.57, -0.5, -1.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.acovercosBy.ndarray( x.length, x, 1, 0, y, 1, 0, clbk )\nx = [ 0.0, -1.57, -0.5, -1.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.acovercosBy.ndarray( 2, x, 2, 1, y, -1, y.length-1, clbk )\n","strided.acoversinBy":"var x = [ 0.0, 1.57, 0.5, 1.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.acoversinBy( x.length, x, 1, y, 1, clbk )\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.acoversinBy( 2, x, 2, y, -1, clbk )\nvar x0 = new Float64Array( [ 0.0, 1.57, 0.5, 1.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.acoversinBy( 2, x1, -2, y1, 1, clbk )\ny0\n","strided.acoversinBy.ndarray":"var x = [ 0.0, 1.57, 0.5, 1.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.acoversinBy.ndarray( x.length, x, 1, 0, y, 1, 0, clbk )\nx = [ 0.0, 1.57, 0.5, 1.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.acoversinBy.ndarray( 2, x, 2, 1, y, -1, y.length-1, clbk )\n","strided.add":"var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0 ] );\nvar y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar dt = 'float64';\nstrided.add( x.length, dt, x, 1, dt, y, 1, dt, z, 1 )\nz = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.add( 2, dt, x, 2, dt, y, -2, dt, z, 1 )\nvar x0 = new Float64Array( [ -2.0, 1.0, 3.0, -5.0 ] );\nvar y0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nvar z1 = new Float64Array( z0.buffer, z0.BYTES_PER_ELEMENT*2 );\nstrided.add( 2, dt, x1, -2, dt, y1, 1, dt, z1, 1 )\nz0\n","strided.add.ndarray":"var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0 ] );\nvar y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar dt = 'float64';\nstrided.add.ndarray( 4, dt, x, 1, 0, dt, y, 1, 0, dt, z, 1, 0 )\nx = new Float64Array( [ -2.0, 1.0, 3.0, -5.0 ] );\ny = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nz = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.add.ndarray( 2, dt, x, 2, 1, dt, y, -1, 3, dt, z, 1, 1 )\n","strided.addBy":"var x = [ 1.0, 2.0, 3.0, 4.0 ];\nvar y = [ 11.0, 12.0, 13.0, 14.0 ];\nvar z = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( values ) { return values; };\nstrided.addBy( x.length, x, 1, y, 1, z, 1, clbk )\nz = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.addBy( 2, x, 2, y, -1, z, 1, clbk )\nvar x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y0 = new Float64Array( [ 11.0, 12.0, 13.0, 14.0 ] );\nvar z0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nvar z1 = new Float64Array( z0.buffer, z0.BYTES_PER_ELEMENT*2 );\nstrided.addBy( 2, x1, -2, y1, 1, z1, 1, clbk )\nz0\n","strided.addBy.ndarray":"var x = [ 1.0, 2.0, 3.0, 4.0 ];\nvar y = [ 11.0, 12.0, 13.0, 14.0 ];\nvar z = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( values ) { return values; };\nstrided.addBy.ndarray( x.length, x, 1, 0, y, 1, 0, z, 1, 0, clbk )\nx = [ 1.0, 2.0, 3.0, 4.0 ];\ny = [ 11.0, 12.0, 13.0, 14.0 ];\nz = [ 0.0, 0.0, 0.0, 0.0 ];\nvar oy = y.length - 1;\nvar oz = z.length - 1;\nstrided.addBy.ndarray( 2, x, 2, 1, y, -1, oy, z, -1, oz, clbk )\n","strided.ahavercosBy":"var x = [ 0.0, 0.5, 1.0, 0.25 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.ahavercosBy( x.length, x, 1, y, 1, clbk )\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.ahavercosBy( 2, x, 2, y, -1, clbk )\nvar x0 = new Float64Array( [ 0.0, 0.5, 1.0, 0.25 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.ahavercosBy( 2, x1, -2, y1, 1, clbk )\ny0\n","strided.ahavercosBy.ndarray":"var x = [ 0.0, 0.5, 1.0, 0.25 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.ahavercosBy.ndarray( x.length, x, 1, 0, y, 1, 0, clbk )\nx = [ 0.0, 0.5, 1.0, 0.25 ];\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.ahavercosBy.ndarray( 2, x, 2, 1, y, -1, y.length-1, clbk )\n","strided.ahaversinBy":"var x = [ 0.0, 0.5, 1.0, 0.25 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.ahaversinBy( x.length, x, 1, y, 1, clbk )\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.ahaversinBy( 2, x, 2, y, -1, clbk )\nvar x0 = new Float64Array( [ 0.0, 0.5, 1.0, 0.25 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.ahaversinBy( 2, x1, -2, y1, 1, clbk )\ny0\n","strided.ahaversinBy.ndarray":"var x = [ 0.0, 0.5, 1.0, 0.25 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.ahaversinBy.ndarray( x.length, x, 1, 0, y, 1, 0, clbk )\nx = [ 0.0, 0.5, 1.0, 0.25 ];\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.ahaversinBy.ndarray( 2, x, 2, 1, y, -1, y.length-1, clbk )\n","strided.asinBy":"var x = [ 0.0, -0.5, 1.0, -0.25 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.asinBy( x.length, x, 1, y, 1, clbk )\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.asinBy( 2, x, 2, y, -1, clbk )\nvar x0 = new Float64Array( [ 0.0, -0.5, 1.0, -0.25 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.asinBy( 2, x1, -2, y1, 1, clbk )\ny0\n","strided.asinBy.ndarray":"var x = [ 0.0, -0.5, 1.0, -0.25 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.asinBy.ndarray( x.length, x, 1, 0, y, 1, 0, clbk )\nx = [ 0.0, -0.5, 1.0, -0.25 ];\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.asinBy.ndarray( 2, x, 2, 1, y, -1, y.length-1, clbk )\n","strided.asinhBy":"var x = [ 0.0, -0.0, 2.0, -2.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.asinhBy( x.length, x, 1, y, 1, clbk )\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.asinhBy( 2, x, 2, y, -1, clbk )\nvar x0 = new Float64Array( [ 0.0, -0.0, 2.0, -2.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.asinhBy( 2, x1, -2, y1, 1, clbk )\ny0\n","strided.asinhBy.ndarray":"var x = [ 0.0, -0.0, 2.0, -2.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.asinhBy.ndarray( x.length, x, 1, 0, y, 1, 0, clbk )\nx = [ 0.0, -0.0, 2.0, -2.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.asinhBy.ndarray( 2, x, 2, 1, y, -1, y.length-1, clbk )\n","strided.atanBy":"var x = [ 0.0, -0.5, 1.0, -1.25 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.atanBy( x.length, x, 1, y, 1, clbk )\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.atanBy( 2, x, 2, y, -1, clbk )\nvar x0 = new Float64Array( [ 0.0, -0.5, 1.0, -1.25 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.atanBy( 2, x1, -2, y1, 1, clbk )\ny0\n","strided.atanBy.ndarray":"var x = [ 0.0, -0.5, 1.0, -1.25 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.atanBy.ndarray( x.length, x, 1, 0, y, 1, 0, clbk )\nx = [ 0.0, -0.5, 1.0, -1.25 ];\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.atanBy.ndarray( 2, x, 2, 1, y, -1, y.length-1, clbk )\n","strided.atanhBy":"var x = [ 0.0, -0.5, 1.0, -0.25 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.atanhBy( x.length, x, 1, y, 1, clbk )\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.atanhBy( 2, x, 2, y, -1, clbk )\nvar x0 = new Float64Array( [ 0.0, -0.5, 1.0, -0.25 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.atanhBy( 2, x1, -2, y1, 1, clbk )\ny0\n","strided.atanhBy.ndarray":"var x = [ 0.0, -0.5, 1.0, -0.25 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.atanhBy.ndarray( x.length, x, 1, 0, y, 1, 0, clbk )\nx = [ 0.0, -0.5, 1.0, -0.25 ];\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.atanhBy.ndarray( 2, x, 2, 1, y, -1, y.length-1, clbk )\n","strided.avercosBy":"var x = [ 0.0, -1.57, -0.5, -1.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.avercosBy( x.length, x, 1, y, 1, clbk )\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.avercosBy( 2, x, 2, y, -1, clbk )\nvar x0 = new Float64Array( [ 0.0, -1.57, -0.5, -1.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.avercosBy( 2, x1, -2, y1, 1, clbk )\ny0\n","strided.avercosBy.ndarray":"var x = [ 0.0, -1.57, -0.5, -1.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.avercosBy.ndarray( x.length, x, 1, 0, y, 1, 0, clbk )\nx = [ 0.0, -1.57, -0.5, -1.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.avercosBy.ndarray( 2, x, 2, 1, y, -1, y.length-1, clbk )\n","strided.aversinBy":"var x = [ 0.0, 1.57, 0.5, 1.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.aversinBy( x.length, x, 1, y, 1, clbk )\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.aversinBy( 2, x, 2, y, -1, clbk )\nvar x0 = new Float64Array( [ 0.0, 1.57, 0.5, 1.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.aversinBy( 2, x1, -2, y1, 1, clbk )\ny0\n","strided.aversinBy.ndarray":"var x = [ 0.0, 1.57, 0.5, 1.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.aversinBy.ndarray( x.length, x, 1, 0, y, 1, 0, clbk )\nx = [ 0.0, 1.57, 0.5, 1.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.aversinBy.ndarray( 2, x, 2, 1, y, -1, y.length-1, clbk )\n","strided.besselj0By":"var x = [ 0.0, 1.0, 0.1, 0.25 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.besselj0By( x.length, x, 1, y, 1, clbk )\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.besselj0By( 2, x, 2, y, -1, clbk )\nvar x0 = new Float64Array( [ 0.0, 1.0, 0.1, 0.25 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.besselj0By( 2, x1, -2, y1, 1, clbk )\ny0\n","strided.besselj0By.ndarray":"var x = [ 0.0, 1.0, 0.1, 0.25 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.besselj0By.ndarray( x.length, x, 1, 0, y, 1, 0, clbk )\nx = [ 0.0, 1.0, 0.1, 0.25 ];\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.besselj0By.ndarray( 2, x, 2, 1, y, -1, y.length-1, clbk )\n","strided.besselj1By":"var x = [ 0.0, 1.0, 0.1, 0.25 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.besselj1By( x.length, x, 1, y, 1, clbk )\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.besselj1By( 2, x, 2, y, -1, clbk )\nvar x0 = new Float64Array( [ 0.0, 1.0, 0.1, 0.25 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.besselj1By( 2, x1, -2, y1, 1, clbk )\ny0\n","strided.besselj1By.ndarray":"var x = [ 0.0, 1.0, 0.1, 0.25 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.besselj1By.ndarray( x.length, x, 1, 0, y, 1, 0, clbk )\nx = [ 0.0, 1.0, 0.1, 0.25 ];\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.besselj1By.ndarray( 2, x, 2, 1, y, -1, y.length-1, clbk )\n","strided.bessely0By":"var x = [ 0.0, 1.0, 0.1, 0.25 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.bessely0By( x.length, x, 1, y, 1, clbk )\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.bessely0By( 2, x, 2, y, -1, clbk )\nvar x0 = new Float64Array( [ 0.0, 1.0, 0.1, 0.25 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.bessely0By( 2, x1, -2, y1, 1, clbk )\ny0\n","strided.bessely0By.ndarray":"var x = [ 0.0, 1.0, 0.1, 0.25 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.bessely0By.ndarray( x.length, x, 1, 0, y, 1, 0, clbk )\nx = [ 0.0, 1.0, 0.1, 0.25 ];\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.bessely0By.ndarray( 2, x, 2, 1, y, -1, y.length-1, clbk )\n","strided.bessely1By":"var x = [ 0.0, 1.0, 0.1, 0.25 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.bessely1By( x.length, x, 1, y, 1, clbk )\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.bessely1By( 2, x, 2, y, -1, clbk )\nvar x0 = new Float64Array( [ 0.0, 1.0, 0.1, 0.25 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.bessely1By( 2, x1, -2, y1, 1, clbk )\ny0\n","strided.bessely1By.ndarray":"var x = [ 0.0, 1.0, 0.1, 0.25 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.bessely1By.ndarray( x.length, x, 1, 0, y, 1, 0, clbk )\nx = [ 0.0, 1.0, 0.1, 0.25 ];\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.bessely1By.ndarray( 2, x, 2, 1, y, -1, y.length-1, clbk )\n","strided.binetBy":"var x = [ 0.0, 1.0, 2.0, 3.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.binetBy( x.length, x, 1, y, 1, clbk )\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.binetBy( 2, x, 2, y, -1, clbk )\nvar x0 = new Float64Array( [ 0.0, 1.0, 2.0, 3.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.binetBy( 2, x1, -2, y1, 1, clbk )\ny0\n","strided.binetBy.ndarray":"var x = [ 0.0, 1.0, 2.0, 3.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.binetBy.ndarray( x.length, x, 1, 0, y, 1, 0, clbk )\nx = [ 0.0, 1.0, 2.0, 3.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.binetBy.ndarray( 2, x, 2, 1, y, -1, y.length-1, clbk )\n","strided.cbrt":"var x = new Float64Array( [ 0.0, 1.0, 8.0, 27.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.cbrt( x.length, 'float64', x, 1, 'float64', y, 1 )\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.cbrt( 2, 'float64', x, 2, 'float64', y, -1 )\nvar x0 = new Float64Array( [ 0.0, 1.0, 8.0, 27.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.cbrt( 2, 'float64', x1, -2, 'float64', y1, 1 )\ny0\n","strided.cbrt.ndarray":"var x = new Float64Array( [ 0.0, 1.0, 8.0, 27.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.cbrt.ndarray( x.length, 'float64', x, 1, 0, 'float64', y, 1, 0 )\nx = new Float64Array( [ 0.0, 1.0, 8.0, 27.0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.cbrt.ndarray( 2, 'float64', x, 2, 1, 'float64', y, -1, y.length-1 )\n","strided.cbrtBy":"var x = [ 1.0, 9.0, -27.0, 81.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.cbrtBy( x.length, x, 1, y, 1, clbk )\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.cbrtBy( 2, x, 2, y, -1, clbk )\nvar x0 = new Float64Array( [ 1.0, 9.0, -27.0, 81.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.cbrtBy( 2, x1, -2, y1, 1, clbk )\ny0\n","strided.cbrtBy.ndarray":"var x = [ 1.0, 9.0, -27.0, 81.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.cbrtBy.ndarray( x.length, x, 1, 0, y, 1, 0, clbk )\nx = [ 1.0, 9.0, -27.0, 81.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.cbrtBy.ndarray( 2, x, 2, 1, y, -1, y.length-1, clbk )\n","strided.ceil":"var x = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.ceil( x.length, 'float64', x, 1, 'float64', y, 1 )\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.ceil( 2, 'float64', x, 2, 'float64', y, -1 )\nvar x0 = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.ceil( 2, 'float64', x1, -2, 'float64', y1, 1 )\ny0\n","strided.ceil.ndarray":"var x = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.ceil.ndarray( x.length, 'float64', x, 1, 0, 'float64', y, 1, 0 )\nx = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.ceil.ndarray( 2, 'float64', x, 2, 1, 'float64', y, -1, y.length-1 )\n","strided.cosBy":"var x = [ 0.0, 3.14, -3.14, 10.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.cosBy( x.length, x, 1, y, 1, clbk )\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.cosBy( 2, x, 2, y, -1, clbk )\nvar x0 = new Float64Array( [ 0.0, 3.14, -3.14, 10.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.cosBy( 2, x1, -2, y1, 1, clbk )\ny0\n","strided.cosBy.ndarray":"var x = [ 0.0, 3.14, -3.14, 10.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.cosBy.ndarray( x.length, x, 1, 0, y, 1, 0, clbk )\nx = [ 0.0, 3.14, -3.14, 10.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.cosBy.ndarray( 2, x, 2, 1, y, -1, y.length-1, clbk )\n","strided.deg2rad":"var x = new Float64Array( [ 0.0, 30.0, 45.0, 90.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.deg2rad( x.length, 'float64', x, 1, 'float64', y, 1 )\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.deg2rad( 2, 'float64', x, 2, 'float64', y, -1 )\nvar x0 = new Float64Array( [ 0.0, 30.0, 45.0, 90.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.deg2rad( 2, 'float64', x1, -2, 'float64', y1, 1 )\ny0\n","strided.deg2rad.ndarray":"var x = new Float64Array( [ 0.0, 30.0, 45.0, 90.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.deg2rad.ndarray( x.length, 'float64', x, 1, 0, 'float64', y, 1, 0 )\nx = new Float64Array( [ 0.0, 30.0, 45.0, 90.0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.deg2rad.ndarray( 2, 'float64', x, 2, 1, 'float64', y, -1, y.length-1 )\n","strided.dataTypes":"var out = strided.dataTypes()\n","strided.dcbrtBy":"var x = new Float64Array( [ 1.0, 9.0, -27.0, 81.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nfunction clbk( v ) { return v; };\nstrided.dcbrtBy( x.length, x, 1, y, 1, clbk )\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.dcbrtBy( 2, x, 2, y, -1, clbk )\nvar x0 = new Float64Array( [ 1.0, 9.0, -27.0, 81.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.dcbrtBy( 2, x1, -2, y1, 1, clbk )\ny0\n","strided.dcbrtBy.ndarray":"var x = new Float64Array( [ 1.0, 9.0, -27.0, 81.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nfunction clbk( v ) { return v; };\nstrided.dcbrtBy.ndarray( x.length, x, 1, 0, y, 1, 0, clbk )\nx = new Float64Array( [ 1.0, 9.0, -27.0, 81.0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.dcbrtBy.ndarray( 2, x, 2, 1, y, -1, y.length-1, clbk )\n","strided.dispatch":"var t = [ 'float64', 'float64', 'float32', 'float32' ];\nvar d = [ base.abs, base.absf ];\nvar f = strided.dispatch( base.strided.unary, t, d, 7, 1, 1 );\nvar x = new Float64Array( [ -1.0, -2.0, -3.0, -4.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nf( x.length, 'float64', x, 1, 'float64', y, 1 );\ny\nf = strided.dispatch( base.strided.unary.ndarray, t, d, 9, 1, 1 );\nx = new Float64Array( [ -1.0, -2.0, -3.0, -4.0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nf( 2, 'float64', x, 1, 2, 'float64', y, 1, 2 );\ny\n","strided.dispatchBy":"var t = [ 'float64', 'float64', 'float32', 'float32' ];\nvar d = [ base.abs, base.absf ];\nvar f = strided.dispatchBy( base.strided.unaryBy, t, d, 8, 1, 1 );\nvar x = new Float64Array( [ -1.0, -2.0, -3.0, -4.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nf( x.length, 'float64', x, 1, 'float64', y, 1, base.identity );\ny\nf = strided.dispatchBy( base.strided.unary.ndarray, t, d, 10, 1, 1 );\nx = new Float64Array( [ -1.0, -2.0, -3.0, -4.0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nf( 2, 'float64', x, 1, 2, 'float64', y, 1, 2, base.identity );\ny\n","strided.floor":"var x = new Float64Array( [ -1.5, 2.3, -3.9, 4.2 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.floor( x.length, 'float64', x, 1, 'float64', y, 1 )\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.floor( 2, 'float64', x, 2, 'float64', y, -1 )\nvar x0 = new Float64Array( [ -1.5, 2.3, -3.9, 4.2 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.floor( 2, 'float64', x1, -2, 'float64', y1, 1 )\ny0\n","strided.floor.ndarray":"var x = new Float64Array( [ -1.5, 2.3, -3.9, 4.2 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.floor.ndarray( x.length, 'float64', x, 1, 0, 'float64', y, 1, 0 )\nx = new Float64Array( [ -1.5, 2.3, -3.9, 4.2 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.floor.ndarray( 2, 'float64', x, 2, 1, 'float64', y, -1, y.length-1 )\n","strided.inv":"var x = new Float64Array( [ -20.0, -1.0, 2.0, 4.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.inv( x.length, 'float64', x, 1, 'float64', y, 1 )\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.inv( 2, 'float64', x, 2, 'float64', y, -1 )\nvar x0 = new Float64Array( [ -20.0, -1.0, 2.0, 4.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.inv( 2, 'float64', x1, -2, 'float64', y1, 1 )\ny0\n","strided.inv.ndarray":"var x = new Float64Array( [ -20.0, -1.0, 2.0, 4.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.inv.ndarray( x.length, 'float64', x, 1, 0, 'float64', y, 1, 0 )\nx = new Float64Array( [ -20.0, -1.0, 2.0, 4.0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.inv.ndarray( 2, 'float64', x, 2, 1, 'float64', y, -1, y.length-1 )\n","strided.mul":"var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0 ] );\nvar y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar dt = 'float64';\nstrided.mul( x.length, dt, x, 1, dt, y, 1, dt, z, 1 )\nz = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.mul( 2, dt, x, 2, dt, y, -2, dt, z, 1 )\nvar x0 = new Float64Array( [ -2.0, 1.0, 3.0, -5.0 ] );\nvar y0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nvar z1 = new Float64Array( z0.buffer, z0.BYTES_PER_ELEMENT*2 );\nstrided.mul( 2, dt, x1, -2, dt, y1, 1, dt, z1, 1 )\nz0\n","strided.mul.ndarray":"var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0 ] );\nvar y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar dt = 'float64';\nstrided.mul.ndarray( 4, dt, x, 1, 0, dt, y, 1, 0, dt, z, 1, 0 )\nx = new Float64Array( [ -2.0, 1.0, 3.0, -5.0 ] );\ny = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nz = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.mul.ndarray( 2, dt, x, 2, 1, dt, y, -1, 3, dt, z, 1, 1 )\n","strided.mulBy":"var x = [ 1.0, 2.0, 3.0, 4.0 ];\nvar y = [ 11.0, 12.0, 13.0, 14.0 ];\nvar z = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( values ) { return values; };\nstrided.mulBy( x.length, x, 1, y, 1, z, 1, clbk )\nz = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.mulBy( 2, x, 2, y, -1, z, 1, clbk )\nvar x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar y0 = new Float64Array( [ 11.0, 12.0, 13.0, 14.0 ] );\nvar z0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nvar z1 = new Float64Array( z0.buffer, z0.BYTES_PER_ELEMENT*2 );\nstrided.mulBy( 2, x1, -2, y1, 1, z1, 1, clbk )\nz0\n","strided.mulBy.ndarray":"var x = [ 1.0, 2.0, 3.0, 4.0 ];\nvar y = [ 11.0, 12.0, 13.0, 14.0 ];\nvar z = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( values ) { return values; };\nstrided.mulBy.ndarray( x.length, x, 1, 0, y, 1, 0, z, 1, 0, clbk )\nx = [ 1.0, 2.0, 3.0, 4.0 ];\ny = [ 11.0, 12.0, 13.0, 14.0 ];\nz = [ 0.0, 0.0, 0.0, 0.0 ];\nvar oy = y.length - 1;\nvar oz = z.length - 1;\nstrided.mulBy.ndarray( 2, x, 2, 1, y, -1, oy, z, -1, oz, clbk )\n","strided.ramp":"var x = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.ramp( x.length, 'float64', x, 1, 'float64', y, 1 )\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.ramp( 2, 'float64', x, 2, 'float64', y, -1 )\nvar x0 = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.ramp( 2, 'float64', x1, -2, 'float64', y1, 1 )\ny0\n","strided.ramp.ndarray":"var x = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.ramp.ndarray( x.length, 'float64', x, 1, 0, 'float64', y, 1, 0 )\nx = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.ramp.ndarray( 2, 'float64', x, 2, 1, 'float64', y, -1, y.length-1 )\n","strided.rsqrt":"var x = new Float64Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.rsqrt( x.length, 'float64', x, 1, 'float64', y, 1 )\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.rsqrt( 2, 'float64', x, 2, 'float64', y, -1 )\nvar x0 = new Float64Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.rsqrt( 2, 'float64', x1, -2, 'float64', y1, 1 )\ny0\n","strided.rsqrt.ndarray":"var x = new Float64Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.rsqrt.ndarray( x.length, 'float64', x, 1, 0, 'float64', y, 1, 0 )\nx = new Float64Array( [ 0.0, 4.0, 9.0, 12.0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.rsqrt.ndarray( 2, 'float64', x, 2, 1, 'float64', y, -1, y.length-1 )\n","strided.sinBy":"var x = [ 0.0, 3.14, -3.14, 10.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.sinBy( x.length, x, 1, y, 1, clbk )\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.sinBy( 2, x, 2, y, -1, clbk )\nvar x0 = new Float64Array( [ 0.0, 3.14, -3.14, 10.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.sinBy( 2, x1, -2, y1, 1, clbk )\ny0\n","strided.sinBy.ndarray":"var x = [ 0.0, 3.14, -3.14, 10.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.sinBy.ndarray( x.length, x, 1, 0, y, 1, 0, clbk )\nx = [ 0.0, 3.14, -3.14, 10.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.sinBy.ndarray( 2, x, 2, 1, y, -1, y.length-1, clbk )\n","strided.sqrt":"var x = new Float64Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.sqrt( x.length, 'float64', x, 1, 'float64', y, 1 )\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.sqrt( 2, 'float64', x, 2, 'float64', y, -1 )\nvar x0 = new Float64Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.sqrt( 2, 'float64', x1, -2, 'float64', y1, 1 )\ny0\n","strided.sqrt.ndarray":"var x = new Float64Array( [ 0.0, 4.0, 9.0, 12.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.sqrt.ndarray( x.length, 'float64', x, 1, 0, 'float64', y, 1, 0 )\nx = new Float64Array( [ 0.0, 4.0, 9.0, 12.0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.sqrt.ndarray( 2, 'float64', x, 2, 1, 'float64', y, -1, y.length-1 )\n","strided.sqrtBy":"var x = [ 0.0, 1.0, 122.0, 50.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.sqrtBy( x.length, x, 1, y, 1, clbk )\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.sqrtBy( 2, x, 2, y, -1, clbk )\nvar x0 = new Float64Array( [ 0.0, 1.0, 122.0, 50.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.sqrtBy( 2, x1, -2, y1, 1, clbk )\ny0\n","strided.sqrtBy.ndarray":"var x = [ 0.0, 1.0, 122.0, 50.0 ];\nvar y = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( v ) { return v; };\nstrided.sqrtBy.ndarray( x.length, x, 1, 0, y, 1, 0, clbk )\nx = [ 0.0, 1.0, 122.0, 50.0 ];\ny = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.sqrtBy.ndarray( 2, x, 2, 1, y, -1, y.length-1, clbk )\n","strided.sub":"var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0 ] );\nvar y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar dt = 'float64';\nstrided.sub( x.length, dt, x, 1, dt, y, 1, dt, z, 1 )\nz = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.sub( 2, dt, x, 2, dt, y, -2, dt, z, 1 )\nvar x0 = new Float64Array( [ -2.0, 1.0, 3.0, -5.0 ] );\nvar y0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nvar z1 = new Float64Array( z0.buffer, z0.BYTES_PER_ELEMENT*2 );\nstrided.sub( 2, dt, x1, -2, dt, y1, 1, dt, z1, 1 )\nz0\n","strided.sub.ndarray":"var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0 ] );\nvar y = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nvar z = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar dt = 'float64';\nstrided.sub.ndarray( 4, dt, x, 1, 0, dt, y, 1, 0, dt, z, 1, 0 )\nx = new Float64Array( [ -2.0, 1.0, 3.0, -5.0 ] );\ny = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );\nz = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.sub.ndarray( 2, dt, x, 2, 1, dt, y, -1, 3, dt, z, 1, 1 )\n","strided.subBy":"var x = [ 11.0, 12.0, 13.0, 14.0 ];\nvar y = [ 8.0, 7.0, 6.0, 5.0 ];\nvar z = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( values ) { return values; };\nstrided.subBy( x.length, x, 1, y, 1, z, 1, clbk )\nz = [ 0.0, 0.0, 0.0, 0.0 ];\nstrided.subBy( 2, x, 2, y, -1, z, 1, clbk )\nvar x0 = new Float64Array( [ 11.0, 12.0, 13.0, 14.0 ] );\nvar y0 = new Float64Array( [ 8.0, 7.0, 6.0, 5.0 ] );\nvar z0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nvar z1 = new Float64Array( z0.buffer, z0.BYTES_PER_ELEMENT*2 );\nstrided.subBy( 2, x1, -2, y1, 1, z1, 1, clbk )\nz0\n","strided.subBy.ndarray":"var x = [ 11.0, 12.0, 13.0, 14.0 ];\nvar y = [ 8.0, 7.0, 6.0, 5.0 ];\nvar z = [ 0.0, 0.0, 0.0, 0.0 ];\nfunction clbk( values ) { return values; };\nstrided.subBy.ndarray( x.length, x, 1, 0, y, 1, 0, z, 1, 0, clbk )\nx = [ 11.0, 12.0, 13.0, 14.0 ];\ny = [ 8.0, 7.0, 6.0, 5.0 ];\nz = [ 0.0, 0.0, 0.0, 0.0 ];\nvar oy = y.length - 1;\nvar oz = z.length - 1;\nstrided.subBy.ndarray( 2, x, 2, 1, y, -1, oy, z, -1, oz, clbk )\n","strided.trunc":"var x = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.trunc( x.length, 'float64', x, 1, 'float64', y, 1 )\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.trunc( 2, 'float64', x, 2, 'float64', y, -1 )\nvar x0 = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar y0 = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nvar x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\nvar y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*2 );\nstrided.trunc( 2, 'float64', x1, -2, 'float64', y1, 1 )\ny0\n","strided.trunc.ndarray":"var x = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\nvar y = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.trunc.ndarray( x.length, 'float64', x, 1, 0, 'float64', y, 1, 0 )\nx = new Float64Array( [ 1.1, 2.5, -3.5, 4.0 ] );\ny = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );\nstrided.trunc.ndarray( 2, 'float64', x, 2, 1, 'float64', y, -1, y.length-1 )\n","stridedarray2iterator":"var it = stridedarray2iterator( 2, [ 1, 2, 3, 4 ], -2, 3 );\nvar v = it.next().value\nv = it.next().value\n","stridedArrayStream":"function fcn( chunk ) { console.log( chunk.toString() ); };\nvar s = stridedArrayStream( 3, [ 1, 2, 3 ], 1, 0 );\nvar o = inspectSinkStream( fcn );\ns.pipe( o );\n","stridedArrayStream.factory":"var opts = { 'objectMode': true, 'highWaterMark': 64 };\nvar createStream = stridedArrayStream.factory( opts );\n","stridedArrayStream.objectMode":"function fcn( v ) { console.log( v ); };\nvar s = stridedArrayStream.objectMode( 3, [ 1, 2, 3 ], 1, 0 );\nvar o = inspectSinkStream.objectMode( fcn );\ns.pipe( o );\n","string2buffer":"var b = string2buffer( 'beep boop' )\nb = string2buffer( '7468697320697320612074c3a97374', 'hex' );\nb.toString()\n","sub2ind":"var d = [ 3, 3, 3 ];\nvar idx = sub2ind( d, 1, 2, 2 )\n","substringAfter":"var out = substringAfter( 'Hello World!', 'World' )\nout = substringAfter( 'Hello World!', 'Hello ' )\nout = substringAfter( 'Hello World!', 'l', 5 )\n","substringAfterLast":"var out = substringAfterLast( 'beep boop beep baz', 'beep' )\nout = substringAfterLast( 'Hello World!', 'Hello ' )\nout = substringAfterLast( 'Hello World!', 'o', 5 )\n","substringBefore":"var str = 'beep boop';\nvar out = substringBefore( str, ' ' )\nout = substringBefore( str, 'o' )\n","substringBeforeLast":"var str = 'Beep Boop Beep';\nvar out = substringBeforeLast( str, 'Beep' )\nout = substringBeforeLast( str, 'Boop' )\n","SUTHAHARAN_MULTI_HOP_SENSOR_NETWORK":"var data = SUTHAHARAN_MULTI_HOP_SENSOR_NETWORK()\n","SUTHAHARAN_SINGLE_HOP_SENSOR_NETWORK":"var data = SUTHAHARAN_SINGLE_HOP_SENSOR_NETWORK()\n","Symbol":"var s = ( Symbol ) ? Symbol( 'beep' ) : null\n","tabulate":"var collection = [ 'beep', 'boop', 'foo', 'beep' ];\nvar out = tabulate( collection )\n","tabulateBy":"function indicator( value ) { return value[ 0 ]; };\nvar collection = [ 'beep', 'boop', 'foo', 'beep' ];\nvar out = tabulateBy( collection, indicator )\n","tabulateByAsync":"function indicator( value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, ( index%2 === 0 ) ? 'even': 'odd' );\n }\n };\nfunction done( error, result ) {\n if ( error ) {\n     throw error;\n }\n console.log( result );\n };\nvar arr = [ 3000, 2500, 1000, 750 ];\ntabulateByAsync( arr, indicator, done )\nfunction indicator( value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, ( index%2 === 0 ) ? 'even' : 'odd' );\n }\n };\nfunction done( error, result ) {\n if ( error ) {\n     throw error;\n }\n console.log( result );\n };\nvar opts = { 'limit': 2 };\nvar arr = [ 3000, 2500, 1000, 750 ];\ntabulateByAsync( arr, opts, indicator, done )\nfunction indicator( value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, ( index%2 === 0 ) ? 'even' : 'odd' );\n }\n };\nfunction done( error, result ) {\n if ( error ) {\n     throw error;\n }\n console.log( result );\n };\nvar opts = { 'series': true };\nvar arr = [ 3000, 2500, 1000, 750 ];\ntabulateByAsync( arr, opts, indicator, done )\n","tabulateByAsync.factory":"function indicator( value, index, next ) {\n setTimeout( onTimeout, value );\n function onTimeout() {\n     console.log( value );\n     next( null, ( index%2 === 0 ) ? 'even' : 'odd' );\n }\n };\nvar opts = { 'series': true };\nvar f = tabulateByAsync.factory( opts, indicator );\nfunction done( error, result ) {\n if ( error ) {\n     throw error;\n }\n console.log( result );\n };\nvar arr = [ 3000, 2500, 1000, 750 ];\nf( arr, done )\narr = [ 2000, 1500, 1000, 750 ];\nf( arr, done )\n","thunk":"var fcn = thunk( base.add, 2, 3 );\nvar v = fcn()\nv = fcn()\n","tic":"var t = tic()\n","timeit":"var code = 'var x = Math.pow( Math.random(), 3 );';\ncode += 'if ( x !== x ) {';\ncode += 'throw new Error( \\'Something went wrong.\\' );';\ncode += '}';\nfunction done( error, results ) {\n if ( error ) {\n     throw error;\n }\n console.dir( results );\n };\ntimeit( code, done )\n","tmpdir":"var dir = tmpdir()\n","toc":"var start = tic();\nvar delta = toc( start )\n","tokenize":"var out = tokenize( 'Hello Mrs. Maple, could you call me back?' )\nout = tokenize( 'Hello World!', true )\n","transformStream":"var s = transformStream();\ns.write( 'a' );\ns.write( 'b' );\ns.write( 'c' );\ns.end();\n","transformStream.factory":"var opts = { 'highWaterMark': 64 };\nvar createStream = transformStream.factory( opts );\nfunction fcn( chunk, enc, cb ) { cb( null, chunk.toString()+'-beep' ); };\nvar s = createStream( fcn );\ns.write( 'a' );\ns.write( 'b' );\ns.write( 'c' );\ns.end();\n","transformStream.objectMode":"var s = transformStream.objectMode();\ns.write( { 'value': 'a' } );\ns.write( { 'value': 'b' } );\ns.write( { 'value': 'c' } );\ns.end();\n","transformStream.ctor":"function fcn( chunk, enc, cb ) { cb( null, chunk.toString()+'-beep' ); };\nvar opts = { 'highWaterMark': 64, 'transform': fcn };\nvar customStream = transformStream.ctor( opts );\nvar s = customStream();\ns.write( 'a' );\ns.write( 'b' );\ns.write( 'c' );\ns.end();\n","trim":"var out = trim( ' \\t\\t\\n  Beep \\r\\n\\t  ' )\n","truncate":"var str = 'beep boop';\nvar out = truncate( str, 5 )\nout = truncate( str, 5, '|' )\n","truncateMiddle":"var str = 'beep boop';\nvar out = truncateMiddle( str, 5 )\nout = truncateMiddle( str, 5, '|' )\n","trycatch":"function x() {\n if ( base.random.randu() < 0.5 ) {\n     throw new Error( 'beep' );\n }\n return 1.0;\n };\nvar z = trycatch( x, -1.0 )\n","trycatchAsync":"function x( clbk ) {\n setTimeout( onTimeout, 0 );\n function onTimeout() {\n     clbk( new Error( 'beep' ) );\n }\n };\nfunction done( error, result ) {\n if ( error ) {\n     // process error...\n }\n console.log( result );\n };\ntrycatchAsync( x, 'boop', done )\n","tryFunction":"function fcn() { throw new Error( 'beep boop' ); };\nvar f = tryFunction( fcn );\nvar out = f();\nout.message\n","tryRequire":"var out = tryRequire( '_unknown_module_id_' )\n","trythen":"function x() {\n if ( base.random.randu() < 0.5 ) {\n     throw new Error( 'beep' );\n }\n return 1.0;\n };\nfunction y() {\n return -1.0;\n };\nvar z = trythen( x, y )\n","trythenAsync":"function x( clbk ) {\n setTimeout( onTimeout, 0 );\n function onTimeout() {\n     clbk( new Error( 'beep' ) );\n }\n };\nfunction y( clbk ) {\n setTimeout( onTimeout, 0 );\n function onTimeout() {\n     clbk( null, 'boop' );\n }\n };\nfunction done( error, result ) {\n if ( error ) {\n     throw error;\n }\n console.log( result );\n };\ntrythenAsync( x, y, done )\n","ttest":"var rnorm = base.random.normal.factory( 0.0, 2.0, { 'seed': 5776 } );\nvar x = new Array( 100 );\nfor ( var i = 0; i < x.length; i++ ) {\n x[ i ] = rnorm();\n }\nvar out = ttest( x )\nrnorm = base.random.normal.factory( 1.0, 2.0, { 'seed': 786 } );\nx = new Array( 100 );\nvar y = new Array( 100 );\nfor ( i = 0; i < x.length; i++ ) {\n x[ i ] = rnorm();\n y[ i ] = rnorm();\n }\nout = ttest( x, y )\nvar table = out.print()\narr = [ 2, 4, 3, 1, 0 ];\nout = ttest( arr, { 'alpha': 0.01 } );\ntable = out.print()\nvar arr = [ 4, 4, 6, 6, 5 ];\nout = ttest( arr, { 'mu': 5 } )\narr = [ 4, 4, 6, 6, 5 ];\nout = ttest( arr, { 'alternative': 'less' } );\ntable = out.print()\nout = ttest( arr, { 'alternative': 'greater' } );\ntable = out.print()\n","ttest2":"var x = [ 0.7, -1.6, -0.2, -1.2, -0.1, 3.4, 3.7, 0.8, 0.0, 2.0 ];\nvar y = [ 1.9, 0.8, 1.1, 0.1, -0.1, 4.4, 5.5, 1.6, 4.6, 3.4 ];\nvar out = ttest2( x, y )\nvar table = out.print()\nout = ttest2( x, y, { 'alpha': 0.1 } );\ntable = out.print()\nout = ttest2( x, y, { 'alternative': 'less' } );\ntable = out.print()\nout = ttest2( x, y, { 'alternative': 'greater' } );\ntable = out.print()\nx = [ 2, 3, 1, 4 ];\ny = [ 1, 2, 3, 1, 2, 5, 3, 4 ];\nout = ttest2( x, y, { 'variance': 'equal' } );\ntable = out.print()\nvar rnorm = base.random.normal.factory({ 'seed': 372 } );\nx = new Array( 100 );\nfor ( i = 0; i < x.length; i++ ) {\n x[ i ] = rnorm( 2.0, 3.0 );\n }\ny = new Array( 100 );\nfor ( i = 0; i < x.length; i++ ) {\n y[ i ] = rnorm( 1.0, 3.0 );\n }\nout = ttest2( x, y, { 'difference': 1.0, 'variance': 'equal' } )\n","TWO_PI":"TWO_PI\n","typedarray":"var arr = typedarray()\narr = typedarray( 'float32' )\nvar arr = typedarray( 5 )\narr = typedarray( 5, 'int32' )\nvar arr1 = typedarray( [ 0.5, 0.5, 0.5 ] );\nvar arr2 = typedarray( arr1, 'float32' )\nvar arr1 = [ 0.5, 0.5, 0.5 ];\nvar arr2 = typedarray( arr1, 'float32' )\nvar buf = new ArrayBuffer( 16 );\nvar arr = typedarray( buf, 0, 4, 'float32' )\n","typedarray2json":"var arr = new Float64Array( 2 );\narr[ 0 ] = 5.0;\narr[ 1 ] = 3.0;\nvar json = typedarray2json( arr )\n","typedarrayCtors":"var ctor = typedarrayCtors( 'float64' )\nctor = typedarrayCtors( 'float' )\n","typedarrayDataTypes":"var out = typedarrayDataTypes()\n","typedarraypool":"var arr = typedarraypool()\narr = typedarraypool( 'float32' )\nvar arr = typedarraypool( 5 )\narr = typedarraypool( 5, 'int32' )\nvar arr1 = typedarraypool( [ 0.5, 0.5, 0.5 ] );\nvar arr2 = typedarraypool( arr1, 'float32' )\nvar arr1 = [ 0.5, 0.5, 0.5 ];\nvar arr2 = typedarraypool( arr1, 'float32' )\n","typedarraypool.malloc":"var arr = typedarraypool.malloc()\narr = typedarraypool.malloc( 'float32' )\nvar arr = typedarraypool.malloc( 5 )\narr = typedarraypool.malloc( 5, 'int32' )\nvar arr1 = typedarraypool.malloc( [ 0.5, 0.5, 0.5 ] );\nvar arr2 = typedarraypool.malloc( arr1, 'float32' )\nvar arr1 = [ 0.5, 0.5, 0.5 ];\nvar arr2 = typedarraypool.malloc( arr1, 'float32' )\n","typedarraypool.calloc":"var arr = typedarraypool.calloc()\narr = typedarraypool.calloc( 'float32' )\nvar arr = typedarraypool.calloc( 5 )\narr = typedarraypool.calloc( 5, 'int32' )\n","typedarraypool.free":"var arr = typedarraypool( 5 )\ntypedarraypool.free( arr )\n","typedarraypool.clear":"var arr = typedarraypool( 5 )\ntypedarraypool.free( arr );\ntypedarraypool.clear()\n","typedarraypool.highWaterMark":"typedarraypool.highWaterMark\n","typedarraypool.nbytes":"var arr = typedarraypool( 5 )\ntypedarraypool.nbytes\n","typedarraypool.factory":"var pool = typedarraypool.factory();\nvar arr1 = pool( 3, 'float64' )\n","typemax":"var m = typemax( 'int8' )\nm = typemax( 'uint32' )\n","typemin":"var m = typemin( 'int8' )\nm = typemin( 'uint32' )\n","typeOf":"var t = typeOf( 'a' )\nt = typeOf( 5 )\nt = typeOf( NaN )\nt = typeOf( true )\nt = typeOf( false )\nt = typeOf( null )\nt = typeOf( undefined )\nt = typeOf( [] )\nt = typeOf( {} )\nt = typeOf( function noop() {} )\nt = typeOf( Symbol( 'beep' ) )\nt = typeOf( /.+/ )\nt = typeOf( new String( 'beep' ) )\nt = typeOf( new Number( 5 ) )\nt = typeOf( new Boolean( false ) )\nt = typeOf( new Array() )\nt = typeOf( new Object() )\nt = typeOf( new Int8Array( 10 ) )\nt = typeOf( new Uint8Array( 10 ) )\nt = typeOf( new Uint8ClampedArray( 10 ) )\nt = typeOf( new Int16Array( 10 ) )\nt = typeOf( new Uint16Array( 10 ) )\nt = typeOf( new Int32Array( 10 ) )\nt = typeOf( new Uint32Array( 10 ) )\nt = typeOf( new Float32Array( 10 ) )\nt = typeOf( new Float64Array( 10 ) )\nt = typeOf( new ArrayBuffer( 10 ) )\nt = typeOf( new Date() )\nt = typeOf( new RegExp( '.+' ) )\nt = typeOf( new Map() )\nt = typeOf( new Set() )\nt = typeOf( new WeakMap() )\nt = typeOf( new WeakSet() )\nt = typeOf( new Error( 'beep' ) )\nt = typeOf( new TypeError( 'beep' ) )\nt = typeOf( new SyntaxError( 'beep' ) )\nt = typeOf( new ReferenceError( 'beep' ) )\nt = typeOf( new URIError( 'beep' ) )\nt = typeOf( new RangeError( 'beep' ) )\nt = typeOf( new EvalError( 'beep' ) )\nt = typeOf( Math )\nt = typeOf( JSON )\nfunction beep() { return arguments; };\nt = typeOf( beep() )\nt = typeOf( new Buffer( 10 ) )\nfunction Person() { return this };\nt = typeOf( new Person() )\nvar Foo = function () { return this; };\nt = typeOf( new Foo() )\n","UINT8_MAX":"UINT8_MAX\n","UINT8_NUM_BYTES":"UINT8_NUM_BYTES\n","Uint8Array":"var arr = new Uint8Array()\nvar arr = new Uint8Array( 5 )\nvar arr1 = new Int32Array( [ 5, 5, 5 ] );\nvar arr2 = new Uint8Array( arr1 )\nvar arr1 = [ 5.0, 5.0, 5.0 ];\nvar arr2 = new Uint8Array( arr1 )\nvar buf = new ArrayBuffer( 4 );\nvar arr = new Uint8Array( buf, 0, 4 )\n","Uint8Array.from":"function mapFcn( v ) { return v * 2; };\nvar arr = Uint8Array.from( [ 1, 2 ], mapFcn )\n","Uint8Array.of":"var arr = Uint8Array.of( 1, 2 )\n","Uint8Array.BYTES_PER_ELEMENT":"Uint8Array.BYTES_PER_ELEMENT\n","Uint8Array.name":"Uint8Array.name\n","Uint8Array.prototype.buffer":"var arr = new Uint8Array( 5 );\narr.buffer\n","Uint8Array.prototype.byteLength":"var arr = new Uint8Array( 5 );\narr.byteLength\n","Uint8Array.prototype.byteOffset":"var arr = new Uint8Array( 5 );\narr.byteOffset\n","Uint8Array.prototype.BYTES_PER_ELEMENT":"var arr = new Uint8Array( 5 );\narr.BYTES_PER_ELEMENT\n","Uint8Array.prototype.length":"var arr = new Uint8Array( 5 );\narr.length\n","Uint8Array.prototype.copyWithin":"var arr = new Uint8Array( [ 1, 2, 3, 4, 5 ] );\narr.copyWithin( 3, 0, 2 );\narr[ 3 ]\narr[ 4 ]\n","Uint8Array.prototype.entries":"var arr = new Uint8Array( [ 1, 2 ] );\nit = arr.entries();\nit.next().value\nit.next().value\nit.next().done\n","Uint8Array.prototype.every":"var arr = new Uint8Array( [ 1, 2 ] );\nfunction predicate( v ) { return ( v <= 1 ); };\narr.every( predicate )\n","Uint8Array.prototype.fill":"var arr = new Uint8Array( [ 1, 2 ] );\narr.fill( 3 );\narr[ 0 ]\narr[ 1 ]\n","Uint8Array.prototype.filter":"var arr1 = new Uint8Array( [ 1, 2, 3 ] );\nfunction predicate( v ) { return ( v > 1 ); };\nvar arr2 = arr1.filter( predicate );\narr2.length\n","Uint8Array.prototype.find":"var arr = new Uint8Array( [ 1, 2, 3 ] );\nfunction predicate( v ) { return ( v > 2 ); };\nvar v = arr.find( predicate )\n","Uint8Array.prototype.findIndex":"var arr = new Uint8Array( [ 1, 2, 3 ] );\nfunction predicate( v ) { return ( v > 2 ); };\nvar idx = arr.findIndex( predicate )\n","Uint8Array.prototype.forEach":"var arr = new Uint8Array( [ 3, 2, 1 ] );\nvar str = ' ';\nfunction fcn( v, i ) { str += i + ':' + v + ' '; };\narr.forEach( fcn );\nstr\n","Uint8Array.prototype.includes":"var arr = new Uint8Array( [ 1, 2, 3 ] );\nvar bool = arr.includes( 4 )\nbool = arr.includes( 3 )\n","Uint8Array.prototype.indexOf":"var arr = new Uint8Array( [ 1, 2, 3 ] );\nvar idx = arr.indexOf( 4 )\nidx = arr.indexOf( 3 )\n","Uint8Array.prototype.join":"var arr = new Uint8Array( [ 1, 2, 3 ] );\narr.join( '|' )\n","Uint8Array.prototype.keys":"var arr = new Uint8Array( [ 1, 2 ] );\nit = arr.keys();\nit.next().value\nit.next().value\nit.next().done\n","Uint8Array.prototype.lastIndexOf":"var arr = new Uint8Array( [ 1, 0, 2, 0, 1 ] );\nvar idx = arr.lastIndexOf( 3 )\nidx = arr.lastIndexOf( 0 )\n","Uint8Array.prototype.map":"var arr1 = new Uint8Array( [ 1, 2, 3 ] );\nfunction fcn( v ) { return v * 2; };\nvar arr2 = arr1.map( fcn )\n","Uint8Array.prototype.reduce":"var arr = new Uint8Array( [ 1, 2, 3 ] );\nfunction fcn( acc, v ) { return acc + (v*v); };\nvar v = arr.reduce( fcn, 0 )\n","Uint8Array.prototype.reduceRight":"var arr = new Uint8Array( [ 1, 2, 3 ] );\nfunction fcn( acc, v ) { return acc + (v*v); };\nvar v = arr.reduceRight( fcn, 0 )\n","Uint8Array.prototype.reverse":"var arr = new Uint8Array( [ 1, 2, 3 ] )\narr.reverse()\n","Uint8Array.prototype.set":"var arr = new Uint8Array( [ 1, 2, 3 ] );\narr.set( [ 4, 4 ], 1 );\narr[ 1 ]\narr[ 2 ]\n","Uint8Array.prototype.slice":"var arr1 = new Uint8Array( [ 1, 2, 3 ] );\nvar arr2 = arr1.slice( 1 );\narr2.length\narr2[ 0 ]\narr2[ 1 ]\n","Uint8Array.prototype.some":"var arr = new Uint8Array( [ 1, 2 ] );\nfunction predicate( v ) { return ( v > 1 ); };\narr.some( predicate )\n","Uint8Array.prototype.sort":"var arr = new Uint8Array( [ 1, 2, 0, 2, 1 ] );\narr.sort()\n","Uint8Array.prototype.subarray":"var arr1 = new Uint8Array( [ 1, 2, 3, 4, 5 ] );\nvar arr2 = arr1.subarray( 2 )\n","Uint8Array.prototype.toLocaleString":"var arr = new Uint8Array( [ 1, 2, 3 ] );\narr.toLocaleString()\n","Uint8Array.prototype.toString":"var arr = new Uint8Array( [ 1, 2, 3 ] );\narr.toString()\n","Uint8Array.prototype.values":"var arr = new Uint8Array( [ 1, 2 ] );\nit = arr.values();\nit.next().value\nit.next().value\nit.next().done\n","Uint8ClampedArray":"var arr = new Uint8ClampedArray()\nvar arr = new Uint8ClampedArray( 5 )\nvar arr1 = new Int32Array( [ 5, 5, 5 ] );\nvar arr2 = new Uint8ClampedArray( arr1 )\nvar arr1 = [ 5.0, 5.0, 5.0 ];\nvar arr2 = new Uint8ClampedArray( arr1 )\nvar buf = new ArrayBuffer( 4 );\nvar arr = new Uint8ClampedArray( buf, 0, 4 )\n","Uint8ClampedArray.from":"function mapFcn( v ) { return v * 2; };\nvar arr = Uint8ClampedArray.from( [ 1, 2 ], mapFcn )\n","Uint8ClampedArray.of":"var arr = Uint8ClampedArray.of( 1, 2 )\n","Uint8ClampedArray.BYTES_PER_ELEMENT":"Uint8ClampedArray.BYTES_PER_ELEMENT\n","Uint8ClampedArray.name":"Uint8ClampedArray.name\n","Uint8ClampedArray.prototype.buffer":"var arr = new Uint8ClampedArray( 5 );\narr.buffer\n","Uint8ClampedArray.prototype.byteLength":"var arr = new Uint8ClampedArray( 5 );\narr.byteLength\n","Uint8ClampedArray.prototype.byteOffset":"var arr = new Uint8ClampedArray( 5 );\narr.byteOffset\n","Uint8ClampedArray.prototype.BYTES_PER_ELEMENT":"var arr = new Uint8ClampedArray( 5 );\narr.BYTES_PER_ELEMENT\n","Uint8ClampedArray.prototype.length":"var arr = new Uint8ClampedArray( 5 );\narr.length\n","Uint8ClampedArray.prototype.copyWithin":"var arr = new Uint8ClampedArray( [ 1, 2, 3, 4, 5 ] );\narr.copyWithin( 3, 0, 2 );\narr[ 3 ]\narr[ 4 ]\n","Uint8ClampedArray.prototype.entries":"var arr = new Uint8ClampedArray( [ 1, 2 ] );\nit = arr.entries();\nit.next().value\nit.next().value\nit.next().done\n","Uint8ClampedArray.prototype.every":"var arr = new Uint8ClampedArray( [ 1, 2 ] );\nfunction predicate( v ) { return ( v <= 1 ); };\narr.every( predicate )\n","Uint8ClampedArray.prototype.fill":"var arr = new Uint8ClampedArray( [ 1, 2 ] );\narr.fill( 3 );\narr[ 0 ]\narr[ 1 ]\n","Uint8ClampedArray.prototype.filter":"var arr1 = new Uint8ClampedArray( [ 1, 2, 3 ] );\nfunction predicate( v ) { return ( v > 1 ); };\nvar arr2 = arr1.filter( predicate );\narr2.length\n","Uint8ClampedArray.prototype.find":"var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\nfunction predicate( v ) { return ( v > 2 ); };\nvar v = arr.find( predicate )\n","Uint8ClampedArray.prototype.findIndex":"var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\nfunction predicate( v ) { return ( v > 2 ); };\nvar idx = arr.findIndex( predicate )\n","Uint8ClampedArray.prototype.forEach":"var arr = new Uint8ClampedArray( [ 3, 2, 1 ] );\nvar str = ' ';\nfunction fcn( v, i ) { str += i + ':' + v + ' '; };\narr.forEach( fcn );\nstr\n","Uint8ClampedArray.prototype.includes":"var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\nvar bool = arr.includes( 4 )\nbool = arr.includes( 3 )\n","Uint8ClampedArray.prototype.indexOf":"var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\nvar idx = arr.indexOf( 4 )\nidx = arr.indexOf( 3 )\n","Uint8ClampedArray.prototype.join":"var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\narr.join( '|' )\n","Uint8ClampedArray.prototype.keys":"var arr = new Uint8ClampedArray( [ 1, 2 ] );\nit = arr.keys();\nit.next().value\nit.next().value\nit.next().done\n","Uint8ClampedArray.prototype.lastIndexOf":"var arr = new Uint8ClampedArray( [ 1, 0, 2, 0, 1 ] );\nvar idx = arr.lastIndexOf( 3 )\nidx = arr.lastIndexOf( 0 )\n","Uint8ClampedArray.prototype.map":"var arr1 = new Uint8ClampedArray( [ 1, 2, 3 ] );\nfunction fcn( v ) { return v * 2; };\nvar arr2 = arr1.map( fcn )\n","Uint8ClampedArray.prototype.reduce":"var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\nfunction fcn( acc, v ) { return acc + (v*v); };\nvar v = arr.reduce( fcn, 0 )\n","Uint8ClampedArray.prototype.reduceRight":"var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\nfunction fcn( acc, v ) { return acc + (v*v); };\nvar v = arr.reduceRight( fcn, 0 )\n","Uint8ClampedArray.prototype.reverse":"var arr = new Uint8ClampedArray( [ 1, 2, 3 ] )\narr.reverse()\n","Uint8ClampedArray.prototype.set":"var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\narr.set( [ 4, 4 ], 1 );\narr[ 1 ]\narr[ 2 ]\n","Uint8ClampedArray.prototype.slice":"var arr1 = new Uint8ClampedArray( [ 1, 2, 3 ] );\nvar arr2 = arr1.slice( 1 );\narr2.length\narr2[ 0 ]\narr2[ 1 ]\n","Uint8ClampedArray.prototype.some":"var arr = new Uint8ClampedArray( [ 1, 2 ] );\nfunction predicate( v ) { return ( v > 1 ); };\narr.some( predicate )\n","Uint8ClampedArray.prototype.sort":"var arr = new Uint8ClampedArray( [ 1, 2, 0, 2, 1 ] );\narr.sort()\n","Uint8ClampedArray.prototype.subarray":"var arr1 = new Uint8ClampedArray( [ 1, 2, 3, 4, 5 ] );\nvar arr2 = arr1.subarray( 2 )\n","Uint8ClampedArray.prototype.toLocaleString":"var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\narr.toLocaleString()\n","Uint8ClampedArray.prototype.toString":"var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\narr.toString()\n","Uint8ClampedArray.prototype.values":"var arr = new Uint8ClampedArray( [ 1, 2 ] );\nit = arr.values();\nit.next().value\nit.next().value\nit.next().done\n","UINT16_MAX":"UINT16_MAX\n","UINT16_NUM_BYTES":"UINT16_NUM_BYTES\n","Uint16Array":"var arr = new Uint16Array()\nvar arr = new Uint16Array( 5 )\nvar arr1 = new Int32Array( [ 5, 5, 5 ] );\nvar arr2 = new Uint16Array( arr1 )\nvar arr1 = [ 5.0, 5.0, 5.0 ];\nvar arr2 = new Uint16Array( arr1 )\nvar buf = new ArrayBuffer( 8 );\nvar arr = new Uint16Array( buf, 0, 4 )\n","Uint16Array.from":"function mapFcn( v ) { return v * 2; };\nvar arr = Uint16Array.from( [ 1, 2 ], mapFcn )\n","Uint16Array.of":"var arr = Uint16Array.of( 1, 2 )\n","Uint16Array.BYTES_PER_ELEMENT":"Uint16Array.BYTES_PER_ELEMENT\n","Uint16Array.name":"Uint16Array.name\n","Uint16Array.prototype.buffer":"var arr = new Uint16Array( 5 );\narr.buffer\n","Uint16Array.prototype.byteLength":"var arr = new Uint16Array( 5 );\narr.byteLength\n","Uint16Array.prototype.byteOffset":"var arr = new Uint16Array( 5 );\narr.byteOffset\n","Uint16Array.prototype.BYTES_PER_ELEMENT":"var arr = new Uint16Array( 5 );\narr.BYTES_PER_ELEMENT\n","Uint16Array.prototype.length":"var arr = new Uint16Array( 5 );\narr.length\n","Uint16Array.prototype.copyWithin":"var arr = new Uint16Array( [ 1, 2, 3, 4, 5 ] );\narr.copyWithin( 3, 0, 2 );\narr[ 3 ]\narr[ 4 ]\n","Uint16Array.prototype.entries":"var arr = new Uint16Array( [ 1, 2 ] );\nit = arr.entries();\nit.next().value\nit.next().value\nit.next().done\n","Uint16Array.prototype.every":"var arr = new Uint16Array( [ 1, 2 ] );\nfunction predicate( v ) { return ( v <= 1 ); };\narr.every( predicate )\n","Uint16Array.prototype.fill":"var arr = new Uint16Array( [ 1, 2 ] );\narr.fill( 3 );\narr[ 0 ]\narr[ 1 ]\n","Uint16Array.prototype.filter":"var arr1 = new Uint16Array( [ 1, 2, 3 ] );\nfunction predicate( v ) { return ( v > 1 ); };\nvar arr2 = arr1.filter( predicate );\narr2.length\n","Uint16Array.prototype.find":"var arr = new Uint16Array( [ 1, 2, 3 ] );\nfunction predicate( v ) { return ( v > 2 ); };\nvar v = arr.find( predicate )\n","Uint16Array.prototype.findIndex":"var arr = new Uint16Array( [ 1, 2, 3 ] );\nfunction predicate( v ) { return ( v > 2 ); };\nvar idx = arr.findIndex( predicate )\n","Uint16Array.prototype.forEach":"var arr = new Uint16Array( [ 3, 2, 1 ] );\nvar str = ' ';\nfunction fcn( v, i ) { str += i + ':' + v + ' '; };\narr.forEach( fcn );\nstr\n","Uint16Array.prototype.includes":"var arr = new Uint16Array( [ 1, 2, 3 ] );\nvar bool = arr.includes( 4 )\nbool = arr.includes( 3 )\n","Uint16Array.prototype.indexOf":"var arr = new Uint16Array( [ 1, 2, 3 ] );\nvar idx = arr.indexOf( 4 )\nidx = arr.indexOf( 3 )\n","Uint16Array.prototype.join":"var arr = new Uint16Array( [ 1, 2, 3 ] );\narr.join( '|' )\n","Uint16Array.prototype.keys":"var arr = new Uint16Array( [ 1, 2 ] );\nit = arr.keys();\nit.next().value\nit.next().value\nit.next().done\n","Uint16Array.prototype.lastIndexOf":"var arr = new Uint16Array( [ 1, 0, 2, 0, 1 ] );\nvar idx = arr.lastIndexOf( 3 )\nidx = arr.lastIndexOf( 0 )\n","Uint16Array.prototype.map":"var arr1 = new Uint16Array( [ 1, 2, 3 ] );\nfunction fcn( v ) { return v * 2; };\nvar arr2 = arr1.map( fcn )\n","Uint16Array.prototype.reduce":"var arr = new Uint16Array( [ 1, 2, 3 ] );\nfunction fcn( acc, v ) { return acc + (v*v); };\nvar v = arr.reduce( fcn, 0 )\n","Uint16Array.prototype.reduceRight":"var arr = new Uint16Array( [ 1, 2, 3 ] );\nfunction fcn( acc, v ) { return acc + (v*v); };\nvar v = arr.reduceRight( fcn, 0 )\n","Uint16Array.prototype.reverse":"var arr = new Uint16Array( [ 1, 2, 3 ] )\narr.reverse()\n","Uint16Array.prototype.set":"var arr = new Uint16Array( [ 1, 2, 3 ] );\narr.set( [ 4, 4 ], 1 );\narr[ 1 ]\narr[ 2 ]\n","Uint16Array.prototype.slice":"var arr1 = new Uint16Array( [ 1, 2, 3 ] );\nvar arr2 = arr1.slice( 1 );\narr2.length\narr2[ 0 ]\narr2[ 1 ]\n","Uint16Array.prototype.some":"var arr = new Uint16Array( [ 1, 2 ] );\nfunction predicate( v ) { return ( v > 1 ); };\narr.some( predicate )\n","Uint16Array.prototype.sort":"var arr = new Uint16Array( [ 1, 2, 0, 2, 1 ] );\narr.sort()\n","Uint16Array.prototype.subarray":"var arr1 = new Uint16Array( [ 1, 2, 3, 4, 5 ] );\nvar arr2 = arr1.subarray( 2 )\n","Uint16Array.prototype.toLocaleString":"var arr = new Uint16Array( [ 1, 2, 3 ] );\narr.toLocaleString()\n","Uint16Array.prototype.toString":"var arr = new Uint16Array( [ 1, 2, 3 ] );\narr.toString()\n","Uint16Array.prototype.values":"var arr = new Uint16Array( [ 1, 2 ] );\nit = arr.values();\nit.next().value\nit.next().value\nit.next().done\n","UINT32_MAX":"UINT32_MAX\n","UINT32_NUM_BYTES":"UINT32_NUM_BYTES\n","Uint32Array":"var arr = new Uint32Array()\nvar arr = new Uint32Array( 5 )\nvar arr1 = new Int32Array( [ 5, 5, 5 ] );\nvar arr2 = new Uint32Array( arr1 )\nvar arr1 = [ 5.0, 5.0, 5.0 ];\nvar arr2 = new Uint32Array( arr1 )\nvar buf = new ArrayBuffer( 16 );\nvar arr = new Uint32Array( buf, 0, 4 )\n","Uint32Array.from":"function mapFcn( v ) { return v * 2; };\nvar arr = Uint32Array.from( [ 1, 2 ], mapFcn )\n","Uint32Array.of":"var arr = Uint32Array.of( 1, 2 )\n","Uint32Array.BYTES_PER_ELEMENT":"Uint32Array.BYTES_PER_ELEMENT\n","Uint32Array.name":"Uint32Array.name\n","Uint32Array.prototype.buffer":"var arr = new Uint32Array( 5 );\narr.buffer\n","Uint32Array.prototype.byteLength":"var arr = new Uint32Array( 5 );\narr.byteLength\n","Uint32Array.prototype.byteOffset":"var arr = new Uint32Array( 5 );\narr.byteOffset\n","Uint32Array.prototype.BYTES_PER_ELEMENT":"var arr = new Uint32Array( 5 );\narr.BYTES_PER_ELEMENT\n","Uint32Array.prototype.length":"var arr = new Uint32Array( 5 );\narr.length\n","Uint32Array.prototype.copyWithin":"var arr = new Uint32Array( [ 1, 2, 3, 4, 5 ] );\narr.copyWithin( 3, 0, 2 );\narr[ 3 ]\narr[ 4 ]\n","Uint32Array.prototype.entries":"var arr = new Uint32Array( [ 1, 2 ] );\nit = arr.entries();\nit.next().value\nit.next().value\nit.next().done\n","Uint32Array.prototype.every":"var arr = new Uint32Array( [ 1, 2 ] );\nfunction predicate( v ) { return ( v <= 1 ); };\narr.every( predicate )\n","Uint32Array.prototype.fill":"var arr = new Uint32Array( [ 1, 2 ] );\narr.fill( 3 );\narr[ 0 ]\narr[ 1 ]\n","Uint32Array.prototype.filter":"var arr1 = new Uint32Array( [ 1, 2, 3 ] );\nfunction predicate( v ) { return ( v > 1 ); };\nvar arr2 = arr1.filter( predicate );\narr2.length\n","Uint32Array.prototype.find":"var arr = new Uint32Array( [ 1, 2, 3 ] );\nfunction predicate( v ) { return ( v > 2 ); };\nvar v = arr.find( predicate )\n","Uint32Array.prototype.findIndex":"var arr = new Uint32Array( [ 1, 2, 3 ] );\nfunction predicate( v ) { return ( v > 2 ); };\nvar idx = arr.findIndex( predicate )\n","Uint32Array.prototype.forEach":"var arr = new Uint32Array( [ 3, 2, 1 ] );\nvar str = ' ';\nfunction fcn( v, i ) { str += i + ':' + v + ' '; };\narr.forEach( fcn );\nstr\n","Uint32Array.prototype.includes":"var arr = new Uint32Array( [ 1, 2, 3 ] );\nvar bool = arr.includes( 4 )\nbool = arr.includes( 3 )\n","Uint32Array.prototype.indexOf":"var arr = new Uint32Array( [ 1, 2, 3 ] );\nvar idx = arr.indexOf( 4 )\nidx = arr.indexOf( 3 )\n","Uint32Array.prototype.join":"var arr = new Uint32Array( [ 1, 2, 3 ] );\narr.join( '|' )\n","Uint32Array.prototype.keys":"var arr = new Uint32Array( [ 1, 2 ] );\nit = arr.keys();\nit.next().value\nit.next().value\nit.next().done\n","Uint32Array.prototype.lastIndexOf":"var arr = new Uint32Array( [ 1, 0, 2, 0, 1 ] );\nvar idx = arr.lastIndexOf( 3 )\nidx = arr.lastIndexOf( 0 )\n","Uint32Array.prototype.map":"var arr1 = new Uint32Array( [ 1, 2, 3 ] );\nfunction fcn( v ) { return v * 2; };\nvar arr2 = arr1.map( fcn )\n","Uint32Array.prototype.reduce":"var arr = new Uint32Array( [ 1, 2, 3 ] );\nfunction fcn( acc, v ) { return acc + (v*v); };\nvar v = arr.reduce( fcn, 0 )\n","Uint32Array.prototype.reduceRight":"var arr = new Uint32Array( [ 1, 2, 3 ] );\nfunction fcn( acc, v ) { return acc + (v*v); };\nvar v = arr.reduceRight( fcn, 0 )\n","Uint32Array.prototype.reverse":"var arr = new Uint32Array( [ 1, 2, 3 ] )\narr.reverse()\n","Uint32Array.prototype.set":"var arr = new Uint32Array( [ 1, 2, 3 ] );\narr.set( [ 4, 4 ], 1 );\narr[ 1 ]\narr[ 2 ]\n","Uint32Array.prototype.slice":"var arr1 = new Uint32Array( [ 1, 2, 3 ] );\nvar arr2 = arr1.slice( 1 );\narr2.length\narr2[ 0 ]\narr2[ 1 ]\n","Uint32Array.prototype.some":"var arr = new Uint32Array( [ 1, 2 ] );\nfunction predicate( v ) { return ( v > 1 ); };\narr.some( predicate )\n","Uint32Array.prototype.sort":"var arr = new Uint32Array( [ 1, 2, 0, 2, 1 ] );\narr.sort()\n","Uint32Array.prototype.subarray":"var arr1 = new Uint32Array( [ 1, 2, 3, 4, 5 ] );\nvar arr2 = arr1.subarray( 2 )\n","Uint32Array.prototype.toLocaleString":"var arr = new Uint32Array( [ 1, 2, 3 ] );\narr.toLocaleString()\n","Uint32Array.prototype.toString":"var arr = new Uint32Array( [ 1, 2, 3 ] );\narr.toString()\n","Uint32Array.prototype.values":"var arr = new Uint32Array( [ 1, 2 ] );\nit = arr.values();\nit.next().value\nit.next().value\nit.next().done\n","umask":"var mask = umask()\nmask = umask( { 'symbolic': true } )\n","uncapitalize":"var out = uncapitalize( 'Beep' )\nout = uncapitalize( 'bOOp' )\n","uncapitalizeKeys":"var obj = { 'AA': 1, 'BB': 2 };\nvar out = uncapitalizeKeys( obj )\n","uncurry":"function addX( x ) {\n return function addY( y ) {\n     return x + y;\n };\n };\nvar fcn = uncurry( addX );\nvar sum = fcn( 2, 3 )\nfunction add( x ) {\n return function add( y ) {\n     return x + y;\n };\n };\nfcn = uncurry( add, 2 );\nsum = fcn( 9 )\nfunction addX( x ) {\n this.x = x;\n return addY;\n };\nfunction addY( y ) {\n return this.x + y;\n };\nfcn = uncurry( addX, {} );\nsum = fcn( 2, 3 )\n","uncurryRight":"function addX( x ) {\n return function addY( y ) {\n     return x + y;\n };\n };\nvar fcn = uncurryRight( addX );\nvar sum = fcn( 3, 2 )\nfunction add( y ) {\n return function add( x ) {\n     return x + y;\n };\n };\nfcn = uncurryRight( add, 2 );\nsum = fcn( 9 )\nfunction addY( y ) {\n this.y = y;\n return addX;\n };\nfunction addX( x ) {\n return x + this.y;\n };\nfcn = uncurryRight( addY, {} );\nsum = fcn( 3, 2 )\n","UNICODE_MAX":"UNICODE_MAX\n","UNICODE_MAX_BMP":"UNICODE_MAX_BMP\n","UnicodeColumnChartSparkline":"var data = [ 1.0, 5.0, 3.0, 2.0, 4.0, 4.0, 3.0 ];\nvar chart = new UnicodeColumnChartSparkline( data );\nchart.render()\n","UnicodeLineChartSparkline":"var data = [ 1.0, 5.0, 3.0, 2.0, 4.0, 4.0, 3.0 ];\nvar chart = new UnicodeLineChartSparkline( data );\nchart.render()\n","UnicodeSparkline":"var data = [ 1.0, 5.0, 3.0, 2.0, 4.0, 4.0, 3.0 ];\nvar chart = new UnicodeSparkline( data );\nchart.render()\nchart.type = 'line';\nchart.render()\n","UnicodeTristateChartSparkline":"var data = [ -1, 1, 0, 0, 1, -1, -1, 1 ];\nvar chart = new UnicodeTristateChartSparkline( data );\nchart.render()\n","UnicodeUpDownChartSparkline":"var data = [ -1, 1, 1, 1, 1, -1, -1, 1 ];\nvar chart = new UnicodeUpDownChartSparkline( data );\nchart.render()\n","UnicodeWinLossChartSparkline":"var data = [ -2, 1, 2, 2, 1, -1, -1, 1 ];\nvar chart = new UnicodeWinLossChartSparkline( data );\nchart.render()\n","unlink":"function done( error ) {\n if ( error ) {\n     console.error( error.message );\n }\n };\nunlink( './beep/boop.txt', done );\n","unlink.sync":"var out = unlink.sync( './beep/boop.txt' );\n","unshift":"var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\narr = unshift( arr, 6.0, 7.0 )\narr = new Float64Array( [ 1.0, 2.0 ] );\narr = unshift( arr, 3.0, 4.0 )\narr = { 'length': 1, '0': 1.0 };\narr = unshift( arr, 2.0, 3.0 )\n","until":"function predicate( i ) { return ( i >= 5 ); };\nfunction beep( i ) { console.log( 'boop: %d', i ); };\nuntil( predicate, beep )\n","untilAsync":"function predicate( i, clbk ) { clbk( null, i >= 5 ); };\nfunction fcn( i, next ) {\n setTimeout( onTimeout, i );\n function onTimeout() {\n     next( null, 'boop'+i );\n }\n };\nfunction done( error, result ) {\n if ( error ) {\n     throw error;\n }\n console.log( result );\n };\nuntilAsync( predicate, fcn, done )\n","untilEach":"function predicate( v ) { return v !== v; };\nfunction logger( v, i ) { console.log( '%s: %d', i, v ); };\nvar arr = [ 1, 2, 3, 4, NaN, 5 ];\nuntilEach( arr, predicate, logger )\n","untilEachRight":"function predicate( v ) { return v !== v; };\nfunction logger( v, i ) { console.log( '%s: %d', i, v ); };\nvar arr = [ 1, NaN, 2, 3, 4, 5 ];\nuntilEachRight( arr, predicate, logger )\n","unzip":"var arr = [ [ 1, 'a', 3 ], [ 2, 'b', 4 ] ];\nvar out = unzip( arr )\narr = [ [ 1, 'a', 3 ], [ 2, 'b', 4 ] ];\nout = unzip( arr, [ 0, 2 ] )\n","uppercase":"var out = uppercase( 'bEEp' )\n","uppercaseKeys":"var obj = { 'a': 1, 'b': 2 };\nvar out = uppercaseKeys( obj )\n","US_STATES_ABBR":"var list = US_STATES_ABBR()\n","US_STATES_CAPITALS":"var list = US_STATES_CAPITALS()\n","US_STATES_CAPITALS_NAMES":"var out = US_STATES_CAPITALS_NAMES()\n","US_STATES_NAMES":"var list = US_STATES_NAMES()\n","US_STATES_NAMES_CAPITALS":"var out = US_STATES_NAMES_CAPITALS()\n","utf16ToUTF8Array":"var str = '☃';\nvar out = utf16ToUTF8Array( str )\n","vartest":"var x = [ 610, 610, 550, 590, 565, 570 ];\nvar y = [ 560, 550, 580, 550, 560, 590, 550, 590 ];\nvar out = vartest( x, y )\nvar table = out.print()\n","waterfall":"function foo( next ) { next( null, 'beep' ); };\nfunction bar( str, next ) { console.log( str ); next(); };\nfunction done( error ) { if ( error ) { throw error; } };\nvar fcns = [ foo, bar ];\nwaterfall( fcns, done );\n","waterfall.factory":"function foo( next ) { next( null, 'beep' ); };\nfunction bar( str, next ) { console.log( str ); next(); };\nfunction done( error ) { if ( error ) { throw error; } };\nvar fcns = [ foo, bar ];\nvar waterfall = waterfall.factory( fcns, done );\nwaterfall();\nwaterfall();\nwaterfall();\n","whileAsync":"function predicate( i, clbk ) { clbk( null, i < 5 ); };\nfunction fcn( i, next ) {\n setTimeout( onTimeout, i );\n function onTimeout() {\n     next( null, 'boop'+i );\n }\n };\nfunction done( error, result ) {\n if ( error ) {\n     throw error;\n }\n console.log( result );\n };\nwhileAsync( predicate, fcn, done )\n","whileEach":"function predicate( v ) { return v === v; };\nfunction logger( v, i ) { console.log( '%s: %d', i, v ); };\nvar arr = [ 1, 2, 3, 4, NaN, 5 ];\nwhileEach( arr, predicate, logger )\n","whileEachRight":"function predicate( v ) { return v === v; };\nfunction logger( v, i ) { console.log( '%s: %d', i, v ); };\nvar arr = [ 1, NaN, 2, 3, 4, 5 ];\nwhileEachRight( arr, predicate, logger )\n","whilst":"function predicate( i ) { return ( i < 5 ); };\nfunction beep( i ) { console.log( 'boop: %d', i ); };\nwhilst( predicate, beep )\n","wilcoxon":"var arr = [ 6, 8, 14, 16, 23, 24, 28, 29, 41, -48, 49, 56, 60, -67, 75 ];\nvar out = wilcoxon( x )\nrunif = base.random.discreteUniform.factory( 1, 5, { 'seed': 786 });\nvar x = new Array( 100 );\nvar y = new Array( 100 );\nfor ( i = 0; i < x.length; i++ ) {\n x[ i ] = runif();\n y[ i ] = runif();\n }\nout = wilcoxon( x, y )\nvar table = out.print()\nout = wilcoxon( arr, { 'alpha': 0.01 });\ntable = out.print()\nout = wilcoxon( arr, { 'mu': 10 })\nout = wilcoxon( arr, { 'alternative': 'less' });\ntable = out.print()\nout = wilcoxon( arr, { 'alternative': 'greater' });\ntable = out.print()\n","writableProperties":"function Foo() { this.beep = 'boop'; return this; };\nFoo.prototype.foo = 'bar';\nvar obj = new Foo();\nvar props = writableProperties( obj )\n","writablePropertiesIn":"var props = writablePropertiesIn( [] )\n","writablePropertyNames":"var obj = { 'a': 'b' };\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = true;\ndesc.writable = false;\ndesc.value = 'boop';\ndefineProperty( obj, 'beep', desc );\nvar keys = writablePropertyNames( obj )\n","writablePropertyNamesIn":"var obj = { 'a': 'b' };\nvar desc = {};\ndesc.configurable = true;\ndesc.enumerable = true;\ndesc.writable = false;\ndesc.value = 'boop';\ndefineProperty( obj, 'beep', desc );\nvar keys = writablePropertyNamesIn( obj )\n","writablePropertySymbols":"var obj = {};\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = false;\ndesc.writable = true;\ndesc.value = 'boop';\nvar sym = ( Symbol ) ? Symbol( 'beep' ) : 'beep';\ndefineProperty( obj, sym, desc );\nvar symbols = writablePropertySymbols( obj )\n","writablePropertySymbolsIn":"var obj = {};\nvar desc = {};\ndesc.configurable = false;\ndesc.enumerable = false;\ndesc.writable = true;\ndesc.value = 'boop';\nvar sym = ( Symbol ) ? Symbol( 'beep' ) : 'beep';\ndefineProperty( obj, sym, desc );\nvar symbols = writablePropertySymbolsIn( obj )\n","writeFile":"function onWrite( error ) {\n if ( error ) {\n     console.error( error.message );\n }\n };\nwriteFile( './beep/boop.txt', 'beep boop', onWrite );\n","writeFile.sync":"var err = writeFile.sync( './beep/boop.txt', 'beep boop' );\n","zip":"var out = zip( [ 1, 2 ], [ 'a', 'b' ] )\nvar opts = { 'trunc': false };\nout = zip( [ 1, 2, 3 ], [ 'a', 'b' ], opts )\n","ztest":"var rnorm = base.random.normal.factory( 0.0, 2.0, { 'seed': 212 } );\nvar x = new Array( 100 );\nfor ( var i = 0; i < x.length; i++ ) {\n x[ i ] = rnorm();\n }\nvar out = ztest( x, 2.0 )\narr = [ 2, 4, 3, 1, 0 ];\nout = ztest( arr, 2.0, { 'alpha': 0.01 } );\ntable = out.print()\nvar arr = [ 4, 4, 6, 6, 5 ];\nout = ztest( arr, 1.0, { 'mu': 5 } )\narr = [ 4, 4, 6, 6, 5 ];\nout = ztest( arr, 1.0, { 'alternative': 'less' } )\nout = ztest( arr, 1.0, { 'alternative': 'greater' } )\n","ztest2":"var x = [ -0.21, 0.14, 1.65, 2.11, -1.86, -0.29, 1.48, 0.81, 0.86, 1.04 ];\nvar y = [ -1.53, -2.93, 2.34, -1.15, 2.7, -0.12, 4.22, 1.66, 3.43, 4.66 ];\nvar out = ztest2( x, y, 2.0, 2.0 )\nvar table = out.print()\nout = ztest2( x, y, 2.0, 2.0, { 'alpha': 0.4 } );\ntable = out.print()\nout = ztest2( x, y, 2.0, 2.0, { 'alternative': 'less' } );\ntable = out.print()\nout = ztest2( x, y, 2.0, 2.0, { 'alternative': 'greater' } );\ntable = out.print()\nvar rnorm = base.random.normal.factory({ 'seed': 372 } );\nx = new Array( 100 );\nfor ( i = 0; i < x.length; i++ ) {\n x[ i ] = rnorm( 2.0, 1.0 );\n }\ny = new Array( 100 );\n for ( i = 0; i < x.length; i++ ) {\n y[ i ] = rnorm( 0.0, 2.0 );\n }\nout = ztest2( x, y, 1.0, 2.0, { 'difference': 2.0 } )\n"}
