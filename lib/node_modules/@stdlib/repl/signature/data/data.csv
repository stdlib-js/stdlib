abs,"abs( x[, options] )"
abs.assign,"abs.assign( x, y )"
acartesianPower,"acartesianPower( x, n )"
acartesianProduct,"acartesianProduct( x1, x2 )"
acartesianSquare,"acartesianSquare( x )"
acronym,"acronym( str[, options] )"
aempty,"aempty( length[, dtype] )"
aemptyLike,"aemptyLike( x[, dtype] )"
AFINN_96,"AFINN_96()"
AFINN_111,"AFINN_111()"
afull,"afull( length, value[, dtype] )"
afullLike,"afullLike( x[, dtype] )"
alias2pkg,"alias2pkg( alias )"
alias2related,"alias2related( alias )"
alias2standalone,"alias2standalone( alias )"
aliases,"aliases( [namespace] )"
allocUnsafe,"allocUnsafe( size )"
amskfilter,"amskfilter( x, mask )"
amskput,"amskput( x, mask, values[, options] )"
amskreject,"amskreject( x, mask )"
anans,"anans( length[, dtype] )"
anansLike,"anansLike( x[, dtype] )"
anova1,"anova1( x, factor[, options] )"
ANSCOMBES_QUARTET,"ANSCOMBES_QUARTET()"
any,"any( collection )"
anyBy,"anyBy( collection, predicate[, thisArg ] )"
anyByAsync,"anyByAsync( collection, [options,] predicate, done )"
anyByAsync.factory,"anyByAsync.factory( [options,] predicate )"
anyByRight,"anyByRight( collection, predicate[, thisArg ] )"
anyByRightAsync,"anyByRightAsync( collection, [options,] predicate, done )"
anyByRightAsync.factory,"anyByRightAsync.factory( [options,] predicate )"
anyInBy,"anyInBy( object, predicate[, thisArg ] )"
anyOwnBy,"anyOwnBy( object, predicate[, thisArg ] )"
aones,"aones( length[, dtype] )"
aonesLike,"aonesLike( x[, dtype] )"
aoneTo,"aoneTo( n[, dtype] )"
aoneToLike,"aoneToLike( x[, dtype] )"
APERY,"APERY"
aplace,"aplace( x, mask, values[, options] )"
append,"append( collection1, collection2 )"
aput,"aput( x, indices, values[, options] )"
ARCH,"ARCH"
argumentFunction,"argumentFunction( idx )"
ARGV,"ARGV"
array,"array( [buffer,] [options] )"
array2buffer,"array2buffer( arr )"
array2fancy,"array2fancy( x[, options] )"
array2fancy.factory,"array2fancy.factory( [options] )"
array2fancy.idx,"array2fancy.idx( x[, options] )"
array2iterator,"array2iterator( src[, mapFcn[, thisArg]] )"
array2iteratorRight,"array2iteratorRight( src[, mapFcn[, thisArg]] )"
ArrayBuffer,"ArrayBuffer( size )"
ArrayBuffer.length,"ArrayBuffer.length"
ArrayBuffer.isView,"ArrayBuffer.isView( arr )"
ArrayBuffer.prototype.byteLength,"ArrayBuffer.prototype.byteLength"
ArrayBuffer.prototype.slice,"ArrayBuffer.prototype.slice( [start[, end]] )"
arraybuffer2buffer,"arraybuffer2buffer( buf[, byteOffset[, length]] )"
arrayCtors,"arrayCtors( dtype )"
arrayDataType,"arrayDataType( array )"
arrayDataTypes,"arrayDataTypes( [kind] )"
ArrayIndex,"ArrayIndex( x[, options] )"
ArrayIndex.free,"ArrayIndex.free( id )"
ArrayIndex.get,"ArrayIndex.get( id )"
ArrayIndex.prototype.data,"ArrayIndex.prototype.data"
ArrayIndex.prototype.dtype,"ArrayIndex.prototype.dtype"
ArrayIndex.prototype.id,"ArrayIndex.prototype.id"
ArrayIndex.prototype.isCached,"ArrayIndex.prototype.isCached"
ArrayIndex.prototype.type,"ArrayIndex.prototype.type"
ArrayIndex.prototype.toString,"ArrayIndex.prototype.toString()"
ArrayIndex.prototype.toJSON,"ArrayIndex.prototype.toJSON()"
arrayMinDataType,"arrayMinDataType( value )"
arrayMostlySafeCasts,"arrayMostlySafeCasts( [dtype] )"
arrayNextDataType,"arrayNextDataType( [dtype] )"
arrayPromotionRules,"arrayPromotionRules( [dtype1, dtype2] )"
arraySafeCasts,"arraySafeCasts( [dtype] )"
arraySameKindCasts,"arraySameKindCasts( [dtype] )"
arrayShape,"arrayShape( arr )"
arrayStream,"arrayStream( src[, options] )"
arrayStream.factory,"arrayStream.factory( [options] )"
arrayStream.objectMode,"arrayStream.objectMode( src[, options] )"
arrayview2iterator,"arrayview2iterator( src[, begin[, end]][, mapFcn[, thisArg]] )"
arrayview2iteratorRight,"arrayview2iteratorRight( src[, begin[, end]][, mapFcn[, thisArg]] )"
aslice,"aslice( x[, start[, end]] )"
AsyncIteratorSymbol,"AsyncIteratorSymbol"
atake,"atake( x, indices[, options] )"
azeros,"azeros( length[, dtype] )"
azerosLike,"azerosLike( x[, dtype] )"
azeroTo,"azeroTo( n[, dtype] )"
azeroToLike,"azeroToLike( x[, dtype] )"
bartlettTest,"bartlettTest( ...x[, options] )"
base.abs,"base.abs( x )"
base.abs2,"base.abs2( x )"
base.abs2f,"base.abs2f( x )"
base.absdiff,"base.absdiff( x, y )"
base.absf,"base.absf( x )"
base.acartesianPower,"base.acartesianPower( x, n )"
base.acartesianProduct,"base.acartesianProduct( x1, x2 )"
base.acartesianSquare,"base.acartesianSquare( x )"
base.acos,"base.acos( x )"
base.acosd,"base.acosd( x )"
base.acosf,"base.acosf( x )"
base.acosh,"base.acosh( x )"
base.acot,"base.acot( x )"
base.acotd,"base.acotd( x )"
base.acotf,"base.acotf( x )"
base.acoth,"base.acoth( x )"
base.acovercos,"base.acovercos( x )"
base.acoversin,"base.acoversin( x )"
base.acsc,"base.acsc( x )"
base.acscd,"base.acscd( x )"
base.acscdf,"base.acscdf( x )"
base.acscf,"base.acscf( x )"
base.acsch,"base.acsch( x )"
base.add,"base.add( x, y )"
base.add3,"base.add3( x, y, z )"
base.add4,"base.add4( x, y, z, w )"
base.add5,"base.add5( x, y, z, w, u )"
base.addf,"base.addf( x, y )"
base.afilled,"base.afilled( value, len )"
base.afilled2d,"base.afilled2d( value, shape )"
base.afilled2dBy,"base.afilled2dBy( shape, clbk[, thisArg] )"
base.afilled3d,"base.afilled3d( value, shape )"
base.afilled3dBy,"base.afilled3dBy( shape, clbk[, thisArg] )"
base.afilled4d,"base.afilled4d( value, shape )"
base.afilled4dBy,"base.afilled4dBy( shape, clbk[, thisArg] )"
base.afilled5d,"base.afilled5d( value, shape )"
base.afilled5dBy,"base.afilled5dBy( shape, clbk[, thisArg] )"
base.afilledBy,"base.afilledBy( len, clbk[, thisArg] )"
base.afillednd,"base.afillednd( value, shape )"
base.afilledndBy,"base.afilledndBy( shape, clbk[, thisArg] )"
base.afilter,"base.afilter( x, predicate[, thisArg] )"
base.afirst,"base.afirst( arr )"
base.aflatten,"base.aflatten( x, shape, colexicographic )"
base.aflatten.assign,"base.aflatten.assign( x, shape, colexicographic, out, stride, offset )"
base.aflatten2d,"base.aflatten2d( x, shape, colexicographic )"
base.aflatten2d.assign,"base.aflatten2d.assign( x, shape, colexicographic, out, stride, offset )"
base.aflatten2dBy,"base.aflatten2dBy( x, shape, colex, clbk[, thisArg] )"
base.aflatten2dBy.assign,"base.aflatten2dBy.assign( x, shape, colex, out, stride, offset, clbk[, thisArg] )"
base.aflatten3d,"base.aflatten3d( x, shape, colexicographic )"
base.aflatten3d.assign,"base.aflatten3d.assign( x, shape, colexicographic, out, stride, offset )"
base.aflatten3dBy,"base.aflatten3dBy( x, shape, colex, clbk[, thisArg] )"
base.aflatten3dBy.assign,"base.aflatten3dBy.assign( x, shape, colex, out, stride, offset, clbk[, thisArg] )"
base.aflatten4d,"base.aflatten4d( x, shape, colexicographic )"
base.aflatten4d.assign,"base.aflatten4d.assign( x, shape, colexicographic, out, stride, offset )"
base.aflatten4dBy,"base.aflatten4dBy( x, shape, colex, clbk[, thisArg] )"
base.aflatten4dBy.assign,"base.aflatten4dBy.assign( x, shape, colex, out, stride, offset, clbk[, thisArg] )"
base.aflatten5d,"base.aflatten5d( x, shape, colexicographic )"
base.aflatten5d.assign,"base.aflatten5d.assign( x, shape, colexicographic, out, stride, offset )"
base.aflatten5dBy,"base.aflatten5dBy( x, shape, colex, clbk[, thisArg] )"
base.aflatten5dBy.assign,"base.aflatten5dBy.assign( x, shape, colex, out, stride, offset, clbk[, thisArg] )"
base.aflattenBy,"base.aflattenBy( x, shape, colex, clbk[, thisArg] )"
base.aflattenBy.assign,"base.aflattenBy.assign( x, shape, colex, out, stride, offset, clbk[, thisArg] )"
base.afliplr2d,"base.afliplr2d( x )"
base.afliplr3d,"base.afliplr3d( x )"
base.afliplr4d,"base.afliplr4d( x )"
base.afliplr5d,"base.afliplr5d( x )"
base.aflipud2d,"base.aflipud2d( x )"
base.aflipud3d,"base.aflipud3d( x )"
base.aflipud4d,"base.aflipud4d( x )"
base.aflipud5d,"base.aflipud5d( x )"
base.ahavercos,"base.ahavercos( x )"
base.ahaversin,"base.ahaversin( x )"
base.altcase,"base.altcase( str )"
base.aones,"base.aones( len )"
base.aones2d,"base.aones2d( shape )"
base.aones3d,"base.aones3d( shape )"
base.aones4d,"base.aones4d( shape )"
base.aones5d,"base.aones5d( shape )"
base.aonesnd,"base.aonesnd( shape )"
base.aoneTo,"base.aoneTo( n )"
base.aoneTo.assign,"base.aoneTo.assign( out, stride, offset )"
base.args2multislice,"base.args2multislice( args )"
base.asec,"base.asec( x )"
base.asecd,"base.asecd( x )"
base.asecdf,"base.asecdf( x )"
base.asecf,"base.asecf( x )"
base.asech,"base.asech( x )"
base.asin,"base.asin( x )"
base.asind,"base.asind( x )"
base.asindf,"base.asindf( x )"
base.asinf,"base.asinf( x )"
base.asinh,"base.asinh( x )"
base.atan,"base.atan( x )"
base.atan2,"base.atan2( y, x )"
base.atand,"base.atand( x )"
base.atanf,"base.atanf( x )"
base.atanh,"base.atanh( x )"
base.avercos,"base.avercos( x )"
base.aversin,"base.aversin( x )"
base.azeros,"base.azeros( len )"
base.azeros2d,"base.azeros2d( shape )"
base.azeros3d,"base.azeros3d( shape )"
base.azeros4d,"base.azeros4d( shape )"
base.azeros5d,"base.azeros5d( shape )"
base.azerosnd,"base.azerosnd( shape )"
base.azeroTo,"base.azeroTo( n )"
base.azeroTo.assign,"base.azeroTo.assign( out, stride, offset )"
base.bernoulli,"base.bernoulli( n )"
base.besselj0,"base.besselj0( x )"
base.besselj1,"base.besselj1( x )"
base.bessely0,"base.bessely0( x )"
base.bessely1,"base.bessely1( x )"
base.beta,"base.beta( x, y )"
base.betainc,"base.betainc( x, a, b[, regularized[, upper]] )"
base.betaincinv,"base.betaincinv( p, a, b[, upper] )"
base.betaln,"base.betaln( a, b )"
base.binet,"base.binet( x )"
base.binomcoef,"base.binomcoef( n, k )"
base.binomcoefln,"base.binomcoefln( n, k )"
base.boxcox,"base.boxcox( x, lambda )"
base.boxcox1p,"base.boxcox1p( x, lambda )"
base.boxcox1pinv,"base.boxcox1pinv( y, lambda )"
base.boxcoxinv,"base.boxcoxinv( y, lambda )"
base.cabs,"base.cabs( z )"
base.cabs2,"base.cabs2( z )"
base.cabs2f,"base.cabs2f( z )"
base.cabsf,"base.cabsf( z )"
base.cadd,"base.cadd( z1, z2 )"
base.caddf,"base.caddf( z1, z2 )"
base.camelcase,"base.camelcase( str )"
base.capitalize,"base.capitalize( str )"
base.cbrt,"base.cbrt( x )"
base.cbrtf,"base.cbrtf( x )"
base.cceil,"base.cceil( z )"
base.cceilf,"base.cceilf( z )"
base.cceiln,"base.cceiln( z, n )"
base.ccis,"base.ccis( z )"
base.cdiv,"base.cdiv( z1, z2 )"
base.ceil,"base.ceil( x )"
base.ceil2,"base.ceil2( x )"
base.ceil10,"base.ceil10( x )"
base.ceilb,"base.ceilb( x, n, b )"
base.ceilf,"base.ceilf( x )"
base.ceiln,"base.ceiln( x, n )"
base.ceilsd,"base.ceilsd( x, n[, b] )"
base.cexp,"base.cexp( z )"
base.cflipsign,"base.cflipsign( z, y )"
base.cflipsignf,"base.cflipsignf( z, y )"
base.cfloor,"base.cfloor( z )"
base.cfloorn,"base.cfloorn( z, n )"
base.cidentity,"base.cidentity( z )"
base.cidentityf,"base.cidentityf( z )"
base.cinv,"base.cinv( z )"
base.clamp,"base.clamp( v, min, max )"
base.clampf,"base.clampf( v, min, max )"
base.cmul,"base.cmul( z1, z2 )"
base.cmulf,"base.cmulf( z1, z2 )"
base.cneg,"base.cneg( z )"
base.cnegf,"base.cnegf( z )"
base.codePointAt,"base.codePointAt( str, idx, backward )"
base.constantcase,"base.constantcase( str )"
base.continuedFraction,"base.continuedFraction( generator[, options] )"
base.copysign,"base.copysign( x, y )"
base.copysignf,"base.copysignf( x, y )"
base.cos,"base.cos( x )"
base.cosd,"base.cosd( x )"
base.cosh,"base.cosh( x )"
base.cosm1,"base.cosm1( x )"
base.cospi,"base.cospi( x )"
base.cot,"base.cot( x )"
base.cotd,"base.cotd( x )"
base.coth,"base.coth( x )"
base.covercos,"base.covercos( x )"
base.coversin,"base.coversin( x )"
base.cphase,"base.cphase( z )"
base.cpolar,"base.cpolar( z )"
base.cpolar.assign,"base.cpolar.assign( z, out, stride, offset )"
base.cround,"base.cround( z )"
base.croundn,"base.croundn( z, n )"
base.csc,"base.csc( x )"
base.cscd,"base.cscd( x )"
base.csch,"base.csch( x )"
base.csignum,"base.csignum( z )"
base.csub,"base.csub( z1, z2 )"
base.csubf,"base.csubf( z1, z2 )"
base.deg2rad,"base.deg2rad( x )"
base.deg2radf,"base.deg2radf( x )"
base.digamma,"base.digamma( x )"
base.diracDelta,"base.diracDelta( x )"
base.div,"base.div( x, y )"
base.divf,"base.divf( x, y )"
base.dotcase,"base.dotcase( str )"
base.dists.arcsine.Arcsine,"base.dists.arcsine.Arcsine( [a, b] )"
base.dists.arcsine.cdf,"base.dists.arcsine.cdf( x, a, b )"
base.dists.arcsine.cdf.factory,"base.dists.arcsine.cdf.factory( a, b )"
base.dists.arcsine.entropy,"base.dists.arcsine.entropy( a, b )"
base.dists.arcsine.kurtosis,"base.dists.arcsine.kurtosis( a, b )"
base.dists.arcsine.logcdf,"base.dists.arcsine.logcdf( x, a, b )"
base.dists.arcsine.logcdf.factory,"base.dists.arcsine.logcdf.factory( a, b )"
base.dists.arcsine.logpdf,"base.dists.arcsine.logpdf( x, a, b )"
base.dists.arcsine.logpdf.factory,"base.dists.arcsine.logpdf.factory( a, b )"
base.dists.arcsine.mean,"base.dists.arcsine.mean( a, b )"
base.dists.arcsine.median,"base.dists.arcsine.median( a, b )"
base.dists.arcsine.mode,"base.dists.arcsine.mode( a, b )"
base.dists.arcsine.pdf,"base.dists.arcsine.pdf( x, a, b )"
base.dists.arcsine.pdf.factory,"base.dists.arcsine.pdf.factory( a, b )"
base.dists.arcsine.quantile,"base.dists.arcsine.quantile( p, a, b )"
base.dists.arcsine.quantile.factory,"base.dists.arcsine.quantile.factory( a, b )"
base.dists.arcsine.skewness,"base.dists.arcsine.skewness( a, b )"
base.dists.arcsine.stdev,"base.dists.arcsine.stdev( a, b )"
base.dists.arcsine.variance,"base.dists.arcsine.variance( a, b )"
base.dists.bernoulli.Bernoulli,"base.dists.bernoulli.Bernoulli( [p] )"
base.dists.bernoulli.cdf,"base.dists.bernoulli.cdf( x, p )"
base.dists.bernoulli.cdf.factory,"base.dists.bernoulli.cdf.factory( p )"
base.dists.bernoulli.entropy,"base.dists.bernoulli.entropy( p )"
base.dists.bernoulli.kurtosis,"base.dists.bernoulli.kurtosis( p )"
base.dists.bernoulli.mean,"base.dists.bernoulli.mean( p )"
base.dists.bernoulli.median,"base.dists.bernoulli.median( p )"
base.dists.bernoulli.mgf,"base.dists.bernoulli.mgf( t, p )"
base.dists.bernoulli.mgf.factory,"base.dists.bernoulli.mgf.factory( p )"
base.dists.bernoulli.mode,"base.dists.bernoulli.mode( p )"
base.dists.bernoulli.pmf,"base.dists.bernoulli.pmf( x, p )"
base.dists.bernoulli.pmf.factory,"base.dists.bernoulli.pmf.factory( p )"
base.dists.bernoulli.quantile,"base.dists.bernoulli.quantile( r, p )"
base.dists.bernoulli.quantile.factory,"base.dists.bernoulli.quantile.factory( p )"
base.dists.bernoulli.skewness,"base.dists.bernoulli.skewness( p )"
base.dists.bernoulli.stdev,"base.dists.bernoulli.stdev( p )"
base.dists.bernoulli.variance,"base.dists.bernoulli.variance( p )"
base.dists.beta.Beta,"base.dists.beta.Beta( [α, β] )"
base.dists.beta.cdf,"base.dists.beta.cdf( x, α, β )"
base.dists.beta.cdf.factory,"base.dists.beta.cdf.factory( α, β )"
base.dists.beta.entropy,"base.dists.beta.entropy( α, β )"
base.dists.beta.kurtosis,"base.dists.beta.kurtosis( α, β )"
base.dists.beta.logcdf,"base.dists.beta.logcdf( x, α, β )"
base.dists.beta.logcdf.factory,"base.dists.beta.logcdf.factory( α, β )"
base.dists.beta.logpdf,"base.dists.beta.logpdf( x, α, β )"
base.dists.beta.logpdf.factory,"base.dists.beta.logpdf.factory( α, β )"
base.dists.beta.mean,"base.dists.beta.mean( α, β )"
base.dists.beta.median,"base.dists.beta.median( α, β )"
base.dists.beta.mgf,"base.dists.beta.mgf( t, α, β )"
base.dists.beta.mgf.factory,"base.dists.beta.mgf.factory( α, β )"
base.dists.beta.mode,"base.dists.beta.mode( α, β )"
base.dists.beta.pdf,"base.dists.beta.pdf( x, α, β )"
base.dists.beta.pdf.factory,"base.dists.beta.pdf.factory( α, β )"
base.dists.beta.quantile,"base.dists.beta.quantile( p, α, β )"
base.dists.beta.quantile.factory,"base.dists.beta.quantile.factory( α, β )"
base.dists.beta.skewness,"base.dists.beta.skewness( α, β )"
base.dists.beta.stdev,"base.dists.beta.stdev( α, β )"
base.dists.beta.variance,"base.dists.beta.variance( α, β )"
base.dists.betaprime.BetaPrime,"base.dists.betaprime.BetaPrime( [α, β] )"
base.dists.betaprime.cdf,"base.dists.betaprime.cdf( x, α, β )"
base.dists.betaprime.cdf.factory,"base.dists.betaprime.cdf.factory( α, β )"
base.dists.betaprime.kurtosis,"base.dists.betaprime.kurtosis( α, β )"
base.dists.betaprime.logcdf,"base.dists.betaprime.logcdf( x, α, β )"
base.dists.betaprime.logcdf.factory,"base.dists.betaprime.logcdf.factory( α, β )"
base.dists.betaprime.logpdf,"base.dists.betaprime.logpdf( x, α, β )"
base.dists.betaprime.logpdf.factory,"base.dists.betaprime.logpdf.factory( α, β )"
base.dists.betaprime.mean,"base.dists.betaprime.mean( α, β )"
base.dists.betaprime.mode,"base.dists.betaprime.mode( α, β )"
base.dists.betaprime.pdf,"base.dists.betaprime.pdf( x, α, β )"
base.dists.betaprime.pdf.factory,"base.dists.betaprime.pdf.factory( α, β )"
base.dists.betaprime.quantile,"base.dists.betaprime.quantile( p, α, β )"
base.dists.betaprime.quantile.factory,"base.dists.betaprime.quantile.factory( α, β )"
base.dists.betaprime.skewness,"base.dists.betaprime.skewness( α, β )"
base.dists.betaprime.stdev,"base.dists.betaprime.stdev( α, β )"
base.dists.betaprime.variance,"base.dists.betaprime.variance( α, β )"
base.dists.binomial.Binomial,"base.dists.binomial.Binomial( [n, p] )"
base.dists.binomial.cdf,"base.dists.binomial.cdf( x, n, p )"
base.dists.binomial.cdf.factory,"base.dists.binomial.cdf.factory( n, p )"
base.dists.binomial.entropy,"base.dists.binomial.entropy( n, p )"
base.dists.binomial.kurtosis,"base.dists.binomial.kurtosis( n, p )"
base.dists.binomial.logpmf,"base.dists.binomial.logpmf( x, n, p )"
base.dists.binomial.logpmf.factory,"base.dists.binomial.logpmf.factory( n, p )"
base.dists.binomial.mean,"base.dists.binomial.mean( n, p )"
base.dists.binomial.median,"base.dists.binomial.median( n, p )"
base.dists.binomial.mgf,"base.dists.binomial.mgf( t, n, p )"
base.dists.binomial.mgf.factory,"base.dists.binomial.mgf.factory( n, p )"
base.dists.binomial.mode,"base.dists.binomial.mode( n, p )"
base.dists.binomial.pmf,"base.dists.binomial.pmf( x, n, p )"
base.dists.binomial.pmf.factory,"base.dists.binomial.pmf.factory( n, p )"
base.dists.binomial.quantile,"base.dists.binomial.quantile( r, n, p )"
base.dists.binomial.quantile.factory,"base.dists.binomial.quantile.factory( n, p )"
base.dists.binomial.skewness,"base.dists.binomial.skewness( n, p )"
base.dists.binomial.stdev,"base.dists.binomial.stdev( n, p )"
base.dists.binomial.variance,"base.dists.binomial.variance( n, p )"
base.dists.cauchy.Cauchy,"base.dists.cauchy.Cauchy( [x0, Ɣ] )"
base.dists.cauchy.cdf,"base.dists.cauchy.cdf( x, x0, Ɣ )"
base.dists.cauchy.cdf.factory,"base.dists.cauchy.cdf.factory( x0, Ɣ )"
base.dists.cauchy.entropy,"base.dists.cauchy.entropy( x0, Ɣ )"
base.dists.cauchy.logcdf,"base.dists.cauchy.logcdf( x, x0, Ɣ )"
base.dists.cauchy.logcdf.factory,"base.dists.cauchy.logcdf.factory( x0, Ɣ )"
base.dists.cauchy.logpdf,"base.dists.cauchy.logpdf( x, x0, Ɣ )"
base.dists.cauchy.logpdf.factory,"base.dists.cauchy.logpdf.factory( x0, Ɣ )"
base.dists.cauchy.median,"base.dists.cauchy.median( x0, Ɣ )"
base.dists.cauchy.mode,"base.dists.cauchy.mode( x0, Ɣ )"
base.dists.cauchy.pdf,"base.dists.cauchy.pdf( x, x0, Ɣ )"
base.dists.cauchy.pdf.factory,"base.dists.cauchy.pdf.factory( x0, Ɣ )"
base.dists.cauchy.quantile,"base.dists.cauchy.quantile( p, x0, Ɣ )"
base.dists.cauchy.quantile.factory,"base.dists.cauchy.quantile.factory( x0, Ɣ )"
base.dists.chi.cdf,"base.dists.chi.cdf( x, k )"
base.dists.chi.cdf.factory,"base.dists.chi.cdf.factory( k )"
base.dists.chi.Chi,"base.dists.chi.Chi( [k] )"
base.dists.chi.entropy,"base.dists.chi.entropy( k )"
base.dists.chi.kurtosis,"base.dists.chi.kurtosis( k )"
base.dists.chi.logpdf,"base.dists.chi.logpdf( x, k )"
base.dists.chi.logpdf.factory,"base.dists.chi.logpdf.factory( k )"
base.dists.chi.mean,"base.dists.chi.mean( k )"
base.dists.chi.mode,"base.dists.chi.mode( k )"
base.dists.chi.pdf,"base.dists.chi.pdf( x, k )"
base.dists.chi.pdf.factory,"base.dists.chi.pdf.factory( k )"
base.dists.chi.quantile,"base.dists.chi.quantile( p, k )"
base.dists.chi.quantile.factory,"base.dists.chi.quantile.factory( k )"
base.dists.chi.skewness,"base.dists.chi.skewness( k )"
base.dists.chi.stdev,"base.dists.chi.stdev( k )"
base.dists.chi.variance,"base.dists.chi.variance( k )"
base.dists.chisquare.cdf,"base.dists.chisquare.cdf( x, k )"
base.dists.chisquare.cdf.factory,"base.dists.chisquare.cdf.factory( k )"
base.dists.chisquare.ChiSquare,"base.dists.chisquare.ChiSquare( [k] )"
base.dists.chisquare.entropy,"base.dists.chisquare.entropy( k )"
base.dists.chisquare.kurtosis,"base.dists.chisquare.kurtosis( k )"
base.dists.chisquare.logpdf,"base.dists.chisquare.logpdf( x, k )"
base.dists.chisquare.logpdf.factory,"base.dists.chisquare.logpdf.factory( k )"
base.dists.chisquare.mean,"base.dists.chisquare.mean( k )"
base.dists.chisquare.median,"base.dists.chisquare.median( k )"
base.dists.chisquare.mgf,"base.dists.chisquare.mgf( t, k )"
base.dists.chisquare.mgf.factory,"base.dists.chisquare.mgf.factory( k )"
base.dists.chisquare.mode,"base.dists.chisquare.mode( k )"
base.dists.chisquare.pdf,"base.dists.chisquare.pdf( x, k )"
base.dists.chisquare.pdf.factory,"base.dists.chisquare.pdf.factory( k )"
base.dists.chisquare.quantile,"base.dists.chisquare.quantile( p, k )"
base.dists.chisquare.quantile.factory,"base.dists.chisquare.quantile.factory( k )"
base.dists.chisquare.skewness,"base.dists.chisquare.skewness( k )"
base.dists.chisquare.stdev,"base.dists.chisquare.stdev( k )"
base.dists.chisquare.variance,"base.dists.chisquare.variance( k )"
base.dists.cosine.cdf,"base.dists.cosine.cdf( x, μ, s )"
base.dists.cosine.cdf.factory,"base.dists.cosine.cdf.factory( μ, s )"
base.dists.cosine.Cosine,"base.dists.cosine.Cosine( [μ, s] )"
base.dists.cosine.kurtosis,"base.dists.cosine.kurtosis( μ, s )"
base.dists.cosine.logcdf,"base.dists.cosine.logcdf( x, μ, s )"
base.dists.cosine.logcdf.factory,"base.dists.cosine.logcdf.factory( μ, s )"
base.dists.cosine.logpdf,"base.dists.cosine.logpdf( x, μ, s )"
base.dists.cosine.logpdf.factory,"base.dists.cosine.logpdf.factory( μ, s )"
base.dists.cosine.mean,"base.dists.cosine.mean( μ, s )"
base.dists.cosine.median,"base.dists.cosine.median( μ, s )"
base.dists.cosine.mgf,"base.dists.cosine.mgf( t, μ, s )"
base.dists.cosine.mgf.factory,"base.dists.cosine.mgf.factory( μ, s )"
base.dists.cosine.mode,"base.dists.cosine.mode( μ, s )"
base.dists.cosine.pdf,"base.dists.cosine.pdf( x, μ, s )"
base.dists.cosine.pdf.factory,"base.dists.cosine.pdf.factory( μ, s )"
base.dists.cosine.quantile,"base.dists.cosine.quantile( p, μ, s )"
base.dists.cosine.quantile.factory,"base.dists.cosine.quantile.factory( μ, s )"
base.dists.cosine.skewness,"base.dists.cosine.skewness( μ, s )"
base.dists.cosine.stdev,"base.dists.cosine.stdev( μ, s )"
base.dists.cosine.variance,"base.dists.cosine.variance( μ, s )"
base.dists.degenerate.cdf,"base.dists.degenerate.cdf( x, μ )"
base.dists.degenerate.cdf.factory,"base.dists.degenerate.cdf.factory( μ )"
base.dists.degenerate.Degenerate,"base.dists.degenerate.Degenerate( [μ] )"
base.dists.degenerate.entropy,"base.dists.degenerate.entropy( μ )"
base.dists.degenerate.logcdf,"base.dists.degenerate.logcdf( x, μ )"
base.dists.degenerate.logcdf.factory,"base.dists.degenerate.logcdf.factory( μ )"
base.dists.degenerate.logpdf,"base.dists.degenerate.logpdf( x, μ )"
base.dists.degenerate.logpdf.factory,"base.dists.degenerate.logpdf.factory( μ )"
base.dists.degenerate.logpmf,"base.dists.degenerate.logpmf( x, μ )"
base.dists.degenerate.logpmf.factory,"base.dists.degenerate.logpmf.factory( μ )"
base.dists.degenerate.mean,"base.dists.degenerate.mean( μ )"
base.dists.degenerate.median,"base.dists.degenerate.median( μ )"
base.dists.degenerate.mgf,"base.dists.degenerate.mgf( x, μ )"
base.dists.degenerate.mgf.factory,"base.dists.degenerate.mgf.factory( μ )"
base.dists.degenerate.mode,"base.dists.degenerate.mode( μ )"
base.dists.degenerate.pdf,"base.dists.degenerate.pdf( x, μ )"
base.dists.degenerate.pdf.factory,"base.dists.degenerate.pdf.factory( μ )"
base.dists.degenerate.pmf,"base.dists.degenerate.pmf( x, μ )"
base.dists.degenerate.pmf.factory,"base.dists.degenerate.pmf.factory( μ )"
base.dists.degenerate.quantile,"base.dists.degenerate.quantile( p, μ )"
base.dists.degenerate.quantile.factory,"base.dists.degenerate.quantile.factory( μ )"
base.dists.degenerate.stdev,"base.dists.degenerate.stdev( μ )"
base.dists.degenerate.variance,"base.dists.degenerate.variance( μ )"
base.dists.discreteUniform.cdf,"base.dists.discreteUniform.cdf( x, a, b )"
base.dists.discreteUniform.cdf.factory,"base.dists.discreteUniform.cdf.factory( a, b )"
base.dists.discreteUniform.DiscreteUniform,"base.dists.discreteUniform.DiscreteUniform( [a, b] )"
base.dists.discreteUniform.entropy,"base.dists.discreteUniform.entropy( a, b )"
base.dists.discreteUniform.kurtosis,"base.dists.discreteUniform.kurtosis( a, b )"
base.dists.discreteUniform.logcdf,"base.dists.discreteUniform.logcdf( x, a, b )"
base.dists.discreteUniform.logcdf.factory,"base.dists.discreteUniform.logcdf.factory( a, b )"
base.dists.discreteUniform.logpmf,"base.dists.discreteUniform.logpmf( x, a, b )"
base.dists.discreteUniform.logpmf.factory,"base.dists.discreteUniform.logpmf.factory( a, b )"
base.dists.discreteUniform.mean,"base.dists.discreteUniform.mean( a, b )"
base.dists.discreteUniform.median,"base.dists.discreteUniform.median( a, b )"
base.dists.discreteUniform.mgf,"base.dists.discreteUniform.mgf( t, a, b )"
base.dists.discreteUniform.mgf.factory,"base.dists.discreteUniform.mgf.factory( a, b )"
base.dists.discreteUniform.pmf,"base.dists.discreteUniform.pmf( x, a, b )"
base.dists.discreteUniform.pmf.factory,"base.dists.discreteUniform.pmf.factory( a, b )"
base.dists.discreteUniform.quantile,"base.dists.discreteUniform.quantile( p, a, b )"
base.dists.discreteUniform.quantile.factory,"base.dists.discreteUniform.quantile.factory( a, b )"
base.dists.discreteUniform.skewness,"base.dists.discreteUniform.skewness( a, b )"
base.dists.discreteUniform.stdev,"base.dists.discreteUniform.stdev( a, b )"
base.dists.discreteUniform.variance,"base.dists.discreteUniform.variance( a, b )"
base.dists.erlang.cdf,"base.dists.erlang.cdf( x, k, λ )"
base.dists.erlang.cdf.factory,"base.dists.erlang.cdf.factory( k, λ )"
base.dists.erlang.entropy,"base.dists.erlang.entropy( k, λ )"
base.dists.erlang.Erlang,"base.dists.erlang.Erlang( [k, λ] )"
base.dists.erlang.kurtosis,"base.dists.erlang.kurtosis( k, λ )"
base.dists.erlang.logpdf,"base.dists.erlang.logpdf( x, k, λ )"
base.dists.erlang.logpdf.factory,"base.dists.erlang.logpdf.factory( k, λ )"
base.dists.erlang.mean,"base.dists.erlang.mean( k, λ )"
base.dists.erlang.mgf,"base.dists.erlang.mgf( t, k, λ )"
base.dists.erlang.mgf.factory,"base.dists.erlang.mgf.factory( k, λ )"
base.dists.erlang.mode,"base.dists.erlang.mode( k, λ )"
base.dists.erlang.pdf,"base.dists.erlang.pdf( x, k, λ )"
base.dists.erlang.pdf.factory,"base.dists.erlang.pdf.factory( k, λ )"
base.dists.erlang.quantile,"base.dists.erlang.quantile( p, k, λ )"
base.dists.erlang.quantile.factory,"base.dists.erlang.quantile.factory( k, λ )"
base.dists.erlang.skewness,"base.dists.erlang.skewness( k, λ )"
base.dists.erlang.stdev,"base.dists.erlang.stdev( k, λ )"
base.dists.erlang.variance,"base.dists.erlang.variance( k, λ )"
base.dists.exponential.cdf,"base.dists.exponential.cdf( x, λ )"
base.dists.exponential.cdf.factory,"base.dists.exponential.cdf.factory( λ )"
base.dists.exponential.entropy,"base.dists.exponential.entropy( λ )"
base.dists.exponential.Exponential,"base.dists.exponential.Exponential( [λ] )"
base.dists.exponential.kurtosis,"base.dists.exponential.kurtosis( λ )"
base.dists.exponential.logcdf,"base.dists.exponential.logcdf( x, λ )"
base.dists.exponential.logcdf.factory,"base.dists.exponential.logcdf.factory( λ )"
base.dists.exponential.logpdf,"base.dists.exponential.logpdf( x, λ )"
base.dists.exponential.logpdf.factory,"base.dists.exponential.logpdf.factory( λ )"
base.dists.exponential.mean,"base.dists.exponential.mean( λ )"
base.dists.exponential.median,"base.dists.exponential.median( λ )"
base.dists.exponential.mgf,"base.dists.exponential.mgf( t, λ )"
base.dists.exponential.mgf.factory,"base.dists.exponential.mgf.factory( λ )"
base.dists.exponential.mode,"base.dists.exponential.mode( λ )"
base.dists.exponential.pdf,"base.dists.exponential.pdf( x, λ )"
base.dists.exponential.pdf.factory,"base.dists.exponential.pdf.factory( λ )"
base.dists.exponential.quantile,"base.dists.exponential.quantile( p, λ )"
base.dists.exponential.quantile.factory,"base.dists.exponential.quantile.factory( λ )"
base.dists.exponential.skewness,"base.dists.exponential.skewness( λ )"
base.dists.exponential.stdev,"base.dists.exponential.stdev( λ )"
base.dists.exponential.variance,"base.dists.exponential.variance( λ )"
base.dists.f.cdf,"base.dists.f.cdf( x, d1, d2 )"
base.dists.f.cdf.factory,"base.dists.f.cdf.factory( d1, d2 )"
base.dists.f.entropy,"base.dists.f.entropy( d1, d2 )"
base.dists.f.F,"base.dists.f.F( [d1, d2] )"
base.dists.f.kurtosis,"base.dists.f.kurtosis( d1, d2 )"
base.dists.f.mean,"base.dists.f.mean( d1, d2 )"
base.dists.f.mode,"base.dists.f.mode( d1, d2 )"
base.dists.f.pdf,"base.dists.f.pdf( x, d1, d2 )"
base.dists.f.pdf.factory,"base.dists.f.pdf.factory( d1, d2 )"
base.dists.f.quantile,"base.dists.f.quantile( p, d1, d2 )"
base.dists.f.quantile.factory,"base.dists.f.quantile.factory( d1, d2 )"
base.dists.f.skewness,"base.dists.f.skewness( d1, d2 )"
base.dists.f.stdev,"base.dists.f.stdev( d1, d2 )"
base.dists.f.variance,"base.dists.f.variance( d1, d2 )"
base.dists.frechet.cdf,"base.dists.frechet.cdf( x, α, s, m )"
base.dists.frechet.cdf.factory,"base.dists.frechet.cdf.factory( α, s, m )"
base.dists.frechet.entropy,"base.dists.frechet.entropy( α, s, m )"
base.dists.frechet.Frechet,"base.dists.frechet.Frechet( [α, s, m] )"
base.dists.frechet.kurtosis,"base.dists.frechet.kurtosis( α, s, m )"
base.dists.frechet.logcdf,"base.dists.frechet.logcdf( x, α, s, m )"
base.dists.frechet.logcdf.factory,"base.dists.frechet.logcdf.factory( α, s, m )"
base.dists.frechet.logpdf,"base.dists.frechet.logpdf( x, α, s, m )"
base.dists.frechet.logpdf.factory,"base.dists.frechet.logpdf.factory( α, s, m )"
base.dists.frechet.mean,"base.dists.frechet.mean( α, s, m )"
base.dists.frechet.median,"base.dists.frechet.median( α, s, m )"
base.dists.frechet.mode,"base.dists.frechet.mode( α, s, m )"
base.dists.frechet.pdf,"base.dists.frechet.pdf( x, α, s, m )"
base.dists.frechet.pdf.factory,"base.dists.frechet.pdf.factory( α, s, m )"
base.dists.frechet.quantile,"base.dists.frechet.quantile( p, α, s, m )"
base.dists.frechet.quantile.factory,"base.dists.frechet.quantile.factory( α, s, m )"
base.dists.frechet.skewness,"base.dists.frechet.skewness( α, s, m )"
base.dists.frechet.stdev,"base.dists.frechet.stdev( α, s, m )"
base.dists.frechet.variance,"base.dists.frechet.variance( α, s, m )"
base.dists.gamma.cdf,"base.dists.gamma.cdf( x, α, β )"
base.dists.gamma.cdf.factory,"base.dists.gamma.cdf.factory( α, β )"
base.dists.gamma.entropy,"base.dists.gamma.entropy( α, β )"
base.dists.gamma.Gamma,"base.dists.gamma.Gamma( [α, β] )"
base.dists.gamma.kurtosis,"base.dists.gamma.kurtosis( α, β )"
base.dists.gamma.logcdf,"base.dists.gamma.logcdf( x, α, β )"
base.dists.gamma.logcdf.factory,"base.dists.gamma.logcdf.factory( α, β )"
base.dists.gamma.logpdf,"base.dists.gamma.logpdf( x, α, β )"
base.dists.gamma.logpdf.factory,"base.dists.gamma.logpdf.factory( α, β )"
base.dists.gamma.mean,"base.dists.gamma.mean( α, β )"
base.dists.gamma.mgf,"base.dists.gamma.mgf( t, α, β )"
base.dists.gamma.mgf.factory,"base.dists.gamma.mgf.factory( α, β )"
base.dists.gamma.mode,"base.dists.gamma.mode( α, β )"
base.dists.gamma.pdf,"base.dists.gamma.pdf( x, α, β )"
base.dists.gamma.pdf.factory,"base.dists.gamma.pdf.factory( α, β )"
base.dists.gamma.quantile,"base.dists.gamma.quantile( p, α, β )"
base.dists.gamma.quantile.factory,"base.dists.gamma.quantile.factory( α, β )"
base.dists.gamma.skewness,"base.dists.gamma.skewness( α, β )"
base.dists.gamma.stdev,"base.dists.gamma.stdev( α, β )"
base.dists.gamma.variance,"base.dists.gamma.variance( α, β )"
base.dists.geometric.cdf,"base.dists.geometric.cdf( x, p )"
base.dists.geometric.cdf.factory,"base.dists.geometric.cdf.factory( p )"
base.dists.geometric.entropy,"base.dists.geometric.entropy( p )"
base.dists.geometric.Geometric,"base.dists.geometric.Geometric( [p] )"
base.dists.geometric.kurtosis,"base.dists.geometric.kurtosis( p )"
base.dists.geometric.logcdf,"base.dists.geometric.logcdf( x, p )"
base.dists.geometric.logcdf.factory,"base.dists.geometric.logcdf.factory( p )"
base.dists.geometric.logpmf,"base.dists.geometric.logpmf( x, p )"
base.dists.geometric.logpmf.factory,"base.dists.geometric.logpmf.factory( p )"
base.dists.geometric.mean,"base.dists.geometric.mean( p )"
base.dists.geometric.median,"base.dists.geometric.median( p )"
base.dists.geometric.mgf,"base.dists.geometric.mgf( t, p )"
base.dists.geometric.mgf.factory,"base.dists.geometric.mgf.factory( p )"
base.dists.geometric.mode,"base.dists.geometric.mode( p )"
base.dists.geometric.pmf,"base.dists.geometric.pmf( x, p )"
base.dists.geometric.pmf.factory,"base.dists.geometric.pmf.factory( p )"
base.dists.geometric.quantile,"base.dists.geometric.quantile( r, p )"
base.dists.geometric.quantile.factory,"base.dists.geometric.quantile.factory( p )"
base.dists.geometric.skewness,"base.dists.geometric.skewness( p )"
base.dists.geometric.stdev,"base.dists.geometric.stdev( p )"
base.dists.geometric.variance,"base.dists.geometric.variance( p )"
base.dists.gumbel.cdf,"base.dists.gumbel.cdf( x, μ, β )"
base.dists.gumbel.cdf.factory,"base.dists.gumbel.cdf.factory( μ, β )"
base.dists.gumbel.entropy,"base.dists.gumbel.entropy( μ, β )"
base.dists.gumbel.Gumbel,"base.dists.gumbel.Gumbel( [μ, β] )"
base.dists.gumbel.kurtosis,"base.dists.gumbel.kurtosis( μ, β )"
base.dists.gumbel.logcdf,"base.dists.gumbel.logcdf( x, μ, β )"
base.dists.gumbel.logcdf.factory,"base.dists.gumbel.logcdf.factory( μ, β )"
base.dists.gumbel.logpdf,"base.dists.gumbel.logpdf( x, μ, β )"
base.dists.gumbel.logpdf.factory,"base.dists.gumbel.logpdf.factory( μ, β )"
base.dists.gumbel.mean,"base.dists.gumbel.mean( μ, β )"
base.dists.gumbel.median,"base.dists.gumbel.median( μ, β )"
base.dists.gumbel.mgf,"base.dists.gumbel.mgf( t, μ, β )"
base.dists.gumbel.mgf.factory,"base.dists.gumbel.mgf.factory( μ, β )"
base.dists.gumbel.mode,"base.dists.gumbel.mode( μ, β )"
base.dists.gumbel.pdf,"base.dists.gumbel.pdf( x, μ, β )"
base.dists.gumbel.pdf.factory,"base.dists.gumbel.pdf.factory( μ, β )"
base.dists.gumbel.quantile,"base.dists.gumbel.quantile( p, μ, β )"
base.dists.gumbel.quantile.factory,"base.dists.gumbel.quantile.factory( μ, β )"
base.dists.gumbel.skewness,"base.dists.gumbel.skewness( μ, β )"
base.dists.gumbel.stdev,"base.dists.gumbel.stdev( μ, β )"
base.dists.gumbel.variance,"base.dists.gumbel.variance( μ, β )"
base.dists.hypergeometric.cdf,"base.dists.hypergeometric.cdf( x, N, K, n )"
base.dists.hypergeometric.cdf.factory,"base.dists.hypergeometric.cdf.factory( N, K, n )"
base.dists.hypergeometric.Hypergeometric,"base.dists.hypergeometric.Hypergeometric( [N, K, n] )"
base.dists.hypergeometric.kurtosis,"base.dists.hypergeometric.kurtosis( N, K, n )"
base.dists.hypergeometric.logpmf,"base.dists.hypergeometric.logpmf( x, N, K, n )"
base.dists.hypergeometric.logpmf.factory,"base.dists.hypergeometric.logpmf.factory( N, K, n )"
base.dists.hypergeometric.mean,"base.dists.hypergeometric.mean( N, K, n )"
base.dists.hypergeometric.mode,"base.dists.hypergeometric.mode( N, K, n )"
base.dists.hypergeometric.pmf,"base.dists.hypergeometric.pmf( x, N, K, n )"
base.dists.hypergeometric.pmf.factory,"base.dists.hypergeometric.pmf.factory( N, K, n )"
base.dists.hypergeometric.quantile,"base.dists.hypergeometric.quantile( p, N, K, n )"
base.dists.hypergeometric.quantile.factory,"base.dists.hypergeometric.quantile.factory( N, K, n )"
base.dists.hypergeometric.skewness,"base.dists.hypergeometric.skewness( N, K, n )"
base.dists.hypergeometric.stdev,"base.dists.hypergeometric.stdev( N, K, n )"
base.dists.hypergeometric.variance,"base.dists.hypergeometric.variance( N, K, n )"
base.dists.invgamma.cdf,"base.dists.invgamma.cdf( x, α, β )"
base.dists.invgamma.cdf.factory,"base.dists.invgamma.cdf.factory( α, β )"
base.dists.invgamma.entropy,"base.dists.invgamma.entropy( α, β )"
base.dists.invgamma.InvGamma,"base.dists.invgamma.InvGamma( [α, β] )"
base.dists.invgamma.kurtosis,"base.dists.invgamma.kurtosis( α, β )"
base.dists.invgamma.logpdf,"base.dists.invgamma.logpdf( x, α, β )"
base.dists.invgamma.logpdf.factory,"base.dists.invgamma.logpdf.factory( α, β )"
base.dists.invgamma.mean,"base.dists.invgamma.mean( α, β )"
base.dists.invgamma.mode,"base.dists.invgamma.mode( α, β )"
base.dists.invgamma.pdf,"base.dists.invgamma.pdf( x, α, β )"
base.dists.invgamma.pdf.factory,"base.dists.invgamma.pdf.factory( α, β )"
base.dists.invgamma.quantile,"base.dists.invgamma.quantile( p, α, β )"
base.dists.invgamma.quantile.factory,"base.dists.invgamma.quantile.factory( α, β )"
base.dists.invgamma.skewness,"base.dists.invgamma.skewness( α, β )"
base.dists.invgamma.stdev,"base.dists.invgamma.stdev( α, β )"
base.dists.invgamma.variance,"base.dists.invgamma.variance( α, β )"
base.dists.kumaraswamy.cdf,"base.dists.kumaraswamy.cdf( x, a, b )"
base.dists.kumaraswamy.cdf.factory,"base.dists.kumaraswamy.cdf.factory( a, b )"
base.dists.kumaraswamy.Kumaraswamy,"base.dists.kumaraswamy.Kumaraswamy( [a, b] )"
base.dists.kumaraswamy.kurtosis,"base.dists.kumaraswamy.kurtosis( a, b )"
base.dists.kumaraswamy.logcdf,"base.dists.kumaraswamy.logcdf( x, a, b )"
base.dists.kumaraswamy.logcdf.factory,"base.dists.kumaraswamy.logcdf.factory( a, b )"
base.dists.kumaraswamy.logpdf,"base.dists.kumaraswamy.logpdf( x, a, b )"
base.dists.kumaraswamy.logpdf.factory,"base.dists.kumaraswamy.logpdf.factory( a, b )"
base.dists.kumaraswamy.mean,"base.dists.kumaraswamy.mean( a, b )"
base.dists.kumaraswamy.median,"base.dists.kumaraswamy.median( a, b )"
base.dists.kumaraswamy.mode,"base.dists.kumaraswamy.mode( a, b )"
base.dists.kumaraswamy.pdf,"base.dists.kumaraswamy.pdf( x, a, b )"
base.dists.kumaraswamy.pdf.factory,"base.dists.kumaraswamy.pdf.factory( a, b )"
base.dists.kumaraswamy.quantile,"base.dists.kumaraswamy.quantile( p, a, b )"
base.dists.kumaraswamy.quantile.factory,"base.dists.kumaraswamy.quantile.factory( a, b )"
base.dists.kumaraswamy.skewness,"base.dists.kumaraswamy.skewness( a, b )"
base.dists.kumaraswamy.stdev,"base.dists.kumaraswamy.stdev( a, b )"
base.dists.kumaraswamy.variance,"base.dists.kumaraswamy.variance( a, b )"
base.dists.laplace.cdf,"base.dists.laplace.cdf( x, μ, b )"
base.dists.laplace.cdf.factory,"base.dists.laplace.cdf.factory( μ, b )"
base.dists.laplace.entropy,"base.dists.laplace.entropy( μ, b )"
base.dists.laplace.kurtosis,"base.dists.laplace.kurtosis( μ, b )"
base.dists.laplace.Laplace,"base.dists.laplace.Laplace( [μ, b] )"
base.dists.laplace.logcdf,"base.dists.laplace.logcdf( x, μ, b )"
base.dists.laplace.logcdf.factory,"base.dists.laplace.logcdf.factory( μ, b )"
base.dists.laplace.logpdf,"base.dists.laplace.logpdf( x, μ, b )"
base.dists.laplace.logpdf.factory,"base.dists.laplace.logpdf.factory( μ, b )"
base.dists.laplace.mean,"base.dists.laplace.mean( μ, b )"
base.dists.laplace.median,"base.dists.laplace.median( μ, b )"
base.dists.laplace.mgf,"base.dists.laplace.mgf( t, μ, b )"
base.dists.laplace.mgf.factory,"base.dists.laplace.mgf.factory( μ, b )"
base.dists.laplace.mode,"base.dists.laplace.mode( μ, b )"
base.dists.laplace.pdf,"base.dists.laplace.pdf( x, μ, b )"
base.dists.laplace.pdf.factory,"base.dists.laplace.pdf.factory( μ, b )"
base.dists.laplace.quantile,"base.dists.laplace.quantile( p, μ, b )"
base.dists.laplace.quantile.factory,"base.dists.laplace.quantile.factory( μ, b )"
base.dists.laplace.skewness,"base.dists.laplace.skewness( μ, b )"
base.dists.laplace.stdev,"base.dists.laplace.stdev( μ, b )"
base.dists.laplace.variance,"base.dists.laplace.variance( μ, b )"
base.dists.levy.cdf,"base.dists.levy.cdf( x, μ, c )"
base.dists.levy.cdf.factory,"base.dists.levy.cdf.factory( μ, c )"
base.dists.levy.entropy,"base.dists.levy.entropy( μ, c )"
base.dists.levy.Levy,"base.dists.levy.Levy( [μ, c] )"
base.dists.levy.logcdf,"base.dists.levy.logcdf( x, μ, c )"
base.dists.levy.logcdf.factory,"base.dists.levy.logcdf.factory( μ, c )"
base.dists.levy.logpdf,"base.dists.levy.logpdf( x, μ, c )"
base.dists.levy.logpdf.factory,"base.dists.levy.logpdf.factory( μ, c )"
base.dists.levy.mean,"base.dists.levy.mean( μ, c )"
base.dists.levy.median,"base.dists.levy.median( μ, c )"
base.dists.levy.mode,"base.dists.levy.mode( μ, c )"
base.dists.levy.pdf,"base.dists.levy.pdf( x, μ, c )"
base.dists.levy.pdf.factory,"base.dists.levy.pdf.factory( μ, c )"
base.dists.levy.quantile,"base.dists.levy.quantile( p, μ, c )"
base.dists.levy.quantile.factory,"base.dists.levy.quantile.factory( μ, c )"
base.dists.levy.stdev,"base.dists.levy.stdev( μ, c )"
base.dists.levy.variance,"base.dists.levy.variance( μ, c )"
base.dists.logistic.cdf,"base.dists.logistic.cdf( x, μ, s )"
base.dists.logistic.cdf.factory,"base.dists.logistic.cdf.factory( μ, s )"
base.dists.logistic.entropy,"base.dists.logistic.entropy( μ, s )"
base.dists.logistic.kurtosis,"base.dists.logistic.kurtosis( μ, s )"
base.dists.logistic.logcdf,"base.dists.logistic.logcdf( x, μ, s )"
base.dists.logistic.logcdf.factory,"base.dists.logistic.logcdf.factory( μ, s )"
base.dists.logistic.Logistic,"base.dists.logistic.Logistic( [μ, s] )"
base.dists.logistic.logpdf,"base.dists.logistic.logpdf( x, μ, s )"
base.dists.logistic.logpdf.factory,"base.dists.logistic.logpdf.factory( μ, s )"
base.dists.logistic.mean,"base.dists.logistic.mean( μ, s )"
base.dists.logistic.median,"base.dists.logistic.median( μ, s )"
base.dists.logistic.mgf,"base.dists.logistic.mgf( t, μ, s )"
base.dists.logistic.mgf.factory,"base.dists.logistic.mgf.factory( μ, s )"
base.dists.logistic.mode,"base.dists.logistic.mode( μ, s )"
base.dists.logistic.pdf,"base.dists.logistic.pdf( x, μ, s )"
base.dists.logistic.pdf.factory,"base.dists.logistic.pdf.factory( μ, s )"
base.dists.logistic.quantile,"base.dists.logistic.quantile( p, μ, s )"
base.dists.logistic.quantile.factory,"base.dists.logistic.quantile.factory( μ, s )"
base.dists.logistic.skewness,"base.dists.logistic.skewness( μ, s )"
base.dists.logistic.stdev,"base.dists.logistic.stdev( μ, s )"
base.dists.logistic.variance,"base.dists.logistic.variance( μ, s )"
base.dists.lognormal.cdf,"base.dists.lognormal.cdf( x, μ, σ )"
base.dists.lognormal.cdf.factory,"base.dists.lognormal.cdf.factory( μ, σ )"
base.dists.lognormal.entropy,"base.dists.lognormal.entropy( μ, σ )"
base.dists.lognormal.kurtosis,"base.dists.lognormal.kurtosis( μ, σ )"
base.dists.lognormal.LogNormal,"base.dists.lognormal.LogNormal( [μ, σ] )"
base.dists.lognormal.logcdf,"base.dists.lognormal.logcdf( x, μ, σ )"
base.dists.lognormal.logcdf.factory,"base.dists.lognormal.logcdf.factory( μ, σ )"
base.dists.lognormal.logpdf,"base.dists.lognormal.logpdf( x, μ, σ )"
base.dists.lognormal.logpdf.factory,"base.dists.lognormal.logpdf.factory( μ, σ )"
base.dists.lognormal.mean,"base.dists.lognormal.mean( μ, σ )"
base.dists.lognormal.median,"base.dists.lognormal.median( μ, σ )"
base.dists.lognormal.mode,"base.dists.lognormal.mode( μ, σ )"
base.dists.lognormal.pdf,"base.dists.lognormal.pdf( x, μ, σ )"
base.dists.lognormal.pdf.factory,"base.dists.lognormal.pdf.factory( μ, σ )"
base.dists.lognormal.quantile,"base.dists.lognormal.quantile( p, μ, σ )"
base.dists.lognormal.quantile.factory,"base.dists.lognormal.quantile.factory( μ, σ )"
base.dists.lognormal.skewness,"base.dists.lognormal.skewness( μ, σ )"
base.dists.lognormal.stdev,"base.dists.lognormal.stdev( μ, σ )"
base.dists.lognormal.variance,"base.dists.lognormal.variance( μ, σ )"
base.dists.negativeBinomial.cdf,"base.dists.negativeBinomial.cdf( x, r, p )"
base.dists.negativeBinomial.cdf.factory,"base.dists.negativeBinomial.cdf.factory( r, p )"
base.dists.negativeBinomial.kurtosis,"base.dists.negativeBinomial.kurtosis( r, p )"
base.dists.negativeBinomial.logpmf,"base.dists.negativeBinomial.logpmf( x, r, p )"
base.dists.negativeBinomial.logpmf.factory,"base.dists.negativeBinomial.logpmf.factory( r, p )"
base.dists.negativeBinomial.mean,"base.dists.negativeBinomial.mean( r, p )"
base.dists.negativeBinomial.mgf,"base.dists.negativeBinomial.mgf( x, r, p )"
base.dists.negativeBinomial.mgf.factory,"base.dists.negativeBinomial.mgf.factory( r, p )"
base.dists.negativeBinomial.mode,"base.dists.negativeBinomial.mode( r, p )"
base.dists.negativeBinomial.NegativeBinomial,"base.dists.negativeBinomial.NegativeBinomial( [r, p] )"
base.dists.negativeBinomial.pmf,"base.dists.negativeBinomial.pmf( x, r, p )"
base.dists.negativeBinomial.pmf.factory,"base.dists.negativeBinomial.pmf.factory( r, p )"
base.dists.negativeBinomial.quantile,"base.dists.negativeBinomial.quantile( k, r, p )"
base.dists.negativeBinomial.quantile.factory,"base.dists.negativeBinomial.quantile.factory( r, p )"
base.dists.negativeBinomial.skewness,"base.dists.negativeBinomial.skewness( r, p )"
base.dists.negativeBinomial.stdev,"base.dists.negativeBinomial.stdev( r, p )"
base.dists.negativeBinomial.variance,"base.dists.negativeBinomial.variance( r, p )"
base.dists.normal.cdf,"base.dists.normal.cdf( x, μ, σ )"
base.dists.normal.cdf.factory,"base.dists.normal.cdf.factory( μ, σ )"
base.dists.normal.entropy,"base.dists.normal.entropy( μ, σ )"
base.dists.normal.kurtosis,"base.dists.normal.kurtosis( μ, σ )"
base.dists.normal.logcdf,"base.dists.normal.logcdf( x, μ, σ )"
base.dists.normal.logcdf.factory,"base.dists.normal.logcdf.factory( μ, σ )"
base.dists.normal.logpdf,"base.dists.normal.logpdf( x, μ, σ )"
base.dists.normal.logpdf.factory,"base.dists.normal.logpdf.factory( μ, σ )"
base.dists.normal.mean,"base.dists.normal.mean( μ, σ )"
base.dists.normal.median,"base.dists.normal.median( μ, σ )"
base.dists.normal.mgf,"base.dists.normal.mgf( x, μ, σ )"
base.dists.normal.mgf.factory,"base.dists.normal.mgf.factory( μ, σ )"
base.dists.normal.mode,"base.dists.normal.mode( μ, σ )"
base.dists.normal.Normal,"base.dists.normal.Normal( [μ, σ] )"
base.dists.normal.pdf,"base.dists.normal.pdf( x, μ, σ )"
base.dists.normal.pdf.factory,"base.dists.normal.pdf.factory( μ, σ )"
base.dists.normal.quantile,"base.dists.normal.quantile( p, μ, σ )"
base.dists.normal.quantile.factory,"base.dists.normal.quantile.factory( μ, σ )"
base.dists.normal.skewness,"base.dists.normal.skewness( μ, σ )"
base.dists.normal.stdev,"base.dists.normal.stdev( μ, σ )"
base.dists.normal.variance,"base.dists.normal.variance( μ, σ )"
base.dists.pareto1.cdf,"base.dists.pareto1.cdf( x, α, β )"
base.dists.pareto1.cdf.factory,"base.dists.pareto1.cdf.factory( α, β )"
base.dists.pareto1.entropy,"base.dists.pareto1.entropy( α, β )"
base.dists.pareto1.kurtosis,"base.dists.pareto1.kurtosis( α, β )"
base.dists.pareto1.logcdf,"base.dists.pareto1.logcdf( x, α, β )"
base.dists.pareto1.logcdf.factory,"base.dists.pareto1.logcdf.factory( α, β )"
base.dists.pareto1.logpdf,"base.dists.pareto1.logpdf( x, α, β )"
base.dists.pareto1.logpdf.factory,"base.dists.pareto1.logpdf.factory( α, β )"
base.dists.pareto1.mean,"base.dists.pareto1.mean( α, β )"
base.dists.pareto1.median,"base.dists.pareto1.median( α, β )"
base.dists.pareto1.mode,"base.dists.pareto1.mode( α, β )"
base.dists.pareto1.Pareto1,"base.dists.pareto1.Pareto1( [α, β] )"
base.dists.pareto1.pdf,"base.dists.pareto1.pdf( x, α, β )"
base.dists.pareto1.pdf.factory,"base.dists.pareto1.pdf.factory( α, β )"
base.dists.pareto1.quantile,"base.dists.pareto1.quantile( p, α, β )"
base.dists.pareto1.quantile.factory,"base.dists.pareto1.quantile.factory( α, β )"
base.dists.pareto1.skewness,"base.dists.pareto1.skewness( α, β )"
base.dists.pareto1.stdev,"base.dists.pareto1.stdev( α, β )"
base.dists.pareto1.variance,"base.dists.pareto1.variance( α, β )"
base.dists.poisson.cdf,"base.dists.poisson.cdf( x, λ )"
base.dists.poisson.cdf.factory,"base.dists.poisson.cdf.factory( λ )"
base.dists.poisson.entropy,"base.dists.poisson.entropy( λ )"
base.dists.poisson.kurtosis,"base.dists.poisson.kurtosis( λ )"
base.dists.poisson.logpmf,"base.dists.poisson.logpmf( x, λ )"
base.dists.poisson.logpmf.factory,"base.dists.poisson.logpmf.factory( λ )"
base.dists.poisson.mean,"base.dists.poisson.mean( λ )"
base.dists.poisson.median,"base.dists.poisson.median( λ )"
base.dists.poisson.mgf,"base.dists.poisson.mgf( x, λ )"
base.dists.poisson.mgf.factory,"base.dists.poisson.mgf.factory( λ )"
base.dists.poisson.mode,"base.dists.poisson.mode( λ )"
base.dists.poisson.pmf,"base.dists.poisson.pmf( x, λ )"
base.dists.poisson.pmf.factory,"base.dists.poisson.pmf.factory( λ )"
base.dists.poisson.Poisson,"base.dists.poisson.Poisson( [λ] )"
base.dists.poisson.quantile,"base.dists.poisson.quantile( p, λ )"
base.dists.poisson.quantile.factory,"base.dists.poisson.quantile.factory( λ )"
base.dists.poisson.skewness,"base.dists.poisson.skewness( λ )"
base.dists.poisson.stdev,"base.dists.poisson.stdev( λ )"
base.dists.poisson.variance,"base.dists.poisson.variance( λ )"
base.dists.rayleigh.cdf,"base.dists.rayleigh.cdf( x, sigma )"
base.dists.rayleigh.cdf.factory,"base.dists.rayleigh.cdf.factory( sigma )"
base.dists.rayleigh.entropy,"base.dists.rayleigh.entropy( σ )"
base.dists.rayleigh.kurtosis,"base.dists.rayleigh.kurtosis( σ )"
base.dists.rayleigh.logcdf,"base.dists.rayleigh.logcdf( x, sigma )"
base.dists.rayleigh.logcdf.factory,"base.dists.rayleigh.logcdf.factory( sigma )"
base.dists.rayleigh.logpdf,"base.dists.rayleigh.logpdf( x, sigma )"
base.dists.rayleigh.logpdf.factory,"base.dists.rayleigh.logpdf.factory( sigma )"
base.dists.rayleigh.mean,"base.dists.rayleigh.mean( σ )"
base.dists.rayleigh.median,"base.dists.rayleigh.median( σ )"
base.dists.rayleigh.mgf,"base.dists.rayleigh.mgf( t, sigma )"
base.dists.rayleigh.mgf.factory,"base.dists.rayleigh.mgf.factory( sigma )"
base.dists.rayleigh.mode,"base.dists.rayleigh.mode( σ )"
base.dists.rayleigh.pdf,"base.dists.rayleigh.pdf( x, sigma )"
base.dists.rayleigh.pdf.factory,"base.dists.rayleigh.pdf.factory( sigma )"
base.dists.rayleigh.quantile,"base.dists.rayleigh.quantile( p, sigma )"
base.dists.rayleigh.quantile.factory,"base.dists.rayleigh.quantile.factory( sigma )"
base.dists.rayleigh.Rayleigh,"base.dists.rayleigh.Rayleigh( [σ] )"
base.dists.rayleigh.skewness,"base.dists.rayleigh.skewness( σ )"
base.dists.rayleigh.stdev,"base.dists.rayleigh.stdev( σ )"
base.dists.rayleigh.variance,"base.dists.rayleigh.variance( σ )"
base.dists.signrank.cdf,"base.dists.signrank.cdf( x, n )"
base.dists.signrank.cdf.factory,"base.dists.signrank.cdf.factory( n )"
base.dists.signrank.pdf,"base.dists.signrank.pdf( x, n )"
base.dists.signrank.pdf.factory,"base.dists.signrank.pdf.factory( n )"
base.dists.signrank.quantile,"base.dists.signrank.quantile( p, n )"
base.dists.signrank.quantile.factory,"base.dists.signrank.quantile.factory( n )"
base.dists.studentizedRange.cdf,"base.dists.studentizedRange.cdf( x, r, v[, nranges] )"
base.dists.studentizedRange.cdf.factory,"base.dists.studentizedRange.cdf.factory( r, v[, nranges] )"
base.dists.studentizedRange.quantile,"base.dists.studentizedRange.quantile( p, r, v[, nranges] )"
base.dists.studentizedRange.quantile.factory,"base.dists.studentizedRange.quantile.factory( r, v[, nranges] )"
base.dists.t.cdf,"base.dists.t.cdf( x, v )"
base.dists.t.cdf.factory,"base.dists.t.cdf.factory( v )"
base.dists.t.entropy,"base.dists.t.entropy( v )"
base.dists.t.kurtosis,"base.dists.t.kurtosis( v )"
base.dists.t.logcdf,"base.dists.t.logcdf( x, v )"
base.dists.t.logcdf.factory,"base.dists.t.logcdf.factory( v )"
base.dists.t.logpdf,"base.dists.t.logpdf( x, v )"
base.dists.t.logpdf.factory,"base.dists.t.logpdf.factory( v )"
base.dists.t.mean,"base.dists.t.mean( v )"
base.dists.t.median,"base.dists.t.median( v )"
base.dists.t.mode,"base.dists.t.mode( v )"
base.dists.t.pdf,"base.dists.t.pdf( x, v )"
base.dists.t.pdf.factory,"base.dists.t.pdf.factory( v )"
base.dists.t.quantile,"base.dists.t.quantile( p, v )"
base.dists.t.quantile.factory,"base.dists.t.quantile.factory( v )"
base.dists.t.skewness,"base.dists.t.skewness( v )"
base.dists.t.stdev,"base.dists.t.stdev( v )"
base.dists.t.T,"base.dists.t.T( [v] )"
base.dists.t.variance,"base.dists.t.variance( v )"
base.dists.triangular.cdf,"base.dists.triangular.cdf( x, a, b, c )"
base.dists.triangular.cdf.factory,"base.dists.triangular.cdf.factory( a, b, c )"
base.dists.triangular.entropy,"base.dists.triangular.entropy( a, b, c )"
base.dists.triangular.kurtosis,"base.dists.triangular.kurtosis( a, b, c )"
base.dists.triangular.logcdf,"base.dists.triangular.logcdf( x, a, b, c )"
base.dists.triangular.logcdf.factory,"base.dists.triangular.logcdf.factory( a, b, c )"
base.dists.triangular.logpdf,"base.dists.triangular.logpdf( x, a, b, c )"
base.dists.triangular.logpdf.factory,"base.dists.triangular.logpdf.factory( a, b, c )"
base.dists.triangular.mean,"base.dists.triangular.mean( a, b, c )"
base.dists.triangular.median,"base.dists.triangular.median( a, b, c )"
base.dists.triangular.mgf,"base.dists.triangular.mgf( t, a, b, c )"
base.dists.triangular.mgf.factory,"base.dists.triangular.mgf.factory( a, b, c )"
base.dists.triangular.mode,"base.dists.triangular.mode( a, b, c )"
base.dists.triangular.pdf,"base.dists.triangular.pdf( x, a, b, c )"
base.dists.triangular.pdf.factory,"base.dists.triangular.pdf.factory( a, b, c )"
base.dists.triangular.quantile,"base.dists.triangular.quantile( p, a, b, c )"
base.dists.triangular.quantile.factory,"base.dists.triangular.quantile.factory( a, b, c )"
base.dists.triangular.skewness,"base.dists.triangular.skewness( a, b, c )"
base.dists.triangular.stdev,"base.dists.triangular.stdev( a, b, c )"
base.dists.triangular.Triangular,"base.dists.triangular.Triangular( [a, b, c] )"
base.dists.triangular.variance,"base.dists.triangular.variance( a, b, c )"
base.dists.uniform.cdf,"base.dists.uniform.cdf( x, a, b )"
base.dists.uniform.cdf.factory,"base.dists.uniform.cdf.factory( a, b )"
base.dists.uniform.entropy,"base.dists.uniform.entropy( a, b )"
base.dists.uniform.kurtosis,"base.dists.uniform.kurtosis( a, b )"
base.dists.uniform.logcdf,"base.dists.uniform.logcdf( x, a, b )"
base.dists.uniform.logcdf.factory,"base.dists.uniform.logcdf.factory( a, b )"
base.dists.uniform.logpdf,"base.dists.uniform.logpdf( x, a, b )"
base.dists.uniform.logpdf.factory,"base.dists.uniform.logpdf.factory( a, b )"
base.dists.uniform.mean,"base.dists.uniform.mean( a, b )"
base.dists.uniform.median,"base.dists.uniform.median( a, b )"
base.dists.uniform.mgf,"base.dists.uniform.mgf( t, a, b )"
base.dists.uniform.mgf.factory,"base.dists.uniform.mgf.factory( a, b )"
base.dists.uniform.pdf,"base.dists.uniform.pdf( x, a, b )"
base.dists.uniform.pdf.factory,"base.dists.uniform.pdf.factory( a, b )"
base.dists.uniform.quantile,"base.dists.uniform.quantile( p, a, b )"
base.dists.uniform.quantile.factory,"base.dists.uniform.quantile.factory( a, b )"
base.dists.uniform.skewness,"base.dists.uniform.skewness( a, b )"
base.dists.uniform.stdev,"base.dists.uniform.stdev( a, b )"
base.dists.uniform.Uniform,"base.dists.uniform.Uniform( [a, b] )"
base.dists.uniform.variance,"base.dists.uniform.variance( a, b )"
base.dists.weibull.cdf,"base.dists.weibull.cdf( x, k, λ )"
base.dists.weibull.cdf.factory,"base.dists.weibull.cdf.factory( k, λ )"
base.dists.weibull.entropy,"base.dists.weibull.entropy( k, λ )"
base.dists.weibull.kurtosis,"base.dists.weibull.kurtosis( k, λ )"
base.dists.weibull.logcdf,"base.dists.weibull.logcdf( x, k, λ )"
base.dists.weibull.logcdf.factory,"base.dists.weibull.logcdf.factory( k, λ)"
base.dists.weibull.logpdf,"base.dists.weibull.logpdf( x, k, λ )"
base.dists.weibull.logpdf.factory,"base.dists.weibull.logpdf.factory( k, λ )"
base.dists.weibull.mean,"base.dists.weibull.mean( k, λ )"
base.dists.weibull.median,"base.dists.weibull.median( k, λ )"
base.dists.weibull.mgf,"base.dists.weibull.mgf( x, k, λ )"
base.dists.weibull.mgf.factory,"base.dists.weibull.mgf.factory( k, λ )"
base.dists.weibull.mode,"base.dists.weibull.mode( k, λ )"
base.dists.weibull.pdf,"base.dists.weibull.pdf( x, k, λ )"
base.dists.weibull.pdf.factory,"base.dists.weibull.pdf.factory( k, λ )"
base.dists.weibull.quantile,"base.dists.weibull.quantile( p, k, λ )"
base.dists.weibull.quantile.factory,"base.dists.weibull.quantile.factory( k, λ )"
base.dists.weibull.skewness,"base.dists.weibull.skewness( k, λ )"
base.dists.weibull.stdev,"base.dists.weibull.stdev( k, λ )"
base.dists.weibull.variance,"base.dists.weibull.variance( k, λ )"
base.dists.weibull.Weibull,"base.dists.weibull.Weibull( [k, λ] )"
base.ellipe,"base.ellipe( m )"
base.ellipj,"base.ellipj( u, m )"
base.ellipj.assign,"base.ellipj.assign( u, m, out, stride, offset )"
base.ellipj.sn,"base.ellipj.sn( u, m )"
base.ellipj.cn,"base.ellipj.cn( u, m )"
base.ellipj.dn,"base.ellipj.dn( u, m )"
base.ellipj.am,"base.ellipj.am( u, m )"
base.ellipk,"base.ellipk( m )"
base.endsWith,"base.endsWith( str, search, len )"
base.epsdiff,"base.epsdiff( x, y[, scale] )"
base.erf,"base.erf( x )"
base.erfc,"base.erfc( x )"
base.erfcinv,"base.erfcinv( x )"
base.erfcx,"base.erfcx( x )"
base.erfinv,"base.erfinv( x )"
base.eta,"base.eta( s )"
base.evalpoly,"base.evalpoly( c, x )"
base.evalpoly.factory,"base.evalpoly.factory( c )"
base.evalrational,"base.evalrational( P, Q, x )"
base.evalrational.factory,"base.evalrational.factory( P, Q )"
base.exp,"base.exp( x )"
base.exp2,"base.exp2( x )"
base.exp10,"base.exp10( x )"
base.expit,"base.expit( x )"
base.expm1,"base.expm1( x )"
base.expm1rel,"base.expm1rel( x )"
base.exponent,"base.exponent( x )"
base.exponentf,"base.exponentf( x )"
base.factorial,"base.factorial( x )"
base.factorial2,"base.factorial2( n )"
base.factorialln,"base.factorialln( x )"
base.fallingFactorial,"base.fallingFactorial( x, n )"
base.fibonacci,"base.fibonacci( n )"
base.fibonacciIndex,"base.fibonacciIndex( F )"
base.fibpoly,"base.fibpoly( n, x )"
base.fibpoly.factory,"base.fibpoly.factory( n )"
base.firstCodePoint,"base.firstCodePoint( str, n )"
base.firstCodeUnit,"base.firstCodeUnit( str, n )"
base.firstGraphemeCluster,"base.firstGraphemeCluster( str, n )"
base.flipsign,"base.flipsign( x, y )"
base.flipsignf,"base.flipsignf( x, y )"
base.float32ToInt32,"base.float32ToInt32( x )"
base.float32ToUint32,"base.float32ToUint32( x )"
base.float64ToFloat32,"base.float64ToFloat32( x )"
base.float64ToInt32,"base.float64ToInt32( x )"
base.float64ToInt64Bytes,"base.float64ToInt64Bytes( x )"
base.float64ToInt64Bytes.assign,"base.float64ToInt64Bytes.assign( x, out, stride, offset )"
base.float64ToUint32,"base.float64ToUint32( x )"
base.floor,"base.floor( x )"
base.floor2,"base.floor2( x )"
base.floor10,"base.floor10( x )"
base.floorb,"base.floorb( x, n, b )"
base.floorf,"base.floorf( x )"
base.floorn,"base.floorn( x, n )"
base.floorsd,"base.floorsd( x, n[, b] )"
base.forEachChar,"base.forEachChar( str, clbk[, thisArg] )"
base.forEachCodePoint,"base.forEachCodePoint( str, clbk[, thisArg] )"
base.forEachCodePointRight,"base.forEachCodePointRight( str, clbk[, thisArg] )"
base.forEachGraphemeCluster,"base.forEachGraphemeCluster( str, clbk[, thisArg] )"
base.forEachRight,"base.forEachRight( str, clbk[, thisArg] )"
base.formatInterpolate,"base.formatInterpolate( tokens, ...args )"
base.formatTokenize,"base.formatTokenize( str )"
base.fresnel,"base.fresnel( x )"
base.fresnel.assign,"base.fresnel.assign( x, out, stride, offset )"
base.fresnelc,"base.fresnelc( x )"
base.fresnels,"base.fresnels( x )"
base.frexp,"base.frexp( x )"
base.frexp.assign,"base.frexp.assign( x, out, stride, offset )"
base.fromBinaryString,"base.fromBinaryString( bstr )"
base.fromBinaryStringf,"base.fromBinaryStringf( bstr )"
base.fromBinaryStringUint8,"base.fromBinaryStringUint8( bstr )"
base.fromBinaryStringUint16,"base.fromBinaryStringUint16( bstr )"
base.fromBinaryStringUint32,"base.fromBinaryStringUint32( bstr )"
base.fromInt64Bytes,"base.fromInt64Bytes( bytes, stride, offset )"
base.fromWordf,"base.fromWordf( word )"
base.fromWords,"base.fromWords( high, low )"
base.gamma,"base.gamma( x )"
base.gamma1pm1,"base.gamma1pm1( x )"
base.gammaDeltaRatio,"base.gammaDeltaRatio( z, delta )"
base.gammainc,"base.gammainc( x, s[, regularized[, upper]] )"
base.gammaincinv,"base.gammaincinv( p, a[, upper] )"
base.gammaLanczosSum,"base.gammaLanczosSum( x )"
base.gammaLanczosSumExpGScaled,"base.gammaLanczosSumExpGScaled( x )"
base.gammaln,"base.gammaln( x )"
base.gammasgn,"base.gammasgn( x )"
base.gcd,"base.gcd( a, b )"
base.getHighWord,"base.getHighWord( x )"
base.getLowWord,"base.getLowWord( x )"
base.hacovercos,"base.hacovercos( x )"
base.hacoversin,"base.hacoversin( x )"
base.havercos,"base.havercos( x )"
base.haversin,"base.haversin( x )"
base.headercase,"base.headercase( str )"
base.heaviside,"base.heaviside( x[, continuity] )"
base.hermitepoly,"base.hermitepoly( n, x )"
base.hermitepoly.factory,"base.hermitepoly.factory( n )"
base.hypot,"base.hypot( x, y )"
base.hypotf,"base.hypotf( x, y )"
base.identity,"base.identity( x )"
base.identityf,"base.identityf( x )"
base.imul,"base.imul( a, b )"
base.imuldw,"base.imuldw( a, b )"
base.imuldw.assign,"base.imuldw.assign( a, b, out, stride, offset )"
base.int2slice,"base.int2slice( value, max, strict )"
base.int32ToUint32,"base.int32ToUint32( x )"
base.inv,"base.inv( x )"
base.invcase,"base.invcase( str )"
base.invf,"base.invf( x )"
base.isComposite,"base.isComposite( x )"
base.isCoprime,"base.isCoprime( a, b )"
base.isEven,"base.isEven( x )"
base.isEvenInt32,"base.isEvenInt32( x )"
base.isFinite,"base.isFinite( x )"
base.isFinitef,"base.isFinitef( x )"
base.isInfinite,"base.isInfinite( x )"
base.isInfinitef,"base.isInfinitef( x )"
base.isInteger,"base.isInteger( x )"
base.isnan,"base.isnan( x )"
base.isnanf,"base.isnanf( x )"
base.isNegativeFinite,"base.isNegativeFinite( x )"
base.isNegativeInteger,"base.isNegativeInteger( x )"
base.isNegativeZero,"base.isNegativeZero( x )"
base.isNegativeZerof,"base.isNegativeZerof( x )"
base.isNonNegativeFinite,"base.isNonNegativeFinite( x )"
base.isNonNegativeInteger,"base.isNonNegativeInteger( x )"
base.isNonPositiveFinite,"base.isNonPositiveFinite( x )"
base.isNonPositiveInteger,"base.isNonPositiveInteger( x )"
base.isOdd,"base.isOdd( x )"
base.isOddInt32,"base.isOddInt32( x )"
base.isPositiveFinite,"base.isPositiveFinite( x )"
base.isPositiveInteger,"base.isPositiveInteger( x )"
base.isPositiveZero,"base.isPositiveZero( x )"
base.isPositiveZerof,"base.isPositiveZerof( x )"
base.isPow2Uint32,"base.isPow2Uint32( x )"
base.isPrime,"base.isPrime( x )"
base.isProbability,"base.isProbability( x )"
base.isSafeInteger,"base.isSafeInteger( x )"
base.kebabcase,"base.kebabcase( str )"
base.kernelBetainc,"base.kernelBetainc( x, a, b, regularized, upper )"
base.kernelBetainc.assign,"base.kernelBetainc.assign( x, a, b, regularized, upper, out, stride, offset )"
base.kernelBetaincinv,"base.kernelBetaincinv( a, b, p, q )"
base.kernelCos,"base.kernelCos( x, y )"
base.kernelLog1p,"base.kernelLog1p( f )"
base.kernelSin,"base.kernelSin( x, y )"
base.kernelTan,"base.kernelTan( x, y, k )"
base.kroneckerDelta,"base.kroneckerDelta( i, j )"
base.kroneckerDeltaf,"base.kroneckerDeltaf( i, j )"
base.labs,"base.labs( x )"
base.last,"base.last( str, n )"
base.lastCodePoint,"base.lastCodePoint( str, n )"
base.lastGraphemeCluster,"base.lastGraphemeCluster( str, n )"
base.lcm,"base.lcm( a, b )"
base.ldexp,"base.ldexp( frac, exp )"
base.leftPad,"base.leftPad( str, len, pad )"
base.leftTrim,"base.leftTrim( str )"
base.ln,"base.ln( x )"
base.log,"base.log( x, b )"
base.log1mexp,"base.log1mexp( x )"
base.log1p,"base.log1p( x )"
base.log1pexp,"base.log1pexp( x )"
base.log1pmx,"base.log1pmx( x )"
base.log2,"base.log2( x )"
base.log10,"base.log10( x )"
base.logaddexp,"base.logaddexp( x, y )"
base.logit,"base.logit( p )"
base.lowercase,"base.lowercase( str )"
base.lucas,"base.lucas( n )"
base.lucaspoly,"base.lucaspoly( n, x )"
base.lucaspoly.factory,"base.lucaspoly.factory( n )"
base.max,"base.max( x, y )"
base.maxabs,"base.maxabs( x, y )"
base.maxabsn,"base.maxabsn( [x[, y[, ...args]]] )"
base.maxn,"base.maxn( [x[, y[, ...args]]] )"
base.min,"base.min( x, y )"
base.minabs,"base.minabs( x, y )"
base.minabsn,"base.minabsn( [x[, y[, ...args]]] )"
base.minmax,"base.minmax( x, y )"
base.minmax.assign,"base.minmax.assign( x, y, out, stride, offset )"
base.minmaxabs,"base.minmaxabs( x, y )"
base.minmaxabs.assign,"base.minmaxabs.assign( x, y, out, stride, offset )"
base.minmaxabsn,"base.minmaxabsn( [x[, y[, ...args]]] )"
base.minmaxabsn.assign,"base.minmaxabsn.assign( [x[, y[, ...args]]], out, stride, offset )"
base.minmaxn,"base.minmaxn( [x[, y[, ...args]]] )"
base.minmaxn.assign,"base.minmaxn.assign( [x[, y[, ...args]]], out, stride, offset )"
base.minn,"base.minn( [x[, y[, ...args]]] )"
base.modf,"base.modf( x )"
base.modf.assign,"base.modf.assign( x, out, stride, offset )"
base.mul,"base.mul( x, y )"
base.mulf,"base.mulf( x, y )"
base.ndarray,"base.ndarray( dtype, buffer, shape, strides, offset, order )"
base.ndarray.prototype.byteLength,"base.ndarray.prototype.byteLength"
base.ndarray.prototype.BYTES_PER_ELEMENT,"base.ndarray.prototype.BYTES_PER_ELEMENT"
base.ndarray.prototype.data,"base.ndarray.prototype.data"
base.ndarray.prototype.dtype,"base.ndarray.prototype.dtype"
base.ndarray.prototype.flags,"base.ndarray.prototype.flags"
base.ndarray.prototype.length,"base.ndarray.prototype.length"
base.ndarray.prototype.ndims,"base.ndarray.prototype.ndims"
base.ndarray.prototype.offset,"base.ndarray.prototype.offset"
base.ndarray.prototype.order: string,"base.ndarray.prototype.order: string"
base.ndarray.prototype.shape,"base.ndarray.prototype.shape"
base.ndarray.prototype.strides,"base.ndarray.prototype.strides"
base.ndarray.prototype.get,"base.ndarray.prototype.get( ...idx )"
base.ndarray.prototype.iget,"base.ndarray.prototype.iget( idx )"
base.ndarray.prototype.set,"base.ndarray.prototype.set( ...idx, v )"
base.ndarray.prototype.iset,"base.ndarray.prototype.iset( idx, v )"
base.ndarray.prototype.toString,"base.ndarray.prototype.toString()"
base.ndarray.prototype.toJSON,"base.ndarray.prototype.toJSON()"
base.ndarrayUnary,"base.ndarrayUnary( arrays, fcn )"
base.ndzeros,"base.ndzeros( dtype, shape, order )"
base.ndzerosLike,"base.ndzerosLike( x )"
base.negafibonacci,"base.negafibonacci( n )"
base.negalucas,"base.negalucas( n )"
base.nonfibonacci,"base.nonfibonacci( n )"
base.normalize,"base.normalize( x )"
base.normalize.assign,"base.normalize.assign( x, out, stride, offset )"
base.normalizef,"base.normalizef( x )"
base.normalizef.assign,"base.normalizef.assign( x, out, stride, offset )"
base.normalizeSlice,"base.normalizeSlice( slice, len, strict )"
base.normhermitepoly,"base.normhermitepoly( n, x )"
base.normhermitepoly.factory,"base.normhermitepoly.factory( n )"
base.pascalcase,"base.pascalcase( str )"
base.pdiff,"base.pdiff( x, y )"
base.pdifff,"base.pdifff( x, y )"
base.percentEncode,"base.percentEncode( str )"
base.polygamma,"base.polygamma( n, x )"
base.pow,"base.pow( b, x )"
base.powm1,"base.powm1( b, x )"
base.rad2deg,"base.rad2deg( x )"
base.rad2degf,"base.rad2degf( x )"
base.ramp,"base.ramp( x )"
base.rampf,"base.rampf( x )"
base.random.arcsine,"base.random.arcsine( a, b )"
base.random.arcsine.factory,"base.random.arcsine.factory( [a, b, ][options] )"
base.random.arcsine.NAME,"base.random.arcsine.NAME"
base.random.arcsine.PRNG,"base.random.arcsine.PRNG"
base.random.arcsine.seed,"base.random.arcsine.seed"
base.random.arcsine.seedLength,"base.random.arcsine.seedLength"
base.random.arcsine.state,"base.random.arcsine.state"
base.random.arcsine.stateLength,"base.random.arcsine.stateLength"
base.random.arcsine.byteLength,"base.random.arcsine.byteLength"
base.random.arcsine.toJSON,"base.random.arcsine.toJSON()"
base.random.bernoulli,"base.random.bernoulli( p )"
base.random.bernoulli.factory,"base.random.bernoulli.factory( [p, ][options] )"
base.random.bernoulli.NAME,"base.random.bernoulli.NAME"
base.random.bernoulli.PRNG,"base.random.bernoulli.PRNG"
base.random.bernoulli.seed,"base.random.bernoulli.seed"
base.random.bernoulli.seedLength,"base.random.bernoulli.seedLength"
base.random.bernoulli.state,"base.random.bernoulli.state"
base.random.bernoulli.stateLength,"base.random.bernoulli.stateLength"
base.random.bernoulli.byteLength,"base.random.bernoulli.byteLength"
base.random.bernoulli.toJSON,"base.random.bernoulli.toJSON()"
base.random.beta,"base.random.beta( α, β )"
base.random.beta.factory,"base.random.beta.factory( [α, β, ][options] )"
base.random.beta.NAME,"base.random.beta.NAME"
base.random.beta.PRNG,"base.random.beta.PRNG"
base.random.beta.seed,"base.random.beta.seed"
base.random.beta.seedLength,"base.random.beta.seedLength"
base.random.beta.state,"base.random.beta.state"
base.random.beta.stateLength,"base.random.beta.stateLength"
base.random.beta.byteLength,"base.random.beta.byteLength"
base.random.beta.toJSON,"base.random.beta.toJSON()"
base.random.betaprime,"base.random.betaprime( α, β )"
base.random.betaprime.factory,"base.random.betaprime.factory( [α, β, ][options] )"
base.random.betaprime.NAME,"base.random.betaprime.NAME"
base.random.betaprime.PRNG,"base.random.betaprime.PRNG"
base.random.betaprime.seed,"base.random.betaprime.seed"
base.random.betaprime.seedLength,"base.random.betaprime.seedLength"
base.random.betaprime.state,"base.random.betaprime.state"
base.random.betaprime.stateLength,"base.random.betaprime.stateLength"
base.random.betaprime.byteLength,"base.random.betaprime.byteLength"
base.random.betaprime.toJSON,"base.random.betaprime.toJSON()"
base.random.binomial,"base.random.binomial( n, p )"
base.random.binomial.factory,"base.random.binomial.factory( [n, p, ][options] )"
base.random.binomial.NAME,"base.random.binomial.NAME"
base.random.binomial.PRNG,"base.random.binomial.PRNG"
base.random.binomial.seed,"base.random.binomial.seed"
base.random.binomial.seedLength,"base.random.binomial.seedLength"
base.random.binomial.state,"base.random.binomial.state"
base.random.binomial.stateLength,"base.random.binomial.stateLength"
base.random.binomial.byteLength,"base.random.binomial.byteLength"
base.random.binomial.toJSON,"base.random.binomial.toJSON()"
base.random.boxMuller,"base.random.boxMuller()"
base.random.boxMuller.factory,"base.random.boxMuller.factory( [options] )"
base.random.boxMuller.NAME,"base.random.boxMuller.NAME"
base.random.boxMuller.PRNG,"base.random.boxMuller.PRNG"
base.random.boxMuller.seed,"base.random.boxMuller.seed"
base.random.boxMuller.seedLength,"base.random.boxMuller.seedLength"
base.random.boxMuller.state,"base.random.boxMuller.state"
base.random.boxMuller.stateLength,"base.random.boxMuller.stateLength"
base.random.boxMuller.byteLength,"base.random.boxMuller.byteLength"
base.random.boxMuller.toJSON,"base.random.boxMuller.toJSON()"
base.random.cauchy,"base.random.cauchy( x0, Ɣ )"
base.random.cauchy.factory,"base.random.cauchy.factory( [x0, Ɣ, ][options] )"
base.random.cauchy.NAME,"base.random.cauchy.NAME"
base.random.cauchy.PRNG,"base.random.cauchy.PRNG"
base.random.cauchy.seed,"base.random.cauchy.seed"
base.random.cauchy.seedLength,"base.random.cauchy.seedLength"
base.random.cauchy.state,"base.random.cauchy.state"
base.random.cauchy.stateLength,"base.random.cauchy.stateLength"
base.random.cauchy.byteLength,"base.random.cauchy.byteLength"
base.random.cauchy.toJSON,"base.random.cauchy.toJSON()"
base.random.chi,"base.random.chi( k )"
base.random.chi.factory,"base.random.chi.factory( [k, ][options] )"
base.random.chi.NAME,"base.random.chi.NAME"
base.random.chi.PRNG,"base.random.chi.PRNG"
base.random.chi.seed,"base.random.chi.seed"
base.random.chi.seedLength,"base.random.chi.seedLength"
base.random.chi.state,"base.random.chi.state"
base.random.chi.stateLength,"base.random.chi.stateLength"
base.random.chi.byteLength,"base.random.chi.byteLength"
base.random.chi.toJSON,"base.random.chi.toJSON()"
base.random.chisquare,"base.random.chisquare( k )"
base.random.chisquare.factory,"base.random.chisquare.factory( [k, ][options] )"
base.random.chisquare.NAME,"base.random.chisquare.NAME"
base.random.chisquare.PRNG,"base.random.chisquare.PRNG"
base.random.chisquare.seed,"base.random.chisquare.seed"
base.random.chisquare.seedLength,"base.random.chisquare.seedLength"
base.random.chisquare.state,"base.random.chisquare.state"
base.random.chisquare.stateLength,"base.random.chisquare.stateLength"
base.random.chisquare.byteLength,"base.random.chisquare.byteLength"
base.random.chisquare.toJSON,"base.random.chisquare.toJSON()"
base.random.cosine,"base.random.cosine( μ, s )"
base.random.cosine.factory,"base.random.cosine.factory( [μ, s, ][options] )"
base.random.cosine.NAME,"base.random.cosine.NAME"
base.random.cosine.PRNG,"base.random.cosine.PRNG"
base.random.cosine.seed,"base.random.cosine.seed"
base.random.cosine.seedLength,"base.random.cosine.seedLength"
base.random.cosine.state,"base.random.cosine.state"
base.random.cosine.stateLength,"base.random.cosine.stateLength"
base.random.cosine.byteLength,"base.random.cosine.byteLength"
base.random.cosine.toJSON,"base.random.cosine.toJSON()"
base.random.discreteUniform,"base.random.discreteUniform( a, b )"
base.random.discreteUniform.factory,"base.random.discreteUniform.factory( [a, b, ][options] )"
base.random.discreteUniform.NAME,"base.random.discreteUniform.NAME"
base.random.discreteUniform.PRNG,"base.random.discreteUniform.PRNG"
base.random.discreteUniform.seed,"base.random.discreteUniform.seed"
base.random.discreteUniform.seedLength,"base.random.discreteUniform.seedLength"
base.random.discreteUniform.state,"base.random.discreteUniform.state"
base.random.discreteUniform.stateLength,"base.random.discreteUniform.stateLength"
base.random.discreteUniform.byteLength,"base.random.discreteUniform.byteLength"
base.random.discreteUniform.toJSON,"base.random.discreteUniform.toJSON()"
base.random.erlang,"base.random.erlang( k, λ )"
base.random.erlang.factory,"base.random.erlang.factory( [k, λ, ][options] )"
base.random.erlang.NAME,"base.random.erlang.NAME"
base.random.erlang.PRNG,"base.random.erlang.PRNG"
base.random.erlang.seed,"base.random.erlang.seed"
base.random.erlang.seedLength,"base.random.erlang.seedLength"
base.random.erlang.state,"base.random.erlang.state"
base.random.erlang.stateLength,"base.random.erlang.stateLength"
base.random.erlang.byteLength,"base.random.erlang.byteLength"
base.random.erlang.toJSON,"base.random.erlang.toJSON()"
base.random.exponential,"base.random.exponential( λ )"
base.random.exponential.factory,"base.random.exponential.factory( [λ, ][options] )"
base.random.exponential.NAME,"base.random.exponential.NAME"
base.random.exponential.PRNG,"base.random.exponential.PRNG"
base.random.exponential.seed,"base.random.exponential.seed"
base.random.exponential.seedLength,"base.random.exponential.seedLength"
base.random.exponential.state,"base.random.exponential.state"
base.random.exponential.stateLength,"base.random.exponential.stateLength"
base.random.exponential.byteLength,"base.random.exponential.byteLength"
base.random.exponential.toJSON,"base.random.exponential.toJSON()"
base.random.f,"base.random.f( d1, d2 )"
base.random.f.factory,"base.random.f.factory( [d1, d2, ][options] )"
base.random.f.NAME,"base.random.f.NAME"
base.random.f.PRNG,"base.random.f.PRNG"
base.random.f.seed,"base.random.f.seed"
base.random.f.seedLength,"base.random.f.seedLength"
base.random.f.state,"base.random.f.state"
base.random.f.stateLength,"base.random.f.stateLength"
base.random.f.byteLength,"base.random.f.byteLength"
base.random.f.toJSON,"base.random.f.toJSON()"
base.random.frechet,"base.random.frechet( α, s, m )"
base.random.frechet.factory,"base.random.frechet.factory( [α, s, m, ][options] )"
base.random.frechet.NAME,"base.random.frechet.NAME"
base.random.frechet.PRNG,"base.random.frechet.PRNG"
base.random.frechet.seed,"base.random.frechet.seed"
base.random.frechet.seedLength,"base.random.frechet.seedLength"
base.random.frechet.state,"base.random.frechet.state"
base.random.frechet.stateLength,"base.random.frechet.stateLength"
base.random.frechet.byteLength,"base.random.frechet.byteLength"
base.random.frechet.toJSON,"base.random.frechet.toJSON()"
base.random.gamma,"base.random.gamma( α, β )"
base.random.gamma.factory,"base.random.gamma.factory( [α, β, ][options] )"
base.random.gamma.NAME,"base.random.gamma.NAME"
base.random.gamma.PRNG,"base.random.gamma.PRNG"
base.random.gamma.seed,"base.random.gamma.seed"
base.random.gamma.seedLength,"base.random.gamma.seedLength"
base.random.gamma.state,"base.random.gamma.state"
base.random.gamma.stateLength,"base.random.gamma.stateLength"
base.random.gamma.byteLength,"base.random.gamma.byteLength"
base.random.gamma.toJSON,"base.random.gamma.toJSON()"
base.random.geometric,"base.random.geometric( p )"
base.random.geometric.factory,"base.random.geometric.factory( [p, ][options] )"
base.random.geometric.NAME,"base.random.geometric.NAME"
base.random.geometric.PRNG,"base.random.geometric.PRNG"
base.random.geometric.seed,"base.random.geometric.seed"
base.random.geometric.seedLength,"base.random.geometric.seedLength"
base.random.geometric.state,"base.random.geometric.state"
base.random.geometric.stateLength,"base.random.geometric.stateLength"
base.random.geometric.byteLength,"base.random.geometric.byteLength"
base.random.geometric.toJSON,"base.random.geometric.toJSON()"
base.random.gumbel,"base.random.gumbel( μ, β )"
base.random.gumbel.factory,"base.random.gumbel.factory( [μ, β, ][options] )"
base.random.gumbel.NAME,"base.random.gumbel.NAME"
base.random.gumbel.PRNG,"base.random.gumbel.PRNG"
base.random.gumbel.seed,"base.random.gumbel.seed"
base.random.gumbel.seedLength,"base.random.gumbel.seedLength"
base.random.gumbel.state,"base.random.gumbel.state"
base.random.gumbel.stateLength,"base.random.gumbel.stateLength"
base.random.gumbel.byteLength,"base.random.gumbel.byteLength"
base.random.gumbel.toJSON,"base.random.gumbel.toJSON()"
base.random.hypergeometric,"base.random.hypergeometric( N, K, n )"
base.random.hypergeometric.factory,"base.random.hypergeometric.factory( [N, K, n, ][options] )"
base.random.hypergeometric.NAME,"base.random.hypergeometric.NAME"
base.random.hypergeometric.PRNG,"base.random.hypergeometric.PRNG"
base.random.hypergeometric.seed,"base.random.hypergeometric.seed"
base.random.hypergeometric.seedLength,"base.random.hypergeometric.seedLength"
base.random.hypergeometric.state,"base.random.hypergeometric.state"
base.random.hypergeometric.stateLength,"base.random.hypergeometric.stateLength"
base.random.hypergeometric.byteLength,"base.random.hypergeometric.byteLength"
base.random.hypergeometric.toJSON,"base.random.hypergeometric.toJSON()"
base.random.improvedZiggurat,"base.random.improvedZiggurat()"
base.random.improvedZiggurat.factory,"base.random.improvedZiggurat.factory( [options] )"
base.random.improvedZiggurat.NAME,"base.random.improvedZiggurat.NAME"
base.random.improvedZiggurat.PRNG,"base.random.improvedZiggurat.PRNG"
base.random.improvedZiggurat.seed,"base.random.improvedZiggurat.seed"
base.random.improvedZiggurat.seedLength,"base.random.improvedZiggurat.seedLength"
base.random.improvedZiggurat.state,"base.random.improvedZiggurat.state"
base.random.improvedZiggurat.stateLength,"base.random.improvedZiggurat.stateLength"
base.random.improvedZiggurat.byteLength,"base.random.improvedZiggurat.byteLength"
base.random.improvedZiggurat.toJSON,"base.random.improvedZiggurat.toJSON()"
base.random.invgamma,"base.random.invgamma( α, β )"
base.random.invgamma.factory,"base.random.invgamma.factory( [α, β, ][options] )"
base.random.invgamma.NAME,"base.random.invgamma.NAME"
base.random.invgamma.PRNG,"base.random.invgamma.PRNG"
base.random.invgamma.seed,"base.random.invgamma.seed"
base.random.invgamma.seedLength,"base.random.invgamma.seedLength"
base.random.invgamma.state,"base.random.invgamma.state"
base.random.invgamma.stateLength,"base.random.invgamma.stateLength"
base.random.invgamma.byteLength,"base.random.invgamma.byteLength"
base.random.invgamma.toJSON,"base.random.invgamma.toJSON()"
base.random.kumaraswamy,"base.random.kumaraswamy( a, b )"
base.random.kumaraswamy.factory,"base.random.kumaraswamy.factory( [a, b, ][options] )"
base.random.kumaraswamy.NAME,"base.random.kumaraswamy.NAME"
base.random.kumaraswamy.PRNG,"base.random.kumaraswamy.PRNG"
base.random.kumaraswamy.seed,"base.random.kumaraswamy.seed"
base.random.kumaraswamy.seedLength,"base.random.kumaraswamy.seedLength"
base.random.kumaraswamy.state,"base.random.kumaraswamy.state"
base.random.kumaraswamy.stateLength,"base.random.kumaraswamy.stateLength"
base.random.kumaraswamy.byteLength,"base.random.kumaraswamy.byteLength"
base.random.kumaraswamy.toJSON,"base.random.kumaraswamy.toJSON()"
base.random.laplace,"base.random.laplace( μ, b )"
base.random.laplace.factory,"base.random.laplace.factory( [μ, b, ][options] )"
base.random.laplace.NAME,"base.random.laplace.NAME"
base.random.laplace.PRNG,"base.random.laplace.PRNG"
base.random.laplace.seed,"base.random.laplace.seed"
base.random.laplace.seedLength,"base.random.laplace.seedLength"
base.random.laplace.state,"base.random.laplace.state"
base.random.laplace.stateLength,"base.random.laplace.stateLength"
base.random.laplace.byteLength,"base.random.laplace.byteLength"
base.random.laplace.toJSON,"base.random.laplace.toJSON()"
base.random.levy,"base.random.levy( μ, c )"
base.random.levy.factory,"base.random.levy.factory( [μ, c, ][options] )"
base.random.levy.NAME,"base.random.levy.NAME"
base.random.levy.PRNG,"base.random.levy.PRNG"
base.random.levy.seed,"base.random.levy.seed"
base.random.levy.seedLength,"base.random.levy.seedLength"
base.random.levy.state,"base.random.levy.state"
base.random.levy.stateLength,"base.random.levy.stateLength"
base.random.levy.byteLength,"base.random.levy.byteLength"
base.random.levy.toJSON,"base.random.levy.toJSON()"
base.random.logistic,"base.random.logistic( μ, s )"
base.random.logistic.factory,"base.random.logistic.factory( [μ, s, ][options] )"
base.random.logistic.NAME,"base.random.logistic.NAME"
base.random.logistic.PRNG,"base.random.logistic.PRNG"
base.random.logistic.seed,"base.random.logistic.seed"
base.random.logistic.seedLength,"base.random.logistic.seedLength"
base.random.logistic.state,"base.random.logistic.state"
base.random.logistic.stateLength,"base.random.logistic.stateLength"
base.random.logistic.byteLength,"base.random.logistic.byteLength"
base.random.logistic.toJSON,"base.random.logistic.toJSON()"
base.random.lognormal,"base.random.lognormal( μ, σ )"
base.random.lognormal.factory,"base.random.lognormal.factory( [μ, σ, ][options] )"
base.random.lognormal.NAME,"base.random.lognormal.NAME"
base.random.lognormal.PRNG,"base.random.lognormal.PRNG"
base.random.lognormal.seed,"base.random.lognormal.seed"
base.random.lognormal.seedLength,"base.random.lognormal.seedLength"
base.random.lognormal.state,"base.random.lognormal.state"
base.random.lognormal.stateLength,"base.random.lognormal.stateLength"
base.random.lognormal.byteLength,"base.random.lognormal.byteLength"
base.random.lognormal.toJSON,"base.random.lognormal.toJSON()"
base.random.minstd,"base.random.minstd()"
base.random.minstd.normalized,"base.random.minstd.normalized()"
base.random.minstd.factory,"base.random.minstd.factory( [options] )"
base.random.minstd.NAME,"base.random.minstd.NAME"
base.random.minstd.MIN,"base.random.minstd.MIN"
base.random.minstd.MAX,"base.random.minstd.MAX"
base.random.minstd.seed,"base.random.minstd.seed"
base.random.minstd.seedLength,"base.random.minstd.seedLength"
base.random.minstd.state,"base.random.minstd.state"
base.random.minstd.stateLength,"base.random.minstd.stateLength"
base.random.minstd.byteLength,"base.random.minstd.byteLength"
base.random.minstd.toJSON,"base.random.minstd.toJSON()"
base.random.minstdShuffle,"base.random.minstdShuffle()"
base.random.minstdShuffle.normalized,"base.random.minstdShuffle.normalized()"
base.random.minstdShuffle.factory,"base.random.minstdShuffle.factory( [options] )"
base.random.minstdShuffle.NAME,"base.random.minstdShuffle.NAME"
base.random.minstdShuffle.MIN,"base.random.minstdShuffle.MIN"
base.random.minstdShuffle.MAX,"base.random.minstdShuffle.MAX"
base.random.minstdShuffle.seed,"base.random.minstdShuffle.seed"
base.random.minstdShuffle.seedLength,"base.random.minstdShuffle.seedLength"
base.random.minstdShuffle.state,"base.random.minstdShuffle.state"
base.random.minstdShuffle.stateLength,"base.random.minstdShuffle.stateLength"
base.random.minstdShuffle.byteLength,"base.random.minstdShuffle.byteLength"
base.random.minstdShuffle.toJSON,"base.random.minstdShuffle.toJSON()"
base.random.mt19937,"base.random.mt19937()"
base.random.mt19937.normalized,"base.random.mt19937.normalized()"
base.random.mt19937.factory,"base.random.mt19937.factory( [options] )"
base.random.mt19937.NAME,"base.random.mt19937.NAME"
base.random.mt19937.MIN,"base.random.mt19937.MIN"
base.random.mt19937.MAX,"base.random.mt19937.MAX"
base.random.mt19937.seed,"base.random.mt19937.seed"
base.random.mt19937.seedLength,"base.random.mt19937.seedLength"
base.random.mt19937.state,"base.random.mt19937.state"
base.random.mt19937.stateLength,"base.random.mt19937.stateLength"
base.random.mt19937.byteLength,"base.random.mt19937.byteLength"
base.random.mt19937.toJSON,"base.random.mt19937.toJSON()"
base.random.negativeBinomial,"base.random.negativeBinomial( r, p )"
base.random.negativeBinomial.factory,"base.random.negativeBinomial.factory( [r, p, ][options] )"
base.random.negativeBinomial.NAME,"base.random.negativeBinomial.NAME"
base.random.negativeBinomial.PRNG,"base.random.negativeBinomial.PRNG"
base.random.negativeBinomial.seed,"base.random.negativeBinomial.seed"
base.random.negativeBinomial.seedLength,"base.random.negativeBinomial.seedLength"
base.random.negativeBinomial.state,"base.random.negativeBinomial.state"
base.random.negativeBinomial.stateLength,"base.random.negativeBinomial.stateLength"
base.random.negativeBinomial.byteLength,"base.random.negativeBinomial.byteLength"
base.random.negativeBinomial.toJSON,"base.random.negativeBinomial.toJSON()"
base.random.normal,"base.random.normal( μ, σ )"
base.random.normal.factory,"base.random.normal.factory( [μ, σ, ][options] )"
base.random.normal.NAME,"base.random.normal.NAME"
base.random.normal.PRNG,"base.random.normal.PRNG"
base.random.normal.seed,"base.random.normal.seed"
base.random.normal.seedLength,"base.random.normal.seedLength"
base.random.normal.state,"base.random.normal.state"
base.random.normal.stateLength,"base.random.normal.stateLength"
base.random.normal.byteLength,"base.random.normal.byteLength"
base.random.normal.toJSON,"base.random.normal.toJSON()"
base.random.pareto1,"base.random.pareto1( α, β )"
base.random.pareto1.factory,"base.random.pareto1.factory( [α, β, ][options] )"
base.random.pareto1.NAME,"base.random.pareto1.NAME"
base.random.pareto1.PRNG,"base.random.pareto1.PRNG"
base.random.pareto1.seed,"base.random.pareto1.seed"
base.random.pareto1.seedLength,"base.random.pareto1.seedLength"
base.random.pareto1.state,"base.random.pareto1.state"
base.random.pareto1.stateLength,"base.random.pareto1.stateLength"
base.random.pareto1.byteLength,"base.random.pareto1.byteLength"
base.random.pareto1.toJSON,"base.random.pareto1.toJSON()"
base.random.poisson,"base.random.poisson( λ )"
base.random.poisson.factory,"base.random.poisson.factory( [λ, ][options] )"
base.random.poisson.NAME,"base.random.poisson.NAME"
base.random.poisson.PRNG,"base.random.poisson.PRNG"
base.random.poisson.seed,"base.random.poisson.seed"
base.random.poisson.seedLength,"base.random.poisson.seedLength"
base.random.poisson.state,"base.random.poisson.state"
base.random.poisson.stateLength,"base.random.poisson.stateLength"
base.random.poisson.byteLength,"base.random.poisson.byteLength"
base.random.poisson.toJSON,"base.random.poisson.toJSON()"
base.random.randi,"base.random.randi()"
base.random.randi.factory,"base.random.randi.factory( [options] )"
base.random.randi.NAME,"base.random.randi.NAME"
base.random.randi.PRNG,"base.random.randi.PRNG"
base.random.randi.MIN,"base.random.randi.MIN"
base.random.randi.MAX,"base.random.randi.MAX"
base.random.randi.seed,"base.random.randi.seed"
base.random.randi.seedLength,"base.random.randi.seedLength"
base.random.randi.state,"base.random.randi.state"
base.random.randi.stateLength,"base.random.randi.stateLength"
base.random.randi.byteLength,"base.random.randi.byteLength"
base.random.randi.toJSON,"base.random.randi.toJSON()"
base.random.randn,"base.random.randn()"
base.random.randn.factory,"base.random.randn.factory( [options] )"
base.random.randn.NAME,"base.random.randn.NAME"
base.random.randn.PRNG,"base.random.randn.PRNG"
base.random.randn.seed,"base.random.randn.seed"
base.random.randn.seedLength,"base.random.randn.seedLength"
base.random.randn.state,"base.random.randn.state"
base.random.randn.stateLength,"base.random.randn.stateLength"
base.random.randn.byteLength,"base.random.randn.byteLength"
base.random.randn.toJSON,"base.random.randn.toJSON()"
base.random.randu,"base.random.randu()"
base.random.randu.factory,"base.random.randu.factory( [options] )"
base.random.randu.NAME,"base.random.randu.NAME"
base.random.randu.PRNG,"base.random.randu.PRNG"
base.random.randu.MIN,"base.random.randu.MIN"
base.random.randu.MAX,"base.random.randu.MAX"
base.random.randu.seed,"base.random.randu.seed"
base.random.randu.seedLength,"base.random.randu.seedLength"
base.random.randu.state,"base.random.randu.state"
base.random.randu.stateLength,"base.random.randu.stateLength"
base.random.randu.byteLength,"base.random.randu.byteLength"
base.random.randu.toJSON,"base.random.randu.toJSON()"
base.random.rayleigh,"base.random.rayleigh( σ )"
base.random.rayleigh.factory,"base.random.rayleigh.factory( [σ, ][options] )"
base.random.rayleigh.NAME,"base.random.rayleigh.NAME"
base.random.rayleigh.PRNG,"base.random.rayleigh.PRNG"
base.random.rayleigh.seed,"base.random.rayleigh.seed"
base.random.rayleigh.seedLength,"base.random.rayleigh.seedLength"
base.random.rayleigh.state,"base.random.rayleigh.state"
base.random.rayleigh.stateLength,"base.random.rayleigh.stateLength"
base.random.rayleigh.byteLength,"base.random.rayleigh.byteLength"
base.random.rayleigh.toJSON,"base.random.rayleigh.toJSON()"
base.random.t,"base.random.t( v )"
base.random.t.factory,"base.random.t.factory( [v, ][options] )"
base.random.t.NAME,"base.random.t.NAME"
base.random.t.PRNG,"base.random.t.PRNG"
base.random.t.seed,"base.random.t.seed"
base.random.t.seedLength,"base.random.t.seedLength"
base.random.t.state,"base.random.t.state"
base.random.t.stateLength,"base.random.t.stateLength"
base.random.t.byteLength,"base.random.t.byteLength"
base.random.t.toJSON,"base.random.t.toJSON()"
base.random.triangular,"base.random.triangular( a, b, c )"
base.random.triangular.factory,"base.random.triangular.factory( [a, b, c, ][options] )"
base.random.triangular.NAME,"base.random.triangular.NAME"
base.random.triangular.PRNG,"base.random.triangular.PRNG"
base.random.triangular.seed,"base.random.triangular.seed"
base.random.triangular.seedLength,"base.random.triangular.seedLength"
base.random.triangular.state,"base.random.triangular.state"
base.random.triangular.stateLength,"base.random.triangular.stateLength"
base.random.triangular.byteLength,"base.random.triangular.byteLength"
base.random.triangular.toJSON,"base.random.triangular.toJSON()"
base.random.uniform,"base.random.uniform( a, b )"
base.random.uniform.factory,"base.random.uniform.factory( [a, b, ][options] )"
base.random.uniform.NAME,"base.random.uniform.NAME"
base.random.uniform.PRNG,"base.random.uniform.PRNG"
base.random.uniform.seed,"base.random.uniform.seed"
base.random.uniform.seedLength,"base.random.uniform.seedLength"
base.random.uniform.state,"base.random.uniform.state"
base.random.uniform.stateLength,"base.random.uniform.stateLength"
base.random.uniform.byteLength,"base.random.uniform.byteLength"
base.random.uniform.toJSON,"base.random.uniform.toJSON()"
base.random.weibull,"base.random.weibull( k, λ )"
base.random.weibull.factory,"base.random.weibull.factory( [k, λ, ][options] )"
base.random.weibull.NAME,"base.random.weibull.NAME"
base.random.weibull.PRNG,"base.random.weibull.PRNG"
base.random.weibull.seed,"base.random.weibull.seed"
base.random.weibull.seedLength,"base.random.weibull.seedLength"
base.random.weibull.state,"base.random.weibull.state"
base.random.weibull.stateLength,"base.random.weibull.stateLength"
base.random.weibull.byteLength,"base.random.weibull.byteLength"
base.random.weibull.toJSON,"base.random.weibull.toJSON()"
base.rcbrt,"base.rcbrt( x )"
base.rcbrtf,"base.rcbrtf( x )"
base.reldiff,"base.reldiff( x, y[, scale] )"
base.removeFirst,"base.removeFirst( str, n )"
base.removeFirstCodePoint,"base.removeFirstCodePoint( str, n )"
base.removeFirstGraphemeCluster,"base.removeFirstGraphemeCluster( str, n )"
base.removeLast,"base.removeLast( str, n )"
base.removeLastCodePoint,"base.removeLastCodePoint( str, n )"
base.removeLastGraphemeCluster,"base.removeLastGraphemeCluster( str, n )"
base.rempio2,"base.rempio2( x, y )"
base.repeat,"base.repeat( str, n )"
base.replace,"base.replace( str, search, newval )"
base.replaceAfter,"base.replaceAfter( str, search, replacement, fromIndex )"
base.replaceAfterLast,"base.replaceAfterLast( str, search, replacement, fromIndex )"
base.replaceBefore,"base.replaceBefore( str, search, replacement, fromIndex )"
base.replaceBeforeLast,"base.replaceBeforeLast( str, search, replacement, fromIndex )"
base.reverse,"base.reverse( str )"
base.reverseCodePoints,"base.reverseCodePoints( str )"
base.reverseGraphemeClusters,"base.reverseGraphemeClusters( str )"
base.rightPad,"base.rightPad( str, len, pad )"
base.rightTrim,"base.rightTrim( str )"
base.risingFactorial,"base.risingFactorial( x, n )"
base.rotl32,"base.rotl32( x, shift )"
base.rotr32,"base.rotr32( x, shift )"
base.round,"base.round( x )"
base.round2,"base.round2( x )"
base.round10,"base.round10( x )"
base.roundb,"base.roundb( x, n, b )"
base.roundn,"base.roundn( x, n )"
base.roundsd,"base.roundsd( x, n[, b] )"
base.rsqrt,"base.rsqrt( x )"
base.rsqrtf,"base.rsqrtf( x )"
base.sargs2multislice,"base.sargs2multislice( str )"
base.scalar2ndarray,"base.scalar2ndarray( value, dtype, order )"
base.secd,"base.secd( x )"
base.seq2multislice,"base.seq2multislice( str, shape, strict )"
base.seq2slice,"base.seq2slice( str, len, strict )"
base.setHighWord,"base.setHighWord( x, high )"
base.setLowWord,"base.setLowWord( x, low )"
base.sici,"base.sici( x )"
base.sici.assign,"base.sici.assign( x, out, stride, offset )"
base.signbit,"base.signbit( x )"
base.signbitf,"base.signbitf( x )"
base.significandf,"base.significandf( x )"
base.signum,"base.signum( x )"
base.signumf,"base.signumf( x )"
base.sin,"base.sin( x )"
base.sinc,"base.sinc( x )"
base.sincos,"base.sincos( x )"
base.sincos,"base.sincos( x, out, stride, offset )"
base.sincospi,"base.sincospi( x )"
base.sincospi.assign,"base.sincospi.assign( x, out, stride, offset )"
base.sinh,"base.sinh( x )"
base.sinpi,"base.sinpi( x )"
base.slice2seq,"base.slice2seq( slice )"
base.sliceLength,"base.sliceLength( slice )"
base.sliceNonReducedDimensions,"base.sliceNonReducedDimensions( slice )"
base.sliceReducedDimensions,"base.sliceReducedDimensions( slice )"
base.sliceShape,"base.sliceShape( slice )"
base.snakecase,"base.snakecase( str )"
base.spence,"base.spence( x )"
base.sqrt,"base.sqrt( x )"
base.sqrt1pm1,"base.sqrt1pm1( x )"
base.sqrtf,"base.sqrtf( x )"
base.sqrtpi,"base.sqrtpi( x )"
base.startcase,"base.startcase( str )"
base.startsWith,"base.startsWith( str, search, position )"
base.stickycase,"base.stickycase( str[, p] )"
base.strided.binary,"base.strided.binary( arrays, shape, strides, fcn )"
base.strided.binary.ndarray,"base.strided.binary.ndarray( arrays, shape, strides, offsets, fcn )"
base.strided.binaryDtypeSignatures,"base.strided.binaryDtypeSignatures( dtypes1, dtypes2, dtypes3[, options] )"
base.strided.binarySignatureCallbacks,"base.strided.binarySignatureCallbacks( table, signatures )"
base.strided.ccopy,"base.strided.ccopy( N, x, strideX, y, strideY )"
base.strided.ccopy.ndarray,"base.strided.ccopy.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.cmap,"base.strided.cmap( N, x, strideX, y, strideY, fcn )"
base.strided.cmap.ndarray,"base.strided.cmap.ndarray( N, x, strideX, offsetX, y, strideY, offsetY, fcn )"
base.strided.cswap,"base.strided.cswap( N, x, strideX, y, strideY )"
base.strided.cswap.ndarray,"base.strided.cswap.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.cumax,"base.strided.cumax( N, x, strideX, y, strideY )"
base.strided.cumax.ndarray,"base.strided.cumax.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.cumaxabs,"base.strided.cumaxabs( N, x, strideX, y, strideY )"
base.strided.cumaxabs.ndarray,"base.strided.cumaxabs.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.cumin,"base.strided.cumin( N, x, strideX, y, strideY )"
base.strided.cumin.ndarray,"base.strided.cumin.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.cuminabs,"base.strided.cuminabs( N, x, strideX, y, strideY )"
base.strided.cuminabs.ndarray,"base.strided.cuminabs.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.dabs,"base.strided.dabs( N, x, strideX, y, strideY )"
base.strided.dabs.ndarray,"base.strided.dabs.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.dabs2,"base.strided.dabs2( N, x, strideX, y, strideY )"
base.strided.dabs2.ndarray,"base.strided.dabs2.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.dapx,"base.strided.dapx( N, alpha, x, stride )"
base.strided.dapx.ndarray,"base.strided.dapx.ndarray( N, alpha, x, stride, offset )"
base.strided.dapxsum,"base.strided.dapxsum( N, alpha, x, stride )"
base.strided.dapxsum.ndarray,"base.strided.dapxsum.ndarray( N, alpha, x, stride, offset )"
base.strided.dapxsumkbn,"base.strided.dapxsumkbn( N, alpha, x, stride )"
base.strided.dapxsumkbn.ndarray,"base.strided.dapxsumkbn.ndarray( N, alpha, x, stride, offset )"
base.strided.dapxsumkbn2,"base.strided.dapxsumkbn2( N, alpha, x, stride )"
base.strided.dapxsumkbn2.ndarray,"base.strided.dapxsumkbn2.ndarray( N, alpha, x, stride, offset )"
base.strided.dapxsumors,"base.strided.dapxsumors( N, alpha, x, stride )"
base.strided.dapxsumors.ndarray,"base.strided.dapxsumors.ndarray( N, alpha, x, stride, offset )"
base.strided.dapxsumpw,"base.strided.dapxsumpw( N, alpha, x, stride )"
base.strided.dapxsumpw.ndarray,"base.strided.dapxsumpw.ndarray( N, alpha, x, stride, offset )"
base.strided.dasum,"base.strided.dasum( N, x, stride )"
base.strided.dasum.ndarray,"base.strided.dasum.ndarray( N, x, stride, offset )"
base.strided.dasumpw,"base.strided.dasumpw( N, x, stride )"
base.strided.dasumpw.ndarray,"base.strided.dasumpw.ndarray( N, x, stride, offset )"
base.strided.daxpy,"base.strided.daxpy( N, alpha, x, strideX, y, strideY )"
base.strided.daxpy.ndarray,"base.strided.daxpy.ndarray( N, alpha, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.dcbrt,"base.strided.dcbrt( N, x, strideX, y, strideY )"
base.strided.dcbrt.ndarray,"base.strided.dcbrt.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.dceil,"base.strided.dceil( N, x, strideX, y, strideY )"
base.strided.dceil.ndarray,"base.strided.dceil.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.dcopy,"base.strided.dcopy( N, x, strideX, y, strideY )"
base.strided.dcopy.ndarray,"base.strided.dcopy.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.dcumax,"base.strided.dcumax( N, x, strideX, y, strideY )"
base.strided.dcumax.ndarray,"base.strided.dcumax.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.dcumaxabs,"base.strided.dcumaxabs( N, x, strideX, y, strideY )"
base.strided.dcumaxabs.ndarray,"base.strided.dcumaxabs.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.dcumin,"base.strided.dcumin( N, x, strideX, y, strideY )"
base.strided.dcumin.ndarray,"base.strided.dcumin.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.dcuminabs,"base.strided.dcuminabs( N, x, strideX, y, strideY )"
base.strided.dcuminabs.ndarray,"base.strided.dcuminabs.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.dcusum,"base.strided.dcusum( N, sum, x, strideX, y, strideY )"
base.strided.dcusum.ndarray,"base.strided.dcusum.ndarray( N, sum, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.dcusumkbn,"base.strided.dcusumkbn( N, sum, x, strideX, y, strideY )"
base.strided.dcusumkbn.ndarray,"base.strided.dcusumkbn.ndarray( N, sum, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.dcusumkbn2,"base.strided.dcusumkbn2( N, sum, x, strideX, y, strideY )"
base.strided.dcusumkbn2.ndarray,"base.strided.dcusumkbn2.ndarray( N, sum, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.dcusumors,"base.strided.dcusumors( N, sum, x, strideX, y, strideY )"
base.strided.dcusumors.ndarray,"base.strided.dcusumors.ndarray( N, sum, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.dcusumpw,"base.strided.dcusumpw( N, sum, x, strideX, y, strideY )"
base.strided.dcusumpw.ndarray,"base.strided.dcusumpw.ndarray( N, sum, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.ddeg2rad,"base.strided.ddeg2rad( N, x, strideX, y, strideY )"
base.strided.ddeg2rad.ndarray,"base.strided.ddeg2rad.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.ddot,"base.strided.ddot( N, x, strideX, y, strideY )"
base.strided.ddot.ndarray,"base.strided.ddot.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.dfill,"base.strided.dfill( N, alpha, x, stride )"
base.strided.dfill.ndarray,"base.strided.dfill.ndarray( N, alpha, x, stride, offset )"
base.strided.dfloor,"base.strided.dfloor( N, x, strideX, y, strideY )"
base.strided.dfloor.ndarray,"base.strided.dfloor.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.dinv,"base.strided.dinv( N, x, strideX, y, strideY )"
base.strided.dinv.ndarray,"base.strided.dinv.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.dmap,"base.strided.dmap( N, x, strideX, y, strideY, fcn )"
base.strided.dmap.ndarray,"base.strided.dmap.ndarray( N, x, strideX, offsetX, y, strideY, offsetY, fcn )"
base.strided.dmap2,"base.strided.dmap2( N, x, sx, y, sy, z, sz, fcn )"
base.strided.dmap2.ndarray,"base.strided.dmap2.ndarray( N, x, sx, ox, y, sy, oy, z, sz, oz, fcn )"
base.strided.dmax,"base.strided.dmax( N, x, stride )"
base.strided.dmax.ndarray,"base.strided.dmax.ndarray( N, x, stride, offset )"
base.strided.dmaxabs,"base.strided.dmaxabs( N, x, stride )"
base.strided.dmaxabs.ndarray,"base.strided.dmaxabs.ndarray( N, x, stride, offset )"
base.strided.dmaxabssorted,"base.strided.dmaxabssorted( N, x, stride )"
base.strided.dmaxabssorted.ndarray,"base.strided.dmaxabssorted.ndarray( N, x, stride, offset )"
base.strided.dmaxsorted,"base.strided.dmaxsorted( N, x, stride )"
base.strided.dmaxsorted.ndarray,"base.strided.dmaxsorted.ndarray( N, x, stride, offset )"
base.strided.dmean,"base.strided.dmean( N, x, stride )"
base.strided.dmean.ndarray,"base.strided.dmean.ndarray( N, x, stride, offset )"
base.strided.dmeankbn,"base.strided.dmeankbn( N, x, stride )"
base.strided.dmeankbn.ndarray,"base.strided.dmeankbn.ndarray( N, x, stride, offset )"
base.strided.dmeankbn2,"base.strided.dmeankbn2( N, x, stride )"
base.strided.dmeankbn2.ndarray,"base.strided.dmeankbn2.ndarray( N, x, stride, offset )"
base.strided.dmeanli,"base.strided.dmeanli( N, x, stride )"
base.strided.dmeanli.ndarray,"base.strided.dmeanli.ndarray( N, x, stride, offset )"
base.strided.dmeanlipw,"base.strided.dmeanlipw( N, x, stride )"
base.strided.dmeanlipw.ndarray,"base.strided.dmeanlipw.ndarray( N, x, stride, offset )"
base.strided.dmeanors,"base.strided.dmeanors( N, x, stride )"
base.strided.dmeanors.ndarray,"base.strided.dmeanors.ndarray( N, x, stride, offset )"
base.strided.dmeanpn,"base.strided.dmeanpn( N, x, stride )"
base.strided.dmeanpn.ndarray,"base.strided.dmeanpn.ndarray( N, x, stride, offset )"
base.strided.dmeanpw,"base.strided.dmeanpw( N, x, stride )"
base.strided.dmeanpw.ndarray,"base.strided.dmeanpw.ndarray( N, x, stride, offset )"
base.strided.dmeanstdev,"base.strided.dmeanstdev( N, c, x, strideX, out, strideOut )"
base.strided.dmeanstdev.ndarray,"base.strided.dmeanstdev.ndarray( N, c, x, strideX, offsetX, out, strideOut, offsetOut )"
base.strided.dmeanstdevpn,"base.strided.dmeanstdevpn( N, c, x, strideX, out, strideOut )"
base.strided.dmeanstdevpn.ndarray,"base.strided.dmeanstdevpn.ndarray( N, c, x, strideX, offsetX, out, strideOut, offsetOut )"
base.strided.dmeanvar,"base.strided.dmeanvar( N, c, x, strideX, out, strideOut )"
base.strided.dmeanvar.ndarray,"base.strided.dmeanvar.ndarray( N, c, x, strideX, offsetX, out, strideOut, offsetOut )"
base.strided.dmeanvarpn,"base.strided.dmeanvarpn( N, c, x, strideX, out, strideOut )"
base.strided.dmeanvarpn.ndarray,"base.strided.dmeanvarpn.ndarray( N, c, x, strideX, offsetX, out, strideOut, offsetOut )"
base.strided.dmeanwd,"base.strided.dmeanwd( N, x, stride )"
base.strided.dmeanwd.ndarray,"base.strided.dmeanwd.ndarray( N, x, stride, offset )"
base.strided.dmediansorted,"base.strided.dmediansorted( N, x, stride )"
base.strided.dmediansorted.ndarray,"base.strided.dmediansorted.ndarray( N, x, stride, offset )"
base.strided.dmidrange,"base.strided.dmidrange( N, x, stride )"
base.strided.dmidrange.ndarray,"base.strided.dmidrange.ndarray( N, x, stride, offset )"
base.strided.dmin,"base.strided.dmin( N, x, stride )"
base.strided.dmin.ndarray,"base.strided.dmin.ndarray( N, x, stride, offset )"
base.strided.dminabs,"base.strided.dminabs( N, x, stride )"
base.strided.dminabs.ndarray,"base.strided.dminabs.ndarray( N, x, stride, offset )"
base.strided.dminsorted,"base.strided.dminsorted( N, x, stride )"
base.strided.dminsorted.ndarray,"base.strided.dminsorted.ndarray( N, x, stride, offset )"
base.strided.dmskabs,"base.strided.dmskabs( N, x, sx, m, sm, y, sy )"
base.strided.dmskabs.ndarray,"base.strided.dmskabs.ndarray( N, x, sx, ox, m, sm, om, y, sy, oy )"
base.strided.dmskabs2,"base.strided.dmskabs2( N, x, sx, m, sm, y, sy )"
base.strided.dmskabs2.ndarray,"base.strided.dmskabs2.ndarray( N, x, sx, ox, m, sm, om, y, sy, oy )"
base.strided.dmskcbrt,"base.strided.dmskcbrt( N, x, sx, m, sm, y, sy )"
base.strided.dmskcbrt.ndarray,"base.strided.dmskcbrt.ndarray( N, x, sx, ox, m, sm, om, y, sy, oy )"
base.strided.dmskceil,"base.strided.dmskceil( N, x, sx, m, sm, y, sy )"
base.strided.dmskceil.ndarray,"base.strided.dmskceil.ndarray( N, x, sx, ox, m, sm, om, y, sy, oy )"
base.strided.dmskdeg2rad,"base.strided.dmskdeg2rad( N, x, sx, m, sm, y, sy )"
base.strided.dmskdeg2rad.ndarray,"base.strided.dmskdeg2rad.ndarray( N, x, sx, ox, m, sm, om, y, sy, oy )"
base.strided.dmskfloor,"base.strided.dmskfloor( N, x, sx, m, sm, y, sy )"
base.strided.dmskfloor.ndarray,"base.strided.dmskfloor.ndarray( N, x, sx, ox, m, sm, om, y, sy, oy )"
base.strided.dmskinv,"base.strided.dmskinv( N, x, sx, m, sm, y, sy )"
base.strided.dmskinv.ndarray,"base.strided.dmskinv.ndarray( N, x, sx, ox, m, sm, om, y, sy, oy )"
base.strided.dmskmap,"base.strided.dmskmap( N, x, sx, m, sm, y, sy, fcn )"
base.strided.dmskmap.ndarray,"base.strided.dmskmap.ndarray( N, x, sx, ox, m, sm, om, y, sy, oy, fcn )"
base.strided.dmskmap2,"base.strided.dmskmap2( N, x, sx, y, sy, m, sm, z, sz, fcn )"
base.strided.dmskmap2.ndarray,"base.strided.dmskmap2.ndarray( N, x, sx, ox, y, sy, oy, m, sm, om, z, sz, oz, fcn )"
base.strided.dmskmax,"base.strided.dmskmax( N, x, strideX, mask, strideMask )"
base.strided.dmskmax.ndarray,"base.strided.dmskmax.ndarray( N, x, strideX, offsetX, mask, strideMask, offsetMask )"
base.strided.dmskmin,"base.strided.dmskmin( N, x, strideX, mask, strideMask )"
base.strided.dmskmin.ndarray,"base.strided.dmskmin.ndarray( N, x, strideX, offsetX, mask, strideMask, offsetMask )"
base.strided.dmskramp,"base.strided.dmskramp( N, x, sx, m, sm, y, sy )"
base.strided.dmskramp.ndarray,"base.strided.dmskramp.ndarray( N, x, sx, ox, m, sm, om, y, sy, oy )"
base.strided.dmskrange,"base.strided.dmskrange( N, x, strideX, mask, strideMask )"
base.strided.dmskrange.ndarray,"base.strided.dmskrange.ndarray( N, x, strideX, offsetX, mask, strideMask, offsetMask )"
base.strided.dmskrsqrt,"base.strided.dmskrsqrt( N, x, sx, m, sm, y, sy )"
base.strided.dmskrsqrt.ndarray,"base.strided.dmskrsqrt.ndarray( N, x, sx, ox, m, sm, om, y, sy, oy )"
base.strided.dmsksqrt,"base.strided.dmsksqrt( N, x, sx, m, sm, y, sy )"
base.strided.dmsksqrt.ndarray,"base.strided.dmsksqrt.ndarray( N, x, sx, ox, m, sm, om, y, sy, oy )"
base.strided.dmsktrunc,"base.strided.dmsktrunc( N, x, sx, m, sm, y, sy )"
base.strided.dmsktrunc.ndarray,"base.strided.dmsktrunc.ndarray( N, x, sx, ox, m, sm, om, y, sy, oy )"
base.strided.dnanasum,"base.strided.dnanasum( N, x, stride )"
base.strided.dnanasum.ndarray,"base.strided.dnanasum.ndarray( N, x, stride, offset )"
base.strided.dnanasumors,"base.strided.dnanasumors( N, x, stride )"
base.strided.dnanasumors.ndarray,"base.strided.dnanasumors.ndarray( N, x, stride, offset )"
base.strided.dnanmax,"base.strided.dnanmax( N, x, stride )"
base.strided.dnanmax.ndarray,"base.strided.dnanmax.ndarray( N, x, stride, offset )"
base.strided.dnanmaxabs,"base.strided.dnanmaxabs( N, x, stride )"
base.strided.dnanmaxabs.ndarray,"base.strided.dnanmaxabs.ndarray( N, x, stride, offset )"
base.strided.dnanmean,"base.strided.dnanmean( N, x, stride )"
base.strided.dnanmean.ndarray,"base.strided.dnanmean.ndarray( N, x, stride, offset )"
base.strided.dnanmeanors,"base.strided.dnanmeanors( N, x, stride )"
base.strided.dnanmeanors.ndarray,"base.strided.dnanmeanors.ndarray( N, x, stride, offset )"
base.strided.dnanmeanpn,"base.strided.dnanmeanpn( N, x, stride )"
base.strided.dnanmeanpn.ndarray,"base.strided.dnanmeanpn.ndarray( N, x, stride, offset )"
base.strided.dnanmeanpw,"base.strided.dnanmeanpw( N, x, stride )"
base.strided.dnanmeanpw.ndarray,"base.strided.dnanmeanpw.ndarray( N, x, stride, offset )"
base.strided.dnanmeanwd,"base.strided.dnanmeanwd( N, x, stride )"
base.strided.dnanmeanwd.ndarray,"base.strided.dnanmeanwd.ndarray( N, x, stride, offset )"
base.strided.dnanmin,"base.strided.dnanmin( N, x, stride )"
base.strided.dnanmin.ndarray,"base.strided.dnanmin.ndarray( N, x, stride, offset )"
base.strided.dnanminabs,"base.strided.dnanminabs( N, x, stride )"
base.strided.dnanminabs.ndarray,"base.strided.dnanminabs.ndarray( N, x, stride, offset )"
base.strided.dnanmskmax,"base.strided.dnanmskmax( N, x, strideX, mask, strideMask )"
base.strided.dnanmskmax.ndarray,"base.strided.dnanmskmax.ndarray( N, x, strideX, offsetX, mask, strideMask, offsetMask )"
base.strided.dnanmskmin,"base.strided.dnanmskmin( N, x, strideX, mask, strideMask )"
base.strided.dnanmskmin.ndarray,"base.strided.dnanmskmin.ndarray( N, x, strideX, offsetX, mask, strideMask, offsetMask )"
base.strided.dnanmskrange,"base.strided.dnanmskrange( N, x, strideX, mask, strideMask )"
base.strided.dnanmskrange.ndarray,"base.strided.dnanmskrange.ndarray( N, x, strideX, offsetX, mask, strideMask, offsetMask )"
base.strided.dnannsum,"base.strided.dnannsum( N, x, strideX, out, strideOut )"
base.strided.dnannsum.ndarray,"base.strided.dnannsum.ndarray( N, x, strideX, offsetX, out, strideOut, offsetOut )"
base.strided.dnannsumkbn,"base.strided.dnannsumkbn( N, x, strideX, out, strideOut )"
base.strided.dnannsumkbn.ndarray,"base.strided.dnannsumkbn.ndarray( N, x, strideX, offsetX, out, strideOut, offsetOut )"
base.strided.dnannsumkbn2,"base.strided.dnannsumkbn2( N, x, strideX, out, strideOut )"
base.strided.dnannsumkbn2.ndarray,"base.strided.dnannsumkbn2.ndarray( N, x, strideX, offsetX, out, strideOut, offsetOut )"
base.strided.dnannsumors,"base.strided.dnannsumors( N, x, strideX, out, strideOut )"
base.strided.dnannsumors.ndarray,"base.strided.dnannsumors.ndarray( N, x, strideX, offsetX, out, strideOut, offsetOut )"
base.strided.dnannsumpw,"base.strided.dnannsumpw( N, x, strideX, out, strideOut )"
base.strided.dnannsumpw.ndarray,"base.strided.dnannsumpw.ndarray( N, x, strideX, offsetX, out, strideOut, offsetOut )"
base.strided.dnanrange,"base.strided.dnanrange( N, x, stride )"
base.strided.dnanrange.ndarray,"base.strided.dnanrange.ndarray( N, x, stride, offset )"
base.strided.dnanstdev,"base.strided.dnanstdev( N, correction, x, stride )"
base.strided.dnanstdev.ndarray,"base.strided.dnanstdev.ndarray( N, correction, x, stride, offset )"
base.strided.dnanstdevch,"base.strided.dnanstdevch( N, correction, x, stride )"
base.strided.dnanstdevch.ndarray,"base.strided.dnanstdevch.ndarray( N, correction, x, stride, offset )"
base.strided.dnanstdevpn,"base.strided.dnanstdevpn( N, correction, x, stride )"
base.strided.dnanstdevpn.ndarray,"base.strided.dnanstdevpn.ndarray( N, correction, x, stride, offset )"
base.strided.dnanstdevtk,"base.strided.dnanstdevtk( N, correction, x, stride )"
base.strided.dnanstdevtk.ndarray,"base.strided.dnanstdevtk.ndarray( N, correction, x, stride, offset )"
base.strided.dnanstdevwd,"base.strided.dnanstdevwd( N, correction, x, stride )"
base.strided.dnanstdevwd.ndarray,"base.strided.dnanstdevwd.ndarray( N, correction, x, stride, offset )"
base.strided.dnanstdevyc,"base.strided.dnanstdevyc( N, correction, x, stride )"
base.strided.dnanstdevyc.ndarray,"base.strided.dnanstdevyc.ndarray( N, correction, x, stride, offset )"
base.strided.dnansum,"base.strided.dnansum( N, x, stride )"
base.strided.dnansum.ndarray,"base.strided.dnansum.ndarray( N, x, stride, offset )"
base.strided.dnansumkbn,"base.strided.dnansumkbn( N, x, stride )"
base.strided.dnansumkbn.ndarray,"base.strided.dnansumkbn.ndarray( N, x, stride, offset )"
base.strided.dnansumkbn2,"base.strided.dnansumkbn2( N, x, stride )"
base.strided.dnansumkbn2.ndarray,"base.strided.dnansumkbn2.ndarray( N, x, stride, offset )"
base.strided.dnansumors,"base.strided.dnansumors( N, x, stride )"
base.strided.dnansumors.ndarray,"base.strided.dnansumors.ndarray( N, x, stride, offset )"
base.strided.dnansumpw,"base.strided.dnansumpw( N, x, stride )"
base.strided.dnansumpw.ndarray,"base.strided.dnansumpw.ndarray( N, x, stride, offset )"
base.strided.dnanvariance,"base.strided.dnanvariance( N, correction, x, stride )"
base.strided.dnanvariance.ndarray,"base.strided.dnanvariance.ndarray( N, correction, x, stride, offset )"
base.strided.dnanvariancech,"base.strided.dnanvariancech( N, correction, x, stride )"
base.strided.dnanvariancech.ndarray,"base.strided.dnanvariancech.ndarray( N, correction, x, stride, offset )"
base.strided.dnanvariancepn,"base.strided.dnanvariancepn( N, correction, x, stride )"
base.strided.dnanvariancepn.ndarray,"base.strided.dnanvariancepn.ndarray( N, correction, x, stride, offset )"
base.strided.dnanvariancetk,"base.strided.dnanvariancetk( N, correction, x, stride )"
base.strided.dnanvariancetk.ndarray,"base.strided.dnanvariancetk.ndarray( N, correction, x, stride, offset )"
base.strided.dnanvariancewd,"base.strided.dnanvariancewd( N, correction, x, stride )"
base.strided.dnanvariancewd.ndarray,"base.strided.dnanvariancewd.ndarray( N, correction, x, stride, offset )"
base.strided.dnanvarianceyc,"base.strided.dnanvarianceyc( N, correction, x, stride )"
base.strided.dnanvarianceyc.ndarray,"base.strided.dnanvarianceyc.ndarray( N, correction, x, stride, offset )"
base.strided.dnrm2,"base.strided.dnrm2( N, x, stride )"
base.strided.dnrm2.ndarray,"base.strided.dnrm2.ndarray( N, x, stride, offset )"
base.strided.dramp,"base.strided.dramp( N, x, strideX, y, strideY )"
base.strided.dramp.ndarray,"base.strided.dramp.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.drange,"base.strided.drange( N, x, stride )"
base.strided.drange.ndarray,"base.strided.drange.ndarray( N, x, stride, offset )"
base.strided.drev,"base.strided.drev( N, x, stride )"
base.strided.drev.ndarray,"base.strided.drev.ndarray( N, x, stride, offset )"
base.strided.drsqrt,"base.strided.drsqrt( N, x, strideX, y, strideY )"
base.strided.drsqrt.ndarray,"base.strided.drsqrt.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.dsapxsum,"base.strided.dsapxsum( N, alpha, x, stride )"
base.strided.dsapxsum.ndarray,"base.strided.dsapxsum.ndarray( N, alpha, x, stride, offset )"
base.strided.dsapxsumpw,"base.strided.dsapxsumpw( N, alpha, x, stride )"
base.strided.dsapxsumpw.ndarray,"base.strided.dsapxsumpw.ndarray( N, alpha, x, stride, offset )"
base.strided.dscal,"base.strided.dscal( N, alpha, x, stride )"
base.strided.dscal.ndarray,"base.strided.dscal.ndarray( N, alpha, x, stride, offset )"
base.strided.dsdot,"base.strided.dsdot( N, x, strideX, y, strideY )"
base.strided.dsdot.ndarray,"base.strided.dsdot.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.dsem,"base.strided.dsem( N, correction, x, stride )"
base.strided.dsem.ndarray,"base.strided.dsem.ndarray( N, correction, x, stride, offset )"
base.strided.dsemch,"base.strided.dsemch( N, correction, x, stride )"
base.strided.dsemch.ndarray,"base.strided.dsemch.ndarray( N, correction, x, stride, offset )"
base.strided.dsempn,"base.strided.dsempn( N, correction, x, stride )"
base.strided.dsempn.ndarray,"base.strided.dsempn.ndarray( N, correction, x, stride, offset )"
base.strided.dsemtk,"base.strided.dsemtk( N, correction, x, stride )"
base.strided.dsemtk.ndarray,"base.strided.dsemtk.ndarray( N, correction, x, stride, offset )"
base.strided.dsemwd,"base.strided.dsemwd( N, correction, x, stride )"
base.strided.dsemwd.ndarray,"base.strided.dsemwd.ndarray( N, correction, x, stride, offset )"
base.strided.dsemyc,"base.strided.dsemyc( N, correction, x, stride )"
base.strided.dsemyc.ndarray,"base.strided.dsemyc.ndarray( N, correction, x, stride, offset )"
base.strided.dsmean,"base.strided.dsmean( N, x, stride )"
base.strided.dsmean.ndarray,"base.strided.dsmean.ndarray( N, x, stride, offset )"
base.strided.dsmeanors,"base.strided.dsmeanors( N, x, stride )"
base.strided.dsmeanors.ndarray,"base.strided.dsmeanors.ndarray( N, x, stride, offset )"
base.strided.dsmeanpn,"base.strided.dsmeanpn( N, x, stride )"
base.strided.dsmeanpn.ndarray,"base.strided.dsmeanpn.ndarray( N, x, stride, offset )"
base.strided.dsmeanpw,"base.strided.dsmeanpw( N, x, stride )"
base.strided.dsmeanpw.ndarray,"base.strided.dsmeanpw.ndarray( N, x, stride, offset )"
base.strided.dsmeanwd,"base.strided.dsmeanwd( N, x, stride )"
base.strided.dsmeanwd.ndarray,"base.strided.dsmeanwd.ndarray( N, x, stride, offset )"
base.strided.dsnanmean,"base.strided.dsnanmean( N, x, stride )"
base.strided.dsnanmean.ndarray,"base.strided.dsnanmean.ndarray( N, x, stride, offset )"
base.strided.dsnanmeanors,"base.strided.dsnanmeanors( N, x, stride )"
base.strided.dsnanmeanors.ndarray,"base.strided.dsnanmeanors.ndarray( N, x, stride, offset )"
base.strided.dsnanmeanpn,"base.strided.dsnanmeanpn( N, x, stride )"
base.strided.dsnanmeanpn.ndarray,"base.strided.dsnanmeanpn.ndarray( N, x, stride, offset )"
base.strided.dsnanmeanwd,"base.strided.dsnanmeanwd( N, x, stride )"
base.strided.dsnanmeanwd.ndarray,"base.strided.dsnanmeanwd.ndarray( N, x, stride, offset )"
base.strided.dsnannsumors,"base.strided.dsnannsumors( N, x, strideX, out, strideOut )"
base.strided.dsnannsumors.ndarray,"base.strided.dsnannsumors.ndarray( N, x, strideX, offsetX, out, strideOut, offsetOut )"
base.strided.dsnansum,"base.strided.dsnansum( N, x, stride )"
base.strided.dsnansum.ndarray,"base.strided.dsnansum.ndarray( N, x, stride, offset )"
base.strided.dsnansumors,"base.strided.dsnansumors( N, x, stride )"
base.strided.dsnansumors.ndarray,"base.strided.dsnansumors.ndarray( N, x, stride, offset )"
base.strided.dsnansumpw,"base.strided.dsnansumpw( N, x, stride )"
base.strided.dsnansumpw.ndarray,"base.strided.dsnansumpw.ndarray( N, x, stride, offset )"
base.strided.dsort2hp,"base.strided.dsort2hp( N, order, x, strideX, y, strideY )"
base.strided.dsort2hp.ndarray,"base.strided.dsort2hp.ndarray( N, order, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.dsort2ins,"base.strided.dsort2ins( N, order, x, strideX, y, strideY )"
base.strided.dsort2ins.ndarray,"base.strided.dsort2ins.ndarray( N, order, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.dsort2sh,"base.strided.dsort2sh( N, order, x, strideX, y, strideY )"
base.strided.dsort2sh.ndarray,"base.strided.dsort2sh.ndarray( N, order, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.dsorthp,"base.strided.dsorthp( N, order, x, stride )"
base.strided.dsorthp.ndarray,"base.strided.dsorthp.ndarray( N, order, x, stride, offset )"
base.strided.dsortins,"base.strided.dsortins( N, order, x, stride )"
base.strided.dsortins.ndarray,"base.strided.dsortins.ndarray( N, order, x, stride, offset )"
base.strided.dsortsh,"base.strided.dsortsh( N, order, x, stride )"
base.strided.dsortsh.ndarray,"base.strided.dsortsh.ndarray( N, order, x, stride, offset )"
base.strided.dsqrt,"base.strided.dsqrt( N, x, strideX, y, strideY )"
base.strided.dsqrt.ndarray,"base.strided.dsqrt.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.dssum,"base.strided.dssum( N, x, stride )"
base.strided.dssum.ndarray,"base.strided.dssum.ndarray( N, x, stride, offset )"
base.strided.dssumors,"base.strided.dssumors( N, x, stride )"
base.strided.dssumors.ndarray,"base.strided.dssumors.ndarray( N, x, stride, offset )"
base.strided.dssumpw,"base.strided.dssumpw( N, x, stride )"
base.strided.dssumpw.ndarray,"base.strided.dssumpw.ndarray( N, x, stride, offset )"
base.strided.dstdev,"base.strided.dstdev( N, correction, x, stride )"
base.strided.dstdev.ndarray,"base.strided.dstdev.ndarray( N, correction, x, stride, offset )"
base.strided.dstdevch,"base.strided.dstdevch( N, correction, x, stride )"
base.strided.dstdevch.ndarray,"base.strided.dstdevch.ndarray( N, correction, x, stride, offset )"
base.strided.dstdevpn,"base.strided.dstdevpn( N, correction, x, stride )"
base.strided.dstdevpn.ndarray,"base.strided.dstdevpn.ndarray( N, correction, x, stride, offset )"
base.strided.dstdevtk,"base.strided.dstdevtk( N, correction, x, stride )"
base.strided.dstdevtk.ndarray,"base.strided.dstdevtk.ndarray( N, correction, x, stride, offset )"
base.strided.dstdevwd,"base.strided.dstdevwd( N, correction, x, stride )"
base.strided.dstdevwd.ndarray,"base.strided.dstdevwd.ndarray( N, correction, x, stride, offset )"
base.strided.dstdevyc,"base.strided.dstdevyc( N, correction, x, stride )"
base.strided.dstdevyc.ndarray,"base.strided.dstdevyc.ndarray( N, correction, x, stride, offset )"
base.strided.dsum,"base.strided.dsum( N, x, stride )"
base.strided.dsum.ndarray,"base.strided.dsum.ndarray( N, x, stride, offset )"
base.strided.dsumkbn,"base.strided.dsumkbn( N, x, stride )"
base.strided.dsumkbn.ndarray,"base.strided.dsumkbn.ndarray( N, x, stride, offset )"
base.strided.dsumkbn2,"base.strided.dsumkbn2( N, x, stride )"
base.strided.dsumkbn2.ndarray,"base.strided.dsumkbn2.ndarray( N, x, stride, offset )"
base.strided.dsumors,"base.strided.dsumors( N, x, stride )"
base.strided.dsumors.ndarray,"base.strided.dsumors.ndarray( N, x, stride, offset )"
base.strided.dsumpw,"base.strided.dsumpw( N, x, stride )"
base.strided.dsumpw.ndarray,"base.strided.dsumpw.ndarray( N, x, stride, offset )"
base.strided.dsvariance,"base.strided.dsvariance( N, correction, x, stride )"
base.strided.dsvariance.ndarray,"base.strided.dsvariance.ndarray( N, correction, x, stride, offset )"
base.strided.dsvariancepn,"base.strided.dsvariancepn( N, correction, x, stride )"
base.strided.dsvariancepn.ndarray,"base.strided.dsvariancepn.ndarray( N, correction, x, stride, offset )"
base.strided.dswap,"base.strided.dswap( N, x, strideX, y, strideY )"
base.strided.dswap.ndarray,"base.strided.dswap.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.dtrunc,"base.strided.dtrunc( N, x, strideX, y, strideY )"
base.strided.dtrunc.ndarray,"base.strided.dtrunc.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.dtypeEnum2Str,"base.strided.dtypeEnum2Str( dtype )"
base.strided.dtypeResolveEnum,"base.strided.dtypeResolveEnum( dtype )"
base.strided.dtypeResolveStr,"base.strided.dtypeResolveStr( dtype )"
base.strided.dtypeStr2Enum,"base.strided.dtypeStr2Enum( dtype )"
base.strided.dvariance,"base.strided.dvariance( N, correction, x, stride )"
base.strided.dvariance.ndarray,"base.strided.dvariance.ndarray( N, correction, x, stride, offset )"
base.strided.dvariancech,"base.strided.dvariancech( N, correction, x, stride )"
base.strided.dvariancech.ndarray,"base.strided.dvariancech.ndarray( N, correction, x, stride, offset )"
base.strided.dvariancepn,"base.strided.dvariancepn( N, correction, x, stride )"
base.strided.dvariancepn.ndarray,"base.strided.dvariancepn.ndarray( N, correction, x, stride, offset )"
base.strided.dvariancetk,"base.strided.dvariancetk( N, correction, x, stride )"
base.strided.dvariancetk.ndarray,"base.strided.dvariancetk.ndarray( N, correction, x, stride, offset )"
base.strided.dvariancewd,"base.strided.dvariancewd( N, correction, x, stride )"
base.strided.dvariancewd.ndarray,"base.strided.dvariancewd.ndarray( N, correction, x, stride, offset )"
base.strided.dvarianceyc,"base.strided.dvarianceyc( N, correction, x, stride )"
base.strided.dvarianceyc.ndarray,"base.strided.dvarianceyc.ndarray( N, correction, x, stride, offset )"
base.strided.dvarm,"base.strided.dvarm( N, mean, correction, x, stride )"
base.strided.dvarm.ndarray,"base.strided.dvarm.ndarray( N, mean, correction, x, stride, offset )"
base.strided.dvarmpn,"base.strided.dvarmpn( N, mean, correction, x, stride )"
base.strided.dvarmpn.ndarray,"base.strided.dvarmpn.ndarray( N, mean, correction, x, stride, offset )"
base.strided.dvarmtk,"base.strided.dvarmtk( N, mean, correction, x, stride )"
base.strided.dvarmtk.ndarray,"base.strided.dvarmtk.ndarray( N, mean, correction, x, stride, offset )"
base.strided.gapx,"base.strided.gapx( N, alpha, x, stride )"
base.strided.gapx.ndarray,"base.strided.gapx.ndarray( N, alpha, x, stride, offset )"
base.strided.gapxsum,"base.strided.gapxsum( N, alpha, x, stride )"
base.strided.gapxsum.ndarray,"base.strided.gapxsum.ndarray( N, alpha, x, stride, offset )"
base.strided.gapxsumkbn,"base.strided.gapxsumkbn( N, alpha, x, stride )"
base.strided.gapxsumkbn.ndarray,"base.strided.gapxsumkbn.ndarray( N, alpha, x, stride, offset )"
base.strided.gapxsumkbn2,"base.strided.gapxsumkbn2( N, alpha, x, stride )"
base.strided.gapxsumkbn2.ndarray,"base.strided.gapxsumkbn2.ndarray( N, alpha, x, stride, offset )"
base.strided.gapxsumors,"base.strided.gapxsumors( N, alpha, x, stride )"
base.strided.gapxsumors.ndarray,"base.strided.gapxsumors.ndarray( N, alpha, x, stride, offset )"
base.strided.gapxsumpw,"base.strided.gapxsumpw( N, alpha, x, stride )"
base.strided.gapxsumpw.ndarray,"base.strided.gapxsumpw.ndarray( N, alpha, x, stride, offset )"
base.strided.gasum,"base.strided.gasum( N, x, stride )"
base.strided.gasum.ndarray,"base.strided.gasum.ndarray( N, x, stride, offset )"
base.strided.gasumpw,"base.strided.gasumpw( N, x, stride )"
base.strided.gasumpw.ndarray,"base.strided.gasumpw.ndarray( N, x, stride, offset )"
base.strided.gaxpy,"base.strided.gaxpy( N, alpha, x, strideX, y, strideY )"
base.strided.gaxpy.ndarray,"base.strided.gaxpy.ndarray( N, alpha, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.gcopy,"base.strided.gcopy( N, x, strideX, y, strideY )"
base.strided.gcopy.ndarray,"base.strided.gcopy.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.gcusum,"base.strided.gcusum( N, sum, x, strideX, y, strideY )"
base.strided.gcusum.ndarray,"base.strided.gcusum.ndarray( N, sum, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.gcusumkbn,"base.strided.gcusumkbn( N, sum, x, strideX, y, strideY )"
base.strided.gcusumkbn.ndarray,"base.strided.gcusumkbn.ndarray( N, sum, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.gcusumkbn2,"base.strided.gcusumkbn2( N, sum, x, strideX, y, strideY )"
base.strided.gcusumkbn2.ndarray,"base.strided.gcusumkbn2.ndarray( N, sum, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.gcusumors,"base.strided.gcusumors( N, sum, x, strideX, y, strideY )"
base.strided.gcusumors.ndarray,"base.strided.gcusumors.ndarray( N, sum, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.gcusumpw,"base.strided.gcusumpw( N, sum, x, strideX, y, strideY )"
base.strided.gcusumpw.ndarray,"base.strided.gcusumpw.ndarray( N, sum, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.gdot,"base.strided.gdot( N, x, strideX, y, strideY )"
base.strided.gdot.ndarray,"base.strided.gdot.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.gfill,"base.strided.gfill( N, alpha, x, stride )"
base.strided.gfill.ndarray,"base.strided.gfill.ndarray( N, alpha, x, stride, offset )"
base.strided.gfillBy,"base.strided.gfillBy( N, x, stride, clbk[, thisArg] )"
base.strided.gfillBy.ndarray,"base.strided.gfillBy.ndarray( N, x, stride, offset, clbk[, thisArg] )"
base.strided.gnannsumkbn,"base.strided.gnannsumkbn( N, x, strideX, out, strideOut )"
base.strided.gnannsumkbn.ndarray,"base.strided.gnannsumkbn.ndarray( N, x, strideX, offsetX, out, strideOut, offsetOut )"
base.strided.gnansum,"base.strided.gnansum( N, x, stride )"
base.strided.gnansum.ndarray,"base.strided.gnansum.ndarray( N, x, stride, offset )"
base.strided.gnansumkbn,"base.strided.gnansumkbn( N, x, stride )"
base.strided.gnansumkbn.ndarray,"base.strided.gnansumkbn.ndarray( N, x, stride, offset )"
base.strided.gnansumkbn2,"base.strided.gnansumkbn2( N, x, stride )"
base.strided.gnansumkbn2.ndarray,"base.strided.gnansumkbn2.ndarray( N, x, stride, offset )"
base.strided.gnansumors,"base.strided.gnansumors( N, x, stride )"
base.strided.gnansumors.ndarray,"base.strided.gnansumors.ndarray( N, x, stride, offset )"
base.strided.gnansumpw,"base.strided.gnansumpw( N, x, stride )"
base.strided.gnansumpw.ndarray,"base.strided.gnansumpw.ndarray( N, x, stride, offset )"
base.strided.gnrm2,"base.strided.gnrm2( N, x, stride )"
base.strided.gnrm2.ndarray,"base.strided.gnrm2.ndarray( N, x, stride, offset )"
base.strided.grev,"base.strided.grev( N, x, stride )"
base.strided.grev.ndarray,"base.strided.grev.ndarray( N, x, stride, offset )"
base.strided.gscal,"base.strided.gscal( N, alpha, x, stride )"
base.strided.gscal.ndarray,"base.strided.gscal.ndarray( N, alpha, x, stride, offset )"
base.strided.gsort2hp,"base.strided.gsort2hp( N, order, x, strideX, y, strideY )"
base.strided.gsort2hp.ndarray,"base.strided.gsort2hp.ndarray( N, order, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.gsort2ins,"base.strided.gsort2ins( N, order, x, strideX, y, strideY )"
base.strided.gsort2ins.ndarray,"base.strided.gsort2ins.ndarray( N, order, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.gsort2sh,"base.strided.gsort2sh( N, order, x, strideX, y, strideY )"
base.strided.gsort2sh.ndarray,"base.strided.gsort2sh.ndarray( N, order, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.gsorthp,"base.strided.gsorthp( N, order, x, stride )"
base.strided.gsorthp.ndarray,"base.strided.gsorthp.ndarray( N, order, x, stride, offset )"
base.strided.gsortins,"base.strided.gsortins( N, order, x, stride )"
base.strided.gsortins.ndarray,"base.strided.gsortins.ndarray( N, order, x, stride, offset )"
base.strided.gsortsh,"base.strided.gsortsh( N, order, x, stride )"
base.strided.gsortsh.ndarray,"base.strided.gsortsh.ndarray( N, order, x, stride, offset )"
base.strided.gsum,"base.strided.gsum( N, x, stride )"
base.strided.gsum.ndarray,"base.strided.gsum.ndarray( N, x, stride, offset )"
base.strided.gsumkbn,"base.strided.gsumkbn( N, x, stride )"
base.strided.gsumkbn.ndarray,"base.strided.gsumkbn.ndarray( N, x, stride, offset )"
base.strided.gsumkbn2,"base.strided.gsumkbn2( N, x, stride )"
base.strided.gsumkbn2.ndarray,"base.strided.gsumkbn2.ndarray( N, x, stride, offset )"
base.strided.gsumors,"base.strided.gsumors( N, x, stride )"
base.strided.gsumors.ndarray,"base.strided.gsumors.ndarray( N, x, stride, offset )"
base.strided.gsumpw,"base.strided.gsumpw( N, x, stride )"
base.strided.gsumpw.ndarray,"base.strided.gsumpw.ndarray( N, x, stride, offset )"
base.strided.gswap,"base.strided.gswap( N, x, strideX, y, strideY )"
base.strided.gswap.ndarray,"base.strided.gswap.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.mapBy,"base.strided.mapBy( N, x, sx, y, sy, fcn, clbk[, thisArg] )"
base.strided.mapBy.ndarray,"base.strided.mapBy.ndarray( N, x, sx, ox, y, sy, oy, fcn, clbk[, thisArg] )"
base.strided.mapBy2,"base.strided.mapBy2( N, x, sx, y, sy, z, sz, fcn, clbk[, thisArg] )"
base.strided.mapBy2.ndarray,"base.strided.mapBy2.ndarray( N, x, sx, ox, y, sy, oy, z, sz, oz, fcn, clbk[, thisArg] )"
base.strided.max,"base.strided.max( N, x, stride )"
base.strided.max.ndarray,"base.strided.max.ndarray( N, x, stride, offset )"
base.strided.maxabs,"base.strided.maxabs( N, x, stride )"
base.strided.maxabs.ndarray,"base.strided.maxabs.ndarray( N, x, stride, offset )"
base.strided.maxBy,"base.strided.maxBy( N, x, stride, clbk[, thisArg] )"
base.strided.maxBy.ndarray,"base.strided.maxBy.ndarray( N, x, stride, offset, clbk[, thisArg] )"
base.strided.maxsorted,"base.strided.maxsorted( N, x, stride )"
base.strided.maxsorted.ndarray,"base.strided.maxsorted.ndarray( N, x, stride, offset )"
base.strided.maxViewBufferIndex,"base.strided.maxViewBufferIndex( N, stride, offset )"
base.strided.mean,"base.strided.mean( N, x, stride )"
base.strided.mean.ndarray,"base.strided.mean.ndarray( N, x, stride, offset )"
base.strided.meankbn,"base.strided.meankbn( N, x, stride )"
base.strided.meankbn.ndarray,"base.strided.meankbn.ndarray( N, x, stride, offset )"
base.strided.meankbn2,"base.strided.meankbn2( N, x, stride )"
base.strided.meankbn2.ndarray,"base.strided.meankbn2.ndarray( N, x, stride, offset )"
base.strided.meanors,"base.strided.meanors( N, x, stride )"
base.strided.meanors.ndarray,"base.strided.meanors.ndarray( N, x, stride, offset )"
base.strided.meanpn,"base.strided.meanpn( N, x, stride )"
base.strided.meanpn.ndarray,"base.strided.meanpn.ndarray( N, x, stride, offset )"
base.strided.meanpw,"base.strided.meanpw( N, x, stride )"
base.strided.meanpw.ndarray,"base.strided.meanpw.ndarray( N, x, stride, offset )"
base.strided.meanwd,"base.strided.meanwd( N, x, stride )"
base.strided.meanwd.ndarray,"base.strided.meanwd.ndarray( N, x, stride, offset )"
base.strided.mediansorted,"base.strided.mediansorted( N, x, stride )"
base.strided.mediansorted.ndarray,"base.strided.mediansorted.ndarray( N, x, stride, offset )"
base.strided.metaDataProps,"base.strided.metaDataProps( meta, dtypes, obj, bool )"
base.strided.min,"base.strided.min( N, x, stride )"
base.strided.min.ndarray,"base.strided.min.ndarray( N, x, stride, offset )"
base.strided.minabs,"base.strided.minabs( N, x, stride )"
base.strided.minabs.ndarray,"base.strided.minabs.ndarray( N, x, stride, offset )"
base.strided.minBy,"base.strided.minBy( N, x, stride, clbk[, thisArg] )"
base.strided.minBy.ndarray,"base.strided.minBy.ndarray( N, x, stride, offset, clbk[, thisArg] )"
base.strided.minsorted,"base.strided.minsorted( N, x, stride )"
base.strided.minsorted.ndarray,"base.strided.minsorted.ndarray( N, x, stride, offset )"
base.strided.minViewBufferIndex,"base.strided.minViewBufferIndex( N, stride, offset )"
base.strided.mskmax,"base.strided.mskmax( N, x, strideX, mask, strideMask )"
base.strided.mskmax.ndarray,"base.strided.mskmax.ndarray( N, x, strideX, offsetX, mask, strideMask, offsetMask )"
base.strided.mskmin,"base.strided.mskmin( N, x, strideX, mask, strideMask )"
base.strided.mskmin.ndarray,"base.strided.mskmin.ndarray( N, x, strideX, offsetX, mask, strideMask, offsetMask )"
base.strided.mskrange,"base.strided.mskrange( N, x, strideX, mask, strideMask )"
base.strided.mskrange.ndarray,"base.strided.mskrange.ndarray( N, x, strideX, offsetX, mask, strideMask, offsetMask )"
base.strided.mskunary,"base.strided.mskunary( arrays, shape, strides, fcn )"
base.strided.mskunary.ndarray,"base.strided.mskunary.ndarray( arrays, shape, strides, offsets, fcn )"
base.strided.mskunaryDtypeSignatures,"base.strided.mskunaryDtypeSignatures( dtypes1, dtypes2[, options] )"
base.strided.mskunarySignatureCallbacks,"base.strided.mskunarySignatureCallbacks( table, signatures )"
base.strided.nanmax,"base.strided.nanmax( N, x, stride )"
base.strided.nanmax.ndarray,"base.strided.nanmax.ndarray( N, x, stride, offset )"
base.strided.nanmaxabs,"base.strided.nanmaxabs( N, x, stride )"
base.strided.nanmaxabs.ndarray,"base.strided.nanmaxabs.ndarray( N, x, stride, offset )"
base.strided.nanmaxBy,"base.strided.nanmaxBy( N, x, stride, clbk[, thisArg] )"
base.strided.nanmaxBy.ndarray,"base.strided.nanmaxBy.ndarray( N, x, stride, offset, clbk[, thisArg] )"
base.strided.nanmean,"base.strided.nanmean( N, x, stride )"
base.strided.nanmean.ndarray,"base.strided.nanmean.ndarray( N, x, stride, offset )"
base.strided.nanmeanors,"base.strided.nanmeanors( N, x, stride )"
base.strided.nanmeanors.ndarray,"base.strided.nanmeanors.ndarray( N, x, stride, offset )"
base.strided.nanmeanpn,"base.strided.nanmeanpn( N, x, stride )"
base.strided.nanmeanpn.ndarray,"base.strided.nanmeanpn.ndarray( N, x, stride, offset )"
base.strided.nanmeanwd,"base.strided.nanmeanwd( N, x, stride )"
base.strided.nanmeanwd.ndarray,"base.strided.nanmeanwd.ndarray( N, x, stride, offset )"
base.strided.nanmin,"base.strided.nanmin( N, x, stride )"
base.strided.nanmin.ndarray,"base.strided.nanmin.ndarray( N, x, stride, offset )"
base.strided.nanminabs,"base.strided.nanminabs( N, x, stride )"
base.strided.nanminabs.ndarray,"base.strided.nanminabs.ndarray( N, x, stride, offset )"
base.strided.nanminBy,"base.strided.nanminBy( N, x, stride, clbk[, thisArg] )"
base.strided.nanminBy.ndarray,"base.strided.nanminBy.ndarray( N, x, stride, offset, clbk[, thisArg] )"
base.strided.nanmskmax,"base.strided.nanmskmax( N, x, strideX, mask, strideMask )"
base.strided.nanmskmax.ndarray,"base.strided.nanmskmax.ndarray( N, x, strideX, offsetX, mask, strideMask, offsetMask )"
base.strided.nanmskmin,"base.strided.nanmskmin( N, x, strideX, mask, strideMask )"
base.strided.nanmskmin.ndarray,"base.strided.nanmskmin.ndarray( N, x, strideX, offsetX, mask, strideMask, offsetMask )"
base.strided.nanmskrange,"base.strided.nanmskrange( N, x, strideX, mask, strideMask )"
base.strided.nanmskrange.ndarray,"base.strided.nanmskrange.ndarray( N, x, strideX, offsetX, mask, strideMask, offsetMask )"
base.strided.nanrange,"base.strided.nanrange( N, x, stride )"
base.strided.nanrange.ndarray,"base.strided.nanrange.ndarray( N, x, stride, offset )"
base.strided.nanrangeBy,"base.strided.nanrangeBy( N, x, stride, clbk[, thisArg] )"
base.strided.nanrangeBy.ndarray,"base.strided.nanrangeBy.ndarray( N, x, stride, offset, clbk[, thisArg] )"
base.strided.nanstdev,"base.strided.nanstdev( N, correction, x, stride )"
base.strided.nanstdev.ndarray,"base.strided.nanstdev.ndarray( N, correction, x, stride, offset )"
base.strided.nanstdevch,"base.strided.nanstdevch( N, correction, x, stride )"
base.strided.nanstdevch.ndarray,"base.strided.nanstdevch.ndarray( N, correction, x, stride, offset )"
base.strided.nanstdevpn,"base.strided.nanstdevpn( N, correction, x, stride )"
base.strided.nanstdevpn.ndarray,"base.strided.nanstdevpn.ndarray( N, correction, x, stride, offset )"
base.strided.nanstdevtk,"base.strided.nanstdevtk( N, correction, x, stride )"
base.strided.nanstdevtk.ndarray,"base.strided.nanstdevtk.ndarray( N, correction, x, stride, offset )"
base.strided.nanstdevwd,"base.strided.nanstdevwd( N, correction, x, stride )"
base.strided.nanstdevwd.ndarray,"base.strided.nanstdevwd.ndarray( N, correction, x, stride, offset )"
base.strided.nanstdevyc,"base.strided.nanstdevyc( N, correction, x, stride )"
base.strided.nanstdevyc.ndarray,"base.strided.nanstdevyc.ndarray( N, correction, x, stride, offset )"
base.strided.nanvariance,"base.strided.nanvariance( N, correction, x, stride )"
base.strided.nanvariance.ndarray,"base.strided.nanvariance.ndarray( N, correction, x, stride, offset )"
base.strided.nanvariancech,"base.strided.nanvariancech( N, correction, x, stride )"
base.strided.nanvariancech.ndarray,"base.strided.nanvariancech.ndarray( N, correction, x, stride, offset )"
base.strided.nanvariancepn,"base.strided.nanvariancepn( N, correction, x, stride )"
base.strided.nanvariancepn.ndarray,"base.strided.nanvariancepn.ndarray( N, correction, x, stride, offset )"
base.strided.nanvariancetk,"base.strided.nanvariancetk( N, correction, x, stride )"
base.strided.nanvariancetk.ndarray,"base.strided.nanvariancetk.ndarray( N, correction, x, stride, offset )"
base.strided.nanvariancewd,"base.strided.nanvariancewd( N, correction, x, stride )"
base.strided.nanvariancewd.ndarray,"base.strided.nanvariancewd.ndarray( N, correction, x, stride, offset )"
base.strided.nanvarianceyc,"base.strided.nanvarianceyc( N, correction, x, stride )"
base.strided.nanvarianceyc.ndarray,"base.strided.nanvarianceyc.ndarray( N, correction, x, stride, offset )"
base.strided.nullary,"base.strided.nullary( arrays, shape, strides, fcn )"
base.strided.nullary.ndarray,"base.strided.nullary.ndarray( arrays, shape, strides, offsets, fcn )"
base.strided.offsetView,"base.strided.offsetView( x, offset )"
base.strided.quaternary,"base.strided.quaternary( arrays, shape, strides, fcn )"
base.strided.quaternary.ndarray,"base.strided.quaternary.ndarray( arrays, shape, strides, offsets, fcn )"
base.strided.quinary,"base.strided.quinary( arrays, shape, strides, fcn )"
base.strided.quinary.ndarray,"base.strided.quinary.ndarray( arrays, shape, strides, offsets, fcn )"
base.strided.range,"base.strided.range( N, x, stride )"
base.strided.range.ndarray,"base.strided.range.ndarray( N, x, stride, offset )"
base.strided.rangeBy,"base.strided.rangeBy( N, x, stride, clbk[, thisArg] )"
base.strided.rangeBy.ndarray,"base.strided.rangeBy.ndarray( N, x, stride, offset, clbk[, thisArg] )"
base.strided.reinterpretComplex,"base.strided.reinterpretComplex( x, offset )"
base.strided.reinterpretComplex64,"base.strided.reinterpretComplex64( x, offset )"
base.strided.reinterpretComplex128,"base.strided.reinterpretComplex128( x, offset )"
base.strided.sabs,"base.strided.sabs( N, x, strideX, y, strideY )"
base.strided.sabs.ndarray,"base.strided.sabs.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.sabs2,"base.strided.sabs2( N, x, strideX, y, strideY )"
base.strided.sabs2.ndarray,"base.strided.sabs2.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.sapx,"base.strided.sapx( N, alpha, x, stride )"
base.strided.sapx.ndarray,"base.strided.sapx.ndarray( N, alpha, x, stride, offset )"
base.strided.sapxsum,"base.strided.sapxsum( N, alpha, x, stride )"
base.strided.sapxsum.ndarray,"base.strided.sapxsum.ndarray( N, alpha, x, stride, offset )"
base.strided.sapxsumkbn,"base.strided.sapxsumkbn( N, alpha, x, stride )"
base.strided.sapxsumkbn.ndarray,"base.strided.sapxsumkbn.ndarray( N, alpha, x, stride, offset )"
base.strided.sapxsumkbn2,"base.strided.sapxsumkbn2( N, alpha, x, stride )"
base.strided.sapxsumkbn2.ndarray,"base.strided.sapxsumkbn2.ndarray( N, alpha, x, stride, offset )"
base.strided.sapxsumors,"base.strided.sapxsumors( N, alpha, x, stride )"
base.strided.sapxsumors.ndarray,"base.strided.sapxsumors.ndarray( N, alpha, x, stride, offset )"
base.strided.sapxsumpw,"base.strided.sapxsumpw( N, alpha, x, stride )"
base.strided.sapxsumpw.ndarray,"base.strided.sapxsumpw.ndarray( N, alpha, x, stride, offset )"
base.strided.sasum,"base.strided.sasum( N, x, stride )"
base.strided.sasum.ndarray,"base.strided.sasum.ndarray( N, x, stride, offset )"
base.strided.sasumpw,"base.strided.sasumpw( N, x, stride )"
base.strided.sasumpw.ndarray,"base.strided.sasumpw.ndarray( N, x, stride, offset )"
base.strided.saxpy,"base.strided.saxpy( N, alpha, x, strideX, y, strideY )"
base.strided.saxpy.ndarray,"base.strided.saxpy.ndarray( N, alpha, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.scbrt,"base.strided.scbrt( N, x, strideX, y, strideY )"
base.strided.scbrt.ndarray,"base.strided.scbrt.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.sceil,"base.strided.sceil( N, x, strideX, y, strideY )"
base.strided.sceil.ndarray,"base.strided.sceil.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.scopy,"base.strided.scopy( N, x, strideX, y, strideY )"
base.strided.scopy.ndarray,"base.strided.scopy.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.scumax,"base.strided.scumax( N, x, strideX, y, strideY )"
base.strided.scumax.ndarray,"base.strided.scumax.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.scumaxabs,"base.strided.scumaxabs( N, x, strideX, y, strideY )"
base.strided.scumaxabs.ndarray,"base.strided.scumaxabs.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.scumin,"base.strided.scumin( N, x, strideX, y, strideY )"
base.strided.scumin.ndarray,"base.strided.scumin.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.scuminabs,"base.strided.scuminabs( N, x, strideX, y, strideY )"
base.strided.scuminabs.ndarray,"base.strided.scuminabs.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.scusum,"base.strided.scusum( N, sum, x, strideX, y, strideY )"
base.strided.scusum.ndarray,"base.strided.scusum.ndarray( N, sum, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.scusumkbn,"base.strided.scusumkbn( N, sum, x, strideX, y, strideY )"
base.strided.scusumkbn.ndarray,"base.strided.scusumkbn.ndarray( N, sum, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.scusumkbn2,"base.strided.scusumkbn2( N, sum, x, strideX, y, strideY )"
base.strided.scusumkbn2.ndarray,"base.strided.scusumkbn2.ndarray( N, sum, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.scusumors,"base.strided.scusumors( N, sum, x, strideX, y, strideY )"
base.strided.scusumors.ndarray,"base.strided.scusumors.ndarray( N, sum, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.scusumpw,"base.strided.scusumpw( N, sum, x, strideX, y, strideY )"
base.strided.scusumpw.ndarray,"base.strided.scusumpw.ndarray( N, sum, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.sdeg2rad,"base.strided.sdeg2rad( N, x, strideX, y, strideY )"
base.strided.sdeg2rad.ndarray,"base.strided.sdeg2rad.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.sdot,"base.strided.sdot( N, x, strideX, y, strideY )"
base.strided.sdot.ndarray,"base.strided.sdot.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.sdsapxsum,"base.strided.sdsapxsum( N, alpha, x, stride )"
base.strided.sdsapxsum.ndarray,"base.strided.sdsapxsum.ndarray( N, alpha, x, stride, offset )"
base.strided.sdsapxsumpw,"base.strided.sdsapxsumpw( N, alpha, x, stride )"
base.strided.sdsapxsumpw.ndarray,"base.strided.sdsapxsumpw.ndarray( N, alpha, x, stride, offset )"
base.strided.sdsdot,"base.strided.sdsdot( N, scalar, x, strideX, y, strideY )"
base.strided.sdsdot.ndarray,"base.strided.sdsdot.ndarray( N, scalar, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.sdsmean,"base.strided.sdsmean( N, x, stride )"
base.strided.sdsmean.ndarray,"base.strided.sdsmean.ndarray( N, x, stride, offset )"
base.strided.sdsmeanors,"base.strided.sdsmeanors( N, x, stride )"
base.strided.sdsmeanors.ndarray,"base.strided.sdsmeanors.ndarray( N, x, stride, offset )"
base.strided.sdsnanmean,"base.strided.sdsnanmean( N, x, stride )"
base.strided.sdsnanmean.ndarray,"base.strided.sdsnanmean.ndarray( N, x, stride, offset )"
base.strided.sdsnanmeanors,"base.strided.sdsnanmeanors( N, x, stride )"
base.strided.sdsnanmeanors.ndarray,"base.strided.sdsnanmeanors.ndarray( N, x, stride, offset )"
base.strided.sdsnansum,"base.strided.sdsnansum( N, x, stride )"
base.strided.sdsnansum.ndarray,"base.strided.sdsnansum.ndarray( N, x, stride, offset )"
base.strided.sdsnansumpw,"base.strided.sdsnansumpw( N, x, stride )"
base.strided.sdsnansumpw.ndarray,"base.strided.sdsnansumpw.ndarray( N, x, stride, offset )"
base.strided.sdssum,"base.strided.sdssum( N, x, stride )"
base.strided.sdssum.ndarray,"base.strided.sdssum.ndarray( N, x, stride, offset )"
base.strided.sdssumpw,"base.strided.sdssumpw( N, x, stride )"
base.strided.sdssumpw.ndarray,"base.strided.sdssumpw.ndarray( N, x, stride, offset )"
base.strided.sfill,"base.strided.sfill( N, alpha, x, stride )"
base.strided.sfill.ndarray,"base.strided.sfill.ndarray( N, alpha, x, stride, offset )"
base.strided.sfloor,"base.strided.sfloor( N, x, strideX, y, strideY )"
base.strided.sfloor.ndarray,"base.strided.sfloor.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.sinv,"base.strided.sinv( N, x, strideX, y, strideY )"
base.strided.sinv.ndarray,"base.strided.sinv.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.smap,"base.strided.smap( N, x, strideX, y, strideY, fcn )"
base.strided.smap.ndarray,"base.strided.smap.ndarray( N, x, strideX, offsetX, y, strideY, offsetY, fcn )"
base.strided.smap2,"base.strided.smap2( N, x, sx, y, sy, z, sz, fcn )"
base.strided.smap2.ndarray,"base.strided.smap2.ndarray( N, x, sx, ox, y, sy, oy, z, sz, oz, fcn )"
base.strided.smax,"base.strided.smax( N, x, stride )"
base.strided.smax.ndarray,"base.strided.smax.ndarray( N, x, stride, offset )"
base.strided.smaxabs,"base.strided.smaxabs( N, x, stride )"
base.strided.smaxabs.ndarray,"base.strided.smaxabs.ndarray( N, x, stride, offset )"
base.strided.smaxabssorted,"base.strided.smaxabssorted( N, x, stride )"
base.strided.smaxabssorted.ndarray,"base.strided.smaxabssorted.ndarray( N, x, stride, offset )"
base.strided.smaxsorted,"base.strided.smaxsorted( N, x, stride )"
base.strided.smaxsorted.ndarray,"base.strided.smaxsorted.ndarray( N, x, stride, offset )"
base.strided.smean,"base.strided.smean( N, x, stride )"
base.strided.smean.ndarray,"base.strided.smean.ndarray( N, x, stride, offset )"
base.strided.smeankbn,"base.strided.smeankbn( N, x, stride )"
base.strided.smeankbn.ndarray,"base.strided.smeankbn.ndarray( N, x, stride, offset )"
base.strided.smeankbn2,"base.strided.smeankbn2( N, x, stride )"
base.strided.smeankbn2.ndarray,"base.strided.smeankbn2.ndarray( N, x, stride, offset )"
base.strided.smeanli,"base.strided.smeanli( N, x, stride )"
base.strided.smeanli.ndarray,"base.strided.smeanli.ndarray( N, x, stride, offset )"
base.strided.smeanlipw,"base.strided.smeanlipw( N, x, stride )"
base.strided.smeanlipw.ndarray,"base.strided.smeanlipw.ndarray( N, x, stride, offset )"
base.strided.smeanors,"base.strided.smeanors( N, x, stride )"
base.strided.smeanors.ndarray,"base.strided.smeanors.ndarray( N, x, stride, offset )"
base.strided.smeanpn,"base.strided.smeanpn( N, x, stride )"
base.strided.smeanpn.ndarray,"base.strided.smeanpn.ndarray( N, x, stride, offset )"
base.strided.smeanpw,"base.strided.smeanpw( N, x, stride )"
base.strided.smeanpw.ndarray,"base.strided.smeanpw.ndarray( N, x, stride, offset )"
base.strided.smeanwd,"base.strided.smeanwd( N, x, stride )"
base.strided.smeanwd.ndarray,"base.strided.smeanwd.ndarray( N, x, stride, offset )"
base.strided.smediansorted,"base.strided.smediansorted( N, x, stride )"
base.strided.smediansorted.ndarray,"base.strided.smediansorted.ndarray( N, x, stride, offset )"
base.strided.smidrange,"base.strided.smidrange( N, x, stride )"
base.strided.smidrange.ndarray,"base.strided.smidrange.ndarray( N, x, stride, offset )"
base.strided.smin,"base.strided.smin( N, x, stride )"
base.strided.smin.ndarray,"base.strided.smin.ndarray( N, x, stride, offset )"
base.strided.sminabs,"base.strided.sminabs( N, x, stride )"
base.strided.sminabs.ndarray,"base.strided.sminabs.ndarray( N, x, stride, offset )"
base.strided.sminsorted,"base.strided.sminsorted( N, x, stride )"
base.strided.sminsorted.ndarray,"base.strided.sminsorted.ndarray( N, x, stride, offset )"
base.strided.smskabs,"base.strided.smskabs( N, x, sx, m, sm, y, sy )"
base.strided.smskabs.ndarray,"base.strided.smskabs.ndarray( N, x, sx, ox, m, sm, om, y, sy, oy )"
base.strided.smskabs2,"base.strided.smskabs2( N, x, sx, m, sm, y, sy )"
base.strided.smskabs2.ndarray,"base.strided.smskabs2.ndarray( N, x, sx, ox, m, sm, om, y, sy, oy )"
base.strided.smskcbrt,"base.strided.smskcbrt( N, x, sx, m, sm, y, sy )"
base.strided.smskcbrt.ndarray,"base.strided.smskcbrt.ndarray( N, x, sx, ox, m, sm, om, y, sy, oy )"
base.strided.smskceil,"base.strided.smskceil( N, x, sx, m, sm, y, sy )"
base.strided.smskceil.ndarray,"base.strided.smskceil.ndarray( N, x, sx, ox, m, sm, om, y, sy, oy )"
base.strided.smskdeg2rad,"base.strided.smskdeg2rad( N, x, sx, m, sm, y, sy )"
base.strided.smskdeg2rad.ndarray,"base.strided.smskdeg2rad.ndarray( N, x, sx, ox, m, sm, om, y, sy, oy )"
base.strided.smskfloor,"base.strided.smskfloor( N, x, sx, m, sm, y, sy )"
base.strided.smskfloor.ndarray,"base.strided.smskfloor.ndarray( N, x, sx, ox, m, sm, om, y, sy, oy )"
base.strided.smskinv,"base.strided.smskinv( N, x, sx, m, sm, y, sy )"
base.strided.smskinv.ndarray,"base.strided.smskinv.ndarray( N, x, sx, ox, m, sm, om, y, sy, oy )"
base.strided.smskmap,"base.strided.smskmap( N, x, sx, m, sm, y, sy, fcn )"
base.strided.smskmap.ndarray,"base.strided.smskmap.ndarray( N, x, sx, ox, m, sm, om, y, sy, oy, fcn )"
base.strided.smskmap2,"base.strided.smskmap2( N, x, sx, y, sy, m, sm, z, sz, fcn )"
base.strided.smskmap2.ndarray,"base.strided.smskmap2.ndarray( N, x, sx, ox, y, sy, oy, m, sm, om, z, sz, oz, fcn )"
base.strided.smskmax,"base.strided.smskmax( N, x, strideX, mask, strideMask )"
base.strided.smskmax.ndarray,"base.strided.smskmax.ndarray( N, x, strideX, offsetX, mask, strideMask, offsetMask )"
base.strided.smskmin,"base.strided.smskmin( N, x, strideX, mask, strideMask )"
base.strided.smskmin.ndarray,"base.strided.smskmin.ndarray( N, x, strideX, offsetX, mask, strideMask, offsetMask )"
base.strided.smskramp,"base.strided.smskramp( N, x, sx, m, sm, y, sy )"
base.strided.smskramp.ndarray,"base.strided.smskramp.ndarray( N, x, sx, ox, m, sm, om, y, sy, oy )"
base.strided.smskrange,"base.strided.smskrange( N, x, strideX, mask, strideMask )"
base.strided.smskrange.ndarray,"base.strided.smskrange.ndarray( N, x, strideX, offsetX, mask, strideMask, offsetMask )"
base.strided.smskrsqrt,"base.strided.smskrsqrt( N, x, sx, m, sm, y, sy )"
base.strided.smskrsqrt.ndarray,"base.strided.smskrsqrt.ndarray( N, x, sx, ox, m, sm, om, y, sy, oy )"
base.strided.smsksqrt,"base.strided.smsksqrt( N, x, sx, m, sm, y, sy )"
base.strided.smsksqrt.ndarray,"base.strided.smsksqrt.ndarray( N, x, sx, ox, m, sm, om, y, sy, oy )"
base.strided.smsktrunc,"base.strided.smsktrunc( N, x, sx, m, sm, y, sy )"
base.strided.smsktrunc.ndarray,"base.strided.smsktrunc.ndarray( N, x, sx, ox, m, sm, om, y, sy, oy )"
base.strided.snanmax,"base.strided.snanmax( N, x, stride )"
base.strided.snanmax.ndarray,"base.strided.snanmax.ndarray( N, x, stride, offset )"
base.strided.snanmaxabs,"base.strided.snanmaxabs( N, x, stride )"
base.strided.snanmaxabs.ndarray,"base.strided.snanmaxabs.ndarray( N, x, stride, offset )"
base.strided.snanmean,"base.strided.snanmean( N, x, stride )"
base.strided.snanmean.ndarray,"base.strided.snanmean.ndarray( N, x, stride, offset )"
base.strided.snanmeanors,"base.strided.snanmeanors( N, x, stride )"
base.strided.snanmeanors.ndarray,"base.strided.snanmeanors.ndarray( N, x, stride, offset )"
base.strided.snanmeanpn,"base.strided.snanmeanpn( N, x, stride )"
base.strided.snanmeanpn.ndarray,"base.strided.snanmeanpn.ndarray( N, x, stride, offset )"
base.strided.snanmeanwd,"base.strided.snanmeanwd( N, x, stride )"
base.strided.snanmeanwd.ndarray,"base.strided.snanmeanwd.ndarray( N, x, stride, offset )"
base.strided.snanmin,"base.strided.snanmin( N, x, stride )"
base.strided.snanmin.ndarray,"base.strided.snanmin.ndarray( N, x, stride, offset )"
base.strided.snanminabs,"base.strided.snanminabs( N, x, stride )"
base.strided.snanminabs.ndarray,"base.strided.snanminabs.ndarray( N, x, stride, offset )"
base.strided.snanmskmax,"base.strided.snanmskmax( N, x, strideX, mask, strideMask )"
base.strided.snanmskmax.ndarray,"base.strided.snanmskmax.ndarray( N, x, strideX, offsetX, mask, strideMask, offsetMask )"
base.strided.snanmskmin,"base.strided.snanmskmin( N, x, strideX, mask, strideMask )"
base.strided.snanmskmin.ndarray,"base.strided.snanmskmin.ndarray( N, x, strideX, offsetX, mask, strideMask, offsetMask )"
base.strided.snanmskrange,"base.strided.snanmskrange( N, x, strideX, mask, strideMask )"
base.strided.snanmskrange.ndarray,"base.strided.snanmskrange.ndarray( N, x, strideX, offsetX, mask, strideMask, offsetMask )"
base.strided.snanrange,"base.strided.snanrange( N, x, stride )"
base.strided.snanrange.ndarray,"base.strided.snanrange.ndarray( N, x, stride, offset )"
base.strided.snanstdev,"base.strided.snanstdev( N, correction, x, stride )"
base.strided.snanstdev.ndarray,"base.strided.snanstdev.ndarray( N, correction, x, stride, offset )"
base.strided.snanstdevch,"base.strided.snanstdevch( N, correction, x, stride )"
base.strided.snanstdevch.ndarray,"base.strided.snanstdevch.ndarray( N, correction, x, stride, offset )"
base.strided.snanstdevpn,"base.strided.snanstdevpn( N, correction, x, stride )"
base.strided.snanstdevpn.ndarray,"base.strided.snanstdevpn.ndarray( N, correction, x, stride, offset )"
base.strided.snanstdevtk,"base.strided.snanstdevtk( N, correction, x, stride )"
base.strided.snanstdevtk.ndarray,"base.strided.snanstdevtk.ndarray( N, correction, x, stride, offset )"
base.strided.snanstdevwd,"base.strided.snanstdevwd( N, correction, x, stride )"
base.strided.snanstdevwd.ndarray,"base.strided.snanstdevwd.ndarray( N, correction, x, stride, offset )"
base.strided.snanstdevyc,"base.strided.snanstdevyc( N, correction, x, stride )"
base.strided.snanstdevyc.ndarray,"base.strided.snanstdevyc.ndarray( N, correction, x, stride, offset )"
base.strided.snansum,"base.strided.snansum( N, x, stride )"
base.strided.snansum.ndarray,"base.strided.snansum.ndarray( N, x, stride, offset )"
base.strided.snansumkbn,"base.strided.snansumkbn( N, x, stride )"
base.strided.snansumkbn.ndarray,"base.strided.snansumkbn.ndarray( N, x, stride, offset )"
base.strided.snansumkbn2,"base.strided.snansumkbn2( N, x, stride )"
base.strided.snansumkbn2.ndarray,"base.strided.snansumkbn2.ndarray( N, x, stride, offset )"
base.strided.snansumors,"base.strided.snansumors( N, x, stride )"
base.strided.snansumors.ndarray,"base.strided.snansumors.ndarray( N, x, stride, offset )"
base.strided.snansumpw,"base.strided.snansumpw( N, x, stride )"
base.strided.snansumpw.ndarray,"base.strided.snansumpw.ndarray( N, x, stride, offset )"
base.strided.snanvariance,"base.strided.snanvariance( N, correction, x, stride )"
base.strided.snanvariance.ndarray,"base.strided.snanvariance.ndarray( N, correction, x, stride, offset )"
base.strided.snanvariancech,"base.strided.snanvariancech( N, correction, x, stride )"
base.strided.snanvariancech.ndarray,"base.strided.snanvariancech.ndarray( N, correction, x, stride, offset )"
base.strided.snanvariancepn,"base.strided.snanvariancepn( N, correction, x, stride )"
base.strided.snanvariancepn.ndarray,"base.strided.snanvariancepn.ndarray( N, correction, x, stride, offset )"
base.strided.snanvariancetk,"base.strided.snanvariancetk( N, correction, x, stride )"
base.strided.snanvariancetk.ndarray,"base.strided.snanvariancetk.ndarray( N, correction, x, stride, offset )"
base.strided.snanvariancewd,"base.strided.snanvariancewd( N, correction, x, stride )"
base.strided.snanvariancewd.ndarray,"base.strided.snanvariancewd.ndarray( N, correction, x, stride, offset )"
base.strided.snanvarianceyc,"base.strided.snanvarianceyc( N, correction, x, stride )"
base.strided.snanvarianceyc.ndarray,"base.strided.snanvarianceyc.ndarray( N, correction, x, stride, offset )"
base.strided.snrm2,"base.strided.snrm2( N, x, stride )"
base.strided.snrm2.ndarray,"base.strided.snrm2.ndarray( N, x, stride, offset )"
base.strided.sramp,"base.strided.sramp( N, x, strideX, y, strideY )"
base.strided.sramp.ndarray,"base.strided.sramp.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.srange,"base.strided.srange( N, x, stride )"
base.strided.srange.ndarray,"base.strided.srange.ndarray( N, x, stride, offset )"
base.strided.srev,"base.strided.srev( N, x, stride )"
base.strided.srev.ndarray,"base.strided.srev.ndarray( N, x, stride, offset )"
base.strided.srsqrt,"base.strided.srsqrt( N, x, strideX, y, strideY )"
base.strided.srsqrt.ndarray,"base.strided.srsqrt.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.sscal,"base.strided.sscal( N, alpha, x, stride )"
base.strided.sscal.ndarray,"base.strided.sscal.ndarray( N, alpha, x, stride, offset )"
base.strided.ssort2hp,"base.strided.ssort2hp( N, order, x, strideX, y, strideY )"
base.strided.ssort2hp.ndarray,"base.strided.ssort2hp.ndarray( N, order, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.ssort2ins,"base.strided.ssort2ins( N, order, x, strideX, y, strideY )"
base.strided.ssort2ins.ndarray,"base.strided.ssort2ins.ndarray( N, order, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.ssort2sh,"base.strided.ssort2sh( N, order, x, strideX, y, strideY )"
base.strided.ssort2sh.ndarray,"base.strided.ssort2sh.ndarray( N, order, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.ssorthp,"base.strided.ssorthp( N, order, x, stride )"
base.strided.ssorthp.ndarray,"base.strided.ssorthp.ndarray( N, order, x, stride, offset )"
base.strided.ssortins,"base.strided.ssortins( N, order, x, stride )"
base.strided.ssortins.ndarray,"base.strided.ssortins.ndarray( N, order, x, stride, offset )"
base.strided.ssortsh,"base.strided.ssortsh( N, order, x, stride )"
base.strided.ssortsh.ndarray,"base.strided.ssortsh.ndarray( N, order, x, stride, offset )"
base.strided.ssqrt,"base.strided.ssqrt( N, x, strideX, y, strideY )"
base.strided.ssqrt.ndarray,"base.strided.ssqrt.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.sstdev,"base.strided.sstdev( N, correction, x, stride )"
base.strided.sstdev.ndarray,"base.strided.sstdev.ndarray( N, correction, x, stride, offset )"
base.strided.sstdevch,"base.strided.sstdevch( N, correction, x, stride )"
base.strided.sstdevch.ndarray,"base.strided.sstdevch.ndarray( N, correction, x, stride, offset )"
base.strided.sstdevpn,"base.strided.sstdevpn( N, correction, x, stride )"
base.strided.sstdevpn.ndarray,"base.strided.sstdevpn.ndarray( N, correction, x, stride, offset )"
base.strided.sstdevtk,"base.strided.sstdevtk( N, correction, x, stride )"
base.strided.sstdevtk.ndarray,"base.strided.sstdevtk.ndarray( N, correction, x, stride, offset )"
base.strided.sstdevwd,"base.strided.sstdevwd( N, correction, x, stride )"
base.strided.sstdevwd.ndarray,"base.strided.sstdevwd.ndarray( N, correction, x, stride, offset )"
base.strided.sstdevyc,"base.strided.sstdevyc( N, correction, x, stride )"
base.strided.sstdevyc.ndarray,"base.strided.sstdevyc.ndarray( N, correction, x, stride, offset )"
base.strided.ssum,"base.strided.ssum( N, x, stride )"
base.strided.ssum.ndarray,"base.strided.ssum.ndarray( N, x, stride, offset )"
base.strided.ssumkbn,"base.strided.ssumkbn( N, x, stride )"
base.strided.ssumkbn.ndarray,"base.strided.ssumkbn.ndarray( N, x, stride, offset )"
base.strided.ssumkbn2,"base.strided.ssumkbn2( N, x, stride )"
base.strided.ssumkbn2.ndarray,"base.strided.ssumkbn2.ndarray( N, x, stride, offset )"
base.strided.ssumors,"base.strided.ssumors( N, x, stride )"
base.strided.ssumors.ndarray,"base.strided.ssumors.ndarray( N, x, stride, offset )"
base.strided.ssumpw,"base.strided.ssumpw( N, x, stride )"
base.strided.ssumpw.ndarray,"base.strided.ssumpw.ndarray( N, x, stride, offset )"
base.strided.sswap,"base.strided.sswap( N, x, strideX, y, strideY )"
base.strided.sswap.ndarray,"base.strided.sswap.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.stdev,"base.strided.stdev( N, correction, x, stride )"
base.strided.stdev.ndarray,"base.strided.stdev.ndarray( N, correction, x, stride, offset )"
base.strided.stdevch,"base.strided.stdevch( N, correction, x, stride )"
base.strided.stdevch.ndarray,"base.strided.stdevch.ndarray( N, correction, x, stride, offset )"
base.strided.stdevpn,"base.strided.stdevpn( N, correction, x, stride )"
base.strided.stdevpn.ndarray,"base.strided.stdevpn.ndarray( N, correction, x, stride, offset )"
base.strided.stdevtk,"base.strided.stdevtk( N, correction, x, stride )"
base.strided.stdevtk.ndarray,"base.strided.stdevtk.ndarray( N, correction, x, stride, offset )"
base.strided.stdevwd,"base.strided.stdevwd( N, correction, x, stride )"
base.strided.stdevwd.ndarray,"base.strided.stdevwd.ndarray( N, correction, x, stride, offset )"
base.strided.stdevyc,"base.strided.stdevyc( N, correction, x, stride )"
base.strided.stdevyc.ndarray,"base.strided.stdevyc.ndarray( N, correction, x, stride, offset )"
base.strided.strunc,"base.strided.strunc( N, x, strideX, y, strideY )"
base.strided.strunc.ndarray,"base.strided.strunc.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )"
base.strided.svariance,"base.strided.svariance( N, correction, x, stride )"
base.strided.svariance.ndarray,"base.strided.svariance.ndarray( N, correction, x, stride, offset )"
base.strided.svariancech,"base.strided.svariancech( N, correction, x, stride )"
base.strided.svariancech.ndarray,"base.strided.svariancech.ndarray( N, correction, x, stride, offset )"
base.strided.svariancepn,"base.strided.svariancepn( N, correction, x, stride )"
base.strided.svariancepn.ndarray,"base.strided.svariancepn.ndarray( N, correction, x, stride, offset )"
base.strided.svariancetk,"base.strided.svariancetk( N, correction, x, stride )"
base.strided.svariancetk.ndarray,"base.strided.svariancetk.ndarray( N, correction, x, stride, offset )"
base.strided.svariancewd,"base.strided.svariancewd( N, correction, x, stride )"
base.strided.svariancewd.ndarray,"base.strided.svariancewd.ndarray( N, correction, x, stride, offset )"
base.strided.svarianceyc,"base.strided.svarianceyc( N, correction, x, stride )"
base.strided.svarianceyc.ndarray,"base.strided.svarianceyc.ndarray( N, correction, x, stride, offset )"
base.strided.ternary,"base.strided.ternary( arrays, shape, strides, fcn )"
base.strided.ternary.ndarray,"base.strided.ternary.ndarray( arrays, shape, strides, offsets, fcn )"
base.strided.unary,"base.strided.unary( arrays, shape, strides, fcn )"
base.strided.unary.ndarray,"base.strided.unary.ndarray( arrays, shape, strides, offsets, fcn )"
base.strided.unaryBy,"base.strided.unaryBy( arrays, shape, strides, fcn, clbk[, thisArg] )"
base.strided.unaryBy.ndarray,"base.strided.unaryBy.ndarray( arrays, shape, strides, offsets, fcn, clbk[, thisArg] )"
base.strided.unaryDtypeSignatures,"base.strided.unaryDtypeSignatures( dtypes1, dtypes2[, options] )"
base.strided.unarySignatureCallbacks,"base.strided.unarySignatureCallbacks( table, signatures )"
base.strided.variance,"base.strided.variance( N, correction, x, stride )"
base.strided.variance.ndarray,"base.strided.variance.ndarray( N, correction, x, stride, offset )"
base.strided.variancech,"base.strided.variancech( N, correction, x, stride )"
base.strided.variancech.ndarray,"base.strided.variancech.ndarray( N, correction, x, stride, offset )"
base.strided.variancepn,"base.strided.variancepn( N, correction, x, stride )"
base.strided.variancepn.ndarray,"base.strided.variancepn.ndarray( N, correction, x, stride, offset )"
base.strided.variancetk,"base.strided.variancetk( N, correction, x, stride )"
base.strided.variancetk.ndarray,"base.strided.variancetk.ndarray( N, correction, x, stride, offset )"
base.strided.variancewd,"base.strided.variancewd( N, correction, x, stride )"
base.strided.variancewd.ndarray,"base.strided.variancewd.ndarray( N, correction, x, stride, offset )"
base.strided.varianceyc,"base.strided.varianceyc( N, correction, x, stride )"
base.strided.varianceyc.ndarray,"base.strided.varianceyc.ndarray( N, correction, x, stride, offset )"
base.strided.zmap,"base.strided.zmap( N, x, strideX, y, strideY, fcn )"
base.strided.zmap.ndarray,"base.strided.zmap.ndarray( N, x, strideX, offsetX, y, strideY, offsetY, fcn )"
base.str2multislice,"base.str2multislice( str )"
base.str2slice,"base.str2slice( str )"
base.sub,"base.sub( x, y )"
base.subf,"base.subf( x, y )"
base.sumSeries,"base.sumSeries( generator[, options] )"
base.tan,"base.tan( x )"
base.tand,"base.tand( x )"
base.tanh,"base.tanh( x )"
base.toBinaryString,"base.toBinaryString( x )"
base.toBinaryStringf,"base.toBinaryStringf( x )"
base.toBinaryStringUint8,"base.toBinaryStringUint8( x )"
base.toBinaryStringUint16,"base.toBinaryStringUint16( x )"
base.toBinaryStringUint32,"base.toBinaryStringUint32( x )"
base.toWordf,"base.toWordf( x )"
base.toWords,"base.toWords( x )"
base.toWords.assign,"base.toWords.assign( x, out, stride, offset )"
base.transpose,"base.transpose( x )"
base.tribonacci,"base.tribonacci( n )"
base.trigamma,"base.trigamma( x )"
base.trim,"base.trim( str )"
base.trunc,"base.trunc( x )"
base.trunc2,"base.trunc2( x )"
base.trunc10,"base.trunc10( x )"
base.truncateMiddle,"base.truncateMiddle( str, len, seq )"
base.truncb,"base.truncb( x, n, b )"
base.truncf,"base.truncf( x )"
base.truncn,"base.truncn( x, n )"
base.truncsd,"base.truncsd( x, n[, b] )"
base.uint32ToInt32,"base.uint32ToInt32( x )"
base.umul,"base.umul( a, b )"
base.umuldw,"base.umuldw( a, b )"
base.umuldw.assign,"base.umuldw.assign( a, b, out, stride, offset )"
base.uncapitalize,"base.uncapitalize( str )"
base.uppercase,"base.uppercase( str )"
base.vercos,"base.vercos( x )"
base.versin,"base.versin( x )"
base.wrap,"base.wrap( v, min, max )"
base.xlog1py,"base.xlog1py( x, y )"
base.xlogy,"base.xlogy( x, y )"
base.zeta,"base.zeta( s )"
BERNDT_CPS_WAGES_1985,"BERNDT_CPS_WAGES_1985()"
bifurcate,"bifurcate( collection, [options,] filter )"
bifurcateBy,"bifurcateBy( collection, [options,] predicate )"
bifurcateByAsync,"bifurcateByAsync( collection, [options,] predicate, done )"
bifurcateByAsync.factory,"bifurcateByAsync.factory( [options,] predicate )"
bifurcateIn,"bifurcateIn( obj, [options,] predicate )"
bifurcateOwn,"bifurcateOwn( obj, [options,] predicate )"
BigInt,"BigInt( value )"
binomialTest,"binomialTest( x[, n][, options] )"
Boolean,"Boolean( value )"
Boolean.prototype.toString,"Boolean.prototype.toString()"
Boolean.prototype.valueOf,"Boolean.prototype.valueOf()"
BooleanArray,"BooleanArray()"
BooleanArray,"BooleanArray( length )"
BooleanArray,"BooleanArray( booleanarray )"
BooleanArray,"BooleanArray( typedarray )"
BooleanArray,"BooleanArray( obj )"
BooleanArray,"BooleanArray( buffer[, byteOffset[, length]] )"
BooleanArray.from,"BooleanArray.from( src[, clbk[, thisArg]] )"
BooleanArray.of,"BooleanArray.of( element0[, element1[, ...elementN]] )"
BooleanArray.BYTES_PER_ELEMENT,"BooleanArray.BYTES_PER_ELEMENT"
BooleanArray.name,"BooleanArray.name"
BooleanArray.prototype.buffer,"BooleanArray.prototype.buffer"
BooleanArray.prototype.byteLength,"BooleanArray.prototype.byteLength"
BooleanArray.prototype.byteOffset,"BooleanArray.prototype.byteOffset"
BooleanArray.prototype.BYTES_PER_ELEMENT,"BooleanArray.prototype.BYTES_PER_ELEMENT"
BooleanArray.prototype.length,"BooleanArray.prototype.length"
BooleanArray.prototype.every,"BooleanArray.prototype.every( predicate[, thisArg] )"
BooleanArray.prototype.find,"BooleanArray.prototype.find( predicate[, thisArg] )"
BooleanArray.prototype.findIndex,"BooleanArray.prototype.findIndex( predicate[, thisArg] )"
BooleanArray.prototype.findLast,"BooleanArray.prototype.findLast( predicate[, thisArg] )"
BooleanArray.prototype.findLastIndex,"BooleanArray.prototype.findLastIndex( predicate[, thisArg] )"
BooleanArray.prototype.get,"BooleanArray.prototype.get( i )"
BooleanArray.prototype.indexOf,"BooleanArray.prototype.indexOf( searchElement[, fromIndex] )"
BooleanArray.prototype.lastIndexOf,"BooleanArray.prototype.lastIndexOf( searchElement[, fromIndex] )"
BooleanArray.prototype.map,"BooleanArray.prototype.map( clbk[, thisArg] )"
BooleanArray.prototype.reverse,"BooleanArray.prototype.reverse()"
BooleanArray.prototype.set,"BooleanArray.prototype.set( v[, i] )"
BooleanArray.prototype.some,"BooleanArray.prototype.some( predicate[, thisArg] )"
BooleanArray.prototype.sort,"BooleanArray.prototype.sort( [compareFunction] )"
BooleanArray.prototype.toReversed,"BooleanArray.prototype.toReversed()"
BooleanArray.prototype.toSorted,"BooleanArray.prototype.toSorted( [compareFunction] )"
broadcastArray,"broadcastArray( x, shape )"
broadcastArrays,"broadcastArrays( ...arrays )"
Buffer,"Buffer"
Buffer,"Buffer( size )"
Buffer,"Buffer( buffer )"
Buffer,"Buffer( array )"
Buffer,"Buffer( str[, encoding] )"
buffer2json,"buffer2json( buffer )"
BYTE_ORDER,"BYTE_ORDER"
camelcase,"camelcase( str )"
capitalize,"capitalize( str )"
capitalizeKeys,"capitalizeKeys( obj )"
CATALAN,"CATALAN"
CBRT_EPS,"CBRT_EPS"
CDC_NCHS_US_BIRTHS_1969_1988,"CDC_NCHS_US_BIRTHS_1969_1988()"
CDC_NCHS_US_BIRTHS_1994_2003,"CDC_NCHS_US_BIRTHS_1994_2003()"
CDC_NCHS_US_INFANT_MORTALITY_BW_1915_2013,"CDC_NCHS_US_INFANT_MORTALITY_BW_1915_2013()"
chdir,"chdir( path )"
chi2gof,"chi2gof( x, y[, ...args][, options] )"
chi2test,"chi2test( x[, options] )"
circarray2iterator,"circarray2iterator( src[, options][, mapFcn[, thisArg]] )"
circularArrayStream,"circularArrayStream( src[, options] )"
circularArrayStream.factory,"circularArrayStream.factory( [options] )"
circularArrayStream.objectMode,"circularArrayStream.objectMode( src[, options] )"
CircularBuffer,"CircularBuffer( buffer )"
CircularBuffer.prototype.clear,"CircularBuffer.prototype.clear()"
CircularBuffer.prototype.count,"CircularBuffer.prototype.count"
CircularBuffer.prototype.full,"CircularBuffer.prototype.full"
CircularBuffer.prototype.iterator,"CircularBuffer.prototype.iterator( [niters] )"
CircularBuffer.prototype.length,"CircularBuffer.prototype.length"
CircularBuffer.prototype.push,"CircularBuffer.prototype.push( value )"
CircularBuffer.prototype.toArray,"CircularBuffer.prototype.toArray()"
CircularBuffer.prototype.toJSON,"CircularBuffer.prototype.toJSON()"
close,"close( fd, clbk )"
close.sync,"close.sync( fd )"
CMUDICT,"CMUDICT( [options] )"
codePointAt,"codePointAt( str, idx[, backward] )"
commonKeys,"commonKeys( obj1, obj2[, ...obj] )"
commonKeysIn,"commonKeysIn( obj1, obj2[, ...obj] )"
complex,"complex( real, imag[, dtype] )"
Complex64,"Complex64( real, imag )"
Complex64.BYTES_PER_ELEMENT,"Complex64.BYTES_PER_ELEMENT"
Complex64.prototype.BYTES_PER_ELEMENT,"Complex64.prototype.BYTES_PER_ELEMENT"
Complex64.prototype.byteLength,"Complex64.prototype.byteLength"
COMPLEX64_NAN,"COMPLEX64_NAN"
COMPLEX64_NUM_BYTES,"COMPLEX64_NUM_BYTES"
COMPLEX64_ZERO,"COMPLEX64_ZERO"
Complex64Array,"Complex64Array()"
Complex64Array,"Complex64Array( length )"
Complex64Array,"Complex64Array( complexarray )"
Complex64Array,"Complex64Array( typedarray )"
Complex64Array,"Complex64Array( obj )"
Complex64Array,"Complex64Array( buffer[, byteOffset[, length]] )"
Complex64Array.from,"Complex64Array.from( src[, clbk[, thisArg]] )"
Complex64Array.of,"Complex64Array.of( element0[, element1[, ...elementN]] )"
Complex64Array.BYTES_PER_ELEMENT,"Complex64Array.BYTES_PER_ELEMENT"
Complex64Array.name,"Complex64Array.name"
Complex64Array.prototype.buffer,"Complex64Array.prototype.buffer"
Complex64Array.prototype.byteLength,"Complex64Array.prototype.byteLength"
Complex64Array.prototype.byteOffset,"Complex64Array.prototype.byteOffset"
Complex64Array.prototype.BYTES_PER_ELEMENT,"Complex64Array.prototype.BYTES_PER_ELEMENT"
Complex64Array.prototype.length,"Complex64Array.prototype.length"
Complex64Array.prototype.at,"Complex64Array.prototype.at( i )"
Complex64Array.prototype.copyWithin,"Complex64Array.prototype.copyWithin( target, start[, end] )"
Complex64Array.prototype.entries,"Complex64Array.prototype.entries()"
Complex64Array.prototype.every,"Complex64Array.prototype.every( predicate[, thisArg] )"
Complex64Array.prototype.fill,"Complex64Array.prototype.fill( value[, start[, end]] )"
Complex64Array.prototype.filter,"Complex64Array.prototype.filter( predicate[, thisArg] )"
Complex64Array.prototype.find,"Complex64Array.prototype.find( predicate[, thisArg] )"
Complex64Array.prototype.findIndex,"Complex64Array.prototype.findIndex( predicate[, thisArg] )"
Complex64Array.prototype.findLast,"Complex64Array.prototype.findLast( predicate[, thisArg] )"
Complex64Array.prototype.findLastIndex,"Complex64Array.prototype.findLastIndex( predicate[, thisArg] )"
Complex64Array.prototype.forEach,"Complex64Array.prototype.forEach( clbk[, thisArg] )"
Complex64Array.prototype.get,"Complex64Array.prototype.get( i )"
Complex64Array.prototype.includes,"Complex64Array.prototype.includes( searchElement[, fromIndex] )"
Complex64Array.prototype.indexOf,"Complex64Array.prototype.indexOf( searchElement[, fromIndex] )"
Complex64Array.prototype.join,"Complex64Array.prototype.join( [separator] )"
Complex64Array.prototype.keys,"Complex64Array.prototype.keys()"
Complex64Array.prototype.lastIndexOf,"Complex64Array.prototype.lastIndexOf( searchElement[, fromIndex] )"
Complex64Array.prototype.map,"Complex64Array.prototype.map( clbk[, thisArg] )"
Complex64Array.prototype.reduce,"Complex64Array.prototype.reduce( reducerFn[, initialValue] )"
Complex64Array.prototype.reduceRight,"Complex64Array.prototype.reduceRight( reducerFn[, initialValue] )"
Complex64Array.prototype.reverse,"Complex64Array.prototype.reverse()"
Complex64Array.prototype.set,"Complex64Array.prototype.set( z[, i] )"
Complex64Array.prototype.slice,"Complex64Array.prototype.slice( [start[, end]] )"
Complex64Array.prototype.some,"Complex64Array.prototype.some( predicate[, thisArg] )"
Complex64Array.prototype.sort,"Complex64Array.prototype.sort( compareFunction )"
Complex64Array.prototype.subarray,"Complex64Array.prototype.subarray( [begin[, end]] )"
Complex64Array.prototype.toLocaleString,"Complex64Array.prototype.toLocaleString( [locales[, options]] )"
Complex64Array.prototype.toReversed,"Complex64Array.prototype.toReversed()"
Complex64Array.prototype.toSorted,"Complex64Array.prototype.toSorted( compareFcn )"
Complex64Array.prototype.toString,"Complex64Array.prototype.toString()"
Complex64Array.prototype.values,"Complex64Array.prototype.values()"
Complex64Array.prototype.with,"Complex64Array.prototype.with( index, value )"
Complex128,"Complex128( real, imag )"
Complex128.BYTES_PER_ELEMENT,"Complex128.BYTES_PER_ELEMENT"
Complex128.prototype.BYTES_PER_ELEMENT,"Complex128.prototype.BYTES_PER_ELEMENT"
Complex128.prototype.byteLength,"Complex128.prototype.byteLength"
COMPLEX128_NAN,"COMPLEX128_NAN"
COMPLEX128_NUM_BYTES,"COMPLEX128_NUM_BYTES"
COMPLEX128_ZERO,"COMPLEX128_ZERO"
Complex128Array,"Complex128Array()"
Complex128Array,"Complex128Array( length )"
Complex128Array,"Complex128Array( complexarray )"
Complex128Array,"Complex128Array( typedarray )"
Complex128Array,"Complex128Array( obj )"
Complex128Array,"Complex128Array( buffer[, byteOffset[, length]] )"
Complex128Array.from,"Complex128Array.from( src[, clbk[, thisArg]] )"
Complex128Array.of,"Complex128Array.of( element0[, element1[, ...elementN]] )"
Complex128Array.BYTES_PER_ELEMENT,"Complex128Array.BYTES_PER_ELEMENT"
Complex128Array.name,"Complex128Array.name"
Complex128Array.prototype.buffer,"Complex128Array.prototype.buffer"
Complex128Array.prototype.byteLength,"Complex128Array.prototype.byteLength"
Complex128Array.prototype.byteOffset,"Complex128Array.prototype.byteOffset"
Complex128Array.prototype.BYTES_PER_ELEMENT,"Complex128Array.prototype.BYTES_PER_ELEMENT"
Complex128Array.prototype.length,"Complex128Array.prototype.length"
Complex128Array.prototype.at,"Complex128Array.prototype.at( i )"
Complex128Array.prototype.copyWithin,"Complex128Array.prototype.copyWithin( target, start[, end] )"
Complex128Array.prototype.entries,"Complex128Array.prototype.entries()"
Complex128Array.prototype.every,"Complex128Array.prototype.every( predicate[, thisArg] )"
Complex128Array.prototype.fill,"Complex128Array.prototype.fill( value[, start[, end]] )"
Complex128Array.prototype.filter,"Complex128Array.prototype.filter( predicate[, thisArg] )"
Complex128Array.prototype.find,"Complex128Array.prototype.find( predicate[, thisArg] )"
Complex128Array.prototype.findIndex,"Complex128Array.prototype.findIndex( predicate[, thisArg] )"
Complex128Array.prototype.findLast,"Complex128Array.prototype.findLast( predicate[, thisArg] )"
Complex128Array.prototype.findLastIndex,"Complex128Array.prototype.findLastIndex( predicate[, thisArg] )"
Complex128Array.prototype.forEach,"Complex128Array.prototype.forEach( clbk[, thisArg] )"
Complex128Array.prototype.get,"Complex128Array.prototype.get( i )"
Complex128Array.prototype.includes,"Complex128Array.prototype.includes( searchElement[, fromIndex] )"
Complex128Array.prototype.indexOf,"Complex128Array.prototype.indexOf( searchElement[, fromIndex] )"
Complex128Array.prototype.join,"Complex128Array.prototype.join( [separator] )"
Complex128Array.prototype.keys,"Complex128Array.prototype.keys()"
Complex128Array.prototype.lastIndexOf,"Complex128Array.prototype.lastIndexOf( searchElement[, fromIndex] )"
Complex128Array.prototype.map,"Complex128Array.prototype.map( clbk[, thisArg] )"
Complex128Array.prototype.reduce,"Complex128Array.prototype.reduce( reducerFn[, initialValue] )"
Complex128Array.prototype.reduceRight,"Complex128Array.prototype.reduceRight( reducerFn[, initialValue] )"
Complex128Array.prototype.reverse,"Complex128Array.prototype.reverse()"
Complex128Array.prototype.set,"Complex128Array.prototype.set( z[, i] )"
Complex128Array.prototype.slice,"Complex128Array.prototype.slice( [start[, end]] )"
Complex128Array.prototype.some,"Complex128Array.prototype.some( predicate[, thisArg] )"
Complex128Array.prototype.sort,"Complex128Array.prototype.sort( compareFunction )"
Complex128Array.prototype.subarray,"Complex128Array.prototype.subarray( [begin[, end]] )"
Complex128Array.prototype.toLocaleString,"Complex128Array.prototype.toLocaleString( [locales[, options]] )"
Complex128Array.prototype.toReversed,"Complex128Array.prototype.toReversed()"
Complex128Array.prototype.toSorted,"Complex128Array.prototype.toSorted( compareFcn )"
Complex128Array.prototype.toString,"Complex128Array.prototype.toString()"
Complex128Array.prototype.values,"Complex128Array.prototype.values()"
Complex128Array.prototype.with,"Complex128Array.prototype.with( index, value )"
complexarray,"complexarray( [dtype] )"
complexarray,"complexarray( length[, dtype] )"
complexarray,"complexarray( complexarray[, dtype] )"
complexarray,"complexarray( obj[, dtype] )"
complexarray,"complexarray( buffer[, byteOffset[, length]][, dtype] )"
complexarrayCtors,"complexarrayCtors( dtype )"
complexarrayDataTypes,"complexarrayDataTypes()"
complexCtors,"complexCtors( dtype )"
complexDataType,"complexDataType( value )"
complexDataTypes,"complexDataTypes()"
complexPromotionRules,"complexPromotionRules( [dtype1, dtype2] )"
compose,"compose( ...f )"
composeAsync,"composeAsync( ...f )"
configdir,"configdir( [p] )"
conj,"conj( z )"
conjf,"conjf( z )"
constantcase,"constantcase( str )"
constantFunction,"constantFunction( val )"
constantStream,"constantStream( value[, options] )"
constantStream.factory,"constantStream.factory( [value, ][options] )"
constantStream.objectMode,"constantStream.objectMode( value[, options] )"
constructorName,"constructorName( val )"
contains,"contains( val, searchValue[, position] )"
convertArray,"convertArray( arr, dtype )"
convertArraySame,"convertArraySame( x, y )"
convertPath,"convertPath( from, to )"
copy,"copy( value[, level] )"
copyBuffer,"copyBuffer( buffer )"
countBy,"countBy( collection, [options,] indicator )"
countByAsync,"countByAsync( collection, [options,] indicator, done )"
countByAsync.factory,"countByAsync.factory( [options,] indicator )"
currentYear,"currentYear()"
curry,"curry( fcn[, arity][, thisArg] )"
curryRight,"curryRight( fcn[, arity][, thisArg] )"
cwd,"cwd()"
DALE_CHALL_NEW,"DALE_CHALL_NEW()"
datasets,"datasets( name[, options] )"
DataView,"DataView( buffer[, byteOffset[, byteLength]] )"
DataView.prototype.buffer,"DataView.prototype.buffer"
DataView.prototype.byteLength,"DataView.prototype.byteLength"
DataView.prototype.byteOffset,"DataView.prototype.byteOffset"
datespace,"datespace( start, stop[, length][ , options] )"
dayOfQuarter,"dayOfQuarter( [month[, day, year]] )"
dayOfYear,"dayOfYear( [month[, day, year]] )"
daysInMonth,"daysInMonth( [month[, year]] )"
daysInYear,"daysInYear( [value] )"
ddot,"ddot( x, y )"
debugSinkStream,"debugSinkStream( [options,] [clbk] )"
debugSinkStream.factory,"debugSinkStream.factory( [options] )"
debugSinkStream.objectMode,"debugSinkStream.objectMode( [options,] [clbk] )"
debugStream,"debugStream( [options,] [clbk] )"
debugStream.factory,"debugStream.factory( [options] )"
debugStream.objectMode,"debugStream.objectMode( [options,] [clbk] )"
decorateAfter,"decorateAfter( fcn, arity, after[, thisArg] )"
decorateAfter.factory,"decorateAfter.factory( fcn, arity, after[, thisArg] )"
deepEqual,"deepEqual( a, b )"
deepGet,"deepGet( obj, path[, options] )"
deepGet.factory,"deepGet.factory( path[, options] )"
deepHasOwnProp,"deepHasOwnProp( value, path[, options] )"
deepHasOwnProp.factory,"deepHasOwnProp.factory( path[, options] )"
deepHasProp,"deepHasProp( value, path[, options] )"
deepHasProp.factory,"deepHasProp.factory( path[, options] )"
deepPluck,"deepPluck( arr, path[, options] )"
deepSet,"deepSet( obj, path, value[, options] )"
deepSet.factory,"deepSet.factory( path[, options] )"
defineMemoizedProperty,"defineMemoizedProperty( obj, prop, descriptor )"
defineProperties,"defineProperties( obj, properties )"
defineProperty,"defineProperty( obj, prop, descriptor )"
dirname,"dirname( path )"
dotcase,"dotcase( str )"
DoublyLinkedList,"DoublyLinkedList()"
doUntil,"doUntil( fcn, predicate[, thisArg] )"
doUntilAsync,"doUntilAsync( fcn, predicate, done[, thisArg] )"
doUntilEach,"doUntilEach( collection, fcn, predicate[, thisArg] )"
doUntilEachRight,"doUntilEachRight( collection, fcn, predicate[, thisArg] )"
doWhile,"doWhile( fcn, predicate[, thisArg] )"
doWhileAsync,"doWhileAsync( fcn, predicate, done[, thisArg] )"
doWhileEach,"doWhileEach( collection, fcn, predicate[, thisArg] )"
doWhileEachRight,"doWhileEachRight( collection, fcn, predicate[, thisArg] )"
dswap,"dswap( x, y )"
E,"E"
EMOJI,"EMOJI()"
EMOJI_CODE_PICTO,"EMOJI_CODE_PICTO()"
EMOJI_PICTO_CODE,"EMOJI_PICTO_CODE()"
emptyStream,"emptyStream( [options] )"
emptyStream.factory,"emptyStream.factory( [options] )"
emptyStream.objectMode,"emptyStream.objectMode()"
endsWith,"endsWith( str, search[, len] )"
enumerableProperties,"enumerableProperties( value )"
enumerablePropertiesIn,"enumerablePropertiesIn( value )"
enumerablePropertySymbols,"enumerablePropertySymbols( value )"
enumerablePropertySymbolsIn,"enumerablePropertySymbolsIn( value )"
ENV,"ENV"
EPS,"EPS"
error2json,"error2json( error )"
EULERGAMMA,"EULERGAMMA"
every,"every( collection )"
everyBy,"everyBy( collection, predicate[, thisArg ] )"
everyByAsync,"everyByAsync( collection, [options,] predicate, done )"
everyByAsync.factory,"everyByAsync.factory( [options,] predicate )"
everyByRight,"everyByRight( collection, predicate[, thisArg ] )"
everyByRightAsync,"everyByRightAsync( collection, [options,] predicate, done )"
everyByRightAsync.factory,"everyByRightAsync.factory( [options,] predicate )"
everyInBy,"everyInBy( object, predicate[, thisArg ] )"
everyOwnBy,"everyOwnBy( object, predicate[, thisArg ] )"
evil,"evil( str )"
EXEC_PATH,"EXEC_PATH"
exists,"exists( path, clbk )"
exists.sync,"exists.sync( path )"
expandAcronyms,"expandAcronyms( str )"
expandContractions,"expandContractions( str )"
extname,"extname( filename )"
FancyArray,"FancyArray( dtype, buffer, shape, strides, offset, order[, options] )"
FancyArray.prototype.byteLength,"FancyArray.prototype.byteLength"
FancyArray.prototype.BYTES_PER_ELEMENT,"FancyArray.prototype.BYTES_PER_ELEMENT"
FancyArray.prototype.data,"FancyArray.prototype.data"
FancyArray.prototype.dtype,"FancyArray.prototype.dtype"
FancyArray.prototype.flags,"FancyArray.prototype.flags"
FancyArray.prototype.length,"FancyArray.prototype.length"
FancyArray.prototype.ndims,"FancyArray.prototype.ndims"
FancyArray.prototype.offset,"FancyArray.prototype.offset"
FancyArray.prototype.order,"FancyArray.prototype.order"
FancyArray.prototype.shape,"FancyArray.prototype.shape"
FancyArray.prototype.strides,"FancyArray.prototype.strides"
FancyArray.prototype.get,"FancyArray.prototype.get( ...idx )"
FancyArray.prototype.iget,"FancyArray.prototype.iget( idx )"
FancyArray.prototype.set,"FancyArray.prototype.set( ...idx, v )"
FancyArray.prototype.iset,"FancyArray.prototype.iset( idx, v )"
FancyArray.prototype.toString,"FancyArray.prototype.toString()"
FancyArray.prototype.toJSON,"FancyArray.prototype.toJSON()"
fastmath.abs,"fastmath.abs( x )"
fastmath.acosh,"fastmath.acosh( x )"
fastmath.ampbm,"fastmath.ampbm( x, y )"
fastmath.ampbm.factory,"fastmath.ampbm.factory( alpha, beta, [nonnegative[, ints]] )"
fastmath.asinh,"fastmath.asinh( x )"
fastmath.atanh,"fastmath.atanh( x )"
fastmath.hypot,"fastmath.hypot( x, y )"
fastmath.log2Uint32,"fastmath.log2Uint32( x )"
fastmath.max,"fastmath.max( x, y )"
fastmath.min,"fastmath.min( x, y )"
fastmath.powint,"fastmath.powint( x, y )"
fastmath.sqrtUint32,"fastmath.sqrtUint32( x )"
FEMALE_FIRST_NAMES_EN,"FEMALE_FIRST_NAMES_EN()"
FIFO,"FIFO()"
filledarray,"filledarray( [dtype] )"
filledarray,"filledarray( value, length[, dtype] )"
filledarray,"filledarray( value, array[, dtype] )"
filledarray,"filledarray( value, iterable[, dtype] )"
filledarray,"filledarray( value, buffer[, byteOffset[, length]][, dtype] )"
filledarrayBy,"filledarrayBy( [dtype] )"
filledarrayBy,"filledarrayBy( length[, dtype], clbk[, thisArg] )"
filledarrayBy,"filledarrayBy( array[, dtype], clbk[, thisArg] )"
filledarrayBy,"filledarrayBy( iterable[, dtype], clbk[, thisArg] )"
filledarrayBy,"filledarrayBy( buffer[, byteOffset[, length]][, dtype], clbk[, thisArg] )"
filterArguments,"filterArguments( fcn, predicate[, thisArg] )"
find,"find( arr, [options,] clbk )"
firstChar,"firstChar( str[, n][, options] )"
FIVETHIRTYEIGHT_FFQ,"FIVETHIRTYEIGHT_FFQ()"
flattenArray,"flattenArray( arr[, options] )"
flattenArray.factory,"flattenArray.factory( dims[, options] )"
flattenObject,"flattenObject( obj[, options] )"
flattenObject.factory,"flattenObject.factory( [options] )"
flignerTest,"flignerTest( ...x[, options] )"
FLOAT_WORD_ORDER,"FLOAT_WORD_ORDER"
FLOAT16_CBRT_EPS,"FLOAT16_CBRT_EPS"
FLOAT16_EPS,"FLOAT16_EPS"
FLOAT16_EXPONENT_BIAS,"FLOAT16_EXPONENT_BIAS"
FLOAT16_MAX,"FLOAT16_MAX"
FLOAT16_MAX_SAFE_INTEGER,"FLOAT16_MAX_SAFE_INTEGER"
FLOAT16_MIN_SAFE_INTEGER,"FLOAT16_MIN_SAFE_INTEGER"
FLOAT16_NINF,"FLOAT16_NINF"
FLOAT16_NUM_BYTES,"FLOAT16_NUM_BYTES"
FLOAT16_PINF,"FLOAT16_PINF"
FLOAT16_PRECISION,"FLOAT16_PRECISION"
FLOAT16_SMALLEST_NORMAL,"FLOAT16_SMALLEST_NORMAL"
FLOAT16_SMALLEST_SUBNORMAL,"FLOAT16_SMALLEST_SUBNORMAL"
FLOAT16_SQRT_EPS,"FLOAT16_SQRT_EPS"
FLOAT32_ABS_MASK,"FLOAT32_ABS_MASK"
FLOAT32_CBRT_EPS,"FLOAT32_CBRT_EPS"
FLOAT32_EPS,"FLOAT32_EPS"
FLOAT32_EXPONENT_BIAS,"FLOAT32_EXPONENT_BIAS"
FLOAT32_EXPONENT_MASK,"FLOAT32_EXPONENT_MASK"
FLOAT32_FOURTH_PI,"FLOAT32_FOURTH_PI"
FLOAT32_HALF_PI,"FLOAT32_HALF_PI"
FLOAT32_MAX,"FLOAT32_MAX"
FLOAT32_MAX_SAFE_INTEGER,"FLOAT32_MAX_SAFE_INTEGER"
FLOAT32_MIN_SAFE_INTEGER,"FLOAT32_MIN_SAFE_INTEGER"
FLOAT32_NAN,"FLOAT32_NAN"
FLOAT32_NINF,"FLOAT32_NINF"
FLOAT32_NUM_BYTES,"FLOAT32_NUM_BYTES"
FLOAT32_PI,"FLOAT32_PI"
FLOAT32_PINF,"FLOAT32_PINF"
FLOAT32_PRECISION,"FLOAT32_PRECISION"
FLOAT32_SIGN_MASK,"FLOAT32_SIGN_MASK"
FLOAT32_SIGNIFICAND_MASK,"FLOAT32_SIGNIFICAND_MASK"
FLOAT32_SMALLEST_NORMAL,"FLOAT32_SMALLEST_NORMAL"
FLOAT32_SMALLEST_SUBNORMAL,"FLOAT32_SMALLEST_SUBNORMAL"
FLOAT32_SQRT_EPS,"FLOAT32_SQRT_EPS"
FLOAT32_TWO_PI,"FLOAT32_TWO_PI"
Float32Array,"Float32Array()"
Float32Array,"Float32Array( length )"
Float32Array,"Float32Array( typedarray )"
Float32Array,"Float32Array( obj )"
Float32Array,"Float32Array( buffer[, byteOffset[, length]] )"
Float32Array.from,"Float32Array.from( src[, map[, thisArg]] )"
Float32Array.of,"Float32Array.of( element0[, element1[, ...elementN]] )"
Float32Array.BYTES_PER_ELEMENT,"Float32Array.BYTES_PER_ELEMENT"
Float32Array.name,"Float32Array.name"
Float32Array.prototype.buffer,"Float32Array.prototype.buffer"
Float32Array.prototype.byteLength,"Float32Array.prototype.byteLength"
Float32Array.prototype.byteOffset,"Float32Array.prototype.byteOffset"
Float32Array.prototype.BYTES_PER_ELEMENT,"Float32Array.prototype.BYTES_PER_ELEMENT"
Float32Array.prototype.length,"Float32Array.prototype.length"
Float32Array.prototype.copyWithin,"Float32Array.prototype.copyWithin( target, start[, end] )"
Float32Array.prototype.entries,"Float32Array.prototype.entries()"
Float32Array.prototype.every,"Float32Array.prototype.every( predicate[, thisArg] )"
Float32Array.prototype.fill,"Float32Array.prototype.fill( value[, start[, end]] )"
Float32Array.prototype.filter,"Float32Array.prototype.filter( predicate[, thisArg] )"
Float32Array.prototype.find,"Float32Array.prototype.find( predicate[, thisArg] )"
Float32Array.prototype.findIndex,"Float32Array.prototype.findIndex( predicate[, thisArg] )"
Float32Array.prototype.forEach,"Float32Array.prototype.forEach( fcn[, thisArg] )"
Float32Array.prototype.includes,"Float32Array.prototype.includes( searchElement[, fromIndex] )"
Float32Array.prototype.indexOf,"Float32Array.prototype.indexOf( searchElement[, fromIndex] )"
Float32Array.prototype.join,"Float32Array.prototype.join( [separator] )"
Float32Array.prototype.keys,"Float32Array.prototype.keys()"
Float32Array.prototype.lastIndexOf,"Float32Array.prototype.lastIndexOf( searchElement[, fromIndex] )"
Float32Array.prototype.map,"Float32Array.prototype.map( fcn[, thisArg] )"
Float32Array.prototype.reduce,"Float32Array.prototype.reduce( fcn[, initialValue] )"
Float32Array.prototype.reduceRight,"Float32Array.prototype.reduceRight( fcn[, initialValue] )"
Float32Array.prototype.reverse,"Float32Array.prototype.reverse()"
Float32Array.prototype.set,"Float32Array.prototype.set( arr[, offset] )"
Float32Array.prototype.slice,"Float32Array.prototype.slice( [begin[, end]] )"
Float32Array.prototype.some,"Float32Array.prototype.some( predicate[, thisArg] )"
Float32Array.prototype.sort,"Float32Array.prototype.sort( [compareFunction] )"
Float32Array.prototype.subarray,"Float32Array.prototype.subarray( [begin[, end]] )"
Float32Array.prototype.toLocaleString,"Float32Array.prototype.toLocaleString( [locales[, options]] )"
Float32Array.prototype.toString,"Float32Array.prototype.toString()"
Float32Array.prototype.values,"Float32Array.prototype.values()"
FLOAT64_EXPONENT_BIAS,"FLOAT64_EXPONENT_BIAS"
FLOAT64_HIGH_WORD_ABS_MASK,"FLOAT64_HIGH_WORD_ABS_MASK"
FLOAT64_HIGH_WORD_EXPONENT_MASK,"FLOAT64_HIGH_WORD_EXPONENT_MASK"
FLOAT64_HIGH_WORD_SIGN_MASK,"FLOAT64_HIGH_WORD_SIGN_MASK"
FLOAT64_HIGH_WORD_SIGNIFICAND_MASK,"FLOAT64_HIGH_WORD_SIGNIFICAND_MASK"
FLOAT64_MAX,"FLOAT64_MAX"
FLOAT64_MAX_BASE2_EXPONENT,"FLOAT64_MAX_BASE2_EXPONENT"
FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL,"FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL"
FLOAT64_MAX_BASE10_EXPONENT,"FLOAT64_MAX_BASE10_EXPONENT"
FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL,"FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL"
FLOAT64_MAX_LN,"FLOAT64_MAX_LN"
FLOAT64_MAX_SAFE_FIBONACCI,"FLOAT64_MAX_SAFE_FIBONACCI"
FLOAT64_MAX_SAFE_INTEGER,"FLOAT64_MAX_SAFE_INTEGER"
FLOAT64_MAX_SAFE_LUCAS,"FLOAT64_MAX_SAFE_LUCAS"
FLOAT64_MAX_SAFE_NTH_FIBONACCI,"FLOAT64_MAX_SAFE_NTH_FIBONACCI"
FLOAT64_MAX_SAFE_NTH_LUCAS,"FLOAT64_MAX_SAFE_NTH_LUCAS"
FLOAT64_MIN_BASE2_EXPONENT,"FLOAT64_MIN_BASE2_EXPONENT"
FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL,"FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL"
FLOAT64_MIN_BASE10_EXPONENT,"FLOAT64_MIN_BASE10_EXPONENT"
FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL,"FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL"
FLOAT64_MIN_LN,"FLOAT64_MIN_LN"
FLOAT64_MIN_SAFE_INTEGER,"FLOAT64_MIN_SAFE_INTEGER"
FLOAT64_NUM_BYTES,"FLOAT64_NUM_BYTES"
FLOAT64_PRECISION,"FLOAT64_PRECISION"
FLOAT64_SMALLEST_NORMAL,"FLOAT64_SMALLEST_NORMAL"
FLOAT64_SMALLEST_SUBNORMAL,"FLOAT64_SMALLEST_SUBNORMAL"
Float64Array,"Float64Array()"
Float64Array,"Float64Array( length )"
Float64Array,"Float64Array( typedarray )"
Float64Array,"Float64Array( obj )"
Float64Array,"Float64Array( buffer[, byteOffset[, length]] )"
Float64Array.from,"Float64Array.from( src[, map[, thisArg]] )"
Float64Array.of,"Float64Array.of( element0[, element1[, ...elementN]] )"
Float64Array.BYTES_PER_ELEMENT,"Float64Array.BYTES_PER_ELEMENT"
Float64Array.name,"Float64Array.name"
Float64Array.prototype.buffer,"Float64Array.prototype.buffer"
Float64Array.prototype.byteLength,"Float64Array.prototype.byteLength"
Float64Array.prototype.byteOffset,"Float64Array.prototype.byteOffset"
Float64Array.prototype.BYTES_PER_ELEMENT,"Float64Array.prototype.BYTES_PER_ELEMENT"
Float64Array.prototype.length,"Float64Array.prototype.length"
Float64Array.prototype.copyWithin,"Float64Array.prototype.copyWithin( target, start[, end] )"
Float64Array.prototype.entries,"Float64Array.prototype.entries()"
Float64Array.prototype.every,"Float64Array.prototype.every( predicate[, thisArg] )"
Float64Array.prototype.fill,"Float64Array.prototype.fill( value[, start[, end]] )"
Float64Array.prototype.filter,"Float64Array.prototype.filter( predicate[, thisArg] )"
Float64Array.prototype.find,"Float64Array.prototype.find( predicate[, thisArg] )"
Float64Array.prototype.findIndex,"Float64Array.prototype.findIndex( predicate[, thisArg] )"
Float64Array.prototype.forEach,"Float64Array.prototype.forEach( fcn[, thisArg] )"
Float64Array.prototype.includes,"Float64Array.prototype.includes( searchElement[, fromIndex] )"
Float64Array.prototype.indexOf,"Float64Array.prototype.indexOf( searchElement[, fromIndex] )"
Float64Array.prototype.join,"Float64Array.prototype.join( [separator] )"
Float64Array.prototype.keys,"Float64Array.prototype.keys()"
Float64Array.prototype.lastIndexOf,"Float64Array.prototype.lastIndexOf( searchElement[, fromIndex] )"
Float64Array.prototype.map,"Float64Array.prototype.map( fcn[, thisArg] )"
Float64Array.prototype.reduce,"Float64Array.prototype.reduce( fcn[, initialValue] )"
Float64Array.prototype.reduceRight,"Float64Array.prototype.reduceRight( fcn[, initialValue] )"
Float64Array.prototype.reverse,"Float64Array.prototype.reverse()"
Float64Array.prototype.set,"Float64Array.prototype.set( arr[, offset] )"
Float64Array.prototype.slice,"Float64Array.prototype.slice( [begin[, end]] )"
Float64Array.prototype.some,"Float64Array.prototype.some( predicate[, thisArg] )"
Float64Array.prototype.sort,"Float64Array.prototype.sort( [compareFunction] )"
Float64Array.prototype.subarray,"Float64Array.prototype.subarray( [begin[, end]] )"
Float64Array.prototype.toLocaleString,"Float64Array.prototype.toLocaleString( [locales[, options]] )"
Float64Array.prototype.toString,"Float64Array.prototype.toString()"
Float64Array.prototype.values,"Float64Array.prototype.values()"
forEach,"forEach( collection, fcn[, thisArg] )"
forEachAsync,"forEachAsync( collection, [options,] fcn, done )"
forEachAsync.factory,"forEachAsync.factory( [options,] fcn )"
forEachChar,"forEachChar( str, [options,] clbk[, thisArg] )"
forEachRight,"forEachRight( collection, fcn[, thisArg] )"
forEachRightAsync,"forEachRightAsync( collection, [options,] fcn, done )"
forEachRightAsync.factory,"forEachRightAsync.factory( [options,] fcn )"
forIn,"forIn( obj, fcn[, thisArg] )"
format,"format( str, ...args )"
forOwn,"forOwn( obj, fcn[, thisArg] )"
FOURTH_PI,"FOURTH_PI"
FOURTH_ROOT_EPS,"FOURTH_ROOT_EPS"
FRB_SF_WAGE_RIGIDITY,"FRB_SF_WAGE_RIGIDITY()"
fromCodePoint,"fromCodePoint( ...pt )"
Function,"Function( [...argNames,] body )"
Function.prototype.apply,"Function.prototype.apply( thisArg, args )"
Function.prototype.call,"Function.prototype.call( thisArg, ...args )"
Function.prototype.bind,"Function.prototype.bind( thisArg, ...args )"
Function.prototype.toString,"Function.prototype.toString()"
Function.prototype.length,"Function.prototype.length"
Function.prototype.name,"Function.prototype.name"
Function.prototype.prototype,"Function.prototype.prototype"
function2string,"function2string( fcn )"
functionName,"functionName( fcn )"
functionSequence,"functionSequence( ...fcn )"
functionSequenceAsync,"functionSequenceAsync( ...fcn )"
GAMMA_LANCZOS_G,"GAMMA_LANCZOS_G"
gdot,"gdot( x, y )"
getegid,"getegid()"
geteuid,"geteuid()"
getgid,"getgid()"
getGlobal,"getGlobal( [codegen] )"
getPrototypeOf,"getPrototypeOf( value )"
getuid,"getuid()"
GLAISHER,"GLAISHER"
graphemeClusters2iterator,"graphemeClusters2iterator( src[, mapFcn[, thisArg]] )"
graphemeClusters2iteratorRight,"graphemeClusters2iteratorRight( src[, mapFcn[, thisArg]] )"
group,"group( collection, [options,] groups )"
groupBy,"groupBy( collection, [options,] indicator )"
groupByAsync,"groupByAsync( collection, [options,] indicator, done )"
groupByAsync.factory,"groupByAsync.factory( [options,] indicator )"
groupIn,"groupIn( obj, [options,] indicator )"
groupOwn,"groupOwn( obj, [options,] indicator )"
gswap,"gswap( x, y )"
HALF_LN2,"HALF_LN2"
HALF_PI,"HALF_PI"
HARRISON_BOSTON_HOUSE_PRICES,"HARRISON_BOSTON_HOUSE_PRICES()"
HARRISON_BOSTON_HOUSE_PRICES_CORRECTED,"HARRISON_BOSTON_HOUSE_PRICES_CORRECTED()"
hasArrayBufferSupport,"hasArrayBufferSupport()"
hasArrowFunctionSupport,"hasArrowFunctionSupport()"
hasAsyncAwaitSupport,"hasAsyncAwaitSupport()"
hasAsyncIteratorSymbolSupport,"hasAsyncIteratorSymbolSupport()"
hasBigInt64ArraySupport,"hasBigInt64ArraySupport()"
hasBigIntSupport,"hasBigIntSupport()"
hasBigUint64ArraySupport,"hasBigUint64ArraySupport()"
hasClassSupport,"hasClassSupport()"
hasDataViewSupport,"hasDataViewSupport()"
hasDefinePropertiesSupport,"hasDefinePropertiesSupport()"
hasDefinePropertySupport,"hasDefinePropertySupport()"
hasFloat32ArraySupport,"hasFloat32ArraySupport()"
hasFloat64ArraySupport,"hasFloat64ArraySupport()"
hasFunctionNameSupport,"hasFunctionNameSupport()"
hasGeneratorSupport,"hasGeneratorSupport()"
hasGlobalThisSupport,"hasGlobalThisSupport()"
hasInt8ArraySupport,"hasInt8ArraySupport()"
hasInt16ArraySupport,"hasInt16ArraySupport()"
hasInt32ArraySupport,"hasInt32ArraySupport()"
hasIteratorSymbolSupport,"hasIteratorSymbolSupport()"
hasMapSupport,"hasMapSupport()"
hasNodeBufferSupport,"hasNodeBufferSupport()"
hasOwnProp,"hasOwnProp( value, property )"
hasProp,"hasProp( value, property )"
hasProxySupport,"hasProxySupport()"
hasSetSupport,"hasSetSupport()"
hasSharedArrayBufferSupport,"hasSharedArrayBufferSupport()"
hasSymbolSupport,"hasSymbolSupport()"
hasToStringTagSupport,"hasToStringTagSupport()"
hasUint8ArraySupport,"hasUint8ArraySupport()"
hasUint8ClampedArraySupport,"hasUint8ClampedArraySupport()"
hasUint16ArraySupport,"hasUint16ArraySupport()"
hasUint32ArraySupport,"hasUint32ArraySupport()"
hasUTF16SurrogatePairAt,"hasUTF16SurrogatePairAt( str, pos )"
hasWeakMapSupport,"hasWeakMapSupport()"
hasWeakSetSupport,"hasWeakSetSupport()"
hasWebAssemblySupport,"hasWebAssemblySupport()"
headercase,"headercase( str )"
HERNDON_VENUS_SEMIDIAMETERS,"HERNDON_VENUS_SEMIDIAMETERS()"
homedir,"homedir()"
HOURS_IN_DAY,"HOURS_IN_DAY"
HOURS_IN_WEEK,"HOURS_IN_WEEK"
hoursInMonth,"hoursInMonth( [month[, year]] )"
hoursInYear,"hoursInYear( [value] )"
httpServer,"httpServer( [options,] [requestListener] )"
identity,"identity( x )"
ifelse,"ifelse( bool, x, y )"
ifelseAsync,"ifelseAsync( predicate, x, y, done )"
ifthen,"ifthen( bool, x, y )"
ifthenAsync,"ifthenAsync( predicate, x, y, done )"
imag,"imag( z )"
imagf,"imagf( z )"
IMG_ACANTHUS_MOLLIS,"IMG_ACANTHUS_MOLLIS()"
IMG_AIRPLANE_FROM_ABOVE,"IMG_AIRPLANE_FROM_ABOVE()"
IMG_ALLIUM_OREOPHILUM,"IMG_ALLIUM_OREOPHILUM()"
IMG_BLACK_CANYON,"IMG_BLACK_CANYON()"
IMG_DUST_BOWL_HOME,"IMG_DUST_BOWL_HOME()"
IMG_FRENCH_ALPINE_LANDSCAPE,"IMG_FRENCH_ALPINE_LANDSCAPE()"
IMG_LOCOMOTION_HOUSE_CAT,"IMG_LOCOMOTION_HOUSE_CAT()"
IMG_LOCOMOTION_NUDE_MALE,"IMG_LOCOMOTION_NUDE_MALE()"
IMG_MARCH_PASTORAL,"IMG_MARCH_PASTORAL()"
IMG_NAGASAKI_BOATS,"IMG_NAGASAKI_BOATS()"
incrapcorr,"incrapcorr( [mx, my] )"
incrBinaryClassification,"incrBinaryClassification( N[, options] )"
incrcount,"incrcount()"
incrcovariance,"incrcovariance( [mx, my] )"
incrcovmat,"incrcovmat( out[, means] )"
incrcv,"incrcv( [mean] )"
increwmean,"increwmean( α )"
increwstdev,"increwstdev( α )"
increwvariance,"increwvariance( α )"
incrgmean,"incrgmean()"
incrgrubbs,"incrgrubbs( [options] )"
incrhmean,"incrhmean()"
incrkmeans,"incrkmeans( k[, ndims][, options] )"
incrkurtosis,"incrkurtosis()"
incrmaape,"incrmaape()"
incrmae,"incrmae()"
incrmapcorr,"incrmapcorr( W[, mx, my] )"
incrmape,"incrmape()"
incrmax,"incrmax()"
incrmaxabs,"incrmaxabs()"
incrmcovariance,"incrmcovariance( W[, mx, my] )"
incrmcv,"incrmcv( W[, mean] )"
incrmda,"incrmda()"
incrme,"incrme()"
incrmean,"incrmean()"
incrmeanabs,"incrmeanabs()"
incrmeanabs2,"incrmeanabs2()"
incrmeanstdev,"incrmeanstdev( [out] )"
incrmeanvar,"incrmeanvar( [out] )"
incrmgmean,"incrmgmean( W )"
incrmgrubbs,"incrmgrubbs( W[, options] )"
incrmhmean,"incrmhmean( W )"
incrmidrange,"incrmidrange()"
incrmin,"incrmin()"
incrminabs,"incrminabs()"
incrminmax,"incrminmax( [out] )"
incrminmaxabs,"incrminmaxabs( [out] )"
incrmmaape,"incrmmaape( W )"
incrmmae,"incrmmae( W )"
incrmmape,"incrmmape( W )"
incrmmax,"incrmmax( W )"
incrmmaxabs,"incrmmaxabs( W )"
incrmmda,"incrmmda( W )"
incrmme,"incrmme( W )"
incrmmean,"incrmmean( W )"
incrmmeanabs,"incrmmeanabs( W )"
incrmmeanabs2,"incrmmeanabs2( W )"
incrmmeanstdev,"incrmmeanstdev( [out,] W )"
incrmmeanvar,"incrmmeanvar( [out,] W )"
incrmmidrange,"incrmmidrange( W )"
incrmmin,"incrmmin( W )"
incrmminabs,"incrmminabs( W )"
incrmminmax,"incrmminmax( [out,] W )"
incrmminmaxabs,"incrmminmaxabs( [out,] W )"
incrmmpe,"incrmmpe( W )"
incrmmse,"incrmmse( W )"
incrmpcorr,"incrmpcorr( W[, mx, my] )"
incrmpcorr2,"incrmpcorr2( W[, mx, my] )"
incrmpcorrdist,"incrmpcorrdist( W[, mx, my] )"
incrmpe,"incrmpe()"
incrmprod,"incrmprod( W )"
incrmrange,"incrmrange( W )"
incrmrmse,"incrmrmse( W )"
incrmrss,"incrmrss( W )"
incrmse,"incrmse()"
incrmstdev,"incrmstdev( W[, mean] )"
incrmsum,"incrmsum( W )"
incrmsumabs,"incrmsumabs( W )"
incrmsumabs2,"incrmsumabs2( W )"
incrmsummary,"incrmsummary( W )"
incrmsumprod,"incrmsumprod( W )"
incrmvariance,"incrmvariance( W[, mean] )"
incrmvmr,"incrmvmr( W[, mean] )"
incrnancount,"incrnancount()"
incrnansum,"incrnansum()"
incrnansumabs,"incrnansumabs()"
incrnansumabs2,"incrnansumabs2()"
incrpcorr,"incrpcorr( [mx, my] )"
incrpcorr2,"incrpcorr2( [mx, my] )"
incrpcorrdist,"incrpcorrdist( [mx, my] )"
incrpcorrdistmat,"incrpcorrdistmat( out[, means] )"
incrpcorrmat,"incrpcorrmat( out[, means] )"
incrprod,"incrprod()"
incrrange,"incrrange()"
incrrmse,"incrrmse()"
incrrss,"incrrss()"
incrskewness,"incrskewness()"
incrspace,"incrspace( start, stop[, increment] )"
incrstdev,"incrstdev( [mean] )"
incrsum,"incrsum()"
incrsumabs,"incrsumabs()"
incrsumabs2,"incrsumabs2()"
incrsummary,"incrsummary()"
incrsumprod,"incrsumprod()"
incrvariance,"incrvariance( [mean] )"
incrvmr,"incrvmr( [mean] )"
incrwmean,"incrwmean()"
ind2sub,"ind2sub( shape, idx[, options] )"
ind2sub.assign,"ind2sub.assign( shape, idx[, options], out )"
indexOf,"indexOf( arr, searchElement[, fromIndex] )"
inherit,"inherit( ctor, superCtor )"
inheritedEnumerableProperties,"inheritedEnumerableProperties( value[, level] )"
inheritedEnumerablePropertySymbols,"inheritedEnumerablePropertySymbols( value[, level] )"
inheritedKeys,"inheritedKeys( value[, level] )"
inheritedNonEnumerableProperties,"inheritedNonEnumerableProperties( value[, level] )"
inheritedNonEnumerablePropertyNames,"inheritedNonEnumerablePropertyNames( value[, level] )"
inheritedNonEnumerablePropertySymbols,"inheritedNonEnumerablePropertySymbols( value[, level] )"
inheritedProperties,"inheritedProperties( value[, level] )"
inheritedPropertyDescriptor,"inheritedPropertyDescriptor( value, property[, level] )"
inheritedPropertyDescriptors,"inheritedPropertyDescriptors( value[, level] )"
inheritedPropertyNames,"inheritedPropertyNames( value[, level] )"
inheritedPropertySymbols,"inheritedPropertySymbols( value[, level] )"
inheritedWritableProperties,"inheritedWritableProperties( value[, level] )"
inheritedWritablePropertyNames,"inheritedWritablePropertyNames( value[, level] )"
inheritedWritablePropertySymbols,"inheritedWritablePropertySymbols( value[, level] )"
inmap,"inmap( collection, fcn[, thisArg] )"
inmapAsync,"inmapAsync( collection, [options,] fcn, done )"
inmapAsync.factory,"inmapAsync.factory( [options,] fcn )"
inmapRight,"inmapRight( collection, fcn[, thisArg] )"
inmapRightAsync,"inmapRightAsync( collection, [options,] fcn, done )"
inmapRightAsync.factory,"inmapRightAsync.factory( [options,] fcn )"
inspectSinkStream,"inspectSinkStream( [options,] clbk )"
inspectSinkStream.factory,"inspectSinkStream.factory( [options] )"
inspectSinkStream.objectMode,"inspectSinkStream.objectMode( [options,] clbk )"
inspectStream,"inspectStream( [options,] clbk )"
inspectStream.factory,"inspectStream.factory( [options] )"
inspectStream.objectMode,"inspectStream.objectMode( [options,] clbk )"
instanceOf,"instanceOf( value, constructor )"
INT8_MAX,"INT8_MAX"
INT8_MIN,"INT8_MIN"
INT8_NUM_BYTES,"INT8_NUM_BYTES"
Int8Array,"Int8Array()"
Int8Array,"Int8Array( length )"
Int8Array,"Int8Array( typedarray )"
Int8Array,"Int8Array( obj )"
Int8Array,"Int8Array( buffer[, byteOffset[, length]] )"
Int8Array.from,"Int8Array.from( src[, map[, thisArg]] )"
Int8Array.of,"Int8Array.of( element0[, element1[, ...elementN]] )"
Int8Array.BYTES_PER_ELEMENT,"Int8Array.BYTES_PER_ELEMENT"
Int8Array.name,"Int8Array.name"
Int8Array.prototype.buffer,"Int8Array.prototype.buffer"
Int8Array.prototype.byteLength,"Int8Array.prototype.byteLength"
Int8Array.prototype.byteOffset,"Int8Array.prototype.byteOffset"
Int8Array.prototype.BYTES_PER_ELEMENT,"Int8Array.prototype.BYTES_PER_ELEMENT"
Int8Array.prototype.length,"Int8Array.prototype.length"
Int8Array.prototype.copyWithin,"Int8Array.prototype.copyWithin( target, start[, end] )"
Int8Array.prototype.entries,"Int8Array.prototype.entries()"
Int8Array.prototype.every,"Int8Array.prototype.every( predicate[, thisArg] )"
Int8Array.prototype.fill,"Int8Array.prototype.fill( value[, start[, end]] )"
Int8Array.prototype.filter,"Int8Array.prototype.filter( predicate[, thisArg] )"
Int8Array.prototype.find,"Int8Array.prototype.find( predicate[, thisArg] )"
Int8Array.prototype.findIndex,"Int8Array.prototype.findIndex( predicate[, thisArg] )"
Int8Array.prototype.forEach,"Int8Array.prototype.forEach( fcn[, thisArg] )"
Int8Array.prototype.includes,"Int8Array.prototype.includes( searchElement[, fromIndex] )"
Int8Array.prototype.indexOf,"Int8Array.prototype.indexOf( searchElement[, fromIndex] )"
Int8Array.prototype.join,"Int8Array.prototype.join( [separator] )"
Int8Array.prototype.keys,"Int8Array.prototype.keys()"
Int8Array.prototype.lastIndexOf,"Int8Array.prototype.lastIndexOf( searchElement[, fromIndex] )"
Int8Array.prototype.map,"Int8Array.prototype.map( fcn[, thisArg] )"
Int8Array.prototype.reduce,"Int8Array.prototype.reduce( fcn[, initialValue] )"
Int8Array.prototype.reduceRight,"Int8Array.prototype.reduceRight( fcn[, initialValue] )"
Int8Array.prototype.reverse,"Int8Array.prototype.reverse()"
Int8Array.prototype.set,"Int8Array.prototype.set( arr[, offset] )"
Int8Array.prototype.slice,"Int8Array.prototype.slice( [begin[, end]] )"
Int8Array.prototype.some,"Int8Array.prototype.some( predicate[, thisArg] )"
Int8Array.prototype.sort,"Int8Array.prototype.sort( [compareFunction] )"
Int8Array.prototype.subarray,"Int8Array.prototype.subarray( [begin[, end]] )"
Int8Array.prototype.toLocaleString,"Int8Array.prototype.toLocaleString( [locales[, options]] )"
Int8Array.prototype.toString,"Int8Array.prototype.toString()"
Int8Array.prototype.values,"Int8Array.prototype.values()"
INT16_MAX,"INT16_MAX"
INT16_MIN,"INT16_MIN"
INT16_NUM_BYTES,"INT16_NUM_BYTES"
Int16Array,"Int16Array()"
Int16Array,"Int16Array( length )"
Int16Array,"Int16Array( typedarray )"
Int16Array,"Int16Array( obj )"
Int16Array,"Int16Array( buffer[, byteOffset[, length]] )"
Int16Array.from,"Int16Array.from( src[, map[, thisArg]] )"
Int16Array.of,"Int16Array.of( element0[, element1[, ...elementN]] )"
Int16Array.BYTES_PER_ELEMENT,"Int16Array.BYTES_PER_ELEMENT"
Int16Array.name,"Int16Array.name"
Int16Array.prototype.buffer,"Int16Array.prototype.buffer"
Int16Array.prototype.byteLength,"Int16Array.prototype.byteLength"
Int16Array.prototype.byteOffset,"Int16Array.prototype.byteOffset"
Int16Array.prototype.BYTES_PER_ELEMENT,"Int16Array.prototype.BYTES_PER_ELEMENT"
Int16Array.prototype.length,"Int16Array.prototype.length"
Int16Array.prototype.copyWithin,"Int16Array.prototype.copyWithin( target, start[, end] )"
Int16Array.prototype.entries,"Int16Array.prototype.entries()"
Int16Array.prototype.every,"Int16Array.prototype.every( predicate[, thisArg] )"
Int16Array.prototype.fill,"Int16Array.prototype.fill( value[, start[, end]] )"
Int16Array.prototype.filter,"Int16Array.prototype.filter( predicate[, thisArg] )"
Int16Array.prototype.find,"Int16Array.prototype.find( predicate[, thisArg] )"
Int16Array.prototype.findIndex,"Int16Array.prototype.findIndex( predicate[, thisArg] )"
Int16Array.prototype.forEach,"Int16Array.prototype.forEach( fcn[, thisArg] )"
Int16Array.prototype.includes,"Int16Array.prototype.includes( searchElement[, fromIndex] )"
Int16Array.prototype.indexOf,"Int16Array.prototype.indexOf( searchElement[, fromIndex] )"
Int16Array.prototype.join,"Int16Array.prototype.join( [separator] )"
Int16Array.prototype.keys,"Int16Array.prototype.keys()"
Int16Array.prototype.lastIndexOf,"Int16Array.prototype.lastIndexOf( searchElement[, fromIndex] )"
Int16Array.prototype.map,"Int16Array.prototype.map( fcn[, thisArg] )"
Int16Array.prototype.reduce,"Int16Array.prototype.reduce( fcn[, initialValue] )"
Int16Array.prototype.reduceRight,"Int16Array.prototype.reduceRight( fcn[, initialValue] )"
Int16Array.prototype.reverse,"Int16Array.prototype.reverse()"
Int16Array.prototype.set,"Int16Array.prototype.set( arr[, offset] )"
Int16Array.prototype.slice,"Int16Array.prototype.slice( [begin[, end]] )"
Int16Array.prototype.some,"Int16Array.prototype.some( predicate[, thisArg] )"
Int16Array.prototype.sort,"Int16Array.prototype.sort( [compareFunction] )"
Int16Array.prototype.subarray,"Int16Array.prototype.subarray( [begin[, end]] )"
Int16Array.prototype.toLocaleString,"Int16Array.prototype.toLocaleString( [locales[, options]] )"
Int16Array.prototype.toString,"Int16Array.prototype.toString()"
Int16Array.prototype.values,"Int16Array.prototype.values()"
INT32_MAX,"INT32_MAX"
INT32_MIN,"INT32_MIN"
INT32_NUM_BYTES,"INT32_NUM_BYTES"
Int32Array,"Int32Array()"
Int32Array,"Int32Array( length )"
Int32Array,"Int32Array( typedarray )"
Int32Array,"Int32Array( obj )"
Int32Array,"Int32Array( buffer[, byteOffset[, length]] )"
Int32Array.from,"Int32Array.from( src[, map[, thisArg]] )"
Int32Array.of,"Int32Array.of( element0[, element1[, ...elementN]] )"
Int32Array.BYTES_PER_ELEMENT,"Int32Array.BYTES_PER_ELEMENT"
Int32Array.name,"Int32Array.name"
Int32Array.prototype.buffer,"Int32Array.prototype.buffer"
Int32Array.prototype.byteLength,"Int32Array.prototype.byteLength"
Int32Array.prototype.byteOffset,"Int32Array.prototype.byteOffset"
Int32Array.prototype.BYTES_PER_ELEMENT,"Int32Array.prototype.BYTES_PER_ELEMENT"
Int32Array.prototype.length,"Int32Array.prototype.length"
Int32Array.prototype.copyWithin,"Int32Array.prototype.copyWithin( target, start[, end] )"
Int32Array.prototype.entries,"Int32Array.prototype.entries()"
Int32Array.prototype.every,"Int32Array.prototype.every( predicate[, thisArg] )"
Int32Array.prototype.fill,"Int32Array.prototype.fill( value[, start[, end]] )"
Int32Array.prototype.filter,"Int32Array.prototype.filter( predicate[, thisArg] )"
Int32Array.prototype.find,"Int32Array.prototype.find( predicate[, thisArg] )"
Int32Array.prototype.findIndex,"Int32Array.prototype.findIndex( predicate[, thisArg] )"
Int32Array.prototype.forEach,"Int32Array.prototype.forEach( fcn[, thisArg] )"
Int32Array.prototype.includes,"Int32Array.prototype.includes( searchElement[, fromIndex] )"
Int32Array.prototype.indexOf,"Int32Array.prototype.indexOf( searchElement[, fromIndex] )"
Int32Array.prototype.join,"Int32Array.prototype.join( [separator] )"
Int32Array.prototype.keys,"Int32Array.prototype.keys()"
Int32Array.prototype.lastIndexOf,"Int32Array.prototype.lastIndexOf( searchElement[, fromIndex] )"
Int32Array.prototype.map,"Int32Array.prototype.map( fcn[, thisArg] )"
Int32Array.prototype.reduce,"Int32Array.prototype.reduce( fcn[, initialValue] )"
Int32Array.prototype.reduceRight,"Int32Array.prototype.reduceRight( fcn[, initialValue] )"
Int32Array.prototype.reverse,"Int32Array.prototype.reverse()"
Int32Array.prototype.set,"Int32Array.prototype.set( arr[, offset] )"
Int32Array.prototype.slice,"Int32Array.prototype.slice( [begin[, end]] )"
Int32Array.prototype.some,"Int32Array.prototype.some( predicate[, thisArg] )"
Int32Array.prototype.sort,"Int32Array.prototype.sort( [compareFunction] )"
Int32Array.prototype.subarray,"Int32Array.prototype.subarray( [begin[, end]] )"
Int32Array.prototype.toLocaleString,"Int32Array.prototype.toLocaleString( [locales[, options]] )"
Int32Array.prototype.toString,"Int32Array.prototype.toString()"
Int32Array.prototype.values,"Int32Array.prototype.values()"
IS_BIG_ENDIAN,"IS_BIG_ENDIAN"
IS_BROWSER,"IS_BROWSER"
IS_DARWIN,"IS_DARWIN"
IS_DOCKER,"IS_DOCKER"
IS_ELECTRON,"IS_ELECTRON"
IS_ELECTRON_MAIN,"IS_ELECTRON_MAIN"
IS_ELECTRON_RENDERER,"IS_ELECTRON_RENDERER"
IS_LITTLE_ENDIAN,"IS_LITTLE_ENDIAN"
IS_MOBILE,"IS_MOBILE"
IS_NODE,"IS_NODE"
IS_TOUCH_DEVICE,"IS_TOUCH_DEVICE"
IS_WEB_WORKER,"IS_WEB_WORKER"
IS_WINDOWS,"IS_WINDOWS"
isAbsoluteHttpURI,"isAbsoluteHttpURI( value )"
isAbsolutePath,"isAbsolutePath( value )"
isAbsolutePath.posix,"isAbsolutePath.posix( value )"
isAbsolutePath.win32,"isAbsolutePath.win32( value )"
isAbsoluteURI,"isAbsoluteURI( value )"
isAccessorArray,"isAccessorArray( value )"
isAccessorProperty,"isAccessorProperty( value, property )"
isAccessorPropertyIn,"isAccessorPropertyIn( value, property )"
isAlphagram,"isAlphagram( value )"
isAlphaNumeric,"isAlphaNumeric( str )"
isAnagram,"isAnagram( str, value )"
isArguments,"isArguments( value )"
isArray,"isArray( value )"
isArrayArray,"isArrayArray( value )"
isArrayBuffer,"isArrayBuffer( value )"
isArrayBufferView,"isArrayBufferView( value )"
isArrayLength,"isArrayLength( value )"
isArrayLike,"isArrayLike( value )"
isArrayLikeObject,"isArrayLikeObject( value )"
isArrowFunction,"isArrowFunction( value )"
isASCII,"isASCII( str )"
isBetween,"isBetween( value, a, b[, left, right] )"
isBetweenArray,"isBetweenArray( value, a, b[, left, right] )"
isBigInt,"isBigInt( value )"
isBigInt64Array,"isBigInt64Array( value )"
isBigUint64Array,"isBigUint64Array( value )"
isBinaryString,"isBinaryString( value )"
isBlankString,"isBlankString( value )"
isBoolean,"isBoolean( value )"
isBoolean.isPrimitive,"isBoolean.isPrimitive( value )"
isBoolean.isObject,"isBoolean.isObject( value )"
isBooleanArray,"isBooleanArray( value )"
isBooleanArray.primitives,"isBooleanArray.primitives( value )"
isBooleanArray.objects,"isBooleanArray.objects( value )"
isBoxedPrimitive,"isBoxedPrimitive( value )"
isBuffer,"isBuffer( value )"
isCamelcase,"isCamelcase( value )"
isCapitalized,"isCapitalized( value )"
isCentrosymmetricMatrix,"isCentrosymmetricMatrix( value )"
isCircular,"isCircular( value )"
isCircularArray,"isCircularArray( value )"
isCircularPlainObject,"isCircularPlainObject( value )"
isClass,"isClass( value )"
isCollection,"isCollection( value )"
isComplex,"isComplex( value )"
isComplex64,"isComplex64( value )"
isComplex64Array,"isComplex64Array( value )"
isComplex64MatrixLike,"isComplex64MatrixLike( value )"
isComplex64ndarrayLike,"isComplex64ndarrayLike( value )"
isComplex64VectorLike,"isComplex64VectorLike( value )"
isComplex128,"isComplex128( value )"
isComplex128Array,"isComplex128Array( value )"
isComplex128MatrixLike,"isComplex128MatrixLike( value )"
isComplex128ndarrayLike,"isComplex128ndarrayLike( value )"
isComplex128VectorLike,"isComplex128VectorLike( value )"
isComplexLike,"isComplexLike( value )"
isComplexTypedArray,"isComplexTypedArray( value )"
isComplexTypedArrayLike,"isComplexTypedArrayLike( value )"
isComposite,"isComposite( value )"
isComposite.isPrimitive,"isComposite.isPrimitive( value )"
isComposite.isObject,"isComposite.isObject( value )"
isConfigurableProperty,"isConfigurableProperty( value, property )"
isConfigurablePropertyIn,"isConfigurablePropertyIn( value, property )"
isConstantcase,"isConstantcase( value )"
isCubeNumber,"isCubeNumber( value )"
isCubeNumber.isPrimitive,"isCubeNumber.isPrimitive( value )"
isCubeNumber.isObject,"isCubeNumber.isObject( value )"
isCurrentYear,"isCurrentYear( value )"
isDataProperty,"isDataProperty( value, property )"
isDataPropertyIn,"isDataPropertyIn( value, property )"
isDataView,"isDataView( value )"
isDateObject,"isDateObject( value )"
isDateObjectArray,"isDateObjectArray( value )"
isDigitString,"isDigitString( str )"
isDomainName,"isDomainName( value )"
isDurationString,"isDurationString( value )"
isEmailAddress,"isEmailAddress( value )"
isEmptyArray,"isEmptyArray( value )"
isEmptyArrayLikeObject,"isEmptyArrayLikeObject( value )"
isEmptyCollection,"isEmptyCollection( value )"
isEmptyObject,"isEmptyObject( value )"
isEmptyString,"isEmptyString( value )"
isEmptyString.isPrimitive,"isEmptyString.isPrimitive( value )"
isEmptyString.isObject,"isEmptyString.isObject( value )"
isEnumerableProperty,"isEnumerableProperty( value, property )"
isEnumerablePropertyIn,"isEnumerablePropertyIn( value, property )"
isError,"isError( value )"
isEvalError,"isEvalError( value )"
isEven,"isEven( value )"
isEven.isPrimitive,"isEven.isPrimitive( value )"
isEven.isObject,"isEven.isObject( value )"
isFalsy,"isFalsy( value )"
isFalsyArray,"isFalsyArray( value )"
isFinite,"isFinite( value )"
isFinite.isPrimitive,"isFinite.isPrimitive( value )"
isFinite.isObject,"isFinite.isObject( value )"
isFiniteArray,"isFiniteArray( value )"
isFiniteArray.primitives,"isFiniteArray.primitives( value )"
isFiniteArray.objects,"isFiniteArray.objects( value )"
isFloat32Array,"isFloat32Array( value )"
isFloat32MatrixLike,"isFloat32MatrixLike( value )"
isFloat32ndarrayLike,"isFloat32ndarrayLike( value )"
isFloat32VectorLike,"isFloat32VectorLike( value )"
isFloat64Array,"isFloat64Array( value )"
isFloat64MatrixLike,"isFloat64MatrixLike( value )"
isFloat64ndarrayLike,"isFloat64ndarrayLike( value )"
isFloat64VectorLike,"isFloat64VectorLike( value )"
isFunction,"isFunction( value )"
isFunctionArray,"isFunctionArray( value )"
isGeneratorObject,"isGeneratorObject( value )"
isGeneratorObjectLike,"isGeneratorObjectLike( value )"
isgzipBuffer,"isgzipBuffer( value )"
isHexString,"isHexString( str )"
isInfinite,"isInfinite( value )"
isInfinite.isPrimitive,"isInfinite.isPrimitive( value )"
isInfinite.isObject,"isInfinite.isObject( value )"
isInheritedProperty,"isInheritedProperty( value, property )"
isInt8Array,"isInt8Array( value )"
isInt16Array,"isInt16Array( value )"
isInt32Array,"isInt32Array( value )"
isInteger,"isInteger( value )"
isInteger.isPrimitive,"isInteger.isPrimitive( value )"
isInteger.isObject,"isInteger.isObject( value )"
isIntegerArray,"isIntegerArray( value )"
isIntegerArray.primitives,"isIntegerArray.primitives( value )"
isIntegerArray.objects,"isIntegerArray.objects( value )"
isIterableLike,"isIterableLike( value )"
isIteratorLike,"isIteratorLike( value )"
isJSON,"isJSON( value )"
isKebabcase,"isKebabcase( value )"
isLeapYear,"isLeapYear( value )"
isLocalhost,"isLocalhost( value )"
isLowercase,"isLowercase( value )"
isMatrixLike,"isMatrixLike( value )"
isMethod,"isMethod( value, property )"
isMethodIn,"isMethodIn( value, property )"
isMultiSlice,"isMultiSlice( value )"
isNamedTypedTupleLike,"isNamedTypedTupleLike( value )"
isnan,"isnan( value )"
isnan.isPrimitive,"isnan.isPrimitive( value )"
isnan.isObject,"isnan.isObject( value )"
isNaNArray,"isNaNArray( value )"
isNaNArray.primitives,"isNaNArray.primitives( value )"
isNaNArray.objects,"isNaNArray.objects( value )"
isNativeFunction,"isNativeFunction( value )"
isndarrayLike,"isndarrayLike( value )"
isNegativeFinite,"isNegativeFinite( value )"
isNegativeFinite.isPrimitive,"isNegativeFinite.isPrimitive( value )"
isNegativeFinite.isObject,"isNegativeFinite.isObject( value )"
isNegativeInteger,"isNegativeInteger( value )"
isNegativeInteger.isPrimitive,"isNegativeInteger.isPrimitive( value )"
isNegativeInteger.isObject,"isNegativeInteger.isObject( value )"
isNegativeIntegerArray,"isNegativeIntegerArray( value )"
isNegativeIntegerArray.primitives,"isNegativeIntegerArray.primitives( value )"
isNegativeIntegerArray.objects,"isNegativeIntegerArray.objects( value )"
isNegativeNumber,"isNegativeNumber( value )"
isNegativeNumber.isPrimitive,"isNegativeNumber.isPrimitive( value )"
isNegativeNumber.isObject,"isNegativeNumber.isObject( value )"
isNegativeNumberArray,"isNegativeNumberArray( value )"
isNegativeNumberArray.primitives,"isNegativeNumberArray.primitives( value )"
isNegativeNumberArray.objects,"isNegativeNumberArray.objects( value )"
isNegativeZero,"isNegativeZero( value )"
isNegativeZero.isPrimitive,"isNegativeZero.isPrimitive( value )"
isNegativeZero.isObject,"isNegativeZero.isObject( value )"
isNodeBuiltin,"isNodeBuiltin( str )"
isNodeDuplexStreamLike,"isNodeDuplexStreamLike( value )"
isNodeReadableStreamLike,"isNodeReadableStreamLike( value )"
isNodeREPL,"isNodeREPL()"
isNodeStreamLike,"isNodeStreamLike( value )"
isNodeTransformStreamLike,"isNodeTransformStreamLike( value )"
isNodeWritableStreamLike,"isNodeWritableStreamLike( value )"
isNonConfigurableProperty,"isNonConfigurableProperty( value, property )"
isNonConfigurablePropertyIn,"isNonConfigurablePropertyIn( value, property )"
isNonEnumerableProperty,"isNonEnumerableProperty( value, property )"
isNonEnumerablePropertyIn,"isNonEnumerablePropertyIn( value, property )"
isNonNegativeFinite,"isNonNegativeFinite( value )"
isNonNegativeFinite.isPrimitive,"isNonNegativeFinite.isPrimitive( value )"
isNonNegativeFinite.isObject,"isNonNegativeFinite.isObject( value )"
isNonNegativeInteger,"isNonNegativeInteger( value )"
isNonNegativeInteger.isPrimitive,"isNonNegativeInteger.isPrimitive( value )"
isNonNegativeInteger.isObject,"isNonNegativeInteger.isObject( value )"
isNonNegativeIntegerArray,"isNonNegativeIntegerArray( value )"
isNonNegativeIntegerArray.primitives,"isNonNegativeIntegerArray.primitives( value )"
isNonNegativeIntegerArray.objects,"isNonNegativeIntegerArray.objects( value )"
isNonNegativeNumber,"isNonNegativeNumber( value )"
isNonNegativeNumber.isPrimitive,"isNonNegativeNumber.isPrimitive( value )"
isNonNegativeNumber.isObject,"isNonNegativeNumber.isObject( value )"
isNonNegativeNumberArray,"isNonNegativeNumberArray( value )"
isNonNegativeNumberArray.primitives,"isNonNegativeNumberArray.primitives( value )"
isNonNegativeNumberArray.objects,"isNonNegativeNumberArray.objects( value )"
isNonPositiveFinite,"isNonPositiveFinite( value )"
isNonPositiveFinite.isPrimitive,"isNonPositiveFinite.isPrimitive( value )"
isNonPositiveFinite.isObject,"isNonPositiveFinite.isObject( value )"
isNonPositiveInteger,"isNonPositiveInteger( value )"
isNonPositiveInteger.isPrimitive,"isNonPositiveInteger.isPrimitive( value )"
isNonPositiveInteger.isObject,"isNonPositiveInteger.isObject( value )"
isNonPositiveIntegerArray,"isNonPositiveIntegerArray( value )"
isNonPositiveIntegerArray.primitives,"isNonPositiveIntegerArray.primitives( value )"
isNonPositiveIntegerArray.objects,"isNonPositiveIntegerArray.objects( value )"
isNonPositiveNumber,"isNonPositiveNumber( value )"
isNonPositiveNumber.isPrimitive,"isNonPositiveNumber.isPrimitive( value )"
isNonPositiveNumber.isObject,"isNonPositiveNumber.isObject( value )"
isNonPositiveNumberArray,"isNonPositiveNumberArray( value )"
isNonPositiveNumberArray.primitives,"isNonPositiveNumberArray.primitives( value )"
isNonPositiveNumberArray.objects,"isNonPositiveNumberArray.objects( value )"
isNonSymmetricMatrix,"isNonSymmetricMatrix( value )"
isNull,"isNull( value )"
isNullArray,"isNullArray( value )"
isNumber,"isNumber( value )"
isNumber.isPrimitive,"isNumber.isPrimitive( value )"
isNumber.isObject,"isNumber.isObject( value )"
isNumberArray,"isNumberArray( value )"
isNumberArray.primitives,"isNumberArray.primitives( value )"
isNumberArray.objects,"isNumberArray.objects( value )"
isNumericArray,"isNumericArray( value )"
isObject,"isObject( value )"
isObjectArray,"isObjectArray( value )"
isObjectLike,"isObjectLike( value )"
isOdd,"isOdd( value )"
isOdd.isPrimitive,"isOdd.isPrimitive( value )"
isOdd.isObject,"isOdd.isObject( value )"
isoWeeksInYear,"isoWeeksInYear( [year] )"
isPascalcase,"isPascalcase( value )"
isPersymmetricMatrix,"isPersymmetricMatrix( value )"
isPlainObject,"isPlainObject( value )"
isPlainObjectArray,"isPlainObjectArray( value )"
isPositiveFinite,"isPositiveFinite( value )"
isPositiveFinite.isPrimitive,"isPositiveFinite.isPrimitive( value )"
isPositiveFinite.isObject,"isPositiveFinite.isObject( value )"
isPositiveInteger,"isPositiveInteger( value )"
isPositiveInteger.isPrimitive,"isPositiveInteger.isPrimitive( value )"
isPositiveInteger.isObject,"isPositiveInteger.isObject( value )"
isPositiveIntegerArray,"isPositiveIntegerArray( value )"
isPositiveIntegerArray.primitives,"isPositiveIntegerArray.primitives( value )"
isPositiveIntegerArray.objects,"isPositiveIntegerArray.objects( value )"
isPositiveNumber,"isPositiveNumber( value )"
isPositiveNumber.isPrimitive,"isPositiveNumber.isPrimitive( value )"
isPositiveNumber.isObject,"isPositiveNumber.isObject( value )"
isPositiveNumberArray,"isPositiveNumberArray( value )"
isPositiveNumberArray.primitives,"isPositiveNumberArray.primitives( value )"
isPositiveNumberArray.objects,"isPositiveNumberArray.objects( value )"
isPositiveZero,"isPositiveZero( value )"
isPositiveZero.isPrimitive,"isPositiveZero.isPrimitive( value )"
isPositiveZero.isObject,"isPositiveZero.isObject( value )"
isPrime,"isPrime( value )"
isPrime.isPrimitive,"isPrime.isPrimitive( value )"
isPrime.isObject,"isPrime.isObject( value )"
isPrimitive,"isPrimitive( value )"
isPrimitiveArray,"isPrimitiveArray( value )"
isPRNGLike,"isPRNGLike( value )"
isProbability,"isProbability( value )"
isProbability.isPrimitive,"isProbability.isPrimitive( value )"
isProbability.isObject,"isProbability.isObject( value )"
isProbabilityArray,"isProbabilityArray( value )"
isProbabilityArray.primitives,"isProbabilityArray.primitives( value )"
isProbabilityArray.objects,"isProbabilityArray.objects( value )"
isPropertyKey,"isPropertyKey( value )"
isPrototypeOf,"isPrototypeOf( value, proto )"
isRaggedNestedArray,"isRaggedNestedArray( value )"
isRangeError,"isRangeError( value )"
isReadableProperty,"isReadableProperty( value, property )"
isReadablePropertyIn,"isReadablePropertyIn( value, property )"
isReadOnlyProperty,"isReadOnlyProperty( value, property )"
isReadOnlyPropertyIn,"isReadOnlyPropertyIn( value, property )"
isReadWriteProperty,"isReadWriteProperty( value, property )"
isReadWritePropertyIn,"isReadWritePropertyIn( value, property )"
isReferenceError,"isReferenceError( value )"
isRegExp,"isRegExp( value )"
isRegExpString,"isRegExpString( value )"
isRelativePath,"isRelativePath( value )"
isRelativePath.posix,"isRelativePath.posix( value )"
isRelativePath.win32,"isRelativePath.win32( value )"
isRelativeURI,"isRelativeURI( value )"
isSafeInteger,"isSafeInteger( value )"
isSafeInteger.isPrimitive,"isSafeInteger.isPrimitive( value )"
isSafeInteger.isObject,"isSafeInteger.isObject( value )"
isSafeIntegerArray,"isSafeIntegerArray( value )"
isSafeIntegerArray.primitives,"isSafeIntegerArray.primitives( value )"
isSafeIntegerArray.objects,"isSafeIntegerArray.objects( value )"
isSameArray,"isSameArray( v1, v2 )"
isSameComplex64,"isSameComplex64( v1, v2 )"
isSameComplex64Array,"isSameComplex64Array( v1, v2 )"
isSameComplex128,"isSameComplex128( v1, v2 )"
isSameComplex128Array,"isSameComplex128Array( v1, v2 )"
isSameDateObject,"isSameDateObject( d1, d2 )"
isSameFloat32Array,"isSameFloat32Array( v1, v2 )"
isSameFloat64Array,"isSameFloat64Array( v1, v2 )"
isSameNativeClass,"isSameNativeClass( a, b )"
isSameType,"isSameType( a, b )"
isSameValue,"isSameValue( a, b )"
isSameValueZero,"isSameValueZero( a, b )"
isSemVer,"isSemVer( value )"
isSharedArrayBuffer,"isSharedArrayBuffer( value )"
isSkewCentrosymmetricMatrix,"isSkewCentrosymmetricMatrix( value )"
isSkewPersymmetricMatrix,"isSkewPersymmetricMatrix( value )"
isSkewSymmetricMatrix,"isSkewSymmetricMatrix( value )"
isSlice,"isSlice( value )"
isSnakecase,"isSnakecase( value )"
isSquareMatrix,"isSquareMatrix( value )"
isSquareNumber,"isSquareNumber( value )"
isSquareNumber.isPrimitive,"isSquareNumber.isPrimitive( value )"
isSquareNumber.isObject,"isSquareNumber.isObject( value )"
isSquareTriangularNumber,"isSquareTriangularNumber( value )"
isSquareTriangularNumber.isPrimitive,"isSquareTriangularNumber.isPrimitive( value )"
isSquareTriangularNumber.isObject,"isSquareTriangularNumber.isObject( value )"
isStartcase,"isStartcase( value )"
isStrictEqual,"isStrictEqual( a, b )"
isString,"isString( value )"
isString.isPrimitive,"isString.isPrimitive( value )"
isString.isObject,"isString.isObject( value )"
isStringArray,"isStringArray( value )"
isStringArray.primitives,"isStringArray.primitives( value )"
isStringArray.objects,"isStringArray.objects( value )"
isSymbol,"isSymbol( value )"
isSymbolArray,"isSymbolArray( value )"
isSymbolArray.primitives,"isSymbolArray.primitives( value )"
isSymbolArray.objects,"isSymbolArray.objects( value )"
isSymmetricMatrix,"isSymmetricMatrix( value )"
isSyntaxError,"isSyntaxError( value )"
isTriangularNumber,"isTriangularNumber( value )"
isTriangularNumber.isPrimitive,"isTriangularNumber.isPrimitive( value )"
isTriangularNumber.isObject,"isTriangularNumber.isObject( value )"
isTruthy,"isTruthy( value )"
isTruthyArray,"isTruthyArray( value )"
isTypedArray,"isTypedArray( value )"
isTypedArrayLength,"isTypedArrayLength( value )"
isTypedArrayLike,"isTypedArrayLike( value )"
isTypeError,"isTypeError( value )"
isUint8Array,"isUint8Array( value )"
isUint8ClampedArray,"isUint8ClampedArray( value )"
isUint16Array,"isUint16Array( value )"
isUint32Array,"isUint32Array( value )"
isUNCPath,"isUNCPath( value )"
isUndefined,"isUndefined( value )"
isUndefinedOrNull,"isUndefinedOrNull( value )"
isUnityProbabilityArray,"isUnityProbabilityArray( value )"
isUppercase,"isUppercase( value )"
isURI,"isURI( value )"
isURIError,"isURIError( value )"
isVectorLike,"isVectorLike( value )"
isWellFormedString,"isWellFormedString( str )"
isWellFormedString.isPrimitive,"isWellFormedString.isPrimitive( str )"
isWellFormedString.isObject,"isWellFormedString.isObject( str )"
isWhitespace,"isWhitespace( str )"
isWritableProperty,"isWritableProperty( value, property )"
isWritablePropertyIn,"isWritablePropertyIn( value, property )"
isWriteOnlyProperty,"isWriteOnlyProperty( value, property )"
isWriteOnlyPropertyIn,"isWriteOnlyPropertyIn( value, property )"
iterAbs,"iterAbs( iterator )"
iterAbs2,"iterAbs2( iterator )"
iterAcos,"iterAcos( iterator )"
iterAcosh,"iterAcosh( iterator )"
iterAcot,"iterAcot( iterator )"
iterAcoth,"iterAcoth( iterator )"
iterAcovercos,"iterAcovercos( iterator )"
iterAcoversin,"iterAcoversin( iterator )"
iterAdd,"iterAdd( iter0, ...iterator )"
iterAdvance,"iterAdvance( iterator[, n] )"
iterAhavercos,"iterAhavercos( iterator )"
iterAhaversin,"iterAhaversin( iterator )"
iterAny,"iterAny( iterator )"
iterAnyBy,"iterAnyBy( iterator, predicate[, thisArg ] )"
iterAsin,"iterAsin( iterator )"
iterAsinh,"iterAsinh( iterator )"
iterAtan,"iterAtan( iterator )"
iterAtan2,"iterAtan2( y, x )"
iterAtanh,"iterAtanh( iterator )"
iterator2array,"iterator2array( iterator[, out][, mapFcn[, thisArg]] )"
iterator2arrayview,"iterator2arrayview( iterator, dest[, begin[, end]][, mapFcn[, thisArg]] )"
iterator2arrayviewRight,"iterator2arrayviewRight( iterator, dest[, begin[, end]][, mapFcn[, thisArg]] )"
iteratorStream,"iteratorStream( iterator[, options] )"
iteratorStream.factory,"iteratorStream.factory( [options] )"
iteratorStream.objectMode,"iteratorStream.objectMode( iterator[, options] )"
IteratorSymbol,"IteratorSymbol"
iterAvercos,"iterAvercos( iterator )"
iterAversin,"iterAversin( iterator )"
iterawgn,"iterawgn( iterator, sigma[, options] )"
iterawln,"iterawln( iterator, sigma[, options] )"
iterawun,"iterawun( iterator, sigma[, options] )"
iterBartlettHannPulse,"iterBartlettHannPulse( [options] )"
iterBartlettPulse,"iterBartlettPulse( [options] )"
iterBesselj0,"iterBesselj0( iterator )"
iterBesselj1,"iterBesselj1( iterator )"
iterBessely0,"iterBessely0( iterator )"
iterBessely1,"iterBessely1( iterator )"
iterBeta,"iterBeta( x, y )"
iterBetaln,"iterBetaln( x, y )"
iterBinet,"iterBinet( iterator )"
iterCbrt,"iterCbrt( iterator )"
iterCeil,"iterCeil( iterator )"
iterCeil2,"iterCeil2( iterator )"
iterCeil10,"iterCeil10( iterator )"
iterCompositesSeq,"iterCompositesSeq( [options] )"
iterConcat,"iterConcat( iter0, ...iterator )"
iterConstant,"iterConstant( value[, options] )"
iterContinuedFraction,"iterContinuedFraction( iterator[, options] )"
iterContinuedFractionSeq,"iterContinuedFractionSeq( x[, options] )"
iterCos,"iterCos( iterator )"
iterCosh,"iterCosh( iterator )"
iterCosineWave,"iterCosineWave( [options] )"
iterCosm1,"iterCosm1( iterator )"
iterCospi,"iterCospi( iterator )"
iterCounter,"iterCounter( iterator )"
iterCovercos,"iterCovercos( iterator )"
iterCoversin,"iterCoversin( iterator )"
iterCubesSeq,"iterCubesSeq( [options] )"
itercugmean,"itercugmean( iterator )"
itercuhmean,"itercuhmean( iterator )"
itercumax,"itercumax( iterator )"
itercumaxabs,"itercumaxabs( iterator )"
itercumean,"itercumean( iterator )"
itercumeanabs,"itercumeanabs( iterator )"
itercumeanabs2,"itercumeanabs2( iterator )"
itercumidrange,"itercumidrange( iterator )"
itercumin,"itercumin( iterator )"
itercuminabs,"itercuminabs( iterator )"
itercuprod,"itercuprod( iterator )"
itercurange,"itercurange( iterator )"
itercusum,"itercusum( iterator )"
itercusumabs,"itercusumabs( iterator )"
itercusumabs2,"itercusumabs2( iterator )"
iterDatespace,"iterDatespace( start, stop[, N][, options] )"
iterDedupe,"iterDedupe( iterator[, limit] )"
iterDedupeBy,"iterDedupeBy( iterator, [limit,] fcn )"
iterDeg2rad,"iterDeg2rad( iterator )"
iterDigamma,"iterDigamma( iterator )"
iterDiracComb,"iterDiracComb( [options] )"
iterDiracDelta,"iterDiracDelta( iterator )"
iterDivide,"iterDivide( iter0, ...iterator )"
iterDoWhileEach,"iterDoWhileEach( iterator, predicate, fcn[, thisArg] )"
iterEllipe,"iterEllipe( iterator )"
iterEllipk,"iterEllipk( iterator )"
iterEmpty,"iterEmpty()"
iterErf,"iterErf( iterator )"
iterErfc,"iterErfc( iterator )"
iterErfcinv,"iterErfcinv( iterator )"
iterErfinv,"iterErfinv( iterator )"
iterEta,"iterEta( iterator )"
iterEvenIntegersSeq,"iterEvenIntegersSeq( [options] )"
iterEvery,"iterEvery( iterator )"
iterEveryBy,"iterEveryBy( iterator, predicate[, thisArg ] )"
iterExp,"iterExp( iterator )"
iterExp2,"iterExp2( iterator )"
iterExp10,"iterExp10( iterator )"
iterExpit,"iterExpit( iterator )"
iterExpm1,"iterExpm1( iterator )"
iterExpm1rel,"iterExpm1rel( iterator )"
iterFactorial,"iterFactorial( iterator )"
iterFactorialln,"iterFactorialln( iterator )"
iterFactorialsSeq,"iterFactorialsSeq( [options] )"
iterFibonacciSeq,"iterFibonacciSeq( [options] )"
iterFifthPowersSeq,"iterFifthPowersSeq( [options] )"
iterFill,"iterFill( iterator, value[, begin[, end]] )"
iterFilter,"iterFilter( iterator, predicate[, thisArg] )"
iterFilterMap,"iterFilterMap( iterator, fcn[, thisArg] )"
iterFirst,"iterFirst( iterator )"
iterFlatTopPulse,"iterFlatTopPulse( [options] )"
iterFloor,"iterFloor( iterator )"
iterFloor2,"iterFloor2( iterator )"
iterFloor10,"iterFloor10( iterator )"
iterFlow,"iterFlow( methods )"
iterForEach,"iterForEach( iterator, fcn[, thisArg] )"
iterFourthPowersSeq,"iterFourthPowersSeq( [options] )"
iterFresnelc,"iterFresnelc( iterator )"
iterFresnels,"iterFresnels( iterator )"
iterGamma,"iterGamma( iterator )"
iterGamma1pm1,"iterGamma1pm1( iterator )"
iterGammaln,"iterGammaln( iterator )"
iterHacovercos,"iterHacovercos( iterator )"
iterHacoversin,"iterHacoversin( iterator )"
iterHannPulse,"iterHannPulse( [options] )"
iterHavercos,"iterHavercos( iterator )"
iterHaversin,"iterHaversin( iterator )"
iterHead,"iterHead( iterator, n )"
iterIncrspace,"iterIncrspace( start, stop[, increment] )"
iterIntegersSeq,"iterIntegersSeq( [options] )"
iterIntersection,"iterIntersection( iter0, ...iterator )"
iterIntersectionByHash,"iterIntersectionByHash( iter0, ...iterator, hashFcn[, thisArg] )"
iterInv,"iterInv( iterator )"
iterLanczosPulse,"iterLanczosPulse( [options] )"
iterLast,"iterLast( iterator )"
iterLength,"iterLength( iterator )"
iterLinspace,"iterLinspace( start, stop[, N] )"
iterLn,"iterLn( iterator )"
iterLog,"iterLog( x, b )"
iterLog1mexp,"iterLog1mexp( iterator )"
iterLog1p,"iterLog1p( iterator )"
iterLog1pexp,"iterLog1pexp( iterator )"
iterLog2,"iterLog2( iterator )"
iterLog10,"iterLog10( iterator )"
iterLogit,"iterLogit( iterator )"
iterLogspace,"iterLogspace( start, stop[, N][, options] )"
iterLucasSeq,"iterLucasSeq( [options] )"
iterMap,"iterMap( iterator, fcn[, thisArg] )"
iterMapN,"iterMapN( iter0, ...iterator, fcn[, thisArg] )"
itermax,"itermax( iterator )"
itermaxabs,"itermaxabs( iterator )"
itermean,"itermean( iterator )"
itermeanabs,"itermeanabs( iterator )"
itermeanabs2,"itermeanabs2( iterator )"
itermidrange,"itermidrange( iterator )"
itermin,"itermin( iterator )"
iterminabs,"iterminabs( iterator )"
itermmax,"itermmax( iterator, W )"
itermmaxabs,"itermmaxabs( iterator, W )"
itermmean,"itermmean( iterator, W )"
itermmeanabs,"itermmeanabs( iterator, W )"
itermmeanabs2,"itermmeanabs2( iterator, W )"
itermmidrange,"itermmidrange( iterator, W )"
itermmin,"itermmin( iterator, W )"
itermminabs,"itermminabs( iterator, W )"
iterMod,"iterMod( iter0, ...iterator )"
itermprod,"itermprod( iterator, W )"
itermrange,"itermrange( iterator, W )"
itermsum,"itermsum( iterator, W )"
itermsumabs,"itermsumabs( iterator, W )"
itermsumabs2,"itermsumabs2( iterator, W )"
iterMultiply,"iterMultiply( iter0, ...iterator )"
iterNegaFibonacciSeq,"iterNegaFibonacciSeq( [options] )"
iterNegaLucasSeq,"iterNegaLucasSeq( [options] )"
iterNegativeEvenIntegersSeq,"iterNegativeEvenIntegersSeq( [options] )"
iterNegativeIntegersSeq,"iterNegativeIntegersSeq( [options] )"
iterNegativeOddIntegersSeq,"iterNegativeOddIntegersSeq( [options] )"
iterNone,"iterNone( iterator )"
iterNoneBy,"iterNoneBy( iterator, predicate[, thisArg ] )"
iterNonFibonacciSeq,"iterNonFibonacciSeq( [options] )"
iterNonNegativeEvenIntegersSeq,"iterNonNegativeEvenIntegersSeq( [options] )"
iterNonNegativeIntegersSeq,"iterNonNegativeIntegersSeq( [options] )"
iterNonPositiveEvenIntegersSeq,"iterNonPositiveEvenIntegersSeq( [options] )"
iterNonPositiveIntegersSeq,"iterNonPositiveIntegersSeq( [options] )"
iterNonSquaresSeq,"iterNonSquaresSeq( [options] )"
iterNth,"iterNth( iterator, n )"
iterOddIntegersSeq,"iterOddIntegersSeq( [options] )"
iterPeriodicSinc,"iterPeriodicSinc( n[, options] )"
iterPipeline,"iterPipeline( iterFcn[, ...iterFcn] )"
iterPop,"iterPop( iterator[, clbk[, thisArg]] )"
iterPositiveEvenIntegersSeq,"iterPositiveEvenIntegersSeq( [options] )"
iterPositiveIntegersSeq,"iterPositiveIntegersSeq( [options] )"
iterPositiveOddIntegersSeq,"iterPositiveOddIntegersSeq( [options] )"
iterPow,"iterPow( base, exponent )"
iterPrimesSeq,"iterPrimesSeq( [options] )"
iterprod,"iterprod( iterator )"
iterPulse,"iterPulse( [options] )"
iterPush,"iterPush( iterator, ...items )"
iterRad2deg,"iterRad2deg( iterator )"
iterRamp,"iterRamp( iterator )"
iterrange,"iterrange( iterator )"
iterReject,"iterReject( iterator, predicate[, thisArg] )"
iterReplicate,"iterReplicate( iterator, n )"
iterReplicateBy,"iterReplicateBy( iterator, fcn[, thisArg] )"
iterRound,"iterRound( iterator )"
iterRound2,"iterRound2( iterator )"
iterRound10,"iterRound10( iterator )"
iterRsqrt,"iterRsqrt( iterator )"
iterSawtoothWave,"iterSawtoothWave( [options] )"
iterShift,"iterShift( iterator[, clbk[, thisArg]] )"
iterSignum,"iterSignum( iterator )"
iterSin,"iterSin( iterator )"
iterSinc,"iterSinc( iterator )"
iterSineWave,"iterSineWave( [options] )"
iterSinh,"iterSinh( iterator )"
iterSinpi,"iterSinpi( iterator )"
iterSlice,"iterSlice( iterator[, begin[, end]] )"
iterSome,"iterSome( iterator, n )"
iterSomeBy,"iterSomeBy( iterator, n, predicate[, thisArg ] )"
iterSpence,"iterSpence( iterator )"
iterSqrt,"iterSqrt( iterator )"
iterSqrt1pm1,"iterSqrt1pm1( iterator )"
iterSquaredTriangularSeq,"iterSquaredTriangularSeq( [options] )"
iterSquaresSeq,"iterSquaresSeq( [options] )"
iterSquareWave,"iterSquareWave( [options] )"
iterstdev,"iterstdev( iterator[, mean] )"
iterStep,"iterStep( start, increment[, N] )"
iterStrided,"iterStrided( iterator, stride[, offset[, eager]] )"
iterStridedBy,"iterStridedBy( iterator, fcn[, offset[, eager]][, thisArg] )"
iterSubtract,"iterSubtract( iter0, ...iterator )"
itersum,"itersum( iterator )"
itersumabs,"itersumabs( iterator )"
itersumabs2,"itersumabs2( iterator )"
iterTan,"iterTan( iterator )"
iterTanh,"iterTanh( iterator )"
iterThunk,"iterThunk( iterFcn[, ...args] )"
iterTriangleWave,"iterTriangleWave( [options] )"
iterTriangularSeq,"iterTriangularSeq( [options] )"
iterTribonnaciSeq,"iterTribonnaciSeq( [options] )"
iterTrigamma,"iterTrigamma( iterator )"
iterTrunc,"iterTrunc( iterator )"
iterTrunc2,"iterTrunc2( iterator )"
iterTrunc10,"iterTrunc10( iterator )"
iterUnion,"iterUnion( iter0, ...iterator )"
iterUnique,"iterUnique( iterator )"
iterUniqueBy,"iterUniqueBy( iterator, predicate[, thisArg] )"
iterUniqueByHash,"iterUniqueByHash( iterator, hashFcn[, thisArg] )"
iterUnitspace,"iterUnitspace( start[, stop] )"
iterUnshift,"iterUnshift( iterator, ...items )"
iterUntilEach,"iterUntilEach( iterator, predicate, fcn[, thisArg] )"
itervariance,"itervariance( iterator[, mean] )"
iterVercos,"iterVercos( iterator )"
iterVersin,"iterVersin( iterator )"
iterWhileEach,"iterWhileEach( iterator, predicate, fcn[, thisArg] )"
iterZeta,"iterZeta( iterator )"
joinStream,"joinStream( [options] )"
joinStream.factory,"joinStream.factory( [options] )"
joinStream.objectMode,"joinStream.objectMode( [options] )"
kde2d,"kde2d( x, y[, options] )"
kebabcase,"kebabcase( str )"
keyBy,"keyBy( collection, fcn[, thisArg] )"
keyByRight,"keyByRight( collection, fcn[, thisArg] )"
keysIn,"keysIn( obj )"
kruskalTest,"kruskalTest( ...x[, options] )"
kstest,"kstest( x, y[, ...params][, options] )"
last,"last( str[, n][, options] )"
leveneTest,"leveneTest( x[, ...y[, options]] )"
LinkedList,"LinkedList()"
linspace,"linspace( start, stop, length[, options] )"
linspace.assign,"linspace.assign( start, stop, out[, options] )"
LIU_NEGATIVE_OPINION_WORDS_EN,"LIU_NEGATIVE_OPINION_WORDS_EN()"
LIU_POSITIVE_OPINION_WORDS_EN,"LIU_POSITIVE_OPINION_WORDS_EN()"
LN_HALF,"LN_HALF"
LN_PI,"LN_PI"
LN_SQRT_TWO_PI,"LN_SQRT_TWO_PI"
LN_TWO_PI,"LN_TWO_PI"
LN2,"LN2"
LN10,"LN10"
LOG2E,"LOG2E"
LOG10E,"LOG10E"
logspace,"logspace( a, b[, length] )"
lowercase,"lowercase( str )"
lowercaseKeys,"lowercaseKeys( obj )"
lowess,"lowess( x, y[, options] )"
lpad,"lpad( str, len[, pad] )"
ltrim,"ltrim( str )"
ltrimN,"ltrimN( str, n[, chars] )"
MALE_FIRST_NAMES_EN,"MALE_FIRST_NAMES_EN()"
map,"map( arr, fcn[, thisArg] )"
map.assign,"map.assign( arr, out, fcn[, thisArg] )"
map2,"map2( x, y, fcn[, thisArg] )"
map2.assign,"map2.assign( x, y, out, fcn[, thisArg] )"
map2d,"map2d( arr, fcn[, thisArg] )"
map2Right,"map2Right( x, y, fcn[, thisArg] )"
map2Right.assign,"map2Right.assign( x, y, out, fcn[, thisArg] )"
map3d,"map3d( arr, fcn[, thisArg] )"
map4d,"map4d( arr, fcn[, thisArg] )"
map5d,"map5d( arr, fcn[, thisArg] )"
mapArguments,"mapArguments( fcn, clbk[, thisArg] )"
mapFun,"mapFun( fcn, n[, thisArg] )"
mapFunAsync,"mapFunAsync( fcn, n, [options,] done )"
mapFunAsync.factory,"mapFunAsync.factory( [options,] fcn )"
mapKeys,"mapKeys( obj, transform )"
mapKeysAsync,"mapKeysAsync( obj, [options,] transform, done )"
mapKeysAsync.factory,"mapKeysAsync.factory( [options,] transform )"
mapReduce,"mapReduce( arr, initial, mapper, reducer[, thisArg] )"
mapReduceRight,"mapReduceRight( arr, initial, mapper, reducer[, thisArg] )"
mapRight,"mapRight( arr, fcn[, thisArg] )"
mapRight.assign,"mapRight.assign( arr, out, fcn[, thisArg] )"
mapValues,"mapValues( obj, transform )"
mapValuesAsync,"mapValuesAsync( obj, [options,] transform, done )"
mapValuesAsync.factory,"mapValuesAsync.factory( [options,] transform )"
maskArguments,"maskArguments( fcn, mask[, thisArg] )"
MAX_ARRAY_LENGTH,"MAX_ARRAY_LENGTH"
MAX_TYPED_ARRAY_LENGTH,"MAX_TYPED_ARRAY_LENGTH"
maybeBroadcastArray,"maybeBroadcastArray( x, shape )"
maybeBroadcastArrays,"maybeBroadcastArrays( ...arrays )"
memoize,"memoize( fcn[, hashFunction] )"
merge,"merge( target, ...source )"
merge.factory,"merge.factory( options )"
MILLISECONDS_IN_DAY,"MILLISECONDS_IN_DAY"
MILLISECONDS_IN_HOUR,"MILLISECONDS_IN_HOUR"
MILLISECONDS_IN_MINUTE,"MILLISECONDS_IN_MINUTE"
MILLISECONDS_IN_SECOND,"MILLISECONDS_IN_SECOND"
MILLISECONDS_IN_WEEK,"MILLISECONDS_IN_WEEK"
MINARD_NAPOLEONS_MARCH,"MINARD_NAPOLEONS_MARCH( [options] )"
MINUTES_IN_DAY,"MINUTES_IN_DAY"
MINUTES_IN_HOUR,"MINUTES_IN_HOUR"
MINUTES_IN_WEEK,"MINUTES_IN_WEEK"
minutesInMonth,"minutesInMonth( [month[, year]] )"
minutesInYear,"minutesInYear( [value] )"
MOBY_DICK,"MOBY_DICK()"
MONTH_NAMES_EN,"MONTH_NAMES_EN()"
MONTHS_IN_YEAR,"MONTHS_IN_YEAR"
moveProperty,"moveProperty( source, prop, target )"
MultiSlice,"MultiSlice( ...slice )"
MultiSlice.prototype.ndims,"MultiSlice.prototype.ndims"
MultiSlice.prototype.data,"MultiSlice.prototype.data"
MultiSlice.prototype.toString,"MultiSlice.prototype.toString()"
MultiSlice.prototype.toJSON,"MultiSlice.prototype.toJSON()"
namedtypedtuple,"namedtypedtuple( fields[, options] )"
NAN,"NAN"
naryFunction,"naryFunction( fcn, arity[, thisArg] )"
nativeClass,"nativeClass( value )"
ndarray,"ndarray( dtype, buffer, shape, strides, offset, order[, options] )"
ndarray.prototype.byteLength,"ndarray.prototype.byteLength"
ndarray.prototype.BYTES_PER_ELEMENT,"ndarray.prototype.BYTES_PER_ELEMENT"
ndarray.prototype.data,"ndarray.prototype.data"
ndarray.prototype.dtype,"ndarray.prototype.dtype"
ndarray.prototype.flags,"ndarray.prototype.flags"
ndarray.prototype.length,"ndarray.prototype.length"
ndarray.prototype.ndims,"ndarray.prototype.ndims"
ndarray.prototype.offset,"ndarray.prototype.offset"
ndarray.prototype.order,"ndarray.prototype.order"
ndarray.prototype.shape,"ndarray.prototype.shape"
ndarray.prototype.strides,"ndarray.prototype.strides"
ndarray.prototype.get,"ndarray.prototype.get( ...idx )"
ndarray.prototype.iget,"ndarray.prototype.iget( idx )"
ndarray.prototype.set,"ndarray.prototype.set( ...idx, v )"
ndarray.prototype.iset,"ndarray.prototype.iset( idx, v )"
ndarray.prototype.toString,"ndarray.prototype.toString()"
ndarray.prototype.toJSON,"ndarray.prototype.toJSON()"
ndarray2array,"ndarray2array( x )"
ndarrayCastingModes,"ndarrayCastingModes()"
ndarrayDataBuffer,"ndarrayDataBuffer( x )"
ndarrayDataType,"ndarrayDataType( x )"
ndarrayDataTypes,"ndarrayDataTypes( [kind] )"
ndarrayDispatch,"ndarrayDispatch( fcns, types, data, nargs, nin, nout )"
ndarrayFlag,"ndarrayFlag( x, name )"
ndarrayFlags,"ndarrayFlags( x )"
ndarrayIndexModes,"ndarrayIndexModes()"
ndarrayMinDataType,"ndarrayMinDataType( value )"
ndarrayMostlySafeCasts,"ndarrayMostlySafeCasts( [dtype] )"
ndarrayNextDataType,"ndarrayNextDataType( [dtype] )"
ndarrayOffset,"ndarrayOffset( x )"
ndarrayOrder,"ndarrayOrder( x )"
ndarrayOrders,"ndarrayOrders()"
ndarrayPromotionRules,"ndarrayPromotionRules( [dtype1, dtype2] )"
ndarraySafeCasts,"ndarraySafeCasts( [dtype] )"
ndarraySameKindCasts,"ndarraySameKindCasts( [dtype] )"
ndarrayShape,"ndarrayShape( x )"
ndarrayStride,"ndarrayStride( x, dim )"
ndarrayStrides,"ndarrayStrides( x )"
ndat,"ndat( x[, ...indices] )"
ndempty,"ndempty( shape[, options] )"
ndemptyLike,"ndemptyLike( x[, options] )"
ndims,"ndims( x )"
nditerColumnEntries,"nditerColumnEntries( x[, options] )"
nditerColumns,"nditerColumns( x[, options] )"
nditerEntries,"nditerEntries( x[, options] )"
nditerIndices,"nditerIndices( shape[, options] )"
nditerMatrices,"nditerMatrices( x[, options] )"
nditerMatrixEntries,"nditerMatrixEntries( x[, options] )"
nditerRowEntries,"nditerRowEntries( x[, options] )"
nditerRows,"nditerRows( x[, options] )"
nditerValues,"nditerValues( x[, options] )"
ndslice,"ndslice( x, ...s[, options] )"
ndsliceAssign,"ndsliceAssign( x, y, ...s[, options] )"
ndsliceDimension,"ndsliceDimension( x, dim, slice[, options] )"
ndsliceDimensionFrom,"ndsliceDimensionFrom( x, dim, start[, options] )"
ndsliceDimensionTo,"ndsliceDimensionTo( x, dim, stop[, options] )"
ndsliceFrom,"ndsliceFrom( x, ...start[, options] )"
ndsliceTo,"ndsliceTo( x, ...stop[, options] )"
ndzeros,"ndzeros( shape[, options] )"
ndzerosLike,"ndzerosLike( x[, options] )"
nextGraphemeClusterBreak,"nextGraphemeClusterBreak( str[, fromIndex] )"
nextTick,"nextTick( clbk[, ...args] )"
NIGHTINGALES_ROSE,"NIGHTINGALES_ROSE()"
NINF,"NINF"
NODE_VERSION,"NODE_VERSION"
none,"none( collection )"
noneBy,"noneBy( collection, predicate[, thisArg ] )"
noneByAsync,"noneByAsync( collection, [options,] predicate, done )"
noneByAsync.factory,"noneByAsync.factory( [options,] predicate )"
noneByRight,"noneByRight( collection, predicate[, thisArg ] )"
noneByRightAsync,"noneByRightAsync( collection, [options,] predicate, done )"
noneByRightAsync.factory,"noneByRightAsync.factory( [options,] predicate )"
noneInBy,"noneInBy( object, predicate[, thisArg ] )"
nonEnumerableProperties,"nonEnumerableProperties( value )"
nonEnumerablePropertiesIn,"nonEnumerablePropertiesIn( value )"
nonEnumerablePropertyNames,"nonEnumerablePropertyNames( value )"
nonEnumerablePropertyNamesIn,"nonEnumerablePropertyNamesIn( value )"
nonEnumerablePropertySymbols,"nonEnumerablePropertySymbols( value )"
nonEnumerablePropertySymbolsIn,"nonEnumerablePropertySymbolsIn( value )"
noneOwnBy,"noneOwnBy( object, predicate[, thisArg ] )"
nonIndexKeys,"nonIndexKeys( obj )"
noop,"noop()"
now,"now()"
NUM_CPUS,"NUM_CPUS"
num2words,"num2words( value[, options] )"
Number,"Number( value )"
numel,"numel( x )"
numelDimension,"numelDimension( x, dim )"
numGraphemeClusters,"numGraphemeClusters( str )"
Object,"Object( value )"
Object.assign,"Object.assign( target, ...sources )"
Object.create,"Object.create( prototype, properties )"
Object.defineProperties,"Object.defineProperties( obj, properties )"
Object.defineProperty,"Object.defineProperty( obj, key, descriptor )"
Object.entries,"Object.entries( obj )"
Object.freeze,"Object.freeze( obj )"
Object.getOwnPropertyDescriptor,"Object.getOwnPropertyDescriptor( obj, key )"
Object.getOwnPropertyDescriptors,"Object.getOwnPropertyDescriptors( obj )"
Object.getOwnPropertyNames,"Object.getOwnPropertyNames( obj )"
Object.getOwnPropertySymbols,"Object.getOwnPropertySymbols( obj )"
Object.getPrototypeOf,"Object.getPrototypeOf( obj )"
Object.hasOwn,"Object.hasOwn( obj, p )"
Object.is,"Object.is( value1, value2 )"
Object.isExtensible,"Object.isExtensible( obj )"
Object.isFrozen,"Object.isFrozen( obj )"
Object.isSealed,"Object.isSealed( obj )"
Object.keys,"Object.keys( obj )"
Object.preventExtensions,"Object.preventExtensions( obj )"
Object.seal,"Object.seal( obj )"
Object.setPrototypeOf,"Object.setPrototypeOf( obj, proto )"
Object.values,"Object.values( obj )"
Object.prototype.toLocaleString,"Object.prototype.toLocaleString()"
Object.prototype.toString,"Object.prototype.toString()"
Object.prototype.valueOf,"Object.prototype.valueOf()"
Object.prototype.hasOwnProperty,"Object.prototype.hasOwnProperty( p )"
Object.prototype.isPrototypeOf,"Object.prototype.isPrototypeOf( obj )"
Object.prototype.propertyIsEnumerable,"Object.prototype.propertyIsEnumerable( p )"
Object.prototype.constructor,"Object.prototype.constructor"
objectEntries,"objectEntries( obj )"
objectEntriesIn,"objectEntriesIn( obj )"
objectFromEntries,"objectFromEntries( entries )"
objectInverse,"objectInverse( obj[, options] )"
objectInverseBy,"objectInverseBy( obj, [options,] transform )"
objectKeys,"objectKeys( value )"
objectValues,"objectValues( obj )"
objectValuesIn,"objectValuesIn( obj )"
omit,"omit( obj, keys )"
omitBy,"omitBy( obj, predicate )"
open,"open( path[, flags[, mode]], clbk )"
open.sync,"open.sync( path[, flags[, mode]] )"
openURL,"openURL( url )"
ordinalize,"ordinalize( value[, options] )"
PACE_BOSTON_HOUSE_PRICES,"PACE_BOSTON_HOUSE_PRICES()"
pad,"pad( str, len[, options] )"
padjust,"padjust( pvals, method[, comparisons] )"
papply,"papply( fcn, ...args )"
papplyRight,"papplyRight( fcn, ...args )"
parallel,"parallel( files, [options,] clbk )"
parseJSON,"parseJSON( str[, reviver] )"
pascalcase,"pascalcase( str )"
PATH_DELIMITER,"PATH_DELIMITER"
PATH_DELIMITER_POSIX,"PATH_DELIMITER_POSIX"
PATH_DELIMITER_WIN32,"PATH_DELIMITER_WIN32"
PATH_SEP,"PATH_SEP"
PATH_SEP_POSIX,"PATH_SEP_POSIX"
PATH_SEP_WIN32,"PATH_SEP_WIN32"
pcorrtest,"pcorrtest( x, y[, options] )"
percentEncode,"percentEncode( str )"
PHI,"PHI"
PI,"PI"
PI_SQUARED,"PI_SQUARED"
pick,"pick( obj, keys )"
pickArguments,"pickArguments( fcn, indices[, thisArg] )"
pickBy,"pickBy( obj, predicate )"
PINF,"PINF"
pkg2alias,"pkg2alias( pkg )"
pkg2related,"pkg2related( pkg )"
pkg2standalone,"pkg2standalone( pkg )"
PLATFORM,"PLATFORM"
plot,"plot( [x, y,] [options] )"
Plot,"Plot( [x, y,] [options] )"
pluck,"pluck( arr, prop[, options] )"
pop,"pop( collection )"
porterStemmer,"porterStemmer( word )"
prepend,"prepend( collection1, collection2 )"
prevGraphemeClusterBreak,"prevGraphemeClusterBreak( str[, fromIndex] )"
PRIMES_100K,"PRIMES_100K()"
properties,"properties( value )"
propertiesIn,"propertiesIn( value )"
propertyDescriptor,"propertyDescriptor( value, property )"
propertyDescriptorIn,"propertyDescriptorIn( value, property )"
propertyDescriptors,"propertyDescriptors( value )"
propertyDescriptorsIn,"propertyDescriptorsIn( value )"
propertyNames,"propertyNames( value )"
propertyNamesIn,"propertyNamesIn( value )"
propertySymbols,"propertySymbols( value )"
propertySymbolsIn,"propertySymbolsIn( value )"
Proxy,"Proxy( target, handlers )"
Proxy.revocable,"Proxy.revocable( target, handlers )"
push,"push( collection, ...items )"
quarterOfYear,"quarterOfYear( [month] )"
random.array.arcsine,"random.array.arcsine( len, a, b[, options] )"
random.array.arcsine.assign,"random.array.arcsine.assign( a, b, out )"
random.array.arcsine.factory,"random.array.arcsine.factory( [a, b, ][options] )"
random.array.arcsine.PRNG,"random.array.arcsine.PRNG"
random.array.arcsine.seed,"random.array.arcsine.seed"
random.array.arcsine.seedLength,"random.array.arcsine.seedLength"
random.array.arcsine.state,"random.array.arcsine.state"
random.array.arcsine.stateLength,"random.array.arcsine.stateLength"
random.array.arcsine.byteLength,"random.array.arcsine.byteLength"
random.array.bernoulli,"random.array.bernoulli( len, p[, options] )"
random.array.bernoulli.assign,"random.array.bernoulli.assign( p, out )"
random.array.bernoulli.factory,"random.array.bernoulli.factory( [p, ][options] )"
random.array.bernoulli.PRNG,"random.array.bernoulli.PRNG"
random.array.bernoulli.seed,"random.array.bernoulli.seed"
random.array.bernoulli.seedLength,"random.array.bernoulli.seedLength"
random.array.bernoulli.state,"random.array.bernoulli.state"
random.array.bernoulli.stateLength,"random.array.bernoulli.stateLength"
random.array.bernoulli.byteLength,"random.array.bernoulli.byteLength"
random.array.beta,"random.array.beta( len, alpha, beta[, options] )"
random.array.beta.assign,"random.array.beta.assign( alpha, beta, out )"
random.array.beta.factory,"random.array.beta.factory( [alpha, beta, ][options] )"
random.array.beta.PRNG,"random.array.beta.PRNG"
random.array.beta.seed,"random.array.beta.seed"
random.array.beta.seedLength,"random.array.beta.seedLength"
random.array.beta.state,"random.array.beta.state"
random.array.beta.stateLength,"random.array.beta.stateLength"
random.array.beta.byteLength,"random.array.beta.byteLength"
random.array.betaprime,"random.array.betaprime( len, alpha, beta[, options] )"
random.array.betaprime.assign,"random.array.betaprime.assign( alpha, beta, out )"
random.array.betaprime.factory,"random.array.betaprime.factory( [alpha, beta, ][options] )"
random.array.betaprime.PRNG,"random.array.betaprime.PRNG"
random.array.betaprime.seed,"random.array.betaprime.seed"
random.array.betaprime.seedLength,"random.array.betaprime.seedLength"
random.array.betaprime.state,"random.array.betaprime.state"
random.array.betaprime.stateLength,"random.array.betaprime.stateLength"
random.array.betaprime.byteLength,"random.array.betaprime.byteLength"
random.array.binomial,"random.array.binomial( len, n, p[, options] )"
random.array.binomial.assign,"random.array.binomial.assign( n, p, out )"
random.array.binomial.factory,"random.array.binomial.factory( [n, p, ][options] )"
random.array.binomial.PRNG,"random.array.binomial.PRNG"
random.array.binomial.seed,"random.array.binomial.seed"
random.array.binomial.seedLength,"random.array.binomial.seedLength"
random.array.binomial.state,"random.array.binomial.state"
random.array.binomial.stateLength,"random.array.binomial.stateLength"
random.array.binomial.byteLength,"random.array.binomial.byteLength"
random.array.cauchy,"random.array.cauchy( len, x0, gamma[, options] )"
random.array.cauchy.assign,"random.array.cauchy.assign( x0, gamma, out )"
random.array.cauchy.factory,"random.array.cauchy.factory( [x0, gamma, ][options] )"
random.array.cauchy.PRNG,"random.array.cauchy.PRNG"
random.array.cauchy.seed,"random.array.cauchy.seed"
random.array.cauchy.seedLength,"random.array.cauchy.seedLength"
random.array.cauchy.state,"random.array.cauchy.state"
random.array.cauchy.stateLength,"random.array.cauchy.stateLength"
random.array.cauchy.byteLength,"random.array.cauchy.byteLength"
random.array.chi,"random.array.chi( len, k[, options] )"
random.array.chi.assign,"random.array.chi.assign( k, out )"
random.array.chi.factory,"random.array.chi.factory( [k, ][options] )"
random.array.chi.PRNG,"random.array.chi.PRNG"
random.array.chi.seed,"random.array.chi.seed"
random.array.chi.seedLength,"random.array.chi.seedLength"
random.array.chi.state,"random.array.chi.state"
random.array.chi.stateLength,"random.array.chi.stateLength"
random.array.chi.byteLength,"random.array.chi.byteLength"
random.array.chisquare,"random.array.chisquare( len, k[, options] )"
random.array.chisquare.assign,"random.array.chisquare.assign( k, out )"
random.array.chisquare.factory,"random.array.chisquare.factory( [k, ][options] )"
random.array.chisquare.PRNG,"random.array.chisquare.PRNG"
random.array.chisquare.seed,"random.array.chisquare.seed"
random.array.chisquare.seedLength,"random.array.chisquare.seedLength"
random.array.chisquare.state,"random.array.chisquare.state"
random.array.chisquare.stateLength,"random.array.chisquare.stateLength"
random.array.chisquare.byteLength,"random.array.chisquare.byteLength"
random.array.cosine,"random.array.cosine( len, mu, s[, options] )"
random.array.cosine.assign,"random.array.cosine.assign( mu, s, out )"
random.array.cosine.factory,"random.array.cosine.factory( [mu, s, ][options] )"
random.array.cosine.PRNG,"random.array.cosine.PRNG"
random.array.cosine.seed,"random.array.cosine.seed"
random.array.cosine.seedLength,"random.array.cosine.seedLength"
random.array.cosine.state,"random.array.cosine.state"
random.array.cosine.stateLength,"random.array.cosine.stateLength"
random.array.cosine.byteLength,"random.array.cosine.byteLength"
random.array.discreteUniform,"random.array.discreteUniform( len, a, b[, options] )"
random.array.discreteUniform.assign,"random.array.discreteUniform.assign( a, b, out )"
random.array.discreteUniform.factory,"random.array.discreteUniform.factory( [a, b, ][options] )"
random.array.discreteUniform.PRNG,"random.array.discreteUniform.PRNG"
random.array.discreteUniform.seed,"random.array.discreteUniform.seed"
random.array.discreteUniform.seedLength,"random.array.discreteUniform.seedLength"
random.array.discreteUniform.state,"random.array.discreteUniform.state"
random.array.discreteUniform.stateLength,"random.array.discreteUniform.stateLength"
random.array.discreteUniform.byteLength,"random.array.discreteUniform.byteLength"
random.array.erlang,"random.array.erlang( len, k, lambda[, options] )"
random.array.erlang.assign,"random.array.erlang.assign( k, lambda, out )"
random.array.erlang.factory,"random.array.erlang.factory( [k, lambda, ][options] )"
random.array.erlang.PRNG,"random.array.erlang.PRNG"
random.array.erlang.seed,"random.array.erlang.seed"
random.array.erlang.seedLength,"random.array.erlang.seedLength"
random.array.erlang.state,"random.array.erlang.state"
random.array.erlang.stateLength,"random.array.erlang.stateLength"
random.array.erlang.byteLength,"random.array.erlang.byteLength"
random.array.exponential,"random.array.exponential( len, lambda[, options] )"
random.array.exponential.assign,"random.array.exponential.assign( lambda, out )"
random.array.exponential.factory,"random.array.exponential.factory( [lambda, ][options] )"
random.array.exponential.PRNG,"random.array.exponential.PRNG"
random.array.exponential.seed,"random.array.exponential.seed"
random.array.exponential.seedLength,"random.array.exponential.seedLength"
random.array.exponential.state,"random.array.exponential.state"
random.array.exponential.stateLength,"random.array.exponential.stateLength"
random.array.exponential.byteLength,"random.array.exponential.byteLength"
random.array.f,"random.array.f( len, d1, d2[, options] )"
random.array.f.assign,"random.array.f.assign( d1, d2, out )"
random.array.f.factory,"random.array.f.factory( [d1, d2, ][options] )"
random.array.f.PRNG,"random.array.f.PRNG"
random.array.f.seed,"random.array.f.seed"
random.array.f.seedLength,"random.array.f.seedLength"
random.array.f.state,"random.array.f.state"
random.array.f.stateLength,"random.array.f.stateLength"
random.array.f.byteLength,"random.array.f.byteLength"
random.array.frechet,"random.array.frechet( len, alpha, s, m[, options] )"
random.array.frechet.assign,"random.array.frechet.assign( alpha, s, m, out )"
random.array.frechet.factory,"random.array.frechet.factory( [alpha, s, m, ][options] )"
random.array.frechet.PRNG,"random.array.frechet.PRNG"
random.array.frechet.seed,"random.array.frechet.seed"
random.array.frechet.seedLength,"random.array.frechet.seedLength"
random.array.frechet.state,"random.array.frechet.state"
random.array.frechet.stateLength,"random.array.frechet.stateLength"
random.array.frechet.byteLength,"random.array.frechet.byteLength"
random.array.gamma,"random.array.gamma( len, alpha, beta[, options] )"
random.array.gamma.assign,"random.array.gamma.assign( alpha, beta, out )"
random.array.gamma.factory,"random.array.gamma.factory( [alpha, beta, ][options] )"
random.array.gamma.PRNG,"random.array.gamma.PRNG"
random.array.gamma.seed,"random.array.gamma.seed"
random.array.gamma.seedLength,"random.array.gamma.seedLength"
random.array.gamma.state,"random.array.gamma.state"
random.array.gamma.stateLength,"random.array.gamma.stateLength"
random.array.gamma.byteLength,"random.array.gamma.byteLength"
random.array.geometric,"random.array.geometric( len, p[, options] )"
random.array.geometric.assign,"random.array.geometric.assign( p, out )"
random.array.geometric.factory,"random.array.geometric.factory( [p, ][options] )"
random.array.geometric.PRNG,"random.array.geometric.PRNG"
random.array.geometric.seed,"random.array.geometric.seed"
random.array.geometric.seedLength,"random.array.geometric.seedLength"
random.array.geometric.state,"random.array.geometric.state"
random.array.geometric.stateLength,"random.array.geometric.stateLength"
random.array.geometric.byteLength,"random.array.geometric.byteLength"
random.array.gumbel,"random.array.gumbel( len, mu, beta[, options] )"
random.array.gumbel.assign,"random.array.gumbel.assign( mu, beta, out )"
random.array.gumbel.factory,"random.array.gumbel.factory( [mu, beta, ][options] )"
random.array.gumbel.PRNG,"random.array.gumbel.PRNG"
random.array.gumbel.seed,"random.array.gumbel.seed"
random.array.gumbel.seedLength,"random.array.gumbel.seedLength"
random.array.gumbel.state,"random.array.gumbel.state"
random.array.gumbel.stateLength,"random.array.gumbel.stateLength"
random.array.gumbel.byteLength,"random.array.gumbel.byteLength"
random.array.hypergeometric,"random.array.hypergeometric( len, N, K, n[, options] )"
random.array.hypergeometric.assign,"random.array.hypergeometric.assign( N, K, n, out )"
random.array.hypergeometric.factory,"random.array.hypergeometric.factory( [N, K, n, ][options] )"
random.array.hypergeometric.PRNG,"random.array.hypergeometric.PRNG"
random.array.hypergeometric.seed,"random.array.hypergeometric.seed"
random.array.hypergeometric.seedLength,"random.array.hypergeometric.seedLength"
random.array.hypergeometric.state,"random.array.hypergeometric.state"
random.array.hypergeometric.stateLength,"random.array.hypergeometric.stateLength"
random.array.hypergeometric.byteLength,"random.array.hypergeometric.byteLength"
random.array.invgamma,"random.array.invgamma( len, alpha, beta[, options] )"
random.array.invgamma.assign,"random.array.invgamma.assign( alpha, beta, out )"
random.array.invgamma.factory,"random.array.invgamma.factory( [alpha, beta, ][options] )"
random.array.invgamma.PRNG,"random.array.invgamma.PRNG"
random.array.invgamma.seed,"random.array.invgamma.seed"
random.array.invgamma.seedLength,"random.array.invgamma.seedLength"
random.array.invgamma.state,"random.array.invgamma.state"
random.array.invgamma.stateLength,"random.array.invgamma.stateLength"
random.array.invgamma.byteLength,"random.array.invgamma.byteLength"
random.array.kumaraswamy,"random.array.kumaraswamy( len, a, b[, options] )"
random.array.kumaraswamy.assign,"random.array.kumaraswamy.assign( a, b, out )"
random.array.kumaraswamy.factory,"random.array.kumaraswamy.factory( [a, b, ][options] )"
random.array.kumaraswamy.PRNG,"random.array.kumaraswamy.PRNG"
random.array.kumaraswamy.seed,"random.array.kumaraswamy.seed"
random.array.kumaraswamy.seedLength,"random.array.kumaraswamy.seedLength"
random.array.kumaraswamy.state,"random.array.kumaraswamy.state"
random.array.kumaraswamy.stateLength,"random.array.kumaraswamy.stateLength"
random.array.kumaraswamy.byteLength,"random.array.kumaraswamy.byteLength"
random.array.laplace,"random.array.laplace( len, mu, b[, options] )"
random.array.laplace.assign,"random.array.laplace.assign( mu, b, out )"
random.array.laplace.factory,"random.array.laplace.factory( [mu, b, ][options] )"
random.array.laplace.PRNG,"random.array.laplace.PRNG"
random.array.laplace.seed,"random.array.laplace.seed"
random.array.laplace.seedLength,"random.array.laplace.seedLength"
random.array.laplace.state,"random.array.laplace.state"
random.array.laplace.stateLength,"random.array.laplace.stateLength"
random.array.laplace.byteLength,"random.array.laplace.byteLength"
random.array.levy,"random.array.levy( len, mu, c[, options] )"
random.array.levy.assign,"random.array.levy.assign( mu, c, out )"
random.array.levy.factory,"random.array.levy.factory( [mu, c, ][options] )"
random.array.levy.PRNG,"random.array.levy.PRNG"
random.array.levy.seed,"random.array.levy.seed"
random.array.levy.seedLength,"random.array.levy.seedLength"
random.array.levy.state,"random.array.levy.state"
random.array.levy.stateLength,"random.array.levy.stateLength"
random.array.levy.byteLength,"random.array.levy.byteLength"
random.array.logistic,"random.array.logistic( len, mu, s[, options] )"
random.array.logistic.assign,"random.array.logistic.assign( mu, s, out )"
random.array.logistic.factory,"random.array.logistic.factory( [mu, s, ][options] )"
random.array.logistic.PRNG,"random.array.logistic.PRNG"
random.array.logistic.seed,"random.array.logistic.seed"
random.array.logistic.seedLength,"random.array.logistic.seedLength"
random.array.logistic.state,"random.array.logistic.state"
random.array.logistic.stateLength,"random.array.logistic.stateLength"
random.array.logistic.byteLength,"random.array.logistic.byteLength"
random.array.lognormal,"random.array.lognormal( len, mu, sigma[, options] )"
random.array.lognormal.assign,"random.array.lognormal.assign( mu, sigma, out )"
random.array.lognormal.factory,"random.array.lognormal.factory( [mu, sigma, ][options] )"
random.array.lognormal.PRNG,"random.array.lognormal.PRNG"
random.array.lognormal.seed,"random.array.lognormal.seed"
random.array.lognormal.seedLength,"random.array.lognormal.seedLength"
random.array.lognormal.state,"random.array.lognormal.state"
random.array.lognormal.stateLength,"random.array.lognormal.stateLength"
random.array.lognormal.byteLength,"random.array.lognormal.byteLength"
random.array.minstd,"random.array.minstd( len[, options] )"
random.array.minstd.normalized,"random.array.minstd.normalized( len[, options] )"
random.array.minstd.factory,"random.array.minstd.factory( [options] )"
random.array.minstd.PRNG,"random.array.minstd.PRNG"
random.array.minstd.seed,"random.array.minstd.seed"
random.array.minstd.seedLength,"random.array.minstd.seedLength"
random.array.minstd.state,"random.array.minstd.state"
random.array.minstd.stateLength,"random.array.minstd.stateLength"
random.array.minstd.byteLength,"random.array.minstd.byteLength"
random.array.minstdShuffle,"random.array.minstdShuffle( len[, options] )"
random.array.minstdShuffle.normalized,"random.array.minstdShuffle.normalized( len[, options] )"
random.array.minstdShuffle.factory,"random.array.minstdShuffle.factory( [options] )"
random.array.minstdShuffle.PRNG,"random.array.minstdShuffle.PRNG"
random.array.minstdShuffle.seed,"random.array.minstdShuffle.seed"
random.array.minstdShuffle.seedLength,"random.array.minstdShuffle.seedLength"
random.array.minstdShuffle.state,"random.array.minstdShuffle.state"
random.array.minstdShuffle.stateLength,"random.array.minstdShuffle.stateLength"
random.array.minstdShuffle.byteLength,"random.array.minstdShuffle.byteLength"
random.array.mt19937,"random.array.mt19937( len[, options] )"
random.array.mt19937.normalized,"random.array.mt19937.normalized( len[, options] )"
random.array.mt19937.factory,"random.array.mt19937.factory( [options] )"
random.array.mt19937.PRNG,"random.array.mt19937.PRNG"
random.array.mt19937.seed,"random.array.mt19937.seed"
random.array.mt19937.seedLength,"random.array.mt19937.seedLength"
random.array.mt19937.state,"random.array.mt19937.state"
random.array.mt19937.stateLength,"random.array.mt19937.stateLength"
random.array.mt19937.byteLength,"random.array.mt19937.byteLength"
random.array.negativeBinomial,"random.array.negativeBinomial( len, r, p[, options] )"
random.array.negativeBinomial.assign,"random.array.negativeBinomial.assign( r, p, out )"
random.array.negativeBinomial.factory,"random.array.negativeBinomial.factory( [r, p, ][options] )"
random.array.negativeBinomial.PRNG,"random.array.negativeBinomial.PRNG"
random.array.negativeBinomial.seed,"random.array.negativeBinomial.seed"
random.array.negativeBinomial.seedLength,"random.array.negativeBinomial.seedLength"
random.array.negativeBinomial.state,"random.array.negativeBinomial.state"
random.array.negativeBinomial.stateLength,"random.array.negativeBinomial.stateLength"
random.array.negativeBinomial.byteLength,"random.array.negativeBinomial.byteLength"
random.array.normal,"random.array.normal( len, mu, sigma[, options] )"
random.array.normal.assign,"random.array.normal.assign( mu, sigma, out )"
random.array.normal.factory,"random.array.normal.factory( [mu, sigma, ][options] )"
random.array.normal.PRNG,"random.array.normal.PRNG"
random.array.normal.seed,"random.array.normal.seed"
random.array.normal.seedLength,"random.array.normal.seedLength"
random.array.normal.state,"random.array.normal.state"
random.array.normal.stateLength,"random.array.normal.stateLength"
random.array.normal.byteLength,"random.array.normal.byteLength"
random.array.pareto1,"random.array.pareto1( len, alpha, beta[, options] )"
random.array.pareto1.assign,"random.array.pareto1.assign( alpha, beta, out )"
random.array.pareto1.factory,"random.array.pareto1.factory( [alpha, beta, ][options] )"
random.array.pareto1.PRNG,"random.array.pareto1.PRNG"
random.array.pareto1.seed,"random.array.pareto1.seed"
random.array.pareto1.seedLength,"random.array.pareto1.seedLength"
random.array.pareto1.state,"random.array.pareto1.state"
random.array.pareto1.stateLength,"random.array.pareto1.stateLength"
random.array.pareto1.byteLength,"random.array.pareto1.byteLength"
random.array.poisson,"random.array.poisson( len, lambda[, options] )"
random.array.poisson.assign,"random.array.poisson.assign( lambda, out )"
random.array.poisson.factory,"random.array.poisson.factory( [lambda, ][options] )"
random.array.poisson.PRNG,"random.array.poisson.PRNG"
random.array.poisson.seed,"random.array.poisson.seed"
random.array.poisson.seedLength,"random.array.poisson.seedLength"
random.array.poisson.state,"random.array.poisson.state"
random.array.poisson.stateLength,"random.array.poisson.stateLength"
random.array.poisson.byteLength,"random.array.poisson.byteLength"
random.array.randu,"random.array.randu( len[, options] )"
random.array.randu.factory,"random.array.randu.factory( [options] )"
random.array.randu.PRNG,"random.array.randu.PRNG"
random.array.randu.seed,"random.array.randu.seed"
random.array.randu.seedLength,"random.array.randu.seedLength"
random.array.randu.state,"random.array.randu.state"
random.array.randu.stateLength,"random.array.randu.stateLength"
random.array.randu.byteLength,"random.array.randu.byteLength"
random.array.rayleigh,"random.array.rayleigh( len, sigma[, options] )"
random.array.rayleigh.assign,"random.array.rayleigh.assign( sigma, out )"
random.array.rayleigh.factory,"random.array.rayleigh.factory( [sigma, ][options] )"
random.array.rayleigh.PRNG,"random.array.rayleigh.PRNG"
random.array.rayleigh.seed,"random.array.rayleigh.seed"
random.array.rayleigh.seedLength,"random.array.rayleigh.seedLength"
random.array.rayleigh.state,"random.array.rayleigh.state"
random.array.rayleigh.stateLength,"random.array.rayleigh.stateLength"
random.array.rayleigh.byteLength,"random.array.rayleigh.byteLength"
random.array.t,"random.array.t( len, v[, options] )"
random.array.t.assign,"random.array.t.assign( v, out )"
random.array.t.factory,"random.array.t.factory( [v, ][options] )"
random.array.t.PRNG,"random.array.t.PRNG"
random.array.t.seed,"random.array.t.seed"
random.array.t.seedLength,"random.array.t.seedLength"
random.array.t.state,"random.array.t.state"
random.array.t.stateLength,"random.array.t.stateLength"
random.array.t.byteLength,"random.array.t.byteLength"
random.array.triangular,"random.array.triangular( len, a, b, c[, options] )"
random.array.triangular.assign,"random.array.triangular.assign( a, b, c, out )"
random.array.triangular.factory,"random.array.triangular.factory( [a, b, c, ][options] )"
random.array.triangular.PRNG,"random.array.triangular.PRNG"
random.array.triangular.seed,"random.array.triangular.seed"
random.array.triangular.seedLength,"random.array.triangular.seedLength"
random.array.triangular.state,"random.array.triangular.state"
random.array.triangular.stateLength,"random.array.triangular.stateLength"
random.array.triangular.byteLength,"random.array.triangular.byteLength"
random.array.uniform,"random.array.uniform( len, a, b[, options] )"
random.array.uniform.assign,"random.array.uniform.assign( a, b, out )"
random.array.uniform.factory,"random.array.uniform.factory( [a, b, ][options] )"
random.array.uniform.PRNG,"random.array.uniform.PRNG"
random.array.uniform.seed,"random.array.uniform.seed"
random.array.uniform.seedLength,"random.array.uniform.seedLength"
random.array.uniform.state,"random.array.uniform.state"
random.array.uniform.stateLength,"random.array.uniform.stateLength"
random.array.uniform.byteLength,"random.array.uniform.byteLength"
random.array.weibull,"random.array.weibull( len, k, lambda[, options] )"
random.array.weibull.assign,"random.array.weibull.assign( k, lambda, out )"
random.array.weibull.factory,"random.array.weibull.factory( [k, lambda, ][options] )"
random.array.weibull.PRNG,"random.array.weibull.PRNG"
random.array.weibull.seed,"random.array.weibull.seed"
random.array.weibull.seedLength,"random.array.weibull.seedLength"
random.array.weibull.state,"random.array.weibull.state"
random.array.weibull.stateLength,"random.array.weibull.stateLength"
random.array.weibull.byteLength,"random.array.weibull.byteLength"
random.iterators.arcsine,"random.iterators.arcsine( a, b[, options] )"
random.iterators.bernoulli,"random.iterators.bernoulli( p[, options] )"
random.iterators.beta,"random.iterators.beta( α, β[, options] )"
random.iterators.betaprime,"random.iterators.betaprime( α, β[, options] )"
random.iterators.binomial,"random.iterators.binomial( n, p[, options] )"
random.iterators.boxMuller,"random.iterators.boxMuller( [options] )"
random.iterators.cauchy,"random.iterators.cauchy( x0, Ɣ[, options] )"
random.iterators.chi,"random.iterators.chi( k[, options] )"
random.iterators.chisquare,"random.iterators.chisquare( k[, options] )"
random.iterators.cosine,"random.iterators.cosine( μ, s[, options] )"
random.iterators.discreteUniform,"random.iterators.discreteUniform( a, b[, options] )"
random.iterators.erlang,"random.iterators.erlang( k, λ[, options] )"
random.iterators.exponential,"random.iterators.exponential( λ[, options] )"
random.iterators.f,"random.iterators.f( d1, d2[, options] )"
random.iterators.frechet,"random.iterators.frechet( α, s, m[, options] )"
random.iterators.gamma,"random.iterators.gamma( α, β[, options] )"
random.iterators.geometric,"random.iterators.geometric( p[, options] )"
random.iterators.gumbel,"random.iterators.gumbel( μ, β[, options] )"
random.iterators.hypergeometric,"random.iterators.hypergeometric( N, K, n[, options] )"
random.iterators.improvedZiggurat,"random.iterators.improvedZiggurat( [options] )"
random.iterators.invgamma,"random.iterators.invgamma( α, β[, options] )"
random.iterators.kumaraswamy,"random.iterators.kumaraswamy( a, b[, options] )"
random.iterators.laplace,"random.iterators.laplace( μ, b[, options] )"
random.iterators.levy,"random.iterators.levy( μ, c[, options] )"
random.iterators.logistic,"random.iterators.logistic( μ, s[, options] )"
random.iterators.lognormal,"random.iterators.lognormal( μ, σ[, options] )"
random.iterators.minstd,"random.iterators.minstd( [options] )"
random.iterators.minstdShuffle,"random.iterators.minstdShuffle( [options] )"
random.iterators.mt19937,"random.iterators.mt19937( [options] )"
random.iterators.negativeBinomial,"random.iterators.negativeBinomial( r, p[, options] )"
random.iterators.normal,"random.iterators.normal( μ, σ[, options] )"
random.iterators.pareto1,"random.iterators.pareto1( α, β[, options] )"
random.iterators.poisson,"random.iterators.poisson( λ[, options] )"
random.iterators.randi,"random.iterators.randi( [options] )"
random.iterators.randn,"random.iterators.randn( [options] )"
random.iterators.randu,"random.iterators.randu( [options] )"
random.iterators.rayleigh,"random.iterators.rayleigh( σ[, options] )"
random.iterators.t,"random.iterators.t( v[, options] )"
random.iterators.triangular,"random.iterators.triangular( a, b, c[, options] )"
random.iterators.uniform,"random.iterators.uniform( a, b[, options] )"
random.iterators.weibull,"random.iterators.weibull( k, λ[, options] )"
random.streams.arcsine,"random.streams.arcsine( a, b[, options] )"
random.streams.arcsine.factory,"random.streams.arcsine.factory( [a, b, ][options] )"
random.streams.arcsine.objectMode,"random.streams.arcsine.objectMode( a, b[, options] )"
random.streams.bernoulli,"random.streams.bernoulli( p[, options] )"
random.streams.bernoulli.factory,"random.streams.bernoulli.factory( [p, ][options] )"
random.streams.bernoulli.objectMode,"random.streams.bernoulli.objectMode( p[, options] )"
random.streams.beta,"random.streams.beta( α, β[, options] )"
random.streams.beta.factory,"random.streams.beta.factory( [α, β, ][options] )"
random.streams.beta.objectMode,"random.streams.beta.objectMode( α, β[, options] )"
random.streams.betaprime,"random.streams.betaprime( α, β[, options] )"
random.streams.betaprime.factory,"random.streams.betaprime.factory( [α, β, ][options] )"
random.streams.betaprime.objectMode,"random.streams.betaprime.objectMode( α, β[, options] )"
random.streams.binomial,"random.streams.binomial( n, p[, options] )"
random.streams.binomial.factory,"random.streams.binomial.factory( [n, p, ][options] )"
random.streams.binomial.objectMode,"random.streams.binomial.objectMode( n, p[, options] )"
random.streams.boxMuller,"random.streams.boxMuller( [options] )"
random.streams.boxMuller.factory,"random.streams.boxMuller.factory( [options] )"
random.streams.boxMuller.objectMode,"random.streams.boxMuller.objectMode( [options] )"
random.streams.cauchy,"random.streams.cauchy( x0, γ[, options] )"
random.streams.cauchy.factory,"random.streams.cauchy.factory( [x0, γ, ][options] )"
random.streams.cauchy.objectMode,"random.streams.cauchy.objectMode( x0, γ[, options] )"
random.streams.chi,"random.streams.chi( k[, options] )"
random.streams.chi.factory,"random.streams.chi.factory( [k, ][options] )"
random.streams.chi.objectMode,"random.streams.chi.objectMode( k[, options] )"
random.streams.chisquare,"random.streams.chisquare( k[, options] )"
random.streams.chisquare.factory,"random.streams.chisquare.factory( [k, ][options] )"
random.streams.chisquare.objectMode,"random.streams.chisquare.objectMode( k[, options] )"
random.streams.cosine,"random.streams.cosine( μ, s[, options] )"
random.streams.cosine.factory,"random.streams.cosine.factory( [μ, s, ][options] )"
random.streams.cosine.objectMode,"random.streams.cosine.objectMode( μ, s[, options] )"
random.streams.discreteUniform,"random.streams.discreteUniform( a, b[, options] )"
random.streams.discreteUniform.factory,"random.streams.discreteUniform.factory( [a, b, ][options] )"
random.streams.discreteUniform.objectMode,"random.streams.discreteUniform.objectMode( a, b[, options] )"
random.streams.erlang,"random.streams.erlang( k, λ[, options] )"
random.streams.erlang.factory,"random.streams.erlang.factory( [k, λ, ][options] )"
random.streams.erlang.objectMode,"random.streams.erlang.objectMode( k, λ[, options] )"
random.streams.exponential,"random.streams.exponential( λ[, options] )"
random.streams.exponential.factory,"random.streams.exponential.factory( [λ, ][options] )"
random.streams.exponential.objectMode,"random.streams.exponential.objectMode( λ[, options] )"
random.streams.f,"random.streams.f( d1, d2[, options] )"
random.streams.f.factory,"random.streams.f.factory( [d1, d2, ][options] )"
random.streams.f.objectMode,"random.streams.f.objectMode( d1, d2[, options] )"
random.streams.frechet,"random.streams.frechet( α, s, m[, options] )"
random.streams.frechet.factory,"random.streams.frechet.factory( [α, s, m,][options] )"
random.streams.frechet.objectMode,"random.streams.frechet.objectMode( α, s, m[, options] )"
random.streams.gamma,"random.streams.gamma( α, β[, options] )"
random.streams.gamma.factory,"random.streams.gamma.factory( [α, β, ][options] )"
random.streams.gamma.objectMode,"random.streams.gamma.objectMode( α, β[, options] )"
random.streams.geometric,"random.streams.geometric( p[, options] )"
random.streams.geometric.factory,"random.streams.geometric.factory( [p, ][options] )"
random.streams.geometric.objectMode,"random.streams.geometric.objectMode( p[, options] )"
random.streams.gumbel,"random.streams.gumbel( μ, β[, options] )"
random.streams.gumbel.factory,"random.streams.gumbel.factory( [μ, β, ][options] )"
random.streams.gumbel.objectMode,"random.streams.gumbel.objectMode( μ, β[, options] )"
random.streams.hypergeometric,"random.streams.hypergeometric( N, K, n[, options] )"
random.streams.hypergeometric.factory,"random.streams.hypergeometric.factory( [N, K, n,][options] )"
random.streams.hypergeometric.objectMode,"random.streams.hypergeometric.objectMode( N, K, n[, options] )"
random.streams.improvedZiggurat,"random.streams.improvedZiggurat( [options] )"
random.streams.improvedZiggurat.factory,"random.streams.improvedZiggurat.factory( [options] )"
random.streams.improvedZiggurat.objectMode,"random.streams.improvedZiggurat.objectMode( [options] )"
random.streams.invgamma,"random.streams.invgamma( α, β[, options] )"
random.streams.invgamma.factory,"random.streams.invgamma.factory( [α, β, ][options] )"
random.streams.invgamma.objectMode,"random.streams.invgamma.objectMode( α, β[, options] )"
random.streams.kumaraswamy,"random.streams.kumaraswamy( a, b[, options] )"
random.streams.kumaraswamy.factory,"random.streams.kumaraswamy.factory( [a, b, ][options] )"
random.streams.kumaraswamy.objectMode,"random.streams.kumaraswamy.objectMode( a, b[, options] )"
random.streams.laplace,"random.streams.laplace( μ, b[, options] )"
random.streams.laplace.factory,"random.streams.laplace.factory( [μ, b, ][options] )"
random.streams.laplace.objectMode,"random.streams.laplace.objectMode( μ, b[, options] )"
random.streams.levy,"random.streams.levy( μ, c[, options] )"
random.streams.levy.factory,"random.streams.levy.factory( [μ, c, ][options] )"
random.streams.levy.objectMode,"random.streams.levy.objectMode( μ, c[, options] )"
random.streams.logistic,"random.streams.logistic( μ, s[, options] )"
random.streams.logistic.factory,"random.streams.logistic.factory( [μ, s, ][options] )"
random.streams.logistic.objectMode,"random.streams.logistic.objectMode( μ, s[, options] )"
random.streams.lognormal,"random.streams.lognormal( μ, σ[, options] )"
random.streams.lognormal.factory,"random.streams.lognormal.factory( [μ, σ, ][options] )"
random.streams.lognormal.objectMode,"random.streams.lognormal.objectMode( μ, σ[, options] )"
random.streams.minstd,"random.streams.minstd( [options] )"
random.streams.minstd.factory,"random.streams.minstd.factory( [options] )"
random.streams.minstd.objectMode,"random.streams.minstd.objectMode( [options] )"
random.streams.minstdShuffle,"random.streams.minstdShuffle( [options] )"
random.streams.minstdShuffle.factory,"random.streams.minstdShuffle.factory( [options] )"
random.streams.minstdShuffle.objectMode,"random.streams.minstdShuffle.objectMode( [options] )"
random.streams.mt19937,"random.streams.mt19937( [options] )"
random.streams.mt19937.factory,"random.streams.mt19937.factory( [options] )"
random.streams.mt19937.objectMode,"random.streams.mt19937.objectMode( [options] )"
random.streams.negativeBinomial,"random.streams.negativeBinomial( r, p[, options] )"
random.streams.negativeBinomial.factory,"random.streams.negativeBinomial.factory( [r, p, ][options] )"
random.streams.negativeBinomial.objectMode,"random.streams.negativeBinomial.objectMode( r, p[, options] )"
random.streams.normal,"random.streams.normal( μ, σ[, options] )"
random.streams.normal.factory,"random.streams.normal.factory( [μ, σ, ][options] )"
random.streams.normal.objectMode,"random.streams.normal.objectMode( μ, σ[, options] )"
random.streams.pareto1,"random.streams.pareto1( α, β[, options] )"
random.streams.pareto1.factory,"random.streams.pareto1.factory( [α, β, ][options] )"
random.streams.pareto1.objectMode,"random.streams.pareto1.objectMode( α, β[, options] )"
random.streams.poisson,"random.streams.poisson( λ[, options] )"
random.streams.poisson.factory,"random.streams.poisson.factory( [λ, ][options] )"
random.streams.poisson.objectMode,"random.streams.poisson.objectMode( λ[, options] )"
random.streams.randi,"random.streams.randi( [options] )"
random.streams.randi.factory,"random.streams.randi.factory( [options] )"
random.streams.randi.objectMode,"random.streams.randi.objectMode( [options] )"
random.streams.randn,"random.streams.randn( [options] )"
random.streams.randn.factory,"random.streams.randn.factory( [options] )"
random.streams.randn.objectMode,"random.streams.randn.objectMode( [options] )"
random.streams.randu,"random.streams.randu( [options] )"
random.streams.randu.factory,"random.streams.randu.factory( [options] )"
random.streams.randu.objectMode,"random.streams.randu.objectMode( [options] )"
random.streams.rayleigh,"random.streams.rayleigh( σ[, options] )"
random.streams.rayleigh.factory,"random.streams.rayleigh.factory( [σ, ][options] )"
random.streams.rayleigh.objectMode,"random.streams.rayleigh.objectMode( σ[, options] )"
random.streams.t,"random.streams.t( v[, options] )"
random.streams.t.factory,"random.streams.t.factory( [v, ][options] )"
random.streams.t.objectMode,"random.streams.t.objectMode( v[, options] )"
random.streams.triangular,"random.streams.triangular( a, b, c[, options] )"
random.streams.triangular.factory,"random.streams.triangular.factory( [a, b, c, ][options] )"
random.streams.triangular.objectMode,"random.streams.triangular.objectMode( a, b, c[, options] )"
random.streams.uniform,"random.streams.uniform( a, b[, options] )"
random.streams.uniform.factory,"random.streams.uniform.factory( [a, b, ][options] )"
random.streams.uniform.objectMode,"random.streams.uniform.objectMode( a, b[, options] )"
random.streams.weibull,"random.streams.weibull( k, λ[, options] )"
random.streams.weibull.factory,"random.streams.weibull.factory( [k, λ, ][options] )"
random.streams.weibull.objectMode,"random.streams.weibull.objectMode( k, λ[, options] )"
random.strided.arcsine,"random.strided.arcsine( N, a, sa, b, sb, out, so[, options] )"
random.strided.arcsine.ndarray,"random.strided.arcsine.ndarray( N, a, sa, oa, b, sb, ob, out, so, oo[, options] )"
random.strided.bernoulli,"random.strided.bernoulli( N, p, sp, out, so )"
random.strided.bernoulli.ndarray,"random.strided.bernoulli.ndarray( N, p, sp, op, out, so, oo )"
random.strided.bernoulli.factory,"random.strided.bernoulli.factory( [options] )"
random.strided.bernoulli.PRNG,"random.strided.bernoulli.PRNG"
random.strided.bernoulli.seed,"random.strided.bernoulli.seed"
random.strided.bernoulli.seedLength,"random.strided.bernoulli.seedLength"
random.strided.bernoulli.state,"random.strided.bernoulli.state"
random.strided.bernoulli.stateLength,"random.strided.bernoulli.stateLength"
random.strided.bernoulli.byteLength,"random.strided.bernoulli.byteLength"
random.strided.beta,"random.strided.beta( N, alpha, sa, beta, sb, out, so[, options] )"
random.strided.beta.ndarray,"random.strided.beta.ndarray( N, alpha, sa, oa, beta, sb, ob, out, so, oo[, options] )"
random.strided.betaprime,"random.strided.betaprime( N, alpha, sa, beta, sb, out, so[, options] )"
random.strided.betaprime.ndarray,"random.strided.betaprime.ndarray( N, alpha, sa, oa, beta, sb, ob, out, so, oo[, options] )"
random.strided.chi,"random.strided.chi( N, k, sk, out, so )"
random.strided.chi.ndarray,"random.strided.chi.ndarray( N, k, sk, ok, out, so, oo )"
random.strided.chi.factory,"random.strided.chi.factory( [options] )"
random.strided.chi.PRNG,"random.strided.chi.PRNG"
random.strided.chi.seed,"random.strided.chi.seed"
random.strided.chi.seedLength,"random.strided.chi.seedLength"
random.strided.chi.state,"random.strided.chi.state"
random.strided.chi.stateLength,"random.strided.chi.stateLength"
random.strided.chi.byteLength,"random.strided.chi.byteLength"
random.strided.chisquare,"random.strided.chisquare( N, k, sk, out, so )"
random.strided.chisquare.ndarray,"random.strided.chisquare.ndarray( N, k, sk, ok, out, so, oo )"
random.strided.chisquare.factory,"random.strided.chisquare.factory( [options] )"
random.strided.chisquare.PRNG,"random.strided.chisquare.PRNG"
random.strided.chisquare.seed,"random.strided.chisquare.seed"
random.strided.chisquare.seedLength,"random.strided.chisquare.seedLength"
random.strided.chisquare.state,"random.strided.chisquare.state"
random.strided.chisquare.stateLength,"random.strided.chisquare.stateLength"
random.strided.chisquare.byteLength,"random.strided.chisquare.byteLength"
random.strided.cosine,"random.strided.cosine( N, mu, sm, s, ss, out, so[, options] )"
random.strided.cosine.ndarray,"random.strided.cosine.ndarray( N, mu, sm, om, s, ss, os, out, so, oo[, options] )"
random.strided.discreteUniform,"random.strided.discreteUniform( N, a, sa, b, sb, out, so[, options] )"
random.strided.discreteUniform.ndarray,"random.strided.discreteUniform.ndarray( N, a, sa, oa, b, sb, ob, out, so, oo[, options] )"
random.strided.exponential,"random.strided.exponential( N, lambda, sl, out, so )"
random.strided.exponential.ndarray,"random.strided.exponential.ndarray( N, lambda, sl, ol, out, so, oo )"
random.strided.exponential.factory,"random.strided.exponential.factory( [options] )"
random.strided.exponential.PRNG,"random.strided.exponential.PRNG"
random.strided.exponential.seed,"random.strided.exponential.seed"
random.strided.exponential.seedLength,"random.strided.exponential.seedLength"
random.strided.exponential.state,"random.strided.exponential.state"
random.strided.exponential.stateLength,"random.strided.exponential.stateLength"
random.strided.exponential.byteLength,"random.strided.exponential.byteLength"
random.strided.gamma,"random.strided.gamma( N, alpha, sa, beta, sb, out, so[, options] )"
random.strided.gamma.ndarray,"random.strided.gamma.ndarray( N, alpha, sa, oa, beta, sb, ob, out, so, oo[, options] )"
random.strided.geometric,"random.strided.geometric( N, p, sp, out, so )"
random.strided.geometric.ndarray,"random.strided.geometric.ndarray( N, p, sp, op, out, so, oo )"
random.strided.geometric.factory,"random.strided.geometric.factory( [options] )"
random.strided.geometric.PRNG,"random.strided.geometric.PRNG"
random.strided.geometric.seed,"random.strided.geometric.seed"
random.strided.geometric.seedLength,"random.strided.geometric.seedLength"
random.strided.geometric.state,"random.strided.geometric.state"
random.strided.geometric.stateLength,"random.strided.geometric.stateLength"
random.strided.geometric.byteLength,"random.strided.geometric.byteLength"
random.strided.invgamma,"random.strided.invgamma( N, alpha, sa, beta, sb, out, so[, options] )"
random.strided.invgamma.ndarray,"random.strided.invgamma.ndarray( N, alpha, sa, oa, beta, sb, ob, out, so, oo[, options] )"
random.strided.lognormal,"random.strided.lognormal( N, mu, sm, sigma, ss, out, so[, options] )"
random.strided.lognormal.ndarray,"random.strided.lognormal.ndarray( N, mu, sm, om, sigma, ss, os, out, so, oo[, options] )"
random.strided.minstd,"random.strided.minstd( N, out, so[, options] )"
random.strided.minstd.ndarray,"random.strided.minstd.ndarray( N, out, so, oo[, options] )"
random.strided.minstd.normalized,"random.strided.minstd.normalized( N, out, so[, options] )"
random.strided.minstd.normalized.ndarray,"random.strided.minstd.normalized.ndarray( N, out, so, oo[, options] )"
random.strided.minstdShuffle,"random.strided.minstdShuffle( N, out, so[, options] )"
random.strided.minstdShuffle.ndarray,"random.strided.minstdShuffle.ndarray( N, out, so, oo[, options] )"
random.strided.minstdShuffle.normalized,"random.strided.minstdShuffle.normalized( N, out, so[, options] )"
random.strided.minstdShuffle.normalized.ndarray,"random.strided.minstdShuffle.normalized.ndarray( N, out, so, oo[, options] )"
random.strided.mt19937,"random.strided.mt19937( N, out, so[, options] )"
random.strided.mt19937.ndarray,"random.strided.mt19937.ndarray( N, out, so, oo[, options] )"
random.strided.mt19937.normalized,"random.strided.mt19937.normalized( N, out, so[, options] )"
random.strided.mt19937.normalized.ndarray,"random.strided.mt19937.normalized.ndarray( N, out, so, oo[, options] )"
random.strided.normal,"random.strided.normal( N, mu, sm, sigma, ss, out, so[, options] )"
random.strided.normal.ndarray,"random.strided.normal.ndarray( N, mu, sm, om, sigma, ss, os, out, so, oo[, options] )"
random.strided.poisson,"random.strided.poisson( N, lambda, sl, out, so )"
random.strided.poisson.ndarray,"random.strided.poisson.ndarray( N, lambda, sl, ol, out, so, oo )"
random.strided.poisson.factory,"random.strided.poisson.factory( [options] )"
random.strided.poisson.PRNG,"random.strided.poisson.PRNG"
random.strided.poisson.seed,"random.strided.poisson.seed"
random.strided.poisson.seedLength,"random.strided.poisson.seedLength"
random.strided.poisson.state,"random.strided.poisson.state"
random.strided.poisson.stateLength,"random.strided.poisson.stateLength"
random.strided.poisson.byteLength,"random.strided.poisson.byteLength"
random.strided.randu,"random.strided.randu( N, out, so[, options] )"
random.strided.randu.ndarray,"random.strided.randu.ndarray( N, out, so, oo[, options] )"
random.strided.rayleigh,"random.strided.rayleigh( N, sigma, ss, out, so )"
random.strided.rayleigh.ndarray,"random.strided.rayleigh.ndarray( N, sigma, ss, os, out, so, oo )"
random.strided.rayleigh.factory,"random.strided.rayleigh.factory( [options] )"
random.strided.rayleigh.PRNG,"random.strided.rayleigh.PRNG"
random.strided.rayleigh.seed,"random.strided.rayleigh.seed"
random.strided.rayleigh.seedLength,"random.strided.rayleigh.seedLength"
random.strided.rayleigh.state,"random.strided.rayleigh.state"
random.strided.rayleigh.stateLength,"random.strided.rayleigh.stateLength"
random.strided.rayleigh.byteLength,"random.strided.rayleigh.byteLength"
random.strided.t,"random.strided.t( N, v, sv, out, so )"
random.strided.t.ndarray,"random.strided.t.ndarray( N, v, sv, ov, out, so, oo )"
random.strided.t.factory,"random.strided.t.factory( [options] )"
random.strided.t.PRNG,"random.strided.t.PRNG"
random.strided.t.seed,"random.strided.t.seed"
random.strided.t.seedLength,"random.strided.t.seedLength"
random.strided.t.state,"random.strided.t.state"
random.strided.t.stateLength,"random.strided.t.stateLength"
random.strided.t.byteLength,"random.strided.t.byteLength"
random.strided.uniform,"random.strided.uniform( N, a, sa, b, sb, out, so[, options] )"
random.strided.uniform.ndarray,"random.strided.uniform.ndarray( N, a, sa, oa, b, sb, ob, out, so, oo[, options] )"
random.strided.weibull,"random.strided.weibull( N, k, sk, lambda, sl, out, so[, options] )"
random.strided.weibull.ndarray,"random.strided.weibull.ndarray( N, k, sk, ok, lambda, sl, ol, out, so, oo[, options] )"
ranks,"ranks( arr[, options] )"
readDir,"readDir( path, clbk )"
readDir.sync,"readDir.sync( path )"
readFile,"readFile( file[, options], clbk )"
readFile.sync,"readFile.sync( file[, options] )"
readFileList,"readFileList( filepaths[, options], clbk )"
readFileList.sync,"readFileList.sync( filepaths[, options] )"
readJSON,"readJSON( file[, options], clbk )"
readJSON.sync,"readJSON.sync( file[, options] )"
readWASM,"readWASM( file[, options], clbk )"
readWASM.sync,"readWASM.sync( file[, options] )"
real,"real( z )"
realarray,"realarray( [dtype] )"
realarray,"realarray( length[, dtype] )"
realarray,"realarray( typedarray[, dtype] )"
realarray,"realarray( obj[, dtype] )"
realarray,"realarray( buffer[, byteOffset[, length]][, dtype] )"
realarrayCtors,"realarrayCtors( dtype )"
realarrayDataTypes,"realarrayDataTypes()"
realf,"realf( z )"
realmax,"realmax( dtype )"
realmin,"realmin( dtype )"
reBasename,"reBasename( [platform] )"
reBasename.REGEXP,"reBasename.REGEXP"
reBasename.REGEXP_POSIX,"reBasename.REGEXP_POSIX"
reBasename.REGEXP_WIN32,"reBasename.REGEXP_WIN32"
reBasenamePosix,"reBasenamePosix()"
reBasenamePosix.REGEXP,"reBasenamePosix.REGEXP"
reBasenameWindows,"reBasenameWindows()"
reBasenameWindows.REGEXP,"reBasenameWindows.REGEXP"
reColorHexadecimal,"reColorHexadecimal( [mode] )"
reColorHexadecimal.REGEXP,"reColorHexadecimal.REGEXP"
reColorHexadecimal.REGEXP_SHORTHAND,"reColorHexadecimal.REGEXP_SHORTHAND"
reColorHexadecimal.REGEXP_EITHER,"reColorHexadecimal.REGEXP_EITHER"
reDecimalNumber,"reDecimalNumber( [options] )"
reDecimalNumber.REGEXP,"reDecimalNumber.REGEXP"
reDecimalNumber.REGEXP_CAPTURE,"reDecimalNumber.REGEXP_CAPTURE"
reDirname,"reDirname( [platform] )"
reDirname.REGEXP,"reDirname.REGEXP"
reDirname.REGEXP_POSIX,"reDirname.REGEXP_POSIX"
reDirname.REGEXP_WIN32,"reDirname.REGEXP_WIN32"
reDirnamePosix,"reDirnamePosix()"
reDirnamePosix.REGEXP,"reDirnamePosix.REGEXP"
reDirnameWindows,"reDirnameWindows()"
reDirnameWindows.REGEXP,"reDirnameWindows.REGEXP"
reduce,"reduce( arr, initial, reducer[, thisArg] )"
reduce2d,"reduce2d( arr, initial, reducer[, thisArg] )"
reduceAsync,"reduceAsync( collection, initial, [options,] reducer, done )"
reduceAsync.factory,"reduceAsync.factory( [options,] fcn )"
reduceRight,"reduceRight( arr, initial, reducer[, thisArg] )"
reduceRightAsync,"reduceRightAsync( collection, initial, [options,] reducer, done )"
reduceRightAsync.factory,"reduceRightAsync.factory( [options,] fcn )"
reDurationString,"reDurationString()"
reDurationString.REGEXP,"reDurationString.REGEXP"
reEOL,"reEOL( [options] )"
reEOL.REGEXP,"reEOL.REGEXP"
reEOL.REGEXP_CAPTURE,"reEOL.REGEXP_CAPTURE"
reExtendedLengthPath,"reExtendedLengthPath()"
reExtendedLengthPath.REGEXP,"reExtendedLengthPath.REGEXP"
reExtname,"reExtname( [platform] )"
reExtname.REGEXP,"reExtname.REGEXP"
reExtname.REGEXP_POSIX,"reExtname.REGEXP_POSIX"
reExtname.REGEXP_WIN32,"reExtname.REGEXP_WIN32"
reExtnamePosix,"reExtnamePosix"
reExtnamePosix.REGEXP,"reExtnamePosix.REGEXP"
reExtnameWindows,"reExtnameWindows"
reExtnameWindows.REGEXP,"reExtnameWindows.REGEXP"
reFilename,"reFilename( [platform] )"
reFilename.REGEXP,"reFilename.REGEXP"
reFilename.REGEXP_POSIX,"reFilename.REGEXP_POSIX"
reFilename.REGEXP_WIN32,"reFilename.REGEXP_WIN32"
reFilenamePosix,"reFilenamePosix()"
reFilenamePosix.REGEXP,"reFilenamePosix.REGEXP"
reFilenameWindows,"reFilenameWindows()"
reFilenameWindows.REGEXP,"reFilenameWindows.REGEXP"
reFromString,"reFromString( str )"
reFunctionName,"reFunctionName()"
reFunctionName.REGEXP,"reFunctionName.REGEXP"
regexp2json,"regexp2json( re )"
reim,"reim( z )"
reimf,"reimf( z )"
rejectArguments,"rejectArguments( fcn, predicate[, thisArg] )"
removeFirst,"removeFirst( str[, n][, options] )"
removeLast,"removeLast( str[, n][, options] )"
removePunctuation,"removePunctuation( str )"
removeUTF8BOM,"removeUTF8BOM( str )"
removeWords,"removeWords( str, words[, ignoreCase] )"
rename,"rename( oldPath, newPath, clbk )"
rename.sync,"rename.sync( oldPath, newPath )"
reNativeFunction,"reNativeFunction()"
reNativeFunction.REGEXP,"reNativeFunction.REGEXP"
reorderArguments,"reorderArguments( fcn, indices[, thisArg] )"
repeat,"repeat( str, n )"
replace,"replace( str, search, newval )"
replaceBefore,"replaceBefore( str, search, replacement )"
reRegExp,"reRegExp()"
reRegExp.REGEXP,"reRegExp.REGEXP"
rescape,"rescape( str )"
reSemVer,"reSemVer()"
reSemVer.REGEXP,"reSemVer.REGEXP"
resolveParentPath,"resolveParentPath( path[, options], clbk )"
resolveParentPath.sync,"resolveParentPath.sync( path[, options] )"
resolveParentPathBy,"resolveParentPathBy( path[, options], predicate, clbk )"
resolveParentPathBy.sync,"resolveParentPathBy.sync( path[, options], predicate )"
reUncPath,"reUncPath()"
reUncPath.REGEXP,"reUncPath.REGEXP"
reUtf16SurrogatePair,"reUtf16SurrogatePair()"
reUtf16SurrogatePair.REGEXP,"reUtf16SurrogatePair.REGEXP"
reUtf16UnpairedSurrogate,"reUtf16UnpairedSurrogate()"
reUtf16UnpairedSurrogate.REGEXP,"reUtf16UnpairedSurrogate.REGEXP"
reverseArguments,"reverseArguments( fcn[, thisArg] )"
reverseString,"reverseString( str[, options] )"
reviveBasePRNG,"reviveBasePRNG( key, value )"
reviveBuffer,"reviveBuffer( key, value )"
reviveComplex,"reviveComplex( key, value )"
reviveComplex64,"reviveComplex64( key, value )"
reviveComplex128,"reviveComplex128( key, value )"
reviveError,"reviveError( key, value )"
reviveRegExp,"reviveRegExp( key, value )"
reviveTypedArray,"reviveTypedArray( key, value )"
reWhitespace,"reWhitespace( [options] )"
reWhitespace.REGEXP,"reWhitespace.REGEXP"
reWhitespace.REGEXP_CAPTURE,"reWhitespace.REGEXP_CAPTURE"
rpad,"rpad( str, len[, pad] )"
rtrim,"rtrim( str )"
rtrimN,"rtrimN( str, n[, chars] )"
safeintmax,"safeintmax( dtype )"
safeintmin,"safeintmin( dtype )"
sample,"sample( x[, options] )"
sample.factory,"sample.factory( [pool, ][options] )"
SAVOY_STOPWORDS_FIN,"SAVOY_STOPWORDS_FIN()"
SAVOY_STOPWORDS_FR,"SAVOY_STOPWORDS_FR()"
SAVOY_STOPWORDS_GER,"SAVOY_STOPWORDS_GER()"
SAVOY_STOPWORDS_IT,"SAVOY_STOPWORDS_IT()"
SAVOY_STOPWORDS_POR,"SAVOY_STOPWORDS_POR()"
SAVOY_STOPWORDS_SP,"SAVOY_STOPWORDS_SP()"
SAVOY_STOPWORDS_SWE,"SAVOY_STOPWORDS_SWE()"
scalar2array,"scalar2array( value[, dtype] )"
scalar2ndarray,"scalar2ndarray( value[, options] )"
sdot,"sdot( x, y )"
SECONDS_IN_DAY,"SECONDS_IN_DAY"
SECONDS_IN_HOUR,"SECONDS_IN_HOUR"
SECONDS_IN_MINUTE,"SECONDS_IN_MINUTE"
SECONDS_IN_WEEK,"SECONDS_IN_WEEK"
secondsInMonth,"secondsInMonth( [month[, year]] )"
secondsInYear,"secondsInYear( [value] )"
sentencize,"sentencize( str )"
seq2slice,"seq2slice( str, len, strict )"
setConfigurableReadOnly,"setConfigurableReadOnly( obj, prop, value )"
setConfigurableReadOnlyAccessor,"setConfigurableReadOnlyAccessor( obj, prop, getter )"
setConfigurableReadWriteAccessor,"setConfigurableReadWriteAccessor( obj, prop, getter, setter )"
setConfigurableWriteOnlyAccessor,"setConfigurableWriteOnlyAccessor( obj, prop, setter )"
setMemoizedConfigurableReadOnly,"setMemoizedConfigurableReadOnly( obj, prop, fcn )"
setMemoizedReadOnly,"setMemoizedReadOnly( obj, prop, fcn )"
setNonEnumerableProperty,"setNonEnumerableProperty( obj, prop, value )"
setNonEnumerableReadOnly,"setNonEnumerableReadOnly( obj, prop, value )"
setNonEnumerableReadOnlyAccessor,"setNonEnumerableReadOnlyAccessor( obj, prop, getter )"
setNonEnumerableReadWriteAccessor,"setNonEnumerableReadWriteAccessor( obj, prop, getter, setter )"
setNonEnumerableWriteOnlyAccessor,"setNonEnumerableWriteOnlyAccessor( obj, prop, setter )"
setReadOnly,"setReadOnly( obj, prop, value )"
setReadOnlyAccessor,"setReadOnlyAccessor( obj, prop, getter )"
setReadWriteAccessor,"setReadWriteAccessor( obj, prop, getter, setter )"
setWriteOnlyAccessor,"setWriteOnlyAccessor( obj, prop, setter )"
SharedArrayBuffer,"SharedArrayBuffer( size )"
SharedArrayBuffer.length,"SharedArrayBuffer.length"
SharedArrayBuffer.prototype.byteLength,"SharedArrayBuffer.prototype.byteLength"
SharedArrayBuffer.prototype.slice,"SharedArrayBuffer.prototype.slice( [start[, end]] )"
shift,"shift( collection )"
shuffle,"shuffle( arr[, options] )"
shuffle.factory,"shuffle.factory( [options] )"
sizeOf,"sizeOf( dtype )"
Slice,"Slice( [stop] )"
Slice,"Slice( start, stop[, step] )"
Slice.prototype.start,"Slice.prototype.start"
Slice.prototype.stop,"Slice.prototype.stop"
Slice.prototype.step,"Slice.prototype.step"
Slice.prototype.toString,"Slice.prototype.toString()"
Slice.prototype.toJSON,"Slice.prototype.toJSON()"
snakecase,"snakecase( str )"
some,"some( collection, n )"
someBy,"someBy( collection, n, predicate[, thisArg ] )"
someByAsync,"someByAsync( collection, n, [options,] predicate, done )"
someByAsync.factory,"someByAsync.factory( [options,] predicate )"
someByRight,"someByRight( collection, n, predicate[, thisArg ] )"
someByRightAsync,"someByRightAsync( collection, n, [options,] predicate, done )"
someByRightAsync.factory,"someByRightAsync.factory( [options,] predicate )"
someInBy,"someInBy( obj, n, predicate[, thisArg ] )"
someOwnBy,"someOwnBy( obj, n, predicate[, thisArg ] )"
SOTU,"SOTU( [options] )"
SPACHE_REVISED,"SPACHE_REVISED()"
SPAM_ASSASSIN,"SPAM_ASSASSIN()"
SparklineBase,"SparklineBase( [data,] [options] )"
sparsearray2iterator,"sparsearray2iterator( src[, mapFcn[, thisArg]] )"
sparsearray2iteratorRight,"sparsearray2iteratorRight( src[, mapFcn[, thisArg]] )"
splitStream,"splitStream( [options] )"
splitStream.factory,"splitStream.factory( [options] )"
splitStream.objectMode,"splitStream.objectMode( [options] )"
SQRT_EPS,"SQRT_EPS"
SQRT_HALF,"SQRT_HALF"
SQRT_HALF_PI,"SQRT_HALF_PI"
SQRT_PHI,"SQRT_PHI"
SQRT_PI,"SQRT_PI"
SQRT_THREE,"SQRT_THREE"
SQRT_TWO,"SQRT_TWO"
SQRT_TWO_PI,"SQRT_TWO_PI"
SSA_US_BIRTHS_2000_2014,"SSA_US_BIRTHS_2000_2014()"
sswap,"sswap( x, y )"
Stack,"Stack()"
standalone2pkg,"standalone2pkg( pkg )"
STANDARD_CARD_DECK,"STANDARD_CARD_DECK()"
startcase,"startcase( str )"
startsWith,"startsWith( str, search[, position] )"
STOPWORDS_EN,"STOPWORDS_EN()"
strided.abs,"strided.abs( N, dtypeX, x, strideX, dtypeY, y, strideY )"
strided.abs.ndarray,"strided.abs.ndarray( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY )"
strided.abs2,"strided.abs2( N, dtypeX, x, strideX, dtypeY, y, strideY )"
strided.abs2.ndarray,"strided.abs2.ndarray( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY )"
strided.abs2By,"strided.abs2By( N, x, sx, y, sy, clbk[, thisArg] )"
strided.abs2By.ndarray,"strided.abs2By.ndarray( N, x, sx, ox, y, sy, oy, clbk[, thisArg] )"
strided.absBy,"strided.absBy( N, x, sx, y, sy, clbk[, thisArg] )"
strided.absBy.ndarray,"strided.absBy.ndarray( N, x, sx, ox, y, sy, oy, clbk[, thisArg] )"
strided.acosBy,"strided.acosBy( N, x, sx, y, sy, clbk[, thisArg] )"
strided.acosBy.ndarray,"strided.acosBy.ndarray( N, x, sx, ox, y, sy, oy, clbk[, thisArg] )"
strided.acoshBy,"strided.acoshBy( N, x, sx, y, sy, clbk[, thisArg] )"
strided.acoshBy.ndarray,"strided.acoshBy.ndarray( N, x, sx, ox, y, sy, oy, clbk[, thisArg] )"
strided.acotBy,"strided.acotBy( N, x, sx, y, sy, clbk[, thisArg] )"
strided.acotBy.ndarray,"strided.acotBy.ndarray( N, x, sx, ox, y, sy, oy, clbk[, thisArg] )"
strided.acothBy,"strided.acothBy( N, x, sx, y, sy, clbk[, thisArg] )"
strided.acothBy.ndarray,"strided.acothBy.ndarray( N, x, sx, ox, y, sy, oy, clbk[, thisArg] )"
strided.acovercosBy,"strided.acovercosBy( N, x, sx, y, sy, clbk[, thisArg] )"
strided.acovercosBy.ndarray,"strided.acovercosBy.ndarray( N, x, sx, ox, y, sy, oy, clbk[, thisArg] )"
strided.acoversinBy,"strided.acoversinBy( N, x, sx, y, sy, clbk[, thisArg] )"
strided.acoversinBy.ndarray,"strided.acoversinBy.ndarray( N, x, sx, ox, y, sy, oy, clbk[, thisArg] )"
strided.add,"strided.add( N, dx, x, sx, dy, y, sy, dz, z, sz )"
strided.add.ndarray,"strided.add.ndarray( N, dx, x, sx, ox, dy, y, sy, oy, dz, z, sz, oz )"
strided.addBy,"strided.addBy( N, x, sx, y, sy, z, sz, clbk[, thisArg] )"
strided.addBy.ndarray,"strided.addBy.ndarray( N, x, sx, ox, y, sy, oy, z, sz, oz, clbk[, thisArg] )"
strided.ahavercosBy,"strided.ahavercosBy( N, x, sx, y, sy, clbk[, thisArg] )"
strided.ahavercosBy.ndarray,"strided.ahavercosBy.ndarray( N, x, sx, ox, y, sy, oy, clbk[, thisArg] )"
strided.ahaversinBy,"strided.ahaversinBy( N, x, sx, y, sy, clbk[, thisArg] )"
strided.ahaversinBy.ndarray,"strided.ahaversinBy.ndarray( N, x, sx, ox, y, sy, oy, clbk[, thisArg] )"
strided.asinBy,"strided.asinBy( N, x, sx, y, sy, clbk[, thisArg] )"
strided.asinBy.ndarray,"strided.asinBy.ndarray( N, x, sx, ox, y, sy, oy, clbk[, thisArg] )"
strided.asinhBy,"strided.asinhBy( N, x, sx, y, sy, clbk[, thisArg] )"
strided.asinhBy.ndarray,"strided.asinhBy.ndarray( N, x, sx, ox, y, sy, oy, clbk[, thisArg] )"
strided.atanBy,"strided.atanBy( N, x, sx, y, sy, clbk[, thisArg] )"
strided.atanBy.ndarray,"strided.atanBy.ndarray( N, x, sx, ox, y, sy, oy, clbk[, thisArg] )"
strided.atanhBy,"strided.atanhBy( N, x, sx, y, sy, clbk[, thisArg] )"
strided.atanhBy.ndarray,"strided.atanhBy.ndarray( N, x, sx, ox, y, sy, oy, clbk[, thisArg] )"
strided.avercosBy,"strided.avercosBy( N, x, sx, y, sy, clbk[, thisArg] )"
strided.avercosBy.ndarray,"strided.avercosBy.ndarray( N, x, sx, ox, y, sy, oy, clbk[, thisArg] )"
strided.aversinBy,"strided.aversinBy( N, x, sx, y, sy, clbk[, thisArg] )"
strided.aversinBy.ndarray,"strided.aversinBy.ndarray( N, x, sx, ox, y, sy, oy, clbk[, thisArg] )"
strided.besselj0By,"strided.besselj0By( N, x, sx, y, sy, clbk[, thisArg] )"
strided.besselj0By.ndarray,"strided.besselj0By.ndarray( N, x, sx, ox, y, sy, oy, clbk[, thisArg] )"
strided.besselj1By,"strided.besselj1By( N, x, sx, y, sy, clbk[, thisArg] )"
strided.besselj1By.ndarray,"strided.besselj1By.ndarray( N, x, sx, ox, y, sy, oy, clbk[, thisArg] )"
strided.bessely0By,"strided.bessely0By( N, x, sx, y, sy, clbk[, thisArg] )"
strided.bessely0By.ndarray,"strided.bessely0By.ndarray( N, x, sx, ox, y, sy, oy, clbk[, thisArg] )"
strided.bessely1By,"strided.bessely1By( N, x, sx, y, sy, clbk[, thisArg] )"
strided.bessely1By.ndarray,"strided.bessely1By.ndarray( N, x, sx, ox, y, sy, oy, clbk[, thisArg] )"
strided.binetBy,"strided.binetBy( N, x, sx, y, sy, clbk[, thisArg] )"
strided.binetBy.ndarray,"strided.binetBy.ndarray( N, x, sx, ox, y, sy, oy, clbk[, thisArg] )"
strided.cbrt,"strided.cbrt( N, dtypeX, x, strideX, dtypeY, y, strideY )"
strided.cbrt.ndarray,"strided.cbrt.ndarray( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY )"
strided.cbrtBy,"strided.cbrtBy( N, x, sx, y, sy, clbk[, thisArg] )"
strided.cbrtBy.ndarray,"strided.cbrtBy.ndarray( N, x, sx, ox, y, sy, oy, clbk[, thisArg] )"
strided.ceil,"strided.ceil( N, dtypeX, x, strideX, dtypeY, y, strideY )"
strided.ceil.ndarray,"strided.ceil.ndarray( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY )"
strided.cosBy,"strided.cosBy( N, x, sx, y, sy, clbk[, thisArg] )"
strided.cosBy.ndarray,"strided.cosBy.ndarray( N, x, sx, ox, y, sy, oy, clbk[, thisArg] )"
strided.deg2rad,"strided.deg2rad( N, dtypeX, x, strideX, dtypeY, y, strideY )"
strided.deg2rad.ndarray,"strided.deg2rad.ndarray( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY )"
strided.dataTypes,"strided.dataTypes()"
strided.dcbrtBy,"strided.dcbrtBy( N, x, sx, y, sy, clbk[, thisArg] )"
strided.dcbrtBy.ndarray,"strided.dcbrtBy.ndarray( N, x, sx, ox, y, sy, oy, clbk[, thisArg] )"
strided.dispatch,"strided.dispatch( fcns, types, data, nargs, nin, nout )"
strided.dispatchBy,"strided.dispatchBy( fcns, types, data, nargs, nin, nout )"
strided.floor,"strided.floor( N, dtypeX, x, strideX, dtypeY, y, strideY )"
strided.floor.ndarray,"strided.floor.ndarray( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY )"
strided.inv,"strided.inv( N, dtypeX, x, strideX, dtypeY, y, strideY )"
strided.inv.ndarray,"strided.inv.ndarray( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY )"
strided.mul,"strided.mul( N, dx, x, sx, dy, y, sy, dz, z, sz )"
strided.mul.ndarray,"strided.mul.ndarray( N, dx, x, sx, ox, dy, y, sy, oy, dz, z, sz, oz )"
strided.mulBy,"strided.mulBy( N, x, sx, y, sy, z, sz, clbk[, thisArg] )"
strided.mulBy.ndarray,"strided.mulBy.ndarray( N, x, sx, ox, y, sy, oy, z, sz, oz, clbk[, thisArg] )"
strided.ramp,"strided.ramp( N, dtypeX, x, strideX, dtypeY, y, strideY )"
strided.ramp.ndarray,"strided.ramp.ndarray( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY )"
strided.rsqrt,"strided.rsqrt( N, dtypeX, x, strideX, dtypeY, y, strideY )"
strided.rsqrt.ndarray,"strided.rsqrt.ndarray( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY )"
strided.sinBy,"strided.sinBy( N, x, sx, y, sy, clbk[, thisArg] )"
strided.sinBy.ndarray,"strided.sinBy.ndarray( N, x, sx, ox, y, sy, oy, clbk[, thisArg] )"
strided.sqrt,"strided.sqrt( N, dtypeX, x, strideX, dtypeY, y, strideY )"
strided.sqrt.ndarray,"strided.sqrt.ndarray( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY )"
strided.sqrtBy,"strided.sqrtBy( N, x, sx, y, sy, clbk[, thisArg] )"
strided.sqrtBy.ndarray,"strided.sqrtBy.ndarray( N, x, sx, ox, y, sy, oy, clbk[, thisArg] )"
strided.sub,"strided.sub( N, dx, x, sx, dy, y, sy, dz, z, sz )"
strided.sub.ndarray,"strided.sub.ndarray( N, dx, x, sx, ox, dy, y, sy, oy, dz, z, sz, oz )"
strided.subBy,"strided.subBy( N, x, sx, y, sy, z, sz, clbk[, thisArg] )"
strided.subBy.ndarray,"strided.subBy.ndarray( N, x, sx, ox, y, sy, oy, z, sz, oz, clbk[, thisArg] )"
strided.trunc,"strided.trunc( N, dtypeX, x, strideX, dtypeY, y, strideY )"
strided.trunc.ndarray,"strided.trunc.ndarray( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY )"
stridedarray2iterator,"stridedarray2iterator( N, src, stride, offset[, mapFcn[, thisArg]] )"
stridedArrayStream,"stridedArrayStream( N, buffer, stride, offset[, options] )"
stridedArrayStream.factory,"stridedArrayStream.factory( [options] )"
stridedArrayStream.objectMode,"stridedArrayStream.objectMode( N, buffer, stride, offset[, options] )"
string2buffer,"string2buffer( str[, encoding] )"
sub2ind,"sub2ind( shape, ...subscript[, options] )"
substringAfter,"substringAfter( str, search[, fromIndex] )"
substringAfterLast,"substringAfterLast( str, search[, fromIndex] )"
substringBefore,"substringBefore( str, search )"
substringBeforeLast,"substringBeforeLast( str, search )"
SUTHAHARAN_MULTI_HOP_SENSOR_NETWORK,"SUTHAHARAN_MULTI_HOP_SENSOR_NETWORK()"
SUTHAHARAN_SINGLE_HOP_SENSOR_NETWORK,"SUTHAHARAN_SINGLE_HOP_SENSOR_NETWORK()"
Symbol,"Symbol( [description] )"
tabulate,"tabulate( collection )"
tabulateBy,"tabulateBy( collection, [options,] indicator )"
tabulateByAsync,"tabulateByAsync( collection, [options,] indicator, done )"
tabulateByAsync.factory,"tabulateByAsync.factory( [options,] indicator )"
thunk,"thunk( fcn[, ...args] )"
tic,"tic()"
timeit,"timeit( code, [options,] clbk )"
tmpdir,"tmpdir()"
toc,"toc( time )"
tokenize,"tokenize( str[, keepWhitespace] )"
transformStream,"transformStream( [options] )"
transformStream.factory,"transformStream.factory( [options] )"
transformStream.objectMode,"transformStream.objectMode( [options] )"
transformStream.ctor,"transformStream.ctor( [options] )"
trim,"trim( str )"
truncate,"truncate( str, len[, ending] )"
truncateMiddle,"truncateMiddle( str, len[, seq] )"
trycatch,"trycatch( x, y )"
trycatchAsync,"trycatchAsync( x, y, done )"
tryFunction,"tryFunction( fcn[, thisArg] )"
tryRequire,"tryRequire( id )"
trythen,"trythen( x, y )"
trythenAsync,"trythenAsync( x, y, done )"
ttest,"ttest( x[, y][, options] )"
ttest2,"ttest2( x, y[, options] )"
TWO_PI,"TWO_PI"
typedarray,"typedarray( [dtype] )"
typedarray,"typedarray( length[, dtype] )"
typedarray,"typedarray( typedarray[, dtype] )"
typedarray,"typedarray( obj[, dtype] )"
typedarray,"typedarray( buffer[, byteOffset[, length]][, dtype] )"
typedarray2json,"typedarray2json( arr )"
typedarrayCtors,"typedarrayCtors( dtype )"
typedarrayDataTypes,"typedarrayDataTypes()"
typedarraypool,"typedarraypool( [dtype] )"
typedarraypool,"typedarraypool( length[, dtype] )"
typedarraypool,"typedarraypool( typedarray[, dtype] )"
typedarraypool,"typedarraypool( obj[, dtype] )"
typedarraypool.malloc,"typedarraypool.malloc( [dtype] )"
typedarraypool.malloc,"typedarraypool.malloc( length[, dtype] )"
typedarraypool.malloc,"typedarraypool.malloc( typedarray[, dtype] )"
typedarraypool.malloc,"typedarraypool.malloc( obj[, dtype] )"
typedarraypool.calloc,"typedarraypool.calloc( [dtype] )"
typedarraypool.calloc,"typedarraypool.calloc( length[, dtype] )"
typedarraypool.free,"typedarraypool.free( buf )"
typedarraypool.clear,"typedarraypool.clear()"
typedarraypool.highWaterMark,"typedarraypool.highWaterMark"
typedarraypool.nbytes,"typedarraypool.nbytes"
typedarraypool.factory,"typedarraypool.factory( [options] )"
typemax,"typemax( dtype )"
typemin,"typemin( dtype )"
typeOf,"typeOf( value )"
UINT8_MAX,"UINT8_MAX"
UINT8_NUM_BYTES,"UINT8_NUM_BYTES"
Uint8Array,"Uint8Array()"
Uint8Array,"Uint8Array( length )"
Uint8Array,"Uint8Array( typedarray )"
Uint8Array,"Uint8Array( obj )"
Uint8Array,"Uint8Array( buffer[, byteOffset[, length]] )"
Uint8Array.from,"Uint8Array.from( src[, map[, thisArg]] )"
Uint8Array.of,"Uint8Array.of( element0[, element1[, ...elementN]] )"
Uint8Array.BYTES_PER_ELEMENT,"Uint8Array.BYTES_PER_ELEMENT"
Uint8Array.name,"Uint8Array.name"
Uint8Array.prototype.buffer,"Uint8Array.prototype.buffer"
Uint8Array.prototype.byteLength,"Uint8Array.prototype.byteLength"
Uint8Array.prototype.byteOffset,"Uint8Array.prototype.byteOffset"
Uint8Array.prototype.BYTES_PER_ELEMENT,"Uint8Array.prototype.BYTES_PER_ELEMENT"
Uint8Array.prototype.length,"Uint8Array.prototype.length"
Uint8Array.prototype.copyWithin,"Uint8Array.prototype.copyWithin( target, start[, end] )"
Uint8Array.prototype.entries,"Uint8Array.prototype.entries()"
Uint8Array.prototype.every,"Uint8Array.prototype.every( predicate[, thisArg] )"
Uint8Array.prototype.fill,"Uint8Array.prototype.fill( value[, start[, end]] )"
Uint8Array.prototype.filter,"Uint8Array.prototype.filter( predicate[, thisArg] )"
Uint8Array.prototype.find,"Uint8Array.prototype.find( predicate[, thisArg] )"
Uint8Array.prototype.findIndex,"Uint8Array.prototype.findIndex( predicate[, thisArg] )"
Uint8Array.prototype.forEach,"Uint8Array.prototype.forEach( fcn[, thisArg] )"
Uint8Array.prototype.includes,"Uint8Array.prototype.includes( searchElement[, fromIndex] )"
Uint8Array.prototype.indexOf,"Uint8Array.prototype.indexOf( searchElement[, fromIndex] )"
Uint8Array.prototype.join,"Uint8Array.prototype.join( [separator] )"
Uint8Array.prototype.keys,"Uint8Array.prototype.keys()"
Uint8Array.prototype.lastIndexOf,"Uint8Array.prototype.lastIndexOf( searchElement[, fromIndex] )"
Uint8Array.prototype.map,"Uint8Array.prototype.map( fcn[, thisArg] )"
Uint8Array.prototype.reduce,"Uint8Array.prototype.reduce( fcn[, initialValue] )"
Uint8Array.prototype.reduceRight,"Uint8Array.prototype.reduceRight( fcn[, initialValue] )"
Uint8Array.prototype.reverse,"Uint8Array.prototype.reverse()"
Uint8Array.prototype.set,"Uint8Array.prototype.set( arr[, offset] )"
Uint8Array.prototype.slice,"Uint8Array.prototype.slice( [begin[, end]] )"
Uint8Array.prototype.some,"Uint8Array.prototype.some( predicate[, thisArg] )"
Uint8Array.prototype.sort,"Uint8Array.prototype.sort( [compareFunction] )"
Uint8Array.prototype.subarray,"Uint8Array.prototype.subarray( [begin[, end]] )"
Uint8Array.prototype.toLocaleString,"Uint8Array.prototype.toLocaleString( [locales[, options]] )"
Uint8Array.prototype.toString,"Uint8Array.prototype.toString()"
Uint8Array.prototype.values,"Uint8Array.prototype.values()"
Uint8ClampedArray,"Uint8ClampedArray()"
Uint8ClampedArray,"Uint8ClampedArray( length )"
Uint8ClampedArray,"Uint8ClampedArray( typedarray )"
Uint8ClampedArray,"Uint8ClampedArray( obj )"
Uint8ClampedArray,"Uint8ClampedArray( buffer[, byteOffset[, length]] )"
Uint8ClampedArray.from,"Uint8ClampedArray.from( src[, map[, thisArg]] )"
Uint8ClampedArray.of,"Uint8ClampedArray.of( element0[, element1[, ...elementN]] )"
Uint8ClampedArray.BYTES_PER_ELEMENT,"Uint8ClampedArray.BYTES_PER_ELEMENT"
Uint8ClampedArray.name,"Uint8ClampedArray.name"
Uint8ClampedArray.prototype.buffer,"Uint8ClampedArray.prototype.buffer"
Uint8ClampedArray.prototype.byteLength,"Uint8ClampedArray.prototype.byteLength"
Uint8ClampedArray.prototype.byteOffset,"Uint8ClampedArray.prototype.byteOffset"
Uint8ClampedArray.prototype.BYTES_PER_ELEMENT,"Uint8ClampedArray.prototype.BYTES_PER_ELEMENT"
Uint8ClampedArray.prototype.length,"Uint8ClampedArray.prototype.length"
Uint8ClampedArray.prototype.copyWithin,"Uint8ClampedArray.prototype.copyWithin( target, start[, end] )"
Uint8ClampedArray.prototype.entries,"Uint8ClampedArray.prototype.entries()"
Uint8ClampedArray.prototype.every,"Uint8ClampedArray.prototype.every( predicate[, thisArg] )"
Uint8ClampedArray.prototype.fill,"Uint8ClampedArray.prototype.fill( value[, start[, end]] )"
Uint8ClampedArray.prototype.filter,"Uint8ClampedArray.prototype.filter( predicate[, thisArg] )"
Uint8ClampedArray.prototype.find,"Uint8ClampedArray.prototype.find( predicate[, thisArg] )"
Uint8ClampedArray.prototype.findIndex,"Uint8ClampedArray.prototype.findIndex( predicate[, thisArg] )"
Uint8ClampedArray.prototype.forEach,"Uint8ClampedArray.prototype.forEach( fcn[, thisArg] )"
Uint8ClampedArray.prototype.includes,"Uint8ClampedArray.prototype.includes( searchElement[, fromIndex] )"
Uint8ClampedArray.prototype.indexOf,"Uint8ClampedArray.prototype.indexOf( searchElement[, fromIndex] )"
Uint8ClampedArray.prototype.join,"Uint8ClampedArray.prototype.join( [separator] )"
Uint8ClampedArray.prototype.keys,"Uint8ClampedArray.prototype.keys()"
Uint8ClampedArray.prototype.lastIndexOf,"Uint8ClampedArray.prototype.lastIndexOf( searchElement[, fromIndex] )"
Uint8ClampedArray.prototype.map,"Uint8ClampedArray.prototype.map( fcn[, thisArg] )"
Uint8ClampedArray.prototype.reduce,"Uint8ClampedArray.prototype.reduce( fcn[, initialValue] )"
Uint8ClampedArray.prototype.reduceRight,"Uint8ClampedArray.prototype.reduceRight( fcn[, initialValue] )"
Uint8ClampedArray.prototype.reverse,"Uint8ClampedArray.prototype.reverse()"
Uint8ClampedArray.prototype.set,"Uint8ClampedArray.prototype.set( arr[, offset] )"
Uint8ClampedArray.prototype.slice,"Uint8ClampedArray.prototype.slice( [begin[, end]] )"
Uint8ClampedArray.prototype.some,"Uint8ClampedArray.prototype.some( predicate[, thisArg] )"
Uint8ClampedArray.prototype.sort,"Uint8ClampedArray.prototype.sort( [compareFunction] )"
Uint8ClampedArray.prototype.subarray,"Uint8ClampedArray.prototype.subarray( [begin[, end]] )"
Uint8ClampedArray.prototype.toLocaleString,"Uint8ClampedArray.prototype.toLocaleString( [locales[, options]] )"
Uint8ClampedArray.prototype.toString,"Uint8ClampedArray.prototype.toString()"
Uint8ClampedArray.prototype.values,"Uint8ClampedArray.prototype.values()"
UINT16_MAX,"UINT16_MAX"
UINT16_NUM_BYTES,"UINT16_NUM_BYTES"
Uint16Array,"Uint16Array()"
Uint16Array,"Uint16Array( length )"
Uint16Array,"Uint16Array( typedarray )"
Uint16Array,"Uint16Array( obj )"
Uint16Array,"Uint16Array( buffer[, byteOffset[, length]] )"
Uint16Array.from,"Uint16Array.from( src[, map[, thisArg]] )"
Uint16Array.of,"Uint16Array.of( element0[, element1[, ...elementN]] )"
Uint16Array.BYTES_PER_ELEMENT,"Uint16Array.BYTES_PER_ELEMENT"
Uint16Array.name,"Uint16Array.name"
Uint16Array.prototype.buffer,"Uint16Array.prototype.buffer"
Uint16Array.prototype.byteLength,"Uint16Array.prototype.byteLength"
Uint16Array.prototype.byteOffset,"Uint16Array.prototype.byteOffset"
Uint16Array.prototype.BYTES_PER_ELEMENT,"Uint16Array.prototype.BYTES_PER_ELEMENT"
Uint16Array.prototype.length,"Uint16Array.prototype.length"
Uint16Array.prototype.copyWithin,"Uint16Array.prototype.copyWithin( target, start[, end] )"
Uint16Array.prototype.entries,"Uint16Array.prototype.entries()"
Uint16Array.prototype.every,"Uint16Array.prototype.every( predicate[, thisArg] )"
Uint16Array.prototype.fill,"Uint16Array.prototype.fill( value[, start[, end]] )"
Uint16Array.prototype.filter,"Uint16Array.prototype.filter( predicate[, thisArg] )"
Uint16Array.prototype.find,"Uint16Array.prototype.find( predicate[, thisArg] )"
Uint16Array.prototype.findIndex,"Uint16Array.prototype.findIndex( predicate[, thisArg] )"
Uint16Array.prototype.forEach,"Uint16Array.prototype.forEach( fcn[, thisArg] )"
Uint16Array.prototype.includes,"Uint16Array.prototype.includes( searchElement[, fromIndex] )"
Uint16Array.prototype.indexOf,"Uint16Array.prototype.indexOf( searchElement[, fromIndex] )"
Uint16Array.prototype.join,"Uint16Array.prototype.join( [separator] )"
Uint16Array.prototype.keys,"Uint16Array.prototype.keys()"
Uint16Array.prototype.lastIndexOf,"Uint16Array.prototype.lastIndexOf( searchElement[, fromIndex] )"
Uint16Array.prototype.map,"Uint16Array.prototype.map( fcn[, thisArg] )"
Uint16Array.prototype.reduce,"Uint16Array.prototype.reduce( fcn[, initialValue] )"
Uint16Array.prototype.reduceRight,"Uint16Array.prototype.reduceRight( fcn[, initialValue] )"
Uint16Array.prototype.reverse,"Uint16Array.prototype.reverse()"
Uint16Array.prototype.set,"Uint16Array.prototype.set( arr[, offset] )"
Uint16Array.prototype.slice,"Uint16Array.prototype.slice( [begin[, end]] )"
Uint16Array.prototype.some,"Uint16Array.prototype.some( predicate[, thisArg] )"
Uint16Array.prototype.sort,"Uint16Array.prototype.sort( [compareFunction] )"
Uint16Array.prototype.subarray,"Uint16Array.prototype.subarray( [begin[, end]] )"
Uint16Array.prototype.toLocaleString,"Uint16Array.prototype.toLocaleString( [locales[, options]] )"
Uint16Array.prototype.toString,"Uint16Array.prototype.toString()"
Uint16Array.prototype.values,"Uint16Array.prototype.values()"
UINT32_MAX,"UINT32_MAX"
UINT32_NUM_BYTES,"UINT32_NUM_BYTES"
Uint32Array,"Uint32Array()"
Uint32Array,"Uint32Array( length )"
Uint32Array,"Uint32Array( typedarray )"
Uint32Array,"Uint32Array( obj )"
Uint32Array,"Uint32Array( buffer[, byteOffset[, length]] )"
Uint32Array.from,"Uint32Array.from( src[, map[, thisArg]] )"
Uint32Array.of,"Uint32Array.of( element0[, element1[, ...elementN]] )"
Uint32Array.BYTES_PER_ELEMENT,"Uint32Array.BYTES_PER_ELEMENT"
Uint32Array.name,"Uint32Array.name"
Uint32Array.prototype.buffer,"Uint32Array.prototype.buffer"
Uint32Array.prototype.byteLength,"Uint32Array.prototype.byteLength"
Uint32Array.prototype.byteOffset,"Uint32Array.prototype.byteOffset"
Uint32Array.prototype.BYTES_PER_ELEMENT,"Uint32Array.prototype.BYTES_PER_ELEMENT"
Uint32Array.prototype.length,"Uint32Array.prototype.length"
Uint32Array.prototype.copyWithin,"Uint32Array.prototype.copyWithin( target, start[, end] )"
Uint32Array.prototype.entries,"Uint32Array.prototype.entries()"
Uint32Array.prototype.every,"Uint32Array.prototype.every( predicate[, thisArg] )"
Uint32Array.prototype.fill,"Uint32Array.prototype.fill( value[, start[, end]] )"
Uint32Array.prototype.filter,"Uint32Array.prototype.filter( predicate[, thisArg] )"
Uint32Array.prototype.find,"Uint32Array.prototype.find( predicate[, thisArg] )"
Uint32Array.prototype.findIndex,"Uint32Array.prototype.findIndex( predicate[, thisArg] )"
Uint32Array.prototype.forEach,"Uint32Array.prototype.forEach( fcn[, thisArg] )"
Uint32Array.prototype.includes,"Uint32Array.prototype.includes( searchElement[, fromIndex] )"
Uint32Array.prototype.indexOf,"Uint32Array.prototype.indexOf( searchElement[, fromIndex] )"
Uint32Array.prototype.join,"Uint32Array.prototype.join( [separator] )"
Uint32Array.prototype.keys,"Uint32Array.prototype.keys()"
Uint32Array.prototype.lastIndexOf,"Uint32Array.prototype.lastIndexOf( searchElement[, fromIndex] )"
Uint32Array.prototype.map,"Uint32Array.prototype.map( fcn[, thisArg] )"
Uint32Array.prototype.reduce,"Uint32Array.prototype.reduce( fcn[, initialValue] )"
Uint32Array.prototype.reduceRight,"Uint32Array.prototype.reduceRight( fcn[, initialValue] )"
Uint32Array.prototype.reverse,"Uint32Array.prototype.reverse()"
Uint32Array.prototype.set,"Uint32Array.prototype.set( arr[, offset] )"
Uint32Array.prototype.slice,"Uint32Array.prototype.slice( [begin[, end]] )"
Uint32Array.prototype.some,"Uint32Array.prototype.some( predicate[, thisArg] )"
Uint32Array.prototype.sort,"Uint32Array.prototype.sort( [compareFunction] )"
Uint32Array.prototype.subarray,"Uint32Array.prototype.subarray( [begin[, end]] )"
Uint32Array.prototype.toLocaleString,"Uint32Array.prototype.toLocaleString( [locales[, options]] )"
Uint32Array.prototype.toString,"Uint32Array.prototype.toString()"
Uint32Array.prototype.values,"Uint32Array.prototype.values()"
umask,"umask( [mask,] [options] )"
uncapitalize,"uncapitalize( str )"
uncapitalizeKeys,"uncapitalizeKeys( obj )"
uncurry,"uncurry( fcn[, arity, ][thisArg] )"
uncurryRight,"uncurryRight( fcn[, arity, ][thisArg] )"
UNICODE_MAX,"UNICODE_MAX"
UNICODE_MAX_BMP,"UNICODE_MAX_BMP"
UnicodeColumnChartSparkline,"UnicodeColumnChartSparkline( [data,] [options] )"
UnicodeLineChartSparkline,"UnicodeLineChartSparkline( [data,] [options] )"
UnicodeSparkline,"UnicodeSparkline( [data,] [options] )"
UnicodeTristateChartSparkline,"UnicodeTristateChartSparkline( [data,] [options] )"
UnicodeUpDownChartSparkline,"UnicodeUpDownChartSparkline( [data,] [options] )"
UnicodeWinLossChartSparkline,"UnicodeWinLossChartSparkline( [data,] [options] )"
unlink,"unlink( path, clbk )"
unlink.sync,"unlink.sync( path )"
unshift,"unshift( collection, ...items )"
until,"until( predicate, fcn[, thisArg] )"
untilAsync,"untilAsync( predicate, fcn, done[, thisArg] )"
untilEach,"untilEach( collection, predicate, fcn[, thisArg] )"
untilEachRight,"untilEachRight( collection, predicate, fcn[, thisArg] )"
unzip,"unzip( arr[, idx] )"
uppercase,"uppercase( str )"
uppercaseKeys,"uppercaseKeys( obj )"
US_STATES_ABBR,"US_STATES_ABBR()"
US_STATES_CAPITALS,"US_STATES_CAPITALS()"
US_STATES_CAPITALS_NAMES,"US_STATES_CAPITALS_NAMES()"
US_STATES_NAMES,"US_STATES_NAMES()"
US_STATES_NAMES_CAPITALS,"US_STATES_NAMES_CAPITALS()"
utf16ToUTF8Array,"utf16ToUTF8Array( str )"
vartest,"vartest( x, y[, options] )"
waterfall,"waterfall( fcns, clbk[, thisArg] )"
waterfall.factory,"waterfall.factory( fcns, clbk[, thisArg] )"
whileAsync,"whileAsync( predicate, fcn, done[, thisArg] )"
whileEach,"whileEach( collection, predicate, fcn[, thisArg] )"
whileEachRight,"whileEachRight( collection, predicate, fcn[, thisArg] )"
whilst,"whilst( predicate, fcn[, thisArg] )"
wilcoxon,"wilcoxon( x[, y][, options] )"
writableProperties,"writableProperties( value )"
writablePropertiesIn,"writablePropertiesIn( value )"
writablePropertyNames,"writablePropertyNames( value )"
writablePropertyNamesIn,"writablePropertyNamesIn( value )"
writablePropertySymbols,"writablePropertySymbols( value )"
writablePropertySymbolsIn,"writablePropertySymbolsIn( value )"
writeFile,"writeFile( file, data[, options], clbk )"
writeFile.sync,"writeFile.sync( file, data[, options] )"
zip,"zip( ...arr[, options] )"
ztest,"ztest( x, sigma[, options] )"
ztest2,"ztest2( x, y, sigmax, sigmay[, options] )"
