{"__done__":"\n__done__( [error[, results]] )\n    Callback invoked to confirm that an asynchronous command has finished\n    executing.\n\n    This callback should only be called *once* per command.\n\n    In environments supporting async/await, top-level await commands are not\n    required to invoke this callback.\n\n    Parameters\n    ----------\n    error: Error|null (optional)\n        Error, if an error occurred during execution, and `null`, if no error\n        occurred.\n\n    results: any (optional)\n        Command results.\n\n    Examples\n    --------\n    > function onTimeout() { __done__( null, 'foo' ) };\n    > var res = setTimeout( onTimeout, 1000 )\n    [ <number>, 'foo' ]\n\n","require":"\nrequire( id )\n    Imports a module, JSON, or local file.\n\n    Modules can be imported from `node_modules`.\n\n    Local modules and JSON files can be imported using a relative path (e.g.,\n    './foo.js', './../bar.json', etc) that will be resolved against the current\n    working directory.\n\n    Parameters\n    ----------\n    id: string\n        Module name or path.\n\n    Returns\n    -------\n    m: any\n        Module export.\n\n    Examples\n    --------\n    > var crypto = require( 'crypto' )\n\n    See Also\n    --------\n    rerequire\n\n","alias2pkg":"\nalias2pkg( alias )\n    Returns the package name associated with a provided alias.\n\n    Parameters\n    ----------\n    alias: any\n        Alias (an object path string or reference).\n\n    Returns\n    -------\n    out: string|undefined\n        Package name.\n\n    Examples\n    --------\n    > var v = alias2pkg( 'base.sin' )\n    '@stdlib/math/base/special/sin'\n\n\nalias2pkg( instance )\n    Returns the package name associated with a provided class instance.\n\n    Only direct instances of documented built-in constructors are supported.\n\n    Parameters\n    ----------\n    instance: any\n        Class instance.\n\n    Returns\n    -------\n    out: string|undefined\n        Package name.\n\n    Examples\n    --------\n    > var v = alias2pkg( new Float64Array( 10 ) )\n    '@stdlib/array/float64'\n\n    See Also\n    --------\n    alias2related, aliases, pkg2alias\n\n","alias2related":"\nalias2related( alias )\n    Returns aliases related to a specified alias.\n\n    Parameters\n    ----------\n    alias: any\n        Alias (an object path string or reference).\n\n    Returns\n    -------\n    out: Array|undefined\n        Related aliases.\n\n    Examples\n    --------\n    > var v = alias2related( 'base.sin' )\n    [...]\n\n\nalias2related( instance )\n    Returns aliases associated with a provided class instance.\n\n    Only direct instances of documented built-in constructors are supported.\n\n    Parameters\n    ----------\n    instance: any\n        Class instance.\n\n    Returns\n    -------\n    out: Array|undefined\n        Related aliases.\n\n    Examples\n    --------\n    > var v = alias2related( new Float64Array( 10 ) )\n    [...]\n\n    See Also\n    --------\n    alias2pkg, aliases, pkg2related\n\n","ans":"\nans\n    Result of the last successfully executed command.\n\n    Examples\n    --------\n    > ans\n\n    See Also\n    --------\n    vars\n\n","assignfrom":"\nassignfrom( workspace, variable )\n    Reads a value from a specified workspace.\n\n    Parameters\n    ----------\n    workspace: string\n        Workspace name.\n\n    variable: string|symbol\n        Variable name.\n\n    Examples\n    --------\n    > workspace( 'foobar' );\n    > var x = 3.14;\n    > workspace( 'barfoo' );\n    > var y = assignfrom( 'foobar', 'x' );\n    > y\n\n    See Also\n    --------\n    assignin, varsWorkspace, workspace, workspaces\n\n","assignin":"\nassignin( workspace, variable, value )\n    Assigns a value to a variable in a specified workspace.\n\n    Parameters\n    ----------\n    workspace: string\n        Workspace name.\n\n    variable: string|symbol\n        Variable name.\n\n    value: any\n        Value to assign.\n\n    Examples\n    --------\n    > assignin( 'base', 'x', 3.14 );\n    > x\n\n    See Also\n    --------\n    assignfrom, varsWorkspace, workspace, workspaces\n\n","citation":"\ncitation()\n    Prints how to cite stdlib in publications.\n\n    Examples\n    --------\n    > citation()\n\n    See Also\n    --------\n    contributors, copyright, credits, donate, help, license\n","clear":"\nclear()\n    Clears the entire REPL screen and scrollback history.\n\n    This function is only applicable for TTY REPLs. In non-TTY REPLs, this\n    function is a non-operation.\n\n    Examples\n    --------\n    > clear()\n\n    See Also\n    --------\n    quit, reset, save\n\n","clearHistory":"\nclearHistory()\n    Clears the REPL history.\n\n    Examples\n    --------\n    > clearHistory()\n\n    See Also\n    --------\n    history, reset, save\n\n","clearUserDocs":"\nclearUserDocs( [options] )\n    Deletes user-defined documentation.\n\n    Parameters\n    ----------\n    options: Object (optional)\n    \tOptions.\n\n    options.include: RegExp|ArrayLikeObject (optional)\n    \tDocumentation inclusion filter.\n\n    options.exclude: RegExp|ArrayLikeObject (optional)\n    \tDocumentation exclusion filter.\n\n    options.filter: string (optional)\n        Filter type. This option is only applicable for array-like inclusion and\n        exclusion filters. May be one of the following:\n\n        -   'alias': filter based on documentation alias. If a filter matches a\n        documentation alias, the user-defined documentation is removed.\n        -   'value': filter based on object reference. If a filter matches an\n        associated object reference, the user-defined documentation is removed.\n        -   '*': filter based on both documentation alias and object reference.\n        If a filter matches either a documentation alias or an associated object\n        reference, the user-defined documentation is removed.\n\n        Default: '*'.\n\n    Examples\n    --------\n    > function foo() {};\n    > userDoc( 'foo', foo, '\\nfoo()\\n    Foo bar.\\n' );\n    > help( foo )\n    > clearUserDocs();\n    > help( foo )\n\n    See Also\n    --------\n    userDoc\n\n","clearVars":"\nclearVars( [options] )\n    Deletes user-defined variables in the current workspace.\n\n    Parameters\n    ----------\n    options: Object (optional)\n    \tOptions.\n\n    options.include: RegExp|ArrayLikeObject (optional)\n    \tVariable name inclusion filter.\n\n    options.exclude: RegExp|ArrayLikeObject (optional)\n    \tVariable name exclusion filter.\n\n    Examples\n    --------\n    > var x = 3.14;\n    > x\n    > clearVars();\n    > x\n\n    See Also\n    --------\n    clearWorkspace, vars\n\n","clearWorkspace":"\nclearWorkspace( [name, ][options] )\n    Deletes user-defined variables in a specified workspace.\n\n    Parameters\n    ----------\n    name: string (optional)\n        Workspace name. Default: the current workspace.\n\n    options: Object (optional)\n    \tOptions.\n\n    options.include: RegExp|ArrayLikeObject (optional)\n    \tVariable name inclusion filter.\n\n    options.exclude: RegExp|ArrayLikeObject (optional)\n    \tVariable name exclusion filter.\n\n    Examples\n    --------\n    // Create a new workspace:\n    > workspace( 'foobar' );\n    > var x = 3.14;\n\n    // Switch to another workspace:\n    > workspace( 'barfoo' );\n    > typeof x\n\n    // List the variables in the previous workspace:\n    > varsWorkspace( 'foobar' )\n\n    // Delete the variables in the previous workspace:\n    > clearWorkspace( 'foobar' );\n    > varsWorkspace( 'foobar' )\n\n    // Navigate to the previous workspace:\n    > workspace( 'foobar' );\n\n    // Confirm that the variables were deleted:\n    > x\n\n    See Also\n    --------\n    assignin, clearVars, loadWorkspace, vars, varsWorkspaces, workspaces\n\n","contributors":"\ncontributors()\n    Prints the list of contributors.\n\n    Examples\n    --------\n    > credits()\n\n    See Also\n    --------\n    credits, donate, help\n","copyright":"\ncopyright()\n    Prints copyright information.\n\n    Examples\n    --------\n    > copyright()\n\n    See Also\n    --------\n    contributors, help, license\n","credits":"\ncredits()\n    Prints credits.\n\n    Examples\n    --------\n    > credits()\n\n    See Also\n    --------\n    contributors, donate, help\n","currentWorkspace":"\ncurrentWorkspace\n    Name of the current workspace.\n\n    Examples\n    --------\n    > currentWorkspace\n\n    See Also\n    --------\n    workspaces\n\n","deeprerequire":"\ndeeprerequire( id )\n    Re-imports a module, JSON, or local file and all its associated module\n    dependencies.\n\n    Modules can be imported from `node_modules`.\n\n    Local modules and JSON files can be imported using a relative path (e.g.,\n    './foo.js', './../bar.json', etc) that will be resolved against the current\n    working directory.\n\n    Parameters\n    ----------\n    id: string\n        Module name or path to re-import.\n\n    Returns\n    -------\n    m: any\n        Module export.\n\n    Examples\n    --------\n    > var foo = require( './foo.js' );\n\n    // Modify `./foo.js` and/or its module dependencies...\n\n    // Re-import the module:\n    > foo = deeprerequire( './foo.js' );\n\n    See Also\n    --------\n    load, require, rerequire\n\n","deleteWorkspace":"\ndeleteWorkspace( [name] )\n    Deletes a workspace.\n\n    If not provided an argument, the REPL deletes the current workspace and\n    switches to the 'base' workspace.\n\n    The 'base' workspace *cannot* be deleted.\n\n    Parameters\n    ----------\n    name: string (optional)\n        Workspace name. Default: the current workspace.\n\n    Examples\n    --------\n    > workspace( 'foobar' );\n    > var x = 3.14;\n    > workspace( 'barfoo' );\n    > workspaces()\n    > deleteWorkspace( 'foobar' );\n    > workspaces()\n\n    See Also\n    --------\n    currentWorkspace, loadWorkspace, workspace, workspaces\n\n","donate":"\ndonate()\n    Prints donation information.\n\n    Examples\n    --------\n    > donate()\n\n    See Also\n    --------\n    contributors, help\n","evalin":"\nevalin( workspace, expression )\n    Evaluates an expression in a specified workspace.\n\n    Parameters\n    ----------\n    workspace: string\n        Workspace name.\n\n    expression: string\n        Expression to evaluate.\n\n    Examples\n    --------\n    // Create a workspace:\n    > workspace( 'foobar' );\n\n    // Create and switch to another workspace:\n    > workspace( 'barfoo' );\n\n    // Attempt to evaluate an expression in the first workspace:\n    > evalin( 'foobar', 'var x = 3.14;' );\n\n    // Check that nothing has changed in the current workspace:\n    > x\n\n    // Switch to the first workspace:\n    > workspace( 'foobar' );\n\n    // Check that the expression was successfully evaluated:\n    > x\n\n    See Also\n    --------\n    assignfrom, assignin, loadWorkspace, varsWorkspace, workspace, workspaces\n\n","example":"\nexample( alias )\n    Runs examples for a specified alias.\n\n    Parameters\n    ----------\n    alias: any\n        Alias (an object path string or reference).\n\n    Examples\n    --------\n    > example( base.sin )\n    > example( 'base.sin' )\n\n\nexample( property )\n    Runs examples for a specified property.\n\n    Parameters\n    ----------\n    property: any\n        Alias property (an object path string or reference).\n\n    Examples\n    --------\n    > example( isString.isPrimitive )\n    > example( 'isString.isPrimitive' )\n\n\nexample( instance )\n    Runs examples for a provided class instance.\n\n    Only direct instances of documented built-in constructors are supported.\n\n    Parameters\n    ----------\n    instance: any\n        Class instance.\n\n    Examples\n    --------\n    > example( new Float64Array( 10 ) )\n\n    See Also\n    --------\n    help, info\n\n","global":"\nglobal\n    Global namespace object.\n\n    Examples\n    --------\n    > global\n\n    See Also\n    --------\n    require\n\n","help":"\nhelp()\n    Prints help text.\n\n    Examples\n    --------\n    > help()\n\n\nhelp( alias )\n    Prints help text for a specified alias.\n\n    Parameters\n    ----------\n    alias: any\n        Alias (an object path string or reference).\n\n    Examples\n    --------\n    > help( help )\n    > help( 'help' )\n\n\nhelp( property )\n    Prints help text for a specified property.\n\n    Parameters\n    ----------\n    property: any\n        Alias property (an object path string or reference).\n\n    Examples\n    --------\n    > help( isString.isPrimitive )\n    > help( 'isString.isPrimitive' )\n\n\nhelp( instance )\n    Prints help text for a provided class instance.\n\n    Only direct instances of documented built-in constructors are supported.\n\n    Parameters\n    ----------\n    instance: any\n        Class instance.\n\n    Examples\n    --------\n    > help( new Float64Array( 10 ) )\n\n    See Also\n    --------\n    example, info\n\n","info":"\ninfo( alias )\n    Prints abbreviated help text for a specified alias.\n\n    Parameters\n    ----------\n    alias: any\n        Alias (an object path string or reference).\n\n    Examples\n    --------\n    > info( base.sin )\n    > info( 'base.sin' )\n\n\ninfo( property )\n    Prints abbreviated help text for a specified property.\n\n    Parameters\n    ----------\n    property: any\n        Alias property (an object path string or reference).\n\n    Examples\n    --------\n    > info( isString.isPrimitive )\n    > info( 'isString.isPrimitive' )\n\n\ninfo( instance )\n    Prints abbreviated help text for a provided class instance.\n\n    Only direct instances of documented built-in constructors are supported.\n\n    Parameters\n    ----------\n    instance: any\n        Class instance.\n\n    Examples\n    --------\n    > info( new Float64Array( 10 ) )\n\n    See Also\n    --------\n    example, help\n\n","isKeyword":"\nisKeyword( keyword )\n    Returns a boolean indicating whether a string is a reserved keyword in the\n    REPL environment.\n\n    Parameters\n    ----------\n    keyword: string\n        Keyword to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a string is a reserved keyword.\n\n    Examples\n    --------\n    > isKeyword( 'Float64Array' )\n    true\n    > isKeyword( 'beep_boop_bop_bip_foo_bar' )\n    false\n\n    See Also\n    --------\n    help, info\n\n","isWorkspace":"\nisWorkspace( name )\n    Returns a boolean indicating whether a specified workspace exists.\n\n    Parameters\n    ----------\n    name: string|RegExp\n        Workspace name or a regular expression.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a workspace exists.\n\n    Examples\n    --------\n    > isWorkspace( 'base' )\n    true\n    > isWorkspace( /^presentation/ )\n    <boolean>\n\n    See Also\n    --------\n    workspace, workspaces\n\n","license":"\nlicense()\n    Prints license information.\n\n    Examples\n    --------\n    > license()\n\n    See Also\n    --------\n    copyright, credits, help, license\n","load":"\nload( fpath )\n    Loads and evaluates a JavaScript file, such as a REPL history file, line-by-\n    line.\n\n    Parameters\n    ----------\n    fpath: string\n        File path.\n\n    Examples\n    --------\n    > load( './path/to/file.js' )\n\n    See Also\n    --------\n    save\n\n","loadWorkspace":"\nloadWorkspace( name[, options] )\n    Loads variables from a specified workspace into the current workspace.\n\n    Parameters\n    ----------\n    name: string\n        Workspace name.\n\n    options: Object (optional)\n    \tOptions.\n\n    options.include: RegExp|ArrayLikeObject (optional)\n    \tVariable name inclusion filter.\n\n    options.exclude: RegExp|ArrayLikeObject (optional)\n    \tVariable name exclusion filter.\n\n    options.override: boolean (optional)\n    \tBoolean indicating whether to override existing workspace variables.\n        Default: true.\n\n    Examples\n    --------\n    > workspace( 'foobar' );\n    > var x = 3.14;\n    > workspace( 'barfoo' );\n    > typeof x\n    > loadWorkspace( 'foobar' );\n    > x\n\n    See Also\n    --------\n    vars, varsWorkspace, workspace, workspaces\n\n","logStart":"\nlogStart( fpath )\n    Starts logging commands and printed output to a specified file path.\n\n    Parameters\n    ----------\n    fpath: string\n        File path.\n\n    Returns\n    -------\n    id: number\n        Record identifier.\n\n    Examples\n    --------\n    > var id = logStart( './path/to/file.txt' );\n    > 1 + 1\n    2\n    > 'foo'\n    'foo'\n    > logStop( id );\n\n    See Also\n    --------\n    logStop\n\n","logStop":"\nlogStop( id )\n    Stops logging commands and printed output to a file path associated with a\n    specified record identifier.\n\n    Parameters\n    ----------\n    id: number\n        Record identifier.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the REPL successfully stopped logging\n        evaluated commands.\n\n    Examples\n    --------\n    > var id = logStart( './path/to/file.txt' );\n    > 1 + 1\n    2\n    > 'foo'\n    'foo'\n    > logStop( id );\n\n    See Also\n    --------\n    logfileStart\n\n","presentationStart":"\npresentationStart( [text, ][options] )\n    Starts a REPL presentation.\n\n    When not provided presentation text, an options argument must specify a\n    presentation file to load.\n\n    If a specified workspace already exists, the workspace is silently cleared\n    and a new presentation bound. In order to preserve an existing workspace,\n    specify an alternative presentation workspace name.\n\n    Parameters\n    ----------\n    text: string (optional)\n        Presentation text.\n\n    options: Object (optional)\n        Presentation options.\n\n    options.borderTop: string (optional)\n        Top border character sequence. Default: '*'.\n\n    options.borderBottom: string (optional)\n        Bottom border character sequence. Default: '*'.\n\n    options.borderLeft: string (optional)\n        Left border character sequence. Default: '* '.\n\n    options.borderRight: string (optional)\n        Right border character sequence. Default: ' *'.\n\n    options.counter: string|boolean (optional)\n        Slide counter. If `true`, each slide displays a slide counter. If set to\n        'progress', each slide displays a progress counter. If `false`, no\n        counter is displayed. Default: false.\n\n    options.width: integer|null (optional)\n        Presentation width. If `null`, the presentation width is either computed\n        based on the screen size (if a REPL output stream is TTY) or set to `80`\n        characters. Default: null.\n\n    options.height: integer|null (optional)\n        Presentation height. If `null`, the presentation height is either\n        computed based on the screen size (if a REPL output stream is TTY) or\n        set to `25` rows. Default: null.\n\n    options.workspace: string (optional)\n        REPL workspace name. A presentation adds commands to the specified\n        workspace, thus allowing presentation navigation and interaction.\n        Default: `'presentation-<n>'`, where `n` is an assigned presentation\n        identifier.\n\n    options.load: string (optional)\n        File path specifying a presentation file to load. If presentation text\n        is provided, this option is ignored. Otherwise, this option is required.\n\n    options.watch: boolean (optional)\n        Boolean indicating whether to watch a presentation source file for\n        changes. This option is only applicable if not provided presentation\n        text and the options object specifies a presentation file to load.\n        Default: false.\n\n    options.autoClear: boolean (optional)\n        Boolean indicating whether to automatically clear the screen before\n        writing a rendered slide to the REPL. Default: true.\n\n    options.loop: boolean (optional)\n        Boolean indicating whether to \"loop\" a presentation. Default: false.\n\n    Returns\n    -------\n    id: integer\n        Presentation identifier.\n\n    Examples\n    --------\n    > var id = presentationStart( 'beep\\n---boop\\n' );\n\n    See Also\n    --------\n    presentationStop, workspace, workspaces\n\n","presentationStop":"\npresentationStop( [id] )\n    Stops a REPL presentation.\n\n    If provided a presentation identifier, the corresponding presentation is\n    stopped. Otherwise, assuming the command is invoked in a presentation\n    workspace, the current presentation is stopped.\n\n    When stopping a REPL presentation, the presentation's REPL workspace is\n    both cleared and deleted.\n\n    Parameters\n    ----------\n    id: number|string (optional)\n        Presentation identifier. Must be provided if not currently in a\n        presentation workspace.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the REPL successfully stopped a REPL\n        presentation.\n\n    Examples\n    --------\n    > var id = presentationStart( 'beep\\n---\\nboop\\n' );\n    > presentationStop();\n\n    See Also\n    --------\n    presentationStart, workspace, workspaces\n\n","quit":"\nquit()\n    Exits the REPL.\n\n    Examples\n    --------\n    > quit()\n\n    See Also\n    --------\n    clear, save\n\n","renameWorkspace":"\nrenameWorkspace( oldName, newName )\n    Renames a workspace.\n\n    The new workspace name must not already exist. The only exception is when\n    the old name and the new name are the same; in which case, invoking this\n    function is a non-operation.\n\n    As a 'base' workspace must always exist, when renaming the 'base' workspace,\n    variables from the 'base' workspace are simply copied to a new workspace and\n    the 'base' workspace cleared of user-defined variables.\n\n    Parameters\n    ----------\n    oldName: string\n        Name of workspace to rename.\n\n    newName: string\n        New workspace name.\n\n    Examples\n    --------\n    // Create a new workspace:\n    > workspace( 'foobar' );\n    > var x = 3.14;\n\n    // List current workspaces:\n    > workspaces()\n\n    // Switch to another workspace:\n    > workspace( 'barfoo' );\n\n    // List current workspaces:\n    > workspaces()\n\n    // Rename the first workspace:\n    > renameWorkspace( 'foobar', 'beepboop' );\n\n    // Check the updated list of workspaces:\n    > workspaces()\n\n    // Switch to the renamed workspace:\n    > workspace( 'beepboop' );\n\n    // Confirm that workspace contains previously defined variables:\n    > x\n\n\n    See Also\n    --------\n    currentWorkspace, deleteWorkspace, loadWorkspace, workspace, workspaces\n\n","rerequire":"\nrerequire( id )\n    Re-imports a module, JSON, or local file.\n\n    Modules can be imported from `node_modules`.\n\n    Local modules and JSON files can be imported using a relative path (e.g.,\n    './foo.js', './../bar.json', etc) that will be resolved against the current\n    working directory.\n\n    Parameters\n    ----------\n    id: string\n        Module name or path to re-import.\n\n    Returns\n    -------\n    m: any\n        Module export.\n\n    Examples\n    --------\n    > var foo = require( './foo.js' );\n\n    // Modify `./foo.js`...\n\n    // Re-import the module:\n    > foo = rerequire( './foo.js' );\n\n    See Also\n    --------\n    deeprerequire, load, require\n\n","rerun":"\nrerun( [arg] )\n    Reruns previous commands.\n\n    If provided an integer, the previous `n` commands are re-executed.\n\n    If provided a regular expression, the most recent command matching the\n    regular expression is rerun.\n\n    If provided an array of command identifiers, the command corresponding to\n    each identifier is rerun.\n\n    If provided a subsequence string, the command corresponding to each resolved\n    command identifier is rerun.\n\n    Parameters\n    ----------\n    arg: integer|string|RegExp|Array (optional)\n    \tCommand filter. Default: 1.\n\n    Examples\n    --------\n    > 1+1\n    2\n    > rerun()\n\n    See Also\n    --------\n    history\n\n","reset":"\nreset()\n    Resets the REPL.\n\n    Examples\n    --------\n    > reset()\n\n    See Also\n    --------\n    quit, save\n\n","save":"\nsave( fpath )\n    Saves previous commands to a specified file path.\n\n    Parameters\n    ----------\n    fpath: string\n        File path.\n\n    Examples\n    --------\n    > save( './path/to/file.txt' )\n\n    See Also\n    --------\n    load, saveStart, saveStop\n\n","saveStart":"\nsaveStart( fpath )\n    Starts saving commands to a specified file path.\n\n    Parameters\n    ----------\n    fpath: string\n        File path.\n\n    Returns\n    -------\n    id: number\n        Record identifier.\n\n    Examples\n    --------\n    > var id = saveStart( './path/to/file.txt' );\n    > 1 + 1\n    2\n    > 'foo'\n    'foo'\n    > saveStop( id );\n\n    See Also\n    --------\n    save, saveStop\n\n","saveStop":"\nsaveStop( id )\n    Stops saving commands to a file path associated with a specified record\n    identifier.\n\n    Parameters\n    ----------\n    id: number\n        Record identifier.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the REPL successfully stopped saving\n        evaluated commands.\n\n    Examples\n    --------\n    > var id = saveStart( './path/to/file.txt' );\n    > 1 + 1\n    2\n    > 'foo'\n    'foo'\n    > saveStop( id );\n\n    See Also\n    --------\n    save, saveStart\n\n","tutorial":"\ntutorial( [name, [options]] )\n    Starts a tutorial.\n\n    When not provided a tutorial name, the function prints a list of available\n    tutorials.\n\n    If a specified workspace already exists, the workspace is silently cleared\n    and a new tutorial presentation bound. In order to preserve an existing\n    workspace, specify an alternative tutorial workspace name.\n\n    Parameters\n    ----------\n    name: string (optional)\n        Tutorial name.\n\n    options: Object (optional)\n        Tutorial options.\n\n    options.borderTop: string (optional)\n        Top border character sequence. Default: '*'.\n\n    options.borderBottom: string (optional)\n        Bottom border character sequence. Default: '*'.\n\n    options.borderLeft: string (optional)\n        Left border character sequence. Default: '* '.\n\n    options.borderRight: string (optional)\n        Right border character sequence. Default: ' *'.\n\n    options.counter: string|boolean (optional)\n        Slide counter. If `true`, each tutorial slide displays a slide counter.\n        If set to 'progress', each tutorial slide displays a progress counter.\n        If `false`, no counter is displayed. Default: 'progress'.\n\n    options.workspace: string (optional)\n        REPL workspace name. A tutorial presentation adds commands to the\n        specified workspace, thus allowing tutorial navigation and interaction.\n        Default: `'tutorial-<name>-<n>'`, where `name` is the tutorial name and\n        `n` is an assigned tutorial presentation identifier.\n\n    options.autoClear: boolean (optional)\n        Boolean indicating whether to automatically clear the screen before\n        writing a rendered tutorial slide to the REPL. Default: true.\n\n    Returns\n    -------\n    out: integer|void\n        Tutorial presentation identifier.\n\n    Examples\n    --------\n    > var id = tutorial( 'repl' );\n\n    See Also\n    --------\n    presentationStart, presentationStop, workspace, workspaces\n\n","userDoc":"\nuserDoc( alias, [ref,] doc )\n    Adds user-defined documentation.\n\n    If user-defined documentation already exists for the provided alias, the\n    current documentation is overwritten.\n\n    Parameters\n    ----------\n    alias: string\n        Documentation alias.\n\n    ref: any (optional)\n        Object reference.\n\n    doc: string\n        Documentation.\n\n    Examples\n    --------\n    > function foo() {};\n    > userDoc( 'foo', foo, '\\nfoo()\\n    Foo bar.\\n' );\n    > help( foo )\n\n    See Also\n    --------\n    help\n\n","vars":"\nvars( [options] )\n    Returns a list of variable names in the current workspace.\n\n    Parameters\n    ----------\n    options: Object (optional)\n    \tOptions.\n\n    options.include: RegExp (optional)\n    \tVariable name inclusion filter.\n\n    options.exclude: RegExp (optional)\n    \tVariable name exclusion filter.\n\n    options.types: ArrayLikeObject (optional)\n    \tVariable type inclusion filter(s).\n\n    options.details: boolean (optional)\n    \tBoolean indicating whether to include additional variable details, such\n    \tas variable type, contents, etc. Default: false.\n\n    Examples\n    --------\n    > vars()\n    > vars( { 'details': true } )\n\n    See Also\n    --------\n    help, info, varsWorkspace\n\n","varsWorkspace":"\nvarsWorkspace( [name, ][options] )\n    Returns a list of variable names in a specified workspace.\n\n    Parameters\n    ----------\n    name: string (optional)\n        Workspace name. Default: the current workspace.\n\n    options: Object (optional)\n    \tOptions.\n\n    options.include: RegExp (optional)\n    \tVariable name inclusion filter.\n\n    options.exclude: RegExp (optional)\n    \tVariable name exclusion filter.\n\n    options.types: ArrayLikeObject (optional)\n    \tVariable type inclusion filter(s).\n\n    options.details: boolean (optional)\n    \tBoolean indicating whether to include additional variable details, such\n    \tas variable type, contents, etc. Default: false.\n\n    Examples\n    --------\n    > varsWorkspace()\n    > varsWorkspace( 'base' )\n    > varsWorkspace( { 'details': true } )\n\n    See Also\n    --------\n    vars, workspaces\n\n","workspace":"\nworkspace( name )\n    Switches to a specified workspace.\n\n    If a workspace with the specified name does not exist, the workspace is\n    created.\n\n    Parameters\n    ----------\n    name: string\n        Workspace name.\n\n    Examples\n    --------\n    > workspace( 'foobar' );\n    > var x = 3.14;\n    > workspace( 'beepboop' );\n    > x\n\n    See Also\n    --------\n    assignin, currentWorkspace, vars, workspaces\n\n","workspaces":"\nworkspaces( [options] )\n    Returns a list of workspace names.\n\n    Parameters\n    ----------\n    options: Object (optional)\n    \tOptions.\n\n    options.include: RegExp (optional)\n    \tWorkspace name inclusion filter.\n\n    options.exclude: RegExp (optional)\n    \tWorkspace name exclusion filter.\n\n    options.details: boolean (optional)\n    \tBoolean indicating whether to include additional workspace details, such\n    \tas variable names, types, contents, etc. Default: false.\n\n    Examples\n    --------\n    > workspaces()\n    > workspaces( { 'details': true } )\n\n    See Also\n    --------\n    vars\n\n"}