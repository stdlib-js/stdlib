/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-sync */

'use strict';

// MODULES //

var resolvePath = require( 'path' ).resolve;
var join = require( 'path' ).join;
var resolve = require( 'resolve' ).sync;
var logger = require( 'debug' );
var getKeys = require( 'object-keys' ).shim();
var readFile = require( '@stdlib/fs/read-file' ).sync;
var readJSON = require( '@stdlib/fs/read-json' ).sync;
var writeFile = require( '@stdlib/fs/write-file' ).sync;
var licenseHeader = require( '@stdlib/_tools/licenses/header' );
var resolveParentPath = require( '@stdlib/fs/resolve-parent-path' ).sync;
var dirname = require( '@stdlib/utils/dirname' );
var replace = require( '@stdlib/string/replace' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var namespace = require( '@stdlib/namespace' );


// VARIABLES //

var debug = logger( 'repl:help:build' );

// Create a namespace:
var NAMESPACE = namespace();

// Filepath convention for REPL text:
var REPL_TEXT = 'docs/repl.txt';

// Root search directory:
var ROOT = resolvePath( __dirname, '..', '..', '..' );

// Help docs output file path:
var HELP_OUTPUT = resolvePath( __dirname, '..', 'lib', 'db.js' );

// License header options:
var HEADER_OPTIONS = {
	'copyright': 'The Stdlib Authors',
	'year': ( new Date() ).getFullYear()
};

// Output file preamble:
var PREAMBLE = '/* eslint-disable quotes, max-lines */\n\n'+licenseHeader( 'Apache-2.0', 'js', HEADER_OPTIONS )+'\n/*\n* This file is generated by scripts/build.js.\n*/\n\'use strict\';\n\nvar db = ';

// Output file append:
var APPEND = 'module.exports = db;\n';

// Identifier for inserting 'See Also' links:
var SEE_ALSO = '\n    See Also\n    --------\n';

// Regular expression to detect package aliases:
var RE_ALIASES = /(?:{{alias:[^}]+}})+/g;

// Regular expression to capture a package alias:
var RE_ALIAS = /\{\{alias:([^}]+)\}\}/;


// FUNCTIONS //

/**
* Generates a hash mapping paths to aliases.
*
* @private
* @returns {Object} hash mapping paths to aliases
*/
function aliasMap() {
	var pkg;
	var out;
	var i;

	out = {};
	for ( i = 0; i < NAMESPACE.length; i++ ) {
		pkg = NAMESPACE[ i ];
		out[ pkg.path ] = pkg.alias;
	}
	return out;
}

/**
* Returns an array of unique items.
*
* @private
* @param {StringArray} arr - input array of strings
* @returns {StringArray} array containing only unique items
*/
function unique( arr ) {
	var obj;
	var i;

	obj = {};
	for ( i = 0; i < arr.length; i++ ) {
		if ( !hasOwnProp( obj, arr[ i ] ) ) {
			obj[ arr[ i ] ] = true;
		}
	}
	return getKeys( obj );
}

/**
* Generates a hash for REPL help text.
*
* @private
*/
function createHelp() {
	var related;
	var aliases;
	var fpath;
	var alias;
	var ropts;
	var fopts;
	var file;
	var pkg;
	var out;
	var len;
	var tmp;
	var a;
	var p;
	var i;
	var j;

	ropts = {
		'basedir': ROOT
	};
	debug( 'Package resolve options: %s', JSON.stringify( ropts ) );

	fopts = {
		'encoding': 'utf8'
	};

	aliases = aliasMap();

	out = {};
	for ( i = 0; i < NAMESPACE.length; i++ ) {
		alias = NAMESPACE[ i ].alias;
		debug( 'Resolving `%s`', alias );

		fpath = resolve( NAMESPACE[ i ].path, ropts );
		debug( 'Resolved module path: %s', fpath );

		debug( 'Resolving package information.' );
		fpath = resolveParentPath( 'package.json', {
			'dir': dirname( fpath )
		});
		if ( fpath === null ) {
			debug( 'Unable to resolve package information.' );
			continue;
		}
		debug( 'Reading package information.' );
		pkg = readJSON( fpath, fopts );
		if ( pkg instanceof Error ) {
			debug( 'Unable to read package information: %s', pkg.message );
			continue;
		}
		debug( 'Checking package information.' );
		if ( pkg.name !== NAMESPACE[ i ].path ) {
			debug( 'Package information does not match path. Expected: %s. Actual: %s.', NAMESPACE[ i ].path, pkg.name );
			continue;
		}
		fpath = join( dirname( fpath ), REPL_TEXT );
		debug( 'Attempting to read REPL text: %s', fpath );

		file = readFile( fpath, fopts );
		if ( file instanceof Error ) {
			debug( 'Unable to read REPL text.' );
			continue;
		}
		debug( 'Successfully read REPL text.' );

		debug( 'Processing REPL text.' );
		file = replace( file, '{{alias}}', alias );

		debug( 'Checking for package identifiers.' );
		tmp = file.match( RE_ALIASES );
		if ( tmp ) {
			debug( 'Resolving package identifier aliases.' );
			tmp = unique( tmp );
			for ( j = 0; j < tmp.length; j++ ) {
				p = RE_ALIAS.exec( tmp[ j ] )[ 1 ]; // extracts a package identifier
				a = aliases[ p ];
				if ( a === void 0 ) {
					debug( 'Unable to resolve alias: %s.', p );
					console.warn( 'WARNING: unable to resolve alias `%s` for `%s`. ', p, alias ); // eslint-disable-line no-console
				} else {
					file = replace( file, tmp[ j ], a );
					debug( 'Resolved alias: %s => %s.', p, a );
				}
			}
		}
		debug( 'Resolving related aliases.' );
		len = NAMESPACE[ i ].related.length;
		if ( len ) {
			tmp = [];
			related = NAMESPACE[ i ].related;
			for ( j = 0; j < len; j++ ) {
				a = aliases[ related[ j ] ];
				if ( a === void 0 ) {
					debug( 'Unable to resolve related alias: %s.', related[ j ] );
					console.warn( 'WARNING: unable to resolve related alias `%s` for `%s`. ', related[ j ], alias ); // eslint-disable-line no-console
				} else {
					tmp.push( a );
					debug( 'Resolved alias: %s => %s.', related[ j ], a );
				}
			}
			if ( tmp.length ) {
				file = replace( file, SEE_ALSO, SEE_ALSO+'    '+tmp.join( ', ' ) );
			} else {
				file = replace( file, SEE_ALSO, '' );
			}
		} else {
			file = replace( file, SEE_ALSO, '' );
		}
		debug( 'Successfully processed `%s`.', alias );
		out[ alias ] = file;
	}
	debug( 'Writing REPL text hash to file.' );
	out = PREAMBLE+JSON.stringify( out, null, '\t' )+';\n\n'+APPEND;
	writeFile( HELP_OUTPUT, out, fopts );
}

/**
* Main execution sequence.
*
* @private
*/
function main() {
	debug( 'Generating REPL help documentation.' );
	createHelp();
}


// MAIN //

main();
