{"AFINN_96":"\nAFINN_96()\n    Returns a list of English words rated for valence.\n\n    The returned list contains 1468 English words (and phrases) rated for\n    valence. Negative words have a negative valence [-5,0). Positive words have\n    a positive valence (0,5]. Neutral words have a valence of 0.\n\n    A few notes:\n\n    - The list is an earlier version of AFINN-111.\n    - The list includes misspelled words. Their presence is intentional, as such\n      misspellings frequently occur in social media content.\n    - All words are lowercase.\n    - Some \"words\" are phrases; e.g., \"cashing in\", \"cool stuff\".\n    - Words may contain apostrophes; e.g., \"can't stand\".\n    - Words may contain dashes; e.g., \"cover-up\", \"made-up\".\n\n    Returns\n    -------\n    out: Array<Array>\n        List of English words and their valence.\n\n    Examples\n    --------\n    > var list = AFINN_96()\n    [ [ 'abandon', -2 ], [ 'abandons', -2 ], [ 'abandoned', -2 ], ... ]\n\n    References\n    ----------\n    - Nielsen, Finn Årup. 2011. \"A new ANEW: Evaluation of a word list for\n    sentiment analysis in microblogs.\" In *Proceedings of the ESWC2011 Workshop\n    on 'Making Sense of Microposts': Big Things Come in Small Packages.*,\n    718:93–98. CEUR Workshop Proceedings. <http://ceur-ws.org/Vol-718/paper_16.\n    pdf>.\n\n    * If you use the list for publication or third party consumption, please\n    cite the listed reference.\n\n    See Also\n    --------\n    AFINN_111\n","AFINN_111":"\nAFINN_111()\n    Returns a list of English words rated for valence.\n\n    The returned list contains 2477 English words (and phrases) rated for\n    valence. Negative words have a negative valence [-5,0). Positive words have\n    a positive valence (0,5]. Neutral words have a valence of 0.\n\n    A few notes:\n\n    - The list includes misspelled words. Their presence is intentional, as such\n      misspellings frequently occur in social media content.\n    - All words are lowercase.\n    - Words may contain numbers; e.g., \"n00b\".\n    - Some \"words\" are phrases; e.g., \"cool stuff\", \"not good\".\n    - Words may contain apostrophes; e.g., \"can't stand\".\n    - Words may contain diaeresis; e.g., \"naïve\".\n    - Words may contain dashes; e.g., \"self-deluded\", \"self-confident\".\n\n    Returns\n    -------\n    out: Array<Array>\n        List of English words and their valence.\n\n    Examples\n    --------\n    > var list = AFINN_111()\n    [ [ 'abandon', -2 ], [ 'abandoned', -2 ], [ 'abandons', -2 ], ... ]\n\n    References\n    ----------\n    - Nielsen, Finn Årup. 2011. \"A new ANEW: Evaluation of a word list for\n    sentiment analysis in microblogs.\" In *Proceedings of the ESWC2011 Workshop\n    on 'Making Sense of Microposts': Big Things Come in Small Packages.*,\n    718:93–98. CEUR Workshop Proceedings. <http://ceur-ws.org/Vol-718/paper_16.\n    pdf>.\n\n    * If you use the list for publication or third party consumption, please\n    cite the listed reference.\n\n    See Also\n    --------\n    AFINN_96\n","alias2pkg":"\nalias2pkg( alias )\n    Returns the package name associated with a provided alias.\n\n    Parameters\n    ----------\n    alias: string\n        Alias.\n\n    Returns\n    -------\n    out: string|null\n        Package name.\n\n    Examples\n    --------\n    > var v = alias2pkg( 'base.sin' )\n    '@stdlib/math/base/special/sin'\n\n    See Also\n    --------\n    alias2related, aliases, pkg2alias\n","alias2related":"\nalias2related( alias )\n    Returns aliases related to a specified alias.\n\n    Parameters\n    ----------\n    alias: string\n        Alias.\n\n    Returns\n    -------\n    out: Array|null\n        Related aliases.\n\n    Examples\n    --------\n    > var v = alias2related( 'base.sin' )\n    [...]\n\n    See Also\n    --------\n    alias2pkg, aliases, pkg2related\n","aliases":"\naliases( [namespace] )\n    Returns a list of standard library aliases.\n\n    Parameters\n    ----------\n    namespace: string (optional)\n        Namespace filter.\n\n    Returns\n    -------\n    out: Array\n        List of aliases.\n\n    Examples\n    --------\n    > var o = aliases()\n    [...]\n    > o = aliases( '@stdlib/math/base/special' )\n    [...]\n\n    See Also\n    --------\n    alias2pkg, alias2related, pkg2alias\n","allocUnsafe":"\nallocUnsafe( size )\n    Allocates a buffer having a specified number of bytes.\n\n    The underlying memory of returned buffers is not initialized. Memory\n    contents are unknown and may contain sensitive data.\n\n    When the size is less than half a buffer pool size, memory is allocated from\n    the buffer pool for faster allocation of Buffer instances.\n\n    Parameters\n    ----------\n    size: integer\n        Number of bytes to allocate.\n\n    Returns\n    -------\n    out: Buffer\n        Buffer instance.\n\n    Examples\n    --------\n    > var buf = allocUnsafe( 100 )\n    <Buffer>\n\n    See Also\n    --------\n    Buffer, array2buffer, arraybuffer2buffer, copyBuffer, string2buffer\n","anova1":"\nanova1( x, factor[, options] )\n    Performs a one-way analysis of variance.\n\n    Parameters\n    ----------\n    x: Array<number>\n        Measured values.\n\n    factor: Array\n        Array of treatments.\n\n    options: Object (optional)\n        Options.\n\n    options.alpha: number (optional)\n        Number in the interval `[0,1]` giving the significance level of the\n        hypothesis test. Default: `0.05`.\n\n    Returns\n    -------\n    out: Object\n        Test result object.\n\n    out.alpha: number\n        Significance level.\n\n    out.rejected: boolean\n        Test decision.\n\n    out.pValue: number\n        p-value of the test.\n\n    out.statistic: number\n        Value of test statistic.\n\n    out.method: string\n        Name of test.\n\n    out.means: Object\n        Group means alongside sample sizes and standard errors.\n\n    out.treatmentDf: number\n        Treatment degrees of freedom.\n\n    out.treatmentSS: number\n        Treatment sum of squares.\n\n    out.treatmentMSS: number\n        Treatment mean sum of squares.\n\n    out.errorDf: number\n        Error degrees of freedom.\n\n    out.errorSS: number\n        Error sum of squares.\n\n    out.errorMSS: number\n        Error mean sum of squares.\n\n    out.print: Function\n        Function to print formatted output.\n\n    Examples\n    --------\n    > var x = [1, 3, 5, 2, 4, 6, 8, 7, 10, 11, 12, 15];\n    > var f = [\n    ... 'control', 'treatA', 'treatB', 'treatC', 'control',\n    ... 'treatA', 'treatB', 'treatC', 'control', 'treatA', 'treatB', 'treatC'\n    ... ];\n    > var out = anova1( x, f )\n    {...}\n\n","ANSCOMBES_QUARTET":"\nANSCOMBES_QUARTET()\n    Returns Anscombe's quartet.\n\n    Anscombe's quartet is a set of 4 datasets which all have nearly identical\n    simple statistical properties but vary considerably when graphed. Anscombe\n    created the datasets to demonstrate why graphical data exploration should\n    precede statistical data analysis and to show the effect of outliers on\n    statistical properties.\n\n    Returns\n    -------\n    out: Array<Array>\n        Anscombe's quartet.\n\n    Examples\n    --------\n    > var d = ANSCOMBES_QUARTET()\n    [[[10,8.04],...],[[10,9.14],...],[[10,7.46],...],[[8,6.58],...]]\n\n    References\n    ----------\n    - Anscombe, Francis J. 1973. \"Graphs in Statistical Analysis.\" *The American\n    Statistician* 27 (1). [American Statistical Association, Taylor & Francis,\n    Ltd.]: 17–21. <http://www.jstor.org/stable/2682899>.\n\n","any":"\nany( collection )\n    Tests whether at least one element in a collection is truthy.\n\n    The function immediately returns upon encountering a truthy value.\n\n    If provided an empty collection, the function returns `false`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if an element is truthy; otherwise, the\n        function returns `false`.\n\n    Examples\n    --------\n    > var arr = [ 0, 0, 0, 0, 1 ];\n    > var bool = any( arr )\n    true\n\n    See Also\n    --------\n    anyBy, every, forEach, none, some\n","anyBy":"\nanyBy( collection, predicate[, thisArg ] )\n    Tests whether at least one element in a collection passes a test implemented\n    by a predicate function.\n\n    The predicate function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    The function immediately returns upon encountering a truthy return value.\n\n    If provided an empty collection, the function returns `false`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The test function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if the predicate function returns `true` for\n        any element; otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > function negative( v ) { return ( v < 0 ); };\n    > var arr = [ 1, 2, 3, 4, -1 ];\n    > var bool = anyBy( arr, negative )\n    true\n\n    See Also\n    --------\n    anyByAsync, anyByRight, everyBy, forEach, noneBy, someBy\n","anyByAsync":"\nanyByAsync( collection, [options,] predicate, done )\n    Tests whether at least one element in a collection passes a test implemented\n    by a predicate function.\n\n    When invoked, the predicate function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    predicate function accepts two arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the predicate function accepts three arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other predicate function signature, the predicate function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `result`: test result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    The function immediately returns upon encountering a non-falsy `result`\n    value and calls the `done` callback with `null` as the first argument and\n    `true` as the second argument.\n\n    If all elements fail, the function calls the `done` callback with `null`\n    as the first argument and `false` as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > anyByAsync( arr, predicate, done )\n    1000\n    2500\n    3000\n    false\n\n    // Limit number of concurrent invocations:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > anyByAsync( arr, opts, predicate, done )\n    2500\n    3000\n    1000\n    false\n\n    // Process sequentially:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000 ];\n    > anyByAsync( arr, opts, predicate, done )\n    3000\n    2500\n    1000\n    false\n\n\nanyByAsync.factory( [options,] predicate )\n    Returns a function which tests whether at least one element in a collection\n    passes a test implemented by a predicate function.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = anyByAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    false\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    false\n\n    See Also\n    --------\n    anyBy, anyByRightAsync, everyByAsync, forEachAsync, noneByAsync, someByAsync\n","anyByAsync.factory":"\nanyByAsync.factory( [options,] predicate )\n    Returns a function which tests whether at least one element in a collection\n    passes a test implemented by a predicate function.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = anyByAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    false\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    false\n\n    See Also\n    --------\n    anyBy, anyByRightAsync, everyByAsync, forEachAsync, noneByAsync, someByAsync\n","anyByRight":"\nanyByRight( collection, predicate[, thisArg ] )\n    Tests whether at least one element in a collection passes a test implemented\n    by a predicate function, iterating from right to left.\n\n    The predicate function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    The function immediately returns upon encountering a truthy return value.\n\n    If provided an empty collection, the function returns `false`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The test function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if the predicate function returns `true` for\n        any element; otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > function negative( v ) { return ( v < 0 ); };\n    > var arr = [ -1, 1, 2, 3, 4 ];\n    > var bool = anyByRight( arr, negative )\n    true\n\n    See Also\n    --------\n    anyBy, anyByRightAsync, everyByRight, forEachRight, noneByRight, someByRight\n","anyByRightAsync":"\nanyByRightAsync( collection, [options,] predicate, done )\n    Tests whether at least one element in a collection passes a test implemented\n    by a predicate function, iterating from right to left.\n\n    When invoked, the predicate function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    predicate function accepts two arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the predicate function accepts three arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other predicate function signature, the predicate function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `result`: test result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    The function immediately returns upon encountering a non-falsy `result`\n    value and calls the `done` callback with `null` as the first argument and\n    `true` as the second argument.\n\n    If all elements fail, the function calls the `done` callback with `null`\n    as the first argument and `false` as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > anyByRightAsync( arr, predicate, done )\n    1000\n    2500\n    3000\n    false\n\n    // Limit number of concurrent invocations:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 1000, 2500, 3000 ];\n    > anyByRightAsync( arr, opts, predicate, done )\n    2500\n    3000\n    1000\n    false\n\n    // Process sequentially:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 1000, 2500, 3000 ];\n    > anyByRightAsync( arr, opts, predicate, done )\n    3000\n    2500\n    1000\n    false\n\n\nanyByRightAsync.factory( [options,] predicate )\n    Returns a function which tests whether at least one element in a collection\n    passes a test implemented by a predicate function, iterating from right to\n    left.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = anyByRightAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    false\n    > arr = [ 1000, 1500, 2000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    false\n\n    See Also\n    --------\n    anyByAsync, anyByRight, everyByRightAsync, forEachRightAsync, noneByRightAsync, someByRightAsync\n","anyByRightAsync.factory":"\nanyByRightAsync.factory( [options,] predicate )\n    Returns a function which tests whether at least one element in a collection\n    passes a test implemented by a predicate function, iterating from right to\n    left.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = anyByRightAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    false\n    > arr = [ 1000, 1500, 2000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    false\n\n    See Also\n    --------\n    anyByAsync, anyByRight, everyByRightAsync, forEachRightAsync, noneByRightAsync, someByRightAsync\n","APERY":"\nAPERY\n    Apéry's constant.\n\n    Examples\n    --------\n    > APERY\n    1.2020569031595942\n\n","append":"\nappend( collection1, collection2 )\n    Adds the elements of one collection to the end of another collection.\n\n    If the input collection is a typed array, the output value does not equal\n    the input reference and the underlying `ArrayBuffer` may *not* be the same\n    as the `ArrayBuffer` belonging to the input view.\n\n    For purposes of generality, always treat the output collection as distinct\n    from the input collection.\n\n    Parameters\n    ----------\n    collection1: Array|TypedArray|Object\n        A collection. If the collection is an `Object`, the collection should be\n        array-like.\n\n    collection2: Array|TypedArray|Object\n        A collection containing the elements to add. If the collection is an\n        `Object`, the collection should be array-like.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Updated collection.\n\n    Examples\n    --------\n    // Arrays:\n    > var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > arr = append( arr, [ 6.0, 7.0 ] )\n    [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0 ]\n\n    // Typed arrays:\n    > arr = new Float64Array( [ 1.0, 2.0 ] );\n    > arr = append( arr, [ 3.0, 4.0 ] )\n    <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]\n\n    // Array-like object:\n    > arr = { 'length': 0 };\n    > arr = append( arr, [ 1.0, 2.0 ] )\n    { 'length': 2, '0': 1.0, '1': 2.0 }\n\n    See Also\n    --------\n    prepend, push\n","ARCH":"\nARCH\n    Operating system CPU architecture.\n\n    Current possible values:\n\n    - arm\n    - arm64\n    - ia32\n    - mips\n    - mipsel\n    - ppc\n    - ppc64\n    - s390\n    - s390x\n    - x32\n    - x64\n\n    Examples\n    --------\n    > ARCH\n    <string>\n\n    See Also\n    --------\n    PLATFORM\n","argumentFunction":"\nargumentFunction( idx )\n    Returns a function which always returns a specified argument.\n\n    The input argument corresponds to the zero-based index of the argument to\n    return.\n\n    Parameters\n    ----------\n    idx: integer\n        Argument index to return (zero-based).\n\n    Returns\n    -------\n    out: Function\n        Argument function.\n\n    Examples\n    --------\n    > var argn = argumentFunction( 1 );\n    > var v = argn( 3.14, -3.14, 0.0 )\n    -3.14\n    > v = argn( -1.0, -0.0, 1.0 )\n    -0.0\n    > v = argn( 'beep', 'boop', 'bop' )\n    'boop'\n    > v = argn( 'beep' )\n    undefined\n\n    See Also\n    --------\n    constantFunction, identity\n","ARGV":"\nARGV\n    An array containing command-line arguments passed when launching the calling\n    process.\n\n    The first element is the absolute pathname of the executable that started\n    the calling process.\n\n    The second element is the path of the executed file.\n\n    Any additional elements are additional command-line arguments.\n\n    In browser environments, the array is empty.\n\n    Examples\n    --------\n    > var execPath = ARGV[ 0 ]\n    e.g., /usr/local/bin/node\n\n    See Also\n    --------\n    ENV\n","array":"\narray( [buffer,] [options] )\n    Returns a multidimensional array.\n\n    Parameters\n    ----------\n    buffer: Array|TypedArray|Buffer|ndarray (optional)\n        Data source.\n\n    options: Object (optional)\n        Options.\n\n    options.buffer: Array|TypedArray|Buffer|ndarray (optional)\n        Data source. If provided along with a `buffer` argument, the argument\n        takes precedence.\n\n    options.dtype: string (optional)\n        Underlying storage data type. If not specified and a data source is\n        provided, the data type is inferred from the provided data source. If an\n        input data source is not of the same type, this option specifies the\n        data type to which to cast the input data. For non-ndarray generic array\n        data sources, the function casts generic array data elements to the\n        default data type. In order to prevent this cast, the `dtype` option\n        must be explicitly set to `'generic'`. Any time a cast is required, the\n        `copy` option is set to `true`, as memory must be copied from the data\n        source to an output data buffer. Default: 'float64'.\n\n    options.order: string (optional)\n        Specifies the memory layout of the data source as either row-major (C-\n        style) or column-major (Fortran-style). The option may be one of the\n        following values:\n\n        - 'row-major': the order of the returned array is row-major.\n        - 'column-major': the order of the returned array is column-major.\n        - 'any': if a data source is column-major and not row-major, the order\n          of the returned array is column-major; otherwise, the order of the\n          returned array is row-major.\n        - 'same': the order of the returned array matches the order of an input\n          data source.\n\n        Note that specifying an order which differs from the order of a\n        provided data source does *not* entail a conversion from one memory\n        layout to another. In short, this option is descriptive, not\n        prescriptive. Default: 'row-major'.\n\n    options.shape: Array<integer> (optional)\n        Array shape (dimensions). If a shape is not specified, the function\n        attempts to infer a shape based on a provided data source. For example,\n        if provided a nested array, the function resolves nested array\n        dimensions. If provided a multidimensional array data source, the\n        function uses the array's associated shape. For most use cases, such\n        inference suffices. For the remaining use cases, specifying a shape is\n        necessary. For example, provide a shape to create a multidimensional\n        array view over a linear data buffer, ignoring any existing shape meta\n        data associated with a provided data source.\n\n    options.flatten: boolean (optional)\n        Boolean indicating whether to automatically flatten generic array data\n        sources. If an array shape is not specified, the shape is inferred from\n        the dimensions of nested arrays prior to flattening. If a use case\n        requires partial flattening, partially flatten prior to invoking this\n        function and set the option value to `false` to prevent further\n        flattening during invocation. Default: true.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to (shallow) copy source data to a new data\n        buffer. The function does *not* perform a deep copy. To prevent\n        undesired shared changes in state for generic arrays containing objects,\n        perform a deep copy prior to invoking this function. Default: false.\n\n    options.ndmin: integer (optional)\n        Specifies the minimum number of dimensions. If an array shape has fewer\n        dimensions than required by `ndmin`, the function prepends singleton\n        dimensions to the array shape in order to satisfy the dimensions\n        requirement. Default: 0.\n\n    options.casting: string (optional)\n        Specifies the casting rule used to determine acceptable casts. The\n        option may be one of the following values:\n\n        - 'none': only allow casting between identical types.\n        - 'equiv': allow casting between identical and byte swapped types.\n        - 'safe': only allow \"safe\" casts.\n        - 'same-kind': allow \"safe\" casts and casts within the same kind (e.g.,\n          between signed integers or between floats).\n        - 'unsafe': allow casting between all types (including between integers\n          and floats).\n\n        Default: 'safe'.\n\n    options.codegen: boolean (optional)\n        Boolean indicating whether to use code generation. Code generation can\n        boost performance, but may be problematic in browser contexts enforcing\n        a strict content security policy (CSP). Default: true.\n\n    options.mode: string (optional)\n        Specifies how to handle indices which exceed array dimensions. The\n        option may be one of the following values:\n\n        - 'throw': an ndarray instance throws an error when an index exceeds\n          array dimensions.\n        - 'wrap': an ndarray instance wraps around indices exceeding array\n          dimensions using modulo arithmetic.\n        - 'clamp', an ndarray instance sets an index exceeding array dimensions\n          to either `0` (minimum index) or the maximum index.\n\n        Default: 'throw'.\n\n    options.submode: Array<string> (optional)\n        Specifies how to handle subscripts which exceed array dimensions. If a\n        mode for a corresponding dimension is equal to\n\n        - 'throw': an ndarray instance throws an error when a subscript exceeds\n          array dimensions.\n        - 'wrap': an ndarray instance wraps around subscripts exceeding array\n          dimensions using modulo arithmetic.\n        - 'clamp': an ndarray instance sets a subscript exceeding array\n          dimensions to either `0` (minimum index) or the maximum index.\n\n        If the number of modes is fewer than the number of dimensions, the\n        function recycles modes using modulo arithmetic.\n\n        Default: [ options.mode ].\n\n    Returns\n    -------\n    out: ndarray\n        Multidimensional array.\n\n    Examples\n    --------\n    // Create a 2x2 matrix:\n    > var arr = array( [ [ 1.0, 2.0 ], [ 3.0, 4.0 ] ] )\n    <ndarray>\n\n    // Get an element using subscripts:\n    > var v = arr.get( 1, 1 )\n    4.0\n\n    // Get an element using a linear index:\n    > v = arr.iget( 3 )\n    4.0\n\n    // Set an element using subscripts:\n    > arr.set( 1, 1, 40.0 );\n    > arr.get( 1, 1 )\n    40.0\n\n    // Set an element using a linear index:\n    > arr.iset( 3, 99.0 );\n    > arr.get( 1, 1 )\n    99.0\n\n    See Also\n    --------\n    ndarray\n","array2buffer":"\narray2buffer( arr )\n    Allocates a buffer using an octet array.\n\n    Parameters\n    ----------\n    arr: Array<integer>\n        Array (or array-like object) of octets from which to copy.\n\n    Returns\n    -------\n    out: Buffer\n        Buffer instance.\n\n    Examples\n    --------\n    > var buf = array2buffer( [ 1, 2, 3, 4 ] )\n    <Buffer>[ 1, 2, 3, 4 ]\n\n    See Also\n    --------\n    Buffer, arraybuffer2buffer, copyBuffer, string2buffer\n","array2iterator":"\narray2iterator( src[, mapFcn[, thisArg]] )\n    Returns an iterator which iterates over the elements of an array-like\n    object.\n\n    When invoked, an input function is provided three arguments:\n\n    - value: iterated value\n    - index: iterated value index\n    - src: source array-like object\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    If an environment supports Symbol.iterator, the function explicitly does not\n    not invoke an array's `@@iterator` method, regardless of whether this method\n    is defined. To convert an array to an implementation defined iterator,\n    invoke this method directly.\n\n    Parameters\n    ----------\n    src: ArrayLikeObject\n        Array-like object from which to create the iterator.\n\n    mapFcn: Function (optional)\n        Function to invoke for each iterated value.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = array2iterator( [ 1, 2, 3, 4 ] );\n    > var v = it.next().value\n    1\n    > v = it.next().value\n    2\n\n    See Also\n    --------\n    iterator2array, circarray2iterator, array2iteratorRight, stridedarray2iterator\n","array2iteratorRight":"\narray2iteratorRight( src[, mapFcn[, thisArg]] )\n    Returns an iterator which iterates from right to left over the elements of\n    an array-like object.\n\n    When invoked, an input function is provided three arguments:\n\n    - value: iterated value\n    - index: iterated value index\n    - src: source array-like object\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    If an environment supports Symbol.iterator, the function explicitly does not\n    not invoke an array's `@@iterator` method, regardless of whether this method\n    is defined. To convert an array to an implementation defined iterator,\n    invoke this method directly.\n\n    Parameters\n    ----------\n    src: ArrayLikeObject\n        Array-like object from which to create the iterator.\n\n    mapFcn: Function (optional)\n        Function to invoke for each iterated value.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = array2iteratorRight( [ 1, 2, 3, 4 ] );\n    > var v = it.next().value\n    4\n    > v = it.next().value\n    3\n\n    See Also\n    --------\n    iterator2array, array2iterator\n","ArrayBuffer":"\nArrayBuffer( size )\n    Returns an array buffer having a specified number of bytes.\n\n    Buffer contents are initialized to 0.\n\n    Parameters\n    ----------\n    size: integer\n        Number of bytes.\n\n    Returns\n    -------\n    out: ArrayBuffer\n        An array buffer.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 5 )\n    <ArrayBuffer>\n\n\nArrayBuffer.length\n    Number of input arguments the constructor accepts.\n\n    Examples\n    --------\n    > ArrayBuffer.length\n    1\n\n\nArrayBuffer.isView( arr )\n    Returns a boolean indicating if provided an array buffer view.\n\n    Parameters\n    ----------\n    arr: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an input argument is a buffer view.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 10 );\n    > ArrayBuffer.isView( arr )\n    true\n\n\nArrayBuffer.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the array buffer.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 5 );\n    > buf.byteLength\n    5\n\n\nArrayBuffer.prototype.slice( [start[, end]] )\n    Copies the bytes of an array buffer to a new array buffer.\n\n    Parameters\n    ----------\n    start: integer (optional)\n        Index at which to start copying buffer contents (inclusive). If\n        negative, the index is relative to the end of the buffer.\n\n    end: integer (optional)\n        Index at which to stop copying buffer contents (exclusive). If negative,\n        the index is relative to the end of the buffer.\n\n    Returns\n    -------\n    out: ArrayBuffer\n        A new array buffer whose contents have been copied from the calling\n        array buffer.\n\n    Examples\n    --------\n    > var b1 = new ArrayBuffer( 10 );\n    > var b2 = b1.slice( 2, 6 );\n    > var bool = ( b1 === b2 )\n    false\n    > b2.byteLength\n    4\n\n    See Also\n    --------\n    Buffer, Float32Array, Float64Array, Int16Array, Int32Array, Int8Array, SharedArrayBuffer, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray\n","ArrayBuffer.length":"\nArrayBuffer.length\n    Number of input arguments the constructor accepts.\n\n    Examples\n    --------\n    > ArrayBuffer.length\n    1\n\n","ArrayBuffer.isView":"\nArrayBuffer.isView( arr )\n    Returns a boolean indicating if provided an array buffer view.\n\n    Parameters\n    ----------\n    arr: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an input argument is a buffer view.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 10 );\n    > ArrayBuffer.isView( arr )\n    true\n\n","ArrayBuffer.prototype.byteLength":"\nArrayBuffer.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the array buffer.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 5 );\n    > buf.byteLength\n    5\n\n","ArrayBuffer.prototype.slice":"\nArrayBuffer.prototype.slice( [start[, end]] )\n    Copies the bytes of an array buffer to a new array buffer.\n\n    Parameters\n    ----------\n    start: integer (optional)\n        Index at which to start copying buffer contents (inclusive). If\n        negative, the index is relative to the end of the buffer.\n\n    end: integer (optional)\n        Index at which to stop copying buffer contents (exclusive). If negative,\n        the index is relative to the end of the buffer.\n\n    Returns\n    -------\n    out: ArrayBuffer\n        A new array buffer whose contents have been copied from the calling\n        array buffer.\n\n    Examples\n    --------\n    > var b1 = new ArrayBuffer( 10 );\n    > var b2 = b1.slice( 2, 6 );\n    > var bool = ( b1 === b2 )\n    false\n    > b2.byteLength\n    4\n\n    See Also\n    --------\n    Buffer, Float32Array, Float64Array, Int16Array, Int32Array, Int8Array, SharedArrayBuffer, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray\n","arraybuffer2buffer":"\narraybuffer2buffer( buf[, byteOffset[, length]] )\n    Allocates a buffer from an ArrayBuffer.\n\n    The behavior of this function varies across Node.js versions due to changes\n    in the underlying Node.js APIs:\n\n    - <3.0.0: the function copies ArrayBuffer bytes to a new Buffer instance.\n    - >=3.0.0 and <5.10.0: if provided a byte offset, the function copies\n      ArrayBuffer bytes to a new Buffer instance; otherwise, the function\n      returns a view of an ArrayBuffer without copying the underlying memory.\n    - <6.0.0: if provided an empty ArrayBuffer, the function returns an empty\n      Buffer which is not an ArrayBuffer view.\n    - >=6.0.0: the function returns a view of an ArrayBuffer without copying\n      the underlying memory.\n\n    Parameters\n    ----------\n    buf: ArrayBuffer\n        Input array buffer.\n\n    byteOffset: integer (optional)\n        Index offset specifying the location of the first byte.\n\n    length: integer (optional)\n        Number of bytes to expose from the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Buffer\n        Buffer instance.\n\n    Examples\n    --------\n    > var ab = new ArrayBuffer( 10 )\n    <ArrayBuffer>\n    > var buf = arraybuffer2buffer( ab )\n    <Buffer>\n    > var len = buf.length\n    10\n    > buf = arraybuffer2buffer( ab, 2, 6 )\n    <Buffer>\n    > len = buf.length\n    6\n\n    See Also\n    --------\n    Buffer, array2buffer, copyBuffer, string2buffer\n","arrayCtors":"\narrayCtors( dtype )\n    Returns an array constructor.\n\n    The function returns constructors for the following data types:\n\n    - float32: single-precision floating-point numbers.\n    - float64: double-precision floating-point numbers.\n    - generic: values of any type.\n    - int16: signed 16-bit integers.\n    - int32: signed 32-bit integers.\n    - int8: signed 8-bit integers.\n    - uint16: unsigned 16-bit integers.\n    - uint32: unsigned 32-bit integers.\n    - uint8: unsigned 8-bit integers.\n    - uint8c: unsigned clamped 8-bit integers.\n\n    Parameters\n    ----------\n    dtype: string\n        Data type.\n\n    Returns\n    -------\n    out: Function|null\n        Constructor.\n\n    Examples\n    --------\n    > var ctor = arrayCtors( 'float64' )\n    <Function>\n    > ctor = arrayCtors( 'float' )\n    null\n\n    See Also\n    --------\n    typedarrayCtors\n","arrayDataType":"\narrayDataType( array )\n    Returns the data type of an array.\n\n    If provided an argument having an unknown or unsupported type, the function\n    returns `null`.\n\n    Parameters\n    ----------\n    array: any\n        Input value.\n\n    Returns\n    -------\n    out: string|null\n        Data type.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 10 );\n    > var dt = arrayDataType( arr )\n    'float64'\n    > dt = arrayDataType( 'beep' )\n    null\n\n    See Also\n    --------\n    arrayDataTypes\n","arrayDataTypes":"\narrayDataTypes()\n    Returns a list of array data types.\n\n    The output array contains the following data types:\n\n    - float32: single-precision floating-point numbers.\n    - float64: double-precision floating-point numbers.\n    - generic: values of any type.\n    - int16: signed 16-bit integers.\n    - int32: signed 32-bit integers.\n    - int8: signed 8-bit integers.\n    - uint16: unsigned 16-bit integers.\n    - uint32: unsigned 32-bit integers.\n    - uint8: unsigned 8-bit integers.\n    - uint8c: unsigned clamped 8-bit integers.\n\n    Returns\n    -------\n    out: Array<string>\n        List of array data types.\n\n    Examples\n    --------\n    > var out = arrayDataTypes()\n    <Array>\n\n    See Also\n    --------\n    typedarrayDataTypes, ndarrayDataTypes\n","arrayMinDataType":"\narrayMinDataType( value )\n    Returns the minimum array data type of the closest \"kind\" necessary for\n    storing a provided scalar value.\n\n    The function does *not* provide precision guarantees for non-integer-valued\n    real numbers. In other words, the function returns the smallest possible\n    floating-point (i.e., inexact) data type for storing numbers having\n    decimals.\n\n    Parameters\n    ----------\n    value: any\n        Scalar value.\n\n    Returns\n    -------\n    dt: string\n        Array data type.\n\n    Examples\n    --------\n    > var dt = arrayMinDataType( 3.141592653589793 )\n    'float32'\n    > dt = arrayMinDataType( 3 )\n    'uint8'\n    > dt = arrayMinDataType( -3 )\n    'int8'\n    > dt = arrayMinDataType( '-3' )\n    'generic'\n\n    See Also\n    --------\n    arrayDataTypes, arrayPromotionRules, arraySafeCasts\n","arrayNextDataType":"\narrayNextDataType( [dtype] )\n    Returns the next larger array data type of the same kind.\n\n    If not provided a data type, the function returns a table.\n\n    If a data type does not have a next larger data type or the next larger type\n    is not supported, the function returns `-1`.\n\n    If provided an unrecognized data type, the function returns `null`.\n\n    Parameters\n    ----------\n    dtype: string (optional)\n        Array data type.\n\n    Returns\n    -------\n    out: Object|string|integer|null\n        Next larger type(s).\n\n    Examples\n    --------\n    > var out = arrayNextDataType( 'float32' )\n    'float64'\n\n    See Also\n    --------\n    arrayDataType, arrayDataTypes\n","arrayPromotionRules":"\narrayPromotionRules( [dtype1, dtype2] )\n    Returns the array data type with the smallest size and closest \"kind\" to\n    which array data types can be safely cast.\n\n    If not provided data types, the function returns a type promotion table.\n\n    If a data type to which data types can be safely cast does *not* exist (or\n    is not supported), the function returns `-1`.\n\n    If provided an unrecognized data type, the function returns `null`.\n\n    Parameters\n    ----------\n    dtype1: string (optional)\n        Array data type.\n\n    dtype2: string (optional)\n        Array data type.\n\n    Returns\n    -------\n    out: Object|string|integer|null\n        Promotion rule(s).\n\n    Examples\n    --------\n    > var out = arrayPromotionRules( 'float32', 'int32' )\n    'float64'\n\n    See Also\n    --------\n    arrayDataTypes, arraySafeCasts, ndarrayPromotionRules\n","arraySafeCasts":"\narraySafeCasts( [dtype] )\n    Returns a list of array data types to which a provided array data type can\n    be safely cast.\n\n    If not provided an array data type, the function returns a casting table.\n\n    If provided an unrecognized array data type, the function returns `null`.\n\n    Parameters\n    ----------\n    dtype: string (optional)\n        Array data type.\n\n    Returns\n    -------\n    out: Object|Array<string>|null\n        Array data types to which a data type can be safely cast.\n\n    Examples\n    --------\n    > var out = arraySafeCasts( 'float32' )\n    <Array>\n\n    See Also\n    --------\n    convertArray, convertArraySame, arrayDataTypes, arraySameKindCasts, ndarraySafeCasts\n","arraySameKindCasts":"\narraySameKindCasts( [dtype] )\n    Returns a list of array data types to which a provided array data type can\n    be safely cast or cast within the same \"kind\".\n\n    If not provided an array data type, the function returns a casting table.\n\n    If provided an unrecognized array data type, the function returns `null`.\n\n    Parameters\n    ----------\n    dtype: string (optional)\n        Array data type.\n\n    Returns\n    -------\n    out: Object|Array<string>|null\n        Array data types to which a data type can be safely cast or cast within\n        the same \"kind\".\n\n    Examples\n    --------\n    > var out = arraySameKindCasts( 'float32' )\n    <Array>\n\n    See Also\n    --------\n    convertArray, convertArraySame, arrayDataTypes, arraySafeCasts, ndarraySameKindCasts\n","arrayShape":"\narrayShape( arr )\n    Determines array dimensions.\n\n    Parameters\n    ----------\n    arr: Array\n        Input array.\n\n    Returns\n    -------\n    out: Array\n        Array shape.\n\n    Examples\n    --------\n    > var out = arrayShape( [ [ 1, 2, 3 ], [ 4, 5, 6 ] ] )\n    [ 2, 3 ]\n\n    See Also\n    --------\n    ndarray\n","arrayStream":"\narrayStream( src[, options] )\n    Creates a readable stream from an array-like object.\n\n    In object mode, `null` is a reserved value. If an array contains `null`\n    values (e.g., as a means to encode missing values), the stream will\n    prematurely end. Consider an alternative encoding or filter `null` values\n    prior to invocation.\n\n    In binary mode, if an array contains `undefined` values, the stream will\n    emit an error. Consider providing a custom serialization function or\n    filtering `undefined` values prior to invocation.\n\n    If a serialization function fails to return a string or Buffer, the stream\n    emits an error.\n\n    Parameters\n    ----------\n    src: ArrayLikeObject\n        Source value.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before pausing the stream.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.serialize: Function (optional)\n        Serialization function. The default behavior is to serialize streamed\n        values as JSON strings. This option is only applicable when a stream is\n        not in \"objectMode\".\n\n    options.dir: integer (optional)\n        Iteration direction. If set to `-1`, a stream iterates over elements\n        from right-to-left. Default: 1.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var s = arrayStream( [ 1, 2, 3 ] );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\narrayStream.factory( [options] )\n    Returns a function for creating readable streams from array-like objects.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before pausing streaming.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.serialize: Function (optional)\n        Serialization function. The default behavior is to serialize streamed\n        values as JSON strings. This option is only applicable when a stream is\n        not in \"objectMode\".\n\n    options.dir: integer (optional)\n        Iteration direction. If set to `-1`, a stream iterates over elements\n        from right-to-left. Default: 1.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = arrayStream.factory( opts );\n\n\narrayStream.objectMode( src[, options] )\n    Returns an \"objectMode\" readable stream from an array-like object.\n\n    In object mode, `null` is a reserved value. If an array contains `null`\n    values (e.g., as a means to encode missing values), the stream will\n    prematurely end. Consider an alternative encoding or filter `null` values\n    prior to invocation.\n\n    Parameters\n    ----------\n    src: ArrayLikeObject\n        Source value.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before pausing streaming.\n\n    options.dir: integer (optional)\n        Iteration direction. If set to `-1`, a stream iterates over elements\n        from right-to-left. Default: 1.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var s = arrayStream.objectMode( [ 1, 2, 3 ] );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    circularArrayStream, iteratorStream, stridedArrayStream\n","arrayStream.factory":"\narrayStream.factory( [options] )\n    Returns a function for creating readable streams from array-like objects.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before pausing streaming.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.serialize: Function (optional)\n        Serialization function. The default behavior is to serialize streamed\n        values as JSON strings. This option is only applicable when a stream is\n        not in \"objectMode\".\n\n    options.dir: integer (optional)\n        Iteration direction. If set to `-1`, a stream iterates over elements\n        from right-to-left. Default: 1.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = arrayStream.factory( opts );\n\n","arrayStream.objectMode":"\narrayStream.objectMode( src[, options] )\n    Returns an \"objectMode\" readable stream from an array-like object.\n\n    In object mode, `null` is a reserved value. If an array contains `null`\n    values (e.g., as a means to encode missing values), the stream will\n    prematurely end. Consider an alternative encoding or filter `null` values\n    prior to invocation.\n\n    Parameters\n    ----------\n    src: ArrayLikeObject\n        Source value.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before pausing streaming.\n\n    options.dir: integer (optional)\n        Iteration direction. If set to `-1`, a stream iterates over elements\n        from right-to-left. Default: 1.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var s = arrayStream.objectMode( [ 1, 2, 3 ] );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    circularArrayStream, iteratorStream, stridedArrayStream\n","arrayview2iterator":"\narrayview2iterator( src[, begin[, end]][, mapFcn[, thisArg]] )\n    Returns an iterator which iterates over the elements of an array-like\n    object view.\n\n    When invoked, an input function is provided four arguments:\n\n    - value: iterated value\n    - index: iterated value index\n    - n: iteration count (zero-based)\n    - src: source array-like object\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    If an environment supports Symbol.iterator, the function explicitly does not\n    not invoke an array's `@@iterator` method, regardless of whether this method\n    is defined. To convert an array to an implementation defined iterator,\n    invoke this method directly.\n\n    Parameters\n    ----------\n    src: ArrayLikeObject\n        Array-like object from which to create the iterator.\n\n    begin: integer (optional)\n        Starting index (inclusive). When negative, determined relative to the\n        last element. Default: 0.\n\n    end: integer (optional)\n        Ending index (non-inclusive). When negative, determined relative to the\n        last element. Default: src.length.\n\n    mapFcn: Function (optional)\n        Function to invoke for each iterated value.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = arrayview2iterator( [ 1, 2, 3, 4 ], 1, 3 );\n    > var v = it.next().value\n    2\n    > v = it.next().value\n    3\n\n    See Also\n    --------\n    iterator2array, array2iterator, stridedarray2iterator, arrayview2iteratorRight\n","arrayview2iteratorRight":"\narrayview2iteratorRight( src[, begin[, end]][, mapFcn[, thisArg]] )\n    Returns an iterator which iterates from right to left over the elements of\n    an array-like object view.\n\n    When invoked, an input function is provided four arguments:\n\n    - value: iterated value\n    - index: iterated value index\n    - n: iteration count (zero-based)\n    - src: source array-like object\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    If an environment supports Symbol.iterator, the function explicitly does not\n    not invoke an array's `@@iterator` method, regardless of whether this method\n    is defined. To convert an array to an implementation defined iterator,\n    invoke this method directly.\n\n    Parameters\n    ----------\n    src: ArrayLikeObject\n        Array-like object from which to create the iterator.\n\n    begin: integer (optional)\n        Starting index (inclusive). When negative, determined relative to the\n        last element. Default: 0.\n\n    end: integer (optional)\n        Ending index (non-inclusive). When negative, determined relative to the\n        last element. Default: src.length.\n\n    mapFcn: Function (optional)\n        Function to invoke for each iterated value.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = arrayview2iteratorRight( [ 1, 2, 3, 4 ], 1, 3 );\n    > var v = it.next().value\n    3\n    > v = it.next().value\n    2\n\n    See Also\n    --------\n    iterator2array, array2iteratorRight, stridedarray2iterator, arrayview2iterator\n","AsyncIteratorSymbol":"\nAsyncIteratorSymbol\n    Async iterator symbol.\n\n    This symbol specifies the default async iterator for an object.\n\n    The symbol is only supported in ES2018+ environments. For non-supporting\n    environments, the value is `null`.\n\n    Examples\n    --------\n    > var s = AsyncIteratorSymbol\n\n    See Also\n    --------\n    Symbol, IteratorSymbol\n","bartlettTest":"\nbartlettTest( ...x[, options] )\n    Computes Bartlett’s test for equal variances.\n\n    Parameters\n    ----------\n    x: ...Array\n        Measured values.\n\n    options: Object (optional)\n        Options.\n\n    options.alpha: number (optional)\n        Number in the interval `[0,1]` giving the significance level of the\n        hypothesis test. Default: `0.05`.\n\n    options.groups: Array (optional)\n        Array of group indicators.\n\n    Returns\n    -------\n    out: Object\n        Test result object.\n\n    out.alpha: number\n        Significance level.\n\n    out.rejected: boolean\n        Test decision.\n\n    out.pValue: number\n        p-value of the test.\n\n    out.statistic: number\n        Value of test statistic.\n\n    out.method: string\n        Name of test.\n\n    out.df: Object\n        Degrees of freedom.\n\n    out.print: Function\n        Function to print formatted output.\n\n    Examples\n    --------\n    // Data from Hollander & Wolfe (1973), p. 116:\n    > var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n    > var y = [ 3.8, 2.7, 4.0, 2.4 ];\n    > var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n\n    > var out = bartlettTest( x, y, z )\n\n    > var arr = [ 2.9, 3.0, 2.5, 2.6, 3.2,\n    ...     3.8, 2.7, 4.0, 2.4,\n    ...     2.8, 3.4, 3.7, 2.2, 2.0\n    ... ];\n    > var groups = [\n    ...     'a', 'a', 'a', 'a', 'a',\n    ...     'b', 'b', 'b', 'b',\n    ...     'c', 'c', 'c', 'c', 'c'\n    ... ];\n    > out = bartlettTest( arr, { 'groups': groups })\n\n    See Also\n    --------\n    vartest\n","base.abs":"\nbase.abs( x )\n    Computes the absolute value of `x`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Absolute value.\n\n    Examples\n    --------\n    > var y = base.abs( -1.0 )\n    1.0\n    > y = base.abs( 2.0 )\n    2.0\n    > y = base.abs( 0.0 )\n    0.0\n    > y = base.abs( -0.0 )\n    0.0\n    > y = base.abs( NaN )\n    NaN\n\n    See Also\n    --------\n    base.abs2\n","base.abs2":"\nbase.abs2( x )\n    Computes the squared absolute value of `x`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Squared absolute value.\n\n    Examples\n    --------\n    > var y = base.abs2( -1.0 )\n    1.0\n    > y = base.abs2( 2.0 )\n    4.0\n    > y = base.abs2( 0.0 )\n    0.0\n    > y = base.abs2( -0.0 )\n    0.0\n    > y = base.abs2( NaN )\n    NaN\n\n    See Also\n    --------\n    base.abs\n","base.absdiff":"\nbase.absdiff( x, y )\n    Computes the absolute difference.\n\n    Parameters\n    ----------\n    x: number\n        First number.\n\n    y: number\n        Second number.\n\n    Returns\n    -------\n    out: number\n        Absolute difference.\n\n    Examples\n    --------\n    > var d = base.absdiff( 2.0, 5.0 )\n    3.0\n    > d = base.absdiff( -1.0, 3.14 )\n    ~4.14\n    > d = base.absdiff( 10.1, -2.05 )\n    ~12.15\n    > d = base.absdiff( -0.0, 0.0 )\n    +0.0\n    > d = base.absdiff( NaN, 5.0 )\n    NaN\n    > d = base.absdiff( PINF, NINF )\n    Infinity\n    > d = base.absdiff( PINF, PINF )\n    NaN\n\n    See Also\n    --------\n    base.reldiff, base.epsdiff\n","base.absInt32":"\nbase.absInt32( x )\n    Computes an absolute value of a signed 32-bit integer in two's complement\n    format.\n\n    Parameters\n    ----------\n    x: integer\n        Signed 32-bit integer.\n\n    Returns\n    -------\n    out: integer\n        Absolute value.\n\n    Examples\n    --------\n    > var v = base.absInt32( -1|0 )\n    1\n    > v = base.absInt32( 2|0 )\n    2\n    > v = base.absInt32( 0|0 )\n    0\n\n    See Also\n    --------\n    base.abs\n","base.acos":"\nbase.acos( x )\n    Compute the arccosine of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Arccosine (in radians).\n\n    Examples\n    --------\n    > var y = base.acos( 1.0 )\n    0.0\n    > y = base.acos( 0.707 )\n    ~0.7855\n    > y = base.acos( NaN )\n    NaN\n\n    See Also\n    --------\n    base.acosh, base.asin, base.atan\n","base.acosh":"\nbase.acosh( x )\n    Computes the hyperbolic arccosine of a number.\n\n    If `x < 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Hyperbolic arccosine (in radians).\n\n    Examples\n    --------\n    > var y = base.acosh( 1.0 )\n    0.0\n    > y = base.acosh( 2.0 )\n    ~1.317\n    > y = base.acosh( NaN )\n    NaN\n\n    See Also\n    --------\n    base.acos, base.asinh, base.atanh\n","base.acoth":"\nbase.acoth( x )\n    Computes the inverse hyperbolic cotangent of a number.\n\n    The domain of the inverse hyperbolic cotangent is the union of the intervals\n    (-inf,-1] and [1,inf).\n\n    If provided a value on the open interval (-1,1), the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Inverse hyperbolic cotangent (in radians).\n\n    Examples\n    --------\n    > var y = base.acoth( 2.0 )\n    ~0.5493\n    > y = base.acoth( 0.0 )\n    NaN\n    > y = base.acoth( 0.5 )\n    NaN\n    > y = base.acoth( 1.0 )\n    Infinity\n    > y = base.acoth( NaN )\n    NaN\n\n    See Also\n    --------\n    base.acosh, base.asinh, base.atanh\n","base.acovercos":"\nbase.acovercos( x )\n    Computes the inverse coversed cosine.\n\n    The inverse coversed cosine is defined as `asin(1+x)`.\n\n    If `x < -2`, `x > 0`, or `x` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Inverse coversed cosine.\n\n    Examples\n    --------\n    > var y = base.acovercos( -1.5 )\n    ~-0.5236\n    > y = base.acovercos( -0.0 )\n    ~1.5708\n\n    See Also\n    --------\n    base.acoversin, base.avercos, base.covercos, base.vercos\n","base.acoversin":"\nbase.acoversin( x )\n    Computes the inverse coversed sine.\n\n    The inverse coversed sine is defined as `asin(1-x)`.\n\n    If `x < 0`, `x > 2`, or `x` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Inverse coversed sine.\n\n    Examples\n    --------\n    > var y = base.acoversin( 1.5 )\n    ~-0.5236\n    > y = base.acoversin( 0.0 )\n    ~1.5708\n\n    See Also\n    --------\n    base.acovercos, base.aversin, base.coversin, base.versin\n","base.ahavercos":"\nbase.ahavercos( x )\n    Computes the inverse half-value versed cosine.\n\n    The inverse half-value versed cosine is defined as `2*acos(sqrt(x))`.\n\n    If `x < 0`, `x > 1`, or `x` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Inverse half-value versed cosine.\n\n    Examples\n    --------\n    > var y = base.ahavercos( 0.5 )\n    ~1.5708\n    > y = base.ahavercos( 0.0 )\n    ~3.1416\n\n    See Also\n    --------\n    base.ahaversin, base.havercos, base.vercos\n","base.ahaversin":"\nbase.ahaversin( x )\n    Computes the inverse half-value versed sine.\n\n    The inverse half-value versed sine is defined as `2*asin(sqrt(x))`.\n\n    If `x < 0`, `x > 1`, or `x` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Inverse half-value versed sine.\n\n    Examples\n    --------\n    > var y = base.ahaversin( 0.5 )\n    ~1.5708\n    > y = base.ahaversin( 0.0 )\n    0.0\n\n    See Also\n    --------\n    base.ahavercos, base.haversin, base.versin\n","base.asin":"\nbase.asin( x )\n    Computes the arcsine of a number.\n\n    If `|x| > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Arcsine (in radians).\n\n    Examples\n    --------\n    > var y = base.asin( 0.0 )\n    0.0\n    > y = base.asin( PI/2.0 )\n    ~1.0\n    > y = base.asin( -PI/6.0 )\n    ~-0.551\n    > y = base.asin( NaN )\n    NaN\n\n    See Also\n    --------\n    base.acos, base.asinh, base.atan\n","base.asinh":"\nbase.asinh( x )\n    Computes the hyperbolic arcsine of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Hyperbolic arcsine (in radians).\n\n    Examples\n    --------\n    > var y = base.asinh( 0.0 )\n    0.0\n    > y = base.asinh( 2.0 )\n    ~1.444\n    > y = base.asinh( -2.0 )\n    ~-1.444\n    > y = base.asinh( NaN )\n    NaN\n    > y = base.asinh( NINF )\n    -Infinity\n    > y = base.asinh( PINF )\n    Infinity\n\n    See Also\n    --------\n    base.acosh, base.asin, base.atanh\n","base.atan":"\nbase.atan( x )\n    Computes the arctangent of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Arctangent (in radians).\n\n    Examples\n    --------\n    > var y = base.atan( 0.0 )\n    ~0.0\n    > y = base.atan( -PI/2.0 )\n    ~-1.004\n    > y = base.atan( PI/2.0 )\n    ~1.004\n    > y = base.atan( NaN )\n    NaN\n\n    See Also\n    --------\n    base.acos, base.asin, base.atanh\n","base.atan2":"\nbase.atan2( y, x )\n    Evaluates the arctangent of the quotient of two numbers.\n\n    Parameters\n    ----------\n    y: number\n        Numerator.\n\n    x: number\n        Denominator.\n\n    Returns\n    -------\n    out: number\n        Arctangent of `y/x` (in radians).\n\n    Examples\n    --------\n    > var v = base.atan2( 2.0, 2.0 )\n    ~0.785\n    > v = base.atan2( 6.0, 2.0 )\n    ~1.249\n    > v = base.atan2( -1.0, -1.0 )\n    ~-2.356\n    > v = base.atan2( 3.0, 0.0 )\n    ~1.571\n    > v = base.atan2( -2.0, 0.0 )\n    ~-1.571\n    > v = base.atan2( 0.0, 0.0 )\n    0.0\n    > v = base.atan2( 3.0, NaN )\n    NaN\n    > v = base.atan2( NaN, 2.0 )\n    NaN\n\n    See Also\n    --------\n    base.atan\n","base.atanh":"\nbase.atanh( x )\n    Computes the hyperbolic arctangent of a number.\n\n    If `|x| > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Hyperbolic arctangent (in radians).\n\n    Examples\n    --------\n    > var y = base.atanh( 0.0 )\n    0.0\n    > y = base.atanh( 0.9 )\n    ~1.472\n    > y = base.atanh( 1.0 )\n    Infinity\n    > y = base.atanh( -1.0 )\n    -Infinity\n    > y = base.atanh( NaN )\n    NaN\n\n    See Also\n    --------\n    base.acosh, base.asinh, base.atan\n","base.avercos":"\nbase.avercos( x )\n    Computes the inverse versed cosine.\n\n    The inverse versed cosine is defined as `acos(1+x)`.\n\n    If `x < -2`, `x > 0`, or `x` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Inverse versed cosine.\n\n    Examples\n    --------\n    > var y = base.avercos( -1.5 )\n    ~2.0944\n    > y = base.avercos( -0.0 )\n    0.0\n\n    See Also\n    --------\n    base.aversin, base.versin\n","base.aversin":"\nbase.aversin( x )\n    Computes the inverse versed sine.\n\n    The inverse versed sine is defined as `acos(1-x)`.\n\n    If `x < 0`, `x > 2`, or `x` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Inverse versed sine.\n\n    Examples\n    --------\n    > var y = base.aversin( 1.5 )\n    ~2.0944\n    > y = base.aversin( 0.0 )\n    0.0\n\n    See Also\n    --------\n    base.avercos, base.vercos\n","base.bernoulli":"\nbase.bernoulli( n )\n    Computes the nth Bernoulli number.\n\n    If not provided a nonnegative integer value, the function returns `NaN`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Bernoulli number.\n\n    Examples\n    --------\n    > var y = base.bernoulli( 0 )\n    1.0\n    > y = base.bernoulli( 1 )\n    0.0\n    > y = base.bernoulli( 2 )\n    ~0.167\n    > y = base.bernoulli( 3 )\n    0.0\n    > y = base.bernoulli( 4 )\n    ~-0.033\n    > y = base.bernoulli( 5 )\n    0.0\n    > y = base.bernoulli( 20 )\n    ~-529.124\n    > y = base.bernoulli( 260 )\n    -Infinity\n    > y = base.bernoulli( 262 )\n    Infinity\n    > y = base.bernoulli( NaN )\n    NaN\n\n","base.besselj0":"\nbase.besselj0( x )\n    Computes the Bessel function of the first kind of order zero.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.besselj0( 0.0 )\n    1.0\n    > y = base.besselj0( 1.0 )\n    ~0.765\n    > y = base.besselj0( PINF )\n    0.0\n    > y = base.besselj0( NINF )\n    0.0\n    > y = base.besselj0( NaN )\n    NaN\n\n    See Also\n    --------\n    base.besselj1, base.bessely0, base.bessely1\n","base.besselj1":"\nbase.besselj1( x )\n    Computes the Bessel function of the first kind of order one.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.besselj1( 0.0 )\n    0.0\n    > y = base.besselj1( 1.0 )\n    ~0.440\n    > y = base.besselj1( PINF )\n    0.0\n    > y = base.besselj1( NINF )\n    0.0\n    > y = base.besselj1( NaN )\n    NaN\n\n    See Also\n    --------\n    base.besselj0, base.bessely0, base.bessely1\n","base.bessely0":"\nbase.bessely0( x )\n    Computes the Bessel function of the second kind of order zero.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.bessely0( 0.0 )\n    -Infinity\n    > y = base.bessely0( 1.0 )\n    ~0.088\n    > y = base.bessely0( -1.0 )\n    NaN\n    > y = base.bessely0( PINF )\n    0.0\n    > y = base.bessely0( NINF )\n    NaN\n    > y = base.bessely0( NaN )\n    NaN\n\n    See Also\n    --------\n    base.besselj0, base.besselj1, base.bessely1\n","base.bessely1":"\nbase.bessely1( x )\n    Computes the Bessel function of the second kind of order one.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.bessely1( 0.0 )\n    -Infinity\n    > y = base.bessely1( 1.0 )\n    ~-0.781\n    > y = base.bessely1( -1.0 )\n    NaN\n    > y = base.bessely1( PINF )\n    0.0\n    > y = base.bessely1( NINF )\n    NaN\n    > y = base.bessely1( NaN )\n    NaN\n\n    See Also\n    --------\n    base.besselj0, base.besselj1, base.bessely0\n","base.beta":"\nbase.beta( x, y )\n    Evaluates the beta function.\n\n    Parameters\n    ----------\n    x: number\n        First function parameter (nonnegative).\n\n    y: number\n        Second function parameter (nonnegative).\n\n    Returns\n    -------\n    out: number\n        Evaluated beta function.\n\n    Examples\n    --------\n    > var v = base.beta( 0.0, 0.5 )\n    Infinity\n    > v = base.beta( 1.0, 1.0 )\n    1.0\n    > v = base.beta( -1.0, 2.0 )\n    NaN\n    > v = base.beta( 5.0, 0.2 )\n    ~3.382\n    > v = base.beta( 4.0, 1.0 )\n    0.25\n    > v = base.beta( NaN, 2.0 )\n    NaN\n\n    See Also\n    --------\n    base.betainc, base.betaincinv, base.betaln\n","base.betainc":"\nbase.betainc( x, a, b[, regularized[, upper]] )\n    Computes the regularized incomplete beta function.\n\n    The `regularized` and `upper` parameters specify whether to evaluate the\n    non-regularized and/or upper incomplete beta functions, respectively.\n\n    If provided `x < 0` or `x > 1`, the function returns `NaN`.\n\n    If provided `a < 0` or `b < 0`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        First function parameter.\n\n    a: number\n        Second function parameter.\n\n    b: number\n        Third function parameter.\n\n    regularized: boolean (optional)\n        Boolean indicating whether the function should evaluate the regularized\n        or non-regularized incomplete beta function. Default: `true`.\n\n    upper: boolean (optional)\n        Boolean indicating whether the function should return the upper tail of\n        the incomplete beta function. Default: `false`.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.betainc( 0.5, 2.0, 2.0 )\n    0.5\n    > y = base.betainc( 0.5, 2.0, 2.0, false )\n    ~0.083\n    > y = base.betainc( 0.2, 1.0, 2.0 )\n    0.36\n    > y = base.betainc( 0.2, 1.0, 2.0, true, true )\n    0.64\n    > y = base.betainc( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.betainc( 0.8, NaN, 1.0 )\n    NaN\n    > y = base.betainc( 0.8, 1.0, NaN )\n    NaN\n    > y = base.betainc( 1.5, 1.0, 1.0 )\n    NaN\n    > y = base.betainc( -0.5, 1.0, 1.0 )\n    NaN\n    > y = base.betainc( 0.5, -2.0, 2.0 )\n    NaN\n    > y = base.betainc( 0.5, 2.0, -2.0 )\n    NaN\n\n    See Also\n    --------\n    base.beta, base.betaincinv, base.betaln\n","base.betaincinv":"\nbase.betaincinv( p, a, b[, upper] )\n    Computes the inverse of the lower incomplete beta function.\n\n    In contrast to a more commonly used definition, the first argument is the\n    probability `p` and the second and third arguments are `a` and `b`,\n    respectively.\n\n    By default, the function inverts the lower regularized incomplete beta\n    function. To invert the upper function, set the `upper` argument to `true`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `a <= 0` or `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Probability.\n\n    a: number\n        Second function parameter.\n\n    b: number\n        Third function parameter.\n\n    upper: boolean (optional)\n        Boolean indicating if the function should invert the upper tail of the\n        incomplete beta function. Default: `false`.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.betaincinv( 0.2, 3.0, 3.0 )\n    ~0.327\n    > y = base.betaincinv( 0.4, 3.0, 3.0 )\n    ~0.446\n    > y = base.betaincinv( 0.4, 3.0, 3.0, true )\n    ~0.554\n    > y = base.betaincinv( 0.4, 1.0, 6.0 )\n    ~0.082\n    > y = base.betaincinv( 0.8, 1.0, 6.0 )\n    ~0.235\n    > y = base.betaincinv( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.betaincinv( 0.5, NaN, 1.0 )\n    NaN\n    > y = base.betaincinv( 0.5, 1.0, NaN )\n    NaN\n    > y = base.betaincinv( 1.2, 1.0, 1.0 )\n    NaN\n    > y = base.betaincinv( -0.5, 1.0, 1.0 )\n    NaN\n    > y = base.betaincinv( 0.5, -2.0, 2.0 )\n    NaN\n    > y = base.betaincinv( 0.5, 0.0, 2.0 )\n    NaN\n    > y = base.betaincinv( 0.5, 2.0, -2.0 )\n    NaN\n    > y = base.betaincinv( 0.5, 2.0, 0.0 )\n    NaN\n\n    See Also\n    --------\n    base.beta, base.betainc, base.betaln\n","base.betaln":"\nbase.betaln( a, b )\n    Evaluates the natural logarithm of the beta function.\n\n    Parameters\n    ----------\n    a: number\n        First function parameter (nonnegative).\n\n    b: number\n        Second function parameter (nonnegative).\n\n    Returns\n    -------\n    out: number\n        Natural logarithm of the beta function.\n\n    Examples\n    --------\n    > var v = base.betaln( 0.0, 0.0 )\n    Infinity\n    > v = base.betaln( 1.0, 1.0 )\n    0.0\n    > v = base.betaln( -1.0, 2.0 )\n    NaN\n    > v = base.betaln( 5.0, 0.2 )\n    ~1.218\n    > v = base.betaln( 4.0, 1.0 )\n    ~-1.386\n    > v = base.betaln( NaN, 2.0 )\n    NaN\n\n    See Also\n    --------\n    base.beta, base.betainc, base.betaincinv\n","base.binet":"\nbase.binet( x )\n    Evaluates Binet's formula extended to real numbers.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function result.\n\n    Examples\n    --------\n    > var y = base.binet( 0.0 )\n    0.0\n    > y = base.binet( 1.0 )\n    1.0\n    > y = base.binet( 2.0 )\n    1.0\n    > y = base.binet( 3.0 )\n    2.0\n    > y = base.binet( 4.0 )\n    3.0\n    > y = base.binet( 5.0 )\n    ~5.0\n    > y = base.binet( NaN )\n    NaN\n\n    See Also\n    --------\n    base.fibonacci, base.negafibonacci\n","base.binomcoef":"\nbase.binomcoef( n, k )\n    Computes the binomial coefficient of two integers.\n\n    If `k < 0`, the function returns `0`.\n\n    The function returns `NaN` for non-integer `n` or `k`.\n\n    Parameters\n    ----------\n    n: integer\n        First input value.\n\n    k: integer\n        Second input value.\n\n    Returns\n    -------\n    out: number\n        Function value.\n\n    Examples\n    --------\n    > var v = base.binomcoef( 8, 2 )\n    28\n    > v = base.binomcoef( 0, 0 )\n    1\n    > v = base.binomcoef( -4, 2 )\n    10\n    > v = base.binomcoef( 5, 3 )\n    10\n    > v = base.binomcoef( NaN, 3 )\n    NaN\n    > v = base.binomcoef( 5, NaN )\n    NaN\n    > v = base.binomcoef( NaN, NaN )\n    NaN\n\n","base.binomcoefln":"\nbase.binomcoefln( n, k )\n    Computes the natural logarithm of the binomial coefficient of two integers.\n\n    If `k < 0`, the function returns negative infinity.\n\n    The function returns `NaN` for non-integer `n` or `k`.\n\n    Parameters\n    ----------\n    n: integer\n        First input value.\n\n    k: integer\n        Second input value.\n\n    Returns\n    -------\n    out: number\n        Natural logarithm of the binomial coefficient.\n\n    Examples\n    --------\n    > var v = base.binomcoefln( 8, 2 )\n    ~3.332\n    > v = base.binomcoefln( 0, 0 )\n    0.0\n    > v = base.binomcoefln( -4, 2 )\n    ~2.303\n    > v = base.binomcoefln( 88, 3 )\n    ~11.606\n    > v = base.binomcoefln( NaN, 3 )\n    NaN\n    > v = base.binomcoefln( 5, NaN )\n    NaN\n    > v = base.binomcoefln( NaN, NaN )\n    NaN\n\n","base.boxcox":"\nbase.boxcox( x, lambda )\n    Computes a one-parameter Box-Cox transformation.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    lambda: number\n        Power parameter.\n\n    Returns\n    -------\n    b: number\n        Function value.\n\n    Examples\n    --------\n    > var v = base.boxcox( 1.0, 2.5 )\n    0.0\n    > v = base.boxcox( 4.0, 2.5 )\n    12.4\n    > v = base.boxcox( 10.0, 2.5 )\n    ~126.0911\n    > v = base.boxcox( 2.0, 0.0 )\n    ~0.6931\n    > v = base.boxcox( -1.0, 2.5 )\n    NaN\n    > v = base.boxcox( 0.0, -1.0 )\n    -Infinity\n\n    See Also\n    --------\n    base.boxcoxinv, base.boxcox1p, base.boxcox1pinv","base.boxcox1p":"\nbase.boxcox1p( x, lambda )\n    Computes a one-parameter Box-Cox transformation of 1+x.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    lambda: number\n        Power parameter.\n\n    Returns\n    -------\n    b: number\n        Function value.\n\n    Examples\n    --------\n    > var v =  base.boxcox1p( 1.0, 2.5 )\n    ~1.8627\n    > v = base.boxcox1p( 4.0, 2.5 )\n    ~21.9607\n    > v = base.boxcox1p( 10.0, 2.5 )\n    ~160.1246\n    > v = base.boxcox1p( 2.0, 0.0 )\n    ~1.0986\n    > v = base.boxcox1p( -1.0, 2.5 )\n    -0.4\n    > v = base.boxcox1p( 0.0, -1.0 )\n    0.0\n    > v = base.boxcox1p( -1.0, -1.0 )\n    -Infinity\n\n    See Also\n    --------\n    base.boxcox, base.boxcox1pinv, base.boxcoxinv","base.boxcox1pinv":"\nbase.boxcox1pinv( y, lambda )\n    Computes the inverse of a one-parameter Box-Cox transformation for 1+x.\n\n    Parameters\n    ----------\n    y: number\n        Input value.\n\n    lambda: number\n        Power parameter.\n\n    Returns\n    -------\n    v: number\n        Function value.\n\n    Examples\n    --------\n    > var v = base.boxcox1pinv( 1.0, 2.5 )\n    ~0.6505\n    > v = base.boxcox1pinv( 4.0, 2.5 )\n    ~1.6095\n    > v = base.boxcox1pinv( 10.0, 2.5 )\n    ~2.6812\n    > v = base.boxcox1pinv( 2.0, 0.0 )\n    ~6.3891\n    > v = base.boxcox1pinv( -1.0, 2.5 )\n    NaN\n    > v = base.boxcox1pinv( 0.0, -1.0 )\n    0.0\n    > v = base.boxcox1pinv( 1.0, NaN )\n    NaN\n    > v = base.boxcox1pinv( NaN, 3.1 )\n    NaN\n\n    See Also\n    --------\n    base.boxcox, base.boxcox1p, base.boxcoxinv","base.boxcoxinv":"\nbase.boxcoxinv( y, lambda )\n    Computes the inverse of a one-parameter Box-Cox transformation.\n\n    Parameters\n    ----------\n    y: number\n        Input value.\n\n    lambda: number\n        Power parameter.\n\n    Returns\n    -------\n    b: number\n        Function value.\n\n    Examples\n    --------\n    > var v = base.boxcoxinv( 1.0, 2.5 )\n    ~1.6505\n    > v = base.boxcoxinv( 4.0, 2.5 )\n    ~2.6095\n    > v = base.boxcoxinv( 10.0, 2.5 )\n    ~3.6812\n    > v = base.boxcoxinv( 2.0, 0.0 )\n    ~7.3891\n    > v = base.boxcoxinv( -1.0, 2.5 )\n    NaN\n    > v = base.boxcoxinv( 0.0, -1.0 )\n    1.0\n    > v = base.boxcoxinv( 1.0, NaN )\n    NaN\n    > v = base.boxcoxinv( NaN, 3.1 )\n    NaN\n\n    See Also\n    --------\n    base.boxcox, base.boxcox1p, base.boxcox1pinv","base.cabs":"\nbase.cabs( re, im )\n    Computes the absolute value of a complex number.\n\n    The absolute value of a complex number is its distance from zero.\n\n    Parameters\n    ----------\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    y: number\n        Absolute value.\n\n    Examples\n    --------\n    > var y = base.cabs( 5.0, 3.0 )\n    ~5.831\n\n    See Also\n    --------\n    base.cabs2, base.abs\n","base.cabs2":"\nbase.cabs2( re, im )\n    Computes the squared absolute value of a complex number.\n\n    The absolute value of a complex number is its distance from zero.\n\n    Parameters\n    ----------\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    y: number\n        Squared absolute value.\n\n    Examples\n    --------\n    > var y = base.cabs2( 5.0, 3.0 )\n    34.0\n\n    See Also\n    --------\n    base.cabs, base.abs2\n","base.cadd":"\nbase.cadd( [out,] re1, im1, re2, im2 )\n    Adds two complex numbers.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re1: number\n        Real component.\n\n    im1: number\n        Imaginary component.\n\n    re2: number\n        Real component.\n\n    im2: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Real and imaginary components.\n\n    Examples\n    --------\n    > var y = base.cadd( 5.0, 3.0, -2.0, 1.0 )\n    [ 3.0, 4.0 ]\n\n    // Provide an output array:\n    > var out = new Float32Array( 2 );\n    > y = base.cadd( out, 5.0, 3.0, -2.0, 1.0 )\n    <Float32Array>[ 3.0, 4.0 ]\n    > var bool = ( y === out )\n    true\n\n    See Also\n    --------\n    base.cdiv, base.cmul, base.csub\n","base.cbrt":"\nbase.cbrt( x )\n    Computes the cube root.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Cube root.\n\n    Examples\n    --------\n    > var y = base.cbrt( 64.0 )\n    4.0\n    > y = base.cbrt( 27.0 )\n    3.0\n    > y = base.cbrt( 0.0 )\n    0.0\n    > y = base.cbrt( -0.0 )\n    -0.0\n    > y = base.cbrt( -9.0 )\n    ~-2.08\n    > y = base.cbrt( NaN )\n    NaN\n\n    See Also\n    --------\n    base.pow, base.sqrt\n","base.cceil":"\nbase.cceil( [out,] re, im )\n    Rounds a complex number toward positive infinity.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Real and imaginary components.\n\n    Examples\n    --------\n    > var out = base.cceil( 5.5, 3.3 )\n    [ 6.0, 4.0 ]\n\n    // Provide an output array:\n    > out = new Float64Array( 2 );\n    > var v = base.cceil( out, 5.5, 3.3 )\n    <Float64Array>[ 6.0, 4.0 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.cceiln, base.cfloor, base.cround\n","base.cceiln":"\nbase.cceiln( [out,] re, im, n )\n    Rounds a complex number to the nearest multiple of `10^n` toward positive\n    infinity.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    n: integer\n        Integer power of 10.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Real and imaginary components.\n\n    Examples\n    --------\n    > var out = base.cceiln( 5.555, -3.333, -2 )\n    [ 5.56, -3.33 ]\n\n    // Provide an output array:\n    > out = new Float64Array( 2 );\n    > var v = base.cceiln( out, 5.555, -3.333, -2 )\n    <Float64Array>[ 5.56, -3.33 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.cceil, base.cfloorn, base.croundn\n","base.ccis":"\nbase.ccis( [out,] re, im )\n    Computes the cis function of a complex number.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Real and imaginary components.\n\n    Examples\n    --------\n    > var y = base.ccis( 0.0, 0.0 )\n    [ 1.0, 0.0 ]\n\n    > var y = base.ccis( 1.0, 0.0 )\n    [ ~0.540, ~0.841 ]\n\n    > var out = new Float64Array( 2 );\n    > var v = base.ccis( out, 1.0, 0.0 )\n    <Float64Array>[ ~0.540, ~0.841 ]\n    > var bool = ( v === out )\n    true\n\n","base.cdiv":"\nbase.cdiv( [out,] re1, im1, re2, im2 )\n    Divides two complex numbers.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re1: number\n        Real component.\n\n    im1: number\n        Imaginary component.\n\n    re2: number\n        Real component.\n\n    im2: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Real and imaginary components.\n\n    Examples\n    --------\n    > var y = base.cdiv( -13.0, -1.0, -2.0, 1.0 )\n    [ 5.0, 3.0 ]\n\n    > var out = new Float64Array( 2 );\n    > var v = base.cdiv( out, -13.0, -1.0, -2.0, 1.0 )\n    <Float64Array>[ 5.0, 3.0 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.cadd, base.cmul, base.csub\n","base.ceil":"\nbase.ceil( x )\n    Rounds a numeric value toward positive infinity.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.ceil( 3.14 )\n    4.0\n    > y = base.ceil( -4.2 )\n    -4.0\n    > y = base.ceil( -4.6 )\n    -4.0\n    > y = base.ceil( 9.5 )\n    10.0\n    > y = base.ceil( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceiln, base.floor, base.round\n","base.ceil2":"\nbase.ceil2( x )\n    Rounds a numeric value to the nearest power of two toward positive infinity.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.ceil2( 3.14 )\n    4.0\n    > y = base.ceil2( -4.2 )\n    -4.0\n    > y = base.ceil2( -4.6 )\n    -4.0\n    > y = base.ceil2( 9.5 )\n    16.0\n    > y = base.ceil2( 13.0 )\n    16.0\n    > y = base.ceil2( -13.0 )\n    -8.0\n    > y = base.ceil2( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil, base.ceil10, base.floor2, base.round2\n","base.ceil10":"\nbase.ceil10( x )\n    Rounds a numeric value to the nearest power of ten toward positive infinity.\n\n    The function may not return accurate results for subnormals due to a general\n    loss in precision.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.ceil10( 3.14 )\n    10.0\n    > y = base.ceil10( -4.2 )\n    -1.0\n    > y = base.ceil10( -4.6 )\n    -1.0\n    > y = base.ceil10( 9.5 )\n    10.0\n    > y = base.ceil10( 13.0 )\n    100.0\n    > y = base.ceil10( -13.0 )\n    -10.0\n    > y = base.ceil10( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil, base.ceil2, base.floor10, base.round10\n","base.ceilb":"\nbase.ceilb( x, n, b )\n    Rounds a numeric value to the nearest multiple of `b^n` toward positive\n    infinity.\n\n    Due to floating-point rounding error, rounding may not be exact.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Integer power.\n\n    b: integer\n        Base.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    // Round to 4 decimal places:\n    > var y = base.ceilb( 3.14159, -4, 10 )\n    3.1416\n\n    // If `n = 0` or `b = 1`, standard round behavior:\n    > y = base.ceilb( 3.14159, 0, 2 )\n    4.0\n\n    // Round to nearest multiple of two toward positive infinity:\n    > y = base.ceilb( 5.0, 1, 2 )\n    6.0\n\n    See Also\n    --------\n    base.ceil, base.ceiln, base.floorb, base.roundb\n","base.ceiln":"\nbase.ceiln( x, n )\n    Rounds a numeric value to the nearest multiple of `10^n` toward positive\n    infinity.\n\n    When operating on floating-point numbers in bases other than `2`, rounding\n    to specified digits can be inexact.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Integer power of 10.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    // Round to 2 decimal places:\n    > var y = base.ceiln( 3.14159, -2 )\n    3.15\n\n    // If `n = 0`, standard round toward positive infinity behavior:\n    > y = base.ceiln( 3.14159, 0 )\n    4.0\n\n    // Round to nearest thousand:\n    > y = base.ceiln( 12368.0, 3 )\n    13000.0\n\n\n    See Also\n    --------\n    base.ceil, base.ceilb, base.floorn, base.roundn\n","base.ceilsd":"\nbase.ceilsd( x, n[, b] )\n    Rounds a numeric value to the nearest number toward positive infinity with\n    `n` significant figures.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Number of significant figures. Must be greater than 0.\n\n    b: integer (optional)\n        Base. Must be greater than 0. Default: 10.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.ceilsd( 3.14159, 5 )\n    3.1416\n    > y = base.ceilsd( 3.14159, 1 )\n    4.0\n    > y = base.ceilsd( 12368.0, 2 )\n    13000.0\n    > y = base.ceilsd( 0.0313, 2, 2 )\n    0.046875\n\n    See Also\n    --------\n    base.ceil, base.floorsd, base.roundsd, base.truncsd\n","base.cexp":"\nbase.cexp( [out,] re, im )\n    Computes the exponential function of a complex number.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Real and imaginary components.\n\n    Examples\n    --------\n    > var y = base.cexp( 0.0, 0.0 )\n    [ 1.0, 0.0 ]\n\n    > y = base.cexp( 0.0, 1.0 )\n    [ ~0.540, ~0.841 ]\n\n    > var out = new Float64Array( 2 );\n    > var v = base.cexp( out, 0.0, 1.0 )\n    <Float64Array>[ ~0.540, ~0.841 ]\n    > var bool = ( v === out )\n    true\n\n","base.cflipsign":"\nbase.cflipsign( [out,] re, im, y )\n    Returns a complex number with the same magnitude as `z` and the sign of\n    `y*z`.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    y: number\n        Number from which to derive the sign.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Function result.\n\n    Examples\n    --------\n    > var out = base.cflipsign( -4.2, 5.5, -9 )\n    [ 4.2, -5.5 ]\n\n    // Provide an output array:\n    > out = new Float64Array( 2 );\n    > var v = base.cflipsign( out, -4.2, 5.5, 8 )\n    <Float64Array>[ -4.2, 5.5 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.cneg, base.csignum\n","base.cfloor":"\nbase.cfloor( [out,] re, im )\n    Rounds a complex number toward negative infinity.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Rounded components.\n\n    Examples\n    --------\n    > var out = base.cfloor( 5.5, 3.3 )\n    [ 5.0, 3.0 ]\n\n    // Provide an output array:\n    > out = new Float64Array( 2 );\n    > var v = base.cfloor( out, 5.5, 3.3 )\n    <Float64Array>[ 5.0, 3.0 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.cceil, base.cfloorn, base.cround\n","base.cfloorn":"\nbase.cfloorn( [out,] re, im, n )\n    Rounds a complex number to the nearest multiple of `10^n` toward negative\n    infinity.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    n: integer\n        Integer power of 10.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Real and imaginary components.\n\n    Examples\n    --------\n    > var out = base.cfloorn( 5.555, -3.333, -2 )\n    [ 5.55, -3.34 ]\n\n    // Provide an output array:\n    > out = new Float64Array( 2 );\n    > var v = base.cfloorn( out, 5.555, -3.333, -2 )\n    <Float64Array>[ 5.55, -3.34 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.cceiln, base.cfloor, base.croundn\n","base.cinv":"\nbase.cinv( [out,] re, im )\n    Computes the inverse of a complex number.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Real and imaginary components.\n\n    Examples\n    --------\n    > var y = base.cinv( 2.0, 4.0 )\n    [ 0.1, -0.2 ]\n\n    > var out = new Float64Array( 2 );\n    > var v = base.cinv( out, 2.0, 4.0 )\n    <Float64Array>[ 0.1, -0.2 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.cdiv\n","base.clamp":"\nbase.clamp( v, min, max )\n    Restricts a value to a specified range.\n\n    If provided `NaN` for any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    v: number\n        Value to restrict.\n\n    min: number\n        Minimum value.\n\n    max: number\n        Maximum value.\n\n    Returns\n    -------\n    y: number\n        Restricted value.\n\n    Examples\n    --------\n    > var y = base.clamp( 3.14, 0.0, 5.0 )\n    3.14\n    > y = base.clamp( -3.14, 0.0, 5.0 )\n    0.0\n    > y = base.clamp( 3.14, 0.0, 3.0 )\n    3.0\n    > y = base.clamp( -0.0, 0.0, 5.0 )\n    0.0\n    > y = base.clamp( 0.0, -3.14, -0.0 )\n    -0.0\n    > y = base.clamp( NaN, 0.0, 5.0 )\n    NaN\n\n    See Also\n    --------\n    base.wrap\n","base.cmul":"\nbase.cmul( [out,] re1, im1, re2, im2 )\n    Multiplies two complex numbers.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re1: number\n        Real component.\n\n    im1: number\n        Imaginary component.\n\n    re2: number\n        Real component.\n\n    im2: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Array containing the real and imaginary components of the result.\n\n    Examples\n    --------\n    > var out = base.cmul( 5.0, 3.0, -2.0, 1.0 )\n    [ -13.0, -1.0 ]\n\n    // Provide an output array:\n    > var out = new Float64Array( 2 );\n    > var v = base.cmul( out, 5.0, 3.0, -2.0, 1.0 )\n    <Float64Array>[ -13.0, -1.0 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.cadd, base.cdiv, base.csub\n","base.cneg":"\nbase.cneg( [out,] re, im )\n    Negates a complex number.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Negated components.\n\n    Examples\n    --------\n    > var out = base.cneg( -4.2, 5.5 )\n    [ 4.2, -5.5 ]\n\n    // Provide an output array:\n    > out = new Float64Array( 2 );\n    > var v = base.cneg( out, -4.2, 5.5 )\n    <Float64Array>[ 4.2, -5.5 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.cabs\n","base.continuedFraction":"\nbase.continuedFraction( generator[, options] )\n    Evaluates the continued fraction approximation for the supplied series\n    generator using the modified Lentz algorithm.\n\n    `generator` can be either a function which returns an array with two\n    elements, the `a` and `b` terms of the fraction, or an ES6 Generator object.\n\n    By default, the function computes\n\n             a1\n        ---------------\n        b1 +     a2\n             ----------\n              b2 +   a3\n                  -----\n                  b3 + ...\n\n    To evaluate\n\n        b0 +\t a1\n        ---------------\n        b1 +\t a2\n             ----------\n             b2 +  a3\n                  -----\n                  b3 + ...\n\n    set the `keep` option to `true`.\n\n    Parameters\n    ----------\n    generator: Function\n        Function returning terms of continued fraction expansion.\n\n    options: Object (optional)\n        Options.\n\n    options.maxIter: integer (optional)\n         Maximum number of iterations. Default: `1000000`.\n\n    options.tolerance: number (optional)\n        Further terms are only added as long as the next term is greater than\n        current term times the tolerance. Default: `2.22e-16`.\n\n    options.keep: boolean (optional)\n        Boolean indicating whether to keep the `b0` term in the continued\n        fraction. Default: `false`.\n\n    Returns\n    -------\n    out: number\n       Value of continued fraction.\n\n    Examples\n    --------\n    // Continued fraction for (e-1)^(-1):\n    > function closure() {\n    ...    var i = 0;\n    ...    return function() {\n    ...        i += 1;\n    ...        return [ i, i ];\n    ...    };\n    ... };\n    > var gen = closure();\n    > var out = base.continuedFraction( gen )\n    ~0.582\n\n    // Using an ES6 generator:\n    > function* generator() {\n    ...     var i = 0;\n    ...     while ( true ) {\n    ...         i += 1;\n    ...         yield [ i, i ];\n    ...     }\n    ... };\n    > gen = generator();\n    > out = base.continuedFraction( gen )\n    ~0.582\n\n    // Set options:\n    > out = base.continuedFraction( generator(), { 'keep': true } )\n    ~1.718\n    > out = base.continuedFraction( generator(), { 'maxIter': 10 } )\n    ~0.582\n    > out = base.continuedFraction( generator(), { 'tolerance': 1e-1 } )\n    ~0.579\n\n","base.copysign":"\nbase.copysign( x, y )\n    Returns a double-precision floating-point number with the magnitude of `x`\n    and the sign of `y`.\n\n    Parameters\n    ----------\n    x: number\n        Number from which to derive a magnitude.\n\n    y: number\n        Number from which to derive a sign.\n\n    Returns\n    -------\n    z: number\n        Double-precision floating-point number.\n\n    Examples\n    --------\n    > var z = base.copysign( -3.14, 10.0 )\n    3.14\n    > z = base.copysign( 3.14, -1.0 )\n    -3.14\n    > z = base.copysign( 1.0, -0.0 )\n    -1.0\n    > z = base.copysign( -3.14, -0.0 )\n    -3.14\n    > z = base.copysign( -0.0, 1.0 )\n    0.0\n\n    See Also\n    --------\n    base.flipsign\n","base.cos":"\nbase.cos( x )\n    Computes the cosine of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Cosine.\n\n    Examples\n    --------\n    > var y = base.cos( 0.0 )\n    1.0\n    > y = base.cos( PI/4.0 )\n    ~0.707\n    > y = base.cos( -PI/6.0 )\n    ~0.866\n    > y = base.cos( NaN )\n    NaN\n\n    See Also\n    --------\n    base.cospi, base.cosm1, base.sin, base.tan\n","base.cosh":"\nbase.cosh( x )\n    Computes the hyperbolic cosine of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Hyperbolic cosine.\n\n    Examples\n    --------\n    > var y = base.cosh( 0.0 )\n    1.0\n    > y = base.cosh( 2.0 )\n    ~3.762\n    > y = base.cosh( -2.0 )\n    ~3.762\n    > y = base.cosh( NaN )\n    NaN\n\n    See Also\n    --------\n    base.cos, base.sinh, base.tanh\n","base.cosm1":"\nbase.cosm1( x )\n    Computes the cosine of a number minus one.\n\n    This function should be used instead of manually calculating `cos(x)-1` when\n    `x` is near unity.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Cosine minus one.\n\n    Examples\n    --------\n    > var y = base.cosm1( 0.0 )\n    0.0\n    > y = base.cosm1( PI/4.0 )\n    ~-0.293\n    > y = base.cosm1( -PI/6.0 )\n    ~-0.134\n    > y = base.cosm1( NaN )\n    NaN\n\n    See Also\n    --------\n    base.cos\n","base.cospi":"\nbase.cospi( x )\n    Computes the value of `cos(πx)`.\n\n    This function computes `cos(πx)` more accurately than the obvious approach,\n    especially for large `x`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.cospi( 0.0 )\n    1.0\n    > y = base.cospi( 0.5 )\n    0.0\n    > y = base.cospi( 0.1 )\n    ~0.951\n    > y = base.cospi( NaN )\n    NaN\n\n    See Also\n    --------\n    base.cos\n","base.covercos":"\nbase.covercos( x )\n    Computes the coversed cosine.\n\n    The coversed cosine is defined as `1 + sin(x)`.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Coversed cosine.\n\n    Examples\n    --------\n    > var y = base.covercos( 3.14 )\n    ~1.0016\n    > y = base.covercos( -4.2 )\n    ~1.8716\n    > y = base.covercos( -4.6 )\n    ~1.9937\n    > y = base.covercos( 9.5 )\n    ~0.9248\n    > y = base.covercos( -0.0 )\n    1.0\n\n    See Also\n    --------\n    base.coversin, base.vercos\n","base.coversin":"\nbase.coversin( x )\n    Computes the coversed sine.\n\n    The coversed sine is defined as `1 - sin(x)`.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Coversed sine.\n\n    Examples\n    --------\n    > var y = base.coversin( 3.14 )\n    ~0.9984\n    > y = base.coversin( -4.2 )\n    ~0.1284\n    > y = base.coversin( -4.6 )\n    ~0.0063\n    > y = base.coversin( 9.5 )\n    ~1.0752\n    > y = base.coversin( -0.0 )\n    1.0\n\n    See Also\n    --------\n    base.covercos, base.versin\n","base.cphase":"\nbase.cphase( re, im )\n    Computes the argument of a complex number in radians.\n\n    The argument of a complex number, also known as the phase, is the angle of\n    the radius extending from the origin to the complex number plotted in the\n    complex plane and the positive real axis.\n\n    Parameters\n    ----------\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    phi: number\n        Argument.\n\n    Examples\n    --------\n    > var phi = base.cphase( 5.0, 3.0 )\n    ~0.5404\n\n    See Also\n    --------\n    base.cabs\n","base.cpolar":"\nbase.cpolar( [out,] re, im )\n    Returns the absolute value and phase of a complex number.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Absolute value and phase, respectively.\n\n    Examples\n    --------\n    > var out = base.cpolar( 5.0, 3.0 )\n    [ ~5.83, ~0.5404 ]\n\n    // Provide an output array:\n    > out = new Float64Array( 2 );\n    > var v = base.cpolar( out, 5.0, 3.0 )\n    <Float64Array>[ ~5.83, ~0.5404 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.cabs, base.cphase\n","base.cround":"\nbase.cround( [out,] re, im )\n    Rounds a complex number to the nearest integer.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Rounded components.\n\n    Examples\n    --------\n    > var out = base.cround( 5.5, 3.3 )\n    [ 6.0, 3.0 ]\n\n    // Provide an output array:\n    > out = new Float64Array( 2 );\n    > var v = base.cround( out, 5.5, 3.3 )\n    <Float64Array>[ 6.0, 3.0 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.cceil, base.cfloor, base.croundn\n","base.croundn":"\nbase.croundn( [out,] re, im, n )\n    Rounds a complex number to the nearest multiple of `10^n`.\n\n    When operating on floating-point numbers in bases other than `2`, rounding\n    to specified digits can be inexact.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    n: integer\n        Integer power of 10.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Real and imaginary components.\n\n    Examples\n    --------\n    > var out = base.croundn( 5.555, -3.336, -2 )\n    [ 5.56, -3.34 ]\n\n    // Provide an output array:\n    > out = new Float64Array( 2 );\n    > var v = base.croundn( out, 5.555, -3.336, -2 )\n    <Float64Array>[ 5.56, -3.34 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.cceiln, base.cfloorn, base.cround\n","base.csignum":"\nbase.csignum( [out,] re, im )\n    Evaluates the signum function of a complex number.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re: number\n        Real component.\n\n    im: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Function result.\n\n    Examples\n    --------\n    > var out = base.csignum( -4.2, 5.5 )\n    [ -0.6069136033622302, 0.79476781392673 ]\n\n    // Provide an output array:\n    > out = new Float64Array( 2 );\n    > var v = base.csignum( out, -4.2, 5.5 )\n    <Float64Array>[ -0.6069136033622302, 0.79476781392673 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.signum\n","base.csub":"\nbase.csub( [out,] re1, im1, re2, im2 )\n    Subtracts two complex numbers.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    re1: number\n        Real component.\n\n    im1: number\n        Imaginary component.\n\n    re2: number\n        Real component.\n\n    im2: number\n        Imaginary component.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Array containing the real and imaginary components of the result.\n\n    Examples\n    --------\n    > var out = base.csub( 5.0, 3.0, -2.0, 1.0 )\n    [ 7.0, 2.0 ]\n\n    // Provide an output array:\n    > out = new Float64Array( 2 );\n    > var v = base.csub( out, 5.0, 3.0, -2.0, 1.0 )\n    <Float64Array>[ 7.0, 2.0 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.cadd, base.cdiv, base.cmul\n","base.dasum":"\nbase.dasum( N, x, stride )\n    Computes the sum of the absolute values.\n\n    The sum of absolute values corresponds to the *L1* norm.\n\n    The `N` and `stride` parameters determine which elements in `x` are used to\n    compute the sum.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N` or `stride` is less than or equal to `0`, the function returns `0`.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Float64Array\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    Returns\n    -------\n    sum: number\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n    > var sum = base.dasum( x.length, x, 1 )\n    19.0\n\n    // Sum every other value:\n    > var N = base.floor( x.length / 2 );\n    > var stride = 2;\n    > sum = base.dasum( N, x, stride )\n    10.0\n\n    // Use view offset; e.g., starting at 2nd element:\n    > var x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n    > var x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > N = base.floor( x0.length / 2 );\n    > sum = base.dasum( N, x1, stride )\n    12.0\n\n\nbase.dasum.ndarray( N, x, stride, offset )\n    Computes the sum of absolute values using alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameter supports indexing semantics based on a\n    starting index.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Float64Array\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    offset: integer\n        Starting index.\n\n    Returns\n    -------\n    sum: number\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n    > var sum = base.dasum.ndarray( x.length, x, 1, 0 )\n    19.0\n\n    // Sum the last three elements:\n    > x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n    > sum = base.dasum.ndarray( 3, x, -1, x.length-1 )\n    15.0\n\n\nbase.dasum.wasm( [options] )\n    Returns a memory managed function to compute the sum of absolute values.\n\n    For an externally defined `Float64Array`, data must be copied to the heap.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.memory: integer (optional)\n        Total memory. If not provided a buffer, setting the memory option\n        instructs the returned function to allocate an internal memory store of\n        the specified size.\n\n    options.stack: integer (optional)\n        Total stack size. Must be less than the memory option and large enough\n        for a program's needs. Default: `1024` bytes.\n\n    options.buffer: ArrayBuffer (optional)\n        `ArrayBuffer` serving as the underlying memory store. If not provided,\n        each returned function will allocate and manage its own memory. If\n        provided a memory option, the buffer `byteLength` must equal the\n        specified total memory.\n\n    Returns\n    -------\n    out: Function\n        Memory managed function.\n\n    Examples\n    --------\n    > var wasm = base.dasum.wasm();\n    > var N = 5;\n\n    // Allocate space on the heap:\n    > var bytes = wasm.malloc( N * 8 );\n\n    // Create a Float64Array view:\n    > var view = new Float64Array( bytes.buffer, bytes.byteOffset, N );\n\n    // Copy data to the heap:\n    > view.set( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n\n    // Compute the sum of absolute values (passing in the heap buffer):\n    > var s = wasm( N, bytes, 1 )\n    15.0\n\n    // Free the memory:\n    > wasm.free( bytes );\n\n    See Also\n    --------\n    base.daxpy, base.dcopy\n","base.dasum.ndarray":"\nbase.dasum.ndarray( N, x, stride, offset )\n    Computes the sum of absolute values using alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameter supports indexing semantics based on a\n    starting index.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Float64Array\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    offset: integer\n        Starting index.\n\n    Returns\n    -------\n    sum: number\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float64Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n    > var sum = base.dasum.ndarray( x.length, x, 1, 0 )\n    19.0\n\n    // Sum the last three elements:\n    > x = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n    > sum = base.dasum.ndarray( 3, x, -1, x.length-1 )\n    15.0\n\n","base.dasum.wasm":"\nbase.dasum.wasm( [options] )\n    Returns a memory managed function to compute the sum of absolute values.\n\n    For an externally defined `Float64Array`, data must be copied to the heap.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.memory: integer (optional)\n        Total memory. If not provided a buffer, setting the memory option\n        instructs the returned function to allocate an internal memory store of\n        the specified size.\n\n    options.stack: integer (optional)\n        Total stack size. Must be less than the memory option and large enough\n        for a program's needs. Default: `1024` bytes.\n\n    options.buffer: ArrayBuffer (optional)\n        `ArrayBuffer` serving as the underlying memory store. If not provided,\n        each returned function will allocate and manage its own memory. If\n        provided a memory option, the buffer `byteLength` must equal the\n        specified total memory.\n\n    Returns\n    -------\n    out: Function\n        Memory managed function.\n\n    Examples\n    --------\n    > var wasm = base.dasum.wasm();\n    > var N = 5;\n\n    // Allocate space on the heap:\n    > var bytes = wasm.malloc( N * 8 );\n\n    // Create a Float64Array view:\n    > var view = new Float64Array( bytes.buffer, bytes.byteOffset, N );\n\n    // Copy data to the heap:\n    > view.set( [ 1.0, -2.0, 3.0, -4.0, 5.0 ] );\n\n    // Compute the sum of absolute values (passing in the heap buffer):\n    > var s = wasm( N, bytes, 1 )\n    15.0\n\n    // Free the memory:\n    > wasm.free( bytes );\n\n    See Also\n    --------\n    base.daxpy, base.dcopy\n","base.daxpy":"\nbase.daxpy( N, alpha, x, strideX, y, strideY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`.\n\n    The `N` and `stride` parameters determine which elements in `x` and `y` are\n    accessed at runtime.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N <= 0` or `alpha == 0`, the function returns `y` unchanged.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: number\n        Constant.\n\n    x: Float64Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    y: Float64Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    Returns\n    -------\n    y: Float64Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n    > var alpha = 5.0;\n    > base.daxpy( x.length, alpha, x, 1, y, 1 )\n    <Float64Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Using `N` and `stride` parameters:\n    > x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.daxpy( N, alpha, x, 2, y, -1 )\n    <Float64Array>[ 26.0, 16.0, 6.0, 1.0, 1.0, 1.0 ]\n\n    // Using view offsets:\n    > var x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > var y0 = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > var y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\n    > N = base.floor( x0.length / 2 );\n    > base.daxpy( N, 5.0, x1, -2, y1, 1 )\n    <Float64Array>[ 40.0, 31.0, 22.0 ]\n    > y0\n    <Float64Array>[ 7.0, 8.0, 9.0, 40.0, 31.0, 22.0 ]\n\n\nbase.daxpy.ndarray( N, alpha, x, strideX, offsetX, y, strideY, offsetY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`, with\n    alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offsetX` and `offsetY` parameters support indexing semantics\n    based on starting indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: number\n        Constant.\n\n    x: Float64Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Float64Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Float64Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n    > var alpha = 5.0;\n    > base.daxpy.ndarray( x.length, alpha, x, 1, 0, y, 1, 0 )\n    <Float64Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Advanced indexing:\n    > x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.daxpy.ndarray( N, alpha, x, 2, 1, y, -1, y.length-1 )\n    <Float64Array>[ 7.0, 8.0, 9.0, 40.0, 31.0, 22.0 ]\n\n\nbase.daxpy.wasm( [options] )\n    Returns a memory managed function to multiply `x` by a constant `alpha` and\n    add the result to `y`.\n\n    For externally defined `Float64Arrays`, data must be copied to the heap.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.memory: integer (optional)\n        Total memory. If not provided a buffer, setting the memory option\n        instructs the returned function to allocate an internal memory store of\n        the specified size.\n\n    options.stack: integer (optional)\n        Total stack size. Must be less than the memory option and large enough\n        for a program's needs. Default: `1024` bytes.\n\n    options.buffer: ArrayBuffer (optional)\n        `ArrayBuffer` serving as the underlying memory store. If not provided,\n        each returned function will allocate and manage its own memory. If\n        provided a memory option, the buffer `byteLength` must equal the\n        specified total memory.\n\n    Returns\n    -------\n    out: Function\n        Memory managed function.\n\n    Examples\n    --------\n    > var wasm = base.daxpy.wasm();\n    > var N = 5;\n\n    // Allocate space on the heap:\n    > var xbytes = wasm.malloc( N * 8 );\n    > var ybytes = wasm.malloc( N * 8 );\n\n    // Create Float64Array views:\n    > var x = new Float64Array( xbytes.buffer, xbytes.byteOffset, N );\n    > var y = new Float64Array( ybytes.buffer, ybytes.byteOffset, N );\n\n    // Copy data to the heap:\n    > x.set( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > y.set( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n\n    // Multiply and add alpha:\n    > var alpha = 5.0;\n    > wasm( x.length, alpha, xbytes, 1, ybytes, 1 );\n    > y\n    <Float64Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Free the memory:\n    > wasm.free( xbytes );\n    > wasm.free( ybytes );\n\n    See Also\n    --------\n    base.dasum, base.dcopy\n","base.daxpy.ndarray":"\nbase.daxpy.ndarray( N, alpha, x, strideX, offsetX, y, strideY, offsetY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`, with\n    alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offsetX` and `offsetY` parameters support indexing semantics\n    based on starting indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: number\n        Constant.\n\n    x: Float64Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Float64Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Float64Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float64Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n    > var alpha = 5.0;\n    > base.daxpy.ndarray( x.length, alpha, x, 1, 0, y, 1, 0 )\n    <Float64Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Advanced indexing:\n    > x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.daxpy.ndarray( N, alpha, x, 2, 1, y, -1, y.length-1 )\n    <Float64Array>[ 7.0, 8.0, 9.0, 40.0, 31.0, 22.0 ]\n\n","base.daxpy.wasm":"\nbase.daxpy.wasm( [options] )\n    Returns a memory managed function to multiply `x` by a constant `alpha` and\n    add the result to `y`.\n\n    For externally defined `Float64Arrays`, data must be copied to the heap.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.memory: integer (optional)\n        Total memory. If not provided a buffer, setting the memory option\n        instructs the returned function to allocate an internal memory store of\n        the specified size.\n\n    options.stack: integer (optional)\n        Total stack size. Must be less than the memory option and large enough\n        for a program's needs. Default: `1024` bytes.\n\n    options.buffer: ArrayBuffer (optional)\n        `ArrayBuffer` serving as the underlying memory store. If not provided,\n        each returned function will allocate and manage its own memory. If\n        provided a memory option, the buffer `byteLength` must equal the\n        specified total memory.\n\n    Returns\n    -------\n    out: Function\n        Memory managed function.\n\n    Examples\n    --------\n    > var wasm = base.daxpy.wasm();\n    > var N = 5;\n\n    // Allocate space on the heap:\n    > var xbytes = wasm.malloc( N * 8 );\n    > var ybytes = wasm.malloc( N * 8 );\n\n    // Create Float64Array views:\n    > var x = new Float64Array( xbytes.buffer, xbytes.byteOffset, N );\n    > var y = new Float64Array( ybytes.buffer, ybytes.byteOffset, N );\n\n    // Copy data to the heap:\n    > x.set( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > y.set( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n\n    // Multiply and add alpha:\n    > var alpha = 5.0;\n    > wasm( x.length, alpha, xbytes, 1, ybytes, 1 );\n    > y\n    <Float64Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Free the memory:\n    > wasm.free( xbytes );\n    > wasm.free( ybytes );\n\n    See Also\n    --------\n    base.dasum, base.dcopy\n","base.dcopy":"\nbase.dcopy( N, x, strideX, y, strideY )\n    Copies values from `x` into `y`.\n\n    The `N` and `stride` parameters determine how values from `x` are copied\n    into `y`.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N` is less than or equal to `0`, the function returns `y` unchanged.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Float64Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    y: Float64Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    Returns\n    -------\n    y: Float64Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n    > base.dcopy( x.length, x, 1, y, 1 )\n    <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.dcopy( N, x, -2, y, 1 )\n    <Float64Array>[ 5.0, 3.0, 1.0, 10.0, 11.0, 12.0 ]\n\n    // Using typed array views:\n    > var x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > var y0 = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > var y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\n    > N = base.floor( x0.length / 2 );\n    > base.dcopy( N, x1, -2, y1, 1 )\n    <Float64Array>[ 6.0, 4.0, 2.0 ]\n    > y0\n    <Float64Array>[ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n\nbase.dcopy.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )\n    Copies values from `x` into `y`, with alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameters support indexing semantics based on starting\n    indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Float64Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Float64Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Float64Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n    > base.dcopy.ndarray( x.length, x, 1, 0, y, 1, 0 )\n    <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.dcopy.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n    <Float64Array>[ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n    See Also\n    --------\n    base.dasum, base.daxpy\n","base.dcopy.ndarray":"\nbase.dcopy.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )\n    Copies values from `x` into `y`, with alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameters support indexing semantics based on starting\n    indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Float64Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Float64Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Float64Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float64Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n    > base.dcopy.ndarray( x.length, x, 1, 0, y, 1, 0 )\n    <Float64Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.dcopy.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n    <Float64Array>[ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n    See Also\n    --------\n    base.dasum, base.daxpy\n","base.deg2rad":"\nbase.deg2rad( x )\n    Converts an angle from degrees to radians.\n\n    Parameters\n    ----------\n    x: number\n        Angle in degrees.\n\n    Returns\n    -------\n    r: number\n        Angle in radians.\n\n    Examples\n    --------\n    > var r = base.deg2rad( 90.0 )\n    ~1.571\n    > r = base.deg2rad( -45.0 )\n    ~-0.785\n    > r = base.deg2rad( NaN )\n    NaN\n\n    See Also\n    --------\n    base.rad2deg\n","base.digamma":"\nbase.digamma( x )\n    Evaluates the digamma function.\n\n    If `x` is zero or a negative integer, the function returns `NaN`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.digamma( -2.5 )\n    ~1.103\n    > y = base.digamma( 1.0 )\n    ~-0.577\n    > y = base.digamma( 10.0 )\n    ~2.252\n    > y = base.digamma( NaN )\n    NaN\n    > y = base.digamma( -1.0 )\n    NaN\n\n    See Also\n    --------\n    base.trigamma, base.gamma\n","base.diracDelta":"\nbase.diracDelta( x )\n    Evaluates the Dirac delta function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.diracDelta( 3.14 )\n    0.0\n    > y = base.diracDelta( 0.0 )\n    Infinity\n\n    See Also\n    --------\n    base.kroneckerDelta\n","base.dists.arcsine.Arcsine":"\nbase.dists.arcsine.Arcsine( [a, b] )\n    Returns an arcsine distribution object.\n\n    Parameters\n    ----------\n    a: number (optional)\n        Minimum support. Must be less than `b`. Default: `0.0`.\n\n    b: number (optional)\n        Maximum support. Must be greater than `a`. Default: `1.0`.\n\n    Returns\n    -------\n    arcsine: Object\n        Distribution instance.\n\n    arcsine.a: number\n        Minimum support. If set, the value must be less than `b`.\n\n    arcsine.b: number\n        Maximum support. If set, the value must be greater than `a`.\n\n    arcsine.entropy: number\n        Read-only property which returns the differential entropy.\n\n    arcsine.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    arcsine.mean: number\n        Read-only property which returns the expected value.\n\n    arcsine.median: number\n        Read-only property which returns the median.\n\n    arcsine.mode: number\n        Read-only property which returns the mode.\n\n    arcsine.skewness: number\n        Read-only property which returns the skewness.\n\n    arcsine.stdev: number\n        Read-only property which returns the standard deviation.\n\n    arcsine.variance: number\n        Read-only property which returns the variance.\n\n    arcsine.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    arcsine.logcdf: Function\n        Evaluates the natural logarithm of the cumulative distribution function\n        (CDF).\n\n    arcsine.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    arcsine.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    arcsine.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var arcsine = base.dists.arcsine.Arcsine( 0.0, 1.0 );\n    > arcsine.a\n    0.0\n    > arcsine.b\n    1.0\n    > arcsine.entropy\n    ~-0.242\n    > arcsine.kurtosis\n    -1.5\n    > arcsine.mean\n    0.5\n    > arcsine.median\n    0.5\n    > arcsine.mode\n    0.0\n    > arcsine.skewness\n    0.0\n    > arcsine.stdev\n    ~0.354\n    > arcsine.variance\n    0.125\n    > arcsine.cdf( 0.8 )\n    ~0.705\n    > arcsine.logcdf( 0.8 )\n    ~-0.35\n    > arcsine.logpdf( 0.4 )\n    ~-0.431\n    > arcsine.pdf( 0.8 )\n    ~0.796\n    > arcsine.quantile( 0.8 )\n    ~0.905\n\n","base.dists.arcsine.cdf":"\nbase.dists.arcsine.cdf( x, a, b )\n    Evaluates the cumulative distribution function (CDF) for an arcsine\n    distribution with minimum support `a` and maximum support `b` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.arcsine.cdf( 9.0, 0.0, 10.0 )\n    ~0.795\n    > y = base.dists.arcsine.cdf( 0.5, 0.0, 2.0 )\n    ~0.333\n    > y = base.dists.arcsine.cdf( PINF, 2.0, 4.0 )\n    1.0\n    > y = base.dists.arcsine.cdf( NINF, 2.0, 4.0 )\n    0.0\n    > y = base.dists.arcsine.cdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.arcsine.cdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.arcsine.cdf( 0.0, 0.0, NaN )\n    NaN\n    > y = base.dists.arcsine.cdf( 2.0, 1.0, 0.0 )\n    NaN\n\n\nbase.dists.arcsine.cdf.factory( a, b )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of an arcsine distribution with minimum support `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.arcsine.cdf.factory( 0.0, 10.0 );\n    > var y = mycdf( 0.5 )\n    ~0.144\n    > y = mycdf( 8.0 )\n    ~0.705\n\n","base.dists.arcsine.cdf.factory":"\nbase.dists.arcsine.cdf.factory( a, b )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of an arcsine distribution with minimum support `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.arcsine.cdf.factory( 0.0, 10.0 );\n    > var y = mycdf( 0.5 )\n    ~0.144\n    > y = mycdf( 8.0 )\n    ~0.705\n\n","base.dists.arcsine.entropy":"\nbase.dists.arcsine.entropy( a, b )\n    Returns the differential entropy of an arcsine distribution (in nats).\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dists.arcsine.entropy( 0.0, 1.0 )\n    ~-0.242\n    > v = base.dists.arcsine.entropy( 4.0, 12.0 )\n    ~1.838\n    > v = base.dists.arcsine.entropy( 2.0, 8.0 )\n    ~1.55\n\n","base.dists.arcsine.kurtosis":"\nbase.dists.arcsine.kurtosis( a, b )\n    Returns the excess kurtosis of an arcsine distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dists.arcsine.kurtosis( 0.0, 1.0 )\n    -1.5\n    > v = base.dists.arcsine.kurtosis( 4.0, 12.0 )\n    -1.5\n    > v = base.dists.arcsine.kurtosis( 2.0, 8.0 )\n    -1.5\n\n","base.dists.arcsine.logcdf":"\nbase.dists.arcsine.logcdf( x, a, b )\n    Evaluates the logarithm of the cumulative distribution function (CDF) for an\n    arcsine distribution with minimum support `a` and maximum support `b` at a\n    value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Evaluated logCDF.\n\n    Examples\n    --------\n    > var y = base.dists.arcsine.logcdf( 9.0, 0.0, 10.0 )\n    ~-0.229\n    > y = base.dists.arcsine.logcdf( 0.5, 0.0, 2.0 )\n    ~-1.1\n    > y = base.dists.arcsine.logcdf( PINF, 2.0, 4.0 )\n    0.0\n    > y = base.dists.arcsine.logcdf( NINF, 2.0, 4.0 )\n    -Infinity\n    > y = base.dists.arcsine.logcdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.arcsine.logcdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.arcsine.logcdf( 0.0, 0.0, NaN )\n    NaN\n    > y = base.dists.arcsine.logcdf( 2.0, 1.0, 0.0 )\n    NaN\n\n\nbase.dists.arcsine.logcdf.factory( a, b )\n    Returns a function for evaluating the logarithm of the cumulative\n    distribution function (CDF) of an arcsine distribution with minimum support\n    `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.arcsine.logcdf.factory( 0.0, 10.0 );\n    > var y = mylogcdf( 0.5 )\n    ~-1.941\n    > y = mylogcdf( 8.0 )\n    ~-0.35\n\n","base.dists.arcsine.logcdf.factory":"\nbase.dists.arcsine.logcdf.factory( a, b )\n    Returns a function for evaluating the logarithm of the cumulative\n    distribution function (CDF) of an arcsine distribution with minimum support\n    `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.arcsine.logcdf.factory( 0.0, 10.0 );\n    > var y = mylogcdf( 0.5 )\n    ~-1.941\n    > y = mylogcdf( 8.0 )\n    ~-0.35\n\n","base.dists.arcsine.logpdf":"\nbase.dists.arcsine.logpdf( x, a, b )\n    Evaluates the logarithm of the probability density function (PDF) for an\n    arcsine distribution with minimum support `a` and maximum support `b` at a\n    value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dists.arcsine.logpdf( 2.0, 0.0, 4.0 )\n    ~-1.838\n    > y = base.dists.arcsine.logpdf( 5.0, 0.0, 4.0 )\n    -Infinity\n    > y = base.dists.arcsine.logpdf( 0.25, 0.0, 1.0 )\n    ~-0.308\n    > y = base.dists.arcsine.logpdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.arcsine.logpdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.arcsine.logpdf( 0.0, 0.0, NaN )\n    NaN\n    > y = base.dists.arcsine.logpdf( 2.0, 3.0, 1.0 )\n    NaN\n\n\nbase.dists.arcsine.logpdf.factory( a, b )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of an arcsine distribution with minimum support `a` and\n    maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogPDF = base.dists.arcsine.logpdf.factory( 6.0, 7.0 );\n    > var y = mylogPDF( 7.0 )\n    Infinity\n    > y = mylogPDF( 5.0 )\n    -Infinity\n\n","base.dists.arcsine.logpdf.factory":"\nbase.dists.arcsine.logpdf.factory( a, b )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of an arcsine distribution with minimum support `a` and\n    maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogPDF = base.dists.arcsine.logpdf.factory( 6.0, 7.0 );\n    > var y = mylogPDF( 7.0 )\n    Infinity\n    > y = mylogPDF( 5.0 )\n    -Infinity\n\n","base.dists.arcsine.mean":"\nbase.dists.arcsine.mean( a, b )\n    Returns the expected value of an arcsine distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dists.arcsine.mean( 0.0, 1.0 )\n    0.5\n    > v = base.dists.arcsine.mean( 4.0, 12.0 )\n    8.0\n    > v = base.dists.arcsine.mean( 2.0, 8.0 )\n    5.0\n\n","base.dists.arcsine.median":"\nbase.dists.arcsine.median( a, b )\n    Returns the median of an arcsine distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var v = base.dists.arcsine.median( 0.0, 1.0 )\n    0.5\n    > v = base.dists.arcsine.median( 4.0, 12.0 )\n    8.0\n    > v = base.dists.arcsine.median( 2.0, 8.0 )\n    5.0\n\n","base.dists.arcsine.mode":"\nbase.dists.arcsine.mode( a, b )\n    Returns the mode of an arcsine distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dists.arcsine.mode( 0.0, 1.0 )\n    0.0\n    > v = base.dists.arcsine.mode( 4.0, 12.0 )\n    4.0\n    > v = base.dists.arcsine.mode( 2.0, 8.0 )\n    2.0\n\n","base.dists.arcsine.pdf":"\nbase.dists.arcsine.pdf( x, a, b )\n    Evaluates the probability density function (PDF) for an arcsine distribution\n    with minimum support `a` and maximum support `b` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dists.arcsine.pdf( 2.0, 0.0, 4.0 )\n    ~0.159\n    > y = base.dists.arcsine.pdf( 5.0, 0.0, 4.0 )\n    0.0\n    > y = base.dists.arcsine.pdf( 0.25, 0.0, 1.0 )\n    ~0.735\n    > y = base.dists.arcsine.pdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.arcsine.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.arcsine.pdf( 0.0, 0.0, NaN )\n    NaN\n    > y = base.dists.arcsine.pdf( 2.0, 3.0, 1.0 )\n    NaN\n\n\nbase.dists.arcsine.pdf.factory( a, b )\n    Returns a function for evaluating the probability density function (PDF) of\n    an arcsine distribution with minimum support `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.arcsine.pdf.factory( 6.0, 7.0 );\n    > var y = myPDF( 7.0 )\n    Infinity\n    > y = myPDF( 5.0 )\n    0.0\n\n","base.dists.arcsine.pdf.factory":"\nbase.dists.arcsine.pdf.factory( a, b )\n    Returns a function for evaluating the probability density function (PDF) of\n    an arcsine distribution with minimum support `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.arcsine.pdf.factory( 6.0, 7.0 );\n    > var y = myPDF( 7.0 )\n    Infinity\n    > y = myPDF( 5.0 )\n    0.0\n\n","base.dists.arcsine.quantile":"\nbase.dists.arcsine.quantile( p, a, b )\n    Evaluates the quantile function for an arcsine distribution with minimum\n    support `a` and maximum support `b` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.arcsine.quantile( 0.8, 0.0, 1.0 )\n    ~0.905\n    > y = base.dists.arcsine.quantile( 0.5, 0.0, 10.0 )\n    ~5.0\n\n    > y = base.dists.arcsine.quantile( 1.1, 0.0, 1.0 )\n    NaN\n    > y = base.dists.arcsine.quantile( -0.2, 0.0, 1.0 )\n    NaN\n\n    > y = base.dists.arcsine.quantile( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.arcsine.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.arcsine.quantile( 0.0, 0.0, NaN )\n    NaN\n\n    > y = base.dists.arcsine.quantile( 0.5, 2.0, 1.0 )\n    NaN\n\n\nbase.dists.arcsine.quantile.factory( a, b )\n    Returns a function for evaluating the quantile function of an arcsine\n    distribution with minimum support `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.arcsine.quantile.factory( 0.0, 4.0 );\n    > var y = myQuantile( 0.8 )\n    ~3.618\n\n","base.dists.arcsine.quantile.factory":"\nbase.dists.arcsine.quantile.factory( a, b )\n    Returns a function for evaluating the quantile function of an arcsine\n    distribution with minimum support `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.arcsine.quantile.factory( 0.0, 4.0 );\n    > var y = myQuantile( 0.8 )\n    ~3.618\n\n","base.dists.arcsine.skewness":"\nbase.dists.arcsine.skewness( a, b )\n    Returns the skewness of an arcsine distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dists.arcsine.skewness( 0.0, 1.0 )\n    0.0\n    > v = base.dists.arcsine.skewness( 4.0, 12.0 )\n    0.0\n    > v = base.dists.arcsine.skewness( 2.0, 8.0 )\n    0.0\n\n","base.dists.arcsine.stdev":"\nbase.dists.arcsine.stdev( a, b )\n    Returns the standard deviation of an arcsine distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dists.arcsine.stdev( 0.0, 1.0 )\n    ~0.354\n    > v = base.dists.arcsine.stdev( 4.0, 12.0 )\n    ~2.828\n    > v = base.dists.arcsine.stdev( 2.0, 8.0 )\n    ~2.121\n\n","base.dists.arcsine.variance":"\nbase.dists.arcsine.variance( a, b )\n    Returns the variance of an arcsine distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dists.arcsine.variance( 0.0, 1.0 )\n    ~0.125\n    > v = base.dists.arcsine.variance( 4.0, 12.0 )\n    8.0\n    > v = base.dists.arcsine.variance( 2.0, 8.0 )\n    ~4.5\n\n","base.dists.bernoulli.Bernoulli":"\nbase.dists.bernoulli.Bernoulli( [p] )\n    Returns a Bernoulli distribution object.\n\n    Parameters\n    ----------\n    p: number (optional)\n        Success probability. Must be between `0` and `1`. Default: `0.5`.\n\n    Returns\n    -------\n    bernoulli: Object\n        Distribution instance.\n\n    bernoulli.p: number\n        Success probability. If set, the value must be between `0` and `1`.\n\n    bernoulli.entropy: number\n        Read-only property which returns the differential entropy.\n\n    bernoulli.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    bernoulli.mean: number\n        Read-only property which returns the expected value.\n\n    bernoulli.median: number\n        Read-only property which returns the median.\n\n    bernoulli.skewness: number\n        Read-only property which returns the skewness.\n\n    bernoulli.stdev: number\n        Read-only property which returns the standard deviation.\n\n    bernoulli.variance: number\n        Read-only property which returns the variance.\n\n    bernoulli.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    bernoulli.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    bernoulli.pmf: Function\n        Evaluates the probability mass function (PMF).\n\n    bernoulli.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var bernoulli = base.dists.bernoulli.Bernoulli( 0.6 );\n    > bernoulli.p\n    0.6\n    > bernoulli.entropy\n    ~0.673\n    > bernoulli.kurtosis\n    ~-1.833\n    > bernoulli.mean\n    0.6\n    > bernoulli.median\n    1.0\n    > bernoulli.skewness\n    ~-0.408\n    > bernoulli.stdev\n    ~0.49\n    > bernoulli.variance\n    ~0.24\n    > bernoulli.cdf( 0.5 )\n    0.4\n    > bernoulli.mgf( 3.0 )\n    ~12.451\n    > bernoulli.pmf( 0.0 )\n    0.4\n    > bernoulli.quantile( 0.7 )\n    1.0\n\n","base.dists.bernoulli.cdf":"\nbase.dists.bernoulli.cdf( x, p )\n    Evaluates the cumulative distribution function (CDF) for a Bernoulli\n    distribution with success probability `p` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.bernoulli.cdf( 0.5, 0.5 )\n    0.5\n    > y = base.dists.bernoulli.cdf( 0.8, 0.1 )\n    0.9\n    > y = base.dists.bernoulli.cdf( -1.0, 0.4 )\n    0.0\n    > y = base.dists.bernoulli.cdf( 1.5, 0.4 )\n    1.0\n    > y = base.dists.bernoulli.cdf( NaN, 0.5 )\n    NaN\n    > y = base.dists.bernoulli.cdf( 0.0, NaN )\n    NaN\n    // Invalid probability:\n    > y = base.dists.bernoulli.cdf( 2.0, 1.4 )\n    NaN\n\n\nbase.dists.bernoulli.cdf.factory( p )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Bernoulli distribution with success probability `p`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.bernoulli.cdf.factory( 0.5 );\n    > var y = mycdf( 3.0 )\n    1.0\n    > y = mycdf( 0.7 )\n    0.5\n\n","base.dists.bernoulli.cdf.factory":"\nbase.dists.bernoulli.cdf.factory( p )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Bernoulli distribution with success probability `p`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.bernoulli.cdf.factory( 0.5 );\n    > var y = mycdf( 3.0 )\n    1.0\n    > y = mycdf( 0.7 )\n    0.5\n\n","base.dists.bernoulli.entropy":"\nbase.dists.bernoulli.entropy( p )\n    Returns the entropy of a Bernoulli distribution with success probability\n    `p` (in nats).\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dists.bernoulli.entropy( 0.1 )\n    ~0.325\n    > v = base.dists.bernoulli.entropy( 0.5 )\n    ~0.693\n\n","base.dists.bernoulli.kurtosis":"\nbase.dists.bernoulli.kurtosis( p )\n    Returns the excess kurtosis of a Bernoulli distribution with success\n    probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dists.bernoulli.kurtosis( 0.1 )\n    ~5.111\n    > v = base.dists.bernoulli.kurtosis( 0.5 )\n    -2.0\n\n","base.dists.bernoulli.mean":"\nbase.dists.bernoulli.mean( p )\n    Returns the expected value of a Bernoulli distribution with success\n    probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dists.bernoulli.mean( 0.1 )\n    0.1\n    > v = base.dists.bernoulli.mean( 0.5 )\n    0.5\n\n","base.dists.bernoulli.median":"\nbase.dists.bernoulli.median( p )\n    Returns the median of a Bernoulli distribution with success probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: integer\n        Median.\n\n    Examples\n    --------\n    > var v = base.dists.bernoulli.median( 0.1 )\n    0\n    > v = base.dists.bernoulli.median( 0.8 )\n    1\n\n","base.dists.bernoulli.mgf":"\nbase.dists.bernoulli.mgf( t, p )\n    Evaluates the moment-generating function (MGF) for a Bernoulli\n    distribution with success probability `p` at a value `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    t: number\n        Input value.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dists.bernoulli.mgf( 0.2, 0.5 )\n    ~1.111\n    > y = base.dists.bernoulli.mgf( 0.4, 0.5 )\n    ~1.246\n    > y = base.dists.bernoulli.mgf( NaN, 0.0 )\n    NaN\n    > y = base.dists.bernoulli.mgf( 0.0, NaN )\n    NaN\n    > y = base.dists.bernoulli.mgf( -2.0, -1.0 )\n    NaN\n    > y = base.dists.bernoulli.mgf( 0.2, 2.0 )\n    NaN\n\n\nbase.dists.bernoulli.mgf.factory( p )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    Bernoulli distribution with success probability `p`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var mymgf = base.dists.bernoulli.mgf.factory( 0.8 );\n    > var y = mymgf( -0.2 )\n    ~0.855\n\n","base.dists.bernoulli.mgf.factory":"\nbase.dists.bernoulli.mgf.factory( p )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    Bernoulli distribution with success probability `p`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var mymgf = base.dists.bernoulli.mgf.factory( 0.8 );\n    > var y = mymgf( -0.2 )\n    ~0.855\n\n","base.dists.bernoulli.mode":"\nbase.dists.bernoulli.mode( p )\n    Returns the mode of a Bernoulli distribution with success probability `p`.\n\n    For `p = 0.5`, the mode is either `0` or `1`. This implementation returns\n    `0` for `p = 0.5`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: integer\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dists.bernoulli.mode( 0.1 )\n    0\n    > v = base.dists.bernoulli.mode( 0.8 )\n    1\n\n","base.dists.bernoulli.pmf":"\nbase.dists.bernoulli.pmf( x, p )\n    Evaluates the probability mass function (PMF) for a Bernoulli distribution\n    with success probability `p` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated PMF.\n\n    Examples\n    --------\n    > var y = base.dists.bernoulli.pmf( 1.0, 0.3 )\n    0.3\n    > y = base.dists.bernoulli.pmf( 0.0, 0.7 )\n    0.3\n    > y = base.dists.bernoulli.pmf( -1.0, 0.5 )\n    0.0\n    > y = base.dists.bernoulli.pmf( 0.0, NaN )\n    NaN\n    > y = base.dists.bernoulli.pmf( NaN, 0.5 )\n    NaN\n    // Invalid success probability:\n    > y = base.dists.bernoulli.pmf( 0.0, 1.5 )\n    NaN\n\n\nbase.dists.bernoulli.pmf.factory( p )\n    Returns a function for evaluating the probability mass function (PMF) of a\n    Bernoulli distribution with success probability `p`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    pmf: Function\n        Probability mass function (PMF).\n\n    Examples\n    --------\n    > var mypmf = base.dists.bernoulli.pmf.factory( 0.5 );\n    > var y = mypmf( 1.0 )\n    0.5\n    > y = mypmf( 0.0 )\n    0.5\n\n","base.dists.bernoulli.pmf.factory":"\nbase.dists.bernoulli.pmf.factory( p )\n    Returns a function for evaluating the probability mass function (PMF) of a\n    Bernoulli distribution with success probability `p`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    pmf: Function\n        Probability mass function (PMF).\n\n    Examples\n    --------\n    > var mypmf = base.dists.bernoulli.pmf.factory( 0.5 );\n    > var y = mypmf( 1.0 )\n    0.5\n    > y = mypmf( 0.0 )\n    0.5\n\n","base.dists.bernoulli.quantile":"\nbase.dists.bernoulli.quantile( r, p )\n    Evaluates the quantile function for a Bernoulli distribution with success\n    probability `p` at a probability `r`.\n\n    If `r < 0` or `r > 1`, the function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    r: number\n        Input probability.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.bernoulli.quantile( 0.8, 0.4 )\n    1\n    > y = base.dists.bernoulli.quantile( 0.5, 0.4 )\n    0\n    > y = base.dists.bernoulli.quantile( 0.9, 0.1 )\n    0\n\n    > y = base.dists.bernoulli.quantile( -0.2, 0.1 )\n    NaN\n\n    > y = base.dists.bernoulli.quantile( NaN, 0.8 )\n    NaN\n    > y = base.dists.bernoulli.quantile( 0.4, NaN )\n    NaN\n\n    > y = base.dists.bernoulli.quantile( 0.5, -1.0 )\n    NaN\n    > y = base.dists.bernoulli.quantile( 0.5, 1.5 )\n    NaN\n\n\nbase.dists.bernoulli.quantile.factory( p )\n    Returns a function for evaluating the quantile function of a Bernoulli\n    distribution with success probability `p`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myquantile = base.dists.bernoulli.quantile.factory( 0.4 );\n    > var y = myquantile( 0.4 )\n    0\n    > y = myquantile( 0.8 )\n    1\n    > y = myquantile( 1.0 )\n    1\n\n","base.dists.bernoulli.quantile.factory":"\nbase.dists.bernoulli.quantile.factory( p )\n    Returns a function for evaluating the quantile function of a Bernoulli\n    distribution with success probability `p`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myquantile = base.dists.bernoulli.quantile.factory( 0.4 );\n    > var y = myquantile( 0.4 )\n    0\n    > y = myquantile( 0.8 )\n    1\n    > y = myquantile( 1.0 )\n    1\n\n","base.dists.bernoulli.skewness":"\nbase.dists.bernoulli.skewness( p )\n    Returns the skewness of a Bernoulli distribution with success probability\n    `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dists.bernoulli.skewness( 0.1 )\n    ~2.667\n    > v = base.dists.bernoulli.skewness( 0.5 )\n    0.0\n\n","base.dists.bernoulli.stdev":"\nbase.dists.bernoulli.stdev( p )\n    Returns the standard deviation of a Bernoulli distribution with success\n    probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dists.bernoulli.stdev( 0.1 )\n    ~0.3\n    > v = base.dists.bernoulli.stdev( 0.5 )\n    0.5\n\n","base.dists.bernoulli.variance":"\nbase.dists.bernoulli.variance( p )\n    Returns the variance of a Bernoulli distribution with success probability\n    `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dists.bernoulli.variance( 0.1 )\n    ~0.09\n    > v = base.dists.bernoulli.variance( 0.5 )\n    0.25\n\n","base.dists.beta.Beta":"\nbase.dists.beta.Beta( [α, β] )\n    Returns a beta distribution object.\n\n    Parameters\n    ----------\n    α: number (optional)\n        First shape parameter. Must be greater than `0`. Default: `1.0`.\n\n    β: number (optional)\n        Second shape parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    beta: Object\n        Distribution instance.\n\n    beta.alpha: number\n        First shape parameter. If set, the value must be greater than `0`.\n\n    beta.beta: number\n        Second shape parameter. If set, the value must be greater than `0`.\n\n    beta.entropy: number\n        Read-only property which returns the differential entropy.\n\n    beta.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    beta.mean: number\n        Read-only property which returns the expected value.\n\n    beta.median: number\n        Read-only property which returns the median.\n\n    beta.mode: number\n        Read-only property which returns the mode.\n\n    beta.skewness: number\n        Read-only property which returns the skewness.\n\n    beta.stdev: number\n        Read-only property which returns the standard deviation.\n\n    beta.variance: number\n        Read-only property which returns the variance.\n\n    beta.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    beta.logcdf: Function\n        Evaluates the natural logarithm of the cumulative distribution function\n        (CDF).\n\n    beta.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    beta.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    beta.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    beta.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var beta = base.dists.beta.Beta( 1.0, 1.0 );\n    > beta.alpha\n    1.0\n    > beta.beta\n    1.0\n    > beta.entropy\n    0.0\n    > beta.kurtosis\n    -1.2\n    > beta.mean\n    0.5\n    > beta.median\n    0.5\n    > beta.mode\n    NaN\n    > beta.skewness\n    0.0\n    > beta.stdev\n    ~0.289\n    > beta.variance\n    ~0.0833\n    > beta.cdf( 0.8 )\n    0.8\n    > beta.logcdf( 0.8 )\n    ~-0.223\n    > beta.logpdf( 1.0 )\n    0.0\n    > beta.mgf( 3.14 )\n    ~7.0394\n    > beta.pdf( 1.0 )\n    1.0\n    > beta.quantile( 0.8 )\n    0.8\n\n","base.dists.beta.cdf":"\nbase.dists.beta.cdf( x, α, β )\n    Evaluates the cumulative distribution function (CDF) for a beta distribution\n    with first shape parameter `α` and second shape parameter `β` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.beta.cdf( 0.5, 1.0, 1.0 )\n    0.5\n    > y = base.dists.beta.cdf( 0.5, 2.0, 4.0 )\n    ~0.813\n    > y = base.dists.beta.cdf( 0.2, 2.0, 2.0 )\n    ~0.104\n    > y = base.dists.beta.cdf( 0.8, 4.0, 4.0 )\n    ~0.967\n    > y = base.dists.beta.cdf( -0.5, 4.0, 2.0 )\n    0.0\n    > y = base.dists.beta.cdf( 1.5, 4.0, 2.0 )\n    1.0\n\n    > y = base.dists.beta.cdf( 2.0, -1.0, 0.5 )\n    NaN\n    > y = base.dists.beta.cdf( 2.0, 0.5, -1.0 )\n    NaN\n\n    > y = base.dists.beta.cdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.beta.cdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.beta.cdf( 0.0, 1.0, NaN )\n    NaN\n\n\nbase.dists.beta.cdf.factory( α, β )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a beta distribution with first shape parameter `α` and second shape\n    parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.beta.cdf.factory( 0.5, 0.5 );\n    > var y = mycdf( 0.8 )\n    ~0.705\n    > y = mycdf( 0.3 )\n    ~0.369\n\n","base.dists.beta.cdf.factory":"\nbase.dists.beta.cdf.factory( α, β )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a beta distribution with first shape parameter `α` and second shape\n    parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.beta.cdf.factory( 0.5, 0.5 );\n    > var y = mycdf( 0.8 )\n    ~0.705\n    > y = mycdf( 0.3 )\n    ~0.369\n\n","base.dists.beta.entropy":"\nbase.dists.beta.entropy( α, β )\n    Returns the differential entropy of a beta distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Differential entropy.\n\n    Examples\n    --------\n    > var v = base.dists.beta.entropy( 1.0, 1.0 )\n    0.0\n    > v = base.dists.beta.entropy( 4.0, 12.0 )\n    ~-0.869\n    > v = base.dists.beta.entropy( 8.0, 2.0 )\n    ~-0.795\n\n    > v = base.dists.beta.entropy( 1.0, -0.1 )\n    NaN\n    > v = base.dists.beta.entropy( -0.1, 1.0 )\n    NaN\n\n    > v = base.dists.beta.entropy( 2.0, NaN )\n    NaN\n    > v = base.dists.beta.entropy( NaN, 2.0 )\n    NaN\n\n","base.dists.beta.kurtosis":"\nbase.dists.beta.kurtosis( α, β )\n    Returns the excess kurtosis of a beta distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dists.beta.kurtosis( 1.0, 1.0 )\n    -1.2\n    > v = base.dists.beta.kurtosis( 4.0, 12.0 )\n    ~0.082\n    > v = base.dists.beta.kurtosis( 8.0, 2.0 )\n    ~0.490\n\n    > v = base.dists.beta.kurtosis( 1.0, -0.1 )\n    NaN\n    > v = base.dists.beta.kurtosis( -0.1, 1.0 )\n    NaN\n\n    > v = base.dists.beta.kurtosis( 2.0, NaN )\n    NaN\n    > v = base.dists.beta.kurtosis( NaN, 2.0 )\n    NaN\n\n","base.dists.beta.logcdf":"\nbase.dists.beta.logcdf( x, α, β )\n    Evaluates the natural logarithm of the cumulative distribution function\n    (CDF) for a beta distribution with first shape parameter `α` and second\n    shape parameter `β` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logCDF.\n\n    Examples\n    --------\n    > var y = base.dists.beta.logcdf( 0.5, 1.0, 1.0 )\n    ~-0.693\n    > y = base.dists.beta.logcdf( 0.5, 2.0, 4.0 )\n    ~-0.208\n    > y = base.dists.beta.logcdf( 0.2, 2.0, 2.0 )\n    ~-2.263\n    > y = base.dists.beta.logcdf( 0.8, 4.0, 4.0 )\n    ~-0.034\n    > y = base.dists.beta.logcdf( -0.5, 4.0, 2.0 )\n    -Infinity\n    > y = base.dists.beta.logcdf( 1.5, 4.0, 2.0 )\n    0.0\n\n    > y = base.dists.beta.logcdf( 2.0, -1.0, 0.5 )\n    NaN\n    > y = base.dists.beta.logcdf( 2.0, 0.5, -1.0 )\n    NaN\n\n    > y = base.dists.beta.logcdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.beta.logcdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.beta.logcdf( 0.0, 1.0, NaN )\n    NaN\n\n\nbase.dists.beta.logcdf.factory( α, β )\n    Returns a function for evaluating the natural logarithm of the cumulative\n    distribution function (CDF) of a beta distribution with first shape\n    parameter `α` and second shape parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.beta.logcdf.factory( 0.5, 0.5 );\n    > var y = mylogcdf( 0.8 )\n    ~-0.35\n    > y = mylogcdf( 0.3 )\n    ~-0.997\n\n","base.dists.beta.logcdf.factory":"\nbase.dists.beta.logcdf.factory( α, β )\n    Returns a function for evaluating the natural logarithm of the cumulative\n    distribution function (CDF) of a beta distribution with first shape\n    parameter `α` and second shape parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.beta.logcdf.factory( 0.5, 0.5 );\n    > var y = mylogcdf( 0.8 )\n    ~-0.35\n    > y = mylogcdf( 0.3 )\n    ~-0.997\n\n","base.dists.beta.logpdf":"\nbase.dists.beta.logpdf( x, α, β )\n    Evaluates the natural logarithm of the probability density function (PDF)\n    for a beta distribution with first shape parameter `α` and second shape\n    parameter `β` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Natural logarithm of the PDF.\n\n    Examples\n    --------\n    > var y = base.dists.beta.logpdf( 0.5, 1.0, 1.0 )\n    0.0\n    > y = base.dists.beta.logpdf( 0.5, 2.0, 4.0 )\n    ~0.223\n    > y = base.dists.beta.logpdf( 0.2, 2.0, 2.0 )\n    ~-0.041\n    > y = base.dists.beta.logpdf( 0.8, 4.0, 4.0 )\n    ~-0.556\n    > y = base.dists.beta.logpdf( -0.5, 4.0, 2.0 )\n    -Infinity\n    > y = base.dists.beta.logpdf( 1.5, 4.0, 2.0 )\n    -Infinity\n\n    > y = base.dists.beta.logpdf( 0.5, -1.0, 0.5 )\n    NaN\n    > y = base.dists.beta.logpdf( 0.5, 0.5, -1.0 )\n    NaN\n\n    > y = base.dists.beta.logpdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.beta.logpdf( 0.5, NaN, 1.0 )\n    NaN\n    > y = base.dists.beta.logpdf( 0.5, 1.0, NaN )\n    NaN\n\n\nbase.dists.beta.logpdf.factory( α, β )\n    Returns a function for evaluating the natural logarithm of the probability\n    density function (PDF) of a beta distribution with first shape parameter `α`\n    and second shape parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    fcn: Function\n        Function to evaluate the natural logarithm of the PDF.\n\n    Examples\n    --------\n    > var mylogpdf = base.dists.beta.logpdf.factory( 0.5, 0.5 );\n    > var y = mylogpdf( 0.8 )\n    ~-0.228\n    > y = mylogpdf( 0.3 )\n    ~-0.364\n\n","base.dists.beta.logpdf.factory":"\nbase.dists.beta.logpdf.factory( α, β )\n    Returns a function for evaluating the natural logarithm of the probability\n    density function (PDF) of a beta distribution with first shape parameter `α`\n    and second shape parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    fcn: Function\n        Function to evaluate the natural logarithm of the PDF.\n\n    Examples\n    --------\n    > var mylogpdf = base.dists.beta.logpdf.factory( 0.5, 0.5 );\n    > var y = mylogpdf( 0.8 )\n    ~-0.228\n    > y = mylogpdf( 0.3 )\n    ~-0.364\n\n","base.dists.beta.mean":"\nbase.dists.beta.mean( α, β )\n    Returns the expected value of a beta distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dists.beta.mean( 1.0, 1.0 )\n    0.5\n    > v = base.dists.beta.mean( 4.0, 12.0 )\n    0.25\n    > v = base.dists.beta.mean( 8.0, 2.0 )\n    0.8\n\n","base.dists.beta.median":"\nbase.dists.beta.median( α, β )\n    Returns the median of a beta distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var v = base.dists.beta.median( 1.0, 1.0 )\n    0.5\n    > v = base.dists.beta.median( 4.0, 12.0 )\n    ~0.239\n    > v = base.dists.beta.median( 8.0, 2.0 )\n    ~0.820\n\n    > v = base.dists.beta.median( 1.0, -0.1 )\n    NaN\n    > v = base.dists.beta.median( -0.1, 1.0 )\n    NaN\n\n    > v = base.dists.beta.median( 2.0, NaN )\n    NaN\n    > v = base.dists.beta.median( NaN, 2.0 )\n    NaN\n\n","base.dists.beta.mgf":"\nbase.dists.beta.mgf( t, α, β )\n    Evaluates the moment-generating function (MGF) for a beta distribution with\n    first shape parameter `α` and second shape parameter `β` at a value `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    t: number\n        Input value.\n\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dists.beta.mgf( 0.5, 1.0, 1.0 )\n    ~1.297\n    > y = base.dists.beta.mgf( 0.5, 2.0, 4.0 )\n    ~1.186\n    > y = base.dists.beta.mgf( 3.0, 2.0, 2.0 )\n    ~5.575\n    > y = base.dists.beta.mgf( -0.8, 4.0, 4.0 )\n    ~0.676\n\n    > y = base.dists.beta.mgf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.beta.mgf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.beta.mgf( 0.0, 1.0, NaN )\n    NaN\n\n    > y = base.dists.beta.mgf( 2.0, -1.0, 0.5 )\n    NaN\n    > y = base.dists.beta.mgf( 2.0, 0.0, 0.5 )\n    NaN\n\n    > y = base.dists.beta.mgf( 2.0, 0.5, -1.0 )\n    NaN\n    > y = base.dists.beta.mgf( 2.0, 0.5, 0.0 )\n    NaN\n\n\nbase.dists.beta.mgf.factory( α, β )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    beta distribution with first shape parameter `α` and second shape parameter\n    `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dists.beta.mgf.factory( 0.5, 0.5 );\n    > var y = myMGF( 0.8 )\n    ~1.552\n    > y = myMGF( 0.3 )\n    ~1.168\n\n","base.dists.beta.mgf.factory":"\nbase.dists.beta.mgf.factory( α, β )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    beta distribution with first shape parameter `α` and second shape parameter\n    `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dists.beta.mgf.factory( 0.5, 0.5 );\n    > var y = myMGF( 0.8 )\n    ~1.552\n    > y = myMGF( 0.3 )\n    ~1.168\n\n","base.dists.beta.mode":"\nbase.dists.beta.mode( α, β )\n    Returns the mode of a beta distribution.\n\n    If `α <= 1` or `β <= 1`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dists.beta.mode( 4.0, 12.0 )\n    ~0.214\n    > v = base.dists.beta.mode( 8.0, 2.0 )\n    ~0.875\n    > v = base.dists.beta.mode( 1.0, 1.0 )\n    NaN\n\n","base.dists.beta.pdf":"\nbase.dists.beta.pdf( x, α, β )\n    Evaluates the probability density function (PDF) for a beta distribution\n    with first shape parameter `α` and second shape parameter `β` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dists.beta.pdf( 0.5, 1.0, 1.0 )\n    1.0\n    > y = base.dists.beta.pdf( 0.5, 2.0, 4.0 )\n    1.25\n    > y = base.dists.beta.pdf( 0.2, 2.0, 2.0 )\n    ~0.96\n    > y = base.dists.beta.pdf( 0.8, 4.0, 4.0 )\n    ~0.573\n    > y = base.dists.beta.pdf( -0.5, 4.0, 2.0 )\n    0.0\n    > y = base.dists.beta.pdf( 1.5, 4.0, 2.0 )\n    0.0\n\n    > y = base.dists.beta.pdf( 0.5, -1.0, 0.5 )\n    NaN\n    > y = base.dists.beta.pdf( 0.5, 0.5, -1.0 )\n    NaN\n\n    > y = base.dists.beta.pdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.beta.pdf( 0.5, NaN, 1.0 )\n    NaN\n    > y = base.dists.beta.pdf( 0.5, 1.0, NaN )\n    NaN\n\n\nbase.dists.beta.pdf.factory( α, β )\n    Returns a function for evaluating the probability density function (PDF) of\n    a beta distribution with first shape parameter `α` and second shape\n    parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var mypdf = base.dists.beta.pdf.factory( 0.5, 0.5 );\n    > var y = mypdf( 0.8 )\n    ~0.796\n    > y = mypdf( 0.3 )\n    ~0.695\n\n","base.dists.beta.pdf.factory":"\nbase.dists.beta.pdf.factory( α, β )\n    Returns a function for evaluating the probability density function (PDF) of\n    a beta distribution with first shape parameter `α` and second shape\n    parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var mypdf = base.dists.beta.pdf.factory( 0.5, 0.5 );\n    > var y = mypdf( 0.8 )\n    ~0.796\n    > y = mypdf( 0.3 )\n    ~0.695\n\n","base.dists.beta.quantile":"\nbase.dists.beta.quantile( p, α, β )\n    Evaluates the quantile function for a beta distribution with first shape\n    parameter `α` and second shape parameter `β` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input value (probability).\n\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.beta.quantile( 0.8, 2.0, 1.0 )\n    ~0.894\n    > y = base.dists.beta.quantile( 0.5, 4.0, 2.0 )\n    ~0.686\n    > y = base.dists.beta.quantile( 1.1, 1.0, 1.0 )\n    NaN\n    > y = base.dists.beta.quantile( -0.2, 1.0, 1.0 )\n    NaN\n\n    > y = base.dists.beta.quantile( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.beta.quantile( 0.5, NaN, 1.0 )\n    NaN\n    > y = base.dists.beta.quantile( 0.5, 1.0, NaN )\n    NaN\n\n    > y = base.dists.beta.quantile( 0.5, -1.0, 1.0 )\n    NaN\n    > y = base.dists.beta.quantile( 0.5, 1.0, -1.0 )\n    NaN\n\n\nbase.dists.beta.quantile.factory( α, β )\n    Returns a function for evaluating the quantile function of a beta\n    distribution with first shape parameter `α` and second shape parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myquantile = base.dists.beta.quantile.factory( 2.0, 2.0 );\n    > y = myquantile( 0.8 )\n    ~0.713\n    > y = myquantile( 0.4 )\n    ~0.433\n\n","base.dists.beta.quantile.factory":"\nbase.dists.beta.quantile.factory( α, β )\n    Returns a function for evaluating the quantile function of a beta\n    distribution with first shape parameter `α` and second shape parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myquantile = base.dists.beta.quantile.factory( 2.0, 2.0 );\n    > y = myquantile( 0.8 )\n    ~0.713\n    > y = myquantile( 0.4 )\n    ~0.433\n\n","base.dists.beta.skewness":"\nbase.dists.beta.skewness( α, β )\n    Returns the skewness of a beta distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dists.beta.skewness( 1.0, 1.0 )\n    0.0\n    > v = base.dists.beta.skewness( 4.0, 12.0 )\n    ~0.529\n    > v = base.dists.beta.skewness( 8.0, 2.0 )\n    ~-0.829\n\n    > v = base.dists.beta.skewness( 1.0, -0.1 )\n    NaN\n    > v = base.dists.beta.skewness( -0.1, 1.0 )\n    NaN\n\n    > v = base.dists.beta.skewness( 2.0, NaN )\n    NaN\n    > v = base.dists.beta.skewness( NaN, 2.0 )\n    NaN\n\n","base.dists.beta.stdev":"\nbase.dists.beta.stdev( α, β )\n    Returns the standard deviation of a beta distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dists.beta.stdev( 1.0, 1.0 )\n    ~0.289\n    > v = base.dists.beta.stdev( 4.0, 12.0 )\n    ~0.105\n    > v = base.dists.beta.stdev( 8.0, 2.0 )\n    ~0.121\n\n    > v = base.dists.beta.stdev( 1.0, -0.1 )\n    NaN\n    > v = base.dists.beta.stdev( -0.1, 1.0 )\n    NaN\n\n    > v = base.dists.beta.stdev( 2.0, NaN )\n    NaN\n    > v = base.dists.beta.stdev( NaN, 2.0 )\n    NaN\n\n","base.dists.beta.variance":"\nbase.dists.beta.variance( α, β )\n    Returns the variance of a beta distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dists.beta.variance( 1.0, 1.0 )\n    ~0.083\n    > v = base.dists.beta.variance( 4.0, 12.0 )\n    ~0.011\n    > v = base.dists.beta.variance( 8.0, 2.0 )\n    ~0.015\n\n    > v = base.dists.beta.variance( 1.0, -0.1 )\n    NaN\n    > v = base.dists.beta.variance( -0.1, 1.0 )\n    NaN\n\n    > v = base.dists.beta.variance( 2.0, NaN )\n    NaN\n    > v = base.dists.beta.variance( NaN, 2.0 )\n    NaN\n\n","base.dists.betaprime.BetaPrime":"\nbase.dists.betaprime.BetaPrime( [α, β] )\n    Returns a beta prime distribution object.\n\n    Parameters\n    ----------\n    α: number (optional)\n        First shape parameter. Must be greater than `0`. Default: `1.0`.\n\n    β: number (optional)\n        Second shape parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    betaprime: Object\n        Distribution instance.\n\n    betaprime.alpha: number\n        First shape parameter. If set, the value must be greater than `0`.\n\n    betaprime.beta: number\n        Second shape parameter. If set, the value must be greater than `0`.\n\n    betaprime.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    betaprime.mean: number\n        Read-only property which returns the expected value.\n\n    betaprime.mode: number\n        Read-only property which returns the mode.\n\n    betaprime.skewness: number\n        Read-only property which returns the skewness.\n\n    betaprime.stdev: number\n        Read-only property which returns the standard deviation.\n\n    betaprime.variance: number\n        Read-only property which returns the variance.\n\n    betaprime.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    betaprime.logcdf: Function\n        Evaluates the natural logarithm of the cumulative distribution function\n        (CDF).\n\n    betaprime.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    betaprime.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    betaprime.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var betaprime = base.dists.betaprime.BetaPrime( 6.0, 5.0 );\n    > betaprime.alpha\n    6.0\n    > betaprime.beta\n    5.0\n    > betaprime.kurtosis\n    44.4\n    > betaprime.mean\n    1.5\n    > betaprime.mode\n    ~0.833\n    > betaprime.skewness\n    ~3.578\n    > betaprime.stdev\n    ~1.118\n    > betaprime.variance\n    1.25\n    > betaprime.cdf( 0.8 )\n    ~0.25\n    > betaprime.logcdf( 0.8 )\n    ~-1.387\n    > betaprime.logpdf( 1.0 )\n    ~-0.486\n    > betaprime.pdf( 1.0 )\n    ~0.615\n    > betaprime.quantile( 0.8 )\n    ~2.06\n\n","base.dists.betaprime.cdf":"\nbase.dists.betaprime.cdf( x, α, β )\n    Evaluates the cumulative distribution function (CDF) for a beta prime\n    distribution with first shape parameter `α` and second shape parameter `β`\n    at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.betaprime.cdf( 0.5, 1.0, 1.0 )\n    ~0.333\n    > y = base.dists.betaprime.cdf( 0.5, 2.0, 4.0 )\n    ~0.539\n    > y = base.dists.betaprime.cdf( 0.2, 2.0, 2.0 )\n    ~0.074\n    > y = base.dists.betaprime.cdf( 0.8, 4.0, 4.0 )\n    ~0.38\n    > y = base.dists.betaprime.cdf( -0.5, 4.0, 2.0 )\n    0.0\n\n    > y = base.dists.betaprime.cdf( 2.0, -1.0, 0.5 )\n    NaN\n    > y = base.dists.betaprime.cdf( 2.0, 0.5, -1.0 )\n    NaN\n\n    > y = base.dists.betaprime.cdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.betaprime.cdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.betaprime.cdf( 0.0, 1.0, NaN )\n    NaN\n\n\nbase.dists.betaprime.cdf.factory( α, β )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a beta prime distribution with first shape parameter `α` and second shape\n    parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.betaprime.cdf.factory( 0.5, 0.5 );\n    > var y = mycdf( 0.8 )\n    ~0.465\n    > y = mycdf( 0.3 )\n    ~0.319\n\n","base.dists.betaprime.cdf.factory":"\nbase.dists.betaprime.cdf.factory( α, β )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a beta prime distribution with first shape parameter `α` and second shape\n    parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.betaprime.cdf.factory( 0.5, 0.5 );\n    > var y = mycdf( 0.8 )\n    ~0.465\n    > y = mycdf( 0.3 )\n    ~0.319\n\n","base.dists.betaprime.kurtosis":"\nbase.dists.betaprime.kurtosis( α, β )\n    Returns the excess kurtosis of a beta prime distribution.\n\n    If `α <= 0` or `β <= 4`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Kurtosis.\n\n    Examples\n    --------\n    > var v = base.dists.betaprime.kurtosis( 2.0, 6.0 )\n    ~26.143\n    > v = base.dists.betaprime.kurtosis( 4.0, 12.0 )\n    ~5.764\n    > v = base.dists.betaprime.kurtosis( 8.0, 6.0 )\n    ~19.962\n\n    > v = base.dists.betaprime.kurtosis( 1.0, 2.8 )\n    NaN\n    > v = base.dists.betaprime.kurtosis( 1.0, -0.1 )\n    NaN\n    > v = base.dists.betaprime.kurtosis( -0.1, 5.0 )\n    NaN\n\n    > v = base.dists.betaprime.kurtosis( 2.0, NaN )\n    NaN\n    > v = base.dists.betaprime.kurtosis( NaN, 6.0 )\n    NaN\n\n","base.dists.betaprime.logcdf":"\nbase.dists.betaprime.logcdf( x, α, β )\n    Evaluates the natural logarithm of the cumulative distribution function\n    (CDF) for a beta prime distribution with first shape parameter `α` and\n    second shape parameter `β` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logCDF.\n\n    Examples\n    --------\n    > var y = base.dists.betaprime.logcdf( 0.5, 1.0, 1.0 )\n    ~-1.099\n    > y = base.dists.betaprime.logcdf( 0.5, 2.0, 4.0 )\n    ~-0.618\n    > y = base.dists.betaprime.logcdf( 0.2, 2.0, 2.0 )\n    ~-2.603\n    > y = base.dists.betaprime.logcdf( 0.8, 4.0, 4.0 )\n    ~-0.968\n    > y = base.dists.betaprime.logcdf( -0.5, 4.0, 2.0 )\n    -Infinity\n\n    > y = base.dists.betaprime.logcdf( 2.0, -1.0, 0.5 )\n    NaN\n    > y = base.dists.betaprime.logcdf( 2.0, 0.5, -1.0 )\n    NaN\n\n    > y = base.dists.betaprime.logcdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.betaprime.logcdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.betaprime.logcdf( 0.0, 1.0, NaN )\n    NaN\n\n\nbase.dists.betaprime.logcdf.factory( α, β )\n    Returns a function for evaluating the natural logarithm of the cumulative\n    distribution function (CDF) of a beta prime distribution with first shape\n    parameter `α` and second shape parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.betaprime.logcdf.factory( 0.5, 0.5 );\n    > var y = mylogcdf( 0.8 )\n    ~-0.767\n    > y = mylogcdf( 0.3 )\n    ~-1.143\n\n","base.dists.betaprime.logcdf.factory":"\nbase.dists.betaprime.logcdf.factory( α, β )\n    Returns a function for evaluating the natural logarithm of the cumulative\n    distribution function (CDF) of a beta prime distribution with first shape\n    parameter `α` and second shape parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.betaprime.logcdf.factory( 0.5, 0.5 );\n    > var y = mylogcdf( 0.8 )\n    ~-0.767\n    > y = mylogcdf( 0.3 )\n    ~-1.143\n\n","base.dists.betaprime.logpdf":"\nbase.dists.betaprime.logpdf( x, α, β )\n    Evaluates the natural logarithm of the probability density function (PDF)\n    for a beta prime distribution with first shape parameter `α` and second\n    shape parameter `β` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Natural logarithm of the PDF.\n\n    Examples\n    --------\n    > var y = base.dists.betaprime.logpdf( 0.5, 1.0, 1.0 )\n    ~-0.811\n    > y = base.dists.betaprime.logpdf( 0.5, 2.0, 4.0 )\n    ~-0.13\n    > y = base.dists.betaprime.logpdf( 0.2, 2.0, 2.0 )\n    ~-0.547\n    > y = base.dists.betaprime.logpdf( 0.8, 4.0, 4.0 )\n    ~-0.43\n    > y = base.dists.betaprime.logpdf( -0.5, 4.0, 2.0 )\n    -Infinity\n\n    > y = base.dists.betaprime.logpdf( 0.5, -1.0, 0.5 )\n    NaN\n    > y = base.dists.betaprime.logpdf( 0.5, 0.5, -1.0 )\n    NaN\n\n    > y = base.dists.betaprime.logpdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.betaprime.logpdf( 0.5, NaN, 1.0 )\n    NaN\n    > y = base.dists.betaprime.logpdf( 0.5, 1.0, NaN )\n    NaN\n\n\nbase.dists.betaprime.logpdf.factory( α, β )\n    Returns a function for evaluating the natural logarithm of the probability\n    density function (PDF) of a beta prime distribution with first shape\n    parameter `α` and second shape parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    fcn: Function\n        Function to evaluate the natural logarithm of the PDF.\n\n    Examples\n    --------\n    > var mylogpdf = base.dists.betaprime.logpdf.factory( 0.5, 0.5 );\n    > var y = mylogpdf( 0.8 )\n    ~-1.62\n    > y = mylogpdf( 0.3 )\n    ~-0.805\n\n","base.dists.betaprime.logpdf.factory":"\nbase.dists.betaprime.logpdf.factory( α, β )\n    Returns a function for evaluating the natural logarithm of the probability\n    density function (PDF) of a beta prime distribution with first shape\n    parameter `α` and second shape parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    fcn: Function\n        Function to evaluate the natural logarithm of the PDF.\n\n    Examples\n    --------\n    > var mylogpdf = base.dists.betaprime.logpdf.factory( 0.5, 0.5 );\n    > var y = mylogpdf( 0.8 )\n    ~-1.62\n    > y = mylogpdf( 0.3 )\n    ~-0.805\n\n","base.dists.betaprime.mean":"\nbase.dists.betaprime.mean( α, β )\n    Returns the expected value of a beta prime distribution.\n\n    If `α <= 0` or `β <= 1`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dists.betaprime.mean( 1.0, 2.0 )\n    1.0\n    > v = base.dists.betaprime.mean( 4.0, 12.0 )\n    ~0.364\n    > v = base.dists.betaprime.mean( 8.0, 2.0 )\n    8.0\n\n","base.dists.betaprime.mode":"\nbase.dists.betaprime.mode( α, β )\n    Returns the mode of a beta prime distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dists.betaprime.mode( 1.0, 2.0 )\n    0.0\n    > v = base.dists.betaprime.mode( 4.0, 12.0 )\n    ~0.231\n    > v = base.dists.betaprime.mode( 8.0, 2.0 )\n    ~2.333\n\n","base.dists.betaprime.pdf":"\nbase.dists.betaprime.pdf( x, α, β )\n    Evaluates the probability density function (PDF) for a beta prime\n    distribution  with first shape parameter `α` and second shape parameter `β`\n    at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dists.betaprime.pdf( 0.5, 1.0, 1.0 )\n    ~0.444\n    > y = base.dists.betaprime.pdf( 0.5, 2.0, 4.0 )\n    ~0.878\n    > y = base.dists.betaprime.pdf( 0.2, 2.0, 2.0 )\n    ~0.579\n    > y = base.dists.betaprime.pdf( 0.8, 4.0, 4.0 )\n    ~0.65\n    > y = base.dists.betaprime.pdf( -0.5, 4.0, 2.0 )\n    0.0\n\n    > y = base.dists.betaprime.pdf( 0.5, -1.0, 0.5 )\n    NaN\n    > y = base.dists.betaprime.pdf( 0.5, 0.5, -1.0 )\n    NaN\n\n    > y = base.dists.betaprime.pdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.betaprime.pdf( 0.5, NaN, 1.0 )\n    NaN\n    > y = base.dists.betaprime.pdf( 0.5, 1.0, NaN )\n    NaN\n\n\nbase.dists.betaprime.pdf.factory( α, β )\n    Returns a function for evaluating the probability density function (PDF) of\n    a beta prime distribution with first shape parameter `α` and second shape\n    parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var mypdf = base.dists.betaprime.pdf.factory( 0.5, 0.5 );\n    > var y = mypdf( 0.8 )\n    ~0.198\n    > y = mypdf( 0.3 )\n    ~0.447\n\n","base.dists.betaprime.pdf.factory":"\nbase.dists.betaprime.pdf.factory( α, β )\n    Returns a function for evaluating the probability density function (PDF) of\n    a beta prime distribution with first shape parameter `α` and second shape\n    parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var mypdf = base.dists.betaprime.pdf.factory( 0.5, 0.5 );\n    > var y = mypdf( 0.8 )\n    ~0.198\n    > y = mypdf( 0.3 )\n    ~0.447\n\n","base.dists.betaprime.quantile":"\nbase.dists.betaprime.quantile( p, α, β )\n    Evaluates the quantile function for a beta prime distribution with first\n    shape parameter `α` and second shape parameter `β` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input value (probability).\n\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.betaprime.quantile( 0.8, 2.0, 1.0 )\n    ~8.472\n    > y = base.dists.betaprime.quantile( 0.5, 4.0, 2.0 )\n    ~2.187\n    > y = base.dists.betaprime.quantile( 1.1, 1.0, 1.0 )\n    NaN\n    > y = base.dists.betaprime.quantile( -0.2, 1.0, 1.0 )\n    NaN\n\n    > y = base.dists.betaprime.quantile( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.betaprime.quantile( 0.5, NaN, 1.0 )\n    NaN\n    > y = base.dists.betaprime.quantile( 0.5, 1.0, NaN )\n    NaN\n\n    > y = base.dists.betaprime.quantile( 0.5, -1.0, 1.0 )\n    NaN\n    > y = base.dists.betaprime.quantile( 0.5, 1.0, -1.0 )\n    NaN\n\n\nbase.dists.betaprime.quantile.factory( α, β )\n    Returns a function for evaluating the quantile function of a beta prime\n    distribution with first shape parameter `α` and second shape parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.betaprime.quantile.factory( 2.0, 2.0 );\n    > y = myQuantile( 0.8 )\n    ~2.483\n    > y = myQuantile( 0.4 )\n    ~0.763\n\n","base.dists.betaprime.quantile.factory":"\nbase.dists.betaprime.quantile.factory( α, β )\n    Returns a function for evaluating the quantile function of a beta prime\n    distribution with first shape parameter `α` and second shape parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.betaprime.quantile.factory( 2.0, 2.0 );\n    > y = myQuantile( 0.8 )\n    ~2.483\n    > y = myQuantile( 0.4 )\n    ~0.763\n\n","base.dists.betaprime.skewness":"\nbase.dists.betaprime.skewness( α, β )\n    Returns the skewness of a beta prime distribution.\n\n    If `α <= 0` or `β <= 3`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dists.betaprime.skewness( 2.0, 4.0 )\n    ~6.261\n    > v = base.dists.betaprime.skewness( 4.0, 12.0 )\n    ~1.724\n    > v = base.dists.betaprime.skewness( 8.0, 4.0 )\n    ~5.729\n\n    > v = base.dists.betaprime.skewness( 1.0, 2.8 )\n    NaN\n    > v = base.dists.betaprime.skewness( 1.0, -0.1 )\n    NaN\n    > v = base.dists.betaprime.skewness( -0.1, 4.0 )\n    NaN\n\n    > v = base.dists.betaprime.skewness( 2.0, NaN )\n    NaN\n    > v = base.dists.betaprime.skewness( NaN, 4.0 )\n    NaN\n\n","base.dists.betaprime.stdev":"\nbase.dists.betaprime.stdev( α, β )\n    Returns the standard deviation of a beta prime distribution.\n\n    If `α <= 0` or `β <= 2`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dists.betaprime.stdev( 1.0, 2.5 )\n    ~1.491\n    > v = base.dists.betaprime.stdev( 4.0, 12.0 )\n    ~0.223\n    > v = base.dists.betaprime.stdev( 8.0, 2.5 )\n    ~8.219\n\n    > v = base.dists.betaprime.stdev( 8.0, 1.0 )\n    NaN\n    > v = base.dists.betaprime.stdev( 1.0, -0.1 )\n    NaN\n    > v = base.dists.betaprime.stdev( -0.1, 3.0 )\n    NaN\n\n    > v = base.dists.betaprime.stdev( 2.0, NaN )\n    NaN\n    > v = base.dists.betaprime.stdev( NaN, 3.0 )\n    NaN\n\n","base.dists.betaprime.variance":"\nbase.dists.betaprime.variance( α, β )\n    Returns the variance of a beta prime distribution.\n\n    If `α <= 0` or `β <= 2`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dists.betaprime.variance( 1.0, 2.5 )\n    ~2.222\n    > v = base.dists.betaprime.variance( 4.0, 12.0 )\n    ~0.05\n    > v = base.dists.betaprime.variance( 8.0, 2.5 )\n    ~67.556\n\n    > v = base.dists.betaprime.variance( 8.0, 1.0 )\n    NaN\n    > v = base.dists.betaprime.variance( 1.0, -0.1 )\n    NaN\n    > v = base.dists.betaprime.variance( -0.1, 3.0 )\n    NaN\n\n    > v = base.dists.betaprime.variance( 2.0, NaN )\n    NaN\n    > v = base.dists.betaprime.variance( NaN, 3.0 )\n    NaN\n\n","base.dists.binomial.Binomial":"\nbase.dists.binomial.Binomial( [n, p] )\n    Returns a binomial distribution object.\n\n    Parameters\n    ----------\n    n: integer (optional)\n        Number of trials. Must be a positive integer. Default: `1`.\n\n    p: number (optional)\n        Success probability. Must be a number between `0` and `1`. Default:\n        `0.5`.\n\n    Returns\n    -------\n    binomial: Object\n        Distribution instance.\n\n    binomial.n: number\n        Number of trials. If set, the value must be a positive integer.\n\n    binomial.p: number\n        Success probability. If set, the value must be a number between `0` and\n        `1`.\n\n    binomial.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    binomial.mean: number\n        Read-only property which returns the expected value.\n\n    binomial.median: number\n        Read-only property which returns the median.\n\n    binomial.mode: number\n        Read-only property which returns the mode.\n\n    binomial.skewness: number\n        Read-only property which returns the skewness.\n\n    binomial.stdev: number\n        Read-only property which returns the standard deviation.\n\n    binomial.variance: number\n        Read-only property which returns the variance.\n\n    binomial.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    binomial.logpmf: Function\n        Evaluates the natural logarithm of the probability mass function (PMF).\n\n    binomial.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    binomial.pmf: Function\n        Evaluates the probability mass function (PMF).\n\n    binomial.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var binomial = base.dists.binomial.Binomial( 8, 0.5 );\n    > binomial.n\n    8.0\n    > binomial.p\n    0.5\n    > binomial.kurtosis\n    -0.25\n    > binomial.mean\n    4.0\n    > binomial.median\n    4.0\n    > binomial.mode\n    4.0\n    > binomial.skewness\n    0.0\n    > binomial.stdev\n    ~1.414\n    > binomial.variance\n    2.0\n    > binomial.cdf( 2.9 )\n    ~0.145\n    > binomial.logpmf( 3.0 )\n    ~-1.52\n    > binomial.mgf( 0.2 )\n    ~2.316\n    > binomial.pmf( 3.0 )\n    ~0.219\n    > binomial.quantile( 0.8 )\n    5.0\n\n","base.dists.binomial.cdf":"\nbase.dists.binomial.cdf( x, n, p )\n    Evaluates the cumulative distribution function (CDF) for a binomial\n    distribution with number of trials `n` and success probability `p` at a\n    value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a number of trials `n` which is not a nonnegative integer, the\n    function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.binomial.cdf( 3.0, 20, 0.2 )\n    ~0.411\n    > y = base.dists.binomial.cdf( 21.0, 20, 0.2 )\n    1.0\n    > y = base.dists.binomial.cdf( 5.0, 10, 0.4 )\n    ~0.834\n    > y = base.dists.binomial.cdf( 0.0, 10, 0.4 )\n    ~0.006\n    > y = base.dists.binomial.cdf( NaN, 20, 0.5 )\n    NaN\n    > y = base.dists.binomial.cdf( 0.0, NaN, 0.5 )\n    NaN\n    > y = base.dists.binomial.cdf( 0.0, 20, NaN )\n    NaN\n    > y = base.dists.binomial.cdf( 2.0, 1.5, 0.5 )\n    NaN\n    > y = base.dists.binomial.cdf( 2.0, -2.0, 0.5 )\n    NaN\n    > y = base.dists.binomial.cdf( 2.0, 20, -1.0 )\n    NaN\n    > y = base.dists.binomial.cdf( 2.0, 20, 1.5 )\n    NaN\n\n\nbase.dists.binomial.cdf.factory( n, p )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a binomial distribution with number of trials `n` and success probability\n    `p`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.binomial.cdf.factory( 10, 0.5 );\n    > var y = mycdf( 3.0 )\n    ~0.172\n    > y = mycdf( 1.0 )\n    ~0.011\n\n","base.dists.binomial.cdf.factory":"\nbase.dists.binomial.cdf.factory( n, p )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a binomial distribution with number of trials `n` and success probability\n    `p`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.binomial.cdf.factory( 10, 0.5 );\n    > var y = mycdf( 3.0 )\n    ~0.172\n    > y = mycdf( 1.0 )\n    ~0.011\n\n","base.dists.binomial.entropy":"\nbase.dists.binomial.entropy( n, p )\n    Returns the entropy of a binomial distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a number of trials `n` which is not a nonnegative integer, the\n    function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dists.binomial.entropy( 100, 0.1 )\n    ~2.511\n    > v = base.dists.binomial.entropy( 20, 0.5 )\n    ~2.223\n    > v = base.dists.binomial.entropy( 10.3, 0.5 )\n    NaN\n    > v = base.dists.binomial.entropy( 20, 1.1 )\n    NaN\n    > v = base.dists.binomial.entropy( 20, NaN )\n    NaN\n\n","base.dists.binomial.kurtosis":"\nbase.dists.binomial.kurtosis( n, p )\n    Returns the excess kurtosis of a binomial distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a number of trials `n` which is not a nonnegative integer, the\n    function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dists.binomial.kurtosis( 100, 0.1 )\n    ~0.051\n    > v = base.dists.binomial.kurtosis( 20, 0.5 )\n    ~-0.1\n    > v = base.dists.binomial.kurtosis( 10.3, 0.5 )\n    NaN\n    > v = base.dists.binomial.kurtosis( 20, 1.1 )\n    NaN\n    > v = base.dists.binomial.kurtosis( 20, NaN )\n    NaN\n\n","base.dists.binomial.logpmf":"\nbase.dists.binomial.logpmf( x, n, p )\n    Evaluates the natural logarithm of the probability mass function (PMF) for a\n    binomial distribution with number of trials `n` and success probability `p`\n    at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a number of trials `n` which is not a nonnegative integer, the\n    function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPMF.\n\n    Examples\n    --------\n    > var y = base.dists.binomial.logpmf( 3.0, 20, 0.2 )\n    ~-1.583\n    > y = base.dists.binomial.logpmf( 21.0, 20, 0.2 )\n    -Infinity\n    > y = base.dists.binomial.logpmf( 5.0, 10, 0.4 )\n    ~-1.606\n    > y = base.dists.binomial.logpmf( 0.0, 10, 0.4 )\n    ~-5.108\n    > y = base.dists.binomial.logpmf( NaN, 20, 0.5 )\n    NaN\n    > y = base.dists.binomial.logpmf( 0.0, NaN, 0.5 )\n    NaN\n    > y = base.dists.binomial.logpmf( 0.0, 20, NaN )\n    NaN\n    > y = base.dists.binomial.logpmf( 2.0, 1.5, 0.5 )\n    NaN\n    > y = base.dists.binomial.logpmf( 2.0, -2.0, 0.5 )\n    NaN\n    > y = base.dists.binomial.logpmf( 2.0, 20, -1.0 )\n    NaN\n    > y = base.dists.binomial.logpmf( 2.0, 20, 1.5 )\n    NaN\n\n\nbase.dists.binomial.logpmf.factory( n, p )\n    Returns a function for evaluating the natural logarithm of the probability\n    mass function (PMF) of a binomial distribution with number of trials `n` and\n    success probability `p`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    logpmf: Function\n        Logarithm of probability mass function (PMF).\n\n    Examples\n    --------\n    > var mylogpmf = base.dists.binomial.logpmf.factory( 10, 0.5 );\n    > var y = mylogpmf( 3.0 )\n    ~-2.144\n    > y = mylogpmf( 5.0 )\n    ~-1.402\n\n","base.dists.binomial.logpmf.factory":"\nbase.dists.binomial.logpmf.factory( n, p )\n    Returns a function for evaluating the natural logarithm of the probability\n    mass function (PMF) of a binomial distribution with number of trials `n` and\n    success probability `p`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    logpmf: Function\n        Logarithm of probability mass function (PMF).\n\n    Examples\n    --------\n    > var mylogpmf = base.dists.binomial.logpmf.factory( 10, 0.5 );\n    > var y = mylogpmf( 3.0 )\n    ~-2.144\n    > y = mylogpmf( 5.0 )\n    ~-1.402\n\n","base.dists.binomial.mean":"\nbase.dists.binomial.mean( n, p )\n    Returns the expected value of a binomial distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a number of trials `n` which is not a nonnegative integer, the\n    function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dists.binomial.mean( 100, 0.1 )\n    10.0\n    > v = base.dists.binomial.mean( 20, 0.5 )\n    10.0\n    > v = base.dists.binomial.mean( 10.3, 0.5 )\n    NaN\n    > v = base.dists.binomial.mean( 20, 1.1 )\n    NaN\n    > v = base.dists.binomial.mean( 20, NaN )\n    NaN\n\n","base.dists.binomial.median":"\nbase.dists.binomial.median( n, p )\n    Returns the median of a binomial distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a number of trials `n` which is not a nonnegative integer, the\n    function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var v = base.dists.binomial.median( 100, 0.1 )\n    10\n    > v = base.dists.binomial.median( 20, 0.5 )\n    10\n    > v = base.dists.binomial.median( 10.3, 0.5 )\n    NaN\n    > v = base.dists.binomial.median( 20, 1.1 )\n    NaN\n    > v = base.dists.binomial.median( 20, NaN )\n    NaN\n\n","base.dists.binomial.mgf":"\nbase.dists.binomial.mgf( t, n, p )\n    Evaluates the moment-generating function (MGF) for a binomial distribution\n    with number of trials `n` and success probability `p` at a value `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a number of trials `n` which is not a nonnegative integer, the\n    function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    t: number\n        Input value.\n\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dists.binomial.mgf( 0.5, 20, 0.2 )\n    ~11.471\n    > y = base.dists.binomial.mgf( 5.0, 20, 0.2 )\n    ~4.798e+29\n    > y = base.dists.binomial.mgf( 0.9, 10, 0.4 )\n    ~99.338\n    > y = base.dists.binomial.mgf( 0.0, 10, 0.4 )\n    1.0\n\n    > y = base.dists.binomial.mgf( NaN, 20, 0.5 )\n    NaN\n    > y = base.dists.binomial.mgf( 0.0, NaN, 0.5 )\n    NaN\n    > y = base.dists.binomial.mgf( 0.0, 20, NaN )\n    NaN\n\n    > y = base.dists.binomial.mgf( 2.0, 1.5, 0.5 )\n    NaN\n    > y = base.dists.binomial.mgf( 2.0, -2.0, 0.5 )\n    NaN\n    > y = base.dists.binomial.mgf( 2.0, 20, -1.0 )\n    NaN\n    > y = base.dists.binomial.mgf( 2.0, 20, 1.5 )\n    NaN\n\n\nbase.dists.binomial.mgf.factory( n, p )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    binomial distribution with number of trials `n` and success probability `p`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dists.binomial.mgf.factory( 10, 0.5 );\n    > var y = myMGF( 0.3 )\n    ~5.013\n\n","base.dists.binomial.mgf.factory":"\nbase.dists.binomial.mgf.factory( n, p )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    binomial distribution with number of trials `n` and success probability `p`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dists.binomial.mgf.factory( 10, 0.5 );\n    > var y = myMGF( 0.3 )\n    ~5.013\n\n","base.dists.binomial.mode":"\nbase.dists.binomial.mode( n, p )\n    Returns the mode of a binomial distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a number of trials `n` which is not a nonnegative integer, the\n    function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dists.binomial.mode( 100, 0.1 )\n    10\n    > v = base.dists.binomial.mode( 20, 0.5 )\n    10\n    > v = base.dists.binomial.mode( 10.3, 0.5 )\n    NaN\n    > v = base.dists.binomial.mode( 20, 1.1 )\n    NaN\n    > v = base.dists.binomial.mode( 20, NaN )\n    NaN\n\n","base.dists.binomial.pmf":"\nbase.dists.binomial.pmf( x, n, p )\n    Evaluates the probability mass function (PMF) for a binomial distribution\n    with number of trials `n` and success probability `p` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a number of trials `n` which is not a nonnegative integer, the\n    function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated PMF.\n\n    Examples\n    --------\n    > var y = base.dists.binomial.pmf( 3.0, 20, 0.2 )\n    ~0.205\n    > y = base.dists.binomial.pmf( 21.0, 20, 0.2 )\n    0.0\n    > y = base.dists.binomial.pmf( 5.0, 10, 0.4 )\n    ~0.201\n    > y = base.dists.binomial.pmf( 0.0, 10, 0.4 )\n    ~0.006\n    > y = base.dists.binomial.pmf( NaN, 20, 0.5 )\n    NaN\n    > y = base.dists.binomial.pmf( 0.0, NaN, 0.5 )\n    NaN\n    > y = base.dists.binomial.pmf( 0.0, 20, NaN )\n    NaN\n    > y = base.dists.binomial.pmf( 2.0, 1.5, 0.5 )\n    NaN\n    > y = base.dists.binomial.pmf( 2.0, -2.0, 0.5 )\n    NaN\n    > y = base.dists.binomial.pmf( 2.0, 20, -1.0 )\n    NaN\n    > y = base.dists.binomial.pmf( 2.0, 20, 1.5 )\n    NaN\n\n\nbase.dists.binomial.pmf.factory( n, p )\n    Returns a function for evaluating the probability mass function (PMF) of a\n    binomial distribution with number of trials `n` and success probability `p`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    pmf: Function\n        Probability mass function (PMF).\n\n    Examples\n    --------\n    > var mypmf = base.dists.binomial.pmf.factory( 10, 0.5 );\n    > var y = mypmf( 3.0 )\n    ~0.117\n    > y = mypmf( 5.0 )\n    ~0.246\n\n","base.dists.binomial.pmf.factory":"\nbase.dists.binomial.pmf.factory( n, p )\n    Returns a function for evaluating the probability mass function (PMF) of a\n    binomial distribution with number of trials `n` and success probability `p`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    pmf: Function\n        Probability mass function (PMF).\n\n    Examples\n    --------\n    > var mypmf = base.dists.binomial.pmf.factory( 10, 0.5 );\n    > var y = mypmf( 3.0 )\n    ~0.117\n    > y = mypmf( 5.0 )\n    ~0.246\n\n","base.dists.binomial.quantile":"\nbase.dists.binomial.quantile( r, n, p )\n    Evaluates the quantile function for a binomial distribution with number of\n    trials `n` and success probability `p` at a probability `r`.\n\n    If `r < 0` or `r > 1`, the function returns `NaN`.\n\n    If provided a number of trials `n` which is not a nonnegative integer, the\n    function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    r: number\n        Input probability.\n\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.binomial.quantile( 0.4, 20, 0.2 )\n    3\n    > y = base.dists.binomial.quantile( 0.8, 20, 0.2 )\n    5\n    > y = base.dists.binomial.quantile( 0.5, 10, 0.4 )\n    4\n    > y = base.dists.binomial.quantile( 0.0, 10, 0.4 )\n    0\n    > y = base.dists.binomial.quantile( 1.0, 10, 0.4 )\n    10\n\n    > y = base.dists.binomial.quantile( NaN, 20, 0.5 )\n    NaN\n    > y = base.dists.binomial.quantile( 0.2, NaN, 0.5 )\n    NaN\n    > y = base.dists.binomial.quantile( 0.2, 20, NaN )\n    NaN\n\n    > y = base.dists.binomial.quantile( 0.5, 1.5, 0.5 )\n    NaN\n    > y = base.dists.binomial.quantile( 0.5, -2.0, 0.5 )\n    NaN\n\n    > y = base.dists.binomial.quantile( 0.5, 20, -1.0 )\n    NaN\n    > y = base.dists.binomial.quantile( 0.5, 20, 1.5 )\n    NaN\n\n\nbase.dists.binomial.quantile.factory( n, p )\n    Returns a function for evaluating the quantile function of a binomial\n    distribution with number of trials `n` and success probability `p`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myquantile = base.dists.binomial.quantile.factory( 10, 0.5 );\n    > var y = myquantile( 0.1 )\n    3\n    > y = myquantile( 0.9 )\n    7\n\n","base.dists.binomial.quantile.factory":"\nbase.dists.binomial.quantile.factory( n, p )\n    Returns a function for evaluating the quantile function of a binomial\n    distribution with number of trials `n` and success probability `p`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myquantile = base.dists.binomial.quantile.factory( 10, 0.5 );\n    > var y = myquantile( 0.1 )\n    3\n    > y = myquantile( 0.9 )\n    7\n\n","base.dists.binomial.skewness":"\nbase.dists.binomial.skewness( n, p )\n    Returns the skewness of a binomial distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a number of trials `n` which is not a nonnegative integer, the\n    function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dists.binomial.skewness( 100, 0.1 )\n    ~0.267\n    > v = base.dists.binomial.skewness( 20, 0.5 )\n    0.0\n    > v = base.dists.binomial.skewness( 10.3, 0.5 )\n    NaN\n    > v = base.dists.binomial.skewness( 20, 1.1 )\n    NaN\n    > v = base.dists.binomial.skewness( 20, NaN )\n    NaN\n\n","base.dists.binomial.stdev":"\nbase.dists.binomial.stdev( n, p )\n    Returns the standard deviation of a binomial distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a number of trials `n` which is not a nonnegative integer, the\n    function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dists.binomial.stdev( 100, 0.1 )\n    3.0\n    > v = base.dists.binomial.stdev( 20, 0.5 )\n    ~2.236\n    > v = base.dists.binomial.stdev( 10.3, 0.5 )\n    NaN\n    > v = base.dists.binomial.stdev( 20, 1.1 )\n    NaN\n    > v = base.dists.binomial.stdev( 20, NaN )\n    NaN\n\n","base.dists.binomial.variance":"\nbase.dists.binomial.variance( n, p )\n    Returns the variance of a binomial distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a number of trials `n` which is not a nonnegative integer, the\n    function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dists.binomial.variance( 100, 0.1 )\n    9\n    > v = base.dists.binomial.variance( 20, 0.5 )\n    5\n    > v = base.dists.binomial.variance( 10.3, 0.5 )\n    NaN\n    > v = base.dists.binomial.variance( 20, 1.1 )\n    NaN\n    > v = base.dists.binomial.variance( 20, NaN )\n    NaN\n\n","base.dists.cauchy.Cauchy":"\nbase.dists.cauchy.Cauchy( [x0, Ɣ] )\n    Returns a Cauchy distribution object.\n\n    Parameters\n    ----------\n    x0: number (optional)\n        Location parameter. Default: `0.0`.\n\n    Ɣ: number (optional)\n        Scale parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    cauchy: Object\n        Distribution instance.\n\n    cauchy.x0: number\n        Location parameter.\n\n    cauchy.gamma: number\n        Scale parameter. If set, the value must be greater than `0`.\n\n    cauchy.entropy: number\n        Read-only property which returns the differential entropy.\n\n    cauchy.median: number\n        Read-only property which returns the median.\n\n    cauchy.mode: number\n        Read-only property which returns the mode.\n\n    cauchy.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    cauchy.logcdf: Function\n        Evaluates the natural logarithm of the cumulative distribution function\n        (CDF).\n\n    cauchy.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    cauchy.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    cauchy.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var cauchy = base.dists.cauchy.Cauchy( 0.0, 1.0 );\n    > cauchy.x0\n    0.0\n    > cauchy.gamma\n    1.0\n    > cauchy.entropy\n    ~2.531\n    > cauchy.median\n    0.0\n    > cauchy.mode\n    0.0\n    > cauchy.cdf( 0.8 )\n    ~0.715\n    > cauchy.logcdf( 1.0 )\n    ~-0.288\n    > cauchy.logpdf( 1.0 )\n    ~-1.838\n    > cauchy.pdf( 1.0 )\n    ~0.159\n    > cauchy.quantile( 0.8 )\n    ~1.376\n\n","base.dists.cauchy.cdf":"\nbase.dists.cauchy.cdf( x, x0, Ɣ )\n    Evaluates the cumulative distribution function (CDF) for a Cauchy\n    distribution with location parameter `x0` and scale parameter `Ɣ` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `Ɣ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.cauchy.cdf( 4.0, 0.0, 2.0 )\n    ~0.852\n    > y = base.dists.cauchy.cdf( 1.0, 0.0, 2.0 )\n    ~0.648\n    > y = base.dists.cauchy.cdf( 1.0, 3.0, 2.0 )\n    0.25\n    > y = base.dists.cauchy.cdf( NaN, 0.0, 2.0 )\n    NaN\n    > y = base.dists.cauchy.cdf( 1.0, 2.0, NaN )\n    NaN\n    > y = base.dists.cauchy.cdf( 1.0, NaN, 3.0 )\n    NaN\n\n\nbase.dists.cauchy.cdf.factory( x0, Ɣ )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Cauchy distribution with location parameter `x0` and scale parameter\n    `Ɣ`.\n\n    Parameters\n    ----------\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.cauchy.cdf.factory( 1.5, 3.0 );\n    > var y = myCDF( 1.0 )\n    ~0.447\n\n","base.dists.cauchy.cdf.factory":"\nbase.dists.cauchy.cdf.factory( x0, Ɣ )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Cauchy distribution with location parameter `x0` and scale parameter\n    `Ɣ`.\n\n    Parameters\n    ----------\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.cauchy.cdf.factory( 1.5, 3.0 );\n    > var y = myCDF( 1.0 )\n    ~0.447\n\n","base.dists.cauchy.entropy":"\nbase.dists.cauchy.entropy( x0, Ɣ )\n    Returns the differential entropy of a Cauchy distribution (in nats).\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `Ɣ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dists.cauchy.entropy( 10.0, 7.0 )\n    ~4.477\n    > v = base.dists.cauchy.entropy( 22.0, 0.5 )\n    ~1.838\n    > v = base.dists.cauchy.entropy( 10.3, -0.5 )\n    NaN\n\n","base.dists.cauchy.logcdf":"\nbase.dists.cauchy.logcdf( x, x0, Ɣ )\n    Evaluates the natural logarithm of the cumulative distribution function\n    (logCDF) for a Cauchy distribution with location parameter `x0` and scale\n    parameter `Ɣ` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `Ɣ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Natural logarithm of the CDF.\n\n    Examples\n    --------\n    > var y = base.dists.cauchy.logcdf( 4.0, 0.0, 2.0 )\n    ~-0.16\n    > y = base.dists.cauchy.logcdf( 1.0, 0.0, 2.0 )\n    ~-0.435\n    > y = base.dists.cauchy.logcdf( 1.0, 3.0, 2.0 )\n    ~-1.386\n    > y = base.dists.cauchy.logcdf( NaN, 0.0, 2.0 )\n    NaN\n    > y = base.dists.cauchy.logcdf( 1.0, 2.0, NaN )\n    NaN\n    > y = base.dists.cauchy.logcdf( 1.0, NaN, 3.0 )\n    NaN\n\n\nbase.dists.cauchy.logcdf.factory( x0, Ɣ )\n    Returns a function for evaluating the natural logarithm of the cumulative\n    distribution function (logCDF) of a Cauchy distribution with location\n    parameter `x0` and scale parameter `Ɣ`.\n\n    Parameters\n    ----------\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Function to evaluate the natural logarithm of CDF.\n\n    Examples\n    --------\n    > var mylogCDF = base.dists.cauchy.logcdf.factory( 1.5, 3.0 );\n    > var y = mylogCDF( 1.0 )\n    ~-0.804\n\n","base.dists.cauchy.logcdf.factory":"\nbase.dists.cauchy.logcdf.factory( x0, Ɣ )\n    Returns a function for evaluating the natural logarithm of the cumulative\n    distribution function (logCDF) of a Cauchy distribution with location\n    parameter `x0` and scale parameter `Ɣ`.\n\n    Parameters\n    ----------\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Function to evaluate the natural logarithm of CDF.\n\n    Examples\n    --------\n    > var mylogCDF = base.dists.cauchy.logcdf.factory( 1.5, 3.0 );\n    > var y = mylogCDF( 1.0 )\n    ~-0.804\n\n","base.dists.cauchy.logpdf":"\nbase.dists.cauchy.logpdf( x, x0, Ɣ )\n    Evaluates the natural logarithm of the probability density function (logPDF)\n    for a Cauchy distribution with location parameter `x0` and scale parameter\n    `Ɣ` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `Ɣ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Natural logarithm of PDF.\n\n    Examples\n    --------\n    > var y = base.dists.cauchy.logpdf( 2.0, 1.0, 1.0 )\n    ~-1.838\n    > y = base.dists.cauchy.logpdf( 4.0, 3.0, 0.1 )\n    ~-3.457\n    > y = base.dists.cauchy.logpdf( 4.0, 3.0, 3.0 )\n    ~-2.349\n    > y = base.dists.cauchy.logpdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.cauchy.logpdf( 2.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.cauchy.logpdf( 2.0, 1.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dists.cauchy.logpdf( 2.0, 1.0, -2.0 )\n    NaN\n\n\nbase.dists.cauchy.logpdf.factory( x0, Ɣ )\n    Returns a function for evaluating the natural logarithm of the probability\n    density function (logPDF) of a Cauchy distribution with location parameter\n    `x0` and scale parameter `Ɣ`.\n\n    Parameters\n    ----------\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Function to evaluate the natural logarithm of the PDF.\n\n    Examples\n    --------\n    > var mylogPDF = base.dists.cauchy.logpdf.factory( 10.0, 2.0 );\n    > var y = mylogPDF( 10.0 )\n    ~-1.838\n\n","base.dists.cauchy.logpdf.factory":"\nbase.dists.cauchy.logpdf.factory( x0, Ɣ )\n    Returns a function for evaluating the natural logarithm of the probability\n    density function (logPDF) of a Cauchy distribution with location parameter\n    `x0` and scale parameter `Ɣ`.\n\n    Parameters\n    ----------\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Function to evaluate the natural logarithm of the PDF.\n\n    Examples\n    --------\n    > var mylogPDF = base.dists.cauchy.logpdf.factory( 10.0, 2.0 );\n    > var y = mylogPDF( 10.0 )\n    ~-1.838\n\n","base.dists.cauchy.median":"\nbase.dists.cauchy.median( x0, Ɣ )\n    Returns the median of a Cauchy distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `Ɣ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var v = base.dists.cauchy.median( 10.0, 5.0 )\n    10.0\n    > v = base.dists.cauchy.median( 7.0, 0.5 )\n    7.0\n    > v = base.dists.cauchy.median( 10.3, -0.5 )\n    NaN\n\n","base.dists.cauchy.mode":"\nbase.dists.cauchy.mode( x0, Ɣ )\n    Returns the mode of a Cauchy distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `Ɣ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dists.cauchy.mode( 10.0, 5.0 )\n    10.0\n    > v = base.dists.cauchy.mode( 7.0, 0.5 )\n    7.0\n    > v = base.dists.cauchy.mode( 10.3, -0.5 )\n    NaN\n\n","base.dists.cauchy.pdf":"\nbase.dists.cauchy.pdf( x, x0, Ɣ )\n    Evaluates the probability density function (PDF) for a Cauchy distribution\n    with location parameter `x0` and scale parameter `Ɣ` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `Ɣ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dists.cauchy.pdf( 2.0, 1.0, 1.0 )\n    ~0.159\n    > y = base.dists.cauchy.pdf( 4.0, 3.0, 0.1 )\n    ~0.0315\n    > y = base.dists.cauchy.pdf( 4.0, 3.0, 3.0 )\n    ~0.095\n    > y = base.dists.cauchy.pdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.cauchy.pdf( 2.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.cauchy.pdf( 2.0, 1.0, NaN )\n    NaN\n\n    // Negative scale parameter:\n    > y = base.dists.cauchy.pdf( 2.0, 1.0, -2.0 )\n    NaN\n\n\nbase.dists.cauchy.pdf.factory( x0, Ɣ )\n    Returns a function for evaluating the probability density function (PDF) of\n    a Cauchy distribution with location parameter `x0` and scale parameter `Ɣ`.\n\n    Parameters\n    ----------\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.cauchy.pdf.factory( 10.0, 2.0 );\n    > var y = myPDF( 10.0 )\n    ~0.159\n\n","base.dists.cauchy.pdf.factory":"\nbase.dists.cauchy.pdf.factory( x0, Ɣ )\n    Returns a function for evaluating the probability density function (PDF) of\n    a Cauchy distribution with location parameter `x0` and scale parameter `Ɣ`.\n\n    Parameters\n    ----------\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.cauchy.pdf.factory( 10.0, 2.0 );\n    > var y = myPDF( 10.0 )\n    ~0.159\n\n","base.dists.cauchy.quantile":"\nbase.dists.cauchy.quantile( p, x0, Ɣ )\n    Evaluates the quantile function for a Cauchy distribution with location\n    parameter `x0`  and scale parameter `Ɣ` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `Ɣ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.cauchy.quantile( 0.3, 2.0, 2.0 )\n    ~0.547\n    > y = base.dists.cauchy.quantile( 0.8, 10, 2.0 )\n    ~12.753\n    > y = base.dists.cauchy.quantile( 0.1, 10.0, 2.0 )\n    ~3.845\n\n    > y = base.dists.cauchy.quantile( 1.1, 0.0, 1.0 )\n    NaN\n    > y = base.dists.cauchy.quantile( -0.2, 0.0, 1.0 )\n    NaN\n\n    > y = base.dists.cauchy.quantile( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.cauchy.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.cauchy.quantile( 0.0, 0.0, NaN )\n    NaN\n\n    // Negative scale parameter:\n    > y = base.dists.cauchy.quantile( 0.5, 0.0, -1.0 )\n    NaN\n\n\nbase.dists.cauchy.quantile.factory( x0, Ɣ )\n    Returns a function for evaluating the quantile function of a Cauchy\n    distribution with location parameter `x0` and scale parameter `Ɣ`.\n\n    Parameters\n    ----------\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.cauchy.quantile.factory( 10.0, 2.0 );\n    > var y = myQuantile( 0.5 )\n    10.0\n\n","base.dists.cauchy.quantile.factory":"\nbase.dists.cauchy.quantile.factory( x0, Ɣ )\n    Returns a function for evaluating the quantile function of a Cauchy\n    distribution with location parameter `x0` and scale parameter `Ɣ`.\n\n    Parameters\n    ----------\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.cauchy.quantile.factory( 10.0, 2.0 );\n    > var y = myQuantile( 0.5 )\n    10.0\n\n","base.dists.chi.cdf":"\nbase.dists.chi.cdf( x, k )\n    Evaluates the cumulative distribution function (CDF) for a chi distribution\n    with degrees of freedom `k` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.chi.cdf( 2.0, 3.0 )\n    ~0.739\n    > y = base.dists.chi.cdf( 1.0, 0.5 )\n    ~0.846\n    > y = base.dists.chi.cdf( -1.0, 4.0 )\n    0.0\n    > y = base.dists.chi.cdf( NaN, 1.0 )\n    NaN\n    > y = base.dists.chi.cdf( 0.0, NaN )\n    NaN\n\n    // Negative degrees of freedom:\n    > y = base.dists.chi.cdf( 2.0, -1.0 )\n    NaN\n\n    // Degenerate distribution when `k = 0`:\n    > y = base.dists.chi.cdf( 2.0, 0.0 )\n    1.0\n    > y = base.dists.chi.cdf( -2.0, 0.0 )\n    0.0\n    > y = base.dists.chi.cdf( 0.0, 0.0 )\n    0.0\n\nbase.dists.chi.cdf.factory( k )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a chi distribution with degrees of freedom `k`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.chi.cdf.factory( 1.0 );\n    > var y = mycdf( 2.0 )\n    ~0.954\n    > y = mycdf( 1.2 )\n    ~0.77\n\n","base.dists.chi.cdf.factory":"\nbase.dists.chi.cdf.factory( k )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a chi distribution with degrees of freedom `k`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.chi.cdf.factory( 1.0 );\n    > var y = mycdf( 2.0 )\n    ~0.954\n    > y = mycdf( 1.2 )\n    ~0.77\n\n","base.dists.chi.Chi":"\nbase.dists.chi.Chi( [k] )\n    Returns a chi distribution object.\n\n    Parameters\n    ----------\n    k: number (optional)\n        Degrees of freedom. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    chi: Object\n        Distribution instance.\n\n    chi.k: number\n        Degrees of freedom. If set, the value must be greater than `0`.\n\n    chi.entropy: number\n        Read-only property which returns the differential entropy.\n\n    chi.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    chi.mean: number\n        Read-only property which returns the expected value.\n\n    chi.mode: number\n        Read-only property which returns the mode.\n\n    chi.skewness: number\n        Read-only property which returns the skewness.\n\n    chi.stdev: number\n        Read-only property which returns the standard deviation.\n\n    chi.variance: number\n        Read-only property which returns the variance.\n\n    chi.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    chi.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    chi.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    chi.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var chi = base.dists.chi.Chi( 6.0 );\n    > chi.k\n    6.0\n    > chi.entropy\n    ~1.04\n    > chi.kurtosis\n    ~0.025\n    > chi.mean\n    ~2.35\n    > chi.mode\n    ~2.236\n    > chi.skewness\n    ~0.318\n    > chi.stdev\n    ~0.691\n    > chi.variance\n    ~0.478\n    > chi.cdf( 1.0 )\n    ~0.014\n    > chi.logpdf( 1.5 )\n    ~-1.177\n    > chi.pdf( 1.5 )\n    ~0.308\n    > chi.quantile( 0.5 )\n    ~2.313\n\n","base.dists.chi.entropy":"\nbase.dists.chi.entropy( k )\n    Returns the differential entropy of a chi distribution (in nats).\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dists.chi.entropy( 11.0 )\n    ~1.056\n    > v = base.dists.chi.entropy( 1.5 )\n    ~0.878\n\n","base.dists.chi.kurtosis":"\nbase.dists.chi.kurtosis( k )\n    Returns the excess kurtosis of a chi distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dists.chi.kurtosis( 9.0 )\n    ~0.011\n    > v = base.dists.chi.kurtosis( 1.5 )\n    ~0.424\n\n","base.dists.chi.logpdf":"\nbase.dists.chi.logpdf( x, k )\n    Evaluates the natural logarithm of the probability density function (PDF)\n    for a chi distribution with degrees of freedom `k` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dists.chi.logpdf( 0.3, 4.0 )\n    ~-4.35\n    > y = base.dists.chi.logpdf( 0.7, 0.7 )\n    ~-0.622\n    > y = base.dists.chi.logpdf( -1.0, 0.5 )\n    -Infinity\n    > y = base.dists.chi.logpdf( 0.0, NaN )\n    NaN\n    > y = base.dists.chi.logpdf( NaN, 2.0 )\n    NaN\n\n    // Negative degrees of freedom:\n    > y = base.dists.chi.logpdf( 2.0, -1.0 )\n    NaN\n\n    // Degenerate distribution when `k = 0`:\n    > y = base.dists.chi.logpdf( 2.0, 0.0, 2.0 )\n    -Infinity\n    > y = base.dists.chi.logpdf( 0.0, 0.0, 2.0 )\n    Infinity\n\n\nbase.dists.chi.logpdf.factory( k )\n    Returns a function for evaluating the natural logarithm of the  probability\n    density function (PDF) of a chi distribution with degrees of freedom `k`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogPDF = base.dists.chi.logpdf.factory( 6.0 );\n    > var y = mylogPDF( 3.0 )\n    ~-1.086\n\n","base.dists.chi.logpdf.factory":"\nbase.dists.chi.logpdf.factory( k )\n    Returns a function for evaluating the natural logarithm of the  probability\n    density function (PDF) of a chi distribution with degrees of freedom `k`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogPDF = base.dists.chi.logpdf.factory( 6.0 );\n    > var y = mylogPDF( 3.0 )\n    ~-1.086\n\n","base.dists.chi.mean":"\nbase.dists.chi.mean( k )\n    Returns the expected value of a chi distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dists.chi.mean( 11.0 )\n    ~3.242\n    > v = base.dists.chi.mean( 4.5 )\n    ~2.008\n\n","base.dists.chi.mode":"\nbase.dists.chi.mode( k )\n    Returns the mode of a chi distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dists.chi.mode( 11.0 )\n    ~3.162\n    > v = base.dists.chi.mode( 1.5 )\n    ~0.707\n\n","base.dists.chi.pdf":"\nbase.dists.chi.pdf( x, k )\n    Evaluates the probability density function (PDF) for a chi distribution with\n    degrees of freedom `k` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dists.chi.pdf( 0.3, 4.0 )\n    ~0.013\n    > y = base.dists.chi.pdf( 0.7, 0.7 )\n    ~0.537\n    > y = base.dists.chi.pdf( -1.0, 0.5 )\n    0.0\n    > y = base.dists.chi.pdf( 0.0, NaN )\n    NaN\n    > y = base.dists.chi.pdf( NaN, 2.0 )\n    NaN\n\n    // Negative degrees of freedom:\n    > y = base.dists.chi.pdf( 2.0, -1.0 )\n    NaN\n\n    // Degenerate distribution when `k = 0`:\n    > y = base.dists.chi.pdf( 2.0, 0.0, 2.0 )\n    0.0\n    > y = base.dists.chi.pdf( 0.0, 0.0, 2.0 )\n    Infinity\n\n\nbase.dists.chi.pdf.factory( k )\n    Returns a function for evaluating the probability density function (PDF) of\n    a chi distribution with degrees of freedom `k`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.chi.pdf.factory( 6.0 );\n    > var y = myPDF( 3.0 )\n    ~0.337\n\n","base.dists.chi.pdf.factory":"\nbase.dists.chi.pdf.factory( k )\n    Returns a function for evaluating the probability density function (PDF) of\n    a chi distribution with degrees of freedom `k`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.chi.pdf.factory( 6.0 );\n    > var y = myPDF( 3.0 )\n    ~0.337\n\n","base.dists.chi.quantile":"\nbase.dists.chi.quantile( p, k )\n    Evaluates the quantile function for a chi distribution with degrees of\n    freedom `k` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` for any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.chi.quantile( 0.8, 1.0 )\n    ~1.282\n    > y = base.dists.chi.quantile( 0.5, 4.0 )\n    ~1.832\n    > y = base.dists.chi.quantile( 0.8, 0.1 )\n    ~0.116\n    > y = base.dists.chi.quantile( -0.2, 0.5 )\n    NaN\n    > y = base.dists.chi.quantile( 1.1, 0.5 )\n    NaN\n    > y = base.dists.chi.quantile( NaN, 1.0 )\n    NaN\n    > y = base.dists.chi.quantile( 0.0, NaN )\n    NaN\n\n    // Negative degrees of freedom:\n    > y = base.dists.chi.quantile( 0.5, -1.0 )\n    NaN\n\n    // Degenerate distribution when `k = 0`:\n    > y = base.dists.chi.quantile( 0.3, 0.0 )\n    0.0\n    > y = base.dists.chi.quantile( 0.9, 0.0 )\n    0.0\n\n\nbase.dists.chi.quantile.factory( k )\n    Returns a function for evaluating the quantile function of a chi\n    distribution with degrees of freedom `k`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myquantile = base.dists.chi.quantile.factory( 2.0 );\n    > var y = myquantile( 0.3 )\n    ~0.845\n    > y = myquantile( 0.7 )\n    ~1.552\n\n","base.dists.chi.quantile.factory":"\nbase.dists.chi.quantile.factory( k )\n    Returns a function for evaluating the quantile function of a chi\n    distribution with degrees of freedom `k`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myquantile = base.dists.chi.quantile.factory( 2.0 );\n    > var y = myquantile( 0.3 )\n    ~0.845\n    > y = myquantile( 0.7 )\n    ~1.552\n\n","base.dists.chi.skewness":"\nbase.dists.chi.skewness( k )\n    Returns the skewness of a chi distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dists.chi.skewness( 11.0 )\n    ~0.225\n    > v = base.dists.chi.skewness( 1.5 )\n    ~0.763\n\n","base.dists.chi.stdev":"\nbase.dists.chi.stdev( k )\n    Returns the standard deviation of a chi distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dists.chi.stdev( 11.0 )\n    ~0.699\n    > v = base.dists.chi.stdev( 1.5 )\n    ~0.637\n\n","base.dists.chi.variance":"\nbase.dists.chi.variance( k )\n    Returns the variance of a chi distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dists.chi.variance( 11.0 )\n    ~0.488\n    > v = base.dists.chi.variance( 1.5 )\n    ~0.406\n\n","base.dists.chisquare.cdf":"\nbase.dists.chisquare.cdf( x, k )\n    Evaluates the cumulative distribution function (CDF) for a chi-squared\n    distribution with degrees of freedom `k` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.chisquare.cdf( 2.0, 3.0 )\n    ~0.428\n    > y = base.dists.chisquare.cdf( 1.0, 0.5 )\n    ~0.846\n    > y = base.dists.chisquare.cdf( -1.0, 4.0 )\n    0.0\n    > y = base.dists.chisquare.cdf( NaN, 1.0 )\n    NaN\n    > y = base.dists.chisquare.cdf( 0.0, NaN )\n    NaN\n\n    // Negative degrees of freedom:\n    > y = base.dists.chisquare.cdf( 2.0, -1.0 )\n    NaN\n\n    // Degenerate distribution when `k = 0`:\n    > y = base.dists.chisquare.cdf( 2.0, 0.0 )\n    1.0\n    > y = base.dists.chisquare.cdf( -2.0, 0.0 )\n    0.0\n    > y = base.dists.chisquare.cdf( 0.0, 0.0 )\n    0.0\n\nbase.dists.chisquare.cdf.factory( k )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a chi-squared distribution with degrees of freedom `k`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.chisquare.cdf.factory( 1.0 );\n    > var y = mycdf( 2.0 )\n    ~0.843\n    > y = mycdf( 1.2 )\n    ~0.727\n\n","base.dists.chisquare.cdf.factory":"\nbase.dists.chisquare.cdf.factory( k )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a chi-squared distribution with degrees of freedom `k`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.chisquare.cdf.factory( 1.0 );\n    > var y = mycdf( 2.0 )\n    ~0.843\n    > y = mycdf( 1.2 )\n    ~0.727\n\n","base.dists.chisquare.ChiSquare":"\nbase.dists.chisquare.ChiSquare( [k] )\n    Returns a  chi-squared distribution object.\n\n    Parameters\n    ----------\n    k: number (optional)\n        Degrees of freedom. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    chisquare: Object\n        Distribution instance.\n\n    chisquare.k: number\n        Degrees of freedom. If set, the value must be greater than `0`.\n\n    chisquare.entropy: number\n        Read-only property which returns the differential entropy.\n\n    chisquare.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    chisquare.mean: number\n        Read-only property which returns the expected value.\n\n    chisquare.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    chisquare.mode: number\n        Read-only property which returns the mode.\n\n    chisquare.skewness: number\n        Read-only property which returns the skewness.\n\n    chisquare.stdev: number\n        Read-only property which returns the standard deviation.\n\n    chisquare.variance: number\n        Read-only property which returns the variance.\n\n    chisquare.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    chisquare.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    chisquare.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var chisquare = base.dists.chisquare.ChiSquare( 6.0 );\n    > chisquare.k\n    6.0\n    > chisquare.entropy\n    ~2.541\n    > chisquare.kurtosis\n    2.0\n    > chisquare.mean\n    6.0\n    > chisquare.mode\n    4.0\n    > chisquare.skewness\n    ~1.155\n    > chisquare.stdev\n    ~3.464\n    > chisquare.variance\n    12.0\n    > chisquare.cdf( 3.0 )\n    ~0.191\n    > chisquare.mgf( 0.2 )\n    ~4.63\n    > chisquare.pdf( 1.5 )\n    ~0.066\n    > chisquare.quantile( 0.5 )\n    ~5.348\n\n","base.dists.chisquare.entropy":"\nbase.dists.chisquare.entropy( k )\n    Returns the differential entropy of a chi-squared distribution (in nats).\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dists.chisquare.entropy( 11.0 )\n    ~2.901\n    > v = base.dists.chisquare.entropy( 1.5 )\n    ~1.375\n\n","base.dists.chisquare.kurtosis":"\nbase.dists.chisquare.kurtosis( k )\n    Returns the excess kurtosis of a chi-squared distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dists.chisquare.kurtosis( 9.0 )\n    ~1.333\n    > v = base.dists.chisquare.kurtosis( 1.5 )\n    8.0\n\n","base.dists.chisquare.logpdf":"\nbase.dists.chisquare.logpdf( x, k )\n    Evaluates the natural logarithm of the probability density function (PDF)\n    for a chi-squared distribution with degrees of freedom `k` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dists.chisquare.logpdf( 0.3, 4.0 )\n    ~-2.74\n    > y = base.dists.chisquare.logpdf( 0.7, 0.7 )\n    ~-1.295\n    > y = base.dists.chisquare.logpdf( -1.0, 0.5 )\n    -Infinity\n    > y = base.dists.chisquare.logpdf( 0.0, NaN )\n    NaN\n    > y = base.dists.chisquare.logpdf( NaN, 2.0 )\n    NaN\n\n    // Negative degrees of freedom:\n    > y = base.dists.chisquare.logpdf( 2.0, -1.0 )\n    NaN\n\n    // Degenerate distribution when `k = 0`:\n    > y = base.dists.chisquare.logpdf( 2.0, 0.0, 2.0 )\n    -Infinity\n    > y = base.dists.chisquare.logpdf( 0.0, 0.0, 2.0 )\n    Infinity\n\n\nbase.dists.chisquare.logpdf.factory( k )\n    Returns a function for evaluating the natural logarithm of the probability\n    density function (PDF) of a chi-squared distribution with degrees of freedom\n    `k`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var myLogPDF = base.dists.chisquare.logpdf.factory( 6.0 );\n    > var y = myLogPDF( 3.0 )\n    ~-2.075\n\n","base.dists.chisquare.logpdf.factory":"\nbase.dists.chisquare.logpdf.factory( k )\n    Returns a function for evaluating the natural logarithm of the probability\n    density function (PDF) of a chi-squared distribution with degrees of freedom\n    `k`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var myLogPDF = base.dists.chisquare.logpdf.factory( 6.0 );\n    > var y = myLogPDF( 3.0 )\n    ~-2.075\n\n","base.dists.chisquare.mean":"\nbase.dists.chisquare.mean( k )\n    Returns the expected value of a chi-squared distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dists.chisquare.mean( 11.0 )\n    11.0\n    > v = base.dists.chisquare.mean( 4.5 )\n    4.5\n\n","base.dists.chisquare.mgf":"\nbase.dists.chisquare.mgf( t, k )\n    Evaluates the moment-generating function (MGF) for a chi-squared\n    distribution with degrees of freedom `k` at a value `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    t: number\n        Input value.\n\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dists.chisquare.mgf( 0.4, 2 )\n    ~5.0\n    > y = base.dists.chisquare.mgf( -1.0, 5.0 )\n    ~0.0642\n    > y = base.dists.chisquare.mgf( 0.0, 10.0 )\n    1.0\n\n\nbase.dists.chisquare.mgf.factory( k )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    chi-squared distribution with degrees of freedom `k`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var mymgf = base.dists.chisquare.mgf.factory( 1.0 );\n    > var y = mymgf( 0.2 )\n    ~1.291\n    > y = mymgf( 0.4 )\n    ~2.236\n\n","base.dists.chisquare.mgf.factory":"\nbase.dists.chisquare.mgf.factory( k )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    chi-squared distribution with degrees of freedom `k`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var mymgf = base.dists.chisquare.mgf.factory( 1.0 );\n    > var y = mymgf( 0.2 )\n    ~1.291\n    > y = mymgf( 0.4 )\n    ~2.236\n\n","base.dists.chisquare.mode":"\nbase.dists.chisquare.mode( k )\n    Returns the mode of a chi-squared distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dists.chisquare.mode( 11.0 )\n    9.0\n    > v = base.dists.chisquare.mode( 1.5 )\n    0.0\n\n","base.dists.chisquare.pdf":"\nbase.dists.chisquare.pdf( x, k )\n    Evaluates the probability density function (PDF) for a chi-squared\n    distribution with degrees of freedom `k` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dists.chisquare.pdf( 0.3, 4.0 )\n    ~0.065\n    > y = base.dists.chisquare.pdf( 0.7, 0.7 )\n    ~0.274\n    > y = base.dists.chisquare.pdf( -1.0, 0.5 )\n    0.0\n    > y = base.dists.chisquare.pdf( 0.0, NaN )\n    NaN\n    > y = base.dists.chisquare.pdf( NaN, 2.0 )\n    NaN\n\n    // Negative degrees of freedom:\n    > y = base.dists.chisquare.pdf( 2.0, -1.0 )\n    NaN\n\n    // Degenerate distribution when `k = 0`:\n    > y = base.dists.chisquare.pdf( 2.0, 0.0, 2.0 )\n    0.0\n    > y = base.dists.chisquare.pdf( 0.0, 0.0, 2.0 )\n    Infinity\n\n\nbase.dists.chisquare.pdf.factory( k )\n    Returns a function for evaluating the probability density function (PDF) of\n    a chi-squared distribution with degrees of freedom `k`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.chisquare.pdf.factory( 6.0 );\n    > var y = myPDF( 3.0 )\n    ~0.126\n\n","base.dists.chisquare.pdf.factory":"\nbase.dists.chisquare.pdf.factory( k )\n    Returns a function for evaluating the probability density function (PDF) of\n    a chi-squared distribution with degrees of freedom `k`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.chisquare.pdf.factory( 6.0 );\n    > var y = myPDF( 3.0 )\n    ~0.126\n\n","base.dists.chisquare.quantile":"\nbase.dists.chisquare.quantile( p, k )\n    Evaluates the quantile function for a chi-squared distribution with degrees\n    of freedom `k` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` for any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.chisquare.quantile( 0.8, 1.0 )\n    ~1.642\n    > y = base.dists.chisquare.quantile( 0.5, 4.0 )\n    ~3.357\n    > y = base.dists.chisquare.quantile( 0.8, 0.1 )\n    ~0.014\n    > y = base.dists.chisquare.quantile( -0.2, 0.5 )\n    NaN\n    > y = base.dists.chisquare.quantile( 1.1, 0.5 )\n    NaN\n    > y = base.dists.chisquare.quantile( NaN, 1.0 )\n    NaN\n    > y = base.dists.chisquare.quantile( 0.0, NaN )\n    NaN\n\n    // Negative degrees of freedom:\n    > y = base.dists.chisquare.quantile( 0.5, -1.0 )\n    NaN\n\n    // Degenerate distribution when `k = 0`:\n    > y = base.dists.chisquare.quantile( 0.3, 0.0 )\n    0.0\n    > y = base.dists.chisquare.quantile( 0.9, 0.0 )\n    0.0\n\n\nbase.dists.chisquare.quantile.factory( k )\n    Returns a function for evaluating the quantile function of a chi-squared\n    distribution with degrees of freedom `k`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myquantile = base.dists.chisquare.quantile.factory( 2.0 );\n    > var y = myquantile( 0.3 )\n    ~0.713\n    > y = myquantile( 0.7 )\n    ~2.408\n\n","base.dists.chisquare.quantile.factory":"\nbase.dists.chisquare.quantile.factory( k )\n    Returns a function for evaluating the quantile function of a chi-squared\n    distribution with degrees of freedom `k`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myquantile = base.dists.chisquare.quantile.factory( 2.0 );\n    > var y = myquantile( 0.3 )\n    ~0.713\n    > y = myquantile( 0.7 )\n    ~2.408\n\n","base.dists.chisquare.skewness":"\nbase.dists.chisquare.skewness( k )\n    Returns the skewness of a chi-squared distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dists.chisquare.skewness( 11.0 )\n    ~0.853\n    > v = base.dists.chisquare.skewness( 1.5 )\n    ~2.309\n\n","base.dists.chisquare.stdev":"\nbase.dists.chisquare.stdev( k )\n    Returns the standard deviation of a chi-squared distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dists.chisquare.stdev( 11.0 )\n    ~4.69\n    > v = base.dists.chisquare.stdev( 1.5 )\n    ~1.732\n\n","base.dists.chisquare.variance":"\nbase.dists.chisquare.variance( k )\n    Returns the variance of a chi-squared distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `k < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dists.chisquare.variance( 11.0 )\n    22.0\n    > v = base.dists.chisquare.variance( 1.5 )\n    3.0\n\n","base.dists.cosine.cdf":"\nbase.dists.cosine.cdf( x, μ, s )\n    Evaluates the cumulative distribution function (CDF) for a raised cosine\n    distribution with location parameter `μ` and scale parameter `s` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.cosine.cdf( 2.0, 0.0, 3.0 )\n    ~0.971\n    > y = base.dists.cosine.cdf( 9.0, 10.0, 3.0 )\n    ~0.196\n\n    > y = base.dists.cosine.cdf( 2.0, 0.0, NaN )\n    NaN\n    > y = base.dists.cosine.cdf( 2.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.cosine.cdf( NaN, 0.0, 1.0 )\n    NaN\n\n    // Degenerate distribution centered at `μ` when `s = 0.0`:\n    > y = base.dists.cosine.cdf( 2.0, 8.0, 0.0 )\n    0.0\n    > y = base.dists.cosine.cdf( 8.0, 8.0, 0.0 )\n    1.0\n    > y = base.dists.cosine.cdf( 10.0, 8.0, 0.0 )\n    1.0\n\n\nbase.dists.cosine.cdf.factory( μ, s )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a raised cosine distribution with location parameter `μ` and scale\n    parameter `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.cosine.cdf.factory( 3.0, 1.5 );\n    > var y = mycdf( 1.9 )\n    ~0.015\n\n","base.dists.cosine.cdf.factory":"\nbase.dists.cosine.cdf.factory( μ, s )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a raised cosine distribution with location parameter `μ` and scale\n    parameter `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.cosine.cdf.factory( 3.0, 1.5 );\n    > var y = mycdf( 1.9 )\n    ~0.015\n\n","base.dists.cosine.Cosine":"\nbase.dists.cosine.Cosine( [μ, s] )\n    Returns a raised cosine distribution object.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Location parameter. Default: `0.0`.\n\n    s: number (optional)\n        Scale parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    cosine: Object\n        Distribution instance.\n\n    cosine.mu: number\n        Location parameter.\n\n    cosine.s: number\n        Scale parameter. If set, the value must be greater than `0`.\n\n    cosine.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    cosine.mean: number\n        Read-only property which returns the expected value.\n\n    cosine.median: number\n        Read-only property which returns the median.\n\n    cosine.mode: number\n        Read-only property which returns the mode.\n\n    cosine.skewness: number\n        Read-only property which returns the skewness.\n\n    cosine.stdev: number\n        Read-only property which returns the standard deviation.\n\n    cosine.variance: number\n        Read-only property which returns the variance.\n\n    cosine.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    cosine.logcdf: Function\n        Evaluates the natural logarithm of the cumulative distribution function\n        (CDF).\n\n    cosine.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    cosine.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    cosine.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    cosine.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var cosine = base.dists.cosine.Cosine( -2.0, 3.0 );\n    > cosine.mu\n    -2.0\n    > cosine.s\n    3.0\n    > cosine.kurtosis\n    ~-0.594\n    > cosine.mean\n    -2.0\n    > cosine.median\n    -2.0\n    > cosine.mode\n    -2.0\n    > cosine.skewness\n    0.0\n    > cosine.stdev\n    ~1.085\n    > cosine.variance\n    ~1.176\n    > cosine.cdf( 0.5 )\n    ~0.996\n    > cosine.logcdf( 0.5 )\n    ~-0.004\n    > cosine.logpdf( -1.0 )\n    ~-1.386\n    > cosine.mgf( 0.2 )\n    ~0.686\n    > cosine.pdf( -2.0 )\n    ~0.333\n    > cosine.quantile( 0.9 )\n    ~-0.553\n\n","base.dists.cosine.kurtosis":"\nbase.dists.cosine.kurtosis( μ, s )\n    Returns the excess kurtosis of a raised cosine distribution with location\n    parameter `μ` and scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var y = base.dists.cosine.kurtosis( 0.0, 1.0 )\n    ~-0.594\n    > y = base.dists.cosine.kurtosis( 4.0, 2.0 )\n    ~-0.594\n    > y = base.dists.cosine.kurtosis( NaN, 1.0 )\n    NaN\n    > y = base.dists.cosine.kurtosis( 0.0, NaN )\n    NaN\n    > y = base.dists.cosine.kurtosis( 0.0, 0.0 )\n    NaN\n\n","base.dists.cosine.logcdf":"\nbase.dists.cosine.logcdf( x, μ, s )\n    Evaluates the natural logarithm of the cumulative distribution function\n    (CDF) for a raised cosine distribution with location parameter `μ` and scale\n     parameter `s` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logCDF.\n\n    Examples\n    --------\n    > var y = base.dists.cosine.logcdf( 2.0, 0.0, 3.0 )\n    ~-0.029\n    > y = base.dists.cosine.logcdf( 9.0, 10.0, 3.0 )\n    ~-1.632\n\n    > y = base.dists.cosine.logcdf( 2.0, 0.0, NaN )\n    NaN\n    > y = base.dists.cosine.logcdf( 2.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.cosine.logcdf( NaN, 0.0, 1.0 )\n    NaN\n\n    // Degenerate distribution centered at `μ` when `s = 0.0`:\n    > y = base.dists.cosine.logcdf( 2.0, 8.0, 0.0 )\n    -Infinity\n    > y = base.dists.cosine.logcdf( 8.0, 8.0, 0.0 )\n    0.0\n    > y = base.dists.cosine.logcdf( 10.0, 8.0, 0.0 )\n    0.0\n\n\nbase.dists.cosine.logcdf.factory( μ, s )\n    Returns a function for evaluating the natural logarithm of the  cumulative\n    distribution function (CDF) of a raised cosine distribution with location\n    parameter `μ` and scale parameter `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.cosine.logcdf.factory( 3.0, 1.5 );\n    > var y = mylogcdf( 1.9 )\n    ~-4.2\n\n","base.dists.cosine.logcdf.factory":"\nbase.dists.cosine.logcdf.factory( μ, s )\n    Returns a function for evaluating the natural logarithm of the  cumulative\n    distribution function (CDF) of a raised cosine distribution with location\n    parameter `μ` and scale parameter `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.cosine.logcdf.factory( 3.0, 1.5 );\n    > var y = mylogcdf( 1.9 )\n    ~-4.2\n\n","base.dists.cosine.logpdf":"\nbase.dists.cosine.logpdf( x, μ, s )\n    Evaluates the logarithm of the probability density function (PDF) for a\n    raised cosine distribution with location parameter `μ` and scale parameter\n    `s` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dists.cosine.logpdf( 2.0, 0.0, 3.0 )\n    ~-2.485\n    > y = base.dists.cosine.logpdf( -1.0, 2.0, 4.0 )\n    ~-3.307\n    > y = base.dists.cosine.logpdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.cosine.logpdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.cosine.logpdf( 0.0, 0.0, NaN )\n    NaN\n\n    // Negative scale parameter:\n    > y = base.dists.cosine.logpdf( 2.0, 0.0, -1.0 )\n    NaN\n\n    // Degenerate distribution at `s = 0.0`:\n    > y = base.dists.cosine.logpdf( 2.0, 8.0, 0.0 )\n    -Infinity\n    > y = base.dists.cosine.logpdf( 8.0, 8.0, 0.0 )\n    Infinity\n\n\nbase.dists.cosine.logpdf.factory( μ, s )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a raised cosine distribution with location parameter `μ`\n    and scale parameter `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogpdf = base.dists.cosine.logpdf.factory( 10.0, 2.0 );\n    > var y = mylogpdf( 10.0 )\n    ~-0.693\n\n","base.dists.cosine.logpdf.factory":"\nbase.dists.cosine.logpdf.factory( μ, s )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a raised cosine distribution with location parameter `μ`\n    and scale parameter `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogpdf = base.dists.cosine.logpdf.factory( 10.0, 2.0 );\n    > var y = mylogpdf( 10.0 )\n    ~-0.693\n\n","base.dists.cosine.mean":"\nbase.dists.cosine.mean( μ, s )\n    Returns the expected value of a raised cosine distribution with location\n    parameter `μ` and scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var y = base.dists.cosine.mean( 0.0, 1.0 )\n    0.0\n    > y = base.dists.cosine.mean( 4.0, 2.0 )\n    4.0\n    > y = base.dists.cosine.mean( NaN, 1.0 )\n    NaN\n    > y = base.dists.cosine.mean( 0.0, NaN )\n    NaN\n    > y = base.dists.cosine.mean( 0.0, 0.0 )\n    NaN\n\n","base.dists.cosine.median":"\nbase.dists.cosine.median( μ, s )\n    Returns the median of a raised cosine distribution with location parameter\n    `μ` and scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var y = base.dists.cosine.median( 0.0, 1.0 )\n    0.0\n    > y = base.dists.cosine.median( 4.0, 2.0 )\n    4.0\n    > y = base.dists.cosine.median( NaN, 1.0 )\n    NaN\n    > y = base.dists.cosine.median( 0.0, NaN )\n    NaN\n    > y = base.dists.cosine.median( 0.0, 0.0 )\n    NaN\n\n","base.dists.cosine.mgf":"\nbase.dists.cosine.mgf( t, μ, s )\n    Evaluates the moment-generating function (MGF) for a raised cosine\n    distribution with location parameter `μ` and scale parameter `s` at a value\n    `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    t: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dists.cosine.mgf( 2.0, 0.0, 3.0 )\n    ~7.234\n    > y = base.dists.cosine.mgf( 9.0, 10.0, 3.0 )\n    ~1.606e+47\n\n    > y = base.dists.cosine.mgf( 0.5, 0.0, NaN )\n    NaN\n    > y = base.dists.cosine.mgf( 0.5, NaN, 1.0 )\n    NaN\n    > y = base.dists.cosine.mgf( NaN, 0.0, 1.0 )\n    NaN\n\n\nbase.dists.cosine.mgf.factory( μ, s )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    raised cosine distribution with location parameter `μ` and scale parameter\n    `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var mymgf = base.dists.cosine.mgf.factory( 3.0, 1.5 );\n    > var y = mymgf( 1.9 )\n    ~495.57\n\n","base.dists.cosine.mgf.factory":"\nbase.dists.cosine.mgf.factory( μ, s )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    raised cosine distribution with location parameter `μ` and scale parameter\n    `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var mymgf = base.dists.cosine.mgf.factory( 3.0, 1.5 );\n    > var y = mymgf( 1.9 )\n    ~495.57\n\n","base.dists.cosine.mode":"\nbase.dists.cosine.mode( μ, s )\n    Returns the mode of a raised cosine distribution with location parameter `μ`\n    and scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var y = base.dists.cosine.mode( 0.0, 1.0 )\n    0.0\n    > y = base.dists.cosine.mode( 4.0, 2.0 )\n    4.0\n    > y = base.dists.cosine.mode( NaN, 1.0 )\n    NaN\n    > y = base.dists.cosine.mode( 0.0, NaN )\n    NaN\n    > y = base.dists.cosine.mode( 0.0, 0.0 )\n    NaN\n\n","base.dists.cosine.pdf":"\nbase.dists.cosine.pdf( x, μ, s )\n    Evaluates the probability density function (PDF) for a raised cosine\n    distribution with location parameter `μ` and scale parameter `s` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dists.cosine.pdf( 2.0, 0.0, 3.0 )\n    ~0.083\n    > y = base.dists.cosine.pdf( 2.4, 4.0, 2.0 )\n    ~0.048\n    > y = base.dists.cosine.pdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.cosine.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.cosine.pdf( 0.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dists.cosine.pdf( 2.0, 0.0, -1.0 )\n    NaN\n    > y = base.dists.cosine.pdf( 2.0, 8.0, 0.0 )\n    0.0\n    > y = base.dists.cosine.pdf( 8.0, 8.0, 0.0 )\n    Infinity\n\n\nbase.dists.cosine.pdf.factory( μ, s )\n    Returns a function for evaluating the probability density function (PDF) of\n    a raised cosine distribution with location parameter `μ` and scale parameter\n    `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.cosine.pdf.factory( 0.0, 3.0 );\n    > var y = myPDF( 2.0 )\n    ~0.083\n\n","base.dists.cosine.pdf.factory":"\nbase.dists.cosine.pdf.factory( μ, s )\n    Returns a function for evaluating the probability density function (PDF) of\n    a raised cosine distribution with location parameter `μ` and scale parameter\n    `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.cosine.pdf.factory( 0.0, 3.0 );\n    > var y = myPDF( 2.0 )\n    ~0.083\n\n","base.dists.cosine.quantile":"\nbase.dists.cosine.quantile( p, μ, s )\n    Evaluates the quantile function for a raised cosine distribution with\n    location parameter `μ` and scale parameter `s` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.cosine.quantile( 0.8, 0.0, 1.0 )\n    ~0.327\n    > y = base.dists.cosine.quantile( 0.5, 4.0, 2.0 )\n    ~4.0\n\n    > y = base.dists.cosine.quantile( 1.1, 0.0, 1.0 )\n    NaN\n    > y = base.dists.cosine.quantile( -0.2, 0.0, 1.0 )\n    NaN\n\n    > y = base.dists.cosine.quantile( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.cosine.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.cosine.quantile( 0.0, 0.0, NaN )\n    NaN\n\n    // Negative scale parameter:\n    > y = base.dists.cosine.quantile( 0.5, 0.0, -1.0 )\n    NaN\n\n\nbase.dists.cosine.quantile.factory( μ, s )\n    Returns a function for evaluating the quantile function of a raised cosine\n    distribution with location parameter `μ` and scale parameter `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.cosine.quantile.factory( 10.0, 2.0 );\n    > var y = myQuantile( 0.3 )\n    ~9.586\n\n","base.dists.cosine.quantile.factory":"\nbase.dists.cosine.quantile.factory( μ, s )\n    Returns a function for evaluating the quantile function of a raised cosine\n    distribution with location parameter `μ` and scale parameter `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.cosine.quantile.factory( 10.0, 2.0 );\n    > var y = myQuantile( 0.3 )\n    ~9.586\n\n","base.dists.cosine.skewness":"\nbase.dists.cosine.skewness( μ, s )\n    Returns the skewness of a raised cosine distribution with location parameter\n    `μ` and scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var y = base.dists.cosine.skewness( 0.0, 1.0 )\n    0.0\n    > y = base.dists.cosine.skewness( 4.0, 2.0 )\n    0.0\n    > y = base.dists.cosine.skewness( NaN, 1.0 )\n    NaN\n    > y = base.dists.cosine.skewness( 0.0, NaN )\n    NaN\n    > y = base.dists.cosine.skewness( 0.0, 0.0 )\n    NaN\n\n","base.dists.cosine.stdev":"\nbase.dists.cosine.stdev( μ, s )\n    Returns the standard deviation of a raised cosine distribution with location\n    parameter `μ` and scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var y = base.dists.cosine.stdev( 0.0, 1.0 )\n    ~0.362\n    > y = base.dists.cosine.stdev( 4.0, 2.0 )\n    ~0.723\n    > y = base.dists.cosine.stdev( NaN, 1.0 )\n    NaN\n    > y = base.dists.cosine.stdev( 0.0, NaN )\n    NaN\n    > y = base.dists.cosine.stdev( 0.0, 0.0 )\n    NaN\n\n","base.dists.cosine.variance":"\nbase.dists.cosine.variance( μ, s )\n    Returns the variance of a raised cosine distribution with location parameter\n    `μ` and scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var y = base.dists.cosine.variance( 0.0, 1.0 )\n    ~0.131\n    > y = base.dists.cosine.variance( 4.0, 2.0 )\n    ~0.523\n    > y = base.dists.cosine.variance( NaN, 1.0 )\n    NaN\n    > y = base.dists.cosine.variance( 0.0, NaN )\n    NaN\n    > y = base.dists.cosine.variance( 0.0, 0.0 )\n    NaN\n\n","base.dists.degenerate.cdf":"\nbase.dists.degenerate.cdf( x, μ )\n    Evaluates the cumulative distribution function (CDF) for a degenerate\n    distribution with mean value `μ`.\n\n    If provided `NaN` for any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.degenerate.cdf( 2.0, 3.0 )\n    0.0\n    > y = base.dists.degenerate.cdf( 4.0, 3.0 )\n    1.0\n    > y = base.dists.degenerate.cdf( 3.0, 3.0 )\n    1.0\n    > y = base.dists.degenerate.cdf( NaN, 0.0 )\n    NaN\n    > y = base.dists.degenerate.cdf( 0.0, NaN )\n    NaN\n\n\nbase.dists.degenerate.cdf.factory( μ )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a degenerate distribution centered at a provided mean value.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.degenerate.cdf.factory( 5.0 );\n    > var y = myCDF( 3.0 )\n    0.0\n    > y = myCDF( 6.0 )\n    1.0\n\n","base.dists.degenerate.cdf.factory":"\nbase.dists.degenerate.cdf.factory( μ )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a degenerate distribution centered at a provided mean value.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.degenerate.cdf.factory( 5.0 );\n    > var y = myCDF( 3.0 )\n    0.0\n    > y = myCDF( 6.0 )\n    1.0\n\n","base.dists.degenerate.Degenerate":"\nbase.dists.degenerate.Degenerate( [μ] )\n    Returns a degenerate distribution object.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Constant value of distribution.\n\n    Returns\n    -------\n    degenerate: Object\n        Distribution instance.\n\n    degenerate.mu: number\n        Constant value of distribution.\n\n    degenerate.entropy: number\n        Read-only property which returns the differential entropy.\n\n    degenerate.mean: number\n        Read-only property which returns the expected value.\n\n    degenerate.median: number\n        Read-only property which returns the median.\n\n    degenerate.stdev: number\n        Read-only property which returns the standard deviation.\n\n    degenerate.variance: number\n        Read-only property which returns the variance.\n\n    degenerate.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    degenerate.logcdf: Function\n        Evaluates the natural logarithm of the cumulative distribution function\n        (CDF).\n\n    degenerate.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    degenerate.logpmf: Function\n        Evaluates the natural logarithm of the probability mass function\n        (PMF).\n\n    degenerate.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    degenerate.pmf: Function\n        Evaluates the probability mass function (PMF).\n\n    degenerate.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    degenerate.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var degenerate = base.dists.degenerate.Degenerate( 2.0 );\n    > degenerate.mu\n    2.0\n    > degenerate.entropy\n    0.0\n    > degenerate.mean\n    2.0\n    > degenerate.mode\n    2.0\n    > degenerate.median\n    2.0\n    > degenerate.stdev\n    0.0\n    > degenerate.variance\n    0.0\n    > degenerate.cdf( 0.5 )\n    0.0\n    > degenerate.logcdf( 2.5 )\n    0.0\n    > degenerate.logpdf( 0.5 )\n    -Infinity\n    > degenerate.logpmf( 2.5 )\n    -Infinity\n    > degenerate.mgf( 0.2 )\n    ~1.492\n    > degenerate.pdf( 2.0 )\n    +Infinity\n    > degenerate.pmf( 2.0 )\n    1.0\n    > degenerate.quantile( 0.7 )\n    2.0\n\n","base.dists.degenerate.entropy":"\nbase.dists.degenerate.entropy( μ )\n    Returns the entropy of a degenerate distribution with constant value `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dists.degenerate.entropy( 20.0 )\n    0.0\n    > v = base.dists.degenerate.entropy( -10.0 )\n    0.0\n\n","base.dists.degenerate.logcdf":"\nbase.dists.degenerate.logcdf( x, μ )\n    Evaluates the natural logarithm of the cumulative distribution function\n    (logCDF) for a degenerate distribution with mean `μ`.\n\n    If provided `NaN` for any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    out: number\n        Natural logarithm of the CDF.\n\n    Examples\n    --------\n    > var y = base.dists.degenerate.logcdf( 2.0, 3.0 )\n    -Infinity\n    > y = base.dists.degenerate.logcdf( 4.0, 3.0 )\n    0\n    > y = base.dists.degenerate.logcdf( 3.0, 3.0 )\n    0\n    > y = base.dists.degenerate.logcdf( NaN, 0.0 )\n    NaN\n    > y = base.dists.degenerate.logcdf( 0.0, NaN )\n    NaN\n\n\nbase.dists.degenerate.logcdf.factory( μ )\n    Returns a function for evaluating the natural logarithm of the cumulative\n    distribution function (logCDF) of a degenerate distribution with mean `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    logcdf: Function\n        Function to evaluate the natural logarithm of cumulative distribution\n        function (logCDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.degenerate.logcdf.factory( 5.0 );\n    > var y = mylogcdf( 3.0 )\n    -Infinity\n    > y = mylogcdf( 6.0 )\n    0\n\n","base.dists.degenerate.logcdf.factory":"\nbase.dists.degenerate.logcdf.factory( μ )\n    Returns a function for evaluating the natural logarithm of the cumulative\n    distribution function (logCDF) of a degenerate distribution with mean `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    logcdf: Function\n        Function to evaluate the natural logarithm of cumulative distribution\n        function (logCDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.degenerate.logcdf.factory( 5.0 );\n    > var y = mylogcdf( 3.0 )\n    -Infinity\n    > y = mylogcdf( 6.0 )\n    0\n\n","base.dists.degenerate.logpdf":"\nbase.dists.degenerate.logpdf( x, μ )\n    Evaluates the natural logarithm of the probability density function (logPDF)\n    for a degenerate distribution with mean `μ`.\n\n    If provided `NaN` for any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    out: number\n        Natural logarithm of the PDF.\n\n    Examples\n    --------\n    > var y = base.dists.degenerate.logpdf( 2.0, 3.0 )\n    -Infinity\n    > y = base.dists.degenerate.logpdf( 3.0, 3.0 )\n    Infinity\n    > y = base.dists.degenerate.logpdf( NaN, 0.0 )\n    NaN\n    > y = base.dists.degenerate.logpdf( 0.0, NaN )\n    NaN\n\n\nbase.dists.degenerate.logpdf.factory( μ )\n    Returns a function for evaluating the natural logarithm of the probability\n    density function (logPDF) of a degenerate distribution with mean `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    logpdf: Function\n        Function to evaluate the natural logarithm of the PDF.\n\n    Examples\n    --------\n    > var mylogPDF = base.dists.degenerate.logpdf.factory( 10.0 );\n    > var y = mylogPDF( 10.0 )\n    Infinity\n\n","base.dists.degenerate.logpdf.factory":"\nbase.dists.degenerate.logpdf.factory( μ )\n    Returns a function for evaluating the natural logarithm of the probability\n    density function (logPDF) of a degenerate distribution with mean `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    logpdf: Function\n        Function to evaluate the natural logarithm of the PDF.\n\n    Examples\n    --------\n    > var mylogPDF = base.dists.degenerate.logpdf.factory( 10.0 );\n    > var y = mylogPDF( 10.0 )\n    Infinity\n\n","base.dists.degenerate.logpmf":"\nbase.dists.degenerate.logpmf( x, μ )\n    Evaluates the natural logarithm of the probability mass function (PMF) for a\n    degenerate distribution with mean `μ`.\n\n    If provided `NaN` for any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPMF.\n\n    Examples\n    --------\n    > var y = base.dists.degenerate.logpmf( 2.0, 3.0 )\n    -Infinity\n    > y = base.dists.degenerate.logpmf( 3.0, 3.0 )\n    0.0\n    > y = base.dists.degenerate.logpmf( NaN, 0.0 )\n    NaN\n    > y = base.dists.degenerate.logpmf( 0.0, NaN )\n    NaN\n\n\nbase.dists.degenerate.logpmf.factory( μ )\n    Returns a function for evaluating the natural logarithm of the probability\n    mass function (PMF) of a degenerate distribution with mean `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    logpmf: Function\n        Logarithm of probability mass function (PMF).\n\n    Examples\n    --------\n    > var mylogPMF = base.dists.degenerate.logpmf.factory( 10.0 );\n    > var y = mylogPMF( 10.0 )\n    0.0\n\n","base.dists.degenerate.logpmf.factory":"\nbase.dists.degenerate.logpmf.factory( μ )\n    Returns a function for evaluating the natural logarithm of the probability\n    mass function (PMF) of a degenerate distribution with mean `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    logpmf: Function\n        Logarithm of probability mass function (PMF).\n\n    Examples\n    --------\n    > var mylogPMF = base.dists.degenerate.logpmf.factory( 10.0 );\n    > var y = mylogPMF( 10.0 )\n    0.0\n\n","base.dists.degenerate.mean":"\nbase.dists.degenerate.mean( μ )\n    Returns the expected value of a degenerate distribution with constant value\n    `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dists.degenerate.mean( 20.0 )\n    20.0\n    > v = base.dists.degenerate.mean( -10.0 )\n    -10.0\n\n","base.dists.degenerate.median":"\nbase.dists.degenerate.median( μ )\n    Returns the median of a degenerate distribution with constant value `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var v = base.dists.degenerate.median( 20.0 )\n    20.0\n    > v = base.dists.degenerate.median( -10.0 )\n    -10.0\n\n","base.dists.degenerate.mgf":"\nbase.dists.degenerate.mgf( x, μ )\n    Evaluates the moment-generating function (MGF) for a degenerate distribution\n    with mean `μ`.\n\n    If provided `NaN` for any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dists.degenerate.mgf( 1.0, 1.0 )\n    ~2.718\n    > y = base.dists.degenerate.mgf( 2.0, 3.0 )\n    ~403.429\n    > y = base.dists.degenerate.mgf( NaN, 0.0 )\n    NaN\n    > y = base.dists.degenerate.mgf( 0.0, NaN )\n    NaN\n\n\nbase.dists.degenerate.mgf.factory( μ )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    degenerate distribution with mean `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dists.degenerate.mgf.factory( 10.0 );\n    > var y = myMGF( 0.1 )\n    ~2.718\n\n","base.dists.degenerate.mgf.factory":"\nbase.dists.degenerate.mgf.factory( μ )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    degenerate distribution with mean `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dists.degenerate.mgf.factory( 10.0 );\n    > var y = myMGF( 0.1 )\n    ~2.718\n\n","base.dists.degenerate.mode":"\nbase.dists.degenerate.mode( μ )\n    Returns the mode of a degenerate distribution with constant value `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dists.degenerate.mode( 20.0 )\n    20.0\n    > v = base.dists.degenerate.mode( -10.0 )\n    -10.0\n\n","base.dists.degenerate.pdf":"\nbase.dists.degenerate.pdf( x, μ )\n    Evaluates the probability density function (PDF) for a degenerate\n    distribution with mean `μ`.\n\n    If provided `NaN` for any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dists.degenerate.pdf( 2.0, 3.0 )\n    0.0\n    > y = base.dists.degenerate.pdf( 3.0, 3.0 )\n    Infinity\n    > y = base.dists.degenerate.pdf( NaN, 0.0 )\n    NaN\n    > y = base.dists.degenerate.pdf( 0.0, NaN )\n    NaN\n\n\nbase.dists.degenerate.pdf.factory( μ )\n    Returns a function for evaluating the probability density function (PDF) of\n    a degenerate distribution with mean `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.degenerate.pdf.factory( 10.0 );\n    > var y = myPDF( 10.0 )\n    Infinity\n\n","base.dists.degenerate.pdf.factory":"\nbase.dists.degenerate.pdf.factory( μ )\n    Returns a function for evaluating the probability density function (PDF) of\n    a degenerate distribution with mean `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.degenerate.pdf.factory( 10.0 );\n    > var y = myPDF( 10.0 )\n    Infinity\n\n","base.dists.degenerate.pmf":"\nbase.dists.degenerate.pmf( x, μ )\n    Evaluates the probability mass function (PMF) for a degenerate distribution\n    with mean `μ`.\n\n    If provided `NaN` for any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    out: number\n        Evaluated PMF.\n\n    Examples\n    --------\n    > var y = base.dists.degenerate.pmf( 2.0, 3.0 )\n    0.0\n    > y = base.dists.degenerate.pmf( 3.0, 3.0 )\n    1.0\n    > y = base.dists.degenerate.pmf( NaN, 0.0 )\n    NaN\n    > y = base.dists.degenerate.pmf( 0.0, NaN )\n    NaN\n\n\nbase.dists.degenerate.pmf.factory( μ )\n    Returns a function for evaluating the probability mass function (PMF) of a\n    degenerate distribution with mean `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    pmf: Function\n        Probability mass function (PMF).\n\n    Examples\n    --------\n    > var myPMF = base.dists.degenerate.pmf.factory( 10.0 );\n    > var y = myPMF( 10.0 )\n    1.0\n\n","base.dists.degenerate.pmf.factory":"\nbase.dists.degenerate.pmf.factory( μ )\n    Returns a function for evaluating the probability mass function (PMF) of a\n    degenerate distribution with mean `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    pmf: Function\n        Probability mass function (PMF).\n\n    Examples\n    --------\n    > var myPMF = base.dists.degenerate.pmf.factory( 10.0 );\n    > var y = myPMF( 10.0 )\n    1.0\n\n","base.dists.degenerate.quantile":"\nbase.dists.degenerate.quantile( p, μ )\n    Evaluates the quantile function for a degenerate distribution with mean `μ`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` for any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.degenerate.quantile( 0.5, 2.0 )\n    2.0\n    > y = base.dists.degenerate.quantile( 0.9, 4.0 )\n    4.0\n    > y = base.dists.degenerate.quantile( 1.1, 0.0 )\n    NaN\n    > y = base.dists.degenerate.quantile( -0.2, 0.0 )\n    NaN\n    > y = base.dists.degenerate.quantile( NaN, 0.0 )\n    NaN\n    > y = base.dists.degenerate.quantile( 0.0, NaN )\n    NaN\n\n\nbase.dists.degenerate.quantile.factory( μ )\n    Returns a function for evaluating the quantile function of a degenerate\n    distribution with mean `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.degenerate.quantile.factory( 10.0, 2.0 );\n    > var y = myQuantile( 0.5 )\n    10.0\n\n","base.dists.degenerate.quantile.factory":"\nbase.dists.degenerate.quantile.factory( μ )\n    Returns a function for evaluating the quantile function of a degenerate\n    distribution with mean `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.degenerate.quantile.factory( 10.0, 2.0 );\n    > var y = myQuantile( 0.5 )\n    10.0\n\n","base.dists.degenerate.stdev":"\nbase.dists.degenerate.stdev( μ )\n    Returns the standard deviation of a degenerate distribution with constant\n    value `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dists.degenerate.stdev( 20.0 )\n    0.0\n    > v = base.dists.degenerate.stdev( -10.0 )\n    0.0\n\n","base.dists.degenerate.variance":"\nbase.dists.degenerate.variance( μ )\n    Returns the variance of a degenerate distribution with constant value `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Constant value of distribution.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dists.degenerate.variance( 20.0 )\n    0.0\n    > v = base.dists.degenerate.variance( -10.0 )\n    0.0\n\n","base.dists.discreteUniform.cdf":"\nbase.dists.discreteUniform.cdf( x, a, b )\n    Evaluates the cumulative distribution function (CDF) for a discrete uniform\n    distribution with minimum support `a` and maximum support `b` at a value\n    `x`.\n\n    If `a > b`, the function returns `NaN`.\n\n    If `a` or `b` is not an integer value, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.discreteUniform.cdf( 9.0, 0, 10 )\n    ~0.909\n    > y = base.dists.discreteUniform.cdf( 0.5, 0, 2 )\n    ~0.333\n    > y = base.dists.discreteUniform.cdf( PINF, 2, 4 )\n    1.0\n    > y = base.dists.discreteUniform.cdf( NINF, 2, 4 )\n    0.0\n    > y = base.dists.discreteUniform.cdf( NaN, 0, 1 )\n    NaN\n    > y = base.dists.discreteUniform.cdf( 0.0, NaN, 1 )\n    NaN\n    > y = base.dists.discreteUniform.cdf( 0.0, 0, NaN )\n    NaN\n    > y = base.dists.discreteUniform.cdf( 2.0, 1, 0 )\n    NaN\n\n\nbase.dists.discreteUniform.cdf.factory( a, b )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a discrete uniform distribution with minimum support `a` and maximum\n    support `b`.\n\n    Parameters\n    ----------\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.discreteUniform.cdf.factory( 0, 10 );\n    > var y = mycdf( 0.5 )\n    ~0.091\n    > y = mycdf( 8.0 )\n    ~0.818\n\n","base.dists.discreteUniform.cdf.factory":"\nbase.dists.discreteUniform.cdf.factory( a, b )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a discrete uniform distribution with minimum support `a` and maximum\n    support `b`.\n\n    Parameters\n    ----------\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.discreteUniform.cdf.factory( 0, 10 );\n    > var y = mycdf( 0.5 )\n    ~0.091\n    > y = mycdf( 8.0 )\n    ~0.818\n\n","base.dists.discreteUniform.DiscreteUniform":"\nbase.dists.discreteUniform.DiscreteUniform( [a, b] )\n    Returns a discrete uniform distribution object.\n\n    Parameters\n    ----------\n    a: integer (optional)\n        Minimum support. Must be an integer smaller than `b`. Default: `0`.\n\n    b: integer (optional)\n        Maximum support. Must be an integer greater than `a`. Default: `1`.\n\n    Returns\n    -------\n    discreteUniform: Object\n        Distribution instance.\n\n    discreteUniform.a: integer\n        Minimum support. If set, the value must be an integer smaller than or\n        equal to `b`.\n\n    discreteUniform.b: integer\n        Maximum support. If set, the value must be an integer greater than or\n        equal to `a`.\n\n    discreteUniform.entropy: number\n        Read-only property which returns the entropy.\n\n    discreteUniform.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    discreteUniform.mean: number\n        Read-only property which returns the expected value.\n\n    discreteUniform.median: number\n        Read-only property which returns the median.\n\n    discreteUniform.skewness: number\n        Read-only property which returns the skewness.\n\n    discreteUniform.stdev: number\n        Read-only property which returns the standard deviation.\n\n    discreteUniform.variance: number\n        Read-only property which returns the variance.\n\n    discreteUniform.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    discreteUniform.logcdf: Function\n        Evaluates the natural logarithm of the cumulative distribution function\n        (CDF).\n\n    discreteUniform.logpmf: Function\n        Evaluates the natural logarithm of the probability mass function (PMF).\n\n    discreteUniform.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    discreteUniform.pmf: Function\n        Evaluates the probability mass function (PMF).\n\n    discreteUniform.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var discreteUniform = base.dists.discreteUniform.DiscreteUniform( -2, 2 );\n    > discreteUniform.a\n    -2\n    > discreteUniform.b\n    2\n    > discreteUniform.entropy\n    ~1.609\n    > discreteUniform.kurtosis\n    -1.3\n    > discreteUniform.mean\n    0.0\n    > discreteUniform.median\n    0.0\n    > discreteUniform.skewness\n    0.0\n    > discreteUniform.stdev\n    ~1.414\n    > discreteUniform.variance\n    2.0\n    > discreteUniform.cdf( 0.8 )\n    0.6\n    > discreteUniform.logcdf( 0.5 )\n    ~-0.511\n    > discreteUniform.logpmf( 1.0 )\n    ~-1.609\n    > discreteUniform.mgf( 0.8 )\n    ~1.766\n    > discreteUniform.pmf( 0.0 )\n    0.2\n    > discreteUniform.quantile( 0.8 )\n    2.0\n\n","base.dists.discreteUniform.kurtosis":"\nbase.dists.discreteUniform.kurtosis( a, b )\n    Returns the excess kurtosis of a discrete uniform distribution.\n\n    If `a > b`, the function returns `NaN`.\n\n    If `a` or `b` is not an integer value, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dists.discreteUniform.kurtosis( 0, 1 )\n    -2.0\n    > v = base.dists.discreteUniform.kurtosis( 4, 12 )\n    ~-1.23\n    > v = base.dists.discreteUniform.kurtosis( -4, 8 )\n    ~-1.214\n\n","base.dists.discreteUniform.logcdf":"\nbase.dists.discreteUniform.logcdf( x, a, b )\n    Evaluates the natural logarithm of the cumulative distribution function\n    (CDF) for a discrete uniform distribution with minimum support `a` and\n    maximum support `b` at a value `x`.\n\n    If `a > b`, the function returns `NaN`.\n\n    If `a` or `b` is not an integer value, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Evaluated logCDF.\n\n    Examples\n    --------\n    > var y = base.dists.discreteUniform.logcdf( 9.0, 0, 10 )\n    ~-0.095\n    > y = base.dists.discreteUniform.logcdf( 0.5, 0, 2 )\n    ~-1.099\n    > y = base.dists.discreteUniform.logcdf( PINF, 2, 4 )\n    0.0\n    > y = base.dists.discreteUniform.logcdf( NINF, 2, 4 )\n    -Infinity\n    > y = base.dists.discreteUniform.logcdf( NaN, 0, 1 )\n    NaN\n    > y = base.dists.discreteUniform.logcdf( 0.0, NaN, 1 )\n    NaN\n    > y = base.dists.discreteUniform.logcdf( 0.0, 0, NaN )\n    NaN\n    > y = base.dists.discreteUniform.logcdf( 2.0, 1, 0 )\n    NaN\n\n\nbase.dists.discreteUniform.logcdf.factory( a, b )\n    Returns a function for evaluating the natural logarithm of the cumulative\n    distribution function (CDF) of a discrete uniform distribution with minimum\n    support `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myLogCDF = base.dists.discreteUniform.logcdf.factory( 0, 10 );\n    > var y = myLogCDF( 0.5 )\n    ~-2.398\n    > y = myLogCDF( 8.0 )\n    ~-0.201\n\n","base.dists.discreteUniform.logcdf.factory":"\nbase.dists.discreteUniform.logcdf.factory( a, b )\n    Returns a function for evaluating the natural logarithm of the cumulative\n    distribution function (CDF) of a discrete uniform distribution with minimum\n    support `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myLogCDF = base.dists.discreteUniform.logcdf.factory( 0, 10 );\n    > var y = myLogCDF( 0.5 )\n    ~-2.398\n    > y = myLogCDF( 8.0 )\n    ~-0.201\n\n","base.dists.discreteUniform.logpmf":"\nbase.dists.discreteUniform.logpmf( x, a, b )\n    Evaluates the natural logarithm of the probability mass function (PMF) for a\n    discrete uniform distribution with minimum support `a` and maximum support\n    `b` at a value `x`.\n\n    If `a > b`, the function returns `NaN`.\n\n    If `a` or `b` is not an integer value, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPMF.\n\n    Examples\n    --------\n    > var y = base.dists.discreteUniform.logpmf( 2.0, 0, 4 )\n    ~-1.609\n    > y = base.dists.discreteUniform.logpmf( 5.0, 0, 4 )\n    -Infinity\n    > y = base.dists.discreteUniform.logpmf( 3.0, -4, 4 )\n    ~-2.197\n    > y = base.dists.discreteUniform.logpmf( NaN, 0, 1 )\n    NaN\n    > y = base.dists.discreteUniform.logpmf( 0.0, NaN, 1 )\n    NaN\n    > y = base.dists.discreteUniform.logpmf( 0.0, 0, NaN )\n    NaN\n    > y = base.dists.discreteUniform.logpmf( 2.0, 3, 1 )\n    NaN\n    > y = base.dists.discreteUniform.logpmf( 2.0, 1, 2.4 )\n    NaN\n\n\nbase.dists.discreteUniform.logpmf.factory( a, b )\n    Returns a function for evaluating the natural logarithm of the probability\n    mass function (PMF) of a discrete uniform distribution with minimum support\n    `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    Returns\n    -------\n    logpmf: Function\n        Logarithm of probability mass function (PMF).\n\n    Examples\n    --------\n    > var myLogPMF = base.dists.discreteUniform.logpmf.factory( 6, 7 );\n    > var y = myLogPMF( 7.0 )\n    ~-0.693\n    > y = myLogPMF( 5.0 )\n    -Infinity\n\n","base.dists.discreteUniform.logpmf.factory":"\nbase.dists.discreteUniform.logpmf.factory( a, b )\n    Returns a function for evaluating the natural logarithm of the probability\n    mass function (PMF) of a discrete uniform distribution with minimum support\n    `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    Returns\n    -------\n    logpmf: Function\n        Logarithm of probability mass function (PMF).\n\n    Examples\n    --------\n    > var myLogPMF = base.dists.discreteUniform.logpmf.factory( 6, 7 );\n    > var y = myLogPMF( 7.0 )\n    ~-0.693\n    > y = myLogPMF( 5.0 )\n    -Infinity\n\n","base.dists.discreteUniform.mean":"\nbase.dists.discreteUniform.mean( a, b )\n    Returns the expected value of a discrete uniform distribution.\n\n    If `a > b`, the function returns `NaN`.\n\n    If `a` or `b` is not an integer value, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dists.discreteUniform.mean( -2, 2 )\n    0.0\n    > v = base.dists.discreteUniform.mean( 4, 12 )\n    8.0\n    > v = base.dists.discreteUniform.mean( 2, 8 )\n    5.0\n\n","base.dists.discreteUniform.median":"\nbase.dists.discreteUniform.median( a, b )\n    Returns the median of a discrete uniform distribution.\n\n    If `a > b`, the function returns `NaN`.\n\n    If `a` or `b` is not an integer value, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var v = base.dists.discreteUniform.median( -2, 2 )\n    0.0\n    > v = base.dists.discreteUniform.median( 4, 12 )\n    8.0\n    > v = base.dists.discreteUniform.median( 2, 8 )\n    5.0\n\n","base.dists.discreteUniform.mgf":"\nbase.dists.discreteUniform.mgf( t, a, b )\n    Evaluates the moment-generating function (MGF) for a discrete uniform\n    distribution with minimum support `a` and maximum support `b` at a value\n    `t`.\n\n    If `a > b`, the function returns `NaN`.\n\n    If `a` or `b` is not an integer value, the function returns `NaN`.\n\n    Parameters\n    ----------\n    t: number\n        Input value.\n\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dists.discreteUniform.mgf( 2.0, 0, 4 )\n    ~689.475\n    > y = base.dists.discreteUniform.mgf( -0.2, 0, 4 )\n    ~0.697\n    > y = base.dists.discreteUniform.mgf( 2.0, 0, 1 )\n    ~4.195\n    > y = base.dists.discreteUniform.mgf( 0.5, 3, 2 )\n    NaN\n    > y = base.dists.discreteUniform.mgf( NaN, 0, 1  )\n    NaN\n    > y = base.dists.discreteUniform.mgf( 0.0, NaN, 1 )\n    NaN\n    > y = base.dists.discreteUniform.mgf( 0.0, 0, NaN )\n    NaN\n\n\nbase.dists.discreteUniform.mgf.factory( a, b )\n    Returns a function for evaluating the moment-generating function (MGF)\n    of a discrete uniform distribution with minimum support `a` and maximum\n    support `b`.\n\n    Parameters\n    ----------\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var mymgf = base.dists.discreteUniform.mgf.factory( 6, 7 );\n    > var y = mymgf( 0.1 )\n    ~1.918\n    > y = mymgf( 1.1 )\n    ~1471.722\n\n","base.dists.discreteUniform.mgf.factory":"\nbase.dists.discreteUniform.mgf.factory( a, b )\n    Returns a function for evaluating the moment-generating function (MGF)\n    of a discrete uniform distribution with minimum support `a` and maximum\n    support `b`.\n\n    Parameters\n    ----------\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var mymgf = base.dists.discreteUniform.mgf.factory( 6, 7 );\n    > var y = mymgf( 0.1 )\n    ~1.918\n    > y = mymgf( 1.1 )\n    ~1471.722\n\n","base.dists.discreteUniform.pmf":"\nbase.dists.discreteUniform.pmf( x, a, b )\n    Evaluates the probability mass function (PMF) for a discrete uniform\n    distribution with minimum support `a` and maximum support `b` at a value\n    `x`.\n\n    If `a > b`, the function returns `NaN`.\n\n    If `a` or `b` is not an integer value, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Evaluated PMF.\n\n    Examples\n    --------\n    > var y = base.dists.discreteUniform.pmf( 2.0, 0, 4 )\n    ~0.2\n    > y = base.dists.discreteUniform.pmf( 5.0, 0, 4 )\n    0.0\n    > y = base.dists.discreteUniform.pmf( 3.0, -4, 4 )\n    ~0.111\n    > y = base.dists.discreteUniform.pmf( NaN, 0, 1 )\n    NaN\n    > y = base.dists.discreteUniform.pmf( 0.0, NaN, 1 )\n    NaN\n    > y = base.dists.discreteUniform.pmf( 0.0, 0, NaN )\n    NaN\n    > y = base.dists.discreteUniform.pmf( 2.0, 3, 1 )\n    NaN\n    > y = base.dists.discreteUniform.pmf( 2.0, 1, 2.4 )\n    NaN\n\n\nbase.dists.discreteUniform.pmf.factory( a, b )\n    Returns a function for evaluating the probability mass function (PMF) of\n    a discrete uniform distribution with minimum support `a` and maximum support\n    `b`.\n\n    Parameters\n    ----------\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    Returns\n    -------\n    pmf: Function\n        Probability mass function (PMF).\n\n    Examples\n    --------\n    > var myPMF = base.dists.discreteUniform.pmf.factory( 6, 7 );\n    > var y = myPMF( 7.0 )\n    0.5\n    > y = myPMF( 5.0 )\n    0.0\n\n","base.dists.discreteUniform.pmf.factory":"\nbase.dists.discreteUniform.pmf.factory( a, b )\n    Returns a function for evaluating the probability mass function (PMF) of\n    a discrete uniform distribution with minimum support `a` and maximum support\n    `b`.\n\n    Parameters\n    ----------\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    Returns\n    -------\n    pmf: Function\n        Probability mass function (PMF).\n\n    Examples\n    --------\n    > var myPMF = base.dists.discreteUniform.pmf.factory( 6, 7 );\n    > var y = myPMF( 7.0 )\n    0.5\n    > y = myPMF( 5.0 )\n    0.0\n\n","base.dists.discreteUniform.quantile":"\nbase.dists.discreteUniform.quantile( p, a, b )\n    Evaluates the quantile function for a discrete uniform distribution with\n    minimum support `a` and maximum support `b` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If `a` or `b` is not an integer value, the function returns `NaN`.\n\n    If provided `a > b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.discreteUniform.quantile( 0.8, 0, 1 )\n    1\n    > y = base.dists.discreteUniform.quantile( 0.5, 0.0, 10.0 )\n    5\n\n    > y = base.dists.discreteUniform.quantile( 1.1, 0, 4 )\n    NaN\n    > y = base.dists.discreteUniform.quantile( -0.2, 0, 4 )\n    NaN\n\n    > y = base.dists.discreteUniform.quantile( NaN, -2, 2 )\n    NaN\n    > y = base.dists.discreteUniform.quantile( 0.1, NaN, 2 )\n    NaN\n    > y = base.dists.discreteUniform.quantile( 0.1, -2, NaN )\n    NaN\n\n    > y = base.dists.discreteUniform.quantile( 0.5, 2, 1 )\n    NaN\n\n\nbase.dists.discreteUniform.quantile.factory( a, b )\n    Returns a function for evaluating the quantile function of a discrete\n    uniform distribution with minimum support `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.discreteUniform.quantile.factory( 0, 4 );\n    > var y = myQuantile( 0.8 )\n    4\n\n","base.dists.discreteUniform.quantile.factory":"\nbase.dists.discreteUniform.quantile.factory( a, b )\n    Returns a function for evaluating the quantile function of a discrete\n    uniform distribution with minimum support `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.discreteUniform.quantile.factory( 0, 4 );\n    > var y = myQuantile( 0.8 )\n    4\n\n","base.dists.discreteUniform.skewness":"\nbase.dists.discreteUniform.skewness( a, b )\n    Returns the skewness of a discrete uniform distribution.\n\n    If `a > b`, the function returns `NaN`.\n\n    If `a` or `b` is not an integer value, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dists.discreteUniform.skewness( -2, 2 )\n    0.0\n    > v = base.dists.discreteUniform.skewness( 4, 12 )\n    0.0\n    > v = base.dists.discreteUniform.skewness( 2, 8 )\n    0.0\n\n","base.dists.discreteUniform.stdev":"\nbase.dists.discreteUniform.stdev( a, b )\n    Returns the standard deviation of a discrete uniform distribution.\n\n    If `a > b`, the function returns `NaN`.\n\n    If `a` or `b` is not an integer value, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dists.discreteUniform.stdev( 0, 1 )\n    ~0.5\n    > v = base.dists.discreteUniform.stdev( 4, 12 )\n    ~2.582\n    > v = base.dists.discreteUniform.stdev( 2, 8 )\n    2.0\n\n","base.dists.discreteUniform.variance":"\nbase.dists.discreteUniform.variance( a, b )\n    Returns the variance of a discrete uniform distribution.\n\n    If `a > b`, the function returns `NaN`.\n\n    If `a` or `b` is not an integer value, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dists.discreteUniform.variance( 0, 1 )\n    ~0.25\n    > v = base.dists.discreteUniform.variance( 4, 12 )\n    ~6.667\n    > v = base.dists.discreteUniform.variance( 2, 8 )\n    4.0\n\n","base.dists.erlang.cdf":"\nbase.dists.erlang.cdf( x, k, λ )\n    Evaluates the cumulative distribution function (CDF) for an Erlang\n    distribution with shape parameter `k` and rate parameter `λ` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If not provided a nonnegative integer for `k`, the function returns `NaN`.\n\n    If provided a non-positive value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    k: number\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.erlang.cdf( 2.0, 1, 1.0 )\n    ~0.865\n    > y = base.dists.erlang.cdf( 2.0, 3, 1.0 )\n    ~0.323\n    > y = base.dists.erlang.cdf( 2.0, 2.5, 1.0 )\n    NaN\n    > y = base.dists.erlang.cdf( -1.0, 2, 2.0 )\n    0.0\n    > y = base.dists.erlang.cdf( PINF, 4, 2.0 )\n    1.0\n    > y = base.dists.erlang.cdf( NINF, 4, 2.0 )\n    0.0\n    > y = base.dists.erlang.cdf( NaN, 0, 1.0 )\n    NaN\n    > y = base.dists.erlang.cdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.erlang.cdf( 0.0, 0, NaN )\n    NaN\n    > y = base.dists.erlang.cdf( 2.0, -1, 1.0 )\n    NaN\n    > y = base.dists.erlang.cdf( 2.0, 1, -1.0 )\n    NaN\n\n\nbase.dists.erlang.cdf.factory( k, λ )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of an Erlang distribution with shape parameter `k` and rate parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.erlang.cdf.factory( 2, 0.5 );\n    > var y = mycdf( 6.0 )\n    ~0.801\n    > y = mycdf( 2.0 )\n    ~0.264\n\n","base.dists.erlang.cdf.factory":"\nbase.dists.erlang.cdf.factory( k, λ )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of an Erlang distribution with shape parameter `k` and rate parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.erlang.cdf.factory( 2, 0.5 );\n    > var y = mycdf( 6.0 )\n    ~0.801\n    > y = mycdf( 2.0 )\n    ~0.264\n\n","base.dists.erlang.entropy":"\nbase.dists.erlang.entropy( k, λ )\n    Returns the differential entropy of an Erlang distribution (in nats).\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If not provided a positive integer for `k`, the function returns `NaN`.\n\n    If provided a non-positive value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: integer\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dists.erlang.entropy( 1, 1.0 )\n    ~1.0\n    > v = base.dists.erlang.entropy( 4, 12.0 )\n    ~-0.462\n    > v = base.dists.erlang.entropy( 8, 2.0 )\n    ~1.723\n\n","base.dists.erlang.Erlang":"\nbase.dists.erlang.Erlang( [k, λ] )\n    Returns an Erlang distribution object.\n\n    Parameters\n    ----------\n    k: number (optional)\n        Shape parameter. Must be a positive integer. Default: `1.0`.\n\n    λ: number (optional)\n        Rate parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    erlang: Object\n        Distribution instance.\n\n    erlang.k: number\n        Shape parameter. If set, the value must be a positive integer.\n\n    erlang.lambda: number\n        Rate parameter. If set, the value must be greater than `0`.\n\n    erlang.entropy: number\n        Read-only property which returns the differential entropy.\n\n    erlang.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    erlang.mean: number\n        Read-only property which returns the expected value.\n\n    erlang.mode: number\n        Read-only property which returns the mode.\n\n    erlang.skewness: number\n        Read-only property which returns the skewness.\n\n    erlang.stdev: number\n        Read-only property which returns the standard deviation.\n\n    erlang.variance: number\n        Read-only property which returns the variance.\n\n    erlang.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    erlang.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    erlang.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    erlang.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    erlang.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var erlang = base.dists.erlang.Erlang( 6, 5.0 );\n    > erlang.k\n    6\n    > erlang.lambda\n    5.0\n    > erlang.entropy\n    ~0.647\n    > erlang.kurtosis\n    1.0\n    > erlang.mean\n    1.2\n    > erlang.mode\n    1.0\n    > erlang.skewness\n    ~0.816\n    > erlang.stdev\n    ~0.49\n    > erlang.variance\n    0.24\n    > erlang.cdf( 3.0 )\n    ~0.997\n    > erlang.logpdf( 3.0 )\n    ~-4.638\n    > erlang.mgf( -0.5 )\n    ~0.564\n    > erlang.pdf( 3.0 )\n    ~0.01\n    > erlang.quantile( 0.8 )\n    ~1.581\n\n","base.dists.erlang.kurtosis":"\nbase.dists.erlang.kurtosis( k, λ )\n    Returns the excess kurtosis of an Erlang distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If not provided a positive integer for `k`, the function returns `NaN`.\n\n    If provided a non-positive value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: integer\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dists.erlang.kurtosis( 1, 1.0 )\n    6.0\n    > v = base.dists.erlang.kurtosis( 4, 12.0 )\n    1.5\n    > v = base.dists.erlang.kurtosis( 8, 2.0 )\n    0.75\n\n","base.dists.erlang.logpdf":"\nbase.dists.erlang.logpdf( x, k, λ )\n    Evaluates the natural logarithm of the probability density function (PDF)\n    for an Erlang distribution with shape parameter `k` and rate parameter `λ`\n    at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If not provided a nonnegative integer for `k`, the function returns `NaN`.\n\n    If provided a non-positive value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    k: number\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dists.erlang.logpdf( 0.1, 1, 1.0 )\n    ~-0.1\n    > y = base.dists.erlang.logpdf( 0.5, 2, 2.5 )\n    ~-0.111\n    > y = base.dists.erlang.logpdf( -1.0, 4, 2.0 )\n    -Infinity\n    > y = base.dists.erlang.logpdf( NaN, 1, 1.0 )\n    NaN\n    > y = base.dists.erlang.logpdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.erlang.logpdf( 0.0, 1, NaN )\n    NaN\n    > y = base.dists.erlang.logpdf( 2.0, -2, 0.5 )\n    NaN\n    > y = base.dists.erlang.logpdf( 2.0, 0.5, 0.5 )\n    NaN\n    > y = base.dists.erlang.logpdf( 2.0, 0.0, 2.0 )\n    -Infinity\n    > y = base.dists.erlang.logpdf( 0.0, 0.0, 2.0 )\n    Infinity\n    > y = base.dists.erlang.logpdf( 2.0, 1, 0.0 )\n    NaN\n    > y = base.dists.erlang.logpdf( 2.0, 1, -1.0 )\n    NaN\n\n\nbase.dists.erlang.logpdf.factory( k, λ )\n    Returns a function for evaluating the natural logarithm of the probability\n    density function (PDF) of an Erlang distribution with shape parameter `k`\n    and rate parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var myLogPDF = base.dists.erlang.logpdf.factory( 6.0, 7.0 );\n    > y = myLogPDF( 7.0 )\n    ~-32.382\n\n\n","base.dists.erlang.logpdf.factory":"\nbase.dists.erlang.logpdf.factory( k, λ )\n    Returns a function for evaluating the natural logarithm of the probability\n    density function (PDF) of an Erlang distribution with shape parameter `k`\n    and rate parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var myLogPDF = base.dists.erlang.logpdf.factory( 6.0, 7.0 );\n    > y = myLogPDF( 7.0 )\n    ~-32.382\n\n\n","base.dists.erlang.mean":"\nbase.dists.erlang.mean( k, λ )\n    Returns the expected value of an Erlang distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If not provided a positive integer for `k`, the function returns `NaN`.\n\n    If provided a non-positive value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: integer\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dists.erlang.mean( 1, 1.0 )\n    1.0\n    > v = base.dists.erlang.mean( 4, 12.0 )\n    ~0.333\n    > v = base.dists.erlang.mean( 8, 2.0 )\n    4.0\n\n","base.dists.erlang.mgf":"\nbase.dists.erlang.mgf( t, k, λ )\n    Evaluates the moment-generating function (MGF) for an Erlang distribution\n    with shape parameter `k` and rate parameter `λ` at a value `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If not provided a nonnegative integer for `k`, the function returns `NaN`.\n\n    If provided a non-positive value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    t: number\n        Input value.\n\n    k: number\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dists.erlang.mgf( 0.3, 1, 1.0 )\n    ~1.429\n    > y = base.dists.erlang.mgf( 2.0, 2, 3.0 )\n    ~9.0\n    > y = base.dists.erlang.mgf( -1.0, 2, 2.0 )\n    ~0.444\n\n    > y = base.dists.erlang.mgf( NaN, 1, 1.0 )\n    NaN\n    > y = base.dists.erlang.mgf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.erlang.mgf( 0.0, 1, NaN )\n    NaN\n\n    > y = base.dists.erlang.mgf( 0.2, -2, 0.5 )\n    NaN\n    > y = base.dists.erlang.mgf( 0.2, 0.5, 0.5 )\n    NaN\n\n    > y = base.dists.erlang.mgf( 0.2, 1, 0.0 )\n    NaN\n    > y = base.dists.erlang.mgf( 0.2, 1, -5.0 )\n    NaN\n\n\nbase.dists.erlang.mgf.factory( k, λ )\n    Returns a function for evaluating the moment-generating function (MGF) of an\n    Erlang distribution with shape parameter `k` and rate parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dists.erlang.mgf.factory( 2, 0.5 );\n    > var y = myMGF( 0.2 )\n    ~2.778\n    > y = myMGF( -0.5 )\n    0.25\n\n","base.dists.erlang.mgf.factory":"\nbase.dists.erlang.mgf.factory( k, λ )\n    Returns a function for evaluating the moment-generating function (MGF) of an\n    Erlang distribution with shape parameter `k` and rate parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dists.erlang.mgf.factory( 2, 0.5 );\n    > var y = myMGF( 0.2 )\n    ~2.778\n    > y = myMGF( -0.5 )\n    0.25\n\n","base.dists.erlang.mode":"\nbase.dists.erlang.mode( k, λ )\n    Returns the mode of an Erlang distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If not provided a positive integer for `k`, the function returns `NaN`.\n\n    If provided a non-positive value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: integer\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dists.erlang.mode( 1, 1.0 )\n    0.0\n    > v = base.dists.erlang.mode( 4, 12.0 )\n    0.25\n    > v = base.dists.erlang.mode( 8, 2.0 )\n    3.5\n\n","base.dists.erlang.pdf":"\nbase.dists.erlang.pdf( x, k, λ )\n    Evaluates the probability density function (PDF) for an Erlang distribution\n    with shape parameter `k` and rate parameter `λ` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If not provided a nonnegative integer for `k`, the function returns `NaN`.\n\n    If provided a non-positive value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    k: number\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dists.erlang.pdf( 0.1, 1, 1.0 )\n    ~0.905\n    > y = base.dists.erlang.pdf( 0.5, 2, 2.5 )\n    ~0.895\n    > y = base.dists.erlang.pdf( -1.0, 4, 2.0 )\n    0.0\n    > y = base.dists.erlang.pdf( NaN, 1, 1.0 )\n    NaN\n    > y = base.dists.erlang.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.erlang.pdf( 0.0, 1, NaN )\n    NaN\n    > y = base.dists.erlang.pdf( 2.0, -2, 0.5 )\n    NaN\n    > y = base.dists.erlang.pdf( 2.0, 0.5, 0.5 )\n    NaN\n    > y = base.dists.erlang.pdf( 2.0, 0.0, 2.0 )\n    0.0\n    > y = base.dists.erlang.pdf( 0.0, 0.0, 2.0 )\n    Infinity\n    > y = base.dists.erlang.pdf( 2.0, 1, 0.0 )\n    NaN\n    > y = base.dists.erlang.pdf( 2.0, 1, -1.0 )\n    NaN\n\n\nbase.dists.erlang.pdf.factory( k, λ )\n    Returns a function for evaluating the probability density function (PDF)\n    of an Erlang distribution with shape parameter `k` and rate parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.erlang.pdf.factory( 6.0, 7.0 );\n    > y = myPDF( 7.0 )\n    ~8.639e-15\n\n\n","base.dists.erlang.pdf.factory":"\nbase.dists.erlang.pdf.factory( k, λ )\n    Returns a function for evaluating the probability density function (PDF)\n    of an Erlang distribution with shape parameter `k` and rate parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.erlang.pdf.factory( 6.0, 7.0 );\n    > y = myPDF( 7.0 )\n    ~8.639e-15\n\n\n","base.dists.erlang.quantile":"\nbase.dists.erlang.quantile( p, k, λ )\n    Evaluates the quantile function for an Erlang distribution with shape\n    parameter `k` and rate parameter `λ` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If not provided a nonnegative integer for `k`, the function returns `NaN`.\n\n    If provided a non-positive number for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    k: number\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.erlang.quantile( 0.8, 2, 1.0 )\n    ~2.994\n    > y = base.dists.erlang.quantile( 0.5, 4, 2.0 )\n    ~1.836\n\n    > y = base.dists.erlang.quantile( 1.1, 1, 1.0 )\n    NaN\n    > y = base.dists.erlang.quantile( -0.2, 1, 1.0 )\n    NaN\n\n    > y = base.dists.erlang.quantile( NaN, 1, 1.0 )\n    NaN\n    > y = base.dists.erlang.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.erlang.quantile( 0.0, 1, NaN )\n    NaN\n\n    // Non-integer shape parameter:\n    > y = base.dists.erlang.quantile( 0.5, 0.5, 1.0 )\n    NaN\n    // Non-positive shape parameter:\n    > y = base.dists.erlang.quantile( 0.5, -1, 1.0 )\n    NaN\n    // Non-positive rate parameter:\n    > y = base.dists.erlang.quantile( 0.5, 1, -1.0 )\n    NaN\n\n\nbase.dists.erlang.quantile.factory( k, λ )\n    Returns a function for evaluating the quantile function of an Erlang\n    distribution with shape parameter `k` and rate parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.erlang.quantile.factory( 10, 2.0 );\n    > var y = myQuantile( 0.4 )\n    ~4.452\n\n","base.dists.erlang.quantile.factory":"\nbase.dists.erlang.quantile.factory( k, λ )\n    Returns a function for evaluating the quantile function of an Erlang\n    distribution with shape parameter `k` and rate parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.erlang.quantile.factory( 10, 2.0 );\n    > var y = myQuantile( 0.4 )\n    ~4.452\n\n","base.dists.erlang.skewness":"\nbase.dists.erlang.skewness( k, λ )\n    Returns the skewness of an Erlang distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If not provided a positive integer for `k`, the function returns `NaN`.\n\n    If provided a non-positive value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: integer\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dists.erlang.skewness( 1, 1.0 )\n    2.0\n    > v = base.dists.erlang.skewness( 4, 12.0 )\n    1.0\n    > v = base.dists.erlang.skewness( 8, 2.0 )\n    ~0.707\n\n","base.dists.erlang.stdev":"\nbase.dists.erlang.stdev( k, λ )\n    Returns the standard deviation of an Erlang distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If not provided a positive integer for `k`, the function returns `NaN`.\n\n    If provided a non-positive value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: integer\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dists.erlang.stdev( 1, 1.0 )\n    1.0\n    > v = base.dists.erlang.stdev( 4, 12.0 )\n    ~0.167\n    > v = base.dists.erlang.stdev( 8, 2.0 )\n    ~1.414\n\n","base.dists.erlang.variance":"\nbase.dists.erlang.variance( k, λ )\n    Returns the variance of an Erlang distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If not provided a positive integer for `k`, the function returns `NaN`.\n\n    If provided a non-positive value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: integer\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dists.erlang.variance( 1, 1.0 )\n    1.0\n    > v = base.dists.erlang.variance( 4, 12.0 )\n    ~0.028\n    > v = base.dists.erlang.variance( 8, 2.0 )\n    2.0\n\n","base.dists.exponential.cdf":"\nbase.dists.exponential.cdf( x, λ )\n    Evaluates the cumulative distribution function (CDF) for an exponential\n    distribution with rate parameter `λ` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.exponential.cdf( 2.0, 0.1 )\n    ~0.181\n    > y = base.dists.exponential.cdf( 1.0, 2.0 )\n    ~0.865\n    > y = base.dists.exponential.cdf( -1.0, 4.0 )\n    0.0\n    > y = base.dists.exponential.cdf( NaN, 1.0 )\n    NaN\n    > y = base.dists.exponential.cdf( 0.0, NaN )\n    NaN\n\n    // Negative rate parameter:\n    > y = base.dists.exponential.cdf( 2.0, -1.0 )\n    NaN\n\nbase.dists.exponential.cdf.factory( λ )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    for an exponential distribution with rate parameter `λ`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.exponential.cdf.factory( 0.5 );\n    > var y = myCDF( 3.0 )\n    ~0.777\n\n","base.dists.exponential.cdf.factory":"\nbase.dists.exponential.cdf.factory( λ )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    for an exponential distribution with rate parameter `λ`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.exponential.cdf.factory( 0.5 );\n    > var y = myCDF( 3.0 )\n    ~0.777\n\n","base.dists.exponential.entropy":"\nbase.dists.exponential.entropy( λ )\n    Returns the differential entropy of an exponential distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dists.exponential.entropy( 11.0 )\n    ~-1.398\n    > v = base.dists.exponential.entropy( 4.5 )\n    ~-0.504\n\n","base.dists.exponential.Exponential":"\nbase.dists.exponential.Exponential( [λ] )\n    Returns an exponential distribution object.\n\n    Parameters\n    ----------\n    λ: number (optional)\n        Rate parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    exponential: Object\n        Distribution instance.\n\n    exponential.lambda: number\n        Rate parameter. If set, the value must be greater than `0`.\n\n    exponential.entropy: number\n        Read-only property which returns the differential entropy.\n\n    exponential.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    exponential.mean: number\n        Read-only property which returns the expected value.\n\n    exponential.median: number\n        Read-only property which returns the median.\n\n    exponential.mode: number\n        Read-only property which returns the mode.\n\n    exponential.skewness: number\n        Read-only property which returns the skewness.\n\n    exponential.stdev: number\n        Read-only property which returns the standard deviation.\n\n    exponential.variance: number\n        Read-only property which returns the variance.\n\n    exponential.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    exponential.logcdf: Function\n        Evaluates the natural logarithm of the cumulative distribution function\n        (CDF).\n\n    exponential.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    exponential.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    exponential.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    exponential.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var exponential = base.dists.exponential.Exponential( 6.0 );\n    > exponential.lambda\n    6.0\n    > exponential.entropy\n    ~-0.792\n    > exponential.kurtosis\n    6.0\n    > exponential.mean\n    ~0.167\n    > exponential.median\n    ~0.116\n    > exponential.mode\n    0.0\n    > exponential.skewness\n    2.0\n    > exponential.stdev\n    ~0.167\n    > exponential.variance\n    ~0.028\n    > exponential.cdf( 1.0 )\n    ~0.998\n    > exponential.logcdf( 1.0 )\n    ~-0.002\n    > exponential.logpdf( 1.5 )\n    ~-7.208\n    > exponential.mgf( -0.5 )\n    ~0.923\n    > exponential.pdf( 1.5 )\n    ~0.001\n    > exponential.quantile( 0.5 )\n    ~0.116\n\n","base.dists.exponential.kurtosis":"\nbase.dists.exponential.kurtosis( λ )\n    Returns the excess kurtosis of an exponential distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dists.exponential.kurtosis( 11.0 )\n    6.0\n    > v = base.dists.exponential.kurtosis( 4.5 )\n    6.0\n\n","base.dists.exponential.logcdf":"\nbase.dists.exponential.logcdf( x, λ )\n    Evaluates the natural logarithm of the cumulative distribution function\n    (CDF) for an exponential distribution with rate parameter `λ` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logCDF.\n\n    Examples\n    --------\n    > var y = base.dists.exponential.logcdf( 2.0, 0.1 )\n    ~-1.708\n    > y = base.dists.exponential.logcdf( 1.0, 2.0 )\n    ~-0.145\n    > y = base.dists.exponential.logcdf( -1.0, 4.0 )\n    -Infinity\n    > y = base.dists.exponential.logcdf( NaN, 1.0 )\n    NaN\n    > y = base.dists.exponential.logcdf( 0.0, NaN )\n    NaN\n\n    // Negative rate parameter:\n    > y = base.dists.exponential.logcdf( 2.0, -1.0 )\n    NaN\n\nbase.dists.exponential.logcdf.factory( λ )\n    Returns a function for evaluating the natural logarithm of the cumulative\n    distribution function (CDF) for an exponential distribution with rate\n    parameter `λ`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogCDF = base.dists.exponential.logcdf.factory( 0.5 );\n    > var y = mylogCDF( 3.0 )\n    ~-0.252\n\n","base.dists.exponential.logcdf.factory":"\nbase.dists.exponential.logcdf.factory( λ )\n    Returns a function for evaluating the natural logarithm of the cumulative\n    distribution function (CDF) for an exponential distribution with rate\n    parameter `λ`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogCDF = base.dists.exponential.logcdf.factory( 0.5 );\n    > var y = mylogCDF( 3.0 )\n    ~-0.252\n\n","base.dists.exponential.logpdf":"\nbase.dists.exponential.logpdf( x, λ )\n    Evaluates the natural logarithm of the probability density function (PDF)\n    for an exponential distribution with rate parameter `λ` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dists.exponential.logpdf( 0.3, 4.0 )\n    ~0.186\n    > y = base.dists.exponential.logpdf( 2.0, 0.7 )\n    ~-1.757\n    > y = base.dists.exponential.logpdf( -1.0, 0.5 )\n    -Infinity\n    > y = base.dists.exponential.logpdf( 0, NaN )\n    NaN\n    > y = base.dists.exponential.logpdf( NaN, 2.0 )\n    NaN\n\n    // Negative rate:\n    > y = base.dists.exponential.logpdf( 2.0, -1.0 )\n    NaN\n\nbase.dists.exponential.logpdf.factory( λ )\n    Returns a function for evaluating the natural logarithm of the probability\n    density function (PDF) for an exponential distribution with rate parameter\n    `λ`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogpdf = base.dists.exponential.logpdf.factory( 0.5 );\n    > var y = mylogpdf( 3.0 )\n    ~-2.193\n\n","base.dists.exponential.logpdf.factory":"\nbase.dists.exponential.logpdf.factory( λ )\n    Returns a function for evaluating the natural logarithm of the probability\n    density function (PDF) for an exponential distribution with rate parameter\n    `λ`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogpdf = base.dists.exponential.logpdf.factory( 0.5 );\n    > var y = mylogpdf( 3.0 )\n    ~-2.193\n\n","base.dists.exponential.mean":"\nbase.dists.exponential.mean( λ )\n    Returns the expected value of an exponential distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dists.exponential.mean( 11.0 )\n    ~0.091\n    > v = base.dists.exponential.mean( 4.5 )\n    ~0.222\n\n","base.dists.exponential.median":"\nbase.dists.exponential.median( λ )\n    Returns the median of an exponential distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var v = base.dists.exponential.median( 11.0 )\n    ~0.063\n    > v = base.dists.exponential.median( 4.5 )\n    ~0.154\n\n","base.dists.exponential.mgf":"\nbase.dists.exponential.mgf( t, λ )\n    Evaluates the moment-generating function (MGF) for an exponential\n    distribution with rate parameter `λ` at a value `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    t: number\n        Input value.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var v = base.dists.exponential.mgf( 2.0, 3.0 )\n    3.0\n    > v = base.dists.exponential.mgf( 0.4, 1.2 )\n    1.5\n    > v = base.dists.exponential.mgf( 0.8, 1.6 )\n    2.0\n    > v = base.dists.exponential.mgf( 4.0, 3.0 )\n    NaN\n    > v = base.dists.exponential.mgf( NaN, 3.0 )\n    NaN\n    > v = base.dists.exponential.mgf( 2.0, NaN )\n    NaN\n\n\nbase.dists.exponential.mgf.factory( λ )\n    Returns a function for evaluating the moment-generating function (MGF) for\n    an exponential distribution with rate parameter `λ`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    mg: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dists.exponential.mgf.factory( 4.0 );\n    > var y = myMGF( 3.0 )\n    4.0\n    > y = myMGF( 0.5 )\n    ~1.143\n\n","base.dists.exponential.mgf.factory":"\nbase.dists.exponential.mgf.factory( λ )\n    Returns a function for evaluating the moment-generating function (MGF) for\n    an exponential distribution with rate parameter `λ`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    mg: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dists.exponential.mgf.factory( 4.0 );\n    > var y = myMGF( 3.0 )\n    4.0\n    > y = myMGF( 0.5 )\n    ~1.143\n\n","base.dists.exponential.mode":"\nbase.dists.exponential.mode( λ )\n    Returns the mode of an exponential distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dists.exponential.mode( 11.0 )\n    0.0\n    > v = base.dists.exponential.mode( 4.5 )\n    0.0\n\n","base.dists.exponential.pdf":"\nbase.dists.exponential.pdf( x, λ )\n    Evaluates the probability density function (PDF) for an exponential\n    distribution with rate parameter `λ` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dists.exponential.pdf( 0.3, 4.0 )\n    ~1.205\n    > y = base.dists.exponential.pdf( 2.0, 0.7 )\n    ~0.173\n    > y = base.dists.exponential.pdf( -1.0, 0.5 )\n    0.0\n    > y = base.dists.exponential.pdf( 0, NaN )\n    NaN\n    > y = base.dists.exponential.pdf( NaN, 2.0 )\n    NaN\n\n    // Negative rate:\n    > y = base.dists.exponential.pdf( 2.0, -1.0 )\n    NaN\n\nbase.dists.exponential.pdf.factory( λ )\n    Returns a function for evaluating the probability density function (PDF)\n    for an exponential distribution with rate parameter `λ`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.exponential.pdf.factory( 0.5 );\n    > var y = myPDF( 3.0 )\n    ~0.112\n\n","base.dists.exponential.pdf.factory":"\nbase.dists.exponential.pdf.factory( λ )\n    Returns a function for evaluating the probability density function (PDF)\n    for an exponential distribution with rate parameter `λ`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.exponential.pdf.factory( 0.5 );\n    > var y = myPDF( 3.0 )\n    ~0.112\n\n","base.dists.exponential.quantile":"\nbase.dists.exponential.quantile( p, λ )\n    Evaluates the quantile function for an exponential distribution with rate\n    parameter `λ` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.exponential.quantile( 0.8, 1.0 )\n    ~1.609\n    > y = base.dists.exponential.quantile( 0.5, 4.0 )\n    ~0.173\n    > y = base.dists.exponential.quantile( 0.5, 0.1 )\n    ~6.931\n\n    > y = base.dists.exponential.quantile( -0.2, 0.1 )\n    NaN\n\n    > y = base.dists.exponential.quantile( NaN, 1.0 )\n    NaN\n    > y = base.dists.exponential.quantile( 0.0, NaN )\n    NaN\n\n    // Negative rate parameter:\n    > y = base.dists.exponential.quantile( 0.5, -1.0 )\n    NaN\n\n\nbase.dists.exponential.quantile.factory( λ )\n    Returns a function for evaluating the quantile function for an exponential\n    distribution with rate parameter `λ`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.exponential.quantile.factory( 0.4 );\n    > var y = myQuantile( 0.4 )\n    ~1.277\n    > y = myQuantile( 1.0 )\n    Infinity\n\n","base.dists.exponential.quantile.factory":"\nbase.dists.exponential.quantile.factory( λ )\n    Returns a function for evaluating the quantile function for an exponential\n    distribution with rate parameter `λ`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.exponential.quantile.factory( 0.4 );\n    > var y = myQuantile( 0.4 )\n    ~1.277\n    > y = myQuantile( 1.0 )\n    Infinity\n\n","base.dists.exponential.skewness":"\nbase.dists.exponential.skewness( λ )\n    Returns the skewness of an exponential distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dists.exponential.skewness( 11.0 )\n    2.0\n    > v = base.dists.exponential.skewness( 4.5 )\n    2.0\n\n","base.dists.exponential.stdev":"\nbase.dists.exponential.stdev( λ )\n    Returns the standard deviation of an exponential distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dists.exponential.stdev( 9.0 )\n    ~0.11\n    > v = base.dists.exponential.stdev( 1.0 )\n    1.0\n\n","base.dists.exponential.variance":"\nbase.dists.exponential.variance( λ )\n    Returns the variance of an exponential distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dists.exponential.variance( 9.0 )\n    ~0.012\n    > v = base.dists.exponential.variance( 1.0 )\n    1.0\n\n","base.dists.f.cdf":"\nbase.dists.f.cdf( x, d1, d2 )\n    Evaluates the cumulative distribution function (CDF) for an F distribution\n    with numerator degrees of freedom `d1` and denominator degrees of freedom\n    `d2` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `d1 <= 0` or `d2 <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.f.cdf( 2.0, 1.0, 1.0 )\n    ~0.608\n    > var y = base.dists.f.cdf( 2.0, 8.0, 4.0 )\n    ~0.737\n    > var y = base.dists.f.cdf( -1.0, 2.0, 2.0 )\n    0.0\n    > var y = base.dists.f.cdf( PINF, 4.0, 2.0 )\n    1.0\n    > var y = base.dists.f.cdf( NINF, 4.0, 2.0 )\n    0.0\n\n    > var y = base.dists.f.cdf( NaN, 1.0, 1.0 )\n    NaN\n    > var y = base.dists.f.cdf( 0.0, NaN, 1.0 )\n    NaN\n    > var y = base.dists.f.cdf( 0.0, 1.0, NaN )\n    NaN\n\n    > var y = base.dists.f.cdf( 2.0, 1.0, -1.0 )\n    NaN\n    > var y = base.dists.f.cdf( 2.0, -1.0, 1.0 )\n    NaN\n\n\nbase.dists.f.cdf.factory( d1, d2 )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of an F distribution with numerator degrees of freedom `d1` and denominator\n    degrees of freedom `d2`.\n\n    Parameters\n    ----------\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.f.cdf.factory( 10.0, 2.0 );\n    > var y = myCDF( 10.0 )\n    ~0.906\n    > y = myCDF( 8.0 )\n    ~0.884\n\n","base.dists.f.cdf.factory":"\nbase.dists.f.cdf.factory( d1, d2 )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of an F distribution with numerator degrees of freedom `d1` and denominator\n    degrees of freedom `d2`.\n\n    Parameters\n    ----------\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.f.cdf.factory( 10.0, 2.0 );\n    > var y = myCDF( 10.0 )\n    ~0.906\n    > y = myCDF( 8.0 )\n    ~0.884\n\n","base.dists.f.entropy":"\nbase.dists.f.entropy( d1, d2 )\n    Returns the differential entropy of an F distribution (in nats).\n\n    If `d1 <= 0` or `d2 <= 0`, the function returns `NaN`.\n\n    If `d1` or `d2` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dists.f.entropy( 3.0, 7.0 )\n    ~1.298\n    > v = base.dists.f.entropy( 4.0, 12.0 )\n    ~1.12\n    > v = base.dists.f.entropy( 8.0, 2.0 )\n    ~2.144\n\n","base.dists.f.F":"\nbase.dists.f.F( [d1, d2] )\n    Returns an F distribution object.\n\n    Parameters\n    ----------\n    d1: number (optional)\n        Numerator degrees of freedom. Must be greater than `0`. Default: `1.0`.\n\n    d2: number (optional)\n        Denominator degrees of freedom. Must be greater than `0`.\n        Default: `1.0`.\n\n    Returns\n    -------\n    f: Object\n        Distribution instance.\n\n    f.d1: number\n        Numerator degrees of freedom. If set, the value must be greater than\n        `0`.\n\n    f.d2: number\n        Denominator degrees of freedom. If set, the value must be greater than\n        `0`.\n\n    f.entropy: number\n        Read-only property which returns the differential entropy.\n\n    f.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    f.mean: number\n        Read-only property which returns the expected value.\n\n    f.mode: number\n        Read-only property which returns the mode.\n\n    f.skewness: number\n        Read-only property which returns the skewness.\n\n    f.stdev: number\n        Read-only property which returns the standard deviation.\n\n    f.variance: number\n        Read-only property which returns the variance.\n\n    f.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    f.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    f.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var f = base.dists.f.F( 6.0, 9.0 );\n    > f.d1\n    6.0\n    > f.d2\n    9.0\n    > f.entropy\n    ~1.134\n    > f.kurtosis\n    ~104.564\n    > f.mean\n    ~1.286\n    > f.mode\n    ~0.545\n    > f.skewness\n    ~4.535\n    > f.stdev\n    ~1.197\n    > f.variance\n    ~1.433\n    > f.cdf( 3.0 )\n    ~0.932\n    > f.pdf( 2.5 )\n    ~0.095\n    > f.quantile( 0.8 )\n    ~1.826\n\n","base.dists.f.kurtosis":"\nbase.dists.f.kurtosis( d1, d2 )\n    Returns the excess kurtosis of an F distribution.\n\n    If `d1 <= 0` or `d2 <= 8`, the function returns `NaN`.\n\n    If `d1` or `d2` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dists.f.kurtosis( 3.0, 9.0 )\n    ~124.667\n    > v = base.dists.f.kurtosis( 4.0, 12.0 )\n    ~26.143\n    > v = base.dists.f.kurtosis( 8.0, 9.0 )\n    ~100.167\n\n","base.dists.f.mean":"\nbase.dists.f.mean( d1, d2 )\n    Returns the expected value of an F distribution.\n\n    If `d1 <= 0` or `d2 <= 2`, the function returns `NaN`.\n\n    If `d1` or `d2` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dists.f.mean( 3.0, 5.0 )\n    ~1.667\n    > v = base.dists.f.mean( 4.0, 12.0 )\n    ~1.2\n    > v = base.dists.f.mean( 8.0, 4.0 )\n    2.0\n\n","base.dists.f.mode":"\nbase.dists.f.mode( d1, d2 )\n    Returns the mode of an F distribution.\n\n    If `d1 <= 2` or `d2 <= 0`, the function returns `NaN`.\n\n    If `d1` or `d2` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dists.f.mode( 3.0, 5.0 )\n    ~0.238\n    > v = base.dists.f.mode( 4.0, 12.0 )\n    ~0.429\n    > v = base.dists.f.mode( 8.0, 4.0 )\n    0.5\n\n","base.dists.f.pdf":"\nbase.dists.f.pdf( x, d1, d2 )\n    Evaluates the probability density function (PDF) for an F distribution with\n    numerator degrees of freedom `d1` and denominator degrees of freedom `d2` at\n    a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `d1 <= 0` or `d2 <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dists.f.pdf( 2.0, 0.5, 1.0 )\n    ~0.057\n    > y = base.dists.f.pdf( 0.1, 1.0, 1.0 )\n    ~0.915\n    > y = base.dists.f.pdf( -1.0, 4.0, 2.0 )\n    0.0\n\n    > y = base.dists.f.pdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.f.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.f.pdf( 0.0, 1.0, NaN )\n    NaN\n\n    > y = base.dists.f.pdf( 2.0, 1.0, -1.0 )\n    NaN\n    > y = base.dists.f.pdf( 2.0, -1.0, 1.0 )\n    NaN\n\n\nbase.dists.f.pdf.factory( d1, d2 )\n    Returns a function for evaluating the probability density function (PDF) of\n    an F distribution with numerator degrees of freedom `d1` and denominator\n    degrees of freedom `d2`.\n\n    Parameters\n    ----------\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.f.pdf.factory( 6.0, 7.0 );\n    > var y = myPDF( 7.0 )\n    ~0.004\n    > y = myPDF( 2.0 )\n    ~0.166\n\n","base.dists.f.pdf.factory":"\nbase.dists.f.pdf.factory( d1, d2 )\n    Returns a function for evaluating the probability density function (PDF) of\n    an F distribution with numerator degrees of freedom `d1` and denominator\n    degrees of freedom `d2`.\n\n    Parameters\n    ----------\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.f.pdf.factory( 6.0, 7.0 );\n    > var y = myPDF( 7.0 )\n    ~0.004\n    > y = myPDF( 2.0 )\n    ~0.166\n\n","base.dists.f.quantile":"\nbase.dists.f.quantile( p, d1, d2 )\n    Evaluates the quantile function for an F distribution with numerator degrees\n    of freedom `d1` and denominator degrees of freedom `d2` at a probability\n    `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `d1 <= 0` or `d2 <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.f.quantile( 0.8, 1.0, 1.0 )\n    ~9.472\n    > y = base.dists.f.quantile( 0.5, 4.0, 2.0 )\n    ~1.207\n\n    > y = base.dists.f.quantile( 1.1, 1.0, 1.0 )\n    NaN\n    > y = base.dists.f.quantile( -0.2, 1.0, 1.0 )\n    NaN\n\n    > y = base.dists.f.quantile( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.f.quantile( 0.5, NaN, 1.0 )\n    NaN\n    > y = base.dists.f.quantile( 0.5, 1.0, NaN )\n    NaN\n\n    > y = base.dists.f.quantile( 0.5, -1.0, 1.0 )\n    NaN\n    > y = base.dists.f.quantile( 0.5, 1.0, -1.0 )\n    NaN\n\n\nbase.dists.f.quantile.factory( d1, d2 )\n    Returns a function for evaluating the quantile function of an F distribution\n    with numerator degrees of freedom `d1` and denominator degrees of freedom\n    `d2`.\n\n    Parameters\n    ----------\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.f.quantile.factory( 10.0, 2.0 );\n    > var y = myQuantile( 0.2 )\n    ~0.527\n    > y = myQuantile( 0.8 )\n    ~4.382\n\n","base.dists.f.quantile.factory":"\nbase.dists.f.quantile.factory( d1, d2 )\n    Returns a function for evaluating the quantile function of an F distribution\n    with numerator degrees of freedom `d1` and denominator degrees of freedom\n    `d2`.\n\n    Parameters\n    ----------\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.f.quantile.factory( 10.0, 2.0 );\n    > var y = myQuantile( 0.2 )\n    ~0.527\n    > y = myQuantile( 0.8 )\n    ~4.382\n\n","base.dists.f.skewness":"\nbase.dists.f.skewness( d1, d2 )\n    Returns the skewness of an F distribution.\n\n    If `d1 <= 0` or `d2 <= 6`, the function returns `NaN`.\n\n    If `d1` or `d2` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dists.f.skewness( 3.0, 7.0 )\n    11.0\n    > v = base.dists.f.skewness( 4.0, 12.0 )\n    ~3.207\n    > v = base.dists.f.skewness( 8.0, 7.0 )\n    ~10.088\n\n","base.dists.f.stdev":"\nbase.dists.f.stdev( d1, d2 )\n    Returns the standard deviation of an F distribution.\n\n    If `d1 <= 0` or `d2 <= 4`, the function returns `NaN`.\n\n    If `d1` or `d2` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dists.f.stdev( 3.0, 5.0 )\n    ~3.333\n    > v = base.dists.f.stdev( 4.0, 12.0 )\n    ~1.122\n    > v = base.dists.f.stdev( 8.0, 5.0 )\n    ~2.764\n\n","base.dists.f.variance":"\nbase.dists.f.variance( d1, d2 )\n    Returns the variance of an F distribution.\n\n    If `d1 <= 0` or `d2 <= 4`, the function returns `NaN`.\n\n    If `d1` or `d2` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    d1: number\n        Numerator degrees of freedom.\n\n    d2: number\n        Denominator degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dists.f.variance( 3.0, 5.0 )\n    ~11.111\n    > v = base.dists.f.variance( 4.0, 12.0 )\n    ~1.26\n    > v = base.dists.f.variance( 8.0, 5.0 )\n    ~7.639\n\n","base.dists.frechet.cdf":"\nbase.dists.frechet.cdf( x, α, s, m )\n    Evaluates the cumulative distribution function (CDF) for a Fréchet\n    distribution with shape parameter `α`, scale parameter `s`, and location\n    `m`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `α <= 0` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.frechet.cdf( 10.0, 2.0, 3.0, 0.0 )\n    ~0.914\n    > y = base.dists.frechet.cdf( -1.0, 2.0, 3.0, -3.0 )\n    ~0.105\n    > y = base.dists.frechet.cdf( 2.5, 2.0, 1.0, 2.0 )\n    ~0.018\n    > y = base.dists.frechet.cdf( NaN, 1.0, 1.0, 0.0 )\n    NaN\n    > y = base.dists.frechet.cdf( 0.0, NaN, 1.0, 0.0 )\n    NaN\n    > y = base.dists.frechet.cdf( 0.0, 1.0, NaN, 0.0 )\n    NaN\n    > y = base.dists.frechet.cdf( 0.0, 1.0, 1.0, NaN )\n    NaN\n    > y = base.dists.frechet.cdf( 0.0, -1.0, 1.0, 0.0 )\n    NaN\n    > y = base.dists.frechet.cdf( 0.0, 1.0, -1.0, 0.0 )\n    NaN\n\n\nbase.dists.frechet.cdf.factory( α, s, m )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Fréchet distribution with shape parameter `α`, scale parameter `s`, and\n    location `m`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.frechet.cdf.factory( 3.0, 3.0, 5.0 );\n    > var y = myCDF( 10.0 )\n    ~0.806\n    > y = myCDF( 7.0 )\n    ~0.034\n\n","base.dists.frechet.cdf.factory":"\nbase.dists.frechet.cdf.factory( α, s, m )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Fréchet distribution with shape parameter `α`, scale parameter `s`, and\n    location `m`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.frechet.cdf.factory( 3.0, 3.0, 5.0 );\n    > var y = myCDF( 10.0 )\n    ~0.806\n    > y = myCDF( 7.0 )\n    ~0.034\n\n","base.dists.frechet.entropy":"\nbase.dists.frechet.entropy( α, s, m )\n    Returns the differential entropy of a Fréchet distribution with shape\n    parameter `α`, scale parameter `s`, and location `m` (in nats).\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `α <= 0` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var y = base.dists.frechet.entropy( 1.0, 1.0, 1.0 )\n    ~2.154\n    > y = base.dists.frechet.entropy( 4.0, 2.0, 1.0 )\n    ~1.028\n    > y = base.dists.frechet.entropy( NaN, 1.0, 0.0 )\n    NaN\n    > y = base.dists.frechet.entropy( 1.0, NaN, 0.0 )\n    NaN\n    > y = base.dists.frechet.entropy( 1.0, 1.0, NaN )\n    NaN\n\n","base.dists.frechet.Frechet":"\nbase.dists.frechet.Frechet( [α, s, m] )\n    Returns a Fréchet distribution object.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter. Must be greater than `0`. Default: `1.0`.\n\n    s: number (optional)\n        Scale parameter. Must be greater than `0`. Default: `1.0`.\n\n    m: number (optional)\n        Location parameter. Default: `0.0`.\n\n    Returns\n    -------\n    frechet: Object\n        Distribution instance.\n\n    frechet.alpha: number\n        Shape parameter. If set, the value must be greater than `0`.\n\n    frechet.s: number\n        Scale parameter. If set, the value must be greater than `0`.\n\n    frechet.m: number\n        Location parameter.\n\n    frechet.entropy: number\n        Read-only property which returns the differential entropy.\n\n    frechet.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    frechet.mean: number\n        Read-only property which returns the expected value.\n\n    frechet.median: number\n        Read-only property which returns the median.\n\n    frechet.mode: number\n        Read-only property which returns the mode.\n\n    frechet.skewness: number\n        Read-only property which returns the skewness.\n\n    frechet.stdev: number\n        Read-only property which returns the standard deviation.\n\n    frechet.variance: number\n        Read-only property which returns the variance.\n\n    frechet.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    frechet.logcdf: Function\n        Evaluates the natural logarithm of the cumulative distribution function\n        (CDF).\n\n    frechet.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    frechet.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    frechet.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var frechet = base.dists.frechet.Frechet( 1.0, 1.0, 0.0 );\n    > frechet.alpha\n    1.0\n    > frechet.s\n    1.0\n    > frechet.m\n    0.0\n    > frechet.entropy\n    ~2.154\n    > frechet.kurtosis\n    Infinity\n    > frechet.mean\n    Infinity\n    > frechet.median\n    ~1.443\n    > frechet.mode\n    0.5\n    > frechet.skewness\n    Infinity\n    > frechet.stdev\n    Infinity\n    > frechet.variance\n    Infinity\n    > frechet.cdf( 0.8 )\n    ~0.287\n    > frechet.logcdf( 0.8 )\n    -1.25\n    > frechet.logpdf( 0.8 )\n    ~-0.804\n    > frechet.pdf( 0.8 )\n    ~0.448\n    > frechet.quantile( 0.8 )\n    ~4.481\n\n","base.dists.frechet.kurtosis":"\nbase.dists.frechet.kurtosis( α, s, m )\n    Returns the excess kurtosis of a Fréchet distribution with shape parameter\n    `α`, scale parameter `s`, and location `m`.\n\n    If provided `0 < α <= 4` and `s > 0`, the function returns positive\n    infinity.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `α <= 0` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var y = base.dists.frechet.kurtosis( 5.0, 2.0, 1.0 )\n    ~45.092\n    > var y = base.dists.frechet.kurtosis( 5.0, 10.0, -3.0 )\n    ~45.092\n    > y = base.dists.frechet.kurtosis( 3.5, 2.0, 1.0 )\n    Infinity\n    > y = base.dists.frechet.kurtosis( NaN, 1.0, 0.0 )\n    NaN\n    > y = base.dists.frechet.kurtosis( 1.0, NaN, 0.0 )\n    NaN\n    > y = base.dists.frechet.kurtosis( 1.0, 1.0, NaN )\n    NaN\n\n","base.dists.frechet.logcdf":"\nbase.dists.frechet.logcdf( x, α, s, m )\n    Evaluates the natural logarithm of the cumulative distribution function\n    (CDF) for a Fréchet distribution with shape parameter `α`, scale parameter\n    `s`, and location `m`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `α <= 0` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logCDF.\n\n    Examples\n    --------\n    > var y = base.dists.frechet.logcdf( 10.0, 2.0, 3.0, 0.0 )\n    ~-0.09\n    > y = base.dists.frechet.logcdf( -1.0, 2.0, 3.0, -3.0 )\n    ~-2.25\n    > y = base.dists.frechet.logcdf( 2.5, 2.0, 1.0, 2.0 )\n    -4.0\n    > y = base.dists.frechet.logcdf( NaN, 1.0, 1.0, 0.0 )\n    NaN\n    > y = base.dists.frechet.logcdf( 0.0, NaN, 1.0, 0.0 )\n    NaN\n    > y = base.dists.frechet.logcdf( 0.0, 1.0, NaN, 0.0 )\n    NaN\n    > y = base.dists.frechet.logcdf( 0.0, 1.0, 1.0, NaN )\n    NaN\n    > y = base.dists.frechet.logcdf( 0.0, -1.0, 1.0, 0.0 )\n    NaN\n    > y = base.dists.frechet.logcdf( 0.0, 1.0, -1.0, 0.0 )\n    NaN\n\n\nbase.dists.frechet.logcdf.factory( α, s, m )\n    Returns a function for evaluating the natural logarithm of the cumulative\n    distribution function (CDF) of a Fréchet distribution with shape parameter\n    `α`, scale parameter `s`, and location `m`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.frechet.logcdf.factory( 3.0, 3.0, 5.0 );\n    > var y = mylogcdf( 10.0 )\n    ~-0.216\n    > y = mylogcdf( 7.0 )\n    ~-3.375\n\n","base.dists.frechet.logcdf.factory":"\nbase.dists.frechet.logcdf.factory( α, s, m )\n    Returns a function for evaluating the natural logarithm of the cumulative\n    distribution function (CDF) of a Fréchet distribution with shape parameter\n    `α`, scale parameter `s`, and location `m`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.frechet.logcdf.factory( 3.0, 3.0, 5.0 );\n    > var y = mylogcdf( 10.0 )\n    ~-0.216\n    > y = mylogcdf( 7.0 )\n    ~-3.375\n\n","base.dists.frechet.logpdf":"\nbase.dists.frechet.logpdf( x, α, s, m )\n    Evaluates the logarithm of the probability density function (PDF) for a\n    Fréchet distribution with shape parameter `α`, scale parameter `s`, and\n    location `m`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `α <= 0` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dists.frechet.logpdf( 10.0, 1.0, 3.0, 5.0 )\n    ~-2.72\n    > y = base.dists.frechet.logpdf( -2.0, 1.0, 3.0, -3.0 )\n    ~-1.901\n    > y = base.dists.frechet.logpdf( 0.0, 2.0, 1.0, -1.0 )\n    ~-0.307\n    > y = base.dists.frechet.logpdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.frechet.logpdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.frechet.logpdf( 0.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dists.frechet.logpdf( 0.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dists.frechet.logpdf.factory( α, s, m )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a Fréchet distribution with shape parameter `α`, scale\n    parameter `s`, and location `m`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogPDF = base.dists.frechet.logpdf.factory( 2.0, 3.0, 1.0 );\n    > var y = mylogPDF( 10.0 )\n    ~-3.812\n    > y = mylogPDF( 2.0 )\n    ~-6.11\n\n","base.dists.frechet.logpdf.factory":"\nbase.dists.frechet.logpdf.factory( α, s, m )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a Fréchet distribution with shape parameter `α`, scale\n    parameter `s`, and location `m`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogPDF = base.dists.frechet.logpdf.factory( 2.0, 3.0, 1.0 );\n    > var y = mylogPDF( 10.0 )\n    ~-3.812\n    > y = mylogPDF( 2.0 )\n    ~-6.11\n\n","base.dists.frechet.mean":"\nbase.dists.frechet.mean( α, s, m )\n    Returns the expected value of a Fréchet distribution with shape parameter\n    `α`, scale parameter `s`, and location `m`.\n\n    If provided `0 < α <= 1` and `s > 0`, the function returns positive\n    infinity.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `α <= 0` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    out: number\n        Mean.\n\n    Examples\n    --------\n    > var y = base.dists.frechet.mean( 4.0, 2.0, 1.0 )\n    ~3.451\n    > y = base.dists.frechet.mean( 0.5, 2.0, 1.0 )\n    Infinity\n    > y = base.dists.frechet.mean( NaN, 1.0, 0.0 )\n    NaN\n    > y = base.dists.frechet.mean( 1.0, NaN, 0.0 )\n    NaN\n    > y = base.dists.frechet.mean( 1.0, 1.0, NaN )\n    NaN\n\n","base.dists.frechet.median":"\nbase.dists.frechet.median( α, s, m )\n    Returns the median of a Fréchet distribution with shape parameter\n    `α`, scale parameter `s`, and location `m`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `α <= 0` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var y = base.dists.frechet.median( 4.0, 2.0, 1.0 )\n    ~3.192\n    > var y = base.dists.frechet.median( 4.0, 2.0, -3.0 )\n    ~-0.808\n    > y = base.dists.frechet.median( 0.5, 2.0, 1.0 )\n    ~5.163\n    > y = base.dists.frechet.median( NaN, 1.0, 0.0 )\n    NaN\n    > y = base.dists.frechet.median( 1.0, NaN, 0.0 )\n    NaN\n    > y = base.dists.frechet.median( 1.0, 1.0, NaN )\n    NaN\n\n","base.dists.frechet.mode":"\nbase.dists.frechet.mode( α, s, m )\n    Returns the mode of a Fréchet distribution with shape parameter `α`, scale\n    parameter `s`, and location `m`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `α <= 0` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var y = base.dists.frechet.mode( 4.0, 2.0, 1.0 )\n    ~2.891\n    > var y = base.dists.frechet.mode( 4.0, 2.0, -3.0 )\n    ~-1.109\n    > y = base.dists.frechet.mode( 0.5, 2.0, 1.0 )\n    ~1.222\n    > y = base.dists.frechet.mode( NaN, 1.0, 0.0 )\n    NaN\n    > y = base.dists.frechet.mode( 1.0, NaN, 0.0 )\n    NaN\n    > y = base.dists.frechet.mode( 1.0, 1.0, NaN )\n    NaN\n\n","base.dists.frechet.pdf":"\nbase.dists.frechet.pdf( x, α, s, m )\n    Evaluates the probability density function (PDF) for a Fréchet distribution\n    with shape parameter `α`, scale parameter `s`, and location `m`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `α <= 0` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dists.frechet.pdf( 10.0, 0.0, 3.0 )\n    ~0.965\n    > y = base.dists.frechet.pdf( -2.0, 0.0, 3.0 )\n    ~0.143\n    > y = base.dists.frechet.pdf( 0.0, 0.0, 1.0 )\n    ~0.368\n    > y = base.dists.frechet.pdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.frechet.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.frechet.pdf( 0.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dists.frechet.pdf( 0.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dists.frechet.pdf.factory( α, s, m )\n    Returns a function for evaluating the probability density function (PDF) of\n    a Fréchet distribution with shape parameter `α`, scale parameter `s`, and\n    location `m`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.frechet.pdf.factory( 2.0, 3.0 );\n    > var y = myPDF( 10.0 )\n    ~0.933\n    > y = myPDF( 2.0 )\n    ~0.368\n\n","base.dists.frechet.pdf.factory":"\nbase.dists.frechet.pdf.factory( α, s, m )\n    Returns a function for evaluating the probability density function (PDF) of\n    a Fréchet distribution with shape parameter `α`, scale parameter `s`, and\n    location `m`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.frechet.pdf.factory( 2.0, 3.0 );\n    > var y = myPDF( 10.0 )\n    ~0.933\n    > y = myPDF( 2.0 )\n    ~0.368\n\n","base.dists.frechet.quantile":"\nbase.dists.frechet.quantile( p, α, s, m )\n    Evaluates the quantile function for a Fréchet distribution with shape\n    parameter `α`, scale parameter `s`, and location `m`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `α <= 0` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.frechet.quantile( 0.3, 10.0, 2.0, 3.0 )\n    ~4.963\n    > y = base.dists.frechet.quantile( 0.2, 3.0, 3.0, 3.0 )\n    ~5.56\n    > y = base.dists.frechet.quantile( 0.9, 1.0, 1.0, -3.0 )\n    ~6.491\n    > y = base.dists.frechet.quantile( NaN, 1.0, 1.0, 0.0 )\n    NaN\n    > y = base.dists.frechet.quantile( 0.0, NaN, 1.0, 0.0)\n    NaN\n    > y = base.dists.frechet.quantile( 0.0, 1.0, NaN, 0.0 )\n    NaN\n    > y = base.dists.frechet.quantile( 0.0, 1.0, 1.0, NaN )\n    NaN\n    > y = base.dists.frechet.quantile( 0.0, -1.0, 1.0, 0.0 )\n    NaN\n    > y = base.dists.frechet.quantile( 0.0, 1.0, -1.0, 0.0 )\n    NaN\n\n\nbase.dists.frechet.quantile.factory( α, s, m )\n    Returns a function for evaluating the quantile function of a Fréchet\n    distribution with shape parameter `α`, scale parameter `s`, and location\n    `m`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.frechet.quantile.factory( 2.0, 2.0, 3.0 );\n    > var y = myQuantile( 0.5 )\n    ~5.402\n    > y = myQuantile( 0.2 )\n    ~4.576\n\n","base.dists.frechet.quantile.factory":"\nbase.dists.frechet.quantile.factory( α, s, m )\n    Returns a function for evaluating the quantile function of a Fréchet\n    distribution with shape parameter `α`, scale parameter `s`, and location\n    `m`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.frechet.quantile.factory( 2.0, 2.0, 3.0 );\n    > var y = myQuantile( 0.5 )\n    ~5.402\n    > y = myQuantile( 0.2 )\n    ~4.576\n\n","base.dists.frechet.skewness":"\nbase.dists.frechet.skewness( α, s, m )\n    Returns the skewness of a Fréchet distribution with shape parameter `α`,\n    scale parameter `s`, and location `m`.\n\n    If provided `0 < α <= 3` and `s > 0`, the function returns positive\n    infinity.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `α <= 0` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var y = base.dists.frechet.skewness( 4.0, 2.0, 1.0 )\n    ~5.605\n    > var y = base.dists.frechet.skewness( 4.0, 2.0, -3.0 )\n    ~5.605\n    > y = base.dists.frechet.skewness( 0.5, 2.0, 1.0 )\n    Infinity\n    > y = base.dists.frechet.skewness( NaN, 1.0, 0.0 )\n    NaN\n    > y = base.dists.frechet.skewness( 1.0, NaN, 0.0 )\n    NaN\n    > y = base.dists.frechet.skewness( 1.0, 1.0, NaN )\n    NaN\n\n","base.dists.frechet.stdev":"\nbase.dists.frechet.stdev( α, s, m )\n    Returns the standard deviation of a Fréchet distribution with shape\n    parameter `α`, scale parameter `s`, and location `m`.\n\n    If provided `0 < α <= 2` and `s > 0`, the function returns positive\n    infinity.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `α <= 0` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var y = base.dists.frechet.stdev( 4.0, 2.0, 1.0 )\n    ~1.041\n    > var y = base.dists.frechet.stdev( 4.0, 2.0, -3.0 )\n    ~1.041\n    > y = base.dists.frechet.stdev( 0.5, 2.0, 1.0 )\n    Infinity\n    > y = base.dists.frechet.stdev( NaN, 1.0, 0.0 )\n    NaN\n    > y = base.dists.frechet.stdev( 1.0, NaN, 0.0 )\n    NaN\n    > y = base.dists.frechet.stdev( 1.0, 1.0, NaN )\n    NaN\n\n","base.dists.frechet.variance":"\nbase.dists.frechet.variance( α, s, m )\n    Returns the variance of a Fréchet distribution with shape parameter `α`,\n    scale parameter `s`, and location `m`.\n\n    If provided `0 < α <= 2` and `s > 0`, the function returns positive\n    infinity.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `α <= 0` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var y = base.dists.frechet.variance( 4.0, 2.0, 1.0 )\n    ~1.083\n    > var y = base.dists.frechet.variance( 4.0, 2.0, -3.0 )\n    ~1.083\n    > y = base.dists.frechet.variance( 0.5, 2.0, 1.0 )\n    Infinity\n    > y = base.dists.frechet.variance( NaN, 1.0, 0.0 )\n    NaN\n    > y = base.dists.frechet.variance( 1.0, NaN, 0.0 )\n    NaN\n    > y = base.dists.frechet.variance( 1.0, 1.0, NaN )\n    NaN\n\n","base.dists.gamma.cdf":"\nbase.dists.gamma.cdf( x, α, β )\n    Evaluates the cumulative distribution function (CDF) for a gamma\n    distribution with shape parameter `α` and rate parameter `β` at a value `x`.\n\n    If `α < 0` or `β <= 0`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.gamma.cdf( 2.0, 1.0, 1.0 )\n    ~0.865\n    > y = base.dists.gamma.cdf( 2.0, 3.0, 1.0 )\n    ~0.323\n    > y = base.dists.gamma.cdf( -1.0, 2.0, 2.0 )\n    0.0\n    > y = base.dists.gamma.cdf( PINF, 4.0, 2.0 )\n    1.0\n    > y = base.dists.gamma.cdf( NINF, 4.0, 2.0 )\n    0.0\n\n    > y = base.dists.gamma.cdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.gamma.cdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.gamma.cdf( 0.0, 0.0, NaN )\n    NaN\n\n    > y = base.dists.gamma.cdf( 2.0, -1.0, 1.0 )\n    NaN\n    > y = base.dists.gamma.cdf( 2.0, 1.0, -1.0 )\n    NaN\n\n    // Degenerate distribution centered at `0` when `α = 0.0`:\n    > y = base.dists.gamma.cdf( 2.0, 0.0, 2.0 )\n    1.0\n    > y = base.dists.gamma.cdf( -2.0, 0.0, 2.0 )\n    0.0\n    > y = base.dists.gamma.cdf( 0.0, 0.0, 2.0 )\n    0.0\n\n\nbase.dists.gamma.cdf.factory( α, β )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a gamma distribution with shape parameter `α` and rate parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.gamma.cdf.factory( 2.0, 0.5 );\n    > var y = myCDF( 6.0 )\n    ~0.801\n    > y = myCDF( 2.0 )\n    ~0.264\n\n","base.dists.gamma.cdf.factory":"\nbase.dists.gamma.cdf.factory( α, β )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a gamma distribution with shape parameter `α` and rate parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.gamma.cdf.factory( 2.0, 0.5 );\n    > var y = myCDF( 6.0 )\n    ~0.801\n    > y = myCDF( 2.0 )\n    ~0.264\n\n","base.dists.gamma.entropy":"\nbase.dists.gamma.entropy( α, β )\n    Returns the differential entropy of a gamma distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dists.gamma.entropy( 1.0, 1.0 )\n    1.0\n    > v = base.dists.gamma.entropy( 4.0, 12.0 )\n    ~-0.462\n    > v = base.dists.gamma.entropy( 8.0, 2.0 )\n    ~1.723\n\n","base.dists.gamma.Gamma":"\nbase.dists.gamma.Gamma( [α, β] )\n    Returns a gamma distribution object.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter. Must be greater than `0`. Default: `1.0`.\n\n    β: number (optional)\n        Rate parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    gamma: Object\n        Distribution instance.\n\n    gamma.alpha: number\n        Shape parameter. If set, the value must be greater than `0`.\n\n    gamma.beta: number\n        Rate parameter. If set, the value must be greater than `0`.\n\n    gamma.entropy: number\n        Read-only property which returns the differential entropy.\n\n    gamma.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    gamma.mean: number\n        Read-only property which returns the expected value.\n\n    gamma.mode: number\n        Read-only property which returns the mode.\n\n    gamma.skewness: number\n        Read-only property which returns the skewness.\n\n    gamma.stdev: number\n        Read-only property which returns the standard deviation.\n\n    gamma.variance: number\n        Read-only property which returns the variance.\n\n    gamma.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    gamma.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    gamma.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    gamma.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    gamma.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var gamma = base.dists.gamma.Gamma( 6.0, 5.0 );\n    > gamma.alpha\n    6.0\n    > gamma.beta\n    5.0\n    > gamma.entropy\n    ~0.647\n    > gamma.kurtosis\n    1.0\n    > gamma.mean\n    1.2\n    > gamma.mode\n    1.0\n    > gamma.skewness\n    ~0.816\n    > gamma.stdev\n    ~0.49\n    > gamma.variance\n    0.24\n    > gamma.cdf( 0.8 )\n    ~0.215\n    > gamma.logpdf( 1.0 )\n    ~-0.131\n    > gamma.mgf( -0.5 )\n    ~0.564\n    > gamma.pdf( 1.0 )\n    ~0.877\n    > gamma.quantile( 0.8 )\n    ~1.581\n\n","base.dists.gamma.kurtosis":"\nbase.dists.gamma.kurtosis( α, β )\n    Returns the excess kurtosis of a gamma distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dists.gamma.kurtosis( 1.0, 1.0 )\n    6.0\n    > v = base.dists.gamma.kurtosis( 4.0, 12.0 )\n    1.5\n    > v = base.dists.gamma.kurtosis( 8.0, 2.0 )\n    0.75\n\n","base.dists.gamma.logpdf":"\nbase.dists.gamma.logpdf( x, α, β )\n    Evaluates the logarithm of the probability density function (PDF) for a\n    gamma distribution with shape parameter `α` and rate parameter `β` at a\n    value `x`.\n\n    If `α < 0` or `β <= 0`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dists.gamma.logpdf( 2.0, 0.5, 1.0 )\n    ~-2.919\n    > y = base.dists.gamma.logpdf( 0.1, 1.0, 1.0 )\n    ~-0.1\n    > y = base.dists.gamma.logpdf( -1.0, 4.0, 2.0 )\n    -Infinity\n\n    > y = base.dists.gamma.logpdf( NaN, 0.6, 1.0 )\n    NaN\n    > y = base.dists.gamma.logpdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.gamma.logpdf( 0.0, 1.0, NaN )\n    NaN\n\n    // Negative shape parameter:\n    > y = base.dists.gamma.logpdf( 2.0, -1.0, 1.0 )\n    NaN\n    // Non-positive rate parameter:\n    > y = base.dists.gamma.logpdf( 2.0, 1.0, -1.0 )\n    NaN\n\n    // Degenerate distribution centered at `0.0` when `α = 0.0`:\n    > y = base.dists.gamma.logpdf( 2.0, 0.0, 2.0 )\n    -Infinity\n    > y = base.dists.gamma.logpdf( 0.0, 0.0, 2.0 )\n    Infinity\n\n\nbase.dists.gamma.logpdf.factory( α, β )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a gamma distribution with shape parameter `α` and rate\n    parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogPDF = base.dists.gamma.logpdf.factory( 6.0, 7.0 );\n    > var y = mylogPDF( 2.0 )\n    ~-3.646\n\n","base.dists.gamma.logpdf.factory":"\nbase.dists.gamma.logpdf.factory( α, β )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a gamma distribution with shape parameter `α` and rate\n    parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogPDF = base.dists.gamma.logpdf.factory( 6.0, 7.0 );\n    > var y = mylogPDF( 2.0 )\n    ~-3.646\n\n","base.dists.gamma.mean":"\nbase.dists.gamma.mean( α, β )\n    Returns the expected value of a gamma distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dists.gamma.mean( 1.0, 1.0 )\n    1.0\n    > v = base.dists.gamma.mean( 4.0, 12.0 )\n    ~0.333\n    > v = base.dists.gamma.mean( 8.0, 2.0 )\n    4.0\n\n","base.dists.gamma.mgf":"\nbase.dists.gamma.mgf( t, α, β )\n    Evaluates the moment-generating function (MGF) for a gamma distribution with\n    shape parameter `α` and rate parameter `β` at a value `t`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    t: number\n        Input value.\n\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dists.gamma.mgf( 0.5, 0.5, 1.0 )\n    ~1.414\n    > y = base.dists.gamma.mgf( 0.1, 1.0, 1.0 )\n    ~1.111\n    > y = base.dists.gamma.mgf( -1.0, 4.0, 2.0 )\n    ~0.198\n\n    > y = base.dists.gamma.mgf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.gamma.mgf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.gamma.mgf( 0.0, 1.0, NaN )\n    NaN\n\n    > y = base.dists.gamma.mgf( 2.0, 4.0, 1.0 )\n    NaN\n    > y = base.dists.gamma.mgf( 2.0, -0.5, 1.0 )\n    NaN\n    > y = base.dists.gamma.mgf( 2.0, 1.0, 0.0 )\n    NaN\n    > y = base.dists.gamma.mgf( 2.0, 1.0, -1.0 )\n    NaN\n\n\nbase.dists.gamma.mgf.factory( α, β )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    gamma distribution with shape parameter `α` and rate parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dists.gamma.mgf.factory( 3.0, 1.5 );\n    > var y = myMGF( 1.0 )\n    ~27.0\n    > y = myMGF( 0.5 )\n    ~3.375\n\n","base.dists.gamma.mgf.factory":"\nbase.dists.gamma.mgf.factory( α, β )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    gamma distribution with shape parameter `α` and rate parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dists.gamma.mgf.factory( 3.0, 1.5 );\n    > var y = myMGF( 1.0 )\n    ~27.0\n    > y = myMGF( 0.5 )\n    ~3.375\n\n","base.dists.gamma.mode":"\nbase.dists.gamma.mode( α, β )\n    Returns the mode of a gamma distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dists.gamma.mode( 1.0, 1.0 )\n    0.0\n    > v = base.dists.gamma.mode( 4.0, 12.0 )\n    0.25\n    > v = base.dists.gamma.mode( 8.0, 2.0 )\n    3.5\n\n","base.dists.gamma.pdf":"\nbase.dists.gamma.pdf( x, α, β )\n    Evaluates the probability density function (PDF) for a gamma distribution\n    with shape parameter `α` and rate parameter `β` at a value `x`.\n\n    If `α < 0` or `β <= 0`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dists.gamma.pdf( 2.0, 0.5, 1.0 )\n    ~0.054\n    > y = base.dists.gamma.pdf( 0.1, 1.0, 1.0 )\n    ~0.905\n    > y = base.dists.gamma.pdf( -1.0, 4.0, 2.0 )\n    0.0\n\n    > y = base.dists.gamma.pdf( NaN, 0.6, 1.0 )\n    NaN\n    > y = base.dists.gamma.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.gamma.pdf( 0.0, 1.0, NaN )\n    NaN\n\n    // Negative shape parameter:\n    > y = base.dists.gamma.pdf( 2.0, -1.0, 1.0 )\n    NaN\n    // Non-positive rate parameter:\n    > y = base.dists.gamma.pdf( 2.0, 1.0, -1.0 )\n    NaN\n\n    // Degenerate distribution centered at `0.0` when `α = 0.0`:\n    > y = base.dists.gamma.pdf( 2.0, 0.0, 2.0 )\n    0.0\n    > y = base.dists.gamma.pdf( 0.0, 0.0, 2.0 )\n    Infinity\n\n\nbase.dists.gamma.pdf.factory( α, β )\n    Returns a function for evaluating the probability density function (PDF) of\n    a gamma distribution with shape parameter `α` and rate parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.gamma.pdf.factory( 6.0, 7.0 );\n    > var y = myPDF( 2.0 )\n    ~0.026\n\n","base.dists.gamma.pdf.factory":"\nbase.dists.gamma.pdf.factory( α, β )\n    Returns a function for evaluating the probability density function (PDF) of\n    a gamma distribution with shape parameter `α` and rate parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.gamma.pdf.factory( 6.0, 7.0 );\n    > var y = myPDF( 2.0 )\n    ~0.026\n\n","base.dists.gamma.quantile":"\nbase.dists.gamma.quantile( p, α, β )\n    Evaluates the quantile function for a gamma distribution with shape\n    parameter `α` and rate parameter `β` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If `α < 0` or `β <= 0`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.gamma.quantile( 0.8, 2.0, 1.0 )\n    ~2.994\n    > y = base.dists.gamma.quantile( 0.5, 4.0, 2.0 )\n    ~1.836\n\n    > y = base.dists.gamma.quantile( 1.1, 1.0, 1.0 )\n    NaN\n    > y = base.dists.gamma.quantile( -0.2, 1.0, 1.0 )\n    NaN\n\n    > y = base.dists.gamma.quantile( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.gamma.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.gamma.quantile( 0.0, 1.0, NaN )\n    NaN\n\n    // Non-positive shape parameter:\n    > y = base.dists.gamma.quantile( 0.5, -1.0, 1.0 )\n    NaN\n    // Non-positive rate parameter:\n    > y = base.dists.gamma.quantile( 0.5, 1.0, -1.0 )\n    NaN\n\n    // Degenerate distribution centered at `0.0` when `α = 0.0`:\n    > y = base.dists.gamma.quantile( 0.3, 0.0, 2.0 )\n    0.0\n    > y = base.dists.gamma.quantile( 0.9, 0.0, 2.0 )\n    0.0\n\n\nbase.dists.gamma.quantile.factory( α, β )\n    Returns a function for evaluating the quantile function of a gamma\n    distribution with shape parameter `α` and rate parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.gamma.quantile.factory( 2.0, 2.0 );\n    > var y = myQuantile( 0.8 )\n    ~1.497\n    > y = myQuantile( 0.4 )\n    ~0.688\n\n","base.dists.gamma.quantile.factory":"\nbase.dists.gamma.quantile.factory( α, β )\n    Returns a function for evaluating the quantile function of a gamma\n    distribution with shape parameter `α` and rate parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.gamma.quantile.factory( 2.0, 2.0 );\n    > var y = myQuantile( 0.8 )\n    ~1.497\n    > y = myQuantile( 0.4 )\n    ~0.688\n\n","base.dists.gamma.skewness":"\nbase.dists.gamma.skewness( α, β )\n    Returns the skewness of a gamma distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dists.gamma.skewness( 1.0, 1.0 )\n    2.0\n    > v = base.dists.gamma.skewness( 4.0, 12.0 )\n    1.0\n    > v = base.dists.gamma.skewness( 8.0, 2.0 )\n    ~0.707\n\n","base.dists.gamma.stdev":"\nbase.dists.gamma.stdev( α, β )\n    Returns the standard deviation of a gamma distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dists.gamma.stdev( 1.0, 1.0 )\n    1.0\n    > v = base.dists.gamma.stdev( 4.0, 12.0 )\n    ~0.167\n    > v = base.dists.gamma.stdev( 8.0, 2.0 )\n    ~1.414\n\n","base.dists.gamma.variance":"\nbase.dists.gamma.variance( α, β )\n    Returns the variance of a gamma distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dists.gamma.variance( 1.0, 1.0 )\n    1.0\n    > v = base.dists.gamma.variance( 4.0, 12.0 )\n    ~0.028\n    > v = base.dists.gamma.variance( 8.0, 2.0 )\n    2.0\n\n","base.dists.geometric.cdf":"\nbase.dists.geometric.cdf( x, p )\n    Evaluates the cumulative distribution function (CDF) for a geometric\n    distribution with success probability `p` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.geometric.cdf( 2.0, 0.5 )\n    0.875\n    > y = base.dists.geometric.cdf( 2.0, 0.1 )\n    ~0.271\n    > y = base.dists.geometric.cdf( -1.0, 4.0 )\n    0.0\n    > y = base.dists.geometric.cdf( NaN, 0.5 )\n    NaN\n    > y = base.dists.geometric.cdf( 0.0, NaN )\n    NaN\n    // Invalid probability\n    > y = base.dists.geometric.cdf( 2.0, 1.4 )\n    NaN\n\n\nbase.dists.geometric.cdf.factory( p )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a geometric distribution with success probability `p`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.geometric.cdf.factory( 0.5 );\n    > var y = mycdf( 3.0 )\n    0.9375\n    > y = mycdf( 1.0 )\n    0.75\n\n","base.dists.geometric.cdf.factory":"\nbase.dists.geometric.cdf.factory( p )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a geometric distribution with success probability `p`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.geometric.cdf.factory( 0.5 );\n    > var y = mycdf( 3.0 )\n    0.9375\n    > y = mycdf( 1.0 )\n    0.75\n\n","base.dists.geometric.entropy":"\nbase.dists.geometric.entropy( p )\n    Returns the entropy of a geometric distribution with success probability\n    `p` (in nats).\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dists.geometric.entropy( 0.1 )\n    ~3.251\n    > v = base.dists.geometric.entropy( 0.5 )\n    ~1.386\n\n","base.dists.geometric.Geometric":"\nbase.dists.geometric.Geometric( [p] )\n    Returns a geometric distribution object.\n\n    Parameters\n    ----------\n    p: number (optional)\n        Success probability. Must be between `0` and `1`. Default: `0.5`.\n\n    Returns\n    -------\n    geometric: Object\n        Distribution instance.\n\n    geometric.p: number\n        Success probability. If set, the value must be between `0` and `1`.\n\n    geometric.entropy: number\n        Read-only property which returns the differential entropy.\n\n    geometric.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    geometric.mean: number\n        Read-only property which returns the expected value.\n\n    geometric.median: number\n        Read-only property which returns the median.\n\n    geometric.mode: number\n        Read-only property which returns the mode.\n\n    geometric.skewness: number\n        Read-only property which returns the skewness.\n\n    geometric.stdev: number\n        Read-only property which returns the standard deviation.\n\n    geometric.variance: number\n        Read-only property which returns the variance.\n\n    geometric.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    geometric.logcdf: Function\n        Evaluates the natural logarithm of the cumulative distribution function\n        (CDF).\n\n    geometric.logpmf: Function\n        Evaluates the natural logarithm of the probability mass function (PMF).\n\n    geometric.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    geometric.pmf: Function\n        Evaluates the probability mass function (PMF).\n\n    geometric.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var geometric = base.dists.geometric.Geometric( 0.6 );\n    > geometric.p\n    0.6\n    > geometric.entropy\n    ~1.122\n    > geometric.kurtosis\n    ~6.9\n    > geometric.mean\n    ~0.667\n    > geometric.median\n    0.0\n    > geometric.mode\n    0.0\n    > geometric.skewness\n    ~2.214\n    > geometric.stdev\n    ~1.054\n    > geometric.variance\n    ~1.111\n    > geometric.cdf( 3.0 )\n    ~0.974\n    > geometric.logcdf( 3.0 )\n    ~-0.026\n    > geometric.logpmf( 4.0 )\n    ~-4.176\n    > geometric.mgf( 0.5 )\n    ~2.905\n    > geometric.pmf( 2.0 )\n    ~0.096\n    > geometric.quantile( 0.7 )\n    1.0\n\n","base.dists.geometric.kurtosis":"\nbase.dists.geometric.kurtosis( p )\n    Returns the excess kurtosis of a geometric distribution with success\n    probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dists.geometric.kurtosis( 0.1 )\n    ~6.011\n    > v = base.dists.geometric.kurtosis( 0.5 )\n    6.5\n\n","base.dists.geometric.logcdf":"\nbase.dists.geometric.logcdf( x, p )\n    Evaluates the logarithm of the cumulative distribution function (CDF) for a\n    geometric distribution with success probability `p` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated logCDF.\n\n    Examples\n    --------\n    > var y = base.dists.geometric.logcdf( 2.0, 0.5 )\n    ~-0.134\n    > y = base.dists.geometric.logcdf( 2.0, 0.1 )\n    ~-1.306\n    > y = base.dists.geometric.logcdf( -1.0, 4.0 )\n    -Infinity\n    > y = base.dists.geometric.logcdf( NaN, 0.5 )\n    NaN\n    > y = base.dists.geometric.logcdf( 0.0, NaN )\n    NaN\n    // Invalid probability\n    > y = base.dists.geometric.logcdf( 2.0, 1.4 )\n    NaN\n\n\nbase.dists.geometric.logcdf.factory( p )\n    Returns a function for evaluating the logarithm of the cumulative\n    distribution function (CDF) of a geometric distribution with success\n    probability `p`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.geometric.logcdf.factory( 0.5 );\n    > var y = mylogcdf( 3.0 )\n    ~-0.065\n    > y = mylogcdf( 1.0 )\n    ~-0.288\n\n","base.dists.geometric.logcdf.factory":"\nbase.dists.geometric.logcdf.factory( p )\n    Returns a function for evaluating the logarithm of the cumulative\n    distribution function (CDF) of a geometric distribution with success\n    probability `p`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.geometric.logcdf.factory( 0.5 );\n    > var y = mylogcdf( 3.0 )\n    ~-0.065\n    > y = mylogcdf( 1.0 )\n    ~-0.288\n\n","base.dists.geometric.logpmf":"\nbase.dists.geometric.logpmf( x, p )\n    Evaluates the logarithm of the probability mass function (PMF) for a\n    geometric distribution with success probability `p` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPMF.\n\n    Examples\n    --------\n    > var y = base.dists.geometric.logpmf( 4.0, 0.3 )\n    ~-2.631\n    > y = base.dists.geometric.logpmf( 2.0, 0.7 )\n    ~-2.765\n    > y = base.dists.geometric.logpmf( -1.0, 0.5 )\n    -Infinity\n    > y = base.dists.geometric.logpmf( 0.0, NaN )\n    NaN\n    > y = base.dists.geometric.logpmf( NaN, 0.5 )\n    NaN\n    // Invalid success probability:\n    > y = base.dists.geometric.logpmf( 2.0, 1.5 )\n    NaN\n\n\nbase.dists.geometric.logpmf.factory( p )\n    Returns a function for evaluating the logarithm of the probability mass\n    function (PMF) of a geometric distribution with success probability `p`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    logpmf: Function\n        Logarithm of probability mass function (PMF).\n\n    Examples\n    --------\n    > var mylogpmf = base.dists.geometric.logpmf.factory( 0.5 );\n    > var y = mylogpmf( 3.0 )\n    ~-2.773\n    > y = mylogpmf( 1.0 )\n    ~-1.386\n\n","base.dists.geometric.logpmf.factory":"\nbase.dists.geometric.logpmf.factory( p )\n    Returns a function for evaluating the logarithm of the probability mass\n    function (PMF) of a geometric distribution with success probability `p`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    logpmf: Function\n        Logarithm of probability mass function (PMF).\n\n    Examples\n    --------\n    > var mylogpmf = base.dists.geometric.logpmf.factory( 0.5 );\n    > var y = mylogpmf( 3.0 )\n    ~-2.773\n    > y = mylogpmf( 1.0 )\n    ~-1.386\n\n","base.dists.geometric.mean":"\nbase.dists.geometric.mean( p )\n    Returns the expected value of a geometric distribution with success\n    probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dists.geometric.mean( 0.1 )\n    9.0\n    > v = base.dists.geometric.mean( 0.5 )\n    1.0\n\n","base.dists.geometric.median":"\nbase.dists.geometric.median( p )\n    Returns the median of a geometric distribution with success probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: integer\n        Median.\n\n    Examples\n    --------\n    > var v = base.dists.geometric.median( 0.1 )\n    6\n    > v = base.dists.geometric.median( 0.5 )\n    0\n\n","base.dists.geometric.mgf":"\nbase.dists.geometric.mgf( t, p )\n    Evaluates the moment-generating function (MGF) for a geometric\n    distribution with success probability `p` at a value `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If `t >= -ln(1-p)`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    t: number\n        Input value.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dists.geometric.mgf( 0.2, 0.5 )\n    ~1.569\n    > y = base.dists.geometric.mgf( 0.4, 0.5 )\n    ~2.936\n    // Case: t >= -ln(1-p)\n    > y = base.dists.geometric.mgf( 0.8, 0.5 )\n    NaN\n    > y = base.dists.geometric.mgf( NaN, 0.0 )\n    NaN\n    > y = base.dists.geometric.mgf( 0.0, NaN )\n    NaN\n    > y = base.dists.geometric.mgf( -2.0, -1.0 )\n    NaN\n    > y = base.dists.geometric.mgf( 0.2, 2.0 )\n    NaN\n\n\nbase.dists.geometric.mgf.factory( p )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    geometric distribution with success probability `p`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var mymgf = base.dists.geometric.mgf.factory( 0.8 );\n    > var y = mymgf( -0.2 )\n    ~0.783\n\n","base.dists.geometric.mgf.factory":"\nbase.dists.geometric.mgf.factory( p )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    geometric distribution with success probability `p`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var mymgf = base.dists.geometric.mgf.factory( 0.8 );\n    > var y = mymgf( -0.2 )\n    ~0.783\n\n","base.dists.geometric.mode":"\nbase.dists.geometric.mode( p )\n    Returns the mode of a geometric distribution with success probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: integer\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dists.geometric.mode( 0.1 )\n    0\n    > v = base.dists.geometric.mode( 0.5 )\n    0\n\n","base.dists.geometric.pmf":"\nbase.dists.geometric.pmf( x, p )\n    Evaluates the probability mass function (PMF) for a geometric distribution\n    with success probability `p` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated PMF.\n\n    Examples\n    --------\n    > var y = base.dists.geometric.pmf( 4.0, 0.3 )\n    ~0.072\n    > y = base.dists.geometric.pmf( 2.0, 0.7 )\n    ~0.063\n    > y = base.dists.geometric.pmf( -1.0, 0.5 )\n    0.0\n    > y = base.dists.geometric.pmf( 0.0, NaN )\n    NaN\n    > y = base.dists.geometric.pmf( NaN, 0.5 )\n    NaN\n    // Invalid success probability:\n    > y = base.dists.geometric.pmf( 2.0, 1.5 )\n    NaN\n\n\nbase.dists.geometric.pmf.factory( p )\n    Returns a function for evaluating the probability mass function (PMF) of a\n    geometric distribution with success probability `p`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    pmf: Function\n        Probability mass function (PMF).\n\n    Examples\n    --------\n    > var mypmf = base.dists.geometric.pmf.factory( 0.5 );\n    > var y = mypmf( 3.0 )\n    0.0625\n    > y = mypmf( 1.0 )\n    0.25\n\n","base.dists.geometric.pmf.factory":"\nbase.dists.geometric.pmf.factory( p )\n    Returns a function for evaluating the probability mass function (PMF) of a\n    geometric distribution with success probability `p`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    pmf: Function\n        Probability mass function (PMF).\n\n    Examples\n    --------\n    > var mypmf = base.dists.geometric.pmf.factory( 0.5 );\n    > var y = mypmf( 3.0 )\n    0.0625\n    > y = mypmf( 1.0 )\n    0.25\n\n","base.dists.geometric.quantile":"\nbase.dists.geometric.quantile( r, p )\n    Evaluates the quantile function for a geometric distribution with success\n    probability `p` at a probability `r`.\n\n    If `r < 0` or `r > 1`, the function returns `NaN`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    r: number\n        Input probability.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.geometric.quantile( 0.8, 0.4 )\n    3\n    > y = base.dists.geometric.quantile( 0.5, 0.4 )\n    1\n    > y = base.dists.geometric.quantile( 0.9, 0.1 )\n    21\n\n    > y = base.dists.geometric.quantile( -0.2, 0.1 )\n    NaN\n\n    > y = base.dists.geometric.quantile( NaN, 0.8 )\n    NaN\n    > y = base.dists.geometric.quantile( 0.4, NaN )\n    NaN\n\n    > y = base.dists.geometric.quantile( 0.5, -1.0 )\n    NaN\n    > y = base.dists.geometric.quantile( 0.5, 1.5 )\n    NaN\n\n\nbase.dists.geometric.quantile.factory( p )\n    Returns a function for evaluating the quantile function of a geometric\n    distribution with success probability `p`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myquantile = base.dists.geometric.quantile.factory( 0.4 );\n    > var y = myquantile( 0.4 )\n    0\n    > y = myquantile( 0.8 )\n    3\n    > y = myquantile( 1.0 )\n    Infinity\n\n","base.dists.geometric.quantile.factory":"\nbase.dists.geometric.quantile.factory( p )\n    Returns a function for evaluating the quantile function of a geometric\n    distribution with success probability `p`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myquantile = base.dists.geometric.quantile.factory( 0.4 );\n    > var y = myquantile( 0.4 )\n    0\n    > y = myquantile( 0.8 )\n    3\n    > y = myquantile( 1.0 )\n    Infinity\n\n","base.dists.geometric.skewness":"\nbase.dists.geometric.skewness( p )\n    Returns the skewness of a geometric distribution with success probability\n    `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dists.geometric.skewness( 0.1 )\n    ~2.003\n    > v = base.dists.geometric.skewness( 0.5 )\n    ~2.121\n\n","base.dists.geometric.stdev":"\nbase.dists.geometric.stdev( p )\n    Returns the standard deviation of a geometric distribution with success\n    probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dists.geometric.stdev( 0.1 )\n    ~9.487\n    > v = base.dists.geometric.stdev( 0.5 )\n    ~1.414\n\n","base.dists.geometric.variance":"\nbase.dists.geometric.variance( p )\n    Returns the variance of a geometric distribution with success probability\n    `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dists.geometric.variance( 0.1 )\n    ~90.0\n    > v = base.dists.geometric.variance( 0.5 )\n    2.0\n\n","base.dists.gumbel.cdf":"\nbase.dists.gumbel.cdf( x, μ, β )\n    Evaluates the cumulative distribution function (CDF) for a Gumbel\n    distribution with location parameter `μ` and scale parameter `β` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.gumbel.cdf( 10.0, 0.0, 3.0 )\n    ~0.965\n    > y = base.dists.gumbel.cdf( -2.0, 0.0, 3.0 )\n    ~0.143\n    > y = base.dists.gumbel.cdf( 0.0, 0.0, 1.0 )\n    ~0.368\n    > y = base.dists.gumbel.cdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.gumbel.cdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.gumbel.cdf( 0.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dists.gumbel.cdf( 0.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dists.gumbel.cdf.factory( μ, β )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Gumbel distribution with location parameter `μ` and scale parameter\n    `β`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.gumbel.cdf.factory( 2.0, 3.0 );\n    > var y = myCDF( 10.0 )\n    ~0.933\n    > y = myCDF( 2.0 )\n    ~0.368\n\n","base.dists.gumbel.cdf.factory":"\nbase.dists.gumbel.cdf.factory( μ, β )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Gumbel distribution with location parameter `μ` and scale parameter\n    `β`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.gumbel.cdf.factory( 2.0, 3.0 );\n    > var y = myCDF( 10.0 )\n    ~0.933\n    > y = myCDF( 2.0 )\n    ~0.368\n\n","base.dists.gumbel.entropy":"\nbase.dists.gumbel.entropy( μ, β )\n    Returns the differential entropy of a Gumbel distribution with location\n    parameter `μ` and scale parameter `β` (in nats).\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var y = base.dists.gumbel.entropy( 0.0, 1.0 )\n    ~1.577\n    > y = base.dists.gumbel.entropy( 4.0, 2.0 )\n    ~2.27\n    > y = base.dists.gumbel.entropy( NaN, 1.0 )\n    NaN\n    > y = base.dists.gumbel.entropy( 0.0, NaN )\n    NaN\n    > y = base.dists.gumbel.entropy( 0.0, 0.0 )\n    NaN\n\n","base.dists.gumbel.Gumbel":"\nbase.dists.gumbel.Gumbel( [μ, β] )\n    Returns a Gumbel distribution object.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Location parameter. Default: `0.0`.\n\n    β: number (optional)\n        Scale parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    gumbel: Object\n        Distribution instance.\n\n    gumbel.mu: number\n        Location parameter.\n\n    gumbel.beta: number\n        Scale parameter. If set, the value must be greater than `0`.\n\n    gumbel.entropy: number\n        Read-only property which returns the differential entropy.\n\n    gumbel.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    gumbel.mean: number\n        Read-only property which returns the expected value.\n\n    gumbel.median: number\n        Read-only property which returns the median.\n\n    gumbel.mode: number\n        Read-only property which returns the mode.\n\n    gumbel.skewness: number\n        Read-only property which returns the skewness.\n\n    gumbel.stdev: number\n        Read-only property which returns the standard deviation.\n\n    gumbel.variance: number\n        Read-only property which returns the variance.\n\n    gumbel.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    gumbel.logcdf: Function\n        Evaluates the natural logarithm of the cumulative distribution function\n        (CDF).\n\n    gumbel.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    gumbel.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    gumbel.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    gumbel.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var gumbel = base.dists.gumbel.Gumbel( -2.0, 3.0 );\n    > gumbel.mu\n    -2.0\n    > gumbel.beta\n    3.0\n    > gumbel.entropy\n    ~2.676\n    > gumbel.kurtosis\n    2.4\n    > gumbel.mean\n    ~-0.268\n    > gumbel.median\n    ~-0.9\n    > gumbel.mode\n    -2.0\n    > gumbel.skewness\n    ~1.14\n    > gumbel.stdev\n    ~3.848\n    > gumbel.variance\n    ~14.804\n    > gumbel.cdf( 0.8 )\n    ~0.675\n    > gumbel.logcdf( 0.8 )\n    ~-0.393\n    > gumbel.logpdf( 1.0 )\n    ~-2.466\n    > gumbel.mgf( 0.2 )\n    ~1.487\n    > gumbel.pdf( 1.0 )\n    ~0.085\n    > gumbel.quantile( 0.8 )\n    ~2.5\n\n","base.dists.gumbel.kurtosis":"\nbase.dists.gumbel.kurtosis( μ, β )\n    Returns the excess kurtosis of a Gumbel distribution with location parameter\n    `μ` and scale parameter `β`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var y = base.dists.gumbel.kurtosis( 0.0, 1.0 )\n    2.4\n    > y = base.dists.gumbel.kurtosis( 4.0, 2.0 )\n    2.4\n    > y = base.dists.gumbel.kurtosis( NaN, 1.0 )\n    NaN\n    > y = base.dists.gumbel.kurtosis( 0.0, NaN )\n    NaN\n    > y = base.dists.gumbel.kurtosis( 0.0, 0.0 )\n    NaN\n\n","base.dists.gumbel.logcdf":"\nbase.dists.gumbel.logcdf( x, μ, β )\n    Evaluates the logarithm of the cumulative distribution function (CDF) for a\n    Gumbel distribution with location parameter `μ` and scale parameter `β` at a\n    value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logCDF.\n\n    Examples\n    --------\n    > var y = base.dists.gumbel.logcdf( 10.0, 0.0, 3.0 )\n    ~-0.036\n    > y = base.dists.gumbel.logcdf( -2.0, 0.0, 3.0 )\n    ~-1.948\n    > y = base.dists.gumbel.logcdf( 0.0, 0.0, 1.0 )\n    ~-1.0\n    > y = base.dists.gumbel.logcdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.gumbel.logcdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.gumbel.logcdf( 0.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dists.gumbel.logcdf( 0.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dists.gumbel.logcdf.factory( μ, β )\n    Returns a function for evaluating the logarithm of the cumulative\n    distribution function (CDF) of a Gumbel distribution with location parameter\n    `μ` and scale parameter `β`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myLCDF = base.dists.gumbel.logcdf.factory( 2.0, 3.0 );\n    > var y = myLCDF( 10.0 )\n    ~-0.069\n    > y = myLCDF( 2.0 )\n    ~-1.0\n\n","base.dists.gumbel.logcdf.factory":"\nbase.dists.gumbel.logcdf.factory( μ, β )\n    Returns a function for evaluating the logarithm of the cumulative\n    distribution function (CDF) of a Gumbel distribution with location parameter\n    `μ` and scale parameter `β`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myLCDF = base.dists.gumbel.logcdf.factory( 2.0, 3.0 );\n    > var y = myLCDF( 10.0 )\n    ~-0.069\n    > y = myLCDF( 2.0 )\n    ~-1.0\n\n","base.dists.gumbel.logpdf":"\nbase.dists.gumbel.logpdf( x, μ, β )\n    Evaluates the logarithm of the probability density function (PDF) for a\n    Gumbel distribution with location parameter `μ` and scale parameter `β` at a\n    value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dists.gumbel.logpdf( 0.0, 0.0, 2.0 )\n    ~-1.693\n    > y = base.dists.gumbel.logpdf( 0.0, 0.0, 1.0 )\n    ~-1\n    > y = base.dists.gumbel.logpdf( 1.0, 3.0, 2.0 )\n    ~-2.411\n    > y = base.dists.gumbel.logpdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.gumbel.logpdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.gumbel.logpdf( 0.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dists.gumbel.logpdf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dists.gumbel.logpdf.factory( μ, β )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a Gumbel distribution with location parameter `μ` and\n    scale parameter `β`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogpdf = base.dists.gumbel.logpdf.factory( 10.0, 2.0 );\n    > var y = mylogpdf( 10.0 )\n    ~-1.693\n    > y = mylogpdf( 12.0 )\n    ~-2.061\n\n","base.dists.gumbel.logpdf.factory":"\nbase.dists.gumbel.logpdf.factory( μ, β )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a Gumbel distribution with location parameter `μ` and\n    scale parameter `β`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogpdf = base.dists.gumbel.logpdf.factory( 10.0, 2.0 );\n    > var y = mylogpdf( 10.0 )\n    ~-1.693\n    > y = mylogpdf( 12.0 )\n    ~-2.061\n\n","base.dists.gumbel.mean":"\nbase.dists.gumbel.mean( μ, β )\n    Returns the expected value of a Gumbel distribution with location parameter\n    `μ` and scale parameter `β`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var y = base.dists.gumbel.mean( 0.0, 1.0 )\n    ~0.577\n    > y = base.dists.gumbel.mean( 4.0, 2.0 )\n    ~5.154\n    > y = base.dists.gumbel.mean( NaN, 1.0 )\n    NaN\n    > y = base.dists.gumbel.mean( 0.0, NaN )\n    NaN\n    > y = base.dists.gumbel.mean( 0.0, 0.0 )\n    NaN\n\n","base.dists.gumbel.median":"\nbase.dists.gumbel.median( μ, β )\n    Returns the median of a Gumbel distribution with location parameter `μ` and\n    scale parameter `β`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var y = base.dists.gumbel.median( 0.0, 1.0 )\n    ~0.367\n    > y = base.dists.gumbel.median( 4.0, 2.0 )\n    ~4.733\n    > y = base.dists.gumbel.median( NaN, 1.0 )\n    NaN\n    > y = base.dists.gumbel.median( 0.0, NaN )\n    NaN\n    > y = base.dists.gumbel.median( 0.0, 0.0 )\n    NaN\n\n","base.dists.gumbel.mgf":"\nbase.dists.gumbel.mgf( t, μ, β )\n    Evaluates the moment-generating function (MGF) for a Gumbel distribution\n    with location parameter `μ` and scale parameter `β` at a value `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    t: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dists.gumbel.mgf( -1.0, 0.0, 3.0 )\n    6.0\n    > y = base.dists.gumbel.mgf( 0.0, 0.0, 1.0 )\n    1.0\n    > y = base.dists.gumbel.mgf( 0.1, 0.0, 3.0 )\n    ~1.298\n\n    > y = base.dists.gumbel.mgf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.gumbel.mgf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.gumbel.mgf( 0.0, 0.0, NaN )\n    NaN\n\n    // Case: `t >= 1/beta`\n    > y = base.dists.gumbel.mgf( 0.8, 0.0, 2.0 )\n    NaN\n\n    // Non-positive scale parameter:\n    > y = base.dists.gumbel.mgf( 0.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dists.gumbel.mgf.factory( μ, β )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    Gumbel distribution with location parameter `μ` and scale parameter `β`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dists.gumbel.mgf.factory( 0.0, 3.0 );\n    > var y = myMGF( -1.5 )\n    ~52.343\n    > y = myMGF( -1.0 )\n    6.0\n\n","base.dists.gumbel.mgf.factory":"\nbase.dists.gumbel.mgf.factory( μ, β )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    Gumbel distribution with location parameter `μ` and scale parameter `β`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dists.gumbel.mgf.factory( 0.0, 3.0 );\n    > var y = myMGF( -1.5 )\n    ~52.343\n    > y = myMGF( -1.0 )\n    6.0\n\n","base.dists.gumbel.mode":"\nbase.dists.gumbel.mode( μ, β )\n    Returns the mode of a Gumbel distribution with location parameter `μ` and\n    scale parameter `β`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var y = base.dists.gumbel.mode( 0.0, 1.0 )\n    0.0\n    > y = base.dists.gumbel.mode( 4.0, 2.0 )\n    4.0\n    > y = base.dists.gumbel.mode( NaN, 1.0 )\n    NaN\n    > y = base.dists.gumbel.mode( 0.0, NaN )\n    NaN\n    > y = base.dists.gumbel.mode( 0.0, 0.0 )\n    NaN\n\n","base.dists.gumbel.pdf":"\nbase.dists.gumbel.pdf( x, μ, β )\n    Evaluates the probability density function (PDF) for a Gumbel distribution\n    with location parameter `μ` and scale parameter `β` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dists.gumbel.pdf( 0.0, 0.0, 2.0 )\n    ~0.184\n    > y = base.dists.gumbel.pdf( 0.0, 0.0, 1.0 )\n    ~0.368\n    > y = base.dists.gumbel.pdf( 1.0, 3.0, 2.0 )\n    ~0.09\n    > y = base.dists.gumbel.pdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.gumbel.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.gumbel.pdf( 0.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dists.gumbel.pdf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dists.gumbel.pdf.factory( μ, β )\n    Returns a function for evaluating the probability density function (PDF)\n    of a Gumbel distribution with location parameter `μ` and scale parameter\n    `β`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.gumbel.pdf.factory( 10.0, 2.0 );\n    > var y = myPDF( 10.0 )\n    ~0.184\n    > y = myPDF( 12.0 )\n    ~0.127\n\n","base.dists.gumbel.pdf.factory":"\nbase.dists.gumbel.pdf.factory( μ, β )\n    Returns a function for evaluating the probability density function (PDF)\n    of a Gumbel distribution with location parameter `μ` and scale parameter\n    `β`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.gumbel.pdf.factory( 10.0, 2.0 );\n    > var y = myPDF( 10.0 )\n    ~0.184\n    > y = myPDF( 12.0 )\n    ~0.127\n\n","base.dists.gumbel.quantile":"\nbase.dists.gumbel.quantile( p, μ, β )\n    Evaluates the quantile function for a Gumbel distribution with location\n    parameter `μ` and scale parameter `β` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.gumbel.quantile( 0.8, 0.0, 1.0 )\n    ~1.5\n    > y = base.dists.gumbel.quantile( 0.5, 4.0, 2.0 )\n    ~4.733\n    > y = base.dists.gumbel.quantile( 0.5, 4.0, 4.0 )\n    ~5.466\n\n    > y = base.dists.gumbel.quantile( 1.1, 0.0, 1.0 )\n    NaN\n    > y = base.dists.gumbel.quantile( -0.2, 0.0, 1.0 )\n    NaN\n\n    > y = base.dists.gumbel.quantile( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.gumbel.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.gumbel.quantile( 0.0, 0.0, NaN )\n    NaN\n\n    // Negative scale parameter:\n    > y = base.dists.gumbel.quantile( 0.5, 0.0, -1.0 )\n    NaN\n\n\nbase.dists.gumbel.quantile.factory( μ, β )\n    Returns a function for evaluating the quantile function of a Gumbel\n    distribution with location parameter `μ` and scale parameter `β`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.gumbel.quantile.factory( 8.0, 2.0 );\n    > var y = myQuantile( 0.5 )\n    ~8.733\n    > y = myQuantile( 0.7 )\n    ~10.062\n\n","base.dists.gumbel.quantile.factory":"\nbase.dists.gumbel.quantile.factory( μ, β )\n    Returns a function for evaluating the quantile function of a Gumbel\n    distribution with location parameter `μ` and scale parameter `β`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.gumbel.quantile.factory( 8.0, 2.0 );\n    > var y = myQuantile( 0.5 )\n    ~8.733\n    > y = myQuantile( 0.7 )\n    ~10.062\n\n","base.dists.gumbel.skewness":"\nbase.dists.gumbel.skewness( μ, β )\n    Returns the skewness of a Gumbel distribution with location parameter `μ`\n    and scale parameter `β`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var y = base.dists.gumbel.skewness( 0.0, 1.0 )\n    ~1.14\n    > y = base.dists.gumbel.skewness( 4.0, 2.0 )\n    ~1.14\n    > y = base.dists.gumbel.skewness( NaN, 1.0 )\n    NaN\n    > y = base.dists.gumbel.skewness( 0.0, NaN )\n    NaN\n    > y = base.dists.gumbel.skewness( 0.0, 0.0 )\n    NaN\n\n","base.dists.gumbel.stdev":"\nbase.dists.gumbel.stdev( μ, β )\n    Returns the standard deviation of a Gumbel distribution with location\n    parameter `μ` and scale parameter `β`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var y = base.dists.gumbel.stdev( 0.0, 1.0 )\n    ~1.283\n    > y = base.dists.gumbel.stdev( 4.0, 2.0 )\n    ~2.565\n    > y = base.dists.gumbel.stdev( NaN, 1.0 )\n    NaN\n    > y = base.dists.gumbel.stdev( 0.0, NaN )\n    NaN\n    > y = base.dists.gumbel.stdev( 0.0, 0.0 )\n    NaN\n\n","base.dists.gumbel.variance":"\nbase.dists.gumbel.variance( μ, β )\n    Returns the variance of a Gumbel distribution with location parameter `μ`\n    and scale parameter `β`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var y = base.dists.gumbel.variance( 0.0, 1.0 )\n    ~1.645\n    > y = base.dists.gumbel.variance( 4.0, 2.0 )\n    ~6.58\n    > y = base.dists.gumbel.variance( NaN, 1.0 )\n    NaN\n    > y = base.dists.gumbel.variance( 0.0, NaN )\n    NaN\n    > y = base.dists.gumbel.variance( 0.0, 0.0 )\n    NaN\n\n","base.dists.hypergeometric.cdf":"\nbase.dists.hypergeometric.cdf( x, N, K, n )\n    Evaluates the cumulative distribution function (CDF) for a hypergeometric\n    distribution with population size `N`, subpopulation size `K`, and number of\n    draws `n` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a population size `N`, subpopulation size `K` or draws `n` which\n    is not a nonnegative integer, the function returns `NaN`.\n\n    If the number of draws `n` or subpopulation size `K` exceeds population size\n     `N`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.hypergeometric.cdf( 1.0, 8, 4, 2 )\n    ~0.786\n    > y = base.dists.hypergeometric.cdf( 1.5, 8, 4, 2 )\n    ~0.786\n    > y = base.dists.hypergeometric.cdf( 2.0, 8, 4, 2 )\n    1.0\n    > y = base.dists.hypergeometric.cdf( 0, 8, 4, 2)\n    ~0.214\n\n    > y = base.dists.hypergeometric.cdf( NaN, 10, 5, 2 )\n    NaN\n    > y = base.dists.hypergeometric.cdf( 0.0, NaN, 5, 2 )\n    NaN\n    > y = base.dists.hypergeometric.cdf( 0.0, 10, NaN, 2 )\n    NaN\n    > y = base.dists.hypergeometric.cdf( 0.0, 10, 5, NaN )\n    NaN\n\n    > y = base.dists.hypergeometric.cdf( 2.0, 10.5, 5, 2 )\n    NaN\n    > y = base.dists.hypergeometric.cdf( 2.0, 10, 1.5, 2 )\n    NaN\n    > y = base.dists.hypergeometric.cdf( 2.0, 10, 5, -2.0 )\n    NaN\n    > y = base.dists.hypergeometric.cdf( 2.0, 10, 5, 12 )\n    NaN\n    > y = base.dists.hypergeometric.cdf( 2.0, 8, 3, 9 )\n    NaN\n\n\nbase.dists.hypergeometric.cdf.factory( N, K, n )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a hypergeometric distribution with population size `N`, subpopulation\n    size `K`, and number of draws `n`.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.hypergeometric.cdf.factory( 30, 20, 5 );\n    > var y = myCDF( 4.0 )\n    ~0.891\n    > y = myCDF( 1.0 )\n    ~0.031\n\n","base.dists.hypergeometric.cdf.factory":"\nbase.dists.hypergeometric.cdf.factory( N, K, n )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a hypergeometric distribution with population size `N`, subpopulation\n    size `K`, and number of draws `n`.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.hypergeometric.cdf.factory( 30, 20, 5 );\n    > var y = myCDF( 4.0 )\n    ~0.891\n    > y = myCDF( 1.0 )\n    ~0.031\n\n","base.dists.hypergeometric.Hypergeometric":"\nbase.dists.hypergeometric.Hypergeometric( [N, K, n] )\n    Returns a hypergeometric distribution object.\n\n    Parameters\n    ----------\n    N: integer (optional)\n        Population size. Must be a nonnegative integer larger than or equal to\n        `K` and `n`.\n\n    K: integer (optional)\n        Subpopulation size. Must be a nonnegative integer smaller than or equal\n        to `N`.\n\n    n: integer (optional)\n        Number of draws. Must be a nonnegative integer smaller than or equal to\n        `N`.\n\n    Returns\n    -------\n    hypergeometric: Object\n        Distribution instance.\n\n    hypergeometric.N: number\n        Population size. If set, the value must be a nonnegative integer larger\n        than or equal to `K` and `n`.\n\n    hypergeometric.K: number\n        Subpopulation size. If set, the value must be a nonnegative integer\n        smaller than or equal to `N`.\n\n    hypergeometric.n: number\n        Number of draws. If set, the value must be a nonnegative integer\n        smaller than or equal to `N`.\n\n    hypergeometric.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    hypergeometric.mean: number\n        Read-only property which returns the expected value.\n\n    hypergeometric.mode: number\n        Read-only property which returns the mode.\n\n    hypergeometric.skewness: number\n        Read-only property which returns the skewness.\n\n    hypergeometric.stdev: number\n        Read-only property which returns the standard deviation.\n\n    hypergeometric.variance: number\n        Read-only property which returns the variance.\n\n    hypergeometric.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    hypergeometric.logpmf: Function\n        Evaluates the natural logarithm of the probability mass function (PMF).\n\n    hypergeometric.pmf: Function\n        Evaluates the probability mass function (PMF).\n\n    hypergeometric.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var hypergeometric = base.dists.hypergeometric.Hypergeometric( 100, 70, 20 );\n    > hypergeometric.N\n    100.0\n    > hypergeometric.K\n    70.0\n    > hypergeometric.n\n    20.0\n    > hypergeometric.kurtosis\n    ~-0.063\n    > hypergeometric.mean\n    14.0\n    > hypergeometric.mode\n    14.0\n    > hypergeometric.skewness\n    ~-0.133\n    > hypergeometric.stdev\n    ~1.842\n    > hypergeometric.variance\n    ~3.394\n    > hypergeometric.cdf( 2.9 )\n    ~0.0\n    > hypergeometric.logpmf( 10 )\n    ~-3.806\n    > hypergeometric.pmf( 10 )\n    ~0.022\n    > hypergeometric.quantile( 0.8 )\n    16.0\n\n","base.dists.hypergeometric.kurtosis":"\nbase.dists.hypergeometric.kurtosis( N, K, n )\n    Returns the excess kurtosis of a hypergeometric distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a population size `N`, subpopulation size `K` or draws `n` which\n    is not a nonnegative integer, the function returns `NaN`.\n\n    If the number of draws `n` or subpopulation size `K` exceed population size\n    `N`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dists.hypergeometric.kurtosis( 16, 11, 4 )\n    ~-0.326\n    > v = base.dists.hypergeometric.kurtosis( 4, 2, 2 )\n    0.0\n\n    > v = base.dists.hypergeometric.kurtosis( 10, 5, 12 )\n    NaN\n    > v = base.dists.hypergeometric.kurtosis( 10.3, 10, 4 )\n    NaN\n    > v = base.dists.hypergeometric.kurtosis( 10, 5.5, 4 )\n    NaN\n    > v = base.dists.hypergeometric.kurtosis( 10, 5, 4.5 )\n    NaN\n\n    > v = base.dists.hypergeometric.kurtosis( NaN, 10, 4 )\n    NaN\n    > v = base.dists.hypergeometric.kurtosis( 20, NaN, 4 )\n    NaN\n    > v = base.dists.hypergeometric.kurtosis( 20, 10, NaN )\n    NaN\n\n","base.dists.hypergeometric.logpmf":"\nbase.dists.hypergeometric.logpmf( x, N, K, n )\n    Evaluates the natural logarithm of the probability mass function (PMF) for a\n    hypergeometric distribution with population size `N`, subpopulation size\n    `K`, and number of draws `n` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a population size `N`, subpopulation size `K`, or draws `n`\n    which is not a nonnegative integer, the function returns `NaN`.\n\n    If the number of draws `n` or the subpopulation size `K` exceed population\n    size `N`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPMF.\n\n    Examples\n    --------\n    > var y = base.dists.hypergeometric.logpmf( 1.0, 8, 4, 2 )\n    ~-0.56\n    > y = base.dists.hypergeometric.logpmf( 2.0, 8, 4, 2 )\n    ~-1.54\n    > y = base.dists.hypergeometric.logpmf( 0.0, 8, 4, 2 )\n    ~-1.54\n    > y = base.dists.hypergeometric.logpmf( 1.5, 8, 4, 2 )\n    -Infinity\n\n    > y = base.dists.hypergeometric.logpmf( NaN, 10, 5, 2 )\n    NaN\n    > y = base.dists.hypergeometric.logpmf( 0.0, NaN, 5, 2 )\n    NaN\n    > y = base.dists.hypergeometric.logpmf( 0.0, 10, NaN, 2 )\n    NaN\n    > y = base.dists.hypergeometric.logpmf( 0.0, 10, 5, NaN )\n    NaN\n\n    > y = base.dists.hypergeometric.logpmf( 2.0, 10.5, 5, 2 )\n    NaN\n    > y = base.dists.hypergeometric.logpmf( 2.0, 5, 1.5, 2 )\n    NaN\n    > y = base.dists.hypergeometric.logpmf( 2.0, 10, 5, -2.0 )\n    NaN\n    > y = base.dists.hypergeometric.logpmf( 2.0, 10, 5, 12 )\n    NaN\n    > y = base.dists.hypergeometric.logpmf( 2.0, 8, 3, 9 )\n    NaN\n\n\nbase.dists.hypergeometric.logpmf.factory( N, K, n )\n    Returns a function for evaluating the natural logarithm of the probability\n    mass function (PMF) of a hypergeometric distribution with population size\n    `N`, subpopulation size `K`, and number of draws `n`.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    logpmf: Function\n        Logarithm of probability mass function (PMF).\n\n    Examples\n    --------\n    > var mylogPMF = base.dists.hypergeometric.logpmf.factory( 30, 20, 5 );\n    > var y = mylogPMF( 4.0 )\n    ~-1.079\n    > y = mylogPMF( 1.0 )\n    ~-3.524\n\n","base.dists.hypergeometric.logpmf.factory":"\nbase.dists.hypergeometric.logpmf.factory( N, K, n )\n    Returns a function for evaluating the natural logarithm of the probability\n    mass function (PMF) of a hypergeometric distribution with population size\n    `N`, subpopulation size `K`, and number of draws `n`.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    logpmf: Function\n        Logarithm of probability mass function (PMF).\n\n    Examples\n    --------\n    > var mylogPMF = base.dists.hypergeometric.logpmf.factory( 30, 20, 5 );\n    > var y = mylogPMF( 4.0 )\n    ~-1.079\n    > y = mylogPMF( 1.0 )\n    ~-3.524\n\n","base.dists.hypergeometric.mean":"\nbase.dists.hypergeometric.mean( N, K, n )\n    Returns the expected value of a hypergeometric distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a population size `N`, subpopulation size `K` or draws `n` which\n    is not a nonnegative integer, the function returns `NaN`.\n\n    If the number of draws `n` or the subpopulation size `K` exceed population\n    size `N`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dists.hypergeometric.mean( 16, 11, 4 )\n    2.75\n    > v = base.dists.hypergeometric.mean( 2, 1, 1 )\n    0.5\n\n    > v = base.dists.hypergeometric.mean( 10, 5, 12 )\n    NaN\n    > v = base.dists.hypergeometric.mean( 10.3, 10, 4 )\n    NaN\n    > v = base.dists.hypergeometric.mean( 10, 5.5, 4 )\n    NaN\n    > v = base.dists.hypergeometric.mean( 10, 5, 4.5 )\n    NaN\n\n    > v = base.dists.hypergeometric.mean( NaN, 10, 4 )\n    NaN\n    > v = base.dists.hypergeometric.mean( 20, NaN, 4 )\n    NaN\n    > v = base.dists.hypergeometric.mean( 20, 10, NaN )\n    NaN\n\n","base.dists.hypergeometric.mode":"\nbase.dists.hypergeometric.mode( N, K, n )\n    Returns the mode of a hypergeometric distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a population size `N`, subpopulation size `K` or draws `n` which\n    is not a nonnegative integer, the function returns `NaN`.\n\n    If the number of draws `n` or the subpopulation size `K` exceed population\n    size `N`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dists.hypergeometric.mode( 16, 11, 4 )\n    3\n    > v = base.dists.hypergeometric.mode( 2, 1, 1 )\n    1\n\n    > v = base.dists.hypergeometric.mode( 10, 5, 12 )\n    NaN\n    > v = base.dists.hypergeometric.mode( 10.3, 10, 4 )\n    NaN\n    > v = base.dists.hypergeometric.mode( 10, 5.5, 4 )\n    NaN\n    > v = base.dists.hypergeometric.mode( 10, 5, 4.5 )\n    NaN\n\n    > v = base.dists.hypergeometric.mode( NaN, 10, 4 )\n    NaN\n    > v = base.dists.hypergeometric.mode( 20, NaN, 4 )\n    NaN\n    > v = base.dists.hypergeometric.mode( 20, 10, NaN )\n    NaN\n\n","base.dists.hypergeometric.pmf":"\nbase.dists.hypergeometric.pmf( x, N, K, n )\n    Evaluates the probability mass function (PMF) for a hypergeometric\n    distribution with population size `N`, subpopulation size `K`, and number of\n    draws `n` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a population size `N`, subpopulation size `K` or draws `n` which\n    is not a nonnegative integer, the function returns `NaN`.\n\n    If the number of draws `n` or the subpopulation size `K` exceed population\n    size `N`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    out: number\n        Evaluated PMF.\n\n    Examples\n    --------\n    > var y = base.dists.hypergeometric.pmf( 1.0, 8, 4, 2 )\n    ~0.571\n    > y = base.dists.hypergeometric.pmf( 2.0, 8, 4, 2 )\n    ~0.214\n    > y = base.dists.hypergeometric.pmf( 0.0, 8, 4, 2 )\n    ~0.214\n    > y = base.dists.hypergeometric.pmf( 1.5, 8, 4, 2 )\n    0.0\n\n    > y = base.dists.hypergeometric.pmf( NaN, 10, 5, 2 )\n    NaN\n    > y = base.dists.hypergeometric.pmf( 0.0, NaN, 5, 2 )\n    NaN\n    > y = base.dists.hypergeometric.pmf( 0.0, 10, NaN, 2 )\n    NaN\n    > y = base.dists.hypergeometric.pmf( 0.0, 10, 5, NaN )\n    NaN\n\n    > y = base.dists.hypergeometric.pmf( 2.0, 10.5, 5, 2 )\n    NaN\n    > y = base.dists.hypergeometric.pmf( 2.0, 5, 1.5, 2 )\n    NaN\n    > y = base.dists.hypergeometric.pmf( 2.0, 10, 5, -2.0 )\n    NaN\n    > y = base.dists.hypergeometric.pmf( 2.0, 10, 5, 12 )\n    NaN\n    > y = base.dists.hypergeometric.pmf( 2.0, 8, 3, 9 )\n    NaN\n\n\nbase.dists.hypergeometric.pmf.factory( N, K, n )\n    Returns a function for evaluating the probability mass function (PMF) of a\n    hypergeometric distribution with population size `N`, subpopulation size\n    `K`, and number of draws `n`.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    pmf: Function\n        Probability mass function (PMF).\n\n    Examples\n    --------\n    > var myPMF = base.dists.hypergeometric.pmf.factory( 30, 20, 5 );\n    > var y = myPMF( 4.0 )\n    ~0.34\n    > y = myPMF( 1.0 )\n    ~0.029\n\n","base.dists.hypergeometric.pmf.factory":"\nbase.dists.hypergeometric.pmf.factory( N, K, n )\n    Returns a function for evaluating the probability mass function (PMF) of a\n    hypergeometric distribution with population size `N`, subpopulation size\n    `K`, and number of draws `n`.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    pmf: Function\n        Probability mass function (PMF).\n\n    Examples\n    --------\n    > var myPMF = base.dists.hypergeometric.pmf.factory( 30, 20, 5 );\n    > var y = myPMF( 4.0 )\n    ~0.34\n    > y = myPMF( 1.0 )\n    ~0.029\n\n","base.dists.hypergeometric.quantile":"\nbase.dists.hypergeometric.quantile( p, N, K, n )\n    Evaluates the quantile function for a hypergeometric distribution with\n    population size `N`, subpopulation size `K`, and number of draws `n` at a\n    probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a population size `N`, subpopulation size `K` or draws `n` which\n    is not a nonnegative integer, the function returns `NaN`.\n\n    If the number of draws `n` or the subpopulation size `K` exceed population\n    size `N`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.hypergeometric.quantile( 0.4, 40, 20, 10 )\n    5\n    > y = base.dists.hypergeometric.quantile( 0.8, 60, 40, 20 )\n    15\n    > y = base.dists.hypergeometric.quantile( 0.5, 100, 10, 10 )\n    1\n    > y = base.dists.hypergeometric.quantile( 0.0, 100, 40, 20 )\n    0\n    > y = base.dists.hypergeometric.quantile( 1.0, 100, 40, 20 )\n    20\n\n    > y = base.dists.hypergeometric.quantile( NaN, 40, 20, 10 )\n    NaN\n    > y = base.dists.hypergeometric.quantile( 0.2, NaN, 20, 10 )\n    NaN\n    > y = base.dists.hypergeometric.quantile( 0.2, 40, NaN, 10 )\n    NaN\n    > y = base.dists.hypergeometric.quantile( 0.2, 40, 20, NaN )\n    NaN\n\n\nbase.dists.hypergeometric.quantile.factory( N, K, n )\n    Returns a function for evaluating the quantile function of a hypergeometric\n    distribution with population size `N`, subpopulation size `K`, and number of\n    draws `n`.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.hypergeometric.quantile.factory( 100, 20, 10 );\n    > var y = myQuantile( 0.2 )\n    1\n    > y = myQuantile( 0.9 )\n    4\n\n","base.dists.hypergeometric.quantile.factory":"\nbase.dists.hypergeometric.quantile.factory( N, K, n )\n    Returns a function for evaluating the quantile function of a hypergeometric\n    distribution with population size `N`, subpopulation size `K`, and number of\n    draws `n`.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.hypergeometric.quantile.factory( 100, 20, 10 );\n    > var y = myQuantile( 0.2 )\n    1\n    > y = myQuantile( 0.9 )\n    4\n\n","base.dists.hypergeometric.skewness":"\nbase.dists.hypergeometric.skewness( N, K, n )\n    Returns the skewness of a hypergeometric distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a population size `N`, subpopulation size `K` or draws `n` which\n    is not a nonnegative integer, the function returns `NaN`.\n\n    If the number of draws `n` or the subpopulation size `K` exceed population\n    size `N`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dists.hypergeometric.skewness( 16, 11, 4 )\n    ~-0.258\n    > v = base.dists.hypergeometric.skewness( 4, 2, 2 )\n    0.0\n\n    > v = base.dists.hypergeometric.skewness( 10, 5, 12 )\n    NaN\n    > v = base.dists.hypergeometric.skewness( 10.3, 10, 4 )\n    NaN\n    > v = base.dists.hypergeometric.skewness( 10, 5.5, 4 )\n    NaN\n    > v = base.dists.hypergeometric.skewness( 10, 5, 4.5 )\n    NaN\n\n    > v = base.dists.hypergeometric.skewness( NaN, 10, 4 )\n    NaN\n    > v = base.dists.hypergeometric.skewness( 20, NaN, 4 )\n    NaN\n    > v = base.dists.hypergeometric.skewness( 20, 10, NaN )\n    NaN\n\n","base.dists.hypergeometric.stdev":"\nbase.dists.hypergeometric.stdev( N, K, n )\n    Returns the standard deviation of a hypergeometric distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a population size `N`, subpopulation size `K` or draws `n` which\n    is not a nonnegative integer, the function returns `NaN`.\n\n    If the number of draws `n` or the subpopulation size `K` exceed population\n    size `N`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dists.hypergeometric.stdev( 16, 11, 4 )\n    ~0.829\n    > v = base.dists.hypergeometric.stdev( 2, 1, 1 )\n    0.5\n\n    > v = base.dists.hypergeometric.stdev( 10, 5, 12 )\n    NaN\n    > v = base.dists.hypergeometric.stdev( 10.3, 10, 4 )\n    NaN\n    > v = base.dists.hypergeometric.stdev( 10, 5.5, 4 )\n    NaN\n    > v = base.dists.hypergeometric.stdev( 10, 5, 4.5 )\n    NaN\n\n    > v = base.dists.hypergeometric.stdev( NaN, 10, 4 )\n    NaN\n    > v = base.dists.hypergeometric.stdev( 20, NaN, 4 )\n    NaN\n    > v = base.dists.hypergeometric.stdev( 20, 10, NaN )\n    NaN\n\n","base.dists.hypergeometric.variance":"\nbase.dists.hypergeometric.variance( N, K, n )\n    Returns the variance of a hypergeometric distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a population size `N`, subpopulation size `K` or draws `n` which\n    is not a nonnegative integer, the function returns `NaN`.\n\n    If the number of draws `n` or the subpopulation size `K` exceed population\n    size `N`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dists.hypergeometric.variance( 16, 11, 4 )\n    ~0.688\n    > v = base.dists.hypergeometric.variance( 2, 1, 1 )\n    0.25\n\n    > v = base.dists.hypergeometric.variance( 10, 5, 12 )\n    NaN\n    > v = base.dists.hypergeometric.variance( 10.3, 10, 4 )\n    NaN\n    > v = base.dists.hypergeometric.variance( 10, 5.5, 4 )\n    NaN\n    > v = base.dists.hypergeometric.variance( 10, 5, 4.5 )\n    NaN\n\n    > v = base.dists.hypergeometric.variance( NaN, 10, 4 )\n    NaN\n    > v = base.dists.hypergeometric.variance( 20, NaN, 4 )\n    NaN\n    > v = base.dists.hypergeometric.variance( 20, 10, NaN )\n    NaN\n\n","base.dists.invgamma.cdf":"\nbase.dists.invgamma.cdf( x, α, β )\n    Evaluates the cumulative distribution function (CDF) for an inverse gamma\n    distribution with shape parameter `α` and scale parameter `β` at a value\n    `x`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.invgamma.cdf( 2.0, 1.0, 1.0 )\n    ~0.607\n    > y = base.dists.invgamma.cdf( 2.0, 3.0, 1.0 )\n    ~0.986\n    > y = base.dists.invgamma.cdf( -1.0, 2.0, 2.0 )\n    0.0\n    > y = base.dists.invgamma.cdf( PINF, 4.0, 2.0 )\n    1.0\n    > y = base.dists.invgamma.cdf( NINF, 4.0, 2.0 )\n    0.0\n\n    > y = base.dists.invgamma.cdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.invgamma.cdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.invgamma.cdf( 0.0, 0.0, NaN )\n    NaN\n\n    > y = base.dists.invgamma.cdf( 2.0, -1.0, 1.0 )\n    NaN\n    > y = base.dists.invgamma.cdf( 2.0, 1.0, -1.0 )\n    NaN\n\n\nbase.dists.invgamma.cdf.factory( α, β )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of an inverse gamma distribution with shape parameter `α` and scale\n    parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.invgamma.cdf.factory( 2.0, 0.5 );\n    > var y = myCDF( 0.5 )\n    ~0.736\n    > y = myCDF( 2.0 )\n    ~0.974\n\n","base.dists.invgamma.cdf.factory":"\nbase.dists.invgamma.cdf.factory( α, β )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of an inverse gamma distribution with shape parameter `α` and scale\n    parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.invgamma.cdf.factory( 2.0, 0.5 );\n    > var y = myCDF( 0.5 )\n    ~0.736\n    > y = myCDF( 2.0 )\n    ~0.974\n\n","base.dists.invgamma.entropy":"\nbase.dists.invgamma.entropy( α, β )\n    Returns the differential entropy of an inverse gamma distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dists.invgamma.entropy( 1.0, 1.0 )\n    ~2.154\n    > v = base.dists.invgamma.entropy( 4.0, 12.0 )\n    ~1.996\n    > v = base.dists.invgamma.entropy( 8.0, 2.0 )\n    ~-0.922\n\n","base.dists.invgamma.InvGamma":"\nbase.dists.invgamma.InvGamma( [α, β] )\n    Returns an inverse gamma distribution object.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter. Must be greater than `0`. Default: `1.0`.\n\n    β: number (optional)\n        Scale parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    invgamma: Object\n        Distribution instance.\n\n    invgamma.alpha: number\n        Shape parameter. If set, the value must be greater than `0`.\n\n    invgamma.beta: number\n        Scale parameter. If set, the value must be greater than `0`.\n\n    invgamma.entropy: number\n        Read-only property which returns the differential entropy.\n\n    invgamma.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    invgamma.mean: number\n        Read-only property which returns the expected value.\n\n    invgamma.mode: number\n        Read-only property which returns the mode.\n\n    invgamma.skewness: number\n        Read-only property which returns the skewness.\n\n    invgamma.stdev: number\n        Read-only property which returns the standard deviation.\n\n    invgamma.variance: number\n        Read-only property which returns the variance.\n\n    invgamma.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    invgamma.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    invgamma.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    invgamma.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var invgamma = base.dists.invgamma.InvGamma( 6.0, 5.0 );\n    > invgamma.alpha\n    6.0\n    > invgamma.beta\n    5.0\n    > invgamma.entropy\n    ~0.454\n    > invgamma.kurtosis\n    19.0\n    > invgamma.mean\n    1.0\n    > invgamma.mode\n    ~0.714\n    > invgamma.skewness\n    ~2.667\n    > invgamma.stdev\n    0.5\n    > invgamma.variance\n    0.25\n    > invgamma.cdf( 0.8 )\n    ~0.406\n    > invgamma.pdf( 1.0 )\n    ~0.877\n    > invgamma.logpdf( 1.0 )\n    ~-0.131\n    > invgamma.quantile( 0.8 )\n    ~1.281\n\n","base.dists.invgamma.kurtosis":"\nbase.dists.invgamma.kurtosis( α, β )\n    Returns the excess kurtosis of an inverse gamma distribution.\n\n    If `α <= 4` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dists.invgamma.kurtosis( 7.0, 5.0 )\n    12.0\n    > v = base.dists.invgamma.kurtosis( 6.0, 12.0 )\n    19.0\n    > v = base.dists.invgamma.kurtosis( 8.0, 2.0 )\n    ~8.7\n\n","base.dists.invgamma.logpdf":"\nbase.dists.invgamma.logpdf( x, α, β )\n    Evaluates the natural logarithm of the probability density function (PDF)\n    for an inverse gamma distribution with shape parameter `α` and scale\n    parameter `β` at a value `x`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dists.invgamma.logpdf( 2.0, 0.5, 1.0 )\n    ~-2.112\n    > y = base.dists.invgamma.logpdf( 0.2, 1.0, 1.0 )\n    ~-1.781\n    > y = base.dists.invgamma.logpdf( -1.0, 4.0, 2.0 )\n    -Infinity\n\n    > y = base.dists.invgamma.logpdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.invgamma.logpdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.invgamma.logpdf( 0.0, 1.0, NaN )\n    NaN\n\n    // Negative shape parameter:\n    > y = base.dists.invgamma.logpdf( 2.0, -1.0, 1.0 )\n    NaN\n\n    // Negative scale parameter:\n    > y = base.dists.invgamma.logpdf( 2.0, 1.0, -1.0 )\n    NaN\n\n\nbase.dists.invgamma.logpdf.factory( α, β )\n    Returns a function for evaluating the natural logarithm of the probability\n    density function (PDF) for an inverse gamma distribution with shape\n    parameter `α` and scale parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogPDF = base.dists.invgamma.logpdf.factory( 6.0, 7.0 );\n    > var y = mylogPDF( 2.0 )\n    ~-1.464\n\n","base.dists.invgamma.logpdf.factory":"\nbase.dists.invgamma.logpdf.factory( α, β )\n    Returns a function for evaluating the natural logarithm of the probability\n    density function (PDF) for an inverse gamma distribution with shape\n    parameter `α` and scale parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogPDF = base.dists.invgamma.logpdf.factory( 6.0, 7.0 );\n    > var y = mylogPDF( 2.0 )\n    ~-1.464\n\n","base.dists.invgamma.mean":"\nbase.dists.invgamma.mean( α, β )\n    Returns the expected value of an inverse gamma distribution.\n\n    If `α <= 1` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dists.invgamma.mean( 4.0, 12.0 )\n    4.0\n    > v = base.dists.invgamma.mean( 8.0, 2.0 )\n    ~0.286\n\n","base.dists.invgamma.mode":"\nbase.dists.invgamma.mode( α, β )\n    Returns the mode of an inverse gamma distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dists.invgamma.mode( 1.0, 1.0 )\n    0.5\n    > v = base.dists.invgamma.mode( 4.0, 12.0 )\n    2.4\n    > v = base.dists.invgamma.mode( 8.0, 2.0 )\n    ~0.222\n\n","base.dists.invgamma.pdf":"\nbase.dists.invgamma.pdf( x, α, β )\n    Evaluates the probability density function (PDF) for an inverse gamma\n    distribution with shape parameter `α` and scale parameter `β` at a value\n    `x`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dists.invgamma.pdf( 2.0, 0.5, 1.0 )\n    ~0.121\n    > y = base.dists.invgamma.pdf( 0.2, 1.0, 1.0 )\n    ~0.168\n    > y = base.dists.invgamma.pdf( -1.0, 4.0, 2.0 )\n    0.0\n\n    > y = base.dists.invgamma.pdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.invgamma.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.invgamma.pdf( 0.0, 1.0, NaN )\n    NaN\n\n    // Negative shape parameter:\n    > y = base.dists.invgamma.pdf( 2.0, -1.0, 1.0 )\n    NaN\n\n    // Negative scale parameter:\n    > y = base.dists.invgamma.pdf( 2.0, 1.0, -1.0 )\n    NaN\n\n\nbase.dists.invgamma.pdf.factory( α, β )\n    Returns a function for evaluating the probability density function (PDF)\n    of an inverse gamma distribution with shape parameter `α` and scale\n    parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.invgamma.pdf.factory( 6.0, 7.0 );\n    > var y = myPDF( 2.0 )\n    ~0.231\n\n","base.dists.invgamma.pdf.factory":"\nbase.dists.invgamma.pdf.factory( α, β )\n    Returns a function for evaluating the probability density function (PDF)\n    of an inverse gamma distribution with shape parameter `α` and scale\n    parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.invgamma.pdf.factory( 6.0, 7.0 );\n    > var y = myPDF( 2.0 )\n    ~0.231\n\n","base.dists.invgamma.quantile":"\nbase.dists.invgamma.quantile( p, α, β )\n    Evaluates the quantile function for an inverse gamma distribution with shape\n    parameter `α` and scale parameter `β` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.invgamma.quantile( 0.8, 2.0, 1.0 )\n    ~1.213\n    > y = base.dists.invgamma.quantile( 0.5, 4.0, 2.0 )\n    ~0.545\n    > y = base.dists.invgamma.quantile( 1.1, 1.0, 1.0 )\n    NaN\n    > y = base.dists.invgamma.quantile( -0.2, 1.0, 1.0 )\n    NaN\n\n    > y = base.dists.invgamma.quantile( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.invgamma.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.invgamma.quantile( 0.0, 1.0, NaN )\n    NaN\n\n    // Non-positive shape parameter:\n    > y = base.dists.invgamma.quantile( 0.5, -1.0, 1.0 )\n    NaN\n\n    // Non-positive rate parameter:\n    > y = base.dists.invgamma.quantile( 0.5, 1.0, -1.0 )\n    NaN\n\n\nbase.dists.invgamma.quantile.factory( α, β )\n    Returns a function for evaluating the quantile function of an inverse gamma\n    distribution with shape parameter `α` and scale parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.invgamma.quantile.factory( 2.0, 2.0 );\n    > var y = myQuantile( 0.8 )\n    ~2.426\n    > y = myQuantile( 0.4 )\n    ~0.989\n\n","base.dists.invgamma.quantile.factory":"\nbase.dists.invgamma.quantile.factory( α, β )\n    Returns a function for evaluating the quantile function of an inverse gamma\n    distribution with shape parameter `α` and scale parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.invgamma.quantile.factory( 2.0, 2.0 );\n    > var y = myQuantile( 0.8 )\n    ~2.426\n    > y = myQuantile( 0.4 )\n    ~0.989\n\n","base.dists.invgamma.skewness":"\nbase.dists.invgamma.skewness( α, β )\n    Returns the skewness of an inverse gamma distribution.\n\n    If `α <= 3` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dists.invgamma.skewness( 4.0, 12.0 )\n    ~5.657\n    > v = base.dists.invgamma.skewness( 8.0, 2.0 )\n    ~1.96\n\n","base.dists.invgamma.stdev":"\nbase.dists.invgamma.stdev( α, β )\n    Returns the standard deviation of an inverse gamma distribution.\n\n    If `α <= 2` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dists.invgamma.stdev( 5.0, 7.0 )\n    ~1.01\n    > v = base.dists.invgamma.stdev( 4.0, 12.0 )\n    ~2.828\n    > v = base.dists.invgamma.stdev( 8.0, 2.0 )\n    ~0.117\n\n","base.dists.invgamma.variance":"\nbase.dists.invgamma.variance( α, β )\n    Returns the variance of an inverse gamma distribution.\n\n    If `α <= 2` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dists.invgamma.variance( 5.0, 7.0 )\n    ~1.021\n    > v = base.dists.invgamma.variance( 4.0, 12.0 )\n    8.0\n    > v = base.dists.invgamma.variance( 8.0, 2.0 )\n    ~0.014\n\n","base.dists.kumaraswamy.cdf":"\nbase.dists.kumaraswamy.cdf( x, a, b )\n    Evaluates the cumulative distribution function (CDF) for Kumaraswamy's\n    double bounded distribution with first shape parameter `a` and second shape\n    parameter `b` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `a <= 0` or `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.kumaraswamy.cdf( 0.5, 1.0, 1.0 )\n    ~0.5\n    > y = base.dists.kumaraswamy.cdf( 0.5, 2.0, 4.0 )\n    ~0.684\n    > y = base.dists.kumaraswamy.cdf( 0.2, 2.0, 2.0 )\n    ~0.078\n    > y = base.dists.kumaraswamy.cdf( 0.8, 4.0, 4.0 )\n    ~0.878\n    > y = base.dists.kumaraswamy.cdf( -0.5, 4.0, 2.0 )\n    0.0\n    > y = base.dists.kumaraswamy.cdf( 1.5, 4.0, 2.0 )\n    1.0\n\n    > y = base.dists.kumaraswamy.cdf( 2.0, -1.0, 0.5 )\n    NaN\n    > y = base.dists.kumaraswamy.cdf( 2.0, 0.5, -1.0 )\n    NaN\n\n    > y = base.dists.kumaraswamy.cdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.kumaraswamy.cdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.kumaraswamy.cdf( 0.0, 1.0, NaN )\n    NaN\n\n\nbase.dists.kumaraswamy.cdf.factory( a, b )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Kumaraswamy's double bounded distribution with first shape parameter\n    `a` and second shape parameter `b`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.kumaraswamy.cdf.factory( 0.5, 1.0 );\n    > var y = mycdf( 0.8 )\n    ~0.894\n    > y = mycdf( 0.3 )\n    ~0.548\n\n","base.dists.kumaraswamy.cdf.factory":"\nbase.dists.kumaraswamy.cdf.factory( a, b )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Kumaraswamy's double bounded distribution with first shape parameter\n    `a` and second shape parameter `b`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.kumaraswamy.cdf.factory( 0.5, 1.0 );\n    > var y = mycdf( 0.8 )\n    ~0.894\n    > y = mycdf( 0.3 )\n    ~0.548\n\n","base.dists.kumaraswamy.Kumaraswamy":"\nbase.dists.kumaraswamy.Kumaraswamy( [a, b] )\n    Returns a Kumaraswamy's double bounded distribution object.\n\n    Parameters\n    ----------\n    a: number (optional)\n        First shape parameter. Must be greater than `0`. Default: `1.0`.\n\n    b: number (optional)\n        Second shape parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    kumaraswamy: Object\n        Distribution instance.\n\n    kumaraswamy.a: number\n        First shape parameter. If set, the value must be greater than `0`.\n\n    kumaraswamy.b: number\n        Second shape parameter. If set, the value must be greater than `0`.\n\n    kumaraswamy.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    kumaraswamy.mean: number\n        Read-only property which returns the expected value.\n\n    kumaraswamy.mode: number\n        Read-only property which returns the mode.\n\n    kumaraswamy.skewness: number\n        Read-only property which returns the skewness.\n\n    kumaraswamy.stdev: number\n        Read-only property which returns the standard deviation.\n\n    kumaraswamy.variance: number\n        Read-only property which returns the variance.\n\n    kumaraswamy.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    kumaraswamy.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    kumaraswamy.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var kumaraswamy = base.dists.kumaraswamy.Kumaraswamy( 6.0, 5.0 );\n    > kumaraswamy.a\n    6.0\n    > kumaraswamy.b\n    5.0\n    > kumaraswamy.kurtosis\n    ~3.194\n    > kumaraswamy.mean\n    ~0.696\n    > kumaraswamy.mode\n    ~0.746\n    > kumaraswamy.skewness\n    ~-0.605\n    > kumaraswamy.stdev\n    ~0.126\n    > kumaraswamy.variance\n    ~0.016\n    > kumaraswamy.cdf( 0.8 )\n    ~0.781\n    > kumaraswamy.pdf( 1.0 )\n    ~0.0\n    > kumaraswamy.quantile( 0.8 )\n    ~0.807\n\n","base.dists.kumaraswamy.kurtosis":"\nbase.dists.kumaraswamy.kurtosis( a, b )\n    Returns the excess kurtosis of a Kumaraswamy's double bounded distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `a <= 0` or `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dists.kumaraswamy.kurtosis( 1.0, 1.0 )\n    ~1.8\n    > v = base.dists.kumaraswamy.kurtosis( 4.0, 12.0 )\n    ~2.704\n    > v = base.dists.kumaraswamy.kurtosis( 16.0, 8.0 )\n    ~4.311\n\n","base.dists.kumaraswamy.logcdf":"\nbase.dists.kumaraswamy.logcdf( x, a, b )\n    Evaluates the natural logarithm of the cumulative distribution function\n    (CDF) for Kumaraswamy's double bounded distribution with first shape\n    parameter `a` and second shape parameter `b` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `a <= 0` or `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logCDF.\n\n    Examples\n    --------\n    > var y = base.dists.kumaraswamy.logcdf( 0.5, 1.0, 1.0 )\n    ~-0.693\n    > y = base.dists.kumaraswamy.logcdf( 0.5, 2.0, 4.0 )\n    ~-0.38\n    > y = base.dists.kumaraswamy.logcdf( 0.2, 2.0, 2.0 )\n    ~-2.546\n    > y = base.dists.kumaraswamy.logcdf( 0.8, 4.0, 4.0 )\n    ~-0.13\n    > y = base.dists.kumaraswamy.logcdf( -0.5, 4.0, 2.0 )\n    -Infinity\n    > y = base.dists.kumaraswamy.logcdf( 1.5, 4.0, 2.0 )\n    0.0\n\n    > y = base.dists.kumaraswamy.logcdf( 2.0, -1.0, 0.5 )\n    NaN\n    > y = base.dists.kumaraswamy.logcdf( 2.0, 0.5, -1.0 )\n    NaN\n\n    > y = base.dists.kumaraswamy.logcdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.kumaraswamy.logcdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.kumaraswamy.logcdf( 0.0, 1.0, NaN )\n    NaN\n\n\nbase.dists.kumaraswamy.logcdf.factory( a, b )\n    Returns a function for evaluating the natural logarithm of the cumulative\n    distribution function (CDF) of a Kumaraswamy's double bounded distribution\n    with first shape parameter `a` and second shape parameter `b`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.kumaraswamy.logcdf.factory( 0.5, 1.0 );\n    > var y = mylogcdf( 0.8 )\n    ~-0.112\n    > y = mylogcdf( 0.3 )\n    ~-0.602\n\n","base.dists.kumaraswamy.logcdf.factory":"\nbase.dists.kumaraswamy.logcdf.factory( a, b )\n    Returns a function for evaluating the natural logarithm of the cumulative\n    distribution function (CDF) of a Kumaraswamy's double bounded distribution\n    with first shape parameter `a` and second shape parameter `b`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.kumaraswamy.logcdf.factory( 0.5, 1.0 );\n    > var y = mylogcdf( 0.8 )\n    ~-0.112\n    > y = mylogcdf( 0.3 )\n    ~-0.602\n\n","base.dists.kumaraswamy.logpdf":"\nbase.dists.kumaraswamy.logpdf( x, a, b )\n    Evaluates the natural logarithm of the probability density function (PDF)\n    for Kumaraswamy's double bounded distribution with first shape parameter `a`\n    and second shape parameter `b` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `a <= 0` or `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dists.kumaraswamy.logpdf( 0.5, 1.0, 1.0 )\n    0.0\n    > y = base.dists.kumaraswamy.logpdf( 0.5, 2.0, 4.0 )\n    ~0.523\n    > y = base.dists.kumaraswamy.logpdf( 0.2, 2.0, 2.0 )\n    ~-0.264\n    > y = base.dists.kumaraswamy.logpdf( 0.8, 4.0, 4.0 )\n    ~0.522\n    > y = base.dists.kumaraswamy.logpdf( -0.5, 4.0, 2.0 )\n    -Infinity\n    > y = base.dists.kumaraswamy.logpdf( 1.5, 4.0, 2.0 )\n    -Infinity\n\n    > y = base.dists.kumaraswamy.logpdf( 2.0, -1.0, 0.5 )\n    NaN\n    > y = base.dists.kumaraswamy.logpdf( 2.0, 0.5, -1.0 )\n    NaN\n\n    > y = base.dists.kumaraswamy.logpdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.kumaraswamy.logpdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.kumaraswamy.logpdf( 0.0, 1.0, NaN )\n    NaN\n\n\nbase.dists.kumaraswamy.logpdf.factory( a, b )\n    Returns a function for evaluating the natural logarithm of the probability\n    density function (PDF) of a Kumaraswamy's double bounded distribution with\n    first shape parameter `a` and second shape parameter `b`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogpdf = base.dists.kumaraswamy.logpdf.factory( 0.5, 1.0 );\n    > var y = mylogpdf( 0.8 )\n    ~-0.582\n    > y = mylogpdf( 0.3 )\n    ~-0.091\n\n","base.dists.kumaraswamy.logpdf.factory":"\nbase.dists.kumaraswamy.logpdf.factory( a, b )\n    Returns a function for evaluating the natural logarithm of the probability\n    density function (PDF) of a Kumaraswamy's double bounded distribution with\n    first shape parameter `a` and second shape parameter `b`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogpdf = base.dists.kumaraswamy.logpdf.factory( 0.5, 1.0 );\n    > var y = mylogpdf( 0.8 )\n    ~-0.582\n    > y = mylogpdf( 0.3 )\n    ~-0.091\n\n","base.dists.kumaraswamy.mean":"\nbase.dists.kumaraswamy.mean( a, b )\n    Returns the mean of a Kumaraswamy's double bounded distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `a <= 0` or `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Mean.\n\n    Examples\n    --------\n    > var v = base.dists.kumaraswamy.mean( 1.5, 1.5 )\n    ~0.512\n    > v = base.dists.kumaraswamy.mean( 4.0, 12.0 )\n    ~0.481\n    > v = base.dists.kumaraswamy.mean( 16.0, 8.0 )\n    ~0.846\n\n","base.dists.kumaraswamy.median":"\nbase.dists.kumaraswamy.median( a, b )\n    Returns the median of a Kumaraswamy's double bounded distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `a <= 0` or `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var v = base.dists.kumaraswamy.median( 1.0, 1.0 )\n    0.5\n    > v = base.dists.kumaraswamy.median( 4.0, 12.0 )\n    ~0.487\n    > v = base.dists.kumaraswamy.median( 16.0, 8.0 )\n    ~0.856\n\n","base.dists.kumaraswamy.mode":"\nbase.dists.kumaraswamy.mode( a, b )\n    Returns the mode of a Kumaraswamy's double bounded distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `a < 1`, `b < 1`, or `a = b = 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dists.kumaraswamy.mode( 1.5, 1.5 )\n    ~0.543\n    > v = base.dists.kumaraswamy.mode( 4.0, 12.0 )\n    ~0.503\n    > v = base.dists.kumaraswamy.mode( 16.0, 8.0 )\n    ~0.875\n\n","base.dists.kumaraswamy.pdf":"\nbase.dists.kumaraswamy.pdf( x, a, b )\n    Evaluates the probability density function (PDF) for Kumaraswamy's double\n    bounded distribution with first shape parameter `a` and second shape\n    parameter `b` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `a <= 0` or `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dists.kumaraswamy.pdf( 0.5, 1.0, 1.0 )\n    1.0\n    > y = base.dists.kumaraswamy.pdf( 0.5, 2.0, 4.0 )\n    ~1.688\n    > y = base.dists.kumaraswamy.pdf( 0.2, 2.0, 2.0 )\n    ~0.768\n    > y = base.dists.kumaraswamy.pdf( 0.8, 4.0, 4.0 )\n    ~1.686\n    > y = base.dists.kumaraswamy.pdf( -0.5, 4.0, 2.0 )\n    0.0\n    > y = base.dists.kumaraswamy.pdf( 1.5, 4.0, 2.0 )\n    0.0\n\n    > y = base.dists.kumaraswamy.pdf( 2.0, -1.0, 0.5 )\n    NaN\n    > y = base.dists.kumaraswamy.pdf( 2.0, 0.5, -1.0 )\n    NaN\n\n    > y = base.dists.kumaraswamy.pdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.kumaraswamy.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.kumaraswamy.pdf( 0.0, 1.0, NaN )\n    NaN\n\n\nbase.dists.kumaraswamy.pdf.factory( a, b )\n    Returns a function for evaluating the probability density function (PDF)\n    of a Kumaraswamy's double bounded distribution with first shape parameter\n    `a` and second shape parameter `b`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var mypdf = base.dists.kumaraswamy.pdf.factory( 0.5, 1.0 );\n    > var y = mypdf( 0.8 )\n    ~0.559\n    > y = mypdf( 0.3 )\n    ~0.913\n\n","base.dists.kumaraswamy.pdf.factory":"\nbase.dists.kumaraswamy.pdf.factory( a, b )\n    Returns a function for evaluating the probability density function (PDF)\n    of a Kumaraswamy's double bounded distribution with first shape parameter\n    `a` and second shape parameter `b`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var mypdf = base.dists.kumaraswamy.pdf.factory( 0.5, 1.0 );\n    > var y = mypdf( 0.8 )\n    ~0.559\n    > y = mypdf( 0.3 )\n    ~0.913\n\n","base.dists.kumaraswamy.quantile":"\nbase.dists.kumaraswamy.quantile( p, a, b )\n    Evaluates the quantile function for a Kumaraswamy's double bounded\n    distribution with first shape parameter `a` and second shape parameter `b`\n    at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `a <= 0` or `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.kumaraswamy.quantile( 0.5, 1.0, 1.0 )\n    0.5\n    > y = base.dists.kumaraswamy.quantile( 0.5, 2.0, 4.0 )\n    ~0.399\n    > y = base.dists.kumaraswamy.quantile( 0.2, 2.0, 2.0 )\n    ~0.325\n    > y = base.dists.kumaraswamy.quantile( 0.8, 4.0, 4.0 )\n    ~0.759\n\n    > y = base.dists.kumaraswamy.quantile( -0.5, 4.0, 2.0 )\n    NaN\n    > y = base.dists.kumaraswamy.quantile( 1.5, 4.0, 2.0 )\n    NaN\n\n    > y = base.dists.kumaraswamy.quantile( 2.0, -1.0, 0.5 )\n    NaN\n    > y = base.dists.kumaraswamy.quantile( 2.0, 0.5, -1.0 )\n    NaN\n\n    > y = base.dists.kumaraswamy.quantile( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.kumaraswamy.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.kumaraswamy.quantile( 0.0, 1.0, NaN )\n    NaN\n\n\nbase.dists.kumaraswamy.quantile.factory( a, b )\n    Returns a function for evaluating the quantile function of a Kumaraswamy's\n    double bounded distribution with first shape parameter `a` and second shape\n    parameter `b`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.kumaraswamy.quantile.factory( 0.5, 1.0 );\n    > var y = myQuantile( 0.8 )\n    ~0.64\n    > y = myQuantile( 0.3 )\n    ~0.09\n\n","base.dists.kumaraswamy.quantile.factory":"\nbase.dists.kumaraswamy.quantile.factory( a, b )\n    Returns a function for evaluating the quantile function of a Kumaraswamy's\n    double bounded distribution with first shape parameter `a` and second shape\n    parameter `b`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.kumaraswamy.quantile.factory( 0.5, 1.0 );\n    > var y = myQuantile( 0.8 )\n    ~0.64\n    > y = myQuantile( 0.3 )\n    ~0.09\n\n","base.dists.kumaraswamy.skewness":"\nbase.dists.kumaraswamy.skewness( a, b )\n    Returns the skewness of a Kumaraswamy's double bounded distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `a <= 0` or `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dists.kumaraswamy.skewness( 1.0, 1.0 )\n    ~1.154e-15\n    > v = base.dists.kumaraswamy.skewness( 4.0, 12.0 )\n    ~-0.201\n    > v = base.dists.kumaraswamy.skewness( 16.0, 8.0 )\n    ~-0.94\n\n","base.dists.kumaraswamy.stdev":"\nbase.dists.kumaraswamy.stdev( a, b )\n    Returns the standard deviation of a Kumaraswamy's double bounded\n    distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `a <= 0` or `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dists.kumaraswamy.stdev( 1.0, 1.0 )\n    ~0.289\n    > v = base.dists.kumaraswamy.stdev( 4.0, 12.0 )\n    ~0.13\n    > v = base.dists.kumaraswamy.stdev( 16.0, 8.0 )\n    ~0.062\n\n","base.dists.kumaraswamy.variance":"\nbase.dists.kumaraswamy.variance( a, b )\n    Returns the variance of a Kumaraswamy's double bounded distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `a <= 0` or `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dists.kumaraswamy.variance( 1.0, 1.0 )\n    ~0.083\n    > v = base.dists.kumaraswamy.variance( 4.0, 12.0 )\n    ~0.017\n    > v = base.dists.kumaraswamy.variance( 16.0, 8.0 )\n    ~0.004\n\n","base.dists.laplace.cdf":"\nbase.dists.laplace.cdf( x, μ, b )\n    Evaluates the cumulative distribution function (CDF) for a Laplace\n    distribution with scale parameter `b` and location parameter `μ` at a\n    value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.laplace.cdf( 2.0, 0.0, 1.0 )\n    ~0.932\n    > y = base.dists.laplace.cdf( 5.0, 10.0, 3.0 )\n    ~0.094\n    > y = base.dists.laplace.cdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.laplace.cdf( 2, NaN, 1.0 )\n    NaN\n    > y = base.dists.laplace.cdf( 2.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dists.laplace.cdf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dists.laplace.cdf.factory( μ, b )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Laplace distribution with scale parameter `b` and location parameter\n    `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.laplace.cdf.factory( 2.0, 3.0 );\n    > var y = myCDF( 10.0 )\n    ~0.965\n    > y = myCDF( 2.0 )\n    0.5\n\n","base.dists.laplace.cdf.factory":"\nbase.dists.laplace.cdf.factory( μ, b )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Laplace distribution with scale parameter `b` and location parameter\n    `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.laplace.cdf.factory( 2.0, 3.0 );\n    > var y = myCDF( 10.0 )\n    ~0.965\n    > y = myCDF( 2.0 )\n    0.5\n\n","base.dists.laplace.entropy":"\nbase.dists.laplace.entropy( μ, b )\n    Returns the differential entropy of a Laplace distribution with location\n    parameter `μ` and scale parameter `b`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Differential entropy.\n\n    Examples\n    --------\n    > var y = base.dists.laplace.entropy( 0.0, 1.0 )\n    ~1.693\n    > y = base.dists.laplace.entropy( 4.0, 2.0 )\n    ~2.386\n    > y = base.dists.laplace.entropy( NaN, 1.0 )\n    NaN\n    > y = base.dists.laplace.entropy( 0.0, NaN )\n    NaN\n    > y = base.dists.laplace.entropy( 0.0, 0.0 )\n    NaN\n\n","base.dists.laplace.kurtosis":"\nbase.dists.laplace.kurtosis( μ, b )\n    Returns the excess kurtosis of a Laplace distribution with location\n    parameter `μ` and scale parameter `b`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var y = base.dists.laplace.kurtosis( 0.0, 1.0 )\n    3.0\n    > y = base.dists.laplace.kurtosis( 4.0, 2.0 )\n    3.0\n    > y = base.dists.laplace.kurtosis( NaN, 1.0 )\n    NaN\n    > y = base.dists.laplace.kurtosis( 0.0, NaN )\n    NaN\n    > y = base.dists.laplace.kurtosis( 0.0, 0.0 )\n    NaN\n\n","base.dists.laplace.Laplace":"\nbase.dists.laplace.Laplace( [μ, b] )\n    Returns a Laplace distribution object.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Location parameter. Default: `0.0`.\n\n    b: number (optional)\n        Scale parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    laplace: Object\n        Distribution instance.\n\n    laplace.mu: number\n        Location parameter.\n\n    laplace.b: number\n        Scale parameter. If set, the value must be greater than `0`.\n\n    laplace.entropy: number\n        Read-only property which returns the differential entropy.\n\n    laplace.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    laplace.mean: number\n        Read-only property which returns the expected value.\n\n    laplace.median: number\n        Read-only property which returns the median.\n\n    laplace.mode: number\n        Read-only property which returns the mode.\n\n    laplace.skewness: number\n        Read-only property which returns the skewness.\n\n    laplace.stdev: number\n        Read-only property which returns the standard deviation.\n\n    laplace.variance: number\n        Read-only property which returns the variance.\n\n    laplace.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    laplace.logcdf: Function\n        Evaluates the natural logarithm of the cumulative distribution function\n        (CDF).\n\n    laplace.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    laplace.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    laplace.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    laplace.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var laplace = base.dists.laplace.Laplace( -2.0, 3.0 );\n    > laplace.mu\n    -2.0\n    > laplace.b\n    3.0\n    > laplace.entropy\n    ~2.792\n    > laplace.kurtosis\n    3.0\n    > laplace.mean\n    -2.0\n    > laplace.median\n    -2.0\n    > laplace.mode\n    -2.0\n    > laplace.skewness\n    0.0\n    > laplace.stdev\n    ~4.243\n    > laplace.variance\n    18.0\n    > laplace.cdf( 0.8 )\n    ~0.803\n    > laplace.logcdf( 0.8 )\n    ~-0.219\n    > laplace.logpdf( 1.0 )\n    ~-2.792\n    > laplace.mgf( 0.2 )\n    ~1.047\n    > laplace.pdf( 2.0 )\n    ~0.044\n    > laplace.quantile( 0.9 )\n    ~2.828\n\n","base.dists.laplace.logcdf":"\nbase.dists.laplace.logcdf( x, μ, b )\n    Evaluates the logarithm of the cumulative distribution function (CDF) for a\n    Laplace distribution with scale parameter `b` and location parameter `μ` at\n    a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logCDF.\n\n    Examples\n    --------\n    > var y = base.dists.laplace.logcdf( 2.0, 0.0, 1.0 )\n    ~-0.07\n    > y = base.dists.laplace.logcdf( 5.0, 10.0, 3.0 )\n    ~-2.36\n    > y = base.dists.laplace.logcdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.laplace.logcdf( 2, NaN, 1.0 )\n    NaN\n    > y = base.dists.laplace.logcdf( 2.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dists.laplace.logcdf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dists.laplace.logcdf.factory( μ, b )\n    Returns a function for evaluating the logarithm of the cumulative\n    distribution function (CDF) of a Laplace distribution with scale parameter\n    `b` and location parameter `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.laplace.logcdf.factory( 2.0, 3.0 );\n    > var y = mylogcdf( 10.0 )\n    ~-0.035\n    > y = mylogcdf( 2.0 )\n    ~-0.693\n\n","base.dists.laplace.logcdf.factory":"\nbase.dists.laplace.logcdf.factory( μ, b )\n    Returns a function for evaluating the logarithm of the cumulative\n    distribution function (CDF) of a Laplace distribution with scale parameter\n    `b` and location parameter `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.laplace.logcdf.factory( 2.0, 3.0 );\n    > var y = mylogcdf( 10.0 )\n    ~-0.035\n    > y = mylogcdf( 2.0 )\n    ~-0.693\n\n","base.dists.laplace.logpdf":"\nbase.dists.laplace.logpdf( x, μ, b )\n    Evaluates the logarithm of the probability density function (PDF) for a\n    Laplace distribution with scale parameter `b` and location parameter `μ` at\n    a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dists.laplace.logpdf( 2.0, 0.0, 1.0 )\n    ~-2.693\n    > y = base.dists.laplace.logpdf( -1.0, 2.0, 3.0 )\n    ~-2.792\n    > y = base.dists.laplace.logpdf( 2.5, 2.0, 3.0 )\n    ~-1.958\n    > y = base.dists.laplace.logpdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.laplace.logpdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.laplace.logpdf( 0.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dists.laplace.logpdf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dists.laplace.logpdf.factory( μ, b )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a Laplace distribution with scale parameter `b` and\n    location parameter `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogPDF = base.dists.laplace.logpdf.factory( 10.0, 2.0 );\n    > var y = mylogPDF( 10.0 )\n    ~-1.386\n\n","base.dists.laplace.logpdf.factory":"\nbase.dists.laplace.logpdf.factory( μ, b )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a Laplace distribution with scale parameter `b` and\n    location parameter `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogPDF = base.dists.laplace.logpdf.factory( 10.0, 2.0 );\n    > var y = mylogPDF( 10.0 )\n    ~-1.386\n\n","base.dists.laplace.mean":"\nbase.dists.laplace.mean( μ, b )\n    Returns the expected value of a Laplace distribution with location parameter\n    `μ` and scale parameter `b`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var y = base.dists.laplace.mean( 0.0, 1.0 )\n    0.0\n    > y = base.dists.laplace.mean( 4.0, 2.0 )\n    4.0\n    > y = base.dists.laplace.mean( NaN, 1.0 )\n    NaN\n    > y = base.dists.laplace.mean( 0.0, NaN )\n    NaN\n    > y = base.dists.laplace.mean( 0.0, 0.0 )\n    NaN\n\n","base.dists.laplace.median":"\nbase.dists.laplace.median( μ, b )\n    Returns the median of a Laplace distribution with location parameter `μ` and\n    scale parameter `b`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var y = base.dists.laplace.median( 0.0, 1.0 )\n    0.0\n    > y = base.dists.laplace.median( 4.0, 2.0 )\n    4.0\n    > y = base.dists.laplace.median( NaN, 1.0 )\n    NaN\n    > y = base.dists.laplace.median( 0.0, NaN )\n    NaN\n    > y = base.dists.laplace.median( 0.0, 0.0 )\n    NaN\n\n","base.dists.laplace.mgf":"\nbase.dists.laplace.mgf( t, μ, b )\n    Evaluates the moment-generating function (MGF) for a Laplace\n    distribution with scale parameter `b` and location parameter `μ` at a\n    value `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    t: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dists.laplace.mgf( 0.5, 0.0, 1.0 )\n    ~1.333\n    > y = base.dists.laplace.mgf( 0.0, 0.0, 1.0 )\n    1.0\n    > y = base.dists.laplace.mgf( -1.0, 4.0, 0.2 )\n    ~0.019\n    > y = base.dists.laplace.mgf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.laplace.mgf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.laplace.mgf( 0.0, 0.0, NaN )\n    NaN\n    > y = base.dists.laplace.mgf( 1.0, 0.0, 2.0 )\n    NaN\n    > y = base.dists.laplace.mgf( -0.5, 0.0, 4.0 )\n    NaN\n    > y = base.dists.laplace.mgf( 2.0, 0.0, 0.0 )\n    NaN\n    > y = base.dists.laplace.mgf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dists.laplace.mgf.factory( μ, b )\n    Returns a function for evaluating the moment-generating function (MGF)\n    of a Laplace distribution with scale parameter `b` and location parameter\n    `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var mymgf = base.dists.laplace.mgf.factory( 4.0, 2.0 );\n    > var y = mymgf( 0.2 )\n    ~2.649\n    > y = mymgf( 0.4 )\n    ~13.758\n\n","base.dists.laplace.mgf.factory":"\nbase.dists.laplace.mgf.factory( μ, b )\n    Returns a function for evaluating the moment-generating function (MGF)\n    of a Laplace distribution with scale parameter `b` and location parameter\n    `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var mymgf = base.dists.laplace.mgf.factory( 4.0, 2.0 );\n    > var y = mymgf( 0.2 )\n    ~2.649\n    > y = mymgf( 0.4 )\n    ~13.758\n\n","base.dists.laplace.mode":"\nbase.dists.laplace.mode( μ, b )\n    Returns the mode of a Laplace distribution with location parameter `μ` and\n    scale parameter `b`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var y = base.dists.laplace.mode( 0.0, 1.0 )\n    0.0\n    > y = base.dists.laplace.mode( 4.0, 2.0 )\n    4.0\n    > y = base.dists.laplace.mode( NaN, 1.0 )\n    NaN\n    > y = base.dists.laplace.mode( 0.0, NaN )\n    NaN\n    > y = base.dists.laplace.mode( 0.0, 0.0 )\n    NaN\n\n","base.dists.laplace.pdf":"\nbase.dists.laplace.pdf( x, μ, b )\n    Evaluates the probability density function (PDF) for a Laplace\n    distribution with scale parameter `b` and location parameter `μ` at a\n    value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dists.laplace.pdf( 2.0, 0.0, 1.0 )\n    ~0.068\n    > y = base.dists.laplace.pdf( -1.0, 2.0, 3.0 )\n    ~0.061\n    > y = base.dists.laplace.pdf( 2.5, 2.0, 3.0 )\n    ~0.141\n    > y = base.dists.laplace.pdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.laplace.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.laplace.pdf( 0.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dists.laplace.pdf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dists.laplace.pdf.factory( μ, b )\n    Returns a function for evaluating the probability density function (PDF)\n    of a Laplace distribution with scale parameter `b` and location parameter\n    `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.laplace.pdf.factory( 10.0, 2.0 );\n    > var y = myPDF( 10.0 )\n    0.25\n\n","base.dists.laplace.pdf.factory":"\nbase.dists.laplace.pdf.factory( μ, b )\n    Returns a function for evaluating the probability density function (PDF)\n    of a Laplace distribution with scale parameter `b` and location parameter\n    `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.laplace.pdf.factory( 10.0, 2.0 );\n    > var y = myPDF( 10.0 )\n    0.25\n\n","base.dists.laplace.quantile":"\nbase.dists.laplace.quantile( p, μ, b )\n    Evaluates the quantile function for a Laplace distribution with scale\n    parameter `b` and location parameter `μ` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.laplace.quantile( 0.8, 0.0, 1.0 )\n    ~0.916\n    > y = base.dists.laplace.quantile( 0.5, 4.0, 2.0 )\n    4.0\n\n    > y = base.dists.laplace.quantile( 1.1, 0.0, 1.0 )\n    NaN\n    > y = base.dists.laplace.quantile( -0.2, 0.0, 1.0 )\n    NaN\n\n    > y = base.dists.laplace.quantile( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.laplace.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.laplace.quantile( 0.0, 0.0, NaN )\n    NaN\n\n    // Negative scale parameter:\n    > y = base.dists.laplace.quantile( 0.5, 0.0, -1.0 )\n    NaN\n\n\nbase.dists.laplace.quantile.factory( μ, b )\n    Returns a function for evaluating the quantile function of a Laplace\n    distribution with scale parameter `b` and location parameter `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.laplace.quantile.factory( 10.0, 2.0 );\n    > var y = myQuantile( 0.5 )\n    10.0\n    > y = myQuantile( 0.8 )\n    ~11.833\n\n","base.dists.laplace.quantile.factory":"\nbase.dists.laplace.quantile.factory( μ, b )\n    Returns a function for evaluating the quantile function of a Laplace\n    distribution with scale parameter `b` and location parameter `μ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.laplace.quantile.factory( 10.0, 2.0 );\n    > var y = myQuantile( 0.5 )\n    10.0\n    > y = myQuantile( 0.8 )\n    ~11.833\n\n","base.dists.laplace.skewness":"\nbase.dists.laplace.skewness( μ, b )\n    Returns the skewness of a Laplace distribution with location parameter `μ`\n    and scale parameter `b`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var y = base.dists.laplace.skewness( 0.0, 1.0 )\n    0.0\n    > y = base.dists.laplace.skewness( 4.0, 2.0 )\n    0.0\n    > y = base.dists.laplace.skewness( NaN, 1.0 )\n    NaN\n    > y = base.dists.laplace.skewness( 0.0, NaN )\n    NaN\n    > y = base.dists.laplace.skewness( 0.0, 0.0 )\n    NaN\n\n","base.dists.laplace.stdev":"\nbase.dists.laplace.stdev( μ, b )\n    Returns the standard deviation of a Laplace distribution with location\n    parameter `μ` and scale parameter `b`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var y = base.dists.laplace.stdev( 0.0, 1.0 )\n    ~1.414\n    > y = base.dists.laplace.stdev( 4.0, 2.0 )\n    ~2.828\n    > y = base.dists.laplace.stdev( NaN, 1.0 )\n    NaN\n    > y = base.dists.laplace.stdev( 0.0, NaN )\n    NaN\n    > y = base.dists.laplace.stdev( 0.0, 0.0 )\n    NaN\n\n","base.dists.laplace.variance":"\nbase.dists.laplace.variance( μ, b )\n    Returns the variance of a Laplace distribution with location parameter `μ`\n    and scale parameter `b`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var y = base.dists.laplace.variance( 0.0, 1.0 )\n    2.0\n    > y = base.dists.laplace.variance( 4.0, 2.0 )\n    8.0\n    > y = base.dists.laplace.variance( NaN, 1.0 )\n    NaN\n    > y = base.dists.laplace.variance( 0.0, NaN )\n    NaN\n    > y = base.dists.laplace.variance( 0.0, 0.0 )\n    NaN\n\n","base.dists.levy.cdf":"\nbase.dists.levy.cdf( x, μ, c )\n    Evaluates the cumulative distribution function (CDF) for a Lévy distribution\n    with location parameter `μ` and scale parameter `c` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `c <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.levy.cdf( 2.0, 0.0, 1.0 )\n    ~0.48\n    > y = base.dists.levy.cdf( 12.0, 10.0, 3.0 )\n    ~0.221\n    > y = base.dists.levy.cdf( 9.0, 10.0, 3.0 )\n    0.0\n    > y = base.dists.levy.cdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.levy.cdf( 2, NaN, 1.0 )\n    NaN\n    > y = base.dists.levy.cdf( 2.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dists.levy.cdf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dists.levy.cdf.factory( μ, c )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Lévy distribution with location parameter `μ` and scale parameter `c`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.levy.cdf.factory( 2.0, 3.0 );\n    > var y = myCDF( 10.0 )\n    ~0.54\n    > y = myCDF( 2.0 )\n    0.0\n\n","base.dists.levy.cdf.factory":"\nbase.dists.levy.cdf.factory( μ, c )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Lévy distribution with location parameter `μ` and scale parameter `c`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.levy.cdf.factory( 2.0, 3.0 );\n    > var y = myCDF( 10.0 )\n    ~0.54\n    > y = myCDF( 2.0 )\n    0.0\n\n","base.dists.levy.entropy":"\nbase.dists.levy.entropy( μ, c )\n    Returns the entropy of a Lévy distribution with location parameter `μ` and\n    scale parameter `c`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `c <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var y = base.dists.levy.entropy( 0.0, 1.0 )\n    ~3.324\n    > y = base.dists.levy.entropy( 4.0, 2.0 )\n    ~4.018\n    > y = base.dists.levy.entropy( NaN, 1.0 )\n    NaN\n    > y = base.dists.levy.entropy( 0.0, NaN )\n    NaN\n    > y = base.dists.levy.entropy( 0.0, 0.0 )\n    NaN\n\n","base.dists.levy.Levy":"\nbase.dists.levy.Levy( [μ, c] )\n    Returns a Lévy distribution object.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Location parameter. Default: `0.0`.\n\n    c: number (optional)\n        Scale parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    levy: Object\n        Distribution instance.\n\n    levy.mu: number\n        Location parameter.\n\n    levy.c: number\n        Scale parameter. If set, the value must be greater than `0`.\n\n    levy.entropy: number\n        Read-only property which returns the differential entropy.\n\n    levy.mean: number\n        Read-only property which returns the expected value.\n\n    levy.median: number\n        Read-only property which returns the median.\n\n    levy.mode: number\n        Read-only property which returns the mode.\n\n    levy.stdev: number\n        Read-only property which returns the standard deviation.\n\n    levy.variance: number\n        Read-only property which returns the variance.\n\n    levy.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    levy.logcdf: Function\n        Evaluates the natural logarithm of the cumulative distribution function\n        (CDF).\n\n    levy.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    levy.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    levy.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var levy = base.dists.levy.Levy( -2.0, 3.0 );\n    > levy.mu\n    -2.0\n    > levy.c\n    3.0\n    > levy.entropy\n    ~4.423\n    > levy.mean\n    Infinity\n    > levy.median\n    ~4.594\n    > levy.mode\n    -1.0\n    > levy.stdev\n    Infinity\n    > levy.variance\n    Infinity\n    > levy.cdf( 0.8 )\n    ~0.3\n    > levy.logcdf( 0.8 )\n    ~-1.2\n    > levy.logpdf( 1.0 )\n    ~-2.518\n    > levy.pdf( 1.0 )\n    ~0.081\n    > levy.quantile( 0.8 )\n    ~44.74\n\n","base.dists.levy.logcdf":"\nbase.dists.levy.logcdf( x, μ, c )\n    Evaluates the logarithm of the cumulative distribution function (CDF) for a\n    Lévy distribution with location parameter `μ` and scale parameter `c` at a\n    value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `c <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logCDF.\n\n    Examples\n    --------\n    > var y = base.dists.levy.logcdf( 2.0, 0.0, 1.0 )\n    ~-0.735\n    > y = base.dists.levy.logcdf( 12.0, 10.0, 3.0 )\n    ~-1.51\n    > y = base.dists.levy.logcdf( 9.0, 10.0, 3.0 )\n    -Infinity\n    > y = base.dists.levy.logcdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.levy.logcdf( 2, NaN, 1.0 )\n    NaN\n    > y = base.dists.levy.logcdf( 2.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dists.levy.logcdf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dists.levy.logcdf.factory( μ, c )\n    Returns a function for evaluating the logarithm of the cumulative\n    distribution function (CDF) of a Lévy distribution with location parameter\n    `μ` and scale parameter `c`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.levy.logcdf.factory( 2.0, 3.0 );\n    > var y = mylogcdf( 10.0 )\n    ~-0.616\n    > y = mylogcdf( 2.0 )\n    -Infinity\n\n","base.dists.levy.logcdf.factory":"\nbase.dists.levy.logcdf.factory( μ, c )\n    Returns a function for evaluating the logarithm of the cumulative\n    distribution function (CDF) of a Lévy distribution with location parameter\n    `μ` and scale parameter `c`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.levy.logcdf.factory( 2.0, 3.0 );\n    > var y = mylogcdf( 10.0 )\n    ~-0.616\n    > y = mylogcdf( 2.0 )\n    -Infinity\n\n","base.dists.levy.logpdf":"\nbase.dists.levy.logpdf( x, μ, c )\n    Evaluates the logarithm of the probability density function (PDF) for a Lévy\n    distribution with location parameter `μ` and scale parameter `c` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `c <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dists.levy.logpdf( 2.0, 0.0, 1.0 )\n    ~-2.209\n    > y = base.dists.levy.logpdf( -1.0, 4.0, 2.0 )\n    -Infinity\n    > y = base.dists.levy.logpdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.levy.logpdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.levy.logpdf( 0.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dists.levy.logpdf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dists.levy.logpdf.factory( μ, c )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a Lévy distribution with location parameter `μ` and scale\n    parameter `c`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogPDF = base.dists.levy.logpdf.factory( 10.0, 2.0 );\n    > var y = mylogPDF( 11.0 )\n    ~-1.572\n\n","base.dists.levy.logpdf.factory":"\nbase.dists.levy.logpdf.factory( μ, c )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a Lévy distribution with location parameter `μ` and scale\n    parameter `c`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogPDF = base.dists.levy.logpdf.factory( 10.0, 2.0 );\n    > var y = mylogPDF( 11.0 )\n    ~-1.572\n\n","base.dists.levy.mean":"\nbase.dists.levy.mean( μ, c )\n    Returns the expected value of a Lévy distribution with location parameter\n    `μ` and scale parameter `c`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `c <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var y = base.dists.levy.mean( 0.0, 1.0 )\n    Infinity\n    > y = base.dists.levy.mean( 4.0, 3.0 )\n    Infinity\n    > y = base.dists.levy.mean( NaN, 1.0 )\n    NaN\n    > y = base.dists.levy.mean( 0.0, NaN )\n    NaN\n    > y = base.dists.levy.mean( 0.0, 0.0 )\n    NaN\n\n","base.dists.levy.median":"\nbase.dists.levy.median( μ, c )\n    Returns the median of a Lévy distribution with location parameter `μ` and\n    scale parameter `c`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `c <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var y = base.dists.levy.median( 0.0, 1.0 )\n    ~2.198\n    > y = base.dists.levy.median( 4.0, 3.0 )\n    ~10.594\n    > y = base.dists.levy.median( NaN, 1.0 )\n    NaN\n    > y = base.dists.levy.median( 0.0, NaN )\n    NaN\n    > y = base.dists.levy.median( 0.0, 0.0 )\n    NaN\n\n","base.dists.levy.mode":"\nbase.dists.levy.mode( μ, c )\n    Returns the mode of a Lévy distribution with location parameter `μ` and\n    scale parameter `c`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `c <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var y = base.dists.levy.mode( 0.0, 1.0 )\n    ~0.333\n    > y = base.dists.levy.mode( 4.0, 3.0 )\n    5.0\n    > y = base.dists.levy.mode( NaN, 1.0 )\n    NaN\n    > y = base.dists.levy.mode( 0.0, NaN )\n    NaN\n    > y = base.dists.levy.mode( 0.0, 0.0 )\n    NaN\n\n","base.dists.levy.pdf":"\nbase.dists.levy.pdf( x, μ, c )\n    Evaluates the probability density function (PDF) for a Lévy distribution\n    with location parameter `μ` and scale parameter `c` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `c <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dists.levy.pdf( 2.0, 0.0, 1.0 )\n    ~0.11\n    > y = base.dists.levy.pdf( -1.0, 4.0, 2.0 )\n    0.0\n    > y = base.dists.levy.pdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.levy.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.levy.pdf( 0.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dists.levy.pdf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dists.levy.pdf.factory( μ, c )\n    Returns a function for evaluating the probability density function (PDF) of\n    a Lévy distribution with location parameter `μ` and scale parameter `c`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.levy.pdf.factory( 10.0, 2.0 );\n    > var y = myPDF( 11.0 )\n    ~0.208\n\n","base.dists.levy.pdf.factory":"\nbase.dists.levy.pdf.factory( μ, c )\n    Returns a function for evaluating the probability density function (PDF) of\n    a Lévy distribution with location parameter `μ` and scale parameter `c`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.levy.pdf.factory( 10.0, 2.0 );\n    > var y = myPDF( 11.0 )\n    ~0.208\n\n","base.dists.levy.quantile":"\nbase.dists.levy.quantile( p, μ, c )\n    Evaluates the quantile function for a Lévy distribution with location\n    parameter `μ` and scale parameter `c` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `c <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.levy.quantile( 0.8, 0.0, 1.0 )\n    ~15.58\n    > y = base.dists.levy.quantile( 0.5, 4.0, 2.0 )\n    ~8.396\n\n    > y = base.dists.levy.quantile( 1.1, 0.0, 1.0 )\n    NaN\n    > y = base.dists.levy.quantile( -0.2, 0.0, 1.0 )\n    NaN\n\n    > y = base.dists.levy.quantile( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.levy.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.levy.quantile( 0.0, 0.0, NaN )\n    NaN\n\n    // Negative scale parameter:\n    > y = base.dists.levy.quantile( 0.5, 0.0, -1.0 )\n    NaN\n\n\nbase.dists.levy.quantile.factory( μ, c )\n    Returns a function for evaluating the quantile function of a Lévy\n    distribution with location parameter `μ` and scale parameter `c`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.levy.quantile.factory( 10.0, 2.0 );\n    > var y = myQuantile( 0.5 )\n    ~14.396\n\n","base.dists.levy.quantile.factory":"\nbase.dists.levy.quantile.factory( μ, c )\n    Returns a function for evaluating the quantile function of a Lévy\n    distribution with location parameter `μ` and scale parameter `c`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.levy.quantile.factory( 10.0, 2.0 );\n    > var y = myQuantile( 0.5 )\n    ~14.396\n\n","base.dists.levy.stdev":"\nbase.dists.levy.stdev( μ, c )\n    Returns the standard deviation of a Lévy distribution with location\n    parameter `μ` and scale parameter `c`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `c <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var y = base.dists.levy.stdev( 0.0, 1.0 )\n    Infinity\n    > y = base.dists.levy.stdev( 4.0, 3.0 )\n    Infinity\n    > y = base.dists.levy.stdev( NaN, 1.0 )\n    NaN\n    > y = base.dists.levy.stdev( 0.0, NaN )\n    NaN\n    > y = base.dists.levy.stdev( 0.0, 0.0 )\n    NaN\n\n","base.dists.levy.variance":"\nbase.dists.levy.variance( μ, c )\n    Returns the variance of a Lévy distribution with location parameter `μ` and\n    scale parameter `c`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `c <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var y = base.dists.levy.variance( 0.0, 1.0 )\n    Infinity\n    > y = base.dists.levy.variance( 4.0, 3.0 )\n    Infinity\n    > y = base.dists.levy.variance( NaN, 1.0 )\n    NaN\n    > y = base.dists.levy.variance( 0.0, NaN )\n    NaN\n    > y = base.dists.levy.variance( 0.0, 0.0 )\n    NaN\n\n","base.dists.logistic.cdf":"\nbase.dists.logistic.cdf( x, μ, s )\n    Evaluates the cumulative distribution function (CDF) for a logistic\n    distribution with location parameter `μ` and scale parameter `s` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.logistic.cdf( 2.0, 0.0, 1.0 )\n    ~0.881\n    > y = base.dists.logistic.cdf( 5.0, 10.0, 3.0 )\n    ~0.159\n\n    > y = base.dists.logistic.cdf( 2.0, 0.0, NaN )\n    NaN\n    > y = base.dists.logistic.cdf( 2.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.logistic.cdf( NaN, 0.0, 1.0 )\n    NaN\n\n    // Degenerate distribution centered at `μ` when `s = 0.0`:\n    > y = base.dists.logistic.cdf( 2.0, 8.0, 0.0 )\n    0.0\n    > y = base.dists.logistic.cdf( 8.0, 8.0, 0.0 )\n    1.0\n    > y = base.dists.logistic.cdf( 10.0, 8.0, 0.0 )\n    1.0\n\n\nbase.dists.logistic.cdf.factory( μ, s )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a logistic distribution with location parameter `μ` and scale parameter\n    `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.logistic.cdf.factory( 3.0, 1.5 );\n    > var y = mycdf( 1.0 )\n    ~0.209\n\n","base.dists.logistic.cdf.factory":"\nbase.dists.logistic.cdf.factory( μ, s )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a logistic distribution with location parameter `μ` and scale parameter\n    `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.logistic.cdf.factory( 3.0, 1.5 );\n    > var y = mycdf( 1.0 )\n    ~0.209\n\n","base.dists.logistic.entropy":"\nbase.dists.logistic.entropy( μ, s )\n    Returns the entropy of a logistic distribution with location parameter `μ`\n    and scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var y = base.dists.logistic.entropy( 0.0, 1.0 )\n    2.0\n    > y = base.dists.logistic.entropy( 4.0, 2.0 )\n    ~2.693\n    > y = base.dists.logistic.entropy( NaN, 1.0 )\n    NaN\n    > y = base.dists.logistic.entropy( 0.0, NaN )\n    NaN\n    > y = base.dists.logistic.entropy( 0.0, 0.0 )\n    NaN\n\n","base.dists.logistic.kurtosis":"\nbase.dists.logistic.kurtosis( μ, s )\n    Returns the excess kurtosis of a logistic distribution with location\n    parameter `μ` and scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var y = base.dists.logistic.kurtosis( 0.0, 1.0 )\n    1.2\n    > y = base.dists.logistic.kurtosis( 4.0, 2.0 )\n    1.2\n    > y = base.dists.logistic.kurtosis( NaN, 1.0 )\n    NaN\n    > y = base.dists.logistic.kurtosis( 0.0, NaN )\n    NaN\n    > y = base.dists.logistic.kurtosis( 0.0, 0.0 )\n    NaN\n\n\n","base.dists.logistic.logcdf":"\nbase.dists.logistic.logcdf( x, μ, s )\n    Evaluates the logarithm of the cumulative distribution function (CDF) for a\n    logistic distribution with location parameter `μ` and scale parameter `s` at\n    a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logCDF.\n\n    Examples\n    --------\n    > var y = base.dists.logistic.logcdf( 2.0, 0.0, 1.0 )\n    ~-0.127\n    > y = base.dists.logistic.logcdf( 5.0, 10.0, 3.0 )\n    ~-1.84\n    > y = base.dists.logistic.logcdf( 2.0, 0.0, NaN )\n    NaN\n    > y = base.dists.logistic.logcdf( 2, NaN, 1.0 )\n    NaN\n    > y = base.dists.logistic.logcdf( NaN, 0.0, 1.0 )\n    NaN\n\n\nbase.dists.logistic.logcdf.factory( μ, s )\n    Returns a function for evaluating the logarithm of the cumulative\n    distribution function (CDF) of a Logistic distribution with location\n    parameter `μ` and scale parameter `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.logistic.logcdf.factory( 3.0, 1.5 );\n    > var y = mylogcdf( 1.0 )\n    ~-1.567\n\n","base.dists.logistic.logcdf.factory":"\nbase.dists.logistic.logcdf.factory( μ, s )\n    Returns a function for evaluating the logarithm of the cumulative\n    distribution function (CDF) of a Logistic distribution with location\n    parameter `μ` and scale parameter `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.logistic.logcdf.factory( 3.0, 1.5 );\n    > var y = mylogcdf( 1.0 )\n    ~-1.567\n\n","base.dists.logistic.Logistic":"\nbase.dists.logistic.Logistic( [μ, s] )\n    Returns a logistic distribution object.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Location parameter. Default: `0.0`.\n\n    s: number (optional)\n        Scale parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    logistic: Object\n        Distribution instance.\n\n    logistic.mu: number\n        Location parameter.\n\n    logistic.s: number\n        Scale parameter. If set, the value must be greater than `0`.\n\n    logistic.entropy: number\n        Read-only property which returns the differential entropy.\n\n    logistic.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    logistic.mean: number\n        Read-only property which returns the expected value.\n\n    logistic.median: number\n        Read-only property which returns the median.\n\n    logistic.mode: number\n        Read-only property which returns the mode.\n\n    logistic.skewness: number\n        Read-only property which returns the skewness.\n\n    logistic.stdev: number\n        Read-only property which returns the standard deviation.\n\n    logistic.variance: number\n        Read-only property which returns the variance.\n\n    logistic.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    logistic.logcdf: Function\n        Evaluates the natural logarithm of the cumulative distribution function\n        (CDF).\n\n    logistic.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    logistic.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    logistic.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    logistic.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var logistic = base.dists.logistic.Logistic( -2.0, 3.0 );\n    > logistic.mu\n    -2.0\n    > logistic.s\n    3.0\n    > logistic.entropy\n    ~3.1\n    > logistic.kurtosis\n    1.2\n    > logistic.mean\n    -2.0\n    > logistic.median\n    -2.0\n    > logistic.mode\n    -2.0\n    > logistic.skewness\n    0.0\n    > logistic.stdev\n    ~5.441\n    > logistic.variance\n    ~29.609\n    > logistic.cdf( 0.8 )\n    ~0.718\n    > logistic.logcdf( 0.8 )\n    ~-0.332\n    > logistic.logpdf( 2.0 )\n    ~-2.9\n    > logistic.mgf( 0.2 )\n    ~1.329\n    > logistic.pdf( 2.0 )\n    ~0.055\n    > logistic.quantile( 0.9 )\n    ~4.592\n\n","base.dists.logistic.logpdf":"\nbase.dists.logistic.logpdf( x, μ, s )\n    Evaluates the logarithm of the probability density function (PDF) for a\n    logistic distribution with location parameter `μ` and scale parameter `s` at\n    a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dists.logistic.logpdf( 2.0, 0.0, 1.0 )\n    ~-2.254\n    > y = base.dists.logistic.logpdf( -1.0, 4.0, 2.0 )\n    ~-3.351\n    > y = base.dists.logistic.logpdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.logistic.logpdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.logistic.logpdf( 0.0, 0.0, NaN )\n    NaN\n\n    // Negative scale parameter:\n    > y = base.dists.logistic.logpdf( 2.0, 0.0, -1.0 )\n    NaN\n\n    // Degenerate distribution at `s = 0.0`:\n    > y = base.dists.logistic.logpdf( 2.0, 8.0, 0.0 )\n    -Infinity\n    > y = base.dists.logistic.logpdf( 8.0, 8.0, 0.0 )\n    Infinity\n\n\nbase.dists.logistic.logpdf.factory( μ, s )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a Logistic distribution with location parameter `μ` and\n    scale parameter `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogpdf = base.dists.logistic.logpdf.factory( 10.0, 2.0 );\n    > var y = mylogpdf( 10.0 )\n    ~-2.079\n\n","base.dists.logistic.logpdf.factory":"\nbase.dists.logistic.logpdf.factory( μ, s )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a Logistic distribution with location parameter `μ` and\n    scale parameter `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogpdf = base.dists.logistic.logpdf.factory( 10.0, 2.0 );\n    > var y = mylogpdf( 10.0 )\n    ~-2.079\n\n","base.dists.logistic.mean":"\nbase.dists.logistic.mean( μ, s )\n    Returns the expected value of a logistic distribution with location\n    parameter `μ` and scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var y = base.dists.logistic.mean( 0.0, 1.0 )\n    0.0\n    > y = base.dists.logistic.mean( 4.0, 2.0 )\n    4.0\n    > y = base.dists.logistic.mean( NaN, 1.0 )\n    NaN\n    > y = base.dists.logistic.mean( 0.0, NaN )\n    NaN\n    > y = base.dists.logistic.mean( 0.0, 0.0 )\n    NaN\n\n","base.dists.logistic.median":"\nbase.dists.logistic.median( μ, s )\n    Returns the median of a logistic distribution with location parameter `μ`\n    and scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var y = base.dists.logistic.median( 0.0, 1.0 )\n    0.0\n    > y = base.dists.logistic.median( 4.0, 2.0 )\n    4.0\n    > y = base.dists.logistic.median( NaN, 1.0 )\n    NaN\n    > y = base.dists.logistic.median( 0.0, NaN )\n    NaN\n    > y = base.dists.logistic.median( 0.0, 0.0 )\n    NaN\n\n","base.dists.logistic.mgf":"\nbase.dists.logistic.mgf( t, μ, s )\n    Evaluates the moment-generating function (MGF) for a logistic distribution\n    with location parameter `μ` and scale parameter `s` at a value `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    t: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dists.logistic.mgf( 0.9, 0.0, 1.0 )\n    ~9.15\n    > y = base.dists.logistic.mgf( 0.1, 4.0, 4.0 )\n    ~1.971\n    > y = base.dists.logistic.mgf( -0.2, 4.0, 4.0 )\n    ~1.921\n    > y = base.dists.logistic.mgf( 0.5, 0.0, -1.0 )\n    NaN\n    > y = base.dists.logistic.mgf( 0.5, 0.0, 4.0 )\n    Infinity\n    > y = base.dists.logistic.mgf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.logistic.mgf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.logistic.mgf( 0.0, 0.0, NaN )\n    NaN\n\n\nbase.dists.logistic.mgf.factory( μ, s )\n    Returns a function for evaluating the moment-generating function (MGF)\n    of a Logistic distribution with location parameter `μ` and scale parameter\n    `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var mymgf = base.dists.logistic.mgf.factory( 10.0, 0.5 );\n    > var y = mymgf( 0.5 )\n    ~164.846\n    > y = mymgf( 2.0 )\n    Infinity\n\n","base.dists.logistic.mgf.factory":"\nbase.dists.logistic.mgf.factory( μ, s )\n    Returns a function for evaluating the moment-generating function (MGF)\n    of a Logistic distribution with location parameter `μ` and scale parameter\n    `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var mymgf = base.dists.logistic.mgf.factory( 10.0, 0.5 );\n    > var y = mymgf( 0.5 )\n    ~164.846\n    > y = mymgf( 2.0 )\n    Infinity\n\n","base.dists.logistic.mode":"\nbase.dists.logistic.mode( μ, s )\n    Returns the mode of a logistic distribution with location parameter `μ` and\n    scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var y = base.dists.logistic.mode( 0.0, 1.0 )\n    0.0\n    > y = base.dists.logistic.mode( 4.0, 2.0 )\n    4.0\n    > y = base.dists.logistic.mode( NaN, 1.0 )\n    NaN\n    > y = base.dists.logistic.mode( 0.0, NaN )\n    NaN\n    > y = base.dists.logistic.mode( 0.0, 0.0 )\n    NaN\n\n","base.dists.logistic.pdf":"\nbase.dists.logistic.pdf( x, μ, s )\n    Evaluates the probability density function (PDF) for a logistic distribution\n    with location parameter `μ` and scale parameter `s` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dists.logistic.pdf( 2.0, 0.0, 1.0 )\n    ~0.105\n    > y = base.dists.logistic.pdf( -1.0, 4.0, 2.0 )\n    ~0.035\n    > y = base.dists.logistic.pdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.logistic.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.logistic.pdf( 0.0, 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dists.logistic.pdf( 2.0, 0.0, -1.0 )\n    NaN\n    > y = base.dists.logistic.pdf( 2.0, 8.0, 0.0 )\n    0.0\n    > y = base.dists.logistic.pdf( 8.0, 8.0, 0.0 )\n    Infinity\n\n\nbase.dists.logistic.pdf.factory( μ, s )\n    Returns a function for evaluating the probability density function (PDF) of\n    a Logistic distribution with location parameter `μ` and scale parameter `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.logistic.pdf.factory( 10.0, 2.0 );\n    > var y = myPDF( 10.0 )\n    0.125\n\n","base.dists.logistic.pdf.factory":"\nbase.dists.logistic.pdf.factory( μ, s )\n    Returns a function for evaluating the probability density function (PDF) of\n    a Logistic distribution with location parameter `μ` and scale parameter `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.logistic.pdf.factory( 10.0, 2.0 );\n    > var y = myPDF( 10.0 )\n    0.125\n\n","base.dists.logistic.quantile":"\nbase.dists.logistic.quantile( p, μ, s )\n    Evaluates the quantile function for a logistic distribution with location\n    parameter `μ` and scale parameter `s` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.logistic.quantile( 0.8, 0.0, 1.0 )\n    ~1.386\n    > y = base.dists.logistic.quantile( 0.5, 4.0, 2.0 )\n    4\n\n    > y = base.dists.logistic.quantile( 1.1, 0.0, 1.0 )\n    NaN\n    > y = base.dists.logistic.quantile( -0.2, 0.0, 1.0 )\n    NaN\n\n    > y = base.dists.logistic.quantile( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.logistic.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.logistic.quantile( 0.0, 0.0, NaN )\n    NaN\n\n    // Negative scale parameter:\n    > y = base.dists.logistic.quantile( 0.5, 0.0, -1.0 )\n    NaN\n\n\nbase.dists.logistic.quantile.factory( μ, s )\n    Returns a function for evaluating the quantile function of a logistic\n    distribution with location parameter `μ` and scale parameter `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.logistic.quantile.factory( 10.0, 2.0 );\n    > var y = myQuantile( 0.5 )\n    10.0\n\n","base.dists.logistic.quantile.factory":"\nbase.dists.logistic.quantile.factory( μ, s )\n    Returns a function for evaluating the quantile function of a logistic\n    distribution with location parameter `μ` and scale parameter `s`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.logistic.quantile.factory( 10.0, 2.0 );\n    > var y = myQuantile( 0.5 )\n    10.0\n\n","base.dists.logistic.skewness":"\nbase.dists.logistic.skewness( μ, s )\n    Returns the skewness of a logistic distribution with location parameter `μ`\n    and scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var y = base.dists.logistic.skewness( 0.0, 1.0 )\n    0.0\n    > y = base.dists.logistic.skewness( 4.0, 2.0 )\n    0.0\n    > y = base.dists.logistic.skewness( NaN, 1.0 )\n    NaN\n    > y = base.dists.logistic.skewness( 0.0, NaN )\n    NaN\n    > y = base.dists.logistic.skewness( 0.0, 0.0 )\n    NaN\n\n","base.dists.logistic.stdev":"\nbase.dists.logistic.stdev( μ, s )\n    Returns the standard deviation of a logistic distribution with location\n    parameter `μ` and scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var y = base.dists.logistic.stdev( 0.0, 1.0 )\n    ~1.814\n    > y = base.dists.logistic.stdev( 4.0, 2.0 )\n    ~3.628\n    > y = base.dists.logistic.stdev( NaN, 1.0 )\n    NaN\n    > y = base.dists.logistic.stdev( 0.0, NaN )\n    NaN\n    > y = base.dists.logistic.stdev( 0.0, 0.0 )\n    NaN\n\n","base.dists.logistic.variance":"\nbase.dists.logistic.variance( μ, s )\n    Returns the variance of a logistic distribution with location parameter `μ`\n    and scale parameter `s`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var y = base.dists.logistic.variance( 0.0, 1.0 )\n    ~3.29\n    > y = base.dists.logistic.variance( 4.0, 2.0 )\n    ~13.159\n    > y = base.dists.logistic.variance( NaN, 1.0 )\n    NaN\n    > y = base.dists.logistic.variance( 0.0, NaN )\n    NaN\n    > y = base.dists.logistic.variance( 0.0, 0.0 )\n    NaN\n\n","base.dists.lognormal.cdf":"\nbase.dists.lognormal.cdf( x, μ, σ )\n    Evaluates the cumulative distribution function (CDF) for a lognormal\n    distribution with location parameter `μ` and scale parameter `σ` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.lognormal.cdf( 2.0, 0.0, 1.0 )\n    ~0.756\n    > y = base.dists.lognormal.cdf( 5.0, 10.0, 3.0 )\n    ~0.003\n\n    > y = base.dists.lognormal.cdf( 2.0, 0.0, NaN )\n    NaN\n    > y = base.dists.lognormal.cdf( 2.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.lognormal.cdf( NaN, 0.0, 1.0 )\n    NaN\n\n    // Non-positive scale parameter `σ`:\n    > y = base.dists.lognormal.cdf( 2.0, 0.0, -1.0 )\n    NaN\n    > y = base.dists.lognormal.cdf( 2.0, 0.0, 0.0 )\n    NaN\n\n\nbase.dists.lognormal.cdf.factory( μ, σ )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a lognormal distribution with location parameter `μ` and scale parameter\n    `σ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.lognormal.cdf.factory( 3.0, 1.5 );\n    > var y = myCDF( 1.0 )\n    ~0.023\n    > y = myCDF( 4.0 )\n    ~0.141\n\n","base.dists.lognormal.cdf.factory":"\nbase.dists.lognormal.cdf.factory( μ, σ )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a lognormal distribution with location parameter `μ` and scale parameter\n    `σ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.lognormal.cdf.factory( 3.0, 1.5 );\n    > var y = myCDF( 1.0 )\n    ~0.023\n    > y = myCDF( 4.0 )\n    ~0.141\n\n","base.dists.lognormal.entropy":"\nbase.dists.lognormal.entropy( μ, σ )\n    Returns the differential entropy of a lognormal distribution with location\n    `μ` and scale `σ` (in nats).\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var y = base.dists.lognormal.entropy( 0.0, 1.0 )\n    ~1.419\n    > y = base.dists.lognormal.entropy( 5.0, 2.0 )\n    ~7.112\n    > y = base.dists.lognormal.entropy( NaN, 1.0 )\n    NaN\n    > y = base.dists.lognormal.entropy( 0.0, NaN )\n    NaN\n    > y = base.dists.lognormal.entropy( 0.0, 0.0 )\n    NaN\n\n","base.dists.lognormal.kurtosis":"\nbase.dists.lognormal.kurtosis( μ, σ )\n    Returns the excess kurtosis of a lognormal distribution with location `μ`\n    and scale `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Kurtosis.\n\n    Examples\n    --------\n    > var y = base.dists.lognormal.kurtosis( 0.0, 1.0 )\n    ~110.936\n    > y = base.dists.lognormal.kurtosis( 5.0, 2.0 )\n    ~9220556.977\n    > y = base.dists.lognormal.kurtosis( NaN, 1.0 )\n    NaN\n    > y = base.dists.lognormal.kurtosis( 0.0, NaN )\n    NaN\n    > y = base.dists.lognormal.kurtosis( 0.0, 0.0 )\n    NaN\n\n","base.dists.lognormal.LogNormal":"\nbase.dists.lognormal.LogNormal( [μ, σ] )\n    Returns a lognormal distribution object.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Location parameter. Default: `0.0`.\n\n    σ: number (optional)\n        Scale parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    lognormal: Object\n        Distribution instance.\n\n    lognormal.mu: number\n        Location parameter.\n\n    lognormal.sigma: number\n        Scale parameter. If set, the value must be greater than `0`.\n\n    lognormal.entropy: number\n        Read-only property which returns the differential entropy.\n\n    lognormal.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    lognormal.mean: number\n        Read-only property which returns the expected value.\n\n    lognormal.median: number\n        Read-only property which returns the median.\n\n    lognormal.mode: number\n        Read-only property which returns the mode.\n\n    lognormal.skewness: number\n        Read-only property which returns the skewness.\n\n    lognormal.stdev: number\n        Read-only property which returns the standard deviation.\n\n    lognormal.variance: number\n        Read-only property which returns the variance.\n\n    lognormal.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    lognormal.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    lognormal.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    lognormal.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var lognormal = base.dists.lognormal.LogNormal( -2.0, 3.0 );\n    > lognormal.mu\n    -2.0\n    > lognormal.sigma\n    3.0\n    > lognormal.entropy\n    ~0.518\n    > lognormal.kurtosis\n    4312295840576300\n    > lognormal.mean\n    ~12.182\n    > lognormal.median\n    ~0.135\n    > lognormal.mode\n    ~0.0\n    > lognormal.skewness\n    ~729551.383\n    > lognormal.stdev\n    ~1096.565\n    > lognormal.variance\n    ~1202455.871\n    > lognormal.cdf( 0.8 )\n    ~0.723\n    > lognormal.logpdf( 2.0 )\n    ~-3.114\n    > lognormal.pdf( 2.0 )\n    ~0.044\n    > lognormal.quantile( 0.9 )\n    ~6.326\n\n","base.dists.lognormal.logpdf":"\nbase.dists.lognormal.logpdf( x, μ, σ )\n    Evaluates the natural logarithm of the probability density function (PDF)\n    for a lognormal distribution with location parameter `μ` and scale parameter\n    `σ` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dists.lognormal.logpdf( 2.0, 0.0, 1.0 )\n    ~-1.852\n    > y = base.dists.lognormal.logpdf( 1.0, 0.0, 1.0 )\n    ~-0.919\n    > y = base.dists.lognormal.logpdf( 1.0, 3.0, 1.0 )\n    ~-5.419\n    > y = base.dists.lognormal.logpdf( -1.0, 4.0, 2.0 )\n    -Infinity\n\n    > y = base.dists.lognormal.logpdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.lognormal.logpdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.lognormal.logpdf( 0.0, 0.0, NaN )\n    NaN\n\n    // Non-positive scale parameter `σ`:\n    > y = base.dists.lognormal.logpdf( 2.0, 0.0, -1.0 )\n    NaN\n    > y = base.dists.lognormal.logpdf( 2.0, 0.0, 0.0 )\n    NaN\n\n\nbase.dists.lognormal.logpdf.factory( μ, σ )\n    Returns a function for evaluating the natural logarithm of the probability\n    density function (PDF) of a lognormal distribution with location parameter\n    `μ` and scale parameter `σ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogPDF = base.dists.lognormal.logpdf.factory( 4.0, 2.0 );\n    > var y = mylogPDF( 10.0 )\n    ~-4.275\n    > y = mylogPDF( 2.0 )\n    ~-3.672\n\n","base.dists.lognormal.logpdf.factory":"\nbase.dists.lognormal.logpdf.factory( μ, σ )\n    Returns a function for evaluating the natural logarithm of the probability\n    density function (PDF) of a lognormal distribution with location parameter\n    `μ` and scale parameter `σ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogPDF = base.dists.lognormal.logpdf.factory( 4.0, 2.0 );\n    > var y = mylogPDF( 10.0 )\n    ~-4.275\n    > y = mylogPDF( 2.0 )\n    ~-3.672\n\n","base.dists.lognormal.mean":"\nbase.dists.lognormal.mean( μ, σ )\n    Returns the expected value of a lognormal distribution with location `μ` and\n    scale `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var y = base.dists.lognormal.mean( 0.0, 1.0 )\n    ~1.649\n    > y = base.dists.lognormal.mean( 4.0, 2.0 )\n    ~403.429\n    > y = base.dists.lognormal.mean( NaN, 1.0 )\n    NaN\n    > y = base.dists.lognormal.mean( 0.0, NaN )\n    NaN\n    > y = base.dists.lognormal.mean( 0.0, 0.0 )\n    NaN\n\n","base.dists.lognormal.median":"\nbase.dists.lognormal.median( μ, σ )\n    Returns the median of a lognormal distribution with location `μ` and scale\n    `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var y = base.dists.lognormal.median( 0.0, 1.0 )\n    1.0\n    > y = base.dists.lognormal.median( 5.0, 2.0 )\n    ~148.413\n    > y = base.dists.lognormal.median( NaN, 1.0 )\n    NaN\n    > y = base.dists.lognormal.median( 0.0, NaN )\n    NaN\n    > y = base.dists.lognormal.median( 0.0, 0.0 )\n    NaN\n\n","base.dists.lognormal.mode":"\nbase.dists.lognormal.mode( μ, σ )\n    Returns the mode of a lognormal distribution with location `μ` and scale\n    `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var y = base.dists.lognormal.mode( 0.0, 1.0 )\n    ~0.368\n    > y = base.dists.lognormal.mode( 5.0, 2.0 )\n    ~2.718\n    > y = base.dists.lognormal.mode( NaN, 1.0 )\n    NaN\n    > y = base.dists.lognormal.mode( 0.0, NaN )\n    NaN\n    > y = base.dists.lognormal.mode( 0.0, 0.0 )\n    NaN\n\n","base.dists.lognormal.pdf":"\nbase.dists.lognormal.pdf( x, μ, σ )\n    Evaluates the probability density function (PDF) for a lognormal\n    distribution with location parameter `μ` and scale parameter `σ` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dists.lognormal.pdf( 2.0, 0.0, 1.0 )\n    ~0.157\n    > y = base.dists.lognormal.pdf( 1.0, 0.0, 1.0 )\n    ~0.399\n    > y = base.dists.lognormal.pdf( 1.0, 3.0, 1.0 )\n    ~0.004\n    > y = base.dists.lognormal.pdf( -1.0, 4.0, 2.0 )\n    0.0\n\n    > y = base.dists.lognormal.pdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.lognormal.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.lognormal.pdf( 0.0, 0.0, NaN )\n    NaN\n\n    // Non-positive scale parameter `σ`:\n    > y = base.dists.lognormal.pdf( 2.0, 0.0, -1.0 )\n    NaN\n    > y = base.dists.lognormal.pdf( 2.0, 0.0, 0.0 )\n    NaN\n\n\nbase.dists.lognormal.pdf.factory( μ, σ )\n    Returns a function for evaluating the probability density function (PDF) of\n    a lognormal distribution with location parameter `μ` and scale parameter\n    `σ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.lognormal.pdf.factory( 4.0, 2.0 );\n    > var y = myPDF( 10.0 )\n    ~0.014\n    > y = myPDF( 2.0 )\n    ~0.025\n\n","base.dists.lognormal.pdf.factory":"\nbase.dists.lognormal.pdf.factory( μ, σ )\n    Returns a function for evaluating the probability density function (PDF) of\n    a lognormal distribution with location parameter `μ` and scale parameter\n    `σ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.lognormal.pdf.factory( 4.0, 2.0 );\n    > var y = myPDF( 10.0 )\n    ~0.014\n    > y = myPDF( 2.0 )\n    ~0.025\n\n","base.dists.lognormal.quantile":"\nbase.dists.lognormal.quantile( p, μ, σ )\n    Evaluates the quantile function for a lognormal distribution with location\n    parameter `μ` and scale parameter `σ` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.lognormal.quantile( 0.8, 0.0, 1.0 )\n    ~2.32\n    > y = base.dists.lognormal.quantile( 0.5, 4.0, 2.0 )\n    ~54.598\n    > y = base.dists.lognormal.quantile( 1.1, 0.0, 1.0 )\n    NaN\n    > y = base.dists.lognormal.quantile( -0.2, 0.0, 1.0 )\n    NaN\n\n    > y = base.dists.lognormal.quantile( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.lognormal.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.lognormal.quantile( 0.0, 0.0, NaN )\n    NaN\n\n    // Non-positive scale parameter `σ`:\n    > y = base.dists.lognormal.quantile( 0.5, 0.0, -1.0 )\n    NaN\n    > y = base.dists.lognormal.quantile( 0.5, 0.0, 0.0 )\n    NaN\n\n\nbase.dists.lognormal.quantile.factory( μ, σ )\n    Returns a function for evaluating the quantile function of a lognormal\n    distribution with location parameter `μ` and scale parameter `σ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.lognormal.quantile.factory( 4.0, 2.0 );\n    > var y = myQuantile( 0.2 )\n    ~10.143\n    > y = myQuantile( 0.8 )\n    ~293.901\n\n","base.dists.lognormal.quantile.factory":"\nbase.dists.lognormal.quantile.factory( μ, σ )\n    Returns a function for evaluating the quantile function of a lognormal\n    distribution with location parameter `μ` and scale parameter `σ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.lognormal.quantile.factory( 4.0, 2.0 );\n    > var y = myQuantile( 0.2 )\n    ~10.143\n    > y = myQuantile( 0.8 )\n    ~293.901\n\n","base.dists.lognormal.skewness":"\nbase.dists.lognormal.skewness( μ, σ )\n    Returns the skewness of a lognormal distribution with location `μ` and scale\n    `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var y = base.dists.lognormal.skewness( 0.0, 1.0 )\n    ~6.185\n    > y = base.dists.lognormal.skewness( 5.0, 2.0 )\n    ~414.359\n    > y = base.dists.lognormal.skewness( NaN, 1.0 )\n    NaN\n    > y = base.dists.lognormal.skewness( 0.0, NaN )\n    NaN\n    > y = base.dists.lognormal.skewness( 0.0, 0.0 )\n    NaN\n\n","base.dists.lognormal.stdev":"\nbase.dists.lognormal.stdev( μ, σ )\n    Returns the standard deviation of a lognormal distribution with location `μ`\n    and scale `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var y = base.dists.lognormal.stdev( 0.0, 1.0 )\n    ~2.161\n    > y = base.dists.lognormal.stdev( 4.0, 2.0 )\n    ~2953.533\n    > y = base.dists.lognormal.stdev( NaN, 1.0 )\n    NaN\n    > y = base.dists.lognormal.stdev( 0.0, NaN )\n    NaN\n    > y = base.dists.lognormal.stdev( 0.0, 0.0 )\n    NaN\n\n","base.dists.lognormal.variance":"\nbase.dists.lognormal.variance( μ, σ )\n    Returns the variance of a lognormal distribution with location `μ` and scale\n    `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var y = base.dists.lognormal.variance( 0.0, 1.0 )\n    ~4.671\n    > y = base.dists.lognormal.variance( 4.0, 2.0 )\n    ~8723355.729\n    > y = base.dists.lognormal.variance( NaN, 1.0 )\n    NaN\n    > y = base.dists.lognormal.variance( 0.0, NaN )\n    NaN\n    > y = base.dists.lognormal.variance( 0.0, 0.0 )\n    NaN\n\n","base.dists.negativeBinomial.cdf":"\nbase.dists.negativeBinomial.cdf( x, r, p )\n    Evaluates the cumulative distribution function (CDF) for a negative binomial\n    distribution with number of successes until experiment is stopped `r` and\n    success probability `p` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a `r` which is not a positive number, the function returns\n    `NaN`.\n\n    If provided a success probability `p` outside of `[0,1]`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    r: number\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.negativeBinomial.cdf( 5.0, 20.0, 0.8 )\n    ~0.617\n    > y = base.dists.negativeBinomial.cdf( 21.0, 20.0, 0.5 )\n    ~0.622\n    > y = base.dists.negativeBinomial.cdf( 5.0, 10.0, 0.4 )\n    ~0.034\n    > y = base.dists.negativeBinomial.cdf( 0.0, 10.0, 0.9 )\n    ~0.349\n    > y = base.dists.negativeBinomial.cdf( 21.0, 15.5, 0.5 )\n    ~0.859\n    > y = base.dists.negativeBinomial.cdf( 5.0, 7.4, 0.4 )\n    ~0.131\n\n    > y = base.dists.negativeBinomial.cdf( 2.0, 0.0, 0.5 )\n    NaN\n    > y = base.dists.negativeBinomial.cdf( 2.0, -2.0, 0.5 )\n    NaN\n\n    > y = base.dists.negativeBinomial.cdf( NaN, 20.0, 0.5 )\n    NaN\n    > y = base.dists.negativeBinomial.cdf( 0.0, NaN, 0.5 )\n    NaN\n    > y = base.dists.negativeBinomial.cdf( 0.0, 20.0, NaN )\n    NaN\n\n    > y = base.dists.negativeBinomial.cdf( 2.0, 20, -1.0 )\n    NaN\n    > y = base.dists.negativeBinomial.cdf( 2.0, 20, 1.5 )\n    NaN\n\n\nbase.dists.negativeBinomial.cdf.factory( r, p )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a negative binomial distribution with number of successes until\n    experiment is stopped `r` and success probability `p`.\n\n    Parameters\n    ----------\n    r: number\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.negativeBinomial.cdf.factory( 10, 0.5 );\n    > var y = myCDF( 3.0 )\n    ~0.046\n    > y = myCDF( 11.0 )\n    ~0.668\n\n","base.dists.negativeBinomial.cdf.factory":"\nbase.dists.negativeBinomial.cdf.factory( r, p )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a negative binomial distribution with number of successes until\n    experiment is stopped `r` and success probability `p`.\n\n    Parameters\n    ----------\n    r: number\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.negativeBinomial.cdf.factory( 10, 0.5 );\n    > var y = myCDF( 3.0 )\n    ~0.046\n    > y = myCDF( 11.0 )\n    ~0.668\n\n","base.dists.negativeBinomial.kurtosis":"\nbase.dists.negativeBinomial.kurtosis( r, p )\n    Returns the excess kurtosis of a negative binomial distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a `r` which is not a positive number, the function returns\n    `NaN`.\n\n    If provided a success probability `p` outside of `[0,1]`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    r: integer\n        Number of failures until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Kurtosis.\n\n    Examples\n    --------\n    > var v = base.dists.negativeBinomial.kurtosis( 100, 0.2 )\n    ~0.061\n    > v = base.dists.negativeBinomial.kurtosis( 20, 0.5 )\n    ~0.325\n\n","base.dists.negativeBinomial.logpmf":"\nbase.dists.negativeBinomial.logpmf( x, r, p )\n    Evaluates the natural logarithm of the probability mass function (PMF) for a\n    negative binomial distribution with number of successes until experiment is\n    stopped `r` and success probability `p` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a `r` which is not a positive number, the function returns\n    `NaN`.\n\n    If provided a success probability `p` outside of `[0,1]`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    r: number\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPMF.\n\n    Examples\n    --------\n    > var y = base.dists.negativeBinomial.logpmf( 5.0, 20.0, 0.8 )\n    ~-1.853\n    > y = base.dists.negativeBinomial.logpmf( 21.0, 20.0, 0.5 )\n    ~-2.818\n    > y = base.dists.negativeBinomial.logpmf( 5.0, 10.0, 0.4 )\n    ~-4.115\n    > y = base.dists.negativeBinomial.logpmf( 0.0, 10.0, 0.9 )\n    ~-1.054\n    > y = base.dists.negativeBinomial.logpmf( 21.0, 15.5, 0.5 )\n    ~-3.292\n    > y = base.dists.negativeBinomial.logpmf( 5.0, 7.4, 0.4 )\n    ~-2.976\n\n    > y = base.dists.negativeBinomial.logpmf( 2.0, 0.0, 0.5 )\n    NaN\n    > y = base.dists.negativeBinomial.logpmf( 2.0, -2.0, 0.5 )\n    NaN\n    > y = base.dists.negativeBinomial.logpmf( 2.0, 20, -1.0 )\n    NaN\n    > y = base.dists.negativeBinomial.logpmf( 2.0, 20, 1.5 )\n    NaN\n\n    > y = base.dists.negativeBinomial.logpmf( NaN, 20.0, 0.5 )\n    NaN\n    > y = base.dists.negativeBinomial.logpmf( 0.0, NaN, 0.5 )\n    NaN\n    > y = base.dists.negativeBinomial.logpmf( 0.0, 20.0, NaN )\n    NaN\n\n\nbase.dists.negativeBinomial.logpmf.factory( r, p )\n    Returns a function for evaluating the natural logarithm of the probability\n    mass function (PMF) of a negative binomial distribution with number of\n    successes until experiment is stopped `r` and success probability `p`.\n\n    Parameters\n    ----------\n    r: number\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    logpmf: Function\n        Logarithm of probability mass function (PMF).\n\n    Examples\n    --------\n    > var mylogPMF = base.dists.negativeBinomial.logpmf.factory( 10, 0.5 );\n    > var y = mylogPMF( 3.0 )\n    ~-3.617\n    > y = mylogPMF( 5.0 )\n    ~-2.795\n\n","base.dists.negativeBinomial.logpmf.factory":"\nbase.dists.negativeBinomial.logpmf.factory( r, p )\n    Returns a function for evaluating the natural logarithm of the probability\n    mass function (PMF) of a negative binomial distribution with number of\n    successes until experiment is stopped `r` and success probability `p`.\n\n    Parameters\n    ----------\n    r: number\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    logpmf: Function\n        Logarithm of probability mass function (PMF).\n\n    Examples\n    --------\n    > var mylogPMF = base.dists.negativeBinomial.logpmf.factory( 10, 0.5 );\n    > var y = mylogPMF( 3.0 )\n    ~-3.617\n    > y = mylogPMF( 5.0 )\n    ~-2.795\n\n","base.dists.negativeBinomial.mean":"\nbase.dists.negativeBinomial.mean( r, p )\n    Returns the expected value of a negative binomial distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a `r` which is not a positive number, the function returns\n    `NaN`.\n\n    If provided a success probability `p` outside of `[0,1]`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    r: integer\n        Number of failures until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dists.negativeBinomial.mean( 100, 0.2 )\n    400\n    > v = base.dists.negativeBinomial.mean( 20, 0.5 )\n    20\n\n","base.dists.negativeBinomial.mgf":"\nbase.dists.negativeBinomial.mgf( x, r, p )\n    Evaluates the moment-generating function (MGF) for a negative binomial\n    distribution with number of successes until experiment is stopped `r` and\n    success probability `p` at a value `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a `r` which is not a positive number, the function returns\n    `NaN`.\n\n    If provided a success probability `p` outside of `[0,1]`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    r: number\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dists.negativeBinomial.mgf( 0.05, 20.0, 0.8 )\n    ~267.839\n    > y = base.dists.negativeBinomial.mgf( 0.1, 20.0, 0.1 )\n    ~9.347\n    > y = base.dists.negativeBinomial.mgf( 0.5, 10.0, 0.4 )\n    ~42822.023\n\n    > y = base.dists.negativeBinomial.mgf( 0.1, 0.0, 0.5 )\n    NaN\n    > y = base.dists.negativeBinomial.mgf( 0.1, -2.0, 0.5 )\n    NaN\n\n    > y = base.dists.negativeBinomial.mgf( NaN, 20.0, 0.5 )\n    NaN\n    > y = base.dists.negativeBinomial.mgf( 0.0, NaN, 0.5 )\n    NaN\n    > y = base.dists.negativeBinomial.mgf( 0.0, 20.0, NaN )\n    NaN\n\n    > y = base.dists.negativeBinomial.mgf( 0.2, 20, -1.0 )\n    NaN\n    > y = base.dists.negativeBinomial.mgf( 0.2, 20, 1.5 )\n    NaN\n\n\nbase.dists.negativeBinomial.mgf.factory( r, p )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    negative binomial distribution with number of successes until experiment is\n    stopped `r` and success probability `p`.\n\n    Parameters\n    ----------\n    r: number\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dists.negativeBinomial.mgf.factory( 4.3, 0.4 );\n    > var y = myMGF( 0.2 )\n    ~4.696\n    > y = myMGF( 0.4 )\n    ~30.83\n\n","base.dists.negativeBinomial.mgf.factory":"\nbase.dists.negativeBinomial.mgf.factory( r, p )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    negative binomial distribution with number of successes until experiment is\n    stopped `r` and success probability `p`.\n\n    Parameters\n    ----------\n    r: number\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dists.negativeBinomial.mgf.factory( 4.3, 0.4 );\n    > var y = myMGF( 0.2 )\n    ~4.696\n    > y = myMGF( 0.4 )\n    ~30.83\n\n","base.dists.negativeBinomial.mode":"\nbase.dists.negativeBinomial.mode( r, p )\n    Returns the mode of a negative binomial distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a `r` which is not a positive number, the function returns\n    `NaN`.\n\n    If provided a success probability `p` outside of `[0,1]`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    r: integer\n        Number of failures until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dists.negativeBinomial.mode( 100, 0.2 )\n    396\n    > v = base.dists.negativeBinomial.mode( 20, 0.5 )\n    19\n\n","base.dists.negativeBinomial.NegativeBinomial":"\nbase.dists.negativeBinomial.NegativeBinomial( [r, p] )\n    Returns a negative binomial distribution object.\n\n    Parameters\n    ----------\n    r: number (optional)\n        Number of successes until experiment is stopped. Must be a positive\n        number. Default: `1`.\n\n    p: number (optional)\n        Success probability. Must be a number between `0` and `1`. Default:\n        `0.5`.\n\n    Returns\n    -------\n    nbinomial: Object\n        Distribution instance.\n\n    nbinomial.r: number\n        Number of trials. If set, the value must be a positive number.\n\n    nbinomial.p: number\n        Success probability. If set, the value must be a number between `0` and\n        `1`.\n\n    nbinomial.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    nbinomial.mean: number\n        Read-only property which returns the expected value.\n\n    nbinomial.mode: number\n        Read-only property which returns the mode.\n\n    nbinomial.skewness: number\n        Read-only property which returns the skewness.\n\n    nbinomial.stdev: number\n        Read-only property which returns the standard deviation.\n\n    nbinomial.variance: number\n        Read-only property which returns the variance.\n\n    nbinomial.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    nbinomial.logpmf: Function\n        Evaluates the natural logarithm of the probability mass function (PMF).\n\n    nbinomial.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    nbinomial.pmf: Function\n        Evaluates the probability mass function (PMF).\n\n    nbinomial.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var nbinomial = base.dists.negativeBinomial.NegativeBinomial( 8.0, 0.5 );\n    > nbinomial.r\n    8.0\n    > nbinomial.p\n    0.5\n    > nbinomial.kurtosis\n    0.8125\n    > nbinomial.mean\n    8.0\n    > nbinomial.mode\n    7.0\n    > nbinomial.skewness\n    0.75\n    > nbinomial.stdev\n    4.0\n    > nbinomial.variance\n    16.0\n    > nbinomial.cdf( 2.9 )\n    ~0.055\n    > nbinomial.logpmf( 3.0 )\n    ~-2.837\n    > nbinomial.mgf( 0.2 )\n    ~36.675\n    > nbinomial.pmf( 3.0 )\n    ~0.059\n    > nbinomial.quantile( 0.8 )\n    11.0\n\n","base.dists.negativeBinomial.pmf":"\nbase.dists.negativeBinomial.pmf( x, r, p )\n    Evaluates the probability mass function (PMF) for a negative binomial\n    distribution with number of successes until experiment is stopped `r` and\n    success probability `p` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a `r` which is not a positive number, the function returns\n    `NaN`.\n\n    If provided a success probability `p` outside of `[0,1]`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    r: number\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated PMF.\n\n    Examples\n    --------\n    > var y = base.dists.negativeBinomial.pmf( 5.0, 20.0, 0.8 )\n    ~0.157\n    > y = base.dists.negativeBinomial.pmf( 21.0, 20.0, 0.5 )\n    ~0.06\n    > y = base.dists.negativeBinomial.pmf( 5.0, 10.0, 0.4 )\n    ~0.016\n    > y = base.dists.negativeBinomial.pmf( 0.0, 10.0, 0.9 )\n    ~0.349\n    > y = base.dists.negativeBinomial.pmf( 21.0, 15.5, 0.5 )\n    ~0.037\n    > y = base.dists.negativeBinomial.pmf( 5.0, 7.4, 0.4 )\n    ~0.051\n\n    > y = base.dists.negativeBinomial.pmf( 2.0, 0.0, 0.5 )\n    NaN\n    > y = base.dists.negativeBinomial.pmf( 2.0, -2.0, 0.5 )\n    NaN\n    > y = base.dists.negativeBinomial.pmf( 2.0, 20, -1.0 )\n    NaN\n    > y = base.dists.negativeBinomial.pmf( 2.0, 20, 1.5 )\n    NaN\n\n    > y = base.dists.negativeBinomial.pmf( NaN, 20.0, 0.5 )\n    NaN\n    > y = base.dists.negativeBinomial.pmf( 0.0, NaN, 0.5 )\n    NaN\n    > y = base.dists.negativeBinomial.pmf( 0.0, 20.0, NaN )\n    NaN\n\n\nbase.dists.negativeBinomial.pmf.factory( r, p )\n    Returns a function for evaluating the probability mass function (PMF) of a\n    negative binomial distribution with number of successes until experiment is\n    stopped `r` and success probability `p`.\n\n    Parameters\n    ----------\n    r: number\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    pmf: Function\n        Probability mass function (PMF).\n\n    Examples\n    --------\n    > var myPMF = base.dists.negativeBinomial.pmf.factory( 10, 0.5 );\n    > var y = myPMF( 3.0 )\n    ~0.027\n    > y = myPMF( 5.0 )\n    ~0.061\n\n","base.dists.negativeBinomial.pmf.factory":"\nbase.dists.negativeBinomial.pmf.factory( r, p )\n    Returns a function for evaluating the probability mass function (PMF) of a\n    negative binomial distribution with number of successes until experiment is\n    stopped `r` and success probability `p`.\n\n    Parameters\n    ----------\n    r: number\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    pmf: Function\n        Probability mass function (PMF).\n\n    Examples\n    --------\n    > var myPMF = base.dists.negativeBinomial.pmf.factory( 10, 0.5 );\n    > var y = myPMF( 3.0 )\n    ~0.027\n    > y = myPMF( 5.0 )\n    ~0.061\n\n","base.dists.negativeBinomial.quantile":"\nbase.dists.negativeBinomial.quantile( k, r, p )\n    Evaluates the quantile function for a negative binomial distribution with\n    number of successes until experiment is stopped `r` and success probability\n    `p` at a probability `k`.\n\n    If provided a `k` outside of `[0,1]`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a `r` which is not a positive number, the function returns\n    `NaN`.\n\n    If provided a success probability `p` outside of `[0,1]`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Input probability.\n\n    r: number\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.negativeBinomial.quantile( 0.9, 20.0, 0.2 )\n    106\n    > y = base.dists.negativeBinomial.quantile( 0.9, 20.0, 0.8 )\n    8\n    > y = base.dists.negativeBinomial.quantile( 0.5, 10.0, 0.4 )\n    14\n    > y = base.dists.negativeBinomial.quantile( 0.0, 10.0, 0.9 )\n    0\n\n    > y = base.dists.negativeBinomial.quantile( 1.1, 20.0, 0.5 )\n    NaN\n    > y = base.dists.negativeBinomial.quantile( -0.1, 20.0, 0.5 )\n    NaN\n\n    > y = base.dists.negativeBinomial.quantile( 21.0, 15.5, 0.5 )\n    12\n    > y = base.dists.negativeBinomial.quantile( 5.0, 7.4, 0.4 )\n    10\n\n    > y = base.dists.negativeBinomial.quantile( 0.5, 0.0, 0.5 )\n    NaN\n    > y = base.dists.negativeBinomial.quantile( 0.5, -2.0, 0.5 )\n    NaN\n    > y = base.dists.negativeBinomial.quantile( 0.3, 20.0, -1.0 )\n    NaN\n    > y = base.dists.negativeBinomial.quantile( 0.3, 20.0, 1.5 )\n    NaN\n\n    > y = base.dists.negativeBinomial.quantile( NaN, 20.0, 0.5 )\n    NaN\n    > y = base.dists.negativeBinomial.quantile( 0.3, NaN, 0.5 )\n    NaN\n    > y = base.dists.negativeBinomial.quantile( 0.3, 20.0, NaN )\n    NaN\n\n\nbase.dists.negativeBinomial.quantile.factory( r, p )\n    Returns a function for evaluating the quantile function of a negative\n    binomial distribution with number of successes until experiment is stopped\n    `r` and success probability `p`.\n\n    Parameters\n    ----------\n    r: number\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.negativeBinomial.quantile.factory( 10.0, 0.5 );\n    > var y = myQuantile( 0.1 )\n    5\n    > y = myQuantile( 0.9 )\n    16\n\n","base.dists.negativeBinomial.quantile.factory":"\nbase.dists.negativeBinomial.quantile.factory( r, p )\n    Returns a function for evaluating the quantile function of a negative\n    binomial distribution with number of successes until experiment is stopped\n    `r` and success probability `p`.\n\n    Parameters\n    ----------\n    r: number\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.negativeBinomial.quantile.factory( 10.0, 0.5 );\n    > var y = myQuantile( 0.1 )\n    5\n    > y = myQuantile( 0.9 )\n    16\n\n","base.dists.negativeBinomial.skewness":"\nbase.dists.negativeBinomial.skewness( r, p )\n    Returns the skewness of a negative binomial distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a `r` which is not a positive number, the function returns\n    `NaN`.\n\n    If provided a success probability `p` outside of `[0,1]`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    r: integer\n        Number of failures until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dists.negativeBinomial.skewness( 100, 0.2 )\n    ~0.201\n    > v = base.dists.negativeBinomial.skewness( 20, 0.5 )\n    ~0.474\n\n","base.dists.negativeBinomial.stdev":"\nbase.dists.negativeBinomial.stdev( r, p )\n    Returns the standard deviation of a negative binomial distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a `r` which is not a positive number, the function returns\n    `NaN`.\n\n    If provided a success probability `p` outside of `[0,1]`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    r: integer\n        Number of failures until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dists.negativeBinomial.stdev( 100, 0.2 )\n    ~44.721\n    > v = base.dists.negativeBinomial.stdev( 20, 0.5 )\n    ~6.325\n\n","base.dists.negativeBinomial.variance":"\nbase.dists.negativeBinomial.variance( r, p )\n    Returns the variance of a negative binomial distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a `r` which is not a positive number, the function returns\n    `NaN`.\n\n    If provided a success probability `p` outside of `[0,1]`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    r: integer\n        Number of failures until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dists.negativeBinomial.variance( 100, 0.2 )\n    2000.0\n    > v = base.dists.negativeBinomial.variance( 20, 0.5 )\n    40.0\n\n","base.dists.normal.cdf":"\nbase.dists.normal.cdf( x, μ, σ )\n    Evaluates the cumulative distribution function (CDF) for a normal\n    distribution with mean `μ` and standard deviation `σ` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.normal.cdf( 2.0, 0.0, 1.0 )\n    ~0.977\n    > y = base.dists.normal.cdf( -1.0, -1.0, 2.0 )\n    0.5\n    > y = base.dists.normal.cdf( -1.0, 4.0, 2.0 )\n    ~0.006\n    > y = base.dists.normal.cdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.normal.cdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.normal.cdf( 0.0, 0.0, NaN )\n    NaN\n\n    // Negative standard deviation:\n    > y = base.dists.normal.cdf( 2.0, 0.0, -1.0 )\n    NaN\n\n    // Degenerate distribution centered at `μ` when `σ = 0.0`:\n    > y = base.dists.normal.cdf( 2.0, 8.0, 0.0 )\n    0.0\n    > y = base.dists.normal.cdf( 8.0, 8.0, 0.0 )\n    1.0\n    > y = base.dists.normal.cdf( 10.0, 8.0, 0.0 )\n    1.0\n\n\nbase.dists.normal.cdf.factory( μ, σ )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a normal distribution with mean `μ` and standard deviation `σ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.normal.cdf.factory( 10.0, 2.0 );\n    > var y = myCDF( 10.0 )\n    0.5\n\n","base.dists.normal.cdf.factory":"\nbase.dists.normal.cdf.factory( μ, σ )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a normal distribution with mean `μ` and standard deviation `σ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.normal.cdf.factory( 10.0, 2.0 );\n    > var y = myCDF( 10.0 )\n    0.5\n\n","base.dists.normal.entropy":"\nbase.dists.normal.entropy( μ, σ )\n    Returns the differential entropy of a normal distribution with mean `μ` and\n    standard deviation `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var y = base.dists.normal.entropy( 0.0, 1.0 )\n    ~1.419\n    > y = base.dists.normal.entropy( 4.0, 3.0 )\n    ~2.518\n    > y = base.dists.normal.entropy( NaN, 1.0 )\n    NaN\n    > y = base.dists.normal.entropy( 0.0, NaN )\n    NaN\n    > y = base.dists.normal.entropy( 0.0, 0.0 )\n    NaN\n\n","base.dists.normal.kurtosis":"\nbase.dists.normal.kurtosis( μ, σ )\n    Returns the excess kurtosis of a normal distribution with mean `μ` and\n    standard deviation `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var y = base.dists.normal.kurtosis( 0.0, 1.0 )\n    0.0\n    > y = base.dists.normal.kurtosis( 4.0, 3.0 )\n    0.0\n    > y = base.dists.normal.kurtosis( NaN, 1.0 )\n    NaN\n    > y = base.dists.normal.kurtosis( 0.0, NaN )\n    NaN\n    > y = base.dists.normal.kurtosis( 0.0, 0.0 )\n    NaN\n\n","base.dists.normal.logpdf":"\nbase.dists.normal.logpdf( x, μ, σ )\n    Evaluates the natural logarithm of the probability density function (PDF)\n    for a normal distribution with mean `μ` and standard deviation `σ` at a\n    value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dists.normal.logpdf( 2.0, 0.0, 1.0 )\n    ~-2.919\n    > y = base.dists.normal.logpdf( -1.0, 4.0, 2.0 )\n    ~-4.737\n    > y = base.dists.normal.logpdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.normal.logpdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.normal.logpdf( 0.0, 0.0, NaN )\n    NaN\n\n    // Negative standard deviation:\n    > y = base.dists.normal.logpdf( 2.0, 0.0, -1.0 )\n    NaN\n\n    // Degenerate distribution centered at `μ` when `σ = 0.0`:\n    > y = base.dists.normal.logpdf( 2.0, 8.0, 0.0 )\n    -Infinity\n    > y = base.dists.normal.logpdf( 8.0, 8.0, 0.0 )\n    Infinity\n\n\nbase.dists.normal.logpdf.factory( μ, σ )\n    Returns a function for evaluating the natural logarithm of the probability\n    density function (PDF) of a normal distribution with mean `μ` and standard\n    deviation `σ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var myLogPDF = base.dists.normal.logpdf.factory( 10.0, 2.0 );\n    > var y = myLogPDF( 10.0 )\n    ~-1.612\n\n","base.dists.normal.logpdf.factory":"\nbase.dists.normal.logpdf.factory( μ, σ )\n    Returns a function for evaluating the natural logarithm of the probability\n    density function (PDF) of a normal distribution with mean `μ` and standard\n    deviation `σ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var myLogPDF = base.dists.normal.logpdf.factory( 10.0, 2.0 );\n    > var y = myLogPDF( 10.0 )\n    ~-1.612\n\n","base.dists.normal.mean":"\nbase.dists.normal.mean( μ, σ )\n    Returns the expected value of a normal distribution with mean `μ` and\n    standard deviation `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var y = base.dists.normal.mean( 0.0, 1.0 )\n    0.0\n    > y = base.dists.normal.mean( 4.0, 2.0 )\n    4.0\n    > y = base.dists.normal.mean( NaN, 1.0 )\n    NaN\n    > y = base.dists.normal.mean( 0.0, NaN )\n    NaN\n    > y = base.dists.normal.mean( 0.0, 0.0 )\n    NaN\n\n","base.dists.normal.median":"\nbase.dists.normal.median( μ, σ )\n    Returns the median of a normal distribution with mean `μ` and standard\n    deviation `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var y = base.dists.normal.median( 0.0, 1.0 )\n    0.0\n    > y = base.dists.normal.median( 4.0, 2.0 )\n    4.0\n    > y = base.dists.normal.median( NaN, 1.0 )\n    NaN\n    > y = base.dists.normal.median( 0.0, NaN )\n    NaN\n    > y = base.dists.normal.median( 0.0, 0.0 )\n    NaN\n\n","base.dists.normal.mgf":"\nbase.dists.normal.mgf( x, μ, σ )\n    Evaluates the moment-generating function (MGF) for a normal distribution\n    with mean `μ` and standard deviation `σ` at a value `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dists.normal.mgf( 2.0, 0.0, 1.0 )\n    ~7.389\n    > y = base.dists.normal.mgf( 0.0, 0.0, 1.0 )\n    1.0\n    > y = base.dists.normal.mgf( -1.0, 4.0, 2.0 )\n    ~0.1353\n    > y = base.dists.normal.mgf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.normal.mgf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.normal.mgf( 0.0, 0.0, NaN )\n    NaN\n    > y = base.dists.normal.mgf( 2.0, 0.0, 0.0 )\n    NaN\n\n\nbase.dists.normal.mgf.factory( μ, σ )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    normal distribution with mean `μ` and standard deviation `σ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dists.normal.mgf.factory( 4.0, 2.0 );\n    > var y = myMGF( 1.0 )\n    ~403.429\n    > y = myMGF( 0.5 )\n    ~12.182\n\n","base.dists.normal.mgf.factory":"\nbase.dists.normal.mgf.factory( μ, σ )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    normal distribution with mean `μ` and standard deviation `σ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dists.normal.mgf.factory( 4.0, 2.0 );\n    > var y = myMGF( 1.0 )\n    ~403.429\n    > y = myMGF( 0.5 )\n    ~12.182\n\n","base.dists.normal.mode":"\nbase.dists.normal.mode( μ, σ )\n    Returns the mode of a normal distribution with mean `μ` and standard\n    deviation `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var y = base.dists.normal.mode( 0.0, 1.0 )\n    0.0\n    > y = base.dists.normal.mode( 4.0, 2.0 )\n    4.0\n    > y = base.dists.normal.mode( NaN, 1.0 )\n    NaN\n    > y = base.dists.normal.mode( 0.0, NaN )\n    NaN\n    > y = base.dists.normal.mode( 0.0, 0.0 )\n    NaN\n\n","base.dists.normal.Normal":"\nbase.dists.normal.Normal( [μ, σ] )\n    Returns a normal distribution object.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean parameter. Default: `0.0`.\n\n    σ: number (optional)\n        Standard deviation. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    normal: Object\n        Distribution instance.\n\n    normal.mu: number\n        Mean parameter.\n\n    normal.sigma: number\n        Standard deviation. If set, the value must be greater than `0`.\n\n    normal.entropy: number\n        Read-only property which returns the differential entropy.\n\n    normal.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    normal.mean: number\n        Read-only property which returns the expected value.\n\n    normal.median: number\n        Read-only property which returns the median.\n\n    normal.mode: number\n        Read-only property which returns the mode.\n\n    normal.skewness: number\n        Read-only property which returns the skewness.\n\n    normal.stdev: number\n        Read-only property which returns the standard deviation.\n\n    normal.variance: number\n        Read-only property which returns the variance.\n\n    normal.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    normal.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    normal.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    normal.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    normal.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var normal = base.dists.normal.Normal( -2.0, 3.0 );\n    > normal.mu\n    -2.0\n    > normal.sigma\n    3.0\n    > normal.entropy\n    ~2.518\n    > normal.kurtosis\n    0.0\n    > normal.mean\n    -2.0\n    > normal.median\n    -2.0\n    > normal.mode\n    -2.0\n    > normal.skewness\n    0.0\n    > normal.stdev\n    3.0\n    > normal.variance\n    9.0\n    > normal.cdf( 0.8 )\n    ~0.825\n    > normal.logpdf( 2.0 )\n    ~-2.9\n    > normal.mgf( 0.2 )\n    ~0.803\n    > normal.pdf( 2.0 )\n    ~0.055\n    > normal.quantile( 0.9 )\n    ~1.845\n\n","base.dists.normal.pdf":"\nbase.dists.normal.pdf( x, μ, σ )\n    Evaluates the probability density function (PDF) for a normal distribution\n    with mean `μ` and standard deviation `σ` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dists.normal.pdf( 2.0, 0.0, 1.0 )\n    ~0.054\n    > y = base.dists.normal.pdf( -1.0, 4.0, 2.0 )\n    ~0.009\n    > y = base.dists.normal.pdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.normal.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.normal.pdf( 0.0, 0.0, NaN )\n    NaN\n\n    // Negative standard deviation:\n    > y = base.dists.normal.pdf( 2.0, 0.0, -1.0 )\n    NaN\n\n    // Degenerate distribution centered at `μ` when `σ = 0.0`:\n    > y = base.dists.normal.pdf( 2.0, 8.0, 0.0 )\n    0.0\n    > y = base.dists.normal.pdf( 8.0, 8.0, 0.0 )\n    infinity\n\n\nbase.dists.normal.pdf.factory( μ, σ )\n    Returns a function for evaluating the probability density function (PDF) of\n    a normal distribution with mean `μ` and standard deviation `σ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.normal.pdf.factory( 10.0, 2.0 );\n    > var y = myPDF( 10.0 )\n    ~0.199\n\n","base.dists.normal.pdf.factory":"\nbase.dists.normal.pdf.factory( μ, σ )\n    Returns a function for evaluating the probability density function (PDF) of\n    a normal distribution with mean `μ` and standard deviation `σ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.normal.pdf.factory( 10.0, 2.0 );\n    > var y = myPDF( 10.0 )\n    ~0.199\n\n","base.dists.normal.quantile":"\nbase.dists.normal.quantile( p, μ, σ )\n    Evaluates the quantile function for a normal distribution with mean `μ` and\n    standard deviation `σ` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.normal.quantile( 0.8, 0.0, 1.0 )\n    ~0.842\n    > y = base.dists.normal.quantile( 0.5, 4.0, 2.0 )\n    4\n\n    > y = base.dists.normal.quantile( 1.1, 0.0, 1.0 )\n    NaN\n    > y = base.dists.normal.quantile( -0.2, 0.0, 1.0 )\n    NaN\n\n    > y = base.dists.normal.quantile( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.normal.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.normal.quantile( 0.0, 0.0, NaN )\n    NaN\n\n    // Negative standard deviation:\n    > y = base.dists.normal.quantile( 0.5, 0.0, -1.0 )\n    NaN\n\n    // Degenerate distribution centered at `μ` when `σ = 0.0`:\n    > y = base.dists.normal.quantile( 0.3, 8.0, 0.0 )\n    8.0\n    > y = base.dists.normal.quantile( 0.9, 8.0, 0.0 )\n    8.0\n\n\nbase.dists.normal.quantile.factory( μ, σ )\n    Returns a function for evaluating the quantile function\n    of a normal distribution with mean `μ` and standard deviation `σ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.normal.quantile.factory( 10.0, 2.0 );\n    > var y = myQuantile( 0.5 )\n    10.0\n\n","base.dists.normal.quantile.factory":"\nbase.dists.normal.quantile.factory( μ, σ )\n    Returns a function for evaluating the quantile function\n    of a normal distribution with mean `μ` and standard deviation `σ`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.normal.quantile.factory( 10.0, 2.0 );\n    > var y = myQuantile( 0.5 )\n    10.0\n\n","base.dists.normal.skewness":"\nbase.dists.normal.skewness( μ, σ )\n    Returns the skewness of a normal distribution with mean `μ` and standard\n    deviation `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var y = base.dists.normal.skewness( 0.0, 1.0 )\n    0.0\n    > y = base.dists.normal.skewness( 4.0, 3.0 )\n    0.0\n    > y = base.dists.normal.skewness( NaN, 1.0 )\n    NaN\n    > y = base.dists.normal.skewness( 0.0, NaN )\n    NaN\n    > y = base.dists.normal.skewness( 0.0, 0.0 )\n    NaN\n\n","base.dists.normal.stdev":"\nbase.dists.normal.stdev( μ, σ )\n    Returns the standard deviation of a normal distribution with mean `μ` and\n    standard deviation `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var y = base.dists.normal.stdev( 0.0, 1.0 )\n    1.0\n    > y = base.dists.normal.stdev( 4.0, 3.0 )\n    3.0\n    > y = base.dists.normal.stdev( NaN, 1.0 )\n    NaN\n    > y = base.dists.normal.stdev( 0.0, NaN )\n    NaN\n    > y = base.dists.normal.stdev( 0.0, 0.0 )\n    NaN\n\n","base.dists.normal.variance":"\nbase.dists.normal.variance( μ, σ )\n    Returns the variance of a normal distribution with mean `μ` and standard\n    deviation `σ`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var y = base.dists.normal.variance( 0.0, 1.0 )\n    1.0\n    > y = base.dists.normal.variance( 4.0, 3.0 )\n    9.0\n    > y = base.dists.normal.variance( NaN, 1.0 )\n    NaN\n    > y = base.dists.normal.variance( 0.0, NaN )\n    NaN\n    > y = base.dists.normal.variance( 0.0, 0.0 )\n    NaN\n\n","base.dists.pareto1.cdf":"\nbase.dists.pareto1.cdf( x, α, β )\n    Evaluates the cumulative distribution function (CDF) for a Pareto (Type I)\n    distribution with shape parameter `α` and scale parameter `β` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.pareto1.cdf( 2.0, 1.0, 1.0 )\n    0.5\n    > y = base.dists.pareto1.cdf( 5.0, 2.0, 4.0 )\n    ~0.36\n    > y = base.dists.pareto1.cdf( 4.0, 2.0, 2.0 )\n    0.75\n    > y = base.dists.pareto1.cdf( 1.9, 2.0, 2.0 )\n    0.0\n    > y = base.dists.pareto1.cdf( PINF, 4.0, 2.0 )\n    1.0\n\n    > y = base.dists.pareto1.cdf( 2.0, -1.0, 0.5 )\n    NaN\n    > y = base.dists.pareto1.cdf( 2.0, 0.5, -1.0 )\n    NaN\n\n    > y = base.dists.pareto1.cdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.pareto1.cdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.pareto1.cdf( 0.0, 1.0, NaN )\n    NaN\n\n\nbase.dists.pareto1.cdf.factory( α, β )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Pareto (Type I) distribution with shape parameter `α` and scale\n    parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.pareto1.cdf.factory( 10.0, 2.0 );\n    > var y = myCDF( 3.0 )\n    ~0.983\n    > y = myCDF( 2.5 )\n    ~0.893\n\n","base.dists.pareto1.cdf.factory":"\nbase.dists.pareto1.cdf.factory( α, β )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Pareto (Type I) distribution with shape parameter `α` and scale\n    parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.pareto1.cdf.factory( 10.0, 2.0 );\n    > var y = myCDF( 3.0 )\n    ~0.983\n    > y = myCDF( 2.5 )\n    ~0.893\n\n","base.dists.pareto1.entropy":"\nbase.dists.pareto1.entropy( α, β )\n    Returns the differential entropy of a Pareto (Type I) distribution\n    (in nats).\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Differential entropy.\n\n    Examples\n    --------\n    > var v = base.dists.pareto1.entropy( 0.8, 1.0 )\n    ~2.473\n    > v = base.dists.pareto1.entropy( 4.0, 12.0 )\n    ~2.349\n    > v = base.dists.pareto1.entropy( 8.0, 2.0 )\n    ~-0.261\n\n","base.dists.pareto1.kurtosis":"\nbase.dists.pareto1.kurtosis( α, β )\n    Returns the excess kurtosis of a Pareto (Type I) distribution.\n\n    If `α <= 4` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dists.pareto1.kurtosis( 5.0, 1.0 )\n    ~70.8\n    > v = base.dists.pareto1.kurtosis( 4.5, 12.0 )\n    ~146.444\n    > v = base.dists.pareto1.kurtosis( 8.0, 2.0 )\n    ~19.725\n\n","base.dists.pareto1.logcdf":"\nbase.dists.pareto1.logcdf( x, α, β )\n    Evaluates the natural logarithm of the cumulative distribution function\n    (CDF) for a Pareto (Type I) distribution with shape parameter `α` and scale\n    parameter `β` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logCDF.\n\n    Examples\n    --------\n    > var y = base.dists.pareto1.logcdf( 2.0, 1.0, 1.0 )\n    ~-0.693\n    > y = base.dists.pareto1.logcdf( 5.0, 2.0, 4.0 )\n    ~-1.022\n    > y = base.dists.pareto1.logcdf( 4.0, 2.0, 2.0 )\n    ~-0.288\n    > y = base.dists.pareto1.logcdf( 1.9, 2.0, 2.0 )\n    -Infinity\n    > y = base.dists.pareto1.logcdf( PINF, 4.0, 2.0 )\n    0.0\n\n    > y = base.dists.pareto1.logcdf( 2.0, -1.0, 0.5 )\n    NaN\n    > y = base.dists.pareto1.logcdf( 2.0, 0.5, -1.0 )\n    NaN\n\n    > y = base.dists.pareto1.logcdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.pareto1.logcdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.pareto1.logcdf( 0.0, 1.0, NaN )\n    NaN\n\n\nbase.dists.pareto1.logcdf.factory( α, β )\n    Returns a function for evaluating the natural logarithm of the cumulative\n    distribution function (CDF) of a Pareto (Type I) distribution with shape\n    parameter `α` and scale parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogCDF = base.dists.pareto1.logcdf.factory( 10.0, 2.0 );\n    > var y = mylogCDF( 3.0 )\n    ~-0.017\n    > y = mylogCDF( 2.5 )\n    ~-0.114\n\n","base.dists.pareto1.logcdf.factory":"\nbase.dists.pareto1.logcdf.factory( α, β )\n    Returns a function for evaluating the natural logarithm of the cumulative\n    distribution function (CDF) of a Pareto (Type I) distribution with shape\n    parameter `α` and scale parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogCDF = base.dists.pareto1.logcdf.factory( 10.0, 2.0 );\n    > var y = mylogCDF( 3.0 )\n    ~-0.017\n    > y = mylogCDF( 2.5 )\n    ~-0.114\n\n","base.dists.pareto1.logpdf":"\nbase.dists.pareto1.logpdf( x, α, β )\n    Evaluates the natural logarithm of the probability density function (PDF)\n    for a Pareto (Type I) distribution with shape parameter `α` and scale\n    parameter `β` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dists.pareto1.logpdf( 4.0, 1.0, 1.0 )\n    ~-2.773\n    > y = base.dists.pareto1.logpdf( 20.0, 1.0, 10.0 )\n    ~-3.689\n    > y = base.dists.pareto1.logpdf( 7.0, 2.0, 6.0 )\n    ~-1.561\n    > y = base.dists.pareto1.logpdf( 7.0, 6.0, 3.0 )\n    ~-5.238\n    > y = base.dists.pareto1.logpdf( 1.0, 4.0, 2.0 )\n    -Infinity\n    > y = base.dists.pareto1.logpdf( 1.5, 4.0, 2.0 )\n    -Infinity\n\n    > y = base.dists.pareto1.logpdf( 0.5, -1.0, 0.5 )\n    NaN\n    > y = base.dists.pareto1.logpdf( 0.5, 0.5, -1.0 )\n    NaN\n\n    > y = base.dists.pareto1.logpdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.pareto1.logpdf( 0.5, NaN, 1.0 )\n    NaN\n    > y = base.dists.pareto1.logpdf( 0.5, 1.0, NaN )\n    NaN\n\n\nbase.dists.pareto1.logpdf.factory( α, β )\n    Returns a function for evaluating the natural logarithm of the probability\n    density function (PDF) of a Pareto (Type I) distribution with shape\n    parameter `α` and scale parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogPDF = base.dists.pareto1.logpdf.factory( 0.5, 0.5 );\n    > var y = mylogPDF( 0.8 )\n    ~-0.705\n    > y = mylogPDF( 2.0 )\n    ~-2.079\n\n","base.dists.pareto1.logpdf.factory":"\nbase.dists.pareto1.logpdf.factory( α, β )\n    Returns a function for evaluating the natural logarithm of the probability\n    density function (PDF) of a Pareto (Type I) distribution with shape\n    parameter `α` and scale parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogPDF = base.dists.pareto1.logpdf.factory( 0.5, 0.5 );\n    > var y = mylogPDF( 0.8 )\n    ~-0.705\n    > y = mylogPDF( 2.0 )\n    ~-2.079\n\n","base.dists.pareto1.mean":"\nbase.dists.pareto1.mean( α, β )\n    Returns the expected value of a Pareto (Type I) distribution.\n\n    If `0 < α <= 1`, the function returns `Infinity`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dists.pareto1.mean( 0.8, 1.0 )\n    Infinity\n    > v = base.dists.pareto1.mean( 4.0, 12.0 )\n    16.0\n    > v = base.dists.pareto1.mean( 8.0, 2.0 )\n    ~2.286\n\n","base.dists.pareto1.median":"\nbase.dists.pareto1.median( α, β )\n    Returns the median of a Pareto (Type I) distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var v = base.dists.pareto1.median( 0.8, 1.0 )\n    ~2.378\n    > v = base.dists.pareto1.median( 4.0, 12.0 )\n    ~14.27\n    > v = base.dists.pareto1.median( 8.0, 2.0 )\n    ~2.181\n\n","base.dists.pareto1.mode":"\nbase.dists.pareto1.mode( α, β )\n    Returns the mode of a Pareto (Type I) distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dists.pareto1.mode( 0.8, 1.0 )\n    1.0\n    > v = base.dists.pareto1.mode( 4.0, 12.0 )\n    12.0\n    > v = base.dists.pareto1.mode( 8.0, 2.0 )\n    2.0\n\n","base.dists.pareto1.Pareto1":"\nbase.dists.pareto1.Pareto1( [α, β] )\n    Returns a Pareto (Type I) distribution object.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter. Must be greater than `0`. Default: `1.0`.\n\n    β: number (optional)\n        Scale parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    pareto1: Object\n        Distribution instance.\n\n    pareto1.alpha: number\n        Shape parameter. If set, the value must be greater than `0`.\n\n    pareto1.beta: number\n        Scale parameter. If set, the value must be greater than `0`.\n\n    pareto1.entropy: number\n        Read-only property which returns the differential entropy.\n\n    pareto1.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    pareto1.mean: number\n        Read-only property which returns the expected value.\n\n    pareto1.median: number\n        Read-only property which returns the median.\n\n    pareto1.mode: number\n        Read-only property which returns the mode.\n\n    pareto1.skewness: number\n        Read-only property which returns the skewness.\n\n    pareto1.variance: number\n        Read-only property which returns the variance.\n\n    pareto1.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    pareto1.logcdf: Function\n        Evaluates the natural logarithm of the cumulative distribution function\n        (logCDF).\n\n    pareto1.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (logPDF).\n\n    pareto1.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    pareto1.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var pareto1 = base.dists.pareto1.Pareto1( 6.0, 5.0 );\n    > pareto1.alpha\n    6.0\n    > pareto1.beta\n    5.0\n    > pareto1.entropy\n    ~0.984\n    > pareto1.kurtosis\n    ~35.667\n    > pareto1.mean\n    6.0\n    > pareto1.median\n    ~5.612\n    > pareto1.mode\n    5.0\n    > pareto1.skewness\n    ~3.81\n    > pareto1.variance\n    1.5\n    > pareto1.cdf( 7.0 )\n    ~0.867\n    > pareto1.logcdf( 7.0 )\n    ~-0.142\n    > pareto1.logpdf( 5.0 )\n    ~0.182\n    > pareto1.pdf( 5.0 )\n    1.2\n    > pareto1.quantile( 0.8 )\n    ~6.538\n\n","base.dists.pareto1.pdf":"\nbase.dists.pareto1.pdf( x, α, β )\n    Evaluates the probability density function (PDF) for a Pareto (Type I)\n    distribution with shape parameter `α` and scale parameter `β` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dists.pareto1.pdf( 4.0, 1.0, 1.0 )\n    ~0.063\n    > y = base.dists.pareto1.pdf( 20.0, 1.0, 10.0 )\n    0.025\n    > y = base.dists.pareto1.pdf( 7.0, 2.0, 6.0 )\n    ~0.21\n    > y = base.dists.pareto1.pdf( 7.0, 6.0, 3.0 )\n    ~0.005\n    > y = base.dists.pareto1.pdf( 1.0, 4.0, 2.0 )\n    0.0\n    > y = base.dists.pareto1.pdf( 1.5, 4.0, 2.0 )\n    0.0\n\n    > y = base.dists.pareto1.pdf( 0.5, -1.0, 0.5 )\n    NaN\n    > y = base.dists.pareto1.pdf( 0.5, 0.5, -1.0 )\n    NaN\n\n    > y = base.dists.pareto1.pdf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.pareto1.pdf( 0.5, NaN, 1.0 )\n    NaN\n    > y = base.dists.pareto1.pdf( 0.5, 1.0, NaN )\n    NaN\n\n\nbase.dists.pareto1.pdf.factory( α, β )\n    Returns a function for evaluating the probability density function (PDF) of\n    a Pareto (Type I) distribution with shape parameter `α` and scale parameter\n    `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.pareto1.pdf.factory( 0.5, 0.5 );\n    > var y = myPDF( 0.8 )\n    ~0.494\n    > y = myPDF( 2.0 )\n    ~0.125\n\n","base.dists.pareto1.pdf.factory":"\nbase.dists.pareto1.pdf.factory( α, β )\n    Returns a function for evaluating the probability density function (PDF) of\n    a Pareto (Type I) distribution with shape parameter `α` and scale parameter\n    `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.pareto1.pdf.factory( 0.5, 0.5 );\n    > var y = myPDF( 0.8 )\n    ~0.494\n    > y = myPDF( 2.0 )\n    ~0.125\n\n","base.dists.pareto1.quantile":"\nbase.dists.pareto1.quantile( p, α, β )\n    Evaluates the quantile function for a Pareto (Type I) distribution with\n    shape parameter `α` and scale parameter `β` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.pareto1.quantile( 0.8, 2.0, 1.0 )\n    ~2.236\n    > y = base.dists.pareto1.quantile( 0.8, 1.0, 10.0 )\n    ~50.0\n    > y = base.dists.pareto1.quantile( 0.1, 1.0, 10.0 )\n    ~11.111\n\n    > y = base.dists.pareto1.quantile( 1.1, 1.0, 1.0 )\n    NaN\n    > y = base.dists.pareto1.quantile( -0.2, 1.0, 1.0 )\n    NaN\n\n    > y = base.dists.pareto1.quantile( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.pareto1.quantile( 0.5, NaN, 1.0 )\n    NaN\n    > y = base.dists.pareto1.quantile( 0.5, 1.0, NaN )\n    NaN\n\n    > y = base.dists.pareto1.quantile( 0.5, -1.0, 1.0 )\n    NaN\n    > y = base.dists.pareto1.quantile( 0.5, 1.0, -1.0 )\n    NaN\n\n\nbase.dists.pareto1.quantile.factory( α, β )\n    Returns a function for evaluating the quantile function of a Pareto (Type I)\n    distribution with shape parameter `α` and scale parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.pareto1.quantile.factory( 2.5, 0.5 );\n    > var y = myQuantile( 0.5 )\n    ~0.66\n    > y = myQuantile( 0.8 )\n    ~0.952\n\n","base.dists.pareto1.quantile.factory":"\nbase.dists.pareto1.quantile.factory( α, β )\n    Returns a function for evaluating the quantile function of a Pareto (Type I)\n    distribution with shape parameter `α` and scale parameter `β`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.pareto1.quantile.factory( 2.5, 0.5 );\n    > var y = myQuantile( 0.5 )\n    ~0.66\n    > y = myQuantile( 0.8 )\n    ~0.952\n\n","base.dists.pareto1.skewness":"\nbase.dists.pareto1.skewness( α, β )\n    Returns the skewness of a Pareto (Type I) distribution.\n\n    If `α <= 3` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dists.pareto1.skewness( 3.5, 1.0 )\n    ~11.784\n    > v = base.dists.pareto1.skewness( 4.0, 12.0 )\n    ~7.071\n    > v = base.dists.pareto1.skewness( 8.0, 2.0 )\n    ~3.118\n\n","base.dists.pareto1.stdev":"\nbase.dists.pareto1.stdev( α, β )\n    Returns the standard deviation of a Pareto (Type I) distribution.\n\n    If `0 < α <= 2` and `β > 0`, the function returns positive infinity.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dists.pareto1.stdev( 0.8, 1.0 )\n    Infinity\n    > v = base.dists.pareto1.stdev( 4.0, 12.0 )\n    ~5.657\n    > v = base.dists.pareto1.stdev( 8.0, 2.0 )\n    ~0.33\n\n","base.dists.pareto1.variance":"\nbase.dists.pareto1.variance( α, β )\n    Returns the variance of a Pareto (Type I) distribution.\n\n    If `0 < α <= 2` and `β > 0`, the function returns positive infinity.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dists.pareto1.variance( 0.8, 1.0 )\n    Infinity\n    > v = base.dists.pareto1.variance( 4.0, 12.0 )\n    32.0\n    > v = base.dists.pareto1.variance( 8.0, 2.0 )\n    ~0.109\n\n","base.dists.poisson.cdf":"\nbase.dists.poisson.cdf( x, λ )\n    Evaluates the cumulative distribution function (CDF) for a Poisson\n    distribution with mean parameter `λ` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.poisson.cdf( 2.0, 0.5 )\n    ~0.986\n    > y = base.dists.poisson.cdf( 2.0, 10.0 )\n    ~0.003\n    > y = base.dists.poisson.cdf( -1.0, 4.0 )\n    0.0\n    > y = base.dists.poisson.cdf( NaN, 1.0 )\n    NaN\n    > y = base.dists.poisson.cdf( 0.0, NaN )\n    NaN\n\n    // Negative mean parameter:\n    > y = base.dists.poisson.cdf( 2.0, -1.0 )\n    NaN\n\n    // Degenerate distribution at `λ = 0`:\n    > y = base.dists.poisson.cdf( -2.0, 0.0 )\n    0.0\n    > y = base.dists.poisson.cdf( 0.0, 0.0 )\n    1.0\n    > y = base.dists.poisson.cdf( 10.0, 0.0 )\n    1.0\n\n\nbase.dists.poisson.cdf.factory( λ )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Poisson distribution with mean parameter `λ`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.poisson.cdf.factory( 5.0 );\n    > var y = mycdf( 3.0 )\n    ~0.265\n    > y = mycdf( 8.0 )\n    ~0.932\n\n","base.dists.poisson.cdf.factory":"\nbase.dists.poisson.cdf.factory( λ )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Poisson distribution with mean parameter `λ`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.poisson.cdf.factory( 5.0 );\n    > var y = mycdf( 3.0 )\n    ~0.265\n    > y = mycdf( 8.0 )\n    ~0.932\n\n","base.dists.poisson.entropy":"\nbase.dists.poisson.entropy( λ )\n    Returns the entropy of a Poisson distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dists.poisson.entropy( 11.0 )\n    ~2.61\n    > v = base.dists.poisson.entropy( 4.5 )\n    ~2.149\n\n","base.dists.poisson.kurtosis":"\nbase.dists.poisson.kurtosis( λ )\n    Returns the excess kurtosis of a Poisson distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a non-positive value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dists.poisson.kurtosis( 11.0 )\n    ~0.091\n    > v = base.dists.poisson.kurtosis( 4.5 )\n    ~0.222\n\n","base.dists.poisson.logpmf":"\nbase.dists.poisson.logpmf( x, λ )\n    Evaluates the natural logarithm of the probability mass function (PMF) for a\n    Poisson distribution with mean parameter `λ` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPMF.\n\n    Examples\n    --------\n    > var y = base.dists.poisson.logpmf( 4.0, 3.0 )\n    ~-1.784\n    > y = base.dists.poisson.logpmf( 1.0, 3.0 )\n    ~-1.901\n    > y = base.dists.poisson.logpmf( -1.0, 2.0 )\n    -Infinity\n    > y = base.dists.poisson.logpmf( 0.0, NaN )\n    NaN\n    > y = base.dists.poisson.logpmf( NaN, 0.5 )\n    NaN\n\n    // Negative mean parameter:\n    > y = base.dists.poisson.logpmf( 2.0, -0.5 )\n    NaN\n\n    // Degenerate distribution at `λ = 0`:\n    > y = base.dists.poisson.logpmf( 2.0, 0.0 )\n    -Infinity\n    > y = base.dists.poisson.logpmf( 0.0, 0.0 )\n    0.0\n\n\nbase.dists.poisson.logpmf.factory( λ )\n    Returns a function for evaluating the natural logarithm of the probability\n    mass function (PMF) of a Poisson distribution with mean parameter `λ`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    logpmf: Function\n        Logarithm of probability mass function (PMF).\n\n    Examples\n    --------\n    > var mylogpmf = base.dists.poisson.logpmf.factory( 1.0 );\n    > var y = mylogpmf( 3.0 )\n    ~-2.792\n    > y = mylogpmf( 1.0 )\n    ~-1.0\n\n","base.dists.poisson.logpmf.factory":"\nbase.dists.poisson.logpmf.factory( λ )\n    Returns a function for evaluating the natural logarithm of the probability\n    mass function (PMF) of a Poisson distribution with mean parameter `λ`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    logpmf: Function\n        Logarithm of probability mass function (PMF).\n\n    Examples\n    --------\n    > var mylogpmf = base.dists.poisson.logpmf.factory( 1.0 );\n    > var y = mylogpmf( 3.0 )\n    ~-2.792\n    > y = mylogpmf( 1.0 )\n    ~-1.0\n\n","base.dists.poisson.mean":"\nbase.dists.poisson.mean( λ )\n    Returns the expected value of a Poisson distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dists.poisson.mean( 11.0 )\n    11.0\n    > v = base.dists.poisson.mean( 4.5 )\n    4.5\n\n","base.dists.poisson.median":"\nbase.dists.poisson.median( λ )\n    Returns the median of a Poisson distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    out: integer\n        Median.\n\n    Examples\n    --------\n    > var v = base.dists.poisson.median( 11.0 )\n    11\n    > v = base.dists.poisson.median( 4.5 )\n    4\n\n","base.dists.poisson.mgf":"\nbase.dists.poisson.mgf( x, λ )\n    Evaluates the moment-generating function (MGF) for a Poisson distribution\n    with mean parameter `λ` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dists.poisson.mgf( 1.0, 1.5 )\n    ~13.163\n    > y = base.dists.poisson.mgf( 0.5, 0.5 )\n    ~1.383\n    > y = base.dists.poisson.mgf( NaN, 0.5 )\n    NaN\n    > y = base.dists.poisson.mgf( 0.0, NaN )\n    NaN\n    > y = base.dists.poisson.mgf( -2.0, -1.0 )\n    NaN\n\n\nbase.dists.poisson.mgf.factory( λ )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    Poisson distribution with mean parameter `λ`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dists.poisson.mgf.factory( 2.0 );\n    > var y = myMGF( 0.1 )\n    ~1.234\n\n","base.dists.poisson.mgf.factory":"\nbase.dists.poisson.mgf.factory( λ )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    Poisson distribution with mean parameter `λ`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dists.poisson.mgf.factory( 2.0 );\n    > var y = myMGF( 0.1 )\n    ~1.234\n\n","base.dists.poisson.mode":"\nbase.dists.poisson.mode( λ )\n    Returns the mode of a Poisson distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    out: integer\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dists.poisson.mode( 11.0 )\n    11\n    > v = base.dists.poisson.mode( 4.5 )\n    4\n\n","base.dists.poisson.pmf":"\nbase.dists.poisson.pmf( x, λ )\n    Evaluates the probability mass function (PMF) for a Poisson\n    distribution with mean parameter `λ` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PMF.\n\n    Examples\n    --------\n    > var y = base.dists.poisson.pmf( 4.0, 3.0 )\n    ~0.168\n    > y = base.dists.poisson.pmf( 1.0, 3.0 )\n    ~0.149\n    > y = base.dists.poisson.pmf( -1.0, 2.0 )\n    0.0\n    > y = base.dists.poisson.pmf( 0.0, NaN )\n    NaN\n    > y = base.dists.poisson.pmf( NaN, 0.5 )\n    NaN\n\n    // Negative mean parameter:\n    > y = base.dists.poisson.pmf( 2.0, -0.5 )\n    NaN\n\n    // Degenerate distribution at `λ = 0`:\n    > y = base.dists.poisson.pmf( 2.0, 0.0 )\n    0.0\n    > y = base.dists.poisson.pmf( 0.0, 0.0 )\n    1.0\n\n\nbase.dists.poisson.pmf.factory( λ )\n    Returns a function for evaluating the probability mass function (PMF)\n    of a Poisson distribution with mean parameter `λ`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    pmf: Function\n        Probability mass function (PMF).\n\n    Examples\n    --------\n    > var mypmf = base.dists.poisson.pmf.factory( 1.0 );\n    > var y = mypmf( 3.0 )\n    ~0.061\n    > y = mypmf( 1.0 )\n    ~0.368\n\n","base.dists.poisson.pmf.factory":"\nbase.dists.poisson.pmf.factory( λ )\n    Returns a function for evaluating the probability mass function (PMF)\n    of a Poisson distribution with mean parameter `λ`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    pmf: Function\n        Probability mass function (PMF).\n\n    Examples\n    --------\n    > var mypmf = base.dists.poisson.pmf.factory( 1.0 );\n    > var y = mypmf( 3.0 )\n    ~0.061\n    > y = mypmf( 1.0 )\n    ~0.368\n\n","base.dists.poisson.Poisson":"\nbase.dists.poisson.Poisson( [λ] )\n    Returns a Poisson distribution object.\n\n    Parameters\n    ----------\n    λ: number (optional)\n        Mean parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    poisson: Object\n        Distribution instance.\n\n    poisson.lambda: number\n        Mean parameter. If set, the value must be greater than `0`.\n\n    poisson.entropy: number\n        Read-only property which returns the differential entropy.\n\n    poisson.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    poisson.mean: number\n        Read-only property which returns the expected value.\n\n    poisson.median: number\n        Read-only property which returns the median.\n\n    poisson.mode: number\n        Read-only property which returns the mode.\n\n    poisson.skewness: number\n        Read-only property which returns the skewness.\n\n    poisson.stdev: number\n        Read-only property which returns the standard deviation.\n\n    poisson.variance: number\n        Read-only property which returns the variance.\n\n    poisson.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    poisson.logpmf: Function\n        Evaluates the natural logarithm of the probability mass function (PMF).\n\n    poisson.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    poisson.pmf: Function\n        Evaluates the probability mass function (PMF).\n\n    poisson.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var poisson = base.dists.poisson.Poisson( 6.0 );\n    > poisson.lambda\n    6.0\n    > poisson.entropy\n    ~2.3\n    > poisson.kurtosis\n    ~0.167\n    > poisson.mean\n    6.0\n    > poisson.median\n    6.0\n    > poisson.mode\n    6.0\n    > poisson.skewness\n    ~0.408\n    > poisson.stdev\n    ~2.449\n    > poisson.variance\n    6.0\n    > poisson.cdf( 4.0 )\n    ~0.285\n    > poisson.logpmf( 2.0 )\n    ~-3.11\n    > poisson.mgf( 0.5 )\n    ~49.025\n    > poisson.pmf( 2.0 )\n    ~0.045\n    > poisson.quantile( 0.5 )\n    6.0\n\n","base.dists.poisson.quantile":"\nbase.dists.poisson.quantile( p, λ )\n    Evaluates the quantile function for a Poisson distribution with mean\n    parameter `λ` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.poisson.quantile( 0.5, 2.0 )\n    2\n    > y = base.dists.poisson.quantile( 0.9, 4.0 )\n    7\n    > y = base.dists.poisson.quantile( 0.1, 200.0 )\n    182\n\n    > y = base.dists.poisson.quantile( 1.1, 0.0 )\n    NaN\n    > y = base.dists.poisson.quantile( -0.2, 0.0 )\n    NaN\n\n    > y = base.dists.poisson.quantile( NaN, 0.5 )\n    NaN\n    > y = base.dists.poisson.quantile( 0.0, NaN )\n    NaN\n\n    // Negative mean parameter:\n    > y = base.dists.poisson.quantile( 2.0, -1.0 )\n    NaN\n\n    // Degenerate distribution at `λ = 0`:\n    > y = base.dists.poisson.quantile( 0.1, 0.0 )\n    0.0\n    > y = base.dists.poisson.quantile( 0.9, 0.0 )\n    0.0\n\n\nbase.dists.poisson.quantile.factory( λ )\n    Returns a function for evaluating the quantile function of a Poisson\n    distribution with mean parameter `λ`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.poisson.quantile.factory( 0.4 );\n    > var y = myQuantile( 0.4 )\n    0.0\n    > y = myQuantile( 1.0 )\n    Infinity\n\n","base.dists.poisson.quantile.factory":"\nbase.dists.poisson.quantile.factory( λ )\n    Returns a function for evaluating the quantile function of a Poisson\n    distribution with mean parameter `λ`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.poisson.quantile.factory( 0.4 );\n    > var y = myQuantile( 0.4 )\n    0.0\n    > y = myQuantile( 1.0 )\n    Infinity\n\n","base.dists.poisson.skewness":"\nbase.dists.poisson.skewness( λ )\n    Returns the skewness of a Poisson distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a nonpositive value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dists.poisson.skewness( 11.0 )\n    ~0.302\n    > v = base.dists.poisson.skewness( 4.5 )\n    ~0.471\n\n","base.dists.poisson.stdev":"\nbase.dists.poisson.stdev( λ )\n    Returns the standard deviation of a Poisson distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dists.poisson.stdev( 11.0 )\n    ~3.317\n    > v = base.dists.poisson.stdev( 4.5 )\n    ~2.121\n\n","base.dists.poisson.variance":"\nbase.dists.poisson.variance( λ )\n    Returns the variance of a Poisson distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `λ`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dists.poisson.variance( 11.0 )\n    11.0\n    > v = base.dists.poisson.variance( 4.5 )\n    4.5\n\n","base.dists.rayleigh.cdf":"\nbase.dists.rayleigh.cdf( x, sigma )\n    Evaluates the cumulative distribution function (CDF) for a Rayleigh\n    distribution with scale parameter `sigma` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `sigma`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.rayleigh.cdf( 2.0, 3.0 )\n    ~0.199\n    > y = base.dists.rayleigh.cdf( 1.0, 2.0 )\n    ~0.118\n    > y = base.dists.rayleigh.cdf( -1.0, 4.0 )\n    0.0\n    > y = base.dists.rayleigh.cdf( NaN, 1.0 )\n    NaN\n    > y = base.dists.rayleigh.cdf( 0.0, NaN )\n    NaN\n\n    // Negative scale parameter:\n    > y = base.dists.rayleigh.cdf( 2.0, -1.0 )\n    NaN\n\n    // Degenerate distribution when `sigma = 0.0`:\n    > y = base.dists.rayleigh.cdf( -2.0, 0.0 )\n    0.0\n    > y = base.dists.rayleigh.cdf( 0.0, 0.0 )\n    1.0\n    > y = base.dists.rayleigh.cdf( 2.0, 0.0 )\n    1.0\n\n\nbase.dists.rayleigh.cdf.factory( sigma )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Rayleigh distribution with scale parameter `sigma`.\n\n    Parameters\n    ----------\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.rayleigh.cdf.factory( 0.5 );\n    > var y = myCDF( 1.0 )\n    ~0.865\n    > y = myCDF( 0.5 )\n    ~0.393\n\n","base.dists.rayleigh.cdf.factory":"\nbase.dists.rayleigh.cdf.factory( sigma )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Rayleigh distribution with scale parameter `sigma`.\n\n    Parameters\n    ----------\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.rayleigh.cdf.factory( 0.5 );\n    > var y = myCDF( 1.0 )\n    ~0.865\n    > y = myCDF( 0.5 )\n    ~0.393\n\n","base.dists.rayleigh.entropy":"\nbase.dists.rayleigh.entropy( σ )\n    Returns the differential entropy of a Rayleigh distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dists.rayleigh.entropy( 11.0 )\n    ~3.34\n    > v = base.dists.rayleigh.entropy( 4.5 )\n    ~2.446\n\n","base.dists.rayleigh.kurtosis":"\nbase.dists.rayleigh.kurtosis( σ )\n    Returns the excess kurtosis of a Rayleigh distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dists.rayleigh.kurtosis( 11.0 )\n    ~0.245\n    > v = base.dists.rayleigh.kurtosis( 4.5 )\n    ~0.245\n\n","base.dists.rayleigh.logcdf":"\nbase.dists.rayleigh.logcdf( x, sigma )\n    Evaluates the logarithm of the cumulative distribution function (CDF) for a\n    Rayleigh distribution with scale parameter `sigma` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `sigma`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logCDF.\n\n    Examples\n    --------\n    > var y = base.dists.rayleigh.logcdf( 2.0, 3.0 )\n    ~-1.613\n    > y = base.dists.rayleigh.logcdf( 1.0, 2.0 )\n    ~-2.141\n    > y = base.dists.rayleigh.logcdf( -1.0, 4.0 )\n    -Infinity\n    > y = base.dists.rayleigh.logcdf( NaN, 1.0 )\n    NaN\n    > y = base.dists.rayleigh.logcdf( 0.0, NaN )\n    NaN\n    // Negative scale parameter:\n    > y = base.dists.rayleigh.logcdf( 2.0, -1.0 )\n    NaN\n\n\nbase.dists.rayleigh.logcdf.factory( sigma )\n    Returns a function for evaluating the logarithm of the cumulative\n    distribution function (CDF) of a Rayleigh distribution with scale parameter\n    `sigma`.\n\n    Parameters\n    ----------\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.rayleigh.logcdf.factory( 0.5 );\n    > var y = mylogcdf( 1.0 )\n    ~-0.145\n    > y = mylogcdf( 0.5 )\n    ~-0.933\n\n","base.dists.rayleigh.logcdf.factory":"\nbase.dists.rayleigh.logcdf.factory( sigma )\n    Returns a function for evaluating the logarithm of the cumulative\n    distribution function (CDF) of a Rayleigh distribution with scale parameter\n    `sigma`.\n\n    Parameters\n    ----------\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.rayleigh.logcdf.factory( 0.5 );\n    > var y = mylogcdf( 1.0 )\n    ~-0.145\n    > y = mylogcdf( 0.5 )\n    ~-0.933\n\n","base.dists.rayleigh.logpdf":"\nbase.dists.rayleigh.logpdf( x, sigma )\n    Evaluates the logarithm of the probability density function (PDF) for a\n    Rayleigh distribution with scale parameter `sigma` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `sigma`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dists.rayleigh.logpdf( 0.3, 1.0 )\n    ~-1.249\n    > y = base.dists.rayleigh.logpdf( 2.0, 0.8 )\n    ~-1.986\n    > y = base.dists.rayleigh.logpdf( -1.0, 0.5 )\n    -Infinity\n    > y = base.dists.rayleigh.logpdf( 0.0, NaN )\n    NaN\n    > y = base.dists.rayleigh.logpdf( NaN, 2.0 )\n    NaN\n    // Negative scale parameter:\n    > y = base.dists.rayleigh.logpdf( 2.0, -1.0 )\n    NaN\n\n\nbase.dists.rayleigh.logpdf.factory( sigma )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a Rayleigh distribution with scale parameter `sigma`.\n\n    Parameters\n    ----------\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogpdf = base.dists.rayleigh.logpdf.factory( 4.0 );\n    > var y = mylogpdf( 6.0 )\n    ~-2.106\n    > y = mylogpdf( 4.0 )\n    ~-1.886\n\n","base.dists.rayleigh.logpdf.factory":"\nbase.dists.rayleigh.logpdf.factory( sigma )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a Rayleigh distribution with scale parameter `sigma`.\n\n    Parameters\n    ----------\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogpdf = base.dists.rayleigh.logpdf.factory( 4.0 );\n    > var y = mylogpdf( 6.0 )\n    ~-2.106\n    > y = mylogpdf( 4.0 )\n    ~-1.886\n\n","base.dists.rayleigh.mean":"\nbase.dists.rayleigh.mean( σ )\n    Returns the expected value of a Rayleigh distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dists.rayleigh.mean( 11.0 )\n    ~13.786\n    > v = base.dists.rayleigh.mean( 4.5 )\n    ~5.64\n\n","base.dists.rayleigh.median":"\nbase.dists.rayleigh.median( σ )\n    Returns the median of a Rayleigh distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var v = base.dists.rayleigh.median( 11.0 )\n    ~12.952\n    > v = base.dists.rayleigh.median( 4.5 )\n    ~5.298\n\n","base.dists.rayleigh.mgf":"\nbase.dists.rayleigh.mgf( t, sigma )\n    Evaluates the moment-generating function (MGF) for a Rayleigh distribution\n    with scale parameter `sigma` at a value `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `sigma`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    t: number\n        Input value.\n\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dists.rayleigh.mgf( 1.0, 3.0 )\n    ~678.508\n    > y = base.dists.rayleigh.mgf( 1.0, 2.0 )\n    ~38.65\n    > y = base.dists.rayleigh.mgf( -1.0, 4.0 )\n    ~-0.947\n    > y = base.dists.rayleigh.mgf( NaN, 1.0 )\n    NaN\n    > y = base.dists.rayleigh.mgf( 0.0, NaN )\n    NaN\n    > y = base.dists.rayleigh.mgf( 0.5, -1.0 )\n    NaN\n\n\nbase.dists.rayleigh.mgf.factory( sigma )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    Rayleigh distribution with scale parameter `sigma`.\n\n    Parameters\n    ----------\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dists.rayleigh.mgf.factory( 0.5 );\n    > var y = myMGF( 1.0 )\n    ~2.715\n    > y = myMGF( 0.5 )\n    ~1.888\n\n","base.dists.rayleigh.mgf.factory":"\nbase.dists.rayleigh.mgf.factory( sigma )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    Rayleigh distribution with scale parameter `sigma`.\n\n    Parameters\n    ----------\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dists.rayleigh.mgf.factory( 0.5 );\n    > var y = myMGF( 1.0 )\n    ~2.715\n    > y = myMGF( 0.5 )\n    ~1.888\n\n","base.dists.rayleigh.mode":"\nbase.dists.rayleigh.mode( σ )\n    Returns the mode of a Rayleigh distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dists.rayleigh.mode( 11.0 )\n    11.0\n    > v = base.dists.rayleigh.mode( 4.5 )\n    4.5\n\n","base.dists.rayleigh.pdf":"\nbase.dists.rayleigh.pdf( x, sigma )\n    Evaluates the probability density function (PDF) for a Rayleigh\n    distribution with scale parameter `sigma` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative value for `sigma`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dists.rayleigh.pdf( 0.3, 1.0 )\n    ~0.287\n    > y = base.dists.rayleigh.pdf( 2.0, 0.8 )\n    ~0.137\n    > y = base.dists.rayleigh.pdf( -1.0, 0.5 )\n    0.0\n    > y = base.dists.rayleigh.pdf( 0.0, NaN )\n    NaN\n    > y = base.dists.rayleigh.pdf( NaN, 2.0 )\n    NaN\n\n    // Negative scale parameter:\n    > y = base.dists.rayleigh.pdf( 2.0, -1.0 )\n    NaN\n\n    // Degenerate distribution when `sigma = 0.0`:\n    > y = base.dists.rayleigh.pdf( -2.0, 0.0 )\n    0.0\n    > y = base.dists.rayleigh.pdf( 0.0, 0.0 )\n    Infinity\n    > y = base.dists.rayleigh.pdf( 2.0, 0.0 )\n    0.0\n\n\nbase.dists.rayleigh.pdf.factory( sigma )\n    Returns a function for evaluating the probability density function (PDF) of\n    a Rayleigh distribution with scale parameter `sigma`.\n\n    Parameters\n    ----------\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.rayleigh.pdf.factory( 4.0 );\n    > var y = myPDF( 6.0 )\n    ~0.122\n    > y = myPDF( 4.0 )\n    ~0.152\n\n","base.dists.rayleigh.pdf.factory":"\nbase.dists.rayleigh.pdf.factory( sigma )\n    Returns a function for evaluating the probability density function (PDF) of\n    a Rayleigh distribution with scale parameter `sigma`.\n\n    Parameters\n    ----------\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.rayleigh.pdf.factory( 4.0 );\n    > var y = myPDF( 6.0 )\n    ~0.122\n    > y = myPDF( 4.0 )\n    ~0.152\n\n","base.dists.rayleigh.quantile":"\nbase.dists.rayleigh.quantile( p, sigma )\n    Evaluates the quantile function for a Rayleigh distribution with scale\n    parameter `sigma` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a negative probability for `sigma`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.rayleigh.quantile( 0.8, 1.0 )\n    ~1.794\n    > y = base.dists.rayleigh.quantile( 0.5, 4.0 )\n    ~4.71\n\n    > y = base.dists.rayleigh.quantile( 1.1, 1.0 )\n    NaN\n    > y = base.dists.rayleigh.quantile( -0.2, 1.0 )\n    NaN\n\n    > y = base.dists.rayleigh.quantile( NaN, 1.0 )\n    NaN\n    > y = base.dists.rayleigh.quantile( 0.0, NaN )\n    NaN\n\n    // Negative scale parameter:\n    > y = base.dists.rayleigh.quantile( 0.5, -1.0 )\n    NaN\n\n\nbase.dists.rayleigh.quantile.factory( sigma )\n    Returns a function for evaluating the quantile function of a Rayleigh\n    distribution with scale parameter `sigma`.\n\n    Parameters\n    ----------\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.rayleigh.quantile.factory( 0.4 );\n    > var y = myQuantile( 0.4 )\n    ~0.404\n    > y = myQuantile( 1.0 )\n    Infinity\n\n","base.dists.rayleigh.quantile.factory":"\nbase.dists.rayleigh.quantile.factory( sigma )\n    Returns a function for evaluating the quantile function of a Rayleigh\n    distribution with scale parameter `sigma`.\n\n    Parameters\n    ----------\n    sigma: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.rayleigh.quantile.factory( 0.4 );\n    > var y = myQuantile( 0.4 )\n    ~0.404\n    > y = myQuantile( 1.0 )\n    Infinity\n\n","base.dists.rayleigh.Rayleigh":"\nbase.dists.rayleigh.Rayleigh( [σ] )\n    Returns a Rayleigh distribution object.\n\n    Parameters\n    ----------\n    σ: number (optional)\n        Scale parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    rayleigh: Object\n        Distribution instance.\n\n    rayleigh.sigma: number\n        Scale parameter. If set, the value must be greater than `0`.\n\n    rayleigh.entropy: number\n        Read-only property which returns the differential entropy.\n\n    rayleigh.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    rayleigh.mean: number\n        Read-only property which returns the expected value.\n\n    rayleigh.median: number\n        Read-only property which returns the median.\n\n    rayleigh.mode: number\n        Read-only property which returns the mode.\n\n    rayleigh.skewness: number\n        Read-only property which returns the skewness.\n\n    rayleigh.stdev: number\n        Read-only property which returns the standard deviation.\n\n    rayleigh.variance: number\n        Read-only property which returns the variance.\n\n    rayleigh.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    rayleigh.logcdf: Function\n        Evaluates the natural logarithm of the cumulative distribution function\n        (CDF).\n\n    rayleigh.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    rayleigh.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    rayleigh.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    rayleigh.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var rayleigh = base.dists.rayleigh.Rayleigh( 6.0 );\n    > rayleigh.sigma\n    6.0\n    > rayleigh.entropy\n    ~2.734\n    > rayleigh.kurtosis\n    ~0.245\n    > rayleigh.mean\n    ~7.52\n    > rayleigh.median\n    ~7.064\n    > rayleigh.mode\n    6.0\n    > rayleigh.skewness\n    ~0.631\n    > rayleigh.stdev\n    ~3.931\n    > rayleigh.variance\n    ~15.451\n    > rayleigh.cdf( 1.0 )\n    ~0.014\n    > rayleigh.logcdf( 1.0 )\n    ~-4.284\n    > rayleigh.logpdf( 1.5 )\n    ~-3.209\n    > rayleigh.mgf( -0.5 )\n    ~-0.91\n    > rayleigh.pdf( 1.5 )\n    ~0.04\n    > rayleigh.quantile( 0.5 )\n    ~7.064\n\n","base.dists.rayleigh.skewness":"\nbase.dists.rayleigh.skewness( σ )\n    Returns the skewness of a Rayleigh distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dists.rayleigh.skewness( 11.0 )\n    ~0.631\n    > v = base.dists.rayleigh.skewness( 4.5 )\n    ~0.631\n\n","base.dists.rayleigh.stdev":"\nbase.dists.rayleigh.stdev( σ )\n    Returns the standard deviation of a Rayleigh distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dists.rayleigh.stdev( 9.0 )\n    ~5.896\n    > v = base.dists.rayleigh.stdev( 4.5 )\n    ~2.948\n\n","base.dists.rayleigh.variance":"\nbase.dists.rayleigh.variance( σ )\n    Returns the variance of a Rayleigh distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `σ < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dists.rayleigh.variance( 9.0 )\n    ~34.765\n    > v = base.dists.rayleigh.variance( 4.5 )\n    ~8.691\n\n","base.dists.t.cdf":"\nbase.dists.t.cdf( x, v )\n    Evaluates the cumulative distribution function (CDF) for a Student's t\n    distribution with degrees of freedom `v` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a non-positive value for `v`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.t.cdf( 2.0, 0.1 )\n    ~0.611\n    > y = base.dists.t.cdf( 1.0, 2.0 )\n    ~0.789\n    > y = base.dists.t.cdf( -1.0, 4.0 )\n    ~0.187\n    > y = base.dists.t.cdf( NaN, 1.0 )\n    NaN\n    > y = base.dists.t.cdf( 0.0, NaN )\n    NaN\n    > y = base.dists.t.cdf( 2.0, -1.0 )\n    NaN\n\n\nbase.dists.t.cdf.factory( v )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Student's t distribution with degrees of freedom `v`.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.t.cdf.factory( 0.5 );\n    > var y = mycdf( 3.0 )\n    ~0.816\n    > y = mycdf( 1.0 )\n    ~0.699\n\n","base.dists.t.cdf.factory":"\nbase.dists.t.cdf.factory( v )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Student's t distribution with degrees of freedom `v`.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.t.cdf.factory( 0.5 );\n    > var y = mycdf( 3.0 )\n    ~0.816\n    > y = mycdf( 1.0 )\n    ~0.699\n\n","base.dists.t.entropy":"\nbase.dists.t.entropy( v )\n    Returns the differential entropy of a Student's t distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `v < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dists.t.entropy( 11.0 )\n    ~1.512\n    > v = base.dists.t.entropy( 4.5 )\n    ~1.652\n\n","base.dists.t.kurtosis":"\nbase.dists.t.kurtosis( v )\n    Returns the excess kurtosis of a Student's t distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `v <= 2`, the function returns `NaN`.\n\n    If provided `2 < v <= 4`, the function returns positive infinity.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dists.t.kurtosis( 11.0 )\n    ~0.857\n    > v = base.dists.t.kurtosis( 4.5 )\n    12.0\n\n","base.dists.t.mean":"\nbase.dists.t.mean( v )\n    Returns the expected value of a Student's t distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `v <= 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dists.t.mean( 11.0 )\n    0.0\n    > v = base.dists.t.mean( 4.5 )\n    0.0\n\n","base.dists.t.median":"\nbase.dists.t.median( v )\n    Returns the median of a Student's t distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `v < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var v = base.dists.t.median( 11.0 )\n    0.0\n    > v = base.dists.t.median( 4.5 )\n    0.0\n\n","base.dists.t.mode":"\nbase.dists.t.mode( v )\n    Returns the mode of a Student's t distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `v < 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dists.t.mode( 11.0 )\n    0.0\n    > v = base.dists.t.mode( 4.5 )\n    0.0\n\n","base.dists.t.pdf":"\nbase.dists.t.pdf( x, v )\n    Evaluates the probability density function (PDF) for a Student's t\n    distribution with degrees of freedom `v` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a non-positive value for `v`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dists.t.pdf( 0.3, 4.0 )\n    ~0.355\n    > y = base.dists.t.pdf( 2.0, 0.7 )\n    ~0.058\n    > y = base.dists.t.pdf( -1.0, 0.5 )\n    ~0.118\n    > y = base.dists.t.pdf( 0.0, NaN )\n    NaN\n    > y = base.dists.t.pdf( NaN, 2.0 )\n    NaN\n    > y = base.dists.t.pdf( 2.0, -1.0 )\n    NaN\n\n\nbase.dists.t.pdf.factory( v )\n    Returns a function for evaluating the probability density function (PDF)\n    of a Student's t distribution with degrees of freedom `v`.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.t.pdf.factory( 3.0 );\n    > var y = myPDF( 1.0 )\n    ~0.207\n\n","base.dists.t.pdf.factory":"\nbase.dists.t.pdf.factory( v )\n    Returns a function for evaluating the probability density function (PDF)\n    of a Student's t distribution with degrees of freedom `v`.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.t.pdf.factory( 3.0 );\n    > var y = myPDF( 1.0 )\n    ~0.207\n\n","base.dists.t.quantile":"\nbase.dists.t.quantile( p, v )\n    Evaluates the quantile function for a Student's t distribution with degrees\n    of freedom `v` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a non-positive value for `v`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.t.quantile( 0.8, 1.0 )\n    ~1.376\n    > y = base.dists.t.quantile( 0.1, 1.0 )\n    ~-3.078\n    > y = base.dists.t.quantile( 0.5, 0.1 )\n    0.0\n\n    > y = base.dists.t.quantile( -0.2, 0.1 )\n    NaN\n\n    > y = base.dists.t.quantile( NaN, 1.0 )\n    NaN\n    > y = base.dists.t.quantile( 0.0, NaN )\n    NaN\n\n    > y = base.dists.t.quantile( 0.5, -1.0 )\n    NaN\n\n\nbase.dists.t.quantile.factory( v )\n    Returns a function for evaluating the quantile function of a Student's t\n    distribution with degrees of freedom `v`.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.t.quantile.factory( 4.0 );\n    > var y = myQuantile( 0.2 )\n    ~-0.941\n    > y = myQuantile( 0.9 )\n    ~1.533\n\n","base.dists.t.quantile.factory":"\nbase.dists.t.quantile.factory( v )\n    Returns a function for evaluating the quantile function of a Student's t\n    distribution with degrees of freedom `v`.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.t.quantile.factory( 4.0 );\n    > var y = myQuantile( 0.2 )\n    ~-0.941\n    > y = myQuantile( 0.9 )\n    ~1.533\n\n","base.dists.t.skewness":"\nbase.dists.t.skewness( v )\n    Returns the skewness of a Student's t distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `v <= 3`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dists.t.skewness( 11.0 )\n    0.0\n    > v = base.dists.t.skewness( 4.5 )\n    0.0\n\n","base.dists.t.stdev":"\nbase.dists.t.stdev( v )\n    Returns the standard deviation of a Student's t distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `1 < v <= 2`, the function returns positive infinity.\n\n    If provided `v <= 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dists.t.stdev( 9.0 )\n    ~1.134\n    > v = base.dists.t.stdev( 4.5 )\n    ~1.342\n\n","base.dists.t.T":"\nbase.dists.t.T( [v] )\n    Returns a Student's t distribution object.\n\n    Parameters\n    ----------\n    v: number (optional)\n        Degrees of freedom. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    t: Object\n        Distribution instance.\n\n    t.v: number\n        Degrees of freedom. If set, the value must be greater than `0`.\n\n    t.entropy: number\n        Read-only property which returns the differential entropy.\n\n    t.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    t.mean: number\n        Read-only property which returns the expected value.\n\n    t.median: number\n        Read-only property which returns the median.\n\n    t.mode: number\n        Read-only property which returns the mode.\n\n    t.skewness: number\n        Read-only property which returns the skewness.\n\n    t.stdev: number\n        Read-only property which returns the standard deviation.\n\n    t.variance: number\n        Read-only property which returns the variance.\n\n    t.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    t.logcdf: Function\n        Evaluates the natural logarithm of the cumulative distribution function\n        (CDF).\n\n    t.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    t.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    t.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var t = base.dists.t.T( 6.0 );\n    > t.v\n    6.0\n    > t.entropy\n    ~1.592\n    > t.kurtosis\n    3.0\n    > t.mean\n    0.0\n    > t.median\n    0.0\n    > t.mode\n    0.0\n    > t.skewness\n    0.0\n    > t.stdev\n    ~1.225\n    > t.variance\n    1.5\n    > t.cdf( 1.0 )\n    ~0.822\n    > t.logcdf( 1.0 )\n    ~-0.196\n    > t.logpdf( 1.5 )\n    ~-2.075\n    > t.pdf( 1.5 )\n    ~0.126\n    > t.quantile( 0.8 )\n    ~0.906\n\n","base.dists.t.variance":"\nbase.dists.t.variance( v )\n    Returns the variance of a Student's t distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `1 < v <= 2`, the function returns positive infinity.\n\n    If provided `v <= 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dists.t.variance( 9.0 )\n    ~1.286\n    > v = base.dists.t.variance( 4.5 )\n    ~1.8\n\n","base.dists.triangular.cdf":"\nbase.dists.triangular.cdf( x, a, b, c )\n    Evaluates the cumulative distribution function (CDF) for a triangular\n    distribution with minimum support `a`, maximum support `b`, and mode `c` at\n    a value `x`.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    If either `a`, `b`, or `c` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.triangular.cdf( 0.5, -1.0, 1.0, 0.0 )\n    0.875\n    > y = base.dists.triangular.cdf( 0.5, -1.0, 1.0, 0.5 )\n    0.75\n    > y = base.dists.triangular.cdf( -10.0, -20.0, 0.0, -2.0 )\n    ~0.278\n    > y = base.dists.triangular.cdf( -2.0, -1.0, 1.0, 0.0 )\n    0.0\n    > y = base.dists.triangular.cdf( NaN, 0.0, 1.0, 0.5 )\n    NaN\n    > y = base.dists.triangular.cdf( 0.0, NaN, 1.0, 0.5 )\n    NaN\n    > y = base.dists.triangular.cdf( 0.0, 0.0, NaN, 0.5 )\n    NaN\n    > y = base.dists.triangular.cdf( 2.0, 1.0, 0.0, NaN )\n    NaN\n    > y = base.dists.triangular.cdf( 2.0, 1.0, 0.0, 1.5 )\n    NaN\n\n\nbase.dists.triangular.cdf.factory( a, b, c )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a triangular distribution with minimum support `a`, maximum support `b`,\n    and mode `c`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.triangular.cdf.factory( 0.0, 10.0, 2.0 );\n    > var y = mycdf( 0.5 )\n    0.0125\n    > y = mycdf( 8.0 )\n    0.95\n\n\n","base.dists.triangular.cdf.factory":"\nbase.dists.triangular.cdf.factory( a, b, c )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a triangular distribution with minimum support `a`, maximum support `b`,\n    and mode `c`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.triangular.cdf.factory( 0.0, 10.0, 2.0 );\n    > var y = mycdf( 0.5 )\n    0.0125\n    > y = mycdf( 8.0 )\n    0.95\n\n\n","base.dists.triangular.entropy":"\nbase.dists.triangular.entropy( a, b, c )\n    Returns the differential entropy of a triangular distribution (in nats).\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dists.triangular.entropy( 0.0, 1.0, 0.8 )\n    ~-0.193\n    > v = base.dists.triangular.entropy( 4.0, 12.0, 5.0 )\n    ~1.886\n    > v = base.dists.triangular.entropy( 2.0, 8.0, 5.0 )\n    ~1.599\n\n","base.dists.triangular.kurtosis":"\nbase.dists.triangular.kurtosis( a, b, c )\n    Returns the excess kurtosis of a triangular distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dists.triangular.kurtosis( 0.0, 1.0, 0.8 )\n    -0.6\n    > v = base.dists.triangular.kurtosis( 4.0, 12.0, 5.0 )\n    -0.6\n    > v = base.dists.triangular.kurtosis( 2.0, 8.0, 5.0 )\n    -0.6\n\n","base.dists.triangular.logcdf":"\nbase.dists.triangular.logcdf( x, a, b, c )\n    Evaluates the natural logarithm of the cumulative distribution function\n    (CDF) for a triangular distribution with minimum support `a`, maximum\n    support `b`, and mode `c` at a value `x`.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    If either `a`, `b`, or `c` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    out: number\n        Evaluated logCDF.\n\n    Examples\n    --------\n    > var y = base.dists.triangular.logcdf( 0.5, -1.0, 1.0, 0.0 )\n    ~-0.134\n    > y = base.dists.triangular.logcdf( 0.5, -1.0, 1.0, 0.5 )\n    ~-0.288\n    > y = base.dists.triangular.logcdf( -10.0, -20.0, 0.0, -2.0 )\n    ~-1.281\n    > y = base.dists.triangular.logcdf( -2.0, -1.0, 1.0, 0.0 )\n    -Infinity\n    > y = base.dists.triangular.logcdf( NaN, 0.0, 1.0, 0.5 )\n    NaN\n    > y = base.dists.triangular.logcdf( 0.0, NaN, 1.0, 0.5 )\n    NaN\n    > y = base.dists.triangular.logcdf( 0.0, 0.0, NaN, 0.5 )\n    NaN\n    > y = base.dists.triangular.logcdf( 2.0, 1.0, 0.0, NaN )\n    NaN\n    > y = base.dists.triangular.logcdf( 2.0, 1.0, 0.0, 1.5 )\n    NaN\n\n\nbase.dists.triangular.logcdf.factory( a, b, c )\n    Returns a function for evaluating the natural logarithm of the cumulative\n    distribution function (CDF) of a triangular distribution with minimum\n    support `a`, maximum support `b`, and mode `c`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    cdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.triangular.logcdf.factory( 0.0, 10.0, 2.0 );\n    > var y = mylogcdf( 0.5 )\n    ~-4.382\n    > y = mylogcdf( 8.0 )\n    ~-0.051\n\n\n","base.dists.triangular.logcdf.factory":"\nbase.dists.triangular.logcdf.factory( a, b, c )\n    Returns a function for evaluating the natural logarithm of the cumulative\n    distribution function (CDF) of a triangular distribution with minimum\n    support `a`, maximum support `b`, and mode `c`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    cdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.triangular.logcdf.factory( 0.0, 10.0, 2.0 );\n    > var y = mylogcdf( 0.5 )\n    ~-4.382\n    > y = mylogcdf( 8.0 )\n    ~-0.051\n\n\n","base.dists.triangular.logpdf":"\nbase.dists.triangular.logpdf( x, a, b, c )\n    Evaluates the natural logarithm of the probability density function (PDF)\n    for a triangular distribution with minimum support `a`, maximum support `b`,\n    and mode `c` at a value `x`.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    If either `a`, `b`, or `c` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dists.triangular.logpdf( 0.5, -1.0, 1.0, 0.0 )\n    ~-0.693\n    > y = base.dists.triangular.logpdf( 0.5, -1.0, 1.0, 0.5 )\n    0.0\n    > y = base.dists.triangular.logpdf( -10.0, -20.0, 0.0, -2.0 )\n    ~-2.89\n    > y = base.dists.triangular.logpdf( -2.0, -1.0, 1.0, 0.0 )\n    -Infinity\n    > y = base.dists.triangular.logpdf( NaN, 0.0, 1.0, 0.5 )\n    NaN\n    > y = base.dists.triangular.logpdf( 0.0, NaN, 1.0, 0.5 )\n    NaN\n    > y = base.dists.triangular.logpdf( 0.0, 0.0, NaN, 0.5 )\n    NaN\n    > y = base.dists.triangular.logpdf( 2.0, 1.0, 0.0, NaN )\n    NaN\n    > y = base.dists.triangular.logpdf( 2.0, 1.0, 0.0, 1.5 )\n    NaN\n\n\nbase.dists.triangular.logpdf.factory( a, b, c )\n    Returns a function for evaluating the natural logarithm of the  probability\n    density function (PDF) of a triangular distribution with minimum support\n    `a`, maximum support `b`, and mode `c`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogpdf = base.dists.triangular.logpdf.factory( 0.0, 10.0, 5.0 );\n    > var y = mylogpdf( 2.0 )\n    ~-2.526\n    > y = mylogpdf( 12.0 )\n    -Infinity\n\n\n","base.dists.triangular.logpdf.factory":"\nbase.dists.triangular.logpdf.factory( a, b, c )\n    Returns a function for evaluating the natural logarithm of the  probability\n    density function (PDF) of a triangular distribution with minimum support\n    `a`, maximum support `b`, and mode `c`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogpdf = base.dists.triangular.logpdf.factory( 0.0, 10.0, 5.0 );\n    > var y = mylogpdf( 2.0 )\n    ~-2.526\n    > y = mylogpdf( 12.0 )\n    -Infinity\n\n\n","base.dists.triangular.mean":"\nbase.dists.triangular.mean( a, b, c )\n    Returns the expected value of a triangular distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dists.triangular.mean( 0.0, 1.0, 0.8 )\n    ~0.6\n    > v = base.dists.triangular.mean( 4.0, 12.0, 5.0 )\n    7.0\n    > v = base.dists.triangular.mean( 2.0, 8.0, 5.0 )\n    5.0\n\n","base.dists.triangular.median":"\nbase.dists.triangular.median( a, b, c )\n    Returns the median of a triangular distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var v = base.dists.triangular.median( 0.0, 1.0, 0.8 )\n    ~0.632\n    > v = base.dists.triangular.median( 4.0, 12.0, 5.0 )\n    ~6.708\n    > v = base.dists.triangular.median( 2.0, 8.0, 5.0 )\n    5.0\n\n","base.dists.triangular.mgf":"\nbase.dists.triangular.mgf( t, a, b, c )\n    Evaluates the moment-generating function (MGF) for a triangular distribution\n    with minimum support `a`, maximum support `b`, and mode `c` at a value `t`.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    If either `a`, `b`, or `c` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    t: number\n        Input value.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dists.triangular.mgf( 0.5, -1.0, 1.0, 0.0 )\n    ~1.021\n    > y = base.dists.triangular.mgf( 0.5, -1.0, 1.0, 0.5 )\n    ~1.111\n    > y = base.dists.triangular.mgf( -0.3, -20.0, 0.0, -2.0 )\n    ~24.334\n    > y = base.dists.triangular.mgf( -2.0, -1.0, 1.0, 0.0 )\n    ~1.381\n    > y = base.dists.triangular.mgf( NaN, 0.0, 1.0, 0.5 )\n    NaN\n    > y = base.dists.triangular.mgf( 0.0, NaN, 1.0, 0.5 )\n    NaN\n    > y = base.dists.triangular.mgf( 0.0, 0.0, NaN, 0.5 )\n    NaN\n    > y = base.dists.triangular.mgf( 0.5, 1.0, 0.0, NaN )\n    NaN\n    > y = base.dists.triangular.mgf( 0.5, 1.0, 0.0, 1.5 )\n    NaN\n\n\nbase.dists.triangular.mgf.factory( a, b, c )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    triangular distribution with minimum support `a`, maximum support `b`, and\n    mode `c`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var mymgf = base.dists.triangular.mgf.factory( 0.0, 2.0, 1.0 );\n    > var y = mymgf( -1.0 )\n    ~0.3996\n    > y = mymgf( 2.0 )\n    ~10.205\n\n\n","base.dists.triangular.mgf.factory":"\nbase.dists.triangular.mgf.factory( a, b, c )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    triangular distribution with minimum support `a`, maximum support `b`, and\n    mode `c`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var mymgf = base.dists.triangular.mgf.factory( 0.0, 2.0, 1.0 );\n    > var y = mymgf( -1.0 )\n    ~0.3996\n    > y = mymgf( 2.0 )\n    ~10.205\n\n\n","base.dists.triangular.mode":"\nbase.dists.triangular.mode( a, b, c )\n    Returns the mode of a triangular distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dists.triangular.mode( 0.0, 1.0, 0.8 )\n    0.8\n    > v = base.dists.triangular.mode( 4.0, 12.0, 5.0 )\n    5.0\n    > v = base.dists.triangular.mode( 2.0, 8.0, 5.0 )\n    5.0\n\n","base.dists.triangular.pdf":"\nbase.dists.triangular.pdf( x, a, b, c )\n    Evaluates the probability density function (PDF) for a triangular\n    distribution with minimum support `a`, maximum support `b`, and mode `c` at\n    a value `x`.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    If either `a`, `b`, or `c` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dists.triangular.pdf( 0.5, -1.0, 1.0, 0.0 )\n    0.5\n    > y = base.dists.triangular.pdf( 0.5, -1.0, 1.0, 0.5 )\n    1.0\n    > y = base.dists.triangular.pdf( -10.0, -20.0, 0.0, -2.0 )\n    ~0.056\n    > y = base.dists.triangular.pdf( -2.0, -1.0, 1.0, 0.0 )\n    0.0\n    > y = base.dists.triangular.pdf( NaN, 0.0, 1.0, 0.5 )\n    NaN\n    > y = base.dists.triangular.pdf( 0.0, NaN, 1.0, 0.5 )\n    NaN\n    > y = base.dists.triangular.pdf( 0.0, 0.0, NaN, 0.5 )\n    NaN\n    > y = base.dists.triangular.pdf( 2.0, 1.0, 0.0, NaN )\n    NaN\n    > y = base.dists.triangular.pdf( 2.0, 1.0, 0.0, 1.5 )\n    NaN\n\n\nbase.dists.triangular.pdf.factory( a, b, c )\n    Returns a function for evaluating the probability density function (PDF) of\n    a triangular distribution with minimum support `a`, maximum support `b`, and\n    mode `c`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var mypdf = base.dists.triangular.pdf.factory( 0.0, 10.0, 5.0 );\n    > var y = mypdf( 2.0 )\n    0.08\n    > y = mypdf( 12.0 )\n    0.0\n\n\n","base.dists.triangular.pdf.factory":"\nbase.dists.triangular.pdf.factory( a, b, c )\n    Returns a function for evaluating the probability density function (PDF) of\n    a triangular distribution with minimum support `a`, maximum support `b`, and\n    mode `c`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var mypdf = base.dists.triangular.pdf.factory( 0.0, 10.0, 5.0 );\n    > var y = mypdf( 2.0 )\n    0.08\n    > y = mypdf( 12.0 )\n    0.0\n\n\n","base.dists.triangular.quantile":"\nbase.dists.triangular.quantile( p, a, b, c )\n    Evaluates the quantile function for a triangular distribution with minimum\n    support `a`, maximum support `b`, and mode `c` at a value `x`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    If either `a`, `b`, or `c` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.triangular.quantile( 0.9, -1.0, 1.0, 0.0 )\n    ~0.553\n    > y = base.dists.triangular.quantile( 0.1, -1.0, 1.0, 0.5 )\n    ~-0.452\n    > y = base.dists.triangular.quantile( 0.1, -20.0, 0.0, -2.0 )\n    -14.0\n    > y = base.dists.triangular.quantile( 0.8, 0.0, 20.0, 0.0 )\n    ~11.056\n\n    > y = base.dists.triangular.quantile( 1.1, -1.0, 1.0, 0.0 )\n    NaN\n    > y = base.dists.triangular.quantile( -0.1, -1.0, 1.0, 0.0 )\n    NaN\n\n    > y = base.dists.triangular.quantile( NaN, 0.0, 1.0, 0.5 )\n    NaN\n    > y = base.dists.triangular.quantile( 0.3, NaN, 1.0, 0.5 )\n    NaN\n    > y = base.dists.triangular.quantile( 0.3, 0.0, NaN, 0.5 )\n    NaN\n    > y = base.dists.triangular.quantile( 0.3, 1.0, 0.0, NaN )\n    NaN\n\n    > y = base.dists.triangular.quantile( 0.3, 1.0, 0.0, 1.5 )\n    NaN\n\n\nbase.dists.triangular.quantile.factory( a, b, c )\n    Returns a function for evaluating the quantile function of a triangular\n    distribution with minimum support `a`, maximum support `b`, and mode `c`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myquantile = base.dists.triangular.quantile.factory( 2.0, 4.0, 2.5 );\n    > var y = myquantile( 0.4 )\n    ~2.658\n    > y = myquantile( 0.8 )\n    ~3.225\n\n\n","base.dists.triangular.quantile.factory":"\nbase.dists.triangular.quantile.factory( a, b, c )\n    Returns a function for evaluating the quantile function of a triangular\n    distribution with minimum support `a`, maximum support `b`, and mode `c`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myquantile = base.dists.triangular.quantile.factory( 2.0, 4.0, 2.5 );\n    > var y = myquantile( 0.4 )\n    ~2.658\n    > y = myquantile( 0.8 )\n    ~3.225\n\n\n","base.dists.triangular.skewness":"\nbase.dists.triangular.skewness( a, b, c )\n    Returns the skewness of a triangular distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dists.triangular.skewness( 0.0, 1.0, 0.8 )\n    ~-0.476\n    > v = base.dists.triangular.skewness( 4.0, 12.0, 5.0 )\n    ~0.532\n    > v = base.dists.triangular.skewness( 2.0, 8.0, 5.0 )\n    0.0\n\n","base.dists.triangular.stdev":"\nbase.dists.triangular.stdev( a, b, c )\n    Returns the standard deviation of a triangular distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dists.triangular.stdev( 0.0, 1.0, 0.8 )\n    ~0.216\n    > v = base.dists.triangular.stdev( 4.0, 12.0, 5.0 )\n    ~1.78\n    > v = base.dists.triangular.stdev( 2.0, 8.0, 5.0 )\n    ~1.225\n\n","base.dists.triangular.Triangular":"\nbase.dists.triangular.Triangular( [a, b, c] )\n    Returns a triangular distribution object.\n\n    Parameters\n    ----------\n    a: number (optional)\n        Minimum support. Must be smaller than `b` and `c`. Default: `0.0`.\n\n    b: number (optional)\n        Maximum support. Must be greater than `a` and `c`. Default: `1.0`.\n\n    c: number (optional)\n        Mode. Must be greater than `a` and smaller than `b`. Default: `0.5`.\n\n    Returns\n    -------\n    triangular: Object\n        Distribution instance.\n\n    triangular.a: number\n        Minimum support. If set, the value must be smaller or equal to `b` and\n        `c`.\n\n    triangular.b: number\n        Maximum support. If set, the value must be greater than or equal to `a`\n        and `c`.\n\n    triangular.c: number\n        Mode. If set, the value must be greater than or equal to `a` and smaller\n        than or equal to `b`.\n\n    triangular.entropy: number\n        Read-only property which returns the differential entropy.\n\n    triangular.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    triangular.mean: number\n        Read-only property which returns the expected value.\n\n    triangular.median: number\n        Read-only property which returns the median.\n\n    triangular.mode: number\n        Read-only property which returns the mode.\n\n    triangular.skewness: number\n        Read-only property which returns the skewness.\n\n    triangular.stdev: number\n        Read-only property which returns the standard deviation.\n\n    triangular.variance: number\n        Read-only property which returns the variance.\n\n    triangular.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    triangular.logcdf: Function\n        Evaluates the natural logarithm of the cumulative distribution function\n        (CDF).\n\n    triangular.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    triangular.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    triangular.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    triangular.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var triangular = base.dists.triangular.Triangular( 0.0, 1.0, 0.5 );\n    > triangular.a\n    0.0\n    > triangular.b\n    1.0\n    > triangular.c\n    0.5\n    > triangular.entropy\n    ~-0.193\n    > triangular.kurtosis\n    -0.6\n    > triangular.mean\n    0.5\n    > triangular.median\n    0.5\n    > triangular.mode\n    0.5\n    > triangular.skewness\n    0.0\n    > triangular.stdev\n    ~0.204\n    > triangular.variance\n    ~0.042\n    > triangular.cdf( 0.8 )\n    0.92\n    > triangular.logcdf( 0.8 )\n    ~-0.083\n    > triangular.logpdf( 0.8 )\n    ~-0.223\n    > triangular.mgf( 0.8 )\n    ~1.512\n    > triangular.pdf( 0.8 )\n    ~0.8\n    > triangular.quantile( 0.8 )\n    ~0.684\n\n","base.dists.triangular.variance":"\nbase.dists.triangular.variance( a, b, c )\n    Returns the variance of a triangular distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dists.triangular.variance( 0.0, 1.0, 0.8 )\n    ~0.047\n    > v = base.dists.triangular.variance( 4.0, 12.0, 5.0 )\n    ~3.167\n    > v = base.dists.triangular.variance( 2.0, 8.0, 5.0 )\n    ~1.5\n\n","base.dists.uniform.cdf":"\nbase.dists.uniform.cdf( x, a, b )\n    Evaluates the cumulative distribution function (CDF) for a uniform\n    distribution with minimum support `a` and maximum support `b` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.uniform.cdf( 9.0, 0.0, 10.0 )\n    0.9\n    > y = base.dists.uniform.cdf( 0.5, 0.0, 2.0 )\n    0.25\n    > y = base.dists.uniform.cdf( PINF, 2.0, 4.0 )\n    1.0\n    > y = base.dists.uniform.cdf( NINF, 2.0, 4.0 )\n    0.0\n    > y = base.dists.uniform.cdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.uniform.cdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.uniform.cdf( 0.0, 0.0, NaN )\n    NaN\n    > y = base.dists.uniform.cdf( 2.0, 1.0, 0.0 )\n    NaN\n\n\nbase.dists.uniform.cdf.factory( a, b )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a uniform distribution with minimum support `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.uniform.cdf.factory( 0.0, 10.0 );\n    > var y = mycdf( 0.5 )\n    0.05\n    > y = mycdf( 8.0 )\n    0.8\n\n","base.dists.uniform.cdf.factory":"\nbase.dists.uniform.cdf.factory( a, b )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a uniform distribution with minimum support `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mycdf = base.dists.uniform.cdf.factory( 0.0, 10.0 );\n    > var y = mycdf( 0.5 )\n    0.05\n    > y = mycdf( 8.0 )\n    0.8\n\n","base.dists.uniform.entropy":"\nbase.dists.uniform.entropy( a, b )\n    Returns the differential entropy of a uniform distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Differential entropy.\n\n    Examples\n    --------\n    > var v = base.dists.uniform.entropy( 0.0, 1.0 )\n    0.0\n    > v = base.dists.uniform.entropy( 4.0, 12.0 )\n    ~2.079\n    > v = base.dists.uniform.entropy( 2.0, 8.0 )\n    ~1.792\n\n","base.dists.uniform.kurtosis":"\nbase.dists.uniform.kurtosis( a, b )\n    Returns the excess kurtosis of a uniform distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dists.uniform.kurtosis( 0.0, 1.0 )\n    -1.2\n    > v = base.dists.uniform.kurtosis( 4.0, 12.0 )\n    -1.2\n    > v = base.dists.uniform.kurtosis( 2.0, 8.0 )\n    -1.2\n\n","base.dists.uniform.logcdf":"\nbase.dists.uniform.logcdf( x, a, b )\n    Evaluates the logarithm of the cumulative distribution function (CDF) for a\n    uniform distribution with minimum support `a` and maximum support `b` at a\n    value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Evaluated logCDF.\n\n    Examples\n    --------\n    > var y = base.dists.uniform.logcdf( 9.0, 0.0, 10.0 )\n    ~-0.105\n    > y = base.dists.uniform.logcdf( 0.5, 0.0, 2.0 )\n    ~-1.386\n    > y = base.dists.uniform.logcdf( PINF, 2.0, 4.0 )\n    0.0\n    > y = base.dists.uniform.logcdf( NINF, 2.0, 4.0 )\n    -Infinity\n    > y = base.dists.uniform.logcdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.uniform.logcdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.uniform.logcdf( 0.0, 0.0, NaN )\n    NaN\n    > y = base.dists.uniform.logcdf( 2.0, 1.0, 0.0 )\n    NaN\n\n\nbase.dists.uniform.logcdf.factory( a, b )\n    Returns a function for evaluating the logarithm of the cumulative\n    distribution function (CDF) of a uniform distribution with minimum support\n    `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.uniform.logcdf.factory( 0.0, 10.0 );\n    > var y = mylogcdf( 0.5 )\n    ~-2.996\n    > y = mylogcdf( 8.0 )\n    ~-0.223\n\n","base.dists.uniform.logcdf.factory":"\nbase.dists.uniform.logcdf.factory( a, b )\n    Returns a function for evaluating the logarithm of the cumulative\n    distribution function (CDF) of a uniform distribution with minimum support\n    `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.uniform.logcdf.factory( 0.0, 10.0 );\n    > var y = mylogcdf( 0.5 )\n    ~-2.996\n    > y = mylogcdf( 8.0 )\n    ~-0.223\n\n","base.dists.uniform.logpdf":"\nbase.dists.uniform.logpdf( x, a, b )\n    Evaluates the logarithm of the probability density function (PDF) for a\n    uniform distribution with minimum support `a` and maximum support `b` at a\n    value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dists.uniform.logpdf( 2.0, 0.0, 4.0 )\n    ~-1.386\n    > y = base.dists.uniform.logpdf( 5.0, 0.0, 4.0 )\n    -infinity\n    > y = base.dists.uniform.logpdf( 0.25, 0.0, 1.0 )\n    0.0\n    > y = base.dists.uniform.logpdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.uniform.logpdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.uniform.logpdf( 0.0, 0.0, NaN )\n    NaN\n    > y = base.dists.uniform.logpdf( 2.0, 3.0, 1.0 )\n    NaN\n\n\nbase.dists.uniform.logpdf.factory( a, b )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a uniform distribution with minimum support `a` and\n    maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogPDF = base.dists.uniform.logpdf.factory( 6.0, 7.0 );\n    > var y = mylogPDF( 7.0 )\n    0.0\n    > y = mylogPDF( 5.0 )\n    -infinity\n\n","base.dists.uniform.logpdf.factory":"\nbase.dists.uniform.logpdf.factory( a, b )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a uniform distribution with minimum support `a` and\n    maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylogPDF = base.dists.uniform.logpdf.factory( 6.0, 7.0 );\n    > var y = mylogPDF( 7.0 )\n    0.0\n    > y = mylogPDF( 5.0 )\n    -infinity\n\n","base.dists.uniform.mean":"\nbase.dists.uniform.mean( a, b )\n    Returns the expected value of a uniform distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dists.uniform.mean( 0.0, 1.0 )\n    0.5\n    > v = base.dists.uniform.mean( 4.0, 12.0 )\n    8.0\n    > v = base.dists.uniform.mean( 2.0, 8.0 )\n    5.0\n\n","base.dists.uniform.median":"\nbase.dists.uniform.median( a, b )\n    Returns the median of a uniform distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var v = base.dists.uniform.median( 0.0, 1.0 )\n    0.5\n    > v = base.dists.uniform.median( 4.0, 12.0 )\n    8.0\n    > v = base.dists.uniform.median( 2.0, 8.0 )\n    5.0\n\n","base.dists.uniform.mgf":"\nbase.dists.uniform.mgf( t, a, b )\n    Evaluates the moment-generating function (MGF) for a uniform\n    distribution with minimum support `a` and maximum support `b` at a value\n    `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    t: number\n        Input value.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dists.uniform.mgf( 2.0, 0.0, 4.0 )\n    ~372.495\n    > y = base.dists.uniform.mgf( -0.2, 0.0, 4.0 )\n    ~0.688\n    > y = base.dists.uniform.mgf( 2.0, 0.0, 1.0 )\n    ~3.195\n    > y = base.dists.uniform.mgf( 0.5, 3.0, 2.0 )\n    NaN\n    > y = base.dists.uniform.mgf( 0.5, 3.0, 3.0 )\n    NaN\n    > y = base.dists.uniform.mgf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.uniform.mgf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.uniform.mgf( 0.0, 0.0, NaN )\n    NaN\n\n\nbase.dists.uniform.mgf.factory( a, b )\n    Returns a function for evaluating the moment-generating function (MGF)\n    of a uniform distribution with minimum support `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var mymgf = base.dists.uniform.mgf.factory( 6.0, 7.0 );\n    > var y = mymgf( 0.1 )\n    ~1.916\n    > y = mymgf( 1.1 )\n    ~1339.321\n\n","base.dists.uniform.mgf.factory":"\nbase.dists.uniform.mgf.factory( a, b )\n    Returns a function for evaluating the moment-generating function (MGF)\n    of a uniform distribution with minimum support `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var mymgf = base.dists.uniform.mgf.factory( 6.0, 7.0 );\n    > var y = mymgf( 0.1 )\n    ~1.916\n    > y = mymgf( 1.1 )\n    ~1339.321\n\n","base.dists.uniform.pdf":"\nbase.dists.uniform.pdf( x, a, b )\n    Evaluates the probability density function (PDF) for a uniform distribution\n    with minimum support `a` and maximum support `b` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dists.uniform.pdf( 2.0, 0.0, 4.0 )\n    0.25\n    > y = base.dists.uniform.pdf( 5.0, 0.0, 4.0 )\n    0.0\n    > y = base.dists.uniform.pdf( 0.25, 0.0, 1.0 )\n    1.0\n    > y = base.dists.uniform.pdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.uniform.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.uniform.pdf( 0.0, 0.0, NaN )\n    NaN\n    > y = base.dists.uniform.pdf( 2.0, 3.0, 1.0 )\n    NaN\n\n\nbase.dists.uniform.pdf.factory( a, b )\n    Returns a function for evaluating the probability density function (PDF) of\n    a uniform distribution with minimum support `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.uniform.pdf.factory( 6.0, 7.0 );\n    > var y = myPDF( 7.0 )\n    1.0\n    > y = myPDF( 5.0 )\n    0.0\n\n","base.dists.uniform.pdf.factory":"\nbase.dists.uniform.pdf.factory( a, b )\n    Returns a function for evaluating the probability density function (PDF) of\n    a uniform distribution with minimum support `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.uniform.pdf.factory( 6.0, 7.0 );\n    > var y = myPDF( 7.0 )\n    1.0\n    > y = myPDF( 5.0 )\n    0.0\n\n","base.dists.uniform.quantile":"\nbase.dists.uniform.quantile( p, a, b )\n    Evaluates the quantile function for a uniform distribution with minimum\n    support `a` and maximum support `b` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.uniform.quantile( 0.8, 0.0, 1.0 )\n    0.8\n    > y = base.dists.uniform.quantile( 0.5, 0.0, 10.0 )\n    5.0\n\n    > y = base.dists.uniform.quantile( 1.1, 0.0, 1.0 )\n    NaN\n    > y = base.dists.uniform.quantile( -0.2, 0.0, 1.0 )\n    NaN\n\n    > y = base.dists.uniform.quantile( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.uniform.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.uniform.quantile( 0.0, 0.0, NaN )\n    NaN\n\n    > y = base.dists.uniform.quantile( 0.5, 2.0, 1.0 )\n    NaN\n\n\nbase.dists.uniform.quantile.factory( a, b )\n    Returns a function for evaluating the quantile function of a uniform\n    distribution with minimum support `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.uniform.quantile.factory( 0.0, 4.0 );\n    > var y = myQuantile( 0.8 )\n    3.2\n\n","base.dists.uniform.quantile.factory":"\nbase.dists.uniform.quantile.factory( a, b )\n    Returns a function for evaluating the quantile function of a uniform\n    distribution with minimum support `a` and maximum support `b`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.uniform.quantile.factory( 0.0, 4.0 );\n    > var y = myQuantile( 0.8 )\n    3.2\n\n","base.dists.uniform.skewness":"\nbase.dists.uniform.skewness( a, b )\n    Returns the skewness of a uniform distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dists.uniform.skewness( 0.0, 1.0 )\n    0.0\n    > v = base.dists.uniform.skewness( 4.0, 12.0 )\n    0.0\n    > v = base.dists.uniform.skewness( 2.0, 8.0 )\n    0.0\n\n","base.dists.uniform.stdev":"\nbase.dists.uniform.stdev( a, b )\n    Returns the standard deviation of a uniform distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dists.uniform.stdev( 0.0, 1.0 )\n    ~0.289\n    > v = base.dists.uniform.stdev( 4.0, 12.0 )\n    ~2.309\n    > v = base.dists.uniform.stdev( 2.0, 8.0 )\n    ~1.732\n\n","base.dists.uniform.Uniform":"\nbase.dists.uniform.Uniform( [a, b] )\n    Returns a uniform distribution object.\n\n    Parameters\n    ----------\n    a: number (optional)\n        Minimum support. Must be smaller than `b`. Default: `0.0`.\n\n    b: number (optional)\n        Maximum support. Must be greater than `a`. Default: `1.0`.\n\n    Returns\n    -------\n    uniform: Object\n        Distribution instance.\n\n    uniform.a: number\n        Minimum support. If set, the value must be smaller than `b`.\n\n    uniform.b: number\n        Maximum support. If set, the value must be greater than `a`.\n\n    uniform.entropy: number\n        Read-only property which returns the differential entropy.\n\n    uniform.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    uniform.mean: number\n        Read-only property which returns the expected value.\n\n    uniform.median: number\n        Read-only property which returns the median.\n\n    uniform.skewness: number\n        Read-only property which returns the skewness.\n\n    uniform.stdev: number\n        Read-only property which returns the standard deviation.\n\n    uniform.variance: number\n        Read-only property which returns the variance.\n\n    uniform.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    uniform.logcdf: Function\n        Evaluates the natural logarithm of the cumulative distribution function\n        (CDF).\n\n    uniform.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    uniform.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    uniform.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    uniform.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var uniform = base.dists.uniform.Uniform( 0.0, 1.0 );\n    > uniform.a\n    0.0\n    > uniform.b\n    1.0\n    > uniform.entropy\n    0.0\n    > uniform.kurtosis\n    -1.2\n    > uniform.mean\n    0.5\n    > uniform.median\n    0.5\n    > uniform.skewness\n    0.0\n    > uniform.stdev\n    ~0.289\n    > uniform.variance\n    ~0.083\n    > uniform.cdf( 0.8 )\n    0.8\n    > uniform.logcdf( 0.5 )\n    ~-0.693\n    > uniform.logpdf( 1.0 )\n    ~-0.0\n    > uniform.mgf( 0.8 )\n    ~1.532\n    > uniform.pdf( 0.8 )\n    1.0\n    > uniform.quantile( 0.8 )\n    0.8\n\n","base.dists.uniform.variance":"\nbase.dists.uniform.variance( a, b )\n    Returns the variance of a uniform distribution.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `a >= b`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dists.uniform.variance( 0.0, 1.0 )\n    ~0.083\n    > v = base.dists.uniform.variance( 4.0, 12.0 )\n    ~5.333\n    > v = base.dists.uniform.variance( 2.0, 8.0 )\n    3.0\n\n","base.dists.weibull.cdf":"\nbase.dists.weibull.cdf( x, k, λ )\n    Evaluates the cumulative distribution function (CDF) for a Weibull\n    distribution with shape parameter `k` and scale parameter `λ` at a value\n    `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a non-positive value for `λ` or `k`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated CDF.\n\n    Examples\n    --------\n    > var y = base.dists.weibull.cdf( 2.0, 1.0, 1.0 )\n    ~0.865\n    > y = base.dists.weibull.cdf( -1.0, 2.0, 2.0 )\n    0.0\n    > y = base.dists.weibull.cdf( PINF, 4.0, 2.0 )\n    1.0\n    > y = base.dists.weibull.cdf( NINF, 4.0, 2.0 )\n    0.0\n    > y = base.dists.weibull.cdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.weibull.cdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.weibull.cdf( 0.0, 0.0, NaN )\n    NaN\n    > y = base.dists.weibull.cdf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dists.weibull.cdf.factory( k, λ )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Weibull distribution with shape parameter `k` and scale parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.weibull.cdf.factory( 2.0, 10.0 );\n    > var y = myCDF( 12.0 )\n    ~0.763\n\n","base.dists.weibull.cdf.factory":"\nbase.dists.weibull.cdf.factory( k, λ )\n    Returns a function for evaluating the cumulative distribution function (CDF)\n    of a Weibull distribution with shape parameter `k` and scale parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    cdf: Function\n        Cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var myCDF = base.dists.weibull.cdf.factory( 2.0, 10.0 );\n    > var y = myCDF( 12.0 )\n    ~0.763\n\n","base.dists.weibull.entropy":"\nbase.dists.weibull.entropy( k, λ )\n    Returns the differential entropy of a Weibull distribution (in nats).\n\n    If `k <= 0` or `λ <= 0`, the function returns `NaN`.\n\n    If `k` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Entropy.\n\n    Examples\n    --------\n    > var v = base.dists.weibull.entropy( 1.0, 1.0 )\n    1.0\n    > v = base.dists.weibull.entropy( 4.0, 12.0 )\n    ~2.532\n    > v = base.dists.weibull.entropy( 8.0, 2.0 )\n    ~0.119\n\n","base.dists.weibull.kurtosis":"\nbase.dists.weibull.kurtosis( k, λ )\n    Returns the excess kurtosis of a Weibull distribution.\n\n    If `k <= 0` or `λ <= 0`, the function returns `NaN`.\n\n    If `k` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Excess kurtosis.\n\n    Examples\n    --------\n    > var v = base.dists.weibull.kurtosis( 1.0, 1.0 )\n    6.0\n    > v = base.dists.weibull.kurtosis( 4.0, 12.0 )\n    ~-0.252\n    > v = base.dists.weibull.kurtosis( 8.0, 2.0 )\n    ~0.328\n\n","base.dists.weibull.logcdf":"\nbase.dists.weibull.logcdf( x, k, λ )\n    Evaluates the logarithm of the cumulative distribution function (CDF) for a\n    Weibull distribution with shape parameter `k` and scale parameter `λ` at a\n    value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a nonpositive value for `λ` or `k`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logCDF.\n\n    Examples\n    --------\n    > var y = base.dists.weibull.logcdf( 2.0, 1.0, 1.0 )\n    ~-0.145\n    > y = base.dists.weibull.logcdf( -1.0, 2.0, 2.0 )\n    -Infinity\n    > y = base.dists.weibull.logcdf( PINF, 4.0, 2.0 )\n    0.0\n    > y = base.dists.weibull.logcdf( NINF, 4.0, 2.0 )\n    -Infinity\n    > y = base.dists.weibull.logcdf( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.weibull.logcdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.weibull.logcdf( 0.0, 0.0, NaN )\n    NaN\n    > y = base.dists.weibull.logcdf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dists.weibull.logcdf.factory( k, λ)\n    Returns a function for evaluating the logarithm of the cumulative\n    distribution function (CDF) of a Weibull distribution with scale parameter\n    `λ` and shape parameter `k`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.weibull.logcdf.factory( 2.0, 10.0 );\n    > var y = mylogcdf( 12.0 )\n    ~-0.27\n\n","base.dists.weibull.logcdf.factory":"\nbase.dists.weibull.logcdf.factory( k, λ)\n    Returns a function for evaluating the logarithm of the cumulative\n    distribution function (CDF) of a Weibull distribution with scale parameter\n    `λ` and shape parameter `k`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    logcdf: Function\n        Logarithm of cumulative distribution function (CDF).\n\n    Examples\n    --------\n    > var mylogcdf = base.dists.weibull.logcdf.factory( 2.0, 10.0 );\n    > var y = mylogcdf( 12.0 )\n    ~-0.27\n\n","base.dists.weibull.logpdf":"\nbase.dists.weibull.logpdf( x, k, λ )\n    Evaluates the logarithm of the probability density function (PDF) for a\n    Weibull distribution with shape parameter `k` and scale parameter `λ` at a\n    value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a nonpositive value for `λ` or `k`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated logPDF.\n\n    Examples\n    --------\n    > var y = base.dists.weibull.logpdf( 2.0, 1.0, 0.5 )\n    ~-3.307\n    > y = base.dists.weibull.logpdf( 0.1, 1.0, 1.0 )\n    ~-0.1\n    > y = base.dists.weibull.logpdf( -1.0, 4.0, 2.0 )\n    -Infinity\n    > y = base.dists.weibull.logpdf( NaN, 0.6, 1.0 )\n    NaN\n    > y = base.dists.weibull.logpdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.weibull.logpdf( 0.0, 0.0, NaN )\n    NaN\n    > y = base.dists.weibull.logpdf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dists.weibull.logpdf.factory( k, λ )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a Weibull distribution with shape parameter `k` and scale\n    parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylofpdf = base.dists.weibull.logpdf.factory( 7.0, 6.0 );\n    > y = mylofpdf( 7.0 )\n    ~-1.863\n\n","base.dists.weibull.logpdf.factory":"\nbase.dists.weibull.logpdf.factory( k, λ )\n    Returns a function for evaluating the logarithm of the probability density\n    function (PDF) of a Weibull distribution with shape parameter `k` and scale\n    parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    logpdf: Function\n        Logarithm of probability density function (PDF).\n\n    Examples\n    --------\n    > var mylofpdf = base.dists.weibull.logpdf.factory( 7.0, 6.0 );\n    > y = mylofpdf( 7.0 )\n    ~-1.863\n\n","base.dists.weibull.mean":"\nbase.dists.weibull.mean( k, λ )\n    Returns the expected value of a Weibull distribution.\n\n    If `k <= 0` or `λ <= 0`, the function returns `NaN`.\n\n    If `k` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Expected value.\n\n    Examples\n    --------\n    > var v = base.dists.weibull.mean( 1.0, 1.0 )\n    1.0\n    > v = base.dists.weibull.mean( 4.0, 12.0 )\n    ~10.877\n    > v = base.dists.weibull.mean( 8.0, 2.0 )\n    ~1.883\n\n","base.dists.weibull.median":"\nbase.dists.weibull.median( k, λ )\n    Returns the median of a Weibull distribution.\n\n    If `k <= 0` or `λ <= 0`, the function returns `NaN`.\n\n    If `k` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Median.\n\n    Examples\n    --------\n    > var v = base.dists.weibull.median( 1.0, 1.0 )\n    ~0.693\n    > v = base.dists.weibull.median( 4.0, 12.0 )\n    ~10.949\n    > v = base.dists.weibull.median( 8.0, 2.0 )\n    ~1.91\n\n","base.dists.weibull.mgf":"\nbase.dists.weibull.mgf( x, k, λ )\n    Evaluates the moment-generating function (MGF) for a Weibull distribution\n    with shape parameter `k` and scale parameter `λ` at a value `t`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a non-positive value for `λ` or `k`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated MGF.\n\n    Examples\n    --------\n    > var y = base.dists.weibull.mgf( 1.0, 1.0, 0.5 )\n    ~2.0\n    > y = base.dists.weibull.mgf( -1.0, 4.0, 4.0 )\n    ~0.019\n\n    > y = base.dists.weibull.mgf( NaN, 1.0, 1.0 )\n    NaN\n    > y = base.dists.weibull.mgf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.weibull.mgf( 0.0, 1.0, NaN )\n    NaN\n\n    > y = base.dists.weibull.mgf( 0.2, -1.0, 0.5 )\n    NaN\n    > y = base.dists.weibull.mgf( 0.2, 0.0, 0.5 )\n    NaN\n\n    > y = base.dists.weibull.mgf( 0.2, 0.5, -1.0 )\n    NaN\n    > y = base.dists.weibull.mgf( 0.2, 0.5, 0.0 )\n    NaN\n\n\nbase.dists.weibull.mgf.factory( k, λ )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    Weibull distribution with shape parameter `k` and scale parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dists.weibull.mgf.factory( 8.0, 10.0 );\n    > var y = myMGF( 0.8 )\n    ~3150.149\n    > y = myMGF( 0.08 )\n    ~2.137\n\n","base.dists.weibull.mgf.factory":"\nbase.dists.weibull.mgf.factory( k, λ )\n    Returns a function for evaluating the moment-generating function (MGF) of a\n    Weibull distribution with shape parameter `k` and scale parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    mgf: Function\n        Moment-generating function (MGF).\n\n    Examples\n    --------\n    > var myMGF = base.dists.weibull.mgf.factory( 8.0, 10.0 );\n    > var y = myMGF( 0.8 )\n    ~3150.149\n    > y = myMGF( 0.08 )\n    ~2.137\n\n","base.dists.weibull.mode":"\nbase.dists.weibull.mode( k, λ )\n    Returns the mode of a Weibull distribution.\n\n    If `0 < k <= 1`, the function returns `0.0`.\n\n    If `k <= 0` or `λ <= 0`, the function returns `NaN`.\n\n    If `k` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Mode.\n\n    Examples\n    --------\n    > var v = base.dists.weibull.mode( 1.0, 1.0 )\n    0.0\n    > v = base.dists.weibull.mode( 4.0, 12.0 )\n    ~11.167\n    > v = base.dists.weibull.mode( 8.0, 2.0 )\n    ~1.967\n\n","base.dists.weibull.pdf":"\nbase.dists.weibull.pdf( x, k, λ )\n    Evaluates the probability density function (PDF) for a Weibull distribution\n    with shape parameter `k` and scale parameter `λ` at a value `x`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a nonpositive value for `λ` or `k`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated PDF.\n\n    Examples\n    --------\n    > var y = base.dists.weibull.pdf( 2.0, 1.0, 0.5 )\n    ~0.037\n    > y = base.dists.weibull.pdf( 0.1, 1.0, 1.0 )\n    ~0.905\n    > y = base.dists.weibull.pdf( -1.0, 4.0, 2.0 )\n    0.0\n    > y = base.dists.weibull.pdf( NaN, 0.6, 1.0 )\n    NaN\n    > y = base.dists.weibull.pdf( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.weibull.pdf( 0.0, 0.0, NaN )\n    NaN\n    > y = base.dists.weibull.pdf( 2.0, 0.0, -1.0 )\n    NaN\n\n\nbase.dists.weibull.pdf.factory( k, λ )\n    Returns a function for evaluating the probability density function (PDF) of\n    a Weibull distribution with shape parameter `k` and scale parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.weibull.pdf.factory( 7.0, 6.0 );\n    > var y = myPDF( 7.0 )\n    ~0.155\n\n","base.dists.weibull.pdf.factory":"\nbase.dists.weibull.pdf.factory( k, λ )\n    Returns a function for evaluating the probability density function (PDF) of\n    a Weibull distribution with shape parameter `k` and scale parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    pdf: Function\n        Probability density function (PDF).\n\n    Examples\n    --------\n    > var myPDF = base.dists.weibull.pdf.factory( 7.0, 6.0 );\n    > var y = myPDF( 7.0 )\n    ~0.155\n\n","base.dists.weibull.quantile":"\nbase.dists.weibull.quantile( p, k, λ )\n    Evaluates the quantile function for a Weibull distribution with scale\n    parameter `k` and shape parameter `λ` at a probability `p`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided a nonpositive value for `λ` or `k`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input probability.\n\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Evaluated quantile function.\n\n    Examples\n    --------\n    > var y = base.dists.weibull.quantile( 0.8, 1.0, 1.0 )\n    ~1.609\n    > y = base.dists.weibull.quantile( 0.5, 2.0, 4.0 )\n    ~3.33\n\n    > y = base.dists.weibull.quantile( 1.1, 1.0, 1.0 )\n    NaN\n    > y = base.dists.weibull.quantile( -0.2, 1.0, 1.0 )\n    NaN\n\n    > y = base.dists.weibull.quantile( NaN, 0.0, 1.0 )\n    NaN\n    > y = base.dists.weibull.quantile( 0.0, NaN, 1.0 )\n    NaN\n    > y = base.dists.weibull.quantile( 0.0, 0.0, NaN )\n    NaN\n\n    > y = base.dists.weibull.quantile( 0.5, 1.0, -1.0 )\n    NaN\n\n\nbase.dists.weibull.quantile.factory( k, λ )\n    Returns a function for evaluating the quantile function of a Weibull\n    distribution with scale parameter `k` and shape parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.weibull.quantile.factory( 2.0, 10.0 );\n    > var y = myQuantile( 0.4 )\n    ~7.147\n\n","base.dists.weibull.quantile.factory":"\nbase.dists.weibull.quantile.factory( k, λ )\n    Returns a function for evaluating the quantile function of a Weibull\n    distribution with scale parameter `k` and shape parameter `λ`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    quantile: Function\n        Quantile function.\n\n    Examples\n    --------\n    > var myQuantile = base.dists.weibull.quantile.factory( 2.0, 10.0 );\n    > var y = myQuantile( 0.4 )\n    ~7.147\n\n","base.dists.weibull.skewness":"\nbase.dists.weibull.skewness( k, λ )\n    Returns the skewness of a Weibull distribution.\n\n    If `k <= 0` or `λ <= 0`, the function returns `NaN`.\n\n    If `k` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Skewness.\n\n    Examples\n    --------\n    > var v = base.dists.weibull.skewness( 1.0, 1.0 )\n    2.0\n    > v = base.dists.weibull.skewness( 4.0, 12.0 )\n    ~-0.087\n    > v = base.dists.weibull.skewness( 8.0, 2.0 )\n    ~-0.534\n\n","base.dists.weibull.stdev":"\nbase.dists.weibull.stdev( k, λ )\n    Returns the standard deviation of a Weibull distribution.\n\n    If `k <= 0` or `λ <= 0`, the function returns `NaN`.\n\n    If `k` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Standard deviation.\n\n    Examples\n    --------\n    > var v = base.dists.weibull.stdev( 1.0, 1.0 )\n    1.0\n    > v = base.dists.weibull.stdev( 4.0, 12.0 )\n    ~3.051\n    > v = base.dists.weibull.stdev( 8.0, 2.0 )\n    ~0.279\n\n","base.dists.weibull.variance":"\nbase.dists.weibull.variance( k, λ )\n    Returns the variance of a Weibull distribution.\n\n    If `k <= 0` or `λ <= 0`, the function returns `NaN`.\n\n    If `k` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Scale parameter.\n\n    Returns\n    -------\n    out: number\n        Variance.\n\n    Examples\n    --------\n    > var v = base.dists.weibull.variance( 1.0, 1.0 )\n    1.0\n    > v = base.dists.weibull.variance( 4.0, 12.0 )\n    ~9.311\n    > v = base.dists.weibull.variance( 8.0, 2.0 )\n    ~0.078\n\n","base.dists.weibull.Weibull":"\nbase.dists.weibull.Weibull( [k, λ] )\n    Returns a Weibull distribution object.\n\n    Parameters\n    ----------\n    k: number (optional)\n        Shape parameter. Must be greater than `0`. Default: `1.0`.\n\n    λ: number (optional)\n        Scale parameter. Must be greater than `0`. Default: `1.0`.\n\n    Returns\n    -------\n    weibull: Object\n        Distribution instance.\n\n    weibull.k: number\n        Shape parameter. If set, the value must be greater than `0`.\n\n    weibull.lambda: number\n        Scale parameter. If set, the value must be greater than `0`.\n\n    weibull.entropy: number\n        Read-only property which returns the differential entropy.\n\n    weibull.kurtosis: number\n        Read-only property which returns the excess kurtosis.\n\n    weibull.mean: number\n        Read-only property which returns the expected value.\n\n    weibull.median: number\n        Read-only property which returns the median.\n\n    weibull.mode: number\n        Read-only property which returns the mode.\n\n    weibull.skewness: number\n        Read-only property which returns the skewness.\n\n    weibull.stdev: number\n        Read-only property which returns the standard deviation.\n\n    weibull.variance: number\n        Read-only property which returns the variance.\n\n    weibull.cdf: Function\n        Evaluates the cumulative distribution function (CDF).\n\n    weibull.logcdf: Function\n        Evaluates the natural logarithm of the cumulative distribution function\n        (CDF).\n\n    weibull.logpdf: Function\n        Evaluates the natural logarithm of the probability density function\n        (PDF).\n\n    weibull.mgf: Function\n        Evaluates the moment-generating function (MGF).\n\n    weibull.pdf: Function\n        Evaluates the probability density function (PDF).\n\n    weibull.quantile: Function\n        Evaluates the quantile function at probability `p`.\n\n    Examples\n    --------\n    > var weibull = base.dists.weibull.Weibull( 6.0, 5.0 );\n    > weibull.k\n    6.0\n    > weibull.lambda\n    5.0\n    > weibull.entropy\n    ~1.299\n    > weibull.kurtosis\n    ~0.035\n    > weibull.mean\n    ~4.639\n    > weibull.median\n    ~4.704\n    > weibull.mode\n    ~4.85\n    > weibull.skewness\n    ~-0.373\n    > weibull.stdev\n    ~0.899\n    > weibull.variance\n    ~0.808\n    > weibull.cdf( 3.0 )\n    ~0.046\n    > weibull.logcdf( 3.0 )\n    ~-3.088\n    > weibull.logpdf( 1.0 )\n    ~-7.865\n    > weibull.mgf( -0.5 )\n    ~0.075\n    > weibull.pdf( 3.0 )\n    ~0.089\n    > weibull.quantile( 0.8 )\n    ~5.413\n\n","base.ellipe":"\nbase.ellipe( m )\n    Computes the complete elliptic integral of the second kind.\n\n    Parameters\n    ----------\n    m: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.ellipe( 0.5 )\n    ~1.351\n    > y = base.ellipe( -1.0 )\n    ~1.910\n    > y = base.ellipe( 2.0 )\n    NaN\n    > y = base.ellipe( PINF )\n    NaN\n    > y = base.ellipe( NINF )\n    NaN\n    > y = base.ellipe( NaN )\n    NaN\n\n    See Also\n    --------\n    base.ellipk\n","base.ellipk":"\nbase.ellipk( m )\n    Computes the complete elliptic integral of the first kind.\n\n    Parameters\n    ----------\n    m: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.ellipk( 0.5 )\n    ~1.854\n    > y = base.ellipk( -1.0 )\n    ~1.311\n    > y = base.ellipk( 2.0 )\n    NaN\n    > y = base.ellipk( PINF )\n    NaN\n    > y = base.ellipk( NINF )\n    NaN\n    > y = base.ellipk( NaN )\n    NaN\n\n    See Also\n    --------\n    base.ellipe\n","base.epsdiff":"\nbase.epsdiff( x, y[, scale] )\n    Computes the relative difference of two real numbers in units of double-\n    precision floating-point epsilon.\n\n    By default, the function scales the absolute difference by dividing the\n    absolute difference by the maximum absolute value of `x` and `y`. To scale\n    by a different function, specify a scale function name.\n\n    The following `scale` functions are supported:\n\n    - 'max-abs': maximum absolute value of `x` and `y` (default).\n    - 'max': maximum value of `x` and `y`.\n    - 'min-abs': minimum absolute value of `x` and `y`.\n    - 'min': minimum value of `x` and `y`.\n    - 'mean-abs': arithmetic mean of the absolute values of `x` and `y`.\n    - 'mean': arithmetic mean of `x` and `y`.\n    - 'x': `x` (*noncommutative*).\n    - 'y': `y` (*noncommutative*).\n\n    To use a custom scale function, provide a function which accepts two numeric\n    arguments `x` and `y`.\n\n    If computing the relative difference in units of epsilon will result in\n    overflow, the function returns the maximum double-precision floating-point\n    number.\n\n    If the absolute difference of `x` and `y` is `0`, the relative difference is\n    always `0`.\n\n    If `|x| = |y| = infinity`, the function returns `NaN`.\n\n    If `|x| = |-y| = infinity`, the relative difference is `+infinity`.\n\n    If a `scale` function returns `0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        First number.\n\n    y: number\n        Second number.\n\n    scale: string|Function (optional)\n        Scale function. Default: `'max-abs'`.\n\n    Returns\n    -------\n    out: number\n        Relative difference in units of double-precision floating-point epsilon.\n\n    Examples\n    --------\n    > var d = base.epsdiff( 12.15, 12.149999999999999 )\n    ~0.658\n    > d = base.epsdiff( 2.4341309458983933, 2.4341309458633909, 'mean-abs' )\n    ~64761.512\n\n    // Custom scale function:\n    > function scale( x, y ) { return ( x > y ) ? y : x; };\n    > d = base.epsdiff( 1.0000000000000002, 1.0000000000000100, scale )\n    ~44\n\n    See Also\n    --------\n    base.absdiff, base.reldiff\n","base.erf":"\nbase.erf( x )\n    Evaluates the error function.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    As the error function is an odd function (i.e., `erf(-x) == -erf(x)`), if\n    provided `-0`, the function returns `-0`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.erf( 2.0 )\n    ~0.9953\n    > y = base.erf( -1.0 )\n    ~-0.8427\n    > y = base.erf( -0.0 )\n    -0.0\n    > y = base.erf( NaN )\n    NaN\n\n    See Also\n    --------\n    base.erfc, base.erfinv, base.erfcinv\n","base.erfc":"\nbase.erfc( x )\n    Evaluates the complementary error function.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.erfc( 2.0 )\n    ~0.0047\n    > y = base.erfc( -1.0 )\n    ~1.8427\n    > y = base.erfc( 0.0 )\n    1.0\n    > y = base.erfc( PINF )\n    0.0\n    > y = base.erfc( NINF )\n    2.0\n    > y = base.erfc( NaN )\n    NaN\n\n    See Also\n    --------\n    base.erf, base.erfinv, base.erfcinv\n","base.erfcinv":"\nbase.erfcinv( x )\n    Evaluates the inverse complementary error function.\n\n    The domain of `x` is restricted to `[0,2]`. If `x` is outside this interval,\n    the function returns `NaN`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.erfcinv( 0.5 )\n    ~0.4769\n    > y = base.erfcinv( 0.8 )\n    ~0.1791\n    > y = base.erfcinv( 0.0 )\n    Infinity\n    > y = base.erfcinv( 2.0 )\n    -Infinity\n    > y = base.erfcinv( NaN )\n    NaN\n\n    See Also\n    --------\n    base.erf, base.erfc, base.erfinv\n","base.erfinv":"\nbase.erfinv( x )\n    Evaluates the inverse error function.\n\n    If `|x| > 1`, the function returns `NaN`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    As the inverse error function is an odd function (i.e., `erfinv(-x) ==\n    -erfinv(x)`), if provided `-0`, the function returns `-0`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.erfinv( 0.5 )\n    ~0.4769\n    > y = base.erfinv( 0.8 )\n    ~0.9062\n    > y = base.erfinv( 0.0 )\n    0.0\n    > y = base.erfinv( -0.0 )\n    -0.0\n    > y = base.erfinv( -1.0 )\n    -Infinity\n    > y = base.erfinv( 1.0 )\n    Infinity\n    > y = base.erfinv( NaN )\n    NaN\n\n    See Also\n    --------\n    base.erf, base.erfc, base.erfcinv\n","base.eta":"\nbase.eta( s )\n    Evaluates the Dirichlet eta function as a function of a real variable `s`.\n\n    Parameters\n    ----------\n    s: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.eta( 0.0 )\n    0.5\n    > y = base.eta( -1.0 )\n    0.25\n    > y = base.eta( 1.0 )\n    ~0.6931\n    > y = base.eta( 3.14 )\n    ~0.9096\n    > y = base.eta( NaN )\n    NaN\n\n","base.evalpoly":"\nbase.evalpoly( c, x )\n    Evaluates a polynomial.\n\n    Parameters\n    ----------\n    c: Array<number>\n        Polynomial coefficients sorted in ascending degree.\n\n    x: number\n        Value at which to evaluate the polynomial.\n\n    Returns\n    -------\n    out: number\n        Evaluated polynomial.\n\n    Examples\n    --------\n    > var arr = [ 3.0, 2.0, 1.0 ];\n\n    // 3*10^0 + 2*10^1 + 1*10^2\n    > var v = base.evalpoly( arr, 10.0 )\n    123.0\n\n\nbase.evalpoly.factory( c )\n    Returns a function for evaluating a polynomial.\n\n    Parameters\n    ----------\n    c: Array<number>\n        Polynomial coefficients sorted in ascending degree.\n\n    Returns\n    -------\n    fcn: Function\n        Function for evaluating a polynomial.\n\n    Examples\n    --------\n    > var polyval = base.evalpoly.factory( [ 3.0, 2.0, 1.0 ] );\n\n    // 3*10^0 + 2*10^1 + 1*10^2\n    > var v = polyval( 10.0 )\n    123.0\n\n    // 3*5^0 + 2*5^1 + 1*5^2\n    > v = polyval( 5.0 )\n    38.0\n\n    See Also\n    --------\n    base.evalrational\n","base.evalpoly.factory":"\nbase.evalpoly.factory( c )\n    Returns a function for evaluating a polynomial.\n\n    Parameters\n    ----------\n    c: Array<number>\n        Polynomial coefficients sorted in ascending degree.\n\n    Returns\n    -------\n    fcn: Function\n        Function for evaluating a polynomial.\n\n    Examples\n    --------\n    > var polyval = base.evalpoly.factory( [ 3.0, 2.0, 1.0 ] );\n\n    // 3*10^0 + 2*10^1 + 1*10^2\n    > var v = polyval( 10.0 )\n    123.0\n\n    // 3*5^0 + 2*5^1 + 1*5^2\n    > v = polyval( 5.0 )\n    38.0\n\n    See Also\n    --------\n    base.evalrational\n","base.evalrational":"\nbase.evalrational( P, Q, x )\n    Evaluates a rational function.\n\n    A rational function `f(x)` is defined as\n\n               P(x)\n        f(x) = ----\n               Q(x)\n\n    where both `P(x)` and `Q(x)` are polynomials in `x`.\n\n    The coefficients for both `P` and `Q` should be sorted in ascending degree.\n\n    For polynomials of different degree, the coefficient array for the lower\n    degree polynomial should be padded with zeros.\n\n    Parameters\n    ----------\n    P: Array<number>\n        Numerator polynomial coefficients sorted in ascending degree.\n\n    Q: Array<number>\n        Denominator polynomial coefficients sorted in ascending degree.\n\n    x: number\n        Value at which to evaluate the rational function.\n\n    Returns\n    -------\n    out: number\n        Evaluated rational function.\n\n    Examples\n    --------\n    // 2x^3 + 4x^2 - 5x^1 - 6x^0\n    > var P = [ -6.0, -5.0, 4.0, 2.0 ];\n\n    // 0.5x^1 + 3x^0\n    > var Q = [ 3.0, 0.5, 0.0, 0.0 ]; // zero-padded\n\n    // Evaluate the rational function:\n    > var v = base.evalrational( P, Q, 6.0 )\n    90.0\n\n\nbase.evalrational.factory( P, Q )\n    Returns a function for evaluating a rational function.\n\n    Parameters\n    ----------\n    P: Array<number>\n        Numerator polynomial coefficients sorted in ascending degree.\n\n    Q: Array<number>\n        Denominator polynomial coefficients sorted in ascending degree.\n\n    Returns\n    -------\n    fcn: Function\n        Function for evaluating a rational function.\n\n    Examples\n    --------\n    > var P = [ 20.0, 8.0, 3.0 ];\n    > var Q = [ 10.0, 9.0, 1.0 ];\n    > var rational = base.evalrational.factory( P, Q );\n\n    // (20*10^0 + 8*10^1 + 3*10^2) / (10*10^0 + 9*10^1 + 1*10^2):\n    > var v = rational( 10.0 )\n    2.0\n\n    // (20*2^0 + 8*2^1 + 3*2^2) / (10*2^0 + 9*2^1 + 1*2^2):\n    > v = rational( 2.0 )\n    1.5\n\n    See Also\n    --------\n    base.evalpoly\n","base.evalrational.factory":"\nbase.evalrational.factory( P, Q )\n    Returns a function for evaluating a rational function.\n\n    Parameters\n    ----------\n    P: Array<number>\n        Numerator polynomial coefficients sorted in ascending degree.\n\n    Q: Array<number>\n        Denominator polynomial coefficients sorted in ascending degree.\n\n    Returns\n    -------\n    fcn: Function\n        Function for evaluating a rational function.\n\n    Examples\n    --------\n    > var P = [ 20.0, 8.0, 3.0 ];\n    > var Q = [ 10.0, 9.0, 1.0 ];\n    > var rational = base.evalrational.factory( P, Q );\n\n    // (20*10^0 + 8*10^1 + 3*10^2) / (10*10^0 + 9*10^1 + 1*10^2):\n    > var v = rational( 10.0 )\n    2.0\n\n    // (20*2^0 + 8*2^1 + 3*2^2) / (10*2^0 + 9*2^1 + 1*2^2):\n    > v = rational( 2.0 )\n    1.5\n\n    See Also\n    --------\n    base.evalpoly\n","base.exp":"\nbase.exp( x )\n    Evaluates the natural exponential function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.exp( 4.0 )\n    ~54.5982\n    > y = base.exp( -9.0 )\n    ~1.234e-4\n    > y = base.exp( 0.0 )\n    1.0\n    > y = base.exp( NaN )\n    NaN\n\n    See Also\n    --------\n    base.exp10, base.exp2, base.expm1, base.ln\n","base.exp2":"\nbase.exp2( x )\n    Evaluates the base 2 exponential function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.exp2( 3.0 )\n    8.0\n    > y = base.exp2( -9.0 )\n    ~0.002\n    > y = base.exp2( 0.0 )\n    1.0\n    > y = base.exp2( NaN )\n    NaN\n\n    See Also\n    --------\n    base.exp, base.exp10\n","base.exp10":"\nbase.exp10( x )\n    Evaluates the base 10 exponential function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.exp10( 3.0 )\n    1000\n    > y = base.exp10( -9.0 )\n    1.0e-9\n    > y = base.exp10( 0.0 )\n    1.0\n    > y = base.exp10( NaN )\n    NaN\n\n    See Also\n    --------\n    base.exp, base.exp2\n","base.expit":"\nbase.expit( x )\n    Evaluates the standard logistic function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.expit( 0.0 )\n    0.5\n    > y = base.expit( 1.0 )\n    ~0.731\n    > y = base.expit( -1.0 )\n    ~0.269\n    > y = base.expit( Infinity )\n    1.0\n    > y = base.expit( NaN )\n    NaN\n\n    See Also\n    --------\n    base.exp, base.logit","base.expm1":"\nbase.expm1( x )\n    Computes `exp(x)-1`, where `exp(x)` is the natural exponential function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.expm1( 0.2 )\n    ~0.221\n    > y = base.expm1( -9.0 )\n    ~-1.0\n    > y = base.expm1( 0.0 )\n    0.0\n    > y = base.expm1( NaN )\n    NaN\n\n    See Also\n    --------\n    base.exp, base.expm1rel\n","base.expm1rel":"\nbase.expm1rel( x )\n    Relative error exponential.\n\n    When `x` is near zero,\n\n        e^x - 1\n\n    can suffer catastrophic cancellation (i.e., significant loss of precision).\n    This function avoids the loss of precision when `x` is near zero.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.expm1rel( 0.0 )\n    1.0\n    > y = base.expm1rel( 1.0 )\n    ~1.718\n    > y = base.expm1rel( -1.0 )\n    ~0.632\n    > y = base.expm1rel( NaN )\n    NaN\n\t\n    See Also\n    --------\n    base.exp, base.expm1\n","base.exponent":"\nbase.exponent( x )\n    Returns an integer corresponding to the unbiased exponent of a double-\n    precision floating-point number.\n\n    Parameters\n    ----------\n    x: number\n        Double-precision floating-point number.\n\n    Returns\n    -------\n    out: integer\n        Unbiased exponent.\n\n    Examples\n    --------\n    > var exponent = base.exponent( 3.14e-307 )\n    -1019\n    > exponent = base.exponent( -3.14 )\n    1\n    > exponent = base.exponent( 0.0 )\n    -1023\n    > exponent = base.exponent( NaN )\n    1024\n\n    See Also\n    --------\n    base.exponentf\n","base.exponentf":"\nbase.exponentf( x )\n    Returns an integer corresponding to the unbiased exponent of a single-\n    precision floating-point number.\n\n    Parameters\n    ----------\n    x: float\n        Single-precision floating-point number.\n\n    Returns\n    -------\n    out: integer\n        Unbiased exponent.\n\n    Examples\n    --------\n    > var exponent = base.exponentf( base.float64ToFloat32( 3.14e34 ) )\n    114\n    > exponent = base.exponentf( base.float64ToFloat32( 3.14e-34 ) )\n    -112\n    > exponent = base.exponentf( base.float64ToFloat32( -3.14 ) )\n    1\n    > exponent = base.exponentf( 0.0 )\n    -127\n    > exponent = base.exponentf( NaN )\n    128\n\n    See Also\n    --------\n    base.exponent\n","base.factorial":"\nbase.factorial( x )\n    Evaluates the factorial of `x`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Factorial.\n\n    Examples\n    --------\n    > var y = base.factorial( 3.0 )\n    6.0\n    > y = base.factorial( -1.5 )\n    ~-3.545\n    > y = base.factorial( -0.5 )\n    ~1.772\n    > y = base.factorial( 0.5 )\n    ~0.886\n    > y = base.factorial( -10.0 )\n    NaN\n    > y = base.factorial( 171.0 )\n    Infinity\n    > y = base.factorial( NaN )\n    NaN\n\n    See Also\n    --------\n    base.factorialln\n","base.factorialln":"\nbase.factorialln( x )\n    Evaluates the natural logarithm of the factorial of `x`.\n\n    For input values other than negative integers, the function returns\n\n      ln( x! ) = ln( Γ(x+1) )\n\n    where `Γ` is the Gamma function. For negative integers, the function returns\n    `NaN`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Natural logarithm of the factorial of `x`.\n\n    Examples\n    --------\n    > var y = base.factorialln( 3.0 )\n    ~1.792\n    > y = base.factorialln( 2.4 )\n    ~1.092\n    > y = base.factorialln( -1.0 )\n    NaN\n    > y = base.factorialln( -1.5 )\n    ~1.266\n    > y = base.factorialln( NaN )\n    NaN\n\n    See Also\n    --------\n    base.factorial\n","base.fallingFactorial":"\nbase.fallingFactorial( x, n )\n    Computes the falling factorial of `x` and `n`.\n\n    If not provided a nonnegative integer for `n`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        First function parameter.\n\n    n: integer\n        Second function parameter.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var v = base.fallingFactorial( 0.9, 5 )\n    ~0.644\n    > v = base.fallingFactorial( -9.0, 3 )\n    -990.0\n    > v = base.fallingFactorial( 0.0, 2 )\n    0.0\n    > v = base.fallingFactorial( 3.0, -2 )\n    NaN\n\n    See Also\n    --------\n    base.risingFactorial\n","base.fibonacci":"\nbase.fibonacci( n )\n    Computes the nth Fibonacci number.\n\n    Fibonacci numbers follow the recurrence relation\n\n      F_n = F_{n-1} + F_{n-2}\n\n    with seed values F_0 = 0 and F_1 = 1.\n\n    If `n` is greater than `78`, the function returns `NaN`, as larger Fibonacci\n    numbers cannot be accurately represented due to limitations of double-\n    precision floating-point format.\n\n    If not provided a nonnegative integer value, the function returns `NaN`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Input value.\n\n    Returns\n    -------\n    y: integer\n        Fibonacci number.\n\n    Examples\n    --------\n    > var y = base.fibonacci( 0 )\n    0\n    > y = base.fibonacci( 1 )\n    1\n    > y = base.fibonacci( 2 )\n    1\n    > y = base.fibonacci( 3 )\n    2\n    > y = base.fibonacci( 4 )\n    3\n    > y = base.fibonacci( 79 )\n    NaN\n    > y = base.fibonacci( NaN )\n    NaN\n\n    See Also\n    --------\n    base.binet, base.fibonacciIndex, base.lucas, base.negafibonacci\n","base.fibonacciIndex":"\nbase.fibonacciIndex( F )\n    Computes the Fibonacci number index.\n\n    If not provided a nonnegative integer value, the function returns `NaN`.\n\n    If provided `F <= 1` or `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    F: integer\n        Fibonacci number.\n\n    Returns\n    -------\n    n: number\n        Fibonacci number index.\n\n    Examples\n    --------\n    > var n = base.fibonacciIndex( 2 )\n    3\n    > n = base.fibonacciIndex( 3 )\n    4\n    > n = base.fibonacciIndex( 5 )\n    5\n    > n = base.fibonacciIndex( NaN )\n    NaN\n    > n = base.fibonacciIndex( 1 )\n    NaN\n\n    See Also\n    --------\n    base.fibonacci\n","base.fibpoly":"\nbase.fibpoly( n, x )\n    Evaluates a Fibonacci polynomial.\n\n    Parameters\n    ----------\n    n: integer\n        Fibonacci polynomial to evaluate.\n\n    x: number\n        Value at which to evaluate the Fibonacci polynomial.\n\n    Returns\n    -------\n    out: number\n        Evaluated Fibonacci polynomial.\n\n    Examples\n    --------\n    // 2^4 + 3*2^2 + 1\n    > var v = base.fibpoly( 5, 2.0 )\n    29.0\n\n\nbase.fibpoly.factory( n )\n    Returns a function for evaluating a Fibonacci polynomial.\n\n    Parameters\n    ----------\n    n: integer\n        Fibonacci polynomial to evaluate.\n\n    Returns\n    -------\n    fcn: Function\n        Function for evaluating a Fibonacci polynomial.\n\n    Examples\n    --------\n    > var polyval = base.fibpoly.factory( 5 );\n\n    // 1^4 + 3*1^2 + 1\n    > var v = polyval( 1.0 )\n    5.0\n\n    // 2^4 + 3*2^2 + 1\n    > v = polyval( 2.0 )\n    29.0\n\n    See Also\n    --------\n    base.evalpoly, base.lucaspoly\n","base.fibpoly.factory":"\nbase.fibpoly.factory( n )\n    Returns a function for evaluating a Fibonacci polynomial.\n\n    Parameters\n    ----------\n    n: integer\n        Fibonacci polynomial to evaluate.\n\n    Returns\n    -------\n    fcn: Function\n        Function for evaluating a Fibonacci polynomial.\n\n    Examples\n    --------\n    > var polyval = base.fibpoly.factory( 5 );\n\n    // 1^4 + 3*1^2 + 1\n    > var v = polyval( 1.0 )\n    5.0\n\n    // 2^4 + 3*2^2 + 1\n    > v = polyval( 2.0 )\n    29.0\n\n    See Also\n    --------\n    base.evalpoly, base.lucaspoly\n","base.flipsign":"\nbase.flipsign( x, y )\n    Returns a double-precision floating-point number with the magnitude of `x`\n    and the sign of `x*y`.\n\n    The function only returns `-x` when `y` is a negative number.\n\n    According to the IEEE 754 standard, a `NaN` has a biased exponent equal to\n    `2047`, a significand greater than `0`, and a sign bit equal to either `1`\n    or `0`. In which case, `NaN` may not correspond to just one but many binary\n    representations. Accordingly, care should be taken to ensure that `y` is not\n    `NaN`, else behavior may be indeterminate.\n\n    Parameters\n    ----------\n    x: number\n        Number from which to derive a magnitude.\n\n    y: number\n        Number from which to derive a sign.\n\n    Returns\n    -------\n    z: number\n        Double-precision floating-point number.\n\n    Examples\n    --------\n    > var z = base.flipsign( -3.14, 10.0 )\n    -3.14\n    > z = base.flipsign( -3.14, -1.0 )\n    3.14\n    > z = base.flipsign( 1.0, -0.0 )\n    -1.0\n    > z = base.flipsign( -3.14, -0.0 )\n    3.14\n    > z = base.flipsign( -0.0, 1.0 )\n    -0.0\n    > z = base.flipsign( 0.0, -1.0 )\n    -0.0\n\n    See Also\n    --------\n    base.copysign\n","base.float32ToInt32":"\nbase.float32ToInt32( x )\n    Converts a single-precision floating-point number to a signed 32-bit\n    integer.\n\n    Parameters\n    ----------\n    x: float\n        Single-precision floating-point number.\n\n    Returns\n    -------\n    out: integer\n        Signed 32-bit integer.\n\n    Examples\n    --------\n    > var y = base.float32ToInt32( base.float64ToFloat32( 4294967295.0 ) )\n    -1\n    > y = base.float32ToInt32( base.float64ToFloat32( 3.14 ) )\n    3\n    > y = base.float32ToInt32( base.float64ToFloat32( -3.14 ) )\n    -3\n    > y = base.float32ToInt32( base.float64ToFloat32( NaN ) )\n    0\n    > y = base.float32ToInt32( FLOAT32_PINF )\n    0\n    > y = base.float32ToInt32( FLOAT32_NINF )\n    0\n\n    See Also\n    --------\n    base.float32ToUint32","base.float32ToUint32":"\nbase.float32ToUint32( x )\n    Converts a single-precision floating-point number to a unsigned 32-bit\n    integer.\n\n    Parameters\n    ----------\n    x: float\n        Single-precision floating-point number.\n\n    Returns\n    -------\n    out: integer\n        Unsigned 32-bit integer.\n\n    Examples\n    --------\n    > var y = base.float32ToUint32( base.float64ToFloat32( 4294967297.0 ) )\n    1\n    > y = base.float32ToUint32( base.float64ToFloat32( 3.14 ) )\n    3\n    > y = base.float32ToUint32( base.float64ToFloat32( -3.14 ) )\n    4294967293\n    > y = base.float32ToUint32( base.float64ToFloat32( NaN ) )\n    0\n    > y = base.float32ToUint32( FLOAT32_PINF )\n    0\n    > y = base.float32ToUint32( FLOAT32_NINF )\n    0\n\n    See Also\n    --------\n    base.float32ToInt32","base.float64ToFloat32":"\nbase.float64ToFloat32( x )\n    Converts a double-precision floating-point number to the nearest single-\n    precision floating-point number.\n\n    Parameters\n    ----------\n    x: number\n        Double-precision floating-point number.\n\n    Returns\n    -------\n    out: float\n        Nearest single-precision floating-point number.\n\n    Examples\n    --------\n    > var y = base.float64ToFloat32( 1.337 )\n    1.3370000123977661\n","base.float64ToInt32":"\nbase.float64ToInt32( x )\n    Converts a double-precision floating-point number to a signed 32-bit\n    integer.\n\n    Parameters\n    ----------\n    x: number\n        Double-precision floating-point number.\n\n    Returns\n    -------\n    out: integer\n        Signed 32-bit integer.\n\n    Examples\n    --------\n    > var y = base.float64ToInt32( 4294967295.0 )\n    -1\n    > y = base.float64ToInt32( 3.14 )\n    3\n    > y = base.float64ToInt32( -3.14 )\n    -3\n    > y = base.float64ToInt32( NaN )\n    0\n    > y = base.float64ToInt32( PINF )\n    0\n    > y = base.float64ToInt32( NINF )\n    0\n\n    See Also\n    --------\n    base.float64ToUint32","base.float64ToUint32":"\nbase.float64ToUint32( x )\n    Converts a double-precision floating-point number to a unsigned 32-bit\n    integer.\n\n    Parameters\n    ----------\n    x: number\n        Double-precision floating-point number.\n\n    Returns\n    -------\n    out: integer\n        Unsigned 32-bit integer.\n\n    Examples\n    --------\n    > var y = base.float64ToUint32( 4294967297.0 )\n    1\n    > y = base.float64ToUint32( 3.14 )\n    3\n    > y = base.float64ToUint32( -3.14 )\n    4294967293\n    > y = base.float64ToUint32( NaN )\n    0\n    > y = base.float64ToUint32( PINF )\n    0\n    > y = base.float64ToUint32( NINF )\n    0\n\n    See Also\n    --------\n    base.float64ToInt32","base.floor":"\nbase.floor( x )\n    Rounds a numeric value toward negative infinity.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.floor( 3.14 )\n    3.0\n    > y = base.floor( -4.2 )\n    -5.0\n    > y = base.floor( -4.6 )\n    -5.0\n    > y = base.floor( 9.5 )\n    9.0\n    > y = base.floor( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil, base.round\n","base.floor2":"\nbase.floor2( x )\n    Rounds a numeric value to the nearest power of two toward negative infinity.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.floor2( 3.14 )\n    2.0\n    > y = base.floor2( -4.2 )\n    -8.0\n    > y = base.floor2( -4.6 )\n    -8.0\n    > y = base.floor2( 9.5 )\n    8.0\n    > y = base.floor2( 13.0 )\n    8.0\n    > y = base.floor2( -13.0 )\n    -16.0\n    > y = base.floor2( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil2, base.floor, base.floor10, base.round2\n","base.floor10":"\nbase.floor10( x )\n    Rounds a numeric value to the nearest power of ten toward negative infinity.\n\n    The function may not return accurate results for subnormals due to a general\n    loss in precision.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.floor10( 3.14 )\n    1.0\n    > y = base.floor10( -4.2 )\n    -10.0\n    > y = base.floor10( -4.6 )\n    -10.0\n    > y = base.floor10( 9.5 )\n    1.0\n    > y = base.floor10( 13.0 )\n    10.0\n    > y = base.floor10( -13.0 )\n    -100.0\n    > y = base.floor10( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil10, base.floor, base.floor2, base.round10\n","base.floorb":"\nbase.floorb( x, n, b )\n    Rounds a numeric value to the nearest multiple of `b^n` toward negative\n    infinity.\n\n    Due to floating-point rounding error, rounding may not be exact.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Integer power.\n\n    b: integer\n        Base.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    // Round to 4 decimal places:\n    > var y = base.floorb( 3.14159, -4, 10 )\n    3.1415\n\n    // If `n = 0` or `b = 1`, standard round behavior:\n    > y = base.floorb( 3.14159, 0, 2 )\n    3.0\n\n    // Round to nearest multiple of two toward negative infinity:\n    > y = base.floorb( 5.0, 1, 2 )\n    4.0\n\n    See Also\n    --------\n    base.ceilb, base.floor, base.floorn, base.roundb\n","base.floorn":"\nbase.floorn( x, n )\n    Rounds a numeric value to the nearest multiple of `10^n` toward negative\n    infinity.\n\n    When operating on floating-point numbers in bases other than `2`, rounding\n    to specified digits can be inexact.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Integer power of 10.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    // Round to 4 decimal places:\n    > var y = base.floorn( 3.14159, -4 )\n    3.1415\n\n    // If `n = 0`, standard round toward negative infinity behavior:\n    > y = base.floorn( 3.14159, 0 )\n    3.0\n\n    // Round to nearest thousand:\n    > y = base.floorn( 12368.0, 3 )\n    12000.0\n\n\n    See Also\n    --------\n    base.ceiln, base.floor, base.floorb, base.roundn\n","base.floorsd":"\nbase.floorsd( x, n[, b] )\n    Rounds a numeric value to the nearest number toward negative infinity with\n    `n` significant figures.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Number of significant figures. Must be greater than 0.\n\n    b: integer (optional)\n        Base. Must be greater than 0. Default: 10.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.floorsd( 3.14159, 5 )\n    3.1415\n    > y = base.floorsd( 3.14159, 1 )\n    3.0\n    > y = base.floorsd( 12368.0, 2 )\n    12000.0\n    > y = base.floorsd( 0.0313, 2, 2 )\n    0.03125\n\n    See Also\n    --------\n    base.ceilsd, base.floor, base.roundsd, base.truncsd\n","base.fresnel":"\nbase.fresnel( [out,] x )\n    Computes the Fresnel integrals S(x) and C(x).\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Destination array.\n\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: Array|TypedArray|Object\n        S(x) and C(x).\n\n    Examples\n    --------\n    > var y = base.fresnel( 0.0 )\n    [ ~0.0, ~0.0 ]\n    > y = base.fresnel( 1.0 )\n    [ ~0.438, ~0.780 ]\n    > y = base.fresnel( PINF )\n    [ ~0.5, ~0.5 ]\n    > y = base.fresnel( NINF )\n    [ ~-0.5, ~-0.5 ]\n    > y = base.fresnel( NaN )\n    [ NaN, NaN ]\n\n    > var out = new Float64Array( 2 );\n    > var v = base.fresnel( out, 0.0 )\n    <Float64Array>[ ~0.0, ~0.0 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.fresnelc, base.fresnels\n","base.fresnelc":"\nbase.fresnelc( x )\n    Computes the Fresnel integral C(x).\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        C(x).\n\n    Examples\n    --------\n    > var y = base.fresnelc( 0.0 )\n    ~0.0\n    > y = base.fresnelc( 1.0 )\n    ~0.780\n    > y = base.fresnelc( PINF )\n    ~0.5\n    > y = base.fresnelc( NINF )\n    ~-0.5\n    > y = base.fresnelc( NaN )\n    NaN\n\n    See Also\n    --------\n    base.fresnel, base.fresnels\n","base.fresnels":"\nbase.fresnels( x )\n    Computes the Fresnel integral S(x).\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        S(x).\n\n    Examples\n    --------\n    > var y = base.fresnels( 0.0 )\n    ~0.0\n    > y = base.fresnels( 1.0 )\n    ~0.438\n    > y = base.fresnels( PINF )\n    ~0.5\n    > y = base.fresnels( NINF )\n    ~-0.5\n    > y = base.fresnels( NaN )\n    NaN\n\n    See Also\n    --------\n    base.fresnel, base.fresnelc\n","base.frexp":"\nbase.frexp( [out,] x )\n    Splits a double-precision floating-point number into a normalized fraction\n    and an integer power of two.\n\n    The first element of the returned array is the normalized fraction and the\n    second is the exponent. The normalized fraction and exponent satisfy the\n    relation\n\n      x = frac * 2^exp\n\n    If provided positive or negative zero, `NaN`, or positive or negative\n    infinity, the function returns a two-element array containing the input\n    value and an exponent equal to zero.\n\n    For all other numeric input values, the absolute value of the normalized\n    fraction resides on the interval [0.5,1).\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    x: number\n        Input value.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        A normalized fraction and an exponent.\n\n    Examples\n    --------\n    > var out = base.frexp( 4.0 )\n    [ 0.5, 3 ]\n    > out = base.frexp( 0.0 )\n    [ 0.0, 0 ]\n    > out = base.frexp( -0.0 )\n    [ -0.0, 0 ]\n    > out = base.frexp( NaN )\n    [ NaN, 0 ]\n    > out = base.frexp( PINF )\n    [ Infinity, 0 ]\n    > out = base.frexp( NINF )\n    [ -Infinity, 0 ]\n\n    // Provide an output array:\n    > out = new Float64Array( 2 );\n    > var y = base.frexp( out, 4.0 )\n    <Float64Array>[ 0.5, 3 ]\n    > var bool = ( y === out )\n    true\n\n    See Also\n    --------\n    base.ldexp\n","base.fromBinaryString":"\nbase.fromBinaryString( bstr )\n    Creates a double-precision floating-point number from a literal bit\n    representation.\n\n    Parameters\n    ----------\n    bstr: string\n        Literal bit representation.\n\n    Returns\n    -------\n    out: number\n        Double-precision floating-point number.\n\n    Examples\n    --------\n    > var bstr;\n    > bstr = '0100000000010000000000000000000000000000000000000000000000000000';\n    > var val = base.fromBinaryString( bstr )\n    4.0\n    > bstr = '0100000000001001001000011111101101010100010001000010110100011000';\n    > val = base.fromBinaryString( bstr )\n    3.141592653589793\n    > bstr = '1111111111100001110011001111001110000101111010111100100010100000';\n    > val = base.fromBinaryString( bstr )\n    -1.0e308\n\n    // The function handles subnormals:\n    > bstr = '1000000000000000000000000000000000000000000000000001100011010011';\n    > val = base.fromBinaryString( bstr )\n    -3.14e-320\n    > bstr = '0000000000000000000000000000000000000000000000000000000000000001';\n    > val = base.fromBinaryString( bstr )\n    5.0e-324\n\n    // The function handles special values:\n    > bstr = '0000000000000000000000000000000000000000000000000000000000000000';\n    > val = base.fromBinaryString( bstr )\n    0.0\n    > bstr = '1000000000000000000000000000000000000000000000000000000000000000';\n    > val = base.fromBinaryString( bstr )\n    -0.0\n    > bstr = '0111111111111000000000000000000000000000000000000000000000000000';\n    > val = base.fromBinaryString( bstr )\n    NaN\n    > bstr = '0111111111110000000000000000000000000000000000000000000000000000';\n    > val = base.fromBinaryString( bstr )\n    Infinity\n    > bstr = '1111111111110000000000000000000000000000000000000000000000000000';\n    > val = base.fromBinaryString( bstr )\n    -Infinity\n\n    See Also\n    --------\n    base.fromBinaryStringf, base.toBinaryString\n","base.fromBinaryStringf":"\nbase.fromBinaryStringf( bstr )\n    Creates a single-precision floating-point number from an IEEE 754 literal\n    bit representation.\n\n    Parameters\n    ----------\n    bstr: string\n        Literal bit representation.\n\n    Returns\n    -------\n    out: float\n        Single-precision floating-point number.\n\n    Examples\n    --------\n    > var bstr = '01000000100000000000000000000000';\n    > var val = base.fromBinaryStringf( bstr )\n    4.0\n    > bstr = '01000000010010010000111111011011';\n    > val = base.fromBinaryStringf( bstr )\n    ~3.14\n    > bstr = '11111111011011000011101000110011';\n    > val = base.fromBinaryStringf( bstr )\n    ~-3.14e+38\n\n    // The function handles subnormals:\n    > bstr = '10000000000000000000000000010110';\n    > val = base.fromBinaryStringf( bstr )\n    ~-3.08e-44\n    > bstr = '00000000000000000000000000000001';\n    > val = base.fromBinaryStringf( bstr )\n    ~1.40e-45\n\n    // The function handles special values:\n    > bstr = '00000000000000000000000000000000';\n    > val = base.fromBinaryStringf( bstr )\n    0.0\n    > bstr = '10000000000000000000000000000000';\n    > val = base.fromBinaryStringf( bstr )\n    -0.0\n    > bstr = '01111111110000000000000000000000';\n    > val = base.fromBinaryStringf( bstr )\n    NaN\n    > bstr = '01111111100000000000000000000000';\n    > val = base.fromBinaryStringf( bstr )\n    Infinity\n    > bstr = '11111111100000000000000000000000';\n    > val = base.fromBinaryStringf( bstr )\n    -Infinity\n\n    See Also\n    --------\n    base.toBinaryStringf, base.fromBinaryString\n","base.fromBinaryStringUint8":"\nbase.fromBinaryStringUint8( bstr )\n    Creates an unsigned 8-bit integer from a literal bit representation.\n\n    Parameters\n    ----------\n    bstr: string\n        Literal bit representation.\n\n    Returns\n    -------\n    out: integer\n        Unsigned 8-bit integer.\n\n    Examples\n    --------\n    > var bstr = '01010101';\n    > var val = base.fromBinaryStringUint8( bstr )\n    85\n    > bstr = '00000000';\n    > val = base.fromBinaryStringUint8( bstr )\n    0\n    > bstr = '00000010';\n    > val = base.fromBinaryStringUint8( bstr )\n    2\n    > bstr = '11111111';\n    > val = base.fromBinaryStringUint8( bstr )\n    255\n\n    See Also\n    --------\n    base.fromBinaryStringUint16, base.fromBinaryStringUint32, base.toBinaryStringUint8\n","base.fromBinaryStringUint16":"\nbase.fromBinaryStringUint16( bstr )\n    Creates an unsigned 16-bit integer from a literal bit representation.\n\n    Parameters\n    ----------\n    bstr: string\n        Literal bit representation.\n\n    Returns\n    -------\n    out: integer\n        Unsigned 16-bit integer.\n\n    Examples\n    --------\n    > var bstr = '0101010101010101';\n    > var val = base.fromBinaryStringUint16( bstr )\n    21845\n    > bstr = '0000000000000000';\n    > val = base.fromBinaryStringUint16( bstr )\n    0\n    > bstr = '0000000000000010';\n    > val = base.fromBinaryStringUint16( bstr )\n    2\n    > bstr = '1111111111111111';\n    > val = base.fromBinaryStringUint16( bstr )\n    65535\n\n    See Also\n    --------\n    base.toBinaryStringUint16, base.fromBinaryStringUint32, base.fromBinaryStringUint8\n","base.fromBinaryStringUint32":"\nbase.fromBinaryStringUint32( bstr )\n    Creates an unsigned 32-bit integer from a literal bit representation.\n\n    Parameters\n    ----------\n    bstr: string\n        Literal bit representation.\n\n    Returns\n    -------\n    out: integer\n        Unsigned 32-bit integer.\n\n    Examples\n    --------\n    > var bstr = '01010101010101010101010101010101';\n    > var val = base.fromBinaryStringUint32( bstr )\n    1431655765\n    > bstr = '00000000000000000000000000000000';\n    > val = base.fromBinaryStringUint32( bstr )\n    0\n    > bstr = '00000000000000000000000000000010';\n    > val = base.fromBinaryStringUint32( bstr )\n    2\n    > bstr = '11111111111111111111111111111111';\n    > val = base.fromBinaryStringUint32( bstr )\n    4294967295\n\n    See Also\n    --------\n    base.fromBinaryStringUint16, base.toBinaryStringUint32, base.fromBinaryStringUint8\n","base.fromWordf":"\nbase.fromWordf( x )\n    Creates a single-precision floating-point number from an unsigned integer\n    corresponding to an IEEE 754 binary representation.\n\n    Parameters\n    ----------\n    x: integer\n        Unsigned integer.\n\n    Returns\n    -------\n    out: float\n        Single-precision floating-point number.\n\n    Examples\n    --------\n    > var word = 1068180177; // => 0 01111111 01010110010001011010001\n    > var f32 = base.fromWordf( word ) // when printed, promoted to float64\n    1.3370000123977661\n\n    See Also\n    --------\n    base.fromWords\n","base.fromWords":"\nbase.fromWords( high, low )\n    Creates a double-precision floating-point number from a higher order word\n    (unsigned 32-bit integer) and a lower order word (unsigned 32-bit integer).\n\n    Parameters\n    ----------\n    high: integer\n        Higher order word (unsigned 32-bit integer).\n\n    low: integer\n        Lower order word (unsigned 32-bit integer).\n\n    Returns\n    -------\n    out: number\n        Double-precision floating-point number.\n\n    Examples\n    --------\n    > var v = base.fromWords( 1774486211, 2479577218 )\n    3.14e201\n    > v = base.fromWords( 3221823995, 1413754136 )\n    -3.141592653589793\n    > v = base.fromWords( 0, 0 )\n    0.0\n    > v = base.fromWords( 2147483648, 0 )\n    -0.0\n    > v = base.fromWords( 2146959360, 0 )\n    NaN\n    > v = base.fromWords( 2146435072, 0 )\n    Infinity\n    > v = base.fromWords( 4293918720, 0 )\n    -Infinity\n\n    See Also\n    --------\n    base.fromWordf\n","base.gamma":"\nbase.gamma( x )\n    Evaluates the gamma function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.gamma( 4.0 )\n    6.0\n    > y = base.gamma( -1.5 )\n    ~2.363\n    > y = base.gamma( -0.5 )\n    ~-3.545\n    > y = base.gamma( 0.5 )\n    ~1.772\n    > y = base.gamma( 0.0 )\n    Infinity\n    > y = base.gamma( -0.0 )\n    -Infinity\n    > y = base.gamma( NaN )\n    NaN\n\n    See Also\n    --------\n    base.gamma1pm1, base.gammainc, base.gammaincinv, base.gammaln\n","base.gamma1pm1":"\nbase.gamma1pm1( x )\n    Computes `gamma(x+1) - 1` without cancellation errors, where `gamma(x)` is\n    the gamma function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.gamma1pm1( 0.2 )\n    ~-0.082\n    > y = base.gamma1pm1( -6.7 )\n    ~-0.991\n    > y = base.gamma1pm1( 0.0 )\n    0.0\n    > y = base.gamma1pm1( NaN )\n    NaN\n\n    See Also\n    --------\n    base.gamma, base.gammainc, base.gammaincinv, base.gammaln\n","base.gammaDeltaRatio":"\nbase.gammaDeltaRatio( z, delta )\n    Computes the ratio of two gamma functions.\n\n    The ratio is defined as: Γ(z) / Γ(z+Δ).\n\n    Parameters\n    ----------\n    z: number\n        First gamma parameter.\n\n    delta: number\n        Difference.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.gammaDeltaRatio( 2.0, 3.0 )\n    ~0.042\n    > y = base.gammaDeltaRatio( 4.0, 0.5 )\n    ~0.516\n    > y = base.gammaDeltaRatio( 100.0, 0.0 )\n    1.0\n    > y = base.gammaDeltaRatio( NaN, 3.0 )\n    NaN\n    > y = base.gammaDeltaRatio( 5.0, NaN )\n    NaN\n    > y = base.gammaDeltaRatio( NaN, NaN )\n    NaN\n\n    See Also\n    --------\n    base.gamma\n","base.gammainc":"\nbase.gammainc( x, s[, regularized[, upper]] )\n    Computes the regularized incomplete gamma function.\n\n    The `regularized` and `upper` parameters specify whether to evaluate the\n    non-regularized and/or upper incomplete gamma functions, respectively.\n\n    If provided `x < 0` or `s <= 0`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        First function parameter.\n\n    s: number\n        Second function parameter.\n\n    regularized: boolean (optional)\n        Boolean indicating whether the function should evaluate the regularized\n        or non-regularized incomplete gamma function. Default: `true`.\n\n    upper: boolean (optional)\n        Boolean indicating whether the function should return the upper tail of\n        the incomplete gamma function. Default: `false`.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.gammainc( 6.0, 2.0 )\n    ~0.9826\n    > y = base.gammainc( 1.0, 2.0, true, true )\n    ~0.7358\n    > y = base.gammainc( 7.0, 5.0 )\n    ~0.8270\n    > y = base.gammainc( 7.0, 5.0, false )\n    ~19.8482\n    > y = base.gammainc( NaN, 2.0 )\n    NaN\n    > y = base.gammainc( 6.0, NaN )\n    NaN\n\n    See Also\n    --------\n    base.gamma, base.gamma1pm1, base.gammaincinv, base.gammaln\n","base.gammaincinv":"\nbase.gammaincinv( p, a[, upper] )\n    Computes the inverse of the lower incomplete gamma function.\n\n    In contrast to a more commonly used definition, the first argument is the\n    probability `p` and the second argument is the scale factor `a`.\n\n    By default, the function inverts the lower regularized incomplete gamma\n    function, `P(x,a)`. To invert the upper function `Q(x,a)`, set the `upper`\n    argument to `true`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    If provided `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Probability.\n\n    a: number\n        Scale parameter.\n\n    upper: boolean (optional)\n        Boolean indicating if the function should invert the upper tail of the\n        incomplete gamma function; i.e., compute `xr` such that `Q(a,xr) = p`.\n        Default: `false`.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.gammaincinv( 0.5, 2.0 )\n    ~1.678\n    > y = base.gammaincinv( 0.1, 10.0 )\n    ~6.221\n    > y = base.gammaincinv( 0.75, 3.0 )\n    ~3.92\n    > y = base.gammaincinv( 0.75, 3.0, true )\n    ~1.727\n    > y = base.gammaincinv( 0.75, NaN )\n    NaN\n    > y = base.gammaincinv( NaN, 3.0 )\n    NaN\n\n    See Also\n    --------\n    base.gamma, base.gamma1pm1, base.gammainc, base.gammaln\n","base.gammaLanczosSum":"\nbase.gammaLanczosSum( x )\n    Calculates the Lanczos sum for the approximation of the gamma function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Lanczos sum.\n\n    Examples\n    --------\n    > var y = base.gammaLanczosSum( 4.0 )\n    ~950.366\n    > y = base.gammaLanczosSum( -1.5 )\n    ~1373366.245\n    > y = base.gammaLanczosSum( -0.5 )\n    ~-699841.735\n    > y = base.gammaLanczosSum( 0.5 )\n    ~96074.186\n    > y = base.gammaLanczosSum( 0.0 )\n    Infinity\n    > y = base.gammaLanczosSum( NaN )\n    NaN\n\n    See Also\n    --------\n    base.gamma, base.gammaLanczosSumExpGScaled\n","base.gammaLanczosSumExpGScaled":"\nbase.gammaLanczosSumExpGScaled( x )\n    Calculates the scaled Lanczos sum for the approximation of the gamma\n    function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Scaled Lanczos sum.\n\n    Examples\n    --------\n    > var y = base.gammaLanczosSumExpGScaled( 4.0 )\n    ~0.018\n    > y = base.gammaLanczosSumExpGScaled( -1.5 )\n    ~25.337\n    > y = base.gammaLanczosSumExpGScaled( -0.5 )\n    ~-12.911\n    > y = base.gammaLanczosSumExpGScaled( 0.5 )\n    ~1.772\n    > y = base.gammaLanczosSumExpGScaled( 0.0 )\n    Infinity\n    > y = base.gammaLanczosSumExpGScaled( NaN )\n    NaN\n\n    See Also\n    --------\n    base.gamma, base.gammaLanczosSum\n","base.gammaln":"\nbase.gammaln( x )\n    Evaluates the natural logarithm of the gamma function.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Natural logarithm of the gamma function.\n\n    Examples\n    --------\n    > var y = base.gammaln( 1.0 )\n    0.0\n    > y = base.gammaln( 2.0 )\n    0.0\n    > y = base.gammaln( 4.0 )\n    ~1.792\n    > y = base.gammaln( -0.5 )\n    ~1.266\n    > y = base.gammaln( 0.5 )\n    ~0.572\n    > y = base.gammaln( 0.0 )\n    Infinity\n    > y = base.gammaln( NaN )\n    NaN\n\n    See Also\n    --------\n    base.gamma, base.gammainc, base.gammaincinv\n","base.gasum":"\nbase.gasum( N, x, stride )\n    Computes the sum of the absolute values.\n\n    The sum of absolute values corresponds to the *L1* norm.\n\n    The `N` and `stride` parameters determine which elements in `x` are used to\n    compute the sum.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N` or `stride` is less than or equal to `0`, the function returns `0`.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Array<number>|TypedArray\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    Returns\n    -------\n    sum: number\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n    > var sum = base.gasum( x.length, x, 1 )\n    19.0\n\n    // Sum every other value:\n    > var N = base.floor( x.length / 2 );\n    > var stride = 2;\n    > sum = base.gasum( N, x, stride )\n    10.0\n\n    // Use view offset; e.g., starting at 2nd element:\n    > var x0 = new Float64Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n    > var x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > N = base.floor( x0.length / 2 );\n    > sum = base.gasum( N, x1, stride )\n    12.0\n\n\nbase.gasum.ndarray( N, x, stride, offset )\n    Computes the sum of absolute values using alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameter supports indexing semantics based on a\n    starting index.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Array<number>|TypedArray\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    offset: integer\n        Starting index.\n\n    Returns\n    -------\n    sum: number\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n    > var sum = base.gasum.ndarray( x.length, x, 1, 0 )\n    19.0\n\n    // Sum the last three elements:\n    > x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n    > sum = base.gasum.ndarray( 3, x, -1, x.length-1 )\n    15.0\n\n    See Also\n    --------\n    base.dasum, base.sasum\n","base.gasum.ndarray":"\nbase.gasum.ndarray( N, x, stride, offset )\n    Computes the sum of absolute values using alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameter supports indexing semantics based on a\n    starting index.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Array<number>|TypedArray\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    offset: integer\n        Starting index.\n\n    Returns\n    -------\n    sum: number\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];\n    > var sum = base.gasum.ndarray( x.length, x, 1, 0 )\n    19.0\n\n    // Sum the last three elements:\n    > x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];\n    > sum = base.gasum.ndarray( 3, x, -1, x.length-1 )\n    15.0\n\n    See Also\n    --------\n    base.dasum, base.sasum\n","base.gaxpy":"\nbase.gaxpy( N, alpha, x, strideX, y, strideY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`.\n\n    The `N` and `stride` parameters determine which elements in `x` and `y` are\n    accessed at runtime.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N <= 0` or `alpha == 0`, the function returns `y` unchanged.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: number\n        Constant.\n\n    x: Array|TypedArray\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    y: Array|TypedArray\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    Returns\n    -------\n    y: Array|TypedArray\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n    > var alpha = 5.0;\n    > base.gaxpy( x.length, alpha, x, 1, y, 1 )\n    [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Using `N` and `stride` parameters:\n    > x = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n    > y = [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ];\n    > var N = base.floor( x.length / 2 );\n    > base.gaxpy( N, alpha, x, 2, y, -1 )\n    [ 26.0, 16.0, 6.0, 1.0, 1.0, 1.0 ]\n\n    // Using view offsets:\n    > var x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > var y0 = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > var y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\n    > N = base.floor( x0.length / 2 );\n    > base.gaxpy( N, 5.0, x1, -2, y1, 1 )\n    <Float64Array>[ 40.0, 31.0, 22.0 ]\n    > y0\n    <Float64Array>[ 7.0, 8.0, 9.0, 40.0, 31.0, 22.0 ]\n\n\nbase.gaxpy.ndarray( N, alpha, x, strideX, offsetX, y, strideY, offsetY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`, with\n    alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offsetX` and `offsetY` parameters support indexing semantics\n    based on starting indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: number\n        Constant.\n\n    x: Array|TypedArray\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Array|TypedArray\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Array|TypedArray\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n    > var alpha = 5.0;\n    > base.gaxpy.ndarray( x.length, alpha, x, 1, 0, y, 1, 0 )\n    [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Advanced indexing:\n    > x = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n    > y = [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ];\n    > var N = base.floor( x.length / 2 );\n    > base.gaxpy.ndarray( N, alpha, x, 2, 1, y, -1, y.length-1 )\n    [ 7.0, 8.0, 9.0, 40.0, 31.0, 22.0 ]\n\n    See Also\n    --------\n    base.daxpy, base.saxpy\n","base.gaxpy.ndarray":"\nbase.gaxpy.ndarray( N, alpha, x, strideX, offsetX, y, strideY, offsetY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`, with\n    alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offsetX` and `offsetY` parameters support indexing semantics\n    based on starting indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: number\n        Constant.\n\n    x: Array|TypedArray\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Array|TypedArray\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Array|TypedArray\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > var y = [ 1.0, 1.0, 1.0, 1.0, 1.0 ];\n    > var alpha = 5.0;\n    > base.gaxpy.ndarray( x.length, alpha, x, 1, 0, y, 1, 0 )\n    [ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Advanced indexing:\n    > x = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n    > y = [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ];\n    > var N = base.floor( x.length / 2 );\n    > base.gaxpy.ndarray( N, alpha, x, 2, 1, y, -1, y.length-1 )\n    [ 7.0, 8.0, 9.0, 40.0, 31.0, 22.0 ]\n\n    See Also\n    --------\n    base.daxpy, base.saxpy\n","base.gcd":"\nbase.gcd( a, b )\n    Computes the greatest common divisor (gcd).\n\n    If both `a` and `b` are `0`, the function returns `0`.\n\n    Both `a` and `b` must have integer values; otherwise, the function returns\n    `NaN`.\n\n    Parameters\n    ----------\n    a: integer\n        First integer.\n\n    b: integer\n        Second integer.\n\n    Returns\n    -------\n    out: integer\n        Greatest common divisor.\n\n    Examples\n    --------\n    > var v = base.gcd( 48, 18 )\n    6\n\n    See Also\n    --------\n    base.lcm\n","base.gcopy":"\nbase.gcopy( N, x, strideX, y, strideY )\n    Copies values from `x` into `y`.\n\n    The `N` and `stride` parameters determine how values from `x` are copied\n    into `y`.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N` is less than or equal to `0`, the function returns `y` unchanged.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Array|TypedArray\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    y: Array|TypedArray\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    Returns\n    -------\n    y: Array|TypedArray\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n    > base.gcopy( x.length, x, 1, y, 1 )\n    [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n    > y = [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ];\n    > var N = base.floor( x.length / 2 );\n    > base.gcopy( N, x, -2, y, 1 )\n    [ 5.0, 3.0, 1.0, 10.0, 11.0, 12.0 ]\n\n    // Using typed array views:\n    > var x0 = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > var y0 = new Float64Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var x1 = new Float64Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > var y1 = new Float64Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\n    > N = base.floor( x0.length / 2 );\n    > base.gcopy( N, x1, -2, y1, 1 )\n    <Float64Array>[ 6.0, 4.0, 2.0 ]\n    > y0\n    <Float64Array>[ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n\nbase.gcopy.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )\n    Copies values from `x` into `y`, with alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameters support indexing semantics based on starting\n    indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Array|TypedArray\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Array|TypedArray\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Array|TypedArray\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n    > base.gcopy.ndarray( x.length, x, 1, 0, y, 1, 0 )\n    [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n    > y = [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ];\n    > var N = base.floor( x.length / 2 );\n    > base.gcopy.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n    [ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n    See Also\n    --------\n    base.dcopy\n","base.gcopy.ndarray":"\nbase.gcopy.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )\n    Copies values from `x` into `y`, with alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameters support indexing semantics based on starting\n    indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Array|TypedArray\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Array|TypedArray\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Array|TypedArray\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];\n    > base.gcopy.ndarray( x.length, x, 1, 0, y, 1, 0 )\n    [ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n    > y = [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ];\n    > var N = base.floor( x.length / 2 );\n    > base.gcopy.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n    [ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n    See Also\n    --------\n    base.dcopy\n","base.getHighWord":"\nbase.getHighWord( x )\n    Returns an unsigned 32-bit integer corresponding to the more significant 32\n    bits of a double-precision floating-point number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    out: integer\n        Higher order word (unsigned 32-bit integer).\n\n    Examples\n    --------\n    > var w = base.getHighWord( 3.14e201 )\n    1774486211\n\n    See Also\n    --------\n    base.getLowWord, base.setHighWord\n","base.getLowWord":"\nbase.getLowWord( x )\n    Returns an unsigned 32-bit integer corresponding to the less significant 32\n    bits of a double-precision floating-point number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    out: integer\n        Lower order word (unsigned 32-bit integer).\n\n    Examples\n    --------\n    > var w = base.getLowWord( 3.14e201 )\n    2479577218\n\n    See Also\n    --------\n    base.getHighWord, base.setHighWord\n","base.hacovercos":"\nbase.hacovercos( x )\n    Computes the half-value coversed cosine.\n\n    The half-value coversed cosine is defined as `(1 + sin(x)) / 2`.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Half-value coversed cosine.\n\n    Examples\n    --------\n    > var y = base.hacovercos( 3.14 )\n    ~0.5008\n    > y = base.hacovercos( -4.2 )\n    ~0.9358\n    > y = base.hacovercos( -4.6 )\n    ~0.9968\n    > y = base.hacovercos( 9.5 )\n    ~0.4624\n    > y = base.hacovercos( -0.0 )\n    0.5\n\n    See Also\n    --------\n    base.hacoversin, base.havercos\n","base.hacoversin":"\nbase.hacoversin( x )\n    Computes the half-value coversed sine.\n\n    The half-value coversed sine is defined as `(1 - sin(x)) / 2`.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Half-value coversed sine.\n\n    Examples\n    --------\n    > var y = base.hacoversin( 3.14 )\n    ~0.4992\n    > y = base.hacoversin( -4.2 )\n    ~0.0642\n    > y = base.hacoversin( -4.6 )\n    ~0.0032\n    > y = base.hacoversin( 9.5 )\n    ~0.538\n    > y = base.hacoversin( -0.0 )\n    0.5\n\n    See Also\n    --------\n    base.hacovercos, base.haversin\n","base.havercos":"\nbase.havercos( x )\n    Computes the half-value versed cosine.\n\n    The half-value versed cosine is defined as `(1 + cos(x)) / 2`.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Half-value versed cosine.\n\n    Examples\n    --------\n    > var y = base.havercos( 3.14 )\n    ~0.0\n    > y = base.havercos( -4.2 )\n    ~0.2549\n    > y = base.havercos( -4.6 )\n    ~0.4439\n    > y = base.havercos( 9.5 )\n    ~0.0014\n    > y = base.havercos( -0.0 )\n    1.0\n\n    See Also\n    --------\n    base.haversin, base.vercos\n","base.haversin":"\nbase.haversin( x )\n    Computes the half-value versed sine.\n\n    The half-value versed sine is defined as `(1 - cos(x)) / 2`.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Half-value versed sine.\n\n    Examples\n    --------\n    > var y = base.haversin( 3.14 )\n    ~1.0\n    > y = base.haversin( -4.2 )\n    ~0.7451\n    > y = base.haversin( -4.6 )\n    ~0.5561\n    > y = base.haversin( 9.5 )\n    ~0.9986\n    > y = base.haversin( -0.0 )\n    0.0\n\n    See Also\n    --------\n    base.havercos, base.versin\n","base.heaviside":"\nbase.heaviside( x[, continuity] )\n    Evaluates the Heaviside function.\n\n    The `continuity` parameter may be one of the following:\n\n    - 'half-maximum': if `x == 0`, the function returns `0.5`.\n    - 'left-continuous': if `x == 0`, the function returns `0`.\n    - 'right-continuous': if `x == 0`, the function returns `1`.\n\n    By default, if `x == 0`, the function returns `NaN` (i.e., the function is\n    discontinuous).\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    continuity: string (optional)\n        Specifies how to handle `x == 0`. By default, if `x == 0`, the function\n        returns `NaN`.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.heaviside( 3.14 )\n    1.0\n    > y = base.heaviside( -3.14 )\n    0.0\n    > y = base.heaviside( 0.0 )\n    NaN\n    > y = base.heaviside( 0.0, 'half-maximum' )\n    0.5\n    > y = base.heaviside( 0.0, 'left-continuous' )\n    0.0\n    > y = base.heaviside( 0.0, 'right-continuous' )\n    1.0\n\n    See Also\n    --------\n    base.ramp\n","base.hermitepoly":"\nbase.hermitepoly( n, x )\n    Evaluates a physicist's Hermite polynomial.\n\n    Parameters\n    ----------\n    n: integer\n        Nonnegative polynomial degree.\n\n    x: number\n        Value at which to evaluate the polynomial.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.hermitepoly( 1, 0.5 )\n    1.0\n    > y = base.hermitepoly( -1, 0.5 )\n    NaN\n    > y = base.hermitepoly( 0, 0.5 )\n    1.0\n    > y = base.hermitepoly( 2, 0.5 )\n    -1.0\n\n\nbase.hermitepoly.factory( n )\n    Returns a function for evaluating a physicist's Hermite polynomial.\n\n    Parameters\n    ----------\n    n: integer\n        Nonnegative polynomial degree.\n\n    Returns\n    -------\n    fcn: Function\n        Function for evaluating a physicist's Hermite polynomial.\n\n    Examples\n    --------\n    > var polyval = base.hermitepoly.factory( 2 );\n    > var v = polyval( 0.5 )\n    -1.0\n\n    See Also\n    --------\n    base.evalpoly, base.normhermitepoly\n","base.hermitepoly.factory":"\nbase.hermitepoly.factory( n )\n    Returns a function for evaluating a physicist's Hermite polynomial.\n\n    Parameters\n    ----------\n    n: integer\n        Nonnegative polynomial degree.\n\n    Returns\n    -------\n    fcn: Function\n        Function for evaluating a physicist's Hermite polynomial.\n\n    Examples\n    --------\n    > var polyval = base.hermitepoly.factory( 2 );\n    > var v = polyval( 0.5 )\n    -1.0\n\n    See Also\n    --------\n    base.evalpoly, base.normhermitepoly\n","base.hypot":"\nbase.hypot( x, y )\n    Computes the hypotenuse avoiding overflow and underflow.\n\n    If either argument is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        First number.\n\n    y: number\n        Second number.\n\n    Returns\n    -------\n    out: number\n        Hypotenuse.\n\n    Examples\n    --------\n    > var h = base.hypot( -5.0, 12.0 )\n    13.0\n    > h = base.hypot( NaN, 12.0 )\n    NaN\n    > h = base.hypot( -0.0, -0.0 )\n    0.0\n\n","base.imul":"\nbase.imul( a, b )\n    Performs C-like multiplication of two signed 32-bit integers.\n\n    Parameters\n    ----------\n    a: integer\n        Signed 32-bit integer.\n\n    b: integer\n        Signed 32-bit integer.\n\n    Returns\n    -------\n    out: integer\n        Product.\n\n    Examples\n    --------\n    > var v = base.imul( -10|0, 4|0 )\n    -40\n\n    See Also\n    --------\n    base.imuldw, base.uimul\n","base.imuldw":"\nbase.imuldw( [out,] a, b )\n    Multiplies two signed 32-bit integers and returns an array of two signed 32-\n    bit integers which represents the signed 64-bit integer product.\n\n    When computing the product of 32-bit integer values in double-precision\n    floating-point format (the default JavaScript numeric data type), computing\n    the double word product is necessary in order to avoid exceeding the maximum\n    safe double-precision floating-point integer value.\n\n    Parameters\n    ----------\n    out: ArrayLikeObject (optional)\n        The output array.\n\n    a: integer\n        Signed 32-bit integer.\n\n    b: integer\n        Signed 32-bit integer.\n\n    Returns\n    -------\n    out: ArrayLikeObject\n        Double word product (in big endian order; i.e., the first element\n        corresponds to the most significant bits and the second element to the\n        least significant bits).\n\n    Examples\n    --------\n    > var v = base.imuldw( 1, 10 )\n    [ 0, 10 ]\n\n    See Also\n    --------\n    base.imul, base.uimuldw\n","base.int32ToUint32":"\nbase.int32ToUint32( x )\n    Converts a signed 32-bit integer to an unsigned 32-bit integer.\n\n    Parameters\n    ----------\n    x: integer\n        Signed 32-bit integer.\n\n    Returns\n    -------\n    out: integer\n        Unsigned 32-bit integer.\n\n    Examples\n    --------\n    > var y = base.int32ToUint32( base.float64ToInt32( -32 ) )\n    4294967264\n    > y = base.int32ToUint32( base.float64ToInt32( 3 ) )\n    3\n\n    See Also\n    --------\n    base.uint32ToInt32\n","base.inv":"\nbase.inv( x )\n    Computes the multiplicative inverse of `x`.\n\n    The multiplicative inverse is defined as `1/x`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Multiplicative inverse.\n\n    Examples\n    --------\n    > var y = base.inv( -1.0 )\n    -1.0\n    > y = base.inv( 2.0 )\n    0.5\n    > y = base.inv( 0.0 )\n    Infinity\n    > y = base.inv( -0.0 )\n    -Infinity\n    > y = base.inv( NaN )\n    NaN\n\n    See Also\n    --------\n    base.pow\n","base.isEven":"\nbase.isEven( x )\n    Tests if a finite numeric value is an even number.\n\n    The function assumes a finite number. If provided positive or negative\n    infinity, the function will return `true`, when, in fact, the result is\n    undefined.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is an even number.\n\n    Examples\n    --------\n    > var bool = base.isEven( 5.0 )\n    false\n    > bool = base.isEven( -2.0 )\n    true\n    > bool = base.isEven( 0.0 )\n    true\n    > bool = base.isEven( NaN )\n    false\n\n    See Also\n    --------\n    base.isOdd\n","base.isEvenInt32":"\nbase.isEvenInt32( x )\n    Tests if a 32-bit integer is even.\n\n    Parameters\n    ----------\n    x: integer\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is an even number.\n\n    Examples\n    --------\n    > var bool = base.isEvenInt32( 5 )\n    false\n    > bool = base.isEvenInt32( -2 )\n    true\n    > bool = base.isEvenInt32( 0 )\n    true\n\n    See Also\n    --------\n    base.isEven, base.isOddInt32\n","base.isFinite":"\nbase.isFinite( x )\n    Tests if a numeric value is finite.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is finite.\n\n    Examples\n    --------\n    > var bool = base.isFinite( 5.0 )\n    true\n    > bool = base.isFinite( -2.0e64 )\n    true\n    > bool = base.isFinite( PINF )\n    false\n    > bool = base.isFinite( NINF )\n    false\n\n    See Also\n    --------\n    base.isInfinite\n","base.isInfinite":"\nbase.isInfinite( x )\n    Tests if a numeric value is infinite.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is infinite.\n\n    Examples\n    --------\n    > var bool = base.isInfinite( PINF )\n    true\n    > bool = base.isInfinite( NINF )\n    true\n    > bool = base.isInfinite( 5.0 )\n    false\n    > bool = base.isInfinite( NaN )\n    false\n\n    See Also\n    --------\n    base.isFinite\n","base.isInteger":"\nbase.isInteger( x )\n    Tests if a finite double-precision floating-point number is an integer.\n\n    The function assumes a finite number. If provided positive or negative\n    infinity, the function will return `true`, when, in fact, the result is\n    undefined.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is an integer.\n\n    Examples\n    --------\n    > var bool = base.isInteger( 1.0 )\n    true\n    > bool = base.isInteger( 3.14 )\n    false\n\n","base.isnan":"\nbase.isnan( x )\n     Tests if a numeric value is `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is `NaN`.\n\n    Examples\n    --------\n    > var bool = base.isnan( NaN )\n    true\n    > bool = base.isnan( 7.0 )\n    false\n\n","base.isNegativeInteger":"\nbase.isNegativeInteger( x )\n    Tests if a finite double-precision floating-point number is a negative\n    integer.\n\n    The function assumes a finite number. If provided negative infinity, the\n    function will return `true`, when, in fact, the result is undefined.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is a negative integer.\n\n    Examples\n    --------\n    > var bool = base.isNegativeInteger( -1.0 )\n    true\n    > bool = base.isNegativeInteger( 0.0 )\n    false\n    > bool = base.isNegativeInteger( 10.0 )\n    false\n\n    See Also\n    --------\n    base.isInteger, base.isNonNegativeInteger, base.isNonPositiveInteger, base.isPositiveInteger\n","base.isNegativeZero":"\nbase.isNegativeZero( x )\n    Tests if a numeric value is negative zero.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is negative zero.\n\n    Examples\n    --------\n    > var bool = base.isNegativeZero( -0.0 )\n    true\n    > bool = base.isNegativeZero( 0.0 )\n    false\n\n    See Also\n    --------\n    base.isPositiveZero\n","base.isNonNegativeInteger":"\nbase.isNonNegativeInteger( x )\n    Tests if a finite double-precision floating-point number is a nonnegative\n    integer.\n\n    The function assumes a finite number. If provided positive infinity, the\n    function will return `true`, when, in fact, the result is undefined.\n\n    The function does not distinguish between positive and negative zero.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is a nonnegative integer.\n\n    Examples\n    --------\n    > var bool = base.isNonNegativeInteger( 1.0 )\n    true\n    > bool = base.isNonNegativeInteger( 0.0 )\n    true\n    > bool = base.isNonNegativeInteger( -10.0 )\n    false\n\n    See Also\n    --------\n    base.isInteger, base.isNegativeInteger, base.isNonPositiveInteger, base.isPositiveInteger\n","base.isNonPositiveInteger":"\nbase.isNonPositiveInteger( x )\n    Tests if a finite double-precision floating-point number is a nonpositive\n    integer.\n\n    The function assumes a finite number. If provided negative infinity, the\n    function will return `true`, when, in fact, the result is undefined.\n\n    The function does not distinguish between positive and negative zero.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is a nonpositive integer.\n\n    Examples\n    --------\n    > var bool = base.isNonPositiveInteger( -1.0 )\n    true\n    > bool = base.isNonPositiveInteger( 0.0 )\n    true\n    > bool = base.isNonPositiveInteger( 10.0 )\n    false\n\n    See Also\n    --------\n    base.isInteger, base.isNegativeInteger, base.isNonNegativeInteger, base.isPositiveInteger\n","base.isOdd":"\nbase.isOdd( x )\n    Tests if a finite numeric value is an odd number.\n\n    The function assumes a finite number. If provided positive or negative\n    infinity, the function will return `true`, when, in fact, the result is\n    undefined.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is an odd number.\n\n    Examples\n    --------\n    > var bool = base.isOdd( 5.0 )\n    true\n    > bool = base.isOdd( -2.0 )\n    false\n    > bool = base.isOdd( 0.0 )\n    false\n    > bool = base.isOdd( NaN )\n    false\n\n    See Also\n    --------\n    base.isEven\n","base.isOddInt32":"\nbase.isOddInt32( x )\n    Tests if a 32-bit integer is odd.\n\n    Parameters\n    ----------\n    x: integer\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is an odd number.\n\n    Examples\n    --------\n    > var bool = base.isOddInt32( 5 )\n    true\n    > bool = base.isOddInt32( -2 )\n    false\n    > bool = base.isOddInt32( 0 )\n    false\n\n    See Also\n    --------\n    base.isEvenInt32, base.isOdd\n","base.isPositiveInteger":"\nbase.isPositiveInteger( x )\n    Tests if a finite double-precision floating-point number is a positive\n    integer.\n\n    The function assumes a finite number. If provided positive infinity, the\n    function will return `true`, when, in fact, the result is undefined.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is a positive integer.\n\n    Examples\n    --------\n    > var bool = base.isPositiveInteger( 1.0 )\n    true\n    > bool = base.isPositiveInteger( 0.0 )\n    false\n    > bool = base.isPositiveInteger( -10.0 )\n    false\n\n    See Also\n    --------\n    base.isInteger, base.isNegativeInteger, base.isNonNegativeInteger, base.isNonPositiveInteger\n","base.isPositiveZero":"\nbase.isPositiveZero( x )\n    Tests if a numeric value is positive zero.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is positive zero.\n\n    Examples\n    --------\n    > var bool = base.isPositiveZero( 0.0 )\n    true\n    > bool = base.isPositiveZero( -0.0 )\n    false\n\n    See Also\n    --------\n    base.isNegativeZero\n","base.isPow2Uint32":"\nbase.isPow2Uint32( x )\n    Tests whether an unsigned integer is a power of 2.\n\n    Parameters\n    ----------\n    x: integer\n        Unsigned integer.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is a power of 2.\n\n    Examples\n    --------\n    > var bool = base.isPow2Uint32( 2 )\n    true\n    > bool = base.isPow2Uint32( 5 )\n    false\n\n","base.isProbability":"\nbase.isProbability( x )\n    Tests if a numeric value is a probability.\n\n    A probability is defined as a numeric value on the closed interval `[0,1]`.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is a probability.\n\n    Examples\n    --------\n    > var bool = base.isProbability( 0.5 )\n    true\n    > bool = base.isProbability( 3.14 )\n    false\n    > bool = base.isProbability( NaN )\n    false\n\n","base.isSafeInteger":"\nbase.isSafeInteger( x )\n    Tests if a finite double-precision floating-point number is a safe integer.\n\n    An integer valued number is \"safe\" when the number can be exactly\n    represented as a double-precision floating-point number.\n\n    Parameters\n    ----------\n    x: number\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the value is a safe integer.\n\n    Examples\n    --------\n    > var bool = base.isSafeInteger( 1.0 )\n    true\n    > bool = base.isSafeInteger( 2.0e200 )\n    false\n    > bool = base.isSafeInteger( 3.14 )\n    false\n\n","base.kernelBetainc":"\nbase.kernelBetainc( [out,] x, a, b, regularized, upper )\n    Computes the kernel function for the regularized incomplete beta function.\n\n    The `regularized` and `upper` parameters specify whether to evaluate the\n    non-regularized and/or upper incomplete beta functions, respectively.\n\n    If provided `x < 0` or `x > 1`, the function returns `[ NaN, NaN ]`.\n\n    If provided `a < 0` or `b < 0`, the function returns `[ NaN, NaN ]`.\n\n    If provided `NaN` for `x`, `a`, or `b`, the function returns `[ NaN, NaN ]`.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    x: number\n        First function parameter.\n\n    a: number\n        Second function parameter.\n\n    b: number\n        Third function parameter.\n\n    regularized: boolean\n        Boolean indicating whether the function should evaluate the regularized\n        or non-regularized incomplete beta function.\n\n    upper: boolean\n        Boolean indicating whether the function should return the upper tail of\n        the incomplete beta function.\n\n    Returns\n    -------\n    y: Array|TypedArray|Object\n        Function value and first derivative.\n\n    Examples\n    --------\n    > var out = base.kernelBetainc( 0.8, 1.0, 0.3, false, false )\n    [ ~1.277, ~0.926 ]\n    > out = base.kernelBetainc( 0.2, 1.0, 2.0, true, false )\n    [ 0.32, 1.6 ]\n\n    > out = new Array( 2 );\n    > var v = base.kernelBetainc( out, 0.2, 1.0, 2.0, true, true )\n    [ 0.64, 1.6 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.betainc\n","base.kernelBetaincinv":"\nbase.kernelBetaincinv( a, b, p, q )\n    Computes the inverse of the lower incomplete beta function.\n\n    Probabilities `p` and `q` must satisfy `p = 1 - q`.\n\n    Parameters\n    ----------\n    a: number\n        First function parameter (a positive number).\n\n    b: number\n        Second function parameter (a positive number).\n\n    p: number\n        Probability.\n\n    q: number\n        Probability equal to `1-p`.\n\n    Returns\n    -------\n    out: Array\n        Two-element array holding function value `y` and `1-y`.\n\n    Examples\n    --------\n    > var y = base.kernelBetaincinv( 3.0, 3.0, 0.2, 0.8 )\n    [ ~0.327, ~0.673 ]\n    > y = base.kernelBetaincinv( 3.0, 3.0, 0.4, 0.6 )\n    [ ~0.446, ~0.554 ]\n    > y = base.kernelBetaincinv( 1.0, 6.0, 0.4, 0.6 )\n    [ ~0.082, ~0.918 ]\n    > y = base.kernelBetaincinv( 1.0, 6.0, 0.8, 0.2 )\n    [ ~0.235, ~0.765 ]\n\n    See Also\n    --------\n    base.betaincinv\n","base.kernelCos":"\nbase.kernelCos( x, y )\n    Computes the cosine of a number on `[-π/4, π/4]`.\n\n    For increased accuracy, the number for which the cosine should be evaluated\n    can be supplied as a double-double number (i.e., a non-evaluated sum of two\n    double-precision floating-point numbers `x` and `y`).\n\n    The two numbers must satisfy `|y| < 0.5 * ulp( x )`.\n\n    If either argument is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    y: number\n        Tail of `x`.\n\n    Returns\n    -------\n    out: number\n        Cosine.\n\n    Examples\n    --------\n    > var out = base.kernelCos( 0.0, 0.0 )\n    ~1.0\n    > out = base.kernelCos( PI/6.0, 0.0 )\n    ~0.866\n    > out = base.kernelCos( 0.785, -1.144e-17 )\n    ~0.707\n    > out = base.kernelCos( NaN )\n    NaN\n\n    See Also\n    --------\n    base.cos, base.kernelSin, base.kernelTan\n","base.kernelSin":"\nbase.kernelSin( x, y )\n    Computes the sine of a number on `[-π/4, π/4]`.\n\n    For increased accuracy, the number for which the cosine should be evaluated\n    can be supplied as a double-double number (i.e., a non-evaluated sum of two\n    double-precision floating-point numbers `x` and `y`).\n\n    The two numbers must satisfy `|y| < 0.5 * ulp( x )`.\n\n    If either argument is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    y: number\n        Tail of `x`.\n\n    Returns\n    -------\n    out: number\n        Sine.\n\n    Examples\n    --------\n    > var y = base.kernelSin( 0.0, 0.0 )\n    ~0.0\n    > y = base.kernelSin( PI/6.0, 0.0 )\n    ~0.5\n    > y = base.kernelSin( 0.619, 9.279e-18 )\n    ~0.58\n\n    > y = base.kernelSin( NaN, 0.0 )\n    NaN\n    > y = base.kernelSin( 2.0, NaN )\n    NaN\n    > y = base.kernelSin( NaN, NaN )\n    NaN\n\n    See Also\n    --------\n    base.kernelCos, base.kernelTan, base.sin\n","base.kernelTan":"\nbase.kernelTan( x, y, k )\n    Computes the tangent of a number on `[-π/4, π/4]`.\n\n    For increased accuracy, the number for which the tangent should be evaluated\n    can be supplied as a double-double number (i.e., a non-evaluated sum of two\n    double-precision floating-point numbers `x` and `y`).\n\n    The numbers `x` and `y` must satisfy `|y| < 0.5 * ulp( x )`.\n\n    If either `x` or `y` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    y: number\n        Tail of `x`.\n\n    k: integer\n        If `k=1`, the function returns `tan(x+y)`. If `k=-1`, the function\n        returns the negative inverse `-1/tan(x+y)`.\n\n    Returns\n    -------\n    out: number\n        Tangent.\n\n    Examples\n    --------\n    > var out = base.kernelTan( PI/4.0, 0.0, 1 )\n    ~1.0\n    > out = base.kernelTan( PI/4.0, 0.0, -1 )\n    ~-1.0\n    > out = base.kernelTan( PI/6.0, 0.0, 1 )\n    ~0.577\n    > out = base.kernelTan( 0.664, 5.288e-17, 1 )\n    ~0.783\n\n    > out = base.kernelTan( NaN, 0.0, 1 )\n    NaN\n    > out = base.kernelTan( 3.0, NaN, 1 )\n    NaN\n    > out = base.kernelTan( 3.0, 0.0, NaN )\n    NaN\n\n    See Also\n    --------\n    base.kernelCos, base.kernelSin, base.tan\n","base.kroneckerDelta":"\nbase.kroneckerDelta( i, j )\n    Evaluates the Kronecker delta.\n\n    If `i == j`, the function returns `1`; otherwise, the function returns zero.\n\n    Parameters\n    ----------\n    i: number\n        Input value.\n\n    j: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.kroneckerDelta( 3.14, 0.0 )\n    0.0\n    > y = base.kroneckerDelta( 3.14, 3.14 )\n    1.0\n\n    See Also\n    --------\n    base.diracDelta\n","base.lcm":"\nbase.lcm( a, b )\n    Computes the least common multiple (lcm).\n\n    If either `a` or `b` is `0`, the function returns `0`.\n\n    Both `a` and `b` must have integer values; otherwise, the function returns\n    `NaN`.\n\n    Parameters\n    ----------\n    a: integer\n        First integer.\n\n    b: integer\n        Second integer.\n\n    Returns\n    -------\n    out: integer\n        Least common multiple.\n\n    Examples\n    --------\n    > var v = base.lcm( 21, 6 )\n    42\n\n    See Also\n    --------\n    base.gcd\n","base.ldexp":"\nbase.ldexp( frac, exp )\n    Multiplies a double-precision floating-point number by an integer power of\n    two; i.e., `x = frac * 2^exp`.\n\n    If `frac` equals positive or negative `zero`, `NaN`, or positive or negative\n    infinity, the function returns a value equal to `frac`.\n\n    Parameters\n    ----------\n    frac: number\n        Fraction.\n\n    exp: number\n        Exponent.\n\n    Returns\n    -------\n    out: number\n        Double-precision floating-point number equal to `frac * 2^exp`.\n\n    Examples\n    --------\n    > var x = base.ldexp( 0.5, 3 )\n    4.0\n    > x = base.ldexp( 4.0, -2 )\n    1.0\n    > x = base.ldexp( 0.0, 20 )\n    0.0\n    > x = base.ldexp( -0.0, 39 )\n    -0.0\n    > x = base.ldexp( NaN, -101 )\n    NaN\n    > x = base.ldexp( PINF, 11 )\n    Infinity\n    > x = base.ldexp( NINF, -118 )\n    -Infinity\n\n    See Also\n    --------\n    base.frexp\n","base.ln":"\nbase.ln( x )\n    Evaluates the natural logarithm.\n\n    For negative numbers, the natural logarithm is not defined.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.ln( 4.0 )\n    ~1.386\n    > y = base.ln( 0.0 )\n    -Infinity\n    > y = base.ln( PINF )\n    Infinity\n    > y = base.ln( NaN )\n    NaN\n    > y = base.ln( -4.0 )\n    NaN\n\n    See Also\n    --------\n    base.exp, base.log10, base.log1p, base.log2\n","base.log":"\nbase.log( x, b )\n    Computes the base `b` logarithm of `x`.\n\n    For negative `b` or `x`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    b: number\n        Base.\n\n    Returns\n    -------\n    y: number\n        Logarithm (base `b`).\n\n    Examples\n    --------\n    > var y = base.log( 100.0, 10.0 )\n    2.0\n    > y = base.log( 16.0, 2.0 )\n    4.0\n    > y = base.log( 5.0, 1.0 )\n    Infinity\n    > y = base.log( NaN, 2.0 )\n    NaN\n    > y = base.log( 1.0, NaN )\n    NaN\n    > y = base.log( -4.0, 2.0 )\n    NaN\n    > y = base.log( 4.0, -2.0 )\n    NaN\n\n    See Also\n    --------\n    base.exp, base.ln, base.log10, base.log1p, base.log2\n","base.log1mexp":"\nbase.log1mexp( x )\n    Evaluates the natural logarithm of `1-exp(-|x|)`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.log1mexp( -10.0 )\n    ~-0.00005\n    > y = base.log1mexp( 0.0 )\n    -Infinity\n    > y = base.log1mexp( 5.0 )\n    ~-0.00676\n    > y = base.log1mexp( 10.0 )\n    ~-0.00005\n    > y = base.log1mexp( NaN )\n    NaN\n\n    See Also\n    --------\n    base.exp, base.ln, base.log1p, base.log1pexp","base.log1p":"\nbase.log1p( x )\n    Evaluates the natural logarithm of `1+x`.\n\n    For `x < -1`, the function returns `NaN`, as the natural logarithm is not\n    defined for negative numbers.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.log1p( 4.0 )\n    ~1.609\n    > y = base.log1p( -1.0 )\n    -Infinity\n    > y = base.log1p( 0.0 )\n    0.0\n    > y = base.log1p( -0.0 )\n    -0.0\n    > y = base.log1p( -2.0 )\n    NaN\n    > y = base.log1p( NaN )\n    NaN\n\n    See Also\n    --------\n    base.ln, base.log\n","base.log1pexp":"\nbase.log1pexp( x )\n    Evaluates the natural logarithm of `1+exp(x)`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.log1pexp( -10.0 )\n    ~0.000045\n    > y = base.log1pexp( 0.0 )\n    ~0.693147\n    > y = base.log1pexp( 5.0 )\n    ~5.006715\n    > y = base.log1pexp( 34.0 )\n    34.0\n    > y = base.log1pexp( NaN )\n    NaN\n\n    See Also\n    --------\n    base.exp, base.ln, base.log1mexp, base.log1p","base.log2":"\nbase.log2( x )\n    Evaluates the binary logarithm (base two).\n\n    For negative numbers, the binary logarithm is not defined.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.log2( 4.0 )\n    2.0\n    > y = base.log2( 8.0 )\n    3.0\n    > y = base.log2( 0.0 )\n    -Infinity\n    > y = base.log2( PINF )\n    Infinity\n    > y = base.log2( NaN )\n    NaN\n    > y = base.log2( -4.0 )\n    NaN\n\n    See Also\n    --------\n    base.exp2, base.ln, base.log\n","base.log10":"\nbase.log10( x )\n    Evaluates the common logarithm (base 10).\n\n    For negative numbers, the common logarithm is not defined.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.log10( 100.0 )\n    2.0\n    > y = base.log10( 8.0 )\n    ~0.903\n    > y = base.log10( 0.0 )\n    -Infinity\n    > y = base.log10( PINF )\n    Infinity\n    > y = base.log10( NaN )\n    NaN\n    > y = base.log10( -4.0 )\n    NaN\n\n    See Also\n    --------\n    base.exp10, base.ln, base.log\n","base.logaddexp":"\nbase.logaddexp( x, y )\n    Computes the natural logarithm of `exp(x) + exp(y)`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    y: number\n        Input value.\n\n    Returns\n    -------\n    v: number\n        Function value.\n\n    Examples\n    --------\n    > var v = base.logaddexp( 90.0, 90.0 )\n    ~90.6931\n    > v = base.logaddexp( -20.0, 90.0 )\n    90.0\n    > v = base.logaddexp( 0.0, -100.0 )\n    ~3.7201e-44\n    > v = base.logaddexp( NaN, NaN )\n    NaN\n\n    See Also\n    --------\n    base.exp, base.ln\n","base.logit":"\nbase.logit( p )\n    Evaluates the logit function.\n\n    Let `p` be the probability of some event. The logit function is defined as\n    the logarithm of the odds `p / (1-p)`.\n\n    If `p < 0` or `p > 1`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.logit( 0.2 )\n    ~-1.386\n    > y = base.logit( 0.9 )\n    ~2.197\n    > y = base.logit( -4.0 )\n    NaN\n    > y = base.logit( 1.5 )\n    NaN\n    > y = base.logit( NaN )\n    NaN\n\n","base.lucas":"\nbase.lucas( n )\n    Computes the nth Lucas number.\n\n    Lucas numbers follow the recurrence relation\n\n      L_n = L_{n-1} + L_{n-2}\n\n    with seed values L_0 = 2 and L_1 = 1.\n\n    If `n` is greater than `76`, the function returns `NaN`, as larger Lucas\n    numbers cannot be accurately represented due to limitations of double-\n    precision floating-point format.\n\n    If not provided a nonnegative integer value, the function returns `NaN`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Input value.\n\n    Returns\n    -------\n    y: integer\n        Lucas number.\n\n    Examples\n    --------\n    > var y = base.lucas( 0 )\n    2\n    > y = base.lucas( 1 )\n    1\n    > y = base.lucas( 2 )\n    3\n    > y = base.lucas( 3 )\n    4\n    > y = base.lucas( 4 )\n    7\n    > y = base.lucas( 77 )\n    NaN\n    > y = base.lucas( NaN )\n    NaN\n\n    See Also\n    --------\n    base.fibonacci, base.negalucas\n","base.lucaspoly":"\nbase.lucaspoly( n, x )\n    Evaluates a Lucas polynomial.\n\n    Parameters\n    ----------\n    n: integer\n        Lucas polynomial to evaluate.\n\n    x: number\n        Value at which to evaluate the Lucas polynomial.\n\n    Returns\n    -------\n    out: number\n        Evaluated Lucas polynomial.\n\n    Examples\n    --------\n    // 2^5 + 5*2^3 + 5*2\n    > var v = base.lucaspoly( 5, 2.0 )\n    82.0\n\n\nbase.lucaspoly.factory( n )\n    Returns a function for evaluating a Lucas polynomial.\n\n    Parameters\n    ----------\n    n: integer\n        Lucas polynomial to evaluate.\n\n    Returns\n    -------\n    fcn: Function\n        Function for evaluating a Lucas polynomial.\n\n    Examples\n    --------\n    > var polyval = base.lucaspoly.factory( 5 );\n\n    // 1^5 + 5*1^2 + 5\n    > var v = polyval( 1.0 )\n    11.0\n\n    // 2^5 + 5*2^3 + 5*2\n    > v = polyval( 2.0 )\n    82.0\n\n    See Also\n    --------\n    base.evalpoly, base.fibpoly\n","base.lucaspoly.factory":"\nbase.lucaspoly.factory( n )\n    Returns a function for evaluating a Lucas polynomial.\n\n    Parameters\n    ----------\n    n: integer\n        Lucas polynomial to evaluate.\n\n    Returns\n    -------\n    fcn: Function\n        Function for evaluating a Lucas polynomial.\n\n    Examples\n    --------\n    > var polyval = base.lucaspoly.factory( 5 );\n\n    // 1^5 + 5*1^2 + 5\n    > var v = polyval( 1.0 )\n    11.0\n\n    // 2^5 + 5*2^3 + 5*2\n    > v = polyval( 2.0 )\n    82.0\n\n    See Also\n    --------\n    base.evalpoly, base.fibpoly\n","base.max":"\nbase.max( [x[, y[, ...args]]] )\n    Returns the maximum value.\n\n    If any argument is `NaN`, the function returns `NaN`.\n\n    When an empty set is considered a subset of the extended reals (all real\n    numbers, including positive and negative infinity), negative infinity is the\n    least upper bound. Similar to zero being the identity element for the sum of\n    an empty set and to one being the identity element for the product of an\n    empty set, negative infinity is the identity element for the maximum, and\n    thus, if not provided any arguments, the function returns negative infinity.\n\n    Parameters\n    ----------\n    x: number (optional)\n        First number.\n\n    y: number (optional)\n        Second number.\n\n    args: ...number (optional)\n        Numbers.\n\n    Returns\n    -------\n    out: number\n        Maximum value.\n\n    Examples\n    --------\n    > var v = base.max( 3.14, 4.2 )\n    4.2\n    > v = base.max( 5.9, 3.14, 4.2 )\n    5.9\n    > v = base.max( 3.14, NaN )\n    NaN\n    > v = base.max( +0.0, -0.0 )\n    +0.0\n\n    See Also\n    --------\n    base.maxabs, base.min\n","base.maxabs":"\nbase.maxabs( [x[, y[, ...args]]] )\n    Returns the maximum absolute value.\n\n    If any argument is `NaN`, the function returns `NaN`.\n\n    When an empty set is considered a subset of the extended reals (all real\n    numbers, including positive and negative infinity), negative infinity is the\n    least upper bound. Similar to zero being the identity element for the sum of\n    an empty set and to one being the identity element for the product of an\n    empty set, negative infinity is the identity element for the maximum, and\n    thus, if not provided any arguments, the function returns `+infinity` (i.e.,\n    the absolute value of `-infinity`).\n\n    Parameters\n    ----------\n    x: number (optional)\n        First number.\n\n    y: number (optional)\n        Second number.\n\n    args: ...number (optional)\n        Numbers.\n\n    Returns\n    -------\n    out: number\n        Maximum absolute value.\n\n    Examples\n    --------\n    > var v = base.maxabs( 3.14, -4.2 )\n    4.2\n    > v = base.maxabs( 5.9, 3.14, 4.2 )\n    5.9\n    > v = base.maxabs( 3.14, NaN )\n    NaN\n    > v = base.maxabs( +0.0, -0.0 )\n    +0.0\n\n    See Also\n    --------\n    base.max, base.minabs\n","base.min":"\nbase.min( [x[, y[, ...args]]] )\n    Returns the minimum value.\n\n    If any argument is `NaN`, the function returns `NaN`.\n\n    When an empty set is considered a subset of the extended reals (all real\n    numbers, including positive and negative infinity), positive infinity is the\n    greatest lower bound. Similar to zero being the identity element for the sum\n    of an empty set and to one being the identity element for the product of an\n    empty set, positive infinity is the identity element for the minimum, and\n    thus, if not provided any arguments, the function returns positive infinity.\n\n    Parameters\n    ----------\n    x: number (optional)\n        First number.\n\n    y: number (optional)\n        Second number.\n\n    args: ...number (optional)\n        Numbers.\n\n    Returns\n    -------\n    out: number\n        Minimum value.\n\n    Examples\n    --------\n    > var v = base.min( 3.14, 4.2 )\n    3.14\n    > v = base.min( 5.9, 3.14, 4.2 )\n    3.14\n    > v = base.min( 3.14, NaN )\n    NaN\n    > v = base.min( +0.0, -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.max, base.minabs\n","base.minabs":"\nbase.minabs( [x[, y[, ...args]]] )\n    Returns the minimum absolute value.\n\n    If any argument is `NaN`, the function returns `NaN`.\n\n    When an empty set is considered a subset of the extended reals (all real\n    numbers, including positive and negative infinity), positive infinity is the\n    greatest upper bound. Similar to zero being the identity element for the sum\n    of an empty set and to one being the identity element for the product of an\n    empty set, positive infinity is the identity element for the minimum, and\n    thus, if not provided any arguments, the function returns positive infinity.\n\n    Parameters\n    ----------\n    x: number (optional)\n        First number.\n\n    y: number (optional)\n        Second number.\n\n    args: ...number (optional)\n        Numbers.\n\n    Returns\n    -------\n    out: number\n        Minimum absolute value.\n\n    Examples\n    --------\n    > var v = base.minabs( 3.14, -4.2 )\n    3.14\n    > v = base.minabs( 5.9, 3.14, 4.2 )\n    3.14\n    > v = base.minabs( 3.14, NaN )\n    NaN\n    > v = base.minabs( +0.0, -0.0 )\n    +0.0\n\n    See Also\n    --------\n    base.maxabs, base.min\n","base.minmax":"\nbase.minmax( [out,] x[, y[, ...args]] )\n    Returns the minimum and maximum values.\n\n    If any argument is `NaN`, the function returns `NaN` for both the minimum\n    and maximum values.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output object.\n\n    x: number\n        First number.\n\n    y: number (optional)\n        Second number.\n\n    args: ...number (optional)\n        Numbers.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Minimum and maximum values.\n\n    Examples\n    --------\n    > var v = base.minmax( 3.14, 4.2 )\n    [ 3.14, 4.2 ]\n    > v = base.minmax( 5.9, 3.14, 4.2 )\n    [ 3.14, 5.9 ]\n    > v = base.minmax( 3.14, NaN )\n    [ NaN, NaN ]\n    > v = base.minmax( +0.0, -0.0 )\n    [ -0.0, +0.0 ]\n    > v = base.minmax( 3.14 )\n    [ 3.14, 3.14 ]\n    > var out = new Array( 2 );\n    > v = base.minmax( out, 3.14 )\n    [ 3.14, 3.14 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.max, base.min, base.minmaxabs\n","base.minmaxabs":"\nbase.minmaxabs( [out,] x[, y[, ...args]] )\n    Returns the minimum and maximum absolute values.\n\n    If any argument is `NaN`, the function returns `NaN` for both the minimum\n    and maximum absolute values.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output object.\n\n    x: number\n        First number.\n\n    y: number (optional)\n        Second number.\n\n    args: ...number (optional)\n        Numbers.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Minimum and maximum absolute values.\n\n    Examples\n    --------\n    > var v = base.minmaxabs( 3.14, 4.2 )\n    [ 3.14, 4.2 ]\n    > v = base.minmaxabs( -5.9, 3.14, 4.2 )\n    [ 3.14, 5.9 ]\n    > v = base.minmaxabs( 3.14, NaN )\n    [ NaN, NaN ]\n    > v = base.minmaxabs( +0.0, -0.0 )\n    [ 0.0, 0.0 ]\n    > v = base.minmaxabs( 3.14 )\n    [ 3.14, 3.14 ]\n    > var out = new Array( 2 );\n    > v = base.minmaxabs( out, 3.14 )\n    [ 3.14, 3.14 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.maxabs, base.minabs, base.minmax\n","base.modf":"\nbase.modf( [out,] x )\n    Decomposes a double-precision floating-point number into integral and\n    fractional parts, each having the same type and sign as the input value.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    x: number\n        Input value.\n\n    Returns\n    -------\n    parts: Array|TypedArray|Object\n        Integral and fractional parts.\n\n    Examples\n    --------\n    > var parts = base.modf( 3.14 )\n    [ 3.0, 0.14000000000000012 ]\n    > parts = base.modf( 3.14 )\n    [ 3.0, 0.14000000000000012 ]\n    > parts = base.modf( +0.0 )\n    [ +0.0, +0.0 ]\n    > parts = base.modf( -0.0 )\n    [ -0.0, -0.0 ]\n    > parts = base.modf( PINF )\n    [ Infinity, +0.0 ]\n    > parts = base.modf( NINF )\n    [ -Infinity, -0.0 ]\n    > parts = base.modf( NaN )\n    [ NaN, NaN ]\n\n    // Provide an output array:\n    > var out = new Float64Array( 2 );\n    > parts = base.modf( out, 3.14 )\n    <Float64Array>[ 3.0, 0.14000000000000012 ]\n    > var bool = ( parts === out )\n    true\n\n","base.ndarray":"\nbase.ndarray( dtype, ndims[, options] )\n    Returns an ndarray constructor.\n\n    Parameters\n    ----------\n    dtype: string\n        Underlying data type.\n\n    ndims: integer\n        Number of dimensions.\n\n    options: Object (optional)\n        Options.\n\n    options.codegen: boolean (optional)\n        Boolean indicating whether to use code generation. Code generation can\n        boost performance, but may be problematic in browser contexts enforcing\n        a strict content security policy (CSP). Default: true.\n\n    Returns\n    -------\n    ctor: Function\n        ndarray constructor.\n\n    ctor.BYTES_PER_ELEMENT: integer\n        Size (in bytes) of each array element (if known).\n\n    ctor.dtype: string\n        Underlying data type.\n\n    ctor.ndims: integer\n        Number of dimensions.\n\n    ctor.prototype.byteLength: integer\n        Size (in bytes) of the array (if known).\n\n    ctor.prototype.BYTES_PER_ELEMENT: integer\n        Size (in bytes) of each array element (if known).\n\n    ctor.prototype.data: ArrayLikeObject|TypedArray|Buffer\n        Pointer to the underlying data buffer.\n\n    ctor.prototype.dtype: string\n        Underlying data type.\n\n    ctor.prototype.flags: Object\n        Information about the memory layout of the array.\n\n    ctor.prototype.length: integer\n        Length of the array (i.e., number of elements).\n\n    ctor.prototype.ndims: integer\n        Number of dimensions.\n\n    ctor.prototype.offset: integer\n        Index offset which specifies the buffer index at which to start\n        iterating over array elements.\n\n    ctor.prototype.order: string\n        Array order. The array order is either row-major (C-style) or column-\n        major (Fortran-style).\n\n    ctor.prototype.shape: Array\n        Array shape.\n\n    ctor.prototype.strides: Array\n        Index strides which specify how to access data along corresponding array\n        dimensions.\n\n    ctor.prototype.get: Function\n        Returns an array element specified according to provided subscripts. The\n        number of provided subscripts should equal the number of dimensions.\n\n    ctor.prototype.iget: Function\n        Returns an array element located at a specified linear index.\n\n    ctor.prototype.set: Function\n        Sets an array element specified according to provided subscripts. The\n        number of provided subscripts should equal the number of dimensions.\n\n    ctor.prototype.iset: Function\n        Sets an array element located at a specified linear index.\n\n    ctor.prototype.toString: Function\n        Serializes an ndarray as a string. This method does **not** serialize\n        data outside of the buffer region defined by the array configuration.\n\n    ctor.prototype.toJSON: Function\n        Serializes an ndarray as a JSON object. This method does **not**\n        serialize data outside of the buffer region defined by the array\n        configuration.\n\n    Examples\n    --------\n    > var ctor = base.ndarray( 'float64', 3 )\n    <Function>\n\n    // To create a new instance...\n    > var b = [ 1, 2, 3, 4 ]; // underlying data buffer\n    > var d = [ 2, 2 ]; // shape\n    > var s = [ 2, 1 ]; // strides\n    > var o = 0; // index offset\n    > var arr = ctor( b, d, s, o, 'row-major' )\n    <ndarray>\n\n    // Get an element using subscripts:\n    > var v = arr.get( 1, 1 )\n    4\n\n    // Get an element using a linear index:\n    > v = arr.iget( 3 )\n    4\n\n    // Set an element using subscripts:\n    > arr.set( 1, 1, 40 );\n    > arr.get( 1, 1 )\n    40\n\n    // Set an element using a linear index:\n    > arr.iset( 3, 99 );\n    > arr.get( 1, 1 )\n    99\n\n    See Also\n    --------\n    array, ndarray\n","base.ndarrayMemoized":"\nbase.ndarrayMemoized( dtype, ndims[, options] )\n    Returns a memoized ndarray constructor.\n\n    Parameters\n    ----------\n    dtype: string\n        Underlying data type.\n\n    ndims: integer\n        Number of dimensions.\n\n    options: Object (optional)\n        Options.\n\n    options.codegen: boolean (optional)\n        Boolean indicating whether to use code generation. Code generation can\n        boost performance, but may be problematic in browser contexts enforcing\n        a strict content security policy (CSP). Default: true.\n\n    Returns\n    -------\n    ctor: Function\n        Memoized ndarray constructor.\n\n    ctor.BYTES_PER_ELEMENT: integer\n        Size (in bytes) of each array element (if known).\n\n    ctor.dtype: string\n        Underlying data type.\n\n    ctor.ndims: integer\n        Number of dimensions.\n\n    ctor.prototype.byteLength: integer\n        Size (in bytes) of the array (if known).\n\n    ctor.prototype.BYTES_PER_ELEMENT: integer\n        Size (in bytes) of each array element (if known).\n\n    ctor.prototype.data: ArrayLikeObject|TypedArray|Buffer\n        Pointer to the underlying data buffer.\n\n    ctor.prototype.dtype: string\n        Underlying data type.\n\n    ctor.prototype.flags: Object\n        Information about the memory layout of the array.\n\n    ctor.prototype.length: integer\n        Length of the array (i.e., number of elements).\n\n    ctor.prototype.ndims: integer\n        Number of dimensions.\n\n    ctor.prototype.offset: integer\n        Index offset which specifies the buffer index at which to start\n        iterating over array elements.\n\n    ctor.prototype.order: string\n        Array order. The array order is either row-major (C-style) or column-\n        major (Fortran-style).\n\n    ctor.prototype.shape: Array\n        Array shape.\n\n    ctor.prototype.strides: Array\n        Index strides which specify how to access data along corresponding array\n        dimensions.\n\n    ctor.prototype.get: Function\n        Returns an array element specified according to provided subscripts. The\n        number of provided subscripts should equal the number of dimensions.\n\n    ctor.prototype.iget: Function\n        Returns an array element located at a specified linear index.\n\n    ctor.prototype.set: Function\n        Sets an array element specified according to provided subscripts. The\n        number of provided subscripts should equal the number of dimensions.\n\n    ctor.prototype.iset: Function\n        Sets an array element located at a specified linear index.\n\n    ctor.prototype.toString: Function\n        Serializes an ndarray as a string. This method does **not** serialize\n        data outside of the buffer region defined by the array configuration.\n\n    ctor.prototype.toJSON: Function\n        Serializes an ndarray as a JSON object. This method does **not**\n        serialize data outside of the buffer region defined by the array\n        configuration.\n\n    Examples\n    --------\n    > var ctor = base.ndarrayMemoized( 'float64', 3 )\n    <Function>\n    > var f = base.ndarrayMemoized( 'float64', 3 )\n    <Function>\n    > var bool = ( f === ctor )\n    true\n\n    // To create a new instance...\n    > var b = [ 1, 2, 3, 4 ]; // underlying data buffer\n    > var d = [ 2, 2 ]; // shape\n    > var s = [ 2, 1 ]; // strides\n    > var o = 0; // index offset\n    > var arr = ctor( b, d, s, o, 'row-major' )\n    <ndarray>\n\n    // Get an element using subscripts:\n    > var v = arr.get( 1, 1 )\n    4\n\n    // Get an element using a linear index:\n    > v = arr.iget( 3 )\n    4\n\n    // Set an element using subscripts:\n    > arr.set( 1, 1, 40 );\n    > arr.get( 1, 1 )\n    40\n\n    // Set an element using a linear index:\n    > arr.iset( 3, 99 );\n    > arr.get( 1, 1 )\n    99\n\n    See Also\n    --------\n    array, base.ndarray, ndarray, ndarrayMemoized\n","base.negafibonacci":"\nbase.negafibonacci( n )\n    Computes the nth negaFibonacci number.\n\n    The negaFibonacci numbers follow the recurrence relation\n\n      F_{n-2} = F_{n} - F_{n-1}\n\n    with seed values F_0 = 0 and F_{-1} = 1.\n\n    If `|n|` is greater than `78`, the function returns `NaN` as larger\n    negaFibonacci numbers cannot be accurately represented due to limitations of\n    double-precision floating-point format.\n\n    If not provided a non-positive integer value, the function returns `NaN`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Input value.\n\n    Returns\n    -------\n    y: integer\n        NegaFibonacci number.\n\n    Examples\n    --------\n    > var y = base.negafibonacci( 0 )\n    0\n    > y = base.negafibonacci( -1 )\n    1\n    > y = base.negafibonacci( -2 )\n    -1\n    > y = base.negafibonacci( -3 )\n    2\n    > y = base.negafibonacci( -4 )\n    -3\n    > y = base.negafibonacci( -79 )\n    NaN\n    > y = base.negafibonacci( -80 )\n    NaN\n    > y = base.negafibonacci( NaN )\n    NaN\n\n    See Also\n    --------\n    base.fibonacci, base.negalucas\n","base.negalucas":"\nbase.negalucas( n )\n    Computes the nth negaLucas number.\n\n    The negaLucas numbers follow the recurrence relation\n\n      L_{n-2} = L_{n} - L_{n-1}\n\n    with seed values L_0 = 2 and L_{-1} = -1.\n\n    If `|n|` is greater than `76`, the function returns `NaN` as larger\n    negaLucas numbers cannot be accurately represented due to limitations of\n    double-precision floating-point format.\n\n    If not provided a non-positive integer value, the function returns `NaN`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Input value.\n\n    Returns\n    -------\n    y: integer\n        NegaLucas number.\n\n    Examples\n    --------\n    > var y = base.negalucas( 0 )\n    2\n    > y = base.negalucas( -1 )\n    -1\n    > y = base.negalucas( -2 )\n    3\n    > y = base.negalucas( -3 )\n    -4\n    > y = base.negalucas( -4 )\n    7\n    > y = base.negalucas( -77 )\n    NaN\n    > y = base.negalucas( -78 )\n    NaN\n    > y = base.negalucas( NaN )\n    NaN\n\n    See Also\n    --------\n    base.fibonacci, base.lucas, base.negafibonacci\n","base.nonfibonacci":"\nbase.nonfibonacci( n )\n    Computes the nth non-Fibonacci number.\n\n    If not provided a nonnegative integer value, the function returns `NaN`.\n\n    If provided `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Non-Fibonacci number.\n\n    Examples\n    --------\n    > var v = base.nonfibonacci( 1 )\n    4\n    > v = base.nonfibonacci( 2 )\n    6\n    > v = base.nonfibonacci( 3 )\n    7\n    > v = base.nonfibonacci( NaN )\n    NaN\n\n    See Also\n    --------\n    base.fibonacci\n","base.normalize":"\nbase.normalize( [out,] x )\n    Returns a normal number and exponent satisfying `x = y * 2^exp` as an array.\n\n    The first element of the returned array corresponds to `y` and the second to\n    `exp`.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    x: number\n        Double-precision floating-point number.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        An array containing `y` and `exp`.\n\n    Examples\n    --------\n    > var out = base.normalize( 3.14e-319 )\n    [ 1.4141234400356668e-303, -52 ]\n    > var y = out[ 0 ];\n    > var exponent = out[ 1 ];\n    > var bool = ( y*base.pow(2.0, exponent) === 3.14e-319 )\n    true\n\n    // Special cases:\n    > out = base.normalize( 0.0 )\n    [ 0.0, 0 ];\n    > out = base.normalize( PINF )\n    [ Infinity, 0 ]\n    > out = base.normalize( NINF )\n    [ -Infinity, 0 ]\n    > out = base.normalize( NaN )\n    [ NaN, 0 ]\n\n    // Provide an output array:\n    > out = new Float64Array( 2 );\n    > var v = base.normalize( out, 3.14e-319 )\n    <Float64Array>[ 1.4141234400356668e-303, -52 ]\n    > bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.normalizef\n","base.normalizef":"\nbase.normalizef( [out,] x )\n    Returns a normal number `y` and exponent `exp` satisfying `x = y * 2^exp` as\n    an array.\n\n    The first element of the returned array corresponds to `y` and the second to\n    `exp`.\n\n    While the function accepts higher precision floating-point numbers, beware\n    that providing such numbers can be a source of subtle bugs as the relation\n    `x = y * 2^exp` may not hold.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    x: float\n        Single-precision floating-point number.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        An array containing `y` and `exp`.\n\n    Examples\n    --------\n    > var out = base.normalizef( base.float64ToFloat32( 1.401e-45 ) )\n    [ 1.1754943508222875e-38, -23 ]\n    > var y = out[ 0 ];\n    > var exp = out[ 1 ];\n    > var bool = ( y*base.pow(2,exp) === base.float64ToFloat32(1.401e-45) )\n    true\n\n    // Special cases:\n    > out = base.normalizef( FLOAT32_PINF )\n    [ Infinity, 0 ]\n    > out = base.normalizef( FLOAT32_NINF )\n    [ -Infinity, 0 ]\n    > out = base.normalizef( NaN )\n    [ NaN, 0 ]\n\n    // Provide an output array:\n    > out = new Float32Array( 2 );\n    > var v = base.normalizef( out, base.float64ToFloat32( 1.401e-45 ) )\n    <Float32Array>[ 1.1754943508222875e-38, -23.0 ]\n    > bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.normalize\n","base.normhermitepoly":"\nbase.normhermitepoly( n, x )\n    Evaluates a normalized Hermite polynomial.\n\n    Parameters\n    ----------\n    n: integer\n        Nonnegative polynomial degree.\n\n    x: number\n        Value at which to evaluate the polynomial.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.normhermitepoly( 1, 0.5 )\n    0.5\n    > y = base.normhermitepoly( -1, 0.5 )\n    NaN\n    > y = base.normhermitepoly( 0, 0.5 )\n    1.0\n    > y = base.normhermitepoly( 2, 0.5 )\n    -0.75\n\n\nbase.normhermitepoly.factory( n )\n    Returns a function for evaluating a normalized Hermite polynomial.\n\n    Parameters\n    ----------\n    n: integer\n        Nonnegative polynomial degree.\n\n    Returns\n    -------\n    fcn: Function\n        Function for evaluating a normalized Hermite polynomial.\n\n    Examples\n    --------\n    > var polyval = base.normhermitepoly.factory( 2 );\n    > var v = polyval( 0.5 )\n    -0.75\n\n    See Also\n    --------\n    base.evalpoly, base.hermitepoly\n","base.normhermitepoly.factory":"\nbase.normhermitepoly.factory( n )\n    Returns a function for evaluating a normalized Hermite polynomial.\n\n    Parameters\n    ----------\n    n: integer\n        Nonnegative polynomial degree.\n\n    Returns\n    -------\n    fcn: Function\n        Function for evaluating a normalized Hermite polynomial.\n\n    Examples\n    --------\n    > var polyval = base.normhermitepoly.factory( 2 );\n    > var v = polyval( 0.5 )\n    -0.75\n\n    See Also\n    --------\n    base.evalpoly, base.hermitepoly\n","base.pdiff":"\nbase.pdiff( x, y )\n    Returns the positive difference between `x` and `y` if `x > y`; otherwise,\n    returns `0`.\n\n    Parameters\n    ----------\n    x: number\n        First number.\n\n    y: number\n        Second number.\n\n    Returns\n    -------\n    out: number\n        Positive difference.\n\n    Examples\n    --------\n    > var v = base.pdiff( 5.9, 3.14 )\n    2.76\n    > v = base.pdiff( 3.14, 4.2 )\n    0.0\n    > v = base.pdiff( 3.14, NaN )\n    NaN\n    > v = base.pdiff( -0.0, +0.0 )\n    +0.0\n\n","base.polygamma":"\nbase.polygamma( n, x )\n    Evaluates the polygamma function of order `n`; i.e., the (n+1)th derivative\n    of the natural logarithm of the gamma function.\n\n    If `n` is not a nonnegative integer, the function returns `NaN`.\n\n    If `x` is zero or a negative integer, the function returns `NaN`.\n\n    If provided `NaN` as either parameter, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Derivative order.\n\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var v = base.polygamma( 3, 1.2 )\n    ~3.245\n    > v = base.polygamma( 5, 1.2 )\n    ~41.39\n    > v = base.polygamma( 3, -4.9 )\n    ~60014.239\n    > v = base.polygamma( -1, 5.3 )\n    NaN\n    > v = base.polygamma( 2, -1.0 )\n    Infinity\n\n    See Also\n    --------\n    base.trigamma, base.digamma, base.gamma\n","base.pow":"\nbase.pow( b, x )\n    Evaluates the exponential function `bˣ`.\n\n    Parameters\n    ----------\n    b: number\n        Base.\n\n    x: number\n        Exponent.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.pow( 2.0, 3.0 )\n    8.0\n    > y = base.pow( 4.0, 0.5 )\n    2.0\n    > y = base.pow( 100.0, 0.0 )\n    1.0\n    > y = base.pow( PI, 5.0 )\n    ~306.0197\n    > y = base.pow( PI, -0.2 )\n    ~0.7954\n    > y = base.pow( NaN, 3.0 )\n    NaN\n    > y = base.pow( 5.0, NaN )\n    NaN\n    > y = base.pow( NaN, NaN )\n    NaN\n\n    See Also\n    --------\n    base.exp, base.powm1\n","base.powm1":"\nbase.powm1( b, x )\n    Evaluates `bˣ - 1`.\n\n    When `b` is close to `1` and/or `x` is small, this function is more accurate\n    than naively computing `bˣ` and subtracting `1`.\n\n    Parameters\n    ----------\n    b: number\n        Base.\n\n    x: number\n        Exponent.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.powm1( 2.0, 3.0 )\n    7.0\n    > y = base.powm1( 4.0, 0.5 )\n    1.0\n    > y = base.powm1( 0.0, 100.0 )\n    -1.0\n    > y = base.powm1( 100.0, 0.0 )\n    0.0\n    > y = base.powm1( 0.0, 0.0 )\n    0.0\n    > y = base.powm1( PI, 5.0 )\n    ~305.0197\n    > y = base.powm1( NaN, 3.0 )\n    NaN\n    > y = base.powm1( 5.0, NaN )\n    NaN\n\n    See Also\n    --------\n    base.pow\n","base.rad2deg":"\nbase.rad2deg( x )\n    Converts an angle from radians to degrees.\n\n    Parameters\n    ----------\n    x: number\n        Angle in radians.\n\n    Returns\n    -------\n    d: number\n        Angle in degrees.\n\n    Examples\n    --------\n    > var d = base.rad2deg( PI/2.0 )\n    90.0\n    > d = base.rad2deg( -PI/4.0 )\n    -45.0\n    > d = base.rad2deg( NaN )\n    NaN\n\n    // Due to finite precision, canonical values may not be returned:\n    > d = base.rad2deg( PI/6.0 )\n    29.999999999999996\n\n    See Also\n    --------\n    base.deg2rad\n","base.ramp":"\nbase.ramp( x )\n    Evaluates the ramp function.\n\n    If `x >= 0`, the function returns `x`; otherwise, the function returns zero.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.ramp( 3.14 )\n    3.14\n    > y = base.ramp( -3.14 )\n    0.0\n\n    See Also\n    --------\n    base.heaviside\n","base.random.arcsine":"\nbase.random.arcsine( a, b )\n    Returns a pseudorandom number drawn from an arcsine distribution.\n\n    If `a >= b`, the function returns `NaN`.\n\n    If `a` or `b` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.arcsine( 2.0, 5.0 )\n    <number>\n\n\nbase.random.arcsine.factory( [a, b, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from an arcsine distribution.\n\n    If provided `a` and `b`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `a` and `b`, the returned PRNG requires that both `a` and\n    `b` be provided at each invocation.\n\n    Parameters\n    ----------\n    a: number (optional)\n        Minimum support.\n\n    b: number (optional)\n        Maximum support.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.arcsine.factory();\n    > var r = rand( 0.0, 1.0 )\n    <number>\n    > r = rand( -2.0, 2.0 )\n    <number>\n\n    // Provide `a` and `b`:\n    > rand = base.random.arcsine.factory( 0.0, 1.0 );\n    > r = rand()\n    <number>\n    > r = rand()\n    <number>\n\n\nbase.random.arcsine.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.arcsine.NAME\n    'arcsine'\n\n\nbase.random.arcsine.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.arcsine.PRNG;\n\n\nbase.random.arcsine.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.arcsine.seed;\n\n\nbase.random.arcsine.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.arcsine.seedLength;\n\n\nbase.random.arcsine.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.arcsine( 2.0, 4.0 )\n    <number>\n    > r = base.random.arcsine( 2.0, 4.0 )\n    <number>\n    > r = base.random.arcsine( 2.0, 4.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.arcsine.state\n    <Uint32Array>\n\n    > r = base.random.arcsine( 2.0, 4.0 )\n    <number>\n    > r = base.random.arcsine( 2.0, 4.0 )\n    <number>\n\n    // Set the state:\n    > base.random.arcsine.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.arcsine( 2.0, 4.0 )\n    <number>\n    > r = base.random.arcsine( 2.0, 4.0 )\n    <number>\n\n\nbase.random.arcsine.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.arcsine.stateLength;\n\n\nbase.random.arcsine.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.arcsine.byteLength;\n\n\nbase.random.arcsine.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.arcsine.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n    See Also\n    --------\n    base.random.beta\n","base.random.arcsine.factory":"\nbase.random.arcsine.factory( [a, b, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from an arcsine distribution.\n\n    If provided `a` and `b`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `a` and `b`, the returned PRNG requires that both `a` and\n    `b` be provided at each invocation.\n\n    Parameters\n    ----------\n    a: number (optional)\n        Minimum support.\n\n    b: number (optional)\n        Maximum support.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.arcsine.factory();\n    > var r = rand( 0.0, 1.0 )\n    <number>\n    > r = rand( -2.0, 2.0 )\n    <number>\n\n    // Provide `a` and `b`:\n    > rand = base.random.arcsine.factory( 0.0, 1.0 );\n    > r = rand()\n    <number>\n    > r = rand()\n    <number>\n\n","base.random.arcsine.NAME":"\nbase.random.arcsine.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.arcsine.NAME\n    'arcsine'\n\n","base.random.arcsine.PRNG":"\nbase.random.arcsine.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.arcsine.PRNG;\n\n","base.random.arcsine.seed":"\nbase.random.arcsine.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.arcsine.seed;\n\n","base.random.arcsine.seedLength":"\nbase.random.arcsine.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.arcsine.seedLength;\n\n","base.random.arcsine.state":"\nbase.random.arcsine.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.arcsine( 2.0, 4.0 )\n    <number>\n    > r = base.random.arcsine( 2.0, 4.0 )\n    <number>\n    > r = base.random.arcsine( 2.0, 4.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.arcsine.state\n    <Uint32Array>\n\n    > r = base.random.arcsine( 2.0, 4.0 )\n    <number>\n    > r = base.random.arcsine( 2.0, 4.0 )\n    <number>\n\n    // Set the state:\n    > base.random.arcsine.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.arcsine( 2.0, 4.0 )\n    <number>\n    > r = base.random.arcsine( 2.0, 4.0 )\n    <number>\n\n","base.random.arcsine.stateLength":"\nbase.random.arcsine.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.arcsine.stateLength;\n\n","base.random.arcsine.byteLength":"\nbase.random.arcsine.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.arcsine.byteLength;\n\n","base.random.arcsine.toJSON":"\nbase.random.arcsine.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.arcsine.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n    See Also\n    --------\n    base.random.beta\n","base.random.bernoulli":"\nbase.random.bernoulli( p )\n    Returns a pseudorandom number drawn from a Bernoulli distribution.\n\n    If `p < 0` or `p > 1` or `p` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.bernoulli( 0.8 );\n\n\nbase.random.bernoulli.factory( [p, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Bernoulli distribution.\n\n    If provided `p`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `p`, the returned PRNG requires that `p` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    p: number (optional)\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.bernoulli.factory();\n    > var r = rand( 0.3 );\n    > r = rand( 0.59 );\n\n    // Provide `p`:\n    > rand = base.random.bernoulli.factory( 0.3 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.bernoulli.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.bernoulli.NAME\n    'bernoulli'\n\n\nbase.random.bernoulli.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.bernoulli.PRNG;\n\n\nbase.random.bernoulli.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.bernoulli.seed;\n\n\nbase.random.bernoulli.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.bernoulli.seedLength;\n\n\nbase.random.bernoulli.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.bernoulli( 0.3 )\n    <number>\n    > r = base.random.bernoulli( 0.3 )\n    <number>\n    > r = base.random.bernoulli( 0.3 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.bernoulli.state\n    <Uint32Array>\n\n    > r = base.random.bernoulli( 0.3 )\n    <number>\n    > r = base.random.bernoulli( 0.3 )\n    <number>\n\n    // Set the state:\n    > base.random.bernoulli.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.bernoulli( 0.3 )\n    <number>\n    > r = base.random.bernoulli( 0.3 )\n    <number>\n\n\nbase.random.bernoulli.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.bernoulli.stateLength;\n\n\nbase.random.bernoulli.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.bernoulli.byteLength;\n\n\nbase.random.bernoulli.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.bernoulli.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n    See Also\n    --------\n    base.random.binomial\n","base.random.bernoulli.factory":"\nbase.random.bernoulli.factory( [p, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Bernoulli distribution.\n\n    If provided `p`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `p`, the returned PRNG requires that `p` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    p: number (optional)\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.bernoulli.factory();\n    > var r = rand( 0.3 );\n    > r = rand( 0.59 );\n\n    // Provide `p`:\n    > rand = base.random.bernoulli.factory( 0.3 );\n    > r = rand();\n    > r = rand();\n\n","base.random.bernoulli.NAME":"\nbase.random.bernoulli.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.bernoulli.NAME\n    'bernoulli'\n\n","base.random.bernoulli.PRNG":"\nbase.random.bernoulli.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.bernoulli.PRNG;\n\n","base.random.bernoulli.seed":"\nbase.random.bernoulli.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.bernoulli.seed;\n\n","base.random.bernoulli.seedLength":"\nbase.random.bernoulli.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.bernoulli.seedLength;\n\n","base.random.bernoulli.state":"\nbase.random.bernoulli.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.bernoulli( 0.3 )\n    <number>\n    > r = base.random.bernoulli( 0.3 )\n    <number>\n    > r = base.random.bernoulli( 0.3 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.bernoulli.state\n    <Uint32Array>\n\n    > r = base.random.bernoulli( 0.3 )\n    <number>\n    > r = base.random.bernoulli( 0.3 )\n    <number>\n\n    // Set the state:\n    > base.random.bernoulli.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.bernoulli( 0.3 )\n    <number>\n    > r = base.random.bernoulli( 0.3 )\n    <number>\n\n","base.random.bernoulli.stateLength":"\nbase.random.bernoulli.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.bernoulli.stateLength;\n\n","base.random.bernoulli.byteLength":"\nbase.random.bernoulli.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.bernoulli.byteLength;\n\n","base.random.bernoulli.toJSON":"\nbase.random.bernoulli.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.bernoulli.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n    See Also\n    --------\n    base.random.binomial\n","base.random.beta":"\nbase.random.beta( α, β )\n    Returns a pseudorandom number drawn from a beta distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.beta( 2.0, 5.0 );\n\n\nbase.random.beta.factory( [α, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a beta distribution.\n\n    If provided `α` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `α` and `β`, the returned PRNG requires that both `α` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        First shape parameter.\n\n    β: number (optional)\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.beta.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `α` and `β`:\n    > rand = base.random.beta.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.beta.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.beta.NAME\n    'beta'\n\n\nbase.random.beta.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.beta.PRNG;\n\n\nbase.random.beta.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.beta.seed;\n\n\nbase.random.beta.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.beta.seedLength;\n\n\nbase.random.beta.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.beta( 2.0, 5.0 )\n    <number>\n    > r = base.random.beta( 2.0, 5.0 )\n    <number>\n    > r = base.random.beta( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.beta.state\n    <Uint32Array>\n\n    > r = base.random.beta( 2.0, 5.0 )\n    <number>\n    > r = base.random.beta( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.beta.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.beta( 2.0, 5.0 )\n    <number>\n    > r = base.random.beta( 2.0, 5.0 )\n    <number>\n\n\nbase.random.beta.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.beta.stateLength;\n\n\nbase.random.beta.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.beta.byteLength;\n\n\nbase.random.beta.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.beta.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.beta.factory":"\nbase.random.beta.factory( [α, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a beta distribution.\n\n    If provided `α` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `α` and `β`, the returned PRNG requires that both `α` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        First shape parameter.\n\n    β: number (optional)\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.beta.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `α` and `β`:\n    > rand = base.random.beta.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n","base.random.beta.NAME":"\nbase.random.beta.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.beta.NAME\n    'beta'\n\n","base.random.beta.PRNG":"\nbase.random.beta.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.beta.PRNG;\n\n","base.random.beta.seed":"\nbase.random.beta.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.beta.seed;\n\n","base.random.beta.seedLength":"\nbase.random.beta.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.beta.seedLength;\n\n","base.random.beta.state":"\nbase.random.beta.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.beta( 2.0, 5.0 )\n    <number>\n    > r = base.random.beta( 2.0, 5.0 )\n    <number>\n    > r = base.random.beta( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.beta.state\n    <Uint32Array>\n\n    > r = base.random.beta( 2.0, 5.0 )\n    <number>\n    > r = base.random.beta( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.beta.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.beta( 2.0, 5.0 )\n    <number>\n    > r = base.random.beta( 2.0, 5.0 )\n    <number>\n\n","base.random.beta.stateLength":"\nbase.random.beta.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.beta.stateLength;\n\n","base.random.beta.byteLength":"\nbase.random.beta.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.beta.byteLength;\n\n","base.random.beta.toJSON":"\nbase.random.beta.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.beta.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.betaprime":"\nbase.random.betaprime( α, β )\n    Returns a pseudorandom number drawn from a beta prime distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.betaprime( 2.0, 5.0 );\n\n\nbase.random.betaprime.factory( [α, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a beta prime distribution.\n\n    If provided `α` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `α` and `β`, the returned PRNG requires that both `α` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        First shape parameter.\n\n    β: number (optional)\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.betaprime.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `α` and `β`:\n    > rand = base.random.betaprime.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.betaprime.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.betaprime.NAME\n    'betaprime'\n\n\nbase.random.betaprime.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.betaprime.PRNG;\n\n\nbase.random.betaprime.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.betaprime.seed;\n\n\nbase.random.betaprime.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.betaprime.seedLength;\n\n\nbase.random.betaprime.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.betaprime( 2.0, 5.0 )\n    <number>\n    > r = base.random.betaprime( 2.0, 5.0 )\n    <number>\n    > r = base.random.betaprime( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.betaprime.state\n    <Uint32Array>\n\n    > r = base.random.betaprime( 2.0, 5.0 )\n    <number>\n    > r = base.random.betaprime( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.betaprime.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.betaprime( 2.0, 5.0 )\n    <number>\n    > r = base.random.betaprime( 2.0, 5.0 )\n    <number>\n\n\nbase.random.betaprime.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.betaprime.stateLength;\n\n\nbase.random.betaprime.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.betaprime.byteLength;\n\n\nbase.random.betaprime.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.betaprime.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.betaprime.factory":"\nbase.random.betaprime.factory( [α, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a beta prime distribution.\n\n    If provided `α` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `α` and `β`, the returned PRNG requires that both `α` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        First shape parameter.\n\n    β: number (optional)\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.betaprime.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `α` and `β`:\n    > rand = base.random.betaprime.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n","base.random.betaprime.NAME":"\nbase.random.betaprime.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.betaprime.NAME\n    'betaprime'\n\n","base.random.betaprime.PRNG":"\nbase.random.betaprime.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.betaprime.PRNG;\n\n","base.random.betaprime.seed":"\nbase.random.betaprime.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.betaprime.seed;\n\n","base.random.betaprime.seedLength":"\nbase.random.betaprime.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.betaprime.seedLength;\n\n","base.random.betaprime.state":"\nbase.random.betaprime.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.betaprime( 2.0, 5.0 )\n    <number>\n    > r = base.random.betaprime( 2.0, 5.0 )\n    <number>\n    > r = base.random.betaprime( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.betaprime.state\n    <Uint32Array>\n\n    > r = base.random.betaprime( 2.0, 5.0 )\n    <number>\n    > r = base.random.betaprime( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.betaprime.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.betaprime( 2.0, 5.0 )\n    <number>\n    > r = base.random.betaprime( 2.0, 5.0 )\n    <number>\n\n","base.random.betaprime.stateLength":"\nbase.random.betaprime.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.betaprime.stateLength;\n\n","base.random.betaprime.byteLength":"\nbase.random.betaprime.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.betaprime.byteLength;\n\n","base.random.betaprime.toJSON":"\nbase.random.betaprime.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.betaprime.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.binomial":"\nbase.random.binomial( n, p )\n    Returns a pseudorandom number drawn from a binomial distribution.\n\n    If `n` is not a positive integer or `p` is not a probability, the function\n    returns `NaN`.\n\n    If `n` or `p` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.binomial( 20, 0.8 );\n\n\nbase.random.binomial.factory( [n, p, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a binomial distribution.\n\n    If provided `n` and `p`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `n` and `p`, the returned PRNG requires that both `n` and\n    `p` be provided at each invocation.\n\n    Parameters\n    ----------\n    n: integer (optional)\n        Number of trials.\n\n    p: number (optional)\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.binomial.factory();\n    > var r = rand( 20, 0.3 );\n    > r = rand( 10, 0.77 );\n\n    // Provide `n` and `p`:\n    > rand = base.random.binomial.factory( 10, 0.8 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.binomial.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.binomial.NAME\n    'binomial'\n\n\nbase.random.binomial.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.binomial.PRNG;\n\n\nbase.random.binomial.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.binomial.seed;\n\n\nbase.random.binomial.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.binomial.seedLength;\n\n\nbase.random.binomial.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.binomial( 20, 0.8 )\n    <number>\n    > r = base.random.binomial( 20, 0.8 )\n    <number>\n    > r = base.random.binomial( 20, 0.8 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.binomial.state\n    <Uint32Array>\n\n    > r = base.random.binomial( 20, 0.8 )\n    <number>\n    > r = base.random.binomial( 20, 0.8 )\n    <number>\n\n    // Set the state:\n    > base.random.binomial.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.binomial( 20, 0.8 )\n    <number>\n    > r = base.random.binomial( 20, 0.8 )\n    <number>\n\n\nbase.random.binomial.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.binomial.stateLength;\n\n\nbase.random.binomial.byteLength\n    Size of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.binomial.byteLength;\n\n\nbase.random.binomial.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.binomial.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.binomial.factory":"\nbase.random.binomial.factory( [n, p, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a binomial distribution.\n\n    If provided `n` and `p`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `n` and `p`, the returned PRNG requires that both `n` and\n    `p` be provided at each invocation.\n\n    Parameters\n    ----------\n    n: integer (optional)\n        Number of trials.\n\n    p: number (optional)\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.binomial.factory();\n    > var r = rand( 20, 0.3 );\n    > r = rand( 10, 0.77 );\n\n    // Provide `n` and `p`:\n    > rand = base.random.binomial.factory( 10, 0.8 );\n    > r = rand();\n    > r = rand();\n\n","base.random.binomial.NAME":"\nbase.random.binomial.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.binomial.NAME\n    'binomial'\n\n","base.random.binomial.PRNG":"\nbase.random.binomial.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.binomial.PRNG;\n\n","base.random.binomial.seed":"\nbase.random.binomial.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.binomial.seed;\n\n","base.random.binomial.seedLength":"\nbase.random.binomial.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.binomial.seedLength;\n\n","base.random.binomial.state":"\nbase.random.binomial.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.binomial( 20, 0.8 )\n    <number>\n    > r = base.random.binomial( 20, 0.8 )\n    <number>\n    > r = base.random.binomial( 20, 0.8 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.binomial.state\n    <Uint32Array>\n\n    > r = base.random.binomial( 20, 0.8 )\n    <number>\n    > r = base.random.binomial( 20, 0.8 )\n    <number>\n\n    // Set the state:\n    > base.random.binomial.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.binomial( 20, 0.8 )\n    <number>\n    > r = base.random.binomial( 20, 0.8 )\n    <number>\n\n","base.random.binomial.stateLength":"\nbase.random.binomial.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.binomial.stateLength;\n\n","base.random.binomial.byteLength":"\nbase.random.binomial.byteLength\n    Size of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.binomial.byteLength;\n\n","base.random.binomial.toJSON":"\nbase.random.binomial.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.binomial.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.boxMuller":"\nbase.random.boxMuller()\n    Returns a pseudorandom number drawn from a standard normal distribution.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.boxMuller();\n\n\nbase.random.boxMuller.factory( [options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a standard normal distribution.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.boxMuller.factory();\n    > r = rand();\n    > r = rand();\n\n\nbase.random.boxMuller.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.boxMuller.NAME\n    'box-muller'\n\n\nbase.random.boxMuller.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.boxMuller.PRNG;\n\n\nbase.random.boxMuller.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.boxMuller.seed;\n\n\nbase.random.boxMuller.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.boxMuller.seedLength;\n\n\nbase.random.boxMuller.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.boxMuller()\n    <number>\n    > r = base.random.boxMuller()\n    <number>\n    > r = base.random.boxMuller()\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.boxMuller.state\n    <Uint32Array>\n\n    > r = base.random.boxMuller()\n    <number>\n    > r = base.random.boxMuller()\n    <number>\n\n    // Set the state:\n    > base.random.boxMuller.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.boxMuller()\n    <number>\n    > r = base.random.boxMuller()\n    <number>\n\n\nbase.random.boxMuller.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.boxMuller.stateLength;\n\n\nbase.random.boxMuller.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.boxMuller.byteLength;\n\n\nbase.random.boxMuller.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.boxMuller.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.boxMuller.factory":"\nbase.random.boxMuller.factory( [options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a standard normal distribution.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.boxMuller.factory();\n    > r = rand();\n    > r = rand();\n\n","base.random.boxMuller.NAME":"\nbase.random.boxMuller.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.boxMuller.NAME\n    'box-muller'\n\n","base.random.boxMuller.PRNG":"\nbase.random.boxMuller.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.boxMuller.PRNG;\n\n","base.random.boxMuller.seed":"\nbase.random.boxMuller.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.boxMuller.seed;\n\n","base.random.boxMuller.seedLength":"\nbase.random.boxMuller.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.boxMuller.seedLength;\n\n","base.random.boxMuller.state":"\nbase.random.boxMuller.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.boxMuller()\n    <number>\n    > r = base.random.boxMuller()\n    <number>\n    > r = base.random.boxMuller()\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.boxMuller.state\n    <Uint32Array>\n\n    > r = base.random.boxMuller()\n    <number>\n    > r = base.random.boxMuller()\n    <number>\n\n    // Set the state:\n    > base.random.boxMuller.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.boxMuller()\n    <number>\n    > r = base.random.boxMuller()\n    <number>\n\n","base.random.boxMuller.stateLength":"\nbase.random.boxMuller.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.boxMuller.stateLength;\n\n","base.random.boxMuller.byteLength":"\nbase.random.boxMuller.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.boxMuller.byteLength;\n\n","base.random.boxMuller.toJSON":"\nbase.random.boxMuller.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.boxMuller.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.cauchy":"\nbase.random.cauchy( x0, Ɣ )\n    Returns a pseudorandom number drawn from a Cauchy distribution.\n\n    If `x0` or `Ɣ` is `NaN` or `Ɣ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.cauchy( 2.0, 5.0 );\n\n\nbase.random.cauchy.factory( [x0, Ɣ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Cauchy distribution.\n\n    If provided `x0` and `Ɣ`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `x0` and `Ɣ`, the returned PRNG requires that both `x0` and\n    `Ɣ` be provided at each invocation.\n\n    Parameters\n    ----------\n    x0: number (optional)\n        Location parameter.\n\n    Ɣ: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.cauchy.factory();\n    > var r = rand( 0.0, 1.5 );\n    > r = rand( -2.0, 2.0 );\n\n    // Provide `x0` and `Ɣ`:\n    > rand = base.random.cauchy.factory( 0.0, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.cauchy.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.cauchy.NAME\n    'cauchy'\n\n\nbase.random.cauchy.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.cauchy.PRNG;\n\n\nbase.random.cauchy.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.cauchy.seed;\n\n\nbase.random.cauchy.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.cauchy.seedLength;\n\n\nbase.random.cauchy.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.cauchy( 2.0, 5.0 )\n    <number>\n    > r = base.random.cauchy( 2.0, 5.0 )\n    <number>\n    > r = base.random.cauchy( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.cauchy.state\n    <Uint32Array>\n\n    > r = base.random.cauchy( 2.0, 5.0 )\n    <number>\n    > r = base.random.cauchy( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.cauchy.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.cauchy( 2.0, 5.0 )\n    <number>\n    > r = base.random.cauchy( 2.0, 5.0 )\n    <number>\n\n\nbase.random.cauchy.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.cauchy.stateLength;\n\n\nbase.random.cauchy.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.cauchy.byteLength;\n\n\nbase.random.cauchy.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.cauchy.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.cauchy.factory":"\nbase.random.cauchy.factory( [x0, Ɣ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Cauchy distribution.\n\n    If provided `x0` and `Ɣ`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `x0` and `Ɣ`, the returned PRNG requires that both `x0` and\n    `Ɣ` be provided at each invocation.\n\n    Parameters\n    ----------\n    x0: number (optional)\n        Location parameter.\n\n    Ɣ: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.cauchy.factory();\n    > var r = rand( 0.0, 1.5 );\n    > r = rand( -2.0, 2.0 );\n\n    // Provide `x0` and `Ɣ`:\n    > rand = base.random.cauchy.factory( 0.0, 1.5 );\n    > r = rand();\n    > r = rand();\n\n","base.random.cauchy.NAME":"\nbase.random.cauchy.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.cauchy.NAME\n    'cauchy'\n\n","base.random.cauchy.PRNG":"\nbase.random.cauchy.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.cauchy.PRNG;\n\n","base.random.cauchy.seed":"\nbase.random.cauchy.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.cauchy.seed;\n\n","base.random.cauchy.seedLength":"\nbase.random.cauchy.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.cauchy.seedLength;\n\n","base.random.cauchy.state":"\nbase.random.cauchy.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.cauchy( 2.0, 5.0 )\n    <number>\n    > r = base.random.cauchy( 2.0, 5.0 )\n    <number>\n    > r = base.random.cauchy( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.cauchy.state\n    <Uint32Array>\n\n    > r = base.random.cauchy( 2.0, 5.0 )\n    <number>\n    > r = base.random.cauchy( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.cauchy.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.cauchy( 2.0, 5.0 )\n    <number>\n    > r = base.random.cauchy( 2.0, 5.0 )\n    <number>\n\n","base.random.cauchy.stateLength":"\nbase.random.cauchy.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.cauchy.stateLength;\n\n","base.random.cauchy.byteLength":"\nbase.random.cauchy.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.cauchy.byteLength;\n\n","base.random.cauchy.toJSON":"\nbase.random.cauchy.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.cauchy.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.chi":"\nbase.random.chi( k )\n    Returns a pseudorandom number drawn from a chi distribution.\n\n    If `k <= 0` or `k` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.chi( 2 );\n\n\nbase.random.chi.factory( [k, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a chi distribution.\n\n    If provided `k`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `k`, the returned PRNG requires that `k` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    k: number (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.chi.factory();\n    > var r = rand( 5 );\n    > r = rand( 3.14 );\n\n    // Provide `k`:\n    > rand = base.random.chi.factory( 3 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.chi.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.chi.NAME\n    'chi'\n\n\nbase.random.chi.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.chi.PRNG;\n\n\nbase.random.chi.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.chi.seed;\n\n\nbase.random.chi.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.chi.seedLength;\n\n\nbase.random.chi.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.chi( 2 )\n    <number>\n    > r = base.random.chi( 2 )\n    <number>\n    > r = base.random.chi( 2 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.chi.state\n    <Uint32Array>\n\n    > r = base.random.chi( 2 )\n    <number>\n    > r = base.random.chi( 2 )\n    <number>\n\n    // Set the state:\n    > base.random.chi.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.chi( 2 )\n    <number>\n    > r = base.random.chi( 2 )\n    <number>\n\n\nbase.random.chi.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.chi.stateLength;\n\n\nbase.random.chi.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.chi.byteLength;\n\n\nbase.random.chi.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.chi.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.chi.factory":"\nbase.random.chi.factory( [k, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a chi distribution.\n\n    If provided `k`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `k`, the returned PRNG requires that `k` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    k: number (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.chi.factory();\n    > var r = rand( 5 );\n    > r = rand( 3.14 );\n\n    // Provide `k`:\n    > rand = base.random.chi.factory( 3 );\n    > r = rand();\n    > r = rand();\n\n","base.random.chi.NAME":"\nbase.random.chi.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.chi.NAME\n    'chi'\n\n","base.random.chi.PRNG":"\nbase.random.chi.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.chi.PRNG;\n\n","base.random.chi.seed":"\nbase.random.chi.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.chi.seed;\n\n","base.random.chi.seedLength":"\nbase.random.chi.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.chi.seedLength;\n\n","base.random.chi.state":"\nbase.random.chi.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.chi( 2 )\n    <number>\n    > r = base.random.chi( 2 )\n    <number>\n    > r = base.random.chi( 2 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.chi.state\n    <Uint32Array>\n\n    > r = base.random.chi( 2 )\n    <number>\n    > r = base.random.chi( 2 )\n    <number>\n\n    // Set the state:\n    > base.random.chi.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.chi( 2 )\n    <number>\n    > r = base.random.chi( 2 )\n    <number>\n\n","base.random.chi.stateLength":"\nbase.random.chi.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.chi.stateLength;\n\n","base.random.chi.byteLength":"\nbase.random.chi.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.chi.byteLength;\n\n","base.random.chi.toJSON":"\nbase.random.chi.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.chi.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.chisquare":"\nbase.random.chisquare( k )\n    Returns a pseudorandom number drawn from a chi-square distribution.\n\n    If `k <= 0` or `k` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.chisquare( 2 );\n\n\nbase.random.chisquare.factory( [k, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a chi-square distribution.\n\n    If provided `k`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `k`, the returned PRNG requires that `k` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    k: number (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.chisquare.factory();\n    > var r = rand( 5 );\n    > r = rand( 3.14 );\n\n    // Provide `k`:\n    > rand = base.random.chisquare.factory( 3 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.chisquare.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.chisquare.NAME\n    'chisquare'\n\n\nbase.random.chisquare.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.chisquare.PRNG;\n\n\nbase.random.chisquare.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.chisquare.seed;\n\n\nbase.random.chisquare.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.chisquare.seedLength;\n\n\nbase.random.chisquare.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.chisquare( 2 )\n    <number>\n    > r = base.random.chisquare( 2 )\n    <number>\n    > r = base.random.chisquare( 2 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.chisquare.state\n    <Uint32Array>\n\n    > r = base.random.chisquare( 2 )\n    <number>\n    > r = base.random.chisquare( 2 )\n    <number>\n\n    // Set the state:\n    > base.random.chisquare.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.chisquare( 2 )\n    <number>\n    > r = base.random.chisquare( 2 )\n    <number>\n\n\nbase.random.chisquare.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.chisquare.stateLength;\n\n\nbase.random.chisquare.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.chisquare.byteLength;\n\n\nbase.random.chisquare.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.chisquare.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.chisquare.factory":"\nbase.random.chisquare.factory( [k, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a chi-square distribution.\n\n    If provided `k`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `k`, the returned PRNG requires that `k` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    k: number (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.chisquare.factory();\n    > var r = rand( 5 );\n    > r = rand( 3.14 );\n\n    // Provide `k`:\n    > rand = base.random.chisquare.factory( 3 );\n    > r = rand();\n    > r = rand();\n\n","base.random.chisquare.NAME":"\nbase.random.chisquare.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.chisquare.NAME\n    'chisquare'\n\n","base.random.chisquare.PRNG":"\nbase.random.chisquare.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.chisquare.PRNG;\n\n","base.random.chisquare.seed":"\nbase.random.chisquare.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.chisquare.seed;\n\n","base.random.chisquare.seedLength":"\nbase.random.chisquare.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.chisquare.seedLength;\n\n","base.random.chisquare.state":"\nbase.random.chisquare.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.chisquare( 2 )\n    <number>\n    > r = base.random.chisquare( 2 )\n    <number>\n    > r = base.random.chisquare( 2 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.chisquare.state\n    <Uint32Array>\n\n    > r = base.random.chisquare( 2 )\n    <number>\n    > r = base.random.chisquare( 2 )\n    <number>\n\n    // Set the state:\n    > base.random.chisquare.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.chisquare( 2 )\n    <number>\n    > r = base.random.chisquare( 2 )\n    <number>\n\n","base.random.chisquare.stateLength":"\nbase.random.chisquare.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.chisquare.stateLength;\n\n","base.random.chisquare.byteLength":"\nbase.random.chisquare.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.chisquare.byteLength;\n\n","base.random.chisquare.toJSON":"\nbase.random.chisquare.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.chisquare.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.cosine":"\nbase.random.cosine( μ, s )\n    Returns a pseudorandom number drawn from a raised cosine distribution.\n\n    If `μ` or `s` is `NaN` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.cosine( 2.0, 5.0 );\n\n\nbase.random.cosine.factory( [μ, s, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a raised cosine distribution.\n\n    If provided `μ` and `s`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `s`, the returned PRNG requires that both `μ` and\n    `s` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Location parameter.\n\n    s: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.cosine.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `s`:\n    > rand = base.random.cosine.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.cosine.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.cosine.NAME\n    'cosine'\n\n\nbase.random.cosine.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.cosine.PRNG;\n\n\nbase.random.cosine.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.cosine.seed;\n\n\nbase.random.cosine.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.cosine.seedLength;\n\n\nbase.random.cosine.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.cosine( 2.0, 5.0 )\n    <number>\n    > r = base.random.cosine( 2.0, 5.0 )\n    <number>\n    > r = base.random.cosine( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.cosine.state\n    <Uint32Array>\n\n    > r = base.random.cosine( 2.0, 5.0 )\n    <number>\n    > r = base.random.cosine( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.cosine.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.cosine( 2.0, 5.0 )\n    <number>\n    > r = base.random.cosine( 2.0, 5.0 )\n    <number>\n\n\nbase.random.cosine.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.cosine.stateLength;\n\n\nbase.random.cosine.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.cosine.byteLength;\n\n\nbase.random.cosine.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.cosine.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.cosine.factory":"\nbase.random.cosine.factory( [μ, s, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a raised cosine distribution.\n\n    If provided `μ` and `s`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `s`, the returned PRNG requires that both `μ` and\n    `s` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Location parameter.\n\n    s: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.cosine.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `s`:\n    > rand = base.random.cosine.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n","base.random.cosine.NAME":"\nbase.random.cosine.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.cosine.NAME\n    'cosine'\n\n","base.random.cosine.PRNG":"\nbase.random.cosine.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.cosine.PRNG;\n\n","base.random.cosine.seed":"\nbase.random.cosine.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.cosine.seed;\n\n","base.random.cosine.seedLength":"\nbase.random.cosine.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.cosine.seedLength;\n\n","base.random.cosine.state":"\nbase.random.cosine.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.cosine( 2.0, 5.0 )\n    <number>\n    > r = base.random.cosine( 2.0, 5.0 )\n    <number>\n    > r = base.random.cosine( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.cosine.state\n    <Uint32Array>\n\n    > r = base.random.cosine( 2.0, 5.0 )\n    <number>\n    > r = base.random.cosine( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.cosine.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.cosine( 2.0, 5.0 )\n    <number>\n    > r = base.random.cosine( 2.0, 5.0 )\n    <number>\n\n","base.random.cosine.stateLength":"\nbase.random.cosine.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.cosine.stateLength;\n\n","base.random.cosine.byteLength":"\nbase.random.cosine.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.cosine.byteLength;\n\n","base.random.cosine.toJSON":"\nbase.random.cosine.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.cosine.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.discreteUniform":"\nbase.random.discreteUniform( a, b )\n    Returns a pseudorandom number drawn from a discrete uniform distribution.\n\n    If `a > b`, the function returns `NaN`.\n\n    If `a` or `b` is not an integer value, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.discreteUniform( 2, 50 );\n\n\nbase.random.discreteUniform.factory( [a, b, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a discrete uniform distribution.\n\n    If provided `a` and `b`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `a` and `b`, the returned PRNG requires that both `a` and\n    `b` be provided at each invocation.\n\n    Parameters\n    ----------\n    a: integer (optional)\n        Minimum support.\n\n    b: integer (optional)\n        Maximum support.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom integers. If provided, the `state` and `seed`\n        options are ignored. In order to seed the returned pseudorandom number\n        generator, one must seed the provided `prng` (assuming the provided\n        `prng` is seedable). The provided PRNG must have `MIN` and `MAX`\n        properties specifying the minimum and maximum possible pseudorandom\n        integers.\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.discreteUniform.factory();\n    > var r = rand( 0, 10 );\n    > r = rand( -20, 20 );\n\n    // Provide `a` and `b`:\n    > rand = base.random.discreteUniform.factory( 0, 10 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.discreteUniform.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.discreteUniform.NAME\n    'discrete-uniform'\n\n\nbase.random.discreteUniform.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.discreteUniform.PRNG;\n\n\nbase.random.discreteUniform.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.discreteUniform.seed;\n\n\nbase.random.discreteUniform.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.discreteUniform.seedLength;\n\n\nbase.random.discreteUniform.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.discreteUniform( 2, 50 )\n    <number>\n    > r = base.random.discreteUniform( 2, 50 )\n    <number>\n    > r = base.random.discreteUniform( 2, 50 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.discreteUniform.state\n    <Uint32Array>\n\n    > r = base.random.discreteUniform( 2, 50 )\n    <number>\n    > r = base.random.discreteUniform( 2, 50 )\n    <number>\n\n    // Set the state:\n    > base.random.discreteUniform.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.discreteUniform( 2, 50 )\n    <number>\n    > r = base.random.discreteUniform( 2, 50 )\n    <number>\n\n\nbase.random.discreteUniform.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.discreteUniform.stateLength;\n\n\nbase.random.discreteUniform.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.discreteUniform.byteLength;\n\n\nbase.random.discreteUniform.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.discreteUniform.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.discreteUniform.factory":"\nbase.random.discreteUniform.factory( [a, b, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a discrete uniform distribution.\n\n    If provided `a` and `b`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `a` and `b`, the returned PRNG requires that both `a` and\n    `b` be provided at each invocation.\n\n    Parameters\n    ----------\n    a: integer (optional)\n        Minimum support.\n\n    b: integer (optional)\n        Maximum support.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom integers. If provided, the `state` and `seed`\n        options are ignored. In order to seed the returned pseudorandom number\n        generator, one must seed the provided `prng` (assuming the provided\n        `prng` is seedable). The provided PRNG must have `MIN` and `MAX`\n        properties specifying the minimum and maximum possible pseudorandom\n        integers.\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.discreteUniform.factory();\n    > var r = rand( 0, 10 );\n    > r = rand( -20, 20 );\n\n    // Provide `a` and `b`:\n    > rand = base.random.discreteUniform.factory( 0, 10 );\n    > r = rand();\n    > r = rand();\n\n","base.random.discreteUniform.NAME":"\nbase.random.discreteUniform.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.discreteUniform.NAME\n    'discrete-uniform'\n\n","base.random.discreteUniform.PRNG":"\nbase.random.discreteUniform.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.discreteUniform.PRNG;\n\n","base.random.discreteUniform.seed":"\nbase.random.discreteUniform.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.discreteUniform.seed;\n\n","base.random.discreteUniform.seedLength":"\nbase.random.discreteUniform.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.discreteUniform.seedLength;\n\n","base.random.discreteUniform.state":"\nbase.random.discreteUniform.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.discreteUniform( 2, 50 )\n    <number>\n    > r = base.random.discreteUniform( 2, 50 )\n    <number>\n    > r = base.random.discreteUniform( 2, 50 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.discreteUniform.state\n    <Uint32Array>\n\n    > r = base.random.discreteUniform( 2, 50 )\n    <number>\n    > r = base.random.discreteUniform( 2, 50 )\n    <number>\n\n    // Set the state:\n    > base.random.discreteUniform.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.discreteUniform( 2, 50 )\n    <number>\n    > r = base.random.discreteUniform( 2, 50 )\n    <number>\n\n","base.random.discreteUniform.stateLength":"\nbase.random.discreteUniform.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.discreteUniform.stateLength;\n\n","base.random.discreteUniform.byteLength":"\nbase.random.discreteUniform.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.discreteUniform.byteLength;\n\n","base.random.discreteUniform.toJSON":"\nbase.random.discreteUniform.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.discreteUniform.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.erlang":"\nbase.random.erlang( k, λ )\n    Returns a pseudorandom number drawn from an Erlang distribution.\n\n    If `k` is not a positive integer or `λ <= 0`, the function returns `NaN`.\n\n    If `k` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: integer\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.erlang( 2, 5.0 );\n\n\nbase.random.erlang.factory( [k, λ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from an Erlang distribution.\n\n    If provided `k` and `λ`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `k` and `λ`, the returned PRNG requires that both `k` and\n    `λ` be provided at each invocation.\n\n    Parameters\n    ----------\n    k: integer (optional)\n        Shape parameter.\n\n    λ: number (optional)\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.erlang.factory();\n    > var r = rand( 2, 1.0 );\n    > r = rand( 4, 3.14 );\n\n    // Provide `k` and `λ`:\n    > rand = base.random.erlang.factory( 2, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.erlang.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.erlang.NAME\n    'erlang'\n\n\nbase.random.erlang.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.erlang.PRNG;\n\n\nbase.random.erlang.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.erlang.seed;\n\n\nbase.random.erlang.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.erlang.seedLength;\n\n\nbase.random.erlang.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.erlang( 2, 5.0 )\n    <number>\n    > r = base.random.erlang( 2, 5.0 )\n    <number>\n    > r = base.random.erlang( 2, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.erlang.state\n    <Uint32Array>\n\n    > r = base.random.erlang( 2, 5.0 )\n    <number>\n    > r = base.random.erlang( 2, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.erlang.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.erlang( 2, 5.0 )\n    <number>\n    > r = base.random.erlang( 2, 5.0 )\n    <number>\n\n\nbase.random.erlang.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.erlang.stateLength;\n\n\nbase.random.erlang.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.erlang.byteLength;\n\n\nbase.random.erlang.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.erlang.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.erlang.factory":"\nbase.random.erlang.factory( [k, λ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from an Erlang distribution.\n\n    If provided `k` and `λ`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `k` and `λ`, the returned PRNG requires that both `k` and\n    `λ` be provided at each invocation.\n\n    Parameters\n    ----------\n    k: integer (optional)\n        Shape parameter.\n\n    λ: number (optional)\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.erlang.factory();\n    > var r = rand( 2, 1.0 );\n    > r = rand( 4, 3.14 );\n\n    // Provide `k` and `λ`:\n    > rand = base.random.erlang.factory( 2, 1.5 );\n    > r = rand();\n    > r = rand();\n\n","base.random.erlang.NAME":"\nbase.random.erlang.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.erlang.NAME\n    'erlang'\n\n","base.random.erlang.PRNG":"\nbase.random.erlang.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.erlang.PRNG;\n\n","base.random.erlang.seed":"\nbase.random.erlang.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.erlang.seed;\n\n","base.random.erlang.seedLength":"\nbase.random.erlang.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.erlang.seedLength;\n\n","base.random.erlang.state":"\nbase.random.erlang.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.erlang( 2, 5.0 )\n    <number>\n    > r = base.random.erlang( 2, 5.0 )\n    <number>\n    > r = base.random.erlang( 2, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.erlang.state\n    <Uint32Array>\n\n    > r = base.random.erlang( 2, 5.0 )\n    <number>\n    > r = base.random.erlang( 2, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.erlang.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.erlang( 2, 5.0 )\n    <number>\n    > r = base.random.erlang( 2, 5.0 )\n    <number>\n\n","base.random.erlang.stateLength":"\nbase.random.erlang.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.erlang.stateLength;\n\n","base.random.erlang.byteLength":"\nbase.random.erlang.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.erlang.byteLength;\n\n","base.random.erlang.toJSON":"\nbase.random.erlang.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.erlang.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.exponential":"\nbase.random.exponential( λ )\n    Returns a pseudorandom number drawn from an exponential distribution.\n\n    If `λ <= 0` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.exponential( 7.9 );\n\n\nbase.random.exponential.factory( [λ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from an exponential distribution.\n\n    If provided `λ`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `λ`, the returned PRNG requires that `λ` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    λ: number (optional)\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.exponential.factory();\n    > var r = rand( 5.0 );\n    > r = rand( 3.14 );\n\n    // Provide `λ`:\n    > rand = base.random.exponential.factory( 10.0 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.exponential.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.exponential.NAME\n    'exponential'\n\n\nbase.random.exponential.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.exponential.PRNG;\n\n\nbase.random.exponential.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.exponential.seed;\n\n\nbase.random.exponential.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.exponential.seedLength;\n\n\nbase.random.exponential.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.exponential( 7.9 )\n    <number>\n    > r = base.random.exponential( 7.9 )\n    <number>\n    > r = base.random.exponential( 7.9 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.exponential.state\n    <Uint32Array>\n\n    > r = base.random.exponential( 7.9 )\n    <number>\n    > r = base.random.exponential( 7.9 )\n    <number>\n\n    // Set the state:\n    > base.random.exponential.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.exponential( 7.9 )\n    <number>\n    > r = base.random.exponential( 7.9 )\n    <number>\n\n\nbase.random.exponential.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.exponential.stateLength;\n\n\nbase.random.exponential.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.exponential.byteLength;\n\n\nbase.random.exponential.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.exponential.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.exponential.factory":"\nbase.random.exponential.factory( [λ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from an exponential distribution.\n\n    If provided `λ`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `λ`, the returned PRNG requires that `λ` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    λ: number (optional)\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.exponential.factory();\n    > var r = rand( 5.0 );\n    > r = rand( 3.14 );\n\n    // Provide `λ`:\n    > rand = base.random.exponential.factory( 10.0 );\n    > r = rand();\n    > r = rand();\n\n","base.random.exponential.NAME":"\nbase.random.exponential.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.exponential.NAME\n    'exponential'\n\n","base.random.exponential.PRNG":"\nbase.random.exponential.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.exponential.PRNG;\n\n","base.random.exponential.seed":"\nbase.random.exponential.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.exponential.seed;\n\n","base.random.exponential.seedLength":"\nbase.random.exponential.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.exponential.seedLength;\n\n","base.random.exponential.state":"\nbase.random.exponential.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.exponential( 7.9 )\n    <number>\n    > r = base.random.exponential( 7.9 )\n    <number>\n    > r = base.random.exponential( 7.9 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.exponential.state\n    <Uint32Array>\n\n    > r = base.random.exponential( 7.9 )\n    <number>\n    > r = base.random.exponential( 7.9 )\n    <number>\n\n    // Set the state:\n    > base.random.exponential.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.exponential( 7.9 )\n    <number>\n    > r = base.random.exponential( 7.9 )\n    <number>\n\n","base.random.exponential.stateLength":"\nbase.random.exponential.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.exponential.stateLength;\n\n","base.random.exponential.byteLength":"\nbase.random.exponential.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.exponential.byteLength;\n\n","base.random.exponential.toJSON":"\nbase.random.exponential.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.exponential.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.f":"\nbase.random.f( d1, d2 )\n    Returns a pseudorandom number drawn from an F distribution.\n\n    If `d1 <= 0` or `d2 <= 0`, the function returns `NaN`.\n\n    If `d1` or `d2` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    d1: number\n        Degrees of freedom.\n\n    d2: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.f( 2.0, 5.0 );\n\n\nbase.random.f.factory( [d1, d2, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from an F distribution.\n\n    If provided `d1` and `d2`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `d1` and `d2`, the returned PRNG requires that both `d1` and\n    `d2` be provided at each invocation.\n\n    Parameters\n    ----------\n    d1: number (optional)\n        Degrees of freedom.\n\n    d2: number (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.f.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 3.0, 3.14 );\n\n    // Provide `d1` and `d2`:\n    > rand = base.random.f.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.f.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.f.NAME\n    'f'\n\n\nbase.random.f.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.f.PRNG;\n\n\nbase.random.f.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.f.seed;\n\n\nbase.random.f.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.f.seedLength;\n\n\nbase.random.f.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.f( 1.5, 1.5 )\n    <number>\n    > r = base.random.f( 1.5, 1.5 )\n    <number>\n    > r = base.random.f( 1.5, 1.5 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.f.state\n    <Uint32Array>\n\n    > r = base.random.f( 1.5, 1.5 )\n    <number>\n    > r = base.random.f( 1.5, 1.5 )\n    <number>\n\n    // Set the state:\n    > base.random.f.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.f( 1.5, 1.5 )\n    <number>\n    > r = base.random.f( 1.5, 1.5 )\n    <number>\n\n\nbase.random.f.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.f.stateLength;\n\n\nbase.random.f.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.f.byteLength;\n\n\nbase.random.f.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.f.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.f.factory":"\nbase.random.f.factory( [d1, d2, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from an F distribution.\n\n    If provided `d1` and `d2`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `d1` and `d2`, the returned PRNG requires that both `d1` and\n    `d2` be provided at each invocation.\n\n    Parameters\n    ----------\n    d1: number (optional)\n        Degrees of freedom.\n\n    d2: number (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.f.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 3.0, 3.14 );\n\n    // Provide `d1` and `d2`:\n    > rand = base.random.f.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n","base.random.f.NAME":"\nbase.random.f.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.f.NAME\n    'f'\n\n","base.random.f.PRNG":"\nbase.random.f.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.f.PRNG;\n\n","base.random.f.seed":"\nbase.random.f.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.f.seed;\n\n","base.random.f.seedLength":"\nbase.random.f.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.f.seedLength;\n\n","base.random.f.state":"\nbase.random.f.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.f( 1.5, 1.5 )\n    <number>\n    > r = base.random.f( 1.5, 1.5 )\n    <number>\n    > r = base.random.f( 1.5, 1.5 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.f.state\n    <Uint32Array>\n\n    > r = base.random.f( 1.5, 1.5 )\n    <number>\n    > r = base.random.f( 1.5, 1.5 )\n    <number>\n\n    // Set the state:\n    > base.random.f.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.f( 1.5, 1.5 )\n    <number>\n    > r = base.random.f( 1.5, 1.5 )\n    <number>\n\n","base.random.f.stateLength":"\nbase.random.f.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.f.stateLength;\n\n","base.random.f.byteLength":"\nbase.random.f.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.f.byteLength;\n\n","base.random.f.toJSON":"\nbase.random.f.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.f.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.frechet":"\nbase.random.frechet( α, s, m )\n    Returns a pseudorandom number drawn from a Fréchet distribution.\n\n    If provided `α <= 0` or `s <= 0`, the function returns `NaN`.\n\n    If either `α`, `s`, or `m` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.frechet( 2.0, 5.0, 3.33 );\n\n\nbase.random.frechet.factory( [α, s, m, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a triangular distribution.\n\n    If provided `α`, `s`, and `m`, the returned PRNG returns random variates\n    drawn from the specified distribution.\n\n    If not provided `α`, `s`, and `m`, the returned PRNG requires that `α`, `s`,\n    and `m` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter.\n\n    s: number (optional)\n        Scale parameter.\n\n    m: number (optional)\n        Location parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.frechet.factory();\n    > var r = rand( 1.0, 1.0, 0.5 );\n    > r = rand( 2.0, 2.0, 1.0 );\n\n    // Provide `α`, `s`, and `m`:\n    > rand = base.random.frechet.factory( 1.0, 1.0, 0.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.frechet.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.frechet.NAME\n    'frechet'\n\n\nbase.random.frechet.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.frechet.PRNG;\n\n\nbase.random.frechet.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.frechet.seed;\n\n\nbase.random.frechet.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.frechet.seedLength;\n\n\nbase.random.frechet.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.frechet( 1.0, 1.0, 0.5 )\n    <number>\n    > r = base.random.frechet( 1.0, 1.0, 0.5 )\n    <number>\n    > r = base.random.frechet( 1.0, 1.0, 0.5 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.frechet.state\n    <Uint32Array>\n\n    > r = base.random.frechet( 1.0, 1.0, 0.5 )\n    <number>\n    > r = base.random.frechet( 1.0, 1.0, 0.5 )\n    <number>\n\n    // Set the state:\n    > base.random.frechet.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.frechet( 1.0, 1.0, 0.5 )\n    <number>\n    > r = base.random.frechet( 1.0, 1.0, 0.5 )\n    <number>\n\n\nbase.random.frechet.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.frechet.stateLength;\n\n\nbase.random.frechet.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.frechet.byteLength;\n\n\nbase.random.frechet.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.frechet.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.frechet.factory":"\nbase.random.frechet.factory( [α, s, m, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a triangular distribution.\n\n    If provided `α`, `s`, and `m`, the returned PRNG returns random variates\n    drawn from the specified distribution.\n\n    If not provided `α`, `s`, and `m`, the returned PRNG requires that `α`, `s`,\n    and `m` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter.\n\n    s: number (optional)\n        Scale parameter.\n\n    m: number (optional)\n        Location parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.frechet.factory();\n    > var r = rand( 1.0, 1.0, 0.5 );\n    > r = rand( 2.0, 2.0, 1.0 );\n\n    // Provide `α`, `s`, and `m`:\n    > rand = base.random.frechet.factory( 1.0, 1.0, 0.5 );\n    > r = rand();\n    > r = rand();\n\n","base.random.frechet.NAME":"\nbase.random.frechet.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.frechet.NAME\n    'frechet'\n\n","base.random.frechet.PRNG":"\nbase.random.frechet.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.frechet.PRNG;\n\n","base.random.frechet.seed":"\nbase.random.frechet.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.frechet.seed;\n\n","base.random.frechet.seedLength":"\nbase.random.frechet.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.frechet.seedLength;\n\n","base.random.frechet.state":"\nbase.random.frechet.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.frechet( 1.0, 1.0, 0.5 )\n    <number>\n    > r = base.random.frechet( 1.0, 1.0, 0.5 )\n    <number>\n    > r = base.random.frechet( 1.0, 1.0, 0.5 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.frechet.state\n    <Uint32Array>\n\n    > r = base.random.frechet( 1.0, 1.0, 0.5 )\n    <number>\n    > r = base.random.frechet( 1.0, 1.0, 0.5 )\n    <number>\n\n    // Set the state:\n    > base.random.frechet.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.frechet( 1.0, 1.0, 0.5 )\n    <number>\n    > r = base.random.frechet( 1.0, 1.0, 0.5 )\n    <number>\n\n","base.random.frechet.stateLength":"\nbase.random.frechet.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.frechet.stateLength;\n\n","base.random.frechet.byteLength":"\nbase.random.frechet.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.frechet.byteLength;\n\n","base.random.frechet.toJSON":"\nbase.random.frechet.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.frechet.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.gamma":"\nbase.random.gamma( α, β )\n    Returns a pseudorandom number drawn from a gamma distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.gamma( 2.0, 5.0 );\n\n\nbase.random.gamma.factory( [α, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a gamma distribution.\n\n    If provided `α` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `α` and `β`, the returned PRNG requires that both `α` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter.\n\n    β: number (optional)\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.gamma.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 3.14, 2.25 );\n\n    // Provide `α` and `β`:\n    > rand = base.random.gamma.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.gamma.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.gamma.NAME\n    'gamma'\n\n\nbase.random.gamma.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.gamma.PRNG;\n\n\nbase.random.gamma.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.gamma.seed;\n\n\nbase.random.gamma.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.gamma.seedLength;\n\n\nbase.random.gamma.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.gamma( 2.0, 5.0 )\n    <number>\n    > r = base.random.gamma( 2.0, 5.0 )\n    <number>\n    > r = base.random.gamma( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.gamma.state\n    <Uint32Array>\n\n    > r = base.random.gamma( 2.0, 5.0 )\n    <number>\n    > r = base.random.gamma( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.gamma.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.gamma( 2.0, 5.0 )\n    <number>\n    > r = base.random.gamma( 2.0, 5.0 )\n    <number>\n\n\nbase.random.gamma.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.gamma.stateLength;\n\n\nbase.random.gamma.byteLength\n    Size of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.gamma.byteLength;\n\n\nbase.random.gamma.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.gamma.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.gamma.factory":"\nbase.random.gamma.factory( [α, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a gamma distribution.\n\n    If provided `α` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `α` and `β`, the returned PRNG requires that both `α` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter.\n\n    β: number (optional)\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.gamma.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 3.14, 2.25 );\n\n    // Provide `α` and `β`:\n    > rand = base.random.gamma.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n","base.random.gamma.NAME":"\nbase.random.gamma.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.gamma.NAME\n    'gamma'\n\n","base.random.gamma.PRNG":"\nbase.random.gamma.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.gamma.PRNG;\n\n","base.random.gamma.seed":"\nbase.random.gamma.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.gamma.seed;\n\n","base.random.gamma.seedLength":"\nbase.random.gamma.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.gamma.seedLength;\n\n","base.random.gamma.state":"\nbase.random.gamma.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.gamma( 2.0, 5.0 )\n    <number>\n    > r = base.random.gamma( 2.0, 5.0 )\n    <number>\n    > r = base.random.gamma( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.gamma.state\n    <Uint32Array>\n\n    > r = base.random.gamma( 2.0, 5.0 )\n    <number>\n    > r = base.random.gamma( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.gamma.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.gamma( 2.0, 5.0 )\n    <number>\n    > r = base.random.gamma( 2.0, 5.0 )\n    <number>\n\n","base.random.gamma.stateLength":"\nbase.random.gamma.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.gamma.stateLength;\n\n","base.random.gamma.byteLength":"\nbase.random.gamma.byteLength\n    Size of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.gamma.byteLength;\n\n","base.random.gamma.toJSON":"\nbase.random.gamma.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.gamma.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.geometric":"\nbase.random.geometric( p )\n    Returns a pseudorandom number drawn from a geometric distribution.\n\n    If `p < 0` or `p > 1` or `p` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.geometric( 0.8 );\n\n\nbase.random.geometric.factory( [p, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a geometric distribution.\n\n    If provided `p`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `p`, the returned PRNG requires that `p` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    p: number (optional)\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.geometric.factory();\n    > var r = rand( 0.3 );\n    > r = rand( 0.59 );\n\n    // Provide `p`:\n    > rand = base.random.geometric.factory( 0.3 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.geometric.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.geometric.NAME\n    'geometric'\n\n\nbase.random.geometric.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.geometric.PRNG;\n\n\nbase.random.geometric.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.geometric.seed;\n\n\nbase.random.geometric.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.geometric.seedLength;\n\n\nbase.random.geometric.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.geometric( 0.3 )\n    <number>\n    > r = base.random.geometric( 0.3 )\n    <number>\n    > r = base.random.geometric( 0.3 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.geometric.state\n    <Uint32Array>\n\n    > r = base.random.geometric( 0.3 )\n    <number>\n    > r = base.random.geometric( 0.3 )\n    <number>\n\n    // Set the state:\n    > base.random.geometric.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.geometric( 0.3 )\n    <number>\n    > r = base.random.geometric( 0.3 )\n    <number>\n\n\nbase.random.geometric.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.geometric.stateLength;\n\n\nbase.random.geometric.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.geometric.byteLength;\n\n\nbase.random.geometric.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.geometric.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.geometric.factory":"\nbase.random.geometric.factory( [p, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a geometric distribution.\n\n    If provided `p`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `p`, the returned PRNG requires that `p` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    p: number (optional)\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.geometric.factory();\n    > var r = rand( 0.3 );\n    > r = rand( 0.59 );\n\n    // Provide `p`:\n    > rand = base.random.geometric.factory( 0.3 );\n    > r = rand();\n    > r = rand();\n\n","base.random.geometric.NAME":"\nbase.random.geometric.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.geometric.NAME\n    'geometric'\n\n","base.random.geometric.PRNG":"\nbase.random.geometric.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.geometric.PRNG;\n\n","base.random.geometric.seed":"\nbase.random.geometric.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.geometric.seed;\n\n","base.random.geometric.seedLength":"\nbase.random.geometric.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.geometric.seedLength;\n\n","base.random.geometric.state":"\nbase.random.geometric.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.geometric( 0.3 )\n    <number>\n    > r = base.random.geometric( 0.3 )\n    <number>\n    > r = base.random.geometric( 0.3 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.geometric.state\n    <Uint32Array>\n\n    > r = base.random.geometric( 0.3 )\n    <number>\n    > r = base.random.geometric( 0.3 )\n    <number>\n\n    // Set the state:\n    > base.random.geometric.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.geometric( 0.3 )\n    <number>\n    > r = base.random.geometric( 0.3 )\n    <number>\n\n","base.random.geometric.stateLength":"\nbase.random.geometric.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.geometric.stateLength;\n\n","base.random.geometric.byteLength":"\nbase.random.geometric.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.geometric.byteLength;\n\n","base.random.geometric.toJSON":"\nbase.random.geometric.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.geometric.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.gumbel":"\nbase.random.gumbel( μ, β )\n    Returns a pseudorandom number drawn from a Gumbel distribution.\n\n    If `μ` or `β` is `NaN` or `β <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.gumbel( 2.0, 5.0 );\n\n\nbase.random.gumbel.factory( [μ, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Gumbel distribution.\n\n    If provided `μ` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `β`, the returned PRNG requires that both `μ` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    β: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.gumbel.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `β`:\n    > rand = base.random.gumbel.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.gumbel.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.gumbel.NAME\n    'gumbel'\n\n\nbase.random.gumbel.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.gumbel.PRNG;\n\n\nbase.random.gumbel.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.gumbel.seed;\n\n\nbase.random.gumbel.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.gumbel.seedLength;\n\n\nbase.random.gumbel.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.gumbel( 2.0, 5.0 )\n    <number>\n    > r = base.random.gumbel( 2.0, 5.0 )\n    <number>\n    > r = base.random.gumbel( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.gumbel.state\n    <Uint32Array>\n\n    > r = base.random.gumbel( 2.0, 5.0 )\n    <number>\n    > r = base.random.gumbel( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.gumbel.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.gumbel( 2.0, 5.0 )\n    <number>\n    > r = base.random.gumbel( 2.0, 5.0 )\n    <number>\n\n\nbase.random.gumbel.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.gumbel.stateLength;\n\n\nbase.random.gumbel.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.gumbel.byteLength;\n\n\nbase.random.gumbel.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.gumbel.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.gumbel.factory":"\nbase.random.gumbel.factory( [μ, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Gumbel distribution.\n\n    If provided `μ` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `β`, the returned PRNG requires that both `μ` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    β: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.gumbel.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `β`:\n    > rand = base.random.gumbel.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n","base.random.gumbel.NAME":"\nbase.random.gumbel.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.gumbel.NAME\n    'gumbel'\n\n","base.random.gumbel.PRNG":"\nbase.random.gumbel.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.gumbel.PRNG;\n\n","base.random.gumbel.seed":"\nbase.random.gumbel.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.gumbel.seed;\n\n","base.random.gumbel.seedLength":"\nbase.random.gumbel.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.gumbel.seedLength;\n\n","base.random.gumbel.state":"\nbase.random.gumbel.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.gumbel( 2.0, 5.0 )\n    <number>\n    > r = base.random.gumbel( 2.0, 5.0 )\n    <number>\n    > r = base.random.gumbel( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.gumbel.state\n    <Uint32Array>\n\n    > r = base.random.gumbel( 2.0, 5.0 )\n    <number>\n    > r = base.random.gumbel( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.gumbel.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.gumbel( 2.0, 5.0 )\n    <number>\n    > r = base.random.gumbel( 2.0, 5.0 )\n    <number>\n\n","base.random.gumbel.stateLength":"\nbase.random.gumbel.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.gumbel.stateLength;\n\n","base.random.gumbel.byteLength":"\nbase.random.gumbel.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.gumbel.byteLength;\n\n","base.random.gumbel.toJSON":"\nbase.random.gumbel.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.gumbel.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.hypergeometric":"\nbase.random.hypergeometric( N, K, n )\n    Returns a pseudorandom number drawn from a hypergeometric distribution.\n\n    `N`, `K`, and `n` must all be nonnegative integers; otherwise, the function\n    returns `NaN`.\n\n    If `n > N` or `K > N`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.hypergeometric( 20, 10, 7 );\n\n\nbase.random.hypergeometric.factory( [N, K, n, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a hypergeometric distribution.\n\n    If provided `N`, `K`, and `n`, the returned PRNG returns random variates\n    drawn from the specified distribution.\n\n    If not provided `N`, `K`, and `n`, the returned PRNG requires that `N`, `K`,\n    and `n` be provided at each invocation.\n\n    Parameters\n    ----------\n    N: integer (optional)\n        Population size.\n\n    K: integer (optional)\n        Subpopulation size.\n\n    n: integer (optional)\n        Number of draws.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.hypergeometric.factory();\n    > var r = rand( 20, 10, 15 );\n    > r = rand( 20, 10, 7 );\n\n    // Provide `N`, `K`, and `n`:\n    > rand = base.random.hypergeometric.factory( 20, 10, 15 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.hypergeometric.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.hypergeometric.NAME\n    'hypergeometric'\n\n\nbase.random.hypergeometric.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.hypergeometric.PRNG;\n\n\nbase.random.hypergeometric.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.hypergeometric.seed;\n\n\nbase.random.hypergeometric.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.hypergeometric.seedLength;\n\n\nbase.random.hypergeometric.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.hypergeometric( 20, 10, 15 )\n    <number>\n    > r = base.random.hypergeometric( 20, 10, 15 )\n    <number>\n    > r = base.random.hypergeometric( 20, 10, 15 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.hypergeometric.state\n    <Uint32Array>\n\n    > r = base.random.hypergeometric( 20, 10, 15 )\n    <number>\n    > r = base.random.hypergeometric( 20, 10, 15 )\n    <number>\n\n    // Set the state:\n    > base.random.hypergeometric.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.hypergeometric( 20, 10, 15 )\n    <number>\n    > r = base.random.hypergeometric( 20, 10, 15 )\n    <number>\n\n\nbase.random.hypergeometric.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.hypergeometric.stateLength;\n\n\nbase.random.hypergeometric.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.hypergeometric.byteLength;\n\n\nbase.random.hypergeometric.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.hypergeometric.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.hypergeometric.factory":"\nbase.random.hypergeometric.factory( [N, K, n, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a hypergeometric distribution.\n\n    If provided `N`, `K`, and `n`, the returned PRNG returns random variates\n    drawn from the specified distribution.\n\n    If not provided `N`, `K`, and `n`, the returned PRNG requires that `N`, `K`,\n    and `n` be provided at each invocation.\n\n    Parameters\n    ----------\n    N: integer (optional)\n        Population size.\n\n    K: integer (optional)\n        Subpopulation size.\n\n    n: integer (optional)\n        Number of draws.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.hypergeometric.factory();\n    > var r = rand( 20, 10, 15 );\n    > r = rand( 20, 10, 7 );\n\n    // Provide `N`, `K`, and `n`:\n    > rand = base.random.hypergeometric.factory( 20, 10, 15 );\n    > r = rand();\n    > r = rand();\n\n","base.random.hypergeometric.NAME":"\nbase.random.hypergeometric.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.hypergeometric.NAME\n    'hypergeometric'\n\n","base.random.hypergeometric.PRNG":"\nbase.random.hypergeometric.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.hypergeometric.PRNG;\n\n","base.random.hypergeometric.seed":"\nbase.random.hypergeometric.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.hypergeometric.seed;\n\n","base.random.hypergeometric.seedLength":"\nbase.random.hypergeometric.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.hypergeometric.seedLength;\n\n","base.random.hypergeometric.state":"\nbase.random.hypergeometric.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.hypergeometric( 20, 10, 15 )\n    <number>\n    > r = base.random.hypergeometric( 20, 10, 15 )\n    <number>\n    > r = base.random.hypergeometric( 20, 10, 15 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.hypergeometric.state\n    <Uint32Array>\n\n    > r = base.random.hypergeometric( 20, 10, 15 )\n    <number>\n    > r = base.random.hypergeometric( 20, 10, 15 )\n    <number>\n\n    // Set the state:\n    > base.random.hypergeometric.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.hypergeometric( 20, 10, 15 )\n    <number>\n    > r = base.random.hypergeometric( 20, 10, 15 )\n    <number>\n\n","base.random.hypergeometric.stateLength":"\nbase.random.hypergeometric.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.hypergeometric.stateLength;\n\n","base.random.hypergeometric.byteLength":"\nbase.random.hypergeometric.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.hypergeometric.byteLength;\n\n","base.random.hypergeometric.toJSON":"\nbase.random.hypergeometric.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.hypergeometric.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.improvedZiggurat":"\nbase.random.improvedZiggurat()\n    Returns a pseudorandom number drawn from a standard normal distribution.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.improvedZiggurat();\n\n\nbase.random.improvedZiggurat.factory( [options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a standard normal distribution.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.improvedZiggurat.factory();\n    > r = rand();\n    > r = rand();\n\n\nbase.random.improvedZiggurat.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.improvedZiggurat.NAME\n    'improved-ziggurat'\n\n\nbase.random.improvedZiggurat.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.improvedZiggurat.PRNG;\n\n\nbase.random.improvedZiggurat.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.improvedZiggurat.seed;\n\n\nbase.random.improvedZiggurat.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.improvedZiggurat.seedLength;\n\n\nbase.random.improvedZiggurat.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.improvedZiggurat()\n    <number>\n    > r = base.random.improvedZiggurat()\n    <number>\n    > r = base.random.improvedZiggurat()\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.improvedZiggurat.state\n    <Uint32Array>\n\n    > r = base.random.improvedZiggurat()\n    <number>\n    > r = base.random.improvedZiggurat()\n    <number>\n\n    // Set the state:\n    > base.random.improvedZiggurat.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.improvedZiggurat()\n    <number>\n    > r = base.random.improvedZiggurat()\n    <number>\n\n\nbase.random.improvedZiggurat.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.improvedZiggurat.stateLength;\n\n\nbase.random.improvedZiggurat.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.improvedZiggurat.byteLength;\n\n\nbase.random.improvedZiggurat.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.improvedZiggurat.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.improvedZiggurat.factory":"\nbase.random.improvedZiggurat.factory( [options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a standard normal distribution.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.improvedZiggurat.factory();\n    > r = rand();\n    > r = rand();\n\n","base.random.improvedZiggurat.NAME":"\nbase.random.improvedZiggurat.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.improvedZiggurat.NAME\n    'improved-ziggurat'\n\n","base.random.improvedZiggurat.PRNG":"\nbase.random.improvedZiggurat.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.improvedZiggurat.PRNG;\n\n","base.random.improvedZiggurat.seed":"\nbase.random.improvedZiggurat.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.improvedZiggurat.seed;\n\n","base.random.improvedZiggurat.seedLength":"\nbase.random.improvedZiggurat.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.improvedZiggurat.seedLength;\n\n","base.random.improvedZiggurat.state":"\nbase.random.improvedZiggurat.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.improvedZiggurat()\n    <number>\n    > r = base.random.improvedZiggurat()\n    <number>\n    > r = base.random.improvedZiggurat()\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.improvedZiggurat.state\n    <Uint32Array>\n\n    > r = base.random.improvedZiggurat()\n    <number>\n    > r = base.random.improvedZiggurat()\n    <number>\n\n    // Set the state:\n    > base.random.improvedZiggurat.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.improvedZiggurat()\n    <number>\n    > r = base.random.improvedZiggurat()\n    <number>\n\n","base.random.improvedZiggurat.stateLength":"\nbase.random.improvedZiggurat.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.improvedZiggurat.stateLength;\n\n","base.random.improvedZiggurat.byteLength":"\nbase.random.improvedZiggurat.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.improvedZiggurat.byteLength;\n\n","base.random.improvedZiggurat.toJSON":"\nbase.random.improvedZiggurat.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.improvedZiggurat.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.invgamma":"\nbase.random.invgamma( α, β )\n    Returns a pseudorandom number drawn from an inverse gamma distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.invgamma( 2.0, 5.0 );\n\n\nbase.random.invgamma.factory( [α, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from an inverse gamma distribution.\n\n    If provided `α` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `α` and `β`, the returned PRNG requires that both `α` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter.\n\n    β: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.invgamma.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 3.14, 2.25 );\n\n    // Provide `α` and `β`:\n    > rand = base.random.invgamma.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.invgamma.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.invgamma.NAME\n    'invgamma'\n\n\nbase.random.invgamma.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.invgamma.PRNG;\n\n\nbase.random.invgamma.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.invgamma.seed;\n\n\nbase.random.invgamma.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.invgamma.seedLength;\n\n\nbase.random.invgamma.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.invgamma( 2.0, 5.0 )\n    <number>\n    > r = base.random.invgamma( 2.0, 5.0 )\n    <number>\n    > r = base.random.invgamma( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.invgamma.state\n    <Uint32Array>\n\n    > r = base.random.invgamma( 2.0, 5.0 )\n    <number>\n    > r = base.random.invgamma( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.invgamma.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.invgamma( 2.0, 5.0 )\n    <number>\n    > r = base.random.invgamma( 2.0, 5.0 )\n    <number>\n\n\nbase.random.invgamma.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.invgamma.stateLength;\n\n\nbase.random.invgamma.byteLength\n    Size of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.invgamma.byteLength;\n\n\nbase.random.invgamma.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.invgamma.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.invgamma.factory":"\nbase.random.invgamma.factory( [α, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from an inverse gamma distribution.\n\n    If provided `α` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `α` and `β`, the returned PRNG requires that both `α` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter.\n\n    β: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.invgamma.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 3.14, 2.25 );\n\n    // Provide `α` and `β`:\n    > rand = base.random.invgamma.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n","base.random.invgamma.NAME":"\nbase.random.invgamma.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.invgamma.NAME\n    'invgamma'\n\n","base.random.invgamma.PRNG":"\nbase.random.invgamma.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.invgamma.PRNG;\n\n","base.random.invgamma.seed":"\nbase.random.invgamma.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.invgamma.seed;\n\n","base.random.invgamma.seedLength":"\nbase.random.invgamma.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.invgamma.seedLength;\n\n","base.random.invgamma.state":"\nbase.random.invgamma.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.invgamma( 2.0, 5.0 )\n    <number>\n    > r = base.random.invgamma( 2.0, 5.0 )\n    <number>\n    > r = base.random.invgamma( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.invgamma.state\n    <Uint32Array>\n\n    > r = base.random.invgamma( 2.0, 5.0 )\n    <number>\n    > r = base.random.invgamma( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.invgamma.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.invgamma( 2.0, 5.0 )\n    <number>\n    > r = base.random.invgamma( 2.0, 5.0 )\n    <number>\n\n","base.random.invgamma.stateLength":"\nbase.random.invgamma.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.invgamma.stateLength;\n\n","base.random.invgamma.byteLength":"\nbase.random.invgamma.byteLength\n    Size of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.invgamma.byteLength;\n\n","base.random.invgamma.toJSON":"\nbase.random.invgamma.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.invgamma.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.kumaraswamy":"\nbase.random.kumaraswamy( a, b )\n    Returns a pseudorandom number drawn from Kumaraswamy's double bounded\n    distribution.\n\n    If `a <= 0` or `b <= 0`, the function returns `NaN`.\n\n    If `a` or `b` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.kumaraswamy( 2.0, 5.0 );\n\n\nbase.random.kumaraswamy.factory( [a, b, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from Kumaraswamy's double bounded distribution.\n\n    If provided `a` and `b`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `a` and `b`, the returned PRNG requires that both `a` and\n    `b` be provided at each invocation.\n\n    Parameters\n    ----------\n    a: number (optional)\n        First shape parameter.\n\n    b: number (optional)\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.kumaraswamy.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `a` and `b`:\n    > rand = base.random.kumaraswamy.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.kumaraswamy.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.kumaraswamy.NAME\n    'kumaraswamy'\n\n\nbase.random.kumaraswamy.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.kumaraswamy.PRNG;\n\n\nbase.random.kumaraswamy.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.kumaraswamy.seed;\n\n\nbase.random.kumaraswamy.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.kumaraswamy.seedLength;\n\n\nbase.random.kumaraswamy.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.kumaraswamy( 1.5, 1.5 )\n    <number>\n    > r = base.random.kumaraswamy( 1.5, 1.5 )\n    <number>\n    > r = base.random.kumaraswamy( 1.5, 1.5 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.kumaraswamy.state\n    <Uint32Array>\n\n    > r = base.random.kumaraswamy( 1.5, 1.5 )\n    <number>\n    > r = base.random.kumaraswamy( 1.5, 1.5 )\n    <number>\n\n    // Set the state:\n    > base.random.kumaraswamy.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.kumaraswamy( 1.5, 1.5 )\n    <number>\n    > r = base.random.kumaraswamy( 1.5, 1.5 )\n    <number>\n\n\nbase.random.kumaraswamy.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.kumaraswamy.stateLength;\n\n\nbase.random.kumaraswamy.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.kumaraswamy.byteLength;\n\n\nbase.random.kumaraswamy.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.kumaraswamy.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.kumaraswamy.factory":"\nbase.random.kumaraswamy.factory( [a, b, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from Kumaraswamy's double bounded distribution.\n\n    If provided `a` and `b`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `a` and `b`, the returned PRNG requires that both `a` and\n    `b` be provided at each invocation.\n\n    Parameters\n    ----------\n    a: number (optional)\n        First shape parameter.\n\n    b: number (optional)\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.kumaraswamy.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `a` and `b`:\n    > rand = base.random.kumaraswamy.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n","base.random.kumaraswamy.NAME":"\nbase.random.kumaraswamy.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.kumaraswamy.NAME\n    'kumaraswamy'\n\n","base.random.kumaraswamy.PRNG":"\nbase.random.kumaraswamy.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.kumaraswamy.PRNG;\n\n","base.random.kumaraswamy.seed":"\nbase.random.kumaraswamy.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.kumaraswamy.seed;\n\n","base.random.kumaraswamy.seedLength":"\nbase.random.kumaraswamy.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.kumaraswamy.seedLength;\n\n","base.random.kumaraswamy.state":"\nbase.random.kumaraswamy.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.kumaraswamy( 1.5, 1.5 )\n    <number>\n    > r = base.random.kumaraswamy( 1.5, 1.5 )\n    <number>\n    > r = base.random.kumaraswamy( 1.5, 1.5 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.kumaraswamy.state\n    <Uint32Array>\n\n    > r = base.random.kumaraswamy( 1.5, 1.5 )\n    <number>\n    > r = base.random.kumaraswamy( 1.5, 1.5 )\n    <number>\n\n    // Set the state:\n    > base.random.kumaraswamy.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.kumaraswamy( 1.5, 1.5 )\n    <number>\n    > r = base.random.kumaraswamy( 1.5, 1.5 )\n    <number>\n\n","base.random.kumaraswamy.stateLength":"\nbase.random.kumaraswamy.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.kumaraswamy.stateLength;\n\n","base.random.kumaraswamy.byteLength":"\nbase.random.kumaraswamy.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.kumaraswamy.byteLength;\n\n","base.random.kumaraswamy.toJSON":"\nbase.random.kumaraswamy.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.kumaraswamy.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.laplace":"\nbase.random.laplace( μ, b )\n    Returns a pseudorandom number drawn from a Laplace distribution.\n\n    If `μ` or `b` is `NaN` or `b <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    b: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.laplace( 2.0, 5.0 );\n\n\nbase.random.laplace.factory( [μ, b, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Laplace distribution.\n\n    If provided `μ` and `b`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `b`, the returned PRNG requires that both `μ` and\n    `b` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    b: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.laplace.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `b`:\n    > rand = base.random.laplace.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.laplace.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.laplace.NAME\n    'laplace'\n\n\nbase.random.laplace.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.laplace.PRNG;\n\n\nbase.random.laplace.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.laplace.seed;\n\n\nbase.random.laplace.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.laplace.seedLength;\n\n\nbase.random.laplace.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.laplace( 2.0, 5.0 )\n    <number>\n    > r = base.random.laplace( 2.0, 5.0 )\n    <number>\n    > r = base.random.laplace( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.laplace.state\n    <Uint32Array>\n\n    > r = base.random.laplace( 2.0, 5.0 )\n    <number>\n    > r = base.random.laplace( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.laplace.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.laplace( 2.0, 5.0 )\n    <number>\n    > r = base.random.laplace( 2.0, 5.0 )\n    <number>\n\n\nbase.random.laplace.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.laplace.stateLength;\n\n\nbase.random.laplace.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.laplace.byteLength;\n\n\nbase.random.laplace.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.laplace.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.laplace.factory":"\nbase.random.laplace.factory( [μ, b, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Laplace distribution.\n\n    If provided `μ` and `b`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `b`, the returned PRNG requires that both `μ` and\n    `b` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    b: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.laplace.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `b`:\n    > rand = base.random.laplace.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n","base.random.laplace.NAME":"\nbase.random.laplace.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.laplace.NAME\n    'laplace'\n\n","base.random.laplace.PRNG":"\nbase.random.laplace.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.laplace.PRNG;\n\n","base.random.laplace.seed":"\nbase.random.laplace.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.laplace.seed;\n\n","base.random.laplace.seedLength":"\nbase.random.laplace.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.laplace.seedLength;\n\n","base.random.laplace.state":"\nbase.random.laplace.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.laplace( 2.0, 5.0 )\n    <number>\n    > r = base.random.laplace( 2.0, 5.0 )\n    <number>\n    > r = base.random.laplace( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.laplace.state\n    <Uint32Array>\n\n    > r = base.random.laplace( 2.0, 5.0 )\n    <number>\n    > r = base.random.laplace( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.laplace.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.laplace( 2.0, 5.0 )\n    <number>\n    > r = base.random.laplace( 2.0, 5.0 )\n    <number>\n\n","base.random.laplace.stateLength":"\nbase.random.laplace.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.laplace.stateLength;\n\n","base.random.laplace.byteLength":"\nbase.random.laplace.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.laplace.byteLength;\n\n","base.random.laplace.toJSON":"\nbase.random.laplace.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.laplace.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.levy":"\nbase.random.levy( μ, c )\n    Returns a pseudorandom number drawn from a Lévy distribution.\n\n    If `μ` or `c` is `NaN` or `c <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    c: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.levy( 2.0, 5.0 );\n\n\nbase.random.levy.factory( [μ, c, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Lévy distribution.\n\n    If provided `μ` and `c`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `c`, the returned PRNG requires that both `μ` and\n    `c` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    c: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.levy.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `b`:\n    > rand = base.random.levy.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.levy.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.levy.NAME\n    'levy'\n\n\nbase.random.levy.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.levy.PRNG;\n\n\nbase.random.levy.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.levy.seed;\n\n\nbase.random.levy.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.levy.seedLength;\n\n\nbase.random.levy.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.levy( 2.0, 5.0 )\n    <number>\n    > r = base.random.levy( 2.0, 5.0 )\n    <number>\n    > r = base.random.levy( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.levy.state\n    <Uint32Array>\n\n    > r = base.random.levy( 2.0, 5.0 )\n    <number>\n    > r = base.random.levy( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.levy.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.levy( 2.0, 5.0 )\n    <number>\n    > r = base.random.levy( 2.0, 5.0 )\n    <number>\n\n\nbase.random.levy.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.levy.stateLength;\n\n\nbase.random.levy.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.levy.byteLength;\n\n\nbase.random.levy.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.levy.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.levy.factory":"\nbase.random.levy.factory( [μ, c, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Lévy distribution.\n\n    If provided `μ` and `c`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `c`, the returned PRNG requires that both `μ` and\n    `c` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    c: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.levy.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `b`:\n    > rand = base.random.levy.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n","base.random.levy.NAME":"\nbase.random.levy.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.levy.NAME\n    'levy'\n\n","base.random.levy.PRNG":"\nbase.random.levy.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.levy.PRNG;\n\n","base.random.levy.seed":"\nbase.random.levy.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.levy.seed;\n\n","base.random.levy.seedLength":"\nbase.random.levy.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.levy.seedLength;\n\n","base.random.levy.state":"\nbase.random.levy.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.levy( 2.0, 5.0 )\n    <number>\n    > r = base.random.levy( 2.0, 5.0 )\n    <number>\n    > r = base.random.levy( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.levy.state\n    <Uint32Array>\n\n    > r = base.random.levy( 2.0, 5.0 )\n    <number>\n    > r = base.random.levy( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.levy.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.levy( 2.0, 5.0 )\n    <number>\n    > r = base.random.levy( 2.0, 5.0 )\n    <number>\n\n","base.random.levy.stateLength":"\nbase.random.levy.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.levy.stateLength;\n\n","base.random.levy.byteLength":"\nbase.random.levy.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.levy.byteLength;\n\n","base.random.levy.toJSON":"\nbase.random.levy.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.levy.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.logistic":"\nbase.random.logistic( μ, s )\n    Returns a pseudorandom number drawn from a logistic distribution.\n\n    If `μ` or `s` is `NaN` or `s <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    s: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.logistic( 2.0, 5.0 );\n\n\nbase.random.logistic.factory( [μ, s, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a logistic distribution.\n\n    If provided `μ` and `s`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `s`, the returned PRNG requires that both `μ` and\n    `s` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    s: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.logistic.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `s`:\n    > rand = base.random.logistic.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.logistic.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.logistic.NAME\n    'logistic'\n\n\nbase.random.logistic.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.logistic.PRNG;\n\n\nbase.random.logistic.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.logistic.seed;\n\n\nbase.random.logistic.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.logistic.seedLength;\n\n\nbase.random.logistic.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.logistic( 2.0, 5.0 )\n    <number>\n    > r = base.random.logistic( 2.0, 5.0 )\n    <number>\n    > r = base.random.logistic( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.logistic.state\n    <Uint32Array>\n\n    > r = base.random.logistic( 2.0, 5.0 )\n    <number>\n    > r = base.random.logistic( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.logistic.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.logistic( 2.0, 5.0 )\n    <number>\n    > r = base.random.logistic( 2.0, 5.0 )\n    <number>\n\n\nbase.random.logistic.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.logistic.stateLength;\n\n\nbase.random.logistic.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.logistic.byteLength;\n\n\nbase.random.logistic.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.logistic.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.logistic.factory":"\nbase.random.logistic.factory( [μ, s, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a logistic distribution.\n\n    If provided `μ` and `s`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `s`, the returned PRNG requires that both `μ` and\n    `s` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    s: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.logistic.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `s`:\n    > rand = base.random.logistic.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n","base.random.logistic.NAME":"\nbase.random.logistic.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.logistic.NAME\n    'logistic'\n\n","base.random.logistic.PRNG":"\nbase.random.logistic.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.logistic.PRNG;\n\n","base.random.logistic.seed":"\nbase.random.logistic.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.logistic.seed;\n\n","base.random.logistic.seedLength":"\nbase.random.logistic.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.logistic.seedLength;\n\n","base.random.logistic.state":"\nbase.random.logistic.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.logistic( 2.0, 5.0 )\n    <number>\n    > r = base.random.logistic( 2.0, 5.0 )\n    <number>\n    > r = base.random.logistic( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.logistic.state\n    <Uint32Array>\n\n    > r = base.random.logistic( 2.0, 5.0 )\n    <number>\n    > r = base.random.logistic( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.logistic.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.logistic( 2.0, 5.0 )\n    <number>\n    > r = base.random.logistic( 2.0, 5.0 )\n    <number>\n\n","base.random.logistic.stateLength":"\nbase.random.logistic.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.logistic.stateLength;\n\n","base.random.logistic.byteLength":"\nbase.random.logistic.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.logistic.byteLength;\n\n","base.random.logistic.toJSON":"\nbase.random.logistic.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.logistic.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.lognormal":"\nbase.random.lognormal( μ, σ )\n    Returns a pseudorandom number drawn from a lognormal distribution.\n\n    If `μ` or `σ` is `NaN` or `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.lognormal( 2.0, 5.0 );\n\n\nbase.random.lognormal.factory( [μ, σ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a lognormal distribution.\n\n    If provided `μ` and `σ`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `σ`, the returned PRNG requires that both `μ` and\n    `σ` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Location parameter.\n\n    σ: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.lognormal.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `σ`:\n    > rand = base.random.lognormal.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.lognormal.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.lognormal.NAME\n    'lognormal'\n\n\nbase.random.lognormal.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.lognormal.PRNG;\n\n\nbase.random.lognormal.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.lognormal.seed;\n\n\nbase.random.lognormal.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.lognormal.seedLength;\n\n\nbase.random.lognormal.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.lognormal( 2.0, 5.0 )\n    <number>\n    > r = base.random.lognormal( 2.0, 5.0 )\n    <number>\n    > r = base.random.lognormal( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.lognormal.state\n    <Uint32Array>\n\n    > r = base.random.lognormal( 2.0, 5.0 )\n    <number>\n    > r = base.random.lognormal( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.lognormal.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.lognormal( 2.0, 5.0 )\n    <number>\n    > r = base.random.lognormal( 2.0, 5.0 )\n    <number>\n\n\nbase.random.lognormal.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.lognormal.stateLength;\n\n\nbase.random.lognormal.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.lognormal.byteLength;\n\n\nbase.random.lognormal.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.lognormal.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.lognormal.factory":"\nbase.random.lognormal.factory( [μ, σ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a lognormal distribution.\n\n    If provided `μ` and `σ`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `σ`, the returned PRNG requires that both `μ` and\n    `σ` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Location parameter.\n\n    σ: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.lognormal.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `σ`:\n    > rand = base.random.lognormal.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n","base.random.lognormal.NAME":"\nbase.random.lognormal.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.lognormal.NAME\n    'lognormal'\n\n","base.random.lognormal.PRNG":"\nbase.random.lognormal.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.lognormal.PRNG;\n\n","base.random.lognormal.seed":"\nbase.random.lognormal.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.lognormal.seed;\n\n","base.random.lognormal.seedLength":"\nbase.random.lognormal.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.lognormal.seedLength;\n\n","base.random.lognormal.state":"\nbase.random.lognormal.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.lognormal( 2.0, 5.0 )\n    <number>\n    > r = base.random.lognormal( 2.0, 5.0 )\n    <number>\n    > r = base.random.lognormal( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.lognormal.state\n    <Uint32Array>\n\n    > r = base.random.lognormal( 2.0, 5.0 )\n    <number>\n    > r = base.random.lognormal( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.lognormal.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.lognormal( 2.0, 5.0 )\n    <number>\n    > r = base.random.lognormal( 2.0, 5.0 )\n    <number>\n\n","base.random.lognormal.stateLength":"\nbase.random.lognormal.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.lognormal.stateLength;\n\n","base.random.lognormal.byteLength":"\nbase.random.lognormal.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.lognormal.byteLength;\n\n","base.random.lognormal.toJSON":"\nbase.random.lognormal.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.lognormal.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.minstd":"\nbase.random.minstd()\n    Returns a pseudorandom integer on the interval `[1, 2147483646]`.\n\n    This pseudorandom number generator (PRNG) is a linear congruential\n    pseudorandom number generator (LCG) based on Park and Miller.\n\n    The generator has a period of approximately `2.1e9`.\n\n    An LCG is fast and uses little memory. On the other hand, because the\n    generator is a simple LCG, the generator has recognized shortcomings. By\n    today's PRNG standards, the generator's period is relatively short. More\n    importantly, the \"randomness quality\" of the generator's output is lacking.\n    These defects make the generator unsuitable, for example, in Monte Carlo\n    simulations and in cryptographic applications.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.minstd();\n\n\nbase.random.minstd.normalized()\n    Returns a pseudorandom number on the interval `[0,1)`.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.minstd.normalized();\n\n\nbase.random.minstd.factory( [options] )\n    Returns a linear congruential pseudorandom number generator (LCG).\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        signed 32-bit integer on the interval `[1, 2147483646]` or, for\n        arbitrary length seeds, an array-like object containing signed 32-bit\n        integers.\n\n    options.state: Int32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.minstd.factory();\n    > r = rand();\n    > r = rand();\n\n    // Provide a seed:\n    > rand = base.random.minstd.factory( { 'seed': 1234 } );\n    > r = rand()\n    20739838\n\n\nbase.random.minstd.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.minstd.NAME\n    'minstd'\n\n\nbase.random.minstd.MIN\n    Minimum possible value.\n\n    Examples\n    --------\n    > var v = base.random.minstd.MIN\n    1\n\n\nbase.random.minstd.MAX\n    Maximum possible value.\n\n    Examples\n    --------\n    > var v = base.random.minstd.MAX\n    2147483646\n\n\nbase.random.minstd.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.minstd.seed;\n\n\nbase.random.minstd.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.minstd.seedLength;\n\n\nbase.random.minstd.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.minstd()\n    <number>\n    > r = base.random.minstd()\n    <number>\n    > r = base.random.minstd()\n    <number>\n\n    // Get the current state:\n    > var state = base.random.minstd.state\n    <Int32Array>\n\n    > r = base.random.minstd()\n    <number>\n    > r = base.random.minstd()\n    <number>\n\n    // Set the state:\n    > base.random.minstd.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.minstd()\n    <number>\n    > r = base.random.minstd()\n    <number>\n\n\nbase.random.minstd.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.minstd.stateLength;\n\n\nbase.random.minstd.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.minstd.byteLength;\n\n\nbase.random.minstd.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.minstd.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n    See Also\n    --------\n    base.random.minstdShuffle, base.random.mt19937, base.random.randi\n","base.random.minstd.normalized":"\nbase.random.minstd.normalized()\n    Returns a pseudorandom number on the interval `[0,1)`.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.minstd.normalized();\n\n","base.random.minstd.factory":"\nbase.random.minstd.factory( [options] )\n    Returns a linear congruential pseudorandom number generator (LCG).\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        signed 32-bit integer on the interval `[1, 2147483646]` or, for\n        arbitrary length seeds, an array-like object containing signed 32-bit\n        integers.\n\n    options.state: Int32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.minstd.factory();\n    > r = rand();\n    > r = rand();\n\n    // Provide a seed:\n    > rand = base.random.minstd.factory( { 'seed': 1234 } );\n    > r = rand()\n    20739838\n\n","base.random.minstd.NAME":"\nbase.random.minstd.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.minstd.NAME\n    'minstd'\n\n","base.random.minstd.MIN":"\nbase.random.minstd.MIN\n    Minimum possible value.\n\n    Examples\n    --------\n    > var v = base.random.minstd.MIN\n    1\n\n","base.random.minstd.MAX":"\nbase.random.minstd.MAX\n    Maximum possible value.\n\n    Examples\n    --------\n    > var v = base.random.minstd.MAX\n    2147483646\n\n","base.random.minstd.seed":"\nbase.random.minstd.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.minstd.seed;\n\n","base.random.minstd.seedLength":"\nbase.random.minstd.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.minstd.seedLength;\n\n","base.random.minstd.state":"\nbase.random.minstd.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.minstd()\n    <number>\n    > r = base.random.minstd()\n    <number>\n    > r = base.random.minstd()\n    <number>\n\n    // Get the current state:\n    > var state = base.random.minstd.state\n    <Int32Array>\n\n    > r = base.random.minstd()\n    <number>\n    > r = base.random.minstd()\n    <number>\n\n    // Set the state:\n    > base.random.minstd.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.minstd()\n    <number>\n    > r = base.random.minstd()\n    <number>\n\n","base.random.minstd.stateLength":"\nbase.random.minstd.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.minstd.stateLength;\n\n","base.random.minstd.byteLength":"\nbase.random.minstd.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.minstd.byteLength;\n\n","base.random.minstd.toJSON":"\nbase.random.minstd.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.minstd.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n    See Also\n    --------\n    base.random.minstdShuffle, base.random.mt19937, base.random.randi\n","base.random.minstdShuffle":"\nbase.random.minstdShuffle()\n    Returns a pseudorandom integer on the interval `[1, 2147483646]`.\n\n    This pseudorandom number generator (PRNG) is a linear congruential\n    pseudorandom number generator (LCG) whose output is shuffled using the Bays-\n    Durham algorithm. The shuffle step considerably strengthens the \"randomness\n    quality\" of a simple LCG's output.\n\n    The generator has a period of approximately `2.1e9`.\n\n    An LCG is fast and uses little memory. On the other hand, because the\n    generator is a simple LCG, the generator has recognized shortcomings. By\n    today's PRNG standards, the generator's period is relatively short. In\n    general, this generator is unsuitable for Monte Carlo simulations and\n    cryptographic applications.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.minstdShuffle();\n\n\nbase.random.minstdShuffle.normalized()\n    Returns a pseudorandom number on the interval `[0,1)`.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.minstdShuffle.normalized();\n\n\nbase.random.minstdShuffle.factory( [options] )\n    Returns a linear congruential pseudorandom number generator (LCG) whose\n    output is shuffled.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        signed 32-bit integer on the interval `[1, 2147483646]` or, for\n        arbitrary length seeds, an array-like object containing signed 32-bit\n        integers.\n\n    options.state: Int32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.minstdShuffle.factory();\n    > r = rand();\n    > r = rand();\n\n    // Provide a seed:\n    > rand = base.random.minstdShuffle.factory( { 'seed': 1234 } );\n    > r = rand()\n    1421600654\n\n\nbase.random.minstdShuffle.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.minstdShuffle.NAME\n    'minstd-shuffle'\n\n\nbase.random.minstdShuffle.MIN\n    Minimum possible value.\n\n    Examples\n    --------\n    > var v = base.random.minstdShuffle.MIN\n    1\n\n\nbase.random.minstdShuffle.MAX\n    Maximum possible value.\n\n    Examples\n    --------\n    > var v = base.random.minstdShuffle.MAX\n    2147483646\n\n\nbase.random.minstdShuffle.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.minstdShuffle.seed;\n\n\nbase.random.minstdShuffle.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.minstdShuffle.seedLength;\n\n\nbase.random.minstdShuffle.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.minstdShuffle()\n    <number>\n    > r = base.random.minstdShuffle()\n    <number>\n    > r = base.random.minstdShuffle()\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.minstdShuffle.state\n    <Int32Array>\n\n    > r = base.random.minstdShuffle()\n    <number>\n    > r = base.random.minstdShuffle()\n    <number>\n\n    // Set the state:\n    > base.random.minstdShuffle.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.minstdShuffle()\n    <number>\n    > r = base.random.minstdShuffle()\n    <number>\n\n\nbase.random.minstdShuffle.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.minstdShuffle.stateLength;\n\n\nbase.random.minstdShuffle.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.minstdShuffle.byteLength;\n\n\nbase.random.minstdShuffle.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.minstdShuffle.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n    See Also\n    --------\n    base.random.minstd, base.random.mt19937, base.random.randi\n","base.random.minstdShuffle.normalized":"\nbase.random.minstdShuffle.normalized()\n    Returns a pseudorandom number on the interval `[0,1)`.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.minstdShuffle.normalized();\n\n","base.random.minstdShuffle.factory":"\nbase.random.minstdShuffle.factory( [options] )\n    Returns a linear congruential pseudorandom number generator (LCG) whose\n    output is shuffled.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        signed 32-bit integer on the interval `[1, 2147483646]` or, for\n        arbitrary length seeds, an array-like object containing signed 32-bit\n        integers.\n\n    options.state: Int32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.minstdShuffle.factory();\n    > r = rand();\n    > r = rand();\n\n    // Provide a seed:\n    > rand = base.random.minstdShuffle.factory( { 'seed': 1234 } );\n    > r = rand()\n    1421600654\n\n","base.random.minstdShuffle.NAME":"\nbase.random.minstdShuffle.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.minstdShuffle.NAME\n    'minstd-shuffle'\n\n","base.random.minstdShuffle.MIN":"\nbase.random.minstdShuffle.MIN\n    Minimum possible value.\n\n    Examples\n    --------\n    > var v = base.random.minstdShuffle.MIN\n    1\n\n","base.random.minstdShuffle.MAX":"\nbase.random.minstdShuffle.MAX\n    Maximum possible value.\n\n    Examples\n    --------\n    > var v = base.random.minstdShuffle.MAX\n    2147483646\n\n","base.random.minstdShuffle.seed":"\nbase.random.minstdShuffle.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.minstdShuffle.seed;\n\n","base.random.minstdShuffle.seedLength":"\nbase.random.minstdShuffle.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.minstdShuffle.seedLength;\n\n","base.random.minstdShuffle.state":"\nbase.random.minstdShuffle.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.minstdShuffle()\n    <number>\n    > r = base.random.minstdShuffle()\n    <number>\n    > r = base.random.minstdShuffle()\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.minstdShuffle.state\n    <Int32Array>\n\n    > r = base.random.minstdShuffle()\n    <number>\n    > r = base.random.minstdShuffle()\n    <number>\n\n    // Set the state:\n    > base.random.minstdShuffle.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.minstdShuffle()\n    <number>\n    > r = base.random.minstdShuffle()\n    <number>\n\n","base.random.minstdShuffle.stateLength":"\nbase.random.minstdShuffle.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.minstdShuffle.stateLength;\n\n","base.random.minstdShuffle.byteLength":"\nbase.random.minstdShuffle.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.minstdShuffle.byteLength;\n\n","base.random.minstdShuffle.toJSON":"\nbase.random.minstdShuffle.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.minstdShuffle.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n    See Also\n    --------\n    base.random.minstd, base.random.mt19937, base.random.randi\n","base.random.mt19937":"\nbase.random.mt19937()\n    Returns a pseudorandom integer on the interval `[1, 4294967295]`.\n\n    This pseudorandom number generator (PRNG) is a 32-bit Mersenne Twister\n    pseudorandom number generator.\n\n    The PRNG is *not* a cryptographically secure PRNG.\n\n    The PRNG has a period of 2^19937 - 1.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.mt19937();\n\n\nbase.random.mt19937.normalized()\n    Returns a pseudorandom number on the interval `[0,1)` with 53-bit precision.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.mt19937.normalized();\n\n\nbase.random.mt19937.factory( [options] )\n    Returns a 32-bit Mersenne Twister pseudorandom number generator.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.mt19937.factory();\n    > r = rand();\n    > r = rand();\n\n    // Provide a seed:\n    > rand = base.random.mt19937.factory( { 'seed': 1234 } );\n    > r = rand()\n    822569775\n\n\nbase.random.mt19937.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.mt19937.NAME\n    'mt19937'\n\n\nbase.random.mt19937.MIN\n    Minimum possible value.\n\n    Examples\n    --------\n    > var v = base.random.mt19937.MIN\n    1\n\n\nbase.random.mt19937.MAX\n    Maximum possible value.\n\n    Examples\n    --------\n    > var v = base.random.mt19937.MAX\n    4294967295\n\n\nbase.random.mt19937.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.mt19937.seed;\n\n\nbase.random.mt19937.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.mt19937.seedLength;\n\n\nbase.random.mt19937.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.mt19937()\n    <number>\n    > r = base.random.mt19937()\n    <number>\n    > r = base.random.mt19937()\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.mt19937.state\n    <Uint32Array>\n\n    > r = base.random.mt19937()\n    <number>\n    > r = base.random.mt19937()\n    <number>\n\n    // Set the state:\n    > base.random.mt19937.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.mt19937()\n    <number>\n    > r = base.random.mt19937()\n    <number>\n\n\nbase.random.mt19937.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.mt19937.stateLength;\n\n\nbase.random.mt19937.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.mt19937.byteLength;\n\n\nbase.random.mt19937.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.mt19937.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n    See Also\n    --------\n    base.random.minstd, base.random.randi\n","base.random.mt19937.normalized":"\nbase.random.mt19937.normalized()\n    Returns a pseudorandom number on the interval `[0,1)` with 53-bit precision.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.mt19937.normalized();\n\n","base.random.mt19937.factory":"\nbase.random.mt19937.factory( [options] )\n    Returns a 32-bit Mersenne Twister pseudorandom number generator.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.mt19937.factory();\n    > r = rand();\n    > r = rand();\n\n    // Provide a seed:\n    > rand = base.random.mt19937.factory( { 'seed': 1234 } );\n    > r = rand()\n    822569775\n\n","base.random.mt19937.NAME":"\nbase.random.mt19937.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.mt19937.NAME\n    'mt19937'\n\n","base.random.mt19937.MIN":"\nbase.random.mt19937.MIN\n    Minimum possible value.\n\n    Examples\n    --------\n    > var v = base.random.mt19937.MIN\n    1\n\n","base.random.mt19937.MAX":"\nbase.random.mt19937.MAX\n    Maximum possible value.\n\n    Examples\n    --------\n    > var v = base.random.mt19937.MAX\n    4294967295\n\n","base.random.mt19937.seed":"\nbase.random.mt19937.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.mt19937.seed;\n\n","base.random.mt19937.seedLength":"\nbase.random.mt19937.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.mt19937.seedLength;\n\n","base.random.mt19937.state":"\nbase.random.mt19937.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.mt19937()\n    <number>\n    > r = base.random.mt19937()\n    <number>\n    > r = base.random.mt19937()\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.mt19937.state\n    <Uint32Array>\n\n    > r = base.random.mt19937()\n    <number>\n    > r = base.random.mt19937()\n    <number>\n\n    // Set the state:\n    > base.random.mt19937.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.mt19937()\n    <number>\n    > r = base.random.mt19937()\n    <number>\n\n","base.random.mt19937.stateLength":"\nbase.random.mt19937.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.mt19937.stateLength;\n\n","base.random.mt19937.byteLength":"\nbase.random.mt19937.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.mt19937.byteLength;\n\n","base.random.mt19937.toJSON":"\nbase.random.mt19937.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.mt19937.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n    See Also\n    --------\n    base.random.minstd, base.random.randi\n","base.random.negativeBinomial":"\nbase.random.negativeBinomial( r, p )\n    Returns a pseudorandom number drawn from a negative binomial distribution.\n\n    If `p` is not in the interval `(0,1)`, the function returns `NaN`.\n\n    If `r` or `p` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    r: number\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.negativeBinomial( 20, 0.8 );\n\n\nbase.random.negativeBinomial.factory( [r, p, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a negative binomial distribution.\n\n    If provided `r` and `p`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `r` and `p`, the returned PRNG requires that both `r` and\n    `p` be provided at each invocation.\n\n    Parameters\n    ----------\n    r: number (optional)\n        Number of successes until experiment is stopped.\n\n    p: number (optional)\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.negativeBinomial.factory();\n    > var r = rand( 20, 0.3 );\n    > r = rand( 10, 0.77 );\n\n    // Provide `r` and `p`:\n    > rand = base.random.negativeBinomial.factory( 10, 0.8 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.negativeBinomial.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.negativeBinomial.NAME\n    'negative-binomial'\n\n\nbase.random.negativeBinomial.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.negativeBinomial.PRNG;\n\n\nbase.random.negativeBinomial.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.negativeBinomial.seed;\n\n\nbase.random.negativeBinomial.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.negativeBinomial.seedLength;\n\n\nbase.random.negativeBinomial.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.negativeBinomial( 20, 0.3 )\n    <number>\n    > r = base.random.negativeBinomial( 20, 0.3 )\n    <number>\n    > r = base.random.negativeBinomial( 20, 0.3 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.negativeBinomial.state\n    <Uint32Array>\n\n    > r = base.random.negativeBinomial( 20, 0.3 )\n    <number>\n    > r = base.random.negativeBinomial( 20, 0.3 )\n    <number>\n\n    // Set the state:\n    > base.random.negativeBinomial.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.negativeBinomial( 20, 0.3 )\n    <number>\n    > r = base.random.negativeBinomial( 20, 0.3 )\n    <number>\n\n\nbase.random.negativeBinomial.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.negativeBinomial.stateLength;\n\n\nbase.random.negativeBinomial.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.negativeBinomial.byteLength;\n\n\nbase.random.negativeBinomial.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.negativeBinomial.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.negativeBinomial.factory":"\nbase.random.negativeBinomial.factory( [r, p, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a negative binomial distribution.\n\n    If provided `r` and `p`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `r` and `p`, the returned PRNG requires that both `r` and\n    `p` be provided at each invocation.\n\n    Parameters\n    ----------\n    r: number (optional)\n        Number of successes until experiment is stopped.\n\n    p: number (optional)\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.negativeBinomial.factory();\n    > var r = rand( 20, 0.3 );\n    > r = rand( 10, 0.77 );\n\n    // Provide `r` and `p`:\n    > rand = base.random.negativeBinomial.factory( 10, 0.8 );\n    > r = rand();\n    > r = rand();\n\n","base.random.negativeBinomial.NAME":"\nbase.random.negativeBinomial.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.negativeBinomial.NAME\n    'negative-binomial'\n\n","base.random.negativeBinomial.PRNG":"\nbase.random.negativeBinomial.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.negativeBinomial.PRNG;\n\n","base.random.negativeBinomial.seed":"\nbase.random.negativeBinomial.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.negativeBinomial.seed;\n\n","base.random.negativeBinomial.seedLength":"\nbase.random.negativeBinomial.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.negativeBinomial.seedLength;\n\n","base.random.negativeBinomial.state":"\nbase.random.negativeBinomial.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.negativeBinomial( 20, 0.3 )\n    <number>\n    > r = base.random.negativeBinomial( 20, 0.3 )\n    <number>\n    > r = base.random.negativeBinomial( 20, 0.3 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.negativeBinomial.state\n    <Uint32Array>\n\n    > r = base.random.negativeBinomial( 20, 0.3 )\n    <number>\n    > r = base.random.negativeBinomial( 20, 0.3 )\n    <number>\n\n    // Set the state:\n    > base.random.negativeBinomial.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.negativeBinomial( 20, 0.3 )\n    <number>\n    > r = base.random.negativeBinomial( 20, 0.3 )\n    <number>\n\n","base.random.negativeBinomial.stateLength":"\nbase.random.negativeBinomial.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.negativeBinomial.stateLength;\n\n","base.random.negativeBinomial.byteLength":"\nbase.random.negativeBinomial.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.negativeBinomial.byteLength;\n\n","base.random.negativeBinomial.toJSON":"\nbase.random.negativeBinomial.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.negativeBinomial.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.normal":"\nbase.random.normal( μ, σ )\n    Returns a pseudorandom number drawn from a normal distribution.\n\n    If `μ` or `σ` is `NaN` or `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    σ: number\n        Standard deviation.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.normal( 2.0, 5.0 );\n\n\nbase.random.normal.factory( [μ, σ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a normal distribution.\n\n    If provided `μ` and `σ`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `σ`, the returned PRNG requires that both `μ` and\n    `σ` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    σ: number (optional)\n        Standard deviation.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.normal.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `σ`:\n    > rand = base.random.normal.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.normal.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.normal.NAME\n    'normal'\n\n\nbase.random.normal.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.normal.PRNG;\n\n\nbase.random.normal.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.normal.seed;\n\n\nbase.random.normal.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.normal.seedLength;\n\n\nbase.random.normal.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.normal( 2.0, 5.0 )\n    <number>\n    > r = base.random.normal( 2.0, 5.0 )\n    <number>\n    > r = base.random.normal( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.normal.state\n    <Uint32Array>\n\n    > r = base.random.normal( 2.0, 5.0 )\n    <number>\n    > r = base.random.normal( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.normal.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.normal( 2.0, 5.0 )\n    <number>\n    > r = base.random.normal( 2.0, 5.0 )\n    <number>\n\n\nbase.random.normal.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.normal.stateLength;\n\n\nbase.random.normal.byteLength\n    Size of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.normal.byteLength;\n\n\nbase.random.normal.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.normal.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.normal.factory":"\nbase.random.normal.factory( [μ, σ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a normal distribution.\n\n    If provided `μ` and `σ`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `μ` and `σ`, the returned PRNG requires that both `μ` and\n    `σ` be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    σ: number (optional)\n        Standard deviation.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.normal.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `μ` and `σ`:\n    > rand = base.random.normal.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n","base.random.normal.NAME":"\nbase.random.normal.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.normal.NAME\n    'normal'\n\n","base.random.normal.PRNG":"\nbase.random.normal.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.normal.PRNG;\n\n","base.random.normal.seed":"\nbase.random.normal.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.normal.seed;\n\n","base.random.normal.seedLength":"\nbase.random.normal.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.normal.seedLength;\n\n","base.random.normal.state":"\nbase.random.normal.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.normal( 2.0, 5.0 )\n    <number>\n    > r = base.random.normal( 2.0, 5.0 )\n    <number>\n    > r = base.random.normal( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.normal.state\n    <Uint32Array>\n\n    > r = base.random.normal( 2.0, 5.0 )\n    <number>\n    > r = base.random.normal( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.normal.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.normal( 2.0, 5.0 )\n    <number>\n    > r = base.random.normal( 2.0, 5.0 )\n    <number>\n\n","base.random.normal.stateLength":"\nbase.random.normal.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.normal.stateLength;\n\n","base.random.normal.byteLength":"\nbase.random.normal.byteLength\n    Size of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.normal.byteLength;\n\n","base.random.normal.toJSON":"\nbase.random.normal.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.normal.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.pareto1":"\nbase.random.pareto1( α, β )\n    Returns a pseudorandom number drawn from a Pareto (Type I) distribution.\n\n    If `α <= 0` or `β <= 0`, the function returns `NaN`.\n\n    If `α` or `β` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.pareto1( 2.0, 5.0 );\n\n\nbase.random.pareto1.factory( [α, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Pareto (Type I) distribution.\n\n    If provided `α` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `α` and `β`, the returned PRNG requires that both `α` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter.\n\n    β: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.pareto1.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `α` and `β`:\n    > rand = base.random.pareto1.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.pareto1.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.pareto1.NAME\n    'pareto-type1'\n\n\nbase.random.pareto1.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.pareto1.PRNG;\n\n\nbase.random.pareto1.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.pareto1.seed;\n\n\nbase.random.pareto1.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.pareto1.seedLength;\n\n\nbase.random.pareto1.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.pareto1( 2.0, 5.0 )\n    <number>\n    > r = base.random.pareto1( 2.0, 5.0 )\n    <number>\n    > r = base.random.pareto1( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.pareto1.state\n    <Uint32Array>\n\n    > r = base.random.pareto1( 2.0, 5.0 )\n    <number>\n    > r = base.random.pareto1( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.pareto1.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.pareto1( 2.0, 5.0 )\n    <number>\n    > r = base.random.pareto1( 2.0, 5.0 )\n    <number>\n\n\nbase.random.pareto1.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.pareto1.stateLength;\n\n\nbase.random.pareto1.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.pareto1.byteLength;\n\n\nbase.random.pareto1.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.pareto1.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.pareto1.factory":"\nbase.random.pareto1.factory( [α, β, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Pareto (Type I) distribution.\n\n    If provided `α` and `β`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `α` and `β`, the returned PRNG requires that both `α` and\n    `β` be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter.\n\n    β: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.pareto1.factory();\n    > var r = rand( 1.5, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `α` and `β`:\n    > rand = base.random.pareto1.factory( 1.5, 1.5 );\n    > r = rand();\n    > r = rand();\n\n","base.random.pareto1.NAME":"\nbase.random.pareto1.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.pareto1.NAME\n    'pareto-type1'\n\n","base.random.pareto1.PRNG":"\nbase.random.pareto1.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.pareto1.PRNG;\n\n","base.random.pareto1.seed":"\nbase.random.pareto1.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.pareto1.seed;\n\n","base.random.pareto1.seedLength":"\nbase.random.pareto1.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.pareto1.seedLength;\n\n","base.random.pareto1.state":"\nbase.random.pareto1.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.pareto1( 2.0, 5.0 )\n    <number>\n    > r = base.random.pareto1( 2.0, 5.0 )\n    <number>\n    > r = base.random.pareto1( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.pareto1.state\n    <Uint32Array>\n\n    > r = base.random.pareto1( 2.0, 5.0 )\n    <number>\n    > r = base.random.pareto1( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.pareto1.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.pareto1( 2.0, 5.0 )\n    <number>\n    > r = base.random.pareto1( 2.0, 5.0 )\n    <number>\n\n","base.random.pareto1.stateLength":"\nbase.random.pareto1.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.pareto1.stateLength;\n\n","base.random.pareto1.byteLength":"\nbase.random.pareto1.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.pareto1.byteLength;\n\n","base.random.pareto1.toJSON":"\nbase.random.pareto1.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.pareto1.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.poisson":"\nbase.random.poisson( λ )\n    Returns a pseudorandom number drawn from a Poisson distribution.\n\n    If `λ <= 0` or `λ` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    λ: number\n        Mean.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.poisson( 7.9 );\n\n\nbase.random.poisson.factory( [λ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Poisson distribution.\n\n    If provided `λ`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `λ`, the returned PRNG requires that `λ` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    λ: number (optional)\n        Mean.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.poisson.factory();\n    > var r = rand( 4.0 );\n    > r = rand( 3.14 );\n\n    // Provide `λ`:\n    > rand = base.random.poisson.factory( 10.0 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.poisson.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.poisson.NAME\n    'poisson'\n\n\nbase.random.poisson.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.poisson.PRNG;\n\n\nbase.random.poisson.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.poisson.seed;\n\n\nbase.random.poisson.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.poisson.seedLength;\n\n\nbase.random.poisson.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.poisson( 10.0 )\n    <number>\n    > r = base.random.poisson( 10.0 )\n    <number>\n    > r = base.random.poisson( 10.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.poisson.state\n    <Uint32Array>\n\n    > r = base.random.poisson( 10.0 )\n    <number>\n    > r = base.random.poisson( 10.0 )\n    <number>\n\n    // Set the state:\n    > base.random.poisson.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.poisson( 10.0 )\n    <number>\n    > r = base.random.poisson( 10.0 )\n    <number>\n\n\nbase.random.poisson.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.poisson.stateLength;\n\n\nbase.random.poisson.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.poisson.byteLength;\n\n\nbase.random.poisson.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.poisson.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.poisson.factory":"\nbase.random.poisson.factory( [λ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Poisson distribution.\n\n    If provided `λ`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `λ`, the returned PRNG requires that `λ` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    λ: number (optional)\n        Mean.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.poisson.factory();\n    > var r = rand( 4.0 );\n    > r = rand( 3.14 );\n\n    // Provide `λ`:\n    > rand = base.random.poisson.factory( 10.0 );\n    > r = rand();\n    > r = rand();\n\n","base.random.poisson.NAME":"\nbase.random.poisson.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.poisson.NAME\n    'poisson'\n\n","base.random.poisson.PRNG":"\nbase.random.poisson.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.poisson.PRNG;\n\n","base.random.poisson.seed":"\nbase.random.poisson.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.poisson.seed;\n\n","base.random.poisson.seedLength":"\nbase.random.poisson.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.poisson.seedLength;\n\n","base.random.poisson.state":"\nbase.random.poisson.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.poisson( 10.0 )\n    <number>\n    > r = base.random.poisson( 10.0 )\n    <number>\n    > r = base.random.poisson( 10.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.poisson.state\n    <Uint32Array>\n\n    > r = base.random.poisson( 10.0 )\n    <number>\n    > r = base.random.poisson( 10.0 )\n    <number>\n\n    // Set the state:\n    > base.random.poisson.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.poisson( 10.0 )\n    <number>\n    > r = base.random.poisson( 10.0 )\n    <number>\n\n","base.random.poisson.stateLength":"\nbase.random.poisson.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.poisson.stateLength;\n\n","base.random.poisson.byteLength":"\nbase.random.poisson.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.poisson.byteLength;\n\n","base.random.poisson.toJSON":"\nbase.random.poisson.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.poisson.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.randi":"\nbase.random.randi()\n    Returns a pseudorandom number having an integer value.\n\n    The default underlying pseudorandom number generator (PRNG) *may* change in\n    the future. If exact reproducibility is required, either use the `factory`\n    method to explicitly specify a PRNG via the `name` option or use an\n    underlying PRNG directly.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.randi();\n\n\nbase.random.randi.factory( [options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers having integer values.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.name: string (optional)\n        Name of the underlying pseudorandom number generator (PRNG). The\n        following PRNGs are supported:\n\n        - mt19937: 32-bit Mersenne Twister.\n        - minstd: linear congruential PRNG based on Park and Miller.\n        - minstd-shuffle: linear congruential PRNG whose output is shuffled.\n\n        Default: 'mt19937'.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed. Valid seed values vary according to\n        the underlying PRNG.\n\n    options.state: any (optional)\n        Pseudorandom number generator state. Valid state values vary according\n        to the underlying PRNG. If provided, the `seed` option is ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var randi = base.random.randi.factory();\n    > var r = randi();\n    > r = randi();\n\n    // Specify alternative PRNG:\n    > randi = base.random.randi.factory({ 'name': 'minstd' });\n    > r = randi();\n    > r = randi();\n\n\nbase.random.randi.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.randi.NAME\n    'randi'\n\n\nbase.random.randi.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.randi.PRNG;\n\n\nbase.random.randi.MIN\n    Minimum possible value (specific to underlying PRNG).\n\n    Examples\n    --------\n    > var v = base.random.randi.MIN;\n\n\nbase.random.randi.MAX\n    Maximum possible value (specific to underlying PRNG).\n\n    Examples\n    --------\n    > var v = base.random.randi.MAX;\n\n\nbase.random.randi.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.randi.seed;\n\n\nbase.random.randi.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.randi.seedLength;\n\n\nbase.random.randi.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.randi()\n    <number>\n    > r = base.random.randi()\n    <number>\n    > r = base.random.randi()\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.randi.state;\n\n    > r = base.random.randi()\n    <number>\n    > r = base.random.randi()\n    <number>\n\n    // Set the state:\n    > base.random.randi.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.randi()\n    <number>\n    > r = base.random.randi()\n    <number>\n\n\nbase.random.randi.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.randi.stateLength;\n\n\nbase.random.randi.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.randi.byteLength;\n\n\nbase.random.randi.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.randi.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n    See Also\n    --------\n    base.random.minstd, base.random.minstdShuffle, base.random.mt19937\n","base.random.randi.factory":"\nbase.random.randi.factory( [options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers having integer values.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.name: string (optional)\n        Name of the underlying pseudorandom number generator (PRNG). The\n        following PRNGs are supported:\n\n        - mt19937: 32-bit Mersenne Twister.\n        - minstd: linear congruential PRNG based on Park and Miller.\n        - minstd-shuffle: linear congruential PRNG whose output is shuffled.\n\n        Default: 'mt19937'.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed. Valid seed values vary according to\n        the underlying PRNG.\n\n    options.state: any (optional)\n        Pseudorandom number generator state. Valid state values vary according\n        to the underlying PRNG. If provided, the `seed` option is ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var randi = base.random.randi.factory();\n    > var r = randi();\n    > r = randi();\n\n    // Specify alternative PRNG:\n    > randi = base.random.randi.factory({ 'name': 'minstd' });\n    > r = randi();\n    > r = randi();\n\n","base.random.randi.NAME":"\nbase.random.randi.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.randi.NAME\n    'randi'\n\n","base.random.randi.PRNG":"\nbase.random.randi.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.randi.PRNG;\n\n","base.random.randi.MIN":"\nbase.random.randi.MIN\n    Minimum possible value (specific to underlying PRNG).\n\n    Examples\n    --------\n    > var v = base.random.randi.MIN;\n\n","base.random.randi.MAX":"\nbase.random.randi.MAX\n    Maximum possible value (specific to underlying PRNG).\n\n    Examples\n    --------\n    > var v = base.random.randi.MAX;\n\n","base.random.randi.seed":"\nbase.random.randi.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.randi.seed;\n\n","base.random.randi.seedLength":"\nbase.random.randi.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.randi.seedLength;\n\n","base.random.randi.state":"\nbase.random.randi.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.randi()\n    <number>\n    > r = base.random.randi()\n    <number>\n    > r = base.random.randi()\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.randi.state;\n\n    > r = base.random.randi()\n    <number>\n    > r = base.random.randi()\n    <number>\n\n    // Set the state:\n    > base.random.randi.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.randi()\n    <number>\n    > r = base.random.randi()\n    <number>\n\n","base.random.randi.stateLength":"\nbase.random.randi.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.randi.stateLength;\n\n","base.random.randi.byteLength":"\nbase.random.randi.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.randi.byteLength;\n\n","base.random.randi.toJSON":"\nbase.random.randi.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.randi.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n    See Also\n    --------\n    base.random.minstd, base.random.minstdShuffle, base.random.mt19937\n","base.random.randn":"\nbase.random.randn()\n    Returns a pseudorandom number drawn from a standard normal distribution.\n\n    The default underlying pseudorandom number generator (PRNG) *may* change in\n    the future. If exact reproducibility is required, either use the `factory`\n    method to explicitly specify a PRNG via the `name` option or use an\n    underlying PRNG directly.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.randn();\n\n\nbase.random.randn.factory( [options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a standard normal distribution.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.name: string (optional)\n        Name of the underlying pseudorandom number generator (PRNG) that samples\n        from a standard normal distribution. The following PRNGs are supported:\n\n        - improved-ziggurat: improved ziggurat method.\n        - box-muller: Box-Muller transform.\n\n        Default: 'improved-ziggurat'.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed. Valid seed values vary according to\n        the underlying PRNG.\n\n    options.state: any (optional)\n        Pseudorandom number generator state. Valid state values vary according\n        to the underlying PRNG. If provided, the `seed` option is ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.randn.factory();\n    > var r = rand();\n    > r = rand();\n\n    // Specify alternative PRNG:\n    > var rand = base.random.randn.factory({ 'name': 'box-muller' });\n    > r = rand();\n    > r = rand();\n\n\nbase.random.randn.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.randn.NAME\n    'randn'\n\n\nbase.random.randn.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.randn.PRNG;\n\n\nbase.random.randn.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.randn.seed;\n\n\nbase.random.randn.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.randn.seedLength;\n\n\nbase.random.randn.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.randn()\n    <number>\n    > r = base.random.randn()\n    <number>\n    > r = base.random.randn()\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.randn.state;\n\n    > r = base.random.randn()\n    <number>\n    > r = base.random.randn()\n    <number>\n\n    // Set the state:\n    > base.random.randn.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.randn()\n    <number>\n    > r = base.random.randn()\n    <number>\n\n\nbase.random.randn.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.randn.stateLength;\n\n\nbase.random.randn.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.randn.byteLength;\n\n\nbase.random.randn.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.randn.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n    See Also\n    --------\n    base.random.improvedZiggurat, base.random.randu\n","base.random.randn.factory":"\nbase.random.randn.factory( [options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a standard normal distribution.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.name: string (optional)\n        Name of the underlying pseudorandom number generator (PRNG) that samples\n        from a standard normal distribution. The following PRNGs are supported:\n\n        - improved-ziggurat: improved ziggurat method.\n        - box-muller: Box-Muller transform.\n\n        Default: 'improved-ziggurat'.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed. Valid seed values vary according to\n        the underlying PRNG.\n\n    options.state: any (optional)\n        Pseudorandom number generator state. Valid state values vary according\n        to the underlying PRNG. If provided, the `seed` option is ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.randn.factory();\n    > var r = rand();\n    > r = rand();\n\n    // Specify alternative PRNG:\n    > var rand = base.random.randn.factory({ 'name': 'box-muller' });\n    > r = rand();\n    > r = rand();\n\n","base.random.randn.NAME":"\nbase.random.randn.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.randn.NAME\n    'randn'\n\n","base.random.randn.PRNG":"\nbase.random.randn.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.randn.PRNG;\n\n","base.random.randn.seed":"\nbase.random.randn.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.randn.seed;\n\n","base.random.randn.seedLength":"\nbase.random.randn.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.randn.seedLength;\n\n","base.random.randn.state":"\nbase.random.randn.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.randn()\n    <number>\n    > r = base.random.randn()\n    <number>\n    > r = base.random.randn()\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.randn.state;\n\n    > r = base.random.randn()\n    <number>\n    > r = base.random.randn()\n    <number>\n\n    // Set the state:\n    > base.random.randn.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.randn()\n    <number>\n    > r = base.random.randn()\n    <number>\n\n","base.random.randn.stateLength":"\nbase.random.randn.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.randn.stateLength;\n\n","base.random.randn.byteLength":"\nbase.random.randn.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.randn.byteLength;\n\n","base.random.randn.toJSON":"\nbase.random.randn.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.randn.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n    See Also\n    --------\n    base.random.improvedZiggurat, base.random.randu\n","base.random.randu":"\nbase.random.randu()\n    Returns a pseudorandom number drawn from a uniform distribution.\n\n    The default underlying pseudorandom number generator (PRNG) *may* change in\n    the future. If exact reproducibility is required, either use the `factory`\n    method to explicitly specify a PRNG via the `name` option or use an\n    underlying PRNG directly.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number on the interval `[0,1)`.\n\n    Examples\n    --------\n    > var r = base.random.randu();\n\n\nbase.random.randu.factory( [options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a uniform distribution.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.name: string (optional)\n        Name of the underlying pseudorandom number generator (PRNG). The\n        following PRNGs are supported:\n\n        - mt19937: 32-bit Mersenne Twister.\n        - minstd: linear congruential PRNG based on Park and Miller.\n        - minstd-shuffle: linear congruential PRNG whose output is shuffled.\n\n        Default: 'mt19937'.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed. Valid seed values vary according to\n        the underlying PRNG.\n\n    options.state: any (optional)\n        Pseudorandom number generator state. Valid state values vary according\n        to the underlying PRNG. If provided, the `seed` option is ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.randu.factory();\n    > var r = rand();\n    > r = rand();\n\n    // Specify alternative PRNG:\n    > var rand = base.random.randu.factory({ 'name': 'minstd' });\n    > r = rand();\n    > r = rand();\n\n\nbase.random.randu.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.randu.NAME\n    'randu'\n\n\nbase.random.randu.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.randu.PRNG;\n\n\nbase.random.randu.MIN\n    Minimum possible value (specific to underlying PRNG).\n\n    Examples\n    --------\n    > var v = base.random.randu.MIN;\n\n\nbase.random.randu.MAX\n    Maximum possible value (specific to underlying PRNG).\n\n    Examples\n    --------\n    > var v = base.random.randu.MAX;\n\n\nbase.random.randu.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.randu.seed;\n\n\nbase.random.randu.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.randu.seedLength;\n\n\nbase.random.randu.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.randu()\n    <number>\n    > r = base.random.randu()\n    <number>\n    > r = base.random.randu()\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.randu.state;\n\n    > r = base.random.randu()\n    <number>\n    > r = base.random.randu()\n    <number>\n\n    // Set the state:\n    > base.random.randu.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.randu()\n    <number>\n    > r = base.random.randu()\n    <number>\n\n\nbase.random.randu.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.randu.stateLength;\n\n\nbase.random.randu.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.randu.byteLength;\n\n\nbase.random.randu.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.randu.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n    See Also\n    --------\n    base.random.discreteUniform, base.random.randn\n","base.random.randu.factory":"\nbase.random.randu.factory( [options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a uniform distribution.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.name: string (optional)\n        Name of the underlying pseudorandom number generator (PRNG). The\n        following PRNGs are supported:\n\n        - mt19937: 32-bit Mersenne Twister.\n        - minstd: linear congruential PRNG based on Park and Miller.\n        - minstd-shuffle: linear congruential PRNG whose output is shuffled.\n\n        Default: 'mt19937'.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed. Valid seed values vary according to\n        the underlying PRNG.\n\n    options.state: any (optional)\n        Pseudorandom number generator state. Valid state values vary according\n        to the underlying PRNG. If provided, the `seed` option is ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.randu.factory();\n    > var r = rand();\n    > r = rand();\n\n    // Specify alternative PRNG:\n    > var rand = base.random.randu.factory({ 'name': 'minstd' });\n    > r = rand();\n    > r = rand();\n\n","base.random.randu.NAME":"\nbase.random.randu.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.randu.NAME\n    'randu'\n\n","base.random.randu.PRNG":"\nbase.random.randu.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.randu.PRNG;\n\n","base.random.randu.MIN":"\nbase.random.randu.MIN\n    Minimum possible value (specific to underlying PRNG).\n\n    Examples\n    --------\n    > var v = base.random.randu.MIN;\n\n","base.random.randu.MAX":"\nbase.random.randu.MAX\n    Maximum possible value (specific to underlying PRNG).\n\n    Examples\n    --------\n    > var v = base.random.randu.MAX;\n\n","base.random.randu.seed":"\nbase.random.randu.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.randu.seed;\n\n","base.random.randu.seedLength":"\nbase.random.randu.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.randu.seedLength;\n\n","base.random.randu.state":"\nbase.random.randu.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.randu()\n    <number>\n    > r = base.random.randu()\n    <number>\n    > r = base.random.randu()\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.randu.state;\n\n    > r = base.random.randu()\n    <number>\n    > r = base.random.randu()\n    <number>\n\n    // Set the state:\n    > base.random.randu.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.randu()\n    <number>\n    > r = base.random.randu()\n    <number>\n\n","base.random.randu.stateLength":"\nbase.random.randu.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.randu.stateLength;\n\n","base.random.randu.byteLength":"\nbase.random.randu.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.randu.byteLength;\n\n","base.random.randu.toJSON":"\nbase.random.randu.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.randu.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n    See Also\n    --------\n    base.random.discreteUniform, base.random.randn\n","base.random.rayleigh":"\nbase.random.rayleigh( σ )\n    Returns a pseudorandom number drawn from a Rayleigh distribution.\n\n    If `σ` is `NaN` or `σ <= 0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    σ: number\n        Scale parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.rayleigh( 2.5 );\n\n\nbase.random.rayleigh.factory( [σ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Rayleigh distribution.\n\n    If provided `σ`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `σ`, the returned PRNG requires that `σ` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    σ: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.rayleigh.factory();\n    > var r = rand( 5.0 );\n    > r = rand( 10.0 );\n\n    // Provide `σ`:\n    > rand = base.random.rayleigh.factory( 5.0 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.rayleigh.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.rayleigh.NAME\n    'rayleigh'\n\n\nbase.random.rayleigh.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.rayleigh.PRNG;\n\n\nbase.random.rayleigh.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.rayleigh.seed;\n\n\nbase.random.rayleigh.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.rayleigh.seedLength;\n\n\nbase.random.rayleigh.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.rayleigh( 5.0 )\n    <number>\n    > r = base.random.rayleigh( 5.0 )\n    <number>\n    > r = base.random.rayleigh( 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.rayleigh.state\n    <Uint32Array>\n\n    > r = base.random.rayleigh( 5.0 )\n    <number>\n    > r = base.random.rayleigh( 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.rayleigh.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.rayleigh( 5.0 )\n    <number>\n    > r = base.random.rayleigh( 5.0 )\n    <number>\n\n\nbase.random.rayleigh.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.rayleigh.stateLength;\n\n\nbase.random.rayleigh.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.rayleigh.byteLength;\n\n\nbase.random.rayleigh.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.rayleigh.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.rayleigh.factory":"\nbase.random.rayleigh.factory( [σ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Rayleigh distribution.\n\n    If provided `σ`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `σ`, the returned PRNG requires that `σ` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    σ: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.rayleigh.factory();\n    > var r = rand( 5.0 );\n    > r = rand( 10.0 );\n\n    // Provide `σ`:\n    > rand = base.random.rayleigh.factory( 5.0 );\n    > r = rand();\n    > r = rand();\n\n","base.random.rayleigh.NAME":"\nbase.random.rayleigh.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.rayleigh.NAME\n    'rayleigh'\n\n","base.random.rayleigh.PRNG":"\nbase.random.rayleigh.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.rayleigh.PRNG;\n\n","base.random.rayleigh.seed":"\nbase.random.rayleigh.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.rayleigh.seed;\n\n","base.random.rayleigh.seedLength":"\nbase.random.rayleigh.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.rayleigh.seedLength;\n\n","base.random.rayleigh.state":"\nbase.random.rayleigh.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.rayleigh( 5.0 )\n    <number>\n    > r = base.random.rayleigh( 5.0 )\n    <number>\n    > r = base.random.rayleigh( 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.rayleigh.state\n    <Uint32Array>\n\n    > r = base.random.rayleigh( 5.0 )\n    <number>\n    > r = base.random.rayleigh( 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.rayleigh.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.rayleigh( 5.0 )\n    <number>\n    > r = base.random.rayleigh( 5.0 )\n    <number>\n\n","base.random.rayleigh.stateLength":"\nbase.random.rayleigh.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.rayleigh.stateLength;\n\n","base.random.rayleigh.byteLength":"\nbase.random.rayleigh.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.rayleigh.byteLength;\n\n","base.random.rayleigh.toJSON":"\nbase.random.rayleigh.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.rayleigh.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.t":"\nbase.random.t( v )\n    Returns a pseudorandom number drawn from a Student's t distribution.\n\n    If `v <= 0` or `v` is `NaN`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.t( 2.0 );\n\n\nbase.random.t.factory( [v, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Student's t distribution.\n\n    If provided `v`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `v`, the returned PRNG requires that `v` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    v: number (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.t.factory();\n    > var r = rand( 5.0 );\n    > r = rand( 3.14 );\n\n    // Provide `v`:\n    > rand = base.random.t.factory( 5.0 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.t.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.t.NAME\n    't'\n\n\nbase.random.t.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.t.PRNG;\n\n\nbase.random.t.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.t.seed;\n\n\nbase.random.t.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.t.seedLength;\n\n\nbase.random.t.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.t( 10.0 )\n    <number>\n    > r = base.random.t( 10.0 )\n    <number>\n    > r = base.random.t( 10.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.t.state\n    <Uint32Array>\n\n    > r = base.random.t( 10.0 )\n    <number>\n    > r = base.random.t( 10.0 )\n    <number>\n\n    // Set the state:\n    > base.random.t.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.t( 10.0 )\n    <number>\n    > r = base.random.t( 10.0 )\n    <number>\n\n\nbase.random.t.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.t.stateLength;\n\n\nbase.random.t.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.t.byteLength;\n\n\nbase.random.t.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.t.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.t.factory":"\nbase.random.t.factory( [v, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Student's t distribution.\n\n    If provided `v`, the returned PRNG returns random variates drawn from the\n    specified distribution.\n\n    If not provided `v`, the returned PRNG requires that `v` be provided at each\n    invocation.\n\n    Parameters\n    ----------\n    v: number (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.t.factory();\n    > var r = rand( 5.0 );\n    > r = rand( 3.14 );\n\n    // Provide `v`:\n    > rand = base.random.t.factory( 5.0 );\n    > r = rand();\n    > r = rand();\n\n","base.random.t.NAME":"\nbase.random.t.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.t.NAME\n    't'\n\n","base.random.t.PRNG":"\nbase.random.t.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.t.PRNG;\n\n","base.random.t.seed":"\nbase.random.t.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.t.seed;\n\n","base.random.t.seedLength":"\nbase.random.t.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.t.seedLength;\n\n","base.random.t.state":"\nbase.random.t.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.t( 10.0 )\n    <number>\n    > r = base.random.t( 10.0 )\n    <number>\n    > r = base.random.t( 10.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.t.state\n    <Uint32Array>\n\n    > r = base.random.t( 10.0 )\n    <number>\n    > r = base.random.t( 10.0 )\n    <number>\n\n    // Set the state:\n    > base.random.t.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.t( 10.0 )\n    <number>\n    > r = base.random.t( 10.0 )\n    <number>\n\n","base.random.t.stateLength":"\nbase.random.t.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.t.stateLength;\n\n","base.random.t.byteLength":"\nbase.random.t.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.t.byteLength;\n\n","base.random.t.toJSON":"\nbase.random.t.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.t.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.triangular":"\nbase.random.triangular( a, b, c )\n    Returns a pseudorandom number drawn from a triangular distribution.\n\n    If the condition `a <= c <= b` is not satisfied, the function returns `NaN`.\n\n    If either `a`, `b`, or `c` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    Returns\n    -------\n    r: integer\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.triangular( 2.0, 5.0, 3.33 );\n\n\nbase.random.triangular.factory( [a, b, c, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a triangular distribution.\n\n    If provided `a`, `b`, and `c`, the returned PRNG returns random variates\n    drawn from the specified distribution.\n\n    If not provided `a`, `b`, and `c`, the returned PRNG requires that `a`, `b`,\n    and `c` be provided at each invocation.\n\n    Parameters\n    ----------\n    a: number (optional)\n        Minimum support.\n\n    b: number (optional)\n        Maximum support.\n\n    c: number (optional)\n        Mode.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.triangular.factory();\n    > var r = rand( 0.0, 1.0, 0.5 );\n    > r = rand( -2.0, 2.0, 1.0 );\n\n    // Provide `a`, `b`, and `c`:\n    > rand = base.random.triangular.factory( 0.0, 1.0, 0.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.triangular.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.triangular.NAME\n    'triangular'\n\n\nbase.random.triangular.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.triangular.PRNG;\n\n\nbase.random.triangular.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.triangular.seed;\n\n\nbase.random.triangular.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.triangular.seedLength;\n\n\nbase.random.triangular.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.triangular( 0.0, 1.0, 0.5 )\n    <number>\n    > r = base.random.triangular( 0.0, 1.0, 0.5 )\n    <number>\n    > r = base.random.triangular( 0.0, 1.0, 0.5 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.triangular.state\n    <Uint32Array>\n\n    > r = base.random.triangular( 0.0, 1.0, 0.5 )\n    <number>\n    > r = base.random.triangular( 0.0, 1.0, 0.5 )\n    <number>\n\n    // Set the state:\n    > base.random.triangular.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.triangular( 0.0, 1.0, 0.5 )\n    <number>\n    > r = base.random.triangular( 0.0, 1.0, 0.5 )\n    <number>\n\n\nbase.random.triangular.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.triangular.stateLength;\n\n\nbase.random.triangular.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.triangular.byteLength;\n\n\nbase.random.triangular.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.triangular.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.triangular.factory":"\nbase.random.triangular.factory( [a, b, c, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a triangular distribution.\n\n    If provided `a`, `b`, and `c`, the returned PRNG returns random variates\n    drawn from the specified distribution.\n\n    If not provided `a`, `b`, and `c`, the returned PRNG requires that `a`, `b`,\n    and `c` be provided at each invocation.\n\n    Parameters\n    ----------\n    a: number (optional)\n        Minimum support.\n\n    b: number (optional)\n        Maximum support.\n\n    c: number (optional)\n        Mode.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.triangular.factory();\n    > var r = rand( 0.0, 1.0, 0.5 );\n    > r = rand( -2.0, 2.0, 1.0 );\n\n    // Provide `a`, `b`, and `c`:\n    > rand = base.random.triangular.factory( 0.0, 1.0, 0.5 );\n    > r = rand();\n    > r = rand();\n\n","base.random.triangular.NAME":"\nbase.random.triangular.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.triangular.NAME\n    'triangular'\n\n","base.random.triangular.PRNG":"\nbase.random.triangular.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.triangular.PRNG;\n\n","base.random.triangular.seed":"\nbase.random.triangular.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.triangular.seed;\n\n","base.random.triangular.seedLength":"\nbase.random.triangular.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.triangular.seedLength;\n\n","base.random.triangular.state":"\nbase.random.triangular.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.triangular( 0.0, 1.0, 0.5 )\n    <number>\n    > r = base.random.triangular( 0.0, 1.0, 0.5 )\n    <number>\n    > r = base.random.triangular( 0.0, 1.0, 0.5 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.triangular.state\n    <Uint32Array>\n\n    > r = base.random.triangular( 0.0, 1.0, 0.5 )\n    <number>\n    > r = base.random.triangular( 0.0, 1.0, 0.5 )\n    <number>\n\n    // Set the state:\n    > base.random.triangular.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.triangular( 0.0, 1.0, 0.5 )\n    <number>\n    > r = base.random.triangular( 0.0, 1.0, 0.5 )\n    <number>\n\n","base.random.triangular.stateLength":"\nbase.random.triangular.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.triangular.stateLength;\n\n","base.random.triangular.byteLength":"\nbase.random.triangular.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.triangular.byteLength;\n\n","base.random.triangular.toJSON":"\nbase.random.triangular.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.triangular.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.uniform":"\nbase.random.uniform( a, b )\n    Returns a pseudorandom number drawn from a continuous uniform distribution.\n\n    If `a >= b`, the function returns `NaN`.\n\n    If `a` or `b` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support (inclusive).\n\n    b: number\n        Maximum support (exclusive).\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.uniform( 2.0, 5.0 );\n\n\nbase.random.uniform.factory( [a, b, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a continuous uniform distribution.\n\n    If provided `a` and `b`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `a` and `b`, the returned PRNG requires that both `a` and\n    `b` be provided at each invocation.\n\n    Parameters\n    ----------\n    a: number (optional)\n        Minimum support (inclusive).\n\n    b: number (optional)\n        Maximum support (exclusive).\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.uniform.factory();\n    > var r = rand( 0.0, 1.0 );\n    > r = rand( -2.0, 2.0 );\n\n    // Provide `a` and `b`:\n    > rand = base.random.uniform.factory( 0.0, 1.0 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.uniform.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.uniform.NAME\n    'uniform'\n\n\nbase.random.uniform.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.uniform.PRNG;\n\n\nbase.random.uniform.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.uniform.seed;\n\n\nbase.random.uniform.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.uniform.seedLength;\n\n\nbase.random.uniform.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.uniform( 2.0, 5.0 )\n    <number>\n    > r = base.random.uniform( 2.0, 5.0 )\n    <number>\n    > r = base.random.uniform( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.uniform.state\n    <Uint32Array>\n\n    > r = base.random.uniform( 2.0, 5.0 )\n    <number>\n    > r = base.random.uniform( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.uniform.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.uniform( 2.0, 5.0 )\n    <number>\n    > r = base.random.uniform( 2.0, 5.0 )\n    <number>\n\n\nbase.random.uniform.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.uniform.stateLength;\n\n\nbase.random.uniform.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.uniform.byteLength;\n\n\nbase.random.uniform.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.uniform.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n    See Also\n    --------\n    base.random.discreteUniform, base.random.randu\n","base.random.uniform.factory":"\nbase.random.uniform.factory( [a, b, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a continuous uniform distribution.\n\n    If provided `a` and `b`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `a` and `b`, the returned PRNG requires that both `a` and\n    `b` be provided at each invocation.\n\n    Parameters\n    ----------\n    a: number (optional)\n        Minimum support (inclusive).\n\n    b: number (optional)\n        Maximum support (exclusive).\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.uniform.factory();\n    > var r = rand( 0.0, 1.0 );\n    > r = rand( -2.0, 2.0 );\n\n    // Provide `a` and `b`:\n    > rand = base.random.uniform.factory( 0.0, 1.0 );\n    > r = rand();\n    > r = rand();\n\n","base.random.uniform.NAME":"\nbase.random.uniform.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.uniform.NAME\n    'uniform'\n\n","base.random.uniform.PRNG":"\nbase.random.uniform.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.uniform.PRNG;\n\n","base.random.uniform.seed":"\nbase.random.uniform.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.uniform.seed;\n\n","base.random.uniform.seedLength":"\nbase.random.uniform.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.uniform.seedLength;\n\n","base.random.uniform.state":"\nbase.random.uniform.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.uniform( 2.0, 5.0 )\n    <number>\n    > r = base.random.uniform( 2.0, 5.0 )\n    <number>\n    > r = base.random.uniform( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.uniform.state\n    <Uint32Array>\n\n    > r = base.random.uniform( 2.0, 5.0 )\n    <number>\n    > r = base.random.uniform( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.uniform.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.uniform( 2.0, 5.0 )\n    <number>\n    > r = base.random.uniform( 2.0, 5.0 )\n    <number>\n\n","base.random.uniform.stateLength":"\nbase.random.uniform.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.uniform.stateLength;\n\n","base.random.uniform.byteLength":"\nbase.random.uniform.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.uniform.byteLength;\n\n","base.random.uniform.toJSON":"\nbase.random.uniform.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.uniform.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n    See Also\n    --------\n    base.random.discreteUniform, base.random.randu\n","base.random.weibull":"\nbase.random.weibull( k, λ )\n    Returns a pseudorandom number drawn from a Weibull distribution.\n\n    If `k <= 0` or `λ <= 0`, the function returns `NaN`.\n\n    If either `λ` or `k` is `NaN`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    k: number\n        Scale parameter.\n\n    λ: number\n        Shape parameter.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number.\n\n    Examples\n    --------\n    > var r = base.random.weibull( 2.0, 5.0 );\n\n\nbase.random.weibull.factory( [k, λ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Weibull distribution.\n\n    If provided `k` and `λ`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `k` and `λ`, the returned PRNG requires that both\n    `k` and `λ` be provided at each invocation.\n\n    Parameters\n    ----------\n    k: number (optional)\n        Scale parameter.\n\n    λ: number (optional)\n        Shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.weibull.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `λ` and `k`:\n    > rand = base.random.weibull.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n\nbase.random.weibull.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.weibull.NAME\n    'weibull'\n\n\nbase.random.weibull.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.weibull.PRNG;\n\n\nbase.random.weibull.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.weibull.seed;\n\n\nbase.random.weibull.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.weibull.seedLength;\n\n\nbase.random.weibull.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.weibull( 2.0, 5.0 )\n    <number>\n    > r = base.random.weibull( 2.0, 5.0 )\n    <number>\n    > r = base.random.weibull( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.weibull.state\n    <Uint32Array>\n\n    > r = base.random.weibull( 2.0, 5.0 )\n    <number>\n    > r = base.random.weibull( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.weibull.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.weibull( 2.0, 5.0 )\n    <number>\n    > r = base.random.weibull( 2.0, 5.0 )\n    <number>\n\n\nbase.random.weibull.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.weibull.stateLength;\n\n\nbase.random.weibull.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.weibull.byteLength;\n\n\nbase.random.weibull.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.weibull.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.random.weibull.factory":"\nbase.random.weibull.factory( [k, λ, ][options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a Weibull distribution.\n\n    If provided `k` and `λ`, the returned PRNG returns random variates drawn\n    from the specified distribution.\n\n    If not provided `k` and `λ`, the returned PRNG requires that both\n    `k` and `λ` be provided at each invocation.\n\n    Parameters\n    ----------\n    k: number (optional)\n        Scale parameter.\n\n    λ: number (optional)\n        Shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned pseudorandom number generator, one must seed the provided\n        `prng` (assuming the provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = base.random.weibull.factory();\n    > var r = rand( 0.1, 1.5 );\n    > r = rand( 2.0, 3.14 );\n\n    // Provide `λ` and `k`:\n    > rand = base.random.weibull.factory( 0.1, 1.5 );\n    > r = rand();\n    > r = rand();\n\n","base.random.weibull.NAME":"\nbase.random.weibull.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = base.random.weibull.NAME\n    'weibull'\n\n","base.random.weibull.PRNG":"\nbase.random.weibull.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = base.random.weibull.PRNG;\n\n","base.random.weibull.seed":"\nbase.random.weibull.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = base.random.weibull.seed;\n\n","base.random.weibull.seedLength":"\nbase.random.weibull.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = base.random.weibull.seedLength;\n\n","base.random.weibull.state":"\nbase.random.weibull.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = base.random.weibull( 2.0, 5.0 )\n    <number>\n    > r = base.random.weibull( 2.0, 5.0 )\n    <number>\n    > r = base.random.weibull( 2.0, 5.0 )\n    <number>\n\n    // Get a copy of the current state:\n    > var state = base.random.weibull.state\n    <Uint32Array>\n\n    > r = base.random.weibull( 2.0, 5.0 )\n    <number>\n    > r = base.random.weibull( 2.0, 5.0 )\n    <number>\n\n    // Set the state:\n    > base.random.weibull.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = base.random.weibull( 2.0, 5.0 )\n    <number>\n    > r = base.random.weibull( 2.0, 5.0 )\n    <number>\n\n","base.random.weibull.stateLength":"\nbase.random.weibull.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = base.random.weibull.stateLength;\n\n","base.random.weibull.byteLength":"\nbase.random.weibull.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = base.random.weibull.byteLength;\n\n","base.random.weibull.toJSON":"\nbase.random.weibull.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = base.random.weibull.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n","base.reldiff":"\nbase.reldiff( x, y[, scale] )\n    Computes the relative difference of two real numbers.\n\n    By default, the function scales the absolute difference by dividing the\n    absolute difference by the maximum absolute value of `x` and `y`. To scale\n    by a different function, specify a scale function name.\n\n    The following `scale` functions are supported:\n\n    - 'max-abs': maximum absolute value of `x` and `y` (default).\n    - 'max': maximum value of `x` and `y`.\n    - 'min-abs': minimum absolute value of `x` and `y`.\n    - 'min': minimum value of `x` and `y`.\n    - 'mean-abs': arithmetic mean of the absolute values of `x` and `y`.\n    - 'mean': arithmetic mean of `x` and `y`.\n    - 'x': `x` (*noncommutative*).\n    - 'y': `y` (*noncommutative*).\n\n    To use a custom scale function, provide a function which accepts two numeric\n    arguments `x` and `y`.\n\n    If the absolute difference of `x` and `y` is `0`, the relative difference is\n    always `0`.\n\n    If `|x| = |y| = infinity`, the function returns `NaN`.\n\n    If `|x| = |-y| = infinity`, the relative difference is `+infinity`.\n\n    If a `scale` function returns `0`, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        First number.\n\n    y: number\n        Second number.\n\n    scale: string|Function (optional)\n        Scale function. Default: `'max-abs'`.\n\n    Returns\n    -------\n    out: number\n        Relative difference.\n\n    Examples\n    --------\n    > var d = base.reldiff( 2.0, 5.0 )\n    0.6\n    > d = base.reldiff( -1.0, 3.14 )\n    ~1.318\n    > d = base.reldiff( -2.0, 5.0, 'max-abs' )\n    1.4\n    > d = base.reldiff( -2.0, 5.0, 'max' )\n    1.4\n    > d = base.reldiff( -2.0, 5.0, 'min-abs' )\n    3.5\n    > d = base.reldiff( -2.0, 5.0, 'min' )\n    3.5\n    > d = base.reldiff( -2.0, 5.0, 'mean-abs' )\n    2.0\n    > d = base.reldiff( -2.0, 5.0, 'mean' )\n    ~4.667\n    > d = base.reldiff( -2.0, 5.0, 'x' )\n    3.5\n    > d = base.reldiff( 5.0, -2.0, 'x' )\n    1.4\n    > d = base.reldiff( -2.0, 5.0, 'y' )\n    1.4\n    > d = base.reldiff( 5.0, -2.0, 'y' )\n    3.5\n\n    // Custom scale function:\n    > function scale( x, y ) {\n    ...     var s;\n    ...\n    ...     x = base.abs( x );\n    ...     y = base.abs( y );\n    ...\n    ...     // Maximum absolute value:\n    ...     s = (x < y ) ? y : x;\n    ...\n    ...     // Scale in units of epsilon:\n    ...     return s * EPS;\n    ... };\n    > d = base.reldiff( 12.15, 12.149999999999999, scale )\n    ~0.658\n\n    See Also\n    --------\n    base.absdiff, base.epsdiff\n","base.rempio2":"\nbase.rempio2( x, y )\n    Computes `x - nπ/2 = r`.\n\n    The function returns `n` and stores the remainder `r` as the two numbers\n    `y[0]` and `y[1]`, such that `y[0] + y[1] = r`.\n\n    For input values larger than `2^20 * π/2` in magnitude, the function only\n    returns the last three binary digits of `n` and not the full result.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    y: Array|TypedArray|Object\n        Remainder elements.\n\n    Returns\n    -------\n    n: integer\n        Factor of `π/2`.\n\n    Examples\n    --------\n    > var y = new Array( 2 );\n    > var n = base.rempio2( 128.0, y )\n    81\n    > var y1 = y[ 0 ]\n    ~0.765\n    > var y2 = y[ 1 ]\n    ~3.618e-17\n\n\n","base.risingFactorial":"\nbase.risingFactorial( x, n )\n    Computes the rising factorial of `x` and `n`.\n\n    If provided a non-integer for `n`, the function returns `NaN`.\n\n    If provided `NaN` as any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        First function parameter.\n\n    n: integer\n        Second function parameter.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var v = base.risingFactorial( 0.9, 5 )\n    ~94.766\n    > v = base.risingFactorial( -9.0, 3 )\n    -504.0\n    > v = base.risingFactorial( 0.0, 2 )\n    0.0\n    > v = base.risingFactorial( 3.0, -2 )\n    0.5\n\n    See Also\n    --------\n    base.fallingFactorial\n","base.rotl32":"\nbase.rotl32( x, shift )\n    Performs a bitwise rotation to the left.\n\n    If `shift = 0`, the function returns `x`.\n\n    If `shift >= 32`, the function only considers the five least significant\n    bits of `shift` (i.e., `shift % 32`).\n\n    Parameters\n    ----------\n    x: integer\n        Unsigned 32-bit integer.\n\n    shift: integer\n        Number of bits to shift.\n\n    Returns\n    -------\n    out: integer\n        Unsigned 32-bit integer.\n\n    Examples\n    --------\n    > var x = 2147483649;\n    > var bStr = base.toBinaryStringUint32( x )\n    '10000000000000000000000000000001'\n    > var y = base.rotl32( x, 10 )\n    1536\n    > bstr = base.toBinaryStringUint32( y )\n    '00000000000000000000011000000000'\n\n    See Also\n    --------\n    base.rotr32\n","base.rotr32":"\nbase.rotr32( x, shift )\n    Performs a bitwise rotation to the right.\n\n    If `shift = 0`, the function returns `x`.\n\n    If `shift >= 32`, the function only considers the five least significant\n    bits of `shift` (i.e., `shift % 32`).\n\n    Parameters\n    ----------\n    x: integer\n        Unsigned 32-bit integer.\n\n    shift: integer\n        Number of bits to shift.\n\n    Returns\n    -------\n    out: integer\n        Unsigned 32-bit integer.\n\n    Examples\n    --------\n    > var x = 1;\n    > var bStr = base.toBinaryStringUint32( x )\n    '00000000000000000000000000000001'\n    > var y = base.rotr32( x, 10 )\n    4194304\n    > bstr = base.toBinaryStringUint32( y )\n    '00000000010000000000000000000000'\n\n    See Also\n    --------\n    base.rotl32\n","base.round":"\nbase.round( x )\n    Rounds a numeric value to the nearest integer.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.round( 3.14 )\n    3.0\n    > y = base.round( -4.2 )\n    -4.0\n    > y = base.round( -4.6 )\n    -5.0\n    > y = base.round( 9.5 )\n    10.0\n    > y = base.round( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil, base.floor, base.roundn, base.trunc\n","base.round2":"\nbase.round2( x )\n    Rounds a numeric value to the nearest power of two on a linear scale.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.round2( 3.14 )\n    4.0\n    > y = base.round2( -4.2 )\n    -4.0\n    > y = base.round2( -4.6 )\n    -4.0\n    > y = base.round2( 9.5 )\n    8.0\n    > y = base.round2( 13.0 )\n    16.0\n    > y = base.round2( -13.0 )\n    -16.0\n    > y = base.round2( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil2, base.floor2, base.round, base.round10\n","base.round10":"\nbase.round10( x )\n    Rounds a numeric value to the nearest power of ten on a linear scale.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.round10( 3.14 )\n    1.0\n    > y = base.round10( -4.2 )\n    -1.0\n    > y = base.round10( -4.6 )\n    -1.0\n    > y = base.round10( 9.5 )\n    10.0\n    > y = base.round10( 13.0 )\n    10.0\n    > y = base.round10( -13.0 )\n    -10.0\n    > y = base.round10( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil10, base.floor10, base.round, base.round2\n","base.roundb":"\nbase.roundb( x, n, b )\n    Rounds a numeric value to the nearest multiple of `b^n` on a linear scale.\n\n    Due to floating-point rounding error, rounding may not be exact.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Integer power.\n\n    b: integer\n        Base.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    // Round to 2 decimal places:\n    > var y = base.roundb( 3.14159, -2, 10 )\n    3.14\n\n    // If `n = 0` or `b = 1`, standard round behavior:\n    > y = base.roundb( 3.14159, 0, 2 )\n    3.0\n\n    // Round to nearest multiple of two:\n    > y = base.roundb( 5.0, 1, 2 )\n    6.0\n\n    See Also\n    --------\n    base.ceilb, base.floorb, base.round, base.roundn\n","base.roundn":"\nbase.roundn( x, n )\n    Rounds a numeric value to the nearest multiple of `10^n`.\n\n    When operating on floating-point numbers in bases other than `2`, rounding\n    to specified digits can be inexact.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Integer power of 10.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    // Round to 2 decimal places:\n    > var y = base.roundn( 3.14159, -2 )\n    3.14\n\n    // If `n = 0`, standard round behavior:\n    > y = base.roundn( 3.14159, 0 )\n    3.0\n\n    // Round to nearest thousand:\n    > y = base.roundn( 12368.0, 3 )\n    12000.0\n\n\n    See Also\n    --------\n    base.ceiln, base.floorn, base.round, base.roundb\n","base.roundsd":"\nbase.roundsd( x, n[, b] )\n    Rounds a numeric value to the nearest number with `n` significant figures.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Number of significant figures. Must be greater than 0.\n\n    b: integer (optional)\n        Base. Must be greater than 0. Default: 10.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.roundsd( 3.14159, 3 )\n    3.14\n    > y = base.roundsd( 3.14159, 1 )\n    3.0\n    > y = base.roundsd( 12368.0, 2 )\n    12000.0\n    > y = base.roundsd( 0.0313, 2, 2 )\n    0.03125\n\n    See Also\n    --------\n    base.ceilsd, base.floorsd, base.round, base.truncsd\n","base.rsqrt":"\nbase.rsqrt( x )\n    Computes the reciprocal square root.\n\n    For `x < 0`, the reciprocal square root is not defined.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Reciprocal square root.\n\n    Examples\n    --------\n    > var y = base.rsqrt( 4.0 )\n    0.5\n    > y = base.rsqrt( 100.0 )\n    0.1\n    > y = base.rsqrt( 0.0 )\n    Infinity\n    > y = base.rsqrt( Infinity )\n    0.0\n    > y = base.rsqrt( -4.0 )\n    NaN\n    > y = base.rsqrt( NaN )\n    NaN\n\n    See Also\n    --------\n    base.sqrt\n","base.sasum":"\nbase.sasum( N, x, stride )\n    Computes the sum of the absolute values.\n\n    The sum of absolute values corresponds to the *L1* norm.\n\n    The `N` and `stride` parameters determine which elements in `x` are used to\n    compute the sum.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N` or `stride` is less than or equal to `0`, the function returns `0`.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Float32Array\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    Returns\n    -------\n    sum: float\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n    > var sum = base.sasum( x.length, x, 1 )\n    19.0\n\n    // Sum every other value:\n    > var N = base.floor( x.length / 2 );\n    > var stride = 2;\n    > sum = base.sasum( N, x, stride )\n    10.0\n\n    // Use view offset; e.g., starting at 2nd element:\n    > var x0 = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n    > var x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > N = base.floor( x0.length / 2 );\n    > sum = base.sasum( N, x1, stride )\n    12.0\n\n\nbase.sasum.ndarray( N, x, stride, offset )\n    Computes the sum of absolute values using alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameter supports indexing semantics based on a\n    starting index.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Float32Array\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    offset: integer\n        Starting index.\n\n    Returns\n    -------\n    sum: float\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n    > var sum = base.sasum.ndarray( x.length, x, 1, 0 )\n    19.0\n\n    // Sum the last three elements:\n    > x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n    > sum = base.sasum.ndarray( 3, x, -1, x.length-1 )\n    15.0\n\n    See Also\n    --------\n    base.dasum\n","base.sasum.ndarray":"\nbase.sasum.ndarray( N, x, stride, offset )\n    Computes the sum of absolute values using alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameter supports indexing semantics based on a\n    starting index.\n\n    Parameters\n    ----------\n    N: integer\n        Number of elements to sum.\n\n    x: Float32Array\n        Input array.\n\n    stride: integer\n        Index increment.\n\n    offset: integer\n        Starting index.\n\n    Returns\n    -------\n    sum: float\n        Sum of absolute values.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float32Array( [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ] );\n    > var sum = base.sasum.ndarray( x.length, x, 1, 0 )\n    19.0\n\n    // Sum the last three elements:\n    > x = new Float32Array( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );\n    > sum = base.sasum.ndarray( 3, x, -1, x.length-1 )\n    15.0\n\n    See Also\n    --------\n    base.dasum\n","base.saxpy":"\nbase.saxpy( N, alpha, x, strideX, y, strideY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`.\n\n    The `N` and `stride` parameters determine which elements in `x` and `y` are\n    accessed at runtime.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N <= 0` or `alpha == 0`, the function returns `y` unchanged.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: number\n        Constant.\n\n    x: Float32Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    y: Float32Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    Returns\n    -------\n    y: Float32Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n    > var alpha = 5.0;\n    > base.saxpy( x.length, alpha, x, 1, y, 1 )\n    <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Using `N` and `stride` parameters:\n    > x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.saxpy( N, alpha, x, 2, y, -1 )\n    <Float32Array>[ 26.0, 16.0, 6.0, 1.0, 1.0, 1.0 ]\n\n    // Using view offsets:\n    > var x0 = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > var y0 = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > var y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\n    > N = base.floor( x0.length / 2 );\n    > base.saxpy( N, 5.0, x1, -2, y1, 1 )\n    <Float32Array>[ 40.0, 31.0, 22.0 ]\n    > y0\n    <Float32Array>[ 7.0, 8.0, 9.0, 40.0, 31.0, 22.0 ]\n\n\nbase.saxpy.ndarray( N, alpha, x, strideX, offsetX, y, strideY, offsetY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`, with\n    alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offsetX` and `offsetY` parameters support indexing semantics\n    based on starting indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: number\n        Constant.\n\n    x: Float32Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Float32Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Float32Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n    > var alpha = 5.0;\n    > base.saxpy.ndarray( x.length, alpha, x, 1, 0, y, 1, 0 )\n    <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Advanced indexing:\n    > x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.saxpy.ndarray( N, alpha, x, 2, 1, y, -1, y.length-1 )\n    <Float32Array>[ 7.0, 8.0, 9.0, 40.0, 31.0, 22.0 ]\n\n    See Also\n    --------\n    base.daxpy\n","base.saxpy.ndarray":"\nbase.saxpy.ndarray( N, alpha, x, strideX, offsetX, y, strideY, offsetY )\n    Multiplies `x` by a constant `alpha` and adds the result to `y`, with\n    alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offsetX` and `offsetY` parameters support indexing semantics\n    based on starting indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    alpha: number\n        Constant.\n\n    x: Float32Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Float32Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Float32Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n    > var alpha = 5.0;\n    > base.saxpy.ndarray( x.length, alpha, x, 1, 0, y, 1, 0 )\n    <Float32Array>[ 6.0, 11.0, 16.0, 21.0, 26.0 ]\n\n    // Advanced indexing:\n    > x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.saxpy.ndarray( N, alpha, x, 2, 1, y, -1, y.length-1 )\n    <Float32Array>[ 7.0, 8.0, 9.0, 40.0, 31.0, 22.0 ]\n\n    See Also\n    --------\n    base.daxpy\n","base.scopy":"\nbase.scopy( N, x, strideX, y, strideY )\n    Copies values from `x` into `y`.\n\n    The `N` and `stride` parameters determine how values from `x` are copied\n    into `y`.\n\n    Indexing is relative to the first index. To introduce an offset, use typed\n    array views.\n\n    If `N` is less than or equal to `0`, the function returns `y` unchanged.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Float32Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    y: Float32Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    Returns\n    -------\n    y: Float32Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n    > base.scopy( x.length, x, 1, y, 1 )\n    <Float32Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.scopy( N, x, -2, y, 1 )\n    <Float32Array>[ 5.0, 3.0, 1.0, 10.0, 11.0, 12.0 ]\n\n    // Using typed array views:\n    > var x0 = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > var y0 = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var x1 = new Float32Array( x0.buffer, x0.BYTES_PER_ELEMENT*1 );\n    > var y1 = new Float32Array( y0.buffer, y0.BYTES_PER_ELEMENT*3 );\n    > N = base.floor( x0.length / 2 );\n    > base.scopy( N, x1, -2, y1, 1 )\n    <Float32Array>[ 6.0, 4.0, 2.0 ]\n    > y0\n    <Float32Array>[ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n\nbase.scopy.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )\n    Copies values from `x` into `y`, with alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameters support indexing semantics based on starting\n    indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Float32Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Float32Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Float32Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n    > base.scopy.ndarray( x.length, x, 1, 0, y, 1, 0 )\n    <Float32Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.scopy.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n    <Float32Array>[ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n    See Also\n    --------\n    base.dcopy\n","base.scopy.ndarray":"\nbase.scopy.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )\n    Copies values from `x` into `y`, with alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offset` parameters support indexing semantics based on starting\n    indices.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to copy.\n\n    x: Float32Array\n        Input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Float32Array\n        Destination array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    y: Float32Array\n        Input array `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );\n    > var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );\n    > base.scopy.ndarray( x.length, x, 1, 0, y, 1, 0 )\n    <Float32Array>[ 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Advanced indexing:\n    > x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > base.scopy.ndarray( N, x, 2, 1, y, -1, y.length-1 )\n    <Float32Array>[ 7.0, 8.0, 9.0, 6.0, 4.0, 2.0 ]\n\n    See Also\n    --------\n    base.dcopy\n","base.sdot":"\nbase.sdot( N, x, strideX, y, strideY )\n    Computes the dot product of two single precision floating point vectors\n\n    The `N`, `strideX` and `strideY` parameters determine which elements in `x`\n    and `y` are accessed at runtime.\n\n    Indexing is relative to the first index.  To introduce an offset, use a\n    typed array.\n\n    If `N <= 0` the function returns `0.0`.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    x: Float32Array\n        First input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    y: Float32Array\n        Second input array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    Returns\n    -------\n    dot: float\n        The dot product of `x` and `y`.\n\n    Examples\n    --------\n    // Standard usage:\n    > var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );\n    > var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );\n    > var dot = base.sdot( x.length, x, 1, y, 1 )\n    -5.0\n\n    // Using `N`, `stideX` and `strideY`:\n    > x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > dot = base.sdot(N, x, 2, y, -1 )\n    9.0\n\n    // Using View Offsets:\n    > x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > y = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var x1 = new Float32Array( x.buffer, x.BYTES_PER_ELEMENT*1 );\n    > var y1 = new Float32Array( y.buffer, y.BYTES_PER_ELEMENT*3 );\n    > N = base.floor( x.length / 2 );\n    > dot = base.sdot( N, x1, -2, y1, 1)\n    128.0\n\nbase.sdot.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )\n    Computes the dot product of two single precision floating point vectors\n    using alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offsetX` and `offsetY` parameters suppoert indexing based on a\n    starting index.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    x: Float32Array\n        First input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Float32Array\n        Second input array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    dot: float\n        The dot product of `x` and `y`.\n\n    Examples\n    --------\n    // Standard usage\n    > var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] )\n    > var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] )\n    > var dot = base.sdot.ndarray( x.length, x, 1, 0, y, 1, 0 )\n    -5.0\n\n    // Using `N`, `stideX` and `strideY`\n    > var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] )\n    > var x = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] )\n    > var N = base.floor( x.length / 2 );\n    > dot = base.sdot.ndarray( N, x, 2, 0, y, 2, 0 )\n    9.0\n\n    // Using offset indicies\n    > var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > var y = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > dot = base.sdot.ndarray( N, x, -2, x.length-1, y, 1, 3 )\n    128.0\n\n","base.sdot.ndarray":"\nbase.sdot.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )\n    Computes the dot product of two single precision floating point vectors\n    using alternative indexing semantics.\n\n    While typed array views mandate a view offset based on the underlying\n    buffer, the `offsetX` and `offsetY` parameters suppoert indexing based on a\n    starting index.\n\n    Parameters\n    ----------\n    N: integer\n        Number of indexed elements.\n\n    x: Float32Array\n        First input array.\n\n    strideX: integer\n        Index increment for `x`.\n\n    offsetX: integer\n        Starting index for `x`.\n\n    y: Float32Array\n        Second input array.\n\n    strideY: integer\n        Index increment for `y`.\n\n    offsetY: integer\n        Starting index for `y`.\n\n    Returns\n    -------\n    dot: float\n        The dot product of `x` and `y`.\n\n    Examples\n    --------\n    // Standard usage\n    > var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] )\n    > var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] )\n    > var dot = base.sdot.ndarray( x.length, x, 1, 0, y, 1, 0 )\n    -5.0\n\n    // Using `N`, `stideX` and `strideY`\n    > var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] )\n    > var x = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ] )\n    > var N = base.floor( x.length / 2 );\n    > dot = base.sdot.ndarray( N, x, 2, 0, y, 2, 0 )\n    9.0\n\n    // Using offset indicies\n    > var x = new Float32Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n    > var y = new Float32Array( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );\n    > var N = base.floor( x.length / 2 );\n    > dot = base.sdot.ndarray( N, x, -2, x.length-1, y, 1, 3 )\n    128.0\n\n","base.setHighWord":"\nbase.setHighWord( x, high )\n    Sets the more significant 32 bits of a double-precision floating-point\n    number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    high: integer\n        Unsigned 32-bit integer to replace the higher order word of `x`.\n\n    Returns\n    -------\n    out: number\n        Double having the same lower order word as `x`.\n\n    Examples\n    --------\n    // Set the higher order bits of `+infinity` to return `1`:\n    > var high = 1072693248 >>> 0;\n    > var y = base.setHighWord( PINF, high )\n    1.0\n\n    See Also\n    --------\n    base.getHighWord, base.setLowWord\n","base.setLowWord":"\nbase.setLowWord( x, low )\n    Sets the less significant 32 bits of a double-precision floating-point\n    number.\n\n    Setting the lower order bits of `NaN` or positive or negative infinity will\n    return `NaN`, as `NaN` is defined as a double whose exponent bit sequence is\n    all ones and whose fraction can be any bit sequence except all zeros.\n    Positive and negative infinity are defined as doubles with an exponent bit\n    sequence equal to all ones and a fraction equal to all zeros. Hence,\n    changing the less significant bits of positive and negative infinity\n    converts each value to `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    low: integer\n        Unsigned 32-bit integer to replace the lower order word of `x`.\n\n    Returns\n    -------\n    out: number\n        Double having the same higher order word as `x`.\n\n    Examples\n    --------\n    > var low = 5 >>> 0;\n    > var x = 3.14e201;\n    > var y = base.setLowWord( x, low )\n    3.139998651394392e+201\n\n    // Special cases:\n    > var low = 12345678;\n    > var y = base.setLowWord( PINF, low )\n    NaN\n    > y = base.setLowWord( NINF, low )\n    NaN\n    > y = base.setLowWord( NaN, low )\n    NaN\n\n    See Also\n    --------\n    base.getLowWord, base.setHighWord\n","base.sici":"\nbase.sici( [out,] x )\n    Computes the sine and cosine integrals.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    x: number\n        Input value.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Sine and cosine integrals.\n\n    Examples\n    --------\n    > var y = base.sici( 3.0 )\n    [ ~1.849, ~0.12 ]\n    > y = base.sici( 0.0 )\n    [ 0.0, -Infinity ]\n    > y = base.sici( -9.0 )\n    [ ~-1.665, ~0.055 ]\n    > y = base.sici( NaN )\n    [ NaN, NaN ]\n\n    // Provide an output array:\n    > var out = new Float64Array( 2 );\n    > y = base.sici( out, 3.0 )\n    <Float64Array>[ ~1.849, ~0.12 ]\n    > var bool = ( y === out )\n    true\n\n","base.signbit":"\nbase.signbit( x )\n    Returns a boolean indicating if the sign bit is on (true) or off (false).\n\n    Parameters\n    ----------\n    x: number\n        Double-precision floating-point number.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if sign bit is on or off.\n\n    Examples\n    --------\n    > var bool = base.signbit( 4.0 )\n    false\n    > bool = base.signbit( -9.14e-34 )\n    true\n    > bool = base.signbit( 0.0 )\n    false\n    > bool = base.signbit( -0.0 )\n    true\n\n    See Also\n    --------\n    base.signbitf\n","base.signbitf":"\nbase.signbitf( x )\n    Returns a boolean indicating if the sign bit is on (true) or off (false).\n\n    Parameters\n    ----------\n    x: float\n        Single-precision floating-point number.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if sign bit is on or off.\n\n    Examples\n    --------\n    > var bool = base.signbitf( base.float64ToFloat32( 4.0 ) )\n    false\n    > bool = base.signbitf( base.float64ToFloat32( -9.14e-34 ) )\n    true\n    > bool = base.signbitf( 0.0 )\n    false\n    > bool = base.signbitf( -0.0 )\n    true\n\n    See Also\n    --------\n    base.signbit\n","base.significandf":"\nbase.significandf( x )\n    Returns an integer corresponding to the significand of a single-precision\n    floating-point number.\n\n    Parameters\n    ----------\n    x: float\n        Single-precision floating-point number.\n\n    Returns\n    -------\n    out: integer\n        Significand.\n\n    Examples\n    --------\n    > var s = base.significandf( base.float64ToFloat32( 3.14e34 ) )\n    4293751\n    > s = base.significandf( base.float64ToFloat32( 3.14e-34 ) )\n    5288021\n    > s = base.significandf( base.float64ToFloat32( -3.14 ) )\n    4781507\n    > s = base.significandf( 0.0 )\n    0\n    > s = base.significandf( NaN )\n    4194304\n\n","base.signum":"\nbase.signum( x )\n    Evaluates the signum function.\n\n    Value | Sign\n    ----- | -----\n    x > 0 |    +1\n    x < 0 |    -1\n        0 |     0\n       -0 |    -0\n      NaN |   NaN\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    sign: number\n        Function value.\n\n    Examples\n    --------\n    > var sign = base.signum( -5.0 )\n    -1.0\n    > sign = base.signum( 5.0 )\n    1.0\n    > sign = base.signum( -0.0 )\n    -0.0\n    > sign = base.signum( 0.0 )\n    0.0\n    > sign = base.signum( NaN )\n    NaN\n\n","base.sin":"\nbase.sin( x )\n    Computes the sine of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Sine.\n\n    Examples\n    --------\n    > var y = base.sin( 0.0 )\n    ~0.0\n    > y = base.sin( PI/2.0 )\n    ~1.0\n    > y = base.sin( -PI/6.0 )\n    ~-0.5\n    > y = base.sin( NaN )\n    NaN\n\n    See Also\n    --------\n    base.cos, base.sinpi, base.tan\n","base.sinc":"\nbase.sinc( x )\n    Computes the normalized cardinal sine of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Cardinal sine.\n\n    Examples\n    --------\n    > var y = base.sinc( 0.5 )\n    ~0.637\n    > y = base.sinc( -1.2 )\n    ~-0.156\n    > y = base.sinc( 0.0 )\n    1.0\n    > y = base.sinc( NaN )\n    NaN\n\n    See Also\n    --------\n    base.sin\n","base.sincos":"\nbase.sincos( [out,] x )\n    Simultaneously computes the sine and cosine of a number.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Destination array.\n\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: Array|TypedArray|Object\n        Sine and cosine.\n\n    Examples\n    --------\n    > var y = base.sincos( 0.0 )\n    [ ~0.0, ~1.0 ]\n    > y = base.sincos( PI/2.0 )\n    [ ~1.0, ~0.0 ]\n    > y = base.sincos( -PI/6.0 )\n    [ ~-0.5, ~0.866 ]\n    > y = base.sincos( NaN )\n    [ NaN, NaN ]\n\n    > var out = new Float64Array( 2 );\n    > var v = base.sincos( out, 0.0 )\n    <Float64Array>[ ~0.0, ~1.0 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.cos, base.sin, base.sincospi\n","base.sincospi":"\nbase.sincospi( [out,] x )\n    Simultaneously computes the sine and cosine of a number times π.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Destination array.\n\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: Array|TypedArray|Object\n        Two-element array containing sin(πx) and cos(πx).\n\n    Examples\n    --------\n    > var y = base.sincospi( 0.0 )\n    [ 0.0, 1.0 ]\n    > y = base.sincospi( 0.5 )\n    [ 1.0, 0.0 ]\n    > y = base.sincospi( 0.1 )\n    [ ~0.309, ~0.951 ]\n    > y = base.sincospi( NaN )\n    [ NaN, NaN ]\n\n    > var out = new Float64Array( 2 );\n    > var v = base.sincospi( out, 0.0 )\n    <Float64Array>[ 0.0, 1.0 ]\n    > var bool = ( v === out )\n    true\n\n    See Also\n    --------\n    base.cospi, base.sincos, base.sinpi\n","base.sinh":"\nbase.sinh( x )\n    Computes the hyperbolic sine of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Hyperbolic sine.\n\n    Examples\n    --------\n    > var y = base.sinh( 0.0 )\n    0.0\n    > y = base.sinh( 2.0 )\n    ~3.627\n    > y = base.sinh( -2.0 )\n    ~-3.627\n    > y = base.sinh( NaN )\n    NaN\n\n    See Also\n    --------\n    base.cosh, base.sin, base.tanh\n","base.sinpi":"\nbase.sinpi( x )\n    Computes the value of `sin(πx)`.\n\n    The function computes `sin(πx)` more accurately than the obvious approach,\n    especially for large `x`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.sinpi( 0.0 )\n    0.0\n    > y = base.sinpi( 0.5 )\n    1.0\n    > y = base.sinpi( 0.9 )\n    ~0.309\n    > y = base.sinpi( NaN )\n    NaN\n\n    See Also\n    --------\n    base.sin\n","base.spence":"\nbase.spence( x )\n    Evaluates Spence’s function, which is also known as the dilogarithm.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.spence( 3.0 )\n    ~-1.437\n    > y = base.spence( 0.0 )\n    ~1.645\n    > y = base.spence( -9.0 )\n    NaN\n    > y = base.spence( NaN )\n    NaN\n\n","base.sqrt":"\nbase.sqrt( x )\n    Computes the principal square root.\n\n    For `x < 0`, the principal square root is not defined.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Principal square root.\n\n    Examples\n    --------\n    > var y = base.sqrt( 4.0 )\n    2.0\n    > y = base.sqrt( 9.0 )\n    3.0\n    > y = base.sqrt( 0.0 )\n    0.0\n    > y = base.sqrt( -4.0 )\n    NaN\n    > y = base.sqrt( NaN )\n    NaN\n\n    See Also\n    --------\n    base.cbrt, base.rsqrt\n","base.sqrt1pm1":"\nbase.sqrt1pm1( x )\n    Computes the principal square root of `1+x` minus one.\n\n    This function is more accurate than the obvious approach for small `x`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Square root of `1+x` minus one.\n\n    Examples\n    --------\n    > var y = base.sqrt1pm1( 3.0 )\n    1.0\n    > y = base.sqrt1pm1( 0.5 )\n    ~0.225\n    > y = base.sqrt1pm1( 0.02 )\n    ~0.01\n    > y = base.sqrt1pm1( -0.5 )\n    ~-0.293\n    > y = base.sqrt1pm1( -1.1 )\n    NaN\n    > y = base.sqrt1pm1( NaN )\n    NaN\n\n    See Also\n    --------\n    base.sqrt\n","base.sumSeries":"\nbase.sumSeries( generator[, options] )\n    Sum the elements of the series given by the supplied function.\n\n    Parameters\n    ----------\n    generator: Function\n        Series function.\n\n    options: Object (optional)\n        Options.\n\n    options.maxTerms: integer (optional)\n        Maximum number of terms to be added. Default: `1000000`.\n\n    options.tolerance: number (optional)\n        Further terms are only added as long as the next term is greater than\n        the current term times the tolerance. Default: `2.22e-16`.\n\n    options.initialValue: number (optional)\n        Initial value of the resulting sum. Default: `0`.\n\n    Returns\n    -------\n    out: number\n        Sum of series terms.\n\n    Examples\n    --------\n    // Using an ES6 generator function:\n    > function* geometricSeriesGenerator( x ) {\n    ...     var exponent = 0;\n    ...     while ( true ) {\n    ...         yield Math.pow( x, exponent );\n    ...         exponent += 1;\n    ...     }\n    ... };\n    > var gen = geometricSeriesGenerator( 0.9 );\n    > var out = base.sumSeries( gen )\n    10\n\n    // Using a closure:\n    > function geometricSeriesClosure( x ) {\n    ...     var exponent = -1;\n    ...     return function() {\n    ...         exponent += 1;\n    ...         return Math.pow( x, exponent );\n    ...     };\n    ... };\n    > gen = geometricSeriesClosure( 0.9 );\n    > out = base.sumSeries( gen )\n    10\n\n    // Setting an initial value for the sum:\n    > out = base.sumSeries( geometricSeriesGenerator( 0.5 ), { 'initialValue': 1 } )\n    3\n    // Changing the maximum number of terms to be summed:\n    > out = base.sumSeries( geometricSeriesGenerator( 0.5 ), { 'maxTerms': 10 } )\n    ~1.998 // Infinite sum is 2\n\n    // Adjusting the used tolerance:\n    > out = base.sumSeries( geometricSeriesGenerator( 0.5 ), { 'tolerance': 1e-3 } )\n    ~1.998\n\n","base.tan":"\nbase.tan( x )\n    Computes the tangent of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Tangent.\n\n    Examples\n    --------\n    > var y = base.tan( 0.0 )\n    ~0.0\n    > y = base.tan( -PI/4.0 )\n    ~-1.0\n    > y = base.tan( PI/4.0 )\n    ~1.0\n    > y = base.tan( NaN )\n    NaN\n\n    See Also\n    --------\n    base.cos, base.sin\n","base.tanh":"\nbase.tanh( x )\n    Computes the hyperbolic tangent of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Hyperbolic tangent.\n\n    Examples\n    --------\n    > var y = base.tanh( 0.0 )\n    0.0\n    > var y = base.tanh( -0.0 )\n    -0.0\n    > y = base.tanh( 2.0 )\n    ~0.964\n    > y = base.tanh( -2.0 )\n    ~-0.964\n    > y = base.tanh( NaN )\n    NaN\n\n    See Also\n    --------\n    base.cosh, base.sinh, base.tan\n","base.toBinaryString":"\nbase.toBinaryString( x )\n    Returns a string giving the literal bit representation of a double-precision\n    floating-point number.\n\n    Parameters\n    ----------\n    x: number\n        Double-precision floating-point number.\n\n    Returns\n    -------\n    bstr: string\n        Bit representation.\n\n    Examples\n    --------\n    > var str = base.toBinaryString( 4.0 )\n    '0100000000010000000000000000000000000000000000000000000000000000'\n    > str = base.toBinaryString( PI )\n    '0100000000001001001000011111101101010100010001000010110100011000'\n    > str = base.toBinaryString( -1.0e308 )\n    '1111111111100001110011001111001110000101111010111100100010100000'\n    > str = base.toBinaryString( -3.14e-320 )\n    '1000000000000000000000000000000000000000000000000001100011010011'\n    > str = base.toBinaryString( 5.0e-324 )\n    '0000000000000000000000000000000000000000000000000000000000000001'\n    > str = base.toBinaryString( 0.0 )\n    '0000000000000000000000000000000000000000000000000000000000000000'\n    > str = base.toBinaryString( -0.0 )\n    '1000000000000000000000000000000000000000000000000000000000000000'\n    > str = base.toBinaryString( NaN )\n    '0111111111111000000000000000000000000000000000000000000000000000'\n    > str = base.toBinaryString( PINF )\n    '0111111111110000000000000000000000000000000000000000000000000000'\n    > str = base.toBinaryString( NINF )\n    '1111111111110000000000000000000000000000000000000000000000000000'\n\n    See Also\n    --------\n    base.fromBinaryString, base.toBinaryStringf\n","base.toBinaryStringf":"\nbase.toBinaryStringf( x )\n    Returns a string giving the literal bit representation of a single-precision\n    floating-point number.\n\n    Parameters\n    ----------\n    x: float\n        Single-precision floating-point number.\n\n    Returns\n    -------\n    str: string\n        Bit representation.\n\n    Examples\n    --------\n    > var str = base.toBinaryStringf( base.float64ToFloat32( 4.0 ) )\n    '01000000100000000000000000000000'\n    > str = base.toBinaryStringf( base.float64ToFloat32( PI ) )\n    '01000000010010010000111111011011'\n    > str = base.toBinaryStringf( base.float64ToFloat32( -1.0e38 ) )\n    '11111110100101100111011010011001'\n    > str = base.toBinaryStringf( base.float64ToFloat32( -3.14e-39 ) )\n    '10000000001000100011000100001011'\n    > str = base.toBinaryStringf( base.float64ToFloat32( 1.4e-45 ) )\n    '00000000000000000000000000000001'\n    > str = base.toBinaryStringf( 0.0 )\n    '00000000000000000000000000000000'\n    > str = base.toBinaryStringf( -0.0 )\n    '10000000000000000000000000000000'\n    > str = base.toBinaryStringf( NaN )\n    '01111111110000000000000000000000'\n    > str = base.toBinaryStringf( FLOAT32_PINF )\n    '01111111100000000000000000000000'\n    > str = base.toBinaryStringf( FLOAT32_NINF )\n    '11111111100000000000000000000000'\n\n    See Also\n    --------\n    base.fromBinaryStringf, base.toBinaryString\n","base.toBinaryStringUint8":"\nbase.toBinaryStringUint8( x )\n    Returns a string giving the literal bit representation of an unsigned 8-bit\n    integer.\n\n    Except for typed arrays, JavaScript does not provide native user support for\n    unsigned 8-bit integers. According to the ECMAScript standard, `number`\n    values correspond to double-precision floating-point numbers. While this\n    function is intended for unsigned 8-bit integers, the function will accept\n    floating-point values and represent the values as if they are unsigned 8-bit\n    integers. Accordingly, care should be taken to ensure that only nonnegative\n    integer values less than `256` (`2^8`) are provided.\n\n    Parameters\n    ----------\n    x: integer\n        Input value.\n\n    Returns\n    -------\n    str: string\n        Bit representation.\n\n    Examples\n    --------\n    > var a = new Uint8Array( [ 1, 4, 9 ] );\n    > var str = base.toBinaryStringUint8( a[ 0 ] )\n    '00000001'\n    > str = base.toBinaryStringUint8( a[ 1 ] )\n    '00000100'\n    > str = base.toBinaryStringUint8( a[ 2 ] )\n    '00001001'\n\n    See Also\n    --------\n    base.toBinaryString\n","base.toBinaryStringUint16":"\nbase.toBinaryStringUint16( x )\n    Returns a string giving the literal bit representation of an unsigned 16-bit\n    integer.\n\n    Except for typed arrays, JavaScript does not provide native user support for\n    unsigned 16-bit integers. According to the ECMAScript standard, `number`\n    values correspond to double-precision floating-point numbers. While this\n    function is intended for unsigned 16-bit integers, the function will accept\n    floating-point values and represent the values as if they are unsigned\n    16-bit integers. Accordingly, care should be taken to ensure that only\n    nonnegative integer values less than `65536` (`2^16`) are provided.\n\n    Parameters\n    ----------\n    x: integer\n        Input value.\n\n    Returns\n    -------\n    str: string\n        Bit representation.\n\n    Examples\n    --------\n    > var a = new Uint16Array( [ 1, 4, 9 ] );\n    > var str = base.toBinaryStringUint16( a[ 0 ] )\n    '0000000000000001'\n    > str = base.toBinaryStringUint16( a[ 1 ] )\n    '0000000000000100'\n    > str = base.toBinaryStringUint16( a[ 2 ] )\n    '0000000000001001'\n\n    See Also\n    --------\n    base.toBinaryString\n","base.toBinaryStringUint32":"\nbase.toBinaryStringUint32( x )\n    Returns a string giving the literal bit representation of an unsigned 32-bit\n    integer.\n\n    Except for typed arrays, JavaScript does not provide native user support for\n    unsigned 32-bit integers. According to the ECMAScript standard, `number`\n    values correspond to double-precision floating-point numbers. While this\n    function is intended for unsigned 32-bit integers, the function will accept\n    floating-point values and represent the values as if they are unsigned\n    32-bit integers. Accordingly, care should be taken to ensure that only\n    nonnegative integer values less than `4,294,967,296` (`2^32`) are provided.\n\n    Parameters\n    ----------\n    x: integer\n        Input value.\n\n    Returns\n    -------\n    str: string\n        Bit representation.\n\n    Examples\n    --------\n    > var a = new Uint32Array( [ 1, 4, 9 ] );\n    > var str = base.toBinaryStringUint32( a[ 0 ] )\n    '00000000000000000000000000000001'\n    > str = base.toBinaryStringUint32( a[ 1 ] )\n    '00000000000000000000000000000100'\n    > str = base.toBinaryStringUint32( a[ 2 ] )\n    '00000000000000000000000000001001'\n\n    See Also\n    --------\n    base.toBinaryString\n","base.toWordf":"\nbase.toWordf( x )\n    Returns an unsigned 32-bit integer corresponding to the IEEE 754 binary\n    representation of a single-precision floating-point number.\n\n    Parameters\n    ----------\n    x: float\n        Single-precision floating-point number.\n\n    Returns\n    -------\n    out: integer\n        Unsigned 32-bit integer.\n\n    Examples\n    --------\n    > var f32 = base.float64ToFloat32( 1.337 )\n    1.3370000123977661\n    > var w = base.toWordf( f32 )\n    1068180177\n\n    See Also\n    --------\n    base.fromWordf, base.toWords\n","base.toWords":"\nbase.toWords( [out,] x )\n    Splits a floating-point number into a higher order word (unsigned 32-bit\n    integer) and a lower order word (unsigned 32-bit integer).\n\n    When provided a destination object, the function returns an array with two\n    elements: a higher order word and a lower order word, respectively. The\n    lower order word contains the less significant bits, while the higher order\n    word contains the more significant bits and includes the exponent and sign.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    x: number\n        Double-precision floating-point number.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Higher and lower order words.\n\n    Examples\n    --------\n    > var w = base.toWords( 3.14e201 )\n    [ 1774486211, 2479577218 ]\n\n    // Provide an output array:\n    > var out = new Uint32Array( 2 );\n    > w = base.toWords( out, 3.14e201 )\n    <Uint32Array>[ 1774486211, 2479577218 ]\n    > var bool = ( w === out )\n    true\n\n    See Also\n    --------\n    base.fromWords, base.toWordf","base.trigamma":"\nbase.trigamma( x )\n    Evaluates the trigamma function.\n\n    If `x` is `0` or a negative `integer`, the `function` returns `NaN`.\n\n    If provided `NaN`, the `function` returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.trigamma( -2.5 )\n    ~9.539\n    > y = base.trigamma( 1.0 )\n    ~1.645\n    > y = base.trigamma( 10.0 )\n    ~0.105\n    > y = base.trigamma( NaN )\n    NaN\n    > y = base.trigamma( -1.0 )\n    NaN\n\n    See Also\n    --------\n    base.digamma, base.gamma\n","base.trunc":"\nbase.trunc( x )\n    Rounds a numeric value toward zero.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.trunc( 3.14 )\n    3.0\n    > y = base.trunc( -4.2 )\n    -4.0\n    > y = base.trunc( -4.6 )\n    -4.0\n    > y = base.trunc( 9.5 )\n    9.0\n    > y = base.trunc( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil, base.floor, base.round\n","base.trunc2":"\nbase.trunc2( x )\n    Rounds a numeric value to the nearest power of two toward zero.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.trunc2( 3.14 )\n    2.0\n    > y = base.trunc2( -4.2 )\n    -4.0\n    > y = base.trunc2( -4.6 )\n    -4.0\n    > y = base.trunc2( 9.5 )\n    8.0\n    > y = base.trunc2( 13.0 )\n    8.0\n    > y = base.trunc2( -13.0 )\n    -8.0\n    > y = base.trunc2( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil2, base.floor2, base.round2, base.trunc, base.trunc10\n","base.trunc10":"\nbase.trunc10( x )\n    Rounds a numeric value to the nearest power of ten toward zero.\n\n    The function may not return accurate results for subnormals due to a general\n    loss in precision.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.trunc10( 3.14 )\n    1.0\n    > y = base.trunc10( -4.2 )\n    -1.0\n    > y = base.trunc10( -4.6 )\n    -1.0\n    > y = base.trunc10( 9.5 )\n    1.0\n    > y = base.trunc10( 13.0 )\n    10.0\n    > y = base.trunc10( -13.0 )\n    -10.0\n    > y = base.trunc10( -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.ceil10, base.floor10, base.round10, base.trunc, base.trunc2\n","base.truncb":"\nbase.truncb( x, n, b )\n    Rounds a numeric value to the nearest multiple of `b^n` toward zero.\n\n    Due to floating-point rounding error, rounding may not be exact.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Integer power.\n\n    b: integer\n        Base.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    // Round to 4 decimal places:\n    > var y = base.truncb( 3.14159, -4, 10 )\n    3.1415\n\n    // If `n = 0` or `b = 1`, standard round behavior:\n    > y = base.truncb( 3.14159, 0, 2 )\n    3.0\n\n    // Round to nearest multiple of two toward zero:\n    > y = base.truncb( 5.0, 1, 2 )\n    4.0\n\n    See Also\n    --------\n    base.ceilb, base.floorb, base.roundb, base.trunc, base.truncn\n","base.truncn":"\nbase.truncn( x, n )\n    Rounds a numeric value to the nearest multiple of `10^n` toward zero.\n\n    When operating on floating-point numbers in bases other than `2`, rounding\n    to specified digits can be inexact.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Integer power of 10.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    // Round to 4 decimal places:\n    > var y = base.truncn( 3.14159, -4 )\n    3.1415\n\n    // If `n = 0`, standard round behavior:\n    > y = base.truncn( 3.14159, 0 )\n    3.0\n\n    // Round to nearest thousand:\n    > y = base.truncn( 12368.0, 3 )\n    12000.0\n\n\n    See Also\n    --------\n    base.ceiln, base.floorn, base.roundn, base.trunc, base.truncb\n","base.truncsd":"\nbase.truncsd( x, n[, b] )\n    Rounds a numeric value to the nearest number toward zero with `n`\n    significant figures.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    n: integer\n        Number of significant figures. Must be greater than 0.\n\n    b: integer (optional)\n        Base. Must be greater than 0. Default: 10.\n\n    Returns\n    -------\n    y: number\n        Rounded value.\n\n    Examples\n    --------\n    > var y = base.truncsd( 3.14159, 5 )\n    3.1415\n    > y = base.truncsd( 3.14159, 1 )\n    3.0\n    > y = base.truncsd( 12368.0, 2 )\n    12000.0\n    > y = base.truncsd( 0.0313, 2, 2 )\n    0.03125\n\n    See Also\n    --------\n    base.ceilsd, base.floorsd, base.roundsd, base.trunc\n","base.uimul":"\nbase.uimul( a, b )\n    Performs C-like multiplication of two unsigned 32-bit integers.\n\n    Parameters\n    ----------\n    a: integer\n        Unsigned 32-bit integer.\n\n    b: integer\n        Unsigned 32-bit integer.\n\n    Returns\n    -------\n    out: integer\n        Product.\n\n    Examples\n    --------\n    > var v = base.uimul( 10>>>0, 4>>>0 )\n    40\n\n    See Also\n    --------\n    base.imul\n","base.uimuldw":"\nbase.uimuldw( [out,] a, b )\n    Multiplies two unsigned 32-bit integers and returns an array of two unsigned\n    32-bit integers which represents the unsigned 64-bit integer product.\n\n    When computing the product of 32-bit integer values in double-precision\n    floating-point format (the default JavaScript numeric data type), computing\n    the double word product is necessary in order to avoid exceeding the maximum\n    safe double-precision floating-point integer value.\n\n    Parameters\n    ----------\n    out: ArrayLikeObject (optional)\n        The output array.\n\n    a: integer\n        Unsigned 32-bit integer.\n\n    b: integer\n        Unsigned 32-bit integer.\n\n    Returns\n    -------\n    out: ArrayLikeObject\n        Double word product (in big endian order; i.e., the first element\n        corresponds to the most significant bits and the second element to the\n        least significant bits).\n\n    Examples\n    --------\n    > var v = base.uimuldw( 1, 10 )\n    [ 0, 10 ]\n\n    See Also\n    --------\n    base.imuldw, base.uimul\n","base.uint32ToInt32":"\nbase.uint32ToInt32( x )\n    Converts an unsigned 32-bit integer to a signed 32-bit integer.\n\n    Parameters\n    ----------\n    x: integer\n        Unsigned 32-bit integer.\n\n    Returns\n    -------\n    out: integer\n        Signed 32-bit integer.\n\n    Examples\n    --------\n    > var y = base.uint32ToInt32( base.float64ToUint32( 4294967295 ) )\n    -1\n    > y = base.uint32ToInt32( base.float64ToUint32( 3 ) )\n    3\n\n","base.vercos":"\nbase.vercos( x )\n    Computes the versed cosine.\n\n    The versed cosine is defined as `1 + cos(x)`.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Versed cosine.\n\n    Examples\n    --------\n    > var y = base.vercos( 3.14 )\n    ~0.0\n    > y = base.vercos( -4.2 )\n    ~0.5097\n    > y = base.vercos( -4.6 )\n    ~0.8878\n    > y = base.vercos( 9.5 )\n    ~0.0028\n    > y = base.vercos( -0.0 )\n    2.0\n\n    See Also\n    --------\n    base.cos, base.versin\n","base.versin":"\nbase.versin( x )\n    Computes the versed sine.\n\n    The versed sine is defined as `1 - cos(x)`.\n\n    Parameters\n    ----------\n    x: number\n        Input value (in radians).\n\n    Returns\n    -------\n    y: number\n        Versed sine.\n\n    Examples\n    --------\n    > var y = base.versin( 3.14 )\n    ~2.0\n    > y = base.versin( -4.2 )\n    ~1.490\n    > y = base.versin( -4.6 )\n    ~1.112\n    > y = base.versin( 9.5 )\n    ~1.997\n    > y = base.versin( -0.0 )\n    0.0\n\n    See Also\n    --------\n    base.cos, base.sin, base.vercos\n","base.wrap":"\nbase.wrap( v, min, max )\n    Wraps a value on the half-open interval `[min,max)`.\n\n    The function does not distinguish between positive and negative zero. Where\n    appropriate, the function returns positive zero.\n\n    If provided `NaN` for any argument, the function returns `NaN`.\n\n    Parameters\n    ----------\n    v: number\n        Value to wrap.\n\n    min: number\n        Minimum value.\n\n    max: number\n        Maximum value.\n\n    Returns\n    -------\n    y: number\n        Wrapped value.\n\n    Examples\n    --------\n    > var y = base.wrap( 3.14, 0.0, 5.0 )\n    3.14\n    > y = base.wrap( -3.14, 0.0, 5.0 )\n    ~1.86\n    > y = base.wrap( 3.14, 0.0, 3.0 )\n    ~0.14\n    > y = base.wrap( -0.0, 0.0, 5.0 )\n    0.0\n    > y = base.wrap( 0.0, -3.14, -0.0 )\n    -3.14\n    > y = base.wrap( NaN, 0.0, 5.0 )\n    NaN\n\n    See Also\n    --------\n    base.clamp\n","base.xlog1py":"\nbase.xlog1py( x, y )\n    Computes `x * ln(y+1)` so that the result is `0` if `x = 0`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    y: number\n        Input value.\n\n    Returns\n    -------\n    out: number\n        Function value.\n\n    Examples\n    --------\n    > var out = base.xlog1py( 3.0, 2.0 )\n    ~3.296\n    > out = base.xlog1py( 1.5, 5.9 )\n    ~2.897\n    > out = base.xlog1py( 0.9, 1.0 )\n    ~0.624\n    > out = base.xlog1py( 1.0, 0.0 )\n    0.0\n    > out = base.xlog1py( 0.0, -2.0 )\n    0.0\n    > out = base.xlog1py( 1.5, NaN )\n    NaN\n    > out = base.xlog1py( 0.0, NaN )\n    NaN\n    > out = base.xlog1py( NaN, 2.3 )\n    NaN\n\n    See Also\n    --------\n    base.log1p, base.xlogy\n","base.xlogy":"\nbase.xlogy( x, y )\n    Computes `x * ln(y)` so that the result is `0` if `x = 0`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    y: number\n        Input value.\n\n    Returns\n    -------\n    out: number\n        Function value.\n\n    Examples\n    --------\n    > var out = base.xlogy( 3.0, 2.0 )\n    ~2.079\n    > out = base.xlogy( 1.5, 5.9 )\n    ~2.662\n    > out = base.xlogy( 0.9, 1.0 )\n    0.0\n    > out = base.xlogy( 0.0, -2.0 )\n    0.0\n    > out = base.xlogy( 1.5, NaN )\n    NaN\n    > out = base.xlogy( 0.0, NaN )\n    NaN\n    > out = base.xlogy( NaN, 2.3 )\n    NaN\n\n    See Also\n    --------\n    base.ln, base.xlog1py\n","base.zeta":"\nbase.zeta( s )\n    Evaluates the Riemann zeta function as a function of a real variable `s`.\n\n    Parameters\n    ----------\n    s: number\n        Input value.\n\n    Returns\n    -------\n    y: number\n        Function value.\n\n    Examples\n    --------\n    > var y = base.zeta( 1.1 )\n    ~10.584\n    > y = base.zeta( -4.0 )\n    0.0\n    > y = base.zeta( 70.0 )\n    1.0\n    > y = base.zeta( 0.5 )\n    ~-1.46\n    > y = base.zeta( NaN )\n    NaN\n\n    // Evaluate at a pole:\n    > y = base.zeta( 1.0 )\n    NaN\n\n","BERNDT_CPS_WAGES_1985":"\nBERNDT_CPS_WAGES_1985()\n    Returns a random sample of 534 workers from the Current Population Survey\n    (CPS) from 1985, including their wages and and other characteristics.\n\n    Each array element has the following eleven fields:\n\n    - education: number of years of education.\n    - south: indicator variable for southern region (1 if a person lives in the\n    South; 0 if a person does not live in the South).\n    - gender: gender of the person.\n    - experience: number of years of work experience.\n    - union: indicator variable for union membership (1 if union member; 0 if\n    not a union member).\n    - wage: wage (in dollars per hour).\n    - age: age (in years).\n    - race: ethnicity/race (white, hispanic, and other).\n    - occupation: occupational category (management, sales, clerical, service,\n    professional, and other).\n    - sector: sector (other, manufacturing, or construction).\n    - married: marital status (0 if unmarried; 1 if married).\n\n    Based on residual plots, wages were log-transformed to stabilize the\n    variance.\n\n    Returns\n    -------\n    out: Array<Object>\n        CPS data.\n\n    Examples\n    --------\n    > var data = BERNDT_CPS_WAGES_1985()\n    [ {...}, {...}, ... ]\n\n    References\n    ----------\n    - Berndt, Ernst R. 1991. _The Practice of Econometrics_. Addison Wesley\n    Longman Publishing Co.\n\n","bifurcate":"\nbifurcate( collection, [options,] filter )\n    Splits values into two groups.\n\n    If an element in `filter` is truthy, then the corresponding element in the\n    input collection belongs to the first group; otherwise, the collection\n    element belongs to the second group.\n\n    If provided an empty collection, the function returns an empty array.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection to group. If provided an object, the object must be\n        array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Options.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'values'.\n\n    filter: Array|TypedArray|Object\n        A collection indicating which group an element in the input collection\n        belongs to. If an element in `filter` is truthy, the corresponding\n        element in `collection` belongs to the first group; otherwise, the\n        collection element belongs to the second group. If provided an object,\n        the object must be array-like (excluding strings and functions).\n\n    Returns\n    -------\n    out: Array<Array>|Array\n        Group results.\n\n    Examples\n    --------\n    > var collection = [ 'beep', 'boop', 'foo', 'bar' ];\n    > var f = [ true, true, false, true ];\n    > var out = bifurcate( collection, f )\n    [ [ 'beep', 'boop', 'bar' ], [ 'foo' ] ]\n    > f = [ 1, 1, 0, 1 ];\n    > out = bifurcate( collection, f )\n    [ [ 'beep', 'boop', 'bar' ], [ 'foo' ] ]\n\n    // Output group results as indices:\n    > f = [ true, true, false, true ];\n    > var opts = { 'returns': 'indices' };\n    > out = bifurcate( collection, opts, f )\n    [ [ 0, 1, 3 ], [ 2 ] ]\n\n    // Output group results as index-element pairs:\n    > opts = { 'returns': '*' };\n    > out = bifurcate( collection, opts, f )\n    [ [ [0, 'beep'], [1, 'boop'], [3, 'bar'] ], [ [2, 'foo'] ] ]\n\n    See Also\n    --------\n    bifurcateBy, bifurcateOwn, group\n","bifurcateBy":"\nbifurcateBy( collection, [options,] predicate )\n    Splits values into two groups according to a predicate function.\n\n    When invoked, the predicate function is provided two arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n\n    If a predicate function returns a truthy value, a collection value is\n    placed in the first group; otherwise, a collection value is placed in the\n    second group.\n\n    If provided an empty collection, the function returns an empty array.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection to group. If provided an object, the object must be\n        array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Options.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'values'.\n\n    predicate: Function\n        Predicate function indicating which group an element in the input\n        collection belongs to.\n\n    Returns\n    -------\n    out: Array<Array>|Array\n        Group results.\n\n    Examples\n    --------\n    > function predicate( v ) { return v[ 0 ] === 'b'; };\n    > var collection = [ 'beep', 'boop', 'foo', 'bar' ];\n    > var out = bifurcateBy( collection, predicate )\n    [ [ 'beep', 'boop', 'bar' ], [ 'foo' ] ]\n\n    // Output group results as indices:\n    > var opts = { 'returns': 'indices' };\n    > out = bifurcateBy( collection, opts, predicate )\n    [ [ 0, 1, 3 ], [ 2 ] ]\n\n    // Output group results as index-value pairs:\n    > opts = { 'returns': '*' };\n    > out = bifurcateBy( collection, opts, predicate )\n    [ [ [0, 'beep'], [1, 'boop'], [3, 'bar'] ], [ [2, 'foo' ] ] ]\n\n    See Also\n    --------\n    bifurcate, groupBy\n","bifurcateByAsync":"\nbifurcateByAsync( collection, [options,] predicate, done )\n    Splits values into two groups according to a predicate function.\n\n    When invoked, the predicate function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    predicate function accepts two arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the predicate function accepts three arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other predicate function signature, the predicate function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `group`: value group\n\n    If an predicate function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    If a predicate function calls the `next` callback with a truthy group value,\n    a collection value is placed in the first group; otherwise, a collection\n    value is placed in the second group.\n\n    If provided an empty collection, the function calls the `done` callback with\n    an empty array as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'values'.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        Predicate function indicating which group an element in the input\n        collection belongs to.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function predicate( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > bifurcateByAsync( arr, predicate, done )\n    1000\n    2500\n    3000\n    [ [ 1000, 3000 ], [ 2500 ] ]\n\n    // Output group results as indices:\n    > var opts = { 'returns': 'indices' };\n    > bifurcateByAsync( arr, opts, predicate, done )\n    1000\n    2500\n    3000\n    [ [ 2, 0 ], [ 1 ] ]\n\n    // Output group results as index-value pairs:\n    > opts = { 'returns': '*' };\n    > bifurcateByAsync( arr, opts, predicate, done )\n    1000\n    2500\n    3000\n    [ [ [ 2, 1000 ], [ 0, 3000 ] ], [ [ 1, 2500 ] ] ]\n\n    // Limit number of concurrent invocations:\n    > function predicate( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > bifurcateByAsync( arr, opts, predicate, done )\n    2500\n    3000\n    1000\n    [ [ 3000, 1000 ], [ 2500 ] ]\n\n    // Process sequentially:\n    > function predicate( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000 ];\n    > bifurcateByAsync( arr, opts, predicate, done )\n    3000\n    2500\n    1000\n    [ [ 3000, 1000 ], [ 2500 ] ]\n\n\nbifurcateByAsync.factory( [options,] predicate )\n    Returns a function which splits values into two groups according to an\n    predicate function.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'values'.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        Predicate function indicating which group an element in the input\n        collection belongs to.\n\n    Returns\n    -------\n    out: Function\n        A function which splits values into two groups.\n\n    Examples\n    --------\n    > function predicate( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = bifurcateByAsync.factory( opts, predicate );\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    [ [ 3000, 1000 ], [ 2500 ] ]\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    [ [ 2000, 1000 ], [ 1500 ] ]\n\n    See Also\n    --------\n    bifurcateBy, groupByAsync\n","bifurcateByAsync.factory":"\nbifurcateByAsync.factory( [options,] predicate )\n    Returns a function which splits values into two groups according to an\n    predicate function.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'values'.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        Predicate function indicating which group an element in the input\n        collection belongs to.\n\n    Returns\n    -------\n    out: Function\n        A function which splits values into two groups.\n\n    Examples\n    --------\n    > function predicate( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = bifurcateByAsync.factory( opts, predicate );\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    [ [ 3000, 1000 ], [ 2500 ] ]\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    [ [ 2000, 1000 ], [ 1500 ] ]\n\n    See Also\n    --------\n    bifurcateBy, groupByAsync\n","bifurcateIn":"\nbifurcateIn( obj, [options,] predicate )\n    Splits values into two groups according to a predicate function.\n\n    When invoked, the predicate function is provided two arguments:\n\n    - `value`: object value\n    - `key`: object key\n\n    If a predicate function returns a truthy value, a value is placed in the\n    first group; otherwise, a value is placed in the second group.\n\n    If provided an empty object with no prototype, the function returns an empty\n    array.\n\n    The function iterates over an object's own and inherited properties.\n\n    Key iteration order is *not* guaranteed, and, thus, result order is *not*\n    guaranteed.\n\n    Parameters\n    ----------\n    obj: Object|Array|TypedArray\n        Input object to group.\n\n    options: Object (optional)\n        Options.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `keys`, keys are returned; if `*`,\n        both keys and values are returned. Default: 'values'.\n\n    predicate: Function\n        Predicate function indicating which group a value in the input object\n        belongs to.\n\n    Returns\n    -------\n    out: Array<Array>|Array\n        Group results.\n\n    Examples\n    --------\n    > function Foo() { this.a = 'beep'; this.b = 'boop'; return this; };\n    > Foo.prototype = Object.create( null );\n    > Foo.prototype.c = 'foo';\n    > Foo.prototype.d = 'bar';\n    > var obj = new Foo();\n    > function predicate( v ) { return v[ 0 ] === 'b'; };\n    > var out = bifurcateIn( obj, predicate )\n    [ [ 'beep', 'boop', 'bar' ], [ 'foo' ] ]\n\n    // Output group results as keys:\n    > var opts = { 'returns': 'keys' };\n    > out = bifurcateIn( obj, opts, predicate )\n    [ [ 'a', 'b', 'd' ], [ 'c' ] ]\n\n    // Output group results as key-value pairs:\n    > opts = { 'returns': '*' };\n    > out = bifurcateIn( obj, opts, predicate )\n    [ [ ['a', 'beep'], ['b', 'boop'], ['d', 'bar'] ], [ ['c', 'foo' ] ] ]\n\n    See Also\n    --------\n    bifurcate, bifurcateBy, bifurcateOwn, groupIn\n","bifurcateOwn":"\nbifurcateOwn( obj, [options,] predicate )\n    Splits values into two groups according to a predicate function.\n\n    When invoked, the predicate function is provided two arguments:\n\n    - `value`: object value\n    - `key`: object key\n\n    If a predicate function returns a truthy value, a value is placed in the\n    first group; otherwise, a value is placed in the second group.\n\n    If provided an empty object, the function returns an empty array.\n\n    The function iterates over an object's own properties.\n\n    Key iteration order is *not* guaranteed, and, thus, result order is *not*\n    guaranteed.\n\n    Parameters\n    ----------\n    obj: Object|Array|TypedArray\n        Input object to group.\n\n    options: Object (optional)\n        Options.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `keys`, keys are returned; if `*`,\n        both keys and values are returned. Default: 'values'.\n\n    predicate: Function\n        Predicate function indicating which group a value in the input object\n        belongs to.\n\n    Returns\n    -------\n    out: Array<Array>|Array\n        Group results.\n\n    Examples\n    --------\n    > function predicate( v ) { return v[ 0 ] === 'b'; };\n    > var obj = { 'a': 'beep', 'b': 'boop', 'c': 'foo', 'd': 'bar' };\n    > var out = bifurcateOwn( obj, predicate )\n    [ [ 'beep', 'boop', 'bar' ], [ 'foo' ] ]\n\n    // Output group results as keys:\n    > var opts = { 'returns': 'keys' };\n    > out = bifurcateOwn( obj, opts, predicate )\n    [ [ 'a', 'b', 'd' ], [ 'c' ] ]\n\n    // Output group results as key-value pairs:\n    > opts = { 'returns': '*' };\n    > out = bifurcateOwn( obj, opts, predicate )\n    [ [ ['a', 'beep'], ['b', 'boop'], ['d', 'bar'] ], [ ['c', 'foo' ] ] ]\n\n    See Also\n    --------\n    bifurcate, bifurcateBy, bifurcateIn, groupOwn\n","binomialTest":"\nbinomialTest( x[, n][, options] )\n    Computes an exact test for the success probability in a Bernoulli\n    experiment.\n\n    The returned object comes with a `.print()` method which when invoked will\n    print a formatted output of the results of the hypothesis test.\n\n    Parameters\n    ----------\n    x: (number|Array<number>)\n        Number of successes or two-element array with successes and failures.\n\n    n: Array<number> (optional)\n        Total number of observations.\n\n    options: Object (optional)\n        Options.\n\n    options.alpha: number (optional)\n        Number in the interval `[0,1]` giving the significance level of the\n        hypothesis test. Default: `0.05`.\n\n    options.alternative: string (optional)\n        Indicates whether the alternative hypothesis is that the mean of `x` is\n        larger than `mu` (`greater`), smaller than `mu` (`less`) or equal to\n        `mu` (`two-sided`). Default: `'two-sided'`.\n\n    options.p: number (optional)\n        Hypothesized probability under the null hypothesis. Default: `0.5`.\n\n    Returns\n    -------\n    out: Object\n        Test result object.\n\n    out.alpha: number\n        Used significance level.\n\n    out.rejected: boolean\n        Test decision.\n\n    out.pValue: number\n        p-value of the test.\n\n    out.statistic: number\n        Sample proportion.\n\n    out.ci: Array<number>\n        1-alpha confidence interval for the success probability.\n\n    out.nullValue: number\n        Assumed success probability under H0.\n\n    out.alternative: string\n        Alternative hypothesis (`two-sided`, `less` or `greater`).\n\n    out.method: string\n        Name of test.\n\n    out.print: Function\n        Function to print formatted output.\n\n    Examples\n    --------\n    > var out = binomialTest( 682, 925 )\n    {\n        'pValue': ~3.544e-49,\n        'statistic': ~0.737\n        // ...\n    }\n\n    > out = binomialTest( [ 682, 925 - 682 ] )\n    {\n        'pValue': ~3.544e-49,\n        'statistic': ~0.737\n        // ...\n    }\n\n    > out = binomialTest( 21, 40, {\n    ...     'p': 0.4,\n    ...     'alternative': 'greater'\n    ... })\n    {\n        'pValue': ~0.074,\n        'statistic': 0.525\n        // ...\n    }\n\n","Buffer":"\nBuffer\n    Buffer constructor.\n\n\nBuffer( size )\n    Allocates a buffer having a specified number of bytes.\n\n    Parameters\n    ----------\n    size: integer\n        Number of bytes to allocate.\n\n    Returns\n    -------\n    out: Buffer\n        Buffer instance.\n\n    Examples\n    --------\n    > var b = new Buffer( 4 )\n    <Buffer>\n\n\nBuffer( buffer )\n    Copies buffer data to a new Buffer instance.\n\n    Parameters\n    ----------\n    buffer: Buffer\n        Buffer to copy from.\n\n    Returns\n    -------\n    out: Buffer\n        Buffer instance.\n\n    Examples\n    --------\n    > var b1 = new Buffer( [ 1, 2, 3, 4 ] );\n    > var b2 = new Buffer( b1 )\n    <Buffer>[ 1, 2, 3, 4 ]\n\n\nBuffer( array )\n    Allocates a buffer using an array of octets.\n\n    Parameters\n    ----------\n    array: Array\n        Array of octets.\n\n    Returns\n    -------\n    out: Buffer\n        Buffer instance.\n\n    Examples\n    --------\n    > var b = new Buffer( [ 1, 2, 3, 4 ] )\n    <Buffer>[ 1, 2, 3, 4 ]\n\n\nBuffer( str[, encoding] )\n    Allocates a buffer containing a provided string.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    encoding: string (optional)\n        Character encoding. Default: 'utf8'.\n\n    Returns\n    -------\n    out: Buffer\n        Buffer instance.\n\n    Examples\n    --------\n    > var b = new Buffer( 'beep boop' )\n    <Buffer>\n\n\nTODO: add methods and properties\n\n\n    See Also\n    --------\n    ArrayBuffer\n","buffer2json":"\nbuffer2json( buffer )\n    Returns a JSON representation of a buffer.\n\n    The returned JSON object has the following properties:\n\n    - type: value type\n    - data: buffer data as a generic array\n\n    Parameters\n    ----------\n    buffer: Buffer\n        Buffer to serialize.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var buf = new allocUnsafe( 2 );\n    > buf[ 0 ] = 1;\n    > buf[ 1 ] = 2;\n    > var json = buffer2json( buf )\n    { 'type': 'Buffer', 'data': [ 1, 2 ] }\n\n    See Also\n    --------\n    typedarray2json, reviveBuffer\n","capitalize":"\ncapitalize( str )\n    Capitalizes the first character in a `string`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Capitalized string.\n\n    Examples\n    --------\n    > var out = capitalize( 'beep' )\n    'Beep'\n    > out = capitalize( 'Boop' )\n    'Boop'\n\n    See Also\n    --------\n    uncapitalize, uppercase\n","capitalizeKeys":"\ncapitalizeKeys( obj )\n    Converts the first letter of each object key to uppercase.\n\n    The function only transforms own properties. Hence, the function does not\n    transform inherited properties.\n\n    The function shallow copies key values.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > var obj = { 'aa': 1, 'bb': 2 };\n    > var out = capitalizeKeys( obj )\n    { 'Aa': 1, 'Bb': 2 }\n\n    See Also\n    --------\n    uncapitalizeKeys, uppercaseKeys\n","CATALAN":"\nCATALAN\n    Catalan's constant.\n\n    Examples\n    --------\n    > CATALAN\n    0.915965594177219\n\n","CBRT_EPS":"\nCBRT_EPS\n    Cube root of double-precision floating-point epsilon.\n\n    Examples\n    --------\n    > CBRT_EPS\n    0.0000060554544523933395\n\n    See Also\n    --------\n    EPS, SQRT_EPS\n","chdir":"\nchdir( path )\n    Changes the current working directory.\n\n    If unable to set the current working directory (e.g., due to a non-existent\n    path), the function returns an error; otherwise, the function returns\n    `null`.\n\n    Parameters\n    ----------\n    path: string\n        Desired working directory.\n\n    Returns\n    -------\n    err: Error|null\n        Error object or null.\n\n    Examples\n    --------\n    > var err = chdir( '/path/to/current/working/directory' )\n\n    See Also\n    --------\n    cwd\n","chi2gof":"\nchi2gof( x, y[, ...args][, options] )\n    Performs a chi-square goodness-of-fit test.\n\n    A chi-square goodness-of-fit test is computed for the null hypothesis that\n    the values of `x` come from the discrete probability distribution specified\n    by `y`.\n\n    The second argument can be expected frequencies, population probabilities\n    summing to one, or a discrete probability distribution name to test against.\n\n    When providing a discrete probability distribution name, distribution\n    parameters *must* be supplied as additional arguments.\n\n    The function returns an object containing the test statistic, p-value, and\n    decision.\n\n    By default, the p-value is computed using a chi-square distribution with\n    `k-1` degrees of freedom, where `k` is the length of `x`.\n\n    If provided distribution arguments are estimated (e.g., via maximum\n    likelihood estimation), the degrees of freedom should be corrected. Set the\n    `ddof` option to use `k-1-n` degrees of freedom, where `n` is the degrees of\n    freedom adjustment.\n\n    The chi-square approximation may be incorrect if the observed or expected\n    frequencies in each category are too small. Common practice is to require\n    frequencies greater than five.\n\n    Instead of relying on chi-square approximation to calculate the p-value, one\n    can use Monte Carlo simulation. When the `simulate` option is `true`, the\n    simulation is performed by re-sampling from the discrete probability\n    distribution specified by `y`.\n\n    Parameters\n    ----------\n    x: Array<number>\n        Observation frequencies.\n\n    y: Array<number>|string\n        Expected frequencies (or probabilities) or a discrete probability\n        distribution name.\n\n    args: ...number (optional)\n        Distribution parameters. Distribution parameters will be passed to a\n        probability mass function (PMF) as arguments.\n\n    options: Object (optional)\n        Options.\n\n    options.alpha: number (optional)\n        Significance level of the hypothesis test. Must be on the interval\n        [0,1]. Default: 0.05.\n\n    options.ddof: number (optional)\n        Delta degrees of freedom adjustment. Default: 0.\n\n    options.simulate: boolean (optional)\n        Boolean indicating whether to calculate p-values by Monte Carlo\n        simulation. The simulation is performed by re-sampling from the discrete\n        distribution specified by `y`. Default: false.\n\n    options.iterations: number (optional)\n        Number of Monte Carlo iterations. Default: 500.\n\n    Returns\n    -------\n    out: Object\n        Test result object.\n\n    out.alpha: number\n        Significance level.\n\n    out.rejected: boolean\n        Test decision.\n\n    out.pValue: number\n        Test p-value.\n\n    out.statistic: number\n        Test statistic.\n\n    out.df: number\n        Degrees of freedom.\n\n    out.method: string\n        Test name.\n\n    out.print: Function\n        Function to print formatted output.\n\n    Examples\n    --------\n    // Provide expected probabilities...\n    > var x = [ 89, 37, 30, 28, 2 ];\n    > var p = [ 0.40, 0.20, 0.20, 0.15, 0.05 ];\n    > var out = chi2gof( x, p )\n    { 'pValue': ~0.0406, 'statistic': ~9.9901, ... }\n    > out.print()\n\n    // Set significance level...\n    > var opts = { 'alpha': 0.01 };\n    > out = chi2gof( x, p, opts );\n    > out.print()\n\n    // Calculate the test p-value via Monte Carlo simulation...\n    > x = [ 89, 37, 30, 28, 2 ];\n    > p = [ 0.40, 0.20, 0.20, 0.15, 0.05 ];\n    > opts = { 'simulate': true, 'iterations': 1000 };\n    > out = chi2gof( x, p, opts )\n    {...}\n\n    // Verify that data comes from Poisson distribution...\n    > var lambda = 3.0;\n    > var rpois = base.random.poisson.factory( lambda );\n    > var len = 400;\n    > x = [];\n    > for ( var i = 0; i < len; i++ ) { x.push( rpois() ); };\n\n    // Generate a frequency table...\n    > var freqs = new Int32Array( len );\n    > for ( i = 0; i < len; i++ ) { freqs[ x[ i ] ] += 1; };\n    > out = chi2gof( freqs, 'poisson', lambda )\n    {...}\n\n","circarray2iterator":"\ncircarray2iterator( src[, options][, mapFcn[, thisArg]] )\n    Returns an iterator which repeatedly iterates over the elements of an array-\n    like object.\n\n    When invoked, an input function is provided four arguments:\n\n    - value: iterated value\n    - index: iterated value index\n    - n: iteration count\n    - src: source array-like object\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    If an environment supports Symbol.iterator, the function explicitly does not\n    not invoke an array's `@@iterator` method, regardless of whether this method\n    is defined. To convert an array to an implementation defined iterator,\n    invoke this method directly.\n\n    Parameters\n    ----------\n    src: ArrayLikeObject\n        Array-like object from which to create the iterator.\n\n    options: Object (optional)\n        Function options.\n\n    options.iter: integer (optional)\n        Number of iterations. Default: 1e308.\n\n    options.dir: integer (optional)\n        Iteration direction. If set to `-1`, an iterator iterates over elements\n        from right-to-left. Default: 1.\n\n    mapFcn: Function (optional)\n        Function to invoke for each iterated value.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = circarray2iterator( [ 1, 2, 3, 4 ] );\n    > var v = it.next().value\n    1\n    > v = it.next().value\n    2\n\n    See Also\n    --------\n    array2iterator, stridedarray2iterator\n","circularArrayStream":"\ncircularArrayStream( src[, options] )\n    Creates a readable stream from an array-like object which repeatedly\n    iterates over the provided value's elements.\n\n    In object mode, `null` is a reserved value. If an array contains `null`\n    values (e.g., as a means to encode missing values), the stream will\n    prematurely end. Consider an alternative encoding or filter `null` values\n    prior to invocation.\n\n    In binary mode, if an array contains `undefined` values, the stream will\n    emit an error. Consider providing a custom serialization function or\n    filtering `undefined` values prior to invocation.\n\n    If a serialization function fails to return a string or Buffer, the stream\n    emits an error.\n\n    Parameters\n    ----------\n    src: ArrayLikeObject\n        Source value.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before pausing the stream.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.serialize: Function (optional)\n        Serialization function. The default behavior is to serialize streamed\n        values as JSON strings. This option is only applicable when a stream is\n        not in \"objectMode\".\n\n    options.iter: integer (optional)\n        Number of iterations. Default: 1e308.\n\n    options.dir: integer (optional)\n        Iteration direction. If set to `-1`, a stream iterates over elements\n        from right-to-left. Default: 1.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 15 };\n    > var s = circularArrayStream( [ 1, 2, 3 ], opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\ncircularArrayStream.factory( [options] )\n    Returns a function for creating readable streams from array-like objects\n    which repeatedly iterate over the elements of provided values.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before pausing streaming.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.serialize: Function (optional)\n        Serialization function. The default behavior is to serialize streamed\n        values as JSON strings. This option is only applicable when a stream is\n        not in \"objectMode\".\n\n    options.iter: integer (optional)\n        Number of iterations. Default: 1e308.\n\n    options.dir: integer (optional)\n        Iteration direction. If set to `-1`, a stream iterates over elements\n        from right-to-left. Default: 1.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = circularArrayStream.factory( opts );\n\n\ncircularArrayStream.objectMode( src[, options] )\n    Returns an \"objectMode\" readable stream from an array-like object which\n    repeatedly iterates over a provided value's elements.\n\n    In object mode, `null` is a reserved value. If an array contains `null`\n    values (e.g., as a means to encode missing values), the stream will\n    prematurely end. Consider an alternative encoding or filter `null` values\n    prior to invocation.\n\n    Parameters\n    ----------\n    src: ArrayLikeObject\n        Source value.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before pausing streaming.\n\n    options.iter: integer (optional)\n        Number of iterations. Default: 1e308.\n\n    options.dir: integer (optional)\n        Iteration direction. If set to `-1`, a stream iterates over elements\n        from right-to-left. Default: 1.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 15 };\n    > var s = circularArrayStream.objectMode( [ 1, 2, 3 ], opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    arrayStream, iteratorStream, stridedArrayStream\n","circularArrayStream.factory":"\ncircularArrayStream.factory( [options] )\n    Returns a function for creating readable streams from array-like objects\n    which repeatedly iterate over the elements of provided values.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before pausing streaming.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.serialize: Function (optional)\n        Serialization function. The default behavior is to serialize streamed\n        values as JSON strings. This option is only applicable when a stream is\n        not in \"objectMode\".\n\n    options.iter: integer (optional)\n        Number of iterations. Default: 1e308.\n\n    options.dir: integer (optional)\n        Iteration direction. If set to `-1`, a stream iterates over elements\n        from right-to-left. Default: 1.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = circularArrayStream.factory( opts );\n\n","circularArrayStream.objectMode":"\ncircularArrayStream.objectMode( src[, options] )\n    Returns an \"objectMode\" readable stream from an array-like object which\n    repeatedly iterates over a provided value's elements.\n\n    In object mode, `null` is a reserved value. If an array contains `null`\n    values (e.g., as a means to encode missing values), the stream will\n    prematurely end. Consider an alternative encoding or filter `null` values\n    prior to invocation.\n\n    Parameters\n    ----------\n    src: ArrayLikeObject\n        Source value.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before pausing streaming.\n\n    options.iter: integer (optional)\n        Number of iterations. Default: 1e308.\n\n    options.dir: integer (optional)\n        Iteration direction. If set to `-1`, a stream iterates over elements\n        from right-to-left. Default: 1.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 15 };\n    > var s = circularArrayStream.objectMode( [ 1, 2, 3 ], opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    arrayStream, iteratorStream, stridedArrayStream\n","CircularBuffer":"\nCircularBuffer( buffer )\n    Circular buffer constructor.\n\n    Parameters\n    ----------\n    buffer: integer|ArrayLike\n        Buffer size or an array-like object to use as the underlying buffer.\n\n    Returns\n    -------\n    buf: Object\n        Circular buffer data structure.\n\n    buf.clear: Function\n        Clears the buffer.\n\n    buf.count: integer\n        Number of elements currently in the buffer.\n\n    buf.full: boolean\n        Boolean indicating whether the buffer is full.\n\n    buf.iterator: Function\n        Returns an iterator for iterating over a buffer. If an environment\n        supports Symbol.iterator, the returned iterator is iterable. Note that a\n        returned iterator does **not** iterate over partially full buffers.\n\n    buf.length: integer\n        Buffer length (capacity).\n\n    buf.push: Function\n        Adds a value to the buffer. If the buffer is full, the method returns\n        the removed value; otherwise, the method returns `undefined`.\n\n    buf.toArray: Function\n        Returns an array of buffer values.\n\n    buf.toJSON: Function\n        Serializes a circular buffer as JSON.\n\n    Examples\n    --------\n    > var b = CircularBuffer( 3 );\n    > b.push( 'foo' );\n    > b.push( 'bar' );\n    > b.push( 'beep' );\n    > b.length\n    3\n    > b.count\n    3\n    > b.push( 'boop' )\n    'foo'\n\n    See Also\n    --------\n    FIFO, Stack\n","CMUDICT":"\nCMUDICT( [options] )\n    Returns datasets from the Carnegie Mellon Pronouncing Dictionary (CMUdict).\n\n    Data includes the following:\n\n    - dict: the main pronouncing dictionary\n    - phones: manners of articulation for each sound\n    - symbols: complete list of ARPABET symbols used by the dictionary\n    - vp: verbal pronunciations of punctuation marks\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.data: string (optional)\n        Dataset name.\n\n    Returns\n    -------\n    out: Object|Array\n        CMUdict dataset.\n\n    Examples\n    --------\n    > var data = CMUDICT();\n    > var dict = data.dict\n    {...}\n    > var phones = data.phones\n    {...}\n    > var symbols = data.symbols\n    [...]\n    > var vp = data.vp\n    {...}\n\n","complex":"\ncomplex( real, imag[, dtype] )\n    Creates a complex number.\n\n    The function supports the following data types:\n\n    - float64\n    - float32\n\n    Parameters\n    ----------\n    real: number\n        Real component.\n\n    imag: number\n        Imaginary component.\n\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    z: Complex\n        Complex number.\n\n    Examples\n    --------\n    > var z = complex( 5.0, 3.0, 'float64' )\n    <Complex128>\n    > z = complex( 5.0, 3.0, 'float32' )\n    <Complex64>\n\n    See Also\n    --------\n    Complex128, Complex64\n","Complex64":"\nComplex64( real, imag )\n    64-bit complex number constructor.\n\n    Both the real and imaginary components are stored as single-precision\n    floating-point numbers.\n\n    Parameters\n    ----------\n    real: number\n        Real component.\n\n    imag: number\n        Imaginary component.\n\n    Returns\n    -------\n    z: Complex64\n        64-bit complex number.\n\n    z.re: number\n        Read-only property returning the real component.\n\n    z.im: number\n        Read-only property returning the imaginary component.\n\n    z.BYTES_PER_ELEMENT\n        Size (in bytes) of each component. Value: 4.\n\n    z.byteLength\n        Length (in bytes) of a complex number. Value: 8.\n\n    Examples\n    --------\n    > var z = new Complex64( 5.0, 3.0 )\n    <Complex64>\n    > z.re\n    5.0\n    > z.im\n    3.0\n\n    See Also\n    --------\n    complex, Complex128\n","COMPLEX64_NUM_BYTES":"\nCOMPLEX64_NUM_BYTES\n    Size (in bytes) of a 64-bit complex number.\n\n    Examples\n    --------\n    > COMPLEX64_NUM_BYTES\n    8\n\n    See Also\n    --------\n    COMPLEX128_NUM_BYTES, FLOAT32_NUM_BYTES\n","Complex128":"\nComplex128( real, imag )\n    128-bit complex number constructor.\n\n    Both the real and imaginary components are stored as double-precision\n    floating-point numbers.\n\n    Parameters\n    ----------\n    real: number\n        Real component.\n\n    imag: number\n        Imaginary component.\n\n    Returns\n    -------\n    z: Complex128\n        128-bit complex number.\n\n    z.re: number\n        Read-only property returning the real component.\n\n    z.im: number\n        Read-only property returning the imaginary component.\n\n    z.BYTES_PER_ELEMENT\n        Size (in bytes) of each component. Value: 8.\n\n    z.byteLength\n        Length (in bytes) of a complex number. Value: 16.\n\n    Examples\n    --------\n    > var z = new Complex128( 5.0, 3.0 )\n    <Complex128>\n    > z.re\n    5.0\n    > z.im\n    3.0\n\n    See Also\n    --------\n    complex, Complex64\n","COMPLEX128_NUM_BYTES":"\nCOMPLEX128_NUM_BYTES\n    Size (in bytes) of a 128-bit complex number.\n\n    Examples\n    --------\n    > COMPLEX128_NUM_BYTES\n    16\n\n    See Also\n    --------\n    COMPLEX64_NUM_BYTES, FLOAT64_NUM_BYTES\n","compose":"\ncompose( ...f )\n    Function composition.\n\n    Returns a composite function. Starting from the right, the composite\n    function evaluates each function and passes the result as an argument\n    to the next function. The result of the leftmost function is the result\n    of the whole.\n\n    Notes:\n\n    - Only the rightmost function is explicitly permitted to accept multiple\n      arguments. All other functions are evaluated as unary functions.\n    - The function will throw if provided fewer than two input arguments.\n\n    Parameters\n    ----------\n    f: ...Function\n        Functions to compose.\n\n    Returns\n    -------\n    out: Function\n        Composite function.\n\n    Examples\n    --------\n    > function a( x ) {\n    ...    return 2 * x;\n    ... }\n    > function b( x ) {\n    ...    return x + 3;\n    ... }\n    > function c( x ) {\n    ...    return x / 5;\n    ... }\n    > var f = compose( c, b, a );\n    > var z = f( 6 )\n    3\n\n    See Also\n    --------\n    composeAsync\n","composeAsync":"\ncomposeAsync( ...f )\n    Function composition.\n\n    Returns a composite function. Starting from the right, the composite\n    function evaluates each function and passes the result as the first argument\n    of the next function. The result of the leftmost function is the result\n    of the whole.\n\n    The last argument for each provided function is a `next` callback which\n    should be invoked upon function completion. The callback accepts two\n    arguments:\n\n    - `error`: error argument\n    - `result`: function result\n\n    If a composed function calls the `next` callback with a truthy `error`\n    argument, the composite function suspends execution and immediately calls\n    the `done` callback for subsequent `error` handling.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Only the rightmost function is explicitly permitted to accept multiple\n    arguments. All other functions are evaluated as binary functions.\n\n    The function will throw if provided fewer than two input arguments.\n\n    Parameters\n    ----------\n    f: ...Function\n        Functions to compose.\n\n    Returns\n    -------\n    out: Function\n        Composite function.\n\n    Examples\n    --------\n    > function a( x, next ) {\n    ...    setTimeout( onTimeout, 0 );\n    ...    function onTimeout() {\n    ...        next( null, 2*x );\n    ...    }\n    ... };\n    > function b( x, next ) {\n    ...    setTimeout( onTimeout, 0 );\n    ...    function onTimeout() {\n    ...        next( null, x+3 );\n    ...    }\n    ... };\n    > function c( x, next ) {\n    ...    setTimeout( onTimeout, 0 );\n    ...    function onTimeout() {\n    ...        next( null, x/5 );\n    ...    }\n    ... };\n    > var f = composeAsync( c, b, a );\n    > function done( error, result ) {\n    ...    if ( error ) {\n    ...        throw error;\n    ...    }\n    ...    console.log( result );\n    ... };\n    > f( 6, done )\n    3\n\n    See Also\n    --------\n    compose\n","configdir":"\nconfigdir( [p] )\n    Returns a directory for user-specific configuration files.\n\n    On Windows platforms, the function first checks for a `LOCALAPPDATA`\n    environment variable before checking for an `APPDATA` environment variable.\n    This means that machine specific user configuration files have precedence\n    over roaming user configuration files.\n\n    On non-Windows platforms, if the function is unable to locate the current\n    user's `home` directory, the function returns `null`. Similarly, on Windows\n    platforms, if the function is unable to locate an application data\n    directory, the function also returns `null`.\n\n    Parameters\n    ----------\n    p: string (optional)\n        Path to append to a base directory.\n\n    Returns\n    -------\n    out: string|null\n        Directory.\n\n    Examples\n    --------\n    > var dir = configdir()\n    e.g., '/Users/<username>/Library/Preferences'\n    > dir = configdir( 'appname/config' )\n    e.g., '/Users/<username>/Library/Preferences/appname/config'\n\n    See Also\n    --------\n    homedir, tmpdir\n","conj":"\nconj( z )\n    Returns the complex conjugate of a complex number.\n\n    Parameters\n    ----------\n    z: Complex\n        Complex number.\n\n    Returns\n    -------\n    out: Complex\n        Complex conjugate.\n\n    Examples\n    --------\n    > var z = new Complex128( 5.0, 3.0 );\n    > z.toString()\n    '5 + 3i'\n    > var v = conj( z );\n    > v.toString()\n    '5 - 3i'\n\n    See Also\n    --------\n    imag, real, reim\n","constantFunction":"\nconstantFunction( val )\n    Creates a function which always returns the same value.\n\n    Notes:\n\n    - When provided an object reference, the returned `function` always returns\n      the same reference.\n\n    Parameters\n    ----------\n    val: any\n        Value to always return.\n\n    Returns\n    -------\n    out: Function\n        Constant function.\n\n    Examples\n    --------\n    > var fcn = constantFunction( 3.14 );\n    > var v = fcn()\n    3.14\n    > v = fcn()\n    3.14\n    > v = fcn()\n    3.14\n\n    See Also\n    --------\n    argumentFunction, identity\n","constantStream":"\nconstantStream( value[, options] )\n    Returns a readable stream which always streams the same value.\n\n    In object mode, `null` is a reserved value. If provided `null`, the\n    returned stream will prematurely end.\n\n    Parameters\n    ----------\n    value: string|Buffer|Uint8Array|any\n        Value to stream.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before pausing streaming.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = constantStream( 'beep', opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nconstantStream.factory( [value, ][options] )\n    Returns a function for creating readable streams which always stream the\n    same value.\n\n    If provided a value to stream, the returned function returns readable always\n    streams the provided value.\n\n    If not provided a value to stream, the returned function requires that a\n    value be provided at each invocation.\n\n    If provided only one argument and that argument is an object (either empty\n    or not containing any recognized options properties), the function treats\n    the argument as a value to be streamed, not as an options argument.\n\n    Parameters\n    ----------\n    value: string|Buffer|Uint8Array|any (optional)\n        Value to stream.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before pausing streaming.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = constantStream.factory( opts );\n\n\nconstantStream.objectMode( value[, options] )\n    Returns an \"objectMode\" readable stream which always streams the same value.\n\n    In object mode, `null` is a reserved value. If provided `null`, the\n    returned stream will prematurely end.\n\n    Parameters\n    ----------\n    value: any\n        Value to stream.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before pausing streaming.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = constantStream.objectMode( 3.14, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    arrayStream, iteratorStream\n","constantStream.factory":"\nconstantStream.factory( [value, ][options] )\n    Returns a function for creating readable streams which always stream the\n    same value.\n\n    If provided a value to stream, the returned function returns readable always\n    streams the provided value.\n\n    If not provided a value to stream, the returned function requires that a\n    value be provided at each invocation.\n\n    If provided only one argument and that argument is an object (either empty\n    or not containing any recognized options properties), the function treats\n    the argument as a value to be streamed, not as an options argument.\n\n    Parameters\n    ----------\n    value: string|Buffer|Uint8Array|any (optional)\n        Value to stream.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before pausing streaming.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = constantStream.factory( opts );\n\n","constantStream.objectMode":"\nconstantStream.objectMode( value[, options] )\n    Returns an \"objectMode\" readable stream which always streams the same value.\n\n    In object mode, `null` is a reserved value. If provided `null`, the\n    returned stream will prematurely end.\n\n    Parameters\n    ----------\n    value: any\n        Value to stream.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before pausing streaming.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = constantStream.objectMode( 3.14, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    arrayStream, iteratorStream\n","constructorName":"\nconstructorName( val )\n    Determines the name of a value's constructor.\n\n    Parameters\n    ----------\n    val: any\n        Input value.\n\n    Returns\n    -------\n    out: string\n        Name of a value's constructor.\n\n    Examples\n    --------\n    > var v = constructorName( 'a' )\n    'String'\n    > v = constructorName( {} )\n    'Object'\n    > v = constructorName( true )\n    'Boolean'\n\n    See Also\n    --------\n    functionName\n","contains":"\ncontains( val, searchValue[, position] )\n    Tests if an array-like value contains a search value.\n\n    When `val` is a string, the function checks whether the characters of the\n    search string are found in the input string. The search is case-sensitive.\n\n    When `val` is an array-like object, the function checks whether the input\n    array contains an element strictly equal to the specified search value.\n\n    For strings, this function is modeled after `String.prototype.includes`,\n    part of the ECMAScript 6 specification. This function is different from a\n    call to `String.prototype.includes.call` insofar as type-checking is\n    performed for all arguments.\n\n    The function does not distinguish between positive and negative zero.\n\n    If `position < 0`, the search is performed for the entire input array or\n    string.\n\n\n    Parameters\n    ----------\n    val: ArrayLike\n        Input value.\n\n    searchValue: any\n        Value to search for.\n\n    position: integer (optional)\n        Position at which to start searching for `searchValue`. Default: `0`.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an input value contains another value.\n\n    Examples\n    --------\n    > var bool = contains( 'Hello World', 'World' )\n    true\n    > bool = contains( 'Hello World', 'world' )\n    false\n    > bool = contains( [ 1, 2, 3, 4 ], 2 )\n    true\n    > bool = contains( [ NaN, 2, 3, 4 ], NaN )\n    true\n\n    // Supply a position:\n    > bool = contains( 'Hello World', 'Hello', 6 )\n    false\n    > bool = contains( [ true, NaN, false ], true, 1 )\n    false\n\n","convertArray":"\nconvertArray( arr, dtype )\n    Converts an input array to an array of a different data type.\n\n    The function supports the following data types:\n\n    - float32: single-precision floating-point numbers.\n    - float64: double-precision floating-point numbers.\n    - generic: values of any type.\n    - int16: signed 16-bit integers.\n    - int32: signed 32-bit integers.\n    - int8: signed 8-bit integers.\n    - uint16: unsigned 16-bit integers.\n    - uint32: unsigned 32-bit integers.\n    - uint8: unsigned 8-bit integers.\n    - uint8c: unsigned clamped 8-bit integers.\n\n    Parameters\n    ----------\n    arr: Array|TypedArray\n        Array to convert.\n\n    dtype: string\n        Output data type.\n\n    Returns\n    -------\n    out: Array|TypedArray\n        Output array.\n\n    Examples\n    --------\n    > var arr = [ 1.0, 2.0, 3.0, 4.0 ];\n    > var out = convertArray( arr, 'float32' )\n    <Float32Array>[ 1.0, 2.0, 3.0, 4.0 ]\n\n    See Also\n    --------\n    convertArraySame\n","convertArraySame":"\nconvertArraySame( x, y )\n    Converts an input array to the same data type as a second input array.\n\n    The function supports input arrays having the following data types:\n\n    - float32: single-precision floating-point numbers.\n    - float64: double-precision floating-point numbers.\n    - generic: values of any type.\n    - int16: signed 16-bit integers.\n    - int32: signed 32-bit integers.\n    - int8: signed 8-bit integers.\n    - uint16: unsigned 16-bit integers.\n    - uint32: unsigned 32-bit integers.\n    - uint8: unsigned 8-bit integers.\n    - uint8c: unsigned clamped 8-bit integers.\n\n    Parameters\n    ----------\n    x: Array|TypedArray\n        Array to convert.\n\n    y: Array|TypedArray\n        Array having desired output data type.\n\n    Returns\n    -------\n    out: Array|TypedArray\n        Output array.\n\n    Examples\n    --------\n    > var x = [ 1.0, 2.0, 3.0, 4.0 ];\n    > var y = new Float32Array( 0 );\n    > var out = convertArraySame( x, y )\n    <Float32Array>[ 1.0, 2.0, 3.0, 4.0 ]\n\n    See Also\n    --------\n    convertArray\n","convertPath":"\nconvertPath( from, to )\n    Converts between POSIX and Windows paths.\n\n    Parameters\n    ----------\n    from: string\n        Input path.\n\n    to: string\n        Output path convention: 'win32', 'mixed', or 'posix'.\n\n    Returns\n    -------\n    out: string\n        Converted path.\n\n    Examples\n    --------\n    > var out = convertPath( '/c/foo/bar/beep.c', 'win32' )\n    'c:\\\\foo\\\\bar\\\\beep.c'\n    > out = convertPath( '/c/foo/bar/beep.c', 'mixed' )\n    'c:/foo/bar/beep.c'\n    > out = convertPath( '/c/foo/bar/beep.c', 'posix' )\n    '/c/foo/bar/beep.c'\n    > out = convertPath( 'C:\\\\\\\\foo\\\\bar\\\\beep.c', 'win32' )\n    'C:\\\\\\\\foo\\\\bar\\\\beep.c'\n    > out = convertPath( 'C:\\\\\\\\foo\\\\bar\\\\beep.c', 'mixed' )\n    'C:/foo/bar/beep.c'\n    > out = convertPath( 'C:\\\\\\\\foo\\\\bar\\\\beep.c', 'posix' )\n    '/c/foo/bar/beep.c'\n\n","copy":"\ncopy( value[, level] )\n    Copy or deep clone a value to an arbitrary depth.\n\n    The implementation can handle circular references.\n\n    If a `Number`, `String`, or `Boolean` object is encountered, the value is\n    cloned as a primitive. This behavior is intentional.\n\n    For objects, the implementation only copies enumerable keys and their\n    associated property descriptors.\n\n    The implementation only checks whether basic `Objects`, `Arrays`, and class\n    instances are extensible, sealed, and/or frozen.\n\n    Functions are not cloned; their reference is copied.\n\n    The implementation supports custom error types which are `Error` instances\n    (e.g., ES2015 subclasses).\n\n    Support for copying class instances is inherently fragile. Any instances\n    with privileged access to variables (e.g., within closures) cannot be\n    cloned. This stated, basic copying of class instances is supported. Provided\n    an environment which supports ES5, the implementation is greedy and performs\n    a deep clone of any arbitrary class instance and its properties. The\n    implementation assumes that the concept of `level` applies only to the class\n    instance reference, but not to its internal state.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    level: integer (optional)\n         Copy depth. Default: Infinity.\n\n    Returns\n    -------\n    out: any\n        Value copy.\n\n    Examples\n    --------\n    > var value = [ { 'a': 1, 'b': true, 'c': [ 1, 2, 3 ] } ];\n    > var out = copy( value )\n    [ { 'a': 1, 'b': true, 'c': [ 1, 2, 3 ] } ]\n    > var bool = ( value[ 0 ].c === out[ 0 ].c )\n    false\n\n    // Set the `level` option to limit the copy depth:\n    > value = [ { 'a': 1, 'b': true, 'c': [ 1, 2, 3 ] } ];\n    > out = copy( value, 1 );\n    > bool = ( value[ 0 ] === out[ 0 ] )\n    true\n    > bool = ( value[ 0 ].c === out[ 0 ].c )\n    true\n\n\n    See Also\n    --------\n    merge\n","copyBuffer":"\ncopyBuffer( buffer )\n    Copies buffer data to a new Buffer instance.\n\n    Parameters\n    ----------\n    buffer: Buffer\n        Buffer to copy from.\n\n    Returns\n    -------\n    out: Buffer\n        Buffer instance.\n\n    Examples\n    --------\n    > var b1 = array2buffer( [ 1, 2, 3, 4 ] );\n    > var b2 = copyBuffer( b1 )\n    <Buffer>[ 1, 2, 3, 4 ]\n\n    See Also\n    --------\n    allocUnsafe, Buffer\n","countBy":"\ncountBy( collection, [options,] indicator )\n    Groups values according to an indicator function and returns group counts.\n\n    When invoked, the indicator function is provided two arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n\n    The value returned by an indicator function should be a value which can be\n    serialized as an object key.\n\n    If provided an empty collection, the function returns an empty object.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection to group. If provided an object, the object must be\n        array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Options.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    indicator: Function\n        Indicator function specifying which group an element in the input\n        collection belongs to.\n\n    Returns\n    -------\n    out: Object\n        Group results.\n\n    Examples\n    --------\n    > function indicator( v ) {\n    ...     if ( v[ 0 ] === 'b' ) {\n    ...         return 'b';\n    ...     }\n    ...     return 'other';\n    ... };\n    > var collection = [ 'beep', 'boop', 'foo', 'bar' ];\n    > var out = countBy( collection, indicator )\n    { 'b': 3, 'other': 1 }\n\n    See Also\n    --------\n    group, groupBy\n","countByAsync":"\ncountByAsync( collection, [options,] indicator, done )\n    Groups values according to an indicator function and returns group counts.\n\n    When invoked, the indicator function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    indicator function accepts two arguments, the indicator function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the indicator function accepts three arguments, the indicator function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other indicator function signature, the indicator function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `group`: value group\n\n    If an indicator function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    If provided an empty collection, the function calls the `done` callback with\n    an empty object as the second argument.\n\n    The `group` returned by an indicator function should be a value which can be\n    serialized as an object key.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    indicator: Function\n        Indicator function specifying which group an element in the input\n        collection belongs to.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) ? 'even': 'odd' );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > countByAsync( arr, indicator, done )\n    1000\n    2500\n    3000\n    { \"even\": 2, \"odd\": 1 }\n\n    // Limit number of concurrent invocations:\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) ? 'even' : 'odd' );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > countByAsync( arr, opts, indicator, done )\n    2500\n    3000\n    1000\n    { \"even\": 2, \"odd\": 1 }\n\n    // Process sequentially:\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) ? 'even' : 'odd' );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000 ];\n    > countByAsync( arr, opts, indicator, done )\n    3000\n    2500\n    1000\n    { \"even\": 2, \"odd\": 1 }\n\n\ncountByAsync.factory( [options,] indicator )\n    Returns a function which groups values according to an indicator function\n    and returns group counts.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    indicator: Function\n        Indicator function specifying which group an element in the input\n        collection belongs to.\n\n    Returns\n    -------\n    out: Function\n        A function which groups values and returns group counts.\n\n    Examples\n    --------\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) ? 'even' : 'odd' );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = countByAsync.factory( opts, indicator );\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    { \"even\": 2, \"odd\": 1 }\n    > arr = [ 2000, 1500, 1000, 500 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    500\n    { \"even\": 2, \"odd\": 2 }\n\n    See Also\n    --------\n    countBy, groupByAsync, tabulateByAsync\n","countByAsync.factory":"\ncountByAsync.factory( [options,] indicator )\n    Returns a function which groups values according to an indicator function\n    and returns group counts.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    indicator: Function\n        Indicator function specifying which group an element in the input\n        collection belongs to.\n\n    Returns\n    -------\n    out: Function\n        A function which groups values and returns group counts.\n\n    Examples\n    --------\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) ? 'even' : 'odd' );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = countByAsync.factory( opts, indicator );\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    { \"even\": 2, \"odd\": 1 }\n    > arr = [ 2000, 1500, 1000, 500 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    500\n    { \"even\": 2, \"odd\": 2 }\n\n    See Also\n    --------\n    countBy, groupByAsync, tabulateByAsync\n","curry":"\ncurry( fcn[, arity][, thisArg] )\n    Transforms a function into a sequence of functions each accepting a single\n    argument.\n\n    Until return value resolution, each invocation returns a new partially\n    applied curry function.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to curry.\n\n    arity: integer (optional)\n        Number of parameters. Default: `fcn.length`.\n\n    thisArg: any (optional)\n        Evaluation context.\n\n    Returns\n    -------\n    out: Function\n        Curry function.\n\n    Examples\n    --------\n    > function add( x, y ) { return x + y; };\n    > var f = curry( add );\n    > var sum = f( 2 )( 3 )\n    5\n\n    // Supply arity:\n    > function add() { return arguments[ 0 ] + arguments[ 1 ]; };\n    > f = curry( add, 2 );\n    > sum = f( 2 )( 3 )\n    5\n\n    // Provide function context:\n    > var obj = {\n    ...     'name': 'Ada',\n    ...     'greet': function greet( word1, word2 ) {\n    ...        return word1 + ' ' + word2 + ', ' + this.name + '!'\n    ...     }\n    ... };\n    > f = curry( obj.greet, obj );\n    > var str = f( 'Hello' )( 'there' )\n    'Hello there, Ada!'\n\n    See Also\n    --------\n    curryRight, uncurry, uncurryRight\n","curryRight":"\ncurryRight( fcn[, arity][, thisArg] )\n    Transforms a function into a sequence of functions each accepting a single\n    argument.\n\n    Until return value resolution, each invocation returns a new partially\n    applied curry function.\n\n    This function applies arguments starting from the right.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to curry.\n\n    arity: integer (optional)\n        Number of parameters. Default: `fcn.length`.\n\n    thisArg: any (optional)\n        Evaluation context.\n\n    Returns\n    -------\n    out: Function\n        Curry function.\n\n    Examples\n    --------\n    > function add( x, y ) { return x + y; };\n    > var f = curryRight( add );\n    > var sum = f( 2 )( 3 )\n    5\n\n    // Supply arity:\n    > function add() { return arguments[ 0 ] + arguments[ 1 ]; };\n    > f = curryRight( add, 2 );\n    > sum = f( 2 )( 3 )\n    5\n\n    // Provide function context:\n    > var obj = {\n    ...     'name': 'Ada',\n    ...     'greet': function greet( word1, word2 ) {\n    ...         return word1 + ' ' + word2 + ', ' + this.name + '!'\n    ...     }\n    ... };\n    > f = curryRight( obj.greet, obj );\n    > var str = f( 'there' )( 'Hello' )\n    'Hello there, Ada!'\n\n    See Also\n    --------\n    curry, uncurry, uncurryRight\n","cwd":"\ncwd()\n    Returns the current working directory.\n\n    Returns\n    -------\n    path: string\n        Current working directory of the process.\n\n    Examples\n    --------\n    > var dir = cwd()\n    '/path/to/current/working/directory'\n\n    See Also\n    --------\n    chdir\n","DALE_CHALL_NEW":"\nDALE_CHALL_NEW()\n    Returns a list of familiar English words.\n\n    Returns\n    -------\n    out: Array<string>\n        List of familiar English words.\n\n    Examples\n    --------\n    > var list = DALE_CHALL_NEW()\n    [ 'a', 'able', 'aboard', 'about', 'above', ... ]\n\n    References\n    ----------\n    - Chall, Jeanne Sternlicht, and Edgar Dale. 1995. *Readability revisited:\n    the new Dale-Chall readability formula*. Brookline Books.\n    <https://books.google.com/books?id=2nbuAAAAMAAJ>.\n\n","datasets":"\ndatasets( name[, options] )\n    Returns a dataset.\n\n    The function forwards provided options to the dataset interface specified\n    by `name`.\n\n    Parameters\n    ----------\n    name: string\n        Dataset name.\n\n    options: Object (optional)\n        Function options.\n\n    Returns\n    -------\n    out: any\n        Dataset.\n\n    Examples\n    --------\n    > var out = datasets( 'MONTH_NAMES_EN' )\n    [ 'January', 'February', ... ]\n    > var opts = { 'data': 'cities' };\n    > out = datasets( 'MINARD_NAPOLEONS_MARCH', opts )\n    [ {...}, {...}, ... ]\n\n","dayOfQuarter":"\ndayOfQuarter( [month[, day, year]] )\n    Returns the day of the quarter.\n\n    By default, the function returns the day of the quarter for the current date\n    (according to local time). To determine the day of the quarter for a\n    particular day, provide `month`, `day`, and `year` arguments.\n\n    A `month` may be either a month's integer value, three letter abbreviation,\n    or full name (case insensitive).\n\n    The function also accepts a `Date` object.\n\n    Parameters\n    ----------\n    month: string|integer|Date (optional)\n        Month (or `Date`).\n\n    day: integer (optional)\n        Day.\n\n    year: integer (optional)\n        Year.\n\n    Returns\n    -------\n    out: integer\n        Day of the quarter.\n\n    Examples\n    --------\n    > var day = dayOfQuarter()\n    <number>\n    > day = dayOfQuarter( new Date() )\n    <number>\n    > day = dayOfQuarter( 12, 31, 2017 )\n    92\n\n    // Other ways to supply month:\n    > day = dayOfQuarter( 'dec', 31, 2017 )\n    92\n    > day = dayOfQuarter( 'december', 31, 2017 )\n    92\n\n    See Also\n    --------\n    dayOfYear\n","dayOfYear":"\ndayOfYear( [month[, day, year]] )\n    Returns the day of the year.\n\n    By default, the function returns the day of the year for the current date\n    (according to local time). To determine the day of the year for a particular\n    day, provide `month`, `day`, and `year` arguments.\n\n    A `month` may be either a month's integer value, three letter abbreviation,\n    or full name (case insensitive).\n\n    The function also accepts a `Date` object.\n\n    Parameters\n    ----------\n    month: string|integer|Date (optional)\n        Month (or `Date`).\n\n    day: integer (optional)\n        Day.\n\n    year: integer (optional)\n        Year.\n\n    Returns\n    -------\n    out: integer\n        Day of the year.\n\n    Examples\n    --------\n    > var day = dayOfYear()\n    <number>\n    > day = dayOfYear( new Date() )\n    <number>\n    > day = dayOfYear( 12, 31, 2016 )\n    366\n\n    // Other ways to supply month:\n    > day = dayOfYear( 'dec', 31, 2016 )\n    366\n    > day = dayOfYear( 'december', 31, 2016 )\n    366\n\n    See Also\n    --------\n    dayOfQuarter\n","daysInMonth":"\ndaysInMonth( [month[, year]] )\n    Returns the number of days in a month.\n\n    By default, the function returns the number of days in the current month\n    of the current year (according to local time). To determine the number of\n    days for a particular month and year, provide `month` and `year` arguments.\n\n    A `month` may be either a month's integer value, three letter abbreviation,\n    or full name (case insensitive).\n\n    The function's return value is a generalization and does **not** take into\n    account inaccuracies due to daylight savings conventions, crossing\n    timezones, or other complications with time and dates.\n\n    Parameters\n    ----------\n    month: string|integer|Date (optional)\n        Month (or `Date`).\n\n    year: integer (optional)\n        Year.\n\n    Returns\n    -------\n    out: integer\n        Days in a month.\n\n    Examples\n    --------\n    > var num = daysInMonth()\n    <number>\n    > num = daysInMonth( 2 )\n    <number>\n    > num = daysInMonth( 2, 2016 )\n    29\n    > num = daysInMonth( 2, 2017 )\n    28\n\n    // Other ways to supply month:\n    > num = daysInMonth( 'feb', 2016 )\n    29\n    > num = daysInMonth( 'february', 2016 )\n    29\n\n    See Also\n    --------\n    daysInYear\n","daysInYear":"\ndaysInYear( [value] )\n    Returns the number of days in a year according to the Gregorian calendar.\n\n    By default, the function returns the number of days in the current year\n    (according to local time). To determine the number of days for a particular\n    year, provide either a year or a `Date` object.\n\n    The function's return value is a generalization and does **not** take into\n    account inaccuracies due to daylight savings conventions, crossing\n    timezones, or other complications with time and dates.\n\n    Parameters\n    ----------\n    value: integer|Date (optional)\n        Year or `Date` object.\n\n    Returns\n    -------\n    out: integer\n        Number of days in a year.\n\n    Examples\n    --------\n    > var num = daysInYear()\n    <number>\n    > num = daysInYear( 2016 )\n    366\n    > num = daysInYear( 2017 )\n    365\n\n    See Also\n    --------\n    daysInMonth\n","debugSinkStream":"\ndebugSinkStream( [options,] [clbk] )\n    Returns a writable stream for debugging stream pipelines.\n\n    If the `DEBUG` environment variable is not set, no data is logged.\n\n    Providing a `name` option is *strongly* encouraged, as the `DEBUG`\n    environment variable can be used to filter debuggers.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.name: string (optional)\n        Debug namespace.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.decodeStrings: boolean (optional)\n        Specifies whether to encode strings as `Buffer` objects before writing\n        data to a returned stream. Default: true.\n\n    options.defaultEncoding: string (optional)\n        Default encoding when not explicitly specified when writing data.\n        Default: 'utf8'.\n\n    clbk: Function (optional)\n        Callback to invoke upon receiving data.\n\n    Returns\n    -------\n    stream: WritableStream\n        Writable stream.\n\n    Examples\n    --------\n    > var s = debugSinkStream( { 'name': 'foo' } );\n    > s.write( 'a' );\n    > s.write( 'b' );\n    > s.write( 'c' );\n    > s.end();\n\n\ndebugSinkStream.factory( [options] )\n    Returns a function for creating writable streams for debugging stream\n    pipelines.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.decodeStrings: boolean (optional)\n        Specifies whether to encode strings as `Buffer` objects before writing\n        data to a returned stream. Default: true.\n\n    options.defaultEncoding: string (optional)\n        Default encoding when not explicitly specified when writing data.\n        Default: 'utf8'.\n\n    Returns\n    -------\n    createStream( name[, clbk] ): Function\n        Function for creating writable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = debugSinkStream.factory( opts );\n\n\ndebugSinkStream.objectMode( [options,] [clbk] )\n    Returns an \"objectMode\" writable stream for debugging stream pipelines.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.name: string (optional)\n        Debug namespace.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.decodeStrings: boolean (optional)\n        Specifies whether to encode strings as `Buffer` objects before writing\n        data to a returned stream. Default: true.\n\n    options.defaultEncoding: string (optional)\n        Default encoding when not explicitly specified when writing data.\n        Default: 'utf8'.\n\n    clbk: Function (optional)\n        Callback to invoke upon receiving data.\n\n    Returns\n    -------\n    stream: WritableStream\n        Writable stream operating in \"objectMode\".\n\n    Examples\n    --------\n    > var s = debugSinkStream.objectMode( { 'name': 'foo' } );\n    > s.write( { 'value': 'a' } );\n    > s.write( { 'value': 'b' } );\n    > s.write( { 'value': 'c' } );\n    > s.end();\n\n    See Also\n    --------\n    debugStream, inspectSinkStream\n","debugSinkStream.factory":"\ndebugSinkStream.factory( [options] )\n    Returns a function for creating writable streams for debugging stream\n    pipelines.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.decodeStrings: boolean (optional)\n        Specifies whether to encode strings as `Buffer` objects before writing\n        data to a returned stream. Default: true.\n\n    options.defaultEncoding: string (optional)\n        Default encoding when not explicitly specified when writing data.\n        Default: 'utf8'.\n\n    Returns\n    -------\n    createStream( name[, clbk] ): Function\n        Function for creating writable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = debugSinkStream.factory( opts );\n\n","debugSinkStream.objectMode":"\ndebugSinkStream.objectMode( [options,] [clbk] )\n    Returns an \"objectMode\" writable stream for debugging stream pipelines.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.name: string (optional)\n        Debug namespace.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.decodeStrings: boolean (optional)\n        Specifies whether to encode strings as `Buffer` objects before writing\n        data to a returned stream. Default: true.\n\n    options.defaultEncoding: string (optional)\n        Default encoding when not explicitly specified when writing data.\n        Default: 'utf8'.\n\n    clbk: Function (optional)\n        Callback to invoke upon receiving data.\n\n    Returns\n    -------\n    stream: WritableStream\n        Writable stream operating in \"objectMode\".\n\n    Examples\n    --------\n    > var s = debugSinkStream.objectMode( { 'name': 'foo' } );\n    > s.write( { 'value': 'a' } );\n    > s.write( { 'value': 'b' } );\n    > s.write( { 'value': 'c' } );\n    > s.end();\n\n    See Also\n    --------\n    debugStream, inspectSinkStream\n","debugStream":"\ndebugStream( [options,] [clbk] )\n    Returns a transform stream for debugging stream pipelines.\n\n    If the `DEBUG` environment variable is not set, no data is logged.\n\n    Providing a `name` option is *strongly* encouraged, as the `DEBUG`\n    environment variable can be used to filter debuggers.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.name: string (optional)\n        Debug namespace.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.allowHalfOpen: boolean (optional)\n        Specifies whether a stream should remain open even if one side ends.\n        Default: false.\n\n    options.readableObjectMode: boolean (optional)\n        Specifies whether the readable side should be in \"objectMode\". Default:\n        false.\n\n    clbk: Function (optional)\n        Callback to invoke upon receiving data.\n\n    Returns\n    -------\n    stream: TransformStream\n        Transform stream.\n\n    Examples\n    --------\n    > var s = debugStream( { 'name': 'foo' } );\n    > s.write( 'a' );\n    > s.write( 'b' );\n    > s.write( 'c' );\n    > s.end();\n\n\ndebugStream.factory( [options] )\n    Returns a function for creating transform streams for debugging stream\n    pipelines.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.allowHalfOpen: boolean (optional)\n        Specifies whether a stream should remain open even if one side ends.\n        Default: false.\n\n    options.readableObjectMode: boolean (optional)\n        Specifies whether the readable side should be in \"objectMode\". Default:\n        false.\n\n    Returns\n    -------\n    createStream( name[, clbk] ): Function\n        Function for creating transform streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = debugStream.factory( opts );\n\n\ndebugStream.objectMode( [options,] [clbk] )\n    Returns an \"objectMode\" transform stream for debugging stream pipelines.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.name: string (optional)\n        Debug namespace.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.allowHalfOpen: boolean (optional)\n        Specifies whether a stream should remain open even if one side ends.\n        Default: false.\n\n    options.readableObjectMode: boolean (optional)\n        Specifies whether the readable side should be in \"objectMode\". Default:\n        false.\n\n    clbk: Function (optional)\n        Callback to invoke upon receiving data.\n\n    Returns\n    -------\n    stream: TransformStream\n        Transform stream operating in \"objectMode\".\n\n    Examples\n    --------\n    > var s = debugStream.objectMode( { 'name': 'foo' } );\n    > s.write( { 'value': 'a' } );\n    > s.write( { 'value': 'b' } );\n    > s.write( { 'value': 'c' } );\n    > s.end();\n\n    See Also\n    --------\n    debugSinkStream, inspectStream\n","debugStream.factory":"\ndebugStream.factory( [options] )\n    Returns a function for creating transform streams for debugging stream\n    pipelines.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.allowHalfOpen: boolean (optional)\n        Specifies whether a stream should remain open even if one side ends.\n        Default: false.\n\n    options.readableObjectMode: boolean (optional)\n        Specifies whether the readable side should be in \"objectMode\". Default:\n        false.\n\n    Returns\n    -------\n    createStream( name[, clbk] ): Function\n        Function for creating transform streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = debugStream.factory( opts );\n\n","debugStream.objectMode":"\ndebugStream.objectMode( [options,] [clbk] )\n    Returns an \"objectMode\" transform stream for debugging stream pipelines.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.name: string (optional)\n        Debug namespace.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.allowHalfOpen: boolean (optional)\n        Specifies whether a stream should remain open even if one side ends.\n        Default: false.\n\n    options.readableObjectMode: boolean (optional)\n        Specifies whether the readable side should be in \"objectMode\". Default:\n        false.\n\n    clbk: Function (optional)\n        Callback to invoke upon receiving data.\n\n    Returns\n    -------\n    stream: TransformStream\n        Transform stream operating in \"objectMode\".\n\n    Examples\n    --------\n    > var s = debugStream.objectMode( { 'name': 'foo' } );\n    > s.write( { 'value': 'a' } );\n    > s.write( { 'value': 'b' } );\n    > s.write( { 'value': 'c' } );\n    > s.end();\n\n    See Also\n    --------\n    debugSinkStream, inspectStream\n","deepEqual":"\ndeepEqual( a, b )\n    Tests for deep equality between two values.\n\n    Parameters\n    ----------\n    a: any\n        First comparison value.\n\n    b: any\n        Second comparison value.\n\n    Returns\n    -------\n    out: bool\n        Boolean indicating if `a` is deep equal to `b`.\n\n    Examples\n    --------\n    > var bool = deepEqual( [ 1, 2, 3 ], [ 1, 2, 3 ] )\n    true\n\n    > bool = deepEqual( [ 1, 2, 3 ], [ 1, 2, '3' ] )\n    false\n\n    > bool = deepEqual( { 'a': 2 }, { 'a': [ 2 ] } )\n    false\n\n    See Also\n    --------\n    isStrictEqual, isSameValue\n","deepGet":"\ndeepGet( obj, path[, options] )\n    Returns a nested property value.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    path: string|Array\n        Key path.\n\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    out: any\n        Nested property value.\n\n    Examples\n    --------\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var val = deepGet( obj, 'a.b.c' )\n    'd'\n\n    // Specify a custom separator via the `sep` option:\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var val = deepGet( obj, 'a/b/c', { 'sep': '/' } )\n    'd'\n\ndeepGet.factory( path[, options] )\n    Creates a reusable deep get function.\n\n    Parameters\n    ----------\n    path: string|Array\n        Key path.\n\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    out: Function\n        Deep get factory.\n\n    Examples\n    --------\n    > var dget = deepGet.factory( 'a/b/c', { 'sep': '/' } );\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var val = dget( obj )\n    'd'\n\n    See Also\n    --------\n    deepPluck, deepSet\n","deepGet.factory":"\ndeepGet.factory( path[, options] )\n    Creates a reusable deep get function.\n\n    Parameters\n    ----------\n    path: string|Array\n        Key path.\n\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    out: Function\n        Deep get factory.\n\n    Examples\n    --------\n    > var dget = deepGet.factory( 'a/b/c', { 'sep': '/' } );\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var val = dget( obj )\n    'd'\n\n    See Also\n    --------\n    deepPluck, deepSet\n","deepHasOwnProp":"\ndeepHasOwnProp( value, path[, options] )\n    Returns a boolean indicating whether an object contains a nested key path.\n\n    The function tests for \"own\" properties and will return `false` for\n    inherited properties.\n\n    Value arguments other than `null` or `undefined` are coerced to objects.\n\n    Key path array elements are coerced to strings.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    path: string|Array\n        Key path.\n\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object has a specified path.\n\n    Examples\n    --------\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var bool = deepHasOwnProp( obj, 'a.b.c' )\n    true\n\n    // Specify a custom separator via the `sep` option:\n    > obj = { 'a': { 'b': { 'c': 'd' } } };\n    > bool = deepHasOwnProp( obj, 'a/b/c', { 'sep': '/' } )\n    true\n\ndeepHasOwnProp.factory( path[, options] )\n    Returns a function which tests whether an object contains a nested key path.\n\n    The returned function tests for \"own\" properties and will return `false` for\n    inherited properties.\n\n    Parameters\n    ----------\n    path: string|Array\n        Key path.\n\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    out: Function\n        Function which tests whether an object contains a nested key path.\n\n    Examples\n    --------\n    > var has = deepHasOwnProp.factory( 'a/b/c', { 'sep': '/' } );\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var bool = has( obj )\n    true\n\n    See Also\n    --------\n    deepHasProp, hasOwnProp, deepGet, deepPluck, deepSet\n","deepHasOwnProp.factory":"\ndeepHasOwnProp.factory( path[, options] )\n    Returns a function which tests whether an object contains a nested key path.\n\n    The returned function tests for \"own\" properties and will return `false` for\n    inherited properties.\n\n    Parameters\n    ----------\n    path: string|Array\n        Key path.\n\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    out: Function\n        Function which tests whether an object contains a nested key path.\n\n    Examples\n    --------\n    > var has = deepHasOwnProp.factory( 'a/b/c', { 'sep': '/' } );\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var bool = has( obj )\n    true\n\n    See Also\n    --------\n    deepHasProp, hasOwnProp, deepGet, deepPluck, deepSet\n","deepHasProp":"\ndeepHasProp( value, path[, options] )\n    Returns a boolean indicating whether an object contains a nested key path,\n    either own or inherited.\n\n    Value arguments other than `null` or `undefined` are coerced to objects.\n\n    Key path array elements are coerced to strings.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    path: string|Array\n        Key path.\n\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object has a specified path.\n\n    Examples\n    --------\n    > function Foo() { return this; };\n    > Foo.prototype.b = { 'c': 'd' };\n    > var obj = { 'a': new Foo() };\n    > var bool = deepHasProp( obj, 'a.b.c' )\n    true\n\n    // Specify a custom separator via the `sep` option:\n    > bool = deepHasProp( obj, 'a/b/c', { 'sep': '/' } )\n    true\n\ndeepHasProp.factory( path[, options] )\n    Returns a function which tests whether an object contains a nested key path,\n    either own or inherited.\n\n    Parameters\n    ----------\n    path: string|Array\n        Key path.\n\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    out: Function\n        Function which tests whether an object contains a nested key path.\n\n    Examples\n    --------\n    > function Foo() { return this; };\n    > Foo.prototype.b = { 'c': 'd' };\n    > var has = deepHasProp.factory( 'a/b/c', { 'sep': '/' } );\n    > var obj = { 'a': new Foo() };\n    > var bool = has( obj )\n    true\n\n    See Also\n    --------\n    deepHasOwnProp, hasOwnProp, deepGet, deepPluck, deepSet\n","deepHasProp.factory":"\ndeepHasProp.factory( path[, options] )\n    Returns a function which tests whether an object contains a nested key path,\n    either own or inherited.\n\n    Parameters\n    ----------\n    path: string|Array\n        Key path.\n\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    out: Function\n        Function which tests whether an object contains a nested key path.\n\n    Examples\n    --------\n    > function Foo() { return this; };\n    > Foo.prototype.b = { 'c': 'd' };\n    > var has = deepHasProp.factory( 'a/b/c', { 'sep': '/' } );\n    > var obj = { 'a': new Foo() };\n    > var bool = has( obj )\n    true\n\n    See Also\n    --------\n    deepHasOwnProp, hasOwnProp, deepGet, deepPluck, deepSet\n","deepPluck":"\ndeepPluck( arr, path[, options] )\n    Extracts a nested property value from each element of an object array.\n\n    If a key path does not exist, the function sets the plucked value as\n    `undefined`.\n\n    Extracted values are not cloned.\n\n    Parameters\n    ----------\n    arr: Array\n        Source array.\n\n    path: string|Array\n        Key path.\n\n    options: Object (optional)\n        Options.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to return a new data structure. Default:\n        true.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    out: Array\n        Destination array.\n\n    Examples\n    --------\n    > var arr = [\n    ...     { 'a': { 'b': { 'c': 1 } } },\n    ...     { 'a': { 'b': { 'c': 2 } } }\n    ... ];\n    > var out = deepPluck( arr, 'a.b.c' )\n    [ 1, 2 ]\n    > arr = [\n    ...     { 'a': [ 0, 1, 2 ] },\n    ...     { 'a': [ 3, 4, 5 ] }\n    ... ];\n    > out = deepPluck( arr, [ 'a', 1 ] )\n    [ 1, 4 ]\n\n    See Also\n    --------\n    deepGet, deepSet\n","deepSet":"\ndeepSet( obj, path, value[, options] )\n    Sets a nested property value.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    path: string|Array\n        Key path.\n\n    value: any\n        Value to set.\n\n    options: Object (optional)\n        Options.\n\n    options.create: boolean (optional)\n        Boolean indicating whether to create a path if the key path does not\n        already exist. Default: false.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if the property was successfully set.\n\n    Examples\n    --------\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var bool = deepSet( obj, 'a.b.c', 'beep' )\n    true\n\n    // Specify an alternative separator via the sep option:\n    > obj = { 'a': { 'b': { 'c': 'd' } } };\n    > bool = deepSet( obj, 'a/b/c', 'beep', { 'sep': '/' } );\n    > obj\n    { 'a': { 'b': { 'c': 'beep' } } }\n\n    // To create a key path which does not exist, set the create option to true:\n    > bool = deepSet( obj, 'a.e.c', 'boop', { 'create': true } );\n    > obj\n    { 'a': { 'b': { 'c': 'beep' }, 'e': { 'c': 'boop' } } }\n\n\ndeepSet.factory( path[, options] )\n    Creates a reusable deep set function.\n\n    Parameters\n    ----------\n    path: string|Array\n        Key path.\n\n    options: Object (optional)\n        Options.\n\n    options.create: boolean (optional)\n        Boolean indicating whether to create a path if the key path does not\n        already exist. Default: false.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    out: Function\n        Deep get function.\n\n    Examples\n    --------\n    > var dset = deepSet.factory( 'a/b/c', {\n    ...     'create': true,\n    ...     'sep': '/'\n    ... });\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var bool = dset( obj, 'beep' )\n    true\n    > obj\n    { 'a': { 'b': { 'c': 'beep' } } }\n\n    See Also\n    --------\n    deepGet, deepPluck\n","deepSet.factory":"\ndeepSet.factory( path[, options] )\n    Creates a reusable deep set function.\n\n    Parameters\n    ----------\n    path: string|Array\n        Key path.\n\n    options: Object (optional)\n        Options.\n\n    options.create: boolean (optional)\n        Boolean indicating whether to create a path if the key path does not\n        already exist. Default: false.\n\n    options.sep: string (optional)\n        Key path separator. Default: '.'.\n\n    Returns\n    -------\n    out: Function\n        Deep get function.\n\n    Examples\n    --------\n    > var dset = deepSet.factory( 'a/b/c', {\n    ...     'create': true,\n    ...     'sep': '/'\n    ... });\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var bool = dset( obj, 'beep' )\n    true\n    > obj\n    { 'a': { 'b': { 'c': 'beep' } } }\n\n    See Also\n    --------\n    deepGet, deepPluck\n","defineMemoizedProperty":"\ndefineMemoizedProperty( obj, prop, descriptor )\n    Defines a memoized object property.\n\n    Parameters\n    ----------\n    obj: Object\n        Object on which to define the property.\n\n    prop: string|symbol\n        Property name.\n\n    descriptor: Object\n        Property descriptor.\n\n    descriptor.configurable: boolean (optional)\n        Boolean indicating if property descriptor can be changed and if the\n        property can be deleted from the provided object. Default: false.\n\n    descriptor.enumerable: boolean (optional)\n        Boolean indicating if the property shows up when enumerating object\n        properties. Default: false.\n\n    descriptor.writable: boolean (optional)\n        Boolean indicating if the value associated with the property can be\n        changed with an assignment operator. Default: false.\n\n    descriptor.value: Function\n        Synchronous function whose return value will be memoized and set as the\n        property value.\n\n    Examples\n    --------\n    > var obj = {};\n    > function foo() {\n    ...     return 'bar';\n    ... };\n    > defineMemoizedProperty( obj, 'foo', {\n    ...     'configurable': false,\n    ...     'enumerable': true,\n    ...     'writable': false,\n    ...     'value': foo\n    ... });\n    > obj.foo\n    'bar'\n\n    See Also\n    --------\n    setMemoizedReadOnly, defineProperty\n","defineProperties":"\ndefineProperties( obj, properties )\n    Defines (and/or modifies) object properties.\n\n    The second argument is an object whose own enumerable property values are\n    descriptors for the properties to be defined or modified.\n\n    Property descriptors come in two flavors: data descriptors and accessor\n    descriptors. A data descriptor is a property that has a value, which may or\n    may not be writable. An accessor descriptor is a property described by a\n    getter-setter function pair. A descriptor must be one of these two flavors\n    and cannot be both.\n\n    A property descriptor has the following optional properties:\n\n    - configurable: boolean indicating if property descriptor can be changed and\n    if the property can be deleted from the provided object. Default: false.\n\n    - enumerable: boolean indicating if the property shows up when enumerating\n    object properties. Default: false.\n\n    - writable: boolean indicating if the value associated with the property can\n    be changed with an assignment operator. Default: false.\n\n    - value: property value.\n\n    - get: function which serves as a getter for the property, or, if no getter,\n    undefined. When the property is accessed, a getter function is called\n    without arguments and with the `this` context set to the object through\n    which the property is accessed (which may not be the object on which the\n    property is defined due to inheritance). The return value will be used as\n    the property value. Default: undefined.\n\n    - set: function which serves as a setter for the property, or, if no setter,\n    undefined. When assigning a property value, a setter function is called with\n    one argument (the value being assigned to the property) and with the `this`\n    context set to the object through which the property is assigned. Default: undefined.\n\n    Parameters\n    ----------\n    obj: Object\n        Object on which to define the properties.\n\n    properties: Object\n        Object with property descriptors.\n\n    Returns\n    -------\n    obj: Object\n        Object on which properties were defined (and/or modified).\n\n    Examples\n    --------\n    > var obj = {};\n    > defineProperties( obj, {\n    ...     'foo': {\n    ...         'value': 'bar',\n    ...         'writable': false,\n    ...         'configurable': false,\n    ...         'enumerable': true\n    ...     },\n    ...     'baz': {\n    ...         'value': 13\n    ...     }\n    ... });\n    > obj.foo\n    'bar'\n    > obj.baz\n    13\n\n    See Also\n    --------\n    defineProperty, setReadOnly\n","defineProperty":"\ndefineProperty( obj, prop, descriptor )\n    Defines (or modifies) an object property.\n\n    Property descriptors come in two flavors: data descriptors and accessor\n    descriptors. A data descriptor is a property that has a value, which may or\n    may not be writable. An accessor descriptor is a property described by a\n    getter-setter function pair. A descriptor must be one of these two flavors\n    and cannot be both.\n\n    Parameters\n    ----------\n    obj: Object\n        Object on which to define the property.\n\n    prop: string|symbol\n        Property name.\n\n    descriptor: Object\n        Property descriptor.\n\n    descriptor.configurable: boolean (optional)\n        Boolean indicating if property descriptor can be changed and if the\n        property can be deleted from the provided object. Default: false.\n\n    descriptor.enumerable: boolean (optional)\n        Boolean indicating if the property shows up when enumerating object\n        properties. Default: false.\n\n    descriptor.writable: boolean (optional)\n        Boolean indicating if the value associated with the property can be\n        changed with an assignment operator. Default: false.\n\n    descriptor.value: any (optional)\n        Property value.\n\n    descriptor.get: Function|void (optional)\n        Function which serves as a getter for the property, or, if no getter,\n        undefined. When the property is accessed, a getter function is called\n        without arguments and with the `this` context set to the object through\n        which the property is accessed (which may not be the object on which the\n        property is defined due to inheritance). The return value will be used\n        as the property value. Default: undefined.\n\n    descriptor.set: Function|void (optional)\n        Function which serves as a setter for the property, or, if no setter,\n        undefined. When assigning a property value, a setter function is called\n        with one argument (the value being assigned to the property) and with\n        the `this` context set to the object through which the property is\n        assigned. Default: undefined.\n\n    Returns\n    -------\n    obj: Object\n        Object on which the property was defined (or modified).\n\n    Examples\n    --------\n    > var obj = {};\n    > defineProperty( obj, 'foo', {\n    ...     'value': 'bar',\n    ...     'enumerable': true,\n    ...     'writable': false\n    ... });\n    > obj.foo = 'boop';\n    > obj\n    { 'foo': 'bar' }\n\n    See Also\n    --------\n    defineProperties, setReadOnly\n","dirname":"\ndirname( path )\n    Returns a directory name.\n\n    Parameters\n    ----------\n    path: string\n        Path.\n\n    Returns\n    -------\n    out: string\n        Directory name.\n\n    Examples\n    --------\n    > var dir = dirname( './foo/bar/index.js' )\n    './foo/bar'\n\n    See Also\n    --------\n    extname\n","DoublyLinkedList":"\nDoublyLinkedList()\n    Doubly linked list constructor.\n\n    Returns\n    -------\n    list: Object\n        Doubly linked list.\n\n    list.clear: Function\n        Clears the list.\n\n    list.first: Function\n        Returns the first list node. If the list is empty, the returned value is\n        `undefined`.\n\n    list.insert: Function\n        Inserts a value after a provided list node. For its third argument, the\n        method accepts a location: 'before' or 'after'. Default: 'after'.\n\n    list.iterator: Function\n        Returns an iterator for iterating over a list. If an environment\n        supports Symbol.iterator, the returned iterator is iterable. Note that,\n        in order to prevent confusion arising from list mutation during\n        iteration, a returned iterator **always** iterates over a list\n        \"snapshot\", which is defined as the list of list elements at the time\n        of the method's invocation. For its sole argument, the method accepts a\n        direction: 'forward' or 'reverse'. Default: 'forward'.\n\n    list.last: Function\n        Returns the last list node. If the list is empty, the returned value is\n        `undefined`.\n\n    list.length: integer\n        List length.\n\n    list.pop: Function\n        Removes and returns the last list value. If the list is empty, the\n        returned value is `undefined`.\n\n    list.push: Function\n        Adds a value to the end of the list.\n\n    list.remove: Function\n        Removes a list node from the list.\n\n    list.shift: Function\n        Removes and returns the first list value. If the list is empty, the\n        returned value is `undefined`.\n\n    list.toArray: Function\n        Returns an array of list values.\n\n    list.toJSON: Function\n        Serializes a list as JSON.\n\n    list.unshift: Function\n        Adds a value to the beginning of the list.\n\n    Examples\n    --------\n    > var list = DoublyLinkedList();\n    > list.push( 'foo' ).push( 'bar' );\n    > list.length\n    2\n    > list.pop()\n    'bar'\n    > list.length\n    1\n    > list.pop()\n    'foo'\n    > list.length\n    0\n\n    See Also\n    --------\n    LinkedList, Stack\n","doUntil":"\ndoUntil( fcn, predicate[, thisArg] )\n    Invokes a function until a test condition is true.\n\n    The condition is evaluated *after* executing the provided function; thus,\n    `fcn` *always* executes at least once.\n\n    When invoked, both the predicate function and the function to invoke are\n    provided a single argument:\n\n    - `i`: iteration number (starting from zero)\n\n    Parameters\n    ----------\n    fcn: Function\n        The function to invoke.\n\n    predicate: Function\n        The predicate function which indicates whether to stop invoking a\n        function.\n\n    thisArg: any (optional)\n        Execution context for the invoked function.\n\n    Examples\n    --------\n    > function predicate( i ) { return ( i >= 5 ); };\n    > function beep( i ) { console.log( 'boop: %d', i ); };\n    > doUntil( beep, predicate )\n    boop: 0\n    boop: 1\n    boop: 2\n    boop: 3\n    boop: 4\n\n    See Also\n    --------\n    doUntilAsync, doUntilEach, doWhile, until, whilst\n","doUntilAsync":"\ndoUntilAsync( fcn, predicate, done[, thisArg] )\n    Invokes a function until a test condition is true.\n\n    The condition is evaluated *after* executing the provided function; thus,\n    `fcn` *always* executes at least once.\n\n    The function to invoke is provided two arguments:\n\n    - `i`: iteration number (starting from zero)\n    - `next`: a callback which must be invoked before proceeding to the next\n      iteration\n\n    The first argument of the `next` callback is an `error` argument. If `fcn`\n    calls the `next` callback with a truthy `error` argument, the function\n    suspends execution and immediately calls the `done` callback for subsequent\n    `error` handling.\n\n    The predicate function is provided two arguments:\n\n    - `i`: iteration number (starting from one)\n    - `clbk`: a callback indicating whether to invoke `fcn`\n\n    The `clbk` function accepts two arguments:\n\n    - `error`: error argument\n    - `bool`: test result\n\n    If the test result is falsy, the function continues invoking `fcn`;\n    otherwise, the function invokes the `done` callback.\n\n    The `done` callback is invoked with an `error` argument and any arguments\n    passed to the final `next` callback.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    fcn: Function\n        The function to invoke.\n\n    predicate: Function\n        The predicate function which indicates whether to continue invoking a\n        function.\n\n    done: Function\n        Callback to invoke upon completion.\n\n    thisArg: any (optional)\n        Execution context for the invoked function.\n\n    Examples\n    --------\n    > function fcn( i, next ) {\n    ...     setTimeout( onTimeout, i );\n    ...     function onTimeout() {\n    ...         next( null, 'boop'+i );\n    ...     }\n    ... };\n    > function predicate( i, clbk ) { clbk( null, i >= 5 ); };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > doUntilAsync( fcn, predicate, done )\n    boop: 4\n\n    See Also\n    --------\n    doUntil, doWhileAsync, untilAsync, whileAsync\n","doUntilEach":"\ndoUntilEach( collection, fcn, predicate[, thisArg] )\n    Until a test condition is true, invokes a function for each element in a\n    collection.\n\n    The condition is evaluated *after* executing the provided function; thus,\n    `fcn` *always* executes at least once.\n\n    When invoked, both the predicate function and the function to apply are\n    provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    If provided an empty collection, both `value` and `index` are `undefined`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    predicate: Function\n        The predicate function which indicates whether to stop iterating over a\n        collection.\n\n    thisArg: any (optional)\n        Execution context for the applied function.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function predicate( v ) { return v !== v; };\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, 2, 3, 4, NaN, 5 ];\n    > doUntilEach( arr, logger, predicate )\n    0: 1\n    1: 2\n    2: 3\n    3: 4\n    4: NaN\n\n    See Also\n    --------\n    doUntilEachRight, doWhileEach, untilEach\n","doUntilEachRight":"\ndoUntilEachRight( collection, fcn, predicate[, thisArg] )\n    Until a test condition is true, invokes a function for each element in a\n    collection, iterating from right to left.\n\n    The condition is evaluated *after* executing the provided function; thus,\n    `fcn` *always* executes at least once.\n\n    When invoked, both the predicate function and the function to apply are\n    provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    If provided an empty collection, both `value` and `index` are `undefined`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    predicate: Function\n        The predicate function which indicates whether to stop iterating over a\n        collection.\n\n    thisArg: any (optional)\n        Execution context for the applied function.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function predicate( v ) { return v !== v; };\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, NaN, 2, 3, 4, 5 ];\n    > doUntilEachRight( arr, logger, predicate )\n    5: 5\n    4: 4\n    3: 3\n    2: 2\n    1: NaN\n\n    See Also\n    --------\n    doUntilEach, doWhileEachRight, untilEachRight\n","doWhile":"\ndoWhile( fcn, predicate[, thisArg] )\n    Invokes a function while a test condition is true.\n\n    The condition is evaluated *after* executing the provided function; thus,\n    `fcn` *always* executes at least once.\n\n    When invoked, both the predicate function and the function to invoke are\n    provided a single argument:\n\n    - `i`: iteration number (starting from zero)\n\n    Parameters\n    ----------\n    fcn: Function\n        The function to invoke.\n\n    predicate: Function\n        The predicate function which indicates whether to continue invoking a\n        function.\n\n    thisArg: any (optional)\n        Execution context for the invoked function.\n\n    Examples\n    --------\n    > function predicate( i ) { return ( i < 5 ); };\n    > function beep( i ) { console.log( 'boop: %d', i ); };\n    > doWhile( beep, predicate )\n    boop: 0\n    boop: 1\n    boop: 2\n    boop: 3\n    boop: 4\n\n    See Also\n    --------\n    doUntil, doWhileAsync, doWhileEach, until, whilst\n","doWhileAsync":"\ndoWhileAsync( fcn, predicate, done[, thisArg] )\n    Invokes a function while a test condition is true.\n\n    The condition is evaluated *after* executing the provided function; thus,\n    `fcn` *always* executes at least once.\n\n    The function to invoke is provided two arguments:\n\n    - `i`: iteration number (starting from zero)\n    - `next`: a callback which must be invoked before proceeding to the next\n      iteration\n\n    The first argument of the `next` callback is an `error` argument. If `fcn`\n    calls the `next` callback with a truthy `error` argument, the function\n    suspends execution and immediately calls the `done` callback for subsequent\n    `error` handling.\n\n    The predicate function is provided two arguments:\n\n    - `i`: iteration number (starting from one)\n    - `clbk`: a callback indicating whether to invoke `fcn`\n\n    The `clbk` function accepts two arguments:\n\n    - `error`: error argument\n    - `bool`: test result\n\n    If the test result is truthy, the function continues invoking `fcn`;\n    otherwise, the function invokes the `done` callback.\n\n    The `done` callback is invoked with an `error` argument and any arguments\n    passed to the final `next` callback.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    fcn: Function\n        The function to invoke.\n\n    predicate: Function\n        The predicate function which indicates whether to continue invoking a\n        function.\n\n    done: Function\n        Callback to invoke upon completion.\n\n    thisArg: any (optional)\n        Execution context for the invoked function.\n\n    Examples\n    --------\n    > function fcn( i, next ) {\n    ...     setTimeout( onTimeout, i );\n    ...     function onTimeout() {\n    ...         next( null, 'boop'+i );\n    ...     }\n    ... };\n    > function predicate( i, clbk ) { clbk( null, i < 5 ); };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > doWhileAsync( fcn, predicate, done )\n    boop: 4\n\n    See Also\n    --------\n    doUntilAsync, doWhile, untilAsync, whileAsync\n","doWhileEach":"\ndoWhileEach( collection, fcn, predicate[, thisArg] )\n    While a test condition is true, invokes a function for each element in a\n    collection.\n\n    The condition is evaluated *after* executing the provided function; thus,\n    `fcn` *always* executes at least once.\n\n    When invoked, both the predicate function and the function to apply are\n    provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    If provided an empty collection, both `value` and `index` are `undefined`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    predicate: Function\n        The predicate function which indicates whether to continue iterating\n        over a collection.\n\n    thisArg: any (optional)\n        Execution context for the applied function.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function predicate( v ) { return v === v; };\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, 2, 3, 4, NaN, 5 ];\n    > doWhileEach( arr, logger, predicate )\n    0: 1\n    1: 2\n    2: 3\n    3: 4\n    4: NaN\n\n    See Also\n    --------\n    doUntilEach, doWhileEachRight, whileEach\n","doWhileEachRight":"\ndoWhileEachRight( collection, fcn, predicate[, thisArg] )\n    While a test condition is true, invokes a function for each element in a\n    collection, iterating from right to left.\n\n    The condition is evaluated *after* executing the provided function; thus,\n    `fcn` *always* executes at least once.\n\n    When invoked, both the predicate function and the function to apply are\n    provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    If provided an empty collection, both `value` and `index` are `undefined`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    predicate: Function\n        The predicate function which indicates whether to continue iterating\n        over a collection.\n\n    thisArg: any (optional)\n        Execution context for the applied function.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function predicate( v ) { return v === v; };\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, NaN, 2, 3, 4, 5 ];\n    > doWhileEachRight( arr, logger, predicate )\n    5: 5\n    4: 4\n    3: 3\n    2: 2\n    1: NaN\n\n    See Also\n    --------\n    doUntilEachRight, doWhileEach, whileEachRight\n","E":"\nE\n    Euler's number.\n\n    Examples\n    --------\n    > E\n    2.718281828459045\n\n","EMOJI":"\nEMOJI()\n    Returns an emoji database.\n\n    Returns\n    -------\n    out: Array\n        Emoji database.\n\n    Examples\n    --------\n    > var data = EMOJI()\n    [ {...}, ... ]\n\n    See Also\n    --------\n    EMOJI_CODE_PICTO, EMOJI_PICTO_CODE\n","EMOJI_CODE_PICTO":"\nEMOJI_CODE_PICTO()\n    Returns an object mapping emoji codes to pictographs.\n\n    Returns\n    -------\n    out: Object\n        An object mapping emoji codes to pictographs.\n\n    Examples\n    --------\n    > var out = EMOJI_CODE_PICTO()\n\n    See Also\n    --------\n    EMOJI, EMOJI_PICTO_CODE\n","EMOJI_PICTO_CODE":"\nEMOJI_PICTO_CODE()\n    Returns an object mapping emoji pictographs to codes.\n\n    Returns\n    -------\n    out: Object\n        An object mapping emoji pictographs to codes.\n\n    Examples\n    --------\n    > var out = EMOJI_PICTO_CODE()\n\n    See Also\n    --------\n    EMOJI, EMOJI_CODE_PICTO\n","emptyStream":"\nemptyStream( [options] )\n    Returns an \"empty\" readable stream.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var s = emptyStream();\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nemptyStream.factory( [options] )\n    Returns a function for creating empty readable streams.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true };\n    > var createStream = emptyStream.factory( opts );\n\n\nemptyStream.objectMode()\n    Returns an \"objectMode\" empty readable stream.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var s = emptyStream.objectMode();\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    constantStream\n","emptyStream.factory":"\nemptyStream.factory( [options] )\n    Returns a function for creating empty readable streams.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true };\n    > var createStream = emptyStream.factory( opts );\n\n","emptyStream.objectMode":"\nemptyStream.objectMode()\n    Returns an \"objectMode\" empty readable stream.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var s = emptyStream.objectMode();\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    constantStream\n","endsWith":"\nendsWith( str, search[, len] )\n    Tests if a `string` ends with the characters of another `string`.\n\n    If provided an empty `search` string, the function always returns `true`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    search: string\n        Search string.\n\n    len: integer (optional)\n        Substring length. Restricts the search to a substring within the input\n        string beginning from the leftmost character. If provided a negative\n        value, `len` indicates to ignore the last `len` characters, returning\n        the same output as `str.length + len`. Default: `str.length`.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a `string` ends with the characters of\n        another `string`.\n\n    Examples\n    --------\n    > var bool = endsWith( 'beep', 'ep' )\n    true\n    > bool = endsWith( 'Beep', 'op' )\n    false\n    > bool = endsWith( 'Beep', 'ee', 3 )\n    true\n    > bool = endsWith( 'Beep', 'ee', -1 )\n    true\n    > bool = endsWith( 'beep', '' )\n    true\n\n    See Also\n    --------\n    startsWith\n","enumerableProperties":"\nenumerableProperties( value )\n    Returns an array of an object's own enumerable property names and symbols.\n\n    Property order is not guaranteed, as object property enumeration is not\n    specified according to the ECMAScript specification. In practice, however,\n    most engines use insertion order to sort an object's properties, thus\n    allowing for deterministic extraction.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    props: Array\n        List of an object's own enumerable properties.\n\n    Examples\n    --------\n    > function Foo() { this.beep = 'boop'; return this; };\n    > Foo.prototype.foo = 'bar';\n    > var obj = new Foo();\n    > var props = enumerableProperties( obj )\n    [ 'beep' ]\n\n    See Also\n    --------\n    enumerablePropertiesIn, enumerablePropertySymbols, inheritedEnumerableProperties, objectKeys, nonEnumerableProperties, properties\n","enumerablePropertiesIn":"\nenumerablePropertiesIn( value )\n    Returns an array of an object's own and inherited enumerable property names\n    and symbols.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    props: Array\n        List of an object's own and inherited enumerable property names and\n        symbols.\n\n    Examples\n    --------\n    > var props = enumerablePropertiesIn( [] )\n\n    See Also\n    --------\n    enumerableProperties, enumerablePropertySymbolsIn, inheritedEnumerableProperties, keysIn, nonEnumerablePropertiesIn, propertiesIn\n","enumerablePropertySymbols":"\nenumerablePropertySymbols( value )\n    Returns an array of an object's own enumerable symbol properties.\n\n    Property order is not guaranteed, as object property enumeration is not\n    specified according to the ECMAScript specification. In practice, however,\n    most engines use insertion order to sort an object's properties, thus\n    allowing for deterministic extraction.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    symbols: Array\n        List of an object's own enumerable symbol properties.\n\n    Examples\n    --------\n    > var obj = {};\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = true;\n    > desc.writable = true;\n    > desc.value = 'boop';\n    > var sym = ( Symbol ) ? Symbol( 'beep' ) : 'beep';\n    > defineProperty( obj, sym, desc );\n    > var symbols = enumerablePropertySymbols( obj )\n\n    See Also\n    --------\n    enumerablePropertySymbolsIn, inheritedEnumerablePropertySymbols, objectKeys, nonEnumerablePropertySymbols, propertySymbols\n","enumerablePropertySymbolsIn":"\nenumerablePropertySymbolsIn( value )\n    Returns an array of an object's own and inherited enumerable symbol\n    properties.\n\n    Property order is not guaranteed, as object property enumeration is not\n    specified according to the ECMAScript specification. In practice, however,\n    most engines use insertion order to sort an object's properties, thus\n    allowing for deterministic extraction.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    symbols: Array\n        List of an object's own and inherited enumerable symbol properties.\n\n    Examples\n    --------\n    > var obj = {};\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = true;\n    > desc.writable = true;\n    > desc.value = 'boop';\n    > var sym = ( Symbol ) ? Symbol( 'beep' ) : 'beep';\n    > defineProperty( obj, sym, desc );\n    > var symbols = enumerablePropertySymbolsIn( obj )\n\n    See Also\n    --------\n    enumerablePropertySymbols, inheritedEnumerablePropertySymbols, keysIn, nonEnumerablePropertySymbolsIn, propertySymbolsIn\n","ENV":"\nENV\n    An object containing the user environment.\n\n    Examples\n    --------\n    > var user = ENV.USER\n    <string>\n\n    See Also\n    --------\n    ARGV\n","EPS":"\nEPS\n    Difference between one and the smallest value greater than one that can be\n    represented as a double-precision floating-point number.\n\n    Examples\n    --------\n    > EPS\n    2.220446049250313e-16\n\n    See Also\n    --------\n    FLOAT32_EPS\n","error2json":"\nerror2json( error )\n    Returns a JSON representation of an error object.\n\n    The following built-in error types are supported:\n\n    - Error\n    - URIError\n    - ReferenceError\n    - SyntaxError\n    - RangeError\n    - EvalError\n    - TypeError\n\n    The JSON object is guaranteed to have the following properties:\n\n    - type: error type.\n    - message: error message.\n\n    The only standardized cross-platform property is `message`. Depending on the\n    platform, the following properties *may* be present:\n\n    - name: error name.\n    - stack: stack trace.\n    - code: error code (Node.js system errors).\n    - errno: error code string (Node.js system errors).\n    - syscall: string representing the failed system call (Node.js system\n      errors).\n\n    The function also serializes all enumerable properties.\n\n    The implementation supports custom error types and sets the `type` field to\n    the closest built-in error type.\n\n    Parameters\n    ----------\n    error: Error\n        Error to serialize.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var err = new Error( 'beep' );\n    > var json = error2json( err )\n    <Object>\n\n    See Also\n    --------\n    reviveError\n","EULERGAMMA":"\nEULERGAMMA\n    The Euler-Mascheroni constant.\n\n    Examples\n    --------\n    > EULERGAMMA\n    0.5772156649015329\n\n","every":"\nevery( collection )\n    Tests whether all elements in a collection are truthy.\n\n    The function immediately returns upon encountering a falsy value.\n\n    If provided an empty collection, the function returns `true`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if all elements are truthy; otherwise, the\n        function returns `false`.\n\n    Examples\n    --------\n    > var arr = [ 1, 1, 1, 1, 1 ];\n    > var bool = every( arr )\n    true\n\n    See Also\n    --------\n    any, everyBy, forEach, none, some\n","everyBy":"\neveryBy( collection, predicate[, thisArg ] )\n    Tests whether all elements in a collection pass a test implemented by a\n    predicate function.\n\n    The predicate function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    The function immediately returns upon encountering a non-truthy return\n    value.\n\n    If provided an empty collection, the function returns `true`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The test function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if the predicate function returns a truthy\n        value for all elements; otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > function positive( v ) { return ( v > 0 ); };\n    > var arr = [ 1, 2, 3, 4 ];\n    > var bool = everyBy( arr, positive )\n    true\n\n    See Also\n    --------\n    anyBy, everyByRight, forEach, noneBy, someBy\n","everyByAsync":"\neveryByAsync( collection, [options,] predicate, done )\n    Tests whether all elements in a collection pass a test implemented by a\n    predicate function.\n\n    When invoked, the predicate function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    predicate function accepts two arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the predicate function accepts three arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other predicate function signature, the predicate function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `result`: test result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    The function immediately returns upon encountering a non-truthy `result`\n    value and calls the `done` callback with `null` as the first argument and\n    `false` as the second argument.\n\n    If all elements succeed, the function calls the `done` callback with `null`\n    as the first argument and `true` as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, true );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > everyByAsync( arr, predicate, done )\n    1000\n    2500\n    3000\n    true\n\n    // Limit number of concurrent invocations:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, true );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > everyByAsync( arr, opts, predicate, done )\n    2500\n    3000\n    1000\n    true\n\n    // Process sequentially:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, true );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000 ];\n    > everyByAsync( arr, opts, predicate, done )\n    3000\n    2500\n    1000\n    true\n\n\neveryByAsync.factory( [options,] predicate )\n    Returns a function which tests whether all elements in a collection pass a\n    test implemented by a predicate function.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, true );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = everyByAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    true\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    true\n\n    See Also\n    --------\n    anyByAsync, everyBy, everyByRightAsync, forEachAsync, noneByAsync, someByAsync\n","everyByAsync.factory":"\neveryByAsync.factory( [options,] predicate )\n    Returns a function which tests whether all elements in a collection pass a\n    test implemented by a predicate function.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, true );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = everyByAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    true\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    true\n\n    See Also\n    --------\n    anyByAsync, everyBy, everyByRightAsync, forEachAsync, noneByAsync, someByAsync\n","everyByRight":"\neveryByRight( collection, predicate[, thisArg ] )\n    Tests whether all elements in a collection pass a test implemented by a\n    predicate function, iterating from right to left.\n\n    The predicate function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    The function immediately returns upon encountering a non-truthy return\n    value.\n\n    If provided an empty collection, the function returns `true`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The test function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if the predicate function returns a truthy\n        value for all elements; otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > function positive( v ) { return ( v > 0 ); };\n    > var arr = [ 1, 2, 3, 4 ];\n    > var bool = everyByRight( arr, positive )\n    true\n\n    See Also\n    --------\n    anyBy, every, everyBy, forEachRight, noneByRight, someByRight\n","everyByRightAsync":"\neveryByRightAsync( collection, [options,] predicate, done )\n    Tests whether all elements in a collection pass a test implemented by a\n    predicate function, iterating from right to left.\n\n    When invoked, the predicate function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    predicate function accepts two arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the predicate function accepts three arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other predicate function signature, the predicate function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `result`: test result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    The function immediately returns upon encountering a non-truthy `result`\n    value and calls the `done` callback with `null` as the first argument and\n    `false` as the second argument.\n\n    If all elements succeed, the function calls the `done` callback with `null`\n    as the first argument and `true` as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, true );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > everyByRightAsync( arr, predicate, done )\n    1000\n    2500\n    3000\n    true\n\n    // Limit number of concurrent invocations:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, true );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 1000, 2500, 3000 ];\n    > everyByRightAsync( arr, opts, predicate, done )\n    2500\n    3000\n    1000\n    true\n\n    // Process sequentially:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, true );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 1000, 2500, 3000 ];\n    > everyByRightAsync( arr, opts, predicate, done )\n    3000\n    2500\n    1000\n    true\n\n\neveryByRightAsync.factory( [options,] predicate )\n    Returns a function which tests whether all elements in a collection pass a\n    test implemented by a predicate function, iterating from right to left.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, true );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = everyByRightAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    true\n    > arr = [ 1000, 1500, 2000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    true\n\n    See Also\n    --------\n    anyByRightAsync, everyByAsync, everyByRight, forEachRightAsync, noneByRightAsync, someByRightAsync\n","everyByRightAsync.factory":"\neveryByRightAsync.factory( [options,] predicate )\n    Returns a function which tests whether all elements in a collection pass a\n    test implemented by a predicate function, iterating from right to left.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, true );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = everyByRightAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    true\n    > arr = [ 1000, 1500, 2000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    true\n\n    See Also\n    --------\n    anyByRightAsync, everyByAsync, everyByRight, forEachRightAsync, noneByRightAsync, someByRightAsync\n","evil":"\nevil( str )\n    Alias for `eval` global.\n\n    A reference to `eval` is treated differently by the compiler. For example,\n    when evaluating code containing block-scoped declarations  (e.g., `let`,\n    `const`, `function`, `class`), the compiler may throw an `error` complaining\n    that block-scoped declarations are not yet supported outside of\n    `strict mode`. One possible workaround is to include `\"use strict\";` in the\n    evaluated code.\n\n    Parameters\n    ----------\n    str: string\n        Code to evaluate.\n\n    Returns\n    -------\n    out: any\n        Returned value if applicable.\n\n    Examples\n    --------\n    > var v = evil( '5*4*3*2*1' )\n    120\n\n","exists":"\nexists( path, clbk )\n    Asynchronously tests whether a path exists on the filesystem.\n\n    Parameters\n    ----------\n    path: string|Buffer\n        Path to test.\n\n    clbk: Function\n        Callback to invoke after testing for path existence. A callback may\n        accept a single argument, a boolean indicating whether a path exists, or\n        two arguments, an error argument and a boolean, matching the error-first\n        callback convention used in most asynchronous Node.js APIs.\n\n    Examples\n    --------\n    > function done( error, bool ) { console.log( bool ); };\n    > exists( './beep/boop', done );\n\n\nexists.sync( path )\n    Synchronously tests whether a path exists on the filesystem.\n\n    Parameters\n    ----------\n    path: string|Buffer\n        Path to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the path exists.\n\n    Examples\n    --------\n    > var bool = exists.sync( './beep/boop' )\n    <boolean>\n\n    See Also\n    --------\n    readFile, readDir\n","exists.sync":"\nexists.sync( path )\n    Synchronously tests whether a path exists on the filesystem.\n\n    Parameters\n    ----------\n    path: string|Buffer\n        Path to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether the path exists.\n\n    Examples\n    --------\n    > var bool = exists.sync( './beep/boop' )\n    <boolean>\n\n    See Also\n    --------\n    readFile, readDir\n","expandContractions":"\nexpandContractions( str )\n    Expands all contractions to their formal equivalents.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        String with expanded contractions.\n\n    Examples\n    --------\n    > var str = 'I won\\'t be able to get y\\'all out of this one.';\n    > var out = expandContractions( str )\n    'I will not be able to get you all out of this one.'\n\n    > str = 'It oughtn\\'t to be my fault, because, you know, I didn\\'t know';\n    > out = expandContractions( str )\n    'It ought not to be my fault, because, you know, I did not know'\n\n","extname":"\nextname( filename )\n    Returns a filename extension.\n\n    Parameters\n    ----------\n    filename: string\n        Filename.\n\n    Returns\n    -------\n    ext: string\n        Filename extension.\n\n    Examples\n    --------\n    > var ext = extname( 'index.js' )\n    '.js'\n\n    See Also\n    --------\n    dirname\n","fastmath.abs":"\nfastmath.abs( x )\n    Computes an absolute value.\n\n    This implementation is not IEEE 754 compliant. If provided `-0`, the\n    function returns `-0`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    out: number\n        Absolute value.\n\n    Examples\n    --------\n    > var v = fastmath.abs( -1.0 )\n    1.0\n    > v = fastmath.abs( 2.0 )\n    2.0\n    > v = fastmath.abs( 0.0 )\n    0.0\n    > v = fastmath.abs( -0.0 )\n    -0.0\n    > v = fastmath.abs( NaN )\n    NaN\n\n    See Also\n    --------\n    base.abs\n","fastmath.acosh":"\nfastmath.acosh( x )\n    Computes the hyperbolic arccosine of a number.\n\n    The domain of `x` is restricted to `[1,+infinity)`. If `x < 1`, the function\n    will return `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    out: number\n        Hyperbolic arccosine (in radians).\n\n    Examples\n    --------\n    > var v = fastmath.acosh( 1.0 )\n    0.0\n    > v = fastmath.acosh( 2.0 )\n    ~1.317\n    > v = fastmath.acosh( NaN )\n    NaN\n\n    // The function overflows for large `x`:\n    > v = fastmath.acosh( 1.0e308 )\n    Infinity\n\n    See Also\n    --------\n    base.acosh\n","fastmath.ampbm":"\nfastmath.ampbm( x, y )\n    Computes the hypotenuse using the alpha max plus beta min algorithm.\n\n    The algorithm computes only an approximation.\n\n    Parameters\n    ----------\n    x: number\n        First number.\n\n    y: number\n        Second number.\n\n    Returns\n    -------\n    out: number\n        Hypotenuse.\n\n    Examples\n    --------\n    > var h = fastmath.ampbm( 5.0, 12.0 )\n    ~13.514\n\n\nfastmath.ampbm.factory( alpha, beta, [nonnegative[, ints]] )\n    Returns a function to compute a hypotenuse using the alpha max plus beta min\n    algorithm.\n\n    Parameters\n    ----------\n    alpha: number\n        Alpha.\n\n    beta: number\n        Beta.\n\n    nonnegative: boolean (optional)\n        Boolean indicating whether input values are always nonnegative.\n\n    ints: boolean (optional)\n        Boolean indicating whether input values are always 32-bit integers.\n\n    Returns\n    -------\n    fcn: Function\n        Function to compute a hypotenuse.\n\n    Examples\n    --------\n    > var hypot = fastmath.ampbm.factory( 1.0, 0.5 )\n    <Function>\n\n    See Also\n    --------\n    base.hypot\n","fastmath.ampbm.factory":"\nfastmath.ampbm.factory( alpha, beta, [nonnegative[, ints]] )\n    Returns a function to compute a hypotenuse using the alpha max plus beta min\n    algorithm.\n\n    Parameters\n    ----------\n    alpha: number\n        Alpha.\n\n    beta: number\n        Beta.\n\n    nonnegative: boolean (optional)\n        Boolean indicating whether input values are always nonnegative.\n\n    ints: boolean (optional)\n        Boolean indicating whether input values are always 32-bit integers.\n\n    Returns\n    -------\n    fcn: Function\n        Function to compute a hypotenuse.\n\n    Examples\n    --------\n    > var hypot = fastmath.ampbm.factory( 1.0, 0.5 )\n    <Function>\n\n    See Also\n    --------\n    base.hypot\n","fastmath.asinh":"\nfastmath.asinh( x )\n    Computes the hyperbolic arcsine of a number.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    out: number\n        Hyperbolic arcsine (in radians).\n\n    Examples\n    --------\n    > var v = fastmath.asinh( 0.0 )\n    0.0\n    > v = fastmath.asinh( 2.0 )\n    ~1.444\n    > v = fastmath.asinh( -2.0 )\n    ~-1.444\n    > v = fastmath.asinh( NaN )\n    NaN\n\n    // The function overflows for large `x`:\n    > v = fastmath.asinh( 1.0e200 )\n    Infinity\n\n    // The function underflows for small `x`:\n    > v = fastmath.asinh( 1.0e-50 )\n    0.0\n\n    See Also\n    --------\n    base.asinh\n","fastmath.atanh":"\nfastmath.atanh( x )\n    Computes the hyperbolic arctangent of a number.\n\n    The domain of `x` is restricted to `[-1,1]`. If `|x| > 1`, the function\n    returns `NaN`.\n\n    Parameters\n    ----------\n    x: number\n        Input value.\n\n    Returns\n    -------\n    out: number\n        Hyperbolic arctangent (in radians).\n\n    Examples\n    --------\n    > var v = fastmath.atanh( 0.0 )\n    0.0\n    > v = fastmath.atanh( 0.9 )\n    ~1.472\n    > v = fastmath.atanh( 1.0 )\n    Infinity\n    > v = fastmath.atanh( -1.0 )\n    -Infinity\n    > v = fastmath.atanh( NaN )\n    NaN\n\n    // The function underflows for small `x`:\n    > v = fastmath.atanh( 1.0e-17 )\n    0.0\n\n    See Also\n    --------\n    base.atanh\n","fastmath.hypot":"\nfastmath.hypot( x, y )\n    Computes the hypotenuse.\n\n    Parameters\n    ----------\n    x: number\n        First number.\n\n    y: number\n        Second number.\n\n    Returns\n    -------\n    out: number\n        Hypotenuse.\n\n    Examples\n    --------\n    > var h = fastmath.hypot( -5.0, 12.0 )\n    13.0\n\n    // For a sufficiently large `x` and/or `y`, the function overflows:\n    > h = fastmath.hypot( 1.0e154, 1.0e154 )\n    Infinity\n\n    // For sufficiently small `x` and/or `y`, the function underflows:\n    > h = fastmath.hypot( 1e-200, 1.0e-200 )\n    0.0\n\n    See Also\n    --------\n    base.hypot\n","fastmath.log2Uint32":"\nfastmath.log2Uint32( x )\n    Returns an approximate binary logarithm (base two) of an unsigned 32-bit\n    integer `x`.\n\n    This function provides a performance boost when requiring only approximate\n    computations for integer arguments.\n\n    For high-precision applications, this function is never suitable.\n\n    Parameters\n    ----------\n    x: uinteger\n        Input value.\n\n    Returns\n    -------\n    out: uinteger\n        Integer binary logarithm (base two).\n\n    Examples\n    --------\n    > var v = fastmath.log2Uint32( 4 >>> 0 )\n    2\n    > v = fastmath.log2Uint32( 8 >>> 0 )\n    3\n    > v = fastmath.log2Uint32( 9 >>> 0 )\n    3\n\n    See Also\n    --------\n    base.log2\n","fastmath.max":"\nfastmath.max( x, y )\n    Returns the maximum value.\n\n    The function ignores the sign of `0` and does not check for `NaN` arguments.\n\n    Parameters\n    ----------\n    x: number\n        First number.\n\n    y: number\n        Second number.\n\n    Returns\n    -------\n    out: number\n        Maximum value.\n\n    Examples\n    --------\n    > var v = fastmath.max( 3.14, 4.2 )\n    4.2\n    > v = fastmath.max( 3.14, NaN )\n    NaN\n    > v = fastmath.max( NaN, 3.14 )\n    3.14\n    > v = fastmath.max( -0.0, +0.0 )\n    +0.0\n    > v = fastmath.max( +0.0, -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.max\n","fastmath.min":"\nfastmath.min( x, y )\n    Returns the minimum value.\n\n    The function ignores the sign of `0` and does not check for `NaN` arguments.\n\n    Parameters\n    ----------\n    x: number\n        First number.\n\n    y: number\n        Second number.\n\n    Returns\n    -------\n    out: number\n        Minimum value.\n\n    Examples\n    --------\n    > var v = fastmath.min( 3.14, 4.2 )\n    3.14\n    > v = fastmath.min( 3.14, NaN )\n    NaN\n    > v = fastmath.min( NaN, 3.14 )\n    3.14\n    > v = fastmath.min( -0.0, +0.0 )\n    +0.0\n    > v = fastmath.min( +0.0, -0.0 )\n    -0.0\n\n    See Also\n    --------\n    base.min\n","fastmath.powint":"\nfastmath.powint( x, y )\n    Evaluates the exponential function given a signed 32-bit integer exponent.\n\n    This function is not recommended for high-precision applications due to\n    error accumulation.\n\n    If provided a negative exponent, the function first computes the reciprocal\n    of the base and then evaluates the exponential function. This can introduce\n    significant error.\n\n    Parameters\n    ----------\n    x: number\n        Base.\n\n    y: integer\n        Signed 32-bit integer exponent.\n\n    Returns\n    -------\n    out: number\n        Function value.\n\n    Examples\n    --------\n    > var v = fastmath.powint( 2.0, 3 )\n    8.0\n    > v = fastmath.powint( 3.14, 0 )\n    1.0\n    > v = fastmath.powint( 2.0, -2 )\n    0.25\n    > v = fastmath.powint( 0.0, 0 )\n    1.0\n    > v = fastmath.powint( -3.14, 1 )\n    -3.14\n    > v = fastmath.powint( NaN, 0 )\n    NaN\n\n    See Also\n    --------\n    base.pow\n","fastmath.sqrtUint32":"\nfastmath.sqrtUint32( x )\n    Returns an approximate square root of an unsigned 32-bit integer `x`.\n\n    Prefer hardware `sqrt` over a software implementation.\n\n    When using a software `sqrt`, this function provides a performance boost\n    when an application requires only approximate computations for integer\n    arguments.\n\n    For applications requiring high-precision, this function is never suitable.\n\n    Parameters\n    ----------\n    x: uinteger\n        Input value.\n\n    Returns\n    -------\n    out: uinteger\n        Integer square root.\n\n    Examples\n    --------\n    > var v = fastmath.sqrtUint32( 9 >>> 0 )\n    3\n    > v = fastmath.sqrtUint32( 2 >>> 0 )\n    1\n    > v = fastmath.sqrtUint32( 3 >>> 0 )\n    1\n    > v = fastmath.sqrtUint32( 0 >>> 0 )\n    0\n\n    See Also\n    --------\n    base.sqrt\n","FEMALE_FIRST_NAMES_EN":"\nFEMALE_FIRST_NAMES_EN()\n    Returns a list of common female first names in English speaking countries.\n\n    Returns\n    -------\n    out: Array<string>\n        List of common female first names.\n\n    Examples\n    --------\n    > var list = FEMALE_FIRST_NAMES_EN()\n    [ 'Aaren', 'Aarika', 'Abagael', 'Abagail', ... ]\n\n    References\n    ----------\n    - Ward, Grady. 2002. \"Moby Word II.\" <http://www.gutenberg.org/files/3201/\n    3201.txt>.\n\n    See Also\n    --------\n    MALE_FIRST_NAMES_EN\n","FIFO":"\nFIFO()\n    First-in-first-out (FIFO) queue constructor.\n\n    Returns\n    -------\n    queue: Object\n        First-in-first-out queue.\n\n    queue.clear: Function\n        Clears the queue.\n\n    queue.first: Function\n        Returns the \"oldest\" queue value (i.e., the value which is \"first-out\").\n        If the queue is empty, the returned value is `undefined`.\n\n    queue.iterator: Function\n        Returns an iterator for iterating over a queue. If an environment\n        supports Symbol.iterator, the returned iterator is iterable. Note that,\n        in order to prevent confusion arising from queue mutation during\n        iteration, a returned iterator **always** iterates over a queue\n        \"snapshot\", which is defined as the list of queue elements at the time\n        of the method's invocation.\n\n    queue.last: Function\n        Returns the \"newest\" queue value (i.e., the value which is \"last-out\").\n        If the queue is empty, the returned value is `undefined`.\n\n    queue.length: integer\n        Queue length.\n\n    queue.pop: Function\n        Removes and returns the current \"first-out\" value from the queue. If the\n        queue is empty, the returned value is `undefined`.\n\n    queue.push: Function\n        Adds a value to the queue.\n\n    queue.toArray: Function\n        Returns an array of queue values.\n\n    queue.toJSON: Function\n        Serializes a queue as JSON.\n\n    Examples\n    --------\n    > var q = FIFO();\n    > q.push( 'foo' ).push( 'bar' );\n    > q.length\n    2\n    > q.pop()\n    'foo'\n    > q.length\n    1\n    > q.pop()\n    'bar'\n    > q.length\n    0\n\n    See Also\n    --------\n    Stack\n","find":"\nfind( arr, [options,] clbk )\n    Finds elements in an array-like object that satisfy a test condition.\n\n    Parameters\n    ----------\n    arr: Array|TypedArray|string\n        Object from which elements will be tested.\n\n    options: Object (optional)\n        Options.\n\n    options.k: integer (optional)\n        Limits the number of returned elements. The sign determines the\n        direction in which to search. If set to a negative integer, the function\n        searches from last element to first element. Default: arr.length.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'indices'.\n\n    clbk: Function\n        Function invoked for each array element. If the return value is truthy,\n        the value is considered to have satisfied the test condition.\n\n    Returns\n    -------\n    out: Array\n        Array of indices, element values, or arrays of index-value pairs.\n\n    Examples\n    --------\n    > var data = [ 30, 20, 50, 60, 10 ];\n    > function condition( val ) { return val > 20; };\n    > var vals = find( data, condition )\n    [ 0, 2, 3 ]\n\n    // Limit number of results:\n    > data = [ 30, 20, 50, 60, 10 ];\n    > var opts = { 'k': 2, 'returns': 'values' };\n    > vals = find( data, opts, condition )\n    [ 30, 50 ]\n\n    // Return both indices and values as index-value pairs:\n    > data = [ 30, 20, 50, 60, 10 ];\n    > opts = { 'k': -2, 'returns': '*' };\n    > vals = find( data, opts, condition )\n    [ [ 3, 60 ], [ 2, 50 ] ]\n\n","flattenArray":"\nflattenArray( arr[, options] )\n    Flattens an array.\n\n    Parameters\n    ----------\n    arr: Array\n        Input array.\n\n    options: Object (optional)\n        Options.\n\n    options.depth: integer (optional)\n        Maximum depth to flatten.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to deep copy array elements. Default: false.\n\n    Returns\n    -------\n    out: Array\n        Flattened array.\n\n    Examples\n    --------\n    > var arr = [ 1, [ 2, [ 3, [ 4, [ 5 ], 6 ], 7 ], 8 ], 9 ];\n    > var out = flattenArray( arr )\n    [ 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n\n    // Set the maximum depth:\n    > arr = [ 1, [ 2, [ 3, [ 4, [ 5 ], 6 ], 7 ], 8 ], 9 ];\n    > out = flattenArray( arr, { 'depth': 2 } )\n    [ 1, 2, 3, [ 4, [ 5 ], 6 ], 7, 8, 9 ]\n    > var bool = ( arr[ 1 ][ 1 ][ 1 ] === out[ 3 ] )\n    true\n\n    // Deep copy:\n    > arr = [ 1, [ 2, [ 3, [ 4, [ 5 ], 6 ], 7 ], 8 ], 9 ];\n    > out = flattenArray( arr, { 'depth': 2, 'copy': true } )\n    [ 1, 2, 3, [ 4, [ 5 ], 6 ], 7, 8, 9 ]\n    > bool = ( arr[ 1 ][ 1 ][ 1 ] === out[ 3 ] )\n    false\n\n\nflattenArray.factory( dims[, options] )\n    Returns a function for flattening arrays having specified dimensions.\n\n    The returned function does not validate that input arrays actually have the\n    specified dimensions.\n\n    Parameters\n    ----------\n    dims: Array<integer>\n        Dimensions.\n\n    options: Object (optional)\n        Options.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to deep copy array elements. Default: false.\n\n    Returns\n    -------\n    fcn: Function\n        Flatten function.\n\n    Examples\n    --------\n    > var flatten = flattenArray.factory( [ 2, 2 ], {\n    ...     'copy': false\n    ... });\n    > var out = flatten( [ [ 1, 2 ], [ 3, 4 ] ] )\n    [ 1, 2, 3, 4 ]\n    > out = flatten( [ [ 5, 6 ], [ 7, 8 ] ] )\n    [ 5, 6, 7, 8 ]\n\n    See Also\n    --------\n    flattenObject\n","flattenArray.factory":"\nflattenArray.factory( dims[, options] )\n    Returns a function for flattening arrays having specified dimensions.\n\n    The returned function does not validate that input arrays actually have the\n    specified dimensions.\n\n    Parameters\n    ----------\n    dims: Array<integer>\n        Dimensions.\n\n    options: Object (optional)\n        Options.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to deep copy array elements. Default: false.\n\n    Returns\n    -------\n    fcn: Function\n        Flatten function.\n\n    Examples\n    --------\n    > var flatten = flattenArray.factory( [ 2, 2 ], {\n    ...     'copy': false\n    ... });\n    > var out = flatten( [ [ 1, 2 ], [ 3, 4 ] ] )\n    [ 1, 2, 3, 4 ]\n    > out = flatten( [ [ 5, 6 ], [ 7, 8 ] ] )\n    [ 5, 6, 7, 8 ]\n\n    See Also\n    --------\n    flattenObject\n","flattenObject":"\nflattenObject( obj[, options] )\n    Flattens an object.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Object to flatten.\n\n    options: Object (optional)\n        Options.\n\n    options.depth: integer (optional)\n        Maximum depth to flatten.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to deep copy. Default: false.\n\n    options.flattenArrays: boolean (optional)\n        Boolean indicating whether to flatten arrays. Default: false.\n\n    options.delimiter: string (optional)\n        Key path delimiter. Default: '.'.\n\n    Returns\n    -------\n    out: ObjectLike\n        Flattened object.\n\n    Examples\n    --------\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var out = flattenObject( obj )\n    { 'a.b.c': 'd' }\n\n    // Set the `depth` option to flatten to a specified depth:\n    > obj = { 'a': { 'b': { 'c': 'd' } } };\n    > out = flattenObject( obj, { 'depth': 1 } )\n    { 'a.b': { 'c': 'd' } }\n    > var bool = ( obj.a.b === out[ 'a.b' ] )\n    true\n\n    // Set the `delimiter` option:\n    > obj = { 'a': { 'b': { 'c': 'd' } } };\n    > out = flattenObject( obj, { 'delimiter': '-|-' } )\n    { 'a-|-b-|-c': 'd' }\n\n    // Flatten arrays:\n    > obj = { 'a': { 'b': [ 1, 2, 3 ] } };\n    > out = flattenObject( obj, { 'flattenArrays': true } )\n    { 'a.b.0': 1, 'a.b.1': 2, 'a.b.2': 3 }\n\n\nflattenObject.factory( [options] )\n    Returns a function to flatten an object.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.depth: integer (optional)\n        Maximum depth to flatten.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to deep copy. Default: false.\n\n    options.flattenArrays: boolean (optional)\n        Boolean indicating whether to flatten arrays. Default: false.\n\n    options.delimiter: string (optional)\n        Key path delimiter. Default: '.'.\n\n    Returns\n    -------\n    fcn: Function\n        Flatten function.\n\n    Examples\n    --------\n    > var flatten = flattenObject.factory({\n    ...     'depth': 1,\n    ...     'copy': true,\n    ...     'delimiter': '|'\n    ... });\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var out = flatten( obj )\n    { 'a|b': { 'c': 'd' } }\n\n    See Also\n    --------\n    flattenArray\n","flattenObject.factory":"\nflattenObject.factory( [options] )\n    Returns a function to flatten an object.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.depth: integer (optional)\n        Maximum depth to flatten.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to deep copy. Default: false.\n\n    options.flattenArrays: boolean (optional)\n        Boolean indicating whether to flatten arrays. Default: false.\n\n    options.delimiter: string (optional)\n        Key path delimiter. Default: '.'.\n\n    Returns\n    -------\n    fcn: Function\n        Flatten function.\n\n    Examples\n    --------\n    > var flatten = flattenObject.factory({\n    ...     'depth': 1,\n    ...     'copy': true,\n    ...     'delimiter': '|'\n    ... });\n    > var obj = { 'a': { 'b': { 'c': 'd' } } };\n    > var out = flatten( obj )\n    { 'a|b': { 'c': 'd' } }\n\n    See Also\n    --------\n    flattenArray\n","flignerTest":"\nflignerTest( ...x[, options] )\n    Computes the Fligner-Killeen test for equal variances.\n\n    Parameters\n    ----------\n    x: ...Array\n        Measured values.\n\n    options: Object (optional)\n        Options.\n\n    options.alpha: number (optional)\n        Number in the interval `[0,1]` giving the significance level of the\n        hypothesis test. Default: `0.05`.\n\n    options.groups: Array (optional)\n        Array of group indicators.\n\n    Returns\n    -------\n    out: Object\n        Test result object.\n\n    out.alpha: number\n        Significance level.\n\n    out.rejected: boolean\n        Test decision.\n\n    out.pValue: number\n        p-value of the test.\n\n    out.statistic: number\n        Value of test statistic.\n\n    out.method: string\n        Name of test.\n\n    out.df: Object\n        Degrees of freedom.\n\n    out.print: Function\n        Function to print formatted output.\n\n    Examples\n    --------\n    // Data from Hollander & Wolfe (1973), p. 116:\n    > var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n    > var y = [ 3.8, 2.7, 4.0, 2.4 ];\n    > var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n\n    > var out = flignerTest( x, y, z )\n\n    > var arr = [ 2.9, 3.0, 2.5, 2.6, 3.2,\n    ...     3.8, 2.7, 4.0, 2.4,\n    ...     2.8, 3.4, 3.7, 2.2, 2.0\n    ... ];\n    > var groups = [\n    ...     'a', 'a', 'a', 'a', 'a',\n    ...     'b', 'b', 'b', 'b',\n    ...     'c', 'c', 'c', 'c', 'c'\n    ... ];\n    > out = flignerTest( arr, { 'groups': groups })\n\n    See Also\n    --------\n    bartlettTest\n","FLOAT16_CBRT_EPS":"\nFLOAT16_CBRT_EPS\n    Cube root of half-precision floating-point epsilon.\n\n    Examples\n    --------\n    > FLOAT16_CBRT_EPS\n    0.09921256574801247\n\n    See Also\n    --------\n    FLOAT16_EPS, FLOAT16_SQRT_EPS, FLOAT32_CBRT_EPS, CBRT_EPS\n","FLOAT16_EPS":"\nFLOAT16_EPS\n    Difference between one and the smallest value greater than one that can be\n    represented as a half-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT16_EPS\n    0.0009765625\n\n    See Also\n    --------\n    FLOAT32_EPS, EPS\n","FLOAT16_EXPONENT_BIAS":"\nFLOAT16_EXPONENT_BIAS\n    The bias of a half-precision floating-point number's exponent.\n\n    Examples\n    --------\n    > FLOAT16_EXPONENT_BIAS\n    15\n\n    See Also\n    --------\n    FLOAT32_EXPONENT_BIAS, FLOAT64_EXPONENT_BIAS\n","FLOAT16_MAX":"\nFLOAT16_MAX\n    Maximum half-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT16_MAX\n    65504.0\n\n    See Also\n    --------\n    FLOAT32_MAX, FLOAT64_MAX\n","FLOAT16_MAX_SAFE_INTEGER":"\nFLOAT16_MAX_SAFE_INTEGER\n    Maximum safe half-precision floating-point integer.\n\n    The maximum safe half-precision floating-point integer is given by\n    `2^11 - 1`.\n\n    Examples\n    --------\n    > FLOAT16_MAX_SAFE_INTEGER\n    2047\n\n    See Also\n    --------\n    FLOAT16_MIN_SAFE_INTEGER, FLOAT32_MAX_SAFE_INTEGER, FLOAT64_MAX_SAFE_INTEGER\n","FLOAT16_MIN_SAFE_INTEGER":"\nFLOAT16_MIN_SAFE_INTEGER\n    Minimum safe half-precision floating-point integer.\n\n    The minimum safe half-precision floating-point integer is given by\n    `-(2^11 - 1)`.\n\n    Examples\n    --------\n    > FLOAT16_MIN_SAFE_INTEGER\n    -2047\n\n    See Also\n    --------\n    FLOAT16_MAX_SAFE_INTEGER, FLOAT32_MIN_SAFE_INTEGER, FLOAT64_MIN_SAFE_INTEGER\n","FLOAT16_NINF":"\nFLOAT16_NINF\n    Half-precision floating-point negative infinity.\n\n    Examples\n    --------\n    > FLOAT16_NINF\n    -Infinity\n\n    See Also\n    --------\n    FLOAT16_PINF, FLOAT32_NINF, NINF\n","FLOAT16_NUM_BYTES":"\nFLOAT16_NUM_BYTES\n    Size (in bytes) of a half-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT16_NUM_BYTES\n    2\n\n    See Also\n    --------\n    FLOAT32_NUM_BYTES, FLOAT64_NUM_BYTES\n","FLOAT16_PINF":"\nFLOAT16_PINF\n    Half-precision floating-point positive infinity.\n\n    Examples\n    --------\n    > FLOAT16_PINF\n    Infinity\n\n    See Also\n    --------\n    FLOAT16_NINF, FLOAT32_PINF, PINF\n","FLOAT16_PRECISION":"\nFLOAT16_PRECISION\n    Effective number of bits in the significand of a half-precision floating-\n    point number.\n\n    The effective number of bits is `10` significand bits plus `1` hidden bit.\n\n    Examples\n    --------\n    > FLOAT16_PRECISION\n    11\n\n    See Also\n    --------\n    FLOAT32_PRECISION, FLOAT64_PRECISION\n","FLOAT16_SMALLEST_NORMAL":"\nFLOAT16_SMALLEST_NORMAL\n    Smallest positive normalized half-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT16_SMALLEST_NORMAL\n    6.103515625e-5\n\n    See Also\n    --------\n    FLOAT16_SMALLEST_SUBNORMAL, FLOAT32_SMALLEST_NORMAL, FLOAT64_SMALLEST_NORMAL\n","FLOAT16_SMALLEST_SUBNORMAL":"\nFLOAT16_SMALLEST_SUBNORMAL\n    Smallest positive denormalized half-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT16_SMALLEST_SUBNORMAL\n    5.960464477539063e-8\n\n    See Also\n    --------\n    FLOAT16_SMALLEST_NORMAL, FLOAT32_SMALLEST_SUBNORMAL, FLOAT64_SMALLEST_SUBNORMAL\n","FLOAT16_SQRT_EPS":"\nFLOAT16_SQRT_EPS\n    Square root of half-precision floating-point epsilon.\n\n    Examples\n    --------\n    > FLOAT16_SQRT_EPS\n    0.03125\n\n    See Also\n    --------\n    FLOAT16_EPS, FLOAT32_SQRT_EPS, SQRT_EPS\n","FLOAT32_CBRT_EPS":"\nFLOAT32_CBRT_EPS\n    Cube root of single-precision floating-point epsilon.\n\n    Examples\n    --------\n    > FLOAT32_CBRT_EPS\n    0.004921566601151848\n\n    See Also\n    --------\n    FLOAT32_EPS, FLOAT32_SQRT_EPS, CBRT_EPS\n","FLOAT32_EPS":"\nFLOAT32_EPS\n    Difference between one and the smallest value greater than one that can be\n    represented as a single-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT32_EPS\n    1.1920928955078125e-7\n\n    See Also\n    --------\n    EPS\n","FLOAT32_EXPONENT_BIAS":"\nFLOAT32_EXPONENT_BIAS\n    The bias of a single-precision floating-point number's exponent.\n\n    Examples\n    --------\n    > FLOAT32_EXPONENT_BIAS\n    127\n\n    See Also\n    --------\n    FLOAT16_EXPONENT_BIAS, FLOAT64_EXPONENT_BIAS\n","FLOAT32_MAX":"\nFLOAT32_MAX\n    Maximum single-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT32_MAX\n    3.4028234663852886e+38\n\n    See Also\n    --------\n    FLOAT16_MAX, FLOAT64_MAX\n","FLOAT32_MAX_SAFE_INTEGER":"\nFLOAT32_MAX_SAFE_INTEGER\n    Maximum safe single-precision floating-point integer.\n\n    The maximum safe single-precision floating-point integer is given by\n    `2^24 - 1`.\n\n    Examples\n    --------\n    > FLOAT32_MAX_SAFE_INTEGER\n    16777215\n\n    See Also\n    --------\n    FLOAT16_MAX_SAFE_INTEGER, FLOAT32_MIN_SAFE_INTEGER, FLOAT64_MAX_SAFE_INTEGER\n","FLOAT32_MIN_SAFE_INTEGER":"\nFLOAT32_MIN_SAFE_INTEGER\n    Minimum safe single-precision floating-point integer.\n\n    The minimum safe single-precision floating-point integer is given by\n    `-(2^24 - 1)`.\n\n    Examples\n    --------\n    > FLOAT32_MIN_SAFE_INTEGER\n    -16777215\n\n    See Also\n    --------\n    FLOAT16_MIN_SAFE_INTEGER, FLOAT32_MAX_SAFE_INTEGER, FLOAT64_MIN_SAFE_INTEGER\n","FLOAT32_NINF":"\nFLOAT32_NINF\n    Single-precision floating-point negative infinity.\n\n    Examples\n    --------\n    > FLOAT32_NINF\n    -Infinity\n\n    See Also\n    --------\n    FLOAT32_PINF, NINF\n","FLOAT32_NUM_BYTES":"\nFLOAT32_NUM_BYTES\n    Size (in bytes) of a single-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT32_NUM_BYTES\n    4\n\n    See Also\n    --------\n    FLOAT16_NUM_BYTES, FLOAT64_NUM_BYTES\n","FLOAT32_PINF":"\nFLOAT32_PINF\n    Single-precision floating-point positive infinity.\n\n    Examples\n    --------\n    > FLOAT32_PINF\n    Infinity\n\n    See Also\n    --------\n    FLOAT32_NINF, PINF\n","FLOAT32_PRECISION":"\nFLOAT32_PRECISION\n    Effective number of bits in the significand of a single-precision floating-\n    point number.\n\n    The effective number of bits is `23` significand bits plus `1` hidden bit.\n\n    Examples\n    --------\n    > FLOAT32_PRECISION\n    24\n\n    See Also\n    --------\n    FLOAT16_PRECISION, FLOAT64_PRECISION\n","FLOAT32_SMALLEST_NORMAL":"\nFLOAT32_SMALLEST_NORMAL\n    Smallest positive normalized single-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT32_SMALLEST_NORMAL\n    1.1754943508222875e-38\n\n    See Also\n    --------\n    FLOAT32_SMALLEST_SUBNORMAL, FLOAT64_SMALLEST_NORMAL\n","FLOAT32_SMALLEST_SUBNORMAL":"\nFLOAT32_SMALLEST_SUBNORMAL\n    Smallest positive denormalized single-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT32_SMALLEST_SUBNORMAL\n    1.401298464324817e-45\n\n    See Also\n    --------\n    FLOAT32_SMALLEST_NORMAL, FLOAT64_SMALLEST_SUBNORMAL\n","FLOAT32_SQRT_EPS":"\nFLOAT32_SQRT_EPS\n    Square root of single-precision floating-point epsilon.\n\n    Examples\n    --------\n    > FLOAT32_SQRT_EPS\n    0.0003452669770922512\n\n    See Also\n    --------\n    FLOAT32_EPS, SQRT_EPS\n","Float32Array":"\nFloat32Array()\n    A typed array constructor which returns a typed array representing an array\n    of single-precision floating-point numbers in the platform byte order.\n\n    Returns\n    -------\n    out: Float32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Float32Array()\n    <Float32Array>\n\n\nFloat32Array( length )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    Returns\n    -------\n    out: Float32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Float32Array( 5 )\n    <Float32Array>[ 0.0, 0.0, 0.0, 0.0, 0.0 ]\n\n\nFloat32Array( typedarray )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    Returns\n    -------\n    out: Float32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Float64Array( [ 0.5, 0.5, 0.5 ] );\n    > var arr2 = new Float32Array( arr1 )\n    <Float32Array>[ 0.5, 0.5, 0.5 ]\n\n\nFloat32Array( obj )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    Returns\n    -------\n    out: Float32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 0.5, 0.5, 0.5 ];\n    > var arr2 = new Float32Array( arr1 )\n    <Float32Array>[ 0.5, 0.5, 0.5 ]\n\n\nFloat32Array( buffer[, byteOffset[, length]] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Float32Array\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 16 );\n    > var arr = new Float32Array( buf, 0, 4 )\n    <Float32Array>[ 0.0, 0.0, 0.0, 0.0 ]\n\n\nFloat32Array.from( src[, map[, thisArg]] )\n    Creates a new typed array from an array-like object or an iterable.\n\n    A callback is provided the following arguments:\n\n    - value: source value.\n    - index: source index.\n\n    Parameters\n    ----------\n    src: ArrayLike|Iterable\n        Source of array elements.\n\n    map: Function (optional)\n        Callback to invoke for each source element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Float32Array\n        A typed array.\n\n    Examples\n    --------\n    > function mapFcn( v ) { return v * 2.0; };\n    > var arr = Float32Array.from( [ 1.0, -1.0 ], mapFcn )\n    <Float32Array>[ 2.0, -2.0 ]\n\n\nFloat32Array.of( element0[, element1[, ...elementN]] )\n    Creates a new typed array from a variable number of arguments.\n\n    Parameters\n    ----------\n    element0: number\n        Array element.\n\n    element1: number (optional)\n        Array element.\n\n    elementN: number (optional)\n        Array elements.\n\n    Returns\n    -------\n    out: Float32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = Float32Array.of( 2.0, -2.0 )\n    <Float32Array>[ 2.0, -2.0 ]\n\n\nFloat32Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Float32Array.BYTES_PER_ELEMENT\n    4\n\n\nFloat32Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Float32Array.name\n    'Float32Array'\n\n\nFloat32Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Float32Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n\nFloat32Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Float32Array( 5 );\n    > arr.byteLength\n    20\n\n\nFloat32Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Float32Array( 5 );\n    > arr.byteOffset\n    0\n\n\nFloat32Array.prototype.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > var arr = new Float32Array( 5 );\n    > arr.BYTES_PER_ELEMENT\n    4\n\n\nFloat32Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Float32Array( 5 );\n    > arr.length\n    5\n\n\nFloat32Array.prototype.copyWithin( target, start[, end] )\n    Copies a sequence of elements within the array starting at `start` and\n    ending at `end` (non-inclusive) to the position starting at `target`.\n\n    Parameters\n    ----------\n    target: integer\n        Target start index position.\n\n    start: integer\n        Source start index position.\n\n    end: integer (optional)\n        Source end index position. Default: out.length.\n\n    Returns\n    -------\n    out: Float32Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 2.0, -2.0, 1.0, -1.0, 1.0 ] );\n    > arr.copyWithin( 3, 0, 2 );\n    > arr[ 3 ]\n    2.0\n    > arr[ 4 ]\n    -2.0\n\n\nFloat32Array.prototype.entries()\n    Returns an iterator for iterating over array key-value pairs.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array key-value pairs.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, -1.0 ] );\n    > it = arr.entries();\n    > it.next().value\n    [ 0, 1.0 ]\n    > it.next().value\n    [ 1, -1.0 ]\n    > it.next().done\n    true\n\n\nFloat32Array.prototype.every( predicate[, thisArg] )\n    Tests whether all array elements pass a test implemented by a predicate\n    function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, an array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether all array elements pass.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, -1.0 ] );\n    > function predicate( v ) { return ( v >= 0.0 ); };\n    > arr.every( predicate )\n    false\n\n\nFloat32Array.prototype.fill( value[, start[, end]] )\n    Fills an array from a start index to an end index (non-inclusive) with a\n    provided value.\n\n    Parameters\n    ----------\n    value: number\n        Fill value.\n\n    start: integer (optional)\n        Start index. If less than zero, the start index is resolved relative to\n        the last array element. Default: 0.\n\n    end: integer (optional)\n        End index (non-inclusive). If less than zero, the end index is resolved\n        relative to the last array element. Default: out.length.\n\n    Returns\n    -------\n    out: Float32Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, -1.0 ] );\n    > arr.fill( 2.0 );\n    > arr[ 0 ]\n    2.0\n    > arr[ 1 ]\n    2.0\n\n\nFloat32Array.prototype.filter( predicate[, thisArg] )\n    Creates a new array which includes those elements for which a predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    If a predicate function does not return a truthy value for any array\n    element, the method returns `null`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which filters array elements. If a predicate function\n        returns a truthy value, an array element is included in the output\n        array; otherwise, an array element is not included in the output array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Float32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Float32Array( [ 1.0, 0.0, -1.0 ] );\n    > function predicate( v ) { return ( v >= 0.0 ); };\n    > var arr2 = arr1.filter( predicate );\n    > arr2.length\n    2\n\n\nFloat32Array.prototype.find( predicate[, thisArg] )\n    Returns the first array element for which a provided predicate function\n    returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `undefined`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    value: number|undefined\n        Array element.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] );\n    > function predicate( v ) { return ( v < 0.0 ); };\n    > var v = arr.find( predicate )\n    -1.0\n\n\nFloat32Array.prototype.findIndex( predicate[, thisArg] )\n    Returns the index of the first array element for which a provided predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `-1`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] );\n    > function predicate( v ) { return ( v < 0.0 ); };\n    > var idx = arr.findIndex( predicate )\n    2\n\n\nFloat32Array.prototype.forEach( fcn[, thisArg] )\n    Invokes a callback for each array element.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to invoke for each array element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] );\n    > var str = ' ';\n    > function fcn( v, i ) { str += i + ':' + v + ' '; };\n    > arr.forEach( fcn );\n    > str\n    ' 0:1 1:0 2:-1 '\n\n\nFloat32Array.prototype.includes( searchElement[, fromIndex] )\n    Returns a boolean indicating whether an array includes a search element.\n\n    The method does not distinguish between signed and unsigned zero.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether an array includes a search element.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] );\n    > var bool = arr.includes( 2.0 )\n    false\n    > bool = arr.includes( -1.0 )\n    true\n\n\nFloat32Array.prototype.indexOf( searchElement[, fromIndex] )\n    Returns the index of the first array element strictly equal to a search\n    element.\n\n    The method does not distinguish between signed and unsigned zero.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] );\n    > var idx = arr.indexOf( 2.0 )\n    -1\n    > idx = arr.indexOf( -1.0 )\n    2\n\n\nFloat32Array.prototype.join( [separator] )\n    Serializes an array by joining all array elements as a string.\n\n    Parameters\n    ----------\n    separator: string (optional)\n        String delineating array elements. Default: ','.\n\n    Returns\n    -------\n    str: string\n        Array serialized as a string.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] );\n    > arr.join( '|' )\n    '1|0|-1'\n\n\nFloat32Array.prototype.keys()\n    Returns an iterator for iterating over array keys.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array keys.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, -1.0 ] );\n    > it = arr.keys();\n    > it.next().value\n    0\n    > it.next().value\n    1\n    > it.next().done\n    true\n\n\nFloat32Array.prototype.lastIndexOf( searchElement[, fromIndex] )\n    Returns the index of the last array element strictly equal to a search\n    element.\n\n    The method iterates from the last array element to the first array element.\n\n    The method does not distinguish between signed and unsigned zero.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: -1.\n\n    Returns\n    -------\n    idx: integer\n        array index.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, 0.0, -1.0, 0.0, 1.0 ] );\n    > var idx = arr.lastIndexOf( 2.0 )\n    -1\n    > idx = arr.lastIndexOf( 0.0 )\n    3\n\n\nFloat32Array.prototype.map( fcn[, thisArg] )\n    Maps each array element to an element in a new typed array.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function which maps array elements to elements in the new array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Float32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Float32Array( [ 1.0, 0.0, -1.0 ] );\n    > function fcn( v ) { return v * 2.0; };\n    > var arr2 = arr1.map( fcn );\n    <Float32Array>[ 2.0, 0.0, -2.0 ]\n\n\nFloat32Array.prototype.reduce( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the first array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the first array element as the first argument and the second array\n    element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduce( fcn, 0.0 )\n    2.0\n\n\nFloat32Array.prototype.reduceRight( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result, iterating from right to left.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the last array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the last array element as the first argument and the second-to-last\n    array element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduceRight( fcn, 0.0 )\n    2.0\n\n\nFloat32Array.prototype.reverse()\n    Reverses an array *in-place*.\n\n    This method mutates the array on which the method is invoked.\n\n    Returns\n    -------\n    out: Float32Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] )\n    <Float32Array>[ 1.0, 0.0, -1.0 ]\n    > arr.reverse()\n    <Float32Array>[ -1.0, 0.0, 1.0 ]\n\n\nFloat32Array.prototype.set( arr[, offset] )\n    Sets array elements.\n\n    Parameters\n    ----------\n    arr: ArrayLike\n        Source array containing array values to set.\n\n    offset: integer (optional)\n        Array index at which to start writing values. Default: 0.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] );\n    > arr.set( [ -2.0, 2.0 ], 1 );\n    > arr[ 1 ]\n    -2.0\n    > arr[ 2 ]\n    2.0\n\n\nFloat32Array.prototype.slice( [begin[, end]] )\n    Copies array elements to a new array with the same underlying data type as\n    the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns `null`.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Float32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Float32Array( [ 1.0, 0.0, -1.0 ] );\n    > var arr2 = arr1.slice( 1 );\n    > arr2.length\n    2\n    > arr2[ 0 ]\n    0.0\n    > arr2[ 1 ]\n    -1.0\n\n\nFloat32Array.prototype.some( predicate[, thisArg] )\n    Tests whether at least one array element passes a test implemented by a\n    predicate function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, a array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether at least one array element passes.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, -1.0 ] );\n    > function predicate( v ) { return ( v < 0.0 ); };\n    > arr.some( predicate )\n    true\n\n\nFloat32Array.prototype.sort( [compareFunction] )\n    Sorts an array *in-place*.\n\n    The comparison function is provided two array elements per invocation: `a`\n    and `b`.\n\n    The comparison function return value determines the sort order as follows:\n\n    - If the comparison function returns a value less than zero, then the method\n    sorts `a` to an index lower than `b` (i.e., `a` should come *before* `b`).\n\n    - If the comparison function returns a value greater than zero, then the\n    method sorts `a` to an index higher than `b` (i.e., `b` should come *before*\n    `a`).\n\n    - If the comparison function returns zero, then the relative order of `a`\n    and `b` should remain unchanged.\n\n    This method mutates the array on which the method is invoked.\n\n    Parameters\n    ----------\n    compareFunction: Function (optional)\n        Function which specifies the sort order. The default sort order is\n        ascending order.\n\n    Returns\n    -------\n    out: Float32Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, -1.0, 0.0, 2.0, -2.0 ] );\n    > arr.sort()\n    <Float32Array>[ -2.0, -1.0, 0.0, 1.0, 2.0 ]\n\n\nFloat32Array.prototype.subarray( [begin[, end]] )\n    Creates a new typed array over the same underlying ArrayBuffer and with the\n    same underlying data type as the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns an empty typed array.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Float32Array\n        A new typed array view.\n\n    Examples\n    --------\n    > var arr1 = new Float32Array( [ 1.0, -1.0, 0.0, 2.0, -2.0 ] );\n    > var arr2 = arr1.subarray( 2 )\n    <Float32Array>[ 0.0, 2.0, -2.0 ]\n\n\nFloat32Array.prototype.toLocaleString( [locales[, options]] )\n    Serializes an array as a locale-specific string.\n\n    Parameters\n    ----------\n    locales: string|Array<string> (optional)\n        A BCP 47 language tag, or an array of such tags.\n\n    options: Object (optional)\n        Options.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, -1.0, 0.0 ] );\n    > arr.toLocaleString()\n    '1,-1,0'\n\n\nFloat32Array.prototype.toString()\n    Serializes an array as a string.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, -1.0, 0.0 ] );\n    > arr.toString()\n    '1,-1,0'\n\n\nFloat32Array.prototype.values()\n    Returns an iterator for iterating over array elements.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array elements.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, -1.0 ] );\n    > it = arr.values();\n    > it.next().value\n    1.0\n    > it.next().value\n    -1.0\n    > it.next().done\n    true\n\n\n    See Also\n    --------\n    ArrayBuffer, Float64Array, Int16Array, Int32Array, Int8Array, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray\n","Float32Array.from":"\nFloat32Array.from( src[, map[, thisArg]] )\n    Creates a new typed array from an array-like object or an iterable.\n\n    A callback is provided the following arguments:\n\n    - value: source value.\n    - index: source index.\n\n    Parameters\n    ----------\n    src: ArrayLike|Iterable\n        Source of array elements.\n\n    map: Function (optional)\n        Callback to invoke for each source element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Float32Array\n        A typed array.\n\n    Examples\n    --------\n    > function mapFcn( v ) { return v * 2.0; };\n    > var arr = Float32Array.from( [ 1.0, -1.0 ], mapFcn )\n    <Float32Array>[ 2.0, -2.0 ]\n\n","Float32Array.of":"\nFloat32Array.of( element0[, element1[, ...elementN]] )\n    Creates a new typed array from a variable number of arguments.\n\n    Parameters\n    ----------\n    element0: number\n        Array element.\n\n    element1: number (optional)\n        Array element.\n\n    elementN: number (optional)\n        Array elements.\n\n    Returns\n    -------\n    out: Float32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = Float32Array.of( 2.0, -2.0 )\n    <Float32Array>[ 2.0, -2.0 ]\n\n","Float32Array.BYTES_PER_ELEMENT":"\nFloat32Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Float32Array.BYTES_PER_ELEMENT\n    4\n\n","Float32Array.name":"\nFloat32Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Float32Array.name\n    'Float32Array'\n\n","Float32Array.prototype.buffer":"\nFloat32Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Float32Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n","Float32Array.prototype.byteLength":"\nFloat32Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Float32Array( 5 );\n    > arr.byteLength\n    20\n\n","Float32Array.prototype.byteOffset":"\nFloat32Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Float32Array( 5 );\n    > arr.byteOffset\n    0\n\n","Float32Array.prototype.BYTES_PER_ELEMENT":"\nFloat32Array.prototype.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > var arr = new Float32Array( 5 );\n    > arr.BYTES_PER_ELEMENT\n    4\n\n","Float32Array.prototype.length":"\nFloat32Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Float32Array( 5 );\n    > arr.length\n    5\n\n","Float32Array.prototype.copyWithin":"\nFloat32Array.prototype.copyWithin( target, start[, end] )\n    Copies a sequence of elements within the array starting at `start` and\n    ending at `end` (non-inclusive) to the position starting at `target`.\n\n    Parameters\n    ----------\n    target: integer\n        Target start index position.\n\n    start: integer\n        Source start index position.\n\n    end: integer (optional)\n        Source end index position. Default: out.length.\n\n    Returns\n    -------\n    out: Float32Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 2.0, -2.0, 1.0, -1.0, 1.0 ] );\n    > arr.copyWithin( 3, 0, 2 );\n    > arr[ 3 ]\n    2.0\n    > arr[ 4 ]\n    -2.0\n\n","Float32Array.prototype.entries":"\nFloat32Array.prototype.entries()\n    Returns an iterator for iterating over array key-value pairs.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array key-value pairs.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, -1.0 ] );\n    > it = arr.entries();\n    > it.next().value\n    [ 0, 1.0 ]\n    > it.next().value\n    [ 1, -1.0 ]\n    > it.next().done\n    true\n\n","Float32Array.prototype.every":"\nFloat32Array.prototype.every( predicate[, thisArg] )\n    Tests whether all array elements pass a test implemented by a predicate\n    function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, an array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether all array elements pass.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, -1.0 ] );\n    > function predicate( v ) { return ( v >= 0.0 ); };\n    > arr.every( predicate )\n    false\n\n","Float32Array.prototype.fill":"\nFloat32Array.prototype.fill( value[, start[, end]] )\n    Fills an array from a start index to an end index (non-inclusive) with a\n    provided value.\n\n    Parameters\n    ----------\n    value: number\n        Fill value.\n\n    start: integer (optional)\n        Start index. If less than zero, the start index is resolved relative to\n        the last array element. Default: 0.\n\n    end: integer (optional)\n        End index (non-inclusive). If less than zero, the end index is resolved\n        relative to the last array element. Default: out.length.\n\n    Returns\n    -------\n    out: Float32Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, -1.0 ] );\n    > arr.fill( 2.0 );\n    > arr[ 0 ]\n    2.0\n    > arr[ 1 ]\n    2.0\n\n","Float32Array.prototype.filter":"\nFloat32Array.prototype.filter( predicate[, thisArg] )\n    Creates a new array which includes those elements for which a predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    If a predicate function does not return a truthy value for any array\n    element, the method returns `null`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which filters array elements. If a predicate function\n        returns a truthy value, an array element is included in the output\n        array; otherwise, an array element is not included in the output array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Float32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Float32Array( [ 1.0, 0.0, -1.0 ] );\n    > function predicate( v ) { return ( v >= 0.0 ); };\n    > var arr2 = arr1.filter( predicate );\n    > arr2.length\n    2\n\n","Float32Array.prototype.find":"\nFloat32Array.prototype.find( predicate[, thisArg] )\n    Returns the first array element for which a provided predicate function\n    returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `undefined`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    value: number|undefined\n        Array element.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] );\n    > function predicate( v ) { return ( v < 0.0 ); };\n    > var v = arr.find( predicate )\n    -1.0\n\n","Float32Array.prototype.findIndex":"\nFloat32Array.prototype.findIndex( predicate[, thisArg] )\n    Returns the index of the first array element for which a provided predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `-1`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] );\n    > function predicate( v ) { return ( v < 0.0 ); };\n    > var idx = arr.findIndex( predicate )\n    2\n\n","Float32Array.prototype.forEach":"\nFloat32Array.prototype.forEach( fcn[, thisArg] )\n    Invokes a callback for each array element.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to invoke for each array element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] );\n    > var str = ' ';\n    > function fcn( v, i ) { str += i + ':' + v + ' '; };\n    > arr.forEach( fcn );\n    > str\n    ' 0:1 1:0 2:-1 '\n\n","Float32Array.prototype.includes":"\nFloat32Array.prototype.includes( searchElement[, fromIndex] )\n    Returns a boolean indicating whether an array includes a search element.\n\n    The method does not distinguish between signed and unsigned zero.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether an array includes a search element.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] );\n    > var bool = arr.includes( 2.0 )\n    false\n    > bool = arr.includes( -1.0 )\n    true\n\n","Float32Array.prototype.indexOf":"\nFloat32Array.prototype.indexOf( searchElement[, fromIndex] )\n    Returns the index of the first array element strictly equal to a search\n    element.\n\n    The method does not distinguish between signed and unsigned zero.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] );\n    > var idx = arr.indexOf( 2.0 )\n    -1\n    > idx = arr.indexOf( -1.0 )\n    2\n\n","Float32Array.prototype.join":"\nFloat32Array.prototype.join( [separator] )\n    Serializes an array by joining all array elements as a string.\n\n    Parameters\n    ----------\n    separator: string (optional)\n        String delineating array elements. Default: ','.\n\n    Returns\n    -------\n    str: string\n        Array serialized as a string.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] );\n    > arr.join( '|' )\n    '1|0|-1'\n\n","Float32Array.prototype.keys":"\nFloat32Array.prototype.keys()\n    Returns an iterator for iterating over array keys.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array keys.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, -1.0 ] );\n    > it = arr.keys();\n    > it.next().value\n    0\n    > it.next().value\n    1\n    > it.next().done\n    true\n\n","Float32Array.prototype.lastIndexOf":"\nFloat32Array.prototype.lastIndexOf( searchElement[, fromIndex] )\n    Returns the index of the last array element strictly equal to a search\n    element.\n\n    The method iterates from the last array element to the first array element.\n\n    The method does not distinguish between signed and unsigned zero.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: -1.\n\n    Returns\n    -------\n    idx: integer\n        array index.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, 0.0, -1.0, 0.0, 1.0 ] );\n    > var idx = arr.lastIndexOf( 2.0 )\n    -1\n    > idx = arr.lastIndexOf( 0.0 )\n    3\n\n","Float32Array.prototype.map":"\nFloat32Array.prototype.map( fcn[, thisArg] )\n    Maps each array element to an element in a new typed array.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function which maps array elements to elements in the new array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Float32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Float32Array( [ 1.0, 0.0, -1.0 ] );\n    > function fcn( v ) { return v * 2.0; };\n    > var arr2 = arr1.map( fcn );\n    <Float32Array>[ 2.0, 0.0, -2.0 ]\n\n","Float32Array.prototype.reduce":"\nFloat32Array.prototype.reduce( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the first array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the first array element as the first argument and the second array\n    element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduce( fcn, 0.0 )\n    2.0\n\n","Float32Array.prototype.reduceRight":"\nFloat32Array.prototype.reduceRight( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result, iterating from right to left.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the last array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the last array element as the first argument and the second-to-last\n    array element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduceRight( fcn, 0.0 )\n    2.0\n\n","Float32Array.prototype.reverse":"\nFloat32Array.prototype.reverse()\n    Reverses an array *in-place*.\n\n    This method mutates the array on which the method is invoked.\n\n    Returns\n    -------\n    out: Float32Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] )\n    <Float32Array>[ 1.0, 0.0, -1.0 ]\n    > arr.reverse()\n    <Float32Array>[ -1.0, 0.0, 1.0 ]\n\n","Float32Array.prototype.set":"\nFloat32Array.prototype.set( arr[, offset] )\n    Sets array elements.\n\n    Parameters\n    ----------\n    arr: ArrayLike\n        Source array containing array values to set.\n\n    offset: integer (optional)\n        Array index at which to start writing values. Default: 0.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, 0.0, -1.0 ] );\n    > arr.set( [ -2.0, 2.0 ], 1 );\n    > arr[ 1 ]\n    -2.0\n    > arr[ 2 ]\n    2.0\n\n","Float32Array.prototype.slice":"\nFloat32Array.prototype.slice( [begin[, end]] )\n    Copies array elements to a new array with the same underlying data type as\n    the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns `null`.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Float32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Float32Array( [ 1.0, 0.0, -1.0 ] );\n    > var arr2 = arr1.slice( 1 );\n    > arr2.length\n    2\n    > arr2[ 0 ]\n    0.0\n    > arr2[ 1 ]\n    -1.0\n\n","Float32Array.prototype.some":"\nFloat32Array.prototype.some( predicate[, thisArg] )\n    Tests whether at least one array element passes a test implemented by a\n    predicate function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, a array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether at least one array element passes.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, -1.0 ] );\n    > function predicate( v ) { return ( v < 0.0 ); };\n    > arr.some( predicate )\n    true\n\n","Float32Array.prototype.sort":"\nFloat32Array.prototype.sort( [compareFunction] )\n    Sorts an array *in-place*.\n\n    The comparison function is provided two array elements per invocation: `a`\n    and `b`.\n\n    The comparison function return value determines the sort order as follows:\n\n    - If the comparison function returns a value less than zero, then the method\n    sorts `a` to an index lower than `b` (i.e., `a` should come *before* `b`).\n\n    - If the comparison function returns a value greater than zero, then the\n    method sorts `a` to an index higher than `b` (i.e., `b` should come *before*\n    `a`).\n\n    - If the comparison function returns zero, then the relative order of `a`\n    and `b` should remain unchanged.\n\n    This method mutates the array on which the method is invoked.\n\n    Parameters\n    ----------\n    compareFunction: Function (optional)\n        Function which specifies the sort order. The default sort order is\n        ascending order.\n\n    Returns\n    -------\n    out: Float32Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, -1.0, 0.0, 2.0, -2.0 ] );\n    > arr.sort()\n    <Float32Array>[ -2.0, -1.0, 0.0, 1.0, 2.0 ]\n\n","Float32Array.prototype.subarray":"\nFloat32Array.prototype.subarray( [begin[, end]] )\n    Creates a new typed array over the same underlying ArrayBuffer and with the\n    same underlying data type as the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns an empty typed array.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Float32Array\n        A new typed array view.\n\n    Examples\n    --------\n    > var arr1 = new Float32Array( [ 1.0, -1.0, 0.0, 2.0, -2.0 ] );\n    > var arr2 = arr1.subarray( 2 )\n    <Float32Array>[ 0.0, 2.0, -2.0 ]\n\n","Float32Array.prototype.toLocaleString":"\nFloat32Array.prototype.toLocaleString( [locales[, options]] )\n    Serializes an array as a locale-specific string.\n\n    Parameters\n    ----------\n    locales: string|Array<string> (optional)\n        A BCP 47 language tag, or an array of such tags.\n\n    options: Object (optional)\n        Options.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, -1.0, 0.0 ] );\n    > arr.toLocaleString()\n    '1,-1,0'\n\n","Float32Array.prototype.toString":"\nFloat32Array.prototype.toString()\n    Serializes an array as a string.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, -1.0, 0.0 ] );\n    > arr.toString()\n    '1,-1,0'\n\n","Float32Array.prototype.values":"\nFloat32Array.prototype.values()\n    Returns an iterator for iterating over array elements.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array elements.\n\n    Examples\n    --------\n    > var arr = new Float32Array( [ 1.0, -1.0 ] );\n    > it = arr.values();\n    > it.next().value\n    1.0\n    > it.next().value\n    -1.0\n    > it.next().done\n    true\n\n\n    See Also\n    --------\n    ArrayBuffer, Float64Array, Int16Array, Int32Array, Int8Array, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray\n","FLOAT64_EXPONENT_BIAS":"\nFLOAT64_EXPONENT_BIAS\n    The bias of a double-precision floating-point number's exponent.\n\n    Examples\n    --------\n    > FLOAT64_EXPONENT_BIAS\n    1023\n\n    See Also\n    --------\n    FLOAT16_EXPONENT_BIAS, FLOAT32_EXPONENT_BIAS\n","FLOAT64_HIGH_WORD_EXPONENT_MASK":"\nFLOAT64_HIGH_WORD_EXPONENT_MASK\n    High word mask for the exponent of a double-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_HIGH_WORD_EXPONENT_MASK\n    2146435072\n    > base.toBinaryStringUint32( FLOAT64_HIGH_WORD_EXPONENT_MASK )\n    '01111111111100000000000000000000'\n\n    See Also\n    --------\n    FLOAT64_HIGH_WORD_SIGNIFICAND_MASK\n","FLOAT64_HIGH_WORD_SIGNIFICAND_MASK":"\nFLOAT64_HIGH_WORD_SIGNIFICAND_MASK\n    High word mask for the significand of a double-precision floating-point\n    number.\n\n    Examples\n    --------\n    > FLOAT64_HIGH_WORD_SIGNIFICAND_MASK\n    1048575\n    > base.toBinaryStringUint32( FLOAT64_HIGH_WORD_SIGNIFICAND_MASK )\n    '00000000000011111111111111111111'\n\n    See Also\n    --------\n    FLOAT64_HIGH_WORD_EXPONENT_MASK\n","FLOAT64_MAX":"\nFLOAT64_MAX\n    Maximum double-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_MAX\n    1.7976931348623157e+308\n\n    See Also\n    --------\n    FLOAT16_MAX, FLOAT32_MAX\n","FLOAT64_MAX_BASE2_EXPONENT":"\nFLOAT64_MAX_BASE2_EXPONENT\n    The maximum biased base 2 exponent for a double-precision floating-point\n    number.\n\n    Examples\n    --------\n    > FLOAT64_MAX_BASE2_EXPONENT\n    1023\n\n    See Also\n    --------\n    FLOAT64_MAX_BASE10_EXPONENT, FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL, FLOAT64_MIN_BASE2_EXPONENT\n","FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL":"\nFLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL\n    The maximum biased base 2 exponent for a subnormal double-precision\n    floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL\n    -1023\n\n    See Also\n    --------\n    FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL, FLOAT64_MAX_BASE2_EXPONENT, FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL\n","FLOAT64_MAX_BASE10_EXPONENT":"\nFLOAT64_MAX_BASE10_EXPONENT\n    The maximum base 10 exponent for a double-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_MAX_BASE10_EXPONENT\n    308\n\n    See Also\n    --------\n    FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL, FLOAT64_MAX_BASE2_EXPONENT, FLOAT64_MIN_BASE10_EXPONENT\n","FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL":"\nFLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL\n    The maximum base 10 exponent for a subnormal double-precision floating-point\n    number.\n\n    Examples\n    --------\n    > FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL\n    -308\n\n    See Also\n    --------\n    FLOAT64_MAX_BASE10_EXPONENT, FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL, FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL\n","FLOAT64_MAX_LN":"\nFLOAT64_MAX_LN\n    Natural logarithm of the maximum double-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_MAX_LN\n    709.782712893384\n\n    See Also\n    --------\n    FLOAT64_MIN_LN\n","FLOAT64_MAX_SAFE_FIBONACCI":"\nFLOAT64_MAX_SAFE_FIBONACCI\n    Maximum safe Fibonacci number when stored in double-precision floating-point\n    format.\n\n    Examples\n    --------\n    > FLOAT64_MAX_SAFE_FIBONACCI\n    8944394323791464\n\n    See Also\n    --------\n    FLOAT64_MAX_SAFE_NTH_FIBONACCI\n","FLOAT64_MAX_SAFE_INTEGER":"\nFLOAT64_MAX_SAFE_INTEGER\n    Maximum safe double-precision floating-point integer.\n\n    The maximum safe double-precision floating-point integer is given by\n    `2^53 - 1`.\n\n    Examples\n    --------\n    > FLOAT64_MAX_SAFE_INTEGER\n    9007199254740991\n\n    See Also\n    --------\n    FLOAT16_MAX_SAFE_INTEGER, FLOAT32_MAX_SAFE_INTEGER, FLOAT64_MIN_SAFE_INTEGER\n","FLOAT64_MAX_SAFE_LUCAS":"\nFLOAT64_MAX_SAFE_LUCAS\n    Maximum safe Lucas number when stored in double-precision floating-point\n    format.\n\n    Examples\n    --------\n    > FLOAT64_MAX_SAFE_LUCAS\n    7639424778862807\n\n    See Also\n    --------\n    FLOAT64_MAX_SAFE_FIBONACCI, FLOAT64_MAX_SAFE_NTH_LUCAS\n","FLOAT64_MAX_SAFE_NTH_FIBONACCI":"\nFLOAT64_MAX_SAFE_NTH_FIBONACCI\n    Maximum safe nth Fibonacci number when stored in double-precision floating-\n    point format.\n\n    Examples\n    --------\n    > FLOAT64_MAX_SAFE_NTH_FIBONACCI\n    78\n\n    See Also\n    --------\n    FLOAT64_MAX_SAFE_FIBONACCI\n","FLOAT64_MAX_SAFE_NTH_LUCAS":"\nFLOAT64_MAX_SAFE_NTH_LUCAS\n    Maximum safe nth Lucas number when stored in double-precision floating-point\n    format.\n\n    Examples\n    --------\n    > FLOAT64_MAX_SAFE_NTH_LUCAS\n    76\n\n    See Also\n    --------\n    FLOAT64_MAX_SAFE_LUCAS, FLOAT64_MAX_SAFE_NTH_FIBONACCI\n","FLOAT64_MIN_BASE2_EXPONENT":"\nFLOAT64_MIN_BASE2_EXPONENT\n    The minimum biased base 2 exponent for a normalized double-precision\n    floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_MIN_BASE2_EXPONENT\n    -1022\n\n    See Also\n    --------\n    FLOAT64_MAX_BASE2_EXPONENT, FLOAT64_MIN_BASE10_EXPONENT, FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL\n","FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL":"\nFLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL\n    The minimum biased base 2 exponent for a subnormal double-precision\n    floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL\n    -1074\n\n    See Also\n    --------\n    FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL, FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL, FLOAT64_MIN_BASE2_EXPONENT\n","FLOAT64_MIN_BASE10_EXPONENT":"\nFLOAT64_MIN_BASE10_EXPONENT\n    The minimum base 10 exponent for a normalized double-precision floating-\n    point number.\n\n    Examples\n    --------\n    > FLOAT64_MIN_BASE10_EXPONENT\n    -308\n\n    See Also\n    --------\n    FLOAT64_MAX_BASE10_EXPONENT, FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL, FLOAT64_MIN_BASE2_EXPONENT\n","FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL":"\nFLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL\n    The minimum base 10 exponent for a subnormal double-precision floating-\n    point number.\n\n    Examples\n    --------\n    > FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL\n    -324\n\n    See Also\n    --------\n    FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL, FLOAT64_MIN_BASE10_EXPONENT, FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL\n","FLOAT64_MIN_LN":"\nFLOAT64_MIN_LN\n    Natural logarithm of the smallest normalized double-precision floating-point\n    number.\n\n    Examples\n    --------\n    > FLOAT64_MIN_LN\n    -708.3964185322641\n\n    See Also\n    --------\n    FLOAT64_MAX_LN\n","FLOAT64_MIN_SAFE_INTEGER":"\nFLOAT64_MIN_SAFE_INTEGER\n    Minimum safe double-precision floating-point integer.\n\n    The minimum safe double-precision floating-point integer is given by\n    `-(2^53 - 1)`.\n\n    Examples\n    --------\n    > FLOAT64_MIN_SAFE_INTEGER\n    -9007199254740991\n\n    See Also\n    --------\n    FLOAT16_MIN_SAFE_INTEGER, FLOAT32_MIN_SAFE_INTEGER, FLOAT64_MAX_SAFE_INTEGER\n","FLOAT64_NUM_BYTES":"\nFLOAT64_NUM_BYTES\n    Size (in bytes) of a double-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_NUM_BYTES\n    8\n\n    See Also\n    --------\n    FLOAT16_NUM_BYTES, FLOAT32_NUM_BYTES\n","FLOAT64_PRECISION":"\nFLOAT64_PRECISION\n    Effective number of bits in the significand of a double-precision floating-\n    point number.\n\n    The effective number of bits is `52` significand bits plus `1` hidden bit.\n\n    Examples\n    --------\n    > FLOAT64_PRECISION\n    53\n\n    See Also\n    --------\n    FLOAT16_PRECISION, FLOAT32_PRECISION\n","FLOAT64_SMALLEST_NORMAL":"\nFLOAT64_SMALLEST_NORMAL\n    Smallest positive normalized double-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_SMALLEST_NORMAL\n    2.2250738585072014e-308\n\n    See Also\n    --------\n    FLOAT32_SMALLEST_NORMAL, FLOAT64_SMALLEST_SUBNORMAL\n","FLOAT64_SMALLEST_SUBNORMAL":"\nFLOAT64_SMALLEST_SUBNORMAL\n    Smallest positive denormalized double-precision floating-point number.\n\n    Examples\n    --------\n    > FLOAT64_SMALLEST_SUBNORMAL\n    4.940656458412465e-324\n\n    See Also\n    --------\n    FLOAT32_SMALLEST_SUBNORMAL, FLOAT64_SMALLEST_NORMAL\n","Float64Array":"\nFloat64Array()\n    A typed array constructor which returns a typed array representing an array\n    of double-precision floating-point numbers in the platform byte order.\n\n    Returns\n    -------\n    out: Float64Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Float64Array()\n    <Float64Array>\n\n\nFloat64Array( length )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    Returns\n    -------\n    out: Float64Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 5 )\n    <Float64Array>[ 0.0, 0.0, 0.0, 0.0, 0.0 ]\n\n\nFloat64Array( typedarray )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    Returns\n    -------\n    out: Float64Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Float32Array( [ 0.5, 0.5, 0.5 ] );\n    > var arr2 = new Float64Array( arr1 )\n    <Float64Array>[ 0.5, 0.5, 0.5 ]\n\n\nFloat64Array( obj )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    Returns\n    -------\n    out: Float64Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 0.5, 0.5, 0.5 ];\n    > var arr2 = new Float64Array( arr1 )\n    <Float64Array>[ 0.5, 0.5, 0.5 ]\n\n\nFloat64Array( buffer[, byteOffset[, length]] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Float64Array\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 32 );\n    > var arr = new Float64Array( buf, 0, 4 )\n    <Float64Array>[ 0.0, 0.0, 0.0, 0.0 ]\n\n\nFloat64Array.from( src[, map[, thisArg]] )\n    Creates a new typed array from an array-like object or an iterable.\n\n    A callback is provided the following arguments:\n\n    - value: source value.\n    - index: source index.\n\n    Parameters\n    ----------\n    src: ArrayLike|Iterable\n        Source of array elements.\n\n    map: Function (optional)\n        Callback to invoke for each source element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Float64Array\n        A typed array.\n\n    Examples\n    --------\n    > function mapFcn( v ) { return v * 2.0; };\n    > var arr = Float64Array.from( [ 1.0, -1.0 ], mapFcn )\n    <Float64Array>[ 2.0, -2.0 ]\n\n\nFloat64Array.of( element0[, element1[, ...elementN]] )\n    Creates a new typed array from a variable number of arguments.\n\n    Parameters\n    ----------\n    element0: number\n        Array element.\n\n    element1: number (optional)\n        Array element.\n\n    elementN: number (optional)\n        Array elements.\n\n    Returns\n    -------\n    out: Float64Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = Float64Array.of( 2.0, -2.0 )\n    <Float64Array>[ 2.0, -2.0 ]\n\n\nFloat64Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Float64Array.BYTES_PER_ELEMENT\n    8\n\n\nFloat64Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Float64Array.name\n    'Float64Array'\n\n\nFloat64Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n\nFloat64Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 5 );\n    > arr.byteLength\n    40\n\n\nFloat64Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 5 );\n    > arr.byteOffset\n    0\n\n\nFloat64Array.prototype.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 5 );\n    > arr.BYTES_PER_ELEMENT\n    8\n\n\nFloat64Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 5 );\n    > arr.length\n    5\n\n\nFloat64Array.prototype.copyWithin( target, start[, end] )\n    Copies a sequence of elements within the array starting at `start` and\n    ending at `end` (non-inclusive) to the position starting at `target`.\n\n    Parameters\n    ----------\n    target: integer\n        Target start index position.\n\n    start: integer\n        Source start index position.\n\n    end: integer (optional)\n        Source end index position. Default: out.length.\n\n    Returns\n    -------\n    out: Float64Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 2.0, -2.0, 1.0, -1.0, 1.0 ] );\n    > arr.copyWithin( 3, 0, 2 );\n    > arr[ 3 ]\n    2.0\n    > arr[ 4 ]\n    -2.0\n\n\nFloat64Array.prototype.entries()\n    Returns an iterator for iterating over array key-value pairs.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array key-value pairs.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, -1.0 ] );\n    > it = arr.entries();\n    > it.next().value\n    [ 0, 1.0 ]\n    > it.next().value\n    [ 1, -1.0 ]\n    > it.next().done\n    true\n\n\nFloat64Array.prototype.every( predicate[, thisArg] )\n    Tests whether all array elements pass a test implemented by a predicate\n    function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, an array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether all array elements pass.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, -1.0 ] );\n    > function predicate( v ) { return ( v >= 0.0 ); };\n    > arr.every( predicate )\n    false\n\n\nFloat64Array.prototype.fill( value[, start[, end]] )\n    Fills an array from a start index to an end index (non-inclusive) with a\n    provided value.\n\n    Parameters\n    ----------\n    value: number\n        Fill value.\n\n    start: integer (optional)\n        Start index. If less than zero, the start index is resolved relative to\n        the last array element. Default: 0.\n\n    end: integer (optional)\n        End index (non-inclusive). If less than zero, the end index is resolved\n        relative to the last array element. Default: out.length.\n\n    Returns\n    -------\n    out: Float64Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, -1.0 ] );\n    > arr.fill( 2.0 );\n    > arr[ 0 ]\n    2.0\n    > arr[ 1 ]\n    2.0\n\n\nFloat64Array.prototype.filter( predicate[, thisArg] )\n    Creates a new array which includes those elements for which a predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    If a predicate function does not return a truthy value for any array\n    element, the method returns `null`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which filters array elements. If a predicate function\n        returns a truthy value, an array element is included in the output\n        array; otherwise, an array element is not included in the output array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Float64Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Float64Array( [ 1.0, 0.0, -1.0 ] );\n    > function predicate( v ) { return ( v >= 0.0 ); };\n    > var arr2 = arr1.filter( predicate );\n    > arr2.length\n    2\n\n\nFloat64Array.prototype.find( predicate[, thisArg] )\n    Returns the first array element for which a provided predicate function\n    returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `undefined`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    value: number|undefined\n        Array element.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] );\n    > function predicate( v ) { return ( v < 0.0 ); };\n    > var v = arr.find( predicate )\n    -1.0\n\n\nFloat64Array.prototype.findIndex( predicate[, thisArg] )\n    Returns the index of the first array element for which a provided predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `-1`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] );\n    > function predicate( v ) { return ( v < 0.0 ); };\n    > var idx = arr.findIndex( predicate )\n    2\n\n\nFloat64Array.prototype.forEach( fcn[, thisArg] )\n    Invokes a callback for each array element.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to invoke for each array element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] );\n    > var str = ' ';\n    > function fcn( v, i ) { str += i + ':' + v + ' '; };\n    > arr.forEach( fcn );\n    > str\n    ' 0:1 1:0 2:-1 '\n\n\nFloat64Array.prototype.includes( searchElement[, fromIndex] )\n    Returns a boolean indicating whether an array includes a search element.\n\n    The method does not distinguish between signed and unsigned zero.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether an array includes a search element.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] );\n    > var bool = arr.includes( 2.0 )\n    false\n    > bool = arr.includes( -1.0 )\n    true\n\n\nFloat64Array.prototype.indexOf( searchElement[, fromIndex] )\n    Returns the index of the first array element strictly equal to a search\n    element.\n\n    The method does not distinguish between signed and unsigned zero.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] );\n    > var idx = arr.indexOf( 2.0 )\n    -1\n    > idx = arr.indexOf( -1.0 )\n    2\n\n\nFloat64Array.prototype.join( [separator] )\n    Serializes an array by joining all array elements as a string.\n\n    Parameters\n    ----------\n    separator: string (optional)\n        String delineating array elements. Default: ','.\n\n    Returns\n    -------\n    str: string\n        Array serialized as a string.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] );\n    > arr.join( '|' )\n    '1|0|-1'\n\n\nFloat64Array.prototype.keys()\n    Returns an iterator for iterating over array keys.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array keys.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, -1.0 ] );\n    > it = arr.keys();\n    > it.next().value\n    0\n    > it.next().value\n    1\n    > it.next().done\n    true\n\n\nFloat64Array.prototype.lastIndexOf( searchElement[, fromIndex] )\n    Returns the index of the last array element strictly equal to a search\n    element.\n\n    The method iterates from the last array element to the first array element.\n\n    The method does not distinguish between signed and unsigned zero.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: -1.\n\n    Returns\n    -------\n    idx: integer\n        array index.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, 0.0, -1.0, 0.0, 1.0 ] );\n    > var idx = arr.lastIndexOf( 2.0 )\n    -1\n    > idx = arr.lastIndexOf( 0.0 )\n    3\n\n\nFloat64Array.prototype.map( fcn[, thisArg] )\n    Maps each array element to an element in a new typed array.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function which maps array elements to elements in the new array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Float64Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Float64Array( [ 1.0, 0.0, -1.0 ] );\n    > function fcn( v ) { return v * 2.0; };\n    > var arr2 = arr1.map( fcn );\n    <Float64Array>[ 2.0, 0.0, -2.0 ]\n\n\nFloat64Array.prototype.reduce( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the first array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the first array element as the first argument and the second array\n    element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduce( fcn, 0.0 )\n    2.0\n\n\nFloat64Array.prototype.reduceRight( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result, iterating from right to left.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the last array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the last array element as the first argument and the second-to-last\n    array element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduceRight( fcn, 0.0 )\n    2.0\n\n\nFloat64Array.prototype.reverse()\n    Reverses an array *in-place*.\n\n    This method mutates the array on which the method is invoked.\n\n    Returns\n    -------\n    out: Float64Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] )\n    <Float64Array>[ 1.0, 0.0, -1.0 ]\n    > arr.reverse()\n    <Float64Array>[ -1.0, 0.0, 1.0 ]\n\n\nFloat64Array.prototype.set( arr[, offset] )\n    Sets array elements.\n\n    Parameters\n    ----------\n    arr: ArrayLike\n        Source array containing array values to set.\n\n    offset: integer (optional)\n        Array index at which to start writing values. Default: 0.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] );\n    > arr.set( [ -2.0, 2.0 ], 1 );\n    > arr[ 1 ]\n    -2.0\n    > arr[ 2 ]\n    2.0\n\n\nFloat64Array.prototype.slice( [begin[, end]] )\n    Copies array elements to a new array with the same underlying data type as\n    the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns `null`.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Float64Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Float64Array( [ 1.0, 0.0, -1.0 ] );\n    > var arr2 = arr1.slice( 1 );\n    > arr2.length\n    2\n    > arr2[ 0 ]\n    0.0\n    > arr2[ 1 ]\n    -1.0\n\n\nFloat64Array.prototype.some( predicate[, thisArg] )\n    Tests whether at least one array element passes a test implemented by a\n    predicate function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, a array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether at least one array element passes.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, -1.0 ] );\n    > function predicate( v ) { return ( v < 0.0 ); };\n    > arr.some( predicate )\n    true\n\n\nFloat64Array.prototype.sort( [compareFunction] )\n    Sorts an array *in-place*.\n\n    The comparison function is provided two array elements per invocation: `a`\n    and `b`.\n\n    The comparison function return value determines the sort order as follows:\n\n    - If the comparison function returns a value less than zero, then the method\n    sorts `a` to an index lower than `b` (i.e., `a` should come *before* `b`).\n\n    - If the comparison function returns a value greater than zero, then the\n    method sorts `a` to an index higher than `b` (i.e., `b` should come *before*\n    `a`).\n\n    - If the comparison function returns zero, then the relative order of `a`\n    and `b` should remain unchanged.\n\n    This method mutates the array on which the method is invoked.\n\n    Parameters\n    ----------\n    compareFunction: Function (optional)\n        Function which specifies the sort order. The default sort order is\n        ascending order.\n\n    Returns\n    -------\n    out: Float64Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, -1.0, 0.0, 2.0, -2.0 ] );\n    > arr.sort()\n    <Float64Array>[ -2.0, -1.0, 0.0, 1.0, 2.0 ]\n\n\nFloat64Array.prototype.subarray( [begin[, end]] )\n    Creates a new typed array over the same underlying ArrayBuffer and with the\n    same underlying data type as the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns an empty typed array.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Float64Array\n        A new typed array view.\n\n    Examples\n    --------\n    > var arr1 = new Float64Array( [ 1.0, -1.0, 0.0, 2.0, -2.0 ] );\n    > var arr2 = arr1.subarray( 2 )\n    <Float64Array>[ 0.0, 2.0, -2.0 ]\n\n\nFloat64Array.prototype.toLocaleString( [locales[, options]] )\n    Serializes an array as a locale-specific string.\n\n    Parameters\n    ----------\n    locales: string|Array<string> (optional)\n        A BCP 47 language tag, or an array of such tags.\n\n    options: Object (optional)\n        Options.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, -1.0, 0.0 ] );\n    > arr.toLocaleString()\n    '1,-1,0'\n\n\nFloat64Array.prototype.toString()\n    Serializes an array as a string.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, -1.0, 0.0 ] );\n    > arr.toString()\n    '1,-1,0'\n\n\nFloat64Array.prototype.values()\n    Returns an iterator for iterating over array elements.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array elements.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, -1.0 ] );\n    > it = arr.values();\n    > it.next().value\n    1.0\n    > it.next().value\n    -1.0\n    > it.next().done\n    true\n\n\n    See Also\n    --------\n    ArrayBuffer, Float32Array, Int16Array, Int32Array, Int8Array, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray\n","Float64Array.from":"\nFloat64Array.from( src[, map[, thisArg]] )\n    Creates a new typed array from an array-like object or an iterable.\n\n    A callback is provided the following arguments:\n\n    - value: source value.\n    - index: source index.\n\n    Parameters\n    ----------\n    src: ArrayLike|Iterable\n        Source of array elements.\n\n    map: Function (optional)\n        Callback to invoke for each source element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Float64Array\n        A typed array.\n\n    Examples\n    --------\n    > function mapFcn( v ) { return v * 2.0; };\n    > var arr = Float64Array.from( [ 1.0, -1.0 ], mapFcn )\n    <Float64Array>[ 2.0, -2.0 ]\n\n","Float64Array.of":"\nFloat64Array.of( element0[, element1[, ...elementN]] )\n    Creates a new typed array from a variable number of arguments.\n\n    Parameters\n    ----------\n    element0: number\n        Array element.\n\n    element1: number (optional)\n        Array element.\n\n    elementN: number (optional)\n        Array elements.\n\n    Returns\n    -------\n    out: Float64Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = Float64Array.of( 2.0, -2.0 )\n    <Float64Array>[ 2.0, -2.0 ]\n\n","Float64Array.BYTES_PER_ELEMENT":"\nFloat64Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Float64Array.BYTES_PER_ELEMENT\n    8\n\n","Float64Array.name":"\nFloat64Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Float64Array.name\n    'Float64Array'\n\n","Float64Array.prototype.buffer":"\nFloat64Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n","Float64Array.prototype.byteLength":"\nFloat64Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 5 );\n    > arr.byteLength\n    40\n\n","Float64Array.prototype.byteOffset":"\nFloat64Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 5 );\n    > arr.byteOffset\n    0\n\n","Float64Array.prototype.BYTES_PER_ELEMENT":"\nFloat64Array.prototype.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 5 );\n    > arr.BYTES_PER_ELEMENT\n    8\n\n","Float64Array.prototype.length":"\nFloat64Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 5 );\n    > arr.length\n    5\n\n","Float64Array.prototype.copyWithin":"\nFloat64Array.prototype.copyWithin( target, start[, end] )\n    Copies a sequence of elements within the array starting at `start` and\n    ending at `end` (non-inclusive) to the position starting at `target`.\n\n    Parameters\n    ----------\n    target: integer\n        Target start index position.\n\n    start: integer\n        Source start index position.\n\n    end: integer (optional)\n        Source end index position. Default: out.length.\n\n    Returns\n    -------\n    out: Float64Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 2.0, -2.0, 1.0, -1.0, 1.0 ] );\n    > arr.copyWithin( 3, 0, 2 );\n    > arr[ 3 ]\n    2.0\n    > arr[ 4 ]\n    -2.0\n\n","Float64Array.prototype.entries":"\nFloat64Array.prototype.entries()\n    Returns an iterator for iterating over array key-value pairs.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array key-value pairs.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, -1.0 ] );\n    > it = arr.entries();\n    > it.next().value\n    [ 0, 1.0 ]\n    > it.next().value\n    [ 1, -1.0 ]\n    > it.next().done\n    true\n\n","Float64Array.prototype.every":"\nFloat64Array.prototype.every( predicate[, thisArg] )\n    Tests whether all array elements pass a test implemented by a predicate\n    function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, an array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether all array elements pass.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, -1.0 ] );\n    > function predicate( v ) { return ( v >= 0.0 ); };\n    > arr.every( predicate )\n    false\n\n","Float64Array.prototype.fill":"\nFloat64Array.prototype.fill( value[, start[, end]] )\n    Fills an array from a start index to an end index (non-inclusive) with a\n    provided value.\n\n    Parameters\n    ----------\n    value: number\n        Fill value.\n\n    start: integer (optional)\n        Start index. If less than zero, the start index is resolved relative to\n        the last array element. Default: 0.\n\n    end: integer (optional)\n        End index (non-inclusive). If less than zero, the end index is resolved\n        relative to the last array element. Default: out.length.\n\n    Returns\n    -------\n    out: Float64Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, -1.0 ] );\n    > arr.fill( 2.0 );\n    > arr[ 0 ]\n    2.0\n    > arr[ 1 ]\n    2.0\n\n","Float64Array.prototype.filter":"\nFloat64Array.prototype.filter( predicate[, thisArg] )\n    Creates a new array which includes those elements for which a predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    If a predicate function does not return a truthy value for any array\n    element, the method returns `null`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which filters array elements. If a predicate function\n        returns a truthy value, an array element is included in the output\n        array; otherwise, an array element is not included in the output array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Float64Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Float64Array( [ 1.0, 0.0, -1.0 ] );\n    > function predicate( v ) { return ( v >= 0.0 ); };\n    > var arr2 = arr1.filter( predicate );\n    > arr2.length\n    2\n\n","Float64Array.prototype.find":"\nFloat64Array.prototype.find( predicate[, thisArg] )\n    Returns the first array element for which a provided predicate function\n    returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `undefined`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    value: number|undefined\n        Array element.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] );\n    > function predicate( v ) { return ( v < 0.0 ); };\n    > var v = arr.find( predicate )\n    -1.0\n\n","Float64Array.prototype.findIndex":"\nFloat64Array.prototype.findIndex( predicate[, thisArg] )\n    Returns the index of the first array element for which a provided predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `-1`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] );\n    > function predicate( v ) { return ( v < 0.0 ); };\n    > var idx = arr.findIndex( predicate )\n    2\n\n","Float64Array.prototype.forEach":"\nFloat64Array.prototype.forEach( fcn[, thisArg] )\n    Invokes a callback for each array element.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to invoke for each array element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] );\n    > var str = ' ';\n    > function fcn( v, i ) { str += i + ':' + v + ' '; };\n    > arr.forEach( fcn );\n    > str\n    ' 0:1 1:0 2:-1 '\n\n","Float64Array.prototype.includes":"\nFloat64Array.prototype.includes( searchElement[, fromIndex] )\n    Returns a boolean indicating whether an array includes a search element.\n\n    The method does not distinguish between signed and unsigned zero.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether an array includes a search element.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] );\n    > var bool = arr.includes( 2.0 )\n    false\n    > bool = arr.includes( -1.0 )\n    true\n\n","Float64Array.prototype.indexOf":"\nFloat64Array.prototype.indexOf( searchElement[, fromIndex] )\n    Returns the index of the first array element strictly equal to a search\n    element.\n\n    The method does not distinguish between signed and unsigned zero.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] );\n    > var idx = arr.indexOf( 2.0 )\n    -1\n    > idx = arr.indexOf( -1.0 )\n    2\n\n","Float64Array.prototype.join":"\nFloat64Array.prototype.join( [separator] )\n    Serializes an array by joining all array elements as a string.\n\n    Parameters\n    ----------\n    separator: string (optional)\n        String delineating array elements. Default: ','.\n\n    Returns\n    -------\n    str: string\n        Array serialized as a string.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] );\n    > arr.join( '|' )\n    '1|0|-1'\n\n","Float64Array.prototype.keys":"\nFloat64Array.prototype.keys()\n    Returns an iterator for iterating over array keys.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array keys.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, -1.0 ] );\n    > it = arr.keys();\n    > it.next().value\n    0\n    > it.next().value\n    1\n    > it.next().done\n    true\n\n","Float64Array.prototype.lastIndexOf":"\nFloat64Array.prototype.lastIndexOf( searchElement[, fromIndex] )\n    Returns the index of the last array element strictly equal to a search\n    element.\n\n    The method iterates from the last array element to the first array element.\n\n    The method does not distinguish between signed and unsigned zero.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: -1.\n\n    Returns\n    -------\n    idx: integer\n        array index.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, 0.0, -1.0, 0.0, 1.0 ] );\n    > var idx = arr.lastIndexOf( 2.0 )\n    -1\n    > idx = arr.lastIndexOf( 0.0 )\n    3\n\n","Float64Array.prototype.map":"\nFloat64Array.prototype.map( fcn[, thisArg] )\n    Maps each array element to an element in a new typed array.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function which maps array elements to elements in the new array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Float64Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Float64Array( [ 1.0, 0.0, -1.0 ] );\n    > function fcn( v ) { return v * 2.0; };\n    > var arr2 = arr1.map( fcn );\n    <Float64Array>[ 2.0, 0.0, -2.0 ]\n\n","Float64Array.prototype.reduce":"\nFloat64Array.prototype.reduce( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the first array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the first array element as the first argument and the second array\n    element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduce( fcn, 0.0 )\n    2.0\n\n","Float64Array.prototype.reduceRight":"\nFloat64Array.prototype.reduceRight( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result, iterating from right to left.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the last array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the last array element as the first argument and the second-to-last\n    array element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduceRight( fcn, 0.0 )\n    2.0\n\n","Float64Array.prototype.reverse":"\nFloat64Array.prototype.reverse()\n    Reverses an array *in-place*.\n\n    This method mutates the array on which the method is invoked.\n\n    Returns\n    -------\n    out: Float64Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] )\n    <Float64Array>[ 1.0, 0.0, -1.0 ]\n    > arr.reverse()\n    <Float64Array>[ -1.0, 0.0, 1.0 ]\n\n","Float64Array.prototype.set":"\nFloat64Array.prototype.set( arr[, offset] )\n    Sets array elements.\n\n    Parameters\n    ----------\n    arr: ArrayLike\n        Source array containing array values to set.\n\n    offset: integer (optional)\n        Array index at which to start writing values. Default: 0.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, 0.0, -1.0 ] );\n    > arr.set( [ -2.0, 2.0 ], 1 );\n    > arr[ 1 ]\n    -2.0\n    > arr[ 2 ]\n    2.0\n\n","Float64Array.prototype.slice":"\nFloat64Array.prototype.slice( [begin[, end]] )\n    Copies array elements to a new array with the same underlying data type as\n    the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns `null`.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Float64Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Float64Array( [ 1.0, 0.0, -1.0 ] );\n    > var arr2 = arr1.slice( 1 );\n    > arr2.length\n    2\n    > arr2[ 0 ]\n    0.0\n    > arr2[ 1 ]\n    -1.0\n\n","Float64Array.prototype.some":"\nFloat64Array.prototype.some( predicate[, thisArg] )\n    Tests whether at least one array element passes a test implemented by a\n    predicate function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, a array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether at least one array element passes.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, -1.0 ] );\n    > function predicate( v ) { return ( v < 0.0 ); };\n    > arr.some( predicate )\n    true\n\n","Float64Array.prototype.sort":"\nFloat64Array.prototype.sort( [compareFunction] )\n    Sorts an array *in-place*.\n\n    The comparison function is provided two array elements per invocation: `a`\n    and `b`.\n\n    The comparison function return value determines the sort order as follows:\n\n    - If the comparison function returns a value less than zero, then the method\n    sorts `a` to an index lower than `b` (i.e., `a` should come *before* `b`).\n\n    - If the comparison function returns a value greater than zero, then the\n    method sorts `a` to an index higher than `b` (i.e., `b` should come *before*\n    `a`).\n\n    - If the comparison function returns zero, then the relative order of `a`\n    and `b` should remain unchanged.\n\n    This method mutates the array on which the method is invoked.\n\n    Parameters\n    ----------\n    compareFunction: Function (optional)\n        Function which specifies the sort order. The default sort order is\n        ascending order.\n\n    Returns\n    -------\n    out: Float64Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, -1.0, 0.0, 2.0, -2.0 ] );\n    > arr.sort()\n    <Float64Array>[ -2.0, -1.0, 0.0, 1.0, 2.0 ]\n\n","Float64Array.prototype.subarray":"\nFloat64Array.prototype.subarray( [begin[, end]] )\n    Creates a new typed array over the same underlying ArrayBuffer and with the\n    same underlying data type as the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns an empty typed array.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Float64Array\n        A new typed array view.\n\n    Examples\n    --------\n    > var arr1 = new Float64Array( [ 1.0, -1.0, 0.0, 2.0, -2.0 ] );\n    > var arr2 = arr1.subarray( 2 )\n    <Float64Array>[ 0.0, 2.0, -2.0 ]\n\n","Float64Array.prototype.toLocaleString":"\nFloat64Array.prototype.toLocaleString( [locales[, options]] )\n    Serializes an array as a locale-specific string.\n\n    Parameters\n    ----------\n    locales: string|Array<string> (optional)\n        A BCP 47 language tag, or an array of such tags.\n\n    options: Object (optional)\n        Options.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, -1.0, 0.0 ] );\n    > arr.toLocaleString()\n    '1,-1,0'\n\n","Float64Array.prototype.toString":"\nFloat64Array.prototype.toString()\n    Serializes an array as a string.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, -1.0, 0.0 ] );\n    > arr.toString()\n    '1,-1,0'\n\n","Float64Array.prototype.values":"\nFloat64Array.prototype.values()\n    Returns an iterator for iterating over array elements.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array elements.\n\n    Examples\n    --------\n    > var arr = new Float64Array( [ 1.0, -1.0 ] );\n    > it = arr.values();\n    > it.next().value\n    1.0\n    > it.next().value\n    -1.0\n    > it.next().done\n    true\n\n\n    See Also\n    --------\n    ArrayBuffer, Float32Array, Int16Array, Int32Array, Int8Array, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray\n","forEach":"\nforEach( collection, fcn[, thisArg] )\n    Invokes a function for each element in a collection.\n\n    When invoked, the input function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, 2, 3, 4 ];\n    > forEach( arr, logger )\n    0: 1\n    1: 2\n    2: 3\n    3: 4\n\n    See Also\n    --------\n    forEachAsync, forEachRight\n","forEachAsync":"\nforEachAsync( collection, [options,] fcn, done )\n    Invokes a function once for each element in a collection.\n\n    When invoked, `fcn` is provided a maximum of four arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If `fcn`\n    accepts two arguments, `fcn` is provided:\n\n    - `value`\n    - `next`\n\n    If `fcn` accepts three arguments, `fcn` is provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other `fcn` signature, `fcn` is provided all four arguments.\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function onDuration( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next();\n    ...     }\n    ... };\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( 'Done.' );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > forEachAsync( arr, onDuration, done )\n    1000\n    2500\n    3000\n    Done.\n\n    // Limit number of concurrent invocations:\n    > function onDuration( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next();\n    ...     }\n    ... };\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( 'Done.' );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > forEachAsync( arr, opts, onDuration, done )\n    2500\n    3000\n    1000\n    Done.\n\n    // Process sequentially:\n    > function onDuration( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next();\n    ...     }\n    ... };\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( 'Done.' );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000 ];\n    > forEachAsync( arr, opts, onDuration, done )\n    3000\n    2500\n    1000\n    Done.\n\n\nforEachAsync.factory( [options,] fcn )\n    Returns a function which invokes a function once for each element in a\n    collection.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which invokes a function for each element in a collection.\n\n    Examples\n    --------\n    > function onDuration( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next();\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = forEachAsync.factory( opts, onDuration );\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( 'Done.' );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    Done.\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    Done.\n\n    See Also\n    --------\n    forEach, forEachRightAsync\n","forEachAsync.factory":"\nforEachAsync.factory( [options,] fcn )\n    Returns a function which invokes a function once for each element in a\n    collection.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which invokes a function for each element in a collection.\n\n    Examples\n    --------\n    > function onDuration( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next();\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = forEachAsync.factory( opts, onDuration );\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( 'Done.' );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    Done.\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    Done.\n\n    See Also\n    --------\n    forEach, forEachRightAsync\n","forEachRight":"\nforEachRight( collection, fcn[, thisArg] )\n    Invokes a function for each element in a collection, iterating from right to\n    left.\n\n    When invoked, the input function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, 2, 3, 4 ];\n    > forEachRight( arr, logger )\n    3: 4\n    2: 3\n    1: 2\n    0: 1\n\n    See Also\n    --------\n    forEach, forEachRightAsync\n","forEachRightAsync":"\nforEachRightAsync( collection, [options,] fcn, done )\n    Invokes a function once for each element in a collection, iterating from\n    right to left.\n\n    When invoked, `fcn` is provided a maximum of four arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If `fcn`\n    accepts two arguments, `fcn` is provided:\n\n    - `value`\n    - `next`\n\n    If `fcn` accepts three arguments, `fcn` is provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other `fcn` signature, `fcn` is provided all four arguments.\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function onDuration( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next();\n    ...     }\n    ... };\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( 'Done.' );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > forEachRightAsync( arr, onDuration, done )\n    1000\n    2500\n    3000\n    Done.\n\n    // Limit number of concurrent invocations:\n    > function onDuration( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next();\n    ...     }\n    ... };\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( 'Done.' );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 1000, 2500, 3000 ];\n    > forEachRightAsync( arr, opts, onDuration, done )\n    2500\n    3000\n    1000\n    Done.\n\n    // Process sequentially:\n    > function onDuration( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next();\n    ...     }\n    ... };\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( 'Done.' );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 1000, 2500, 3000 ];\n    > forEachRightAsync( arr, opts, onDuration, done )\n    3000\n    2500\n    1000\n    Done.\n\n\nforEachRightAsync.factory( [options,] fcn )\n    Returns a function which invokes a function once for each element in a\n    collection, iterating from right to left.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which invokes a function for each element in a collection.\n\n    Examples\n    --------\n    > function onDuration( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next();\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = forEachRightAsync.factory( opts, onDuration );\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( 'Done.' );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    Done.\n    > arr = [ 1000, 1500, 2000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    Done.\n\n    See Also\n    --------\n    forEachAsync, forEachRight\n","forEachRightAsync.factory":"\nforEachRightAsync.factory( [options,] fcn )\n    Returns a function which invokes a function once for each element in a\n    collection, iterating from right to left.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which invokes a function for each element in a collection.\n\n    Examples\n    --------\n    > function onDuration( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next();\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = forEachRightAsync.factory( opts, onDuration );\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( 'Done.' );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    Done.\n    > arr = [ 1000, 1500, 2000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    Done.\n\n    See Also\n    --------\n    forEachAsync, forEachRight\n","forIn":"\nforIn( obj, fcn[, thisArg] )\n    Invokes a function for each own and inherited enumerable property of an\n    object.\n\n    When invoked, the function is provided three arguments:\n\n    - `value`: object property value\n    - `key`: object property\n    - `obj`: the input object\n\n    To terminate iteration before visiting all properties, the provided function\n    must explicitly return `false`.\n\n    Property iteration order is *not* guaranteed.\n\n    Parameters\n    ----------\n    obj: Object\n        Input object, including arrays, typed arrays, and other collections.\n\n    fcn: Function\n        The function to invoke for each own enumerable property.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: Object\n        Input object.\n\n    Examples\n    --------\n    > function logger( v, k ) { console.log( '%s: %d', k, v ); };\n    > function Foo() { return this; };\n    > Foo.prototype.beep = 'boop';\n    > var obj = new Foo();\n    > forIn( obj, logger )\n    beep: boop\n\n    See Also\n    --------\n    forEach, forOwn\n","forOwn":"\nforOwn( obj, fcn[, thisArg] )\n    Invokes a function for each own enumerable property of an object.\n\n    When invoked, the function is provided three arguments:\n\n    - `value`: object property value\n    - `key`: object property\n    - `obj`: the input object\n\n    To terminate iteration before visiting all properties, the provided function\n    must explicitly return `false`.\n\n    The function determines the list of own enumerable properties *before*\n    invoking the provided function. Hence, any modifications made to the input\n    object *after* calling this function (such as adding and removing\n    properties) will *not* affect the list of visited properties.\n\n    Property iteration order is *not* guaranteed.\n\n    Parameters\n    ----------\n    obj: Object\n        Input object, including arrays, typed arrays, and other collections.\n\n    fcn: Function\n        The function to invoke for each own enumerable property.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: Object\n        Input object.\n\n    Examples\n    --------\n    > function logger( v, k ) { console.log( '%s: %d', k, v ); };\n    > var obj = { 'a': 1, 'b': 2, 'c': 3, 'd': 4 };\n    > forOwn( obj, logger )\n    a: 1\n    b: 2\n    c: 3\n    d: 4\n\n    See Also\n    --------\n    forEach, forIn\n","FOURTH_PI":"\nFOURTH_PI\n    One fourth times the mathematical constant `π`.\n\n    Examples\n    --------\n    > FOURTH_PI\n    7.85398163397448309616e-1\n\n    See Also\n    --------\n    PI\n","FOURTH_ROOT_EPS":"\nFOURTH_ROOT_EPS\n    Fourth root of double-precision floating-point epsilon.\n\n    Examples\n    --------\n    > FOURTH_ROOT_EPS\n    0.0001220703125\n\n    See Also\n    --------\n    EPS\n","FRB_SF_WAGE_RIGIDITY":"\nFRB_SF_WAGE_RIGIDITY()\n    Returns wage rates for U.S. workers that have not changed jobs within the\n    year.\n\n    Each array element has the following fields:\n\n    - date: collection date (month/day/year; e.g., 01/01/1980).\n    - all_workers: wage rates for hourly and non-hourly workers.\n    - hourly_workers: wage rates for hourly workers.\n    - non_hourly_workers: wage rates for non-hourly workers.\n    - less_than_high_school: wage rates for workers with less than a high school\n      education.\n    - high_school: wage rates for workers with a high school education.\n    - some_college: wage rates for workers with some college education.\n    - college: wage rates for workers with a college education.\n    - construction: wage rates for workers in the construction industry.\n    - finance: wage rates for workers in the finance industry.\n    - manufacturing: wage rates for workers in the manufacturing industry.\n\n    Returns\n    -------\n    out: Array<Object>\n        Wage rates.\n\n    Examples\n    --------\n    > var data = FRB_SF_WAGE_RIGIDITY()\n    [ {...}, {...}, ... ]\n\n    References\n    ----------\n    - Federal Reserve Bank of San Francisco. 2017. \"Wage Rigidity.\" <http://www.\n    frbsf.org/economic-research/indicators-data/nominal-wage-rigidity/>.\n\n","fromCodePoint":"\nfromCodePoint( ...pt )\n    Creates a string from a sequence of Unicode code points.\n\n    In addition to multiple arguments, the function also supports providing an\n    array-like object as a single argument containing a sequence of Unicode code\n    points.\n\n    Parameters\n    ----------\n    pt: ...integer\n        Sequence of Unicode code points.\n\n    Returns\n    -------\n    out: string\n        Output string.\n\n    Examples\n    --------\n    > var out = fromCodePoint( 9731 )\n    '☃'\n    > out = fromCodePoint( [ 9731 ] )\n    '☃'\n    > out = fromCodePoint( 97, 98, 99 )\n    'abc'\n    > out = fromCodePoint( [ 97, 98, 99 ] )\n    'abc'\n\n","functionName":"\nfunctionName( fcn )\n    Returns the name of a function.\n\n    If provided an anonymous function, the function returns an empty `string` or\n    the string `\"anonymous\"`.\n\n\n    Parameters\n    ----------\n    fcn: Function\n        Input function.\n\n    Returns\n    -------\n    out: string\n        Function name.\n\n    Examples\n    --------\n    > var v = functionName( String )\n    'String'\n    > v = functionName( function foo(){} )\n    'foo'\n    > v = functionName( function(){} )\n    '' || 'anonymous'\n\n    See Also\n    --------\n    constructorName\n","functionSequence":"\nfunctionSequence( ...fcn )\n    Returns a pipeline function.\n\n    Starting from the left, the pipeline function evaluates each function and\n    passes the result as an argument to the next function. The result of the\n    rightmost function is the result of the whole.\n\n    Only the leftmost function is explicitly permitted to accept multiple\n    arguments. All other functions are evaluated as unary functions.\n\n    Parameters\n    ----------\n    fcn: ...Function\n        Functions to evaluate in sequential order.\n\n    Returns\n    -------\n    out: Function\n        Pipeline function.\n\n    Examples\n    --------\n    > function a( x ) { return 2 * x; };\n    > function b( x ) { return x + 3; };\n    > function c( x ) { return x / 5; };\n    > var f = functionSequence( a, b, c );\n    > var z = f( 6 )\n    3\n\n    See Also\n    --------\n    compose, functionSequenceAsync\n","functionSequenceAsync":"\nfunctionSequenceAsync( ...fcn )\n    Returns a pipeline function.\n\n    Starting from the left, the pipeline function evaluates each function and\n    passes the result as the first argument of the next function. The result of\n    the rightmost function is the result of the whole.\n\n    The last argument for each provided function is a `next` callback which\n    should be invoked upon function completion. The callback accepts two\n    arguments:\n\n    - `error`: error argument\n    - `result`: function result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the pipeline function suspends execution and immediately calls the\n    `done` callback for subsequent `error` handling.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Only the leftmost function is explicitly permitted to accept multiple\n    arguments. All other functions are evaluated as binary functions.\n\n    The function will throw if provided fewer than two input arguments.\n\n    Parameters\n    ----------\n    fcn: ...Function\n        Functions to evaluate in sequential order.\n\n    Returns\n    -------\n    out: Function\n        Pipeline function.\n\n    Examples\n    --------\n    > function a( x, next ) {\n    ...    setTimeout( onTimeout, 0 );\n    ...    function onTimeout() {\n    ...        next( null, 2*x );\n    ...    }\n    ... };\n    > function b( x, next ) {\n    ...    setTimeout( onTimeout, 0 );\n    ...    function onTimeout() {\n    ...        next( null, x+3 );\n    ...    }\n    ... };\n    > function c( x, next ) {\n    ...    setTimeout( onTimeout, 0 );\n    ...    function onTimeout() {\n    ...        next( null, x/5 );\n    ...    }\n    ... };\n    > var f = functionSequenceAsync( a, b, c );\n    > function done( error, result ) {\n    ...    if ( error ) {\n    ...        throw error;\n    ...    }\n    ...    console.log( result );\n    ... };\n    > f( 6, done )\n    3\n\n    See Also\n    --------\n    composeAsync, functionSequence\n","GAMMA_LANCZOS_G":"\nGAMMA_LANCZOS_G\n    Arbitrary constant `g` to be used in Lanczos approximation functions.\n\n    Examples\n    --------\n    > GAMMA_LANCZOS_G\n    10.900511\n\n","getegid":"\ngetegid()\n    Returns the effective numeric group identity of the calling process.\n\n    The function only returns an effective group identity on POSIX platforms.\n    For all other platforms (e.g., Windows and Android), the function returns\n    `null`.\n\n    Returns\n    -------\n    id: integer|null\n        Effective numeric group identity.\n\n    Examples\n    --------\n    > var gid = getegid()\n\n    See Also\n    --------\n    geteuid, getgid, getuid\n","geteuid":"\ngeteuid()\n    Returns the effective numeric user identity of the calling process.\n\n    The function only returns an effective user identity on POSIX platforms. For\n    all other platforms (e.g., Windows and Android), the function returns\n    `null`.\n\n    Returns\n    -------\n    id: integer|null\n        Effective numeric user identity.\n\n    Examples\n    --------\n    > var uid = geteuid()\n\n    See Also\n    --------\n    getegid, getgid, getuid\n","getgid":"\ngetgid()\n    Returns the numeric group identity of the calling process.\n\n    The function only returns a group identity on POSIX platforms. For all other\n    platforms (e.g., Windows and Android), the function returns `null`.\n\n    Returns\n    -------\n    id: integer|null\n        Numeric group identity.\n\n    Examples\n    --------\n    > var gid = getgid()\n\n    See Also\n    --------\n    getegid, geteuid, getuid\n","getGlobal":"\ngetGlobal( [codegen] )\n    Returns the global object.\n\n    Parameters\n    ----------\n    codegen: boolean (optional)\n        Boolean indicating whether to use code generation to resolve the global\n        object. Code generation is the *most* reliable means for resolving the\n        global object; however, using code generation may violate content\n        security policies (CSPs). Default: false.\n\n    Returns\n    -------\n    global: Object\n        Global object.\n\n    Examples\n    --------\n    > var g = getGlobal()\n    {...}\n\n","getPrototypeOf":"\ngetPrototypeOf( value )\n    Returns the prototype of a provided object.\n\n    In contrast to the native `Object.getPrototypeOf`, this function does not\n    throw when provided `null` or `undefined`. Instead, similar to when provided\n    any value with *no* inherited properties, the function returns `null`.\n\n    Value arguments other than `null` or `undefined` are coerced to objects.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    out: Object|null\n        Prototype.\n\n    Examples\n    --------\n    > var proto = getPrototypeOf( {} )\n    {}\n\n    See Also\n    --------\n    isPrototypeOf\n","getuid":"\ngetuid()\n    Returns the numeric user identity of the calling process.\n\n    The function only returns a user identity on POSIX platforms. For all other\n    platforms (e.g., Windows and Android), the function returns `null`.\n\n    Returns\n    -------\n    id: integer|null\n        Numeric user identity.\n\n    Examples\n    --------\n    > var uid = getuid()\n\n    See Also\n    --------\n    getegid, geteuid, getgid\n","GLAISHER":"\nGLAISHER\n    Glaisher-Kinkelin constant.\n\n    Examples\n    --------\n    > GLAISHER\n    1.2824271291006226\n\n","group":"\ngroup( collection, [options,] groups )\n    Groups values as arrays associated with distinct keys.\n\n    If provided an empty collection, the function returns an empty object.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection to group. If provided an object, the object must be\n        array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Options.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'values'.\n\n    groups: Array|TypedArray|Object\n        A collection defining which group an element in the input collection\n        belongs to. Each value in `groups` should resolve to a value which can\n        be serialized as an object key. If provided an object, the object must\n        be array-like (excluding strings and functions).\n\n    Returns\n    -------\n    out: Object\n        Group results.\n\n    Examples\n    --------\n    > var collection = [ 'beep', 'boop', 'foo', 'bar' ];\n    > var groups = [ 'b', 'b', 'f', 'b' ];\n    > var out = group( collection, groups )\n    { 'b': [ 'beep', 'boop', 'bar' ], 'f': [ 'foo' ] }\n    > groups = [ 1, 1, 2, 1 ];\n    > out = group( collection, groups )\n    { '1': [ 'beep', 'boop', 'bar' ], '2': [ 'foo' ] }\n\n    // Output group results as indices:\n    > groups = [ 'b', 'b', 'f', 'b' ];\n    > var opts = { 'returns': 'indices' };\n    > out = group( collection, opts, groups )\n    { 'b': [ 0, 1, 3 ], 'f': [ 2 ] }\n\n    // Output group results as index-element pairs:\n    > opts = { 'returns': '*' };\n    > out = group( collection, opts, groups )\n    { 'b': [ [0, 'beep'], [1, 'boop'], [3, 'bar'] ], 'f': [ [2, 'foo'] ] }\n\n    See Also\n    --------\n    bifurcate, countBy, groupBy\n","groupBy":"\ngroupBy( collection, [options,] indicator )\n    Groups values according to an indicator function.\n\n    When invoked, the indicator function is provided two arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n\n    The value returned by an indicator function should be a value which can be\n    serialized as an object key.\n\n    If provided an empty collection, the function returns an empty object.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection to group. If provided an object, the object must be\n        array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Options.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'values'.\n\n    indicator: Function\n        Indicator function specifying which group an element in the input\n        collection belongs to.\n\n    Returns\n    -------\n    out: Object\n        Group results.\n\n    Examples\n    --------\n    > function indicator( v ) {\n    ...     if ( v[ 0 ] === 'b' ) {\n    ...         return 'b';\n    ...     }\n    ...     return 'other';\n    ... };\n    > var collection = [ 'beep', 'boop', 'foo', 'bar' ];\n    > var out = groupBy( collection, indicator )\n    { 'b': [ 'beep', 'boop', 'bar' ], 'other': [ 'foo' ] }\n\n    // Output group results as indices:\n    > var opts = { 'returns': 'indices' };\n    > out = groupBy( collection, opts, indicator )\n    { 'b': [ 0, 1, 3 ], 'other': [ 2 ] }\n\n    // Output group results as index-value pairs:\n    > opts = { 'returns': '*' };\n    > out = groupBy( collection, opts, indicator )\n    { 'b': [ [0, 'beep'], [1, 'boop'], [3, 'bar'] ], 'other': [ [2, 'foo' ] ] }\n\n    See Also\n    --------\n    bifurcateBy, countBy, group\n","groupByAsync":"\ngroupByAsync( collection, [options,] indicator, done )\n    Groups values according to an indicator function.\n\n    When invoked, the indicator function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    indicator function accepts two arguments, the indicator function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the indicator function accepts three arguments, the indicator function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other indicator function signature, the indicator function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `group`: value group\n\n    If an indicator function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    If provided an empty collection, the function calls the `done` callback with\n    an empty object as the second argument.\n\n    The `group` returned by an indicator function should be a value which can be\n    serialized as an object key.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'values'.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    indicator: Function\n        Indicator function specifying which group an element in the input\n        collection belongs to.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > groupByAsync( arr, indicator, done )\n    1000\n    2500\n    3000\n    { \"true\": [ 1000, 3000 ], \"false\": [ 2500 ] }\n\n    // Output group results as indices:\n    > var opts = { 'returns': 'indices' };\n    > groupByAsync( arr, opts, indicator, done )\n    1000\n    2500\n    3000\n    { \"true\": [ 2, 0 ], \"false\": [ 1 ] }\n\n    // Output group results as index-value pairs:\n    > opts = { 'returns': '*' };\n    > groupByAsync( arr, opts, indicator, done )\n    1000\n    2500\n    3000\n    { \"true\": [ [ 2, 1000 ], [ 0, 3000 ] ], \"false\": [ [ 1, 2500 ] ] }\n\n    // Limit number of concurrent invocations:\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > groupByAsync( arr, opts, indicator, done )\n    2500\n    3000\n    1000\n    { \"true\": [ 3000, 1000 ], \"false\": [ 2500 ] }\n\n    // Process sequentially:\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000 ];\n    > groupByAsync( arr, opts, indicator, done )\n    3000\n    2500\n    1000\n    { \"true\": [ 3000, 1000 ], \"false\": [ 2500 ] }\n\n\ngroupByAsync.factory( [options,] indicator )\n    Returns a function which groups values according to an indicator function.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'values'.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    indicator: Function\n        Indicator function specifying which group an element in the input\n        collection belongs to.\n\n    Returns\n    -------\n    out: Function\n        A group-by function.\n\n    Examples\n    --------\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = groupByAsync.factory( opts, indicator );\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    { \"true\": [ 3000, 1000 ], \"false\": [ 2500 ] }\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    { \"true\": [ 2000, 1000 ], \"false\": [ 1500 ] }\n\n    See Also\n    --------\n    bifurcateByAsync, countByAsync, groupBy\n","groupByAsync.factory":"\ngroupByAsync.factory( [options,] indicator )\n    Returns a function which groups values according to an indicator function.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `indices`, indices are returned; if\n        `*`, both indices and values are returned. Default: 'values'.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    indicator: Function\n        Indicator function specifying which group an element in the input\n        collection belongs to.\n\n    Returns\n    -------\n    out: Function\n        A group-by function.\n\n    Examples\n    --------\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = groupByAsync.factory( opts, indicator );\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    { \"true\": [ 3000, 1000 ], \"false\": [ 2500 ] }\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    { \"true\": [ 2000, 1000 ], \"false\": [ 1500 ] }\n\n    See Also\n    --------\n    bifurcateByAsync, countByAsync, groupBy\n","groupIn":"\ngroupIn( obj, [options,] indicator )\n    Group values according to an indicator function.\n\n    When invoked, the indicator function is provided two arguments:\n\n    - `value`: object value\n    - `key`: object key\n\n    The value returned by an indicator function should be a value which can be\n    serialized as an object key.\n\n    If provided an empty object with no prototype, the function returns an empty\n    object.\n\n    The function iterates over an object's own and inherited properties.\n\n    Key iteration order is *not* guaranteed, and, thus, result order is *not*\n    guaranteed.\n\n    Parameters\n    ----------\n    obj: Object|Array|TypedArray\n        Input object to group.\n\n    options: Object (optional)\n        Options.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `keys`, keys are returned; if `*`,\n        both keys and values are returned. Default: 'values'.\n\n    indicator: Function\n        Indicator function indicating which group a value in the input object\n        belongs to.\n\n    Returns\n    -------\n    out: Object\n        Group results.\n\n    Examples\n    --------\n    > function indicator( v ) {\n    ...     if ( v[ 0 ] === 'b' ) {\n    ...         return 'b';\n    ...     }\n    ...     return 'other';\n    ... };\n    > function Foo() { this.a = 'beep'; this.b = 'boop'; return this; };\n    > Foo.prototype = Object.create( null );\n    > Foo.prototype.c = 'foo';\n    > Foo.prototype.d = 'bar';\n    > var obj = new Foo();\n    > var out = groupIn( obj, indicator )\n    { 'b': [ 'beep', 'boop', 'bar' ], 'other': [ 'foo' ] }\n\n    // Output group results as keys:\n    > var opts = { 'returns': 'keys' };\n    > out = groupIn( obj, opts, indicator )\n    { 'b': [ 'a', 'b', 'd' ], 'other': [ 'c' ] }\n\n    // Output group results as key-value pairs:\n    > opts = { 'returns': '*' };\n    > out = groupIn( obj, opts, indicator )\n    { 'b': [['a','beep'], ['b','boop'], ['d','bar']], 'other': [['c','foo' ]] }\n\n    See Also\n    --------\n    bifurcateIn, groupBy, groupOwn\n","groupOwn":"\ngroupOwn( obj, [options,] indicator )\n    Group values according to an indicator function.\n\n    When invoked, the indicator function is provided two arguments:\n\n    - `value`: object value\n    - `key`: object key\n\n    The value returned by an indicator function should be a value which can be\n    serialized as an object key.\n\n    If provided an empty object, the function returns an empty object.\n\n    The function iterates over an object's own properties.\n\n    Key iteration order is *not* guaranteed, and, thus, result order is *not*\n    guaranteed.\n\n    Parameters\n    ----------\n    obj: Object|Array|TypedArray\n        Input object to group.\n\n    options: Object (optional)\n        Options.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    options.returns: string (optional)\n        If `values`, values are returned; if `keys`, keys are returned; if `*`,\n        both keys and values are returned. Default: 'values'.\n\n    indicator: Function\n        Indicator function indicating which group a value in the input object\n        belongs to.\n\n    Returns\n    -------\n    out: Object\n        Group results.\n\n    Examples\n    --------\n    > function indicator( v ) {\n    ...     if ( v[ 0 ] === 'b' ) {\n    ...         return 'b';\n    ...     }\n    ...     return 'other';\n    ... };\n    > var obj = { 'a': 'beep', 'b': 'boop', 'c': 'foo', 'd': 'bar' };\n    > var out = groupOwn( obj, indicator )\n    { 'b': [ 'beep', 'boop', 'bar' ], 'other': [ 'foo' ] }\n\n    // Output group results as keys:\n    > var opts = { 'returns': 'keys' };\n    > out = groupOwn( obj, opts, indicator )\n    { 'b': [ 'a', 'b', 'd' ], 'other': [ 'c' ] }\n\n    // Output group results as key-value pairs:\n    > opts = { 'returns': '*' };\n    > out = groupOwn( obj, opts, indicator )\n    { 'b': [['a','beep'], ['b','boop'], ['d','bar']], 'other': [['c','foo' ]] }\n\n    See Also\n    --------\n    bifurcateOwn, group, groupBy\n","HALF_LN2":"\nHALF_LN2\n    One half times the natural logarithm of `2`.\n\n    Examples\n    --------\n    > HALF_LN2\n    3.46573590279972654709e-01\n\n    See Also\n    --------\n    LN2\n","HALF_PI":"\nHALF_PI\n    One half times the mathematical constant `π`.\n\n    Examples\n    --------\n    > HALF_PI\n    1.5707963267948966\n\n    See Also\n    --------\n    PI\n","HARRISON_BOSTON_HOUSE_PRICES":"\nHARRISON_BOSTON_HOUSE_PRICES()\n    Returns a dataset derived from information collected by the US Census\n    Service concerning housing in Boston, Massachusetts (1978).\n\n    The data consists of 14 attributes:\n\n    - crim: per capita crime rate by town\n    - zn: proportion of residential land zoned for lots over 25,000 square feet\n    - indus: proportion of non-retail business acres per town\n    - chas: Charles River dummy variable (1 if tract bounds river; 0 otherwise)\n    - nox: nitric oxides concentration (parts per 10 million)\n    - rm: average number of rooms per dwelling\n    - age: proportion of owner-occupied units built prior to 1940\n    - dis: weighted distances to five Boston employment centers\n    - rad: index of accessibility to radial highways\n    - tax: full-value property-tax rate per $10,000\n    - ptratio: pupil-teacher ratio by town\n    - b: 1000(Bk-0.63)^2 where Bk is the proportion of blacks by town\n    - lstat: percent lower status of the population\n    - medv: median value of owner-occupied homes in $1000's\n\n    The dataset can be used to predict two dependent variables: 1) nitrous oxide\n    level and 2) median home value.\n\n    The median home value field seems to be censored at 50.00 (corresponding to\n    a median value of $50,000). Censoring is suggested by the fact that the\n    highest median value of exactly $50,000 is reported in 16 cases, while 15\n    cases have values between $40,000 and $50,000. Values are rounded to the\n    nearest hundred. Harrison and Rubinfeld do not, however, mention any\n    censoring.\n\n    Additionally, as documented by Gilley and Pace (1996), the dataset contains\n    eight miscoded median values.\n\n    Returns\n    -------\n    out: Array<Object>\n        Boston house prices.\n\n    Examples\n    --------\n    > var data = HARRISON_BOSTON_HOUSE_PRICES()\n    [ {...}, {...}, ... ]\n\n    References\n    ----------\n    - Harrison, David, and Daniel L Rubinfeld. 1978. \"Hedonic housing prices and\n    the demand for clean air.\" _Journal of Environmental Economics and\n    Management_ 5 (1): 81–102. doi:10.1016/0095-0696(78)90006-2.\n    - Gilley, Otis W., and R.Kelley Pace. 1996. \"On the Harrison and Rubinfeld\n    Data.\" _Journal of Environmental Economics and Management_ 31 (3): 403–5.\n    doi:10.1006/jeem.1996.0052.\n\n    See Also\n    --------\n    HARRISON_BOSTON_HOUSE_PRICES_CORRECTED, PACE_BOSTON_HOUSE_PRICES\n","HARRISON_BOSTON_HOUSE_PRICES_CORRECTED":"\nHARRISON_BOSTON_HOUSE_PRICES_CORRECTED()\n    Returns a (corrected) dataset derived from information collected by the US\n    Census Service concerning housing in Boston, Massachusetts (1978).\n\n    The data consists of 15 attributes:\n\n    - crim: per capita crime rate by town\n    - zn: proportion of residential land zoned for lots over 25,000 square feet\n    - indus: proportion of non-retail business acres per town\n    - chas: Charles River dummy variable (1 if tract bounds river; 0 otherwise)\n    - nox: nitric oxides concentration (parts per 10 million)\n    - rm: average number of rooms per dwelling\n    - age: proportion of owner-occupied units built prior to 1940\n    - dis: weighted distances to five Boston employment centers\n    - rad: index of accessibility to radial highways\n    - tax: full-value property-tax rate per $10,000\n    - ptratio: pupil-teacher ratio by town\n    - b: 1000(Bk-0.63)^2 where Bk is the proportion of blacks by town\n    - lstat: percent lower status of the population\n    - medv: median value of owner-occupied homes in $1000's\n    - cmedv: corrected median value of owner-occupied homes in $1000's\n\n    The dataset can be used to predict two dependent variables: 1) nitrous oxide\n    level and 2) median home value.\n\n    The median home value field seems to be censored at 50.00 (corresponding to\n    a median value of $50,000). Censoring is suggested by the fact that the\n    highest median value of exactly $50,000 is reported in 16 cases, while 15\n    cases have values between $40,000 and $50,000. Values are rounded to the\n    nearest hundred. Harrison and Rubinfeld do not, however, mention any\n    censoring.\n\n    The dataset contains eight corrections to miscoded median values, as\n    documented by Gilley and Pace (1996).\n\n    Returns\n    -------\n    out: Array<Object>\n        Boston house prices.\n\n    Examples\n    --------\n    > var data = HARRISON_BOSTON_HOUSE_PRICES_CORRECTED()\n    [ {...}, {...}, ... ]\n\n    References\n    ----------\n    - Harrison, David, and Daniel L Rubinfeld. 1978. \"Hedonic housing prices and\n    the demand for clean air.\" _Journal of Environmental Economics and\n    Management_ 5 (1): 81–102. doi:10.1016/0095-0696(78)90006-2.\n    - Gilley, Otis W., and R.Kelley Pace. 1996. \"On the Harrison and Rubinfeld\n    Data.\" _Journal of Environmental Economics and Management_ 31 (3): 403–5.\n    doi:10.1006/jeem.1996.0052.\n\n    See Also\n    --------\n    HARRISON_BOSTON_HOUSE_PRICES, PACE_BOSTON_HOUSE_PRICES\n","hasArrayBufferSupport":"\nhasArrayBufferSupport()\n    Tests for native `ArrayBuffer` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `ArrayBuffer` support.\n\n    Examples\n    --------\n    > var bool = hasArrayBufferSupport()\n    <boolean>\n\n    See Also\n    --------\n    hasFloat32ArraySupport, hasFloat64ArraySupport, hasInt16ArraySupport, hasInt32ArraySupport, hasInt8ArraySupport, hasNodeBufferSupport, hasSharedArrayBufferSupport, hasUint16ArraySupport, hasUint32ArraySupport, hasUint8ArraySupport, hasUint8ClampedArraySupport\n","hasAsyncAwaitSupport":"\nhasAsyncAwaitSupport()\n    Tests for native `async`/`await` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has native `async`/`await` support.\n\n    Examples\n    --------\n    > var bool = hasAsyncAwaitSupport()\n    <boolean>\n\n","hasAsyncIteratorSymbolSupport":"\nhasAsyncIteratorSymbolSupport()\n    Tests for native `Symbol.asyncIterator` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has native `Symbol.asyncIterator`\n        support.\n\n    Examples\n    --------\n    > var bool = hasAsyncIteratorSymbolSupport()\n    <boolean>\n\n    See Also\n    --------\n    hasIteratorSymbolSupport, hasSymbolSupport\n","hasClassSupport":"\nhasClassSupport()\n    Tests for native `class` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has native `class` support.\n\n    Examples\n    --------\n    > var bool = hasClassSupport()\n    <boolean>\n\n","hasDefinePropertiesSupport":"\nhasDefinePropertiesSupport()\n    Tests for `Object.defineProperties` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Object.defineProperties`\n        support.\n\n    Examples\n    --------\n    > var bool = hasDefinePropertiesSupport()\n    <boolean>\n\n    See Also\n    --------\n    hasDefinePropertySupport\n","hasDefinePropertySupport":"\nhasDefinePropertySupport()\n    Tests for `Object.defineProperty` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Object.defineProperty`\n        support.\n\n    Examples\n    --------\n    > var bool = hasDefinePropertySupport()\n    <boolean>\n\n    See Also\n    --------\n    hasDefinePropertiesSupport\n","hasFloat32ArraySupport":"\nhasFloat32ArraySupport()\n    Tests for native `Float32Array` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Float32Array` support.\n\n    Examples\n    --------\n    > var bool = hasFloat32ArraySupport()\n    <boolean>\n\n","hasFloat64ArraySupport":"\nhasFloat64ArraySupport()\n    Tests for native `Float64Array` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Float64Array` support.\n\n    Examples\n    --------\n    > var bool = hasFloat64ArraySupport()\n    <boolean>\n\n","hasFunctionNameSupport":"\nhasFunctionNameSupport()\n    Tests for native function `name` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has function `name` support.\n\n    Examples\n    --------\n    > var bool = hasFunctionNameSupport()\n    <boolean>\n\n","hasGeneratorSupport":"\nhasGeneratorSupport()\n    Tests whether an environment supports native generator functions.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment support generator functions.\n\n    Examples\n    --------\n    > var bool = hasGeneratorSupport()\n    <boolean>\n\n","hasGlobalThisSupport":"\nhasGlobalThisSupport()\n    Tests for `globalThis` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `globalThis` support.\n\n    Examples\n    --------\n    > var bool = hasGlobalThisSupport()\n    <boolean>\n\n    See Also\n    --------\n    getGlobal\n","hasInt8ArraySupport":"\nhasInt8ArraySupport()\n    Tests for native `Int8Array` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Int8Array` support.\n\n    Examples\n    --------\n    > var bool = hasInt8ArraySupport()\n    <boolean>\n\n","hasInt16ArraySupport":"\nhasInt16ArraySupport()\n    Tests for native `Int16Array` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Int16Array` support.\n\n    Examples\n    --------\n    > var bool = hasInt16ArraySupport()\n    <boolean>\n\n","hasInt32ArraySupport":"\nhasInt32ArraySupport()\n    Tests for native `Int32Array` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Int32Array` support.\n\n    Examples\n    --------\n    > var bool = hasInt32ArraySupport()\n    <boolean>\n\n","hasIteratorSymbolSupport":"\nhasIteratorSymbolSupport()\n    Tests for native `Symbol.iterator` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has native `Symbol.iterator`\n        support.\n\n    Examples\n    --------\n    > var bool = hasIteratorSymbolSupport()\n    <boolean>\n\n    See Also\n    --------\n    hasAsyncIteratorSymbolSupport, hasSymbolSupport\n","hasMapSupport":"\nhasMapSupport()\n    Tests for native `Map` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Map` support.\n\n    Examples\n    --------\n    > var bool = hasMapSupport()\n    <boolean>\n\n","hasNodeBufferSupport":"\nhasNodeBufferSupport()\n    Tests for native `Buffer` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Buffer` support.\n\n    Examples\n    --------\n    > var bool = hasNodeBufferSupport()\n    <boolean>\n\n","hasOwnProp":"\nhasOwnProp( value, property )\n    Tests if an object has a specified property.\n\n    In contrast to the native `Object.prototype.hasOwnProperty`, this function\n    does not throw when provided `null` or `undefined`. Instead, the function\n    returns `false`.\n\n    Value arguments other than `null` or `undefined` are coerced to objects.\n\n    Property arguments are coerced to strings.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object has a specified property.\n\n    Examples\n    --------\n    > var beep = { 'boop': true };\n    > var bool = hasOwnProp( beep, 'boop' )\n    true\n    > bool = hasOwnProp( beep, 'bop' )\n    false\n\n    See Also\n    --------\n    hasProp\n","hasProp":"\nhasProp( value, property )\n    Tests if an object has a specified property, either own or inherited.\n\n    Value arguments other than `null` or `undefined` are coerced to objects.\n\n    Non-symbol property arguments are coerced to strings.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object has a specified property.\n\n    Examples\n    --------\n    > var beep = { 'boop': true };\n    > var bool = hasProp( beep, 'boop' )\n    true\n    > bool = hasProp( beep, 'toString' )\n    true\n    > bool = hasProp( beep, 'bop' )\n    false\n\n    See Also\n    --------\n    hasOwnProp\n","hasProxySupport":"\nhasProxySupport()\n    Tests whether an environment has native `Proxy` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has native `Proxy` support.\n\n    Examples\n    --------\n    > var bool = hasProxySupport()\n    <boolean>\n\n","hasSetSupport":"\nhasSetSupport()\n    Tests for native `Set` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has native `Set` support.\n\n    Examples\n    --------\n    > var bool = hasSetSupport()\n    <boolean>\n\n","hasSharedArrayBufferSupport":"\nhasSharedArrayBufferSupport()\n    Tests for native `SharedArrayBuffer` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `SharedArrayBuffer` support.\n\n    Examples\n    --------\n    > var bool = hasSharedArrayBufferSupport()\n    <boolean>\n\n    See Also\n    --------\n    hasArrayBufferSupport, hasFloat32ArraySupport, hasFloat64ArraySupport, hasInt16ArraySupport, hasInt32ArraySupport, hasInt8ArraySupport, hasNodeBufferSupport, hasUint16ArraySupport, hasUint32ArraySupport, hasUint8ArraySupport, hasUint8ClampedArraySupport\n","hasSymbolSupport":"\nhasSymbolSupport()\n    Tests for native `Symbol` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has native `Symbol` support.\n\n    Examples\n    --------\n    > var bool = hasSymbolSupport()\n    <boolean>\n\n    See Also\n    --------\n    hasIteratorSymbolSupport\n","hasToStringTagSupport":"\nhasToStringTagSupport()\n    Tests for native `toStringTag` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `toStringTag` support.\n\n    Examples\n    --------\n    > var bool = hasToStringTagSupport()\n    <boolean>\n\n","hasUint8ArraySupport":"\nhasUint8ArraySupport()\n    Tests for native `Uint8Array` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Uint8Array` support.\n\n    Examples\n    --------\n    > var bool = hasUint8ArraySupport()\n    <boolean>\n\n","hasUint8ClampedArraySupport":"\nhasUint8ClampedArraySupport()\n    Tests for native `Uint8ClampedArray` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Uint8ClampedArray` support.\n\n    Examples\n    --------\n    > var bool = hasUint8ClampedArraySupport()\n    <boolean>\n\n","hasUint16ArraySupport":"\nhasUint16ArraySupport()\n    Tests for native `Uint16Array` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Uint16Array` support.\n\n    Examples\n    --------\n    > var bool = hasUint16ArraySupport()\n    <boolean>\n\n","hasUint32ArraySupport":"\nhasUint32ArraySupport()\n    Tests for native `Uint32Array` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `Uint32Array` support.\n\n    Examples\n    --------\n    > var bool = hasUint32ArraySupport()\n    <boolean>\n\n","hasWeakMapSupport":"\nhasWeakMapSupport()\n    Tests for native `WeakMap` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `WeakMap` support.\n\n    Examples\n    --------\n    > var bool = hasWeakMapSupport()\n    <boolean>\n\n","hasWeakSetSupport":"\nhasWeakSetSupport()\n    Tests for native `WeakSet` support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has `WeakSet` support.\n\n    Examples\n    --------\n    > var bool = hasWeakSetSupport()\n    <boolean>\n\n","hasWebAssemblySupport":"\nhasWebAssemblySupport()\n    Tests for native WebAssembly support.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an environment has native WebAssembly support.\n\n    Examples\n    --------\n    > var bool = hasWebAssemblySupport()\n    <boolean>\n\n","HERNDON_VENUS_SEMIDIAMETERS":"\nHERNDON_VENUS_SEMIDIAMETERS()\n    Returns fifteen observations of the vertical semidiameter of Venus, made by\n    Lieutenant Herndon, with the meridian circle at Washington, in the year\n    1846.\n\n    This dataset is a classic dataset commonly used in examples demonstrating\n    outlier detection.\n\n    Returns\n    -------\n    out: Array<number>\n        Observations.\n\n    Examples\n    --------\n    > var d = HERNDON_VENUS_SEMIDIAMETERS()\n    [ -0.30, -0.44, ..., 0.39, 0.10 ]\n\n    References\n    ----------\n    - Chauvenet, William. 1868. _A Manual of Spherical and Practical Astronomy_.\n    5th ed. Vol. 5. London, England: Trübner & Co.\n    - Grubbs, Frank E. 1950. \"Sample Criteria for Testing Outlying\n    Observations.\" _The Annals of Mathematical Statistics_ 21 (1). The Institute\n    of Mathematical Statistics: 27–58. doi:10.1214/aoms/1177729885.\n    - Grubbs, Frank E. 1969. \"Procedures for Detecting Outlying Observations in\n    Samples.\" _Technometrics_ 11 (1). Taylor & Francis: 1–21. doi:10.1080/\n    00401706.1969.10490657.\n    - Tietjen, Gary L., and Roger H. Moore. 1972. \"Some Grubbs-Type Statistics\n    for the Detection of Several Outliers.\" _Technometrics_ 14 (3). Taylor &\n    Francis: 583–97. doi:10.1080/00401706.1972.10488948.\n\n","homedir":"\nhomedir()\n    Returns the current user's home directory.\n\n    If unable to locate a home directory, the function returns `null`.\n\n    Returns\n    -------\n    out: string|null\n        Home directory.\n\n    Examples\n    --------\n    > var home = homedir()\n    e.g., '/Users/<username>'\n\n    See Also\n    --------\n    configdir, tmpdir\n","HOURS_IN_DAY":"\nHOURS_IN_DAY\n    Number of hours in a day.\n\n    The value is a generalization and does **not** take into account\n    inaccuracies due to daylight savings conventions, crossing timezones, or\n    other complications with time and dates.\n\n    Examples\n    --------\n    > var days = 3.14;\n    > var hrs = days * HOURS_IN_DAY\n    75.36\n\n    See Also\n    --------\n    HOURS_IN_WEEK\n","HOURS_IN_WEEK":"\nHOURS_IN_WEEK\n    Number of hours in a week.\n\n    The value is a generalization and does **not** take into account\n    inaccuracies due to daylight savings conventions, crossing timezones, or\n    other complications with time and dates.\n\n    Examples\n    --------\n    > var wks = 3.14;\n    > var hrs = wks * HOURS_IN_WEEK\n    527.52\n\n    See Also\n    --------\n    HOURS_IN_DAY\n","hoursInMonth":"\nhoursInMonth( [month[, year]] )\n    Returns the number of hours in a month.\n\n    By default, the function returns the number of hours in the current month of\n    the current year (according to local time). To determine the number of hours\n    for a particular month and year, provide `month` and `year` arguments.\n\n    A `month` may be either a month's integer value, three letter abbreviation,\n    or full name (case insensitive).\n\n    The function's return value is a generalization and does **not** take into\n    account inaccuracies due to daylight savings conventions, crossing\n    timezones, or other complications with time and dates.\n\n    Parameters\n    ----------\n    month: string|Date|integer (optional)\n        Month.\n\n    year: integer (optional)\n        Year.\n\n    Returns\n    -------\n    out: integer\n        Hours in a month.\n\n    Examples\n    --------\n    > var num = hoursInMonth()\n    <number>\n    > num = hoursInMonth( 2 )\n    <number>\n    > num = hoursInMonth( 2, 2016 )\n    696\n    > num = hoursInMonth( 2, 2017 )\n    672\n\n    // Other ways to supply month:\n    > num = hoursInMonth( 'feb', 2016 )\n    696\n    > num = hoursInMonth( 'february', 2016 )\n    696\n\n    See Also\n    --------\n    hoursInYear\n","hoursInYear":"\nhoursInYear( [value] )\n    Returns the number of hours in a year according to the Gregorian calendar.\n\n    By default, the function returns the number of hours in the current year\n    (according to local time). To determine the number of hours for a particular\n    year, provide either a year or a `Date` object.\n\n    The function's return value is a generalization and does **not** take into\n    account inaccuracies due to daylight savings conventions, crossing\n    timezones, or other complications with time and dates.\n\n    Parameters\n    ----------\n    value: integer|Date (optional)\n        Year or `Date` object.\n\n    Returns\n    -------\n    out: integer\n        Number of hours in a year.\n\n    Examples\n    --------\n    > var num = hoursInYear()\n    <number>\n    > num = hoursInYear( 2016 )\n    8784\n    > num = hoursInYear( 2017 )\n    8760\n\n    See Also\n    --------\n    hoursInMonth\n","httpServer":"\nhttpServer( [options,] [requestListener] )\n    Returns a function to create an HTTP server.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.port: integer (optional)\n        Server port. Default: `0` (i.e., randomly assigned).\n\n    options.maxport: integer (optional)\n        Max server port when port hunting. Default: `maxport = port`.\n\n    options.hostname: string (optional)\n        Server hostname.\n\n    options.address: string (optional)\n        Server address. Default: `'127.0.0.1'`.\n\n    requestListener: Function (optional)\n        Request callback.\n\n    Returns\n    -------\n    createServer: Function\n        Function to create an HTTP server.\n\n    Examples\n    --------\n    // Basic usage:\n    > var createServer = httpServer()\n    <Function>\n\n    // Provide a request callback:\n    > function onRequest( request, response ) {\n    ...    console.log( request.url );\n    ...    response.end( 'OK' );\n    ... };\n    > createServer = httpServer( onRequest )\n    <Function>\n\n    // Specify a specific port:\n    > var opts = { 'port': 7331 };\n    > createServer = httpServer( opts )\n    <Function>\n\n\ncreateServer( done )\n    Creates an HTTP server.\n\n    Parameters\n    ----------\n    done: Function\n        Callback to invoke after creating a server.\n\n    Examples\n    --------\n    > function done( error, server ) {\n    ...    if ( error ) {\n    ...        throw error;\n    ...    }\n    ...    console.log( 'Success!' );\n    ...    server.close();\n    ... };\n    > var createServer = httpServer();\n    > createServer( done );\n\n","identity":"\nidentity( x )\n    Identity function.\n\n    Parameters\n    ----------\n    x: any\n        Input value.\n\n    Returns\n    -------\n    out: any\n        Input value.\n\n    Examples\n    --------\n    > var v = identity( 3.14 )\n    3.14\n\n    See Also\n    --------\n    constantFunction\n","ifelse":"\nifelse( bool, x, y )\n    If a condition is truthy, returns `x`; otherwise, returns `y`.\n\n    Parameters\n    ----------\n    bool: boolean\n        Condition.\n\n    x: any\n        Value to return if a condition is truthy.\n\n    y: any\n        Value to return if a condition is falsy.\n\n    Returns\n    -------\n    z: any\n        Either `x` or `y`.\n\n    Examples\n    --------\n    > var z = ifelse( true, 1.0, -1.0 )\n    1.0\n    > z = ifelse( false, 1.0, -1.0 )\n    -1.0\n\n    See Also\n    --------\n    ifelseAsync, ifthen\n","ifelseAsync":"\nifelseAsync( predicate, x, y, done )\n    If a predicate function returns a truthy value, returns `x`; otherwise,\n    returns `y`.\n\n    A predicate function is provided a single argument:\n\n    - clbk: callback to invoke upon predicate completion\n\n    The callback function accepts two arguments:\n\n    - error: error object\n    - bool: condition used to determine whether to invoke `x` or `y`\n\n    The `done` callback is invoked upon function completion and is provided at\n    most two arguments:\n\n    - error: error object\n    - result: either `x` or `y`\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function.\n\n    x: any\n        Value to return if a condition is truthy.\n\n    y: any\n        Value to return if a condition is falsy.\n\n    done: Function\n        Callback to invoke upon completion.\n\n    Examples\n    --------\n    > function predicate( clbk ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         clbk( null, true );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > ifelseAsync( predicate, 'beep', 'boop', done )\n    'beep'\n\n    See Also\n    --------\n    ifthenAsync, ifelse\n","ifthen":"\nifthen( bool, x, y )\n    If a condition is truthy, invoke `x`; otherwise, invoke `y`.\n\n    Parameters\n    ----------\n    bool: boolean\n        Condition.\n\n    x: Function\n        Function to invoke if a condition is truthy.\n\n    y: Function\n        Function to invoke if a condition is falsy.\n\n    Returns\n    -------\n    z: any\n        Return value of either `x` or `y`.\n\n    Examples\n    --------\n    > function x() { return 1.0; };\n    > function y() { return -1.0; };\n    > var z = ifthen( true, x, y )\n    1.0\n    > z = ifthen( false, x, y )\n    -1.0\n\n    See Also\n    --------\n    ifthenAsync, ifelse\n","ifthenAsync":"\nifthenAsync( predicate, x, y, done )\n    If a predicate function returns a truthy value, invokes `x`; otherwise,\n    invokes `y`.\n\n    The predicate function is provided a single argument:\n\n    - clbk: callback to invoke upon predicate function completion\n\n    The predicate function callback accepts two arguments:\n\n    - error: error object\n    - bool: condition used to determine whether to invoke `x` or `y`\n\n    Both `x` and `y` are provided a single argument:\n\n    - clbk: callback to invoke upon function completion\n\n    The callback function accepts any number of arguments, with the first\n    argument reserved for providing an error.\n\n    If the error argument is falsy, the `done` callback is invoked with its\n    first argument as `null` and all other provided arguments.\n\n    If the error argument is truthy, the `done` callback is invoked with only an\n    error argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function.\n\n    x: Function\n        Function to invoke if a condition is truthy.\n\n    y: Function\n        Function to invoke if a condition is falsy.\n\n    done: Function\n        Callback to invoke upon completion.\n\n    Examples\n    --------\n    > function predicate( clbk ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         clbk( null, false );\n    ...     }\n    ... };\n    > function x( clbk ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         clbk( null, 'beep' );\n    ...     }\n    ... };\n    > function y( clbk ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         clbk( null, 'boop' );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > ifthenAsync( predicate, x, y, done )\n    'boop'\n\n    See Also\n    --------\n    ifelseAsync, ifthen\n","imag":"\nimag( z )\n    Returns the imaginary component of a complex number.\n\n    Parameters\n    ----------\n    z: Complex\n        Complex number.\n\n    Returns\n    -------\n    im: number\n        Imaginary component.\n\n    Examples\n    --------\n    > var z = new Complex128( 5.0, 3.0 );\n    > var im = imag( z )\n    3.0\n\n    See Also\n    --------\n    real, reim\n","IMG_ACANTHUS_MOLLIS":"\nIMG_ACANTHUS_MOLLIS()\n    Returns a `Buffer` containing image data of Karl Blossfeldt's gelatin silver\n    print *Acanthus mollis*.\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_ACANTHUS_MOLLIS()\n    <Buffer>\n\n    References\n    ----------\n    - Blossfeldt, Karl. 1928. *Acanthus mollis*. <http://www.getty.edu/art/\n    collection/objects/35443/karl-blossfeldt-acanthus-mollis-german-1928/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n    See Also\n    --------\n    IMG_ALLIUM_OREOPHILUM\n","IMG_AIRPLANE_FROM_ABOVE":"\nIMG_AIRPLANE_FROM_ABOVE()\n    Returns a `Buffer` containing image data of Fédèle Azari's gelatin silver\n    print of an airplane, viewed from above looking down.\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_AIRPLANE_FROM_ABOVE()\n    <Buffer>\n\n    References\n    ----------\n    - Azari, Fédèle. 1929. (no title). <http://www.getty.edu/art/collection/\n    objects/134512/fedele-azari-airplane-viewed-from-above-looking-down-italian-\n    1914-1929/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n","IMG_ALLIUM_OREOPHILUM":"\nIMG_ALLIUM_OREOPHILUM()\n    Returns a `Buffer` containing image data of Karl Blossfeldt's gelatin silver\n    print *Allium ostrowskianum*.\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_ALLIUM_OREOPHILUM()\n    <Buffer>\n\n    References\n    ----------\n    - Blossfeldt, Karl. 1928. *Allium ostrowskianum*. <http://www.getty.edu/art/\n    collection/objects/35448/karl-blossfeldt-allium-ostrowskianum-\n    knoblauchpflanze-german-1928/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n    See Also\n    --------\n    IMG_ACANTHUS_MOLLIS\n","IMG_BLACK_CANYON":"\nIMG_BLACK_CANYON()\n    Returns a `Buffer` containing image data of Timothy H. O'Sullivan's albumen\n    silver print *Black Cañon, Colorado River, From Camp 8, Looking Above*.\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_BLACK_CANYON()\n    <Buffer>\n\n    References\n    ----------\n    - O'Sullivan, Timothy H. 1871. *Black Cañon, Colorado River, From Camp 8,\n    Looking Above*. <http://www.getty.edu/art/collection/objects/40209/timothy-\n    h-o'sullivan-black-canon-colorado-river-from-camp-8-looking-above-american-\n    1871/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n","IMG_DUST_BOWL_HOME":"\nIMG_DUST_BOWL_HOME()\n    Returns a `Buffer` containing image data of Dorothea Lange's gelatin silver\n    print of an abandoned Dust Bowl home.\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_DUST_BOWL_HOME()\n    <Buffer>\n\n    References\n    ----------\n    - Lange, Dorothea. 1940. *Abandoned Dust Bowl Home*. <http://www.getty.edu/\n    art/collection/objects/128362/dorothea-lange-abandoned-dust-bowl-home-\n    american-about-1935-1940/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n","IMG_FRENCH_ALPINE_LANDSCAPE":"\nIMG_FRENCH_ALPINE_LANDSCAPE()\n    Returns a `Buffer` containing image data of Adolphe Braun's carbon print of\n    a French alpine landscape.\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_FRENCH_ALPINE_LANDSCAPE()\n    <Buffer>\n\n    References\n    ----------\n    - Braun, Adolphe. 1870. (no title). <http://www.getty.edu/art/collection/\n    objects/54324/adolphe-braun-alpine-landscape-french-1865-1870/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n","IMG_LOCOMOTION_HOUSE_CAT":"\nIMG_LOCOMOTION_HOUSE_CAT()\n    Returns a `Buffer` containing image data of Eadweard J. Muybridge's\n    collotype of a house cat (24 views).\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_LOCOMOTION_HOUSE_CAT()\n    <Buffer>\n\n    References\n    ----------\n    - Muybridge, Eadweard J. 1887. *Animal Locomotion*. <http://www.getty.edu/\n    art/collection/objects/40918/eadweard-j-muybridge-animal-locomotion-american\n    -1887/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n    See Also\n    --------\n    IMG_LOCOMOTION_NUDE_MALE\n","IMG_LOCOMOTION_NUDE_MALE":"\nIMG_LOCOMOTION_NUDE_MALE()\n    Returns a `Buffer` containing image data of Eadweard J. Muybridge's\n    collotype of a nude male moving in place (48 views).\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_LOCOMOTION_NUDE_MALE()\n    <Buffer>\n\n    References\n    ----------\n    - Muybridge, Eadweard J. 1887. *Animal Locomotion*. <http://www.getty.edu/\n    art/collection/objects/40918/eadweard-j-muybridge-animal-locomotion-american\n    -1887/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n    See Also\n    --------\n    IMG_LOCOMOTION_HOUSE_CAT\n","IMG_MARCH_PASTORAL":"\nIMG_MARCH_PASTORAL()\n    Returns a `Buffer` containing image data of Peter Henry Emerson's\n    photogravure of sheep in a pastoral setting.\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_MARCH_PASTORAL()\n    <Buffer>\n\n    References\n    ----------\n    - Emerson, Peter Henry. 1888. *A March Pastoral*. <http://www.getty.edu/art/\n    collection/objects/141994/peter-henry-emerson-a-march-pastoral-suffolk-\n    british-1888/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n","IMG_NAGASAKI_BOATS":"\nIMG_NAGASAKI_BOATS()\n    Returns a `Buffer` containing image data of Felice Beato's albumen silver\n    print of boats in a river in Nagasaki.\n\n    Returns\n    -------\n    out: Buffer\n        Image data.\n\n    Examples\n    --------\n    > var img = IMG_NAGASAKI_BOATS()\n    <Buffer>\n\n    References\n    ----------\n    - Beato, Felice. 1865. (no title). <http://www.getty.edu/art/collection/\n    objects/241797/felice-beato-boats-in-river-nagasaki-british-about-1865/>.\n\n    * Digital image courtesy of the Getty's Open Content Program. While there\n    are no restrictions or conditions on the use of open content images, the\n    Getty would appreciate a gratis copy of any scholarly publications in which\n    the images are reproduced in order to maintain the collection bibliography.\n    Copies may be sent to the attention of:\n\n      Open Content Program\n      Registrar's Office\n      The J. Paul Getty Museum\n      1200 Getty Center Drive, Suite 1000\n      Los Angeles, CA 90049\n\n","incrapcorr":"\nincrapcorr( [mx, my] )\n    Returns an accumulator function which incrementally computes the absolute\n    value of the sample Pearson product-moment correlation coefficient.\n\n    If provided values, the accumulator function returns an updated accumulated\n    value. If not provided values, the accumulator function returns the current\n    accumulated value.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Parameters\n    ----------\n    mx: number (optional)\n        Known mean.\n\n    my: number (optional)\n        Known mean.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrapcorr();\n    > var ar = accumulator()\n    null\n    > ar = accumulator( 2.0, 1.0 )\n    0.0\n    > ar = accumulator( -5.0, 3.14 )\n    ~1.0\n    > ar = accumulator()\n    ~1.0\n\n    See Also\n    --------\n    incrmapcorr, incrpcorr, incrpcorr2\n","incrcount":"\nincrcount()\n    Returns an accumulator function which incrementally updates a count.\n\n    If provided a value, the accumulator function returns an updated count. If\n    not provided a value, the accumulator function returns the current count.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrcount();\n    > var v = accumulator()\n    0\n    > v = accumulator( 2.0 )\n    1\n    > v = accumulator( -5.0 )\n    2\n    > v = accumulator()\n    2\n\n    See Also\n    --------\n    incrmean, incrsum, incrsummary\n","incrcovariance":"\nincrcovariance( [mx, my] )\n    Returns an accumulator function which incrementally computes an unbiased\n    sample covariance.\n\n    If provided values, the accumulator function returns an updated unbiased\n    sample covariance. If not provided values, the accumulator function returns\n    the current unbiased sample covariance.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Parameters\n    ----------\n    mx: number (optional)\n        Known mean.\n\n    my: number (optional)\n        Known mean.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrcovariance();\n    > var v = accumulator()\n    null\n    > v = accumulator( 2.0, 1.0 )\n    0.0\n    > v = accumulator( -5.0, 3.14 )\n    ~-7.49\n    > v = accumulator()\n    ~-7.49\n\n    See Also\n    --------\n    incrmcovariance, incrpcorr, incrvariance\n","incrcovmat":"\nincrcovmat( out[, means] )\n    Returns an accumulator function which incrementally computes an unbiased\n    sample covariance matrix.\n\n    If provided a data vector, the accumulator function returns an updated\n    unbiased sample covariance matrix. If not provided a data vector, the\n    accumulator function returns the current unbiased sample covariance matrix.\n\n    Parameters\n    ----------\n    out: integer|ndarray\n        Order of the covariance matrix or a square 2-dimensional ndarray for\n        storing the covariance matrix.\n\n    means: ndarray (optional)\n        Known means.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrcovmat( 2 );\n    > var out = accumulator()\n    <ndarray>\n    > var vec = ndarray( 'float64', 1 );\n    > var buf = new Float64Array( 2 );\n    > var shape = [ 2 ];\n    > var strides = [ 1 ];\n    > var v = vec( buf, shape, strides, 0, 'row-major' );\n    > v.set( 0, 2.0 );\n    > v.set( 1, 1.0 );\n    > out = accumulator( v )\n    <ndarray>\n    > v.set( 0, -5.0 );\n    > v.set( 1, 3.14 );\n    > out = accumulator( v )\n    <ndarray>\n    > out = accumulator()\n    <ndarray>\n\n    See Also\n    --------\n    incrcovariance, incrpcorrmat\n","incrcv":"\nincrcv( [mean] )\n    Returns an accumulator function which incrementally computes the coefficient\n    of variation (CV).\n\n    If provided a value, the accumulator function returns an updated accumulated\n    value. If not provided a value, the accumulator function returns the current\n    accumulated value.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Parameters\n    ----------\n    mean: number (optional)\n        Known mean.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrcv();\n    > var cv = accumulator()\n    null\n    > cv = accumulator( 2.0 )\n    0.0\n    > cv = accumulator( 1.0 )\n    ~0.47\n    > cv = accumulator()\n    ~0.47\n\n    See Also\n    --------\n    incrmean, incrmcv, incrstdev, incrvmr\n","increwmean":"\nincrewmean( α )\n    Returns an accumulator function which incrementally computes an\n    exponentially weighted mean, where α is a smoothing factor between 0 and 1.\n\n    If provided a value, the accumulator function returns an updated mean. If\n    not provided a value, the accumulator function returns the current mean.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Parameters\n    ----------\n    α: number\n        Smoothing factor (value between 0 and 1).\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = increwmean( 0.5 );\n    > var v = accumulator()\n    null\n    > v = accumulator( 2.0 )\n    2.0\n    > v = accumulator( -5.0 )\n    -1.5\n    > v = accumulator()\n    -1.5\n\n    See Also\n    --------\n    increwvariance, incrmean, incrmmean, incrwmean\n","increwstdev":"\nincrewstdev( α )\n    Returns an accumulator function which incrementally computes an\n    exponentially weighted standard deviation, where α is a smoothing factor\n    between 0 and 1.\n\n    If provided a value, the accumulator function returns an updated standard\n    deviation. If not provided a value, the accumulator function returns the\n    current standard deviation.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Parameters\n    ----------\n    α: number\n        Smoothing factor (value between 0 and 1).\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = increwstdev( 0.5 );\n    > var s = accumulator()\n    null\n    > s = accumulator( 2.0 )\n    0.0\n    > s = accumulator( -5.0 )\n    3.5\n    > s = accumulator()\n    3.5\n\n    See Also\n    --------\n    increwvariance, incrmstdev, incrstdev\n","increwvariance":"\nincrewvariance( α )\n    Returns an accumulator function which incrementally computes an\n    exponentially weighted variance, where α is a smoothing factor between 0 and\n    1.\n\n    If provided a value, the accumulator function returns an updated variance.\n    If not provided a value, the accumulator function returns the current\n    variance.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Parameters\n    ----------\n    α: number\n        Smoothing factor (value between 0 and 1).\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = increwvariance( 0.5 );\n    > var v = accumulator()\n    null\n    > v = accumulator( 2.0 )\n    0.0\n    > v = accumulator( -5.0 )\n    12.25\n    > v = accumulator()\n    12.25\n\n    See Also\n    --------\n    increwmean, increwstdev, incrvariance, incrmvariance\n","incrgmean":"\nincrgmean()\n    Returns an accumulator function which incrementally computes a geometric\n    mean.\n\n    If provided a value, the accumulator function returns an updated geometric\n    mean. If not provided a value, the accumulator function returns the current\n    geometric mean.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    If provided a negative value, the accumulated value is `NaN` for all future\n    invocations.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrgmean();\n    > var v = accumulator()\n    null\n    > v = accumulator( 2.0 )\n    2.0\n    > v = accumulator( 5.0 )\n    ~3.16\n    > v = accumulator()\n    ~3.16\n\n    See Also\n    --------\n    incrhmean, incrmean, incrmgmean, incrsummary\n","incrgrubbs":"\nincrgrubbs( [options] )\n    Returns an accumulator function which incrementally performs Grubbs' test\n    for detecting outliers.\n\n    Grubbs' test assumes that data is normally distributed. Accordingly, one\n    should first verify that the data can be reasonably approximated by a normal\n    distribution before applying the Grubbs' test.\n\n    If provided a value, the accumulator function returns updated test results.\n    If not provided a value, the accumulator function returns the current test\n    results.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the test statistic is `NaN` for all future invocations.\n\n    The accumulator must be provided *at least* three data points before\n    performing Grubbs' test. Until at least three data points are provided, the\n    accumulator returns `null`.\n\n    The accumulator function returns an object having the following fields:\n\n    - rejected: boolean indicating whether the null hypothesis should be\n    rejected.\n    - alpha: significance level.\n    - criticalValue: critical value.\n    - statistic: test statistic.\n    - df: degrees of freedom.\n    - mean: sample mean.\n    - sd: corrected sample standard deviation.\n    - min: minimum value.\n    - max: maximum value.\n    - alt: alternative hypothesis.\n    - method: method name.\n    - print: method for pretty-printing test output.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.alpha: number (optional)\n        Significance level. Default: 0.05.\n\n    options.alternative: string (optional)\n        Alternative hypothesis. The option may be one of the following values:\n\n        - 'two-sided': test whether the minimum or maximum value is an outlier.\n        - 'min': test whether the minimum value is an outlier.\n        - 'max': test whether the maximum value is an outlier.\n\n        Default: 'two-sided'.\n\n    options.init: integer (optional)\n        Number of data points the accumulator should use to compute initial\n        statistics *before* testing for an outlier. Until the accumulator is\n        provided the number of data points specified by this option, the\n        accumulator returns `null`. Default: 100.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var acc = incrgrubbs();\n    > var res = acc()\n    null\n    > for ( var i = 0; i < 200; i++ ) {\n    ...     res = acc( base.random.normal( 10.0, 5.0 ) );\n    ... };\n    > res.print()\n\n    References\n    ----------\n    - Grubbs, Frank E. 1950. \"Sample Criteria for Testing Outlying\n    Observations.\" _The Annals of Mathematical Statistics_ 21 (1). The Institute\n    of Mathematical Statistics: 27–58. doi:10.1214/aoms/1177729885.\n    - Grubbs, Frank E. 1969. \"Procedures for Detecting Outlying Observations in\n    Samples.\" _Technometrics_ 11 (1). Taylor & Francis: 1–21. doi:10.1080/\n    00401706.1969.10490657.\n\n    See Also\n    --------\n    incrmgrubbs\n","incrhmean":"\nincrhmean()\n    Returns an accumulator function which incrementally computes a harmonic\n    mean.\n\n    If provided a value, the accumulator function returns an updated harmonic\n    mean. If not provided a value, the accumulator function returns the current\n    harmonic mean.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrhmean();\n    > var v = accumulator()\n    null\n    > v = accumulator( 2.0 )\n    2.0\n    > v = accumulator( 5.0 )\n    ~2.86\n    > v = accumulator()\n    ~2.86\n\n    See Also\n    --------\n    incrgmean, incrmean, incrmhmean, incrsummary\n","incrkmeans":"\nincrkmeans( k[, ndims][, options] )\n    Returns an accumulator function which incrementally partitions data into `k`\n    clusters.\n\n    If not provided initial centroids, the accumulator caches data vectors for\n    subsequent centroid initialization. Until an accumulator computes initial\n    centroids, an accumulator returns `null`.\n\n    Once an accumulator has initial centroids (either provided or computed), if\n    provided a data vector, the accumulator function returns updated cluster\n    results. If not provided a data vector, the accumulator function returns the\n    current cluster results.\n\n    Cluster results are comprised of the following:\n\n    - centroids: a `k x ndims` matrix containing centroid locations. Each\n      centroid is the component-wise mean of the data points assigned to a\n      centroid's corresponding cluster.\n    - stats: a `k x 4` matrix containing cluster statistics.\n\n    Cluster statistics consists of the following columns:\n\n    - 0: number of data points assigned to a cluster.\n    - 1: total within-cluster sum of squared distances.\n    - 2: arithmetic mean of squared distances.\n    - 3: corrected sample standard deviation of squared distances.\n\n    Because an accumulator incrementally partitions data, one should *not*\n    expect cluster statistics to match similar statistics had provided data been\n    analyzed via a batch algorithm. In an incremental context, data points which\n    would not be considered part of a particular cluster when analyzed via a\n    batch algorithm may contribute to that cluster's statistics when analyzed\n    incrementally.\n\n    In general, the more data provided to an accumulator, the more reliable the\n    cluster statistics.\n\n    Parameters\n    ----------\n    k: integer|ndarray\n        Number of clusters or a `k x ndims` matrix containing initial centroids.\n\n    ndims: integer (optional)\n        Number of dimensions. This argument must accompany an integer-valued\n        first argument.\n\n    options: Object (optional)\n        Function options.\n\n    options.metric: string (optional)\n        Distance metric. Must be one of the following: 'euclidean', 'cosine', or\n        'correlation'. Default: 'euclidean'.\n\n    options.init: ArrayLike (optional)\n        Centroid initialization method and associated (optional) parameters. The\n        first array element specifies the initialization method and must be one\n        of the following: 'kmeans++', 'sample', or 'forgy'. The second array\n        element specifies the number of data points to use when calculating\n        initial centroids. When performing kmeans++ initialization, the third\n        array element specifies the number of trials to perform when randomly\n        selecting candidate centroids. Typically, more trials is correlated with\n        initial centroids which lead to better clustering; however, a greater\n        number of trials increases computational overhead. Default: ['kmeans++',\n        k, 2+⌊ln(k)⌋ ].\n\n    options.normalize: boolean (optional)\n        Boolean indicating whether to normalize incoming data. This option is\n        only relevant for non-Euclidean distance metrics. If set to `true`, an\n        accumulator partitioning data based on cosine distance normalizes\n        provided data to unit Euclidean length. If set to `true`, an accumulator\n        partitioning data based on correlation distance first centers provided\n        data and then normalizes data dimensions to have zero mean and unit\n        variance. If this option is set to `false` and the metric is either\n        cosine or correlation distance, then incoming data *must* already be\n        normalized. Default: true.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy incoming data to prevent mutation\n        during normalization. Default: true.\n\n    options.seed: any (optional)\n        PRNG seed. Setting this option is useful when wanting reproducible\n        initial centroids.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    acc.predict: Function\n        Predicts centroid assignment for each data point in a provided matrix.\n        To specify an output vector, provide a 1-dimensional ndarray as the\n        first argument. Each element in the returned vector corresponds to a\n        predicted cluster index for a respective data point.\n\n    Examples\n    --------\n    > var accumulator = incrkmeans( 5, 2 );\n    > var vec = ndarray( 'float64', 1 );\n    > var buf = new Float64Array( 2 );\n    > var shape = [ 2 ];\n    > var strides = [ 1 ];\n    > var v = vec( buf, shape, strides, 0, 'row-major' );\n    > v.set( 0, 2.0 );\n    > v.set( 1, 1.0 );\n    > out = accumulator( v );\n    > v.set( 0, -5.0 );\n    > v.set( 1, 3.14 );\n    > out = accumulator( v );\n\n","incrkurtosis":"\nincrkurtosis()\n    Returns an accumulator function which incrementally computes a corrected\n    sample excess kurtosis.\n\n    If provided a value, the accumulator function returns an updated corrected\n    sample excess kurtosis. If not provided a value, the accumulator function\n    returns the current corrected sample excess kurtosis.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrkurtosis();\n    > var v = accumulator( 2.0 )\n    null\n    > v = accumulator( 2.0 )\n    null\n    > v = accumulator( -4.0 )\n    null\n    > v = accumulator( -4.0 )\n    -6.0\n\n    See Also\n    --------\n    incrmean, incrskewness, incrstdev, incrsummary, incrvariance\n","incrmaape":"\nincrmaape()\n    Returns an accumulator function which incrementally computes the mean\n    arctangent absolute percentage error (MAAPE).\n\n    If provided input values, the accumulator function returns an updated mean\n    arctangent absolute percentage error. If not provided input values, the\n    accumulator function returns the current mean arctangent absolute percentage\n    error.\n\n    Note that, unlike the mean absolute percentage error (MAPE), the mean\n    arctangent absolute percentage error is expressed in radians on the interval\n    [0,π/2].\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmaape();\n    > var m = accumulator()\n    null\n    > m = accumulator( 2.0, 3.0 )\n    ~0.3218\n    > m = accumulator( 5.0, 2.0 )\n    ~0.6523\n    > m = accumulator()\n    ~0.6523\n\n    See Also\n    --------\n    incrmae, incrmape, incrmean, incrmmaape\n","incrmae":"\nincrmae()\n    Returns an accumulator function which incrementally computes the mean\n    absolute error (MAE).\n\n    If provided input values, the accumulator function returns an updated mean\n    absolute error. If not provided input values, the accumulator function\n    returns the current mean absolute error.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmae();\n    > var m = accumulator()\n    null\n    > m = accumulator( 2.0, 3.0 )\n    1.0\n    > m = accumulator( -5.0, 2.0 )\n    4.0\n    > m = accumulator()\n    4.0\n\n    See Also\n    --------\n    incrmape, incrme, incrmean, incrmmae\n","incrmapcorr":"\nincrmapcorr( W[, mx, my] )\n    Returns an accumulator function which incrementally computes a moving\n    sample absolute Pearson product-moment correlation coefficient.\n\n    The `W` parameter defines the number of values over which to compute the\n    moving sample absolute correlation coefficient.\n\n    If provided values, the accumulator function returns an updated moving\n    sample absolute correlation coefficient. If not provided values, the\n    accumulator function returns the current moving sample absolute correlation\n    coefficient.\n\n    As `W` (x,y) pairs are needed to fill the window buffer, the first `W-1`\n    returned values are calculated from smaller sample sizes. Until the window\n    is full, each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    mx: number (optional)\n        Known mean.\n\n    my: number (optional)\n        Known mean.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmapcorr( 3 );\n    > var ar = accumulator()\n    null\n    > ar = accumulator( 2.0, 1.0 )\n    0.0\n    > ar = accumulator( -5.0, 3.14 )\n    ~1.0\n    > ar = accumulator( 3.0, -1.0 )\n    ~0.925\n    > ar = accumulator( 5.0, -9.5 )\n    ~0.863\n    > ar = accumulator()\n    ~0.863\n\n    See Also\n    --------\n    incrapcorr, incrmpcorr, incrmpcorr2\n","incrmape":"\nincrmape()\n    Returns an accumulator function which incrementally computes the mean\n    absolute percentage error (MAPE).\n\n    If provided input values, the accumulator function returns an updated mean\n    absolute percentage error. If not provided input values, the accumulator\n    function returns the current mean absolute percentage error.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmape();\n    > var m = accumulator()\n    null\n    > m = accumulator( 2.0, 3.0 )\n    ~33.33\n    > m = accumulator( 5.0, 2.0 )\n    ~91.67\n    > m = accumulator()\n    ~91.67\n\n    See Also\n    --------\n    incrmaape, incrmae, incrmean, incrmmape\n","incrmax":"\nincrmax()\n    Returns an accumulator function which incrementally computes a maximum\n    value.\n\n    If provided a value, the accumulator function returns an updated maximum\n    value. If not provided a value, the accumulator function returns the current\n    maximum value.\n\n    If provided `NaN`, the maximum value is `NaN` for all future invocations.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmax();\n    > var m = accumulator()\n    null\n    > m = accumulator( 3.14 )\n    3.14\n    > m = accumulator( -5.0 )\n    3.14\n    > m = accumulator( 10.1 )\n    10.1\n    > m = accumulator()\n    10.1\n\n    See Also\n    --------\n    incrmidrange, incrmin, incrmmax, incrrange, incrsummary\n","incrmaxabs":"\nincrmaxabs()\n    Returns an accumulator function which incrementally computes a maximum\n    absolute value.\n\n    If provided a value, the accumulator function returns an updated maximum\n    absolute value. If not provided a value, the accumulator function returns\n    the current maximum absolute value.\n\n    If provided `NaN`, the maximum value is `NaN` for all future invocations.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmaxabs();\n    > var m = accumulator()\n    null\n    > m = accumulator( 3.14 )\n    3.14\n    > m = accumulator( -5.0 )\n    5.0\n    > m = accumulator( 10.1 )\n    10.1\n    > m = accumulator()\n    10.1\n\n    See Also\n    --------\n    incrmax, incrminabs, incrmmaxabs\n","incrmcovariance":"\nincrmcovariance( W[, mx, my] )\n    Returns an accumulator function which incrementally computes a moving\n    unbiased sample covariance.\n\n    The `W` parameter defines the number of values over which to compute the\n    moving unbiased sample covariance.\n\n    If provided values, the accumulator function returns an updated moving\n    unbiased sample covariance. If not provided values, the accumulator function\n    returns the current moving unbiased sample covariance.\n\n    As `W` (x,y) pairs are needed to fill the window buffer, the first `W-1`\n    returned values are calculated from smaller sample sizes. Until the window\n    is full, each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    mx: number (optional)\n        Known mean.\n\n    my: number (optional)\n        Known mean.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmcovariance( 3 );\n    > var v = accumulator()\n    null\n    > v = accumulator( 2.0, 1.0 )\n    0.0\n    > v = accumulator( -5.0, 3.14 )\n    ~-7.49\n    > v = accumulator( 3.0, -1.0 )\n    -8.35\n    > v = accumulator( 5.0, -9.5 )\n    -29.42\n    > v = accumulator()\n    -29.42\n\n    See Also\n    --------\n    incrcovariance, incrmpcorr, incrmvariance\n","incrmcv":"\nincrmcv( W[, mean] )\n    Returns an accumulator function which incrementally computes a moving\n    coefficient of variation (CV).\n\n    The `W` parameter defines the number of values over which to compute the\n    moving coefficient of variation.\n\n    If provided a value, the accumulator function returns an updated moving\n    coefficient of variation. If not provided a value, the accumulator function\n    returns the current moving coefficient of variation.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    mean: number (optional)\n        Known mean.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmcv( 3 );\n    > var cv = accumulator()\n    null\n    > cv = accumulator( 2.0 )\n    0.0\n    > cv = accumulator( 1.0 )\n    ~0.47\n    > cv = accumulator( 3.0 )\n    0.5\n    > cv = accumulator( 7.0 )\n    ~0.83\n    > cv = accumulator()\n    ~0.83\n\n    See Also\n    --------\n    incrcv, incrmmean, incrmstdev, incrmvmr\n","incrmda":"\nincrmda()\n    Returns an accumulator function which incrementally computes the mean\n    directional accuracy (MDA).\n\n    If provided input values, the accumulator function returns an updated mean\n    directional accuracy. If not provided input values, the accumulator function\n    returns the current mean directional accuracy.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmda();\n    > var m = accumulator()\n    null\n    > m = accumulator( 2.0, 3.0 )\n    1.0\n    > m = accumulator( -5.0, 4.0 )\n    0.5\n    > m = accumulator()\n    0.5\n\n    See Also\n    --------\n    incrmape, incrmmda\n","incrme":"\nincrme()\n    Returns an accumulator function which incrementally computes the mean error\n    (ME).\n\n    If provided input values, the accumulator function returns an updated mean\n    error. If not provided input values, the accumulator function returns the\n    current mean error.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrme();\n    > var m = accumulator()\n    null\n    > m = accumulator( 2.0, 3.0 )\n    1.0\n    > m = accumulator( -5.0, 2.0 )\n    4.0\n    > m = accumulator()\n    4.0\n\n    See Also\n    --------\n    incrmae, incrmean, incrmme\n","incrmean":"\nincrmean()\n    Returns an accumulator function which incrementally computes an arithmetic\n    mean.\n\n    If provided a value, the accumulator function returns an updated mean. If\n    not provided a value, the accumulator function returns the current mean.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmean();\n    > var mu = accumulator()\n    null\n    > mu = accumulator( 2.0 )\n    2.0\n    > mu = accumulator( -5.0 )\n    -1.5\n    > mu = accumulator()\n    -1.5\n\n    See Also\n    --------\n    incrmidrange, incrmmean, incrstdev, incrsum, incrsummary, incrvariance\n","incrmeanabs":"\nincrmeanabs()\n    Returns an accumulator function which incrementally computes an arithmetic\n    mean of absolute values.\n\n    If provided a value, the accumulator function returns an updated mean. If\n    not provided a value, the accumulator function returns the current mean.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmeanabs();\n    > var mu = accumulator()\n    null\n    > mu = accumulator( 2.0 )\n    2.0\n    > mu = accumulator( -5.0 )\n    3.5\n    > mu = accumulator()\n    3.5\n\n    See Also\n    --------\n    incrmean, incrmmeanabs, incrsumabs\n","incrmeanabs2":"\nincrmeanabs2()\n    Returns an accumulator function which incrementally computes an arithmetic\n    mean of squared absolute values.\n\n    If provided a value, the accumulator function returns an updated mean. If\n    not provided a value, the accumulator function returns the current mean.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmeanabs2();\n    > var mu = accumulator()\n    null\n    > mu = accumulator( 2.0 )\n    4.0\n    > mu = accumulator( -5.0 )\n    14.5\n    > mu = accumulator()\n    14.5\n\n    See Also\n    --------\n    incrmean, incrmeanabs, incrmmeanabs2, incrsumabs2\n","incrmeanstdev":"\nincrmeanstdev( [out] )\n    Returns an accumulator function which incrementally computes an arithmetic\n    mean and corrected sample standard deviation.\n\n    If provided a value, the accumulator function returns updated accumulated\n    values. If not provided a value, the accumulator function returns the\n    current accumulated values.\n\n    If provided `NaN`, the accumulated values are equal to `NaN` for all future\n    invocations.\n\n    Parameters\n    ----------\n    out: Array|TypedArray (optional)\n        Output array.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmeanstdev();\n    > var ms = accumulator()\n    null\n    > ms = accumulator( 2.0 )\n    [ 2.0, 0.0 ]\n    > ms = accumulator( -5.0 )\n    [ -1.5, ~4.95 ]\n    > ms = accumulator( 3.0 )\n    [ 0.0, ~4.36 ]\n    > ms = accumulator( 5.0 )\n    [ 1.25, ~4.35 ]\n    > ms = accumulator()\n    [ 1.25, ~4.35 ]\n\n    See Also\n    --------\n    incrmean, incrmeanvar, incrmmeanstdev, incrstdev\n","incrmeanvar":"\nincrmeanvar( [out] )\n    Returns an accumulator function which incrementally computes an arithmetic\n    mean and unbiased sample variance.\n\n    If provided a value, the accumulator function returns updated accumulated\n    values. If not provided a value, the accumulator function returns the\n    current accumulated values.\n\n    If provided `NaN`, the accumulated values are equal to `NaN` for all future\n    invocations.\n\n    Parameters\n    ----------\n    out: Array|TypedArray (optional)\n        Output array.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmeanvar();\n    > var mv = accumulator()\n    null\n    > mv = accumulator( 2.0 )\n    [ 2.0, 0.0 ]\n    > mv = accumulator( -5.0 )\n    [ -1.5, 24.5 ]\n    > mv = accumulator( 3.0 )\n    [ 0.0, 19.0 ]\n    > mv = accumulator( 5.0 )\n    [ 1.25, ~18.92 ]\n    > mv = accumulator()\n    [ 1.25, ~18.92 ]\n\n    See Also\n    --------\n    incrmean, incrmeanstdev, incrmmeanvar, incrvariance\n","incrmgmean":"\nincrmgmean( W )\n    Returns an accumulator function which incrementally computes a moving\n    geometric mean.\n\n    The `W` parameter defines the number of values over which to compute the\n    moving geometric mean.\n\n    If provided a value, the accumulator function returns an updated moving\n    geometric mean. If not provided a value, the accumulator function returns\n    the current moving geometric mean.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmgmean( 3 );\n    > var v = accumulator()\n    null\n    > v = accumulator( 2.0 )\n    2.0\n    > v = accumulator( 5.0 )\n    ~3.16\n    > v = accumulator( 3.0 )\n    ~3.11\n    > v = accumulator( 5.0 )\n    ~4.22\n    > v = accumulator()\n    ~4.22\n\n    See Also\n    --------\n    incrgmean, incrmhmean, incrmmean\n","incrmgrubbs":"\nincrmgrubbs( W[, options] )\n    Returns an accumulator function which incrementally performs a moving\n    Grubbs' test for detecting outliers.\n\n    Grubbs' test assumes that data is normally distributed. Accordingly, one\n    should first verify that the data can be reasonably approximated by a normal\n    distribution before applying the Grubbs' test.\n\n    The `W` parameter defines the number of values over which to perform Grubbs'\n    test. The minimum window size is 3.\n\n    If provided a value, the accumulator function returns updated test results.\n    If not provided a value, the accumulator function returns the current test\n    results.\n\n    Until provided `W` values, the accumulator function returns `null`.\n\n    The accumulator function returns an object having the following fields:\n\n    - rejected: boolean indicating whether the null hypothesis should be\n    rejected.\n    - alpha: significance level.\n    - criticalValue: critical value.\n    - statistic: test statistic.\n    - df: degrees of freedom.\n    - mean: sample mean.\n    - sd: corrected sample standard deviation.\n    - min: minimum value.\n    - max: maximum value.\n    - alt: alternative hypothesis.\n    - method: method name.\n    - print: method for pretty-printing test output.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    options: Object (optional)\n        Function options.\n\n    options.alpha: number (optional)\n        Significance level. Default: 0.05.\n\n    options.alternative: string (optional)\n        Alternative hypothesis. The option may be one of the following values:\n\n        - 'two-sided': test whether the minimum or maximum value is an outlier.\n        - 'min': test whether the minimum value is an outlier.\n        - 'max': test whether the maximum value is an outlier.\n\n        Default: 'two-sided'.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var acc = incrmgrubbs( 20 );\n    > var res = acc()\n    null\n    > for ( var i = 0; i < 200; i++ ) {\n    ...     res = acc( base.random.normal( 10.0, 5.0 ) );\n    ... };\n    > res.print()\n\n    References\n    ----------\n    - Grubbs, Frank E. 1950. \"Sample Criteria for Testing Outlying\n    Observations.\" _The Annals of Mathematical Statistics_ 21 (1). The Institute\n    of Mathematical Statistics: 27–58. doi:10.1214/aoms/1177729885.\n    - Grubbs, Frank E. 1969. \"Procedures for Detecting Outlying Observations in\n    Samples.\" _Technometrics_ 11 (1). Taylor & Francis: 1–21. doi:10.1080/\n    00401706.1969.10490657.\n\n    See Also\n    --------\n    incrgrubbs\n","incrmhmean":"\nincrmhmean( W )\n    Returns an accumulator function which incrementally computes a moving\n    harmonic mean.\n\n    The `W` parameter defines the number of values over which to compute the\n    moving harmonic mean.\n\n    If provided a value, the accumulator function returns an updated moving\n    harmonic mean. If not provided a value, the accumulator function returns the\n    current moving harmonic mean.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmhmean( 3 );\n    > var v = accumulator()\n    null\n    > v = accumulator( 2.0 )\n    2.0\n    > v = accumulator( 5.0 )\n    ~2.86\n    > v = accumulator( 3.0 )\n    ~2.90\n    > v = accumulator( 5.0 )\n    ~4.09\n    > v = accumulator()\n    ~4.09\n\n    See Also\n    --------\n    incrhmean, incrmgmean, incrmmean\n","incrmidrange":"\nincrmidrange()\n    Returns an accumulator function which incrementally computes a mid-range.\n\n    The mid-range is the arithmetic mean of maximum and minimum values.\n    Accordingly, the mid-range is the midpoint of the range and a measure of\n    central tendency.\n\n    If provided a value, the accumulator function returns an updated mid-range.\n    If not provided a value, the accumulator function returns the current mid-\n    range.\n\n    If provided `NaN`, the mid-range is `NaN` for all future invocations.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmidrange();\n    > var v = accumulator()\n    null\n    > v = accumulator( 3.14 )\n    3.14\n    > v = accumulator( -5.0 )\n    ~-0.93\n    > v = accumulator( 10.1 )\n    2.55\n    > v = accumulator()\n    2.55\n\n    See Also\n    --------\n    incrmean, incrmax, incrmin, incrrange, incrsummary\n","incrmin":"\nincrmin()\n    Returns an accumulator function which incrementally computes a minimum\n    value.\n\n    If provided a value, the accumulator function returns an updated minimum\n    value. If not provided a value, the accumulator function returns the current\n    minimum value.\n\n    If provided `NaN`, the minimum value is `NaN` for all future invocations.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmin();\n    > var m = accumulator()\n    null\n    > m = accumulator( 3.14 )\n    3.14\n    > m = accumulator( -5.0 )\n    -5.0\n    > m = accumulator( 10.1 )\n    -5.0\n    > m = accumulator()\n    -5.0\n\n    See Also\n    --------\n    incrmax, incrmidrange, incrmmin, incrrange, incrsummary\n","incrminabs":"\nincrminabs()\n    Returns an accumulator function which incrementally computes a minimum\n    absolute value.\n\n    If provided a value, the accumulator function returns an updated minimum\n    absolute value. If not provided a value, the accumulator function returns\n    the current minimum absolute value.\n\n    If provided `NaN`, the minimum value is `NaN` for all future invocations.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrminabs();\n    > var m = accumulator()\n    null\n    > m = accumulator( 3.14 )\n    3.14\n    > m = accumulator( -5.0 )\n    3.14\n    > m = accumulator( 10.1 )\n    3.14\n    > m = accumulator()\n    3.14\n\n    See Also\n    --------\n    incrmaxabs, incrmin, incrmminabs\n","incrminmax":"\nincrminmax( [out] )\n    Returns an accumulator function which incrementally computes a minimum and\n    maximum.\n\n    If provided a value, the accumulator function returns an updated minimum and\n    maximum. If not provided a value, the accumulator function returns the\n    current minimum and maximum.\n\n    If provided `NaN`, the minimum and maximum values are equal to `NaN` for all\n    future invocations.\n\n    Parameters\n    ----------\n    out: Array|TypedArray (optional)\n        Output array.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrminmax();\n    > var mm = accumulator()\n    null\n    > mm = accumulator( 2.0 )\n    [ 2.0, 2.0 ]\n    > mm = accumulator( -5.0 )\n    [ -5.0, 2.0 ]\n    > mm = accumulator( 3.0 )\n    [ -5.0, 3.0 ]\n    > mm = accumulator( 5.0 )\n    [ -5.0, 5.0 ]\n    > mm = accumulator()\n    [ -5.0, 5.0 ]\n\n    See Also\n    --------\n    incrmax, incrmin, incrmminmax, incrrange\n","incrminmaxabs":"\nincrminmaxabs( [out] )\n    Returns an accumulator function which incrementally computes a minimum and\n    maximum absolute value.\n\n    If provided a value, the accumulator function returns an updated minimum and\n    maximum. If not provided a value, the accumulator function returns the\n    current minimum and maximum.\n\n    If provided `NaN`, the minimum and maximum values are equal to `NaN` for all\n    future invocations.\n\n    Parameters\n    ----------\n    out: Array|TypedArray (optional)\n        Output array.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrminmaxabs();\n    > var mm = accumulator()\n    null\n    > mm = accumulator( 2.0 )\n    [ 2.0, 2.0 ]\n    > mm = accumulator( -5.0 )\n    [ 2.0, 5.0 ]\n    > mm = accumulator( 3.0 )\n    [ 2.0, 5.0 ]\n    > mm = accumulator( 5.0 )\n    [ 2.0, 5.0 ]\n    > mm = accumulator()\n    [ 2.0, 5.0 ]\n\n    See Also\n    --------\n    incrmaxabs, incrminabs, incrminmax, incrmminmaxabs\n","incrmmaape":"\nincrmmaape( W )\n    Returns an accumulator function which incrementally computes a moving\n    mean arctangent absolute percentage error (MAAPE).\n\n    The `W` parameter defines the number of values over which to compute the\n    moving mean arctangent absolute percentage error.\n\n    If provided input values, the accumulator function returns an updated moving\n    mean arctangent absolute percentage error. If not provided input values, the\n    accumulator function returns the current moving mean arctangent absolute\n    percentage error.\n\n    Note that, unlike the mean absolute percentage error (MAPE), the mean\n    arctangent absolute percentage error is expressed in radians on the interval\n    [0,π/2].\n\n    As `W` (f,a) pairs are needed to fill the window buffer, the first `W-1`\n    returned values are calculated from smaller sample sizes. Until the window\n    is full, each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmmaape( 3 );\n    > var m = accumulator()\n    null\n    > m = accumulator( 2.0, 3.0 )\n    ~0.32\n    > m = accumulator( 5.0, 2.0 )\n    ~0.65\n    > m = accumulator( 3.0, 2.0 )\n    ~0.59\n    > m = accumulator( 2.0, 5.0 )\n    ~0.66\n    > m = accumulator()\n    ~0.66\n\n    See Also\n    --------\n    incrmaape, incrmmape, incrmmpe, incrmmean\n","incrmmae":"\nincrmmae( W )\n    Returns an accumulator function which incrementally computes a moving\n    mean absolute error (MAE).\n\n    The `W` parameter defines the number of values over which to compute the\n    moving mean absolute error.\n\n    If provided a value, the accumulator function returns an updated moving\n    mean absolute error. If not provided a value, the accumulator function\n    returns the current moving mean absolute error.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmmae( 3 );\n    > var m = accumulator()\n    null\n    > m = accumulator( 2.0, 3.0 )\n    1.0\n    > m = accumulator( -5.0, 2.0 )\n    4.0\n    > m = accumulator( 3.0, 2.0 )\n    3.0\n    > m = accumulator( 5.0, -2.0 )\n    5.0\n    > m = accumulator()\n    5.0\n\n    See Also\n    --------\n    incrmae, incrmme, incrmmean\n","incrmmape":"\nincrmmape( W )\n    Returns an accumulator function which incrementally computes a moving\n    mean absolute percentage error (MAPE).\n\n    The `W` parameter defines the number of values over which to compute the\n    moving mean absolute percentage error.\n\n    If provided input values, the accumulator function returns an updated moving\n    mean absolute percentage error. If not provided input values, the\n    accumulator function returns the current moving mean absolute percentage\n    error.\n\n    As `W` (f,a) pairs are needed to fill the window buffer, the first `W-1`\n    returned values are calculated from smaller sample sizes. Until the window\n    is full, each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmmape( 3 );\n    > var m = accumulator()\n    null\n    > m = accumulator( 2.0, 3.0 )\n    ~33.33\n    > m = accumulator( 5.0, 2.0 )\n    ~91.67\n    > m = accumulator( 3.0, 2.0 )\n    ~77.78\n    > m = accumulator( 2.0, 5.0 )\n    ~86.67\n    > m = accumulator()\n    ~86.67\n\n    See Also\n    --------\n    incrmape, incrmmaape, incrmmpe, incrmmean\n","incrmmax":"\nincrmmax( W )\n    Returns an accumulator function which incrementally computes a moving\n    maximum value.\n\n    The `W` parameter defines the number of values over which to compute the\n    moving maximum.\n\n    If provided a value, the accumulator function returns an updated moving\n    maximum. If not provided a value, the accumulator function returns the\n    current moving maximum.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmmax( 3 );\n    > var m = accumulator()\n    null\n    > m = accumulator( 2.0 )\n    2.0\n    > m = accumulator( -5.0 )\n    2.0\n    > m = accumulator( 3.0 )\n    3.0\n    > m = accumulator( 5.0 )\n    5.0\n    > m = accumulator()\n    5.0\n\n    See Also\n    --------\n    incrmax, incrmmidrange, incrmmin, incrmrange, incrmsummary\n","incrmmaxabs":"\nincrmmaxabs( W )\n    Returns an accumulator function which incrementally computes a moving\n    maximum absolute value.\n\n    The `W` parameter defines the number of values over which to compute the\n    moving maximum absolute value.\n\n    If provided a value, the accumulator function returns an updated moving\n    maximum absolute value. If not provided a value, the accumulator function\n    returns the current moving maximum absolute value.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmmaxabs( 3 );\n    > var m = accumulator()\n    null\n    > m = accumulator( 2.0 )\n    2.0\n    > m = accumulator( -5.0 )\n    5.0\n    > m = accumulator( 3.0 )\n    5.0\n    > m = accumulator( 5.0 )\n    5.0\n    > m = accumulator()\n    5.0\n\n    See Also\n    --------\n    incrmaxabs, incrmmax, incrmminabs\n","incrmmda":"\nincrmmda( W )\n    Returns an accumulator function which incrementally computes a moving\n    mean directional accuracy (MDA).\n\n    The `W` parameter defines the number of values over which to compute the\n    moving mean directional accuracy.\n\n    If provided input values, the accumulator function returns an updated moving\n    mean directional accuracy. If not provided input values, the accumulator\n    function returns the current moving mean directional accuracy.\n\n    As `W` (f,a) pairs are needed to fill the window buffer, the first `W-1`\n    returned values are calculated from smaller sample sizes. Until the window\n    is full, each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmmda( 3 );\n    > var m = accumulator()\n    null\n    > m = accumulator( 2.0, 3.0 )\n    1.0\n    > m = accumulator( 5.0, 2.0 )\n    0.5\n    > m = accumulator( 3.0, 2.0 )\n    ~0.33\n    > m = accumulator( 4.0, 5.0 )\n    ~0.33\n    > m = accumulator()\n    ~0.33\n\n    See Also\n    --------\n    incrmda, incrmmape\n","incrmme":"\nincrmme( W )\n    Returns an accumulator function which incrementally computes a moving\n    mean error (ME).\n\n    The `W` parameter defines the number of values over which to compute the\n    moving mean error.\n\n    If provided a value, the accumulator function returns an updated moving\n    mean error. If not provided a value, the accumulator function returns the\n    current moving mean error.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmme( 3 );\n    > var m = accumulator()\n    null\n    > m = accumulator( 2.0, 3.0 )\n    1.0\n    > m = accumulator( -5.0, 2.0 )\n    4.0\n    > m = accumulator( 3.0, 2.0 )\n    ~2.33\n    > m = accumulator( 5.0, -2.0 )\n    ~-0.33\n    > m = accumulator()\n    ~-0.33\n\n    See Also\n    --------\n    incrme, incrmmae, incrmmean\n","incrmmean":"\nincrmmean( W )\n    Returns an accumulator function which incrementally computes a moving\n    arithmetic mean.\n\n    The `W` parameter defines the number of values over which to compute the\n    moving mean.\n\n    If provided a value, the accumulator function returns an updated moving\n    mean. If not provided a value, the accumulator function returns the current\n    moving mean.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmmean( 3 );\n    > var mu = accumulator()\n    null\n    > mu = accumulator( 2.0 )\n    2.0\n    > mu = accumulator( -5.0 )\n    -1.5\n    > mu = accumulator( 3.0 )\n    0.0\n    > mu = accumulator( 5.0 )\n    1.0\n    > mu = accumulator()\n    1.0\n\n    See Also\n    --------\n    incrmean, incrmsum, incrmstdev, incrmsummary, incrmvariance\n","incrmmeanabs":"\nincrmmeanabs( W )\n    Returns an accumulator function which incrementally computes a moving\n    arithmetic mean of absolute values.\n\n    The `W` parameter defines the number of values over which to compute the\n    moving mean.\n\n    If provided a value, the accumulator function returns an updated moving\n    mean. If not provided a value, the accumulator function returns the current\n    moving mean.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmmeanabs( 3 );\n    > var mu = accumulator()\n    null\n    > mu = accumulator( 2.0 )\n    2.0\n    > mu = accumulator( -5.0 )\n    3.5\n    > mu = accumulator( 3.0 )\n    ~3.33\n    > mu = accumulator( 5.0 )\n    ~4.33\n    > mu = accumulator()\n    ~4.33\n\n    See Also\n    --------\n    incrmeanabs, incrmmean, incrmsumabs\n","incrmmeanabs2":"\nincrmmeanabs2( W )\n    Returns an accumulator function which incrementally computes a moving\n    arithmetic mean of squared absolute values.\n\n    The `W` parameter defines the number of values over which to compute the\n    moving mean.\n\n    If provided a value, the accumulator function returns an updated moving\n    mean. If not provided a value, the accumulator function returns the current\n    moving mean.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmmeanabs2( 3 );\n    > var m = accumulator()\n    null\n    > m = accumulator( 2.0 )\n    4.0\n    > m = accumulator( -5.0 )\n    14.5\n    > m = accumulator( 3.0 )\n    ~12.67\n    > m = accumulator( 5.0 )\n    ~19.67\n    > m = accumulator()\n    ~19.67\n\n    See Also\n    --------\n    incrmeanabs2, incrmmeanabs, incrmsumabs2\n","incrmmeanstdev":"\nincrmmeanstdev( [out,] W )\n    Returns an accumulator function which incrementally computes a moving\n    arithmetic mean and corrected sample standard deviation.\n\n    The `W` parameter defines the number of values over which to compute the\n    moving arithmetic mean and corrected sample standard deviation.\n\n    If provided a value, the accumulator function returns updated accumulated\n    values. If not provided a value, the accumulator function returns the\n    current moving accumulated values.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    accumulated values are calculated from smaller sample sizes. Until the\n    window is full, each returned accumulated value is calculated from all\n    provided values.\n\n    Parameters\n    ----------\n    out: Array|TypedArray (optional)\n        Output array.\n\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmmeanstdev( 3 );\n    > var v = accumulator()\n    null\n    > v = accumulator( 2.0 )\n    [ 2.0, 0.0 ]\n    > v = accumulator( -5.0 )\n    [ -1.5, ~4.95 ]\n    > v = accumulator( 3.0 )\n    [ 0.0, ~4.36 ]\n    > v = accumulator( 5.0 )\n    [ 1.0, ~5.29 ]\n    > v = accumulator()\n    [ 1.0, ~5.29 ]\n\n    See Also\n    --------\n    incrmeanstdev, incrmmean, incrmmeanvar, incrmstdev\n","incrmmeanvar":"\nincrmmeanvar( [out,] W )\n    Returns an accumulator function which incrementally computes a moving\n    arithmetic mean and unbiased sample variance.\n\n    The `W` parameter defines the number of values over which to compute the\n    moving arithmetic mean and unbiased sample variance.\n\n    If provided a value, the accumulator function returns updated accumulated\n    values. If not provided a value, the accumulator function returns the\n    current moving accumulated values.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    accumulated values are calculated from smaller sample sizes. Until the\n    window is full, each returned accumulated value is calculated from all\n    provided values.\n\n    Parameters\n    ----------\n    out: Array|TypedArray (optional)\n        Output array.\n\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmmeanvar( 3 );\n    > var v = accumulator()\n    null\n    > v = accumulator( 2.0 )\n    [ 2.0, 0.0 ]\n    > v = accumulator( -5.0 )\n    [ -1.5, 24.5 ]\n    > v = accumulator( 3.0 )\n    [ 0.0, 19.0 ]\n    > v = accumulator( 5.0 )\n    [ 1.0, 28.0 ]\n    > v = accumulator()\n    [ 1.0, 28.0 ]\n\n    See Also\n    --------\n    incrmeanvar, incrmmean, incrmmeanstdev, incrmvariance\n","incrmmidrange":"\nincrmmidrange( W )\n    Returns an accumulator function which incrementally computes a moving mid-\n    range.\n\n    The mid-range is the arithmetic mean of maximum and minimum values.\n    Accordingly, the mid-range is the midpoint of the range and a measure of\n    central tendency.\n\n    The `W` parameter defines the number of values over which to compute\n    the moving mid-range.\n\n    If provided a value, the accumulator function returns an updated moving mid-\n    range. If not provided a value, the accumulator function returns the current\n    moving mid-range.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmmidrange( 3 );\n    > var mr = accumulator()\n    null\n    > mr = accumulator( 2.0 )\n    2.0\n    > mr = accumulator( -5.0 )\n    -1.5\n    > mr = accumulator( 3.0 )\n    -1.0\n    > mr = accumulator( 5.0 )\n    0.0\n    > mr = accumulator()\n    0.0\n\n    See Also\n    --------\n    incrmmean, incrmmax, incrmmin, incrmrange\n","incrmmin":"\nincrmmin( W )\n    Returns an accumulator function which incrementally computes a moving\n    minimum value.\n\n    The `W` parameter defines the number of values over which to compute the\n    moving minimum.\n\n    If provided a value, the accumulator function returns an updated moving\n    minimum. If not provided a value, the accumulator function returns the\n    current moving minimum.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmmin( 3 );\n    > var m = accumulator()\n    null\n    > m = accumulator( 2.0 )\n    2.0\n    > m = accumulator( -5.0 )\n    -5.0\n    > m = accumulator( 3.0 )\n    -5.0\n    > m = accumulator( 5.0 )\n    -5.0\n    > m = accumulator()\n    -5.0\n\n    See Also\n    --------\n    incrmin, incrmmax, incrmmidrange, incrmrange, incrmsummary\n","incrmminabs":"\nincrmminabs( W )\n    Returns an accumulator function which incrementally computes a moving\n    minimum absolute value.\n\n    The `W` parameter defines the number of values over which to compute the\n    moving minimum absolute value.\n\n    If provided a value, the accumulator function returns an updated moving\n    minimum absolute value. If not provided a value, the accumulator function\n    returns the current moving minimum absolute value.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmminabs( 3 );\n    > var m = accumulator()\n    null\n    > m = accumulator( 2.0 )\n    2.0\n    > m = accumulator( -5.0 )\n    2.0\n    > m = accumulator( 3.0 )\n    2.0\n    > m = accumulator( 5.0 )\n    3.0\n    > m = accumulator()\n    3.0\n\n    See Also\n    --------\n    incrminabs, incrmmaxabs, incrmmin\n","incrmminmax":"\nincrmminmax( [out,] W )\n    Returns an accumulator function which incrementally computes a moving\n    minimum and maximum.\n\n    The `W` parameter defines the number of values over which to compute the\n    moving minimum and maximum.\n\n    If provided a value, the accumulator function returns an updated moving\n    minimum and maximum. If not provided a value, the accumulator function\n    returns the current moving minimum and maximum.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    minimum and maximum values are calculated from smaller sample sizes. Until\n    the window is full, each returned minimum and maximum is calculated from all\n    provided values.\n\n    Parameters\n    ----------\n    out: Array|TypedArray (optional)\n        Output array.\n\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmminmax( 3 );\n    > var mm = accumulator()\n    null\n    > mm = accumulator( 2.0 )\n    [ 2.0, 2.0 ]\n    > mm = accumulator( -5.0 )\n    [ -5.0, 2.0 ]\n    > mm = accumulator( 3.0 )\n    [ -5.0, 3.0 ]\n    > mm = accumulator( 5.0 )\n    [ -5.0, 5.0 ]\n    > mm = accumulator()\n    [ -5.0, 5.0 ]\n\n    See Also\n    --------\n    incrmax, incrmin, incrmmax, incrminmax, incrmmin, incrmrange\n","incrmminmaxabs":"\nincrmminmaxabs( [out,] W )\n    Returns an accumulator function which incrementally computes moving minimum\n    and maximum absolute values.\n\n    The `W` parameter defines the number of values over which to compute moving\n    minimum and maximum absolute values.\n\n    If provided a value, the accumulator function returns an updated moving\n    minimum and maximum. If not provided a value, the accumulator function\n    returns the current moving minimum and maximum.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    minimum and maximum values are calculated from smaller sample sizes. Until\n    the window is full, each returned minimum and maximum is calculated from all\n    provided values.\n\n    Parameters\n    ----------\n    out: Array|TypedArray (optional)\n        Output array.\n\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmminmaxabs( 3 );\n    > var mm = accumulator()\n    null\n    > mm = accumulator( 2.0 )\n    [ 2.0, 2.0 ]\n    > mm = accumulator( -5.0 )\n    [ 2.0, 5.0 ]\n    > mm = accumulator( 3.0 )\n    [ 2.0, 5.0 ]\n    > mm = accumulator( 5.0 )\n    [ 3.0, 5.0 ]\n    > mm = accumulator()\n    [ 3.0, 5.0 ]\n\n    See Also\n    --------\n    incrminmaxabs, incrmmax, incrmmaxabs, incrmmin, incrmminabs, incrmminmax\n","incrmmpe":"\nincrmmpe( W )\n    Returns an accumulator function which incrementally computes a moving\n    mean percentage error (MPE).\n\n    The `W` parameter defines the number of values over which to compute the\n    moving mean percentage error.\n\n    If provided input values, the accumulator function returns an updated moving\n    mean percentage error. If not provided input values, the accumulator\n    function returns the current moving mean percentage error.\n\n    As `W` (f,a) pairs are needed to fill the window buffer, the first `W-1`\n    returned values are calculated from smaller sample sizes. Until the window\n    is full, each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmmpe( 3 );\n    > var m = accumulator()\n    null\n    > m = accumulator( 2.0, 3.0 )\n    ~33.33\n    > m = accumulator( 5.0, 2.0 )\n    ~-58.33\n    > m = accumulator( 3.0, 2.0 )\n    ~-55.56\n    > m = accumulator( 2.0, 5.0 )\n    ~-46.67\n    > m = accumulator()\n    ~-46.67\n\n    See Also\n    --------\n    incrmmape, incrmme, incrmpe\n","incrmmse":"\nincrmmse( W )\n    Returns an accumulator function which incrementally computes a moving mean\n    squared error (MSE).\n\n    The `W` parameter defines the number of values over which to compute the\n    moving mean squared error.\n\n    If provided a value, the accumulator function returns an updated moving mean\n    squared error. If not provided a value, the accumulator function returns the\n    current moving mean squared error.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmmse( 3 );\n    > var m = accumulator()\n    null\n    > m = accumulator( 2.0, 3.0 )\n    1.0\n    > m = accumulator( -5.0, 2.0 )\n    25.0\n    > m = accumulator( 3.0, 2.0 )\n    17.0\n    > m = accumulator( 5.0, -2.0 )\n    33.0\n    > m = accumulator()\n    33.0\n\n    See Also\n    --------\n    incrmrmse, incrmrss, incrmse\n","incrmpcorr":"\nincrmpcorr( W[, mx, my] )\n    Returns an accumulator function which incrementally computes a moving\n    sample Pearson product-moment correlation coefficient.\n\n    The `W` parameter defines the number of values over which to compute the\n    moving sample correlation coefficient.\n\n    If provided values, the accumulator function returns an updated moving\n    sample correlation coefficient. If not provided values, the accumulator\n    function returns the current moving sample correlation coefficient.\n\n    As `W` (x,y) pairs are needed to fill the window buffer, the first `W-1`\n    returned values are calculated from smaller sample sizes. Until the window\n    is full, each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    mx: number (optional)\n        Known mean.\n\n    my: number (optional)\n        Known mean.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmpcorr( 3 );\n    > var r = accumulator()\n    null\n    > r = accumulator( 2.0, 1.0 )\n    0.0\n    > r = accumulator( -5.0, 3.14 )\n    ~-1.0\n    > r = accumulator( 3.0, -1.0 )\n    ~-0.925\n    > r = accumulator( 5.0, -9.5 )\n    ~-0.863\n    > r = accumulator()\n    ~-0.863\n\n    See Also\n    --------\n    incrmcovariance, incrmpcorrdist, incrpcorr\n","incrmpcorr2":"\nincrmpcorr2( W[, mx, my] )\n    Returns an accumulator function which incrementally computes a moving\n    squared sample Pearson product-moment correlation coefficient.\n\n    The `W` parameter defines the number of values over which to compute the\n    moving squared sample correlation coefficient.\n\n    If provided values, the accumulator function returns an updated moving\n    squared sample correlation coefficient. If not provided values, the\n    accumulator function returns the current moving squared sample correlation\n    coefficient.\n\n    As `W` (x,y) pairs are needed to fill the window buffer, the first `W-1`\n    returned values are calculated from smaller sample sizes. Until the window\n    is full, each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    mx: number (optional)\n        Known mean.\n\n    my: number (optional)\n        Known mean.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmpcorr2( 3 );\n    > var r2 = accumulator()\n    null\n    > r2 = accumulator( 2.0, 1.0 )\n    0.0\n    > r2 = accumulator( -5.0, 3.14 )\n    ~1.0\n    > r2 = accumulator( 3.0, -1.0 )\n    ~0.86\n    > r2 = accumulator( 5.0, -9.5 )\n    ~0.74\n    > r2 = accumulator()\n    ~0.74\n\n    See Also\n    --------\n    incrmapcorr, incrmpcorr, incrpcorr2\n","incrmpcorrdist":"\nincrmpcorrdist( W[, mx, my] )\n    Returns an accumulator function which incrementally computes a moving\n    sample Pearson product-moment correlation distance.\n\n    The correlation distance is defined as one minus the Pearson product-moment\n    correlation coefficient and, thus, resides on the interval [0,2].\n\n    However, due to limitations inherent in representing numeric values using\n    floating-point format (i.e., the inability to represent numeric values with\n    infinite precision), the correlation distance between perfectly correlated\n    random variables may *not* be `0` or `2`. In fact, the correlation distance\n    is *not* guaranteed to be strictly on the interval [0,2]. Any computed\n    distance should, however, be within floating-point roundoff error.\n\n    The `W` parameter defines the number of values over which to compute the\n    moving sample correlation distance.\n\n    If provided values, the accumulator function returns an updated moving\n    sample correlation distance. If not provided values, the accumulator\n    function returns the current moving sample correlation distance.\n\n    As `W` (x,y) pairs are needed to fill the window buffer, the first `W-1`\n    returned values are calculated from smaller sample sizes. Until the window\n    is full, each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    mx: number (optional)\n        Known mean.\n\n    my: number (optional)\n        Known mean.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmpcorrdist( 3 );\n    > var d = accumulator()\n    null\n    > d = accumulator( 2.0, 1.0 )\n    1.0\n    > d = accumulator( -5.0, 3.14 )\n    ~2.0\n    > d = accumulator( 3.0, -1.0 )\n    ~1.925\n    > d = accumulator( 5.0, -9.5 )\n    ~1.863\n    > d = accumulator()\n    ~1.863\n\n    See Also\n    --------\n    incrmpcorr, incrpcorrdist\n","incrmpe":"\nincrmpe()\n    Returns an accumulator function which incrementally computes the mean\n    percentage error (MPE).\n\n    If provided input values, the accumulator function returns an updated mean\n    percentage error. If not provided input values, the accumulator function\n    returns the current mean percentage error.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmpe();\n    > var m = accumulator()\n    null\n    > m = accumulator( 2.0, 3.0 )\n    ~33.33\n    > m = accumulator( 5.0, 2.0 )\n    ~-58.33\n    > m = accumulator()\n    ~-58.33\n\n    See Also\n    --------\n    incrmape, incrme, incrmmpe\n","incrmprod":"\nincrmprod( W )\n    Returns an accumulator function which incrementally computes a moving\n    product.\n\n    The `W` parameter defines the number of values over which to compute the\n    moving product.\n\n    If provided a value, the accumulator function returns an updated moving\n    product. If not provided a value, the accumulator function returns the\n    current moving product.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all provided values.\n\n    For accumulations over large windows or accumulations of large numbers, care\n    should be taken to prevent overflow. Note, however, that overflow/underflow\n    may be transient, as the accumulator does not use a double-precision\n    floating-point number to store an accumulated product. Instead, the\n    accumulator splits an accumulated product into a normalized fraction and\n    exponent and updates each component separately. Doing so guards against a\n    loss in precision.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmprod( 3 );\n    > var p = accumulator()\n    null\n    > p = accumulator( 2.0 )\n    2.0\n    > p = accumulator( -5.0 )\n    -10.0\n    > p = accumulator( 3.0 )\n    -30.0\n    > p = accumulator( 5.0 )\n    -75.0\n    > p = accumulator()\n    -75.0\n\n    See Also\n    --------\n    incrmsum, incrprod\n","incrmrange":"\nincrmrange( W )\n    Returns an accumulator function which incrementally computes a moving range.\n\n    The `W` parameter defines the number of values over which to compute the\n    moving range.\n\n    If provided a value, the accumulator function returns an updated moving\n    range. If not provided a value, the accumulator function returns the current\n    moving range.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmrange( 3 );\n    > var r = accumulator()\n    null\n    > r = accumulator( 2.0 )\n    0.0\n    > r = accumulator( -5.0 )\n    7.0\n    > r = accumulator( 3.0 )\n    8.0\n    > r = accumulator( 5.0 )\n    10.0\n    > r = accumulator()\n    10.0\n\n    See Also\n    --------\n    incrmmax, incrmmean, incrmmin, incrmsummary, incrrange\n","incrmrmse":"\nincrmrmse( W )\n    Returns an accumulator function which incrementally computes a moving root\n    mean squared error (RMSE).\n\n    The `W` parameter defines the number of values over which to compute the\n    moving root mean squared error.\n\n    If provided a value, the accumulator function returns an updated moving root\n    mean squared error. If not provided a value, the accumulator function\n    returns the current moving root mean squared error.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmrmse( 3 );\n    > var r = accumulator()\n    null\n    > r = accumulator( 2.0, 3.0 )\n    1.0\n    > r = accumulator( -5.0, 2.0 )\n    5.0\n    > r = accumulator( 3.0, 2.0 )\n    ~4.12\n    > r = accumulator( 5.0, -2.0 )\n    ~5.74\n    > r = accumulator()\n    ~5.74\n\n    See Also\n    --------\n    incrmmse, incrmrss, incrrmse\n","incrmrss":"\nincrmrss( W )\n    Returns an accumulator function which incrementally computes a moving\n    residual sum of squares (RSS).\n\n    The `W` parameter defines the number of values over which to compute the\n    moving residual sum of squares.\n\n    If provided a value, the accumulator function returns an updated moving\n    residual sum of squares. If not provided a value, the accumulator function\n    returns the current moving residual sum of squares.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmrss( 3 );\n    > var r = accumulator()\n    null\n    > r = accumulator( 2.0, 3.0 )\n    1.0\n    > r = accumulator( -5.0, 2.0 )\n    50.0\n    > r = accumulator( 3.0, 2.0 )\n    51.0\n    > r = accumulator( 5.0, -2.0 )\n    99.0\n    > r = accumulator()\n    99.0\n\n    See Also\n    --------\n    incrrss, incrmmse, incrmrmse\n","incrmse":"\nincrmse()\n    Returns an accumulator function which incrementally computes the mean\n    squared error (MSE).\n\n    If provided input values, the accumulator function returns an updated mean\n    squared error. If not provided input values, the accumulator function\n    returns the current mean squared error.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmse();\n    > var m = accumulator()\n    null\n    > m = accumulator( 2.0, 3.0 )\n    1.0\n    > m = accumulator( -5.0, 2.0 )\n    25.0\n    > m = accumulator()\n    25.0\n\n    See Also\n    --------\n    incrmmse, incrrmse, incrrss\n","incrmstdev":"\nincrmstdev( W[, mean] )\n    Returns an accumulator function which incrementally computes a moving\n    corrected sample standard deviation.\n\n    The `W` parameter defines the number of values over which to compute the\n    moving corrected sample standard deviation.\n\n    If provided a value, the accumulator function returns an updated moving\n    corrected sample standard deviation. If not provided a value, the\n    accumulator function returns the current moving corrected sample standard\n    deviation.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    mean: number (optional)\n        Known mean.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmstdev( 3 );\n    > var s = accumulator()\n    null\n    > s = accumulator( 2.0 )\n    0.0\n    > s = accumulator( -5.0 )\n    ~4.95\n    > s = accumulator( 3.0 )\n    ~4.36\n    > s = accumulator( 5.0 )\n    ~5.29\n    > s = accumulator()\n    ~5.29\n\n    See Also\n    --------\n    incrmmean, incrmsummary, incrmvariance, incrstdev\n","incrmsum":"\nincrmsum( W )\n    Returns an accumulator function which incrementally computes a moving sum.\n\n    The `W` parameter defines the number of values over which to compute the\n    moving sum.\n\n    If provided a value, the accumulator function returns an updated moving sum.\n    If not provided a value, the accumulator function returns the current moving\n    sum.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmsum( 3 );\n    > var s = accumulator()\n    null\n    > s = accumulator( 2.0 )\n    2.0\n    > s = accumulator( -5.0 )\n    -3.0\n    > s = accumulator( 3.0 )\n    0.0\n    > s = accumulator( 5.0 )\n    3.0\n    > s = accumulator()\n    3.0\n\n    See Also\n    --------\n    incrmmean, incrmsummary, incrsum\n","incrmsumabs":"\nincrmsumabs( W )\n    Returns an accumulator function which incrementally computes a moving sum of\n    absolute values.\n\n    The `W` parameter defines the number of values over which to compute the\n    moving sum.\n\n    If provided a value, the accumulator function returns an updated moving sum.\n    If not provided a value, the accumulator function returns the current moving\n    sum.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmsumabs( 3 );\n    > var s = accumulator()\n    null\n    > s = accumulator( 2.0 )\n    2.0\n    > s = accumulator( -5.0 )\n    7.0\n    > s = accumulator( 3.0 )\n    10.0\n    > s = accumulator( -5.0 )\n    13.0\n    > s = accumulator()\n    13.0\n\n    See Also\n    --------\n    incrmmeanabs, incrmsum, incrsum, incrsumabs\n","incrmsumabs2":"\nincrmsumabs2( W )\n    Returns an accumulator function which incrementally computes a moving sum of\n    squared absolute values.\n\n    The `W` parameter defines the number of values over which to compute the\n    moving sum.\n\n    If provided a value, the accumulator function returns an updated moving sum.\n    If not provided a value, the accumulator function returns the current moving\n    sum.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmsumabs2( 3 );\n    > var s = accumulator()\n    null\n    > s = accumulator( 2.0 )\n    4.0\n    > s = accumulator( -5.0 )\n    29.0\n    > s = accumulator( 3.0 )\n    38.0\n    > s = accumulator( -5.0 )\n    59.0\n    > s = accumulator()\n    59.0\n\n    See Also\n    --------\n    incrmmeanabs2, incrmsumabs, incrsumabs, incrsumabs2\n","incrmsummary":"\nincrmsummary( W )\n    Returns an accumulator function which incrementally computes a moving\n    statistical summary.\n\n    The `W` parameter defines the number of values over which to compute the\n    moving statistical summary.\n\n    If provided a value, the accumulator function returns an updated moving\n    statistical summary. If not provided a value, the accumulator function\n    returns the current moving statistical summary.\n\n    The returned summary is an object containing the following fields:\n\n    - window: window size.\n    - sum: sum.\n    - mean: arithmetic mean.\n    - variance: unbiased sample variance.\n    - stdev: corrected sample standard deviation.\n    - min: minimum value.\n    - max: maximum value.\n    - range: range.\n    - midrange: arithmetic mean of the minimum and maximum values.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    summaries are calculated from smaller sample sizes. Until the window is\n    full, each returned summary is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmsummary( 3 );\n    > var s = accumulator()\n    {}\n    > s = accumulator( 2.0 )\n    {...}\n    > s = accumulator( -5.0 )\n    {...}\n    > s = accumulator()\n    {...}\n\n    See Also\n    --------\n    incrmmean, incrmstdev, incrmsum, incrmvariance, incrsummary\n","incrmsumprod":"\nincrmsumprod( W )\n    Returns an accumulator function which incrementally computes a moving sum of\n    products.\n\n    The `W` parameter defines the number of (x,y) pairs over which to compute\n    the moving sum of products.\n\n    If provided input values, the accumulator function returns an updated moving\n    sum. If not provided input values, the accumulator function returns the\n    current moving sum.\n\n    As `W` (x,y) pairs are needed to fill the window buffer, the first `W-1`\n    returned values are calculated from smaller sample sizes. Until the window\n    is full, each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmsumprod( 3 );\n    > var s = accumulator()\n    null\n    > s = accumulator( 2.0, 3.0 )\n    6.0\n    > s = accumulator( -5.0, 2.0 )\n    -4.0\n    > s = accumulator( 3.0, -2.0 )\n    -10.0\n    > s = accumulator( 5.0, 3.0 )\n    -1.0\n    > s = accumulator()\n    -1.0\n\n    See Also\n    --------\n    incrmprod, incrmsum, incrsumprod\n","incrmvariance":"\nincrmvariance( W[, mean] )\n    Returns an accumulator function which incrementally computes a moving\n    unbiased sample variance.\n\n    The `W` parameter defines the number of values over which to compute the\n    moving unbiased sample variance.\n\n    If provided a value, the accumulator function returns an updated moving\n    unbiased sample variance. If not provided a value, the accumulator function\n    returns the current moving unbiased sample variance.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    mean: number (optional)\n        Known mean.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmvariance( 3 );\n    > var s2 = accumulator()\n    null\n    > s2 = accumulator( 2.0 )\n    0.0\n    > s2 = accumulator( -5.0 )\n    24.5\n    > s2 = accumulator( 3.0 )\n    19.0\n    > s2 = accumulator( 5.0 )\n    28.0\n    > s2 = accumulator()\n    28.0\n\n    See Also\n    --------\n    incrmmean, incrmstdev, incrmsummary, incrvariance\n","incrmvmr":"\nincrmvmr( W[, mean] )\n    Returns an accumulator function which incrementally computes a moving\n    variance-to-mean (VMR).\n\n    The `W` parameter defines the number of values over which to compute the\n    moving variance-to-mean ratio.\n\n    If provided a value, the accumulator function returns an updated moving\n    variance-to-mean ratio. If not provided a value, the accumulator function\n    returns the current moving variance-to-mean ratio.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all provided values.\n\n    Parameters\n    ----------\n    W: integer\n        Window size.\n\n    mean: number (optional)\n        Known mean.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrmvmr( 3 );\n    > var F = accumulator()\n    null\n    > F = accumulator( 2.0 )\n    0.0\n    > F = accumulator( 1.0 )\n    ~0.33\n    > F = accumulator( 3.0 )\n    0.5\n    > F = accumulator( 7.0 )\n    ~2.55\n    > F = accumulator()\n    ~2.55\n\n    See Also\n    --------\n    incrmmean, incrmvariance, incrvmr\n","incrpcorr":"\nincrpcorr( [mx, my] )\n    Returns an accumulator function which incrementally computes a sample\n    Pearson product-moment correlation coefficient.\n\n    If provided values, the accumulator function returns an updated sample\n    correlation coefficient. If not provided values, the accumulator function\n    returns the current sample correlation coefficient.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Parameters\n    ----------\n    mx: number (optional)\n        Known mean.\n\n    my: number (optional)\n        Known mean.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrpcorr();\n    > var r = accumulator()\n    null\n    > r = accumulator( 2.0, 1.0 )\n    0.0\n    > r = accumulator( -5.0, 3.14 )\n    ~-1.0\n    > r = accumulator()\n    ~-1.0\n\n    See Also\n    --------\n    incrcovariance, incrmpcorr, incrsummary\n","incrpcorr2":"\nincrpcorr2( [mx, my] )\n    Returns an accumulator function which incrementally computes the squared\n    sample Pearson product-moment correlation coefficient.\n\n    If provided values, the accumulator function returns an updated accumulated\n    value. If not provided values, the accumulator function returns the current\n    accumulated value.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Parameters\n    ----------\n    mx: number (optional)\n        Known mean.\n\n    my: number (optional)\n        Known mean.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrpcorr2();\n    > var r2 = accumulator()\n    null\n    > r2 = accumulator( 2.0, 1.0 )\n    0.0\n    > r2 = accumulator( -5.0, 3.14 )\n    ~1.0\n    > r2 = accumulator()\n    ~1.0\n\n    See Also\n    --------\n    incrapcorr, incrmpcorr2, incrpcorr\n","incrpcorrdist":"\nincrpcorrdist( [mx, my] )\n    Returns an accumulator function which incrementally computes a sample\n    Pearson product-moment correlation distance.\n\n    The correlation distance is defined as one minus the Pearson product-moment\n    correlation coefficient and, thus, resides on the interval [0,2].\n\n    If provided values, the accumulator function returns an updated sample\n    correlation distance. If not provided values, the accumulator function\n    returns the current sample correlation distance.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Parameters\n    ----------\n    mx: number (optional)\n        Known mean.\n\n    my: number (optional)\n        Known mean.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrpcorrdist();\n    > var d = accumulator()\n    null\n    > d = accumulator( 2.0, 1.0 )\n    1.0\n    > d = accumulator( -5.0, 3.14 )\n    ~2.0\n    > d = accumulator()\n    ~2.0\n\n    See Also\n    --------\n    incrcovariance, incrpcorr, incrsummary\n","incrpcorrdistmat":"\nincrpcorrdistmat( out[, means] )\n    Returns an accumulator function which incrementally computes a sample\n    Pearson product-moment correlation distance matrix.\n\n    If provided a data vector, the accumulator function returns an updated\n    sample correlation distance matrix. If not provided a data vector, the\n    accumulator function returns the current sample correlation distance matrix.\n\n    Due to limitations inherent in representing numeric values using floating-\n    point format (i.e., the inability to represent numeric values with infinite\n    precision), the correlation distance between perfectly correlated random\n    variables may *not* be `0` or `2`. In fact, the correlation distance is\n    *not* guaranteed to be strictly on the interval [0,2]. Any computed distance\n    should, however, be within floating-point roundoff error.\n\n    Parameters\n    ----------\n    out: integer|ndarray\n        Order of the correlation distance matrix or a square 2-dimensional\n        ndarray for storing the correlation distance matrix.\n\n    means: ndarray (optional)\n        Known means.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrpcorrdistmat( 2 );\n    > var out = accumulator()\n    <ndarray>\n    > var vec = ndarray( 'float64', 1 );\n    > var buf = new Float64Array( 2 );\n    > var shape = [ 2 ];\n    > var strides = [ 1 ];\n    > var v = vec( buf, shape, strides, 0, 'row-major' );\n    > v.set( 0, 2.0 );\n    > v.set( 1, 1.0 );\n    > out = accumulator( v )\n    <ndarray>\n    > v.set( 0, -5.0 );\n    > v.set( 1, 3.14 );\n    > out = accumulator( v )\n    <ndarray>\n    > out = accumulator()\n    <ndarray>\n\n    See Also\n    --------\n    incrpcorrdist, incrpcorrmat\n","incrpcorrmat":"\nincrpcorrmat( out[, means] )\n    Returns an accumulator function which incrementally computes a sample\n    Pearson product-moment correlation matrix.\n\n    If provided a data vector, the accumulator function returns an updated\n    sample correlation matrix. If not provided a data vector, the accumulator\n    function returns the current sample correlation matrix.\n\n    Parameters\n    ----------\n    out: integer|ndarray\n        Order of the correlation matrix or a square 2-dimensional ndarray for\n        storing the correlation matrix.\n\n    means: ndarray (optional)\n        Known means.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrpcorrmat( 2 );\n    > var out = accumulator()\n    <ndarray>\n    > var vec = ndarray( 'float64', 1 );\n    > var buf = new Float64Array( 2 );\n    > var shape = [ 2 ];\n    > var strides = [ 1 ];\n    > var v = vec( buf, shape, strides, 0, 'row-major' );\n    > v.set( 0, 2.0 );\n    > v.set( 1, 1.0 );\n    > out = accumulator( v )\n    <ndarray>\n    > v.set( 0, -5.0 );\n    > v.set( 1, 3.14 );\n    > out = accumulator( v )\n    <ndarray>\n    > out = accumulator()\n    <ndarray>\n\n    See Also\n    --------\n    incrcovmat, incrpcorr, incrpcorrdistmat\n","incrprod":"\nincrprod()\n    Returns an accumulator function which incrementally computes a product.\n\n    If provided a value, the accumulator function returns an updated product. If\n    not provided a value, the accumulator function returns the current product.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    For long running accumulations or accumulations of large numbers, care\n    should be taken to prevent overflow. Note, however, that overflow/underflow\n    may be transient, as the accumulator does not use a double-precision\n    floating-point number to store an accumulated product. Instead, the\n    accumulator splits an accumulated product into a normalized fraction and\n    exponent and updates each component separately. Doing so guards against a\n    loss in precision.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrprod();\n    > var v = accumulator()\n    null\n    > v = accumulator( 2.0 )\n    2.0\n    > v = accumulator( -5.0 )\n    -10.0\n    > v = accumulator()\n    -10.0\n\n    See Also\n    --------\n    incrmprod, incrsum, incrsummary\n","incrrange":"\nincrrange()\n    Returns an accumulator function which incrementally computes a range.\n\n    If provided a value, the accumulator function returns an updated range. If\n    not provided a value, the accumulator function returns the current range.\n\n    If provided `NaN`, the range is `NaN` for all future invocations.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrrange();\n    > var v = accumulator()\n    null\n    > v = accumulator( -2.0 )\n    0.0\n    > v = accumulator( 1.0 )\n    3.0\n    > v = accumulator( 3.0 )\n    5.0\n    > v = accumulator()\n    5.0\n\n    See Also\n    --------\n    incrmax, incrmean, incrmin, incrmrange, incrsummary\n","incrrmse":"\nincrrmse()\n    Returns an accumulator function which incrementally computes the root mean\n    squared error (RMSE).\n\n    If provided input values, the accumulator function returns an updated root\n    mean squared error. If not provided input values, the accumulator function\n    returns the current root mean squared error.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrrmse();\n    > var r = accumulator()\n    null\n    > r = accumulator( 2.0, 3.0 )\n    1.0\n    > r = accumulator( -5.0, 2.0 )\n    5.0\n    > r = accumulator()\n    5.0\n\n    See Also\n    --------\n    incrmrmse, incrmse, incrrss\n","incrrss":"\nincrrss()\n    Returns an accumulator function which incrementally computes the residual\n    sum of squares (RSS).\n\n    If provided input values, the accumulator function returns an updated\n    residual sum of squares. If not provided input values, the accumulator\n    function returns the current residual sum of squares.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrrss();\n    > var r = accumulator()\n    null\n    > r = accumulator( 2.0, 3.0 )\n    1.0\n    > r = accumulator( -5.0, 2.0 )\n    50.0\n    > r = accumulator()\n    50.0\n\n    See Also\n    --------\n    incrmrss, incrmse, incrrmse\n","incrskewness":"\nincrskewness()\n    Returns an accumulator function which incrementally computes a corrected\n    sample skewness.\n\n    If provided a value, the accumulator function returns an updated corrected\n    sample skewness. If not provided a value, the accumulator function returns\n    the current corrected sample skewness.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrskewness();\n    > var v = accumulator( 2.0 )\n    null\n    > v = accumulator( -5.0 )\n    null\n    > v = accumulator( -10.0 )\n    ~0.492\n    > v = accumulator()\n    ~0.492\n\n    See Also\n    --------\n    incrkurtosis, incrmean, incrstdev, incrsummary, incrvariance\n","incrspace":"\nincrspace( start, stop[, increment] )\n    Generates a linearly spaced numeric array using a provided increment.\n\n    If an `increment` is not provided, the default `increment` is `1`.\n\n    The output array is guaranteed to include the `start` value but does not\n    include the `stop` value.\n\n    Parameters\n    ----------\n    start: number\n        First array value.\n\n    stop: number\n        Array element bound.\n\n    increment: number (optional)\n        Increment. Default: `1`.\n\n    Returns\n    -------\n    arr: Array\n        Linearly spaced numeric array.\n\n    Examples\n    --------\n    > var arr = incrspace( 0, 11, 2 )\n    [ 0, 2, 4, 6, 8, 10 ]\n\n    See Also\n    --------\n    linspace, logspace\n","incrstdev":"\nincrstdev( [mean] )\n    Returns an accumulator function which incrementally computes a corrected\n    sample standard deviation.\n\n    If provided a value, the accumulator function returns an updated corrected\n    sample standard deviation. If not provided a value, the accumulator function\n    returns the current corrected sample standard deviation.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Parameters\n    ----------\n    mean: number (optional)\n        Known mean.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrstdev();\n    > var s = accumulator()\n    null\n    > s = accumulator( 2.0 )\n    0.0\n    > s = accumulator( -5.0 )\n    ~4.95\n    > s = accumulator()\n    ~4.95\n\n    See Also\n    --------\n    incrkurtosis, incrmean, incrmstdev, incrskewness, incrsummary, incrvariance\n","incrsum":"\nincrsum()\n    Returns an accumulator function which incrementally computes a sum.\n\n    If provided a value, the accumulator function returns an updated sum. If not\n    provided a value, the accumulator function returns the current sum.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    For long running accumulations or accumulations of large numbers, care\n    should be taken to prevent overflow.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrsum();\n    > var s = accumulator()\n    null\n    > s = accumulator( 2.0 )\n    2.0\n    > s = accumulator( -5.0 )\n    -3.0\n    > s = accumulator()\n    -3.0\n\n    See Also\n    --------\n    incrcount, incrmean, incrmsum, incrprod, incrsummary\n","incrsumabs":"\nincrsumabs()\n    Returns an accumulator function which incrementally computes a sum of\n    absolute values.\n\n    If provided a value, the accumulator function returns an updated sum. If not\n    provided a value, the accumulator function returns the current sum.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    For long running accumulations or accumulations of large numbers, care\n    should be taken to prevent overflow.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrsumabs();\n    > var s = accumulator()\n    null\n    > s = accumulator( 2.0 )\n    2.0\n    > s = accumulator( -5.0 )\n    7.0\n    > s = accumulator()\n    7.0\n\n    See Also\n    --------\n    incrmeanabs, incrmsumabs, incrsum\n","incrsumabs2":"\nincrsumabs2()\n    Returns an accumulator function which incrementally computes a sum of\n    squared absolute values.\n\n    If provided a value, the accumulator function returns an updated sum. If not\n    provided a value, the accumulator function returns the current sum.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    For long running accumulations or accumulations of large numbers, care\n    should be taken to prevent overflow.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrsumabs2();\n    > var s = accumulator()\n    null\n    > s = accumulator( 2.0 )\n    4.0\n    > s = accumulator( -5.0 )\n    29.0\n    > s = accumulator()\n    29.0\n\n    See Also\n    --------\n    incrmeanabs2, incrmsumabs2, incrsumabs\n","incrsummary":"\nincrsummary()\n    Returns an accumulator function which incrementally computes a statistical\n    summary.\n\n    If provided a value, the accumulator function returns an updated summary. If\n    not provided a value, the accumulator function returns the current summary.\n\n    The returned summary is an object containing the following fields:\n\n    - count: count.\n    - max: maximum value.\n    - min: minimum value.\n    - range: range.\n    - midrange: mid-range.\n    - sum: sum.\n    - mean: arithmetic mean.\n    - variance: unbiased sample variance.\n    - stdev: corrected sample standard deviation.\n    - skewness: corrected sample skewness.\n    - kurtosis: corrected sample excess kurtosis.\n\n    For long running accumulations or accumulations of large numbers, care\n    should be taken to prevent overflow.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrsummary();\n    > var s = accumulator()\n    {}\n    > s = accumulator( 2.0 )\n    {...}\n    > s = accumulator( -5.0 )\n    {...}\n    > s = accumulator()\n    {...}\n\n    See Also\n    --------\n    incrcount, incrkurtosis, incrmax, incrmean, incrmidrange, incrmin, incrmsummary, incrrange, incrskewness, incrstdev, incrsum, incrvariance\n","incrsumprod":"\nincrsumprod()\n    Returns an accumulator function which incrementally computes a sum of\n    products.\n\n    If provided input values, the accumulator function returns an updated sum.\n    If not provided input values, the accumulator function returns the current\n    sum.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    For long running accumulations or accumulations of large numbers, care\n    should be taken to prevent overflow.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrsumprod();\n    > var s = accumulator()\n    null\n    > s = accumulator( 2.0, 3.0 )\n    6.0\n    > s = accumulator( -5.0, 2.0 )\n    -4.0\n    > s = accumulator()\n    -4.0\n\n    See Also\n    --------\n    incrmsumprod, incrprod, incrsum\n","incrvariance":"\nincrvariance( [mean] )\n    Returns an accumulator function which incrementally computes an unbiased\n    sample variance.\n\n    If provided a value, the accumulator function returns an updated unbiased\n    sample variance. If not provided a value, the accumulator function returns\n    the current unbiased sample variance.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Parameters\n    ----------\n    mean: number (optional)\n        Known mean.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrvariance();\n    > var s2 = accumulator()\n    null\n    > s2 = accumulator( 2.0 )\n    0.0\n    > s2 = accumulator( -5.0 )\n    24.5\n    > s2 = accumulator()\n    24.5\n\n    See Also\n    --------\n    incrkurtosis, incrmean, incrmstdev, incrskewness, incrstdev, incrsummary\n","incrvmr":"\nincrvmr( [mean] )\n    Returns an accumulator function which incrementally computes a variance-to-\n    mean ratio (VMR).\n\n    If provided a value, the accumulator function returns an updated accumulated\n    value. If not provided a value, the accumulator function returns the current\n    accumulated value.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    Parameters\n    ----------\n    mean: number (optional)\n        Known mean.\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrvmr();\n    > var D = accumulator()\n    null\n    > D = accumulator( 2.0 )\n    0.0\n    > D = accumulator( 1.0 )\n    ~0.33\n    > D = accumulator()\n    ~0.33\n\n    See Also\n    --------\n    incrmean, incrmvmr, incrvariance\n","incrwmean":"\nincrwmean()\n    Returns an accumulator function which incrementally computes a weighted\n    arithmetic mean.\n\n    If provided arguments, the accumulator function returns an updated weighted\n    mean. If not provided arguments, the accumulator function returns the\n    current weighted mean.\n\n    If provided `NaN` or a value which, when used in computations, results in\n    `NaN`, the accumulated value is `NaN` for all future invocations.\n\n    The accumulator function accepts two arguments:\n\n    - x: value\n    - w: weight\n\n    Returns\n    -------\n    acc: Function\n        Accumulator function.\n\n    Examples\n    --------\n    > var accumulator = incrwmean();\n    > var mu = accumulator()\n    null\n    > mu = accumulator( 2.0, 1.0 )\n    2.0\n    > mu = accumulator( 2.0, 0.5 )\n    2.0\n    > mu = accumulator( 3.0, 1.5 )\n    2.5\n    > mu = accumulator()\n    2.5\n\n    See Also\n    --------\n    increwmean, incrmean, incrmmean\n","ind2sub":"\nind2sub( [out,] shape, idx[, options] )\n    Converts a linear index to an array of subscripts.\n\n    Parameters\n    ----------\n    out: Array|TypedArray|Object (optional)\n        Output array.\n\n    shape: ArrayLike\n        Array shape.\n\n    idx: integer\n        Linear index.\n\n    options: Object (optional)\n        Options.\n\n    options.order: string (optional)\n        Specifies whether an array is row-major (C-style) or column-major\n        (Fortran style). Default: 'row-major'.\n\n    options.mode: string (optional)\n        Specifies how to handle a linear index which exceeds array dimensions.\n        If equal to 'throw', the function throws an error when a linear index\n        exceeds array dimensions. If equal to 'wrap', the function wraps around\n        a linear index exceeding array dimensions using modulo arithmetic. If\n        equal to 'clamp', the function sets a linear index exceeding array\n        dimensions to either `0` (minimum linear index) or the maximum linear\n        index. Default: 'throw'.\n\n    Returns\n    -------\n    out: Array<integer>\n        Subscripts.\n\n    Examples\n    --------\n    > var d = [ 3, 3, 3 ];\n    > var s = ind2sub( d, 17 )\n    [ 1, 2, 2 ]\n\n    // Provide an output array:\n    > var out = new Array( d.length );\n    > s = ind2sub( out, d, 17 )\n    [ 1, 2, 2 ]\n    > var bool = ( s === out )\n    true\n\n    See Also\n    --------\n    array, ndarray, sub2ind\n","indexOf":"\nindexOf( arr, searchElement[, fromIndex] )\n    Returns the first index at which a given element can be found.\n\n    Search is performed using *strict equality* comparison.\n\n    Parameters\n    ----------\n    arr: ArrayLike\n        Array-like object.\n\n    searchElement: any\n        Element to find.\n\n    fromIndex: integer (optional)\n        Starting index (if negative, the start index is determined relative to\n        last element).\n\n    Returns\n    -------\n    out: integer\n        Index or -1.\n\n    Examples\n    --------\n    // Basic usage:\n    > var arr = [ 4, 3, 2, 1 ];\n    > var idx = indexOf( arr, 3 )\n    1\n    > arr = [ 4, 3, 2, 1 ];\n    > idx = indexOf( arr, 5 )\n    -1\n\n    // Using a `fromIndex`:\n    > arr = [ 1, 2, 3, 4, 5, 2, 6 ];\n    > idx = indexOf( arr, 2, 3 )\n    5\n\n    // `fromIndex` which exceeds `array` length:\n    > arr = [ 1, 2, 3, 4, 2, 5 ];\n    > idx = indexOf( arr, 2, 10 )\n    -1\n\n    // Negative `fromIndex`:\n    > arr = [ 1, 2, 3, 4, 5, 2, 6, 2 ];\n    > idx = indexOf( arr, 2, -4 )\n    5\n    > idx = indexOf( arr, 2, -1 )\n    7\n\n    // Negative `fromIndex` exceeding input `array` length:\n    > arr = [ 1, 2, 3, 4, 5, 2, 6 ];\n    > idx = indexOf( arr, 2, -10 )\n    1\n\n    // Array-like objects:\n    > var str = 'bebop';\n    > idx = indexOf( str, 'o' )\n    3\n\n","inherit":"\ninherit( ctor, superCtor )\n    Prototypical inheritance by replacing the prototype of one constructor with\n    the prototype of another constructor.\n\n    This function is not designed to work with ES2015/ES6 classes. For\n    ES2015/ES6 classes, use `class` with `extends`.\n\n    Parameters\n    ----------\n    ctor: Object|Function\n        Constructor which will inherit.\n\n    superCtor: Object|Function\n        Super (parent) constructor.\n\n    Returns\n    -------\n    out: Object|Function\n        Child constructor.\n\n    Examples\n    --------\n    // Create a parent constructor:\n    > function Foo() { return this; };\n    > Foo.prototype.beep = function beep() { return 'boop'; };\n\n    // Create a child constructor:\n    > function Bar() { Foo.call( this ); return this; };\n\n    // Setup inheritance:\n    > inherit( Bar, Foo );\n    > var bar = new Bar();\n    > var v = bar.beep()\n    'boop'\n\n","inheritedEnumerableProperties":"\ninheritedEnumerableProperties( value[, level] )\n    Returns an array of an object's inherited enumerable property names and\n    symbols.\n\n    Property order is not guaranteed, as object property enumeration is not\n    specified according to the ECMAScript specification. In practice, however,\n    most engines use insertion order to sort an object's properties, thus\n    allowing for deterministic extraction.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    level: integer (optional)\n        Inheritance level.\n\n    Returns\n    -------\n    props: Array\n        List of an object's inherited enumerable properties.\n\n    Examples\n    --------\n    > var props = inheritedEnumerableProperties( {} )\n\n    See Also\n    --------\n    enumerableProperties, enumerablePropertiesIn, inheritedEnumerablePropertySymbols, inheritedKeys, inheritedNonEnumerableProperties, inheritedProperties\n","inheritedEnumerablePropertySymbols":"\ninheritedEnumerablePropertySymbols( value[, level] )\n    Returns an array of an object's inherited enumerable symbol properties.\n\n    Property order is not guaranteed, as object property enumeration is not\n    specified according to the ECMAScript specification. In practice, however,\n    most engines use insertion order to sort an object's properties, thus\n    allowing for deterministic extraction.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    level: integer (optional)\n        Inheritance level.\n\n    Returns\n    -------\n    symbols: Array\n        List of an object's inherited enumerable symbol properties.\n\n    Examples\n    --------\n    > var symbols = inheritedEnumerablePropertySymbols( [] )\n\n    See Also\n    --------\n    enumerableProperties, enumerablePropertySymbols, inheritedKeys, nonEnumerablePropertySymbols, nonEnumerablePropertySymbolsIn, propertySymbols\n","inheritedKeys":"\ninheritedKeys( value[, level] )\n    Returns an array of an object's inherited enumerable property names.\n\n    Name order is not guaranteed, as object key enumeration is not specified\n    according to the ECMAScript specification. In practice, however, most\n    engines use insertion order to sort an object's keys, thus allowing for\n    deterministic extraction.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    level: integer (optional)\n        Inheritance level.\n\n    Returns\n    -------\n    keys: Array\n        List of an object's inherited enumerable property names.\n\n    Examples\n    --------\n    > var keys = inheritedKeys( {} )\n\n    See Also\n    --------\n    objectKeys, keysIn, inheritedPropertyNames, inheritedPropertySymbols\n","inheritedNonEnumerableProperties":"\ninheritedNonEnumerableProperties( value[, level] )\n    Returns an array of an object's inherited non-enumerable property names and\n    symbols.\n\n    Property order is not guaranteed, as object property enumeration is not\n    specified according to the ECMAScript specification. In practice, however,\n    most engines use insertion order to sort an object's properties, thus\n    allowing for deterministic extraction.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    level: integer (optional)\n        Inheritance level.\n\n    Returns\n    -------\n    props: Array\n        List of an object's inherited non-enumerable properties.\n\n    Examples\n    --------\n    > var props = inheritedNonEnumerableProperties( {} )\n\n    See Also\n    --------\n    inheritedEnumerableProperties, inheritedNonEnumerablePropertyNames, inheritedNonEnumerablePropertySymbols, inheritedKeys, nonEnumerableProperties, nonEnumerablePropertiesIn, properties\n","inheritedNonEnumerablePropertyNames":"\ninheritedNonEnumerablePropertyNames( value[, level] )\n    Returns an array of an object's inherited non-enumerable property names.\n\n    Name order is not guaranteed, as object key enumeration is not specified\n    according to the ECMAScript specification. In practice, however, most\n    engines use insertion order to sort an object's keys, thus allowing for\n    deterministic extraction.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    level: integer (optional)\n        Inheritance level.\n\n    Returns\n    -------\n    keys: Array\n        List of an object's inherited non-enumerable property names.\n\n    Examples\n    --------\n    > var keys = inheritedNonEnumerablePropertyNames( {} )\n\n    See Also\n    --------\n    inheritedNonEnumerableProperties, inheritedNonEnumerablePropertySymbols, objectKeys, nonEnumerablePropertyNames, nonEnumerablePropertyNamesIn, nonEnumerablePropertySymbols, propertyNames\n","inheritedNonEnumerablePropertySymbols":"\ninheritedNonEnumerablePropertySymbols( value[, level] )\n    Returns an array of an object's inherited non-enumerable symbol properties.\n\n    Property order is not guaranteed, as object property enumeration is not\n    specified according to the ECMAScript specification. In practice, however,\n    most engines use insertion order to sort an object's properties, thus\n    allowing for deterministic extraction.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    level: integer (optional)\n        Inheritance level.\n\n    Returns\n    -------\n    symbols: Array\n        List of an object's inherited non-enumerable symbol properties.\n\n    Examples\n    --------\n    > var symbols = inheritedNonEnumerablePropertySymbols( [] )\n\n    See Also\n    --------\n    inheritedNonEnumerableProperties, inheritedNonEnumerablePropertyNames, nonEnumerableProperties, nonEnumerablePropertyNames, nonEnumerablePropertySymbols, nonEnumerablePropertySymbolsIn, propertySymbols\n","inheritedProperties":"\ninheritedProperties( value[, level] )\n    Returns an array of an object's inherited property names and symbols.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    level: integer (optional)\n        Inheritance level.\n\n    Returns\n    -------\n    symbols: Array\n        List of an object's inherited property names and symbols.\n\n    Examples\n    --------\n    > var symbols = inheritedProperties( [] )\n\n    See Also\n    --------\n    properties, propertiesIn, inheritedPropertyNames, inheritedPropertySymbols\n","inheritedPropertyDescriptor":"\ninheritedPropertyDescriptor( value, property[, level] )\n    Returns a property descriptor for an object's inherited property.\n\n    If provided `null` or `undefined` or provided a non-existent property, the\n    function returns `null`.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    property: string|symbol\n        Property name.\n\n    level: integer (optional)\n        Inheritance level.\n\n    Returns\n    -------\n    desc: Object|null\n        Property descriptor.\n\n    Examples\n    --------\n    > var desc = inheritedPropertyDescriptor( {}, 'toString' )\n    {...}\n\n    See Also\n    --------\n    propertyDescriptor, propertyDescriptorIn, inheritedKeys, inheritedPropertyDescriptors, inheritedPropertyNames, inheritedPropertySymbols\n","inheritedPropertyDescriptors":"\ninheritedPropertyDescriptors( value[, level] )\n    Returns an object's inherited property descriptors.\n\n    If provided `null` or `undefined`, the function returns an empty object.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    level: integer (optional)\n        Inheritance level.\n\n    Returns\n    -------\n    desc: Object\n        An object's inherited property descriptors.\n\n    Examples\n    --------\n    > function Foo() { this.beep = 'boop'; return this; };\n    > Foo.prototype.foo = 'bar';\n    > var obj = new Foo();\n    > var desc = inheritedPropertyDescriptors( obj )\n    { 'foo': {...}, ... }\n\n    See Also\n    --------\n    propertyDescriptors, propertyDescriptorsIn, inheritedKeys, inheritedPropertyNames, inheritedPropertySymbols\n","inheritedPropertyNames":"\ninheritedPropertyNames( value[, level] )\n    Returns an array of an object's inherited enumerable and non-enumerable\n    property names.\n\n    Name order is not guaranteed, as object key enumeration is not specified\n    according to the ECMAScript specification. In practice, however, most\n    engines use insertion order to sort an object's keys, thus allowing for\n    deterministic extraction.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    level: integer (optional)\n        Inheritance level.\n\n    Returns\n    -------\n    keys: Array\n        List of an object's inherited enumerable and non-enumerable property\n        names.\n\n    Examples\n    --------\n    > var keys = inheritedPropertyNames( [] )\n\n    See Also\n    --------\n    inheritedKeys, inheritedPropertyDescriptors, inheritedPropertySymbols, propertyNames, propertyNamesIn\n","inheritedPropertySymbols":"\ninheritedPropertySymbols( value[, level] )\n    Returns an array of an object's inherited symbol properties.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    level: integer (optional)\n        Inheritance level.\n\n    Returns\n    -------\n    symbols: Array\n        List of an object's inherited symbol properties.\n\n    Examples\n    --------\n    > var symbols = inheritedPropertySymbols( [] )\n\n    See Also\n    --------\n    inheritedKeys, inheritedPropertyDescriptors, inheritedPropertyNames, propertySymbols, propertySymbolsIn\n","inheritedWritableProperties":"\ninheritedWritableProperties( value[, level] )\n    Returns an array of an object's inherited writable property names and\n    symbols.\n\n    Property order is not guaranteed, as object property enumeration is not\n    specified according to the ECMAScript specification. In practice, however,\n    most engines use insertion order to sort an object's properties, thus\n    allowing for deterministic extraction.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    level: integer (optional)\n        Inheritance level.\n\n    Returns\n    -------\n    props: Array\n        List of an object's inherited writable properties.\n\n    Examples\n    --------\n    > var props = inheritedWritableProperties( {} )\n\n    See Also\n    --------\n    inheritedWritablePropertyNames, inheritedWritablePropertySymbols, writableProperties, writablePropertiesIn, properties\n","inheritedWritablePropertyNames":"\ninheritedWritablePropertyNames( value[, level] )\n    Returns an array of an object's inherited writable property names.\n\n    Name order is not guaranteed, as object key enumeration is not specified\n    according to the ECMAScript specification. In practice, however, most\n    engines use insertion order to sort an object's keys, thus allowing for\n    deterministic extraction.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    level: integer (optional)\n        Inheritance level.\n\n    Returns\n    -------\n    keys: Array\n        List of an object's inherited writable property names.\n\n    Examples\n    --------\n    > var keys = inheritedWritablePropertyNames( {} )\n\n    See Also\n    --------\n    inheritedWritablePropertySymbols, writablePropertyNames, writablePropertyNamesIn, properties\n","inheritedWritablePropertySymbols":"\ninheritedWritablePropertySymbols( value[, level] )\n    Returns an array of an object's inherited writable symbol properties.\n\n    Property order is not guaranteed, as object property enumeration is not\n    specified according to the ECMAScript specification. In practice, however,\n    most engines use insertion order to sort an object's properties, thus\n    allowing for deterministic extraction.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    level: integer (optional)\n        Inheritance level.\n\n    Returns\n    -------\n    symbols: Array\n        List of an object's inherited writable symbol properties.\n\n    Examples\n    --------\n    > var symbols = inheritedWritablePropertySymbols( [] )\n\n    See Also\n    --------\n    inheritedWritablePropertyNames, writablePropertySymbols, writablePropertySymbolsIn, properties\n","inmap":"\ninmap( collection, fcn[, thisArg] )\n    Invokes a function for each element in a collection and updates the\n    collection in-place.\n\n    When invoked, the input function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection. If provided an object, the object must be array-like\n        (excluding strings and functions).\n\n    fcn: Function\n        Function to invoke for each element in the input collection. The\n        function's return value is used to update the collection in-place.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function foo( v, i ) { return v * i; };\n    > var arr = [ 1.0, 2.0, 3.0 ];\n    > var out = inmap( arr, foo )\n    [ 0.0, 2.0, 6.0 ]\n    > var bool = ( out === arr )\n    true\n\n    See Also\n    --------\n    forEach, inmapRight\n","inmapAsync":"\ninmapAsync( collection, [options,] fcn, done )\n    Invokes a function once for each element in a collection and updates a\n    collection in-place.\n\n    When invoked, `fcn` is provided a maximum of four arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If `fcn`\n    accepts two arguments, `fcn` is provided:\n\n    - `value`\n    - `next`\n\n    If `fcn` accepts three arguments, `fcn` is provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other `fcn` signature, `fcn` is provided all four arguments.\n\n    The `next` callback accepts two arguments:\n\n    - `error`: error argument\n    - `result`: value used to update the collection\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling. Note, however, that the function\n    may have mutated an input collection during prior invocations, resulting in\n    a partially mutated collection.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function fcn( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, value*index );\n    ...     }\n    ... };\n    > function done( error, collection ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( collection === arr );\n    ...     console.log( collection );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > inmapAsync( arr, fcn, done )\n    1000\n    2500\n    3000\n    true\n    [ 0, 2500, 2000 ]\n\n    // Limit number of concurrent invocations:\n    > function fcn( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, value*index );\n    ...     }\n    ... };\n    > function done( error, collection ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( collection === arr );\n    ...     console.log( collection );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > inmapAsync( arr, opts, fcn, done )\n    2500\n    3000\n    1000\n    true\n    [ 0, 2500, 2000 ]\n\n    // Process sequentially:\n    > function fcn( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, value*index );\n    ...     }\n    ... };\n    > function done( error, collection ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( collection === arr );\n    ...     console.log( collection );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000 ];\n    > inmapAsync( arr, opts, fcn, done )\n    3000\n    2500\n    1000\n    true\n    [ 0, 2500, 2000 ]\n\n\ninmapAsync.factory( [options,] fcn )\n    Returns a function which invokes a function once for each element in a\n    collection and updates a collection in-place.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which invokes a function for each element in a collection.\n\n    Examples\n    --------\n    > function fcn( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, value*index );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = inmapAsync.factory( opts, fcn );\n    > function done( error, collection ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( collection === arr );\n    ...     console.log( collection );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    true\n    [ 0, 2500, 2000 ]\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    true\n    [ 0, 1500, 2000 ]\n\n    See Also\n    --------\n    forEachAsync, inmapRightAsync, inmap\n","inmapAsync.factory":"\ninmapAsync.factory( [options,] fcn )\n    Returns a function which invokes a function once for each element in a\n    collection and updates a collection in-place.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which invokes a function for each element in a collection.\n\n    Examples\n    --------\n    > function fcn( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, value*index );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = inmapAsync.factory( opts, fcn );\n    > function done( error, collection ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( collection === arr );\n    ...     console.log( collection );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    true\n    [ 0, 2500, 2000 ]\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    true\n    [ 0, 1500, 2000 ]\n\n    See Also\n    --------\n    forEachAsync, inmapRightAsync, inmap\n","inmapRight":"\ninmapRight( collection, fcn[, thisArg] )\n    Invokes a function for each element in a collection and updates the\n    collection in-place, iterating from right to left.\n\n    When invoked, the input function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection. If provided an object, the object must be array-like\n        (excluding strings and functions).\n\n    fcn: Function\n        Function to invoke for each element in the input collection. The\n        function's return value is used to update the collection in-place.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function foo( v, i ) { console.log( '%s: %d', i, v ); return v * i; };\n    > var arr = [ 1.0, 2.0, 3.0 ];\n    > var out = inmapRight( arr, foo )\n    2: 3.0\n    1: 2.0\n    0: 1.0\n    [ 0.0, 2.0, 6.0 ]\n    > var bool = ( out === arr )\n    true\n\n    See Also\n    --------\n    forEachRight, inmap\n","inmapRightAsync":"\ninmapRightAsync( collection, [options,] fcn, done )\n    Invokes a function once for each element in a collection and updates a\n    collection in-place, iterating from right to left.\n\n    When invoked, `fcn` is provided a maximum of four arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If `fcn`\n    accepts two arguments, `fcn` is provided:\n\n    - `value`\n    - `next`\n\n    If `fcn` accepts three arguments, `fcn` is provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other `fcn` signature, `fcn` is provided all four arguments.\n\n    The `next` callback accepts two arguments:\n\n    - `error`: error argument\n    - `result`: value used to update the collection\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling. Note, however, that the function\n    may have mutated an input collection during prior invocations, resulting in\n    a partially mutated collection.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function fcn( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, value*index );\n    ...     }\n    ... };\n    > function done( error, collection ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( collection === arr );\n    ...     console.log( collection );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > inmapRightAsync( arr, fcn, done )\n    1000\n    2500\n    3000\n    true\n    [ 0, 2500, 6000 ]\n\n    // Limit number of concurrent invocations:\n    > function fcn( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, value*index );\n    ...     }\n    ... };\n    > function done( error, collection ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( collection === arr );\n    ...     console.log( collection );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 1000, 2500, 3000 ];\n    > inmapRightAsync( arr, opts, fcn, done )\n    2500\n    3000\n    1000\n    true\n    [ 0, 2500, 6000 ]\n\n    // Process sequentially:\n    > function fcn( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, value*index );\n    ...     }\n    ... };\n    > function done( error, collection ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( collection === arr );\n    ...     console.log( collection );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 1000, 2500, 3000 ];\n    > inmapRightAsync( arr, opts, fcn, done )\n    3000\n    2500\n    1000\n    true\n    [ 0, 2500, 6000 ]\n\n\ninmapRightAsync.factory( [options,] fcn )\n    Returns a function which invokes a function once for each element in a\n    collection and updates a collection in-place, iterating from right to left.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which invokes a function for each element in a collection.\n\n    Examples\n    --------\n    > function fcn( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, value*index );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = inmapRightAsync.factory( opts, fcn );\n    > function done( error, collection ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( collection === arr );\n    ...     console.log( collection );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    true\n    [ 0, 2500, 6000 ]\n    > arr = [ 1000, 1500, 2000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    true\n    [ 0, 1500, 4000 ]\n\n    See Also\n    --------\n    forEachRightAsync, inmapAsync, inmapRight\n","inmapRightAsync.factory":"\ninmapRightAsync.factory( [options,] fcn )\n    Returns a function which invokes a function once for each element in a\n    collection and updates a collection in-place, iterating from right to left.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which invokes a function for each element in a collection.\n\n    Examples\n    --------\n    > function fcn( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, value*index );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = inmapRightAsync.factory( opts, fcn );\n    > function done( error, collection ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( collection === arr );\n    ...     console.log( collection );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    true\n    [ 0, 2500, 6000 ]\n    > arr = [ 1000, 1500, 2000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    true\n    [ 0, 1500, 4000 ]\n\n    See Also\n    --------\n    forEachRightAsync, inmapAsync, inmapRight\n","inspectSinkStream":"\ninspectSinkStream( [options,] clbk )\n    Returns a writable stream for inspecting stream data.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.decodeStrings: boolean (optional)\n        Specifies whether to encode strings as `Buffer` objects before writing\n        data to a returned stream. Default: true.\n\n    options.defaultEncoding: string (optional)\n        Default encoding when not explicitly specified when writing data.\n        Default: 'utf8'.\n\n    clbk: Function\n        Callback to invoke upon receiving data.\n\n    Returns\n    -------\n    stream: WritableStream\n        Writable stream.\n\n    Examples\n    --------\n    > function clbk( chunk, idx ) { console.log( chunk.toString() ); };\n    > var s = inspectSinkStream( clbk );\n    > s.write( 'a' );\n    > s.write( 'b' );\n    > s.write( 'c' );\n    > s.end();\n\n\ninspectSinkStream.factory( [options] )\n    Returns a function for creating writable streams for inspecting stream data.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.decodeStrings: boolean (optional)\n        Specifies whether to encode strings as `Buffer` objects before writing\n        data to a returned stream. Default: true.\n\n    options.defaultEncoding: string (optional)\n        Default encoding when not explicitly specified when writing data.\n        Default: 'utf8'.\n\n    Returns\n    -------\n    createStream( clbk ): Function\n        Function for creating writable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = inspectSinkStream.factory( opts );\n    > function clbk( chunk, idx ) { console.log( chunk.toString() ); };\n    > var s = createStream( clbk );\n    > s.write( 'a' );\n    > s.write( 'b' );\n    > s.write( 'c' );\n    > s.end();\n\n\ninspectSinkStream.objectMode( [options,] clbk )\n    Returns an \"objectMode\" writable stream for inspecting stream data.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.decodeStrings: boolean (optional)\n        Specifies whether to encode strings as `Buffer` objects before writing\n        data to a returned stream. Default: true.\n\n    options.defaultEncoding: string (optional)\n        Default encoding when not explicitly specified when writing data.\n        Default: 'utf8'.\n\n    clbk: Function\n        Callback to invoke upon receiving data.\n\n    Returns\n    -------\n    stream: WritableStream\n        Writable stream operating in \"objectMode\".\n\n    Examples\n    --------\n    > function clbk( chunk, idx ) { console.log( chunk.toString() ); };\n    > var s = inspectSinkStream.objectMode( clbk );\n    > s.write( { 'value': 'a' } );\n    > s.write( { 'value': 'b' } );\n    > s.write( { 'value': 'c' } );\n    > s.end();\n\n    See Also\n    --------\n    debugSinkStream, inspectStream\n","inspectSinkStream.factory":"\ninspectSinkStream.factory( [options] )\n    Returns a function for creating writable streams for inspecting stream data.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.decodeStrings: boolean (optional)\n        Specifies whether to encode strings as `Buffer` objects before writing\n        data to a returned stream. Default: true.\n\n    options.defaultEncoding: string (optional)\n        Default encoding when not explicitly specified when writing data.\n        Default: 'utf8'.\n\n    Returns\n    -------\n    createStream( clbk ): Function\n        Function for creating writable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = inspectSinkStream.factory( opts );\n    > function clbk( chunk, idx ) { console.log( chunk.toString() ); };\n    > var s = createStream( clbk );\n    > s.write( 'a' );\n    > s.write( 'b' );\n    > s.write( 'c' );\n    > s.end();\n\n","inspectSinkStream.objectMode":"\ninspectSinkStream.objectMode( [options,] clbk )\n    Returns an \"objectMode\" writable stream for inspecting stream data.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.decodeStrings: boolean (optional)\n        Specifies whether to encode strings as `Buffer` objects before writing\n        data to a returned stream. Default: true.\n\n    options.defaultEncoding: string (optional)\n        Default encoding when not explicitly specified when writing data.\n        Default: 'utf8'.\n\n    clbk: Function\n        Callback to invoke upon receiving data.\n\n    Returns\n    -------\n    stream: WritableStream\n        Writable stream operating in \"objectMode\".\n\n    Examples\n    --------\n    > function clbk( chunk, idx ) { console.log( chunk.toString() ); };\n    > var s = inspectSinkStream.objectMode( clbk );\n    > s.write( { 'value': 'a' } );\n    > s.write( { 'value': 'b' } );\n    > s.write( { 'value': 'c' } );\n    > s.end();\n\n    See Also\n    --------\n    debugSinkStream, inspectStream\n","inspectStream":"\ninspectStream( [options,] clbk )\n    Returns a transform stream for inspecting stream data.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.allowHalfOpen: boolean (optional)\n        Specifies whether a stream should remain open even if one side ends.\n        Default: false.\n\n    options.readableObjectMode: boolean (optional)\n        Specifies whether the readable side should be in \"objectMode\". Default:\n        false.\n\n    clbk: Function\n        Callback to invoke upon receiving data.\n\n    Returns\n    -------\n    stream: TransformStream\n        Transform stream.\n\n    Examples\n    --------\n    > function clbk( chunk, idx ) { console.log( chunk.toString() ); };\n    > var s = inspectStream( clbk );\n    > s.write( 'a' );\n    > s.write( 'b' );\n    > s.write( 'c' );\n    > s.end();\n\n\ninspectStream.factory( [options] )\n    Returns a function for creating transform streams for inspecting stream\n    data.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.allowHalfOpen: boolean (optional)\n        Specifies whether a stream should remain open even if one side ends.\n        Default: false.\n\n    options.readableObjectMode: boolean (optional)\n        Specifies whether the readable side should be in \"objectMode\". Default:\n        false.\n\n    Returns\n    -------\n    createStream( clbk ): Function\n        Function for creating transform streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = inspectStream.factory( opts );\n    > function clbk( chunk, idx ) { console.log( chunk.toString() ); };\n    > var s = createStream( clbk );\n    > s.write( 'a' );\n    > s.write( 'b' );\n    > s.write( 'c' );\n    > s.end();\n\n\ninspectStream.objectMode( [options,] clbk )\n    Returns an \"objectMode\" transform stream for inspecting stream data.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.allowHalfOpen: boolean (optional)\n        Specifies whether a stream should remain open even if one side ends.\n        Default: false.\n\n    options.readableObjectMode: boolean (optional)\n        Specifies whether the readable side should be in \"objectMode\". Default:\n        false.\n\n    clbk: Function\n        Callback to invoke upon receiving data.\n\n    Returns\n    -------\n    stream: TransformStream\n        Transform stream operating in \"objectMode\".\n\n    Examples\n    --------\n    > function clbk( chunk, idx ) { console.log( chunk.toString() ); };\n    > var s = inspectStream.objectMode( clbk );\n    > s.write( { 'value': 'a' } );\n    > s.write( { 'value': 'b' } );\n    > s.write( { 'value': 'c' } );\n    > s.end();\n\n    See Also\n    --------\n    debugStream\n","inspectStream.factory":"\ninspectStream.factory( [options] )\n    Returns a function for creating transform streams for inspecting stream\n    data.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.allowHalfOpen: boolean (optional)\n        Specifies whether a stream should remain open even if one side ends.\n        Default: false.\n\n    options.readableObjectMode: boolean (optional)\n        Specifies whether the readable side should be in \"objectMode\". Default:\n        false.\n\n    Returns\n    -------\n    createStream( clbk ): Function\n        Function for creating transform streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = inspectStream.factory( opts );\n    > function clbk( chunk, idx ) { console.log( chunk.toString() ); };\n    > var s = createStream( clbk );\n    > s.write( 'a' );\n    > s.write( 'b' );\n    > s.write( 'c' );\n    > s.end();\n\n","inspectStream.objectMode":"\ninspectStream.objectMode( [options,] clbk )\n    Returns an \"objectMode\" transform stream for inspecting stream data.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.allowHalfOpen: boolean (optional)\n        Specifies whether a stream should remain open even if one side ends.\n        Default: false.\n\n    options.readableObjectMode: boolean (optional)\n        Specifies whether the readable side should be in \"objectMode\". Default:\n        false.\n\n    clbk: Function\n        Callback to invoke upon receiving data.\n\n    Returns\n    -------\n    stream: TransformStream\n        Transform stream operating in \"objectMode\".\n\n    Examples\n    --------\n    > function clbk( chunk, idx ) { console.log( chunk.toString() ); };\n    > var s = inspectStream.objectMode( clbk );\n    > s.write( { 'value': 'a' } );\n    > s.write( { 'value': 'b' } );\n    > s.write( { 'value': 'c' } );\n    > s.end();\n\n    See Also\n    --------\n    debugStream\n","instanceOf":"\ninstanceOf( value, constructor )\n    Tests whether a value has in its prototype chain a specified constructor as\n    a prototype property.\n\n    While the prototype of an `object` created using object literal notion is\n    `undefined`, the function returns `true` when provided an `object` literal\n    and the `Object` constructor. This maintains consistent behavior with the\n    `instanceof` operator.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    constructor: Function\n        Constructor.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is an instance of a provided constructor.\n\n    Examples\n    --------\n    > var bool = instanceOf( [], Array )\n    true\n    > bool = instanceOf( {}, Object )\n    true\n    > bool = instanceOf( null, Object )\n    false\n\n    See Also\n    --------\n    isPrototypeOf, constructorName, inherit, typeOf\n","INT8_MAX":"\nINT8_MAX\n    Maximum signed 8-bit integer.\n\n    The maximum signed 8-bit integer is given by `2^7 - 1`.\n\n    Examples\n    --------\n    > INT8_MAX\n    127\n\n    See Also\n    --------\n    INT8_MIN\n","INT8_MIN":"\nINT8_MIN\n    Minimum signed 8-bit integer.\n\n    The minimum signed 8-bit integer is given by `-(2^7)`.\n\n    Examples\n    --------\n    > INT8_MIN\n    -128\n\n    See Also\n    --------\n    INT8_MAX\n","INT8_NUM_BYTES":"\nINT8_NUM_BYTES\n    Size (in bytes) of an 8-bit signed integer.\n\n    Examples\n    --------\n    > INT8_NUM_BYTES\n    1\n\n    See Also\n    --------\n    INT16_NUM_BYTES, INT32_NUM_BYTES, UINT8_NUM_BYTES\n","Int8Array":"\nInt8Array()\n    A typed array constructor which returns a typed array representing an array\n    of twos-complement 8-bit signed integers in the platform byte order.\n\n    Returns\n    -------\n    out: Int8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Int8Array()\n    <Int8Array>\n\n\nInt8Array( length )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    Returns\n    -------\n    out: Int8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Int8Array( 5 )\n    <Int8Array>[ 0, 0, 0, 0, 0 ]\n\n\nInt8Array( typedarray )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    Returns\n    -------\n    out: Int8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int32Array( [ 5, 5, 5 ] );\n    > var arr2 = new Int8Array( arr1 )\n    <Int8Array>[ 5, 5, 5 ]\n\n\nInt8Array( obj )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    Returns\n    -------\n    out: Int8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 5.0, 5.0, 5.0 ];\n    > var arr2 = new Int8Array( arr1 )\n    <Int8Array>[ 5, 5, 5 ]\n\n\nInt8Array( buffer[, byteOffset[, length]] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Int8Array\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 4 );\n    > var arr = new Int8Array( buf, 0, 4 )\n    <Int8Array>[ 0, 0, 0, 0 ]\n\n\nInt8Array.from( src[, map[, thisArg]] )\n    Creates a new typed array from an array-like object or an iterable.\n\n    A callback is provided the following arguments:\n\n    - value: source value.\n    - index: source index.\n\n    Parameters\n    ----------\n    src: ArrayLike|Iterable\n        Source of array elements.\n\n    map: Function (optional)\n        Callback to invoke for each source element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Int8Array\n        A typed array.\n\n    Examples\n    --------\n    > function mapFcn( v ) { return v * 2; };\n    > var arr = Int8Array.from( [ 1, 2 ], mapFcn )\n    <Int8Array>[ 2, 4 ]\n\n\nInt8Array.of( element0[, element1[, ...elementN]] )\n    Creates a new typed array from a variable number of arguments.\n\n    Parameters\n    ----------\n    element0: number\n        Array element.\n\n    element1: number (optional)\n        Array element.\n\n    elementN: number (optional)\n        Array elements.\n\n    Returns\n    -------\n    out: Int8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = Int8Array.of( 1, 2 )\n    <Int8Array>[ 1, 2 ]\n\n\nInt8Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Int8Array.BYTES_PER_ELEMENT\n    1\n\n\nInt8Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Int8Array.name\n    'Int8Array'\n\n\nInt8Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Int8Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n\nInt8Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Int8Array( 5 );\n    > arr.byteLength\n    5\n\n\nInt8Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Int8Array( 5 );\n    > arr.byteOffset\n    0\n\n\nInt8Array.prototype.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > var arr = new Int8Array( 5 );\n    > arr.BYTES_PER_ELEMENT\n    1\n\n\nInt8Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Int8Array( 5 );\n    > arr.length\n    5\n\n\nInt8Array.prototype.copyWithin( target, start[, end] )\n    Copies a sequence of elements within the array starting at `start` and\n    ending at `end` (non-inclusive) to the position starting at `target`.\n\n    Parameters\n    ----------\n    target: integer\n        Target start index position.\n\n    start: integer\n        Source start index position.\n\n    end: integer (optional)\n        Source end index position. Default: out.length.\n\n    Returns\n    -------\n    out: Int8Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2, 3, 4, 5 ] );\n    > arr.copyWithin( 3, 0, 2 );\n    > arr[ 3 ]\n    1\n    > arr[ 4 ]\n    2\n\n\nInt8Array.prototype.entries()\n    Returns an iterator for iterating over array key-value pairs.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array key-value pairs.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2 ] );\n    > it = arr.entries();\n    > it.next().value\n    [ 0, 1 ]\n    > it.next().value\n    [ 1, 2 ]\n    > it.next().done\n    true\n\n\nInt8Array.prototype.every( predicate[, thisArg] )\n    Tests whether all array elements pass a test implemented by a predicate\n    function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, an array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether all array elements pass.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2 ] );\n    > function predicate( v ) { return ( v <= 1 ); };\n    > arr.every( predicate )\n    false\n\n\nInt8Array.prototype.fill( value[, start[, end]] )\n    Fills an array from a start index to an end index (non-inclusive) with a\n    provided value.\n\n    Parameters\n    ----------\n    value: number\n        Fill value.\n\n    start: integer (optional)\n        Start index. If less than zero, the start index is resolved relative to\n        the last array element. Default: 0.\n\n    end: integer (optional)\n        End index (non-inclusive). If less than zero, the end index is resolved\n        relative to the last array element. Default: out.length.\n\n    Returns\n    -------\n    out: Int8Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2 ] );\n    > arr.fill( 3 );\n    > arr[ 0 ]\n    3\n    > arr[ 1 ]\n    3\n\n\nInt8Array.prototype.filter( predicate[, thisArg] )\n    Creates a new array which includes those elements for which a predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    If a predicate function does not return a truthy value for any array\n    element, the method returns `null`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which filters array elements. If a predicate function\n        returns a truthy value, an array element is included in the output\n        array; otherwise, an array element is not included in the output array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Int8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int8Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 1 ); };\n    > var arr2 = arr1.filter( predicate );\n    > arr2.length\n    2\n\n\nInt8Array.prototype.find( predicate[, thisArg] )\n    Returns the first array element for which a provided predicate function\n    returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `undefined`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    value: number|undefined\n        Array element.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 2 ); };\n    > var v = arr.find( predicate )\n    3\n\n\nInt8Array.prototype.findIndex( predicate[, thisArg] )\n    Returns the index of the first array element for which a provided predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `-1`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 2 ); };\n    > var idx = arr.findIndex( predicate )\n    2\n\n\nInt8Array.prototype.forEach( fcn[, thisArg] )\n    Invokes a callback for each array element.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to invoke for each array element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 3, 2, 1 ] );\n    > var str = ' ';\n    > function fcn( v, i ) { str += i + ':' + v + ' '; };\n    > arr.forEach( fcn );\n    > str\n    ' 0:3 1:2 2:1 '\n\n\nInt8Array.prototype.includes( searchElement[, fromIndex] )\n    Returns a boolean indicating whether an array includes a search element.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether an array includes a search element.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2, 3 ] );\n    > var bool = arr.includes( 4 )\n    false\n    > bool = arr.includes( 3 )\n    true\n\n\nInt8Array.prototype.indexOf( searchElement[, fromIndex] )\n    Returns the index of the first array element strictly equal to a search\n    element.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2, 3 ] );\n    > var idx = arr.indexOf( 4 )\n    -1\n    > idx = arr.indexOf( 3 )\n    2\n\n\nInt8Array.prototype.join( [separator] )\n    Serializes an array by joining all array elements as a string.\n\n    Parameters\n    ----------\n    separator: string (optional)\n        String delineating array elements. Default: ','.\n\n    Returns\n    -------\n    str: string\n        Array serialized as a string.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2, 3 ] );\n    > arr.join( '|' )\n    '1|2|3'\n\n\nInt8Array.prototype.keys()\n    Returns an iterator for iterating over array keys.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array keys.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2 ] );\n    > it = arr.keys();\n    > it.next().value\n    0\n    > it.next().value\n    1\n    > it.next().done\n    true\n\n\nInt8Array.prototype.lastIndexOf( searchElement[, fromIndex] )\n    Returns the index of the last array element strictly equal to a search\n    element.\n\n    The method iterates from the last array element to the first array element.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: -1.\n\n    Returns\n    -------\n    idx: integer\n        array index.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 0, 2, 0, 1 ] );\n    > var idx = arr.lastIndexOf( 3 )\n    -1\n    > idx = arr.lastIndexOf( 0 )\n    3\n\n\nInt8Array.prototype.map( fcn[, thisArg] )\n    Maps each array element to an element in a new typed array.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function which maps array elements to elements in the new array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Int8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int8Array( [ 1, 2, 3 ] );\n    > function fcn( v ) { return v * 2; };\n    > var arr2 = arr1.map( fcn );\n    <Int8Array>[ 2, 4, 6 ]\n\n\nInt8Array.prototype.reduce( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the first array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the first array element as the first argument and the second array\n    element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2, 3 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduce( fcn, 0 )\n    14\n\n\nInt8Array.prototype.reduceRight( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result, iterating from right to left.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the last array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the last array element as the first argument and the second-to-last\n    array element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2, 3 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduceRight( fcn, 0 )\n    14\n\n\nInt8Array.prototype.reverse()\n    Reverses an array *in-place*.\n\n    This method mutates the array on which the method is invoked.\n\n    Returns\n    -------\n    out: Int8Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2, 3 ] )\n    <Int8Array>[ 1, 2, 3 ]\n    > arr.reverse()\n    <Int8Array>[ 3, 2, 1 ]\n\n\nInt8Array.prototype.set( arr[, offset] )\n    Sets array elements.\n\n    Parameters\n    ----------\n    arr: ArrayLike\n        Source array containing array values to set.\n\n    offset: integer (optional)\n        Array index at which to start writing values. Default: 0.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2, 3 ] );\n    > arr.set( [ 4, 4 ], 1 );\n    > arr[ 1 ]\n    4\n    > arr[ 2 ]\n    4\n\n\nInt8Array.prototype.slice( [begin[, end]] )\n    Copies array elements to a new array with the same underlying data type as\n    the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns `null`.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Int8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int8Array( [ 1, 2, 3 ] );\n    > var arr2 = arr1.slice( 1 );\n    > arr2.length\n    2\n    > arr2[ 0 ]\n    1\n    > arr2[ 1 ]\n    2\n\n\nInt8Array.prototype.some( predicate[, thisArg] )\n    Tests whether at least one array element passes a test implemented by a\n    predicate function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, a array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether at least one array element passes.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2 ] );\n    > function predicate( v ) { return ( v > 1 ); };\n    > arr.some( predicate )\n    true\n\n\nInt8Array.prototype.sort( [compareFunction] )\n    Sorts an array *in-place*.\n\n    The comparison function is provided two array elements per invocation: `a`\n    and `b`.\n\n    The comparison function return value determines the sort order as follows:\n\n    - If the comparison function returns a value less than zero, then the method\n    sorts `a` to an index lower than `b` (i.e., `a` should come *before* `b`).\n\n    - If the comparison function returns a value greater than zero, then the\n    method sorts `a` to an index higher than `b` (i.e., `b` should come *before*\n    `a`).\n\n    - If the comparison function returns zero, then the relative order of `a`\n    and `b` should remain unchanged.\n\n    This method mutates the array on which the method is invoked.\n\n    Parameters\n    ----------\n    compareFunction: Function (optional)\n        Function which specifies the sort order. The default sort order is\n        ascending order.\n\n    Returns\n    -------\n    out: Int8Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2, 0, 2, 1 ] );\n    > arr.sort()\n    <Int8Array>[ 0, 1, 1, 2, 2 ]\n\n\nInt8Array.prototype.subarray( [begin[, end]] )\n    Creates a new typed array over the same underlying ArrayBuffer and with the\n    same underlying data type as the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns an empty typed array.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Int8Array\n        A new typed array view.\n\n    Examples\n    --------\n    > var arr1 = new Int8Array( [ 1, 2, 3, 4, 5 ] );\n    > var arr2 = arr1.subarray( 2 )\n    <Int8Array>[ 3, 4, 5 ]\n\n\nInt8Array.prototype.toLocaleString( [locales[, options]] )\n    Serializes an array as a locale-specific string.\n\n    Parameters\n    ----------\n    locales: string|Array<string> (optional)\n        A BCP 47 language tag, or an array of such tags.\n\n    options: Object (optional)\n        Options.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2, 3 ] );\n    > arr.toLocaleString()\n    '1,2,3'\n\n\nInt8Array.prototype.toString()\n    Serializes an array as a string.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2, 3 ] );\n    > arr.toString()\n    '1,2,3'\n\n\nInt8Array.prototype.values()\n    Returns an iterator for iterating over array elements.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array elements.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2 ] );\n    > it = arr.values();\n    > it.next().value\n    1\n    > it.next().value\n    2\n    > it.next().done\n    true\n\n\n    See Also\n    --------\n    ArrayBuffer, Float32Array, Float64Array, Int16Array, Int32Array, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray\n","Int8Array.from":"\nInt8Array.from( src[, map[, thisArg]] )\n    Creates a new typed array from an array-like object or an iterable.\n\n    A callback is provided the following arguments:\n\n    - value: source value.\n    - index: source index.\n\n    Parameters\n    ----------\n    src: ArrayLike|Iterable\n        Source of array elements.\n\n    map: Function (optional)\n        Callback to invoke for each source element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Int8Array\n        A typed array.\n\n    Examples\n    --------\n    > function mapFcn( v ) { return v * 2; };\n    > var arr = Int8Array.from( [ 1, 2 ], mapFcn )\n    <Int8Array>[ 2, 4 ]\n\n","Int8Array.of":"\nInt8Array.of( element0[, element1[, ...elementN]] )\n    Creates a new typed array from a variable number of arguments.\n\n    Parameters\n    ----------\n    element0: number\n        Array element.\n\n    element1: number (optional)\n        Array element.\n\n    elementN: number (optional)\n        Array elements.\n\n    Returns\n    -------\n    out: Int8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = Int8Array.of( 1, 2 )\n    <Int8Array>[ 1, 2 ]\n\n","Int8Array.BYTES_PER_ELEMENT":"\nInt8Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Int8Array.BYTES_PER_ELEMENT\n    1\n\n","Int8Array.name":"\nInt8Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Int8Array.name\n    'Int8Array'\n\n","Int8Array.prototype.buffer":"\nInt8Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Int8Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n","Int8Array.prototype.byteLength":"\nInt8Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Int8Array( 5 );\n    > arr.byteLength\n    5\n\n","Int8Array.prototype.byteOffset":"\nInt8Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Int8Array( 5 );\n    > arr.byteOffset\n    0\n\n","Int8Array.prototype.BYTES_PER_ELEMENT":"\nInt8Array.prototype.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > var arr = new Int8Array( 5 );\n    > arr.BYTES_PER_ELEMENT\n    1\n\n","Int8Array.prototype.length":"\nInt8Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Int8Array( 5 );\n    > arr.length\n    5\n\n","Int8Array.prototype.copyWithin":"\nInt8Array.prototype.copyWithin( target, start[, end] )\n    Copies a sequence of elements within the array starting at `start` and\n    ending at `end` (non-inclusive) to the position starting at `target`.\n\n    Parameters\n    ----------\n    target: integer\n        Target start index position.\n\n    start: integer\n        Source start index position.\n\n    end: integer (optional)\n        Source end index position. Default: out.length.\n\n    Returns\n    -------\n    out: Int8Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2, 3, 4, 5 ] );\n    > arr.copyWithin( 3, 0, 2 );\n    > arr[ 3 ]\n    1\n    > arr[ 4 ]\n    2\n\n","Int8Array.prototype.entries":"\nInt8Array.prototype.entries()\n    Returns an iterator for iterating over array key-value pairs.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array key-value pairs.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2 ] );\n    > it = arr.entries();\n    > it.next().value\n    [ 0, 1 ]\n    > it.next().value\n    [ 1, 2 ]\n    > it.next().done\n    true\n\n","Int8Array.prototype.every":"\nInt8Array.prototype.every( predicate[, thisArg] )\n    Tests whether all array elements pass a test implemented by a predicate\n    function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, an array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether all array elements pass.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2 ] );\n    > function predicate( v ) { return ( v <= 1 ); };\n    > arr.every( predicate )\n    false\n\n","Int8Array.prototype.fill":"\nInt8Array.prototype.fill( value[, start[, end]] )\n    Fills an array from a start index to an end index (non-inclusive) with a\n    provided value.\n\n    Parameters\n    ----------\n    value: number\n        Fill value.\n\n    start: integer (optional)\n        Start index. If less than zero, the start index is resolved relative to\n        the last array element. Default: 0.\n\n    end: integer (optional)\n        End index (non-inclusive). If less than zero, the end index is resolved\n        relative to the last array element. Default: out.length.\n\n    Returns\n    -------\n    out: Int8Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2 ] );\n    > arr.fill( 3 );\n    > arr[ 0 ]\n    3\n    > arr[ 1 ]\n    3\n\n","Int8Array.prototype.filter":"\nInt8Array.prototype.filter( predicate[, thisArg] )\n    Creates a new array which includes those elements for which a predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    If a predicate function does not return a truthy value for any array\n    element, the method returns `null`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which filters array elements. If a predicate function\n        returns a truthy value, an array element is included in the output\n        array; otherwise, an array element is not included in the output array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Int8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int8Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 1 ); };\n    > var arr2 = arr1.filter( predicate );\n    > arr2.length\n    2\n\n","Int8Array.prototype.find":"\nInt8Array.prototype.find( predicate[, thisArg] )\n    Returns the first array element for which a provided predicate function\n    returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `undefined`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    value: number|undefined\n        Array element.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 2 ); };\n    > var v = arr.find( predicate )\n    3\n\n","Int8Array.prototype.findIndex":"\nInt8Array.prototype.findIndex( predicate[, thisArg] )\n    Returns the index of the first array element for which a provided predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `-1`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 2 ); };\n    > var idx = arr.findIndex( predicate )\n    2\n\n","Int8Array.prototype.forEach":"\nInt8Array.prototype.forEach( fcn[, thisArg] )\n    Invokes a callback for each array element.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to invoke for each array element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 3, 2, 1 ] );\n    > var str = ' ';\n    > function fcn( v, i ) { str += i + ':' + v + ' '; };\n    > arr.forEach( fcn );\n    > str\n    ' 0:3 1:2 2:1 '\n\n","Int8Array.prototype.includes":"\nInt8Array.prototype.includes( searchElement[, fromIndex] )\n    Returns a boolean indicating whether an array includes a search element.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether an array includes a search element.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2, 3 ] );\n    > var bool = arr.includes( 4 )\n    false\n    > bool = arr.includes( 3 )\n    true\n\n","Int8Array.prototype.indexOf":"\nInt8Array.prototype.indexOf( searchElement[, fromIndex] )\n    Returns the index of the first array element strictly equal to a search\n    element.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2, 3 ] );\n    > var idx = arr.indexOf( 4 )\n    -1\n    > idx = arr.indexOf( 3 )\n    2\n\n","Int8Array.prototype.join":"\nInt8Array.prototype.join( [separator] )\n    Serializes an array by joining all array elements as a string.\n\n    Parameters\n    ----------\n    separator: string (optional)\n        String delineating array elements. Default: ','.\n\n    Returns\n    -------\n    str: string\n        Array serialized as a string.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2, 3 ] );\n    > arr.join( '|' )\n    '1|2|3'\n\n","Int8Array.prototype.keys":"\nInt8Array.prototype.keys()\n    Returns an iterator for iterating over array keys.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array keys.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2 ] );\n    > it = arr.keys();\n    > it.next().value\n    0\n    > it.next().value\n    1\n    > it.next().done\n    true\n\n","Int8Array.prototype.lastIndexOf":"\nInt8Array.prototype.lastIndexOf( searchElement[, fromIndex] )\n    Returns the index of the last array element strictly equal to a search\n    element.\n\n    The method iterates from the last array element to the first array element.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: -1.\n\n    Returns\n    -------\n    idx: integer\n        array index.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 0, 2, 0, 1 ] );\n    > var idx = arr.lastIndexOf( 3 )\n    -1\n    > idx = arr.lastIndexOf( 0 )\n    3\n\n","Int8Array.prototype.map":"\nInt8Array.prototype.map( fcn[, thisArg] )\n    Maps each array element to an element in a new typed array.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function which maps array elements to elements in the new array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Int8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int8Array( [ 1, 2, 3 ] );\n    > function fcn( v ) { return v * 2; };\n    > var arr2 = arr1.map( fcn );\n    <Int8Array>[ 2, 4, 6 ]\n\n","Int8Array.prototype.reduce":"\nInt8Array.prototype.reduce( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the first array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the first array element as the first argument and the second array\n    element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2, 3 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduce( fcn, 0 )\n    14\n\n","Int8Array.prototype.reduceRight":"\nInt8Array.prototype.reduceRight( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result, iterating from right to left.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the last array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the last array element as the first argument and the second-to-last\n    array element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2, 3 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduceRight( fcn, 0 )\n    14\n\n","Int8Array.prototype.reverse":"\nInt8Array.prototype.reverse()\n    Reverses an array *in-place*.\n\n    This method mutates the array on which the method is invoked.\n\n    Returns\n    -------\n    out: Int8Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2, 3 ] )\n    <Int8Array>[ 1, 2, 3 ]\n    > arr.reverse()\n    <Int8Array>[ 3, 2, 1 ]\n\n","Int8Array.prototype.set":"\nInt8Array.prototype.set( arr[, offset] )\n    Sets array elements.\n\n    Parameters\n    ----------\n    arr: ArrayLike\n        Source array containing array values to set.\n\n    offset: integer (optional)\n        Array index at which to start writing values. Default: 0.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2, 3 ] );\n    > arr.set( [ 4, 4 ], 1 );\n    > arr[ 1 ]\n    4\n    > arr[ 2 ]\n    4\n\n","Int8Array.prototype.slice":"\nInt8Array.prototype.slice( [begin[, end]] )\n    Copies array elements to a new array with the same underlying data type as\n    the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns `null`.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Int8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int8Array( [ 1, 2, 3 ] );\n    > var arr2 = arr1.slice( 1 );\n    > arr2.length\n    2\n    > arr2[ 0 ]\n    1\n    > arr2[ 1 ]\n    2\n\n","Int8Array.prototype.some":"\nInt8Array.prototype.some( predicate[, thisArg] )\n    Tests whether at least one array element passes a test implemented by a\n    predicate function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, a array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether at least one array element passes.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2 ] );\n    > function predicate( v ) { return ( v > 1 ); };\n    > arr.some( predicate )\n    true\n\n","Int8Array.prototype.sort":"\nInt8Array.prototype.sort( [compareFunction] )\n    Sorts an array *in-place*.\n\n    The comparison function is provided two array elements per invocation: `a`\n    and `b`.\n\n    The comparison function return value determines the sort order as follows:\n\n    - If the comparison function returns a value less than zero, then the method\n    sorts `a` to an index lower than `b` (i.e., `a` should come *before* `b`).\n\n    - If the comparison function returns a value greater than zero, then the\n    method sorts `a` to an index higher than `b` (i.e., `b` should come *before*\n    `a`).\n\n    - If the comparison function returns zero, then the relative order of `a`\n    and `b` should remain unchanged.\n\n    This method mutates the array on which the method is invoked.\n\n    Parameters\n    ----------\n    compareFunction: Function (optional)\n        Function which specifies the sort order. The default sort order is\n        ascending order.\n\n    Returns\n    -------\n    out: Int8Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2, 0, 2, 1 ] );\n    > arr.sort()\n    <Int8Array>[ 0, 1, 1, 2, 2 ]\n\n","Int8Array.prototype.subarray":"\nInt8Array.prototype.subarray( [begin[, end]] )\n    Creates a new typed array over the same underlying ArrayBuffer and with the\n    same underlying data type as the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns an empty typed array.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Int8Array\n        A new typed array view.\n\n    Examples\n    --------\n    > var arr1 = new Int8Array( [ 1, 2, 3, 4, 5 ] );\n    > var arr2 = arr1.subarray( 2 )\n    <Int8Array>[ 3, 4, 5 ]\n\n","Int8Array.prototype.toLocaleString":"\nInt8Array.prototype.toLocaleString( [locales[, options]] )\n    Serializes an array as a locale-specific string.\n\n    Parameters\n    ----------\n    locales: string|Array<string> (optional)\n        A BCP 47 language tag, or an array of such tags.\n\n    options: Object (optional)\n        Options.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2, 3 ] );\n    > arr.toLocaleString()\n    '1,2,3'\n\n","Int8Array.prototype.toString":"\nInt8Array.prototype.toString()\n    Serializes an array as a string.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2, 3 ] );\n    > arr.toString()\n    '1,2,3'\n\n","Int8Array.prototype.values":"\nInt8Array.prototype.values()\n    Returns an iterator for iterating over array elements.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array elements.\n\n    Examples\n    --------\n    > var arr = new Int8Array( [ 1, 2 ] );\n    > it = arr.values();\n    > it.next().value\n    1\n    > it.next().value\n    2\n    > it.next().done\n    true\n\n\n    See Also\n    --------\n    ArrayBuffer, Float32Array, Float64Array, Int16Array, Int32Array, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray\n","INT16_MAX":"\nINT16_MAX\n    Maximum signed 16-bit integer.\n\n    The maximum signed 16-bit integer is given by `2^15 - 1`.\n\n    Examples\n    --------\n    > INT16_MAX\n    32767\n\n    See Also\n    --------\n    INT16_MIN\n","INT16_MIN":"\nINT16_MIN\n    Minimum signed 16-bit integer.\n\n    The minimum signed 16-bit integer is given by `-(2^15)`.\n\n    Examples\n    --------\n    > INT16_MIN\n    -32768\n\n    See Also\n    --------\n    INT16_MAX\n","INT16_NUM_BYTES":"\nINT16_NUM_BYTES\n    Size (in bytes) of a 16-bit signed integer.\n\n    Examples\n    --------\n    > INT16_NUM_BYTES\n    2\n\n    See Also\n    --------\n    INT32_NUM_BYTES, INT8_NUM_BYTES, UINT16_NUM_BYTES\n","Int16Array":"\nInt16Array()\n    A typed array constructor which returns a typed array representing an array\n    of twos-complement 16-bit signed integers in the platform byte order.\n\n    Returns\n    -------\n    out: Int16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Int16Array()\n    <Int16Array>\n\n\nInt16Array( length )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    Returns\n    -------\n    out: Int16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Int16Array( 5 )\n    <Int16Array>[ 0, 0, 0, 0, 0 ]\n\n\nInt16Array( typedarray )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    Returns\n    -------\n    out: Int16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int32Array( [ 5, 5, 5 ] );\n    > var arr2 = new Int16Array( arr1 )\n    <Int16Array>[ 5, 5, 5 ]\n\n\nInt16Array( obj )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    Returns\n    -------\n    out: Int16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 5.0, 5.0, 5.0 ];\n    > var arr2 = new Int16Array( arr1 )\n    <Int16Array>[ 5, 5, 5 ]\n\n\nInt16Array( buffer[, byteOffset[, length]] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Int16Array\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 8 );\n    > var arr = new Int16Array( buf, 0, 4 )\n    <Int16Array>[ 0, 0, 0, 0 ]\n\n\nInt16Array.from( src[, map[, thisArg]] )\n    Creates a new typed array from an array-like object or an iterable.\n\n    A callback is provided the following arguments:\n\n    - value: source value.\n    - index: source index.\n\n    Parameters\n    ----------\n    src: ArrayLike|Iterable\n        Source of array elements.\n\n    map: Function (optional)\n        Callback to invoke for each source element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Int16Array\n        A typed array.\n\n    Examples\n    --------\n    > function mapFcn( v ) { return v * 2; };\n    > var arr = Int16Array.from( [ 1, 2 ], mapFcn )\n    <Int16Array>[ 2, 4 ]\n\n\nInt16Array.of( element0[, element1[, ...elementN]] )\n    Creates a new typed array from a variable number of arguments.\n\n    Parameters\n    ----------\n    element0: number\n        Array element.\n\n    element1: number (optional)\n        Array element.\n\n    elementN: number (optional)\n        Array elements.\n\n    Returns\n    -------\n    out: Int16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = Int16Array.of( 1, 2 )\n    <Int16Array>[ 1, 2 ]\n\n\nInt16Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Int16Array.BYTES_PER_ELEMENT\n    2\n\n\nInt16Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Int16Array.name\n    'Int16Array'\n\n\nInt16Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Int16Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n\nInt16Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Int16Array( 5 );\n    > arr.byteLength\n    10\n\n\nInt16Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Int16Array( 5 );\n    > arr.byteOffset\n    0\n\n\nInt16Array.prototype.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > var arr = new Int16Array( 5 );\n    > arr.BYTES_PER_ELEMENT\n    2\n\n\nInt16Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Int16Array( 5 );\n    > arr.length\n    5\n\n\nInt16Array.prototype.copyWithin( target, start[, end] )\n    Copies a sequence of elements within the array starting at `start` and\n    ending at `end` (non-inclusive) to the position starting at `target`.\n\n    Parameters\n    ----------\n    target: integer\n        Target start index position.\n\n    start: integer\n        Source start index position.\n\n    end: integer (optional)\n        Source end index position. Default: out.length.\n\n    Returns\n    -------\n    out: Int16Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2, 3, 4, 5 ] );\n    > arr.copyWithin( 3, 0, 2 );\n    > arr[ 3 ]\n    1\n    > arr[ 4 ]\n    2\n\n\nInt16Array.prototype.entries()\n    Returns an iterator for iterating over array key-value pairs.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array key-value pairs.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2 ] );\n    > it = arr.entries();\n    > it.next().value\n    [ 0, 1 ]\n    > it.next().value\n    [ 1, 2 ]\n    > it.next().done\n    true\n\n\nInt16Array.prototype.every( predicate[, thisArg] )\n    Tests whether all array elements pass a test implemented by a predicate\n    function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, an array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether all array elements pass.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2 ] );\n    > function predicate( v ) { return ( v <= 1 ); };\n    > arr.every( predicate )\n    false\n\n\nInt16Array.prototype.fill( value[, start[, end]] )\n    Fills an array from a start index to an end index (non-inclusive) with a\n    provided value.\n\n    Parameters\n    ----------\n    value: number\n        Fill value.\n\n    start: integer (optional)\n        Start index. If less than zero, the start index is resolved relative to\n        the last array element. Default: 0.\n\n    end: integer (optional)\n        End index (non-inclusive). If less than zero, the end index is resolved\n        relative to the last array element. Default: out.length.\n\n    Returns\n    -------\n    out: Int16Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2 ] );\n    > arr.fill( 3 );\n    > arr[ 0 ]\n    3\n    > arr[ 1 ]\n    3\n\n\nInt16Array.prototype.filter( predicate[, thisArg] )\n    Creates a new array which includes those elements for which a predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    If a predicate function does not return a truthy value for any array\n    element, the method returns `null`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which filters array elements. If a predicate function\n        returns a truthy value, an array element is included in the output\n        array; otherwise, an array element is not included in the output array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Int16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int16Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 1 ); };\n    > var arr2 = arr1.filter( predicate );\n    > arr2.length\n    2\n\n\nInt16Array.prototype.find( predicate[, thisArg] )\n    Returns the first array element for which a provided predicate function\n    returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `undefined`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    value: number|undefined\n        Array element.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 2 ); };\n    > var v = arr.find( predicate )\n    3\n\n\nInt16Array.prototype.findIndex( predicate[, thisArg] )\n    Returns the index of the first array element for which a provided predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `-1`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 2 ); };\n    > var idx = arr.findIndex( predicate )\n    2\n\n\nInt16Array.prototype.forEach( fcn[, thisArg] )\n    Invokes a callback for each array element.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to invoke for each array element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 3, 2, 1 ] );\n    > var str = ' ';\n    > function fcn( v, i ) { str += i + ':' + v + ' '; };\n    > arr.forEach( fcn );\n    > str\n    ' 0:3 1:2 2:1 '\n\n\nInt16Array.prototype.includes( searchElement[, fromIndex] )\n    Returns a boolean indicating whether an array includes a search element.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether an array includes a search element.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2, 3 ] );\n    > var bool = arr.includes( 4 )\n    false\n    > bool = arr.includes( 3 )\n    true\n\n\nInt16Array.prototype.indexOf( searchElement[, fromIndex] )\n    Returns the index of the first array element strictly equal to a search\n    element.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2, 3 ] );\n    > var idx = arr.indexOf( 4 )\n    -1\n    > idx = arr.indexOf( 3 )\n    2\n\n\nInt16Array.prototype.join( [separator] )\n    Serializes an array by joining all array elements as a string.\n\n    Parameters\n    ----------\n    separator: string (optional)\n        String delineating array elements. Default: ','.\n\n    Returns\n    -------\n    str: string\n        Array serialized as a string.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2, 3 ] );\n    > arr.join( '|' )\n    '1|2|3'\n\n\nInt16Array.prototype.keys()\n    Returns an iterator for iterating over array keys.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array keys.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2 ] );\n    > it = arr.keys();\n    > it.next().value\n    0\n    > it.next().value\n    1\n    > it.next().done\n    true\n\n\nInt16Array.prototype.lastIndexOf( searchElement[, fromIndex] )\n    Returns the index of the last array element strictly equal to a search\n    element.\n\n    The method iterates from the last array element to the first array element.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: -1.\n\n    Returns\n    -------\n    idx: integer\n        array index.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 0, 2, 0, 1 ] );\n    > var idx = arr.lastIndexOf( 3 )\n    -1\n    > idx = arr.lastIndexOf( 0 )\n    3\n\n\nInt16Array.prototype.map( fcn[, thisArg] )\n    Maps each array element to an element in a new typed array.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function which maps array elements to elements in the new array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Int16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int16Array( [ 1, 2, 3 ] );\n    > function fcn( v ) { return v * 2; };\n    > var arr2 = arr1.map( fcn );\n    <Int16Array>[ 2, 4, 6 ]\n\n\nInt16Array.prototype.reduce( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the first array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the first array element as the first argument and the second array\n    element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2, 3 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduce( fcn, 0 )\n    14\n\n\nInt16Array.prototype.reduceRight( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result, iterating from right to left.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the last array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the last array element as the first argument and the second-to-last\n    array element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2, 3 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduceRight( fcn, 0 )\n    14\n\n\nInt16Array.prototype.reverse()\n    Reverses an array *in-place*.\n\n    This method mutates the array on which the method is invoked.\n\n    Returns\n    -------\n    out: Int16Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2, 3 ] )\n    <Int16Array>[ 1, 2, 3 ]\n    > arr.reverse()\n    <Int16Array>[ 3, 2, 1 ]\n\n\nInt16Array.prototype.set( arr[, offset] )\n    Sets array elements.\n\n    Parameters\n    ----------\n    arr: ArrayLike\n        Source array containing array values to set.\n\n    offset: integer (optional)\n        Array index at which to start writing values. Default: 0.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2, 3 ] );\n    > arr.set( [ 4, 4 ], 1 );\n    > arr[ 1 ]\n    4\n    > arr[ 2 ]\n    4\n\n\nInt16Array.prototype.slice( [begin[, end]] )\n    Copies array elements to a new array with the same underlying data type as\n    the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns `null`.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Int16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int16Array( [ 1, 2, 3 ] );\n    > var arr2 = arr1.slice( 1 );\n    > arr2.length\n    2\n    > arr2[ 0 ]\n    1\n    > arr2[ 1 ]\n    2\n\n\nInt16Array.prototype.some( predicate[, thisArg] )\n    Tests whether at least one array element passes a test implemented by a\n    predicate function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, a array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether at least one array element passes.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2 ] );\n    > function predicate( v ) { return ( v > 1 ); };\n    > arr.some( predicate )\n    true\n\n\nInt16Array.prototype.sort( [compareFunction] )\n    Sorts an array *in-place*.\n\n    The comparison function is provided two array elements per invocation: `a`\n    and `b`.\n\n    The comparison function return value determines the sort order as follows:\n\n    - If the comparison function returns a value less than zero, then the method\n    sorts `a` to an index lower than `b` (i.e., `a` should come *before* `b`).\n\n    - If the comparison function returns a value greater than zero, then the\n    method sorts `a` to an index higher than `b` (i.e., `b` should come *before*\n    `a`).\n\n    - If the comparison function returns zero, then the relative order of `a`\n    and `b` should remain unchanged.\n\n    This method mutates the array on which the method is invoked.\n\n    Parameters\n    ----------\n    compareFunction: Function (optional)\n        Function which specifies the sort order. The default sort order is\n        ascending order.\n\n    Returns\n    -------\n    out: Int16Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2, 0, 2, 1 ] );\n    > arr.sort()\n    <Int16Array>[ 0, 1, 1, 2, 2 ]\n\n\nInt16Array.prototype.subarray( [begin[, end]] )\n    Creates a new typed array over the same underlying ArrayBuffer and with the\n    same underlying data type as the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns an empty typed array.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Int16Array\n        A new typed array view.\n\n    Examples\n    --------\n    > var arr1 = new Int16Array( [ 1, 2, 3, 4, 5 ] );\n    > var arr2 = arr1.subarray( 2 )\n    <Int16Array>[ 3, 4, 5 ]\n\n\nInt16Array.prototype.toLocaleString( [locales[, options]] )\n    Serializes an array as a locale-specific string.\n\n    Parameters\n    ----------\n    locales: string|Array<string> (optional)\n        A BCP 47 language tag, or an array of such tags.\n\n    options: Object (optional)\n        Options.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2, 3 ] );\n    > arr.toLocaleString()\n    '1,2,3'\n\n\nInt16Array.prototype.toString()\n    Serializes an array as a string.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2, 3 ] );\n    > arr.toString()\n    '1,2,3'\n\n\nInt16Array.prototype.values()\n    Returns an iterator for iterating over array elements.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array elements.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2 ] );\n    > it = arr.values();\n    > it.next().value\n    1\n    > it.next().value\n    2\n    > it.next().done\n    true\n\n\n    See Also\n    --------\n    ArrayBuffer, Float32Array, Float64Array, Int32Array, Int8Array, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray\n","Int16Array.from":"\nInt16Array.from( src[, map[, thisArg]] )\n    Creates a new typed array from an array-like object or an iterable.\n\n    A callback is provided the following arguments:\n\n    - value: source value.\n    - index: source index.\n\n    Parameters\n    ----------\n    src: ArrayLike|Iterable\n        Source of array elements.\n\n    map: Function (optional)\n        Callback to invoke for each source element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Int16Array\n        A typed array.\n\n    Examples\n    --------\n    > function mapFcn( v ) { return v * 2; };\n    > var arr = Int16Array.from( [ 1, 2 ], mapFcn )\n    <Int16Array>[ 2, 4 ]\n\n","Int16Array.of":"\nInt16Array.of( element0[, element1[, ...elementN]] )\n    Creates a new typed array from a variable number of arguments.\n\n    Parameters\n    ----------\n    element0: number\n        Array element.\n\n    element1: number (optional)\n        Array element.\n\n    elementN: number (optional)\n        Array elements.\n\n    Returns\n    -------\n    out: Int16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = Int16Array.of( 1, 2 )\n    <Int16Array>[ 1, 2 ]\n\n","Int16Array.BYTES_PER_ELEMENT":"\nInt16Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Int16Array.BYTES_PER_ELEMENT\n    2\n\n","Int16Array.name":"\nInt16Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Int16Array.name\n    'Int16Array'\n\n","Int16Array.prototype.buffer":"\nInt16Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Int16Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n","Int16Array.prototype.byteLength":"\nInt16Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Int16Array( 5 );\n    > arr.byteLength\n    10\n\n","Int16Array.prototype.byteOffset":"\nInt16Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Int16Array( 5 );\n    > arr.byteOffset\n    0\n\n","Int16Array.prototype.BYTES_PER_ELEMENT":"\nInt16Array.prototype.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > var arr = new Int16Array( 5 );\n    > arr.BYTES_PER_ELEMENT\n    2\n\n","Int16Array.prototype.length":"\nInt16Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Int16Array( 5 );\n    > arr.length\n    5\n\n","Int16Array.prototype.copyWithin":"\nInt16Array.prototype.copyWithin( target, start[, end] )\n    Copies a sequence of elements within the array starting at `start` and\n    ending at `end` (non-inclusive) to the position starting at `target`.\n\n    Parameters\n    ----------\n    target: integer\n        Target start index position.\n\n    start: integer\n        Source start index position.\n\n    end: integer (optional)\n        Source end index position. Default: out.length.\n\n    Returns\n    -------\n    out: Int16Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2, 3, 4, 5 ] );\n    > arr.copyWithin( 3, 0, 2 );\n    > arr[ 3 ]\n    1\n    > arr[ 4 ]\n    2\n\n","Int16Array.prototype.entries":"\nInt16Array.prototype.entries()\n    Returns an iterator for iterating over array key-value pairs.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array key-value pairs.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2 ] );\n    > it = arr.entries();\n    > it.next().value\n    [ 0, 1 ]\n    > it.next().value\n    [ 1, 2 ]\n    > it.next().done\n    true\n\n","Int16Array.prototype.every":"\nInt16Array.prototype.every( predicate[, thisArg] )\n    Tests whether all array elements pass a test implemented by a predicate\n    function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, an array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether all array elements pass.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2 ] );\n    > function predicate( v ) { return ( v <= 1 ); };\n    > arr.every( predicate )\n    false\n\n","Int16Array.prototype.fill":"\nInt16Array.prototype.fill( value[, start[, end]] )\n    Fills an array from a start index to an end index (non-inclusive) with a\n    provided value.\n\n    Parameters\n    ----------\n    value: number\n        Fill value.\n\n    start: integer (optional)\n        Start index. If less than zero, the start index is resolved relative to\n        the last array element. Default: 0.\n\n    end: integer (optional)\n        End index (non-inclusive). If less than zero, the end index is resolved\n        relative to the last array element. Default: out.length.\n\n    Returns\n    -------\n    out: Int16Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2 ] );\n    > arr.fill( 3 );\n    > arr[ 0 ]\n    3\n    > arr[ 1 ]\n    3\n\n","Int16Array.prototype.filter":"\nInt16Array.prototype.filter( predicate[, thisArg] )\n    Creates a new array which includes those elements for which a predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    If a predicate function does not return a truthy value for any array\n    element, the method returns `null`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which filters array elements. If a predicate function\n        returns a truthy value, an array element is included in the output\n        array; otherwise, an array element is not included in the output array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Int16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int16Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 1 ); };\n    > var arr2 = arr1.filter( predicate );\n    > arr2.length\n    2\n\n","Int16Array.prototype.find":"\nInt16Array.prototype.find( predicate[, thisArg] )\n    Returns the first array element for which a provided predicate function\n    returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `undefined`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    value: number|undefined\n        Array element.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 2 ); };\n    > var v = arr.find( predicate )\n    3\n\n","Int16Array.prototype.findIndex":"\nInt16Array.prototype.findIndex( predicate[, thisArg] )\n    Returns the index of the first array element for which a provided predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `-1`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 2 ); };\n    > var idx = arr.findIndex( predicate )\n    2\n\n","Int16Array.prototype.forEach":"\nInt16Array.prototype.forEach( fcn[, thisArg] )\n    Invokes a callback for each array element.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to invoke for each array element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 3, 2, 1 ] );\n    > var str = ' ';\n    > function fcn( v, i ) { str += i + ':' + v + ' '; };\n    > arr.forEach( fcn );\n    > str\n    ' 0:3 1:2 2:1 '\n\n","Int16Array.prototype.includes":"\nInt16Array.prototype.includes( searchElement[, fromIndex] )\n    Returns a boolean indicating whether an array includes a search element.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether an array includes a search element.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2, 3 ] );\n    > var bool = arr.includes( 4 )\n    false\n    > bool = arr.includes( 3 )\n    true\n\n","Int16Array.prototype.indexOf":"\nInt16Array.prototype.indexOf( searchElement[, fromIndex] )\n    Returns the index of the first array element strictly equal to a search\n    element.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2, 3 ] );\n    > var idx = arr.indexOf( 4 )\n    -1\n    > idx = arr.indexOf( 3 )\n    2\n\n","Int16Array.prototype.join":"\nInt16Array.prototype.join( [separator] )\n    Serializes an array by joining all array elements as a string.\n\n    Parameters\n    ----------\n    separator: string (optional)\n        String delineating array elements. Default: ','.\n\n    Returns\n    -------\n    str: string\n        Array serialized as a string.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2, 3 ] );\n    > arr.join( '|' )\n    '1|2|3'\n\n","Int16Array.prototype.keys":"\nInt16Array.prototype.keys()\n    Returns an iterator for iterating over array keys.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array keys.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2 ] );\n    > it = arr.keys();\n    > it.next().value\n    0\n    > it.next().value\n    1\n    > it.next().done\n    true\n\n","Int16Array.prototype.lastIndexOf":"\nInt16Array.prototype.lastIndexOf( searchElement[, fromIndex] )\n    Returns the index of the last array element strictly equal to a search\n    element.\n\n    The method iterates from the last array element to the first array element.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: -1.\n\n    Returns\n    -------\n    idx: integer\n        array index.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 0, 2, 0, 1 ] );\n    > var idx = arr.lastIndexOf( 3 )\n    -1\n    > idx = arr.lastIndexOf( 0 )\n    3\n\n","Int16Array.prototype.map":"\nInt16Array.prototype.map( fcn[, thisArg] )\n    Maps each array element to an element in a new typed array.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function which maps array elements to elements in the new array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Int16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int16Array( [ 1, 2, 3 ] );\n    > function fcn( v ) { return v * 2; };\n    > var arr2 = arr1.map( fcn );\n    <Int16Array>[ 2, 4, 6 ]\n\n","Int16Array.prototype.reduce":"\nInt16Array.prototype.reduce( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the first array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the first array element as the first argument and the second array\n    element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2, 3 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduce( fcn, 0 )\n    14\n\n","Int16Array.prototype.reduceRight":"\nInt16Array.prototype.reduceRight( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result, iterating from right to left.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the last array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the last array element as the first argument and the second-to-last\n    array element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2, 3 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduceRight( fcn, 0 )\n    14\n\n","Int16Array.prototype.reverse":"\nInt16Array.prototype.reverse()\n    Reverses an array *in-place*.\n\n    This method mutates the array on which the method is invoked.\n\n    Returns\n    -------\n    out: Int16Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2, 3 ] )\n    <Int16Array>[ 1, 2, 3 ]\n    > arr.reverse()\n    <Int16Array>[ 3, 2, 1 ]\n\n","Int16Array.prototype.set":"\nInt16Array.prototype.set( arr[, offset] )\n    Sets array elements.\n\n    Parameters\n    ----------\n    arr: ArrayLike\n        Source array containing array values to set.\n\n    offset: integer (optional)\n        Array index at which to start writing values. Default: 0.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2, 3 ] );\n    > arr.set( [ 4, 4 ], 1 );\n    > arr[ 1 ]\n    4\n    > arr[ 2 ]\n    4\n\n","Int16Array.prototype.slice":"\nInt16Array.prototype.slice( [begin[, end]] )\n    Copies array elements to a new array with the same underlying data type as\n    the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns `null`.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Int16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int16Array( [ 1, 2, 3 ] );\n    > var arr2 = arr1.slice( 1 );\n    > arr2.length\n    2\n    > arr2[ 0 ]\n    1\n    > arr2[ 1 ]\n    2\n\n","Int16Array.prototype.some":"\nInt16Array.prototype.some( predicate[, thisArg] )\n    Tests whether at least one array element passes a test implemented by a\n    predicate function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, a array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether at least one array element passes.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2 ] );\n    > function predicate( v ) { return ( v > 1 ); };\n    > arr.some( predicate )\n    true\n\n","Int16Array.prototype.sort":"\nInt16Array.prototype.sort( [compareFunction] )\n    Sorts an array *in-place*.\n\n    The comparison function is provided two array elements per invocation: `a`\n    and `b`.\n\n    The comparison function return value determines the sort order as follows:\n\n    - If the comparison function returns a value less than zero, then the method\n    sorts `a` to an index lower than `b` (i.e., `a` should come *before* `b`).\n\n    - If the comparison function returns a value greater than zero, then the\n    method sorts `a` to an index higher than `b` (i.e., `b` should come *before*\n    `a`).\n\n    - If the comparison function returns zero, then the relative order of `a`\n    and `b` should remain unchanged.\n\n    This method mutates the array on which the method is invoked.\n\n    Parameters\n    ----------\n    compareFunction: Function (optional)\n        Function which specifies the sort order. The default sort order is\n        ascending order.\n\n    Returns\n    -------\n    out: Int16Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2, 0, 2, 1 ] );\n    > arr.sort()\n    <Int16Array>[ 0, 1, 1, 2, 2 ]\n\n","Int16Array.prototype.subarray":"\nInt16Array.prototype.subarray( [begin[, end]] )\n    Creates a new typed array over the same underlying ArrayBuffer and with the\n    same underlying data type as the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns an empty typed array.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Int16Array\n        A new typed array view.\n\n    Examples\n    --------\n    > var arr1 = new Int16Array( [ 1, 2, 3, 4, 5 ] );\n    > var arr2 = arr1.subarray( 2 )\n    <Int16Array>[ 3, 4, 5 ]\n\n","Int16Array.prototype.toLocaleString":"\nInt16Array.prototype.toLocaleString( [locales[, options]] )\n    Serializes an array as a locale-specific string.\n\n    Parameters\n    ----------\n    locales: string|Array<string> (optional)\n        A BCP 47 language tag, or an array of such tags.\n\n    options: Object (optional)\n        Options.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2, 3 ] );\n    > arr.toLocaleString()\n    '1,2,3'\n\n","Int16Array.prototype.toString":"\nInt16Array.prototype.toString()\n    Serializes an array as a string.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2, 3 ] );\n    > arr.toString()\n    '1,2,3'\n\n","Int16Array.prototype.values":"\nInt16Array.prototype.values()\n    Returns an iterator for iterating over array elements.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array elements.\n\n    Examples\n    --------\n    > var arr = new Int16Array( [ 1, 2 ] );\n    > it = arr.values();\n    > it.next().value\n    1\n    > it.next().value\n    2\n    > it.next().done\n    true\n\n\n    See Also\n    --------\n    ArrayBuffer, Float32Array, Float64Array, Int32Array, Int8Array, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray\n","INT32_MAX":"\nINT32_MAX\n    Maximum signed 32-bit integer.\n\n    The maximum signed 32-bit integer is given by `2^31 - 1`.\n\n    Examples\n    --------\n    > INT32_MAX\n    2147483647\n\n    See Also\n    --------\n    INT32_MIN\n","INT32_MIN":"\nINT32_MIN\n    Minimum signed 32-bit integer.\n\n    The minimum signed 32-bit integer is given by `-(2^31)`.\n\n    Examples\n    --------\n    > INT32_MIN\n    -2147483648\n\n    See Also\n    --------\n    INT32_MAX\n","INT32_NUM_BYTES":"\nINT32_NUM_BYTES\n    Size (in bytes) of a 32-bit signed integer.\n\n    Examples\n    --------\n    > INT32_NUM_BYTES\n    4\n\n    See Also\n    --------\n    INT16_NUM_BYTES, INT8_NUM_BYTES, UINT32_NUM_BYTES\n","Int32Array":"\nInt32Array()\n    A typed array constructor which returns a typed array representing an array\n    of twos-complement 32-bit signed integers in the platform byte order.\n\n    Returns\n    -------\n    out: Int32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Int32Array()\n    <Int32Array>\n\n\nInt32Array( length )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    Returns\n    -------\n    out: Int32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Int32Array( 5 )\n    <Int32Array>[ 0, 0, 0, 0, 0 ]\n\n\nInt32Array( typedarray )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    Returns\n    -------\n    out: Int32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int16Array( [ 5, 5, 5 ] );\n    > var arr2 = new Int32Array( arr1 )\n    <Int32Array>[ 5, 5, 5 ]\n\n\nInt32Array( obj )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    Returns\n    -------\n    out: Int32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 5.0, 5.0, 5.0 ];\n    > var arr2 = new Int32Array( arr1 )\n    <Int32Array>[ 5, 5, 5 ]\n\n\nInt32Array( buffer[, byteOffset[, length]] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Int32Array\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 16 );\n    > var arr = new Int32Array( buf, 0, 4 )\n    <Int32Array>[ 0, 0, 0, 0 ]\n\n\nInt32Array.from( src[, map[, thisArg]] )\n    Creates a new typed array from an array-like object or an iterable.\n\n    A callback is provided the following arguments:\n\n    - value: source value.\n    - index: source index.\n\n    Parameters\n    ----------\n    src: ArrayLike|Iterable\n        Source of array elements.\n\n    map: Function (optional)\n        Callback to invoke for each source element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Int32Array\n        A typed array.\n\n    Examples\n    --------\n    > function mapFcn( v ) { return v * 2; };\n    > var arr = Int32Array.from( [ 1, 2 ], mapFcn )\n    <Int32Array>[ 2, 4 ]\n\n\nInt32Array.of( element0[, element1[, ...elementN]] )\n    Creates a new typed array from a variable number of arguments.\n\n    Parameters\n    ----------\n    element0: number\n        Array element.\n\n    element1: number (optional)\n        Array element.\n\n    elementN: number (optional)\n        Array elements.\n\n    Returns\n    -------\n    out: Int32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = Int32Array.of( 1, 2 )\n    <Int32Array>[ 1, 2 ]\n\n\nInt32Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Int32Array.BYTES_PER_ELEMENT\n    4\n\n\nInt32Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Int32Array.name\n    'Int32Array'\n\n\nInt32Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Int32Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n\nInt32Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Int32Array( 5 );\n    > arr.byteLength\n    20\n\n\nInt32Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Int32Array( 5 );\n    > arr.byteOffset\n    0\n\n\nInt32Array.prototype.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > var arr = new Int32Array( 5 );\n    > arr.BYTES_PER_ELEMENT\n    4\n\n\nInt32Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Int32Array( 5 );\n    > arr.length\n    5\n\n\nInt32Array.prototype.copyWithin( target, start[, end] )\n    Copies a sequence of elements within the array starting at `start` and\n    ending at `end` (non-inclusive) to the position starting at `target`.\n\n    Parameters\n    ----------\n    target: integer\n        Target start index position.\n\n    start: integer\n        Source start index position.\n\n    end: integer (optional)\n        Source end index position. Default: out.length.\n\n    Returns\n    -------\n    out: Int32Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2, 3, 4, 5 ] );\n    > arr.copyWithin( 3, 0, 2 );\n    > arr[ 3 ]\n    1\n    > arr[ 4 ]\n    2\n\n\nInt32Array.prototype.entries()\n    Returns an iterator for iterating over array key-value pairs.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array key-value pairs.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2 ] );\n    > it = arr.entries();\n    > it.next().value\n    [ 0, 1 ]\n    > it.next().value\n    [ 1, 2 ]\n    > it.next().done\n    true\n\n\nInt32Array.prototype.every( predicate[, thisArg] )\n    Tests whether all array elements pass a test implemented by a predicate\n    function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, an array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether all array elements pass.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2 ] );\n    > function predicate( v ) { return ( v <= 1 ); };\n    > arr.every( predicate )\n    false\n\n\nInt32Array.prototype.fill( value[, start[, end]] )\n    Fills an array from a start index to an end index (non-inclusive) with a\n    provided value.\n\n    Parameters\n    ----------\n    value: number\n        Fill value.\n\n    start: integer (optional)\n        Start index. If less than zero, the start index is resolved relative to\n        the last array element. Default: 0.\n\n    end: integer (optional)\n        End index (non-inclusive). If less than zero, the end index is resolved\n        relative to the last array element. Default: out.length.\n\n    Returns\n    -------\n    out: Int32Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2 ] );\n    > arr.fill( 3 );\n    > arr[ 0 ]\n    3\n    > arr[ 1 ]\n    3\n\n\nInt32Array.prototype.filter( predicate[, thisArg] )\n    Creates a new array which includes those elements for which a predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    If a predicate function does not return a truthy value for any array\n    element, the method returns `null`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which filters array elements. If a predicate function\n        returns a truthy value, an array element is included in the output\n        array; otherwise, an array element is not included in the output array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Int32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int32Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 1 ); };\n    > var arr2 = arr1.filter( predicate );\n    > arr2.length\n    2\n\n\nInt32Array.prototype.find( predicate[, thisArg] )\n    Returns the first array element for which a provided predicate function\n    returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `undefined`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    value: number|undefined\n        Array element.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 2 ); };\n    > var v = arr.find( predicate )\n    3\n\n\nInt32Array.prototype.findIndex( predicate[, thisArg] )\n    Returns the index of the first array element for which a provided predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `-1`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 2 ); };\n    > var idx = arr.findIndex( predicate )\n    2\n\n\nInt32Array.prototype.forEach( fcn[, thisArg] )\n    Invokes a callback for each array element.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to invoke for each array element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 3, 2, 1 ] );\n    > var str = ' ';\n    > function fcn( v, i ) { str += i + ':' + v + ' '; };\n    > arr.forEach( fcn );\n    > str\n    ' 0:3 1:2 2:1 '\n\n\nInt32Array.prototype.includes( searchElement[, fromIndex] )\n    Returns a boolean indicating whether an array includes a search element.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether an array includes a search element.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2, 3 ] );\n    > var bool = arr.includes( 4 )\n    false\n    > bool = arr.includes( 3 )\n    true\n\n\nInt32Array.prototype.indexOf( searchElement[, fromIndex] )\n    Returns the index of the first array element strictly equal to a search\n    element.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2, 3 ] );\n    > var idx = arr.indexOf( 4 )\n    -1\n    > idx = arr.indexOf( 3 )\n    2\n\n\nInt32Array.prototype.join( [separator] )\n    Serializes an array by joining all array elements as a string.\n\n    Parameters\n    ----------\n    separator: string (optional)\n        String delineating array elements. Default: ','.\n\n    Returns\n    -------\n    str: string\n        Array serialized as a string.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2, 3 ] );\n    > arr.join( '|' )\n    '1|2|3'\n\n\nInt32Array.prototype.keys()\n    Returns an iterator for iterating over array keys.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array keys.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2 ] );\n    > it = arr.keys();\n    > it.next().value\n    0\n    > it.next().value\n    1\n    > it.next().done\n    true\n\n\nInt32Array.prototype.lastIndexOf( searchElement[, fromIndex] )\n    Returns the index of the last array element strictly equal to a search\n    element.\n\n    The method iterates from the last array element to the first array element.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: -1.\n\n    Returns\n    -------\n    idx: integer\n        array index.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 0, 2, 0, 1 ] );\n    > var idx = arr.lastIndexOf( 3 )\n    -1\n    > idx = arr.lastIndexOf( 0 )\n    3\n\n\nInt32Array.prototype.map( fcn[, thisArg] )\n    Maps each array element to an element in a new typed array.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function which maps array elements to elements in the new array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Int32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int32Array( [ 1, 2, 3 ] );\n    > function fcn( v ) { return v * 2; };\n    > var arr2 = arr1.map( fcn );\n    <Int32Array>[ 2, 4, 6 ]\n\n\nInt32Array.prototype.reduce( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the first array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the first array element as the first argument and the second array\n    element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2, 3 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduce( fcn, 0 )\n    14\n\n\nInt32Array.prototype.reduceRight( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result, iterating from right to left.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the last array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the last array element as the first argument and the second-to-last\n    array element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2, 3 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduceRight( fcn, 0 )\n    14\n\n\nInt32Array.prototype.reverse()\n    Reverses an array *in-place*.\n\n    This method mutates the array on which the method is invoked.\n\n    Returns\n    -------\n    out: Int32Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2, 3 ] )\n    <Int32Array>[ 1, 2, 3 ]\n    > arr.reverse()\n    <Int32Array>[ 3, 2, 1 ]\n\n\nInt32Array.prototype.set( arr[, offset] )\n    Sets array elements.\n\n    Parameters\n    ----------\n    arr: ArrayLike\n        Source array containing array values to set.\n\n    offset: integer (optional)\n        Array index at which to start writing values. Default: 0.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2, 3 ] );\n    > arr.set( [ 4, 4 ], 1 );\n    > arr[ 1 ]\n    4\n    > arr[ 2 ]\n    4\n\n\nInt32Array.prototype.slice( [begin[, end]] )\n    Copies array elements to a new array with the same underlying data type as\n    the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns `null`.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Int32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int32Array( [ 1, 2, 3 ] );\n    > var arr2 = arr1.slice( 1 );\n    > arr2.length\n    2\n    > arr2[ 0 ]\n    1\n    > arr2[ 1 ]\n    2\n\n\nInt32Array.prototype.some( predicate[, thisArg] )\n    Tests whether at least one array element passes a test implemented by a\n    predicate function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, a array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether at least one array element passes.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2 ] );\n    > function predicate( v ) { return ( v > 1 ); };\n    > arr.some( predicate )\n    true\n\n\nInt32Array.prototype.sort( [compareFunction] )\n    Sorts an array *in-place*.\n\n    The comparison function is provided two array elements per invocation: `a`\n    and `b`.\n\n    The comparison function return value determines the sort order as follows:\n\n    - If the comparison function returns a value less than zero, then the method\n    sorts `a` to an index lower than `b` (i.e., `a` should come *before* `b`).\n\n    - If the comparison function returns a value greater than zero, then the\n    method sorts `a` to an index higher than `b` (i.e., `b` should come *before*\n    `a`).\n\n    - If the comparison function returns zero, then the relative order of `a`\n    and `b` should remain unchanged.\n\n    This method mutates the array on which the method is invoked.\n\n    Parameters\n    ----------\n    compareFunction: Function (optional)\n        Function which specifies the sort order. The default sort order is\n        ascending order.\n\n    Returns\n    -------\n    out: Int32Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2, 0, 2, 1 ] );\n    > arr.sort()\n    <Int32Array>[ 0, 1, 1, 2, 2 ]\n\n\nInt32Array.prototype.subarray( [begin[, end]] )\n    Creates a new typed array over the same underlying ArrayBuffer and with the\n    same underlying data type as the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns an empty typed array.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Int32Array\n        A new typed array view.\n\n    Examples\n    --------\n    > var arr1 = new Int32Array( [ 1, 2, 3, 4, 5 ] );\n    > var arr2 = arr1.subarray( 2 )\n    <Int32Array>[ 3, 4, 5 ]\n\n\nInt32Array.prototype.toLocaleString( [locales[, options]] )\n    Serializes an array as a locale-specific string.\n\n    Parameters\n    ----------\n    locales: string|Array<string> (optional)\n        A BCP 47 language tag, or an array of such tags.\n\n    options: Object (optional)\n        Options.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2, 3 ] );\n    > arr.toLocaleString()\n    '1,2,3'\n\n\nInt32Array.prototype.toString()\n    Serializes an array as a string.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2, 3 ] );\n    > arr.toString()\n    '1,2,3'\n\n\nInt32Array.prototype.values()\n    Returns an iterator for iterating over array elements.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array elements.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2 ] );\n    > it = arr.values();\n    > it.next().value\n    1\n    > it.next().value\n    2\n    > it.next().done\n    true\n\n\n    See Also\n    --------\n    ArrayBuffer, Float32Array, Float64Array, Int16Array, Int8Array, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray\n","Int32Array.from":"\nInt32Array.from( src[, map[, thisArg]] )\n    Creates a new typed array from an array-like object or an iterable.\n\n    A callback is provided the following arguments:\n\n    - value: source value.\n    - index: source index.\n\n    Parameters\n    ----------\n    src: ArrayLike|Iterable\n        Source of array elements.\n\n    map: Function (optional)\n        Callback to invoke for each source element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Int32Array\n        A typed array.\n\n    Examples\n    --------\n    > function mapFcn( v ) { return v * 2; };\n    > var arr = Int32Array.from( [ 1, 2 ], mapFcn )\n    <Int32Array>[ 2, 4 ]\n\n","Int32Array.of":"\nInt32Array.of( element0[, element1[, ...elementN]] )\n    Creates a new typed array from a variable number of arguments.\n\n    Parameters\n    ----------\n    element0: number\n        Array element.\n\n    element1: number (optional)\n        Array element.\n\n    elementN: number (optional)\n        Array elements.\n\n    Returns\n    -------\n    out: Int32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = Int32Array.of( 1, 2 )\n    <Int32Array>[ 1, 2 ]\n\n","Int32Array.BYTES_PER_ELEMENT":"\nInt32Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Int32Array.BYTES_PER_ELEMENT\n    4\n\n","Int32Array.name":"\nInt32Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Int32Array.name\n    'Int32Array'\n\n","Int32Array.prototype.buffer":"\nInt32Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Int32Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n","Int32Array.prototype.byteLength":"\nInt32Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Int32Array( 5 );\n    > arr.byteLength\n    20\n\n","Int32Array.prototype.byteOffset":"\nInt32Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Int32Array( 5 );\n    > arr.byteOffset\n    0\n\n","Int32Array.prototype.BYTES_PER_ELEMENT":"\nInt32Array.prototype.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > var arr = new Int32Array( 5 );\n    > arr.BYTES_PER_ELEMENT\n    4\n\n","Int32Array.prototype.length":"\nInt32Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Int32Array( 5 );\n    > arr.length\n    5\n\n","Int32Array.prototype.copyWithin":"\nInt32Array.prototype.copyWithin( target, start[, end] )\n    Copies a sequence of elements within the array starting at `start` and\n    ending at `end` (non-inclusive) to the position starting at `target`.\n\n    Parameters\n    ----------\n    target: integer\n        Target start index position.\n\n    start: integer\n        Source start index position.\n\n    end: integer (optional)\n        Source end index position. Default: out.length.\n\n    Returns\n    -------\n    out: Int32Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2, 3, 4, 5 ] );\n    > arr.copyWithin( 3, 0, 2 );\n    > arr[ 3 ]\n    1\n    > arr[ 4 ]\n    2\n\n","Int32Array.prototype.entries":"\nInt32Array.prototype.entries()\n    Returns an iterator for iterating over array key-value pairs.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array key-value pairs.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2 ] );\n    > it = arr.entries();\n    > it.next().value\n    [ 0, 1 ]\n    > it.next().value\n    [ 1, 2 ]\n    > it.next().done\n    true\n\n","Int32Array.prototype.every":"\nInt32Array.prototype.every( predicate[, thisArg] )\n    Tests whether all array elements pass a test implemented by a predicate\n    function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, an array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether all array elements pass.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2 ] );\n    > function predicate( v ) { return ( v <= 1 ); };\n    > arr.every( predicate )\n    false\n\n","Int32Array.prototype.fill":"\nInt32Array.prototype.fill( value[, start[, end]] )\n    Fills an array from a start index to an end index (non-inclusive) with a\n    provided value.\n\n    Parameters\n    ----------\n    value: number\n        Fill value.\n\n    start: integer (optional)\n        Start index. If less than zero, the start index is resolved relative to\n        the last array element. Default: 0.\n\n    end: integer (optional)\n        End index (non-inclusive). If less than zero, the end index is resolved\n        relative to the last array element. Default: out.length.\n\n    Returns\n    -------\n    out: Int32Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2 ] );\n    > arr.fill( 3 );\n    > arr[ 0 ]\n    3\n    > arr[ 1 ]\n    3\n\n","Int32Array.prototype.filter":"\nInt32Array.prototype.filter( predicate[, thisArg] )\n    Creates a new array which includes those elements for which a predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    If a predicate function does not return a truthy value for any array\n    element, the method returns `null`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which filters array elements. If a predicate function\n        returns a truthy value, an array element is included in the output\n        array; otherwise, an array element is not included in the output array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Int32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int32Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 1 ); };\n    > var arr2 = arr1.filter( predicate );\n    > arr2.length\n    2\n\n","Int32Array.prototype.find":"\nInt32Array.prototype.find( predicate[, thisArg] )\n    Returns the first array element for which a provided predicate function\n    returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `undefined`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    value: number|undefined\n        Array element.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 2 ); };\n    > var v = arr.find( predicate )\n    3\n\n","Int32Array.prototype.findIndex":"\nInt32Array.prototype.findIndex( predicate[, thisArg] )\n    Returns the index of the first array element for which a provided predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `-1`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 2 ); };\n    > var idx = arr.findIndex( predicate )\n    2\n\n","Int32Array.prototype.forEach":"\nInt32Array.prototype.forEach( fcn[, thisArg] )\n    Invokes a callback for each array element.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to invoke for each array element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 3, 2, 1 ] );\n    > var str = ' ';\n    > function fcn( v, i ) { str += i + ':' + v + ' '; };\n    > arr.forEach( fcn );\n    > str\n    ' 0:3 1:2 2:1 '\n\n","Int32Array.prototype.includes":"\nInt32Array.prototype.includes( searchElement[, fromIndex] )\n    Returns a boolean indicating whether an array includes a search element.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether an array includes a search element.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2, 3 ] );\n    > var bool = arr.includes( 4 )\n    false\n    > bool = arr.includes( 3 )\n    true\n\n","Int32Array.prototype.indexOf":"\nInt32Array.prototype.indexOf( searchElement[, fromIndex] )\n    Returns the index of the first array element strictly equal to a search\n    element.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2, 3 ] );\n    > var idx = arr.indexOf( 4 )\n    -1\n    > idx = arr.indexOf( 3 )\n    2\n\n","Int32Array.prototype.join":"\nInt32Array.prototype.join( [separator] )\n    Serializes an array by joining all array elements as a string.\n\n    Parameters\n    ----------\n    separator: string (optional)\n        String delineating array elements. Default: ','.\n\n    Returns\n    -------\n    str: string\n        Array serialized as a string.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2, 3 ] );\n    > arr.join( '|' )\n    '1|2|3'\n\n","Int32Array.prototype.keys":"\nInt32Array.prototype.keys()\n    Returns an iterator for iterating over array keys.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array keys.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2 ] );\n    > it = arr.keys();\n    > it.next().value\n    0\n    > it.next().value\n    1\n    > it.next().done\n    true\n\n","Int32Array.prototype.lastIndexOf":"\nInt32Array.prototype.lastIndexOf( searchElement[, fromIndex] )\n    Returns the index of the last array element strictly equal to a search\n    element.\n\n    The method iterates from the last array element to the first array element.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: -1.\n\n    Returns\n    -------\n    idx: integer\n        array index.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 0, 2, 0, 1 ] );\n    > var idx = arr.lastIndexOf( 3 )\n    -1\n    > idx = arr.lastIndexOf( 0 )\n    3\n\n","Int32Array.prototype.map":"\nInt32Array.prototype.map( fcn[, thisArg] )\n    Maps each array element to an element in a new typed array.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function which maps array elements to elements in the new array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Int32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int32Array( [ 1, 2, 3 ] );\n    > function fcn( v ) { return v * 2; };\n    > var arr2 = arr1.map( fcn );\n    <Int32Array>[ 2, 4, 6 ]\n\n","Int32Array.prototype.reduce":"\nInt32Array.prototype.reduce( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the first array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the first array element as the first argument and the second array\n    element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2, 3 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduce( fcn, 0 )\n    14\n\n","Int32Array.prototype.reduceRight":"\nInt32Array.prototype.reduceRight( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result, iterating from right to left.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the last array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the last array element as the first argument and the second-to-last\n    array element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2, 3 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduceRight( fcn, 0 )\n    14\n\n","Int32Array.prototype.reverse":"\nInt32Array.prototype.reverse()\n    Reverses an array *in-place*.\n\n    This method mutates the array on which the method is invoked.\n\n    Returns\n    -------\n    out: Int32Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2, 3 ] )\n    <Int32Array>[ 1, 2, 3 ]\n    > arr.reverse()\n    <Int32Array>[ 3, 2, 1 ]\n\n","Int32Array.prototype.set":"\nInt32Array.prototype.set( arr[, offset] )\n    Sets array elements.\n\n    Parameters\n    ----------\n    arr: ArrayLike\n        Source array containing array values to set.\n\n    offset: integer (optional)\n        Array index at which to start writing values. Default: 0.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2, 3 ] );\n    > arr.set( [ 4, 4 ], 1 );\n    > arr[ 1 ]\n    4\n    > arr[ 2 ]\n    4\n\n","Int32Array.prototype.slice":"\nInt32Array.prototype.slice( [begin[, end]] )\n    Copies array elements to a new array with the same underlying data type as\n    the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns `null`.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Int32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int32Array( [ 1, 2, 3 ] );\n    > var arr2 = arr1.slice( 1 );\n    > arr2.length\n    2\n    > arr2[ 0 ]\n    1\n    > arr2[ 1 ]\n    2\n\n","Int32Array.prototype.some":"\nInt32Array.prototype.some( predicate[, thisArg] )\n    Tests whether at least one array element passes a test implemented by a\n    predicate function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, a array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether at least one array element passes.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2 ] );\n    > function predicate( v ) { return ( v > 1 ); };\n    > arr.some( predicate )\n    true\n\n","Int32Array.prototype.sort":"\nInt32Array.prototype.sort( [compareFunction] )\n    Sorts an array *in-place*.\n\n    The comparison function is provided two array elements per invocation: `a`\n    and `b`.\n\n    The comparison function return value determines the sort order as follows:\n\n    - If the comparison function returns a value less than zero, then the method\n    sorts `a` to an index lower than `b` (i.e., `a` should come *before* `b`).\n\n    - If the comparison function returns a value greater than zero, then the\n    method sorts `a` to an index higher than `b` (i.e., `b` should come *before*\n    `a`).\n\n    - If the comparison function returns zero, then the relative order of `a`\n    and `b` should remain unchanged.\n\n    This method mutates the array on which the method is invoked.\n\n    Parameters\n    ----------\n    compareFunction: Function (optional)\n        Function which specifies the sort order. The default sort order is\n        ascending order.\n\n    Returns\n    -------\n    out: Int32Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2, 0, 2, 1 ] );\n    > arr.sort()\n    <Int32Array>[ 0, 1, 1, 2, 2 ]\n\n","Int32Array.prototype.subarray":"\nInt32Array.prototype.subarray( [begin[, end]] )\n    Creates a new typed array over the same underlying ArrayBuffer and with the\n    same underlying data type as the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns an empty typed array.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Int32Array\n        A new typed array view.\n\n    Examples\n    --------\n    > var arr1 = new Int32Array( [ 1, 2, 3, 4, 5 ] );\n    > var arr2 = arr1.subarray( 2 )\n    <Int32Array>[ 3, 4, 5 ]\n\n","Int32Array.prototype.toLocaleString":"\nInt32Array.prototype.toLocaleString( [locales[, options]] )\n    Serializes an array as a locale-specific string.\n\n    Parameters\n    ----------\n    locales: string|Array<string> (optional)\n        A BCP 47 language tag, or an array of such tags.\n\n    options: Object (optional)\n        Options.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2, 3 ] );\n    > arr.toLocaleString()\n    '1,2,3'\n\n","Int32Array.prototype.toString":"\nInt32Array.prototype.toString()\n    Serializes an array as a string.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2, 3 ] );\n    > arr.toString()\n    '1,2,3'\n\n","Int32Array.prototype.values":"\nInt32Array.prototype.values()\n    Returns an iterator for iterating over array elements.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array elements.\n\n    Examples\n    --------\n    > var arr = new Int32Array( [ 1, 2 ] );\n    > it = arr.values();\n    > it.next().value\n    1\n    > it.next().value\n    2\n    > it.next().done\n    true\n\n\n    See Also\n    --------\n    ArrayBuffer, Float32Array, Float64Array, Int16Array, Int8Array, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray\n","IS_BIG_ENDIAN":"\nIS_BIG_ENDIAN\n    Boolean indicating if the environment is big endian.\n\n    Examples\n    --------\n    > IS_BIG_ENDIAN\n    <boolean>\n\n    See Also\n    --------\n    IS_LITTLE_ENDIAN\n","IS_BROWSER":"\nIS_BROWSER\n    Boolean indicating if the runtime is a web browser.\n\n    Examples\n    --------\n    > IS_BROWSER\n    <boolean>\n\n","IS_DARWIN":"\nIS_DARWIN\n    Boolean indicating if the current process is running on Darwin.\n\n    Examples\n    --------\n    > IS_DARWIN\n    <boolean>\n\n","IS_ELECTRON":"\nIS_ELECTRON\n    Boolean indicating if the runtime is Electron.\n\n    Examples\n    --------\n    > IS_ELECTRON\n    <boolean>\n\n    See Also\n    --------\n    IS_ELECTRON_MAIN, IS_ELECTRON_RENDERER\n","IS_ELECTRON_MAIN":"\nIS_ELECTRON_MAIN\n    Boolean indicating if the runtime is the main Electron process.\n\n    Examples\n    --------\n    > IS_ELECTRON_MAIN\n    <boolean>\n\n    See Also\n    --------\n    IS_ELECTRON, IS_ELECTRON_RENDERER\n","IS_ELECTRON_RENDERER":"\nIS_ELECTRON_RENDERER\n    Boolean indicating if the runtime is the Electron renderer process.\n\n    Examples\n    --------\n    > IS_ELECTRON_RENDERER\n    <boolean>\n\n    See Also\n    --------\n    IS_ELECTRON, IS_ELECTRON_MAIN\n","IS_LITTLE_ENDIAN":"\nIS_LITTLE_ENDIAN\n    Boolean indicating if the environment is little endian.\n\n    Examples\n    --------\n    > IS_LITTLE_ENDIAN\n    <boolean>\n\n    See Also\n    --------\n    IS_BIG_ENDIAN\n","IS_NODE":"\nIS_NODE\n    Boolean indicating if the runtime is Node.js.\n\n    Examples\n    --------\n    > IS_NODE\n    <boolean>\n\n","IS_WEB_WORKER":"\nIS_WEB_WORKER\n    Boolean indicating if the runtime is a web worker.\n\n    Examples\n    --------\n    > IS_WEB_WORKER\n    <boolean>\n\n","IS_WINDOWS":"\nIS_WINDOWS\n    Boolean indicating if the current process is running on Windows.\n\n    Examples\n    --------\n    > IS_WINDOWS\n    <boolean>\n\n","isAbsolutePath":"\nisAbsolutePath( value )\n    Tests if a value is an absolute path.\n\n    Function behavior is platform-specific. On Windows platforms, the function\n    is equal to `.win32()`. On POSIX platforms, the function is equal to\n    `.posix()`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is an absolute path.\n\n    Examples\n    --------\n    // Windows environment:\n    > var bool = isAbsolutePath( 'C:\\\\foo\\\\bar\\\\baz' )\n    true\n\n    // POSIX environment:\n    > bool = isAbsolutePath( '/foo/bar/baz' )\n    true\n\n\nisAbsolutePath.posix( value )\n    Tests if a value is a POSIX absolute path.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is a POSIX absolute path.\n\n    Examples\n    --------\n    > var bool = isAbsolutePath.posix( '/foo/bar/baz' )\n    true\n    > bool = isAbsolutePath.posix( 'foo/bar/baz' )\n    false\n\n\nisAbsolutePath.win32( value )\n    Tests if a value is a Windows absolute path.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is a Windows absolute path.\n\n    Examples\n    --------\n    > var bool = isAbsolutePath.win32( 'C:\\\\foo\\\\bar\\\\baz' )\n    true\n    > bool = isAbsolutePath.win32( 'foo\\\\bar\\\\baz' )\n    false\n\n    See Also\n    --------\n    isRelativePath\n","isAbsolutePath.posix":"\nisAbsolutePath.posix( value )\n    Tests if a value is a POSIX absolute path.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is a POSIX absolute path.\n\n    Examples\n    --------\n    > var bool = isAbsolutePath.posix( '/foo/bar/baz' )\n    true\n    > bool = isAbsolutePath.posix( 'foo/bar/baz' )\n    false\n\n","isAbsolutePath.win32":"\nisAbsolutePath.win32( value )\n    Tests if a value is a Windows absolute path.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is a Windows absolute path.\n\n    Examples\n    --------\n    > var bool = isAbsolutePath.win32( 'C:\\\\foo\\\\bar\\\\baz' )\n    true\n    > bool = isAbsolutePath.win32( 'foo\\\\bar\\\\baz' )\n    false\n\n    See Also\n    --------\n    isRelativePath\n","isAccessorProperty":"\nisAccessorProperty( value, property )\n    Tests if an object's own property has an accessor descriptor.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object's own property has an accessor\n        descriptor.\n\n    Examples\n    --------\n    > var obj = { 'boop': true };\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = false;\n    > desc.get = function getter() { return 'beep'; };\n    > defineProperty( obj, 'beep', desc );\n    > var bool = isAccessorProperty( obj, 'boop' )\n    false\n    > bool = isAccessorProperty( obj, 'beep' )\n    true\n\n    See Also\n    --------\n    hasOwnProp, isAccessorPropertyIn, isDataProperty\n","isAccessorPropertyIn":"\nisAccessorPropertyIn( value, property )\n    Tests if an object's own or inherited property has an accessor descriptor.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object's own or inherited property has an\n        accessor descriptor.\n\n    Examples\n    --------\n    > var obj = { 'boop': true };\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = false;\n    > desc.get = function getter() { return 'beep'; };\n    > defineProperty( obj, 'beep', desc );\n    > var bool = isAccessorPropertyIn( obj, 'boop' )\n    false\n    > bool = isAccessorPropertyIn( obj, 'beep' )\n    true\n\n    See Also\n    --------\n    hasProp, isAccessorProperty, isDataPropertyIn\n","isAlphagram":"\nisAlphagram( value )\n    Tests if a value is an alphagram (i.e., a sequence of characters arranged in\n    alphabetical order).\n\n    The function first checks that an input value is a string before validating\n    that the value is an alphagram. For non-string values, the function returns\n    `false`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an alphagram.\n\n    Examples\n    --------\n    > var out = isAlphagram( 'beep' )\n    true\n    > out = isAlphagram( 'zba' )\n    false\n    > out = isAlphagram( '' )\n    false\n\n    See Also\n    --------\n    isAnagram\n","isAlphaNumeric":"\nisAlphaNumeric( str )\n    Tests whether a string contains only alphanumeric characters.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a string contains only alphanumeric\n        characters.\n\n    Examples\n    --------\n    > var bool = isAlphaNumeric( 'abc0123456789' )\n    true\n    > bool = isAlphaNumeric( 'abcdef' )\n    true\n    > bool = isAlphaNumeric( '0xff' )\n    true\n    > bool = isAlphaNumeric( '' )\n    false\n\n    See Also\n    --------\n    isDigitString\n","isAnagram":"\nisAnagram( str, value )\n    Tests if a value is an anagram.\n\n    Parameters\n    ----------\n    str: string\n        Comparison string.\n\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an anagram.\n\n    Examples\n    --------\n    > var str1 = 'I am a weakish speller';\n    > var str2 = 'William Shakespeare';\n    > var bool = isAnagram( str1, str2 )\n    true\n    > bool = isAnagram( 'bat', 'tabba' )\n    false\n\n    See Also\n    --------\n    isAlphagram\n","isArguments":"\nisArguments( value )\n    Tests if a value is an arguments object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an arguments object.\n\n    Examples\n    --------\n    > function foo() { return arguments; };\n    > var bool = isArguments( foo() )\n    true\n    > bool = isArguments( [] )\n    false\n\n","isArray":"\nisArray( value )\n    Tests if a value is an array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array.\n\n    Examples\n    --------\n    > var bool = isArray( [] )\n    true\n    > bool = isArray( {} )\n    false\n\n    See Also\n    --------\n    isArrayLike\n","isArrayArray":"\nisArrayArray( value )\n    Tests if a value is an array of arrays.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array of arrays.\n\n    Examples\n    --------\n    > var bool = isArrayArray( [ [], [] ] )\n    true\n    > bool = isArrayArray( [ {}, {} ] )\n    false\n    > bool = isArrayArray( [] )\n    false\n\n","isArrayBuffer":"\nisArrayBuffer( value )\n    Tests if a value is an ArrayBuffer.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an ArrayBuffer.\n\n    Examples\n    --------\n    > var bool = isArrayBuffer( new ArrayBuffer( 10 ) )\n    true\n    > bool = isArrayBuffer( [] )\n    false\n\n    See Also\n    --------\n    isSharedArrayBuffer, isTypedArray\n","isArrayLength":"\nisArrayLength( value )\n    Tests if a value is a valid array length.\n\n    A valid length property for an Array instance is any integer value on the\n    interval [0, 2^32-1].\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a valid array length.\n\n    Examples\n    --------\n    > var bool = isArrayLength( 5 )\n    true\n    > bool = isArrayLength( 2.0e200 )\n    false\n    > bool = isArrayLength( -3.14 )\n    false\n    > bool = isArrayLength( null )\n    false\n\n    See Also\n    --------\n    isArray\n","isArrayLike":"\nisArrayLike( value )\n    Tests if a value is array-like.\n\n    If provided a string, the function returns `true`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is array-like.\n\n    Examples\n    --------\n    > var bool = isArrayLike( [] )\n    true\n    > bool = isArrayLike( { 'length': 10 } )\n    true\n    > bool = isArrayLike( 'beep' )\n    true\n    > bool = isArrayLike( null )\n    false\n\n    See Also\n    --------\n    isArray, isArrayLikeObject\n","isArrayLikeObject":"\nisArrayLikeObject( value )\n    Tests if a value is an array-like object.\n\n    If provided a string, the function returns `false`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object.\n\n    Examples\n    --------\n    > var bool = isArrayLikeObject( [] )\n    true\n    > bool = isArrayLikeObject( { 'length': 10 } )\n    true\n    > bool = isArrayLikeObject( 'beep' )\n    false\n\n    See Also\n    --------\n    isArray, isArrayLike\n","isASCII":"\nisASCII( str )\n    Tests whether a character belongs to the ASCII character set and whether\n    this is true for all characters in a provided string.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a string has all ASCII characters.\n\n    Examples\n    --------\n    > var str = 'beep boop';\n    > var bool = isASCII( str )\n    true\n    > bool = isASCII( fromCodePoint( 130 ) )\n    false\n\n    See Also\n    --------\n    isString\n","isBetween":"\nisBetween( value, a, b[, left, right] )\n    Tests if a value is between two values.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    a: any\n        Left comparison value.\n\n    b: any\n        Right comparison value.\n\n    left: string (optional)\n        Indicates whether the left comparison value is inclusive. Must be either\n        'closed' or 'open'. Default: 'closed' (i.e., inclusive).\n\n    right: string (optional)\n        Indicates whether the right comparison value is inclusive. Must be\n        either 'closed' or 'open'. Default: 'closed' (i.e., inclusive).\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is between two values.\n\n    Examples\n    --------\n    > var bool = isBetween( 3.14, 3.0, 4.0 )\n    true\n    > bool = isBetween( 3.0, 3.0, 4.0 )\n    true\n    > bool = isBetween( 4.0, 3.0, 4.0 )\n    true\n    > bool = isBetween( 3.0, 3.14, 4.0 )\n    false\n    > bool = isBetween( 3.14, 3.14, 4.0, 'open', 'closed' )\n    false\n    > bool = isBetween( 3.14, 3.0, 3.14, 'closed', 'open' )\n    false\n\n    See Also\n    --------\n    isBetweenArray\n","isBetweenArray":"\nisBetweenArray( value, a, b[, left, right] )\n    Tests if a value is an array-like object where every element is between two\n    values.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    a: any\n        Left comparison value.\n\n    b: any\n        Right comparison value.\n\n    left: string (optional)\n        Indicates whether the left comparison value is inclusive. Must be either\n        'closed' or 'open'. Default: 'closed' (i.e., inclusive).\n\n    right: string (optional)\n        Indicates whether the right comparison value is inclusive. Must be\n        either 'closed' or 'open'. Default: 'closed' (i.e., inclusive).\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object where every\n        element is between two values.\n\n    Examples\n    --------\n    > var arr = [ 3.0, 3.14, 4.0 ];\n    > var bool = isBetweenArray( arr, 3.0, 4.0 )\n    true\n    > bool = isBetweenArray( arr, 3.14, 4.0 )\n    false\n    > bool = isBetweenArray( arr, 3.0, 3.14 )\n    false\n    > bool = isBetweenArray( arr, 3.0, 4.0, 'open', 'closed' )\n    false\n    > bool = isBetweenArray( arr, 3.0, 4.0, 'closed', 'open' )\n    false\n\n    See Also\n    --------\n    isBetween\n","isBinaryString":"\nisBinaryString( value )\n    Tests if a value is a binary string.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a binary string.\n\n    Examples\n    --------\n    > var bool = isBinaryString( '1000101' )\n    true\n    > bool = isBinaryString( 'beep' )\n    false\n    > bool = isBinaryString( '' )\n    false\n\n    See Also\n    --------\n    isString\n","isBoolean":"\nisBoolean( value )\n    Tests if a value is a boolean.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a boolean.\n\n    Examples\n    --------\n    > var bool = isBoolean( false )\n    true\n    > bool = isBoolean( new Boolean( false ) )\n    true\n\n\nisBoolean.isPrimitive( value )\n    Tests if a value is a boolean primitive.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a boolean primitive.\n\n    Examples\n    --------\n    > var bool = isBoolean.isPrimitive( true )\n    true\n    > bool = isBoolean.isPrimitive( false )\n    true\n    > bool = isBoolean.isPrimitive( new Boolean( true ) )\n    false\n\n\nisBoolean.isObject( value )\n    Tests if a value is a boolean object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a boolean object.\n\n    Examples\n    --------\n    > var bool = isBoolean.isObject( true )\n    false\n    > bool = isBoolean.isObject( new Boolean( false ) )\n    true\n\n","isBoolean.isPrimitive":"\nisBoolean.isPrimitive( value )\n    Tests if a value is a boolean primitive.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a boolean primitive.\n\n    Examples\n    --------\n    > var bool = isBoolean.isPrimitive( true )\n    true\n    > bool = isBoolean.isPrimitive( false )\n    true\n    > bool = isBoolean.isPrimitive( new Boolean( true ) )\n    false\n\n","isBoolean.isObject":"\nisBoolean.isObject( value )\n    Tests if a value is a boolean object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a boolean object.\n\n    Examples\n    --------\n    > var bool = isBoolean.isObject( true )\n    false\n    > bool = isBoolean.isObject( new Boolean( false ) )\n    true\n\n","isBooleanArray":"\nisBooleanArray( value )\n    Tests if a value is an array-like object of booleans.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object of booleans.\n\n    Examples\n    --------\n    > var bool = isBooleanArray( [ true, false, true ] )\n    true\n    > bool = isBooleanArray( [ true, 'abc', false ] )\n    false\n\n\nisBooleanArray.primitives( value )\n    Tests if a value is an array-like object containing only boolean primitives.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        boolean primitives.\n\n    Examples\n    --------\n    > var bool = isBooleanArray.primitives( [ true, false ] )\n    true\n    > bool = isBooleanArray.primitives( [ false, new Boolean( true ) ] )\n    false\n\n\nisBooleanArray.objects( value )\n    Tests if a value is an array-like object containing only Boolean objects.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        Boolean objects.\n\n    Examples\n    --------\n    > var bool = isBooleanArray.objects( [ new Boolean( false ), true ] )\n    false\n    > bool = isBooleanArray.objects( [ new Boolean( false ), new Boolean( true ) ] )\n    true\n\n","isBooleanArray.primitives":"\nisBooleanArray.primitives( value )\n    Tests if a value is an array-like object containing only boolean primitives.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        boolean primitives.\n\n    Examples\n    --------\n    > var bool = isBooleanArray.primitives( [ true, false ] )\n    true\n    > bool = isBooleanArray.primitives( [ false, new Boolean( true ) ] )\n    false\n\n","isBooleanArray.objects":"\nisBooleanArray.objects( value )\n    Tests if a value is an array-like object containing only Boolean objects.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        Boolean objects.\n\n    Examples\n    --------\n    > var bool = isBooleanArray.objects( [ new Boolean( false ), true ] )\n    false\n    > bool = isBooleanArray.objects( [ new Boolean( false ), new Boolean( true ) ] )\n    true\n\n","isBoxedPrimitive":"\nisBoxedPrimitive( value )\n    Tests if a value is a JavaScript boxed primitive.\n\n    Boxed primitive objects can be created with one of the following:\n\n    - new Boolean()\n    - new Number()\n    - new String()\n    - Object( Symbol() ) (ES6/ES2015)\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a JavaScript boxed primitive.\n\n    Examples\n    --------\n    > var bool = isBoxedPrimitive( new Boolean( false ) )\n    true\n    > bool = isBoxedPrimitive( true )\n    false\n\n    See Also\n    --------\n    isPrimitive\n","isBuffer":"\nisBuffer( value )\n    Tests if a value is a Buffer instance.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a Buffer instance.\n\n    Examples\n    --------\n    > var bool = isBuffer( new Buffer( 'beep' ) )\n    true\n    > bool = isBuffer( new Buffer( [ 1, 2, 3, 4 ] ) )\n    true\n    > bool = isBuffer( {} )\n    false\n    > bool = isBuffer( [] )\n    false\n\n","isCapitalized":"\nisCapitalized( value )\n    Tests if a value is a string having an uppercase first character.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a string with an uppercase first\n        character.\n\n    Examples\n    --------\n    > var bool = isCapitalized( 'Hello' )\n    true\n    > bool = isCapitalized( 'world' )\n    false\n\n    See Also\n    --------\n    isString\n","isCentrosymmetricMatrix":"\nisCentrosymmetricMatrix( value )\n    Tests if a value is a matrix which is symmetric about its center.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a centrosymmetric matrix.\n\n    Examples\n    --------\n    > var mat = ndarray( 'generic', 2 );\n    > var M = mat( [ 2, 1, 1, 2 ], [ 2, 2 ], [ 2, 1 ], 0, 'row-major' );\n    > var bool = isCentrosymmetricMatrix( M )\n    true\n    > bool = isCentrosymmetricMatrix( [ 1, 2, 3, 4 ] )\n    false\n    > bool = isCentrosymmetricMatrix( 3.14 )\n    false\n    > bool = isCentrosymmetricMatrix( {} )\n    false\n\n    See Also\n    --------\n    isMatrixLike, isSquareMatrix, isSymmetricMatrix\n","isCircular":"\nisCircular( value )\n    Tests if an object-like value contains a circular reference.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether an object-like value contains a circular\n        reference.\n\n    Examples\n    --------\n    > var obj = { 'beep': 'boop' };\n    > obj.self = obj;\n    > var bool = isCircular( obj )\n    true\n    > bool = isCircular( {} )\n    false\n    > bool = isCircular( null )\n    false\n\n    See Also\n    --------\n    isCircularArray, isCircularPlainObject\n","isCircularArray":"\nisCircularArray( value )\n    Tests if a value is an array containing a circular reference.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array containing a\n        circular reference.\n\n    Examples\n    --------\n    > var arr = [ 1, 2, 3 ];\n    > arr.push( arr );\n    > var bool = isCircularArray( arr )\n    true\n    > bool = isCircularArray( [] )\n    false\n    > bool = isCircularArray( null )\n    false\n\n    See Also\n    --------\n    isCircular, isCircularPlainObject\n","isCircularPlainObject":"\nisCircularPlainObject( value )\n    Tests if a value is a plain object containing a circular reference.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a plain object containing a\n        circular reference.\n\n    Examples\n    --------\n    > var obj = { 'beep': 'boop' };\n    > obj.self = obj;\n    > var bool = isCircularPlainObject( obj )\n    true\n    > bool = isCircularPlainObject( {} )\n    false\n    > bool = isCircularPlainObject( null )\n    false\n\n    See Also\n    --------\n    isCircular, isCircularArray\n","isCollection":"\nisCollection( value )\n    Tests if a value is a collection.\n\n    A collection is defined as an array, typed array, or an array-like object\n    (excluding strings and functions).\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a collection.\n\n    Examples\n    --------\n    > var bool = isCollection( [] )\n    true\n    > bool = isCollection( { 'length': 0 } )\n    true\n    > bool = isCollection( {} )\n    false\n\n    See Also\n    --------\n    isArrayLike\n","isComplex":"\nisComplex( value )\n    Tests if a value is a 64-bit or 128-bit complex number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a 64-bit or 128-bit complex\n        number.\n\n    Examples\n    --------\n    > var bool = isComplex( new Complex64( 2.0, 2.0 ) )\n    true\n    > bool = isComplex( new Complex128( 3.0, 1.0 ) )\n    true\n    > bool = isComplex( 3.14 )\n    false\n    > bool = isComplex( {} )\n    false\n\n    See Also\n    --------\n    isComplex64, isComplex128\n","isComplex64":"\nisComplex64( value )\n    Tests if a value is a 64-bit complex number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a 64-bit complex number.\n\n    Examples\n    --------\n    > var bool = isComplex64( new Complex64( 2.0, 2.0 ) )\n    true\n    > bool = isComplex64( new Complex128( 3.0, 1.0 ) )\n    false\n    > bool = isComplex64( 3.14 )\n    false\n    > bool = isComplex64( {} )\n    false\n\n    See Also\n    --------\n    isComplex, isComplex128\n","isComplex64Array":"\nisComplex64Array( value )\n    Tests if a value is a Complex64Array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a Complex64Array.\n\n    Examples\n    --------\n    > var bool = isComplex64Array( new Complex64Array( 10 ) )\n    true\n    > bool = isComplex64Array( [] )\n    false\n\n    See Also\n    --------\n    isComplex, isComplex64, isComplex128Array, isComplexTypedArray\n","isComplex128":"\nisComplex128( value )\n    Tests if a value is a 128-bit complex number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a 128-bit complex number.\n\n    Examples\n    --------\n    > var bool = isComplex128( new Complex128( 3.0, 1.0 ) )\n    true\n    > bool = isComplex128( new Complex64( 2.0, 2.0 ) )\n    false\n    > bool = isComplex128( 3.14 )\n    false\n    > bool = isComplex128( {} )\n    false\n\n    See Also\n    --------\n    isComplex, isComplex64\n","isComplex128Array":"\nisComplex128Array( value )\n    Tests if a value is a Complex128Array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a Complex128Array.\n\n    Examples\n    --------\n    > var bool = isComplex128Array( new Complex128Array( 10 ) )\n    true\n    > bool = isComplex128Array( [] )\n    false\n\n    See Also\n    --------\n    isComplex, isComplex128, isComplex64Array, isComplexTypedArray\n","isComplexLike":"\nisComplexLike( value )\n    Tests if a value is a complex number-like object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a complex number-like object.\n\n    Examples\n    --------\n    > var bool = isComplexLike( new Complex64( 2.0, 2.0 ) )\n    true\n    > bool = isComplexLike( new Complex128( 3.0, 1.0 ) )\n    true\n    > bool = isComplexLike( 3.14 )\n    false\n    > bool = isComplexLike( {} )\n    false\n\n    See Also\n    --------\n    isComplex, isComplex64, isComplex128\n","isComplexTypedArray":"\nisComplexTypedArray( value )\n    Tests if a value is a complex typed array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a complex typed array.\n\n    Examples\n    --------\n    > var bool = isComplexTypedArray( new Complex64Array( 10 ) )\n    true\n\n    See Also\n    --------\n    isComplex, isComplex64Array, isComplex128Array\n","isConfigurableProperty":"\nisConfigurableProperty( value, property )\n    Tests if an object's own property is configurable.\n\n    A property is configurable if the property may be deleted or its descriptor\n    may be changed.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object's own property is configurable.\n\n    Examples\n    --------\n    > var obj = { 'boop': true };\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = true;\n    > desc.writable = true;\n    > desc.value = true;\n    > defineProperty( obj, 'beep', desc );\n    > var bool = isConfigurableProperty( obj, 'boop' )\n    true\n    > bool = isConfigurableProperty( obj, 'beep' )\n    false\n\n    See Also\n    --------\n    isConfigurablePropertyIn, isEnumerableProperty, isReadableProperty, isWritableProperty\n","isConfigurablePropertyIn":"\nisConfigurablePropertyIn( value, property )\n    Tests if an object's own or inherited property is configurable.\n\n    A property is configurable if the property may be deleted or its descriptor\n    may be changed.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object's own or inherited property is\n        configurable.\n\n    Examples\n    --------\n    > var obj = { 'boop': true };\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = true;\n    > desc.writable = true;\n    > desc.value = true;\n    > defineProperty( obj, 'beep', desc );\n    > var bool = isConfigurablePropertyIn( obj, 'boop' )\n    true\n    > bool = isConfigurablePropertyIn( obj, 'beep' )\n    false\n\n    See Also\n    --------\n    isConfigurableProperty, isEnumerablePropertyIn, isReadablePropertyIn, isWritablePropertyIn\n","isDataProperty":"\nisDataProperty( value, property )\n    Tests if an object's own property has a data descriptor.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object's own property has a data descriptor.\n\n    Examples\n    --------\n    > var obj = { 'boop': true };\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = false;\n    > desc.get = function getter() { return 'beep'; };\n    > defineProperty( obj, 'beep', desc );\n    > var bool = isDataProperty( obj, 'boop' )\n    true\n    > bool = isDataProperty( obj, 'beep' )\n    false\n\n    See Also\n    --------\n    hasOwnProp, isAccessorProperty, isDataPropertyIn\n","isDataPropertyIn":"\nisDataPropertyIn( value, property )\n    Tests if an object's own or inherited property has a data descriptor.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object's own or inherited property has a data\n        descriptor.\n\n    Examples\n    --------\n    > var obj = { 'boop': true };\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = false;\n    > desc.get = function getter() { return 'beep'; };\n    > defineProperty( obj, 'beep', desc );\n    > var bool = isDataPropertyIn( obj, 'boop' )\n    true\n    > bool = isDataPropertyIn( obj, 'beep' )\n    false\n\n    See Also\n    --------\n    hasProp, isAccessorPropertyIn, isDataProperty\n","isDateObject":"\nisDateObject( value )\n    Tests if a value is a Date object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a Date object.\n\n    Examples\n    --------\n    > var bool = isDateObject( new Date() )\n    true\n    > bool = isDateObject( '2017-01-01' )\n    false\n\n","isDigitString":"\nisDigitString( str )\n    Tests whether a string contains only numeric digits.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a string contains only numeric digits.\n\n    Examples\n    --------\n    > var bool = isDigitString( '0123456789' )\n    true\n    > bool = isDigitString( 'abcdef' )\n    false\n    > bool = isDigitString( '0xff' )\n    false\n    > bool = isDigitString( '' )\n    false\n\n    See Also\n    --------\n    isHexString, isString\n","isEmailAddress":"\nisEmailAddress( value )\n    Tests if a value is an email address.\n\n    Validation is not rigorous. *9* RFCs relate to email addresses, and\n    accounting for all of them is a fool's errand. The function performs the\n    simplest validation; i.e., requiring at least one `@` symbol.\n\n    For rigorous validation, send a confirmation email. If the email bounces,\n    consider the email invalid.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an email address.\n\n    Examples\n    --------\n    > var bool = isEmailAddress( 'beep@boop.com' )\n    true\n    > bool = isEmailAddress( 'beep' )\n    false\n    > bool = isEmailAddress( null )\n    false\n\n","isEmptyArray":"\nisEmptyArray( value )\n    Tests if a value is an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is an empty array.\n\n    Examples\n    --------\n    > var bool = isEmptyArray( [] )\n    true\n    > bool = isEmptyArray( [ 1, 2, 3 ] )\n    false\n    > bool = isEmptyArray( {} )\n    false\n\n    See Also\n    --------\n    isArray\n","isEmptyObject":"\nisEmptyObject( value )\n    Tests if a value is an empty object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is an empty object.\n\n    Examples\n    --------\n    > var bool = isEmptyObject( {} )\n    true\n    > bool = isEmptyObject( { 'beep': 'boop' } )\n    false\n    > bool = isEmptyObject( [] )\n    false\n\n    See Also\n    --------\n    isObject, isPlainObject\n","isEmptyString":"\nisEmptyString( value )\n    Tests if a value is an empty string.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is an empty string.\n\n    Examples\n    --------\n    > var bool = isEmptyString( '' )\n    true\n    > bool = isEmptyString( new String( '' ) )\n    true\n    > bool = isEmptyString( 'beep' )\n    false\n    > bool = isEmptyString( [] )\n    false\n\n\nisEmptyString.isPrimitive( value )\n    Tests if a value is an empty string primitive.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an empty string primitive.\n\n    Examples\n    --------\n    > var bool = isEmptyString.isPrimitive( '' )\n    true\n    > bool = isEmptyString.isPrimitive( new String( '' ) )\n    false\n\n\nisEmptyString.isObject( value )\n    Tests if a value is an empty `String` object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an empty `String` object.\n\n    Examples\n    --------\n    > var bool = isEmptyString.isObject( new String( '' ) )\n    true\n    > bool = isEmptyString.isObject( '' )\n    false\n\n    See Also\n    --------\n    isString\n","isEmptyString.isPrimitive":"\nisEmptyString.isPrimitive( value )\n    Tests if a value is an empty string primitive.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an empty string primitive.\n\n    Examples\n    --------\n    > var bool = isEmptyString.isPrimitive( '' )\n    true\n    > bool = isEmptyString.isPrimitive( new String( '' ) )\n    false\n\n","isEmptyString.isObject":"\nisEmptyString.isObject( value )\n    Tests if a value is an empty `String` object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an empty `String` object.\n\n    Examples\n    --------\n    > var bool = isEmptyString.isObject( new String( '' ) )\n    true\n    > bool = isEmptyString.isObject( '' )\n    false\n\n    See Also\n    --------\n    isString\n","isEnumerableProperty":"\nisEnumerableProperty( value, property )\n    Tests if an object's own property is enumerable.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object's own property is enumerable.\n\n    Examples\n    --------\n    > var beep = { 'boop': true };\n    > var bool = isEnumerableProperty( beep, 'boop' )\n    true\n    > bool = isEnumerableProperty( beep, 'hasOwnProperty' )\n    false\n\n    See Also\n    --------\n    isConfigurableProperty, isEnumerablePropertyIn, isNonEnumerableProperty, isReadableProperty, isWritableProperty\n","isEnumerablePropertyIn":"\nisEnumerablePropertyIn( value, property )\n    Tests if an object's own or inherited property is enumerable.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object's own or inherited property is\n        enumerable.\n\n    Examples\n    --------\n    > var obj = { 'boop': true };\n    > var desc = {};\n    > desc.configurable = true;\n    > desc.enumerable = false;\n    > desc.writable = true;\n    > desc.value = true;\n    > defineProperty( obj, 'beep', desc );\n    > var bool = isEnumerablePropertyIn( obj, 'boop' )\n    true\n    > bool = isEnumerablePropertyIn( obj, 'beep' )\n    false\n\n    See Also\n    --------\n    isConfigurablePropertyIn, isEnumerableProperty, isNonEnumerablePropertyIn, isReadablePropertyIn, isWritablePropertyIn\n","isError":"\nisError( value )\n    Tests if a value is an Error object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an Error object.\n\n    Examples\n    --------\n    > var bool = isError( new Error( 'beep' ) )\n    true\n    > bool = isError( {} )\n    false\n\n","isEvalError":"\nisEvalError( value )\n    Tests if a value is an EvalError object.\n\n    This function should *not* be considered robust. While the function should\n    always return `true` if provided an EvalError (or a descendant) object,\n    false positives may occur due to the fact that the EvalError constructor\n    inherits from Error and has no internal class of its own. Hence, EvalError\n    impersonation is possible.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an EvalError object.\n\n    Examples\n    --------\n    > var bool = isEvalError( new EvalError( 'beep' ) )\n    true\n    > bool = isEvalError( {} )\n    false\n\n    See Also\n    --------\n    isError\n","isEven":"\nisEven( value )\n    Tests if a value is an even number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether is an even number.\n\n    Examples\n    --------\n    > var bool = isEven( 4.0 )\n    true\n    > bool = isEven( new Number( 4.0 ) )\n    true\n    > bool = isEven( 3.0 )\n    false\n    > bool = isEven( -3.14 )\n    false\n    > bool = isEven( null )\n    false\n\n\nisEven.isPrimitive( value )\n    Tests if a value is a number primitive that is an even number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive that is an even\n        number.\n\n    Examples\n    --------\n    > var bool = isEven.isPrimitive( -4.0 )\n    true\n    > bool = isEven.isPrimitive( new Number( -4.0 ) )\n    false\n\n\nisEven.isObject( value )\n    Tests if a value is a number object that is an even number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object that is an even\n        number.\n\n    Examples\n    --------\n    > var bool = isEven.isObject( 4.0 )\n    false\n    > bool = isEven.isObject( new Number( 4.0 ) )\n    true\n\n    See Also\n    --------\n    isOdd\n","isEven.isPrimitive":"\nisEven.isPrimitive( value )\n    Tests if a value is a number primitive that is an even number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive that is an even\n        number.\n\n    Examples\n    --------\n    > var bool = isEven.isPrimitive( -4.0 )\n    true\n    > bool = isEven.isPrimitive( new Number( -4.0 ) )\n    false\n\n","isEven.isObject":"\nisEven.isObject( value )\n    Tests if a value is a number object that is an even number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object that is an even\n        number.\n\n    Examples\n    --------\n    > var bool = isEven.isObject( 4.0 )\n    false\n    > bool = isEven.isObject( new Number( 4.0 ) )\n    true\n\n    See Also\n    --------\n    isOdd\n","isFalsy":"\nisFalsy( value )\n    Tests if a value is a value which translates to `false` when evaluated in a\n    boolean context.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is falsy.\n\n    Examples\n    --------\n    > var bool = isFalsy( false )\n    true\n    > bool = isFalsy( '' )\n    true\n    > bool = isFalsy( 0 )\n    true\n    > bool = isFalsy( null )\n    true\n    > bool = isFalsy( void 0 )\n    true\n    > bool = isFalsy( NaN )\n    true\n    > bool = isFalsy( {} )\n    false\n    > bool = isFalsy( [] )\n    false\n\n    See Also\n    --------\n    isFalsyArray, isTruthy\n","isFalsyArray":"\nisFalsyArray( value )\n    Tests if a value is an array-like object containing only falsy values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only falsy values.\n\n    Examples\n    --------\n    > var bool = isFalsyArray( [ null, '' ] )\n    true\n    > bool = isFalsyArray( [ {}, [] ] )\n    false\n    > bool = isFalsyArray( [] )\n    false\n\n    See Also\n    --------\n    isFalsy, isTruthyArray\n","isFinite":"\nisFinite( value )\n    Tests if a value is a finite number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a finite number.\n\n    Examples\n    --------\n    > var bool = isFinite( 5.0 )\n    true\n    > bool = isFinite( new Number( 5.0 ) )\n    true\n    > bool = isFinite( 1.0/0.0 )\n    false\n    > bool = isFinite( null )\n    false\n\n\nisFinite.isPrimitive( value )\n    Tests if a value is a number primitive having a finite value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number primitive having a finite\n        value.\n\n    Examples\n    --------\n    > var bool = isFinite.isPrimitive( -3.0 )\n    true\n    > bool = isFinite.isPrimitive( new Number( -3.0 ) )\n    false\n\n\nisFinite.isObject( value )\n    Tests if a value is a number object having a finite value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number object having a finite\n        value.\n\n    Examples\n    --------\n    > var bool = isFinite.isObject( 3.0 )\n    false\n    > bool = isFinite.isObject( new Number( 3.0 ) )\n    true\n\n    See Also\n    --------\n    isFiniteArray, isInfinite\n","isFinite.isPrimitive":"\nisFinite.isPrimitive( value )\n    Tests if a value is a number primitive having a finite value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number primitive having a finite\n        value.\n\n    Examples\n    --------\n    > var bool = isFinite.isPrimitive( -3.0 )\n    true\n    > bool = isFinite.isPrimitive( new Number( -3.0 ) )\n    false\n\n","isFinite.isObject":"\nisFinite.isObject( value )\n    Tests if a value is a number object having a finite value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number object having a finite\n        value.\n\n    Examples\n    --------\n    > var bool = isFinite.isObject( 3.0 )\n    false\n    > bool = isFinite.isObject( new Number( 3.0 ) )\n    true\n\n    See Also\n    --------\n    isFiniteArray, isInfinite\n","isFiniteArray":"\nisFiniteArray( value )\n    Tests if a value is an array-like object of finite numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object of finite\n        numbers.\n\n    Examples\n    --------\n    > var bool = isFiniteArray( [ -3.0, new Number(0.0), 2.0 ] )\n    true\n    > bool = isFiniteArray( [ -3.0, 1.0/0.0 ] )\n    false\n\n\nisFiniteArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive finite\n    numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only primitive finite numbers.\n\n    Examples\n    --------\n    > var bool = isFiniteArray.primitives( [ -1.0, 10.0 ] )\n    true\n    > bool = isFiniteArray.primitives( [ -1.0, 0.0, 5.0 ] )\n    true\n    > bool = isFiniteArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n\nisFiniteArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having finite values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only number objects having finite values.\n\n    Examples\n    --------\n    > var bool = isFiniteArray.objects( [ new Number(1.0), new Number(3.0) ] )\n    true\n    > bool = isFiniteArray.objects( [ -1.0, 0.0, 3.0 ] )\n    false\n    > bool = isFiniteArray.objects( [ 3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isFinite, isInfinite\n","isFiniteArray.primitives":"\nisFiniteArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive finite\n    numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only primitive finite numbers.\n\n    Examples\n    --------\n    > var bool = isFiniteArray.primitives( [ -1.0, 10.0 ] )\n    true\n    > bool = isFiniteArray.primitives( [ -1.0, 0.0, 5.0 ] )\n    true\n    > bool = isFiniteArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n","isFiniteArray.objects":"\nisFiniteArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having finite values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only number objects having finite values.\n\n    Examples\n    --------\n    > var bool = isFiniteArray.objects( [ new Number(1.0), new Number(3.0) ] )\n    true\n    > bool = isFiniteArray.objects( [ -1.0, 0.0, 3.0 ] )\n    false\n    > bool = isFiniteArray.objects( [ 3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isFinite, isInfinite\n","isFloat32Array":"\nisFloat32Array( value )\n    Tests if a value is a Float32Array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a Float32Array.\n\n    Examples\n    --------\n    > var bool = isFloat32Array( new Float32Array( 10 ) )\n    true\n    > bool = isFloat32Array( [] )\n    false\n\n    See Also\n    --------\n    isFloat64Array\n","isFloat64Array":"\nisFloat64Array( value )\n    Tests if a value is a Float64Array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a Float64Array.\n\n    Examples\n    --------\n    > var bool = isFloat64Array( new Float64Array( 10 ) )\n    true\n    > bool = isFloat64Array( [] )\n    false\n\n    See Also\n    --------\n    isFloat32Array\n","isFunction":"\nisFunction( value )\n    Tests if a value is a function.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a function.\n\n    Examples\n    --------\n    > function beep() {};\n    > var bool = isFunction( beep )\n    true\n    > bool = isFunction( {} )\n    false\n\n","isFunctionArray":"\nisFunctionArray( value )\n    Tests if a value is an array-like object containing only functions.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        functions.\n\n    Examples\n    --------\n    > function beep() {};\n    > function boop() {};\n    > var bool = isFunctionArray( [ beep, boop ] )\n    true\n    > bool = isFunctionArray( [ {}, beep ] )\n    false\n    > bool = isFunctionArray( [] )\n    false\n\n    See Also\n    --------\n    isArray\n","isGeneratorObject":"\nisGeneratorObject( value )\n    Tests if a value is a generator object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a generator object.\n\n    Examples\n    --------\n    > function* generateID() {\n    ...     var idx = 0;\n    ...     while ( idx < idx+1 ) {\n    ...         yield idx;\n    ...         idx += 1;\n    ...     }\n    ... };\n    > var bool = isGeneratorObject( generateID() )\n    true\n    > bool = isGeneratorObject( generateID )\n    false\n    > bool = isGeneratorObject( {} )\n    false\n    > bool = isGeneratorObject( null )\n    false\n\n    See Also\n    --------\n    hasGeneratorSupport, isGeneratorObjectLike\n","isGeneratorObjectLike":"\nisGeneratorObjectLike( value )\n    Tests if a value is generator object-like.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is generator object-like.\n\n    Examples\n    --------\n    > var obj = {\n    ...     'next': function noop() {},\n    ...     'return': function noop() {},\n    ...     'throw': function noop() {}\n    ... };\n    > var bool = isGeneratorObjectLike( obj )\n    true\n    > bool = isGeneratorObjectLike( {} )\n    false\n    > bool = isGeneratorObjectLike( null )\n    false\n\n    See Also\n    --------\n    hasGeneratorSupport, isGeneratorObject\n","isHexString":"\nisHexString( str )\n    Tests whether a string contains only hexadecimal digits.\n\n    The function does not recognize `x` (as in the standard `0x` prefix).\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a string contains only hexadecimal digits.\n\n    Examples\n    --------\n    > var bool = isHexString( '0123456789abcdefABCDEF' )\n    true\n    > bool = isHexString( '0xffffff' )\n    false\n    > bool = isHexString( 'x' )\n    false\n    > bool = isHexString( '' )\n    false\n\n    See Also\n    --------\n    isString\n","isInfinite":"\nisInfinite( value )\n    Tests if a value is an infinite number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an infinite number.\n\n    Examples\n    --------\n    > var bool = isInfinite( 1.0/0.0 )\n    true\n    > bool = isInfinite( new Number( -1.0/0.0 ) )\n    true\n    > bool = isInfinite( 5.0 )\n    false\n    > bool = isInfinite( '1.0/0.0' )\n    false\n\n\nisInfinite.isPrimitive( value )\n    Tests if a value is a number primitive having an infinite value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number primitive having an\n        infinite value.\n\n    Examples\n    --------\n    > var bool = isInfinite.isPrimitive( -1.0/0.0 )\n    true\n    > bool = isInfinite.isPrimitive( new Number( -1.0/0.0 ) )\n    false\n\n\nisInfinite.isObject( value )\n    Tests if a value is a number object having an infinite value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number object having an infinite\n        value.\n\n    Examples\n    --------\n    > var bool = isInfinite.isObject( 1.0/0.0 )\n    false\n    > bool = isInfinite.isObject( new Number( 1.0/0.0 ) )\n    true\n\n    See Also\n    --------\n    isFinite\n","isInfinite.isPrimitive":"\nisInfinite.isPrimitive( value )\n    Tests if a value is a number primitive having an infinite value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number primitive having an\n        infinite value.\n\n    Examples\n    --------\n    > var bool = isInfinite.isPrimitive( -1.0/0.0 )\n    true\n    > bool = isInfinite.isPrimitive( new Number( -1.0/0.0 ) )\n    false\n\n","isInfinite.isObject":"\nisInfinite.isObject( value )\n    Tests if a value is a number object having an infinite value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number object having an infinite\n        value.\n\n    Examples\n    --------\n    > var bool = isInfinite.isObject( 1.0/0.0 )\n    false\n    > bool = isInfinite.isObject( new Number( 1.0/0.0 ) )\n    true\n\n    See Also\n    --------\n    isFinite\n","isInheritedProperty":"\nisInheritedProperty( value, property )\n    Tests if an object has an inherited property.\n\n    Value arguments other than `null` or `undefined` are coerced to objects.\n\n    Non-symbol property arguments are coerced to strings.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object has an inherited property.\n\n    Examples\n    --------\n    > var beep = { 'boop': true };\n    > var bool = isInheritedProperty( beep, 'boop' )\n    false\n    > bool = isInheritedProperty( beep, 'toString' )\n    true\n    > bool = isInheritedProperty( beep, 'bop' )\n    false\n\n    See Also\n    --------\n    hasOwnProp, hasProp\n","isInt8Array":"\nisInt8Array( value )\n    Tests if a value is an Int8Array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an Int8Array.\n\n    Examples\n    --------\n    > var bool = isInt8Array( new Int8Array( 10 ) )\n    true\n    > bool = isInt8Array( [] )\n    false\n\n    See Also\n    --------\n    isInt16Array, isInt32Array\n","isInt16Array":"\nisInt16Array( value )\n    Tests if a value is an Int16Array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an Int16Array.\n\n    Examples\n    --------\n    > var bool = isInt16Array( new Int16Array( 10 ) )\n    true\n    > bool = isInt16Array( [] )\n    false\n\n    See Also\n    --------\n    isInt32Array, isInt8Array\n","isInt32Array":"\nisInt32Array( value )\n    Tests if a value is an Int32Array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an Int32Array.\n\n    Examples\n    --------\n    > var bool = isInt32Array( new Int32Array( 10 ) )\n    true\n    > bool = isInt32Array( [] )\n    false\n\n    See Also\n    --------\n    isInt16Array, isInt8Array\n","isInteger":"\nisInteger( value )\n    Tests if a value is an integer.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an integer.\n\n    Examples\n    --------\n    > var bool = isInteger( 5.0 )\n    true\n    > bool = isInteger( new Number( 5.0 ) )\n    true\n    > bool = isInteger( -3.14 )\n    false\n    > bool = isInteger( null )\n    false\n\n\nisInteger.isPrimitive( value )\n    Tests if a value is a number primitive having an integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having an integer\n        value.\n\n    Examples\n    --------\n    > var bool = isInteger.isPrimitive( -3.0 )\n    true\n    > bool = isInteger.isPrimitive( new Number( -3.0 ) )\n    false\n\n\nisInteger.isObject( value )\n    Tests if a value is a number object having an integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having an integer\n        value.\n\n    Examples\n    --------\n    > var bool = isInteger.isObject( 3.0 )\n    false\n    > bool = isInteger.isObject( new Number( 3.0 ) )\n    true\n\n    See Also\n    --------\n    isNumber\n","isInteger.isPrimitive":"\nisInteger.isPrimitive( value )\n    Tests if a value is a number primitive having an integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having an integer\n        value.\n\n    Examples\n    --------\n    > var bool = isInteger.isPrimitive( -3.0 )\n    true\n    > bool = isInteger.isPrimitive( new Number( -3.0 ) )\n    false\n\n","isInteger.isObject":"\nisInteger.isObject( value )\n    Tests if a value is a number object having an integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having an integer\n        value.\n\n    Examples\n    --------\n    > var bool = isInteger.isObject( 3.0 )\n    false\n    > bool = isInteger.isObject( new Number( 3.0 ) )\n    true\n\n    See Also\n    --------\n    isNumber\n","isIntegerArray":"\nisIntegerArray( value )\n    Tests if a value is an array-like object of integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object of integer\n        values.\n\n    Examples\n    --------\n    > var bool = isIntegerArray( [ -3.0, new Number(0.0), 2.0 ] )\n    true\n    > bool = isIntegerArray( [ -3.0, '3.0' ] )\n    false\n\n\nisIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive integer\n    values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only primitive integer values.\n\n    Examples\n    --------\n    > var bool = isIntegerArray.primitives( [ -1.0, 10.0 ] )\n    true\n    > bool = isIntegerArray.primitives( [ -1.0, 0.0, 5.0 ] )\n    true\n    > bool = isIntegerArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n\nisIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only number objects having integer values.\n\n    Examples\n    --------\n    > var bool = isIntegerArray.objects( [ new Number(1.0), new Number(3.0) ] )\n    true\n    > bool = isIntegerArray.objects( [ -1.0, 0.0, 3.0 ] )\n    false\n    > bool = isIntegerArray.objects( [ 3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n","isIntegerArray.primitives":"\nisIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive integer\n    values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only primitive integer values.\n\n    Examples\n    --------\n    > var bool = isIntegerArray.primitives( [ -1.0, 10.0 ] )\n    true\n    > bool = isIntegerArray.primitives( [ -1.0, 0.0, 5.0 ] )\n    true\n    > bool = isIntegerArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n","isIntegerArray.objects":"\nisIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only number objects having integer values.\n\n    Examples\n    --------\n    > var bool = isIntegerArray.objects( [ new Number(1.0), new Number(3.0) ] )\n    true\n    > bool = isIntegerArray.objects( [ -1.0, 0.0, 3.0 ] )\n    false\n    > bool = isIntegerArray.objects( [ 3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n","isIterableLike":"\nisIterableLike( value )\n    Tests if a value is iterable-like.\n\n    In order to be iterable, an object must implement the @@iterator method,\n    which, when called, returns an iterator protocol-compliant object.\n\n    An iterator protocol-compliant object is an object having a `next` method\n    which adheres to the iterator protocol.\n\n    As full iterator compliance is impossible to achieve without evaluating an\n    iterator, this function checks *only* for interface compliance.\n\n    In environments lacking Symbol.iterator support, this function always\n    returns `false`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is iterable-like.\n\n    Examples\n    --------\n    > var bool = isIterableLike( [ 1, 2, 3 ] )\n    <boolean>\n    > bool = isIterableLike( {} )\n    false\n    > bool = isIterableLike( null )\n    false\n\n    See Also\n    --------\n    isIteratorLike\n","isIteratorLike":"\nisIteratorLike( value )\n    Tests if a value is iterator-like.\n\n    An iterator protocol-compliant object is an object having a `next` method\n    which adheres to the iterator protocol.\n\n    As full iterator compliance is impossible to achieve without evaluating an\n    iterator, this function checks *only* for interface compliance.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is iterator-like.\n\n    Examples\n    --------\n    > var obj = {\n    ...     'next': function noop() {}\n    ... };\n    > var bool = isIteratorLike( obj )\n    true\n    > bool = isIteratorLike( {} )\n    false\n    > bool = isIteratorLike( null )\n    false\n\n    See Also\n    --------\n    isIterableLike\n","isJSON":"\nisJSON( value )\n    Tests if a value is a parseable JSON string.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a parseable JSON string.\n\n    Examples\n    --------\n    > var bool = isJSON( '{\"a\":5}' )\n    true\n    > bool = isJSON( '{a\":5}' )\n    false\n\n","isLeapYear":"\nisLeapYear( value )\n    Tests whether a value corresponds to a leap year in the Gregorian calendar.\n\n    A leap year is defined as any year which is exactly divisible by 4, except\n    for years which are exactly divisible by 100 and not by 400. In this\n    definition, 100 corresponds to years marking a new century, and 400\n    corresponds to the length of the *leap cycle*.\n\n    If not provided any arguments, the function returns a boolean indicating\n    if the current year (according to local time) is a leap year.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value corresponds to a leap year.\n\n    Examples\n    --------\n    > var bool = isLeapYear( new Date() )\n    <boolean>\n    > bool = isLeapYear( 1996 )\n    true\n    > bool = isLeapYear( 2001 )\n    false\n\n","isLowercase":"\nisLowercase( value )\n    Tests if a value is a lowercase string.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a lowercase string.\n\n    Examples\n    --------\n    > var bool = isLowercase( 'hello' )\n    true\n    > bool = isLowercase( 'World' )\n    false\n\n    See Also\n    --------\n    isString, isUppercase\n","isMatrixLike":"\nisMatrixLike( value )\n    Tests if a value is a 2-dimensional ndarray-like object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a 2-dimensional ndarray-like\n        object.\n\n    Examples\n    --------\n    > var M = {};\n    > M.data = [ 0, 0, 0, 0 ];\n    > M.ndims = 2;\n    > M.shape = [ 2, 2 ];\n    > M.strides = [ 2, 1 ];\n    > M.offset = 0;\n    > M.order = 'row-major';\n    > M.dtype = 'generic';\n    > M.length = 4;\n    > M.flags = {};\n    > M.get = function get( i, j ) {};\n    > M.set = function set( i, j ) {};\n    > var bool = isMatrixLike( M )\n    true\n    > bool = isMatrixLike( [ 1, 2, 3, 4 ] )\n    false\n    > bool = isMatrixLike( 3.14 )\n    false\n    > bool = isMatrixLike( {} )\n    false\n\n    See Also\n    --------\n    isArray, isArrayLike, isndarrayLike, isTypedArrayLike, isVectorLike\n","isMethod":"\nisMethod( value, property )\n    Tests if an object has a specified method name.\n\n    Value arguments other than `null` or `undefined` are coerced to objects.\n\n    Property arguments are coerced to strings.\n\n    The function only searches own properties.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object has a specified method name.\n\n    Examples\n    --------\n    > var beep = { 'boop': function beep() { return 'beep'; } };\n    > var bool = isMethod( beep, 'boop' )\n    true\n    > bool = isMethod( beep, 'toString' )\n    false\n\n    See Also\n    --------\n    hasOwnProp, isFunction, isMethodIn\n","isMethodIn":"\nisMethodIn( value, property )\n    Tests if an object has a specified method name, either own or inherited.\n\n    Value arguments other than `null` or `undefined` are coerced to objects.\n\n    Non-symbol property arguments are coerced to strings.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object has a specified method name.\n\n    Examples\n    --------\n    > var beep = { 'boop': true };\n    > var bool = isMethodIn( beep, 'toString' )\n    true\n    > bool = isMethodIn( beep, 'boop' )\n    false\n    > bool = isMethodIn( beep, 'bop' )\n    false\n\n    See Also\n    --------\n    hasProp, isFunction, isMethod\n","isNamedTypedTupleLike":"\nisNamedTypedTupleLike( value )\n    Tests if a value is named typed tuple-like.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is named typed tuple-like.\n\n    Examples\n    --------\n    > var Point = namedtypedtuple( [ 'x', 'y' ] );\n    > var p = new Point();\n    > var bool = isNamedTypedTupleLike( p )\n    true\n    > bool = isNamedTypedTupleLike( [ 1, 2, 3, 4 ] )\n    false\n    > bool = isNamedTypedTupleLike( 3.14 )\n    false\n    > bool = isNamedTypedTupleLike( {} )\n    false\n\n    See Also\n    --------\n    namedtypedtuple\n","isnan":"\nisnan( value )\n    Tests if a value is NaN.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is NaN.\n\n    Examples\n    --------\n    > var bool = isnan( NaN )\n    true\n    > bool = isnan( new Number( NaN ) )\n    true\n    > bool = isnan( 3.14 )\n    false\n    > bool = isnan( null )\n    false\n\n\nisnan.isPrimitive( value )\n    Tests if a value is a NaN number primitive.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a NaN number primitive.\n\n    Examples\n    --------\n    > var bool = isnan.isPrimitive( NaN )\n    true\n    > bool = isnan.isPrimitive( 3.14 )\n    false\n    > bool = isnan.isPrimitive( new Number( NaN ) )\n    false\n\n\nisnan.isObject( value )\n    Tests if a value is a number object having a value of NaN.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a value of\n        NaN.\n\n    Examples\n    --------\n    > var bool = isnan.isObject( NaN )\n    false\n    > bool = isnan.isObject( new Number( NaN ) )\n    true\n\n    See Also\n    --------\n    isNumber\n","isnan.isPrimitive":"\nisnan.isPrimitive( value )\n    Tests if a value is a NaN number primitive.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a NaN number primitive.\n\n    Examples\n    --------\n    > var bool = isnan.isPrimitive( NaN )\n    true\n    > bool = isnan.isPrimitive( 3.14 )\n    false\n    > bool = isnan.isPrimitive( new Number( NaN ) )\n    false\n\n","isnan.isObject":"\nisnan.isObject( value )\n    Tests if a value is a number object having a value of NaN.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a value of\n        NaN.\n\n    Examples\n    --------\n    > var bool = isnan.isObject( NaN )\n    false\n    > bool = isnan.isObject( new Number( NaN ) )\n    true\n\n    See Also\n    --------\n    isNumber\n","isNaNArray":"\nisNaNArray( value )\n    Tests if a value is an array-like object containing only NaN values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        NaN values.\n\n    Examples\n    --------\n    > var bool = isNaNArray( [ NaN, NaN, NaN ] )\n    true\n    > bool = isNaNArray( [ NaN, 2 ] )\n    false\n\n\nisNaNArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive NaN\n    values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive NaN values.\n\n    Examples\n    --------\n    > var bool = isNaNArray.primitives( [ NaN, new Number( NaN ) ] )\n    false\n    > bool = isNaNArray.primitives( [ NaN, NaN, NaN ] )\n    true\n\n\nisNaNArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having NaN values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having NaN values.\n\n    Examples\n    --------\n    > var bool = isNaNArray.objects( [ new Number( NaN ), new Number( NaN ) ] )\n    true\n    > bool = isNaNArray.objects( [ NaN, new Number( NaN ), new Number( NaN ) ] )\n    false\n    > bool = isNaNArray.objects( [ NaN, NaN, NaN ] )\n    false\n\n    See Also\n    --------\n    isnan\n","isNaNArray.primitives":"\nisNaNArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive NaN\n    values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive NaN values.\n\n    Examples\n    --------\n    > var bool = isNaNArray.primitives( [ NaN, new Number( NaN ) ] )\n    false\n    > bool = isNaNArray.primitives( [ NaN, NaN, NaN ] )\n    true\n\n","isNaNArray.objects":"\nisNaNArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having NaN values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having NaN values.\n\n    Examples\n    --------\n    > var bool = isNaNArray.objects( [ new Number( NaN ), new Number( NaN ) ] )\n    true\n    > bool = isNaNArray.objects( [ NaN, new Number( NaN ), new Number( NaN ) ] )\n    false\n    > bool = isNaNArray.objects( [ NaN, NaN, NaN ] )\n    false\n\n    See Also\n    --------\n    isnan\n","isNativeFunction":"\nisNativeFunction( value )\n    Tests if a value is a native function.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a native function.\n\n    Examples\n    --------\n    > var bool = isNativeFunction( Date )\n    true\n    > function beep() {};\n    > bool = isNativeFunction( beep )\n    false\n    > bool = isNativeFunction( {} )\n    false\n\n    See Also\n    --------\n    isFunction\n","isndarrayLike":"\nisndarrayLike( value )\n    Tests if a value is ndarray-like.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is ndarray-like.\n\n    Examples\n    --------\n    > var M = {};\n    > M.data = [ 0, 0, 0, 0 ];\n    > M.ndims = 2;\n    > M.shape = [ 2, 2 ];\n    > M.strides = [ 2, 1 ];\n    > M.offset = 0;\n    > M.order = 'row-major';\n    > M.dtype = 'generic';\n    > M.length = 4;\n    > M.flags = {};\n    > M.get = function get( i, j ) {};\n    > M.set = function set( i, j ) {};\n    > var bool = isndarrayLike( M )\n    true\n    > bool = isndarrayLike( [ 1, 2, 3, 4 ] )\n    false\n    > bool = isndarrayLike( 3.14 )\n    false\n    > bool = isndarrayLike( {} )\n    false\n\n    See Also\n    --------\n    isArray, isArrayLike, isMatrixLike, isTypedArrayLike, isVectorLike\n","isNegativeInteger":"\nisNegativeInteger( value )\n    Tests if a value is a negative integer.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a negative integer.\n\n    Examples\n    --------\n    > var bool = isNegativeInteger( -5.0 )\n    true\n    > bool = isNegativeInteger( new Number( -5.0 ) )\n    true\n    > bool = isNegativeInteger( 5.0 )\n    false\n    > bool = isNegativeInteger( -3.14 )\n    false\n    > bool = isNegativeInteger( null )\n    false\n\n\nisNegativeInteger.isPrimitive( value )\n    Tests if a value is a number primitive having a negative integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a negative\n        integer value.\n\n    Examples\n    --------\n    > var bool = isNegativeInteger.isPrimitive( -3.0 )\n    true\n    > bool = isNegativeInteger.isPrimitive( new Number( -3.0 ) )\n    false\n\n\nisNegativeInteger.isObject( value )\n    Tests if a value is a number object having a negative integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a negative\n        integer value.\n\n    Examples\n    --------\n    > var bool = isNegativeInteger.isObject( -3.0 )\n    false\n    > bool = isNegativeInteger.isObject( new Number( -3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isInteger\n","isNegativeInteger.isPrimitive":"\nisNegativeInteger.isPrimitive( value )\n    Tests if a value is a number primitive having a negative integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a negative\n        integer value.\n\n    Examples\n    --------\n    > var bool = isNegativeInteger.isPrimitive( -3.0 )\n    true\n    > bool = isNegativeInteger.isPrimitive( new Number( -3.0 ) )\n    false\n\n","isNegativeInteger.isObject":"\nisNegativeInteger.isObject( value )\n    Tests if a value is a number object having a negative integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a negative\n        integer value.\n\n    Examples\n    --------\n    > var bool = isNegativeInteger.isObject( -3.0 )\n    false\n    > bool = isNegativeInteger.isObject( new Number( -3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isInteger\n","isNegativeIntegerArray":"\nisNegativeIntegerArray( value )\n    Tests if a value is an array-like object containing only negative integers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        negative integers.\n\n    Examples\n    --------\n    > var bool = isNegativeIntegerArray( [ -3.0, new Number(-3.0) ] )\n    true\n    > bool = isNegativeIntegerArray( [ -3.0, '-3.0' ] )\n    false\n\n\nisNegativeIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only negative primitive\n    integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        negative primitive integer values.\n\n    Examples\n    --------\n    > var bool = isNegativeIntegerArray.primitives( [ -1.0, -10.0 ] )\n    true\n    > bool = isNegativeIntegerArray.primitives( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNegativeIntegerArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n\nisNegativeIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having negative integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having negative integer values.\n\n    Examples\n    --------\n    > var bool = isNegativeIntegerArray.objects( [ new Number(-1.0), new Number(-10.0) ] )\n    true\n    > bool = isNegativeIntegerArray.objects( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNegativeIntegerArray.objects( [ -3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n","isNegativeIntegerArray.primitives":"\nisNegativeIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only negative primitive\n    integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        negative primitive integer values.\n\n    Examples\n    --------\n    > var bool = isNegativeIntegerArray.primitives( [ -1.0, -10.0 ] )\n    true\n    > bool = isNegativeIntegerArray.primitives( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNegativeIntegerArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n","isNegativeIntegerArray.objects":"\nisNegativeIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having negative integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having negative integer values.\n\n    Examples\n    --------\n    > var bool = isNegativeIntegerArray.objects( [ new Number(-1.0), new Number(-10.0) ] )\n    true\n    > bool = isNegativeIntegerArray.objects( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNegativeIntegerArray.objects( [ -3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n","isNegativeNumber":"\nisNegativeNumber( value )\n    Tests if a value is a negative number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a negative number.\n\n    Examples\n    --------\n    > var bool = isNegativeNumber( -5.0 )\n    true\n    > bool = isNegativeNumber( new Number( -5.0 ) )\n    true\n    > bool = isNegativeNumber( -3.14 )\n    true\n    > bool = isNegativeNumber( 5.0 )\n    false\n    > bool = isNegativeNumber( null )\n    false\n\n\nisNegativeNumber.isPrimitive( value )\n    Tests if a value is a number primitive having a negative value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a negative\n        value.\n\n    Examples\n    --------\n    > var bool = isNegativeNumber.isPrimitive( -3.0 )\n    true\n    > bool = isNegativeNumber.isPrimitive( new Number( -3.0 ) )\n    false\n\n\nisNegativeNumber.isObject( value )\n    Tests if a value is a number object having a negative value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a negative\n        value.\n\n    Examples\n    --------\n    > var bool = isNegativeNumber.isObject( -3.0 )\n    false\n    > bool = isNegativeNumber.isObject( new Number( -3.0 ) )\n    true\n\n    See Also\n    --------\n    isNumber\n","isNegativeNumber.isPrimitive":"\nisNegativeNumber.isPrimitive( value )\n    Tests if a value is a number primitive having a negative value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a negative\n        value.\n\n    Examples\n    --------\n    > var bool = isNegativeNumber.isPrimitive( -3.0 )\n    true\n    > bool = isNegativeNumber.isPrimitive( new Number( -3.0 ) )\n    false\n\n","isNegativeNumber.isObject":"\nisNegativeNumber.isObject( value )\n    Tests if a value is a number object having a negative value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a negative\n        value.\n\n    Examples\n    --------\n    > var bool = isNegativeNumber.isObject( -3.0 )\n    false\n    > bool = isNegativeNumber.isObject( new Number( -3.0 ) )\n    true\n\n    See Also\n    --------\n    isNumber\n","isNegativeNumberArray":"\nisNegativeNumberArray( value )\n    Tests if a value is an array-like object containing only negative numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        negative numbers.\n\n    Examples\n    --------\n    > var bool = isNegativeNumberArray( [ -3.0, new Number(-3.0) ] )\n    true\n    > bool = isNegativeNumberArray( [ -3.0, '-3.0' ] )\n    false\n\n\nisNegativeNumberArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive negative\n    numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive negative numbers.\n\n    Examples\n    --------\n    > var bool = isNegativeNumberArray.primitives( [ -1.0, -10.0 ] )\n    true\n    > bool = isNegativeNumberArray.primitives( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNegativeNumberArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n\nisNegativeNumberArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having negative number values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having negative number values.\n\n    Examples\n    --------\n    > var bool = isNegativeNumberArray.objects( [ new Number(-1.0), new Number(-10.0) ] )\n    true\n    > bool = isNegativeNumberArray.objects( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNegativeNumberArray.objects( [ -3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n","isNegativeNumberArray.primitives":"\nisNegativeNumberArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive negative\n    numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive negative numbers.\n\n    Examples\n    --------\n    > var bool = isNegativeNumberArray.primitives( [ -1.0, -10.0 ] )\n    true\n    > bool = isNegativeNumberArray.primitives( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNegativeNumberArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n","isNegativeNumberArray.objects":"\nisNegativeNumberArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having negative number values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having negative number values.\n\n    Examples\n    --------\n    > var bool = isNegativeNumberArray.objects( [ new Number(-1.0), new Number(-10.0) ] )\n    true\n    > bool = isNegativeNumberArray.objects( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNegativeNumberArray.objects( [ -3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n","isNegativeZero":"\nisNegativeZero( value )\n    Tests if a value is negative zero.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is negative zero.\n\n    Examples\n    --------\n    > var bool = isNegativeZero( -0.0 )\n    true\n    > bool = isNegativeZero( new Number( -0.0 ) )\n    true\n    > bool = isNegativeZero( -3.14 )\n    false\n    > bool = isNegativeZero( 0.0 )\n    false\n    > bool = isNegativeZero( null )\n    false\n\n\nisNegativeZero.isPrimitive( value )\n    Tests if a value is a number primitive equal to negative zero.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number primitive equal to\n        negative zero.\n\n    Examples\n    --------\n    > var bool = isNegativeZero.isPrimitive( -0.0 )\n    true\n    > bool = isNegativeZero.isPrimitive( new Number( -0.0 ) )\n    false\n\n\nisNegativeZero.isObject( value )\n    Tests if a value is a number object having a value equal to negative zero.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number object having a value\n        equal to negative zero.\n\n    Examples\n    --------\n    > var bool = isNegativeZero.isObject( -0.0 )\n    false\n    > bool = isNegativeZero.isObject( new Number( -0.0 ) )\n    true\n\n    See Also\n    --------\n    isNumber, isPositiveZero\n","isNegativeZero.isPrimitive":"\nisNegativeZero.isPrimitive( value )\n    Tests if a value is a number primitive equal to negative zero.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number primitive equal to\n        negative zero.\n\n    Examples\n    --------\n    > var bool = isNegativeZero.isPrimitive( -0.0 )\n    true\n    > bool = isNegativeZero.isPrimitive( new Number( -0.0 ) )\n    false\n\n","isNegativeZero.isObject":"\nisNegativeZero.isObject( value )\n    Tests if a value is a number object having a value equal to negative zero.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number object having a value\n        equal to negative zero.\n\n    Examples\n    --------\n    > var bool = isNegativeZero.isObject( -0.0 )\n    false\n    > bool = isNegativeZero.isObject( new Number( -0.0 ) )\n    true\n\n    See Also\n    --------\n    isNumber, isPositiveZero\n","isNodeBuiltin":"\nisNodeBuiltin( str )\n    Tests whether a string matches a Node.js built-in module name.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a string matches a Node.js built-in module\n        name.\n\n    Examples\n    --------\n    > var bool = isNodeBuiltin( 'cluster' )\n    true\n    > bool = isNodeBuiltin( 'crypto' )\n    true\n    > bool = isNodeBuiltin( 'fs-extra' )\n    false\n    > bool = isNodeBuiltin( '' )\n    false\n\n","isNodeDuplexStreamLike":"\nisNodeDuplexStreamLike( value )\n    Tests if a value is Node duplex stream-like.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is Node duplex stream-like.\n\n    Examples\n    --------\n    > var Stream = require( 'stream' ).Duplex;\n    > s = new Stream();\n    > var bool = isNodeDuplexStreamLike( s )\n    true\n    > bool = isNodeDuplexStreamLike( {} )\n    false\n\n    See Also\n    --------\n    isNodeStreamLike\n","isNodeReadableStreamLike":"\nisNodeReadableStreamLike( value )\n    Tests if a value is Node readable stream-like.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is Node readable stream-like.\n\n    Examples\n    --------\n    > var Stream = require( 'stream' ).Readable;\n    > s = new Stream();\n    > var bool = isNodeReadableStreamLike( s )\n    true\n    > bool = isNodeReadableStreamLike( {} )\n    false\n\n    See Also\n    --------\n    isNodeStreamLike\n","isNodeREPL":"\nisNodeREPL()\n    Returns a boolean indicating if running in a Node.js REPL environment.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if running in a Node.js REPL environment.\n\n    Examples\n    --------\n    > var bool = isNodeREPL()\n    <boolean>\n\n","isNodeStreamLike":"\nisNodeStreamLike( value )\n    Tests if a value is Node stream-like.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is Node stream-like.\n\n    Examples\n    --------\n    > var Stream = require( 'stream' ).Stream;\n    > s = new Stream();\n    > var bool = isNodeStreamLike( s )\n    true\n    > bool = isNodeStreamLike( {} )\n    false\n\n","isNodeTransformStreamLike":"\nisNodeTransformStreamLike( value )\n    Tests if a value is Node transform stream-like.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is Node transform stream-like.\n\n    Examples\n    --------\n    > var Stream = require( 'stream' ).Transform;\n    > s = new Stream();\n    > var bool = isNodeTransformStreamLike( s )\n    true\n    > bool = isNodeTransformStreamLike( {} )\n    false\n\n    See Also\n    --------\n    isNodeStreamLike\n","isNodeWritableStreamLike":"\nisNodeWritableStreamLike( value )\n    Tests if a value is Node writable stream-like.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is Node writable stream-like.\n\n    Examples\n    --------\n    > var Stream = require( 'stream' ).Writable;\n    > s = new Stream();\n    > var bool = isNodeWritableStreamLike( s )\n    true\n    > bool = isNodeWritableStreamLike( {} )\n    false\n\n    See Also\n    --------\n    isNodeStreamLike\n","isNonConfigurableProperty":"\nisNonConfigurableProperty( value, property )\n    Tests if an object's own property is non-configurable.\n\n    A non-configurable property is a property which cannot be deleted and whose\n    descriptor cannot be changed.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object's own property is non-configurable.\n\n    Examples\n    --------\n    > var obj = { 'boop': true };\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = true;\n    > desc.writable = true;\n    > desc.value = 'beep';\n    > defineProperty( obj, 'beep', desc );\n    > var bool = isNonConfigurableProperty( obj, 'boop' )\n    false\n    > bool = isNonConfigurableProperty( obj, 'beep' )\n    true\n\n    See Also\n    --------\n    isConfigurableProperty, isEnumerableProperty, isNonConfigurablePropertyIn, isNonEnumerableProperty, isReadableProperty, isWritableProperty\n","isNonConfigurablePropertyIn":"\nisNonConfigurablePropertyIn( value, property )\n    Tests if an object's own or inherited property is non-configurable.\n\n    A non-configurable property is a property which cannot be deleted and whose\n    descriptor cannot be changed.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object's own or inherited property is non-\n        configurable.\n\n    Examples\n    --------\n    > var obj = { 'boop': true };\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = true;\n    > desc.writable = true;\n    > desc.value = true;\n    > defineProperty( obj, 'beep', desc );\n    > var bool = isNonConfigurablePropertyIn( obj, 'boop' )\n    false\n    > bool = isNonConfigurablePropertyIn( obj, 'beep' )\n    true\n\n    See Also\n    --------\n    isConfigurablePropertyIn, isEnumerablePropertyIn, isNonConfigurableProperty, isNonEnumerablePropertyIn, isReadablePropertyIn, isWritablePropertyIn\n","isNonEnumerableProperty":"\nisNonEnumerableProperty( value, property )\n    Tests if an object's own property is non-enumerable.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object's own property is non-enumerable.\n\n    Examples\n    --------\n    > var obj = { 'boop': true };\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = false;\n    > desc.writable = true;\n    > desc.value = 'beep';\n    > defineProperty( obj, 'beep', desc );\n    > var bool = isNonEnumerableProperty( obj, 'boop' )\n    false\n    > bool = isNonEnumerableProperty( obj, 'beep' )\n    true\n\n    See Also\n    --------\n    isConfigurableProperty, isEnumerableProperty, isNonConfigurableProperty, isNonEnumerablePropertyIn, isReadableProperty, isWritableProperty\n","isNonEnumerablePropertyIn":"\nisNonEnumerablePropertyIn( value, property )\n    Tests if an object's own or inherited property is non-enumerable.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object's own or inherited property is non-\n        enumerable.\n\n    Examples\n    --------\n    > var obj = { 'boop': true };\n    > var desc = {};\n    > desc.configurable = true;\n    > desc.enumerable = false;\n    > desc.writable = true;\n    > desc.value = true;\n    > defineProperty( obj, 'beep', desc );\n    > var bool = isNonEnumerablePropertyIn( obj, 'boop' )\n    false\n    > bool = isNonEnumerablePropertyIn( obj, 'beep' )\n    true\n\n    See Also\n    --------\n    isConfigurablePropertyIn, isEnumerablePropertyIn, isNonConfigurablePropertyIn, isNonEnumerableProperty, isReadablePropertyIn, isWritablePropertyIn\n","isNonNegativeInteger":"\nisNonNegativeInteger( value )\n    Tests if a value is a nonnegative integer.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a nonnegative integer.\n\n    Examples\n    --------\n    > var bool = isNonNegativeInteger( 5.0 )\n    true\n    > bool = isNonNegativeInteger( new Number( 5.0 ) )\n    true\n    > bool = isNonNegativeInteger( 3.14 )\n    false\n    > bool = isNonNegativeInteger( -5.0 )\n    false\n    > bool = isNonNegativeInteger( null )\n    false\n\n\nisNonNegativeInteger.isPrimitive( value )\n    Tests if a value is a number primitive having a nonnegative integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a\n        nonnegative integer value.\n\n    Examples\n    --------\n    > var bool = isNonNegativeInteger.isPrimitive( 3.0 )\n    true\n    > bool = isNonNegativeInteger.isPrimitive( new Number( 3.0 ) )\n    false\n\n\nisNonNegativeInteger.isObject( value )\n    Tests if a value is a number object having a nonnegative integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a nonnegative\n        integer value.\n\n    Examples\n    --------\n    > var bool = isNonNegativeInteger.isObject( 3.0 )\n    false\n    > bool = isNonNegativeInteger.isObject( new Number( 3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isInteger\n","isNonNegativeInteger.isPrimitive":"\nisNonNegativeInteger.isPrimitive( value )\n    Tests if a value is a number primitive having a nonnegative integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a\n        nonnegative integer value.\n\n    Examples\n    --------\n    > var bool = isNonNegativeInteger.isPrimitive( 3.0 )\n    true\n    > bool = isNonNegativeInteger.isPrimitive( new Number( 3.0 ) )\n    false\n\n","isNonNegativeInteger.isObject":"\nisNonNegativeInteger.isObject( value )\n    Tests if a value is a number object having a nonnegative integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a nonnegative\n        integer value.\n\n    Examples\n    --------\n    > var bool = isNonNegativeInteger.isObject( 3.0 )\n    false\n    > bool = isNonNegativeInteger.isObject( new Number( 3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isInteger\n","isNonNegativeIntegerArray":"\nisNonNegativeIntegerArray( value )\n    Tests if a value is an array-like object containing only nonnegative\n    integers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        nonnegative integers.\n\n    Examples\n    --------\n    > var bool = isNonNegativeIntegerArray( [ 3.0, new Number(3.0) ] )\n    true\n    > bool = isNonNegativeIntegerArray( [ 3.0, '3.0' ] )\n    false\n\n\nisNonNegativeIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only nonnegative\n    primitive integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        nonnegative primitive integer values.\n\n    Examples\n    --------\n    > var bool = isNonNegativeIntegerArray.primitives( [ 1.0, 0.0, 10.0 ] )\n    true\n    > bool = isNonNegativeIntegerArray.primitives( [ 3.0, new Number(1.0) ] )\n    false\n\n\nisNonNegativeIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having nonnegative integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having nonnegative integer values.\n\n    Examples\n    --------\n    > var bool = isNonNegativeIntegerArray.objects( [ new Number(1.0), new Number(10.0) ] )\n    true\n    > bool = isNonNegativeIntegerArray.objects( [ 1.0, 0.0, 10.0 ] )\n    false\n    > bool = isNonNegativeIntegerArray.objects( [ 3.0, new Number(1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n","isNonNegativeIntegerArray.primitives":"\nisNonNegativeIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only nonnegative\n    primitive integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        nonnegative primitive integer values.\n\n    Examples\n    --------\n    > var bool = isNonNegativeIntegerArray.primitives( [ 1.0, 0.0, 10.0 ] )\n    true\n    > bool = isNonNegativeIntegerArray.primitives( [ 3.0, new Number(1.0) ] )\n    false\n\n","isNonNegativeIntegerArray.objects":"\nisNonNegativeIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having nonnegative integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having nonnegative integer values.\n\n    Examples\n    --------\n    > var bool = isNonNegativeIntegerArray.objects( [ new Number(1.0), new Number(10.0) ] )\n    true\n    > bool = isNonNegativeIntegerArray.objects( [ 1.0, 0.0, 10.0 ] )\n    false\n    > bool = isNonNegativeIntegerArray.objects( [ 3.0, new Number(1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n","isNonNegativeNumber":"\nisNonNegativeNumber( value )\n    Tests if a value is a nonnegative number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a nonnegative number.\n\n    Examples\n    --------\n    > var bool = isNonNegativeNumber( 5.0 )\n    true\n    > bool = isNonNegativeNumber( new Number( 5.0 ) )\n    true\n    > bool = isNonNegativeNumber( 3.14 )\n    true\n    > bool = isNonNegativeNumber( -5.0 )\n    false\n    > bool = isNonNegativeNumber( null )\n    false\n\n\nisNonNegativeNumber.isPrimitive( value )\n    Tests if a value is a number primitive having a nonnegative value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a\n        nonnegative value.\n\n    Examples\n    --------\n    > var bool = isNonNegativeNumber.isPrimitive( 3.0 )\n    true\n    > bool = isNonNegativeNumber.isPrimitive( new Number( 3.0 ) )\n    false\n\n\nisNonNegativeNumber.isObject( value )\n    Tests if a value is a number object having a nonnegative value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a nonnegative\n        value.\n\n    Examples\n    --------\n    > var bool = isNonNegativeNumber.isObject( 3.0 )\n    false\n    > bool = isNonNegativeNumber.isObject( new Number( 3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isNumber\n","isNonNegativeNumber.isPrimitive":"\nisNonNegativeNumber.isPrimitive( value )\n    Tests if a value is a number primitive having a nonnegative value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a\n        nonnegative value.\n\n    Examples\n    --------\n    > var bool = isNonNegativeNumber.isPrimitive( 3.0 )\n    true\n    > bool = isNonNegativeNumber.isPrimitive( new Number( 3.0 ) )\n    false\n\n","isNonNegativeNumber.isObject":"\nisNonNegativeNumber.isObject( value )\n    Tests if a value is a number object having a nonnegative value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a nonnegative\n        value.\n\n    Examples\n    --------\n    > var bool = isNonNegativeNumber.isObject( 3.0 )\n    false\n    > bool = isNonNegativeNumber.isObject( new Number( 3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isNumber\n","isNonNegativeNumberArray":"\nisNonNegativeNumberArray( value )\n    Tests if a value is an array-like object containing only nonnegative\n    numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        nonnegative numbers.\n\n    Examples\n    --------\n    > var bool = isNonNegativeNumberArray( [ 3.0, new Number(3.0) ] )\n    true\n    > bool = isNonNegativeNumberArray( [ 3.0, '3.0' ] )\n    false\n\n\nisNonNegativeNumberArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive\n    nonnegative numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive nonnegative numbers.\n\n    Examples\n    --------\n    > var bool = isNonNegativeNumberArray.primitives( [ 1.0, 0.0, 10.0 ] )\n    true\n    > bool = isNonNegativeNumberArray.primitives( [ 3.0, new Number(1.0) ] )\n    false\n\n\nisNonNegativeNumberArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having nonnegative number values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having nonnegative number values.\n\n    Examples\n    --------\n    > var bool = isNonNegativeNumberArray.objects( [ new Number(1.0), new Number(10.0) ] )\n    true\n    > bool = isNonNegativeNumberArray.objects( [ 1.0, 0.0, 10.0 ] )\n    false\n    > bool = isNonNegativeNumberArray.objects( [ 3.0, new Number(1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n","isNonNegativeNumberArray.primitives":"\nisNonNegativeNumberArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive\n    nonnegative numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive nonnegative numbers.\n\n    Examples\n    --------\n    > var bool = isNonNegativeNumberArray.primitives( [ 1.0, 0.0, 10.0 ] )\n    true\n    > bool = isNonNegativeNumberArray.primitives( [ 3.0, new Number(1.0) ] )\n    false\n\n","isNonNegativeNumberArray.objects":"\nisNonNegativeNumberArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having nonnegative number values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having nonnegative number values.\n\n    Examples\n    --------\n    > var bool = isNonNegativeNumberArray.objects( [ new Number(1.0), new Number(10.0) ] )\n    true\n    > bool = isNonNegativeNumberArray.objects( [ 1.0, 0.0, 10.0 ] )\n    false\n    > bool = isNonNegativeNumberArray.objects( [ 3.0, new Number(1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n","isNonPositiveInteger":"\nisNonPositiveInteger( value )\n    Tests if a value is a nonpositive integer.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a nonpositive integer.\n\n    Examples\n    --------\n    > var bool = isNonPositiveInteger( -5.0 )\n    true\n    > bool = isNonPositiveInteger( new Number( -5.0 ) )\n    true\n    > bool = isNonPositiveInteger( 5.0 )\n    false\n    > bool = isNonPositiveInteger( -3.14 )\n    false\n    > bool = isNonPositiveInteger( null )\n    false\n\n\nisNonPositiveInteger.isPrimitive( value )\n    Tests if a value is a number primitive having a nonpositive integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a\n        nonpositive integer value.\n\n    Examples\n    --------\n    > var bool = isNonPositiveInteger.isPrimitive( -3.0 )\n    true\n    > bool = isNonPositiveInteger.isPrimitive( new Number( -3.0 ) )\n    false\n\n\nisNonPositiveInteger.isObject( value )\n    Tests if a value is a number object having a nonpositive integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a nonpositive\n        integer value.\n\n    Examples\n    --------\n    > var bool = isNonPositiveInteger.isObject( -3.0 )\n    false\n    > bool = isNonPositiveInteger.isObject( new Number( -3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isInteger\n","isNonPositiveInteger.isPrimitive":"\nisNonPositiveInteger.isPrimitive( value )\n    Tests if a value is a number primitive having a nonpositive integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a\n        nonpositive integer value.\n\n    Examples\n    --------\n    > var bool = isNonPositiveInteger.isPrimitive( -3.0 )\n    true\n    > bool = isNonPositiveInteger.isPrimitive( new Number( -3.0 ) )\n    false\n\n","isNonPositiveInteger.isObject":"\nisNonPositiveInteger.isObject( value )\n    Tests if a value is a number object having a nonpositive integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a nonpositive\n        integer value.\n\n    Examples\n    --------\n    > var bool = isNonPositiveInteger.isObject( -3.0 )\n    false\n    > bool = isNonPositiveInteger.isObject( new Number( -3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isInteger\n","isNonPositiveIntegerArray":"\nisNonPositiveIntegerArray( value )\n    Tests if a value is an array-like object containing only nonpositive\n    integers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        nonpositive integers.\n\n    Examples\n    --------\n    > var bool = isNonPositiveIntegerArray( [ -3.0, new Number(-3.0) ] )\n    true\n    > bool = isNonPositiveIntegerArray( [ -3.0, '-3.0' ] )\n    false\n\n\nisNonPositiveIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only nonpositive\n    primitive integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        nonpositive primitive integer values.\n\n    Examples\n    --------\n    > var bool = isNonPositiveIntegerArray.primitives( [ -1.0, 0.0, -10.0 ] )\n    true\n    > bool = isNonPositiveIntegerArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n\nisNonPositiveIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having nonpositive integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having nonpositive integer values.\n\n    Examples\n    --------\n    > var bool = isNonPositiveIntegerArray.objects( [ new Number(-1.0), new Number(-10.0) ] )\n    true\n    > bool = isNonPositiveIntegerArray.objects( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNonPositiveIntegerArray.objects( [ -3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n","isNonPositiveIntegerArray.primitives":"\nisNonPositiveIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only nonpositive\n    primitive integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        nonpositive primitive integer values.\n\n    Examples\n    --------\n    > var bool = isNonPositiveIntegerArray.primitives( [ -1.0, 0.0, -10.0 ] )\n    true\n    > bool = isNonPositiveIntegerArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n","isNonPositiveIntegerArray.objects":"\nisNonPositiveIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having nonpositive integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having nonpositive integer values.\n\n    Examples\n    --------\n    > var bool = isNonPositiveIntegerArray.objects( [ new Number(-1.0), new Number(-10.0) ] )\n    true\n    > bool = isNonPositiveIntegerArray.objects( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNonPositiveIntegerArray.objects( [ -3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n","isNonPositiveNumber":"\nisNonPositiveNumber( value )\n    Tests if a value is a nonpositive number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a nonpositive number.\n\n    Examples\n    --------\n    > var bool = isNonPositiveNumber( -5.0 )\n    true\n    > bool = isNonPositiveNumber( new Number( -5.0 ) )\n    true\n    > bool = isNonPositiveNumber( -3.14 )\n    true\n    > bool = isNonPositiveNumber( 5.0 )\n    false\n    > bool = isNonPositiveNumber( null )\n    false\n\n\nisNonPositiveNumber.isPrimitive( value )\n    Tests if a value is a number primitive having a nonpositive value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a\n        nonpositive value.\n\n    Examples\n    --------\n    > var bool = isNonPositiveNumber.isPrimitive( -3.0 )\n    true\n    > bool = isNonPositiveNumber.isPrimitive( new Number( -3.0 ) )\n    false\n\n\nisNonPositiveNumber.isObject( value )\n    Tests if a value is a number object having a nonpositive value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a nonpositive\n        value.\n\n    Examples\n    --------\n    > var bool = isNonPositiveNumber.isObject( -3.0 )\n    false\n    > bool = isNonPositiveNumber.isObject( new Number( -3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isNumber\n","isNonPositiveNumber.isPrimitive":"\nisNonPositiveNumber.isPrimitive( value )\n    Tests if a value is a number primitive having a nonpositive value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a\n        nonpositive value.\n\n    Examples\n    --------\n    > var bool = isNonPositiveNumber.isPrimitive( -3.0 )\n    true\n    > bool = isNonPositiveNumber.isPrimitive( new Number( -3.0 ) )\n    false\n\n","isNonPositiveNumber.isObject":"\nisNonPositiveNumber.isObject( value )\n    Tests if a value is a number object having a nonpositive value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a nonpositive\n        value.\n\n    Examples\n    --------\n    > var bool = isNonPositiveNumber.isObject( -3.0 )\n    false\n    > bool = isNonPositiveNumber.isObject( new Number( -3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isNumber\n","isNonPositiveNumberArray":"\nisNonPositiveNumberArray( value )\n    Tests if a value is an array-like object containing only nonpositive\n    numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        nonpositive numbers.\n\n    Examples\n    --------\n    > var bool = isNonPositiveNumberArray( [ -3.0, new Number(-3.0) ] )\n    true\n    > bool = isNonPositiveNumberArray( [ -3.0, '-3.0' ] )\n    false\n\n\nisNonPositiveNumberArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive\n    nonpositive numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive nonpositive numbers.\n\n    Examples\n    --------\n    > var bool = isNonPositiveNumberArray.primitives( [ -1.0, 0.0, -10.0 ] )\n    true\n    > bool = isNonPositiveNumberArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n\nisNonPositiveNumberArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having nonpositive number values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having nonpositive number values.\n\n    Examples\n    --------\n    > var bool = isNonPositiveNumberArray.objects( [ new Number(-1.0), new Number(-10.0) ] )\n    true\n    > bool = isNonPositiveNumberArray.objects( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNonPositiveNumberArray.objects( [ -3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n","isNonPositiveNumberArray.primitives":"\nisNonPositiveNumberArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive\n    nonpositive numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive nonpositive numbers.\n\n    Examples\n    --------\n    > var bool = isNonPositiveNumberArray.primitives( [ -1.0, 0.0, -10.0 ] )\n    true\n    > bool = isNonPositiveNumberArray.primitives( [ -3.0, new Number(-1.0) ] )\n    false\n\n","isNonPositiveNumberArray.objects":"\nisNonPositiveNumberArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having nonpositive number values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having nonpositive number values.\n\n    Examples\n    --------\n    > var bool = isNonPositiveNumberArray.objects( [ new Number(-1.0), new Number(-10.0) ] )\n    true\n    > bool = isNonPositiveNumberArray.objects( [ -1.0, 0.0, -10.0 ] )\n    false\n    > bool = isNonPositiveNumberArray.objects( [ -3.0, new Number(-1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray\n","isNonSymmetricMatrix":"\nisNonSymmetricMatrix( value )\n    Tests if a value is a non-symmetric matrix.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a non-symmetric matrix.\n\n    Examples\n    --------\n    > var mat = ndarray( 'generic', 2 );\n    > var M = mat( [ 1, 2, 3, 4 ], [ 2, 2 ], [ 2, 1 ], 0, 'row-major' );\n    > var bool = isNonSymmetricMatrix( M )\n    true\n    > bool = isNonSymmetricMatrix( [ 1, 2, 3, 4 ] )\n    false\n    > bool = isNonSymmetricMatrix( 3.14 )\n    false\n    > bool = isNonSymmetricMatrix( {} )\n    false\n\n    See Also\n    --------\n    isMatrixLike, isSquareMatrix, isSymmetricMatrix\n","isNull":"\nisNull( value )\n    Tests if a value is null.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is null.\n\n    Examples\n    --------\n    > var bool = isNull( null )\n    true\n    > bool = isNull( true )\n    false\n\n    See Also\n    --------\n    isUndefined, isUndefinedOrNull\n","isNullArray":"\nisNullArray( value )\n    Tests if a value is an array-like object containing only null values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        null values.\n\n    Examples\n    --------\n    > var bool = isNullArray( [ null, null, null ] )\n    true\n    > bool = isNullArray( [ NaN, 2, null ] )\n    false\n\n    See Also\n    --------\n    isArray, isNull\n","isNumber":"\nisNumber( value )\n    Tests if a value is a number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number.\n\n    Examples\n    --------\n    > var bool = isNumber( 3.14 )\n    true\n    > bool = isNumber( new Number( 3.14 ) )\n    true\n    > bool = isNumber( NaN )\n    true\n    > bool = isNumber( null )\n    false\n\n\nisNumber.isPrimitive( value )\n    Tests if a value is a number primitive.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive.\n\n    Examples\n    --------\n    > var bool = isNumber.isPrimitive( 3.14 )\n    true\n    > bool = isNumber.isPrimitive( NaN )\n    true\n    > bool = isNumber.isPrimitive( new Number( 3.14 ) )\n    false\n\n\nisNumber.isObject( value )\n    Tests if a value is a `Number` object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `Number` object.\n\n    Examples\n    --------\n    > var bool = isNumber.isObject( 3.14 )\n    false\n    > bool = isNumber.isObject( new Number( 3.14 ) )\n    true\n\n","isNumber.isPrimitive":"\nisNumber.isPrimitive( value )\n    Tests if a value is a number primitive.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive.\n\n    Examples\n    --------\n    > var bool = isNumber.isPrimitive( 3.14 )\n    true\n    > bool = isNumber.isPrimitive( NaN )\n    true\n    > bool = isNumber.isPrimitive( new Number( 3.14 ) )\n    false\n\n","isNumber.isObject":"\nisNumber.isObject( value )\n    Tests if a value is a `Number` object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `Number` object.\n\n    Examples\n    --------\n    > var bool = isNumber.isObject( 3.14 )\n    false\n    > bool = isNumber.isObject( new Number( 3.14 ) )\n    true\n\n","isNumberArray":"\nisNumberArray( value )\n    Tests if a value is an array-like object containing only numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        numbers.\n\n    Examples\n    --------\n    > var bool = isNumberArray( [ 1, 2, 3 ] )\n    true\n    > bool = isNumberArray( [ '1', 2, 3 ] )\n    false\n\n\nisNumberArray.primitives( value )\n    Tests if a value is an array-like object containing only number primitives.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number primitives.\n\n    Examples\n    --------\n    > var arr = [ 1, 2, 3 ];\n    > var bool = isNumberArray.primitives( arr )\n    true\n    > arr = [ 1, new Number( 2 ) ];\n    > bool = isNumberArray.primitives( arr )\n    false\n\n\nisNumberArray.objects( value )\n    Tests if a value is an array-like object containing only `Number` objects.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        `Number` objects.\n\n    Examples\n    --------\n    > var arr = [ new Number( 1 ), new Number( 2 ) ];\n    > var bool = isNumberArray.objects( arr )\n    true\n    > arr = [ new Number( 1 ), 2 ];\n    > bool = isNumberArray.objects( arr )\n    false\n\n    See Also\n    --------\n    isArray, isNumber, isNumericArray\n","isNumberArray.primitives":"\nisNumberArray.primitives( value )\n    Tests if a value is an array-like object containing only number primitives.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number primitives.\n\n    Examples\n    --------\n    > var arr = [ 1, 2, 3 ];\n    > var bool = isNumberArray.primitives( arr )\n    true\n    > arr = [ 1, new Number( 2 ) ];\n    > bool = isNumberArray.primitives( arr )\n    false\n\n","isNumberArray.objects":"\nisNumberArray.objects( value )\n    Tests if a value is an array-like object containing only `Number` objects.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        `Number` objects.\n\n    Examples\n    --------\n    > var arr = [ new Number( 1 ), new Number( 2 ) ];\n    > var bool = isNumberArray.objects( arr )\n    true\n    > arr = [ new Number( 1 ), 2 ];\n    > bool = isNumberArray.objects( arr )\n    false\n\n    See Also\n    --------\n    isArray, isNumber, isNumericArray\n","isNumericArray":"\nisNumericArray( value )\n    Tests if a value is a numeric array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a value is a numeric array.\n\n    Examples\n    --------\n    > var bool = isNumericArray( new Int8Array( 10 ) )\n    true\n    > bool = isNumericArray( [ 1, 2, 3 ] )\n    true\n    > bool = isNumericArray( [ '1', '2', '3' ] )\n    false\n\n    See Also\n    --------\n    isArray, isNumberArray, isTypedArray\n\n","isObject":"\nisObject( value )\n    Tests if a value is an object; e.g., `{}`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an object.\n\n    Examples\n    --------\n    > var bool = isObject( {} )\n    true\n    > bool = isObject( true )\n    false\n\n    See Also\n    --------\n    isObjectLike, isPlainObject\n","isObjectArray":"\nisObjectArray( value )\n    Tests if a value is an array-like object containing only objects.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        objects.\n\n    Examples\n    --------\n    > var bool = isObjectArray( [ {}, new Number(3.0) ] )\n    true\n    > bool = isObjectArray( [ {}, { 'beep': 'boop' } ] )\n    true\n    > bool = isObjectArray( [ {}, '3.0' ] )\n    false\n\n    See Also\n    --------\n    isArray, isObject\n","isObjectLike":"\nisObjectLike( value )\n    Tests if a value is object-like.\n\n    Return values are the same as would be obtained using the built-in `typeof`\n    operator except that `null` is not considered an object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is object-like.\n\n    Examples\n    --------\n    > var bool = isObjectLike( {} )\n    true\n    > bool = isObjectLike( [] )\n    true\n    > bool = isObjectLike( null )\n    false\n\n    See Also\n    --------\n    isObject, isPlainObject\n","isOdd":"\nisOdd( value )\n    Tests if a value is an odd number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an odd number.\n\n    Examples\n    --------\n    > var bool = isOdd( 5.0 )\n    true\n    > bool = isOdd( new Number( 5.0 ) )\n    true\n    > bool = isOdd( 4.0 )\n    false\n    > bool = isOdd( new Number( 4.0 ) )\n    false\n    > bool = isOdd( -3.14 )\n    false\n    > bool = isOdd( null )\n    false\n\nisOdd.isPrimitive( value )\n    Tests if a value is a number primitive that is an odd number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive that is an odd\n        number.\n\n    Examples\n    --------\n    > var bool = isOdd.isPrimitive( -5.0 )\n    true\n    > bool = isOdd.isPrimitive( new Number( -5.0 ) )\n    false\n\n\nisOdd.isObject( value )\n    Tests if a value is a number object that has an odd number value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object that has an odd\n        number value.\n\n    Examples\n    --------\n    > var bool = isOdd.isObject( 5.0 )\n    false\n    > bool = isOdd.isObject( new Number( 5.0 ) )\n    true\n\n    See Also\n    --------\n    isEven\n","isOdd.isPrimitive":"\nisOdd.isPrimitive( value )\n    Tests if a value is a number primitive that is an odd number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive that is an odd\n        number.\n\n    Examples\n    --------\n    > var bool = isOdd.isPrimitive( -5.0 )\n    true\n    > bool = isOdd.isPrimitive( new Number( -5.0 ) )\n    false\n\n","isOdd.isObject":"\nisOdd.isObject( value )\n    Tests if a value is a number object that has an odd number value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object that has an odd\n        number value.\n\n    Examples\n    --------\n    > var bool = isOdd.isObject( 5.0 )\n    false\n    > bool = isOdd.isObject( new Number( 5.0 ) )\n    true\n\n    See Also\n    --------\n    isEven\n","isoWeeksInYear":"\nisoWeeksInYear( [year] )\n    Returns the number of ISO weeks in a year according to the Gregorian\n    calendar.\n\n    By default, the function returns the number of ISO weeks in the current year\n    (according to local time). To determine the number of ISO weeks for a\n    particular year, provide either a year or a `Date` object.\n\n    Parameters\n    ----------\n    year: integer (optional)\n        Year.\n\n    Returns\n    -------\n    out: integer\n        Number of ISO weeks in a year.\n\n    Examples\n    --------\n    > var num = isoWeeksInYear()\n    <number>\n    > num = isoWeeksInYear( 2015 )\n    53\n    > num = isoWeeksInYear( 2017 )\n    52\n\n","isPersymmetricMatrix":"\nisPersymmetricMatrix( value )\n    Tests if a value is a square matrix which is symmetric about its\n    antidiagonal.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a persymmetric matrix.\n\n    Examples\n    --------\n    > var mat = ndarray( 'generic', 2 );\n    > var M = mat( [ 1, 2, 3, 1 ], [ 2, 2 ], [ 2, 1 ], 0, 'row-major' );\n    > var bool = isPersymmetricMatrix( M )\n    true\n    > bool = isPersymmetricMatrix( [ 1, 2, 3, 4 ] )\n    false\n    > bool = isPersymmetricMatrix( 3.14 )\n    false\n    > bool = isPersymmetricMatrix( {} )\n    false\n\n    See Also\n    --------\n    isMatrixLike, isSquareMatrix, isSymmetricMatrix\n","isPlainObject":"\nisPlainObject( value )\n    Tests if a value is a plain object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a plain object.\n\n    Examples\n    --------\n    > var bool = isPlainObject( {} )\n    true\n    > bool = isPlainObject( null )\n    false\n\n    See Also\n    --------\n    isObject\n","isPlainObjectArray":"\nisPlainObjectArray( value )\n    Tests if a value is an array-like object containing only plain objects.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        plain objects.\n\n    Examples\n    --------\n    > var bool = isPlainObjectArray( [ {}, { 'beep': 'boop' } ] )\n    true\n    > bool = isPlainObjectArray( [ {}, new Number(3.0) ] )\n    false\n    > bool = isPlainObjectArray( [ {}, '3.0' ] )\n    false\n\n    See Also\n    --------\n    isArray, isPlainObject\n","isPositiveInteger":"\nisPositiveInteger( value )\n    Tests if a value is a positive integer.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a positive integer.\n\n    Examples\n    --------\n    > var bool = isPositiveInteger( 5.0 )\n    true\n    > bool = isPositiveInteger( new Number( 5.0 ) )\n    true\n    > bool = isPositiveInteger( 3.14 )\n    false\n    > bool = isPositiveInteger( -5.0 )\n    false\n    > bool = isPositiveInteger( null )\n    false\n\n\nisPositiveInteger.isPrimitive( value )\n    Tests if a value is a number primitive having a positive integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a\n        positive integer value.\n\n    Examples\n    --------\n    > var bool = isPositiveInteger.isPrimitive( 3.0 )\n    true\n    > bool = isPositiveInteger.isPrimitive( new Number( 3.0 ) )\n    false\n\n\nisPositiveInteger.isObject( value )\n    Tests if a value is a number object having a positive integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a positive\n        integer value.\n\n    Examples\n    --------\n    > var bool = isPositiveInteger.isObject( 3.0 )\n    false\n    > bool = isPositiveInteger.isObject( new Number( 3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isInteger\n","isPositiveInteger.isPrimitive":"\nisPositiveInteger.isPrimitive( value )\n    Tests if a value is a number primitive having a positive integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a\n        positive integer value.\n\n    Examples\n    --------\n    > var bool = isPositiveInteger.isPrimitive( 3.0 )\n    true\n    > bool = isPositiveInteger.isPrimitive( new Number( 3.0 ) )\n    false\n\n","isPositiveInteger.isObject":"\nisPositiveInteger.isObject( value )\n    Tests if a value is a number object having a positive integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a positive\n        integer value.\n\n    Examples\n    --------\n    > var bool = isPositiveInteger.isObject( 3.0 )\n    false\n    > bool = isPositiveInteger.isObject( new Number( 3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isInteger\n","isPositiveIntegerArray":"\nisPositiveIntegerArray( value )\n    Tests if a value is an array-like object containing only positive integers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        positive integers.\n\n    Examples\n    --------\n    > var bool = isPositiveIntegerArray( [ 3.0, new Number(3.0) ] )\n    true\n    > bool = isPositiveIntegerArray( [ 3.0, '3.0' ] )\n    false\n\n\nisPositiveIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only positive primitive\n    integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        positive primitive integer values.\n\n    Examples\n    --------\n    > var bool = isPositiveIntegerArray.primitives( [ 1.0, 10.0 ] )\n    true\n    > bool = isPositiveIntegerArray.primitives( [ 1.0, 0.0, 10.0 ] )\n    false\n    > bool = isPositiveIntegerArray.primitives( [ 3.0, new Number(1.0) ] )\n    false\n\n\nisPositiveIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having positive integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having positive integer values.\n\n    Examples\n    --------\n    > var bool = isPositiveIntegerArray.objects( [ new Number(1.0), new Number(10.0) ] )\n    true\n    > bool = isPositiveIntegerArray.objects( [ 1.0, 2.0, 10.0 ] )\n    false\n    > bool = isPositiveIntegerArray.objects( [ 3.0, new Number(1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray, isInteger, isPositiveInteger\n","isPositiveIntegerArray.primitives":"\nisPositiveIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only positive primitive\n    integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        positive primitive integer values.\n\n    Examples\n    --------\n    > var bool = isPositiveIntegerArray.primitives( [ 1.0, 10.0 ] )\n    true\n    > bool = isPositiveIntegerArray.primitives( [ 1.0, 0.0, 10.0 ] )\n    false\n    > bool = isPositiveIntegerArray.primitives( [ 3.0, new Number(1.0) ] )\n    false\n\n","isPositiveIntegerArray.objects":"\nisPositiveIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having positive integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having positive integer values.\n\n    Examples\n    --------\n    > var bool = isPositiveIntegerArray.objects( [ new Number(1.0), new Number(10.0) ] )\n    true\n    > bool = isPositiveIntegerArray.objects( [ 1.0, 2.0, 10.0 ] )\n    false\n    > bool = isPositiveIntegerArray.objects( [ 3.0, new Number(1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray, isInteger, isPositiveInteger\n","isPositiveNumber":"\nisPositiveNumber( value )\n    Tests if a value is a positive number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a positive number.\n\n    Examples\n    --------\n    > var bool = isPositiveNumber( 5.0 )\n    true\n    > bool = isPositiveNumber( new Number( 5.0 ) )\n    true\n    > bool = isPositiveNumber( 3.14 )\n    true\n    > bool = isPositiveNumber( -5.0 )\n    false\n    > bool = isPositiveNumber( null )\n    false\n\n\nisPositiveNumber.isPrimitive( value )\n    Tests if a value is a number primitive having a positive value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a positive\n        value.\n\n    Examples\n    --------\n    > var bool = isPositiveNumber.isPrimitive( 3.0 )\n    true\n    > bool = isPositiveNumber.isPrimitive( new Number( 3.0 ) )\n    false\n\n\nisPositiveNumber.isObject( value )\n    Tests if a value is a number object having a positive value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a positive\n        value.\n\n    Examples\n    --------\n    > var bool = isPositiveNumber.isObject( 3.0 )\n    false\n    > bool = isPositiveNumber.isObject( new Number( 3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isNumber\n","isPositiveNumber.isPrimitive":"\nisPositiveNumber.isPrimitive( value )\n    Tests if a value is a number primitive having a positive value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a positive\n        value.\n\n    Examples\n    --------\n    > var bool = isPositiveNumber.isPrimitive( 3.0 )\n    true\n    > bool = isPositiveNumber.isPrimitive( new Number( 3.0 ) )\n    false\n\n","isPositiveNumber.isObject":"\nisPositiveNumber.isObject( value )\n    Tests if a value is a number object having a positive value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a positive\n        value.\n\n    Examples\n    --------\n    > var bool = isPositiveNumber.isObject( 3.0 )\n    false\n    > bool = isPositiveNumber.isObject( new Number( 3.0 ) )\n    true\n\n\n    See Also\n    --------\n    isNumber\n","isPositiveNumberArray":"\nisPositiveNumberArray( value )\n    Tests if a value is an array-like object containing only positive numbers.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        positive numbers.\n\n    Examples\n    --------\n    > var bool = isPositiveNumberArray( [ 3.0, new Number(3.0) ] )\n    true\n    > bool = isPositiveNumberArray( [ 3.0, '3.0' ] )\n    false\n\n\nisPositiveNumberArray.primitives( value )\n    Tests if a value is an array-like object containing only positive primitive\n    number values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        positive primitive number values.\n\n    Examples\n    --------\n    > var bool = isPositiveNumberArray.primitives( [ 1.0, 10.0 ] )\n    true\n    > bool = isPositiveNumberArray.primitives( [ 1.0, 0.0, 10.0 ] )\n    false\n    > bool = isPositiveNumberArray.primitives( [ 3.0, new Number(1.0) ] )\n    false\n\n\nisPositiveNumberArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having positive values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having positive values.\n\n    Examples\n    --------\n    > var bool = isPositiveNumberArray.objects( [ new Number(1.0), new Number(10.0) ] )\n    true\n    > bool = isPositiveNumberArray.objects( [ 1.0, 2.0, 10.0 ] )\n    false\n    > bool = isPositiveNumberArray.objects( [ 3.0, new Number(1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray, isNumber, isPositiveNumber\n","isPositiveNumberArray.primitives":"\nisPositiveNumberArray.primitives( value )\n    Tests if a value is an array-like object containing only positive primitive\n    number values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        positive primitive number values.\n\n    Examples\n    --------\n    > var bool = isPositiveNumberArray.primitives( [ 1.0, 10.0 ] )\n    true\n    > bool = isPositiveNumberArray.primitives( [ 1.0, 0.0, 10.0 ] )\n    false\n    > bool = isPositiveNumberArray.primitives( [ 3.0, new Number(1.0) ] )\n    false\n\n","isPositiveNumberArray.objects":"\nisPositiveNumberArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having positive values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having positive values.\n\n    Examples\n    --------\n    > var bool = isPositiveNumberArray.objects( [ new Number(1.0), new Number(10.0) ] )\n    true\n    > bool = isPositiveNumberArray.objects( [ 1.0, 2.0, 10.0 ] )\n    false\n    > bool = isPositiveNumberArray.objects( [ 3.0, new Number(1.0) ] )\n    false\n\n    See Also\n    --------\n    isArray, isNumber, isPositiveNumber\n","isPositiveZero":"\nisPositiveZero( value )\n    Tests if a value is positive zero.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is positive zero.\n\n    Examples\n    --------\n    > var bool = isPositiveZero( 0.0 )\n    true\n    > bool = isPositiveZero( new Number( 0.0 ) )\n    true\n    > bool = isPositiveZero( -3.14 )\n    false\n    > bool = isPositiveZero( -0.0 )\n    false\n    > bool = isPositiveZero( null )\n    false\n\n\nisPositiveZero.isPrimitive( value )\n    Tests if a value is a number primitive equal to positive zero.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number primitive equal to\n        positive zero.\n\n    Examples\n    --------\n    > var bool = isPositiveZero.isPrimitive( 0.0 )\n    true\n    > bool = isPositiveZero.isPrimitive( new Number( 0.0 ) )\n    false\n\n\nisPositiveZero.isObject( value )\n    Tests if a value is a number object having a value equal to positive zero.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number object having a value\n        equal to positive zero.\n\n    Examples\n    --------\n    > var bool = isPositiveZero.isObject( 0.0 )\n    false\n    > bool = isPositiveZero.isObject( new Number( 0.0 ) )\n    true\n\n    See Also\n    --------\n    isNumber, isNegativeZero\n","isPositiveZero.isPrimitive":"\nisPositiveZero.isPrimitive( value )\n    Tests if a value is a number primitive equal to positive zero.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number primitive equal to\n        positive zero.\n\n    Examples\n    --------\n    > var bool = isPositiveZero.isPrimitive( 0.0 )\n    true\n    > bool = isPositiveZero.isPrimitive( new Number( 0.0 ) )\n    false\n\n","isPositiveZero.isObject":"\nisPositiveZero.isObject( value )\n    Tests if a value is a number object having a value equal to positive zero.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a number object having a value\n        equal to positive zero.\n\n    Examples\n    --------\n    > var bool = isPositiveZero.isObject( 0.0 )\n    false\n    > bool = isPositiveZero.isObject( new Number( 0.0 ) )\n    true\n\n    See Also\n    --------\n    isNumber, isNegativeZero\n","isPrimitive":"\nisPrimitive( value )\n    Tests if a value is a JavaScript primitive.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a JavaScript primitive.\n\n    Examples\n    --------\n    > var bool = isPrimitive( true )\n    true\n    > bool = isPrimitive( {} )\n    false\n\n    See Also\n    --------\n    isBoxedPrimitive\n","isPrimitiveArray":"\nisPrimitiveArray( value )\n    Tests if a value is an array-like object containing only JavaScript\n    primitives.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        JavaScript primitives.\n\n    Examples\n    --------\n    > var bool = isPrimitiveArray( [ '3', 2, null ] )\n    true\n    > bool = isPrimitiveArray( [ {}, 2, 1 ] )\n    false\n    > bool = isPrimitiveArray( [ new String('abc'), '3.0' ] )\n    false\n\n    See Also\n    --------\n    isArray, isPrimitive\n","isPRNGLike":"\nisPRNGLike( value )\n    Tests if a value is PRNG-like.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is PRNG-like.\n\n    Examples\n    --------\n    > var bool = isPRNGLike( base.random.randu )\n    true\n    > bool = isPRNGLike( [ 1, 2, 3, 4 ] )\n    false\n    > bool = isPRNGLike( 3.14 )\n    false\n    > bool = isPRNGLike( {} )\n    false\n\n","isProbability":"\nisProbability( value )\n    Tests if a value is a probability.\n\n    A probability is defined as a numeric value on the interval [0,1].\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a probability.\n\n    Examples\n    --------\n    > var bool = isProbability( 0.5 )\n    true\n    > bool = isProbability( new Number( 0.5 ) )\n    true\n    > bool = isProbability( 3.14 )\n    false\n    > bool = isProbability( -5.0 )\n    false\n    > bool = isProbability( null )\n    false\n\n\nisProbability.isPrimitive( value )\n    Tests if a value is a number primitive which is a probability.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive which is a\n        probability.\n\n    Examples\n    --------\n    > var bool = isProbability.isPrimitive( 0.3 )\n    true\n    > bool = isProbability.isPrimitive( new Number( 0.3 ) )\n    false\n\n\nisProbability.isObject( value )\n    Tests if a value is a number object having a value which is a probability.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a value which\n        is a probability.\n\n    Examples\n    --------\n    > var bool = isProbability.isObject( 0.77 )\n    false\n    > bool = isProbability.isObject( new Number( 0.77 ) )\n    true\n\n\n    See Also\n    --------\n    isNumber\n","isProbability.isPrimitive":"\nisProbability.isPrimitive( value )\n    Tests if a value is a number primitive which is a probability.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive which is a\n        probability.\n\n    Examples\n    --------\n    > var bool = isProbability.isPrimitive( 0.3 )\n    true\n    > bool = isProbability.isPrimitive( new Number( 0.3 ) )\n    false\n\n","isProbability.isObject":"\nisProbability.isObject( value )\n    Tests if a value is a number object having a value which is a probability.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number object having a value which\n        is a probability.\n\n    Examples\n    --------\n    > var bool = isProbability.isObject( 0.77 )\n    false\n    > bool = isProbability.isObject( new Number( 0.77 ) )\n    true\n\n\n    See Also\n    --------\n    isNumber\n","isProbabilityArray":"\nisProbabilityArray( value )\n    Tests if a value is an array-like object containing only probabilities.\n\n    A probability is defined as a numeric value on the interval [0,1].\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        probabilities.\n\n    Examples\n    --------\n    > var bool = isProbabilityArray( [ 0.5, new Number(0.8) ] )\n    true\n    > bool = isProbabilityArray( [ 0.8, 1.2 ] )\n    false\n    > bool = isProbabilityArray( [ 0.8, '0.2' ] )\n    false\n\n\nisProbabilityArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive\n    probabilities.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive probabilities.\n\n    Examples\n    --------\n    > var bool = isProbabilityArray.primitives( [ 1.0, 0.0, 0.5 ] )\n    true\n    > bool = isProbabilityArray.primitives( [ 0.3, new Number(0.4) ] )\n    false\n\n\nisProbabilityArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having probability values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having probability values.\n\n    Examples\n    --------\n    > var bool = isProbabilityArray.objects( [ new Number(0.7), new Number(1.0) ] )\n    true\n    > bool = isProbabilityArray.objects( [ 1.0, 0.0, new Number(0.7) ] )\n    false\n\n    See Also\n    --------\n    isArray, isProbability\n","isProbabilityArray.primitives":"\nisProbabilityArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive\n    probabilities.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive probabilities.\n\n    Examples\n    --------\n    > var bool = isProbabilityArray.primitives( [ 1.0, 0.0, 0.5 ] )\n    true\n    > bool = isProbabilityArray.primitives( [ 0.3, new Number(0.4) ] )\n    false\n\n","isProbabilityArray.objects":"\nisProbabilityArray.objects( value )\n    Tests if a value is an array-like object containing only number objects\n    having probability values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        number objects having probability values.\n\n    Examples\n    --------\n    > var bool = isProbabilityArray.objects( [ new Number(0.7), new Number(1.0) ] )\n    true\n    > bool = isProbabilityArray.objects( [ 1.0, 0.0, new Number(0.7) ] )\n    false\n\n    See Also\n    --------\n    isArray, isProbability\n","isPrototypeOf":"\nisPrototypeOf( value, proto )\n    Tests if an object's prototype chain contains a provided prototype.\n\n    The function returns `false` if provided a primitive value.\n\n    This function is generally more robust than the `instanceof` operator (e.g.,\n    where inheritance is performed without using constructors).\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    proto: Object|Function\n        Prototype.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if a provided prototype exists in a prototype chain.\n\n    Examples\n    --------\n    > function Foo() { return this; };\n    > function Bar() { return this; };\n    > inherit( Bar, Foo );\n    > var bar = new Bar();\n    > var bool = isPrototypeOf( bar, Foo.prototype )\n    true\n\n    See Also\n    --------\n    getPrototypeOf\n","isRangeError":"\nisRangeError( value )\n    Tests if a value is a RangeError object.\n\n    This function should *not* be considered robust. While the function should\n    always return `true` if provided a RangeError (or a descendant) object,\n    false positives may occur due to the fact that the RangeError constructor\n    inherits from Error and has no internal class of its own. Hence, RangeError\n    impersonation is possible.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a RangeError object.\n\n    Examples\n    --------\n    > var bool = isRangeError( new RangeError( 'beep' ) )\n    true\n    > bool = isRangeError( {} )\n    false\n\n    See Also\n    --------\n    isError\n","isReadableProperty":"\nisReadableProperty( value, property )\n    Tests if an object's own property is readable.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object's own property is readable.\n\n    Examples\n    --------\n    > var obj = { 'boop': true };\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = false;\n    > desc.set = function setter( v ) { obj.boop = v; };\n    > defineProperty( obj, 'beep', desc );\n    > var bool = isReadableProperty( obj, 'boop' )\n    true\n    > bool = isReadableProperty( obj, 'beep' )\n    false\n\n    See Also\n    --------\n    isReadOnlyProperty, isReadWriteProperty, isReadablePropertyIn, isWritableProperty\n","isReadablePropertyIn":"\nisReadablePropertyIn( value, property )\n    Tests if an object's own or inherited property is readable.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object's own or inherited property is readable.\n\n    Examples\n    --------\n    > var obj = { 'boop': true };\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = false;\n    > desc.set = function setter( v ) { obj.boop = v; };\n    > defineProperty( obj, 'beep', desc );\n    > var bool = isReadablePropertyIn( obj, 'boop' )\n    true\n    > bool = isReadablePropertyIn( obj, 'beep' )\n    false\n\n    See Also\n    --------\n    isReadOnlyPropertyIn, isReadWritePropertyIn, isReadableProperty, isWritablePropertyIn\n","isReadOnlyProperty":"\nisReadOnlyProperty( value, property )\n    Tests if an object's own property is read-only.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object's own property is read-only.\n\n    Examples\n    --------\n    > var obj = { 'boop': true };\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = true;\n    > desc.writable = false;\n    > desc.value = true;\n    > defineProperty( obj, 'beep', desc );\n    > var bool = isReadOnlyProperty( obj, 'boop' )\n    true\n    > bool = isReadOnlyProperty( obj, 'beep' )\n    false\n\n    See Also\n    --------\n    isReadOnlyPropertyIn, isReadWriteProperty, isReadableProperty, isWritableProperty\n","isReadOnlyPropertyIn":"\nisReadOnlyPropertyIn( value, property )\n    Tests if an object's own or inherited property is read-only.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object's own or inherited property is read-\n        only.\n\n    Examples\n    --------\n    > var obj = { 'boop': true };\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = true;\n    > desc.writable = false;\n    > desc.value = true;\n    > defineProperty( obj, 'beep', desc );\n    > var bool = isReadOnlyPropertyIn( obj, 'boop' )\n    true\n    > bool = isReadOnlyPropertyIn( obj, 'beep' )\n    false\n\n    See Also\n    --------\n    isReadOnlyProperty, isReadWritePropertyIn, isReadablePropertyIn, isWritablePropertyIn\n","isReadWriteProperty":"\nisReadWriteProperty( value, property )\n    Tests if an object's own property is readable and writable.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object's own property is readable and writable.\n\n    Examples\n    --------\n    > var obj = { 'boop': true };\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = false;\n    > desc.set = function setter( v ) { obj.boop = v; };\n    > defineProperty( obj, 'beep', desc );\n    > var bool = isReadWriteProperty( obj, 'boop' )\n    true\n    > bool = isReadWriteProperty( obj, 'beep' )\n    false\n\n    See Also\n    --------\n    isReadOnlyProperty, isReadWritePropertyIn, isReadableProperty, isWritableProperty\n","isReadWritePropertyIn":"\nisReadWritePropertyIn( value, property )\n    Tests if an object's own or inherited property is readable and writable.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object's own or inherited property is readable\n        and writable.\n\n    Examples\n    --------\n    > var obj = { 'boop': true };\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = false;\n    > desc.set = function setter( v ) { obj.boop = v; };\n    > defineProperty( obj, 'beep', desc );\n    > var bool = isReadWritePropertyIn( obj, 'boop' )\n    true\n    > bool = isReadWritePropertyIn( obj, 'beep' )\n    false\n\n    See Also\n    --------\n    isReadOnlyPropertyIn, isReadWriteProperty, isReadablePropertyIn, isWritablePropertyIn\n","isReferenceError":"\nisReferenceError( value )\n    Tests if a value is a ReferenceError object.\n\n    This function should *not* be considered robust. While the function should\n    always return `true` if provided a ReferenceError (or a descendant)\n    object, false positives may occur due to the fact that the ReferenceError\n    constructor inherits from Error and has no internal class of its own.\n    Hence, ReferenceError impersonation is possible.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a ReferenceError object.\n\n    Examples\n    --------\n    > var bool = isReferenceError( new ReferenceError( 'beep' ) )\n    true\n    > bool = isReferenceError( {} )\n    false\n\n    See Also\n    --------\n    isError\n","isRegExp":"\nisRegExp( value )\n    Tests if a value is a regular expression.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a regular expression.\n\n    Examples\n    --------\n    > var bool = isRegExp( /\\.+/ )\n    true\n    > bool = isRegExp( {} )\n    false\n\n","isRegExpString":"\nisRegExpString( value )\n    Tests if a value is a regular expression string.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a regular expression string.\n\n    Examples\n    --------\n    > var bool = isRegExpString( '/beep/' )\n    true\n    > bool = isRegExpString( 'beep' )\n    false\n    > bool = isRegExpString( '' )\n    false\n    > bool = isRegExpString( null )\n    false\n\n    See Also\n    --------\n    isRegExp\n","isRelativePath":"\nisRelativePath( value )\n    Tests if a value is a relative path.\n\n    Function behavior is platform-specific. On Windows platforms, the function\n    is equal to `.win32()`. On POSIX platforms, the function is equal to\n    `.posix()`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a relative path.\n\n    Examples\n    --------\n    // Windows environments:\n    > var bool = isRelativePath( 'foo\\\\bar\\\\baz' )\n    true\n\n    // POSIX environments:\n    > bool = isRelativePath( './foo/bar/baz' )\n    true\n\n\nisRelativePath.posix( value )\n    Tests if a value is a POSIX relative path.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a POSIX relative path.\n\n    Examples\n    --------\n    > var bool = isRelativePath.posix( './foo/bar/baz' )\n    true\n    > bool = isRelativePath.posix( '/foo/../bar/baz' )\n    false\n\n\nisRelativePath.win32( value )\n    Tests if a value is a Windows relative path.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a Windows relative path.\n\n    Examples\n    --------\n    > var bool = isRelativePath( 'foo\\\\bar\\\\baz' )\n    true\n    > bool = isRelativePath( 'C:\\\\foo\\\\..\\\\bar\\\\baz' )\n    false\n\n    See Also\n    --------\n    isAbsolutePath\n","isRelativePath.posix":"\nisRelativePath.posix( value )\n    Tests if a value is a POSIX relative path.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a POSIX relative path.\n\n    Examples\n    --------\n    > var bool = isRelativePath.posix( './foo/bar/baz' )\n    true\n    > bool = isRelativePath.posix( '/foo/../bar/baz' )\n    false\n\n","isRelativePath.win32":"\nisRelativePath.win32( value )\n    Tests if a value is a Windows relative path.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a Windows relative path.\n\n    Examples\n    --------\n    > var bool = isRelativePath( 'foo\\\\bar\\\\baz' )\n    true\n    > bool = isRelativePath( 'C:\\\\foo\\\\..\\\\bar\\\\baz' )\n    false\n\n    See Also\n    --------\n    isAbsolutePath\n","isSafeInteger":"\nisSafeInteger( value )\n    Tests if a value is a safe integer.\n\n    An integer valued number is \"safe\" when the number can be exactly\n    represented as a double-precision floating-point number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a safe integer.\n\n    Examples\n    --------\n    > var bool = isSafeInteger( 5.0 )\n    true\n    > bool = isSafeInteger( new Number( 5.0 ) )\n    true\n    > bool = isSafeInteger( 2.0e200 )\n    false\n    > bool = isSafeInteger( -3.14 )\n    false\n    > bool = isSafeInteger( null )\n    false\n\n\nisSafeInteger.isPrimitive( value )\n    Tests if a value is a number primitive having a safe integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a safe\n        integer value.\n\n    Examples\n    --------\n    > var bool = isSafeInteger.isPrimitive( -3.0 )\n    true\n    > bool = isSafeInteger.isPrimitive( new Number( -3.0 ) )\n    false\n\n\nisSafeInteger.isObject( value )\n    Tests if a value is a `Number` object having a safe integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `Number` object having a safe\n        integer value.\n\n    Examples\n    --------\n    > var bool = isSafeInteger.isObject( 3.0 )\n    false\n    > bool = isSafeInteger.isObject( new Number( 3.0 ) )\n    true\n\n    See Also\n    --------\n    isInteger, isNumber\n","isSafeInteger.isPrimitive":"\nisSafeInteger.isPrimitive( value )\n    Tests if a value is a number primitive having a safe integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a number primitive having a safe\n        integer value.\n\n    Examples\n    --------\n    > var bool = isSafeInteger.isPrimitive( -3.0 )\n    true\n    > bool = isSafeInteger.isPrimitive( new Number( -3.0 ) )\n    false\n\n","isSafeInteger.isObject":"\nisSafeInteger.isObject( value )\n    Tests if a value is a `Number` object having a safe integer value.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `Number` object having a safe\n        integer value.\n\n    Examples\n    --------\n    > var bool = isSafeInteger.isObject( 3.0 )\n    false\n    > bool = isSafeInteger.isObject( new Number( 3.0 ) )\n    true\n\n    See Also\n    --------\n    isInteger, isNumber\n","isSafeIntegerArray":"\nisSafeIntegerArray( value )\n    Tests if a value is an array-like object containing only safe integers.\n\n    An integer valued number is \"safe\" when the number can be exactly\n    represented as a double-precision floating-point number.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing\n        only safe integers.\n\n    Examples\n    --------\n    > var arr = [ -3.0, new Number(0.0), 2.0 ];\n    > var bool = isSafeIntegerArray( arr )\n    true\n    > arr = [ -3.0, '3.0' ];\n    > bool = isSafeIntegerArray( arr )\n    false\n\n\nisSafeIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive safe\n    integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive safe integer values.\n\n    Examples\n    --------\n    > var arr = [ -1.0, 10.0 ];\n    > var bool = isSafeIntegerArray.primitives( arr )\n    true\n    > arr = [ -1.0, 0.0, 5.0 ];\n    > bool = isSafeIntegerArray.primitives( arr )\n    true\n    > arr = [ -3.0, new Number(-1.0) ];\n    > bool = isSafeIntegerArray.primitives( arr )\n    false\n\n\nisSafeIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only `Number` objects\n    having safe integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        `Number` objects having safe integer values.\n\n    Examples\n    --------\n    > var arr = [ new Number(1.0), new Number(3.0) ];\n    > var bool = isSafeIntegerArray.objects( arr )\n    true\n    > arr = [ -1.0, 0.0, 3.0 ];\n    > bool = isSafeIntegerArray.objects( arr )\n    false\n    > arr = [ 3.0, new Number(-1.0) ];\n    > bool = isSafeIntegerArray.objects( arr )\n    false\n\n    See Also\n    --------\n    isArray, isSafeInteger\n","isSafeIntegerArray.primitives":"\nisSafeIntegerArray.primitives( value )\n    Tests if a value is an array-like object containing only primitive safe\n    integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        primitive safe integer values.\n\n    Examples\n    --------\n    > var arr = [ -1.0, 10.0 ];\n    > var bool = isSafeIntegerArray.primitives( arr )\n    true\n    > arr = [ -1.0, 0.0, 5.0 ];\n    > bool = isSafeIntegerArray.primitives( arr )\n    true\n    > arr = [ -3.0, new Number(-1.0) ];\n    > bool = isSafeIntegerArray.primitives( arr )\n    false\n\n","isSafeIntegerArray.objects":"\nisSafeIntegerArray.objects( value )\n    Tests if a value is an array-like object containing only `Number` objects\n    having safe integer values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array-like object containing only\n        `Number` objects having safe integer values.\n\n    Examples\n    --------\n    > var arr = [ new Number(1.0), new Number(3.0) ];\n    > var bool = isSafeIntegerArray.objects( arr )\n    true\n    > arr = [ -1.0, 0.0, 3.0 ];\n    > bool = isSafeIntegerArray.objects( arr )\n    false\n    > arr = [ 3.0, new Number(-1.0) ];\n    > bool = isSafeIntegerArray.objects( arr )\n    false\n\n    See Also\n    --------\n    isArray, isSafeInteger\n","isSameValue":"\nisSameValue( a, b )\n    Tests if two arguments are the same value.\n\n    The function differs from the `===` operator in that the function treats\n    `-0` and `+0` as distinct and `NaNs` as the same.\n\n    Parameters\n    ----------\n    a: any\n        First input value.\n\n    b: any\n        Second input value.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether two arguments are the same value.\n\n    Examples\n    --------\n    > var bool = isSameValue( true, true )\n    true\n    > bool = isSameValue( {}, {} )\n    false\n    > bool = isSameValue( -0.0, -0.0 )\n    true\n    > bool = isSameValue( -0.0, 0.0 )\n    false\n    > bool = isSameValue( NaN, NaN )\n    true\n\n    See Also\n    --------\n    isSameValueZero, isStrictEqual\n","isSameValueZero":"\nisSameValueZero( a, b )\n    Tests if two arguments are the same value.\n\n    The function differs from the `===` operator in that the function treats\n    `NaNs` as the same.\n\n    Parameters\n    ----------\n    a: any\n        First input value.\n\n    b: any\n        Second input value.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether two arguments are the same value.\n\n    Examples\n    --------\n    > var bool = isSameValueZero( true, true )\n    true\n    > bool = isSameValueZero( {}, {} )\n    false\n    > bool = isSameValueZero( -0.0, -0.0 )\n    true\n    > bool = isSameValueZero( -0.0, 0.0 )\n    true\n    > bool = isSameValueZero( NaN, NaN )\n    true\n\n    See Also\n    --------\n    isSameValue, isStrictEqual\n","isSharedArrayBuffer":"\nisSharedArrayBuffer( value )\n    Tests if a value is a SharedArrayBuffer.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a SharedArrayBuffer.\n\n    Examples\n    --------\n    // Assuming an environment supports SharedArrayBuffer...\n    > var bool = isSharedArrayBuffer( new SharedArrayBuffer( 10 ) )\n    true\n    > bool = isSharedArrayBuffer( [] )\n    false\n\n    See Also\n    --------\n    isArrayBuffer, isTypedArray\n","isSkewCentrosymmetricMatrix":"\nisSkewCentrosymmetricMatrix( value )\n    Tests if a value is a skew-centrosymmetric matrix.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a skew-centrosymmetric matrix.\n\n    Examples\n    --------\n    > var mat = ndarray( 'generic', 2 );\n    > var M = mat( [ 2, 1, -1, -2 ], [ 2, 2 ], [ 2, 1 ], 0, 'row-major' );\n    > var bool = isSkewCentrosymmetricMatrix( M )\n    true\n    > bool = isSkewCentrosymmetricMatrix( [ 1, 2, 3, 4 ] )\n    false\n    > bool = isSkewCentrosymmetricMatrix( 3.14 )\n    false\n    > bool = isSkewCentrosymmetricMatrix( {} )\n    false\n\n    See Also\n    --------\n    isCentrosymmetricMatrix, isMatrixLike, isSkewSymmetricMatrix\n","isSkewPersymmetricMatrix":"\nisSkewPersymmetricMatrix( value )\n    Tests if a value is a skew-persymmetric matrix.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a skew-persymmetric matrix.\n\n    Examples\n    --------\n    > var mat = ndarray( 'generic', 2 );\n    > var M = mat( [ 1, 0, 0, -1 ], [ 2, 2 ], [ 2, 1 ], 0, 'row-major' );\n    > var bool = isSkewPersymmetricMatrix( M )\n    true\n    > bool = isSkewPersymmetricMatrix( [ 1, 2, 3, 4 ] )\n    false\n    > bool = isSkewPersymmetricMatrix( 3.14 )\n    false\n    > bool = isSkewPersymmetricMatrix( {} )\n    false\n\n    See Also\n    --------\n    isMatrixLike, isPersymmetricMatrix, isSkewSymmetricMatrix\n","isSkewSymmetricMatrix":"\nisSkewSymmetricMatrix( value )\n    Tests if a value is a skew-symmetric (or antisymmetric) matrix.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a skew-symmetric matrix.\n\n    Examples\n    --------\n    > var mat = ndarray( 'generic', 2 );\n    > var M = mat( [ 0, -1, 1, 0 ], [ 2, 2 ], [ 2, 1 ], 0, 'row-major' );\n    > var bool = isSkewSymmetricMatrix( M )\n    true\n    > bool = isSkewSymmetricMatrix( [ 1, 2, 3, 4 ] )\n    false\n    > bool = isSkewSymmetricMatrix( 3.14 )\n    false\n    > bool = isSkewSymmetricMatrix( {} )\n    false\n\n    See Also\n    --------\n    isMatrixLike, isSkewSymmetricMatrix, isSquareMatrix\n","isSquareMatrix":"\nisSquareMatrix( value )\n    Tests if a value is a 2-dimensional ndarray-like object having equal\n    dimensions.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a 2-dimensional ndarray-like\n        object having equal dimensions.\n\n    Examples\n    --------\n    > var mat = ndarray( 'generic', 2 );\n    > var M = mat( [ 0, 0, 0, 0 ], [ 2, 2 ], [ 2, 1 ], 0, 'row-major' );\n    > var bool = isSquareMatrix( M )\n    true\n    > bool = isSquareMatrix( [ 1, 2, 3, 4 ] )\n    false\n    > bool = isSquareMatrix( 3.14 )\n    false\n    > bool = isSquareMatrix( {} )\n    false\n\n    See Also\n    --------\n    isMatrixLike, isSymmetricMatrix\n","isStrictEqual":"\nisStrictEqual( a, b )\n    Tests if two arguments are strictly equal.\n\n    The function differs from the `===` operator in that the function treats\n    `-0` and `+0` as distinct.\n\n    Parameters\n    ----------\n    a: any\n        First input value.\n\n    b: any\n        Second input value.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether two arguments are strictly equal.\n\n    Examples\n    --------\n    > var bool = isStrictEqual( true, true )\n    true\n    > bool = isStrictEqual( {}, {} )\n    false\n    > bool = isStrictEqual( -0.0, -0.0 )\n    true\n    > bool = isStrictEqual( -0.0, 0.0 )\n    false\n    > bool = isStrictEqual( NaN, NaN )\n    false\n\n    See Also\n    --------\n    isSameValue\n","isString":"\nisString( value )\n    Tests if a value is a string.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a string.\n\n    Examples\n    --------\n    > var bool = isString( 'beep' )\n    true\n    > bool = isString( new String( 'beep' ) )\n    true\n    > bool = isString( 5 )\n    false\n\n\nisString.isPrimitive( value )\n    Tests if a value is a string primitive.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a string primitive.\n\n    Examples\n    --------\n    > var bool = isString.isPrimitive( 'beep' )\n    true\n    > bool = isString.isPrimitive( new String( 'beep' ) )\n    false\n\n\nisString.isObject( value )\n    Tests if a value is a `String` object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `String` object.\n\n    Examples\n    --------\n    > var bool = isString.isObject( new String( 'beep' ) )\n    true\n    > bool = isString.isObject( 'beep' )\n    false\n\n","isString.isPrimitive":"\nisString.isPrimitive( value )\n    Tests if a value is a string primitive.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a string primitive.\n\n    Examples\n    --------\n    > var bool = isString.isPrimitive( 'beep' )\n    true\n    > bool = isString.isPrimitive( new String( 'beep' ) )\n    false\n\n","isString.isObject":"\nisString.isObject( value )\n    Tests if a value is a `String` object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a `String` object.\n\n    Examples\n    --------\n    > var bool = isString.isObject( new String( 'beep' ) )\n    true\n    > bool = isString.isObject( 'beep' )\n    false\n\n","isStringArray":"\nisStringArray( value )\n    Tests if a value is an array of strings.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array of strings.\n\n    Examples\n    --------\n    > var bool = isStringArray( [ 'abc', 'def' ] )\n    true\n    > bool = isStringArray( [ 'abc', 123 ] )\n    false\n\n\nisStringArray.primitives( value )\n    Tests if a value is an array containing only string primitives.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array containing only string\n        primitives.\n\n    Examples\n    --------\n    > var arr = [ 'abc', 'def' ];\n    > var bool = isStringArray.primitives( arr )\n    true\n    > arr = [ 'abc', new String( 'def' ) ];\n    > bool = isStringArray.primitives( arr )\n    false\n\n\nisStringArray.objects( value )\n    Tests if a value is an array containing only `String` objects.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array containing only `String`\n        objects.\n\n    Examples\n    --------\n    > var arr = [ new String( 'ab' ), new String( 'cd' ) ];\n    > var bool = isStringArray.objects( arr )\n    true\n    > arr = [ new String( 'abc' ), 'def' ];\n    > bool = isStringArray.objects( arr )\n    false\n\n    See Also\n    --------\n    isArray, isString\n","isStringArray.primitives":"\nisStringArray.primitives( value )\n    Tests if a value is an array containing only string primitives.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array containing only string\n        primitives.\n\n    Examples\n    --------\n    > var arr = [ 'abc', 'def' ];\n    > var bool = isStringArray.primitives( arr )\n    true\n    > arr = [ 'abc', new String( 'def' ) ];\n    > bool = isStringArray.primitives( arr )\n    false\n\n","isStringArray.objects":"\nisStringArray.objects( value )\n    Tests if a value is an array containing only `String` objects.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array containing only `String`\n        objects.\n\n    Examples\n    --------\n    > var arr = [ new String( 'ab' ), new String( 'cd' ) ];\n    > var bool = isStringArray.objects( arr )\n    true\n    > arr = [ new String( 'abc' ), 'def' ];\n    > bool = isStringArray.objects( arr )\n    false\n\n    See Also\n    --------\n    isArray, isString\n","isSymbol":"\nisSymbol( value )\n    Tests if a value is a symbol.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a symbol.\n\n    Examples\n    --------\n    > var bool = isSymbol( Symbol( 'beep' ) )\n    true\n    > bool = isSymbol( Object( Symbol( 'beep' ) ) )\n    true\n    > bool = isSymbol( {} )\n    false\n    > bool = isSymbol( null )\n    false\n    > bool = isSymbol( true )\n    false\n\n","isSymbolArray":"\nisSymbolArray( value )\n    Tests if a value is an array-like object containing only symbols.\n\n    In pre-ES2015 environments, the function always returns `false`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only symbols.\n\n    Examples\n    --------\n    > var bool = isSymbolArray( [ Symbol( 'beep' ), Symbol( 'boop' ) ] )\n    true\n    > bool = isSymbolArray( Symbol( 'beep' ) )\n    false\n    > bool = isSymbolArray( [] )\n    false\n    > bool = isSymbolArray( {} )\n    false\n    > bool = isSymbolArray( null )\n    false\n    > bool = isSymbolArray( true )\n    false\n\n\nisSymbolArray.primitives( value )\n    Tests if a value is an array-like object containing only `symbol`\n    primitives.\n\n    In pre-ES2015 environments, the function always returns `false`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only `symbol` primitives.\n\n    Examples\n    --------\n    > var bool = isSymbolArray.primitives( [ Symbol( 'beep' ) ] )\n    true\n    > bool = isSymbolArray.primitives( [ Object( Symbol( 'beep' ) ) ] )\n    false\n    > bool = isSymbolArray.primitives( [] )\n    false\n    > bool = isSymbolArray.primitives( {} )\n    false\n    > bool = isSymbolArray.primitives( null )\n    false\n    > bool = isSymbolArray.primitives( true )\n    false\n\n\nisSymbolArray.objects( value )\n    Tests if a value is an array-like object containing only `Symbol`\n    objects.\n\n    In pre-ES2015 environments, the function always returns `false`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only `Symbol` objects.\n\n    Examples\n    --------\n    > var bool = isSymbolArray.objects( [ Object( Symbol( 'beep' ) ) ] )\n    true\n    > bool = isSymbolArray.objects( [ Symbol( 'beep' ) ] )\n    false\n    > bool = isSymbolArray.objects( [] )\n    false\n    > bool = isSymbolArray.objects( {} )\n    false\n    > bool = isSymbolArray.objects( null )\n    false\n    > bool = isSymbolArray.objects( true )\n    false\n\n    See Also\n    --------\n    isArray, isSymbol\n","isSymbolArray.primitives":"\nisSymbolArray.primitives( value )\n    Tests if a value is an array-like object containing only `symbol`\n    primitives.\n\n    In pre-ES2015 environments, the function always returns `false`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only `symbol` primitives.\n\n    Examples\n    --------\n    > var bool = isSymbolArray.primitives( [ Symbol( 'beep' ) ] )\n    true\n    > bool = isSymbolArray.primitives( [ Object( Symbol( 'beep' ) ) ] )\n    false\n    > bool = isSymbolArray.primitives( [] )\n    false\n    > bool = isSymbolArray.primitives( {} )\n    false\n    > bool = isSymbolArray.primitives( null )\n    false\n    > bool = isSymbolArray.primitives( true )\n    false\n\n","isSymbolArray.objects":"\nisSymbolArray.objects( value )\n    Tests if a value is an array-like object containing only `Symbol`\n    objects.\n\n    In pre-ES2015 environments, the function always returns `false`.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only `Symbol` objects.\n\n    Examples\n    --------\n    > var bool = isSymbolArray.objects( [ Object( Symbol( 'beep' ) ) ] )\n    true\n    > bool = isSymbolArray.objects( [ Symbol( 'beep' ) ] )\n    false\n    > bool = isSymbolArray.objects( [] )\n    false\n    > bool = isSymbolArray.objects( {} )\n    false\n    > bool = isSymbolArray.objects( null )\n    false\n    > bool = isSymbolArray.objects( true )\n    false\n\n    See Also\n    --------\n    isArray, isSymbol\n","isSymmetricMatrix":"\nisSymmetricMatrix( value )\n    Tests if a value is a square matrix which equals its transpose.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a symmetric matrix.\n\n    Examples\n    --------\n    > var mat = ndarray( 'generic', 2 );\n    > var M = mat( [ 0, 1, 1, 2 ], [ 2, 2 ], [ 2, 1 ], 0, 'row-major' );\n    > var bool = isSymmetricMatrix( M )\n    true\n    > bool = isSymmetricMatrix( [ 1, 2, 3, 4 ] )\n    false\n    > bool = isSymmetricMatrix( 3.14 )\n    false\n    > bool = isSymmetricMatrix( {} )\n    false\n\n    See Also\n    --------\n    isMatrixLike, isNonSymmetricMatrix, isSquareMatrix\n","isSyntaxError":"\nisSyntaxError( value )\n    Tests if a value is a SyntaxError object.\n\n    This function should *not* be considered robust. While the function should\n    always return `true` if provided a SyntaxError (or a descendant) object,\n    false positives may occur due to the fact that the SyntaxError constructor\n    inherits from Error and has no internal class of its own. Hence, SyntaxError\n    impersonation is possible.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a SyntaxError object.\n\n    Examples\n    --------\n    > var bool = isSyntaxError( new SyntaxError( 'beep' ) )\n    true\n    > bool = isSyntaxError( {} )\n    false\n\n    See Also\n    --------\n    isError\n","isTruthy":"\nisTruthy( value )\n    Tests if a value is a value which translates to `true` when evaluated in a\n    boolean context.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is truthy.\n\n    Examples\n    --------\n     > var bool = isTruthy( true )\n    true\n    > bool = isTruthy( {} )\n    true\n    > bool = isTruthy( [] )\n    true\n    > bool = isTruthy( false )\n    false\n    > bool = isTruthy( '' )\n    false\n    > bool = isTruthy( 0 )\n    false\n    > bool = isTruthy( null )\n    false\n    > bool = isTruthy( void 0 )\n    false\n    > bool = isTruthy( NaN )\n    false\n\n    See Also\n    --------\n    isFalsy\n","isTruthyArray":"\nisTruthyArray( value )\n    Tests if a value is an array-like object containing only truthy values.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is an array-like object containing\n        only truthy values.\n\n    Examples\n    --------\n    > var bool = isTruthyArray( [ {}, [] ] )\n    true\n    > bool = isTruthyArray( [ null, '' ] )\n    false\n    > bool = isTruthyArray( [] )\n    false\n\n    See Also\n    --------\n    isFalsyArray, isTruthy\n","isTypedArray":"\nisTypedArray( value )\n    Tests if a value is a typed array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a typed array.\n\n    Examples\n    --------\n    > var bool = isTypedArray( new Int8Array( 10 ) )\n    true\n\n    See Also\n    --------\n    isArray, isTypedArrayLike\n","isTypedArrayLength":"\nisTypedArrayLength( value )\n    Tests if a value is a valid typed array length.\n\n    A valid length property for a typed array instance is any integer value on\n    the interval [0, 2^53-1].\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a valid typed array length.\n\n    Examples\n    --------\n    > var bool = isTypedArrayLength( 5 )\n    true\n    > bool = isTypedArrayLength( 2.0e200 )\n    false\n    > bool = isTypedArrayLength( -3.14 )\n    false\n    > bool = isTypedArrayLength( null )\n    false\n\n    See Also\n    --------\n    isArrayLength, isTypedArray\n","isTypedArrayLike":"\nisTypedArrayLike( value )\n    Tests if a value is typed-array-like.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is typed-array-like.\n\n    Examples\n    --------\n    > var bool = isTypedArrayLike( new Int16Array() )\n    true\n    > bool = isTypedArrayLike({\n    ...    'length': 10,\n    ...    'byteOffset': 0,\n    ...    'byteLength': 10,\n    ...    'BYTES_PER_ELEMENT': 4\n    ... })\n    true\n\n    See Also\n    --------\n    isTypedArray\n","isTypeError":"\nisTypeError( value )\n    Tests if a value is a TypeError object.\n\n    This function should *not* be considered robust. While the function should\n    always return `true` if provided a TypeError (or a descendant) object,\n    false positives may occur due to the fact that the TypeError constructor\n    inherits from Error and has no internal class of its own. Hence, TypeError\n    impersonation is possible.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a TypeError object.\n\n    Examples\n    --------\n    > var bool = isTypeError( new TypeError( 'beep' ) )\n    true\n    > bool = isTypeError( {} )\n    false\n\n    See Also\n    --------\n    isError\n","isUint8Array":"\nisUint8Array( value )\n    Tests if a value is a Uint8Array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a Uint8Array.\n\n    Examples\n    --------\n    > var bool = isUint8Array( new Uint8Array( 10 ) )\n    true\n    > bool = isUint8Array( [] )\n    false\n\n    See Also\n    --------\n    isTypedArray, isUint16Array, isUint32Array\n","isUint8ClampedArray":"\nisUint8ClampedArray( value )\n    Tests if a value is a Uint8ClampedArray.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a Uint8ClampedArray.\n\n    Examples\n    --------\n    > var bool = isUint8ClampedArray( new Uint8ClampedArray( 10 ) )\n    true\n    > bool = isUint8ClampedArray( [] )\n    false\n\n    See Also\n    --------\n    isTypedArray, isUint8Array\n","isUint16Array":"\nisUint16Array( value )\n    Tests if a value is a Uint16Array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a Uint16Array.\n\n    Examples\n    --------\n    > var bool = isUint16Array( new Uint16Array( 10 ) )\n    true\n    > bool = isUint16Array( [] )\n    false\n\n    See Also\n    --------\n    isTypedArray, isUint32Array, isUint8Array\n","isUint32Array":"\nisUint32Array( value )\n    Tests if a value is a Uint32Array.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a Uint32Array.\n\n    Examples\n    --------\n    > var bool = isUint32Array( new Uint32Array( 10 ) )\n    true\n    > bool = isUint32Array( [] )\n    false\n\n    See Also\n    --------\n    isTypedArray, isUint16Array, isUint8Array\n","isUNCPath":"\nisUNCPath( value )\n    Tests if a value is a UNC path.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a UNC path.\n\n    Examples\n    --------\n    > var bool = isUNCPath( '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz' )\n    true\n    > bool = isUNCPath( '/foo/bar/baz' )\n    false\n\n","isUndefined":"\nisUndefined( value )\n    Tests if a value is undefined.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is undefined.\n\n    Examples\n    --------\n    > var bool = isUndefined( void 0 )\n    true\n    > bool = isUndefined( null )\n    false\n\n    See Also\n    --------\n    isNull, isUndefinedOrNull\n","isUndefinedOrNull":"\nisUndefinedOrNull( value )\n    Tests if a value is undefined or null.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is undefined or null.\n\n    Examples\n    --------\n    > var bool = isUndefinedOrNull( void 0 )\n    true\n    > bool = isUndefinedOrNull( null )\n    true\n    > bool = isUndefinedOrNull( false )\n    false\n\n    See Also\n    --------\n    isNull, isUndefined\n","isUnityProbabilityArray":"\nisUnityProbabilityArray( value )\n    Tests if a value is an array of probabilities that sum to one.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an array of probabilities that sum\n        to one.\n\n    Examples\n    --------\n    > var bool = isUnityProbabilityArray( [ 0.25, 0.5, 0.25 ] )\n    true\n    > bool = isUnityProbabilityArray( new Uint8Array( [ 0, 1 ] ) )\n    true\n    > bool = isUnityProbabilityArray( [ 0.4, 0.4, 0.4 ] )\n    false\n    > bool = isUnityProbabilityArray( [ 3.14, 0.0 ] )\n    false\n\n    See Also\n    --------\n    isProbability, isProbabilityArray\n","isUppercase":"\nisUppercase( value )\n    Tests if a value is an uppercase string.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is an uppercase string.\n\n    Examples\n    --------\n    > var bool = isUppercase( 'HELLO' )\n    true\n    > bool = isUppercase( 'World' )\n    false\n\n    See Also\n    --------\n    isLowercase, isString\n","isURI":"\nisURI( value )\n    Tests if a value is a URI.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a URI.\n\n    Examples\n    --------\n    > var bool = isURI( 'http://google.com' )\n    true\n    > bool = isURI( 'http://localhost/' )\n    true\n    > bool = isURI( 'http://example.w3.org/path%20with%20spaces.html' )\n    true\n    > bool = isURI( 'ftp://ftp.is.co.za/rfc/rfc1808.txt' )\n    true\n\n    // No scheme:\n    > bool = isURI( '' )\n    false\n    > bool = isURI( 'foo@bar' )\n    false\n    > bool = isURI( '://foo/' )\n    false\n\n    // Illegal characters:\n    > bool = isURI( 'http://<foo>' )\n    false\n\n    // Invalid path:\n    > bool = isURI( 'http:////foo.html' )\n    false\n\n    // Incomplete hex escapes:\n    > bool = isURI( 'http://example.w3.org/%a' )\n    false\n\n","isURIError":"\nisURIError( value )\n    Tests if a value is a URIError object.\n\n    This function should *not* be considered robust. While the function should\n    always return `true` if provided a URIError (or a descendant) object,\n    false positives may occur due to the fact that the URIError constructor\n    inherits from Error and has no internal class of its own. Hence, URIError\n    impersonation is possible.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether value is a URIError object.\n\n    Examples\n    --------\n    > var bool = isURIError( new URIError( 'beep' ) )\n    true\n    > bool = isURIError( {} )\n    false\n\n    See Also\n    --------\n    isError\n","isVectorLike":"\nisVectorLike( value )\n    Tests if a value is a 1-dimensional ndarray-like object.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a value is a 1-dimensional ndarray-like\n        object.\n\n    Examples\n    --------\n    > var M = {};\n    > M.data = [ 0, 0, 0, 0 ];\n    > M.ndims = 1;\n    > M.shape = [ 4 ];\n    > M.strides = [ 1 ];\n    > M.offset = 0;\n    > M.order = 'row-major';\n    > M.dtype = 'generic';\n    > M.length = 4;\n    > M.flags = {};\n    > M.get = function get( i, j ) {};\n    > M.set = function set( i, j ) {};\n    > var bool = isVectorLike( M )\n    true\n    > bool = isVectorLike( [ 1, 2, 3, 4 ] )\n    false\n    > bool = isVectorLike( 3.14 )\n    false\n    > bool = isVectorLike( {} )\n    false\n\n    See Also\n    --------\n    isArray, isArrayLike, isMatrixLike, isndarrayLike, isTypedArrayLike\n","isWhitespace":"\nisWhitespace( str )\n    Tests whether a string contains only white space characters.\n\n    A white space character is defined as one of the 25 characters defined as a\n    white space (\"WSpace=Y\",\"WS\") character in the Unicode 9.0 character\n    database, as well as one related white space character without the Unicode\n    character property \"WSpace=Y\" (zero width non-breaking space which was\n    deprecated as of Unicode 3.2).\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a string contains only white space\n        characters.\n\n    Examples\n    --------\n    > var bool = isWhitespace( '       ' )\n    true\n    > bool = isWhitespace( 'abcdef' )\n    false\n    > bool = isWhitespace( '' )\n    false\n\n    See Also\n    --------\n    RE_WHITESPACE\n","isWritableProperty":"\nisWritableProperty( value, property )\n    Tests if an object's own property is writable.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object's own property is writable.\n\n    Examples\n    --------\n    > var obj = { 'boop': true };\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = false;\n    > desc.writable = false;\n    > desc.value = 'beep';\n    > defineProperty( obj, 'beep', desc );\n    > var bool = isWritableProperty( obj, 'boop' )\n    true\n    > bool = isWritableProperty( obj, 'beep' )\n    false\n\n    See Also\n    --------\n    isReadableProperty, isReadWriteProperty, isWritablePropertyIn, isWriteOnlyProperty\n","isWritablePropertyIn":"\nisWritablePropertyIn( value, property )\n    Tests if an object's own or inherited property is writable.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object's own or inherited property is writable.\n\n    Examples\n    --------\n    > var obj = { 'boop': true };\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = false;\n    > desc.writable = false;\n    > desc.value = 'beep';\n    > defineProperty( obj, 'beep', desc );\n    > var bool = isWritablePropertyIn( obj, 'boop' )\n    true\n    > bool = isWritablePropertyIn( obj, 'beep' )\n    false\n\n    See Also\n    --------\n    isReadablePropertyIn, isReadWritePropertyIn, isWritableProperty, isWriteOnlyPropertyIn\n","isWriteOnlyProperty":"\nisWriteOnlyProperty( value, property )\n    Tests if an object's own property is write-only.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object's own property is write-only.\n\n    Examples\n    --------\n    > var obj = { 'boop': true };\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = true;\n    > desc.set = function setter( v ) { obj.boop = v; };\n    > defineProperty( obj, 'beep', desc );\n    > var bool = isWriteOnlyProperty( obj, 'boop' )\n    false\n    > bool = isWriteOnlyProperty( obj, 'beep' )\n    true\n\n    See Also\n    --------\n    isReadOnlyProperty, isReadWriteProperty, isWritableProperty, isWriteOnlyPropertyIn\n","isWriteOnlyPropertyIn":"\nisWriteOnlyPropertyIn( value, property )\n    Tests if an object's own or inherited property is write-only.\n\n    Parameters\n    ----------\n    value: any\n        Value to test.\n\n    property: any\n        Property to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an object's own or inherited property is write-\n        only.\n\n    Examples\n    --------\n    > var obj = { 'boop': true };\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = true;\n    > desc.set = function setter( v ) { obj.boop = v; };\n    > defineProperty( obj, 'beep', desc );\n    > var bool = isWriteOnlyPropertyIn( obj, 'boop' )\n    false\n    > bool = isWriteOnlyPropertyIn( obj, 'beep' )\n    true\n\n    See Also\n    --------\n    isReadOnlyPropertyIn, isReadWritePropertyIn, isWritablePropertyIn, isWriteOnlyProperty\n","iterAdd":"\niterAdd( iter0, ...iterator )\n    Returns an iterator which performs element-wise addition of two or more\n    iterators.\n\n    The length of the returned iterator is equal to the length of the shortest\n    provided iterator. In other words, the returned iterator ends once *one* of\n    the provided iterators ends.\n\n    If provided a numeric value as an iterator argument, the value is broadcast\n    as an infinite iterator which always returns the provided value.\n\n    If an environment supports Symbol.iterator and provided iterators are\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iter0: Object\n        Input iterator.\n\n    iterator: ...Object\n        Iterators to add.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it1 = array2iterator( [ 1.0, 2.0 ] );\n    > var it2 = array2iterator( [ 3.0, 4.0 ] );\n    > var it = iterAdd( it1, it2 );\n    > var v = it.next().value\n    4.0\n    > v = it.next().value\n    6.0\n    > var bool = it.next().done\n    true\n\n    See Also\n    --------\n    iterDivide, iterMultiply, iterSubtract\n","iterAdvance":"\niterAdvance( iterator[, n] )\n    Advances an entire iterator.\n\n    The function *eagerly* advances an input iterator `n` iterations or until\n    the input iterator finishes, whichever comes first.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator to advance.\n\n    n: integer (optional)\n        Number of iterations. Default: 1e308.\n\n    Returns\n    -------\n    iterator: Object\n        Input iterator.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 0, 0, 0, 0, 1 ] );\n    > var it = iterAdvance( arr, 4 );\n    > var v = it.next().value\n    1\n    > var bool = it.next().done\n    true\n\n    See Also\n    --------\n    iterHead, iterSlice\n","iterAny":"\niterAny( iterator )\n    Tests whether at least one iterated value is truthy.\n\n    The function immediately returns upon encountering a truthy value.\n\n    If provided an iterator which does not return any iterated values, the\n    function returns `false`.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator over which to iterate.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if a value is truthy; otherwise, the\n        function returns `false`.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 0, 0, 0, 0, 1 ] );\n    > var bool = iterAny( arr )\n    true\n\n    See Also\n    --------\n    iterAnyBy, iterEvery, iterForEach, iterNone, iterSome\n","iterAnyBy":"\niterAnyBy( iterator, predicate[, thisArg ] )\n    Tests whether at least one iterated value passes a test implemented by a\n    predicate function.\n\n    The predicate function is provided two arguments:\n\n    - value: iterated value\n    - index: iteration index\n\n    The function immediately returns upon encountering a truthy return value.\n\n    If provided an iterator which does not return any iterated values, the\n    function returns `false`.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator over which to iterate.\n\n    predicate: Function\n        The test function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if a predicate function returns a truthy\n        value for any iterated value. Otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 0, 0, 0, 0, 1 ] );\n    > function fcn( v ) { return ( v === 1 ); };\n    > var bool = iterAnyBy( arr, fcn )\n    true\n\n    See Also\n    --------\n    iterAny, iterEveryBy, iterForEach, iterNoneBy, iterSomeBy\n","iterator2array":"\niterator2array( iterator[, out][, mapFcn[, thisArg]] )\n    Creates (or fills) an array from an iterator.\n\n    When invoked, an input function is provided two arguments:\n\n    - value: iterated value\n    - index: iterated value index (zero-based)\n\n    If provided an output array, the function fills the output array with\n    iterated values.\n\n    Iteration stops when an output array is full or an iterator finishes;\n    whichever comes first.\n\n    Parameters\n    ----------\n    iterator: Object\n        Source iterator.\n\n    out: ArrayLikeObject (optional)\n        Output array-like object.\n\n    mapFcn: Function (optional)\n        Function to invoke for each iterated value.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: ArrayLikeObject\n        Output array.\n\n    Examples\n    --------\n    > var opts = { 'iter': 10 };\n    > var arr = iterator2array( random.iterators.randu( opts ) )\n\n    See Also\n    --------\n    array2iterator, iterator2arrayview\n","iterator2arrayview":"\niterator2arrayview( iterator, dest[, begin[, end]][, mapFcn[, thisArg]] )\n    Fills an array-like object view with values returned from an iterator.\n\n    When invoked, an input function is provided three arguments:\n\n    - value: iterated value\n    - index: destination index (zero-based)\n    - n: iteration index (zero-based)\n\n    Iteration stops when an output array view is full or an iterator finishes;\n    whichever comes first.\n\n    Parameters\n    ----------\n    iterator: Object\n        Source iterator.\n\n    dest: ArrayLikeObject\n        Output array-like object.\n\n    begin: integer (optional)\n        Starting index (inclusive). When negative, determined relative to the\n        last element. Default: 0.\n\n    end: integer (optional)\n        Ending index (non-inclusive). When negative, determined relative to the\n        last element. Default: dest.length.\n\n    mapFcn: Function (optional)\n        Function to invoke for each iterated value.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: ArrayLikeObject\n        Output array.\n\n    Examples\n    --------\n    > var it = random.iterators.randu({ 'iter': 10 });\n    > var out = new Float64Array( 20 );\n    > var arr = iterator2arrayview( it, out, 5, 15 )\n\n    See Also\n    --------\n    iterator2array, arrayview2iterator, iterator2arrayviewRight\n","iterator2arrayviewRight":"\niterator2arrayviewRight( iterator, dest[, begin[, end]][, mapFcn[, thisArg]] )\n    Fills an array-like object view from right to left with values returned from\n    an iterator.\n\n    When invoked, an input function is provided three arguments:\n\n    - value: iterated value\n    - index: destination index (zero-based)\n    - n: iteration index (zero-based)\n\n    Iteration stops when an output array view is full or an iterator finishes;\n    whichever comes first.\n\n    Parameters\n    ----------\n    iterator: Object\n        Source iterator.\n\n    dest: ArrayLikeObject\n        Output array-like object.\n\n    begin: integer (optional)\n        Starting index (inclusive). When negative, determined relative to the\n        last element. Default: 0.\n\n    end: integer (optional)\n        Ending index (non-inclusive). When negative, determined relative to the\n        last element. Default: dest.length.\n\n    mapFcn: Function (optional)\n        Function to invoke for each iterated value.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: ArrayLikeObject\n        Output array.\n\n    Examples\n    --------\n    > var it = random.iterators.randu({ 'iter': 10 });\n    > var out = new Float64Array( 20 );\n    > var arr = iterator2arrayviewRight( it, out, 5, 15 )\n\n    See Also\n    --------\n    iterator2array, arrayview2iteratorRight, iterator2arrayview\n","iteratorStream":"\niteratorStream( iterator[, options] )\n    Creates a readable stream from an iterator.\n\n    In object mode, `null` is a reserved value. If an iterator generates `null`\n    values (e.g., as a means to encode missing values), the stream will\n    prematurely end. Consider an alternative encoding or explicitly map `null`\n    values to a different value by wrapping the provided iterator with another\n    iterator.\n\n    In binary mode, if an iterator generates `undefined` values, the stream will\n    emit an error. Consider providing a custom serialization function or\n    explicitly map `undefined` values to a different value by wrapping the\n    provided iterator with another iterator.\n\n    If a serialization function fails to return a string or Buffer, the stream\n    emits an error.\n\n    Parameters\n    ----------\n    iterator: Object\n        Source iterator.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before pausing iteration.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.serialize: Function (optional)\n        Serialization function. The default behavior is to serialize iterated\n        values as JSON strings. This option is only applicable when a stream is\n        not in \"objectMode\".\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var it = random.iterators.randu( opts );\n    > var s = iteratorStream( it );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\niteratorStream.factory( [options] )\n    Returns a function for creating readable streams from iterators.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before pausing iteration.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.serialize: Function (optional)\n        Serialization function. The default behavior is to serialize iterated\n        values as JSON strings. This option is only applicable when a stream is\n        not in \"objectMode\".\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = iteratorStream.factory( opts );\n\n\niteratorStream.objectMode( iterator[, options] )\n    Returns an \"objectMode\" readable stream from an iterator.\n\n    In object mode, `null` is a reserved value. If an iterator generates `null`\n    values (e.g., as a means to encode missing values), the stream will\n    prematurely end. Consider an alternative encoding or explicitly map `null`\n    values to a different value by wrapping the provided iterator with another\n    iterator.\n\n    Parameters\n    ----------\n    iterator: Object\n        Source iterator.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before pausing iteration.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var it = random.iterators.randu( opts );\n    > var s = iteratorStream.objectMode( it );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    arrayStream\n","iteratorStream.factory":"\niteratorStream.factory( [options] )\n    Returns a function for creating readable streams from iterators.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before pausing iteration.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.serialize: Function (optional)\n        Serialization function. The default behavior is to serialize iterated\n        values as JSON strings. This option is only applicable when a stream is\n        not in \"objectMode\".\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = iteratorStream.factory( opts );\n\n","iteratorStream.objectMode":"\niteratorStream.objectMode( iterator[, options] )\n    Returns an \"objectMode\" readable stream from an iterator.\n\n    In object mode, `null` is a reserved value. If an iterator generates `null`\n    values (e.g., as a means to encode missing values), the stream will\n    prematurely end. Consider an alternative encoding or explicitly map `null`\n    values to a different value by wrapping the provided iterator with another\n    iterator.\n\n    Parameters\n    ----------\n    iterator: Object\n        Source iterator.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before pausing iteration.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var it = random.iterators.randu( opts );\n    > var s = iteratorStream.objectMode( it );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    arrayStream\n","IteratorSymbol":"\nIteratorSymbol\n    Iterator symbol.\n\n    This symbol specifies the default iterator for an object.\n\n    The symbol is only supported in ES6/ES2015+ environments. For non-supporting\n    environments, the value is `null`.\n\n    Examples\n    --------\n    > var s = IteratorSymbol\n\n    See Also\n    --------\n    Symbol\n","iterawgn":"\niterawgn( iterator, sigma[, options] )\n    Returns an iterator which introduces additive white Gaussian noise (AWGN)\n    with standard deviation `sigma`.\n\n    If an environment supports Symbol.iterator and the provided iterator is\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    sigma: number\n        Standard deviation of the noise.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating pseudorandom numbers\n        drawn from a standard normal distribution. If provided, the `state` and\n        `seed` options are ignored. In order to seed the returned iterator, one\n        must seed the provided `prng` (assuming the provided `prng` is\n        seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function|null\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Pseudorandom random number generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var src = iterSineWave();\n    > var it = iterawgn( src, 0.5 );\n    > var v = it.next().value\n    <number>\n    > v = it.next().value\n    <number>\n\n    See Also\n    --------\n    iterawln, iterawun\n","iterawln":"\niterawln( iterator, sigma[, options] )\n    Returns an iterator which introduces additive white Laplacian noise (AWLN)\n    with standard deviation `sigma`.\n\n    If an environment supports Symbol.iterator and the provided iterator is\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    sigma: number\n        Standard deviation of the noise.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval [0,1). If provided, the\n        `state` and `seed` options are ignored. In order to seed the returned\n        iterator, one must seed the provided `prng` (assuming the provided\n        `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Pseudorandom random number generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var src = iterSineWave();\n    > var it = iterawln( src, 0.5 );\n    > var v = it.next().value\n    <number>\n    > v = it.next().value\n    <number>\n\n    See Also\n    --------\n    iterawgn, iterawun\n","iterawun":"\niterawun( iterator, sigma[, options] )\n    Returns an iterator which introduces additive white uniform noise (AWUN)\n    with standard deviation `sigma`.\n\n    If an environment supports Symbol.iterator and the provided iterator is\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    sigma: number\n        Standard deviation of the noise.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval [0,1). If provided, the\n        `state` and `seed` options are ignored. In order to seed the returned\n        iterator, one must seed the provided `prng` (assuming the provided\n        `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Pseudorandom random number generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var src = iterSineWave();\n    > var it = iterawun( src, 0.5 );\n    > var v = it.next().value\n    <number>\n    > v = it.next().value\n    <number>\n\n    See Also\n    --------\n    iterawgn, iterawln\n","iterBartlettHannPulse":"\niterBartlettHannPulse( [options] )\n    Returns an iterator which generates a Bartlett-Hann pulse waveform.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.period: integer (optional)\n        Pulse period (i.e., the number of iterations until a waveform repeats).\n        Default: 100.\n\n    options.duration: integer (optional)\n        Pulse duration. Must be greater than 2. Default: options.period.\n\n    options.amplitude: number (optional)\n        Amplitude. Default: 1.0.\n\n    options.offset: integer (optional)\n        Phase offset (in units of iterations; zero-based). A negative offset\n        translates the waveform to the left. A positive offset translates a\n        waveform to the right. Default: 0.\n\n    options.iter: integer (optional)\n        Number of iterations. Default: 1e308.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = iterBartlettHannPulse();\n    > var v = it.next().value\n    <number>\n    > v = it.next().value\n    <number>\n\n    See Also\n    --------\n    iterBartlettPulse, iterHannPulse, iterPulse, iterTriangleWave\n","iterBartlettPulse":"\niterBartlettPulse( [options] )\n    Returns an iterator which generates a Bartlett pulse waveform.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.period: integer (optional)\n        Pulse period (i.e., the number of iterations until a waveform repeats).\n        Default: 100.\n\n    options.duration: integer (optional)\n        Pulse duration. Must be greater than 2. Default: options.period.\n\n    options.amplitude: number (optional)\n        Amplitude. Default: 1.0.\n\n    options.offset: integer (optional)\n        Phase offset (in units of iterations; zero-based). A negative offset\n        translates the waveform to the left. A positive offset translates a\n        waveform to the right. Default: 0.\n\n    options.iter: integer (optional)\n        Number of iterations. Default: 1e308.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = iterBartlettPulse();\n    > var v = it.next().value\n    <number>\n    > v = it.next().value\n    <number>\n\n    See Also\n    --------\n    iterBartlettHannPulse, iterPulse, iterTriangleWave\n","iterConcat":"\niterConcat( iter0, ...iterator )\n    Returns an iterator which iterates over the values of two or more iterators.\n\n    If an environment supports Symbol.iterator and provided iterators are\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iter0: Object\n        Input iterator.\n\n    iterator: ...Object\n        Iterators to concatenate.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it1 = array2iterator( [ 1, 2 ] );\n    > var it2 = array2iterator( [ 3, 4 ] );\n    > var it = iterConcat( it1, it2 );\n    > var v = it.next().value\n    1\n    > v = it.next().value\n    2\n    > v = it.next().value\n    3\n    > v = it.next().value\n    4\n    > var bool = it.next().done\n    true\n\n","iterConstant":"\niterConstant( value[, options] )\n    Returns an iterator which always returns the same value.\n\n    When provided an object reference, the returned iterator always returns the\n    same reference.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    value: any\n        Value to return.\n\n    options: Object (optional)\n        Function options.\n\n    options.iter: integer (optional)\n        Number of iterations. Default: 1e308.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = iterConstant( 3.14 );\n    > var v = it.next().value\n    3.14\n    > v = it.next().value\n    3.14\n\n    See Also\n    --------\n    constantFunction\n","iterCosineWave":"\niterCosineWave( [options] )\n    Returns an iterator which generates a cosine wave.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.period: integer (optional)\n        Period (i.e., the number of iterations before a cosine wave repeats).\n        Default: 10.\n\n    options.amplitude: number (optional)\n        Peak amplitude. Default: 1.0.\n\n    options.offset: integer (optional)\n        Phase offset (in units of iterations; zero-based). A negative offset\n        translates the waveform to the left. A positive offset translates a\n        waveform to the right. Default: 0.\n\n    options.iter: integer (optional)\n        Number of iterations. Default: 1e308.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = iterCosineWave();\n    > var v = it.next().value\n    <number>\n    > v = it.next().value\n    <number>\n\n    See Also\n    --------\n    iterPulse, iterSawtoothWave, iterSineWave, iterSquareWave, iterTriangleWave\n","iterCounter":"\niterCounter( iterator )\n    Returns an iterator which iteratively computes the number of iterated\n    values.\n\n    If an environment supports Symbol.iterator and a provided iterator is\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = iterCounter( random.iterators.randu() );\n    > var v = it.next().value\n    1\n    > v = it.next().value\n    2\n\n    See Also\n    --------\n    iterLength\n","itercugmean":"\nitercugmean( iterator )\n    Returns an iterator which iteratively computes a cumulative geometric mean.\n\n    If provided a negative value, the iterated value is `NaN` for all future\n    invocations.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, 5.0, 3.0, 5.0 ] );\n    > var it = itercugmean( arr );\n    > var v = it.next().value\n    2.0\n    > v = it.next().value\n    ~3.16\n    > v = it.next().value\n    ~3.11\n    > v = it.next().value\n    ~3.50\n\n    See Also\n    --------\n    itercuhmean, itercumean\n","itercuhmean":"\nitercuhmean( iterator )\n    Returns an iterator which iteratively computes a cumulative harmonic mean.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, 5.0, 3.0, 5.0 ] );\n    > var it = itercuhmean( arr );\n    > var v = it.next().value\n    2.0\n    > v = it.next().value\n    ~2.86\n    > v = it.next().value\n    ~2.90\n    > v = it.next().value\n    ~3.24\n\n    See Also\n    --------\n    itercugmean, itercumean\n","itercumax":"\nitercumax( iterator )\n    Returns an iterator which iteratively computes a cumulative maximum value.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\n    > var it = itercumax( arr );\n    > var m = it.next().value\n    2.0\n    > m = it.next().value\n    2.0\n    > m = it.next().value\n    3.0\n    > m = it.next().value\n    5.0\n\n    See Also\n    --------\n    itercumidrange, itercumin, itercurange, itermax\n","itercumaxabs":"\nitercumaxabs( iterator )\n    Returns an iterator which iteratively computes a cumulative maximum absolute\n    value.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\n    > var it = itercumaxabs( arr );\n    > var m = it.next().value\n    2.0\n    > m = it.next().value\n    5.0\n    > m = it.next().value\n    5.0\n    > m = it.next().value\n    5.0\n\n    See Also\n    --------\n    itercumax, itercuminabs, itermaxabs\n","itercumean":"\nitercumean( iterator )\n    Returns an iterator which iteratively computes a cumulative arithmetic mean.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\n    > var it = itercumean( arr );\n    > var m = it.next().value\n    2.0\n    > m = it.next().value\n    -1.5\n    > m = it.next().value\n    0.0\n    > m = it.next().value\n    1.25\n\n    See Also\n    --------\n    itercumidrange, itercusum, itermean\n","itercumeanabs":"\nitercumeanabs( iterator )\n    Returns an iterator which iteratively computes a cumulative arithmetic mean\n    of absolute values.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\n    > var it = itercumeanabs( arr );\n    > var m = it.next().value\n    2.0\n    > m = it.next().value\n    3.5\n    > m = it.next().value\n    ~3.33\n    > m = it.next().value\n    3.75\n\n    See Also\n    --------\n    itercumean, itercumeanabs2, itercusumabs, itermeanabs\n","itercumeanabs2":"\nitercumeanabs2( iterator )\n    Returns an iterator which iteratively computes a cumulative arithmetic mean\n    of squared absolute values.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\n    > var it = itercumeanabs2( arr );\n    > var m = it.next().value\n    4.0\n    > m = it.next().value\n    14.5\n    > m = it.next().value\n    ~12.67\n    > m = it.next().value\n    15.75\n\n    See Also\n    --------\n    itercumean, itercumeanabs, itercusumabs2, itermeanabs2\n","itercumidrange":"\nitercumidrange( iterator )\n    Returns an iterator which iteratively computes a cumulative mid-range.\n\n    The mid-range is the arithmetic mean of maximum and minimum values.\n    Accordingly, the mid-range is the midpoint of the range and a measure of\n    central tendency.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\n    > var it = itercumidrange( arr );\n    > var v = it.next().value\n    2.0\n    > v = it.next().value\n    -1.5\n    > v = it.next().value\n    -1.0\n    > v = it.next().value\n    0.0\n\n    See Also\n    --------\n    itercumean, itercumax, itercumin, itercurange, itermidrange\n","itercumin":"\nitercumin( iterator )\n    Returns an iterator which iteratively computes a cumulative minimum value.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\n    > var it = itercumin( arr );\n    > var m = it.next().value\n    2.0\n    > m = it.next().value\n    -5.0\n    > m = it.next().value\n    -5.0\n    > m = it.next().value\n    -5.0\n\n    See Also\n    --------\n    itercumax, itercumidrange, itercurange, itermin\n","itercuminabs":"\nitercuminabs( iterator )\n    Returns an iterator which iteratively computes a cumulative minimum absolute\n    value.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\n    > var it = itercuminabs( arr );\n    > var m = it.next().value\n    2.0\n    > m = it.next().value\n    2.0\n    > m = it.next().value\n    2.0\n    > m = it.next().value\n    2.0\n\n    See Also\n    --------\n    itercumaxabs, itercumin, iterminabs\n","itercuprod":"\nitercuprod( iterator )\n    Returns an iterator which iteratively computes a cumulative product.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\n    > var it = itercuprod( arr );\n    > var p = it.next().value\n    2.0\n    > p = it.next().value\n    -10.0\n    > p = it.next().value\n    -30.0\n    > p = it.next().value\n    -150.0\n\n    See Also\n    --------\n    itercusum, iterprod\n","itercurange":"\nitercurange( iterator )\n    Returns an iterator which iteratively computes a cumulative range.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\n    > var it = itercurange( arr );\n    > var r = it.next().value\n    0.0\n    > r = it.next().value\n    7.0\n    > r = it.next().value\n    8.0\n    > r = it.next().value\n    10.0\n\n    See Also\n    --------\n    itercumax, itercumean, itercumin, iterrange\n","itercusum":"\nitercusum( iterator )\n    Returns an iterator which iteratively computes a cumulative sum.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\n    > var it = itercusum( arr );\n    > var s = it.next().value\n    2.0\n    > s = it.next().value\n    -3.0\n    > s = it.next().value\n    0.0\n    > s = it.next().value\n    5.0\n\n    See Also\n    --------\n    itercumean, itersum, itercuprod\n","itercusumabs":"\nitercusumabs( iterator )\n    Returns an iterator which iteratively computes a cumulative sum of absolute\n    values.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\n    > var it = itercusumabs( arr );\n    > var s = it.next().value\n    2.0\n    > s = it.next().value\n    7.0\n    > s = it.next().value\n    10.0\n    > s = it.next().value\n    15.0\n\n    See Also\n    --------\n    itercumeanabs, itercusum, itersumabs\n","itercusumabs2":"\nitercusumabs2( iterator )\n    Returns an iterator which iteratively computes a cumulative sum of squared\n    absolute values.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\n    > var it = itercusumabs2( arr );\n    > var s = it.next().value\n    4.0\n    > s = it.next().value\n    29.0\n    > s = it.next().value\n    38.0\n    > s = it.next().value\n    63.0\n\n    See Also\n    --------\n    itercumeanabs2, itercusumabs, itersumabs2\n","iterDedupe":"\niterDedupe( iterator[, limit] )\n    Returns an iterator which removes consecutive duplicated values.\n\n    `NaN` values are considered distinct.\n\n    Uniqueness is determined according to strict equality. Accordingly, objects\n    are *not* checked for deep equality.\n\n    If an environment supports Symbol.iterator and a provided iterator is\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    limit: integer (optional)\n        Number of allowed consecutive duplicates. Default: 1.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 1, 1, 2, 3, 3 ] );\n    > var it = iterDedupe( arr );\n    > var v = it.next().value\n    1\n    > v = it.next().value\n    2\n    > v = it.next().value\n    3\n\n    See Also\n    --------\n    iterDedupeBy, iterUnique\n","iterDedupeBy":"\niterDedupeBy( iterator, [limit,] fcn )\n    Returns an iterator which removes consecutive values that resolve to the\n    same value according to a provided function.\n\n    The provided function is provided five arguments:\n\n    - curr: current source iterated value\n    - sprev: previous source iterated value\n    - dprev: previous downstream iterated value\n    - index: source iteration index (zero-based)\n    - acc: previous resolved value\n\n    If an environment supports Symbol.iterator and a provided iterator is\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    limit: integer (optional)\n        Number of allowed consecutive duplicates. Default: 1.\n\n    fcn: Function\n        Function indicating whether an iterated value is a \"duplicate\".\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 1, 1, 2, 3, 3 ] );\n    > function fcn( v ) { return v; };\n    > var it = iterDedupeBy( arr, fcn );\n    > var v = it.next().value\n    1\n    > v = it.next().value\n    2\n    > v = it.next().value\n    3\n\n    See Also\n    --------\n    iterDedupe, iterUnique\n","iterDiracComb":"\niterDiracComb( [options] )\n    Returns an iterator which generates a Dirac comb.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.period: integer (optional)\n        Period (i.e., the number of iterations before a waveform repeats).\n        Default: 10.\n\n    options.offset: integer (optional)\n        Phase offset (in units of iterations; zero-based). A negative offset\n        translates the waveform to the left. A positive offset translates a\n        waveform to the right. Default: 0.\n\n    options.iter: integer (optional)\n        Number of iterations. Default: 1e308.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = iterDiracComb();\n    > var v = it.next().value\n    Infinity\n    > v = it.next().value\n    0.0\n\n    See Also\n    --------\n    iterPulse\n","iterDivide":"\niterDivide( iter0, ...iterator )\n    Returns an iterator which performs element-wise division of two or more\n    iterators.\n\n    The length of the returned iterator is equal to the length of the shortest\n    provided iterator. In other words, the returned iterator ends once *one* of\n    the provided iterators ends.\n\n    If provided a numeric value as an iterator argument, the value is broadcast\n    as an infinite iterator which always returns the provided value.\n\n    If an environment supports Symbol.iterator and provided iterators are\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iter0: Object\n        Input iterator.\n\n    iterator: ...Object\n        Iterators whose values are used as divisors.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it1 = array2iterator( [ 3.0, 2.0 ] );\n    > var it2 = array2iterator( [ 1.0, 4.0 ] );\n    > var it = iterDivide( it1, it2 );\n    > var v = it.next().value\n    3.0\n    > v = it.next().value\n    0.5\n    > var bool = it.next().done\n    true\n\n    See Also\n    --------\n    iterAdd, iterDivide, iterMultiply\n","iterEmpty":"\niterEmpty()\n    Returns an empty iterator.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = iterEmpty();\n    > var bool = it.next().done\n    true\n\n    See Also\n    --------\n    iterConstant\n","iterEvery":"\niterEvery( iterator )\n    Tests whether all iterated values are truthy.\n\n    The function immediately returns upon encountering a falsy value.\n\n    If provided an iterator which does not return any iterated values, the\n    function returns `true`.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator over which to iterate.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `false` if a value is falsy; otherwise, the\n        function returns `true`.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 1, 1, 1, 1, 0 ] );\n    > var bool = iterEvery( arr )\n    false\n\n    See Also\n    --------\n    iterAny, iterEveryBy, iterForEach, iterNone, iterSome\n","iterEveryBy":"\niterEveryBy( iterator, predicate[, thisArg ] )\n    Tests whether every iterated value passes a test implemented by a predicate\n    function.\n\n    The predicate function is provided two arguments:\n\n    - value: iterated value\n    - index: iteration index\n\n    The function immediately returns upon encountering a falsy return value.\n\n    If provided an iterator which does not return any iterated values, the\n    function returns `true`.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator over which to iterate.\n\n    predicate: Function\n        The test function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if a predicate function returns a truthy\n        value for all iterated values. Otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 1, 1, 1, 1, 1 ] );\n    > function fcn( v ) { return ( v > 0 ); };\n    > var bool = iterEveryBy( arr, fcn )\n    true\n\n    See Also\n    --------\n    iterAnyBy, iterEvery, iterForEach, iterNoneBy, iterSomeBy\n","iterFibonacci":"\niterFibonacci( [options] )\n    Returns an iterator which generates a Fibonacci sequence.\n\n    The returned iterator can only generate the first 79 Fibonacci numbers, as\n    larger Fibonacci numbers cannot be safely represented in double-precision\n    floating-point format.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.iter: integer (optional)\n        Number of iterations. Default: 79.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = iterFibonacci();\n    > var v = it.next().value\n    0\n    > v = it.next().value\n    1\n\n    See Also\n    --------\n    base.fibonacci, iterNonFibonacci\n","iterFill":"\niterFill( iterator, value[, begin[, end]] )\n    Returns an iterator which replaces all values from a provided iterator from\n    a start index to an end index with a static value.\n\n    If `end` exceeds the length of the provided iterator, the returned iterator\n    replaces the subsequence of iterated values starting from `begin` until the\n    last iterated value of the provided iterator.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    value: any\n        Static value.\n\n    begin: integer (optional)\n        Start iteration index (zero-based and inclusive). Default: 0.\n\n    end: integer (optional)\n        End iteration index (zero-based and non-inclusive).\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = iterFill( random.iterators.randu(), 3.14, 0, 2 );\n    > var r = it.next().value\n    3.14\n    > r = it.next().value\n    3.14\n    > r = it.next().value\n    <number>\n\n","iterFilter":"\niterFilter( iterator, predicate[, thisArg] )\n    Returns an iterator which filters a provided iterator's values according to\n    a predicate function.\n\n    When invoked, the predicate function is provided two arguments:\n\n    - value: iterated value\n    - index: iteration index (zero-based)\n\n    If an environment supports Symbol.iterator and a provided iterator is\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    predicate: Function\n        Predicate function to invoke for each iterated value.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > function f( v ) { return ( v > 2 ); };\n    > var it1 = array2iterator( [ 1, 3, 2, 4 ] );\n    > var it2 = iterFilter( it1, f );\n    > var v = it2.next().value\n    3\n    > v = it2.next().value\n    4\n\n    See Also\n    --------\n    iterFilterMap, iterMap, iterReject\n","iterFilterMap":"\niterFilterMap( iterator, fcn[, thisArg] )\n    Returns an iterator which both filters and maps a provided iterator's\n    values.\n\n    When invoked, the callback function is provided two arguments:\n\n    - value: iterated value\n    - index: iteration index (zero-based)\n\n    If the callback returns `undefined`, the iterator invokes the function for\n    the next value of the provided iterator; otherwise, the iterator returns\n    the callback's return value.\n\n    If an environment supports Symbol.iterator and a provided iterator is\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    fcn: Function\n        Callback function which both filters and maps.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > function f( v ) { if ( v > 2 ) { return v * 10 }; };\n    > var it1 = array2iterator( [ 1, 3, 2, 4 ] );\n    > var it2 = iterFilterMap( it1, f );\n    > var v = it2.next().value\n    30\n    > v = it2.next().value\n    40\n\n    See Also\n    --------\n    iterFilter, iterMap\n","iterFirst":"\niterFirst( iterator )\n    Returns the first iterated value.\n\n    The function does *not* consume an entire iterator before returning.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator over which to iterate.\n\n    Returns\n    -------\n    v: any\n        The first iterated value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 1, 0, 0, 0, 0 ] );\n    > var v = iterFirst( arr )\n    1\n\n    See Also\n    --------\n    iterHead, iterLast, iterNth\n","iterFlatTopPulse":"\niterFlatTopPulse( [options] )\n    Returns an iterator which generates a flat top pulse waveform.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.period: integer (optional)\n        Pulse period (i.e., the number of iterations until a waveform repeats).\n        Default: 100.\n\n    options.duration: integer (optional)\n        Pulse duration. Must be greater than 2. Default: options.period.\n\n    options.amplitude: number (optional)\n        Amplitude. Default: 1.0.\n\n    options.offset: integer (optional)\n        Phase offset (in units of iterations; zero-based). A negative offset\n        translates the waveform to the left. A positive offset translates a\n        waveform to the right. Default: 0.\n\n    options.iter: integer (optional)\n        Number of iterations. Default: 1e308.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = iterFlatTopPulse();\n    > var v = it.next().value\n    <number>\n    > v = it.next().value\n    <number>\n\n    See Also\n    --------\n    iterPulse\n","iterFlow":"\niterFlow( methods )\n    Returns a fluent interface iterator constructor with a customized prototype\n    based on provided methods.\n\n    The methods argument should be an object which maps constructor method names\n    to iterator functions.\n\n    Each iterator function should have the following function signature:\n\n      iterFcn( iterator, ...args )\n\n    When a fluent interface iterator method is invoked, the method invokes the\n    corresponding iterator function with an iterator and provided method\n    arguments.\n\n    If an iterator function returns an iterator, the corresponding fluent\n    interface method returns a new fluent interface instance; otherwise, the\n    corresponding fluent interface method returns the iterator function result.\n\n    The iterator function evaluation context is always `null`.\n\n    Iterator functions which return iterators are expected to return iterator\n    protocol-compliant objects (i.e., an object having a `next` method which\n    returns the next iterated value (if one exists) assigned to a `value`\n    property and a `done` property having a boolean value indicating whether the\n    iterator is finished).\n\n    If an environment supports `Symbol.iterator`, the returned constructor\n    returns iterators which are iterable.\n\n    Parameters\n    ----------\n    methods: Object\n        An object mapping method names to iterator functions.\n\n    Returns\n    -------\n    FluentIterator: Function\n        Fluent interface iterator constructor.\n\n    Examples\n    --------\n    > var o = {};\n    > o.head = iterHead;\n    > o.some = iterSome;\n    > var fiter = iterFlow( o )\n\n\nFluentIterator( iterator )\n    Returns a new fluent interface iterator from a source iterator.\n\n    Parameters\n    ----------\n    iterator: Object\n        Source iterator.\n\n    Returns\n    -------\n    iterator: Object\n        Fluent interface iterator.\n\n    Examples\n    --------\n    > var o = {};\n    > o.head = iterHead;\n    > o.some = iterSome;\n    > var fiter = iterFlow( o );\n    > var it = fiter( array2iterator( [ 0, 0, 1, 1, 1 ] ) );\n    > var bool = it.head( 3 ).some( 2 )\n    false\n\n\nFluentIterator.prototype.next()\n    Returns the next iterated value.\n\n    Returns\n    -------\n    out: Object\n        Iterator protocol-compliant object.\n\n    out.value: any (optional)\n        Next iterated value (if one exists).\n\n    out.done: boolean\n        Boolean flag indicating whether the iterator is finished.\n\n    Examples\n    --------\n    > var o = {};\n    > o.head = iterHead;\n    > o.some = iterSome;\n    > var fiter = iterFlow( o );\n    > var it1 = fiter( array2iterator( [ 0, 0, 1, 1, 1 ] ) );\n    > var it2 = it1.head( 3 );\n    > var v = it2.next().value\n    0\n    > v = it2.next().value\n    0\n    > v = it2.next().value\n    1\n\n\nFluentIterator.prototype.return( [value] )\n    Finishes an iterator and returns a provided value.\n\n    Parameters\n    ----------\n    value: any (optional)\n        Value to return.\n\n    Returns\n    -------\n    out: Object\n        Iterator protocol-compliant object.\n\n    out.value: any (optional)\n        Next iterated value (if one exists).\n\n    out.done: boolean\n        Boolean flag indicating whether the iterator is finished.\n\n    Examples\n    --------\n    > var o = {};\n    > o.head = iterHead;\n    > o.some = iterSome;\n    > var fiter = iterFlow( o );\n    > var it1 = fiter( array2iterator( [ 0, 0, 1, 1, 1 ] ) );\n    > var it2 = it1.head( 3 );\n    > var v = it2.next().value\n    0\n    > var bool = it2.return().done\n    true\n    > v = it2.next().value\n    undefined\n\n    See Also\n    --------\n    iterPipeline\n","iterForEach":"\niterForEach( iterator, fcn[, thisArg] )\n    Returns an iterator which invokes a function for each iterated value before\n    returning the iterated value.\n\n    When invoked, the input function is provided two arguments:\n\n    - value: iterated value\n    - index: iteration index (zero-based)\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    fcn: Function\n        Function to invoke for each iterated value.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > function f( v ) { if ( v !== v ) { throw new Error( 'beep' ); } };\n    > var it = iterForEach( random.iterators.randu(), f );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    iterMap\n","iterHannPulse":"\niterHannPulse( [options] )\n    Returns an iterator which generates a Hann pulse waveform.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.period: integer (optional)\n        Pulse period (i.e., the number of iterations until a waveform repeats).\n        Default: 100.\n\n    options.duration: integer (optional)\n        Pulse duration. Must be greater than 2. Default: options.period.\n\n    options.amplitude: number (optional)\n        Amplitude. Default: 1.0.\n\n    options.offset: integer (optional)\n        Phase offset (in units of iterations; zero-based). A negative offset\n        translates the waveform to the left. A positive offset translates a\n        waveform to the right. Default: 0.\n\n    options.iter: integer (optional)\n        Number of iterations. Default: 1e308.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = iterHannPulse();\n    > var v = it.next().value\n    <number>\n    > v = it.next().value\n    <number>\n\n    See Also\n    --------\n    iterBartlettHannPulse, iterPulse, iterSineWave\n","iterHead":"\niterHead( iterator, n )\n    Returns an iterator which returns the first `n` values of a provided\n    iterator.\n\n    If a provided iterator only generates `m` values and `m` is less than `n`,\n    the returned iterator only returns `m` values.\n\n    If an environment supports Symbol.iterator and a provided iterator is\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    n: integer\n        Number of values.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = iterHead( random.iterators.randu(), 5 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    iterFirst, iterSlice\n","iterIntersection":"\niterIntersection( iter0, ...iterator )\n    Returns an iterator which returns the intersection of two or more iterators.\n\n    Value \"uniqueness\" is determined according to strict equality.\n\n    A returned iterator internally buffers unique values and, thus, has O(N)\n    memory requirements, where `N` is the length of the first iterator.\n\n    Do *not* provide iterators having infinite length.\n\n    If an environment supports Symbol.iterator and all provided iterators are\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iter0: Object\n        Input iterator.\n\n    iterator: ...Object\n        Input iterators.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it1 = array2iterator( [ 1, 2, 1, 2, 4 ] );\n    > var it2 = array2iterator( [ 1, 2, 5, 2, 3 ] );\n    > var it = iterIntersection( it1, it2 );\n    > var v = it.next().value\n    1\n    > v = it.next().value\n    2\n    > var bool = it.next().done\n    true\n\n    See Also\n    --------\n    iterIntersectionByHash, iterUnion, iterUnique\n","iterIntersectionByHash":"\niterIntersectionByHash( iter0, ...iterator, hashFcn[, thisArg] )\n    Returns an iterator which returns the intersection of two or more iterators\n    according to a hash function.\n\n    An iterated value is considered \"unique\" if the hash function returns a\n    unique hash value for that iterated value. Beware that this *may* result in\n    unexpected behavior. Namely, only the first iterated value mapping to a\n    particular hash function result is returned, even if subsequent values,\n    while mapping to the same hash, are different. Accordingly, iteration order\n    *does* matter.\n\n    A returned iterator internally buffers unique hashes, along with the *first*\n    iterated value resolving to a hash, and, thus, has O(N) memory requirements,\n    where `N` is the length of the first iterator.\n\n    Do *not* provide iterators having infinite length.\n\n    If an environment supports Symbol.iterator and all provided iterators are\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iter0: Object\n        Input iterator.\n\n    iterator: ...Object\n        Input iterators.\n\n    hashFcn: Function\n        Hash function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it1 = array2iterator( [ 1, 2, 1, 2, 4 ] );\n    > var it2 = array2iterator( [ 1, 2, 5, 2, 3 ] );\n    > function f( v ) { return v.toString(); };\n    > var it = iterIntersectionByHash( it1, it2, f );\n    > var v = it.next().value\n    1\n    > v = it.next().value\n    2\n    > var bool = it.next().done\n    true\n\n    See Also\n    --------\n    iterIntersection, iterUniqueByHash\n","iterLanczosPulse":"\niterLanczosPulse( [options] )\n    Returns an iterator which generates a Lanczos pulse waveform.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.period: integer (optional)\n        Pulse period (i.e., the number of iterations until a waveform repeats).\n        Default: 100.\n\n    options.duration: integer (optional)\n        Pulse duration. Must be greater than 2. Default: options.period.\n\n    options.amplitude: number (optional)\n        Amplitude. Default: 1.0.\n\n    options.offset: integer (optional)\n        Phase offset (in units of iterations; zero-based). A negative offset\n        translates the waveform to the left. A positive offset translates a\n        waveform to the right. Default: 0.\n\n    options.iter: integer (optional)\n        Number of iterations. Default: 1e308.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = iterLanczosPulse();\n    > var v = it.next().value\n    <number>\n    > v = it.next().value\n    <number>\n\n    See Also\n    --------\n    iterPulse, iterPeriodicSinc\n","iterLast":"\niterLast( iterator )\n    Consumes an entire iterator and returns the last iterated value.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator over which to iterate.\n\n    Returns\n    -------\n    v: any\n        The last iterated value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 0, 0, 0, 0, 1 ] );\n    > var v = iterLast( arr )\n    1\n\n    See Also\n    --------\n    iterFirst, iterNth\n","iterLength":"\niterLength( iterator )\n    Consumes an entire iterator and returns the number of iterated values.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator over which to iterate.\n\n    Returns\n    -------\n    len: integer\n        Iterator length.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 0, 0, 0, 0, 1 ] );\n    > var len = iterLength( arr )\n    5\n\n    See Also\n    --------\n    iterCounter\n","iterMap":"\niterMap( iterator, fcn[, thisArg] )\n    Returns an iterator which invokes a function for each iterated value.\n\n    When invoked, the input function is provided two arguments:\n\n    - value: iterated value\n    - index: iteration index (zero-based)\n\n    If an environment supports Symbol.iterator and a provided iterator is\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    fcn: Function\n        Function to invoke for each iterated value.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > function f( v ) { return v * 10.0; };\n    > var it = iterMap( random.iterators.randu(), f );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    iterFilter, iterFilterMap, iterForEach, iterReject\n","iterMapN":"\niterMapN( iter0, ...iterator, fcn[, thisArg] )\n    Returns an iterator which transforms iterated values from two or more\n    iterators by applying the iterated values as arguments to a provided\n    function.\n\n    When invoked, the callback function is provided `N+1` arguments, where `N`\n    is the number of provided iterators and the last argument is the iteration\n    index:\n\n    -  ...value: iterated values\n    -  index: iteration index (zero-based)\n\n    The length of the returned iterator is equal to the length of the shortest\n    provided iterator. In other words, the returned iterator ends once *one* of\n    the provided iterators ends.\n\n    If an environment supports Symbol.iterator and provided iterators are\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iter0: Object\n        Input iterator.\n\n    iterator: ...Object\n        Iterators.\n\n    fcn: Function\n        Function to invoke with iterated values.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it1 = array2iterator( [ 1.0, 2.0 ] );\n    > var it2 = array2iterator( [ 3.0, 4.0 ] );\n    > function fcn( x, y ) { return x + y; };\n    > var it = iterMapN( it1, it2, fcn );\n    > var v = it.next().value\n    4.0\n    > v = it.next().value\n    6.0\n    > var bool = it.next().done\n    true\n\n    See Also\n    --------\n    iterMap\n","itermax":"\nitermax( iterator )\n    Computes the maximum value of all iterated values.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    out: number|null\n        Maximum value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 1.0, -2.0, 3.0, -4.0 ] );\n    > var m = itermax( arr )\n    3.0\n\n    See Also\n    --------\n    itermidrange, itermin, itermmax, iterrange\n","itermaxabs":"\nitermaxabs( iterator )\n    Computes the maximum absolute value of all iterated values.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    out: number|null\n        Maximum absolute value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 1.0, -2.0, 3.0, -4.0 ] );\n    > var m = itermaxabs( arr )\n    4.0\n\n    See Also\n    --------\n    itermax, iterminabs, itermmaxabs\n","itermean":"\nitermean( iterator )\n    Computes an arithmetic mean over all iterated values.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    out: number|null\n        Arithmetic mean.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 1.0, 2.0, 3.0, 4.0 ] );\n    > var m = itermean( arr )\n    2.5\n\n    See Also\n    --------\n    itermidrange, itermmean, iterstdev, itersum, itervariance\n","itermeanabs":"\nitermeanabs( iterator )\n    Computes an arithmetic mean of absolute values for all iterated values.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    out: number|null\n        Arithmetic mean of absolute values.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 1.0, -2.0, -3.0, 4.0 ] );\n    > var m = itermeanabs( arr )\n    2.5\n\n    See Also\n    --------\n    itermean, itermmeanabs, itersumabs\n","itermeanabs2":"\nitermeanabs2( iterator )\n    Computes an arithmetic mean of squared absolute values for all iterated\n    values.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    out: number|null\n        Arithmetic mean of squared absolute values.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 1.0, -2.0, -3.0, 4.0 ] );\n    > var m = itermeanabs2( arr )\n    7.5\n\n    See Also\n    --------\n    itermean, itermeanabs, itermmeanabs2, itersumabs2\n","itermidrange":"\nitermidrange( iterator )\n    Computes the mid-range of all iterated values.\n\n    The mid-range is the arithmetic mean of maximum and minimum values.\n    Accordingly, the mid-range is the midpoint of the range and a measure of\n    central tendency.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    out: number|null\n        Mid-range.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 1.0, -2.0, 3.0, -4.0 ] );\n    > var v = itermidrange( arr )\n    -0.5\n\n    See Also\n    --------\n    itermean, itermax, itermin, iterrange\n","itermin":"\nitermin( iterator )\n    Computes the minimum value of all iterated values.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    out: number|null\n        Minimum value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 1.0, -2.0, -3.0, 4.0 ] );\n    > var m = itermin( arr )\n    -3.0\n\n    See Also\n    --------\n    itermax, itermidrange, itermmin, iterrange\n","iterminabs":"\niterminabs( iterator )\n    Computes the minimum absolute value of all iterated values.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    out: number|null\n        Minimum absolute value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 1.0, -2.0, 3.0, -4.0 ] );\n    > var m = iterminabs( arr )\n    1.0\n\n    See Also\n    --------\n    itermaxabs, itermin, itermminabs\n","itermmax":"\nitermmax( iterator, W )\n    Returns an iterator which iteratively computes a moving maximum value.\n\n    The `W` parameter defines the number of iterated values over which to\n    compute the moving maximum value.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all previously iterated values.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\n    > var it = itermmax( arr, 3 );\n    > var m = it.next().value\n    2.0\n    > m = it.next().value\n    2.0\n    > m = it.next().value\n    3.0\n    > m = it.next().value\n    5.0\n\n    See Also\n    --------\n    itermax, itermmidrange, itermmin, itermrange\n","itermmaxabs":"\nitermmaxabs( iterator, W )\n    Returns an iterator which iteratively computes a moving maximum absolute\n    value.\n\n    The `W` parameter defines the number of iterated values over which to\n    compute the moving maximum absolute value.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all previously iterated values.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\n    > var it = itermmaxabs( arr, 3 );\n    > var m = it.next().value\n    2.0\n    > m = it.next().value\n    5.0\n    > m = it.next().value\n    5.0\n    > m = it.next().value\n    5.0\n\n    See Also\n    --------\n    itermaxabs, itermmax, itermminabs\n","itermmean":"\nitermmean( iterator, W )\n    Returns an iterator which iteratively computes a moving arithmetic mean.\n\n    The `W` parameter defines the number of iterated values over which to\n    compute the moving mean.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all previously iterated values.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\n    > var it = itermmean( arr, 3 );\n    > var m = it.next().value\n    2.0\n    > m = it.next().value\n    -1.5\n    > m = it.next().value\n    0.0\n    > m = it.next().value\n    1.0\n\n    See Also\n    --------\n    itermean, itermsum\n","itermmeanabs":"\nitermmeanabs( iterator, W )\n    Returns an iterator which iteratively computes a moving arithmetic mean of\n    absolute values.\n\n    The `W` parameter defines the number of iterated values over which to\n    compute the moving mean of absolute values.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all previously iterated values.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\n    > var it = itermmeanabs( arr, 3 );\n    > var m = it.next().value\n    2.0\n    > m = it.next().value\n    3.5\n    > m = it.next().value\n    ~3.33\n    > m = it.next().value\n    ~4.33\n\n    See Also\n    --------\n    itermeanabs, itermmean, itermsumabs\n","itermmeanabs2":"\nitermmeanabs2( iterator, W )\n    Returns an iterator which iteratively computes a moving arithmetic mean of\n    squared absolute values.\n\n    The `W` parameter defines the number of iterated values over which to\n    compute the moving mean of squared absolute values.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all previously iterated values.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\n    > var it = itermmeanabs2( arr, 3 );\n    > var m = it.next().value\n    4.0\n    > m = it.next().value\n    14.5\n    > m = it.next().value\n    ~12.67\n    > m = it.next().value\n    ~19.67\n\n    See Also\n    --------\n    itermeanabs2, itermmeanabs, itermsumabs2\n","itermmidrange":"\nitermmidrange( iterator, W )\n    Returns an iterator which iteratively computes a moving mid-range.\n\n    The mid-range is the arithmetic mean of maximum and minimum values.\n    Accordingly, the mid-range is the midpoint of the range and a measure of\n    central tendency.\n\n    The `W` parameter defines the number of iterated values over which to\n    compute the moving mid-range.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all previously iterated values.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\n    > var it = itermmidrange( arr, 3 );\n    > var v = it.next().value\n    2.0\n    > v = it.next().value\n    -1.5\n    > v = it.next().value\n    -1.0\n    > v = it.next().value\n    0.0\n\n    See Also\n    --------\n    itermidrange, itermmean, itermmax, itermmin, itermrange\n","itermmin":"\nitermmin( iterator, W )\n    Returns an iterator which iteratively computes a moving minimum value.\n\n    The `W` parameter defines the number of iterated values over which to\n    compute the moving minimum value.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all previously iterated values.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\n    > var it = itermmin( arr, 3 );\n    > var m = it.next().value\n    2.0\n    > m = it.next().value\n    -5.0\n    > m = it.next().value\n    -5.0\n    > m = it.next().value\n    -5.0\n\n    See Also\n    --------\n    itermin, itermmax, itermmidrange, itermrange\n","itermminabs":"\nitermminabs( iterator, W )\n    Returns an iterator which iteratively computes a moving minimum absolute\n    value.\n\n    The `W` parameter defines the number of iterated values over which to\n    compute the moving minimum absolute value.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all previously iterated values.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\n    > var it = itermminabs( arr, 3 );\n    > var m = it.next().value\n    2.0\n    > m = it.next().value\n    2.0\n    > m = it.next().value\n    2.0\n    > m = it.next().value\n    3.0\n\n    See Also\n    --------\n    iterminabs, itermmaxabs, itermmin\n","iterMod":"\niterMod( iter0, ...iterator )\n    Returns an iterator which performs an element-wise modulo operation of two\n    or more iterators.\n\n    The length of the returned iterator is equal to the length of the shortest\n    provided iterator. In other words, the returned iterator ends once *one* of\n    the provided iterators ends.\n\n    If provided a numeric value as an iterator argument, the value is broadcast\n    as an infinite iterator which always returns the provided value.\n\n    If an environment supports Symbol.iterator and provided iterators are\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iter0: Object\n        Input iterator.\n\n    iterator: ...Object\n        Iterators whose values are used as divisors.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it1 = array2iterator( [ 3.0, 2.0 ] );\n    > var it2 = array2iterator( [ 1.0, 4.0 ] );\n    > var it = iterMod( it1, it2 );\n    > var v = it.next().value\n    0.0\n    > v = it.next().value\n    2.0\n    > var bool = it.next().done\n    true\n\n    See Also\n    --------\n    iterDivide\n","itermprod":"\nitermprod( iterator, W )\n    Returns an iterator which iteratively computes a moving product.\n\n    The `W` parameter defines the number of iterated values over which to\n    compute the moving product.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all previously iterated values.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\n    > var it = itermprod( arr, 3 );\n    > var p = it.next().value\n    2.0\n    > p = it.next().value\n    -10.0\n    > p = it.next().value\n    -30.0\n    > p = it.next().value\n    -75.0\n\n    See Also\n    --------\n    itermsum, iterprod\n","itermrange":"\nitermrange( iterator, W )\n    Returns an iterator which iteratively computes a moving range.\n\n    The `W` parameter defines the number of iterated values over which to\n    compute the moving range.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all previously iterated values.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\n    > var it = itermrange( arr, 3 );\n    > var m = it.next().value\n    0.0\n    > m = it.next().value\n    7.0\n    > m = it.next().value\n    8.0\n    > m = it.next().value\n    10.0\n\n    See Also\n    --------\n    itermmax, itermmean, itermmin, iterrange\n","itermsum":"\nitermsum( iterator, W )\n    Returns an iterator which iteratively computes a moving sum.\n\n    The `W` parameter defines the number of iterated values over which to\n    compute the moving sum.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all previously iterated values.\n\n    If an environment supports Symbol.iterator and the provided iterator is\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\n    > var it = itermsum( arr, 3 );\n    > var s = it.next().value\n    2.0\n    > s = it.next().value\n    -3.0\n    > s = it.next().value\n    0.0\n    > s = it.next().value\n    3.0\n\n    See Also\n    --------\n    itermmean, itersum\n","itermsumabs":"\nitermsumabs( iterator, W )\n    Returns an iterator which iteratively computes a moving sum of absolute\n    values.\n\n    The `W` parameter defines the number of iterated values over which to\n    compute the moving sum.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all previously iterated values.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\n    > var it = itermsumabs( arr, 3 );\n    > var s = it.next().value\n    2.0\n    > s = it.next().value\n    7.0\n    > s = it.next().value\n    10.0\n    > s = it.next().value\n    13.0\n\n    See Also\n    --------\n    itermmeanabs, itermsum, itersum, itersumabs\n","itermsumabs2":"\nitermsumabs2( iterator, W )\n    Returns an iterator which iteratively computes a moving sum of squared\n    absolute values.\n\n    The `W` parameter defines the number of iterated values over which to\n    compute the moving sum.\n\n    As `W` values are needed to fill the window buffer, the first `W-1` returned\n    values are calculated from smaller sample sizes. Until the window is full,\n    each returned value is calculated from all previously iterated values.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    W: integer\n        Window size.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, -5.0, 3.0, 5.0 ] );\n    > var it = itermsumabs2( arr, 3 );\n    > var s = it.next().value\n    4.0\n    > s = it.next().value\n    29.0\n    > s = it.next().value\n    38.0\n    > s = it.next().value\n    59.0\n\n    See Also\n    --------\n    itermmeanabs2, itermsumabs, itersumabs, itersumabs2\n","iterMultiply":"\niterMultiply( iter0, ...iterator )\n    Returns an iterator which performs element-wise multiplication of two or\n    more iterators.\n\n    The length of the returned iterator is equal to the length of the shortest\n    provided iterator. In other words, the returned iterator ends once *one* of\n    the provided iterators ends.\n\n    If provided a numeric value as an iterator argument, the value is broadcast\n    as an infinite iterator which always returns the provided value.\n\n    If an environment supports Symbol.iterator and provided iterators are\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iter0: Object\n        Input iterator.\n\n    iterator: ...Object\n        Iterators to multiply.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it1 = array2iterator( [ 1.0, 2.0 ] );\n    > var it2 = array2iterator( [ 3.0, 4.0 ] );\n    > var it = iterMultiply( it1, it2 );\n    > var v = it.next().value\n    3.0\n    > v = it.next().value\n    8.0\n    > var bool = it.next().done\n    true\n\n    See Also\n    --------\n    iterAdd, iterDivide, iterSubtract\n","iterNone":"\niterNone( iterator )\n    Tests whether all iterated values are falsy.\n\n    The function immediately returns upon encountering a truthy value.\n\n    If provided an iterator which does not return any iterated values, the\n    function returns `true`.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator over which to iterate.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `false` if a value is truthy; otherwise, the\n        function returns `true`.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 0, 0, 0, 0, 1 ] );\n    > var bool = iterNone( arr )\n    false\n\n    See Also\n    --------\n    iterAny, iterEvery, iterForEach, iterNoneBy, iterSome\n","iterNoneBy":"\niterNoneBy( iterator, predicate[, thisArg ] )\n    Tests whether every iterated value fails a test implemented by a predicate\n    function.\n\n    The predicate function is provided two arguments:\n\n    - value: iterated value\n    - index: iteration index\n\n    The function immediately returns upon encountering a truthy return value.\n\n    If provided an iterator which does not return any iterated values, the\n    function returns `true`.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator over which to iterate.\n\n    predicate: Function\n        The test function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if a predicate function returns a falsy\n        value for all iterated values. Otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 1, 1, 1, 1, 1 ] );\n    > function fcn( v ) { return ( v <= 0 ); };\n    > var bool = iterNoneBy( arr, fcn )\n    true\n\n    See Also\n    --------\n    iterAnyBy, iterEveryBy, iterForEach, iterNone, iterSomeBy\n","iterNonFibonacci":"\niterNonFibonacci( [options] )\n    Returns an iterator which generates a non-Fibonacci integer sequence.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.iter: integer (optional)\n        Number of iterations. Default: 1e308.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = iterNonFibonacci();\n    > var v = it.next().value\n    4\n    > v = it.next().value\n    6\n\n    See Also\n    --------\n    base.nonfibonacci, iterFibonacci\n","iterNth":"\niterNth( iterator, n )\n    Returns the nth iterated value.\n\n    If `n` exceeds the total number of iterations, the function returns\n    `undefined`.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator over which to iterate.\n\n    n: integer\n        Iteration number.\n\n    Returns\n    -------\n    v: any\n        The nth iterated value.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 0, 0, 1, 0, 0 ] );\n    > var v = iterNth( arr, 3 )\n    1\n\n    See Also\n    --------\n    iterFirst, iterLast\n","iterPeriodicSinc":"\niterPeriodicSinc( n[, options] )\n    Returns an iterator which generates a periodic sinc waveform.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    n: integer\n        Order.\n\n    options: Object (optional)\n        Function options.\n\n    options.period: integer (optional)\n        Period (i.e., the number of iterations before a waveform repeats).\n        Default: 100.\n\n    options.amplitude: number (optional)\n        Peak amplitude. Default: 1.0.\n\n    options.offset: integer (optional)\n        Phase offset (in units of iterations; zero-based). A negative offset\n        translates the waveform to the left. A positive offset translates a\n        waveform to the right. Default: 0.\n\n    options.iter: integer (optional)\n        Number of iterations. Default: 1e308.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = iterPeriodicSinc( 7 );\n    > var v = it.next().value\n    <number>\n    > v = it.next().value\n    <number>\n\n    See Also\n    --------\n    iterSineWave\n","iterPipeline":"\niterPipeline( iterFcn[, ...iterFcn] )\n    Returns an iterator pipeline.\n\n    Parameters\n    ----------\n    iterFcn: Function|Array\n        Iterator function or an array of iterator functions.\n\n    iterFcn: ...Function (optional)\n        Iterator functions.\n\n    Returns\n    -------\n    fcn( src ): Function\n        Iterator pipeline which accepts a single argument, a source iterator.\n\n    Examples\n    --------\n    > var it1 = iterThunk( iterHead, 100 );\n    > function f( r ) { return ( r > 0.95 ); };\n    > var it2 = iterThunk( iterSomeBy, 5, f );\n    > var p = iterPipeline( it1, it2 );\n    > var bool = p( random.iterators.randu() )\n    <boolean>\n\n    See Also\n    --------\n    iterFlow, iterThunk\n","iterPop":"\niterPop( iterator[, clbk[, thisArg]] )\n    Returns an iterator which skips the last value of a provided iterator.\n\n    If an environment supports Symbol.iterator and a provided iterator is\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    clbk: Function (optional)\n        Callback to invoke with the skipped value.\n\n    thisArg: any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it1 = array2iterator( [ 1, 2 ] );\n    > var it2 = iterPop( it1 );\n    > var v = it2.next().value\n    1\n    > var bool = it2.next().done\n    true\n\n    See Also\n    --------\n    iterPush, iterShift, iterSlice\n","iterprod":"\niterprod( iterator )\n    Computes the product of all iterated values.\n\n    For iterators which can generate many values or which may output large\n    numbers, care should be taken to prevent overflow.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    out: number|null\n        Product.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 1.0, 2.0, 3.0, 4.0 ] );\n    > var s = iterprod( arr )\n    24.0\n\n    See Also\n    --------\n    itermprod, itersum\n","iterPulse":"\niterPulse( [options] )\n    Returns an iterator which generates a pulse waveform.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.period: integer (optional)\n        Pulse period (i.e., the number of iterations until a waveform repeats).\n        Default: 10.\n\n    options.duration: integer (optional)\n        Pulse duration (i.e., the number of consecutive iterations of maximum\n        amplitude during one period). Default: floor(options.period/2).\n\n    options.min: number (optional)\n        Minimum amplitude. Default: 0.0.\n\n    options.max: number (optional)\n        Maximum amplitude. Default: 1.0.\n\n    options.offset: integer (optional)\n        Phase offset (in units of iterations; zero-based). A negative offset\n        translates the waveform to the left. A positive offset translates a\n        waveform to the right. Default: 0.\n\n    options.iter: integer (optional)\n        Number of iterations. Default: 1e308.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = iterPulse();\n    > var v = it.next().value\n    1.0\n    > v = it.next().value\n    1.0\n\n    See Also\n    --------\n    iterSawtoothWave, iterSineWave, iterSquareWave, iterTriangleWave\n","iterPush":"\niterPush( iterator, ...items )\n    Returns an iterator which appends additional values to the end of a provided\n    iterator.\n\n    If an environment supports Symbol.iterator and a provided iterator is\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    items: ...any\n        Items to append.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it1 = array2iterator( [ 1, 2 ] );\n    > var it2 = iterPush( it1, 3, 4 );\n    > var v = it2.next().value\n    1\n    > v = it2.next().value\n    2\n    > v = it2.next().value\n    3\n    > v = it2.next().value\n    4\n    > var bool = it2.next().done\n    true\n\n    See Also\n    --------\n    iterConcat, iterUnshift\n","iterrange":"\niterrange( iterator )\n    Computes the range of all iterated values.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    out: number|null\n        Range.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 1.0, -2.0, 3.0, -4.0 ] );\n    > var v = iterrange( arr )\n    7.0\n\n    See Also\n    --------\n    itermax, itermean, itermin, itermrange\n","iterReject":"\niterReject( iterator, predicate[, thisArg] )\n    Returns an iterator which rejects a provided iterator's values according to\n    a predicate function.\n\n    When invoked, the predicate function is provided two arguments:\n\n    - value: iterated value\n    - index: iteration index (zero-based)\n\n    If an environment supports Symbol.iterator and a provided iterator is\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    predicate: Function\n        Predicate function to invoke for each iterated value.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > function f( v ) { return ( v > 2 ); };\n    > var it1 = array2iterator( [ 1, 3, 2, 4 ] );\n    > var it2 = iterReject( it1, f );\n    > var v = it2.next().value\n    1\n    > v = it2.next().value\n    2\n\n    See Also\n    --------\n    iterFilter, iterMap\n","iterReplicate":"\niterReplicate( iterator, n )\n    Returns an iterator which replicates each iterated value `n` times.\n\n    If an environment supports Symbol.iterator and a provided iterator is\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    n: integer\n        Number of times each iterated value is replicated.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it1 = array2iterator( [ 1, 2, 3, 4 ] );\n    > var it2 = iterReplicate( it1, 2 );\n    > var v = it2.next().value\n    1\n    > v = it2.next().value\n    1\n    > v = it2.next().value\n    2\n    > v = it2.next().value\n    2\n\n    See Also\n    --------\n    iterReplicateBy\n","iterReplicateBy":"\niterReplicateBy( iterator, fcn[, thisArg] )\n    Returns an iterator which replicates each iterated value according to a\n    provided function.\n\n    The callback function is provided three arguments:\n\n    - value: iterated value\n    - index: source iteration index (zero-based)\n    - n: iteration index (zero-based)\n\n    The callback function is invoked *once* per iterated value of the provided\n    iterator.\n\n    The callback function *must* return an integer value. If the return value is\n    less than or equal to zero, the returned iterator skips an iterated value\n    and invokes the callback for the next iterated value of the provided\n    iterator.\n\n    If an environment supports Symbol.iterator and a provided iterator is\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    fcn: Function\n        Function which returns the number of times an iterated value should be\n        replicated.\n\n    thisArg: any (optional)\n        Callback function execution context.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it1 = array2iterator( [ 1, 2, 3, 4 ] );\n    > function f( v, i ) { return i + 1; };\n    > var it2 = iterReplicateBy( it1, f );\n    > var v = it2.next().value\n    1\n    > v = it2.next().value\n    2\n    > v = it2.next().value\n    2\n    > v = it2.next().value\n    3\n    > v = it2.next().value\n    3\n    > v = it2.next().value\n    3\n    > v = it2.next().value\n    4\n\n    See Also\n    --------\n    iterReplicate\n","iterSawtoothWave":"\niterSawtoothWave( [options] )\n    Returns an iterator which generates a sawtooth wave.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.period: integer (optional)\n        Period (i.e., the number of iterations before a waveform repeats).\n        Default: 10.\n\n    options.amplitude: number (optional)\n        Peak amplitude. Default: 1.0.\n\n    options.offset: integer (optional)\n        Phase offset (in units of iterations; zero-based). A negative offset\n        translates the waveform to the left. A positive offset translates a\n        waveform to the right. Default: 0.\n\n    options.iter: integer (optional)\n        Number of iterations. Default: 1e308.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = iterSawtoothWave();\n    > var v = it.next().value\n    <number>\n    > v = it.next().value\n    <number>\n\n    See Also\n    --------\n    iterPulse, iterSineWave, iterSquareWave, iterTriangleWave\n","iterShift":"\niterShift( iterator[, clbk[, thisArg]] )\n    Returns an iterator which skips the first value of a provided iterator.\n\n    If an environment supports Symbol.iterator and a provided iterator is\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    clbk: Function (optional)\n        Callback to invoke with the skipped value.\n\n    thisArg: any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it1 = array2iterator( [ 1, 2 ] );\n    > var it2 = iterShift( it1 );\n    > var v = it2.next().value\n    2\n    > var bool = it2.next().done\n    true\n\n    See Also\n    --------\n    iterPop, iterSlice, iterUnshift\n","iterSineWave":"\niterSineWave( [options] )\n    Returns an iterator which generates a sine wave.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.period: integer (optional)\n        Period (i.e., the number of iterations before a sine wave repeats).\n        Default: 10.\n\n    options.amplitude: number (optional)\n        Peak amplitude. Default: 1.0.\n\n    options.offset: integer (optional)\n        Phase offset (in units of iterations; zero-based). A negative offset\n        translates the waveform to the left. A positive offset translates a\n        waveform to the right. Default: 0.\n\n    options.iter: integer (optional)\n        Number of iterations. Default: 1e308.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = iterSineWave();\n    > var v = it.next().value\n    <number>\n    > v = it.next().value\n    <number>\n\n    See Also\n    --------\n    iterCosineWave, iterPulse, iterSawtoothWave, iterSquareWave, iterTriangleWave\n","iterSlice":"\niterSlice( iterator[, begin[, end]] )\n    Returns an iterator which returns a subsequence of iterated values from a\n    provided iterator.\n\n    If `end` exceeds the length of the provided iterator, the returned iterator\n    returns the subsequence of iterated values starting from `begin` until the\n    last iterated value of the provided iterator.\n\n    If an environment supports Symbol.iterator and a provided iterator is\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    begin: integer (optional)\n        Start iteration index (zero-based and inclusive). Default: 0.\n\n    end: integer (optional)\n        End iteration index (zero-based and non-inclusive).\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = iterSlice( random.iterators.randu(), 5, 10 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    iterFirst, iterHead\n","iterSome":"\niterSome( iterator, n )\n    Tests whether at least `n` iterated values are truthy.\n\n    The function immediately returns upon finding `n` truthy values.\n\n    If provided an iterator which does not return any iterated values, the\n    function returns `false`.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator over which to iterate.\n\n    n: number\n        Minimum number of truthy elements.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if an iterator returns at least `n` truthy\n        elements; otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 0, 0, 1, 1, 1 ] );\n    > var bool = iterSome( arr, 3 )\n    true\n\n    See Also\n    --------\n    iterAny, iterEvery, iterForEach, iterNone, iterSomeBy\n","iterSomeBy":"\niterSomeBy( iterator, n, predicate[, thisArg ] )\n    Tests whether at least `n` iterated values pass a test implemented by a\n    predicate function.\n\n    The predicate function is provided two arguments:\n\n    - value: iterated value\n    - index: iteration index\n\n    The function immediately returns upon encountering `n` truthy return values.\n\n    If provided an iterator which does not return any iterated values, the\n    function returns `false`.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator over which to iterate.\n\n    n: integer\n        Minimum number of successful values.\n\n    predicate: Function\n        The test function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if a predicate function returns a truthy\n        value for at least `n` iterated values. Otherwise, the function returns\n        `false`.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 1, 1, 0, 0, 1 ] );\n    > function fcn( v ) { return ( v > 0 ); };\n    > var bool = iterSomeBy( arr, 3, fcn )\n    true\n\n    See Also\n    --------\n    iterAnyBy, iterEveryBy, iterForEach, iterNoneBy, iterSome\n","iterSquareWave":"\niterSquareWave( [options] )\n    Returns an iterator which generates a square wave.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.period: integer (optional)\n        Period (i.e., the number of iterations before a square wave repeats).\n        This must be an even integer in order to ensure a 50% duty cycle.\n        Default: 10.\n\n    options.min: number (optional)\n        Minimum amplitude. Default: -1.0.\n\n    options.max: number (optional)\n        Maximum amplitude. Default: 1.0.\n\n    options.offset: integer (optional)\n        Phase offset (in units of iterations; zero-based). A negative offset\n        translates the waveform to the left. A positive offset translates a\n        waveform to the right. Default: 0.\n\n    options.iter: integer (optional)\n        Number of iterations. Default: 1e308.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = iterSquareWave();\n    > var v = it.next().value\n    1.0\n    > v = it.next().value\n    1.0\n\n    See Also\n    --------\n    iterPulse, iterSawtoothWave, iterSineWave, iterTriangleWave\n","iterstdev":"\niterstdev( iterator[, mean] )\n    Computes a correct sample standard deviation over all iterated values.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    mean: number (optional)\n        Known mean.\n\n    Returns\n    -------\n    out: number|null\n        Corrected sample standard deviation.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, -5.0 ] );\n    > var m = iterstdev( arr )\n    ~4.95\n\n    See Also\n    --------\n    itermean, itervariance\n","iterSubtract":"\niterSubtract( iter0, ...iterator )\n    Returns an iterator which performs element-wise subtraction of two or more\n    iterators.\n\n    The length of the returned iterator is equal to the length of the shortest\n    provided iterator. In other words, the returned iterator ends once *one* of\n    the provided iterators ends.\n\n    If provided a numeric value as an iterator argument, the value is broadcast\n    as an infinite iterator which always returns the provided value.\n\n    If an environment supports Symbol.iterator and provided iterators are\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iter0: Object\n        Input iterator.\n\n    iterator: ...Object\n        Iterators to subtract.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it1 = array2iterator( [ 1.0, 5.0 ] );\n    > var it2 = array2iterator( [ 3.0, 4.0 ] );\n    > var it = iterSubtract( it1, it2 );\n    > var v = it.next().value\n    -2.0\n    > v = it.next().value\n    1.0\n    > var bool = it.next().done\n    true\n\n    See Also\n    --------\n    iterAdd, iterDivide, iterMultiply\n","itersum":"\nitersum( iterator )\n    Computes the sum of all iterated values.\n\n    For iterators which can generate many values or which may output large\n    numbers, care should be taken to prevent overflow.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    out: number|null\n        Sum.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 1.0, 2.0, 3.0, 4.0 ] );\n    > var s = itersum( arr )\n    10.0\n\n    See Also\n    --------\n    itermean, itermsum, iterprod\n","itersumabs":"\nitersumabs( iterator )\n    Computes the sum of absolute values for all iterated values.\n\n    For iterators which can generate many values or which may output large\n    numbers, care should be taken to prevent overflow.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    out: number|null\n        Sum of absolute values.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ -1.0, 2.0, -3.0, 4.0 ] );\n    > var s = itersumabs( arr )\n    10.0\n\n    See Also\n    --------\n    itermeanabs, itermsumabs, itersum\n","itersumabs2":"\nitersumabs2( iterator )\n    Computes the sum of squared absolute values for all iterated values.\n\n    For iterators which can generate many values or which may output large\n    numbers, care should be taken to prevent overflow.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    out: number|null\n        Sum of squared absolute values.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ -1.0, 2.0, -3.0, 4.0 ] );\n    > var s = itersumabs2( arr )\n    30.0\n\n    See Also\n    --------\n    itermeanabs2, itermsumabs2, itersumabs\n","iterThunk":"\niterThunk( iterFcn[, ...args] )\n    Returns an iterator \"thunk\".\n\n    A provided iterator function should have the following function signature:\n\n      iterFcn( iterator, ...args )\n\n    The returned function expects a single argument, an iterator.\n\n    This function is useful within the context of iterator pipelines as a means\n    to defer execution until a pipeline is ready for data flow.\n\n    Parameters\n    ----------\n    iterFcn: Function\n        Iterator function.\n\n    args: ...any (optional)\n        Function arguments.\n\n    Returns\n    -------\n    fcn( iter ): Function\n        Function which accepts a single argument, an iterator, and invokes a\n        previously provided iterator function with the provided iterator and any\n        previously provided arguments.\n\n    Examples\n    --------\n    > var fcn = iterThunk( iterSome, 3 );\n    > var arr = array2iterator( [ 0, 0, 1, 1, 1 ] );\n    > var bool = fcn( arr )\n    true\n\n    See Also\n    --------\n    iterPipeline\n","iterTriangleWave":"\niterTriangleWave( [options] )\n    Returns an iterator which generates a triangle wave.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.period: integer (optional)\n        Period (i.e., the number of iterations before a waveform repeats).\n        Default: 10.\n\n    options.amplitude: number (optional)\n        Peak amplitude. Default: 1.0.\n\n    options.offset: integer (optional)\n        Phase offset (in units of iterations; zero-based). A negative offset\n        translates the waveform to the left. A positive offset translates a\n        waveform to the right. Default: 0.\n\n    options.iter: integer (optional)\n        Number of iterations. Default: 1e308.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = iterTriangleWave();\n    > var v = it.next().value\n    <number>\n    > v = it.next().value\n    <number>\n\n    See Also\n    --------\n    iterPulse, iterSawtoothWave, iterSineWave, iterSquareWave\n","iterUnion":"\niterUnion( iter0, ...iterator )\n    Returns an iterator which returns the union of two or more iterators.\n\n    Value \"uniqueness\" is determined according to strict equality.\n\n    A returned iterator internally buffers unique values and, thus, has O(N)\n    memory requirements, where `N` is the total number of source iterator\n    values.\n\n    If an environment supports Symbol.iterator and all provided iterators are\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iter0: Object\n        Input iterator.\n\n    iterator: ...Object\n        Input iterators.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it1 = array2iterator( [ 1, 2, 1, 2, 4 ] );\n    > var it2 = array2iterator( [ 1, 2, 5, 2, 3 ] );\n    > var it = iterUnion( it1, it2 );\n    > var v = it.next().value\n    1\n    > v = it.next().value\n    2\n    > v = it.next().value\n    4\n    > v = it.next().value\n    5\n    > v = it.next().value\n    3\n    > var bool = it.next().done\n    true\n\n    See Also\n    --------\n    iterIntersection, iterUnique\n","iterUnique":"\niterUnique( iterator )\n    Returns an iterator which returns unique values.\n\n    Value \"uniqueness\" is determined according to strict equality.\n\n    A returned iterator internally buffers unique values and, thus, has O(N)\n    memory requirements.\n\n    If an environment supports Symbol.iterator and a provided iterator is\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it1 = array2iterator( [ 1, 2, 1, 2, 4 ] );\n    > var it2 = iterUnique( it1 );\n    > var v = it2.next().value\n    1\n    > v = it2.next().value\n    2\n    > v = it2.next().value\n    4\n    > var bool = it2.next().done\n    true\n\n    See Also\n    --------\n    iterUniqueBy, iterUniqueByHash\n","iterUniqueBy":"\niterUniqueBy( iterator, predicate[, thisArg] )\n    Returns an iterator which returns unique values according to a predicate\n    function.\n\n    A returned iterator internally buffers unique values and, thus, has O(N)\n    memory requirements.\n\n    A predicate function is invoked for each iterated value against each value\n    in an internal buffer consisting of previously identified unique values.\n    Thus, as the number of unique values grows, so, too, does the number of\n    predicate function invocations per iterated value.\n\n    An iterated value is considered \"unique\" if the predicate function returns\n    truthy values for all comparisons of the iterated value with each value in\n    the internal buffer.\n\n    If an environment supports Symbol.iterator and a provided iterator is\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    predicate: Function\n        A binary function with parameters `a` and `b` corresponding to iterated\n        values. If the values are the same, the function should return `false`\n        (i.e., non-unique); otherwise, if the values are distinct, the function\n        should return `true` (i.e., unique).\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it1 = array2iterator( [ 1, 2, 1, 2, 4 ] );\n    > function f( a, b ) { return ( a !== b ); };\n    > var it2 = iterUniqueBy( it1, f );\n    > var v = it2.next().value\n    1\n    > v = it2.next().value\n    2\n    > v = it2.next().value\n    4\n    > var bool = it2.next().done\n    true\n\n    See Also\n    --------\n    iterUnique, iterUniqueByHash\n","iterUniqueByHash":"\niterUniqueByHash( iterator, hashFcn[, thisArg] )\n    Returns an iterator which returns unique values according to a hash\n    function.\n\n    A returned iterator internally buffers unique hashes and, thus, has O(N)\n    memory requirements.\n\n    An iterated value is considered \"unique\" if the hash function returns a\n    unique hash value for that iterated value. Beware that this *may* result in\n    unexpected behavior. Namely, only the first iterated value mapping to a\n    particular hash function result is returned, even if subsequent values,\n    while mapping to the same hash, are different. Accordingly, iteration order\n    *does* matter.\n\n    If an environment supports Symbol.iterator and a provided iterator is\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    hashFcn: Function\n        Hash function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it1 = array2iterator( [ 1, 2, 1, 2, 4 ] );\n    > function f( v ) { return v.toString(); };\n    > var it2 = iterUniqueByHash( it1, f );\n    > var v = it2.next().value\n    1\n    > v = it2.next().value\n    2\n    > v = it2.next().value\n    4\n    > var bool = it2.next().done\n    true\n\n    See Also\n    --------\n    iterUnique, iterUniqueBy\n","iterUnshift":"\niterUnshift( iterator, ...items )\n    Returns an iterator which prepends values to the beginning of a provided\n    iterator.\n\n    If an environment supports Symbol.iterator and a provided iterator is\n    iterable, the returned iterator is iterable.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    items: ...any\n        Items to prepend.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it1 = array2iterator( [ 1, 2 ] );\n    > var it2 = iterUnshift( it1, 3, 4 );\n    > var v = it2.next().value\n    3\n    > v = it2.next().value\n    4\n    > v = it2.next().value\n    1\n    > v = it2.next().value\n    2\n    > var bool = it2.next().done\n    true\n\n    See Also\n    --------\n    iterConcat, iterPush, iterShift\n","itervariance":"\nitervariance( iterator[, mean] )\n    Computes an unbiased sample variance over all iterated values.\n\n    Parameters\n    ----------\n    iterator: Object\n        Input iterator.\n\n    mean: number (optional)\n        Known mean.\n\n    Returns\n    -------\n    out: number|null\n        Unbiased sample variance.\n\n    Examples\n    --------\n    > var arr = array2iterator( [ 2.0, -5.0 ] );\n    > var s2 = itervariance( arr )\n    24.5\n\n    See Also\n    --------\n    itermean, iterstdev\n","joinStream":"\njoinStream( [options] )\n    Returns a transform stream which joins streamed data.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. Default: '\\n'.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.allowHalfOpen: boolean (optional)\n        Specifies whether a stream should remain open even if one side ends.\n        Default: false.\n\n    options.readableObjectMode: boolean (optional)\n        Specifies whether the readable side should be in \"objectMode\". Default:\n        false.\n\n    Returns\n    -------\n    stream: TransformStream\n        Transform stream.\n\n    Examples\n    --------\n    > var s = joinStream();\n    > s.write( 'a' );\n    > s.write( 'b' );\n    > s.write( 'c' );\n    > s.end();\n\n\njoinStream.factory( [options] )\n    Returns a function for creating transform streams for joined streamed data.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. Default: '\\n'.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.allowHalfOpen: boolean (optional)\n        Specifies whether a stream should remain open even if one side ends.\n        Default: false.\n\n    options.readableObjectMode: boolean (optional)\n        Specifies whether the readable side should be in \"objectMode\". Default:\n        false.\n\n    Returns\n    -------\n    createStream: Function\n        Function for creating transform streams.\n\n    Examples\n    --------\n    > var opts = { 'highWaterMark': 64 };\n    > var createStream = joinStream.factory( opts );\n    > var s = createStream();\n    > s.write( 'a' );\n    > s.write( 'b' );\n    > s.write( 'c' );\n    > s.end();\n\n\njoinStream.objectMode( [options] )\n    Returns an \"objectMode\" transform stream for joining streamed data.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. Default: '\\n'.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.allowHalfOpen: boolean (optional)\n        Specifies whether a stream should remain open even if one side ends.\n        Default: false.\n\n    options.readableObjectMode: boolean (optional)\n        Specifies whether the readable side should be in \"objectMode\". Default:\n        false.\n\n    Returns\n    -------\n    stream: TransformStream\n        Transform stream operating in \"objectMode\".\n\n    Examples\n    --------\n    > var s = joinStream.objectMode();\n    > s.write( { 'value': 'a' } );\n    > s.write( { 'value': 'b' } );\n    > s.write( { 'value': 'c' } );\n    > s.end();\n\n    See Also\n    --------\n    splitStream\n","joinStream.factory":"\njoinStream.factory( [options] )\n    Returns a function for creating transform streams for joined streamed data.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. Default: '\\n'.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.allowHalfOpen: boolean (optional)\n        Specifies whether a stream should remain open even if one side ends.\n        Default: false.\n\n    options.readableObjectMode: boolean (optional)\n        Specifies whether the readable side should be in \"objectMode\". Default:\n        false.\n\n    Returns\n    -------\n    createStream: Function\n        Function for creating transform streams.\n\n    Examples\n    --------\n    > var opts = { 'highWaterMark': 64 };\n    > var createStream = joinStream.factory( opts );\n    > var s = createStream();\n    > s.write( 'a' );\n    > s.write( 'b' );\n    > s.write( 'c' );\n    > s.end();\n\n","joinStream.objectMode":"\njoinStream.objectMode( [options] )\n    Returns an \"objectMode\" transform stream for joining streamed data.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. Default: '\\n'.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.allowHalfOpen: boolean (optional)\n        Specifies whether a stream should remain open even if one side ends.\n        Default: false.\n\n    options.readableObjectMode: boolean (optional)\n        Specifies whether the readable side should be in \"objectMode\". Default:\n        false.\n\n    Returns\n    -------\n    stream: TransformStream\n        Transform stream operating in \"objectMode\".\n\n    Examples\n    --------\n    > var s = joinStream.objectMode();\n    > s.write( { 'value': 'a' } );\n    > s.write( { 'value': 'b' } );\n    > s.write( { 'value': 'c' } );\n    > s.end();\n\n    See Also\n    --------\n    splitStream\n","kde2d":"","keyBy":"\nkeyBy( collection, fcn[, thisArg] )\n    Converts a collection to an object whose keys are determined by a provided\n    function and whose values are the collection values.\n\n    When invoked, the input function is provided two arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n\n    If more than one element in a collection resolves to the same key, the key\n    value is the collection element which last resolved to the key.\n\n    Object values are shallow copies.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: Object\n        Output object.\n\n    Examples\n    --------\n    > function toKey( v ) { return v.a; };\n    > var arr = [ { 'a': 1 }, { 'a': 2 } ];\n    > keyBy( arr, toKey )\n    { '1': { 'a': 1 }, '2': { 'a': 2 } }\n\n    See Also\n    --------\n    forEach\n","keyByRight":"\nkeyByRight( collection, fcn[, thisArg] )\n    Converts a collection to an object whose keys are determined by a provided\n    function and whose values are the collection values, iterating from right to\n    left.\n\n    When invoked, the input function is provided two arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n\n    If more than one element in a collection resolves to the same key, the key\n    value is the collection element which last resolved to the key.\n\n    Object values are shallow copies.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: Object\n        Output object.\n\n    Examples\n    --------\n    > function toKey( v ) { return v.a; };\n    > var arr = [ { 'a': 1 }, { 'a': 2 } ];\n    > keyByRight( arr, toKey )\n    { '2': { 'a': 2 }, '1': { 'a': 1 } }\n\n    See Also\n    --------\n    forEachRight, keyBy\n","keysIn":"\nkeysIn( obj )\n    Returns an array of an object's own and inherited enumerable property\n    names.\n\n    Name order is not guaranteed, as object key enumeration is not specified\n    according to the ECMAScript specification. In practice, however, most\n    engines use insertion order to sort an object's keys, thus allowing for\n    deterministic extraction.\n\n    Parameters\n    ----------\n    obj: any\n        Input value.\n\n    Returns\n    -------\n    keys: Array\n        Value array.\n\n    Examples\n    --------\n    > function Foo() { this.beep = 'boop'; return this; };\n    > Foo.prototype.foo = 'bar';\n    > var obj = new Foo();\n    > var keys = keysIn( obj )\n    e.g., [ 'beep', 'foo' ]\n\n    See Also\n    --------\n    objectEntriesIn, objectKeys, objectValuesIn\n","kruskalTest":"\nkruskalTest( ...x[, options] )\n    Computes the Kruskal-Wallis test for equal medians.\n\n    Parameters\n    ----------\n    x: ...Array\n        Measured values.\n\n    options: Object (optional)\n        Options.\n\n    options.alpha: number (optional)\n        Number in the interval `[0,1]` giving the significance level of the\n        hypothesis test. Default: `0.05`.\n\n    options.groups: Array (optional)\n        Array of group indicators.\n\n    Returns\n    -------\n    out: Object\n        Test result object.\n\n    out.alpha: number\n        Significance level.\n\n    out.rejected: boolean\n        Test decision.\n\n    out.pValue: number\n        p-value of the test.\n\n    out.statistic: number\n        Value of test statistic.\n\n    out.method: string\n        Name of test.\n\n    out.df: Object\n        Degrees of freedom.\n\n    out.print: Function\n        Function to print formatted output.\n\n    Examples\n    --------\n    // Data from Hollander & Wolfe (1973), p. 116:\n    > var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n    > var y = [ 3.8, 2.7, 4.0, 2.4 ];\n    > var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n\n    > var out = kruskalTest( x, y, z )\n\n    > var arr = [ 2.9, 3.0, 2.5, 2.6, 3.2,\n    ...     3.8, 2.7, 4.0, 2.4,\n    ...     2.8, 3.4, 3.7, 2.2, 2.0\n    ... ];\n    > var groups = [\n    ...     'a', 'a', 'a', 'a', 'a',\n    ...     'b', 'b', 'b', 'b',\n    ...     'c', 'c', 'c', 'c', 'c'\n    ... ];\n    > out = kruskalTest( arr, { 'groups': groups })\n\n","kstest":"\nkstest( x, y[, ...params][, options] )\n    Computes a Kolmogorov-Smirnov goodness-of-fit test.\n\n    For a numeric array or typed array `x`, a Kolmogorov-Smirnov goodness-of-fit\n    is computed for the null hypothesis that the values of `x` come from the\n    distribution specified by `y`. `y` can be either a string with the name of\n    the distribution to test against, or a function.\n\n    In the latter case, `y` is expected to be the cumulative distribution\n    function (CDF) of the distribution to test against, with its first parameter\n    being the value at which to evaluate the CDF and the remaining parameters\n    constituting the parameters of the distribution. The parameters of the\n    distribution are passed as additional arguments after `y` from `kstest` to\n    the chosen CDF. The function returns an object holding the calculated test\n    statistic `statistic` and the `pValue` of the test.\n\n    The returned object comes with a `.print()` method which when invoked will\n    print a formatted output of the hypothesis test results.\n\n    Parameters\n    ----------\n    x: Array<number>\n        Input array holding numeric values.\n\n    y: Function|string\n        Either a CDF function or a string denoting the name of a distribution.\n\n    params: ...number (optional)\n        Distribution parameters passed to reference CDF.\n\n    options: Object (optional)\n        Function options.\n\n    options.alpha: number (optional)\n        Number in the interval `[0,1]` giving the significance level of the\n        hypothesis test. Default: `0.05`.\n\n    options.sorted: boolean (optional)\n        Boolean indicating if the input array is already in sorted order.\n        Default: `false`.\n\n    options.alternative: string (optional)\n        Either `two-sided`, `less` or `greater`. Indicates whether the\n        alternative hypothesis is that the true distribution of `x` is not equal\n        to the reference distribution specified by `y` (`two-sided`), whether it\n        is `less` than the reference distribution or `greater` than the\n        reference distribution. Default: `'two-sided'`.\n\n    Returns\n    -------\n    out: Object\n        Test result object.\n\n    out.alpha: number\n        Used significance level.\n\n    out.rejected: boolean\n        Test decision.\n\n    out.pValue: number\n        p-value of the test.\n\n    out.statistic: number\n        Value of test statistic.\n\n    out.alternative: string\n        Used test alternative. Either `two-sided`, `less` or `greater`.\n\n    out.method: string\n        Name of test.\n\n    out.print: Function\n        Function to print formatted output.\n\n    Examples\n    --------\n    // Verify that data is drawn from a normal distribution:\n    > var rnorm = base.random.normal.factory({ 'seed': 4839 });\n    > var x = new Array( 100 );\n    > for ( var i = 0; i < 100; i++ ) { x[ i ] = rnorm( 3.0, 1.0 ); }\n\n    // Test against N(0,1)\n    > var out = kstest( x, 'normal', 0.0, 1.0 )\n    { pValue: 0.0, statistic: 0.847, ... }\n\n    // Test against N(3,1)\n    > out = kstest( x, 'normal', 3.0, 1.0 )\n    { pValue: 0.6282, statistic: 0.0733, ... }\n\n    // Verify that data is drawn from a uniform distribution:\n    > runif = base.random.uniform.factory( 0.0, 1.0, { 'seed': 8798 })\n    > x = new Array( 100 );\n    > for ( i = 0; i < x.length; i++ ) { x[ i ] = runif(); }\n    > out = kstest( x, 'uniform', 0.0, 1.0 )\n    { pValue: ~0.703, statistic: ~0.069, ... }\n\n    // Print output:\n    > out.print()\n    Kolmogorov-Smirnov goodness-of-fit test.\n\n    Null hypothesis: the CDF of `x` is equal equal to the reference CDF.\n\n        pValue: 0.7039\n        statistic: 0.0689\n\n    Test Decision: Fail to reject null in favor of alternative at 5%\n    significance level\n\n    // Set custom significance level:\n    > out = kstest( x, 'uniform', 0.0, 1.0, { 'alpha': 0.1 })\n    { pValue: ~0.7039, statistic: ~0.069, ... }\n\n    // Carry out one-sided hypothesis tests:\n    > runif = base.random.uniform.factory( 0.0, 1.0, { 'seed': 8798 });\n    > x = new Array( 100 );\n    > for ( i = 0; i < x.length; i++ ) { x[ i ] = runif(); }\n    > out = kstest( x, 'uniform', 0.0, 1.0, { 'alternative': 'less' })\n    { pValue: ~0.358, statistic: ~0.07, ... }\n    > out = kstest( x, 'uniform', 0.0, 1.0, { 'alternative': 'greater' })\n    { pValue: ~0.907, statistic: ~0.02, ... }\n\n    // Set `sorted` option to true when data is in increasing order:\n    > x = [ 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9 ];\n    > out = kstest( x, 'uniform', 0.0, 1.0, { 'sorted': true })\n    { pValue: ~1, statistic: 0.1, ... }\n\n","LinkedList":"\nLinkedList()\n    Linked list constructor.\n\n    Returns\n    -------\n    list: Object\n        Linked list.\n\n    list.clear: Function\n        Clears the list.\n\n    list.first: Function\n        Returns the last node. If the list is empty, the returned value is\n        `undefined`.\n\n    list.insert: Function\n        Inserts a value after a provided list node.\n\n    list.iterator: Function\n        Returns an iterator for iterating over a list. If an environment\n        supports Symbol.iterator, the returned iterator is iterable. Note that,\n        in order to prevent confusion arising from list mutation during\n        iteration, a returned iterator **always** iterates over a list\n        \"snapshot\", which is defined as the list of list elements at the time\n        of the method's invocation.\n\n    list.last: Function\n        Returns the last list node. If the list is empty, the returned value is\n        `undefined`.\n\n    list.length: integer\n        List length.\n\n    list.pop: Function\n        Removes and returns the last list value. If the list is empty, the\n        returned value is `undefined`.\n\n    list.push: Function\n        Adds a value to the end of the list.\n\n    list.remove: Function\n        Removes a list node from the list.\n\n    list.shift: Function\n        Removes and returns the first list value. If the list is empty, the\n        returned value is `undefined`.\n\n    list.toArray: Function\n        Returns an array of list values.\n\n    list.toJSON: Function\n        Serializes a list as JSON.\n\n    list.unshift: Function\n        Adds a value to the beginning of the list.\n\n    Examples\n    --------\n    > var list = LinkedList();\n    > list.push( 'foo' ).push( 'bar' );\n    > list.length\n    2\n    > list.pop()\n    'bar'\n    > list.length\n    1\n    > list.pop()\n    'foo'\n    > list.length\n    0\n\n    See Also\n    --------\n    DoublyLinkedList, Stack\n","linspace":"\nlinspace( start, stop[, length] )\n    Generates a linearly spaced numeric array.\n\n    If a `length` is not provided, the default output array length is `100`.\n\n    The output array is guaranteed to include the `start` and `stop` values.\n\n    Parameters\n    ----------\n    start: number\n        First array value.\n\n    stop: number\n        Last array value.\n\n    length: integer (optional)\n        Length of output array. Default: `100`.\n\n    Returns\n    -------\n    arr: Array\n        Linearly spaced numeric array.\n\n    Examples\n    --------\n    > var arr = linspace( 0, 100, 6 )\n    [ 0, 20, 40, 60, 80, 100 ]\n\n    See Also\n    --------\n    incrspace, logspace\n","LIU_NEGATIVE_OPINION_WORDS_EN":"\nLIU_NEGATIVE_OPINION_WORDS_EN()\n    Returns a list of negative opinion words.\n\n    A word's appearance in a sentence does *not* necessarily imply a positive or\n    negative opinion.\n\n    The list includes misspelled words. Their presence is intentional, as such\n    misspellings frequently occur in social media content.\n\n    Returns\n    -------\n    out: Array<string>\n        List of negative opinion words.\n\n    Examples\n    --------\n    > var list = LIU_NEGATIVE_OPINION_WORDS_EN()\n    [ '2-faced', '2-faces', 'abnormal', 'abolish', ... ]\n\n    References\n    ----------\n    - Hu, Minqing, and Bing Liu. 2004. \"Mining and Summarizing Customer\n    Reviews.\" In *Proceedings of the Tenth Acm Sigkdd International Conference\n    on Knowledge Discovery and Data Mining*, 168–77. KDD '04. New York, NY, USA:\n    ACM. doi:10.1145/1014052.1014073.\n    - Liu, Bing, Minqing Hu, and Junsheng Cheng. 2005. \"Opinion Observer:\n    Analyzing and Comparing Opinions on the Web.\" In *Proceedings of the 14th\n    International Conference on World Wide Web*, 342–51. WWW '05. New York, NY,\n    USA: ACM. doi:10.1145/1060745.1060797.\n\n    * If you use the list for publication or third party consumption, please\n    cite one of the listed references.\n\n    See Also\n    --------\n    LIU_POSITIVE_OPINION_WORDS_EN\n","LIU_POSITIVE_OPINION_WORDS_EN":"\nLIU_POSITIVE_OPINION_WORDS_EN()\n    Returns a list of positive opinion words.\n\n    A word's appearance in a sentence does *not* necessarily imply a positive or\n    negative opinion.\n\n    The list includes misspelled words. Their presence is intentional, as such\n    misspellings frequently occur in social media content.\n\n    Returns\n    -------\n    out: Array<string>\n        List of positive opinion words.\n\n    Examples\n    --------\n    > var list = LIU_POSITIVE_OPINION_WORDS_EN()\n    [ 'a+', 'abound', 'abounds', 'abundance', ... ]\n\n    References\n    ----------\n    - Hu, Minqing, and Bing Liu. 2004. 'Mining and Summarizing Customer\n    Reviews.' In *Proceedings of the Tenth Acm Sigkdd International Conference\n    on Knowledge Discovery and Data Mining*, 168–77. KDD '04. New York, NY, USA:\n    ACM. doi:10.1145/1014052.1014073.\n    - Liu, Bing, Minqing Hu, and Junsheng Cheng. 2005. 'Opinion Observer:\n    Analyzing and Comparing Opinions on the Web.' In *Proceedings of the 14th\n    International Conference on World Wide Web*, 342–51. WWW '05. New York, NY,\n    USA: ACM. doi:10.1145/1060745.1060797.\n\n    * If you use the list for publication or third party consumption, please\n    cite one of the listed references.\n\n    See Also\n    --------\n    LIU_NEGATIVE_OPINION_WORDS_EN\n","LN_HALF":"\nLN_HALF\n    Natural logarithm of `1/2`.\n\n    Examples\n    --------\n    > LN_HALF\n    -0.6931471805599453\n\n","LN_PI":"\nLN_PI\n    Natural logarithm of the mathematical constant `π`.\n\n    Examples\n    --------\n    > LN_PI\n    1.1447298858494002\n\n    See Also\n    --------\n    PI\n","LN_SQRT_TWO_PI":"\nLN_SQRT_TWO_PI\n    Natural logarithm of the square root of `2π`.\n\n    Examples\n    --------\n    > LN_SQRT_TWO_PI\n    0.9189385332046728\n\n    See Also\n    --------\n    PI\n","LN_TWO_PI":"\nLN_TWO_PI\n    Natural logarithm of `2π`.\n\n    Examples\n    --------\n    > LN_TWO_PI\n    1.8378770664093456\n\n    See Also\n    --------\n    TWO_PI\n","LN2":"\nLN2\n    Natural logarithm of `2`.\n\n    Examples\n    --------\n    > LN2\n    0.6931471805599453\n\n    See Also\n    --------\n    LN10\n","LN10":"\nLN10\n    Natural logarithm of `10`.\n\n    Examples\n    --------\n    > LN10\n    2.302585092994046\n\n    See Also\n    --------\n    LN2\n","LOG2E":"\nLOG2E\n    Base 2 logarithm of Euler's number.\n\n    Examples\n    --------\n    > LOG2E\n    1.4426950408889634\n\n    See Also\n    --------\n    E, LOG10E\n","LOG10E":"\nLOG10E\n    Base 10 logarithm of Euler's number.\n\n    Examples\n    --------\n    > LOG10E\n    0.4342944819032518\n\n    See Also\n    --------\n    E, LOG2E\n","logspace":"\nlogspace( a, b[, length] )\n    Generates a logarithmically spaced numeric array between `10^a` and `10^b`.\n\n    If a `length` is not provided, the default output array length is `10`.\n\n    The output array includes the values `10^a` and `10^b`.\n\n    Parameters\n    ----------\n    a: number\n        Exponent of start value.\n\n    b: number\n        Exponent of end value.\n\n    length: integer (optional)\n        Length of output array. Default: `10`.\n\n    Returns\n    -------\n    arr: Array\n        Logarithmically spaced numeric array.\n\n    Examples\n    --------\n    > var arr = logspace( 0, 2, 6 )\n    [ 1, ~2.5, ~6.31, ~15.85, ~39.81, 100 ]\n\n    See Also\n    --------\n    incrspace, linspace\n","lowercase":"\nlowercase( str )\n    Converts a `string` to lowercase.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Lowercase string.\n\n    Examples\n    --------\n    > var out = lowercase( 'bEEp' )\n    'beep'\n\n    See Also\n    --------\n    uncapitalize, uppercase\n","lowercaseKeys":"\nlowercaseKeys( obj )\n    Converts each object key to lowercase.\n\n    The function only transforms own properties. Hence, the function does not\n    transform inherited properties.\n\n    The function shallow copies key values.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > var obj = { 'A': 1, 'B': 2 };\n    > var out = lowercaseKeys( obj )\n    { 'a': 1, 'b': 2 }\n\n    See Also\n    --------\n    uncapitalizeKeys, uppercaseKeys\n","lowess":"\nlowess( x, y[, options] )\n    Locally-weighted polynomial regression via the LOWESS algorithm.\n\n    Parameters\n    ----------\n    x: Array<number>\n        x-axis values (abscissa values).\n\n    y: Array<number>\n        Corresponding y-axis values (ordinate values).\n\n    options: Object (optional)\n        Function options.\n\n    options.f: number (optional)\n        Positive number specifying the smoothing span, i.e., the proportion of\n        points which influence smoothing at each value. Larger values\n        correspond to more smoothing. Default: `2/3`.\n\n    options.nsteps: number (optional)\n        Number of iterations in the robust fit (fewer iterations translates to\n        faster function execution). If set to zero, the nonrobust fit is\n        returned. Default: `3`.\n\n    options.delta: number (optional)\n        Nonnegative number which may be used to reduce the number of\n        computations. Default: 1/100th of the range of `x`.\n\n    options.sorted: boolean (optional)\n        Boolean indicating if the input array `x` is sorted. Default: `false`.\n\n    Returns\n    -------\n    out: Object\n        Object with ordered x-values and fitted values.\n\n    Examples\n    --------\n    > var x = new Float64Array( 100 );\n    > var y = new Float64Array( x.length );\n    > for ( var i = 0; i < x.length; i++ ) {\n    ...     x[ i ] = i;\n    ...     y[ i ] = ( 0.5*i ) + ( 10.0*base.random.randn() );\n    ... }\n    > var out = lowess( x, y );\n    > var yhat = out.y;\n\n    > var h = Plot( [ x, x ], [ y, yhat ] );\n    > h.lineStyle = [ 'none', '-' ];\n    > h.symbols = [ 'closed-circle', 'none' ];\n\n    > h.view( 'window' );\n\n","lpad":"\nlpad( str, len[, pad] )\n    Left pads a `string` such that the padded `string` has a length of at least\n    `len`.\n\n    An output string is not guaranteed to have a length of exactly `len`, but to\n    have a length of at least `len`. To generate a padded string having a length\n    equal to `len`, post-process a padded string by trimming off excess\n    characters.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    len: integer\n        Minimum string length.\n\n    pad: string (optional)\n        String used to pad. Default: ' '.\n\n    Returns\n    -------\n    out: string\n        Padded string.\n\n    Examples\n    --------\n    > var out = lpad( 'a', 5 )\n    '    a'\n    > out = lpad( 'beep', 10, 'b' )\n    'bbbbbbbeep'\n    > out = lpad( 'boop', 12, 'beep' )\n    'beepbeepboop'\n\n    See Also\n    --------\n    pad, rpad\n","ltrim":"\nltrim( str )\n    Trims whitespace from the beginning of a `string`.\n\n    \"Whitespace\" is defined as the following characters:\n\n    - \\f\n    - \\n\n    - \\r\n    - \\t\n    - \\v\n    - \\u0020\n    - \\u00a0\n    - \\u1680\n    - \\u2000-\\u200a\n    - \\u2028\n    - \\u2029\n    - \\u202f\n    - \\u205f\n    - \\u3000\n    - \\ufeff\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Trimmed string.\n\n    Examples\n    --------\n    > var out = ltrim( ' \\r\\n\\t  Beep \\t\\t\\n  ' )\n    'Beep \\t\\t\\n  '\n\n    See Also\n    --------\n    trim, rtrim\n","MALE_FIRST_NAMES_EN":"\nMALE_FIRST_NAMES_EN()\n    Returns a list of common male first names in English speaking countries.\n\n    Returns\n    -------\n    out: Array<string>\n        List of common male first names.\n\n    Examples\n    --------\n    > var list = MALE_FIRST_NAMES_EN()\n    [ 'Aaron', 'Ab', 'Abba', 'Abbe', ... ]\n\n    References\n    ----------\n    - Ward, Grady. 2002. 'Moby Word II.' <http://www.gutenberg.org/files/3201/\n    3201.txt>.\n\n    See Also\n    --------\n    FEMALE_FIRST_NAMES_EN\n","mapFun":"\nmapFun( fcn, n[, thisArg] )\n    Invokes a function `n` times and returns an array of accumulated function\n    return values.\n\n    The invoked function is provided a single argument: the invocation index\n    (zero-based).\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to invoke.\n\n    n: integer\n        Number of times to invoke a function.\n\n    thisArg: any (optional)\n        Function execution context.\n\n    Returns\n    -------\n    out: Array\n        Array of accumulated function return values.\n\n    Examples\n    --------\n    > function fcn( i ) { return i; };\n    > var arr = mapFun( fcn, 5 )\n    [ 0, 1, 2, 3, 4 ]\n\n    See Also\n    --------\n    mapFunAsync\n","mapFunAsync":"\nmapFunAsync( fcn, n, [options,] done )\n    Invokes a function `n` times and returns an array of accumulated function\n    return values.\n\n    For each iteration, the provided function is invoked with two arguments:\n\n    - `index`: invocation index (starting from zero)\n    - `next`: callback to be invoked upon function completion\n\n    The `next` callback accepts two arguments:\n\n    - `error`: error argument\n    - `result`: function result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to invoke.\n\n    n: integer\n        Number of times to invoke a function.\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to allow only one pending invocation at a\n        time. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    done: Function\n        A callback invoked upon executing a provided function `n` times or upon\n        encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function fcn( i, next ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         next( null, i );\n    ...     }\n    ... };\n    > function done( error, arr ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( arr );\n    ... };\n    > mapFunAsync( fcn, 10, done )\n    [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n\n    // Limit number of concurrent invocations:\n    > function fcn( i, next ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         next( null, i );\n    ...     }\n    ... };\n    > function done( error, arr ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( arr );\n    ... };\n    > var opts = { 'limit': 2 };\n    > mapFunAsync( fcn, 10, opts, done )\n    [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n\n    // Sequential invocation:\n    > function fcn( i, next ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         next( null, i );\n    ...     }\n    ... };\n    > function done( error, arr ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( arr );\n    ... };\n    > var opts = { 'series': true };\n    > mapFunAsync( fcn, 10, opts, done )\n    [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n\n\nmapFunAsync.factory( [options,] fcn )\n    Returns a function which invokes a function `n` times and returns an array\n    of accumulated function return values.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to allow only one pending invocation at a\n        time. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        Function to invoke.\n\n    Returns\n    -------\n    out: Function\n        A function which invokes a function `n` times and returns an array of\n        accumulated function return values.\n\n    Examples\n    --------\n    > function fcn( i, next ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         next( null, i );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = mapFunAsync.factory( opts, fcn );\n    > function done( error, arr ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( arr );\n    ... };\n    > f( 10, done )\n    [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n\n    See Also\n    --------\n    mapFun\n","mapFunAsync.factory":"\nmapFunAsync.factory( [options,] fcn )\n    Returns a function which invokes a function `n` times and returns an array\n    of accumulated function return values.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to allow only one pending invocation at a\n        time. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        Function to invoke.\n\n    Returns\n    -------\n    out: Function\n        A function which invokes a function `n` times and returns an array of\n        accumulated function return values.\n\n    Examples\n    --------\n    > function fcn( i, next ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         next( null, i );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = mapFunAsync.factory( opts, fcn );\n    > function done( error, arr ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( arr );\n    ... };\n    > f( 10, done )\n    [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]\n\n    See Also\n    --------\n    mapFun\n","mapKeys":"\nmapKeys( obj, transform )\n    Maps keys from one object to a new object having the same values.\n\n    The transform function is provided three arguments:\n\n    - `key`: object key\n    - `value`: object value corresponding to `key`\n    - `obj`: the input object\n\n    The value returned by a transform function should be a value which can be\n    serialized as an object key.\n\n    The function only maps own properties. Hence, the function does not map\n    inherited properties.\n\n    The function shallow copies key values.\n\n    Key iteration order is *not* guaranteed.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    transform: Function\n        Transform function. Return values specify the keys of the output object.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > function transform( key, value ) { return key + value; };\n    > var obj = { 'a': 1, 'b': 2 };\n    > var out = mapKeys( obj, transform )\n    { 'a1': 1, 'b2': 2 }\n\n    See Also\n    --------\n    mapValues\n","mapKeysAsync":"\nmapKeysAsync( obj, [options,] transform, done )\n    Maps keys from one object to a new object having the same values.\n\n    When invoked, `transform` is provided a maximum of four arguments:\n\n    - `key`: object key\n    - `value`: object value corresponding to `key`\n    - `obj`: the input object\n    - `next`: a callback to be invoked after processing an object `key`\n\n    The actual number of provided arguments depends on function length. If\n    `transform` accepts two arguments, `transform` is provided:\n\n    - `key`\n    - `next`\n\n    If `transform` accepts three arguments, `transform` is provided:\n\n    - `key`\n    - `value`\n    - `next`\n\n    For every other `transform` signature, `transform` is provided all four\n    arguments.\n\n    The `next` callback accepts two arguments:\n\n    - `error`: error argument\n    - `key`: transformed key\n\n    If a `transform` function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    The key returned by a transform function should be a value which can be\n    serialized as an object key.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function only maps own properties. Hence, the function does not map\n    inherited properties.\n\n    The function shallow copies key values.\n\n    Key iteration and insertion order are *not* guaranteed.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each property sequentially.\n        Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    transform: Function\n        Transform function. Returned values specify the keys of the output\n        object.\n\n    done: Function\n        A callback invoked either upon processing all own properties or upon\n        encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function transform( key, value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         next( null, key+':'+value );\n    ...     }\n    ... };\n    > function done( error, out ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( out );\n    ... };\n    > var obj = { 'a': 1, 'b': 2 };\n    > mapKeysAsync( obj, transform, done )\n    { 'a:1': 1, 'b:2': 2 }\n\n    // Limit number of concurrent invocations:\n    > function transform( key, value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         next( null, key+':'+value );\n    ...     }\n    ... };\n    > function done( error, out ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( out );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var obj = { 'a': 1, 'b': 2, 'c': 3 };\n    > mapKeysAsync( obj, opts, transform, done )\n    { 'a:1': 1, 'b:2': 2, 'c:3': 3 }\n\n    // Process sequentially:\n    > function transform( key, value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         next( null, key+':'+value );\n    ...     }\n    ... };\n    > function done( error, out ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( out );\n    ... };\n    > var opts = { 'series': true };\n    > var obj = { 'a': 1, 'b': 2, 'c': 3 };\n    > mapKeysAsync( obj, opts, transform, done )\n    { 'a:1': 1, 'b:2': 2, 'c:3': 3 }\n\n\nmapKeysAsync.factory( [options,] transform )\n    Returns a function which maps keys from one object to a new object having\n    the same values.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each property sequentially.\n        Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    transform: Function\n        Transform function. Returned values specify the keys of the output\n        object.\n\n    Returns\n    -------\n    out: Function\n        A function which maps keys from one object to a new object having the\n        same values.\n\n    Examples\n    --------\n    > function transform( key, value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         next( null, key+':'+value );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = mapKeysAsync.factory( opts, transform );\n    > function done( error, out ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( out );\n    ... };\n    > var obj = { 'a': 1, 'b': 2, 'c': 3 };\n    > f( obj, done )\n    { 'a:1': 1, 'b:2': 2, 'c:3': 3 }\n    > obj = { 'beep': 'boop' };\n    > f( obj, done )\n    { 'beep:boop': 'beep' }\n\n    See Also\n    --------\n    mapKeys, mapValuesAsync\n","mapKeysAsync.factory":"\nmapKeysAsync.factory( [options,] transform )\n    Returns a function which maps keys from one object to a new object having\n    the same values.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each property sequentially.\n        Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    transform: Function\n        Transform function. Returned values specify the keys of the output\n        object.\n\n    Returns\n    -------\n    out: Function\n        A function which maps keys from one object to a new object having the\n        same values.\n\n    Examples\n    --------\n    > function transform( key, value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         next( null, key+':'+value );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = mapKeysAsync.factory( opts, transform );\n    > function done( error, out ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( out );\n    ... };\n    > var obj = { 'a': 1, 'b': 2, 'c': 3 };\n    > f( obj, done )\n    { 'a:1': 1, 'b:2': 2, 'c:3': 3 }\n    > obj = { 'beep': 'boop' };\n    > f( obj, done )\n    { 'beep:boop': 'beep' }\n\n    See Also\n    --------\n    mapKeys, mapValuesAsync\n","mapValues":"\nmapValues( obj, transform )\n    Maps values from one object to a new object having the same keys.\n\n    The transform function is provided three arguments:\n\n    - `value`: object value corresponding to `key`\n    - `key`: object key\n    - `obj`: the input object\n\n    The function only maps values from own properties. Hence, the function does\n    not map inherited properties.\n\n    The function shallow copies key values.\n\n    Key iteration order is *not* guaranteed.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    transform: Function\n        Transform function. Return values are the key values of the output\n        object.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > function transform( value, key ) { return key + value; };\n    > var obj = { 'a': 1, 'b': 2 };\n    > var out = mapValues( obj, transform )\n    { 'a': 'a1', 'b': 'b2' }\n\n    See Also\n    --------\n    mapKeys, omitBy, pickBy\n","mapValuesAsync":"\nmapValuesAsync( obj, [options,] transform, done )\n    Maps values from one object to a new object having the same keys.\n\n    When invoked, `transform` is provided a maximum of four arguments:\n\n    - `value`: object value corresponding to `key`\n    - `key`: object key\n    - `obj`: the input object\n    - `next`: a callback to be invoked after processing an object `value`\n\n    The actual number of provided arguments depends on function length. If\n    `transform` accepts two arguments, `transform` is provided:\n\n    - `value`\n    - `next`\n\n    If `transform` accepts three arguments, `transform` is provided:\n\n    - `value`\n    - `key`\n    - `next`\n\n    For every other `transform` signature, `transform` is provided all four\n    arguments.\n\n    The `next` callback accepts two arguments:\n\n    - `error`: error argument\n    - `value`: transformed value\n\n    If a `transform` function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function only maps values from own properties. Hence, the function does\n    not map inherited properties.\n\n    The function shallow copies key values.\n\n    Key iteration and insertion order are *not* guaranteed.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each property sequentially.\n        Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    transform: Function\n        Transform function. Return values are the key values of the output\n        object.\n\n    done: Function\n        A callback invoked either upon processing all own properties or upon\n        encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function transform( value, key, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         next( null, key+':'+value );\n    ...     }\n    ... };\n    > function done( error, out ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( out );\n    ... };\n    > var obj = { 'a': 1, 'b': 2 };\n    > mapValuesAsync( obj, transform, done )\n    { 'a': 'a:1', 'b': 'b:2' }\n\n    // Limit number of concurrent invocations:\n    > function transform( value, key, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         next( null, key+':'+value );\n    ...     }\n    ... };\n    > function done( error, out ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( out );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var obj = { 'a': 1, 'b': 2, 'c': 3 };\n    > mapValuesAsync( obj, opts, transform, done )\n    { 'a': 'a:1', 'b': 'b:2', 'c': 'c:3' }\n\n    // Process sequentially:\n    > function transform( value, key, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         next( null, key+':'+value );\n    ...     }\n    ... };\n    > function done( error, out ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( out );\n    ... };\n    > var opts = { 'series': true };\n    > var obj = { 'a': 1, 'b': 2, 'c': 3 };\n    > mapValuesAsync( obj, opts, transform, done )\n    { 'a': 'a:1', 'b': 'b:2', 'c': 'c:3' }\n\n\nmapValuesAsync.factory( [options,] transform )\n    Returns a function which maps values from one object to a new object having\n    the same keys.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each property sequentially.\n        Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    transform: Function\n        Transform function. Return values are the key values of the output\n        object.\n\n    Returns\n    -------\n    out: Function\n        A function which maps values from one object to a new object having the\n        same keys.\n\n    Examples\n    --------\n    > function transform( value, key, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         next( null, key+':'+value );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = mapValuesAsync.factory( opts, transform );\n    > function done( error, out ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( out );\n    ... };\n    > var obj = { 'a': 1, 'b': 2, 'c': 3 };\n    > f( obj, done )\n    { 'a': 'a:1', 'b': 'b:2', 'c': 'c:3' }\n    > obj = { 'beep': 'boop' };\n    > f( obj, done )\n    { 'beep': 'beep:boop' }\n\n    See Also\n    --------\n    mapKeysAsync, mapValues\n","mapValuesAsync.factory":"\nmapValuesAsync.factory( [options,] transform )\n    Returns a function which maps values from one object to a new object having\n    the same keys.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each property sequentially.\n        Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    transform: Function\n        Transform function. Return values are the key values of the output\n        object.\n\n    Returns\n    -------\n    out: Function\n        A function which maps values from one object to a new object having the\n        same keys.\n\n    Examples\n    --------\n    > function transform( value, key, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         next( null, key+':'+value );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = mapValuesAsync.factory( opts, transform );\n    > function done( error, out ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( out );\n    ... };\n    > var obj = { 'a': 1, 'b': 2, 'c': 3 };\n    > f( obj, done )\n    { 'a': 'a:1', 'b': 'b:2', 'c': 'c:3' }\n    > obj = { 'beep': 'boop' };\n    > f( obj, done )\n    { 'beep': 'beep:boop' }\n\n    See Also\n    --------\n    mapKeysAsync, mapValues\n","MAX_ARRAY_LENGTH":"\nMAX_ARRAY_LENGTH\n    Maximum length for a generic array.\n\n    Examples\n    --------\n    > MAX_ARRAY_LENGTH\n    4294967295\n\n    See Also\n    --------\n    MAX_TYPED_ARRAY_LENGTH\n","MAX_TYPED_ARRAY_LENGTH":"\nMAX_TYPED_ARRAY_LENGTH\n    Maximum length for a typed array.\n\n    Examples\n    --------\n    > MAX_TYPED_ARRAY_LENGTH\n    9007199254740991\n\n    See Also\n    --------\n    MAX_ARRAY_LENGTH\n","memoize":"\nmemoize( fcn[, hashFunction] )\n    Returns a memoized function.\n\n    The function does not set the `length` property of the returned function.\n    Accordingly, the returned function `length` is always zero.\n\n    The evaluation context is always `null`.\n\n    The function serializes provided arguments as a string and stores results\n    using the string as an identifier. To use a custom hash function, provide a\n    hash function argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to memoize.\n\n    hashFunction: Function (optional)\n        Function to map a set of arguments to a single value identifying that\n        set.\n\n    Returns\n    -------\n    out: Function\n        Memoized function.\n\n    Examples\n    --------\n    > function factorial( n ) {\n    ...     var prod;\n    ...     var i;\n    ...     prod = 1;\n    ...     for ( i = n; i > 1; i-- ) {\n    ...         prod *= i;\n    ...     }\n    ...     return prod;\n    ... };\n    > var memoized = memoize( factorial );\n    > var v = memoized( 5 )\n    120\n    > v = memoized( 5 )\n    120\n\n","merge":"\nmerge( target, ...source )\n    Merges objects into a target object.\n\n    The target object is mutated.\n\n    Only plain objects are merged and extended. Other values/types are either\n    deep copied or assigned.\n\n    Support for deep merging class instances is inherently fragile.\n\n    `Number`, `String`, and `Boolean` objects are merged as primitives.\n\n    Functions are not deep copied.\n\n    Parameters\n    ----------\n    target: Object\n        Target object.\n\n    source: ...Object\n        Source objects (i.e., objects to be merged into the target object).\n\n    Returns\n    -------\n    out: Object\n        Merged (target) object.\n\n    Examples\n    --------\n    > var target = { 'a': 'beep' };\n    > var source = { 'a': 'boop', 'b': 'bap' };\n    > var out = merge( target, source )\n    { 'a': 'boop', 'b': 'bap' }\n    > var bool = ( out === target )\n    true\n\n\nmerge.factory( options )\n    Returns a function for merging and extending objects.\n\n    Parameters\n    ----------\n    options: Object\n        Options.\n\n    options.level: integer (optional)\n        Merge level. Default: Infinity.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to deep copy merged values. Deep copying\n        prevents shared references and source object mutation. Default: true.\n\n    options.override: boolean|Function (optional)\n        Defines the merge strategy. If `true`, source object values will always\n        override target object values. If `false`, source values never override\n        target values (useful for adding, but not overwriting, properties). To\n        define a custom merge strategy, provide a function. Default: true.\n\n    options.extend: boolean (optional)\n        Boolean indicating whether new properties can be added to the target\n        object. If `false`, only shared properties are merged. Default: true.\n\n    Returns\n    -------\n    fcn: Function\n        Function which can be used to merge objects.\n\n    Examples\n    --------\n    > var opts = {\n    ...     'level': 100,\n    ...     'copy': true,\n    ...     'override': true,\n    ...     'extend': true\n    ... };\n    > var merge = merge.factory( opts )\n    <Function>\n\n    // Set the `level` option to limit the merge depth:\n    > merge = merge.factory( { 'level': 2 } );\n    > var target = {\n    ...     '1': { 'a': 'beep', '2': { '3': null, 'b': [ 5, 6, 7 ] } }\n    ... };\n    > var source = {\n    ...     '1': { 'b': 'boop', '2': { '3': [ 1, 2, 3 ] } }\n    ... };\n    > var out = merge( target, source )\n    { '1': { 'a': 'beep', 'b': 'boop', '2': { '3': [ 1, 2, 3 ] } } }\n\n    // Set the `copy` option to `false` to allow shared references:\n    > merge = merge.factory( { 'copy': false } );\n    > target = {};\n    > source = { 'a': [ 1, 2, 3 ] };\n    > out = merge( target, source );\n    > var bool = ( out.a === source.a )\n    true\n\n    // Set the `override` option to `false` to preserve existing properties:\n    > merge = merge.factory( { 'override': false } );\n    > target = { 'a': 'beep', 'b': 'boop' };\n    > source = { 'a': null, 'c': 'bop' };\n    > out = merge( target, source )\n    { 'a': 'beep', 'b': 'boop', 'c': 'bop' }\n\n    // Define a custom merge strategy:\n    > function strategy( a, b, key ) {\n    ...     // a => target value\n    ...     // b => source value\n    ...     // key => object key\n    ...     if ( key === 'a' ) {\n    ...         return b;\n    ...     }\n    ...     if ( key === 'b' ) {\n    ...         return a;\n    ...     }\n    ...     return 'bebop';\n    ... };\n    > merge = merge.factory( { 'override': strategy } );\n    > target = { 'a': 'beep', 'b': 'boop', 'c': 1234 };\n    > source = { 'a': null, 'b': {}, 'c': 'bop' };\n    > out = merge( target, source )\n    { 'a': null, 'b': 'boop', 'c': 'bebop' }\n\n    // Prevent non-existent properties from being added to the target object:\n    > merge = merge.factory( { 'extend': false } );\n    > target = { 'a': 'beep', 'b': 'boop' };\n    > source = { 'b': 'hello', 'c': 'world' };\n    > out = merge( target, source )\n    { 'a': 'beep', 'b': 'hello' }\n\n    See Also\n    --------\n    copy\n","merge.factory":"\nmerge.factory( options )\n    Returns a function for merging and extending objects.\n\n    Parameters\n    ----------\n    options: Object\n        Options.\n\n    options.level: integer (optional)\n        Merge level. Default: Infinity.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to deep copy merged values. Deep copying\n        prevents shared references and source object mutation. Default: true.\n\n    options.override: boolean|Function (optional)\n        Defines the merge strategy. If `true`, source object values will always\n        override target object values. If `false`, source values never override\n        target values (useful for adding, but not overwriting, properties). To\n        define a custom merge strategy, provide a function. Default: true.\n\n    options.extend: boolean (optional)\n        Boolean indicating whether new properties can be added to the target\n        object. If `false`, only shared properties are merged. Default: true.\n\n    Returns\n    -------\n    fcn: Function\n        Function which can be used to merge objects.\n\n    Examples\n    --------\n    > var opts = {\n    ...     'level': 100,\n    ...     'copy': true,\n    ...     'override': true,\n    ...     'extend': true\n    ... };\n    > var merge = merge.factory( opts )\n    <Function>\n\n    // Set the `level` option to limit the merge depth:\n    > merge = merge.factory( { 'level': 2 } );\n    > var target = {\n    ...     '1': { 'a': 'beep', '2': { '3': null, 'b': [ 5, 6, 7 ] } }\n    ... };\n    > var source = {\n    ...     '1': { 'b': 'boop', '2': { '3': [ 1, 2, 3 ] } }\n    ... };\n    > var out = merge( target, source )\n    { '1': { 'a': 'beep', 'b': 'boop', '2': { '3': [ 1, 2, 3 ] } } }\n\n    // Set the `copy` option to `false` to allow shared references:\n    > merge = merge.factory( { 'copy': false } );\n    > target = {};\n    > source = { 'a': [ 1, 2, 3 ] };\n    > out = merge( target, source );\n    > var bool = ( out.a === source.a )\n    true\n\n    // Set the `override` option to `false` to preserve existing properties:\n    > merge = merge.factory( { 'override': false } );\n    > target = { 'a': 'beep', 'b': 'boop' };\n    > source = { 'a': null, 'c': 'bop' };\n    > out = merge( target, source )\n    { 'a': 'beep', 'b': 'boop', 'c': 'bop' }\n\n    // Define a custom merge strategy:\n    > function strategy( a, b, key ) {\n    ...     // a => target value\n    ...     // b => source value\n    ...     // key => object key\n    ...     if ( key === 'a' ) {\n    ...         return b;\n    ...     }\n    ...     if ( key === 'b' ) {\n    ...         return a;\n    ...     }\n    ...     return 'bebop';\n    ... };\n    > merge = merge.factory( { 'override': strategy } );\n    > target = { 'a': 'beep', 'b': 'boop', 'c': 1234 };\n    > source = { 'a': null, 'b': {}, 'c': 'bop' };\n    > out = merge( target, source )\n    { 'a': null, 'b': 'boop', 'c': 'bebop' }\n\n    // Prevent non-existent properties from being added to the target object:\n    > merge = merge.factory( { 'extend': false } );\n    > target = { 'a': 'beep', 'b': 'boop' };\n    > source = { 'b': 'hello', 'c': 'world' };\n    > out = merge( target, source )\n    { 'a': 'beep', 'b': 'hello' }\n\n    See Also\n    --------\n    copy\n","MILLISECONDS_IN_DAY":"\nMILLISECONDS_IN_DAY\n    Number of milliseconds in a day.\n\n    The value is a generalization and does **not** take into account\n    inaccuracies due to daylight savings conventions, crossing timezones, or\n    other complications with time and dates.\n\n    Examples\n    --------\n    > var days = 3.14;\n    > var ms = days * MILLISECONDS_IN_DAY\n    271296000\n\n","MILLISECONDS_IN_HOUR":"\nMILLISECONDS_IN_HOUR\n    Number of milliseconds in an hour.\n\n    The value is a generalization and does **not** take into account\n    inaccuracies due to daylight savings conventions, crossing timezones, or\n    other complications with time and dates.\n\n    Examples\n    --------\n    > var hrs = 3.14;\n    > var ms = hrs * MILLISECONDS_IN_HOUR\n    11304000\n\n","MILLISECONDS_IN_MINUTE":"\nMILLISECONDS_IN_MINUTE\n    Number of milliseconds in a minute.\n\n    The value is a generalization and does **not** take into account\n    inaccuracies arising due to complications with time and dates.\n\n    Examples\n    --------\n    > var mins = 3.14;\n    > var ms = mins * MILLISECONDS_IN_MINUTE\n    188400\n\n","MILLISECONDS_IN_SECOND":"\nMILLISECONDS_IN_SECOND\n    Number of milliseconds in a second.\n\n    The value is a generalization and does **not** take into account\n    inaccuracies arising due to complications with time and dates.\n\n    Examples\n    --------\n    > var secs = 3.14;\n    > var ms = secs * MILLISECONDS_IN_SECOND\n    3140\n\n","MILLISECONDS_IN_WEEK":"\nMILLISECONDS_IN_WEEK\n    Number of milliseconds in a week.\n\n    The value is a generalization and does **not** take into account\n    inaccuracies due to daylight savings conventions, crossing timezones, or\n    other complications with time and dates.\n\n    Examples\n    --------\n    > var weeks = 3.14;\n    > var ms = weeks * MILLISECONDS_IN_WEEK\n    1899072000\n\n","MINARD_NAPOLEONS_MARCH":"\nMINARD_NAPOLEONS_MARCH( [options] )\n    Returns data for Charles Joseph Minard's cartographic depiction of\n    Napoleon's Russian campaign of 1812.\n\n    Data includes the following:\n\n    - army: army size\n    - cities: cities\n    - labels: map labels\n    - temperature: temperature during the army's return from Russia\n    - rivers: river data\n\n    Temperatures are on the Réaumur scale. Multiply each temperature by `1.25`\n    to convert to Celsius.\n\n    River data is formatted as GeoJSON.\n\n    River data is incomplete, with portions of rivers missing.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.data: string (optional)\n        Dataset name.\n\n    Returns\n    -------\n    out: Object|Array<Object>\n        Minard's data.\n\n    Examples\n    --------\n    > var data = MINARD_NAPOLEONS_MARCH();\n    > var army = data.army\n    [...]\n    > var cities = data.cities\n    [...]\n    > var labels = data.labels\n    [...]\n    > var river = data.river\n    {...}\n    > var t = data.temperature\n    [...]\n\n    References\n    ----------\n    - Minard, Charles Joseph. 1869. *Tableaux graphiques et cartes figuratives*.\n    Ecole nationale des ponts et chaussées.\n    - Wilkinson, Leland. 2005. *The Grammar of Graphics*. Springer-Verlag New\n    York. doi:10.1007/0-387-28695-0.\n\n","MINUTES_IN_DAY":"\nMINUTES_IN_DAY\n    Number of minutes in a day.\n\n    The value is a generalization and does **not** take into account\n    inaccuracies due to daylight savings conventions, crossing timezones, or\n    other complications with time and dates.\n\n    Examples\n    --------\n    > var days = 3.14;\n    > var mins = days * MINUTES_IN_DAY\n    4521.6\n\n","MINUTES_IN_HOUR":"\nMINUTES_IN_HOUR\n    Number of minutes in an hour.\n\n    The value is a generalization and does **not** take into account\n    inaccuracies due to daylight savings conventions, crossing timezones, or\n    other complications with time and dates.\n\n    Examples\n    --------\n    > var hrs = 3.14;\n    > var mins = hrs * MINUTES_IN_HOUR\n    188.4\n\n","MINUTES_IN_WEEK":"\nMINUTES_IN_WEEK\n    Number of minutes in a week.\n\n    The value is a generalization and does **not** take into account\n    inaccuracies due to daylight savings conventions, crossing timezones, or\n    other complications with time and dates.\n\n    Examples\n    --------\n    > var wks = 3.14;\n    > var mins = wks * MINUTES_IN_WEEK\n    31651.2\n\n","minutesInMonth":"\nminutesInMonth( [month[, year]] )\n    Returns the number of minutes in a month.\n\n    By default, the function returns the number of minutes in the current month\n    of the current year (according to local time). To determine the number of\n    minutes for a particular month and year, provide `month` and `year`\n    arguments.\n\n    A `month` may be either a month's integer value, three letter abbreviation,\n    or full name (case insensitive).\n\n    The function's return value is a generalization and does **not** take into\n    account inaccuracies due to daylight savings conventions, crossing\n    timezones, or other complications with time and dates.\n\n    Parameters\n    ----------\n    month: string|Date|integer (optional)\n        Month.\n\n    year: integer (optional)\n        Year.\n\n    Returns\n    -------\n    out: integer\n        Minutes in a month.\n\n    Examples\n    --------\n    > var num = minutesInMonth()\n    <number>\n    > num = minutesInMonth( 2 )\n    <number>\n    > num = minutesInMonth( 2, 2016 )\n    41760\n    > num = minutesInMonth( 2, 2017 )\n    40320\n\n    // Other ways to supply month:\n    > num = minutesInMonth( 'feb', 2016 )\n    41760\n    > num = minutesInMonth( 'february', 2016 )\n    41760\n\n    See Also\n    --------\n    minutesInYear\n","minutesInYear":"\nminutesInYear( [value] )\n    Returns the number of minutes in a year according to the Gregorian calendar.\n\n    By default, the function returns the number of minutes in the current year\n    (according to local time). To determine the number of minutes for a\n    particular year, provide either a year or a `Date` object.\n\n    The function's return value is a generalization and does **not** take into\n    account inaccuracies due to daylight savings conventions, crossing\n    timezones, or other complications with time and dates.\n\n    Parameters\n    ----------\n    value: integer|Date (optional)\n        Year or `Date` object.\n\n    Returns\n    -------\n    out: integer\n        Number of minutes in a year.\n\n    Examples\n    --------\n    > var num = minutesInYear()\n    <number>\n    > num = minutesInYear( 2016 )\n    527040\n    > num = minutesInYear( 2017 )\n    525600\n\n    See Also\n    --------\n    minutesInMonth\n","MOBY_DICK":"\nMOBY_DICK()\n    Returns the text of Moby Dick by Herman Melville.\n\n    Each array element has the following fields:\n\n    - chapter: book chapter (number or identifier)\n    - title: chapter title (if available; otherwise, empty)\n    - text: chapter text\n\n    Returns\n    -------\n    out: Array<Object>\n        Book text.\n\n    Examples\n    --------\n    > var data = MOBY_DICK()\n    [ {...}, {...}, ... ]\n\n","MONTH_NAMES_EN":"\nMONTH_NAMES_EN()\n    Returns a list of month names (English).\n\n    Returns\n    -------\n    out: Array<string>\n        List of month names.\n\n    Examples\n    --------\n    > var list = MONTH_NAMES_EN()\n    [ 'January', 'February', 'March', 'April', ... ]\n\n","MONTHS_IN_YEAR":"\nMONTHS_IN_YEAR\n    Number of months in a year.\n\n    The value is a generalization and does **not** take into account\n    inaccuracies due to daylight savings conventions, crossing timezones, or\n    other complications with time and dates.\n\n    Examples\n    --------\n    > var yrs = 3.14;\n    > var mons = yrs * MONTHS_IN_YEAR\n    37.68\n\n","moveProperty":"\nmoveProperty( source, prop, target )\n    Moves a property from one object to another object.\n\n    The property is deleted from the source object and the property's descriptor\n    is preserved during transfer.\n\n    If a source property is not configurable, the function throws an error, as\n    the property cannot be deleted from the source object.\n\n    Parameters\n    ----------\n    source: Object\n        Source object.\n\n    prop: string\n        Property to move.\n\n    target: Object\n        Target object.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether operation was successful.\n\n    Examples\n    --------\n    > var obj1 = { 'a': 'b' };\n    > var obj2 = {};\n    > var bool = moveProperty( obj1, 'a', obj2 )\n    true\n    > bool = moveProperty( obj1, 'c', obj2 )\n    false\n\n","namedtypedtuple":"\nnamedtypedtuple( fields[, options] )\n    Returns a named typed tuple factory.\n\n    Named tuples assign a property name, and thus a meaning, to each position in\n    a tuple and allow for more readable, self-documenting code.\n\n    Named typed tuples can be used wherever typed arrays are used, with the\n    added benefit that they allow accessing fields by both field name and\n    position index.\n\n    Named typed tuples may be one the following data types:\n\n    - float64: double-precision floating-point numbers (IEEE 754)\n    - float32: single-precision floating-point numbers (IEEE 754)\n    - int32: 32-bit two's complement signed integers\n    - uint32: 32-bit unsigned integers\n    - int16: 16-bit two's complement signed integers\n    - uint16: 16-bit unsigned integers\n    - int8: 8-bit two's complement signed integers\n    - uint8: 8-bit unsigned integers\n    - uint8c: 8-bit unsigned integers clamped to 0-255\n\n    Parameters\n    ----------\n    fields: Array<string>\n        Field (property) names.\n\n    options: Object (optional)\n        Function options.\n\n    options.dtype: string (optional)\n        Default tuple data type. If a data type is not provided to a named typed\n        tuple factory, this option specifies the underlying tuple data type.\n        Default: 'float64'.\n\n    options.name: string (optional)\n        Tuple name. Default: 'tuple'.\n\n    Returns\n    -------\n    factory: Function\n        Named typed tuple factory.\n\n    Examples\n    --------\n    > var opts = {};\n    > opts.name = 'Point';\n    > var factory = namedtypedtuple( [ 'x', 'y' ], opts );\n    > var tuple = factory();\n\n\nfactory()\n    Returns a named typed tuple of the default data type.\n\n    Returns\n    -------\n    tuple: TypedArray\n        Named typed tuple.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y' ] );\n    > p = factory();\n    > p.x\n    0.0\n    > p.y\n    0.0\n    > p[ 0 ]\n    0.0\n    > p[ 1 ]\n    0.0\n\n\nfactory( dtype )\n    Returns a named typed tuple of the specified data type.\n\n    Parameters\n    ----------\n    dtype: string\n        Tuple data type.\n\n    Returns\n    -------\n    tuple: TypedArray\n        Named typed tuple.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y' ] );\n    > p = factory( 'int32' );\n    > p.x\n    0\n    > p.y\n    0\n    > p[ 0 ]\n    0\n    > p[ 1 ]\n    0\n\n\nfactory( typedarray[, dtype] )\n    Creates a named typed tuple from a typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate a named typed tuple.\n\n    dtype: string (optional)\n        Tuple data type.\n\n    Returns\n    -------\n    tuple: TypedArray\n        Named typed tuple.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y' ] );\n    > p = factory( Float64Array[ 1.0, -1.0 ] );\n    > p.x\n    1.0\n    > p.y\n    -1.0\n    > p[ 0 ]\n    1.0\n    > p[ 1 ]\n    -1.0\n\n\nfactory( obj[, dtype] )\n    Creates a named typed tuple from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a named typed\n        tuple.\n\n    dtype: string (optional)\n        Tuple data type.\n\n    Returns\n    -------\n    tuple: TypedArray\n        Named typed tuple.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y' ] );\n    > p = factory( [ 1, -1 ], 'int32' );\n    > p.x\n    1\n    > p.y\n    -1\n    > p[ 0 ]\n    1\n    > p[ 1 ]\n    -1\n\n\nfactory( buffer[, byteOffset][, dtype] )\n    Returns a named typed tuple view of an ArrayBuffer.\n\n    The view length equals the number of tuple fields.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first tuple element.\n        Default: 0.\n\n    dtype: string (optional)\n        Tuple data type.\n\n    Returns\n    -------\n    tuple: TypedArray\n        Named typed tuple.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y' ] );\n    > var buf = new ArrayBuffer( 16 );\n    > var p = factory( buf, 4, 'float32' );\n    > p.x\n    0.0\n    > p.y\n    0.0\n    > p[ 0 ]\n    0.0\n    > p[ 1 ]\n    0.0\n\n\nfactory.from( src[, map[, thisArg]] )\n    Creates a new named typed tuple from an array-like object or an iterable.\n\n    A callback is provided the following arguments:\n\n    - value: source value.\n    - index: source index.\n    - field: tuple field.\n\n    Parameters\n    ----------\n    src: ArrayLike|Iterable\n        Source of tuple elements.\n\n    map: Function (optional)\n        Callback to invoke for each source element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    tuple: TypedArray\n        Named typed tuple.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y' ] );\n    > function mapFcn( v ) { return v * 2.0; };\n    > var p = factory.from( [ 1.0, -1.0 ], mapFcn );\n    > p.x\n    2.0\n    > p.y\n    -2.0\n    > p[ 0 ]\n    2.0\n    > p[ 1 ]\n    -2.0\n\n\nfactory.fromObject( obj[, map[, thisArg]] )\n    Creates a new named typed tuple from an object containing tuple fields.\n\n    A callback is provided the following arguments:\n\n    - value: source object tuple field value.\n    - field: source object tuple field name.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    map: Function (optional)\n        Callback to invoke for each source object tuple field.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    tuple: TypedArray\n        Named typed tuple.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y' ] );\n    > var p = factory.fromObject( { 'x': 2.0, 'y': -2.0 } );\n    > p.x\n    2.0\n    > p.y\n    -2.0\n    > p[ 0 ]\n    2.0\n    > p[ 1 ]\n    -2.0\n\n\nfactory.of( element0[, element1[, ...elementN]] )\n    Creates a new named typed tuple from a variable number of arguments.\n\n    The number of arguments *must* equal the number of tuple fields.\n\n    Parameters\n    ----------\n    element0: number\n        Tuple element.\n\n    element1: number (optional)\n        Tuple element.\n\n    elementN: number (optional)\n        Tuple elements.\n\n    Returns\n    -------\n    tuple: TypedArray\n        Named typed tuple.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y' ] );\n    > var p = factory.of( 2.0, -2.0 );\n    > p.x\n    2.0\n    > p.y\n    -2.0\n    > p[ 0 ]\n    2.0\n    > p[ 1 ]\n    -2.0\n\n\ntuple.BYTES_PER_ELEMENT\n    Size (in bytes) of each tuple element.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y' ] );\n    > var p = factory( [ 1.0, -1.0 ] );\n    > p.BYTES_PER_ELEMENT\n    8\n\n\ntuple.buffer\n    Pointer to the underlying data buffer.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y' ] );\n    > var p = factory( [ 1.0, -1.0 ] );\n    > p.buffer\n    <ArrayBuffer>\n\n\ntuple.byteLength\n    Length (in bytes) of the tuple.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y' ] );\n    > var p = factory( [ 1.0, -1.0 ] );\n    > p.byteLength\n    16\n\n\ntuple.byteOffset\n    Offset (in bytes) of a tuple from the start of its underlying ArrayBuffer.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y' ] );\n    > var p = factory( [ 1.0, -1.0 ] );\n    > p.byteOffset\n    0\n\n\ntuple.length\n    Tuple length (i.e., number of elements).\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y' ] );\n    > var p = factory( [ 1.0, -1.0 ] );\n    > p.length\n    2\n\n\ntuple.name\n    Tuple name.\n\n    Examples\n    --------\n    > var opts = { 'name': 'Point' };\n    > var factory = namedtypedtuple( [ 'x', 'y' ], opts );\n    > var p = factory( [ 1.0, -1.0 ] );\n    > p.name\n    'Point'\n\n\ntuple.fields\n    Returns the list of tuple fields.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y' ] );\n    > var p = factory( [ 1.0, -1.0 ] );\n    > p.fields\n    [ 'x', 'y' ]\n\n\ntuple.orderedFields\n    Returns the list of tuple fields in index order.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y' ] );\n    > var p = factory( [ 1.0, -1.0 ] );\n    > p[ 0 ]\n    1.0\n    > p.sort();\n    > p[ 0 ]\n    -1.0\n    > p.fields\n    [ 'x', 'y' ]\n    > p.orderedFields\n    [ 'y', 'x' ]\n\n\ntuple.copyWithin( target, start[, end] )\n    Copies a sequence of elements within the tuple starting at `start` and\n    ending at `end` (non-inclusive) to the position starting at `target`.\n\n    Parameters\n    ----------\n    target: integer\n        Target start index position.\n\n    start: integer\n        Source start index position.\n\n    end: integer (optional)\n        Source end index position. Default: tuple.length.\n\n    Returns\n    -------\n    tuple: TypedArray\n        Modified tuple.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y', 'z', 'w', 'v' ] );\n    > var p = factory( [ 2.0, -2.0, 1.0, -1.0, 1.0 ] );\n    > p.copyWithin( 3, 0, 2 );\n    > p.w\n    2.0\n    > p.v\n    -2.0\n\n\ntuple.entries()\n    Returns an iterator for iterating over tuple key-value pairs.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over tuple key-value pairs.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y' ] );\n    > var p = factory( [ 1.0, -1.0 ] );\n    > it = p.entries();\n    > it.next().value\n    [ 0, 'x', 1.0 ]\n    > it.next().value\n    [ 1, 'y', -1.0 ]\n    > it.next().done\n    true\n\n\ntuple.every( predicate[, thisArg] )\n    Tests whether all tuple elements pass a test implemented by a predicate\n    function.\n\n    A predicate function is provided the following arguments:\n\n    - value: tuple element.\n    - index: tuple index.\n    - field: tuple field name.\n    - tuple: tuple on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests tuple elements. If a predicate function\n        returns a truthy value, a tuple element passes; otherwise, a tuple\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether all tuple elements pass.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y' ] );\n    > var p = factory( [ 1.0, -1.0 ] );\n    > function predicate( v ) { return ( v >= 0.0 ); };\n    > p.every( predicate )\n    false\n\n\ntuple.fieldOf( searchElement[, fromIndex] )\n    Returns the field of the first tuple element strictly equal to a search\n    element.\n\n    The method does not distinguish between signed and unsigned zero.\n\n    If unable to locate a search element, the method returns `undefined`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Tuple index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last tuple element.\n        Default: 0.\n\n    Returns\n    -------\n    field: string|undefined\n        Tuple field.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y', 'z' ] );\n    > var p = factory( [ 1.0, 0.0, -1.0 ] );\n    > var f = p.fieldOf( 2.0 )\n    undefined\n    > f = p.fieldOf( -1.0 )\n    'z'\n\n\ntuple.fill( value[, start[, end]] )\n    Fills a tuple from a start index to an end index (non-inclusive) with a\n    provided value.\n\n    Parameters\n    ----------\n    value: number\n        Fill value.\n\n    start: integer (optional)\n        Start index. If less than zero, the start index is resolved relative to\n        the last tuple element. Default: 0.\n\n    end: integer (optional)\n        End index (non-inclusive). If less than zero, the end index is resolved\n        relative to the last tuple element. Default: tuple.length.\n\n    Returns\n    -------\n    tuple: TypedArray\n        Modified tuple.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y' ] );\n    > var p = factory( [ 1.0, -1.0 ] );\n    > p.fill( 2.0 );\n    > p.x\n    2.0\n    > p.y\n    2.0\n\n\ntuple.filter( predicate[, thisArg] )\n    Creates a new tuple which includes those elements for which a predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: tuple element.\n    - index: tuple index.\n    - field: tuple field name.\n    - tuple: tuple on which the method is invoked.\n\n    The returned tuple has the same data type as the host tuple.\n\n    If a predicate function does not return a truthy value for any tuple\n    element, the method returns `null`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which filters tuple elements. If a predicate function\n        returns a truthy value, a tuple element is included in the output tuple;\n        otherwise, a tuple element is not included in the output tuple.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    tuple: TypedArray\n        A new named typed tuple.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y', 'z' ] );\n    > var p1 = factory( [ 1.0, 0.0, -1.0 ] );\n    > function predicate( v ) { return ( v >= 0.0 ); };\n    > var p2 = p1.filter( predicate );\n    > p2.fields\n    [ 'x', 'y' ]\n\n\ntuple.find( predicate[, thisArg] )\n    Returns the first tuple element for which a provided predicate function\n    returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: tuple element.\n    - index: tuple index.\n    - field: tuple field name.\n    - tuple: tuple on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `undefined`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests tuple elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    value: number|undefined\n        Tuple element.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y', 'z' ] );\n    > var p = factory( [ 1.0, 0.0, -1.0 ] );\n    > function predicate( v ) { return ( v < 0.0 ); };\n    > var v = p.find( predicate )\n    -1.0\n\n\ntuple.findField( predicate[, thisArg] )\n    Returns the field of the first tuple element for which a provided predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: tuple element.\n    - index: tuple index.\n    - field: tuple field name.\n    - tuple: tuple on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `undefined`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests tuple elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    field: string|undefined\n        Tuple field.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y', 'z' ] );\n    > var p = factory( [ 1.0, 0.0, -1.0 ] );\n    > function predicate( v ) { return ( v < 0.0 ); };\n    > var f = p.findField( predicate )\n    'z'\n\n\ntuple.findIndex( predicate[, thisArg] )\n    Returns the index of the first tuple element for which a provided predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: tuple element.\n    - index: tuple index.\n    - field: tuple field name.\n    - tuple: tuple on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `-1`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests tuple elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    idx: integer\n        Tuple index.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y', 'z' ] );\n    > var p = factory( [ 1.0, 0.0, -1.0 ] );\n    > function predicate( v ) { return ( v < 0.0 ); };\n    > var idx = p.findIndex( predicate )\n    2\n\n\ntuple.forEach( fcn[, thisArg] )\n    Invokes a callback for each tuple element.\n\n    A provided function is provided the following arguments:\n\n    - value: tuple element.\n    - index: tuple index.\n    - field: tuple field name.\n    - tuple: tuple on which the method is invoked.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to invoke for each tuple element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y', 'z' ] );\n    > var p = factory( [ 1, 0, -1 ], 'int32' );\n    > var str = ' ';\n    > function fcn( v, i, f ) { str += f + '=' + v + ' '; };\n    > p.forEach( fcn );\n    > str\n    ' x=1 y=0 z=-1 '\n\n\ntuple.includes( searchElement[, fromIndex] )\n    Returns a boolean indicating whether a tuple includes a search element.\n\n    The method does not distinguish between signed and unsigned zero.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Tuple index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last tuple element.\n        Default: 0.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a tuple includes a search element.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y', 'z' ] );\n    > var p = factory( [ 1.0, 0.0, -1.0 ] );\n    > var bool = p.includes( 2.0 )\n    false\n    > bool = p.includes( -1.0 )\n    true\n\n\ntuple.indexOf( searchElement[, fromIndex] )\n    Returns the index of the first tuple element strictly equal to a search\n    element.\n\n    The method does not distinguish between signed and unsigned zero.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Tuple index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last tuple element.\n        Default: 0.\n\n    Returns\n    -------\n    idx: integer\n        Tuple index.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y', 'z' ] );\n    > var p = factory( [ 1.0, 0.0, -1.0 ] );\n    > var idx = p.indexOf( 2.0 )\n    -1\n    > idx = p.indexOf( -1.0 )\n    2\n\n\ntuple.ind2key( ind )\n    Converts a tuple index to a field name.\n\n    If provided an out-of-bounds index, the method returns `undefined`.\n\n    Parameters\n    ----------\n    ind: integer\n        Tuple index. If less than zero, the method resolves the index relative\n        to the last tuple element.\n\n    Returns\n    -------\n    field: string|undefined\n        Field name.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y', 'z' ] );\n    > var p = factory( [ 1.0, 0.0, -1.0 ] );\n    > p.ind2key( 1 )\n    'y'\n    > p.ind2key( 100 )\n    undefined\n\n\ntuple.join( [separator] )\n    Serializes a tuple by joining all tuple elements as a string.\n\n    Parameters\n    ----------\n    separator: string (optional)\n        String delineating tuple elements. Default: ','.\n\n    Returns\n    -------\n    str: string\n        Tuple serialized as a string.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y', 'z' ] );\n    > var p = factory( [ 1, 0, -1 ], 'int32' );\n    > p.join( '|' )\n    '1|0|-1'\n\n\ntuple.keys()\n    Returns an iterator for iterating over tuple keys.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over tuple keys.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y' ] );\n    > var p = factory( [ 1.0, -1.0 ] );\n    > it = p.keys();\n    > it.next().value\n    [ 0, 'x' ]\n    > it.next().value\n    [ 1, 'y' ]\n    > it.next().done\n    true\n\n\ntuple.key2ind( field )\n    Converts a field name to a tuple index.\n\n    If provided an unknown field name, the method returns `-1`.\n\n    Parameters\n    ----------\n    field: string\n        Tuple field name.\n\n    Returns\n    -------\n    idx: integer\n        Tuple index.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y', 'z' ] );\n    > var p = factory( [ 1.0, 0.0, -1.0 ] );\n    > p.key2ind( 'y' )\n    1\n\n\ntuple.lastFieldOf( searchElement[, fromIndex] )\n    Returns the field of the last tuple element strictly equal to a search\n    element.\n\n    The method iterates from the last tuple element to the first tuple element.\n\n    The method does not distinguish between signed and unsigned zero.\n\n    If unable to locate a search element, the method returns `undefined`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Tuple index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last tuple element.\n        Default: -1.\n\n    Returns\n    -------\n    field: string|undefined\n        Tuple field.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y', 'z', 'w', 'v' ] );\n    > var p = factory( [ 1.0, 0.0, -1.0, 0.0, 1.0 ] );\n    > var f = p.lastFieldOf( 2.0 )\n    undefined\n    > f = p.lastFieldOf( 0.0 )\n    'w'\n\n\ntuple.lastIndexOf( searchElement[, fromIndex] )\n    Returns the index of the last tuple element strictly equal to a search\n    element.\n\n    The method iterates from the last tuple element to the first tuple element.\n\n    The method does not distinguish between signed and unsigned zero.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Tuple index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last tuple element.\n        Default: -1.\n\n    Returns\n    -------\n    idx: integer\n        Tuple index.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y', 'z', 'w', 'v' ] );\n    > var p = factory( [ 1.0, 0.0, -1.0, 0.0, 1.0 ] );\n    > var idx = p.lastIndexOf( 2.0 )\n    -1\n    > idx = p.lastIndexOf( 0.0 )\n    3\n\n\ntuple.map( fcn[, thisArg] )\n    Maps each tuple element to an element in a new tuple.\n\n    A provided function is provided the following arguments:\n\n    - value: tuple element.\n    - index: tuple index.\n    - field: tuple field name.\n    - tuple: tuple on which the method is invoked.\n\n    The returned tuple has the same data type as the host tuple.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function which maps tuple elements to elements in the new tuple.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    tuple: TypedArray\n        A new named typed tuple.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y', 'z' ] );\n    > var p1 = factory( [ 1.0, 0.0, -1.0 ] );\n    > function fcn( v ) { return v * 2.0; };\n    > var p2 = p1.map( fcn );\n    > p2.x\n    2.0\n    > p2.y\n    0.0\n    > p2.z\n    -2.0\n\n\ntuple.reduce( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in a tuple and\n    returns the accumulated result.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current tuple element.\n    - index: index of the current tuple element.\n    - field: field name corresponding to the current tuple element.\n    - tuple: tuple on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the first tuple element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the first tuple element as the first argument and the second tuple\n    element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y', 'z' ] );\n    > var p = factory( [ 1.0, 0.0, -1.0 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = p.reduce( fcn, 0.0 )\n    2.0\n\n\ntuple.reduceRight( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in a tuple and\n    returns the accumulated result, iterating from right to left.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current tuple element.\n    - index: index of the current tuple element.\n    - field: field name corresponding to the current tuple element.\n    - tuple: tuple on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the last tuple element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the last tuple element as the first argument and the second-to-last\n    tuple element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y', 'z' ] );\n    > var p = factory( [ 1.0, 0.0, -1.0 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = p.reduceRight( fcn, 0.0 )\n    2.0\n\n\ntuple.reverse()\n    Reverses a tuple *in-place*.\n\n    This method mutates the tuple on which the method is invoked.\n\n    Returns\n    -------\n    tuple: TypedArray\n        Modified tuple.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y', 'z' ] );\n    > var p = factory( [ 1.0, 0.0, -1.0 ] );\n    > p[ 0 ]\n    1.0\n    > p.x\n    1.0\n    > p.reverse();\n    > p[ 0 ]\n    -1.0\n    > p.x\n    1.0\n\n\ntuple.set( arr[, offset] )\n    Sets tuple elements.\n\n    Parameters\n    ----------\n    arr: ArrayLike\n        Source array containing tuple values to set.\n\n    offset: integer (optional)\n        Tuple index at which to start writing values. Default: 0.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y', 'z' ] );\n    > var p = factory( [ 1.0, 0.0, -1.0 ] );\n    > p[ 1 ]\n    0.0\n    > p.y\n    0.0\n    > p.set( [ -2.0, 2.0 ], 1 );\n    > p[ 1 ]\n    -2.0\n    > p.y\n    -2.0\n    > p[ 2 ]\n    2.0\n    > p.z\n    2.0\n\n\ntuple.slice( [begin[, end]] )\n    Copies tuple elements to a new tuple with the same underlying data type as\n    the host tuple.\n\n    If the method is unable to resolve indices to a non-empty tuple subsequence,\n    the method returns `null`.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last tuple element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last tuple element. Default: tuple.length.\n\n    Returns\n    -------\n    tuple: TypedArray\n        A new named typed tuple.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y', 'z' ] );\n    > var p1 = factory( [ 1.0, 0.0, -1.0 ] );\n    > p1.fields\n    [ 'x', 'y', 'z' ]\n    > var p2 = p1.slice( 1 );\n    > p2.fields\n    [ 'y', 'z' ]\n    > p2.y\n    0.0\n    > p2.z\n    -1.0\n\n\ntuple.some( predicate[, thisArg] )\n    Tests whether at least one tuple element passes a test implemented by a\n    predicate function.\n\n    A predicate function is provided the following arguments:\n\n    - value: tuple element.\n    - index: tuple index.\n    - field: tuple field name.\n    - tuple: tuple on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests tuple elements. If a predicate function\n        returns a truthy value, a tuple element passes; otherwise, a tuple\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether at least one tuple element passes.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y' ] );\n    > var p = factory( [ 1.0, -1.0 ] );\n    > function predicate( v ) { return ( v < 0.0 ); };\n    > p.some( predicate )\n    true\n\n\ntuple.sort( [compareFunction] )\n    Sorts a tuple *in-place*.\n\n    Sorting a tuple does *not* affect field assignments. Accessing a tuple field\n    before and after sorting will always return the same tuple element. However,\n    this behavior is generally not true when accessing tuple elements according\n    to tuple index. In summary, sorting affects index order but not field\n    assignments.\n\n    The comparison function is provided two tuple elements per invocation: `a`\n    and `b`.\n\n    The comparison function return value determines the sort order as follows:\n\n    - If the comparison function returns a value less than zero, then the method\n    sorts `a` to an index lower than `b` (i.e., `a` should come *before* `b`).\n\n    - If the comparison function returns a value greater than zero, then the\n    method sorts `a` to an index higher than `b` (i.e., `b` should come *before*\n    `a`).\n\n    - If the comparison function returns zero, then the relative order of `a`\n    and `b` should remain unchanged.\n\n    This method mutates the tuple on which the method is invoked.\n\n    Parameters\n    ----------\n    compareFunction: Function (optional)\n        Function which specifies the sort order. The default sort order is\n        ascending order.\n\n    Returns\n    -------\n    tuple: TypedArray\n        Modified tuple.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y', 'z', 'w', 'v' ] );\n    > var p = factory( [ 1.0, -1.0, 0.0, 2.0, -2.0 ] );\n    > p.sort();\n    > p.orderedFields\n    [ 'v', 'y', 'z', 'x', 'w' ]\n    > p[ 0 ]\n    -2.0\n    > p.x\n    1.0\n    > p[ 1 ]\n    -1.0\n    > p.y\n    -1.0\n    > p.key2ind( 'x' )\n    3\n\n\ntuple.subarray( [begin[, end]] )\n    Creates a new typed array over the same underlying ArrayBuffer and with the\n    same underlying data type as the host tuple.\n\n    If the method is unable to resolve indices to a non-empty tuple subsequence,\n    the method returns an empty typed array.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last tuple element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last tuple element. Default: tuple.length.\n\n    Returns\n    -------\n    arr: TypedArray\n        A new typed array view.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y', 'z', 'w', 'v' ] );\n    > var p = factory( [ 1.0, -1.0, 0.0, 2.0, -2.0 ] );\n    > var arr = p.subarray( 2 )\n    <Float64Array>[ 0.0, 2.0, -2.0 ]\n    > arr.length\n    3\n\n\ntuple.subtuple( [begin[, end]] )\n    Creates a new named typed tuple over the same underlying ArrayBuffer and\n    with the same underlying data type as the host tuple.\n\n    If the function is unable to resolve indices to a non-empty tuple\n    subsequence, the function returns `null`.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last tuple element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last tuple element. Default: tuple.length.\n\n    Returns\n    -------\n    tuple: TypedArray|null\n        A new named typed tuple.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y', 'z', 'w', 'v' ] );\n    > var p1 = factory( [ 1.0, -1.0, 0.0, 2.0, -2.0 ] );\n    > var p2 = p1.subtuple( 2 );\n    > p2.fields\n    [ 'z', 'w', 'v' ]\n    > p2[ 0 ]\n    0.0\n    > p2.z\n    0.0\n    > p2[ 1 ]\n    2.0\n    > p2.w\n    2.0\n    > p2[ 2 ]\n    -2.0\n    > p2.v\n    -2.0\n    > p2.length\n    3\n\n\ntuple.toJSON()\n    Serializes a tuple as JSON.\n\n    Returns\n    -------\n    obj: Object\n        A tuple JSON representation.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y', 'z' ] );\n    > var p = factory( [ 1.0, -1.0, 0.0 ] );\n    > p.toJSON()\n    { 'x': 1.0, 'y': -1.0, 'z': 0.0 }\n\n\ntuple.toLocaleString( [locales[, options]] )\n    Serializes a tuple as a locale-specific string.\n\n    Parameters\n    ----------\n    locales: string|Array<string> (optional)\n        A BCP 47 language tag, or an array of such tags.\n\n    options: Object (optional)\n        Options.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y', 'z' ] );\n    > var p = factory( [ 1.0, -1.0, 0.0 ], 'int32' );\n    > p.toLocaleString()\n    '1,-1,0'\n\n\ntuple.toString()\n    Serializes a tuple as a string.\n\n    Returns\n    -------\n    str: string\n        A tuple string representation.\n\n    Examples\n    --------\n    > opts = { 'name': 'Point' };\n    > var factory = namedtypedtuple( [ 'x', 'y', 'z' ], opts );\n    > var p = factory( [ 1.0, -1.0, 0.0 ] );\n    > p.toString()\n    'Point(x=1, y=-1, z=0)'\n\n\ntuple.values()\n    Returns an iterator for iterating over tuple elements.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over tuple elements.\n\n    Examples\n    --------\n    > var factory = namedtypedtuple( [ 'x', 'y' ] );\n    > var p = factory( [ 1.0, -1.0 ] );\n    > it = p.values();\n    > it.next().value\n    1.0\n    > it.next().value\n    -1.0\n    > it.next().done\n    true\n\n    See Also\n    --------\n    typedarray\n","nativeClass":"\nnativeClass( value )\n    Returns a string value indicating a specification defined classification of\n    an object.\n\n    The function is *not* robust for ES2015+ environments. In ES2015+,\n    `Symbol.toStringTag` allows overriding the default description of an object.\n    While measures are taken to uncover the default description, such measures\n    can be thwarted. While this function remains useful for type-checking, be\n    aware that value impersonation is possible. Where possible, prefer functions\n    tailored to checking for particular value types, as specialized functions\n    are better equipped to address `Symbol.toStringTag`.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    out: string\n        String value indicating a specification defined classification of the\n        input value.\n\n    Examples\n    --------\n    > var str = nativeClass( 'a' )\n    '[object String]'\n    > str = nativeClass( 5 )\n    '[object Number]'\n    > function Beep(){};\n    > str = nativeClass( new Beep() )\n    '[object Object]'\n\n    See Also\n    --------\n    constructorName, typeOf\n","ndarray":"\nndarray( dtype, ndims[, options] )\n    Returns an ndarray constructor.\n\n    Parameters\n    ----------\n    dtype: string\n        Underlying data type.\n\n    ndims: integer\n        Number of dimensions.\n\n    options: Object (optional)\n        Options.\n\n    options.codegen: boolean (optional)\n        Boolean indicating whether to use code generation. Code generation can\n        boost performance, but may be problematic in browser contexts enforcing\n        a strict content security policy (CSP). Default: true.\n\n    options.mode: string (optional)\n        Specifies how to handle indices which exceed array dimensions. If equal\n        to 'throw', an ndarray instance throws an error when an index exceeds\n        array dimensions. If equal to 'wrap', an ndarray instance wraps around\n        indices exceeding array dimensions using modulo arithmetic. If equal to\n        'clamp', an ndarray instance sets an index exceeding array dimensions to\n        either `0` (minimum index) or the maximum index. Default: 'throw'.\n\n    options.submode: Array<string> (optional)\n        Specifies how to handle subscripts which exceed array dimensions. If a\n        mode for a corresponding dimension is equal to 'throw', an ndarray\n        instance throws an error when a subscript exceeds array dimensions. If\n        equal to 'wrap', an ndarray instance wraps around subscripts exceeding\n        array dimensions using modulo arithmetic. If equal to 'clamp', an\n        ndarray instance sets a subscript exceeding array dimensions to either\n        `0` (minimum index) or the maximum index. If the number of modes is\n        fewer than the number of dimensions, the function recycles modes using\n        modulo arithmetic. Default: [ options.mode ].\n\n    Returns\n    -------\n    ctor: Function\n        ndarray constructor.\n\n    ctor.BYTES_PER_ELEMENT: integer\n        Size (in bytes) of each array element (if known).\n\n    ctor.dtype: string\n        Underlying data type.\n\n    ctor.ndims: integer\n        Number of dimensions.\n\n    ctor.prototype.byteLength: integer\n        Size (in bytes) of the array (if known).\n\n    ctor.prototype.BYTES_PER_ELEMENT: integer\n        Size (in bytes) of each array element (if known).\n\n    ctor.prototype.data: ArrayLikeObject|TypedArray|Buffer\n        Pointer to the underlying data buffer.\n\n    ctor.prototype.dtype: string\n        Underlying data type.\n\n    ctor.prototype.flags: Object\n        Information about the memory layout of the array.\n\n    ctor.prototype.length: integer\n        Length of the array (i.e., number of elements).\n\n    ctor.prototype.ndims: integer\n        Number of dimensions.\n\n    ctor.prototype.offset: integer\n        Index offset which specifies the buffer index at which to start\n        iterating over array elements.\n\n    ctor.prototype.order: string\n        Array order. The array order is either row-major (C-style) or column-\n        major (Fortran-style).\n\n    ctor.prototype.shape: Array\n        Array shape.\n\n    ctor.prototype.strides: Array\n        Index strides which specify how to access data along corresponding array\n        dimensions.\n\n    ctor.prototype.get: Function\n        Returns an array element specified according to provided subscripts. The\n        number of provided subscripts should equal the number of dimensions.\n\n    ctor.prototype.iget: Function\n        Returns an array element located at a specified linear index.\n\n    ctor.prototype.set: Function\n        Sets an array element specified according to provided subscripts. The\n        number of provided subscripts should equal the number of dimensions.\n\n    ctor.prototype.iset: Function\n        Sets an array element located at a specified linear index.\n\n    ctor.prototype.toString: Function\n        Serializes an ndarray as a string. This method does **not** serialize\n        data outside of the buffer region defined by the array configuration.\n\n    ctor.prototype.toJSON: Function\n        Serializes an ndarray as a JSON object. This method does **not**\n        serialize data outside of the buffer region defined by the array\n        configuration.\n\n    Examples\n    --------\n    > var ctor = ndarray( 'generic', 2 )\n    <Function>\n\n    // To create a new instance...\n    > var b = [ 1.0, 2.0, 3.0, 4.0 ]; // underlying data buffer\n    > var d = [ 2, 2 ]; // shape\n    > var s = [ 2, 1 ]; // strides\n    > var o = 0; // index offset\n    > var arr = ctor( b, d, s, o, 'row-major' )\n    <ndarray>\n\n    // Get an element using subscripts:\n    > var v = arr.get( 1, 1 )\n    4.0\n\n    // Get an element using a linear index:\n    > v = arr.iget( 3 )\n    4.0\n\n    // Set an element using subscripts:\n    > arr.set( 1, 1, 40.0 );\n    > arr.get( 1, 1 )\n    40.0\n\n    // Set an element using a linear index:\n    > arr.iset( 3, 99.0 );\n    > arr.get( 1, 1 )\n    99.0\n\n    See Also\n    --------\n    array\n","ndarrayCastingModes":"\nndarrayCastingModes()\n    Returns a list of ndarray casting modes.\n\n    The output array contains the following modes:\n\n    - 'none': only allow casting between identical types\n    - 'equiv': allow casting between identical and byte swapped types\n    - 'safe': only allow \"safe\" casts\n    - 'same-kind': allow \"safe\" casts and casts within the same kind (e.g.,\n    between signed integers or between floats)\n    - 'unsafe': allow casting between all types (including between integers and\n    floats)\n\n    Returns\n    -------\n    out: Array<string>\n        List of ndarray casting modes.\n\n    Examples\n    --------\n    > var out = ndarrayCastingModes()\n    [ 'none', 'equiv', 'safe', 'same-kind', 'unsafe' ]\n\n    See Also\n    --------\n    array, ndarray\n","ndarrayDataTypes":"\nndarrayDataTypes()\n    Returns a list of ndarray data types.\n\n    The output array contains the following data types:\n\n    - binary: binary.\n    - float32: single-precision floating-point numbers.\n    - float64: double-precision floating-point numbers.\n    - generic: values of any type.\n    - int16: signed 16-bit integers.\n    - int32: signed 32-bit integers.\n    - int8: signed 8-bit integers.\n    - uint16: unsigned 16-bit integers.\n    - uint32: unsigned 32-bit integers.\n    - uint8: unsigned 8-bit integers.\n    - uint8c: unsigned clamped 8-bit integers.\n\n    Returns\n    -------\n    out: Array<string>\n        List of ndarray data types.\n\n    Examples\n    --------\n    > var out = ndarrayDataTypes()\n    <Array>\n\n    See Also\n    --------\n    arrayDataTypes, array, ndarray, typedarrayDataTypes\n","ndarrayIndexModes":"\nndarrayIndexModes()\n    Returns a list of ndarray index modes.\n\n    The output array contains the following modes:\n\n    - throw: specifies that a function should throw an error when an index is\n    outside a restricted interval.\n    - wrap: specifies that a function should wrap around an index using modulo\n    arithmetic.\n    - clamp: specifies that a function should set an index less than zero to\n    zero (minimum index) and set an index greater than a maximum index value to\n    the maximum possible index.\n\n    Returns\n    -------\n    out: Array<string>\n        List of ndarray index modes.\n\n    Examples\n    --------\n    > var out = ndarrayIndexModes()\n    [ 'throw', 'clamp', 'wrap' ]\n\n    See Also\n    --------\n    array, ndarray\n","ndarrayMemoized":"\nndarrayMemoized( dtype, ndims[, options] )\n    Returns a memoized ndarray constructor.\n\n    Parameters\n    ----------\n    dtype: string\n        Underlying data type.\n\n    ndims: integer\n        Number of dimensions.\n\n    options: Object (optional)\n        Options.\n\n    options.codegen: boolean (optional)\n        Boolean indicating whether to use code generation. Code generation can\n        boost performance, but may be problematic in browser contexts enforcing\n        a strict content security policy (CSP). Default: true.\n\n    options.mode: string (optional)\n        Specifies how to handle indices which exceed array dimensions. If equal\n        to 'throw', an ndarray instance throws an error when an index exceeds\n        array dimensions. If equal to 'wrap', an ndarray instance wraps around\n        indices exceeding array dimensions using modulo arithmetic. If equal to\n        'clamp', an ndarray instance sets an index exceeding array dimensions to\n        either `0` (minimum index) or the maximum index. Default: 'throw'.\n\n    options.submode: Array<string> (optional)\n        Specifies how to handle subscripts which exceed array dimensions. If a\n        mode for a corresponding dimension is equal to 'throw', an ndarray\n        instance throws an error when a subscript exceeds array dimensions. If\n        equal to 'wrap', an ndarray instance wraps around subscripts exceeding\n        array dimensions using modulo arithmetic. If equal to 'clamp', an\n        ndarray instance sets a subscript exceeding array dimensions to either\n        `0` (minimum index) or the maximum index. If the number of modes is\n        fewer than the number of dimensions, the function recycles modes using\n        modulo arithmetic. Default: [ options.mode ].\n\n    Returns\n    -------\n    ctor: Function\n        Memoized ndarray constructor.\n\n    ctor.BYTES_PER_ELEMENT: integer\n        Size (in bytes) of each array element (if known).\n\n    ctor.dtype: string\n        Underlying data type.\n\n    ctor.ndims: integer\n        Number of dimensions.\n\n    ctor.prototype.byteLength: integer\n        Size (in bytes) of the array (if known).\n\n    ctor.prototype.BYTES_PER_ELEMENT: integer\n        Size (in bytes) of each array element (if known).\n\n    ctor.prototype.data: ArrayLikeObject|TypedArray|Buffer\n        Pointer to the underlying data buffer.\n\n    ctor.prototype.dtype: string\n        Underlying data type.\n\n    ctor.prototype.flags: Object\n        Information about the memory layout of the array.\n\n    ctor.prototype.length: integer\n        Length of the array (i.e., number of elements).\n\n    ctor.prototype.ndims: integer\n        Number of dimensions.\n\n    ctor.prototype.offset: integer\n        Index offset which specifies the buffer index at which to start\n        iterating over array elements.\n\n    ctor.prototype.order: string\n        Array order. The array order is either row-major (C-style) or column-\n        major (Fortran-style).\n\n    ctor.prototype.shape: Array\n        Array shape.\n\n    ctor.prototype.strides: Array\n        Index strides which specify how to access data along corresponding array\n        dimensions.\n\n    ctor.prototype.get: Function\n        Returns an array element specified according to provided subscripts. The\n        number of provided subscripts should equal the number of dimensions.\n\n    ctor.prototype.iget: Function\n        Returns an array element located at a specified linear index.\n\n    ctor.prototype.set: Function\n        Sets an array element specified according to provided subscripts. The\n        number of provided subscripts should equal the number of dimensions.\n\n    ctor.prototype.iset: Function\n        Sets an array element located at a specified linear index.\n\n    ctor.prototype.toString: Function\n        Serializes an ndarray as a string. This method does **not** serialize\n        data outside of the buffer region defined by the array configuration.\n\n    ctor.prototype.toJSON: Function\n        Serializes an ndarray as a JSON object. This method does **not**\n        serialize data outside of the buffer region defined by the array\n        configuration.\n\n    Examples\n    --------\n    > var ctor = ndarrayMemoized( 'generic', 2 )\n    <Function>\n    > var f = ndarrayMemoized( 'generic', 2 )\n    <Function>\n    > var bool = ( f === ctor )\n    true\n\n    // To create a new instance...\n    > var b = [ 1.0, 2.0, 3.0, 4.0 ]; // underlying data buffer\n    > var d = [ 2, 2 ]; // shape\n    > var s = [ 2, 1 ]; // strides\n    > var o = 0; // index offset\n    > var arr = ctor( b, d, s, o, 'row-major' )\n    <ndarray>\n\n    // Get an element using subscripts:\n    > var v = arr.get( 1, 1 )\n    4.0\n\n    // Get an element using a linear index:\n    > v = arr.iget( 3 )\n    4.0\n\n    // Set an element using subscripts:\n    > arr.set( 1, 1, 40.0 );\n    > arr.get( 1, 1 )\n    40.0\n\n    // Set an element using a linear index:\n    > arr.iset( 3, 99.0 );\n    > arr.get( 1, 1 )\n    99.0\n\n    See Also\n    --------\n    array, ndarray\n","ndarrayMinDataType":"\nndarrayMinDataType( value )\n    Returns the minimum ndarray data type of the closest \"kind\" necessary for\n    storing a provided scalar value.\n\n    The function does *not* provide precision guarantees for non-integer-valued\n    real numbers. In other words, the function returns the smallest possible\n    floating-point (i.e., inexact) data type for storing numbers having\n    decimals.\n\n    Parameters\n    ----------\n    value: any\n        Scalar value.\n\n    Returns\n    -------\n    dt: string\n        ndarray data type.\n\n    Examples\n    --------\n    > var dt = ndarrayMinDataType( 3.141592653589793 )\n    'float32'\n    > dt = ndarrayMinDataType( 3 )\n    'uint8'\n    > dt = ndarrayMinDataType( -3 )\n    'int8'\n    > dt = ndarrayMinDataType( '-3' )\n    'generic'\n\n    See Also\n    --------\n    ndarrayDataTypes, ndarrayPromotionRules, ndarraySafeCasts\n","ndarrayNextDataType":"\nndarrayNextDataType( [dtype] )\n    Returns the next larger ndarray data type of the same kind.\n\n    If not provided a data type, the function returns a table.\n\n    If a data type does not have a next larger data type or the next larger type\n    is not supported, the function returns `-1`.\n\n    If provided an unrecognized data type, the function returns `null`.\n\n    Parameters\n    ----------\n    dtype: string (optional)\n        ndarray data type.\n\n    Returns\n    -------\n    out: Object|string|integer|null\n        Next larger type(s).\n\n    Examples\n    --------\n    > var out = ndarrayNextDataType( 'float32' )\n    'float64'\n\n    See Also\n    --------\n    ndarrayDataTypes, ndarrayPromotionRules, ndarraySafeCasts\n","ndarrayOrders":"\nndarrayOrders()\n    Returns a list of ndarray orders.\n\n    The output array contains the following orders:\n\n    - row-major: row-major (C-style) order.\n    - column-major: column-major (Fortran-style) order.\n\n    Returns\n    -------\n    out: Array<string>\n        List of ndarray orders.\n\n    Examples\n    --------\n    > var out = ndarrayOrders()\n    [ 'row-major', 'column-major' ]\n\n    See Also\n    --------\n    array, ndarray\n","ndarrayPromotionRules":"\nndarrayPromotionRules( [dtype1, dtype2] )\n    Returns the ndarray data type with the smallest size and closest \"kind\" to\n    which ndarray data types can be safely cast.\n\n    If not provided data types, the function returns a type promotion table.\n\n    If a data type to which data types can be safely cast does *not* exist (or\n    is not supported), the function returns `-1`.\n\n    If provided an unrecognized data type, the function returns `null`.\n\n    Parameters\n    ----------\n    dtype1: string (optional)\n        ndarray data type.\n\n    dtype2: string (optional)\n        ndarray data type.\n\n    Returns\n    -------\n    out: Object|string|integer|null\n        Promotion rule(s).\n\n    Examples\n    --------\n    > var out = ndarrayPromotionRules( 'float32', 'int32' )\n    'float64'\n\n    See Also\n    --------\n    ndarrayCastingModes, ndarrayDataTypes, ndarraySafeCasts\n","ndarraySafeCasts":"\nndarraySafeCasts( [dtype] )\n    Returns a list of ndarray data types to which a provided ndarray data type\n    can be safely cast.\n\n    If not provided an ndarray data type, the function returns a casting table.\n\n    If provided an unrecognized ndarray data type, the function returns `null`.\n\n    Parameters\n    ----------\n    dtype: string (optional)\n        ndarray data type.\n\n    Returns\n    -------\n    out: Object|Array<string>|null\n        ndarray data types to which a data type can be safely cast.\n\n    Examples\n    --------\n    > var out = ndarraySafeCasts( 'float32' )\n    <Array>\n\n    See Also\n    --------\n    ndarrayCastingModes, ndarrayDataTypes, ndarraySameKindCasts\n","ndarraySameKindCasts":"\nndarraySameKindCasts( [dtype] )\n    Returns a list of ndarray data types to which a provided ndarray data type\n    can be safely cast or cast within the same \"kind\".\n\n    If not provided an ndarray data type, the function returns a casting table.\n\n    If provided an unrecognized ndarray data type, the function returns `null`.\n\n    Parameters\n    ----------\n    dtype: string (optional)\n        ndarray data type.\n\n    Returns\n    -------\n    out: Object|Array<string>|null\n        ndarray data types to which a data type can be safely cast or cast\n        within the same \"kind\".\n\n    Examples\n    --------\n    > var out = ndarraySameKindCasts( 'float32' )\n    <Array>\n\n    See Also\n    --------\n    ndarrayCastingModes, ndarrayDataTypes, ndarraySafeCasts\n","NIGHTINGALES_ROSE":"\nNIGHTINGALES_ROSE()\n    Returns data for Nightingale's famous polar area diagram.\n\n    Returns\n    -------\n    out: Array<Object>\n        Nightingale's data.\n\n    Examples\n    --------\n    > var data = NIGHTINGALES_ROSE()\n    [{...}, {...}, ...]\n\n    References\n    ----------\n    - Nightingale, Florence. 1859. *A contribution to the sanitary history of\n    the British army during the late war with Russia*. London, United Kingdom:\n    John W. Parker and Son. <http://ocp.hul.harvard.edu/dl/contagion/010164675>.\n\n","NINF":"\nNINF\n    Double-precision floating-point negative infinity.\n\n    Examples\n    --------\n    > NINF\n    -Infinity\n\n    See Also\n    --------\n    FLOAT16_NINF, FLOAT32_NINF, PINF\n","NODE_VERSION":"\nNODE_VERSION\n    Node version.\n\n    Examples\n    --------\n    > NODE_VERSION\n    <string>\n\n","none":"\nnone( collection )\n    Tests whether all elements in a collection are falsy.\n\n    The function immediately returns upon encountering a truthy value.\n\n    If provided an empty collection, the function returns `true`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if all elements are falsy; otherwise, the\n        function returns `false`.\n\n    Examples\n    --------\n    > var arr = [ 0, 0, 0, 0, 0 ];\n    > var bool = none( arr )\n    true\n\n    See Also\n    --------\n    any, every, forEach, noneBy, some\n","noneBy":"\nnoneBy( collection, predicate[, thisArg ] )\n    Tests whether all elements in a collection fail a test implemented by a\n    predicate function.\n\n    The predicate function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    The function immediately returns upon encountering a truthy return value.\n\n    If provided an empty collection, the function returns `true`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The test function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if the predicate function returns a falsy\n        value for all elements; otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > function negative( v ) { return ( v < 0 ); };\n    > var arr = [ 1, 2, 3, 4 ];\n    > var bool = noneBy( arr, negative )\n    true\n\n    See Also\n    --------\n    anyBy, everyBy, forEach, none, noneByRight, someBy\n","noneByAsync":"\nnoneByAsync( collection, [options,] predicate, done )\n    Tests whether all elements in a collection fail a test implemented by a\n    predicate function.\n\n    When invoked, the predicate function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    predicate function accepts two arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the predicate function accepts three arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other predicate function signature, the predicate function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `result`: test result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    The function immediately returns upon encountering a truthy `result` value\n    and calls the `done` callback with `null` as the first argument and `false`\n    as the second argument.\n\n    If all elements fail, the function calls the `done` callback with `null` as\n    the first argument and `true` as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > noneByAsync( arr, predicate, done )\n    1000\n    2500\n    3000\n    true\n\n    // Limit number of concurrent invocations:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > noneByAsync( arr, opts, predicate, done )\n    2500\n    3000\n    1000\n    true\n\n    // Process sequentially:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000 ];\n    > noneByAsync( arr, opts, predicate, done )\n    3000\n    2500\n    1000\n    true\n\n\nnoneByAsync.factory( [options,] predicate )\n    Returns a function which tests whether all elements in a collection fail a\n    test implemented by a predicate function.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = noneByAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    true\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    true\n\n    See Also\n    --------\n    anyByAsync, everyByAsync, forEachAsync, noneBy, noneByRightAsync, someByAsync\n","noneByAsync.factory":"\nnoneByAsync.factory( [options,] predicate )\n    Returns a function which tests whether all elements in a collection fail a\n    test implemented by a predicate function.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = noneByAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    true\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    true\n\n    See Also\n    --------\n    anyByAsync, everyByAsync, forEachAsync, noneBy, noneByRightAsync, someByAsync\n","noneByRight":"\nnoneByRight( collection, predicate[, thisArg ] )\n    Tests whether all elements in a collection fail a test implemented by a\n    predicate function, iterating from right to left.\n\n    The predicate function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    The function immediately returns upon encountering a truthy return value.\n\n    If provided an empty collection, the function returns `true`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The test function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if the predicate function returns a falsy\n        value for all elements; otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > function positive( v ) { return ( v > 0 ); };\n    > var arr = [ -1, -2, -3, -4 ];\n    > var bool = noneByRight( arr, positive )\n    true\n\n    See Also\n    --------\n    anyByRight, everyByRight, forEachRight, none, noneBy, someByRight\n","noneByRightAsync":"\nnoneByRightAsync( collection, [options,] predicate, done )\n    Tests whether all elements in a collection fail a test implemented by a\n    predicate function, iterating from right to left.\n\n    When invoked, the predicate function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    predicate function accepts two arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the predicate function accepts three arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other predicate function signature, the predicate function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `result`: test result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    The function immediately returns upon encountering a truthy `result` value\n    and calls the `done` callback with `null` as the first argument and `false`\n    as the second argument.\n\n    If all elements fail, the function calls the `done` callback with `null` as\n    the first argument and `true` as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > noneByRightAsync( arr, predicate, done )\n    1000\n    2500\n    3000\n    true\n\n    // Limit number of concurrent invocations:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 1000, 2500, 3000 ];\n    > noneByRightAsync( arr, opts, predicate, done )\n    2500\n    3000\n    1000\n    true\n\n    // Process sequentially:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 1000, 2500, 3000 ];\n    > noneByRightAsync( arr, opts, predicate, done )\n    3000\n    2500\n    1000\n    true\n\n\nnoneByRightAsync.factory( [options,] predicate )\n    Returns a function which tests whether all elements in a collection fail a\n    test implemented by a predicate function, iterating from right to left.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = noneByRightAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    true\n    > arr = [ 1000, 1500, 2000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    true\n\n    See Also\n    --------\n    anyByRightAsync, everyByRightAsync, forEachRightAsync, noneByAsync, noneByRight, someByRightAsync\n","noneByRightAsync.factory":"\nnoneByRightAsync.factory( [options,] predicate )\n    Returns a function which tests whether all elements in a collection fail a\n    test implemented by a predicate function, iterating from right to left.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = noneByRightAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    true\n    > arr = [ 1000, 1500, 2000 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    true\n\n    See Also\n    --------\n    anyByRightAsync, everyByRightAsync, forEachRightAsync, noneByAsync, noneByRight, someByRightAsync\n","nonEnumerableProperties":"\nnonEnumerableProperties( value )\n    Returns an array of an object's own non-enumerable property names and\n    symbols.\n\n    Property order is not guaranteed, as object property enumeration is not\n    specified according to the ECMAScript specification. In practice, however,\n    most engines use insertion order to sort an object's properties, thus\n    allowing for deterministic extraction.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    props: Array\n        List of an object's own non-enumerable properties.\n\n    Examples\n    --------\n    > var obj = {};\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = false;\n    > desc.writable = false;\n    > desc.value = 'boop';\n    > defineProperty( obj, 'beep', desc );\n    > var props = nonEnumerableProperties( obj )\n    [ 'beep' ]\n\n    See Also\n    --------\n    enumerableProperties, inheritedNonEnumerableProperties, nonEnumerablePropertiesIn, properties\n","nonEnumerablePropertiesIn":"\nnonEnumerablePropertiesIn( value )\n    Returns an array of an object's own and inherited non-enumerable property\n    names and symbols.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    props: Array\n        List of an object's own and inherited non-enumerable property names and\n        symbols.\n\n    Examples\n    --------\n    > var props = nonEnumerablePropertiesIn( [] )\n\n    See Also\n    --------\n    enumerablePropertiesIn, inheritedNonEnumerableProperties, nonEnumerableProperties, propertiesIn\n","nonEnumerablePropertyNames":"\nnonEnumerablePropertyNames( value )\n    Returns an array of an object's own non-enumerable property names.\n\n    Name order is not guaranteed, as object key enumeration is not specified\n    according to the ECMAScript specification. In practice, however, most\n    engines use insertion order to sort an object's keys, thus allowing for\n    deterministic extraction.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    keys: Array\n        List of an object's own non-enumerable property names.\n\n    Examples\n    --------\n    > var obj = {};\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = false;\n    > desc.writable = true;\n    > desc.value = 'boop';\n    > defineProperty( obj, 'beep', desc );\n    > var keys = nonEnumerablePropertyNames( obj )\n    e.g., [ 'beep', ... ]\n\n    See Also\n    --------\n    objectKeys, inheritedNonEnumerablePropertyNames, nonEnumerablePropertyNamesIn, nonEnumerablePropertySymbols, propertyNames\n","nonEnumerablePropertyNamesIn":"\nnonEnumerablePropertyNamesIn( value )\n    Returns an array of an object's own and inherited non-enumerable property\n    names.\n\n    Name order is not guaranteed, as object key enumeration is not specified\n    according to the ECMAScript specification. In practice, however, most\n    engines use insertion order to sort an object's keys, thus allowing for\n    deterministic extraction.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    keys: Array\n        List of an object's own and inherited non-enumerable property names.\n\n    Examples\n    --------\n    > var obj = {};\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = false;\n    > desc.writable = true;\n    > desc.value = 'boop';\n    > defineProperty( obj, 'beep', desc );\n    > var keys = nonEnumerablePropertyNamesIn( obj )\n    e.g., [ 'beep', ... ]\n\n    See Also\n    --------\n    keysIn, inheritedNonEnumerablePropertyNames, nonEnumerablePropertyNames, propertyNamesIn\n","nonEnumerablePropertySymbols":"\nnonEnumerablePropertySymbols( value )\n    Returns an array of an object's own non-enumerable symbol properties.\n\n    Property order is not guaranteed, as object property enumeration is not\n    specified according to the ECMAScript specification. In practice, however,\n    most engines use insertion order to sort an object's properties, thus\n    allowing for deterministic extraction.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    symbols: Array\n        List of an object's own non-enumerable symbol properties.\n\n    Examples\n    --------\n    > var obj = {};\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = false;\n    > desc.writable = true;\n    > desc.value = 'boop';\n    > var sym = ( Symbol ) ? Symbol( 'beep' ) : 'beep';\n    > defineProperty( obj, sym, desc );\n    > var symbols = nonEnumerablePropertySymbols( obj )\n\n    See Also\n    --------\n    enumerablePropertySymbols, inheritedNonEnumerablePropertySymbols, nonEnumerablePropertyNames, nonEnumerablePropertySymbolsIn, propertySymbols\n","nonEnumerablePropertySymbolsIn":"\nnonEnumerablePropertySymbolsIn( value )\n    Returns an array of an object's own and inherited non-enumerable symbol\n    properties.\n\n    Property order is not guaranteed, as object property enumeration is not\n    specified according to the ECMAScript specification. In practice, however,\n    most engines use insertion order to sort an object's properties, thus\n    allowing for deterministic extraction.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    symbols: Array\n        List of an object's own and inherited non-enumerable symbol properties.\n\n    Examples\n    --------\n    > var obj = {};\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = false;\n    > desc.writable = true;\n    > desc.value = 'boop';\n    > var sym = ( Symbol ) ? Symbol( 'beep' ) : 'beep';\n    > defineProperty( obj, sym, desc );\n    > var symbols = nonEnumerablePropertySymbolsIn( obj )\n\n    See Also\n    --------\n    enumerablePropertySymbolsIn, inheritedNonEnumerablePropertySymbols, nonEnumerablePropertyNamesIn, nonEnumerablePropertySymbols, propertySymbolsIn\n","noop":"\nnoop()\n    A function which does nothing.\n\n    Examples\n    --------\n    > noop();\n\n","now":"\nnow()\n    Returns the time in seconds since the epoch.\n\n    The Unix epoch is 00:00:00 UTC on 1 January 1970.\n\n    Returns\n    -------\n    out: integer\n        Time in seconds since the epoch.\n\n    Examples\n    --------\n    > var ts = now()\n    <number>\n\n","NUM_CPUS":"\nNUM_CPUS\n    Number of CPUs.\n\n    In browser environments, the number of CPUs is determined by querying the\n    hardware concurrency API.\n\n    In Node.js environments, the number of CPUs is determined via the `os`\n    module.\n\n    Examples\n    --------\n    > NUM_CPUS\n    <number>\n\n","Number":"\nNumber( value )\n    Returns a Number object.\n\n    This constructor should be used sparingly. Always prefer number primitives.\n\n    Parameters\n    ----------\n    value: number\n        Value to wrap in a Number object.\n\n    Returns\n    -------\n    out: Number\n        Number object.\n\n    Examples\n    --------\n    > var v = new Number( 5 )\n    <Number>\n\n","objectEntries":"\nobjectEntries( obj )\n    Returns an array of an object's own enumerable property `[key, value]`\n    pairs.\n\n    Entry order is not guaranteed, as object key enumeration is not specified\n    according to the ECMAScript specification. In practice, however, most\n    engines use insertion order to sort an object's keys, thus allowing for\n    deterministic return values.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    Returns\n    -------\n    arr: Array\n        Array containing key-value pairs.\n\n    Examples\n    --------\n    > var obj = { 'beep': 'boop', 'foo': 'bar' };\n    > var entries = objectEntries( obj )\n    e.g., [ [ 'beep', 'boop' ], [ 'foo', 'bar' ] ]\n\n    See Also\n    --------\n    objectEntriesIn, objectFromEntries, objectKeys, objectValues\n","objectEntriesIn":"\nobjectEntriesIn( obj )\n    Returns an array of an object's own and inherited enumerable property\n    `[key, value]` pairs.\n\n    Entry order is not guaranteed, as object key enumeration is not specified\n    according to the ECMAScript specification. In practice, however, most\n    engines use insertion order to sort an object's keys, thus allowing for\n    deterministic return values.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    Returns\n    -------\n    arr: Array\n        Array containing key-value pairs.\n\n    Examples\n    --------\n    > function Foo() { this.beep = 'boop'; return this; };\n    > Foo.prototype.foo = 'bar';\n    > var obj = new Foo();\n    > var entries = objectEntriesIn( obj )\n    e.g., [ [ 'beep', 'boop' ], [ 'foo', 'bar' ] ]\n\n    See Also\n    --------\n    objectEntries, objectFromEntries, keysIn, objectValuesIn\n","objectFromEntries":"\nobjectFromEntries( entries )\n    Creates an object from an array of key-value pairs.\n\n    Parameters\n    ----------\n    entries: Array<Array>\n        Input object.\n\n    Returns\n    -------\n    out: Object\n        Object created from `[key, value]` pairs.\n\n    Examples\n    --------\n    > var entries = [ [ 'beep', 'boop' ], [ 'foo', 'bar' ] ];\n    > var obj = objectFromEntries( entries )\n    { 'beep': 'boop', 'foo': 'bar' }\n\n    See Also\n    --------\n    objectEntries\n","objectInverse":"\nobjectInverse( obj[, options] )\n    Inverts an object, such that keys become values and values become keys.\n\n    Beware when providing objects having values which are themselves objects.\n    The function relies on native object serialization (`#toString`) when\n    converting values to keys.\n\n    Insertion order is not guaranteed, as object key enumeration is not\n    specified according to the ECMAScript specification. In practice, however,\n    most engines use insertion order to sort an object's keys, thus allowing for\n    deterministic inversion.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    options: Object (optional)\n        Options.\n\n    options.duplicates: boolean (optional)\n        Boolean indicating whether to store keys mapped to duplicate values in\n        arrays. Default: `true`.\n\n    Returns\n    -------\n    out: Object\n        Inverted object.\n\n    Examples\n    --------\n    // Basic usage:\n    > var obj = { 'a': 'beep', 'b': 'boop' };\n    > var out = objectInverse( obj )\n    { 'beep': 'a', 'boop': 'b' }\n\n    // Duplicate values:\n    > obj = { 'a': 'beep', 'b': 'beep' };\n    > out = objectInverse( obj )\n    { 'beep': [ 'a', 'b' ] }\n\n    // Override duplicate values:\n    > obj = {};\n    > obj.a = 'beep';\n    > obj.b = 'boop';\n    > obj.c = 'beep';\n    > out = objectInverse( obj, { 'duplicates': false } )\n    { 'beep': 'c', 'boop': 'b' }\n\n    See Also\n    --------\n    objectInverseBy\n","objectInverseBy":"\nobjectInverseBy( obj, [options,] transform )\n    Inverts an object, such that keys become values and values become keys,\n    according to a transform function.\n\n    The transform function is provided three arguments:\n\n    - `key`: object key\n    - `value`: object value corresponding to `key`\n    - `obj`: the input object\n\n    The value returned by a transform function should be a value which can be\n    serialized as an object key. Hence, beware when providing objects having\n    values which are themselves objects. The function relies on native object\n    serialization (`#toString`) when converting transform function return values\n    to keys.\n\n    Insertion order is not guaranteed, as object key enumeration is not\n    specified according to the ECMAScript specification. In practice, however,\n    most engines use insertion order to sort an object's keys, thus allowing for\n    deterministic inversion.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    options: Object (optional)\n        Options.\n\n    options.duplicates: boolean (optional)\n        Boolean indicating whether to store keys mapped to duplicate values in\n        arrays. Default: `true`.\n\n    transform: Function\n        Transform function.\n\n    Returns\n    -------\n    out: Object\n        Inverted object.\n\n    Examples\n    --------\n    // Basic usage:\n    > function transform( key, value ) { return key + value; };\n    > var obj = { 'a': 'beep', 'b': 'boop' };\n    > var out = objectInverseBy( obj, transform )\n    { 'abeep': 'a', 'bboop': 'b' }\n\n    // Duplicate values:\n    > function transform( key, value ) { return value; };\n    > obj = { 'a': 'beep', 'b': 'beep' };\n    > out = objectInverseBy( obj, transform )\n    { 'beep': [ 'a', 'b' ] }\n\n    // Override duplicate values:\n    > obj = {};\n    > obj.a = 'beep';\n    > obj.b = 'boop';\n    > obj.c = 'beep';\n    > out = objectInverseBy( obj, { 'duplicates': false }, transform )\n    { 'beep': 'c', 'boop': 'b' }\n\n    See Also\n    --------\n    objectInverse\n","objectKeys":"\nobjectKeys( value )\n    Returns an array of an object's own enumerable property names.\n\n    Name order is not guaranteed, as object key enumeration is not specified\n    according to the ECMAScript specification. In practice, however, most\n    engines use insertion order to sort an object's keys, thus allowing for\n    deterministic extraction.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    keys: Array\n        List of an object's own enumerable property names.\n\n    Examples\n    --------\n    > function Foo() { this.beep = 'boop'; return this; };\n    > Foo.prototype.foo = 'bar';\n    > var obj = new Foo();\n    > var keys = objectKeys( obj )\n    [ 'beep' ]\n\n    See Also\n    --------\n    objectEntries, keysIn, objectValues\n","objectValues":"\nobjectValues( obj )\n    Returns an array of an object's own enumerable property values.\n\n    Value order is not guaranteed, as object key enumeration is not specified\n    according to the ECMAScript specification. In practice, however, most\n    engines use insertion order to sort an object's keys, thus allowing for\n    deterministic extraction.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    Returns\n    -------\n    values: Array\n        Value array.\n\n    Examples\n    --------\n    > var obj = { 'beep': 'boop', 'foo': 'bar' };\n    > var vals = objectValues( obj )\n    e.g., [ 'boop', 'bar' ]\n\n    See Also\n    --------\n    objectEntries, objectKeys\n","objectValuesIn":"\nobjectValuesIn( obj )\n    Returns an array of an object's own and inherited enumerable property\n    values.\n\n    Value order is not guaranteed, as object key enumeration is not specified\n    according to the ECMAScript specification. In practice, however, most\n    engines use insertion order to sort an object's keys, thus allowing for\n    deterministic extraction.\n\n    Parameters\n    ----------\n    obj: ObjectLike\n        Input object.\n\n    Returns\n    -------\n    values: Array\n        Value array.\n\n    Examples\n    --------\n    > function Foo() { this.beep = 'boop'; return this; };\n    > Foo.prototype.foo = 'bar';\n    > var obj = new Foo();\n    > var values = objectValuesIn( obj )\n    e.g., [ 'boop', 'bar' ]\n\n    See Also\n    --------\n    objectEntriesIn, keysIn, objectValues\n","omit":"\nomit( obj, keys )\n    Returns a partial object copy excluding specified keys.\n\n    The function returns a shallow copy.\n\n    The function ignores non-existent keys.\n\n    The function only copies own properties. Hence, the function never copies\n    inherited properties.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    keys: string|Array<string>\n        Keys to exclude.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > var obj1 = { 'a': 1, 'b': 2 };\n    > var obj2 = omit( obj1, 'b' )\n    { 'a': 1 }\n\n    See Also\n    --------\n    omitBy\n","omitBy":"\nomitBy( obj, predicate )\n    Returns a partial object copy excluding properties for which a predicate\n    returns a truthy value.\n\n    The function returns a shallow copy.\n\n    The function only copies own properties. Hence, the function never copies\n    inherited properties.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    predicate: Function\n        Predicate function.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > function predicate( key, value ) { return ( value > 1 ); };\n    > var obj1 = { 'a': 1, 'b': 2 };\n    > var obj2 = omitBy( obj1, predicate )\n    { 'a': 1 }\n\n    See Also\n    --------\n    omit\n","openURL":"\nopenURL( url )\n    Opens a URL in a user's default browser.\n\n    In a non-browser environment, the function returns an unreferenced child\n    process. In a browser environment, the function returns a reference to a\n    `window` object.\n\n    Parameters\n    ----------\n    url: string\n        URL to open.\n\n    Returns\n    -------\n    out: process|Window\n        Child process or `window` object.\n\n    Examples\n    --------\n    > var out = openURL( 'https://google.com' );\n\n","PACE_BOSTON_HOUSE_PRICES":"\nPACE_BOSTON_HOUSE_PRICES()\n    Returns a (corrected) dataset derived from information collected by the US\n    Census Service concerning housing in Boston, Massachusetts (1978).\n\n    The data consists of 21 attributes:\n\n    - obs: observation number\n    - town: town name\n    - town_id: town identifier\n    - tract: tract identifier\n    - lon: longitude\n    - lat: latitude\n    - medv: median value of owner-occupied homes in $1000's\n    - cmedv: corrected median value of owner-occupied homes in $1000's\n    - crim: per capita crime rate by town\n    - zn: proportion of residential land zoned for lots over 25,000 square feet\n    - indus: proportion of non-retail business acres per town\n    - chas: Charles River dummy variable (1 if tract bounds river; 0 otherwise)\n    - nox: nitric oxides concentration (parts per 10 million)\n    - rm: average number of rooms per dwelling\n    - age: proportion of owner-occupied units built prior to 1940\n    - dis: weighted distances to five Boston employment centers\n    - rad: index of accessibility to radial highways\n    - tax: full-value property-tax rate per $10,000\n    - ptratio: pupil-teacher ratio by town\n    - b: 1000(Bk-0.63)^2 where Bk is the proportion of blacks by town\n    - lstat: percent lower status of the population\n\n    The dataset can be used to predict two dependent variables: 1) nitrous oxide\n    level and 2) median home value.\n\n    The median home value field seems to be censored at 50.00 (corresponding to\n    a median value of $50,000). Censoring is suggested by the fact that the\n    highest median value of exactly $50,000 is reported in 16 cases, while 15\n    cases have values between $40,000 and $50,000. Values are rounded to the\n    nearest hundred.\n\n    The dataset contains eight corrections to miscoded median values, as\n    documented by Gilley and Pace (1996).\n\n    The dataset augments the original dataset from Harrison and Rubinfeld (1978)\n    by including geo-referencing and spatial estimation for each observation.\n\n    Returns\n    -------\n    out: Array<Object>\n        Boston house prices.\n\n    Examples\n    --------\n    > var data = PACE_BOSTON_HOUSE_PRICES()\n    [ {...}, {...}, ... ]\n\n    References\n    ----------\n    - Harrison, David, and Daniel L Rubinfeld. 1978. \"Hedonic housing prices and\n    the demand for clean air.\" _Journal of Environmental Economics and\n    Management_ 5 (1): 81–102. doi:10.1016/0095-0696(78)90006-2.\n    - Gilley, Otis W., and R.Kelley Pace. 1996. \"On the Harrison and Rubinfeld\n    Data.\" _Journal of Environmental Economics and Management_ 31 (3): 403–5.\n    doi:10.1006/jeem.1996.0052.\n    - Pace, R. Kelley, and Otis W. Gilley. 1997. \"Using the Spatial\n    Configuration of the Data to Improve Estimation.\" _The Journal of Real\n    Estate Finance and Economics_ 14 (3): 333–40. doi:10.1023/A:1007762613901.\n\n    See Also\n    --------\n    HARRISON_BOSTON_HOUSE_PRICES, HARRISON_BOSTON_HOUSE_PRICES_CORRECTED\n","pad":"\npad( str, len[, options] )\n    Pads a `string` such that the padded `string` has length `len`.\n\n    Any padding which does not evenly divide available space is trimmed such\n    that the returned string length is always `len`.\n\n    If `len < str.length`, the input string is trimmed.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    len: integer\n        Output string length.\n\n    options: Object (optional)\n        Options.\n\n    options.lpad: string (optional)\n        String used to left pad.\n\n    options.rpad: string (optional)\n        String used to right pad.\n\n    options.centerRight: boolean (optional)\n        Boolean indicating whether to center right in the event of a tie.\n        Default: `false` (i.e., center left).\n\n    Returns\n    -------\n    out: string\n        Padded string.\n\n    Examples\n    --------\n    // Standard usage:\n    > var out = pad( 'a', 5 )\n    'a    '\n\n    // Left pad:\n    > out = pad( 'a', 10, { 'lpad': 'b' })\n    'bbbbbbbbba'\n\n    // Right pad:\n    > out = pad( 'a', 12, { 'rpad': 'b' })\n    'abbbbbbbbbbb'\n\n    // Center an input string:\n    > var opts = { 'lpad': 'a', 'rpad': 'c' };\n    > out = pad( 'b', 11, opts )\n    'aaaaabccccc'\n\n    // Left center:\n    > opts.centerRight = false;\n    > out = pad( 'b', 10, opts )\n    'aaaabccccc'\n\n    // Right center:\n    > opts.centerRight = true;\n    > out = pad( 'b', 10, opts )\n    'aaaaabcccc'\n\n    // Output string always length `len`:\n    > opts = { 'lpad': 'boop', 'rpad': 'woot' };\n    > out = pad( 'beep', 10, opts )\n    'boobeepwoo'\n\n    // Pad right, trim right:\n    > out = pad( 'beep', 2 )\n    'be'\n\n    // Pad left, trim left:\n    > opts = { 'lpad': 'b' };\n    > out = pad( 'beep', 2, opts )\n    'ep'\n\n    // Pad both, trim both:\n    > opts = { 'lpad': '@', 'rpad': '!' };\n    > out = pad( 'beep', 2, opts )\n    'ee'\n\n    // Pad both, trim both starting from left:\n    > out = pad( 'abcdef', 3, opts )\n    'cde'\n\n    // Pad both, trim both starting from right:\n    > opts.centerRight = true;\n    > out = pad( 'abcdef', 3, opts )\n    'bcd'\n\n    See Also\n    --------\n    lpad, rpad\n","papply":"\npapply( fcn, ...args )\n    Returns a function of smaller arity by partially applying arguments.\n\n    The implementation does not set the `length` property of the returned\n    function. Accordingly, the returned function `length` is always zero.\n\n    The evaluation context is always `null`.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to partially apply.\n\n    args: ...any\n        Arguments to partially apply.\n\n    Returns\n    -------\n    out: Function\n        Partially applied function.\n\n    Examples\n    --------\n    > function add( x, y ) { return x + y; };\n    > var add2 = papply( add, 2 );\n    > var sum = add2( 3 )\n    5\n\n    See Also\n    --------\n    papplyRight\n","papplyRight":"\npapplyRight( fcn, ...args )\n    Returns a function of smaller arity by partially applying arguments from the\n    right.\n\n    The implementation does not set the `length` property of the returned\n    function. Accordingly, the returned function `length` is always zero.\n\n    The evaluation context is always `null`.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to partially apply.\n\n    args: ...any\n        Arguments to partially apply.\n\n    Returns\n    -------\n    out: Function\n        Partially applied function.\n\n    Examples\n    --------\n    > function say( text, name ) { return text + ', ' + name + '.'; };\n    > var toGrace = papplyRight( say, 'Grace Hopper' );\n    > var str = toGrace( 'Hello' )\n    'Hello, Grace Hopper.'\n    > str = toGrace( 'Thank you' )\n    'Thank you, Grace Hopper.'\n\n    See Also\n    --------\n    papply\n","parallel":"\nparallel( files, [options,] clbk )\n    Executes scripts in parallel.\n\n    Relative file paths are resolved relative to the current working directory.\n\n    Ordered script output does not imply that scripts are executed in order. To\n    preserve script order, execute the scripts sequentially via some other\n    means.\n\n    Parameters\n    ----------\n    files: Array<string>\n        Script file paths.\n\n    options: Object (optional)\n        Options.\n\n    options.cmd: string (optional)\n        Executable file/command. Default: `'node'`.\n\n    options.concurrency: integer (optional)\n        Number of scripts to execute concurrently. Script concurrency cannot\n        exceed the number of scripts. By specifying a concurrency greater than\n        the number of workers, a worker may be executing more than `1` script at\n        any one time. While not likely to be advantageous for synchronous\n        scripts, setting a higher concurrency may be advantageous for scripts\n        performing asynchronous tasks. If the script concurrency is less than\n        the number of workers, the number of workers is reduced to match the\n        specified concurrency. Default: `options.workers`.\n\n    options.workers: integer (optional)\n        Number of workers. Default: number of CPUs minus `1`.\n\n    options.ordered: boolean (optional)\n        Boolean indicating whether to preserve the order of script output. By\n        default, the `stdio` output for each script is interleaved; i.e., the\n        `stdio` output from one script may be interleaved with the `stdio`\n        output from one or more other scripts. To preserve the `stdio` output\n        order for each script, set the `ordered` option to `true`. Default:\n        `false`.\n\n    options.uid: integer (optional)\n        Process user identity.\n\n    options.gid: integer (optional)\n        Process group identity.\n\n    options.maxBuffer: integer (optional)\n        Max child process `stdio` buffer size. This option is only applied when\n        `options.ordered = true`. Default: `200*1024*1024`.\n\n    clbk: Function\n        Callback to invoke after executing all scripts.\n\n    Examples\n    --------\n    > function done( error ) { if ( error ) { throw error; } };\n    > var files = [ './a.js', './b.js' ];\n    > parallel( files, done );\n\n    // Specify the number of workers:\n    > var opts = { 'workers': 8 };\n    > parallel( files, opts, done );\n\n","parseJSON":"\nparseJSON( str[, reviver] )\n    Attempts to parse a string as JSON.\n\n    Function behavior differs from `JSON.parse()` as follows:\n\n    - throws a `TypeError` if provided any value which is not a string.\n    - throws a `TypeError` if provided a `reviver` argument which is not a\n      function.\n    - returns, rather than throws, a `SyntaxError` if unable to parse a string\n      as JSON.\n\n    Parameters\n    ----------\n    str: string\n        String to parse.\n\n    reviver: Function (optional)\n        Transformation function.\n\n    Returns\n    -------\n    out: any|Error\n        Parsed value or an error.\n\n    Examples\n    --------\n    > var obj = parseJSON( '{\"beep\":\"boop\"}' )\n    { 'beep': 'boop' }\n\n    // Provide a reviver:\n    > function reviver( key, value ) {\n    ...     if ( key === '' ) { return value; }\n    ...     if ( key === 'beep' ) { return value; }\n    ... };\n    > var str = '{\"beep\":\"boop\",\"a\":\"b\"}';\n    > var out = parseJSON( str, reviver )\n    { 'beep': 'boop' }\n\n","PATH_DELIMITER":"\nPATH_DELIMITER\n    Platform-specific path delimiter.\n\n    Examples\n    --------\n    > PATH_DELIMITER\n    <string>\n\n    // POSIX environment:\n    > var path = '/usr/bin:/bin:/usr/sbin';\n    > var parts = path.split( PATH_DELIMITER )\n    [ '/usr/bin', '/bin', '/usr/sbin' ]\n\n    // Windows environment:\n    > path = 'C:\\\\Windows\\\\system32;C:\\\\Windows';\n    > parts = path.split( PATH_DELIMITER )\n    [ 'C:\\\\Windows\\system32', 'C:\\\\Windows' ]\n\n    See Also\n    --------\n    PATH_DELIMITER_POSIX, PATH_DELIMITER_WIN32\n","PATH_DELIMITER_POSIX":"\nPATH_DELIMITER_POSIX\n    POSIX path delimiter.\n\n    Examples\n    --------\n    > PATH_DELIMITER_POSIX\n    ':'\n    > var PATH = '/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/bin';\n    > var paths = PATH.split( PATH_DELIMITER_POSIX )\n    [ '/usr/bin', '/bin', '/usr/sbin', '/sbin', '/usr/local/bin' ]\n\n    See Also\n    --------\n    PATH_DELIMITER, PATH_DELIMITER_WIN32\n","PATH_DELIMITER_WIN32":"\nPATH_DELIMITER_WIN32\n    Windows path delimiter.\n\n    Examples\n    --------\n    > PATH_DELIMITER_WIN32\n    ';'\n    > var PATH = 'C:\\\\Windows\\\\system32;C:\\\\Windows;C:\\\\Program Files\\\\node\\\\';\n    > var paths = PATH.split( PATH_DELIMITER_WIN32 )\n    [ 'C:\\\\Windows\\\\system32', 'C:\\\\Windows', 'C:\\\\Program Files\\\\node\\\\' ]\n\n    See Also\n    --------\n    PATH_DELIMITER, PATH_DELIMITER_POSIX\n","PATH_SEP":"\nPATH_SEP\n    Platform-specific path segment separator.\n\n    Examples\n    --------\n    > PATH_SEP\n    <string>\n\n    // Windows environment:\n    > var parts = 'foo\\\\bar\\\\baz'.split( PATH_SEP )\n    [ 'foo', 'bar', 'baz' ]\n\n    // POSIX environment:\n    > parts = 'foo/bar/baz'.split( PATH_SEP )\n    [ 'foo', 'bar', 'baz' ]\n\n    See Also\n    --------\n    PATH_SEP_POSIX, PATH_SEP_WIN32\n","PATH_SEP_POSIX":"\nPATH_SEP_POSIX\n    POSIX path segment separator.\n\n    Examples\n    --------\n    > PATH_SEP_POSIX\n    '/'\n    > var parts = 'foo/bar/baz'.split( PATH_SEP_POSIX )\n    [ 'foo', 'bar', 'baz' ]\n\n    See Also\n    --------\n    PATH_SEP, PATH_SEP_WIN32\n","PATH_SEP_WIN32":"\nPATH_SEP_WIN32\n    Windows path segment separator.\n\n    Examples\n    --------\n    > PATH_SEP_WIN32\n    '\\\\'\n    > var parts = 'foo\\\\bar\\\\baz'.split( PATH_SEP_WIN32 )\n    [ 'foo', 'bar', 'baz' ]\n\n    See Also\n    --------\n    PATH_SEP, PATH_SEP_POSIX\n","pcorrtest":"\npcorrtest( x, y[, options] )\n    Computes a Pearson product-moment correlation test between paired samples.\n\n    By default, the function performs a t-test for the null hypothesis that the\n    data in arrays or typed arrays `x` and `y` is not correlated. A test against\n    a different population correlation can be carried out by supplying the `rho`\n    option. In this case, a test using the Fisher's z transform is conducted.\n\n    The returned object comes with a `.print()` method which when invoked will\n    print a formatted output of the results of the hypothesis test.\n\n    Parameters\n    ----------\n    x: Array<number>\n        First data array.\n\n    y: Array<number>\n        Second data array.\n\n    options: Object (optional)\n        Options.\n\n    options.alpha: number (optional)\n        Nnumber in the interval `[0,1]` giving the significance level of the\n        hypothesis test. Default: `0.05`.\n\n    options.alternative: string (optional)\n        Either `two-sided`, `less` or `greater`. Indicates whether the\n        alternative hypothesis is that `x` has a larger mean than `y`\n        (`greater`), `x` has a smaller mean than `y` (`less`) or the means are\n        the same (`two-sided`). Default: `'two-sided'`.\n\n    options.rho: number (optional)\n        Number denoting the correlation under the null hypothesis.\n        Default: `0`.\n\n    Returns\n    -------\n    out: Object\n        Test result object.\n\n    out.alpha: number\n        Used significance level.\n\n    out.rejected: boolean\n        Test decision.\n\n    out.pValue: number\n        p-value of the test.\n\n    out.statistic: number\n        Value of test statistic.\n\n    out.ci: Array<number>\n        1-alpha confidence interval for the Pearson product-moment correlation\n        coefficient. The confidence interval is calculated using Fisher's\n        z-transform.\n\n    out.nullValue: number\n        Assumed correlation under H0 (equal to the supplied `rho` option).\n\n    out.alternative: string\n        Alternative hypothesis (`two-sided`, `less` or `greater`).\n\n    out.method: string\n        Name of test.\n\n    out.print: Function\n        Function to print formatted output.\n\n    Examples\n    --------\n    > var rho = 0.5;\n    > var x = new Array( 300 );\n    > var y = new Array( 300 );\n    > for ( var i = 0; i < 300; i++ ) {\n    ...    x[ i ] = base.random.normal( 0.0, 1.0 );\n    ...    y[ i ] = ( rho * x[ i ] ) + base.random.normal( 0.0,\n    ...    base.sqrt( 1.0 - (rho*rho) ) );\n    ... }\n    > var out = pcorrtest( x, y )\n    {\n        alpha: 0.05,\n        rejected: true,\n        pValue: 0,\n        statistic: 10.115805615994121,\n        ci: [ 0.4161679018930295, 0.5853122968949995 ],\n        alternative: 'two-sided',\n        method: 't-test for Pearson correlation coefficient',\n        nullValue: 0,\n        pcorr: 0.505582072355616,\n    }\n\n    // Print output:\n    > var table = out.print()\n    t-test for Pearson correlation coefficient\n\n    Alternative hypothesis: True correlation coefficient is not equal to 0\n\n        pValue: 0\n        statistic: 9.2106\n        95% confidence interval: [0.3776,0.5544]\n\n    Test Decision: Reject null in favor of alternative at 5% significance level\n\n","percentEncode":"\npercentEncode( str )\n    Percent-encodes a UTF-16 encoded string according to RFC 3986.\n\n    Parameters\n    ----------\n    str: string\n        UTF-16 encoded string.\n\n    Returns\n    -------\n    out: string\n        Percent-encoded string.\n\n    Examples\n    --------\n    > var out = percentEncode( '☃' )\n    '%E2%98%83'\n\n","PHI":"\nPHI\n    Golden ratio.\n\n    Examples\n    --------\n    > PHI\n    1.618033988749895\n\n","PI":"\nPI\n    The mathematical constant `π`.\n\n    Examples\n    --------\n    > PI\n    3.141592653589793\n\n    See Also\n    --------\n    TWO_PI\n","PI_SQUARED":"\nPI_SQUARED\n    Square of the mathematical constant `π`.\n\n    Examples\n    --------\n    > PI_SQUARED\n    9.869604401089358\n\n    See Also\n    --------\n    PI\n","pick":"\npick( obj, keys )\n    Returns a partial object copy containing only specified keys.\n\n    If a key does not exist as an own property in a source object, the key is\n    ignored.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    keys: string|Array<string>\n        Keys to copy.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > var obj1 = { 'a': 1, 'b': 2 };\n    > var obj2 = pick( obj1, 'b' )\n    { 'b': 2 }\n\n    See Also\n    --------\n    pickBy\n","pickBy":"\npickBy( obj, predicate )\n    Returns a partial object copy containing properties for which a predicate\n    returns a truthy value.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    predicate: Function\n        Predicate function.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > function predicate( key, value ) {\n    ...     return ( value > 1 );\n    ... };\n    > var obj1 = { 'a': 1, 'b': 2 };\n    > var obj2 = pickBy( obj1, predicate )\n    { 'b': 2 }\n\n    See Also\n    --------\n    pick\n","PINF":"\nPINF\n    Double-precision floating-point positive infinity.\n\n    Examples\n    --------\n    > PINF\n    Infinity\n\n    See Also\n    --------\n    NINF\n","pkg2alias":"\npkg2alias( pkg )\n    Returns the alias associated with a specified package name.\n\n    Parameters\n    ----------\n    pkg: string\n        Package name.\n\n    Returns\n    -------\n    out: string|null\n        Alias.\n\n    Examples\n    --------\n    > var v = pkg2alias( '@stdlib/math/base/special/sin' )\n\n    See Also\n    --------\n    alias2pkg, aliases, pkg2related\n","pkg2related":"\npkg2related( pkg )\n    Returns package names related to a specified package name.\n\n    Parameters\n    ----------\n    pkg: string\n        Package name.\n\n    Returns\n    -------\n    out: Array|null\n        Related package names.\n\n    Examples\n    --------\n    > var v = pkg2related( '@stdlib/math/base/special/sin' )\n    [...]\n\n    See Also\n    --------\n    alias2related, aliases, pkg2alias\n","PLATFORM":"\nPLATFORM\n    Platform on which the current process is running.\n\n    Possible values:\n\n    - win32\n    - darwin\n    - linux\n    - freebsd\n    - sunos\n\n    Examples\n    --------\n    > PLATFORM\n    <string>\n\n    See Also\n    --------\n    ARCH\n","plot":"\nplot( [x, y,] [options] )\n    Returns a plot instance for creating 2-dimensional plots.\n\n    `x` and `y` arguments take precedence over `x` and `y` options.\n\n    Parameters\n    ----------\n    x: Array<Array>|Array<TypedArray> (optional)\n        An array of arrays containing x-coordinate values.\n\n    y: Array<Array>|Array<TypedArray> (optional)\n        An array of arrays containing y-coordinate values.\n\n    options: Object (optional)\n        Options.\n\n    options.autoRender: boolean (optional)\n        Boolean indicating whether to re-render on a 'change' event. Default:\n        false.\n\n    options.autoView: boolean (optional)\n        Boolean indicating whether to generate an updated view on a 'render'\n        event. Default: false.\n\n    options.colors: string|Array<string> (optional)\n        Data color(s). Default: 'category10'.\n\n    options.description: string (optional)\n        Plot description.\n\n    options.engine: string (optional)\n        Plot engine. Default: 'svg'.\n\n    options.height: number (optional)\n        Plot height (in pixels). Default: 400.\n\n    options.labels: Array|Array<string> (optional)\n        Data labels.\n\n    options.isDefined: Function (optional)\n        An accessor function indicating whether a datum is defined.\n\n    options.lineStyle: string|Array<string> (optional)\n        Data line style(s). Must be one of: '-', '--', ':', '-.', or 'none'.\n        Default: '-'.\n\n    options.lineOpacity: number|Array<number> (optional)\n        Data line opacity. Must be on the interval [0,1]. Default: 0.9.\n\n    options.lineWidth: integer|Array<integer> (optional)\n        Data line width (in pixels). Default: 2.\n\n    options.paddingBottom: integer (optional)\n        Bottom padding (in pixels). Default: 80.\n\n    options.paddingLeft: integer (optional)\n        Left padding (in pixels). Default: 90.\n\n    options.paddingRight: integer (optional)\n        Right padding (in pixels). Default: 20.\n\n    options.paddingTop: integer (optional)\n        Top padding (in pixels). Default: 80.\n\n    options.renderFormat: string (optional)\n        Plot render format. Must be one of 'vdom' or 'html'. Default: 'vdom'.\n\n    options.symbols: string|Array<string> (optional)\n        Data symbols. Must be one of 'closed-circle', 'open-circle', or 'none'.\n        Default: 'none'.\n\n    options.symbolsOpacity: number|Array<number> (optional)\n        Symbols opacity. Must be on the interval [0,1]. Default: 0.9.\n\n    options.symbolsSize: integer|Array<integer> (optional)\n        Symbols size (in pixels). Default: 6.\n\n    options.title: string (optional)\n        Plot title.\n\n    options.viewer: string (optional)\n        Plot viewer. Must be one of 'browser', 'terminal', 'stdout', 'window',\n        or 'none'. Default: 'none'.\n\n    options.width: number (optional)\n        Plot width (in pixels). Default: 400.\n\n    options.x: Array<Array>|Array<TypedArray> (optional)\n        x-coordinate values.\n\n    options.xAxisOrient: string (optional)\n        x-axis orientation. Must be either 'bottom' or 'top'. Default: 'bottom'.\n\n    options.xLabel: string (optional)\n        x-axis label. Default: 'x'.\n\n    options.xMax: number|null (optional)\n        Maximum value of the x-axis domain. If `null`, the maximum value is\n        calculated from the data. Default: null.\n\n    options.xMin: number|null (optional)\n        Minimum value of the x-axis domain. If `null`, the minimum value is\n        calculated from the data. Default: null.\n\n    options.xNumTicks: integer (optional)\n        Number of x-axis tick marks. Default: 5.\n\n    options.xRug: boolean|Array<boolean> (optional)\n        Boolean flag(s) indicating whether to render one or more rug plots along\n        the x-axis.\n\n    options.xRugOrient: string|Array<string> (optional)\n        x-axis rug plot orientation(s). Must be either 'bottom' or 'top'.\n        Default: 'bottom'.\n\n    options.xRugOpacity: number|Array<number> (optional)\n       x-axis rug plot opacity. Must be on the interval [0,1]. Default: 0.1.\n\n    options.xRugSize: integer|Array<integer> (optional)\n       x-axis rug tick (tassel) size (in pixels). Default: 6.\n\n    options.xScale: string\n       x-axis scale. Default: 'linear'.\n\n    options.xTickFormat: string|null\n       x-axis tick format. Default: null.\n\n    options.y: Array<Array>|Array<TypedArray> (optional)\n        y-coordinate values.\n\n    options.yAxisOrient: string (optional)\n        x-axis orientation. Must be either 'left' or 'right'. Default: 'left'.\n\n    options.yLabel: string (optional)\n        y-axis label. Default: 'y'.\n\n    options.yMax: number|null (optional)\n        Maximum value of the y-axis domain. If `null`, the maximum value is\n        calculated from the data. Default: null.\n\n    options.yMin: number|null (optional)\n        Minimum value of the y-axis domain. If `null`, the minimum value is\n        calculated from the data. Default: null.\n\n    options.yNumTicks: integer (optional)\n        Number of x-axis tick marks. Default: 5.\n\n    options.yRug: boolean|Array<boolean> (optional)\n        Boolean flag(s) indicating whether to render one or more rug plots along\n        the y-axis.\n\n    options.yRugOrient: string|Array<string> (optional)\n        y-axis rug plot orientation(s). Must be either 'left' or 'right'.\n        Default: 'left'.\n\n    options.yRugOpacity: number|Array<number> (optional)\n       y-axis rug plot opacity. Must be on the interval [0,1]. Default: 0.1.\n\n    options.yRugSize: integer|Array<integer> (optional)\n       y-axis rug tick (tassel) size (in pixels). Default: 6.\n\n    options.yScale: string\n       y-axis scale. Default: 'linear'.\n\n    options.yTickFormat: string|null\n       y-axis tick format. Default: null.\n\n    Returns\n    -------\n    plot: Plot\n        Plot instance.\n\n    plot.render()\n        Renders a plot as a virtual DOM tree.\n\n    plot.view( [viewer] )\n        Generates a plot view.\n\n    plot.x\n        x-coordinate values. An assigned value must be an array where each\n        element corresponds to a plotted dataset.\n\n    plot.y\n        y-coordinate values. An assigned value must be an array, where each\n        element corresponds to a plotted dataset.\n\n    plot.labels\n        Data labels. During plot creation, each plotted dataset is assigned a\n        label. If the number of labels is less than the number of plotted\n        datasets, labels are reused using modulo arithmetic.\n\n    plot.isDefined( d, i )\n        An accessor function which defines whether a datum is defined. This\n        accessor is used to define how missing values are encoded. The default\n        behavior is to ignore values which are `NaN`.\n\n    plot.colors\n        Data colors. To set the color all plotted datasets, provide a color\n        name. To specify the colors for each dataset, provide an array of\n        colors. During plot creation, each plotted dataset is assigned one of\n        the provided colors. If the number of colors is less than the number of\n        plotted datasets, colors are reused using modulo arithmetic. Lastly,\n        colors may also be specified by providing the name of a predefined color\n        scheme. The following schemes are supported: 'category10', 'category20',\n        'category20b', and 'category20c'.\n\n    plot.lineStyle\n        Data line style(s). The following line styles are supported: '-' (solid\n        line), '--' (dashed line), ':' (dotted line), '-.' (alternating dashes\n        and dots), and 'none' (no line). To specify the line style for each\n        dataset, provide an array of line styles. During plot creation, each\n        plotted dataset is assigned a line style. If the number of line styles\n        is less than the number of plotted datasets, line styles are reused\n        using modulo arithmetic.\n\n    plot.lineOpacity\n        Data line opacity, where an opacity of `0.0` make a line completely\n        transparent and an opacity of `1.0` makes a line completely opaque. To\n        specify the line opacity for each dataset, provide an array of\n        opacities. During plot creation, each plotted dataset is assigned an\n        opacity. If the number of opacities is less than the number of plotted\n        datasets, opacities are reused using modulo arithmetic.\n\n    plot.lineWidth\n        Data line width(s). To specify the line width for each dataset, provide\n        an array of widths. During plot creation, each plotted dataset is\n        assigned a line width. If the number of line widths is less than the\n        number of plotted datasets, line widths are reused using modulo\n        arithmetic.\n\n    plot.symbols\n        Data symbols. The following symbols are supported: 'closed-circle'\n        (closed circles), 'open-circle' (open circles), and 'none' (no symbols).\n        To specify the symbols used for each dataset, provide an array of\n        symbols. During plot creation, each plotted dataset is assigned a\n        symbol. If the number of symbols is less than the number of plotted\n        datasets, symbols are reused using modulo arithmetic.\n\n    plot.symbolSize\n        Symbols size. To specify the symbols size for each dataset, provide an\n        array of sizes. During plot creation, each plotted dataset is assigned\n        a symbols size. If the number of sizes is less than the number of\n        plotted datasets, sizes are reused using modulo arithmetic.\n\n    plot.symbolsOpacity\n        Symbols opacity, where an opacity of `0.0` makes a symbol completely\n        transparent and an opacity of `1.0` makes a symbol completely opaque. To\n        specify the opacity for each dataset, provide an array of opacities.\n        During plot creation, each plotted dataset is assigned an opacity. If\n        the number of opacities is less than the number of plotted datasets,\n        opacities are reused using modulo arithmetic.\n\n    plot.width\n        Plot width (in pixels).\n\n    plot.height\n        Plot height (in pixels).\n\n    plot.paddingLeft\n        Plot left padding (in pixels). Left padding is typically used to create\n        space for a left-oriented y-axis.\n\n    plot.paddingRight\n        Plot right padding (in pixels). Right padding is typically used to\n        create space for a right-oriented y-axis.\n\n    plot.paddingTop\n        Plot top padding (in pixels). Top padding is typically used to create\n        space for a title or top-oriented x-axis.\n\n    plot.paddingBottom\n        Plot bottom padding (in pixels). Bottom padding is typically used to\n        create space for a bottom-oriented x-axis.\n\n    plot.xMin\n        Minimum value of the x-axis domain. When retrieved, if the value has\n        been set to `null`, the returned value is computed from the `x` data.\n\n    plot.xMax\n        Maximum value of the x-axis domain. When retrieved, if the value has\n        been set to `null`, the returned value is computed from the `x` data.\n\n    plot.yMin\n        Minimum value of the y-axis domain. When retrieved, if the value has\n        been set to `null`, the returned value is computed from the `y` data.\n\n    plot.yMax\n        Maximum value of the y-axis domain. When retrieved, if the value has\n        been set to `null`, the returned value is computed from the `y` data.\n\n    plot.xScale\n        Scale function for mapping values to a coordinate along the x-axis. The\n        following `scales` are supported: 'linear' (linear scale) and 'time'\n        (time scale). When retrieved, the returned value is a scale function.\n\n    plot.yScale\n        Scale function for mapping values to a coordinate along the y-axis. The\n        following `scales` are supported: 'linear' (linear scale) and 'time'\n        (time scale). When retrieved, the returned value is a scale function.\n\n    plot.xTickFormat\n        x-axis tick format (e.g., '%H:%M'). When retrieved, if the value has not\n        been set to `null`, the returned value is a formatting function.\n\n    plot.yTickFormat\n        y-axis tick format (e.g., '%%'). When retrieved, if the value has not\n        been set to `null`, the returned value is a formatting function.\n\n    plot.xNumTicks\n        Number of x-axis tick marks. If the value is set to `null`, the number\n        of tick marks is computed internally.\n\n    plot.yNumTicks\n        Number of y-axis tick marks. If the value is set to `null`, the number\n        of tick marks is computed internally.\n\n    plot.xAxisOrient\n        x-axis orientation. The following orientations are supported: 'bottom'\n        and 'top'.\n\n    plot.yAxisOrient\n        y-axis orientation. The following orientations are supported: 'left' and\n        'right'.\n\n    plot.xRug\n        Boolean flag(s) indicating whether to display a rug plot along the x-\n        axis. To specify the flag for each dataset, provide an array of\n        booleans. During plot creation, each plotted dataset is assigned a flag.\n        If the number of flags is less than the number of plotted datasets,\n        flags are reused using modulo arithmetic.\n\n    plot.yRug\n        Boolean flag(s) indicating whether to display a rug plot along the y-\n        axis. To specify the flag for each dataset, provide an array of\n        booleans. During plot creation, each plotted dataset is assigned a flag.\n        If the number of flags is less than the number of plotted datasets,\n        flags are reused using modulo arithmetic.\n\n    plot.xRugOrient\n        x-axis rug orientation. The following orientations are supported:\n        'bottom' or 'top'. To specify the x-axis rug orientation for each\n        dataset, provide an array of orientations. During plot creation, each\n        plotted dataset is assigned an orientation. If the number of\n        orientations is less than the number of plotted datasets, orientations\n        are reused using modulo arithmetic.\n\n    plot.yRugOrient\n        y-axis rug orientation. The following orientations are supported: 'left'\n        or 'right'. To specify the y-axis rug orientation for each dataset,\n        provide an array of orientations. During plot creation, each plotted\n        dataset is assigned an orientation. If the number of orientations is\n        less than the number of plotted datasets, orientations are reused using\n        modulo arithmetic.\n\n    plot.xRugOpacity\n        x-axis rug opacity, where an opacity of `0.0` makes a rug completely\n        transparent and an opacity of `1.0` makes a rug completely opaque. To\n        specify the x-axis rug opacity for each dataset, provide an array of\n        opacities. During plot creation, each plotted dataset is assigned an\n        opacity. If the number of opacities is less than the number of plotted\n        datasets, opacities are reused using modulo arithmetic.\n\n    plot.yRugOpacity\n        y-axis rug opacity, where an opacity of `0.0` makes a rug completely\n        transparent and an opacity of `1.0` makes a rug completely opaque. To\n        specify the y-axis rug opacity for each dataset, provide an array of\n        opacities. During plot creation, each plotted dataset is assigned an\n        opacity. If the number of opacities is less than the number of plotted\n        datasets, opacities are reused using modulo arithmetic.\n\n    plot.xRugSize\n        x-axis rug tick (tassel) size. To specify the x-axis rug size for each\n        dataset, provide an array of sizes. During plot creation, each plotted\n        dataset is assigned a tick size. If the number of sizes is less than the\n        number of plotted datasets, sizes are reused using modulo arithmetic.\n\n    plot.yRugSize\n        y-axis rug tick (tassel) size. To specify the y-axis rug size for each\n        dataset, provide an array of sizes. During plot creation, each plotted\n        dataset is assigned a tick size. If the number of sizes is less than the\n        number of plotted datasets, sizes are reused using modulo arithmetic.\n\n    plot.description\n        Plot description.\n\n    plot.title\n        Plot title.\n\n    plot.xLabel\n        x-axis label.\n\n    plot.yLabel\n        y-axis label.\n\n    plot.engine\n        Plot rendering engine. The following engines are supported: 'svg'.\n\n    plot.renderFormat\n        Plot render format. The following formats are supported: 'vdom' and\n        'html'.\n\n    plot.autoRender\n        Rendering mode. If `true`, an instance renders on each 'change' event;\n        otherwise, rendering must be triggered manually.\n\n    plot.viewer\n        Plot viewer. The following viewers are supported: 'none', 'stdout',\n        'window', and 'browser'.\n\n    plot.autoView\n        Viewer mode. If `true`, an instance generates an updated view on each\n        'render' event; otherwise, generating a view must be triggered manually.\n\n    plot.graphWidth\n        Computed property corresponding to the expected graph width.\n\n    plot.graphHeight\n        Computed property corresponding to the expected graph height.\n\n    plot.xDomain\n        Computed property corresponding to the x-axis domain.\n\n    plot.yDomain\n        Computed property corresponding to the y-axis domain.\n\n    plot.xRange\n        Computed property corresponding to the x-axis range.\n\n    plot.yRange\n        Computed property correspond to the y-axis range.\n\n    plot.xPos\n        A function which maps values to x-axis coordinate values.\n\n    plot.yPos\n        A function which maps values to y-axis coordinate values.\n\n    Examples\n    --------\n    > var plot = plot()\n    <Plot>\n\n    // Provide plot data at instantiation:\n    > var x = [[0.10, 0.20, 0.30]];\n    > var y = [[0.52, 0.79, 0.64]];\n    > plot = plot( x, y )\n    <Plot>\n\n    See Also\n    --------\n    Plot\n","Plot":"\nPlot( [x, y,] [options] )\n    Returns a plot instance for creating 2-dimensional plots.\n\n    `x` and `y` arguments take precedence over `x` and `y` options.\n\n    Parameters\n    ----------\n    x: Array<Array>|Array<TypedArray> (optional)\n        An array of arrays containing x-coordinate values.\n\n    y: Array<Array>|Array<TypedArray> (optional)\n        An array of arrays containing y-coordinate values.\n\n    options: Object (optional)\n        Options.\n\n    options.autoRender: boolean (optional)\n        Boolean indicating whether to re-render on a 'change' event. Default:\n        false.\n\n    options.autoView: boolean (optional)\n        Boolean indicating whether to generate an updated view on a 'render'\n        event. Default: false.\n\n    options.colors: string|Array<string> (optional)\n        Data color(s). Default: 'category10'.\n\n    options.description: string (optional)\n        Plot description.\n\n    options.engine: string (optional)\n        Plot engine. Default: 'svg'.\n\n    options.height: number (optional)\n        Plot height (in pixels). Default: 400.\n\n    options.labels: Array|Array<string> (optional)\n        Data labels.\n\n    options.isDefined: Function (optional)\n        An accessor function indicating whether a datum is defined.\n\n    options.lineStyle: string|Array<string> (optional)\n        Data line style(s). Must be one of: '-', '--', ':', '-.', or 'none'.\n        Default: '-'.\n\n    options.lineOpacity: number|Array<number> (optional)\n        Data line opacity. Must be on the interval [0,1]. Default: 0.9.\n\n    options.lineWidth: integer|Array<integer> (optional)\n        Data line width (in pixels). Default: 2.\n\n    options.paddingBottom: integer (optional)\n        Bottom padding (in pixels). Default: 80.\n\n    options.paddingLeft: integer (optional)\n        Left padding (in pixels). Default: 90.\n\n    options.paddingRight: integer (optional)\n        Right padding (in pixels). Default: 20.\n\n    options.paddingTop: integer (optional)\n        Top padding (in pixels). Default: 80.\n\n    options.renderFormat: string (optional)\n        Plot render format. Must be one of 'vdom' or 'html'. Default: 'vdom'.\n\n    options.symbols: string|Array<string> (optional)\n        Data symbols. Must be one of 'closed-circle', 'open-circle', or 'none'.\n        Default: 'none'.\n\n    options.symbolsOpacity: number|Array<number> (optional)\n        Symbols opacity. Must be on the interval [0,1]. Default: 0.9.\n\n    options.symbolsSize: integer|Array<integer> (optional)\n        Symbols size (in pixels). Default: 6.\n\n    options.title: string (optional)\n        Plot title.\n\n    options.viewer: string (optional)\n        Plot viewer. Must be one of 'browser', 'terminal', 'stdout', 'window',\n        or 'none'. Default: 'none'.\n\n    options.width: number (optional)\n        Plot width (in pixels). Default: 400.\n\n    options.x: Array<Array>|Array<TypedArray> (optional)\n        x-coordinate values.\n\n    options.xAxisOrient: string (optional)\n        x-axis orientation. Must be either 'bottom' or 'top'. Default: 'bottom'.\n\n    options.xLabel: string (optional)\n        x-axis label. Default: 'x'.\n\n    options.xMax: number|null (optional)\n        Maximum value of the x-axis domain. If `null`, the maximum value is\n        calculated from the data. Default: null.\n\n    options.xMin: number|null (optional)\n        Minimum value of the x-axis domain. If `null`, the minimum value is\n        calculated from the data. Default: null.\n\n    options.xNumTicks: integer (optional)\n        Number of x-axis tick marks. Default: 5.\n\n    options.xRug: boolean|Array<boolean> (optional)\n        Boolean flag(s) indicating whether to render one or more rug plots along\n        the x-axis.\n\n    options.xRugOrient: string|Array<string> (optional)\n        x-axis rug plot orientation(s). Must be either 'bottom' or 'top'.\n        Default: 'bottom'.\n\n    options.xRugOpacity: number|Array<number> (optional)\n       x-axis rug plot opacity. Must be on the interval [0,1]. Default: 0.1.\n\n    options.xRugSize: integer|Array<integer> (optional)\n       x-axis rug tick (tassel) size (in pixels). Default: 6.\n\n    options.xScale: string\n       x-axis scale. Default: 'linear'.\n\n    options.xTickFormat: string|null\n       x-axis tick format. Default: null.\n\n    options.y: Array<Array>|Array<TypedArray> (optional)\n        y-coordinate values.\n\n    options.yAxisOrient: string (optional)\n        x-axis orientation. Must be either 'left' or 'right'. Default: 'left'.\n\n    options.yLabel: string (optional)\n        y-axis label. Default: 'y'.\n\n    options.yMax: number|null (optional)\n        Maximum value of the y-axis domain. If `null`, the maximum value is\n        calculated from the data. Default: null.\n\n    options.yMin: number|null (optional)\n        Minimum value of the y-axis domain. If `null`, the minimum value is\n        calculated from the data. Default: null.\n\n    options.yNumTicks: integer (optional)\n        Number of x-axis tick marks. Default: 5.\n\n    options.yRug: boolean|Array<boolean> (optional)\n        Boolean flag(s) indicating whether to render one or more rug plots along\n        the y-axis.\n\n    options.yRugOrient: string|Array<string> (optional)\n        y-axis rug plot orientation(s). Must be either 'left' or 'right'.\n        Default: 'left'.\n\n    options.yRugOpacity: number|Array<number> (optional)\n       y-axis rug plot opacity. Must be on the interval [0,1]. Default: 0.1.\n\n    options.yRugSize: integer|Array<integer> (optional)\n       y-axis rug tick (tassel) size (in pixels). Default: 6.\n\n    options.yScale: string\n       y-axis scale. Default: 'linear'.\n\n    options.yTickFormat: string|null\n       y-axis tick format. Default: null.\n\n    Returns\n    -------\n    plot: Plot\n        Plot instance.\n\n    plot.render()\n        Renders a plot as a virtual DOM tree.\n\n    plot.view( [viewer] )\n        Generates a plot view.\n\n    plot.x\n        x-coordinate values. An assigned value must be an array where each\n        element corresponds to a plotted dataset.\n\n    plot.y\n        y-coordinate values. An assigned value must be an array, where each\n        element corresponds to a plotted dataset.\n\n    plot.labels\n        Data labels. During plot creation, each plotted dataset is assigned a\n        label. If the number of labels is less than the number of plotted\n        datasets, labels are reused using modulo arithmetic.\n\n    plot.isDefined( d, i )\n        An accessor function which defines whether a datum is defined. This\n        accessor is used to define how missing values are encoded. The default\n        behavior is to ignore values which are `NaN`.\n\n    plot.colors\n        Data colors. To set the color all plotted datasets, provide a color\n        name. To specify the colors for each dataset, provide an array of\n        colors. During plot creation, each plotted dataset is assigned one of\n        the provided colors. If the number of colors is less than the number of\n        plotted datasets, colors are reused using modulo arithmetic. Lastly,\n        colors may also be specified by providing the name of a predefined color\n        scheme. The following schemes are supported: 'category10', 'category20',\n        'category20b', and 'category20c'.\n\n    plot.lineStyle\n        Data line style(s). The following line styles are supported: '-' (solid\n        line), '--' (dashed line), ':' (dotted line), '-.' (alternating dashes\n        and dots), and 'none' (no line). To specify the line style for each\n        dataset, provide an array of line styles. During plot creation, each\n        plotted dataset is assigned a line style. If the number of line styles\n        is less than the number of plotted datasets, line styles are reused\n        using modulo arithmetic.\n\n    plot.lineOpacity\n        Data line opacity, where an opacity of `0.0` make a line completely\n        transparent and an opacity of `1.0` makes a line completely opaque. To\n        specify the line opacity for each dataset, provide an array of\n        opacities. During plot creation, each plotted dataset is assigned an\n        opacity. If the number of opacities is less than the number of plotted\n        datasets, opacities are reused using modulo arithmetic.\n\n    plot.lineWidth\n        Data line width(s). To specify the line width for each dataset, provide\n        an array of widths. During plot creation, each plotted dataset is\n        assigned a line width. If the number of line widths is less than the\n        number of plotted datasets, line widths are reused using modulo\n        arithmetic.\n\n    plot.symbols\n        Data symbols. The following symbols are supported: 'closed-circle'\n        (closed circles), 'open-circle' (open circles), and 'none' (no symbols).\n        To specify the symbols used for each dataset, provide an array of\n        symbols. During plot creation, each plotted dataset is assigned a\n        symbol. If the number of symbols is less than the number of plotted\n        datasets, symbols are reused using modulo arithmetic.\n\n    plot.symbolSize\n        Symbols size. To specify the symbols size for each dataset, provide an\n        array of sizes. During plot creation, each plotted dataset is assigned\n        a symbols size. If the number of sizes is less than the number of\n        plotted datasets, sizes are reused using modulo arithmetic.\n\n    plot.symbolsOpacity\n        Symbols opacity, where an opacity of `0.0` makes a symbol completely\n        transparent and an opacity of `1.0` makes a symbol completely opaque. To\n        specify the opacity for each dataset, provide an array of opacities.\n        During plot creation, each plotted dataset is assigned an opacity. If\n        the number of opacities is less than the number of plotted datasets,\n        opacities are reused using modulo arithmetic.\n\n    plot.width\n        Plot width (in pixels).\n\n    plot.height\n        Plot height (in pixels).\n\n    plot.paddingLeft\n        Plot left padding (in pixels). Left padding is typically used to create\n        space for a left-oriented y-axis.\n\n    plot.paddingRight\n        Plot right padding (in pixels). Right padding is typically used to\n        create space for a right-oriented y-axis.\n\n    plot.paddingTop\n        Plot top padding (in pixels). Top padding is typically used to create\n        space for a title or top-oriented x-axis.\n\n    plot.paddingBottom\n        Plot bottom padding (in pixels). Bottom padding is typically used to\n        create space for a bottom-oriented x-axis.\n\n    plot.xMin\n        Minimum value of the x-axis domain. When retrieved, if the value has\n        been set to `null`, the returned value is computed from the `x` data.\n\n    plot.xMax\n        Maximum value of the x-axis domain. When retrieved, if the value has\n        been set to `null`, the returned value is computed from the `x` data.\n\n    plot.yMin\n        Minimum value of the y-axis domain. When retrieved, if the value has\n        been set to `null`, the returned value is computed from the `y` data.\n\n    plot.yMax\n        Maximum value of the y-axis domain. When retrieved, if the value has\n        been set to `null`, the returned value is computed from the `y` data.\n\n    plot.xScale\n        Scale function for mapping values to a coordinate along the x-axis. The\n        following `scales` are supported: 'linear' (linear scale) and 'time'\n        (time scale). When retrieved, the returned value is a scale function.\n\n    plot.yScale\n        Scale function for mapping values to a coordinate along the y-axis. The\n        following `scales` are supported: 'linear' (linear scale) and 'time'\n        (time scale). When retrieved, the returned value is a scale function.\n\n    plot.xTickFormat\n        x-axis tick format (e.g., '%H:%M'). When retrieved, if the value has not\n        been set to `null`, the returned value is a formatting function.\n\n    plot.yTickFormat\n        y-axis tick format (e.g., '%%'). When retrieved, if the value has not\n        been set to `null`, the returned value is a formatting function.\n\n    plot.xNumTicks\n        Number of x-axis tick marks. If the value is set to `null`, the number\n        of tick marks is computed internally.\n\n    plot.yNumTicks\n        Number of y-axis tick marks. If the value is set to `null`, the number\n        of tick marks is computed internally.\n\n    plot.xAxisOrient\n        x-axis orientation. The following orientations are supported: 'bottom'\n        and 'top'.\n\n    plot.yAxisOrient\n        y-axis orientation. The following orientations are supported: 'left' and\n        'right'.\n\n    plot.xRug\n        Boolean flag(s) indicating whether to display a rug plot along the x-\n        axis. To specify the flag for each dataset, provide an array of\n        booleans. During plot creation, each plotted dataset is assigned a flag.\n        If the number of flags is less than the number of plotted datasets,\n        flags are reused using modulo arithmetic.\n\n    plot.yRug\n        Boolean flag(s) indicating whether to display a rug plot along the y-\n        axis. To specify the flag for each dataset, provide an array of\n        booleans. During plot creation, each plotted dataset is assigned a flag.\n        If the number of flags is less than the number of plotted datasets,\n        flags are reused using modulo arithmetic.\n\n    plot.xRugOrient\n        x-axis rug orientation. The following orientations are supported:\n        'bottom' or 'top'. To specify the x-axis rug orientation for each\n        dataset, provide an array of orientations. During plot creation, each\n        plotted dataset is assigned an orientation. If the number of\n        orientations is less than the number of plotted datasets, orientations\n        are reused using modulo arithmetic.\n\n    plot.yRugOrient\n        y-axis rug orientation. The following orientations are supported: 'left'\n        or 'right'. To specify the y-axis rug orientation for each dataset,\n        provide an array of orientations. During plot creation, each plotted\n        dataset is assigned an orientation. If the number of orientations is\n        less than the number of plotted datasets, orientations are reused using\n        modulo arithmetic.\n\n    plot.xRugOpacity\n        x-axis rug opacity, where an opacity of `0.0` makes a rug completely\n        transparent and an opacity of `1.0` makes a rug completely opaque. To\n        specify the x-axis rug opacity for each dataset, provide an array of\n        opacities. During plot creation, each plotted dataset is assigned an\n        opacity. If the number of opacities is less than the number of plotted\n        datasets, opacities are reused using modulo arithmetic.\n\n    plot.yRugOpacity\n        y-axis rug opacity, where an opacity of `0.0` makes a rug completely\n        transparent and an opacity of `1.0` makes a rug completely opaque. To\n        specify the y-axis rug opacity for each dataset, provide an array of\n        opacities. During plot creation, each plotted dataset is assigned an\n        opacity. If the number of opacities is less than the number of plotted\n        datasets, opacities are reused using modulo arithmetic.\n\n    plot.xRugSize\n        x-axis rug tick (tassel) size. To specify the x-axis rug size for each\n        dataset, provide an array of sizes. During plot creation, each plotted\n        dataset is assigned a tick size. If the number of sizes is less than the\n        number of plotted datasets, sizes are reused using modulo arithmetic.\n\n    plot.yRugSize\n        y-axis rug tick (tassel) size. To specify the y-axis rug size for each\n        dataset, provide an array of sizes. During plot creation, each plotted\n        dataset is assigned a tick size. If the number of sizes is less than the\n        number of plotted datasets, sizes are reused using modulo arithmetic.\n\n    plot.description\n        Plot description.\n\n    plot.title\n        Plot title.\n\n    plot.xLabel\n        x-axis label.\n\n    plot.yLabel\n        y-axis label.\n\n    plot.engine\n        Plot rendering engine. The following engines are supported: 'svg'.\n\n    plot.renderFormat\n        Plot render format. The following formats are supported: 'vdom' and\n        'html'.\n\n    plot.autoRender\n        Rendering mode. If `true`, an instance renders on each 'change' event;\n        otherwise, rendering must be triggered manually.\n\n    plot.viewer\n        Plot viewer. The following viewers are supported: 'none', 'stdout',\n        'window', and 'browser'.\n\n    plot.autoView\n        Viewer mode. If `true`, an instance generates an updated view on each\n        'render' event; otherwise, generating a view must be triggered manually.\n\n    plot.graphWidth\n        Computed property corresponding to the expected graph width.\n\n    plot.graphHeight\n        Computed property corresponding to the expected graph height.\n\n    plot.xDomain\n        Computed property corresponding to the x-axis domain.\n\n    plot.yDomain\n        Computed property corresponding to the y-axis domain.\n\n    plot.xRange\n        Computed property corresponding to the x-axis range.\n\n    plot.yRange\n        Computed property correspond to the y-axis range.\n\n    plot.xPos\n        A function which maps values to x-axis coordinate values.\n\n    plot.yPos\n        A function which maps values to y-axis coordinate values.\n\n    Examples\n    --------\n    > var plot = Plot()\n    <Plot>\n\n    // Provide plot data at instantiation:\n    > var x = [[0.10, 0.20, 0.30]];\n    > var y = [[0.52, 0.79, 0.64]];\n    > plot = Plot( x, y )\n    <Plot>\n\n    See Also\n    --------\n    plot\n","pluck":"\npluck( arr, prop[, options] )\n    Extracts a property value from each element of an object array.\n\n    The function skips `null` and `undefined` array elements.\n\n    Extracted values are not cloned.\n\n    Parameters\n    ----------\n    arr: Array\n        Source array.\n\n    prop: string\n        Property to access.\n\n    options: Object (optional)\n        Options.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to return a new data structure. To mutate the\n        input data structure (e.g., when input values can be discarded or when\n        optimizing memory usage), set the `copy` option to `false`. Default:\n        true.\n\n    Returns\n    -------\n    out: Array\n        Destination array.\n\n    Examples\n    --------\n    > var arr = [\n    ...     { 'a': 1, 'b': 2 },\n    ...     { 'a': 0.5, 'b': 3 }\n    ... ];\n    > var out = pluck( arr, 'a' )\n    [ 1, 0.5 ]\n\n    > arr = [\n    ...     { 'a': 1, 'b': 2 },\n    ...     { 'a': 0.5, 'b': 3 }\n    ... ];\n    > out = pluck( arr, 'a', { 'copy': false } )\n    [ 1, 0.5 ]\n    > var bool = ( arr[ 0 ] === out[ 0 ] )\n    true\n\n    See Also\n    --------\n    deepPluck, pick\n","pop":"\npop( collection )\n    Removes and returns the last element of a collection.\n\n    The function returns an array with two elements: the shortened collection\n    and the removed element.\n\n    If the input collection is a typed array whose length is greater than `0`,\n    the first return value does not equal the input reference.\n\n    For purposes of generality, always treat the output collection as distinct\n    from the input collection.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        A collection. If the collection is an `Object`, the value should be\n        array-like.\n\n    Returns\n    -------\n    out: Array\n        Updated collection and the removed item.\n\n    Examples\n    --------\n    // Arrays:\n    > var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > var out = pop( arr )\n    [ [ 1.0, 2.0, 3.0, 4.0 ], 5.0 ]\n\n    // Typed arrays:\n    > arr = new Float64Array( [ 1.0, 2.0 ] );\n    > out = pop( arr )\n    [ <Float64Array>[ 1.0 ], 2.0 ]\n\n    // Array-like object:\n    > arr = { 'length': 2, '0': 1.0, '1': 2.0 };\n    > out = pop( arr )\n    [ { 'length': 1, '0': 1.0 }, 2.0 ]\n\n    See Also\n    --------\n    push, shift, unshift\n","porterStemmer":"\nporterStemmer( word )\n    Extracts the stem of a given word.\n\n    Parameters\n    ----------\n    word: string\n        Input word.\n\n    Returns\n    -------\n    out: string\n        Word stem.\n\n    Examples\n    --------\n    > var out = porterStemmer( 'walking' )\n    'walk'\n    > out = porterStemmer( 'walked' )\n    'walk'\n    > out = porterStemmer( 'walks' )\n    'walk'\n    > out = porterStemmer( '' )\n    ''\n\n","prepend":"\nprepend( collection1, collection2 )\n    Adds the elements of one collection to the beginning of another collection.\n\n    If the input collection is a typed array, the output value does not equal\n    the input reference and the underlying `ArrayBuffer` may *not* be the same\n    as the `ArrayBuffer` belonging to the input view.\n\n    For purposes of generality, always treat the output collection as distinct\n    from the input collection.\n\n    Parameters\n    ----------\n    collection1: Array|TypedArray|Object\n        A collection. If the collection is an `Object`, the collection should be\n        array-like.\n\n    collection2: Array|TypedArray|Object\n        A collection containing the elements to add. If the collection is an\n        `Object`, the collection should be array-like.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Updated collection.\n\n    Examples\n    --------\n    // Arrays:\n    > var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > arr = prepend( arr, [ 6.0, 7.0 ] )\n    [ 6.0, 7.0, 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Typed arrays:\n    > arr = new Float64Array( [ 1.0, 2.0 ] );\n    > arr = prepend( arr, [ 3.0, 4.0 ] )\n    <Float64Array>[ 3.0, 4.0, 1.0, 2.0 ]\n\n    // Array-like object:\n    > arr = { 'length': 1, '0': 1.0 };\n    > arr = prepend( arr, [ 2.0, 3.0 ] )\n    { 'length': 3, '0': 2.0, '1': 3.0, '2': 1.0 }\n\n    See Also\n    --------\n    append, unshift\n","properties":"\nproperties( value )\n    Returns an array of an object's own enumerable and non-enumerable property\n    names and symbols.\n\n    Property order is not guaranteed, as object property enumeration is not\n    specified according to the ECMAScript specification. In practice, however,\n    most engines use insertion order to sort an object's properties, thus\n    allowing for deterministic extraction.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    props: Array\n        List of an object's own enumerable and non-enumerable properties.\n\n    Examples\n    --------\n    > function Foo() { this.beep = 'boop'; return this; };\n    > Foo.prototype.foo = 'bar';\n    > var obj = new Foo();\n    > var props = properties( obj )\n    [ 'beep' ]\n\n    See Also\n    --------\n    defineProperties, inheritedProperties, propertiesIn, propertyNames, propertySymbols\n","propertiesIn":"\npropertiesIn( value )\n    Returns an array of an object's own and inherited property names and\n    symbols.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    props: Array\n        List of an object's own and inherited property names and symbols.\n\n    Examples\n    --------\n    > var props = propertiesIn( [] )\n\n    See Also\n    --------\n    defineProperties, inheritedProperties, properties, propertyNamesIn, propertySymbolsIn\n","propertyDescriptor":"\npropertyDescriptor( value, property )\n    Returns a property descriptor for an object's own property.\n\n    If provided `null` or `undefined` or provided a non-existent property, the\n    function returns `null`.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    property: string|symbol\n        Property name.\n\n    Returns\n    -------\n    desc: Object|null\n        Property descriptor.\n\n    Examples\n    --------\n    > var obj = { 'a': 'b' };\n    > var desc = propertyDescriptor( obj, 'a' )\n    {...}\n\n    See Also\n    --------\n    hasOwnProp, defineProperty, propertyDescriptorIn, propertyDescriptors\n","propertyDescriptorIn":"\npropertyDescriptorIn( value, property )\n    Returns a property descriptor for an object's own or inherited property.\n\n    If provided `null` or `undefined` or provided a non-existent property, the\n    function returns `null`.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    property: string|symbol\n        Property name.\n\n    Returns\n    -------\n    desc: Object|null\n        Property descriptor.\n\n    Examples\n    --------\n    > var obj = { 'a': 'b' };\n    > var desc = propertyDescriptorIn( obj, 'a' )\n    {...}\n\n    See Also\n    --------\n    hasProp, defineProperty, propertyDescriptor, propertyDescriptorsIn\n","propertyDescriptors":"\npropertyDescriptors( value )\n    Returns an object's own property descriptors.\n\n    If provided `null` or `undefined`, the function returns an empty object.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    desc: Object\n        Property descriptors.\n\n    Examples\n    --------\n    > var obj = { 'a': 'b' };\n    > var desc = propertyDescriptors( obj )\n    { 'a': {...} }\n\n    See Also\n    --------\n    defineProperty, defineProperties, propertyDescriptor, propertyDescriptorsIn, propertyNames, propertySymbols\n","propertyDescriptorsIn":"\npropertyDescriptorsIn( value )\n    Returns an object's own and inherited property descriptors.\n\n    If provided `null` or `undefined`, the function returns an empty object.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    desc: Object\n        An object's own and inherited property descriptors.\n\n    Examples\n    --------\n    > function Foo() { this.beep = 'boop'; return this; };\n    > Foo.prototype.foo = 'bar';\n    > var obj = new Foo();\n    > var desc = propertyDescriptorsIn( obj )\n    { 'beep': {...}, 'foo': {...}, ... }\n\n    See Also\n    --------\n    defineProperties, propertyDescriptorIn, propertyDescriptors, propertyNamesIn, propertySymbolsIn\n","propertyNames":"\npropertyNames( value )\n    Returns an array of an object's own enumerable and non-enumerable property\n    names.\n\n    Name order is not guaranteed, as object key enumeration is not specified\n    according to the ECMAScript specification. In practice, however, most\n    engines use insertion order to sort an object's keys, thus allowing for\n    deterministic extraction.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    keys: Array\n        List of an object's own enumerable and non-enumerable property names.\n\n    Examples\n    --------\n    > function Foo() { this.beep = 'boop'; return this; };\n    > Foo.prototype.foo = 'bar';\n    > var obj = new Foo();\n    > var keys = propertyNames( obj )\n    [ 'beep' ]\n\n    See Also\n    --------\n    objectKeys, nonEnumerablePropertyNames, propertyNamesIn, propertySymbols\n","propertyNamesIn":"\npropertyNamesIn( value )\n    Returns an array of an object's own and inherited enumerable and non-\n    enumerable property names.\n\n    Name order is not guaranteed, as object key enumeration is not specified\n    according to the ECMAScript specification. In practice, however, most\n    engines use insertion order to sort an object's keys, thus allowing for\n    deterministic extraction.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    keys: Array\n        List of an object's own and inherited enumerable and non-enumerable\n        property names.\n\n    Examples\n    --------\n    > function Foo() { this.beep = 'boop'; return this; };\n    > Foo.prototype.foo = 'bar';\n    > var obj = new Foo();\n    > var keys = propertyNamesIn( obj )\n    e.g., [ 'beep', 'foo', ... ]\n\n    See Also\n    --------\n    objectKeys, nonEnumerablePropertyNamesIn, propertyNames, propertySymbolsIn\n","propertySymbols":"\npropertySymbols( value )\n    Returns an array of an object's own symbol properties.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    symbols: Array\n        List of an object's own symbol properties.\n\n    Examples\n    --------\n    > var s = propertySymbols( {} )\n\n    See Also\n    --------\n    propertyNames, propertySymbolsIn\n","propertySymbolsIn":"\npropertySymbolsIn( value )\n    Returns an array of an object's own and inherited symbol properties.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    symbols: Array\n        List of an object's own and inherited symbol properties.\n\n    Examples\n    --------\n    > var s = propertySymbolsIn( [] )\n\n    See Also\n    --------\n    propertyNamesIn, propertySymbols\n","Proxy":"\nProxy( target, handlers )\n    Returns a proxy object implementing custom behavior for specified object\n    operations.\n\n    The following \"traps\" are supported:\n\n    - getPrototypeOf( target )\n        Trap for `Object.getPrototypeOf()`. Can be used to intercept the\n        `instanceof` operator. The method must return an object or `null`.\n\n    - setPrototypeOf( target, prototype )\n        Trap for `Object.setPrototypeOf()`. The method must return a boolean\n        indicating if prototype successfully set.\n\n    - isExtensible( target )\n        Trap for `Object.isExtensible()`. The method must return a boolean.\n\n    - preventExtensions( target )\n        Trap for `Object.preventExtensions()`. The method must return a boolean.\n\n    - getOwnPropertyDescriptor( target, property )\n        Trap for `Object.getOwnPropertyDescriptor()`. The method must return an\n        object or `undefined`.\n\n    - defineProperty( target, property, descriptor )\n        Trap for `Object.defineProperty()`. The method must return a boolean\n        indicating whether the operation succeeded.\n\n    - has( target, property )\n        Trap for the `in` operator. The method must return a boolean.\n\n    - get( target, property, receiver )\n        Trap for retrieving property values. The method can return any value.\n\n    - set( target, property, value, receiver )\n        Trap for setting property values. The method should return a boolean\n        indicating whether assignment succeeded.\n\n    - deleteProperty( target, property )\n        Trap for the `delete` operator. The method must return a boolean\n        indicating whether operation succeeded.\n\n    - ownKeys( target )\n        Trap for `Object.keys`, `Object.getOwnPropertyNames()`, and\n        `Object.getOwnPropertySymbols()`. The method must return an enumerable\n        object.\n\n    - apply( target, thisArg, argumentsList )\n        Trap for a function call. The method can return any value.\n\n    - construct( target, argumentsList, newTarget )\n        Trap for the `new` operator. The method must return an object.\n\n    All traps are optional. If a trap is not defined, the default behavior is to\n    forward the operation to the target.\n\n    Parameters\n    ----------\n    target: Object\n        Object which the proxy virtualizes.\n\n    handlers: Object\n        Object whose properties are functions which define the behavior of the\n        proxy when performing operations.\n\n    Returns\n    -------\n    p: Object\n        Proxy object.\n\n    Examples\n    --------\n    > function get( obj, prop ) { return obj[ prop ] * 2.0 };\n    > var h = { 'get': get };\n    > var p = new Proxy( {}, h );\n    > p.a = 3.14;\n    > p.a\n    6.28\n\n\nProxy.revocable( target, handlers )\n    Returns a revocable proxy object.\n\n    Parameters\n    ----------\n    target: Object\n        Object which the proxy virtualizes.\n\n    handlers: Object\n        Object whose properties are functions which define the behavior of the\n        proxy when performing operations.\n\n    Returns\n    -------\n    p: Object\n        Revocable proxy object.\n\n    p.proxy: Object\n        Proxy object.\n\n    p.revoke: Function\n        Invalidates a proxy, rendering a proxy object unusable.\n\n    Examples\n    --------\n    > function get( obj, prop ) { return obj[ prop ] * 2.0 };\n    > var h = { 'get': get };\n    > var p = Proxy.revocable( {}, h );\n    > p.proxy.a = 3.14;\n    > p.proxy.a\n    6.28\n    > p.revoke();\n\n","Proxy.revocable":"\nProxy.revocable( target, handlers )\n    Returns a revocable proxy object.\n\n    Parameters\n    ----------\n    target: Object\n        Object which the proxy virtualizes.\n\n    handlers: Object\n        Object whose properties are functions which define the behavior of the\n        proxy when performing operations.\n\n    Returns\n    -------\n    p: Object\n        Revocable proxy object.\n\n    p.proxy: Object\n        Proxy object.\n\n    p.revoke: Function\n        Invalidates a proxy, rendering a proxy object unusable.\n\n    Examples\n    --------\n    > function get( obj, prop ) { return obj[ prop ] * 2.0 };\n    > var h = { 'get': get };\n    > var p = Proxy.revocable( {}, h );\n    > p.proxy.a = 3.14;\n    > p.proxy.a\n    6.28\n    > p.revoke();\n\n","push":"\npush( collection, ...items )\n    Adds one or more elements to the end of a collection.\n\n    If the input collection is a typed array, the output value does not equal\n    the input reference and the underlying `ArrayBuffer` may *not* be the same\n    as the `ArrayBuffer` belonging to the input view.\n\n    For purposes of generality, always treat the output collection as distinct\n    from the input collection.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        A collection. If the collection is an `Object`, the collection should be\n        array-like.\n\n    items: ...any\n        Items to add.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Updated collection.\n\n    Examples\n    --------\n    // Arrays:\n    > var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > arr = push( arr, 6.0, 7.0 )\n    [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0 ]\n\n    // Typed arrays:\n    > arr = new Float64Array( [ 1.0, 2.0 ] );\n    > arr = push( arr, 3.0, 4.0 )\n    <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]\n\n    // Array-like object:\n    > arr = { 'length': 0 };\n    > arr = push( arr, 1.0, 2.0 )\n    { 'length': 2, '0': 1.0, '1': 2.0 }\n\n    See Also\n    --------\n    pop, shift, unshift\n","quarterOfYear":"\nquarterOfYear( [month] )\n    Returns the quarter of the year.\n\n    By default, the function returns the quarter of the year for the current\n    month in the current year (according to local time). To determine the\n    quarter for a particular month, provide either a month or a `Date`\n    object.\n\n    A `month` may be either a month's integer value, three letter abbreviation,\n    or full name (case insensitive).\n\n    Parameters\n    ----------\n    month: integer|string|Date (optional)\n        Month (or `Date`).\n\n    Returns\n    -------\n    out: integer\n        Quarter of the year.\n\n    Examples\n    --------\n    > var q = quarterOfYear( new Date() )\n    <number>\n    > q = quarterOfYear( 4 )\n    2\n    > q = quarterOfYear( 'June' )\n    2\n\n    // Other ways to supply month:\n    > q = quarterOfYear( 'April' )\n    2\n    > q = quarterOfYear( 'apr' )\n    2\n\n    See Also\n    --------\n    dayOfYear\n","random.iterators.arcsine":"\nrandom.iterators.arcsine( a, b[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from an\n    arcsine distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.arcsine( 0.0, 1.0 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.arcsine\n","random.iterators.bernoulli":"\nrandom.iterators.bernoulli( p[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a\n    Bernoulli distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.bernoulli( 0.3 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.bernoulli\n","random.iterators.beta":"\nrandom.iterators.beta( α, β[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a\n    beta distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    The function throws an error if `α <= 0` or `β <= 0`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.beta( 1.0, 1.0 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.beta\n","random.iterators.betaprime":"\nrandom.iterators.betaprime( α, β[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a\n    beta prime distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    The function throws an error if `α <= 0` or `β <= 0`.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.betaprime( 1.0, 1.0 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.betaprime\n","random.iterators.binomial":"\nrandom.iterators.binomial( n, p[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a\n    binomial distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.binomial( 10, 0.3 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.binomial\n","random.iterators.boxMuller":"\nrandom.iterators.boxMuller( [options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a\n    standard normal distribution using the Box-Muller transform.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.boxMuller();\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.boxMuller\n","random.iterators.cauchy":"\nrandom.iterators.cauchy( x0, Ɣ[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a\n    Cauchy distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    x0: number\n        Location parameter.\n\n    Ɣ: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.seed: any\n        Pseudorandom number generator seed.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.cauchy( 0.0, 1.0 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.cauchy\n","random.iterators.chi":"\nrandom.iterators.chi( k[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a chi\n    distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.chi( 1.5 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.chi\n","random.iterators.chisquare":"\nrandom.iterators.chisquare( k[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a\n    chi-square distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.chisquare( 1.5 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.chisquare\n","random.iterators.cosine":"\nrandom.iterators.cosine( μ, s[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a raised\n    cosine distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.cosine( 0.0, 1.0 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.cosine\n","random.iterators.discreteUniform":"\nrandom.iterators.discreteUniform( a, b[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a\n    discrete uniform distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom integers. If provided, the `state` and `seed`\n        options are ignored. In order to seed the returned iterator, one must\n        seed the provided `prng` (assuming the provided `prng` is seedable). The\n        provided PRNG must have `MIN` and `MAX` properties specifying the\n        minimum and maximum possible pseudorandom integers.\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.discreteUniform( 0, 3 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.discreteUniform\n","random.iterators.erlang":"\nrandom.iterators.erlang( k, λ[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from an Erlang\n    distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    If `k` is not a positive integer or `λ <= 0`, the function throws an error.\n\n    Parameters\n    ----------\n    k: integer\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.erlang( 1, 1.5 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.erlang\n","random.iterators.exponential":"\nrandom.iterators.exponential( λ[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from an\n    exponential distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.exponential( 1.5 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.exponential\n","random.iterators.f":"\nrandom.iterators.f( d1, d2[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from an F\n    distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    The function throws an error if `d1 <= 0` or `d2 <= 0`.\n\n    Parameters\n    ----------\n    d1: number\n        Degrees of freedom.\n\n    d2: number\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.f( 1.0, 1.0 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.f\n","random.iterators.frechet":"\nrandom.iterators.frechet( α, s, m[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a Fréchet\n    distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    The function throws an error if `α <= 0` or `s <= 0`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.frechet( 1.0, 1.0, 0.0 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.frechet\n","random.iterators.gamma":"\nrandom.iterators.gamma( α, β[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a gamma\n    distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    The function throws an error if `α <= 0` or `β <= 0`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.gamma( 1.0, 1.0 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.gamma\n","random.iterators.geometric":"\nrandom.iterators.geometric( p[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a\n    geometric distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.geometric( 0.3 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.geometric\n","random.iterators.gumbel":"\nrandom.iterators.gumbel( μ, β[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a Gumbel\n    distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    β: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.gumbel( 0.0, 1.0 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.gumbel\n","random.iterators.hypergeometric":"\nrandom.iterators.hypergeometric( N, K, n[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a\n    hypergeometric distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    `N`, `K`, and `n` must all be nonnegative integers; otherwise, the function\n    throws an error.\n\n    If `n > N` or `K > N`, the function throws an error.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.hypergeometric( 20, 10, 7 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.hypergeometric\n","random.iterators.improvedZiggurat":"\nrandom.iterators.improvedZiggurat( [options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a\n    standard normal distribution using the Improved Ziggurat algorithm.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.improvedZiggurat();\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.improvedZiggurat\n","random.iterators.invgamma":"\nrandom.iterators.invgamma( α, β[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from an\n    inverse gamma distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    The function throws an error if `α <= 0` or `β <= 0`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.invgamma( 1.0, 1.0 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.invgamma\n","random.iterators.kumaraswamy":"\nrandom.iterators.kumaraswamy( a, b[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a\n    Kumaraswamy's double bounded distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    The function throws an error if `a <= 0` or `b <= 0`.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.kumaraswamy( 1.0, 1.0 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.kumaraswamy\n","random.iterators.laplace":"\nrandom.iterators.laplace( μ, b[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a Laplace\n    (double exponential) distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    b: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.laplace( 0.0, 1.0 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.laplace\n","random.iterators.levy":"\nrandom.iterators.levy( μ, c[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a Lévy\n    distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    c: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.levy( 0.0, 1.0 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.levy\n","random.iterators.logistic":"\nrandom.iterators.logistic( μ, s[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a\n    logistic distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    s: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.logistic( 0.0, 1.0 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.logistic\n","random.iterators.lognormal":"\nrandom.iterators.lognormal( μ, σ[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a\n    lognormal distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.lognormal( 0.0, 1.0 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.lognormal\n","random.iterators.minstd":"\nrandom.iterators.minstd( [options] )\n    Returns an iterator for generating pseudorandom integers on the interval\n    `[1, 2147483646]`.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    This pseudorandom number generator (PRNG) is a linear congruential\n    pseudorandom number generator (LCG) based on Park and Miller.\n\n    The generator has a period of approximately `2.1e9`.\n\n    An LCG is fast and uses little memory. On the other hand, because the\n    generator is a simple LCG, the generator has recognized shortcomings. By\n    today's PRNG standards, the generator's period is relatively short. More\n    importantly, the \"randomness quality\" of the generator's output is lacking.\n    These defects make the generator unsuitable, for example, in Monte Carlo\n    simulations and in cryptographic applications.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.normalized: boolean (optional)\n        Boolean indicating whether to return pseudorandom numbers on the\n        interval `[0,1)`.\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        signed 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing positive signed 32-bit integers.\n\n    options.state: Int32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.seed: Int32Array\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer\n        Length of generator seed.\n\n    iterator.state: Int32Array\n        Generator state.\n\n    iterator.stateLength: integer\n        Length of generator state.\n\n    iterator.byteLength: integer\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.minstd();\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.minstd, random.iterators.minstdShuffle, random.iterators.mt19937, random.iterators.randi, random.iterators.randu\n","random.iterators.minstdShuffle":"\nrandom.iterators.minstdShuffle( [options] )\n    Returns an iterator for generating pseudorandom integers on the interval\n    `[1, 2147483646]`.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    This pseudorandom number generator (PRNG) is a linear congruential\n    pseudorandom number generator (LCG) whose output is shuffled using the Bays-\n    Durham algorithm. The shuffle step considerably strengthens the \"randomness\n    quality\" of a simple LCG's output.\n\n    The generator has a period of approximately `2.1e9`.\n\n    An LCG is fast and uses little memory. On the other hand, because the\n    generator is a simple LCG, the generator has recognized shortcomings. By\n    today's PRNG standards, the generator's period is relatively short. In\n    general, this generator is unsuitable for Monte Carlo simulations and\n    cryptographic applications.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.normalized: boolean (optional)\n        Boolean indicating whether to return pseudorandom numbers on the\n        interval `[0,1)`.\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        signed 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing positive signed 32-bit integers.\n\n    options.state: Int32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.seed: Int32Array\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer\n        Length of generator seed.\n\n    iterator.state: Int32Array\n        Generator state.\n\n    iterator.stateLength: integer\n        Length of generator state.\n\n    iterator.byteLength: integer\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.minstdShuffle();\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.minstdShuffle, random.iterators.minstd, random.iterators.mt19937, random.iterators.randi, random.iterators.randu\n","random.iterators.mt19937":"\nrandom.iterators.mt19937( [options] )\n    Returns an iterator for generating pseudorandom integers on the interval\n    `[1, 4294967295]`.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    This pseudorandom number generator (PRNG) is a 32-bit Mersenne Twister\n    pseudorandom number generator.\n\n    The PRNG is *not* a cryptographically secure PRNG.\n\n    The PRNG has a period of 2^19937 - 1.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.normalized: boolean (optional)\n        Boolean indicating whether to return pseudorandom numbers on the\n        interval `[0,1)`.\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.seed: Uint32Array\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer\n        Length of generator seed.\n\n    iterator.state: Uint32Array\n        Generator state.\n\n    iterator.stateLength: integer\n        Length of generator state.\n\n    iterator.byteLength: integer\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.mt19937();\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.mt19937, random.iterators.minstd, random.iterators.minstdShuffle, random.iterators.randi, random.iterators.randu\n","random.iterators.negativeBinomial":"\nrandom.iterators.negativeBinomial( r, p[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a\n    negative binomial distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    r: number\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.negativeBinomial( 10, 0.3 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.negativeBinomial\n","random.iterators.normal":"\nrandom.iterators.normal( μ, σ[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a normal\n    distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    σ: number\n        Standard deviation.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.normal( 0.0, 1.0 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.normal\n","random.iterators.pareto1":"\nrandom.iterators.pareto1( α, β[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a Pareto\n    (Type I) distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    The function throws an error if `α <= 0` or `β <= 0`.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.pareto1( 1.0, 1.0 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.pareto1\n","random.iterators.poisson":"\nrandom.iterators.poisson( λ[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a Poisson\n    distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    λ: number\n        Mean.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.poisson( 1.5 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.poisson\n","random.iterators.randi":"\nrandom.iterators.randi( [options] )\n    Create an iterator for generating pseudorandom numbers having integer\n    values.\n\n    The default underlying pseudorandom number generator (PRNG) *may* change in\n    the future. If exact reproducibility is required, either explicitly specify\n    a PRNG via the `name` option or use an underlying PRNG directly.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.name: string (optional)\n        Name of a supported pseudorandom number generator (PRNG), which will\n        serve as the underlying source of pseudorandom numbers. The following\n        PRNGs are supported:\n\n        - mt19937: 32-bit Mersenne Twister.\n        - minstd: linear congruential PRNG based on Park and Miller.\n        - minstd-shuffle: linear congruential PRNG whose output is shuffled.\n\n        Default: `'mt19937'`.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed. Valid seed values vary according to\n        the underlying PRNG.\n\n    options.state: any (optional)\n        Pseudorandom number generator state. Valid state values vary according\n        to the underling PRNG. If provided, the `seed` option is ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: any\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer\n        Length of generator seed.\n\n    iterator.state: any\n        Generator state.\n\n    iterator.stateLength: integer\n        Length of generator state.\n\n    iterator.byteLength: integer\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.randi();\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.randi, random.iterators.randu\n","random.iterators.randn":"\nrandom.iterators.randn( [options] )\n    Create an iterator for generating pseudorandom numbers drawn from a standard\n    normal distribution.\n\n    The default underlying pseudorandom number generator (PRNG) *may* change in\n    the future. If exact reproducibility is required, either explicitly specify\n    a PRNG via the `name` option or use an underlying PRNG directly.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.name: string (optional)\n        Name of a supported pseudorandom number generator (PRNG), which will\n        serve as the underlying source of pseudorandom numbers. The following\n        PRNGs are supported:\n\n        - improved-ziggurat: improved ziggurat method.\n        - box-muller: Box-Muller transform.\n\n        Default: `'improved-ziggurat'`.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.randn();\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.randn\n","random.iterators.randu":"\nrandom.iterators.randu( [options] )\n    Create an iterator for generating uniformly distributed pseudorandom numbers\n    between 0 and 1.\n\n    The default underlying pseudorandom number generator (PRNG) *may* change in\n    the future. If exact reproducibility is required, either explicitly specify\n    a PRNG via the `name` option or use an underlying PRNG directly.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.name: string (optional)\n        Name of a supported pseudorandom number generator (PRNG), which will\n        serve as the underlying source of pseudorandom numbers. The following\n        PRNGs are supported:\n\n        - mt19937: 32-bit Mersenne Twister.\n        - minstd: linear congruential PRNG based on Park and Miller.\n        - minstd-shuffle: linear congruential PRNG whose output is shuffled.\n\n        Default: `'mt19937'`.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed. Valid seed values vary according to\n        the underlying PRNG.\n\n    options.state: any (optional)\n        Pseudorandom number generator state. Valid state values vary according\n        to the underling PRNG. If provided, the `seed` option is ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: any\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer\n        Length of generator seed.\n\n    iterator.state: any\n        Generator state.\n\n    iterator.stateLength: integer\n        Length of generator state.\n\n    iterator.byteLength: integer\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.randu();\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.randu, random.iterators.randi\n","random.iterators.rayleigh":"\nrandom.iterators.rayleigh( σ[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a\n    Rayleigh distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    σ: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.rayleigh( 1.5 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.rayleigh\n","random.iterators.t":"\nrandom.iterators.t( v[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a\n    Student's t distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.t( 1.5 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.t\n","random.iterators.triangular":"\nrandom.iterators.triangular( a, b, c[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a\n    triangular distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.triangular( 0.0, 1.0, 0.3 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.triangular\n","random.iterators.uniform":"\nrandom.iterators.uniform( a, b[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a\n    continuous uniform distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.uniform( 0.0, 1.0 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.uniform\n","random.iterators.weibull":"\nrandom.iterators.weibull( k, λ[, options] )\n    Returns an iterator for generating pseudorandom numbers drawn from a\n    Weibull distribution.\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    The function throws an error if `k <= 0` or `λ <= 0`.\n\n    Parameters\n    ----------\n    k: number\n        Scale parameter.\n\n    λ: number\n        Shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    iterator.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    iterator.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    iterator.seedLength: integer|null\n        Length of generator seed.\n\n    iterator.state: Uint32Array|null\n        Generator state.\n\n    iterator.stateLength: integer|null\n        Length of generator state.\n\n    iterator.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var it = random.iterators.weibull( 1.0, 1.0 );\n    > var r = it.next().value\n    <number>\n    > r = it.next().value\n    <number>\n\n    See Also\n    --------\n    base.random.weibull\n","random.streams.arcsine":"\nrandom.streams.arcsine( a, b[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from an\n    arcsine distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.arcsine( 2.0, 5.0, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.arcsine.factory( [a, b, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from an arcsine distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    a: number (optional)\n        Minimum support.\n\n    b: number (optional)\n        Maximum support.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.arcsine.factory( opts );\n\n\nrandom.streams.arcsine.objectMode( a, b[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from an arcsine distribution.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.arcsine.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.arcsine, random.iterators.arcsine\n","random.streams.arcsine.factory":"\nrandom.streams.arcsine.factory( [a, b, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from an arcsine distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    a: number (optional)\n        Minimum support.\n\n    b: number (optional)\n        Maximum support.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.arcsine.factory( opts );\n\n","random.streams.arcsine.objectMode":"\nrandom.streams.arcsine.objectMode( a, b[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from an arcsine distribution.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.arcsine.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.arcsine, random.iterators.arcsine\n","random.streams.bernoulli":"\nrandom.streams.bernoulli( p[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    Bernoulli distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.bernoulli( 0.5, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.bernoulli.factory( [p, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a Bernoulli distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    p: number (optional)\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.bernoulli.factory( opts );\n\n\nrandom.streams.bernoulli.objectMode( p[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a Bernoulli distribution.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.bernoulli.objectMode( 0.3, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.bernoulli, random.iterators.bernoulli\n","random.streams.bernoulli.factory":"\nrandom.streams.bernoulli.factory( [p, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a Bernoulli distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    p: number (optional)\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.bernoulli.factory( opts );\n\n","random.streams.bernoulli.objectMode":"\nrandom.streams.bernoulli.objectMode( p[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a Bernoulli distribution.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.bernoulli.objectMode( 0.3, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.bernoulli, random.iterators.bernoulli\n","random.streams.beta":"\nrandom.streams.beta( α, β[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    beta distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.beta( 2.0, 5.0, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.beta.factory( [α, β, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a beta distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        First shape parameter.\n\n    β: number (optional)\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.beta.factory( opts );\n\n\nrandom.streams.beta.objectMode( α, β[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a beta distribution.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.beta.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.beta, random.iterators.beta\n","random.streams.beta.factory":"\nrandom.streams.beta.factory( [α, β, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a beta distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        First shape parameter.\n\n    β: number (optional)\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.beta.factory( opts );\n\n","random.streams.beta.objectMode":"\nrandom.streams.beta.objectMode( α, β[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a beta distribution.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.beta.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.beta, random.iterators.beta\n","random.streams.betaprime":"\nrandom.streams.betaprime( α, β[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    beta prime distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.betaprime( 2.0, 5.0, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.betaprime.factory( [α, β, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a beta prime distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        First shape parameter.\n\n    β: number (optional)\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.betaprime.factory( opts );\n\n\nrandom.streams.betaprime.objectMode( α, β[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a beta prime distribution.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.betaprime.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.betaprime, random.iterators.betaprime\n","random.streams.betaprime.factory":"\nrandom.streams.betaprime.factory( [α, β, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a beta prime distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        First shape parameter.\n\n    β: number (optional)\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.betaprime.factory( opts );\n\n","random.streams.betaprime.objectMode":"\nrandom.streams.betaprime.objectMode( α, β[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a beta prime distribution.\n\n    Parameters\n    ----------\n    α: number\n        First shape parameter.\n\n    β: number\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.betaprime.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.betaprime, random.iterators.betaprime\n","random.streams.binomial":"\nrandom.streams.binomial( n, p[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    binomial distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.binomial( 20, 0.5, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.binomial.factory( [n, p, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a binomial distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    n: integer (optional)\n        Number of trials.\n\n    p: number (optional)\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.binomial.factory( opts );\n\n\nrandom.streams.binomial.objectMode( n, p[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a binomial distribution.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.binomial.objectMode( 20, 0.5, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.binomial, random.iterators.binomial\n","random.streams.binomial.factory":"\nrandom.streams.binomial.factory( [n, p, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a binomial distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    n: integer (optional)\n        Number of trials.\n\n    p: number (optional)\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.binomial.factory( opts );\n\n","random.streams.binomial.objectMode":"\nrandom.streams.binomial.objectMode( n, p[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a binomial distribution.\n\n    Parameters\n    ----------\n    n: integer\n        Number of trials.\n\n    p: number\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.binomial.objectMode( 20, 0.5, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.binomial, random.iterators.binomial\n","random.streams.boxMuller":"\nrandom.streams.boxMuller( [options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    standard normal distribution using the Box-Muller transform.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.boxMuller( opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.boxMuller.factory( [options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a standard normal distribution using the Box-Muller\n    transform.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.boxMuller.factory( opts );\n\n\nrandom.streams.boxMuller.objectMode( [options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a standard normal distribution using the Box-Muller transform.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.boxMuller.objectMode( opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.boxMuller, random.iterators.boxMuller, random.streams.improvedZiggurat, random.streams.randn\n","random.streams.boxMuller.factory":"\nrandom.streams.boxMuller.factory( [options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a standard normal distribution using the Box-Muller\n    transform.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.boxMuller.factory( opts );\n\n","random.streams.boxMuller.objectMode":"\nrandom.streams.boxMuller.objectMode( [options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a standard normal distribution using the Box-Muller transform.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.boxMuller.objectMode( opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.boxMuller, random.iterators.boxMuller, random.streams.improvedZiggurat, random.streams.randn\n","random.streams.cauchy":"\nrandom.streams.cauchy( x0, γ[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    Cauchy distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    x0: number\n        Location parameter.\n\n    γ: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.cauchy( 2.0, 5.0, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.cauchy.factory( [x0, γ, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a Cauchy distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    x0: number (optional)\n        Location parameter.\n\n    γ: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.cauchy.factory( opts );\n\n\nrandom.streams.cauchy.objectMode( x0, γ[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a Cauchy distribution.\n\n    Parameters\n    ----------\n    x0: number\n        Location parameter.\n\n    γ: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.cauchy.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.cauchy, random.iterators.cauchy\n","random.streams.cauchy.factory":"\nrandom.streams.cauchy.factory( [x0, γ, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a Cauchy distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    x0: number (optional)\n        Location parameter.\n\n    γ: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.cauchy.factory( opts );\n\n","random.streams.cauchy.objectMode":"\nrandom.streams.cauchy.objectMode( x0, γ[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a Cauchy distribution.\n\n    Parameters\n    ----------\n    x0: number\n        Location parameter.\n\n    γ: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.cauchy.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.cauchy, random.iterators.cauchy\n","random.streams.chi":"\nrandom.streams.chi( k[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    chi distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.chi( 3.0, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.chi.factory( [k, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a chi distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    k: number (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.chi.factory( opts );\n\n\nrandom.streams.chi.objectMode( k[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a chi distribution.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.chi.objectMode( 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.chi, random.iterators.chi\n","random.streams.chi.factory":"\nrandom.streams.chi.factory( [k, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a chi distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    k: number (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.chi.factory( opts );\n\n","random.streams.chi.objectMode":"\nrandom.streams.chi.objectMode( k[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a chi distribution.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.chi.objectMode( 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.chi, random.iterators.chi\n","random.streams.chisquare":"\nrandom.streams.chisquare( k[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    chi-square distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.chisquare( 3.0, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.chisquare.factory( [k, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a chi-square distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    k: number (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.chisquare.factory( opts );\n\n\nrandom.streams.chisquare.objectMode( k[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a chi-square distribution.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.chisquare.objectMode( 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.chisquare, random.iterators.chisquare\n","random.streams.chisquare.factory":"\nrandom.streams.chisquare.factory( [k, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a chi-square distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    k: number (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.chisquare.factory( opts );\n\n","random.streams.chisquare.objectMode":"\nrandom.streams.chisquare.objectMode( k[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a chi-square distribution.\n\n    Parameters\n    ----------\n    k: number\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.chisquare.objectMode( 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.chisquare, random.iterators.chisquare\n","random.streams.cosine":"\nrandom.streams.cosine( μ, s[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    raised cosine distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.cosine( 2.0, 5.0, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.cosine.factory( [μ, s, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a raised cosine distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Location parameter.\n\n    s: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.cosine.factory( opts );\n\n\nrandom.streams.cosine.objectMode( μ, s[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a raised cosine distribution.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.cosine.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.cosine, random.iterators.cosine\n","random.streams.cosine.factory":"\nrandom.streams.cosine.factory( [μ, s, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a raised cosine distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Location parameter.\n\n    s: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.cosine.factory( opts );\n\n","random.streams.cosine.objectMode":"\nrandom.streams.cosine.objectMode( μ, s[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a raised cosine distribution.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    s: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.cosine.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.cosine, random.iterators.cosine\n","random.streams.discreteUniform":"\nrandom.streams.discreteUniform( a, b[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    discrete uniform distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.discreteUniform( 2, 5, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.discreteUniform.factory( [a, b, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a discrete uniform distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    a: integer (optional)\n        Minimum support.\n\n    b: integer (optional)\n        Maximum support.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.discreteUniform.factory( opts );\n\n\nrandom.streams.discreteUniform.objectMode( a, b[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a discrete uniform distribution.\n\n    Parameters\n    ----------\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.discreteUniform.objectMode( 2, 5, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.discreteUniform, random.iterators.discreteUniform\n","random.streams.discreteUniform.factory":"\nrandom.streams.discreteUniform.factory( [a, b, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a discrete uniform distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    a: integer (optional)\n        Minimum support.\n\n    b: integer (optional)\n        Maximum support.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.discreteUniform.factory( opts );\n\n","random.streams.discreteUniform.objectMode":"\nrandom.streams.discreteUniform.objectMode( a, b[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a discrete uniform distribution.\n\n    Parameters\n    ----------\n    a: integer\n        Minimum support.\n\n    b: integer\n        Maximum support.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.discreteUniform.objectMode( 2, 5, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.discreteUniform, random.iterators.discreteUniform\n","random.streams.erlang":"\nrandom.streams.erlang( k, λ[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from an\n    Erlang distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    k: integer\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.erlang( 2, 5.0, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.erlang.factory( [k, λ, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from an Erlang distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    k: number (optional)\n        Shape parameter.\n\n    λ: number (optional)\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.erlang.factory( opts );\n\n\nrandom.streams.erlang.objectMode( k, λ[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from an Erlang distribution.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.erlang.objectMode( 2, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.erlang, random.iterators.erlang\n","random.streams.erlang.factory":"\nrandom.streams.erlang.factory( [k, λ, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from an Erlang distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    k: number (optional)\n        Shape parameter.\n\n    λ: number (optional)\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.erlang.factory( opts );\n\n","random.streams.erlang.objectMode":"\nrandom.streams.erlang.objectMode( k, λ[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from an Erlang distribution.\n\n    Parameters\n    ----------\n    k: number\n        Shape parameter.\n\n    λ: number\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.erlang.objectMode( 2, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.erlang, random.iterators.erlang\n","random.streams.exponential":"\nrandom.streams.exponential( λ[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from an\n    exponential distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.exponential( 3.0, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.exponential.factory( [λ, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from an exponential distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    λ: number (optional)\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.exponential.factory( opts );\n\n\nrandom.streams.exponential.objectMode( λ[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from an exponential distribution.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.exponential.objectMode( 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.exponential, random.iterators.exponential\n","random.streams.exponential.factory":"\nrandom.streams.exponential.factory( [λ, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from an exponential distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    λ: number (optional)\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.exponential.factory( opts );\n\n","random.streams.exponential.objectMode":"\nrandom.streams.exponential.objectMode( λ[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from an exponential distribution.\n\n    Parameters\n    ----------\n    λ: number\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.exponential.objectMode( 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.exponential, random.iterators.exponential\n","random.streams.f":"\nrandom.streams.f( d1, d2[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from an\n    F distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    d1: number\n        Degrees of freedom.\n\n    d2: number\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.f( 2.0, 5.0, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.f.factory( [d1, d2, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from an F distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    d1: number (optional)\n        Degrees of freedom.\n\n    d2: number (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.f.factory( opts );\n\n\nrandom.streams.f.objectMode( d1, d2[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from an F distribution.\n\n    Parameters\n    ----------\n    d1: number\n        Degrees of freedom.\n\n    d2: number\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.f.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.f, random.iterators.f\n","random.streams.f.factory":"\nrandom.streams.f.factory( [d1, d2, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from an F distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    d1: number (optional)\n        Degrees of freedom.\n\n    d2: number (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.f.factory( opts );\n\n","random.streams.f.objectMode":"\nrandom.streams.f.objectMode( d1, d2[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from an F distribution.\n\n    Parameters\n    ----------\n    d1: number\n        Degrees of freedom.\n\n    d2: number\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.f.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.f, random.iterators.f\n","random.streams.frechet":"\nrandom.streams.frechet( α, s, m[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    Fréchet distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.frechet( 2.0, 5.0, 3.0, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.frechet.factory( [α, s, m,][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a Fréchet distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter.\n\n    s: number (optional)\n        Scale parameter.\n\n    m: number (optional)\n        Location parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.frechet.factory( opts );\n\n\nrandom.streams.frechet.objectMode( α, s, m[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a Fréchet distribution.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.frechet.objectMode( 2.0, 5.0, 3.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.frechet, random.iterators.frechet\n","random.streams.frechet.factory":"\nrandom.streams.frechet.factory( [α, s, m,][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a Fréchet distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter.\n\n    s: number (optional)\n        Scale parameter.\n\n    m: number (optional)\n        Location parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.frechet.factory( opts );\n\n","random.streams.frechet.objectMode":"\nrandom.streams.frechet.objectMode( α, s, m[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a Fréchet distribution.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    s: number\n        Scale parameter.\n\n    m: number\n        Location parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.frechet.objectMode( 2.0, 5.0, 3.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.frechet, random.iterators.frechet\n","random.streams.gamma":"\nrandom.streams.gamma( α, β[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    gamma distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.gamma( 2.0, 5.0, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.gamma.factory( [α, β, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a gamma distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter.\n\n    β: number (optional)\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.gamma.factory( opts );\n\n\nrandom.streams.gamma.objectMode( α, β[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a gamma distribution.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.gamma.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.gamma, random.iterators.gamma\n","random.streams.gamma.factory":"\nrandom.streams.gamma.factory( [α, β, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a gamma distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter.\n\n    β: number (optional)\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.gamma.factory( opts );\n\n","random.streams.gamma.objectMode":"\nrandom.streams.gamma.objectMode( α, β[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a gamma distribution.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Rate parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.gamma.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.gamma, random.iterators.gamma\n","random.streams.geometric":"\nrandom.streams.geometric( p[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    geometric distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.geometric( 0.5, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.geometric.factory( [p, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a geometric distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    p: number (optional)\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.geometric.factory( opts );\n\n\nrandom.streams.geometric.objectMode( p[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a geometric distribution.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.geometric.objectMode( 0.3, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.geometric, random.iterators.geometric\n","random.streams.geometric.factory":"\nrandom.streams.geometric.factory( [p, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a geometric distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    p: number (optional)\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.geometric.factory( opts );\n\n","random.streams.geometric.objectMode":"\nrandom.streams.geometric.objectMode( p[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a geometric distribution.\n\n    Parameters\n    ----------\n    p: number\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.geometric.objectMode( 0.3, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.geometric, random.iterators.geometric\n","random.streams.gumbel":"\nrandom.streams.gumbel( μ, β[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    Gumbel distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    β: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.gumbel( 2.0, 5.0, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.gumbel.factory( [μ, β, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a Gumbel distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    β: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.gumbel.factory( opts );\n\n\nrandom.streams.gumbel.objectMode( μ, β[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a Gumbel distribution.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    β: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.gumbel.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.gumbel, random.iterators.gumbel\n","random.streams.gumbel.factory":"\nrandom.streams.gumbel.factory( [μ, β, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a Gumbel distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    β: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.gumbel.factory( opts );\n\n","random.streams.gumbel.objectMode":"\nrandom.streams.gumbel.objectMode( μ, β[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a Gumbel distribution.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    β: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.gumbel.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.gumbel, random.iterators.gumbel\n","random.streams.hypergeometric":"\nrandom.streams.hypergeometric( N, K, n[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    hypergeometric distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.hypergeometric( 5, 3, 2, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.hypergeometric.factory( [N, K, n,][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a hypergeometric distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    N: integer (optional)\n        Population size.\n\n    K: integer (optional)\n        Subpopulation size.\n\n    n: integer (optional)\n        Number of draws.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.hypergeometric.factory( opts );\n\n\nrandom.streams.hypergeometric.objectMode( N, K, n[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a hypergeometric distribution.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.hypergeometric.objectMode( 5, 3, 2, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.hypergeometric, random.iterators.hypergeometric\n","random.streams.hypergeometric.factory":"\nrandom.streams.hypergeometric.factory( [N, K, n,][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a hypergeometric distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    N: integer (optional)\n        Population size.\n\n    K: integer (optional)\n        Subpopulation size.\n\n    n: integer (optional)\n        Number of draws.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.hypergeometric.factory( opts );\n\n","random.streams.hypergeometric.objectMode":"\nrandom.streams.hypergeometric.objectMode( N, K, n[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a hypergeometric distribution.\n\n    Parameters\n    ----------\n    N: integer\n        Population size.\n\n    K: integer\n        Subpopulation size.\n\n    n: integer\n        Number of draws.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.hypergeometric.objectMode( 5, 3, 2, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.hypergeometric, random.iterators.hypergeometric\n","random.streams.improvedZiggurat":"\nrandom.streams.improvedZiggurat( [options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    standard normal distribution using the Improved Ziggurat algorithm.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.improvedZiggurat( opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.improvedZiggurat.factory( [options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a standard normal distribution using the Improved\n    Ziggurat algorithm.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.improvedZiggurat.factory( opts );\n\n\nrandom.streams.improvedZiggurat.objectMode( [options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a standard normal distribution using the Improved Ziggurat\n    algorithm.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.improvedZiggurat.objectMode( opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.improvedZiggurat, random.iterators.improvedZiggurat, random.streams.boxMuller, random.streams.randn\n","random.streams.improvedZiggurat.factory":"\nrandom.streams.improvedZiggurat.factory( [options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a standard normal distribution using the Improved\n    Ziggurat algorithm.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.improvedZiggurat.factory( opts );\n\n","random.streams.improvedZiggurat.objectMode":"\nrandom.streams.improvedZiggurat.objectMode( [options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a standard normal distribution using the Improved Ziggurat\n    algorithm.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.improvedZiggurat.objectMode( opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.improvedZiggurat, random.iterators.improvedZiggurat, random.streams.boxMuller, random.streams.randn\n","random.streams.invgamma":"\nrandom.streams.invgamma( α, β[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from an\n    inverse gamma distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.invgamma( 2.0, 5.0, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.invgamma.factory( [α, β, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from an inverse gamma distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter.\n\n    β: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.invgamma.factory( opts );\n\n\nrandom.streams.invgamma.objectMode( α, β[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from an inverse gamma distribution.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.invgamma.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.invgamma, random.iterators.invgamma\n","random.streams.invgamma.factory":"\nrandom.streams.invgamma.factory( [α, β, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from an inverse gamma distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter.\n\n    β: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.invgamma.factory( opts );\n\n","random.streams.invgamma.objectMode":"\nrandom.streams.invgamma.objectMode( α, β[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from an inverse gamma distribution.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.invgamma.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.invgamma, random.iterators.invgamma\n","random.streams.kumaraswamy":"\nrandom.streams.kumaraswamy( a, b[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    Kumaraswamy's double bounded distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.kumaraswamy( 2.0, 5.0, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.kumaraswamy.factory( [a, b, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a Kumaraswamy's double bounded distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    a: number (optional)\n        First shape parameter.\n\n    b: number (optional)\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.kumaraswamy.factory( opts );\n\n\nrandom.streams.kumaraswamy.objectMode( a, b[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a Kumaraswamy's double bounded distribution.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.kumaraswamy.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.kumaraswamy, random.iterators.kumaraswamy\n","random.streams.kumaraswamy.factory":"\nrandom.streams.kumaraswamy.factory( [a, b, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a Kumaraswamy's double bounded distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    a: number (optional)\n        First shape parameter.\n\n    b: number (optional)\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.kumaraswamy.factory( opts );\n\n","random.streams.kumaraswamy.objectMode":"\nrandom.streams.kumaraswamy.objectMode( a, b[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a Kumaraswamy's double bounded distribution.\n\n    Parameters\n    ----------\n    a: number\n        First shape parameter.\n\n    b: number\n        Second shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.kumaraswamy.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.kumaraswamy, random.iterators.kumaraswamy\n","random.streams.laplace":"\nrandom.streams.laplace( μ, b[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    Laplace (double exponential) distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    b: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.laplace( 2.0, 5.0, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.laplace.factory( [μ, b, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a Laplace (double exponential) distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    b: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.laplace.factory( opts );\n\n\nrandom.streams.laplace.objectMode( μ, b[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a Laplace (double exponential) distribution.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    b: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.laplace.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.laplace, random.iterators.laplace\n","random.streams.laplace.factory":"\nrandom.streams.laplace.factory( [μ, b, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a Laplace (double exponential) distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    b: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.laplace.factory( opts );\n\n","random.streams.laplace.objectMode":"\nrandom.streams.laplace.objectMode( μ, b[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a Laplace (double exponential) distribution.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    b: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.laplace.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.laplace, random.iterators.laplace\n","random.streams.levy":"\nrandom.streams.levy( μ, c[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    Lévy distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    c: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.levy( 2.0, 5.0, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.levy.factory( [μ, c, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a Lévy distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    c: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.levy.factory( opts );\n\n\nrandom.streams.levy.objectMode( μ, c[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a Lévy distribution.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    c: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.levy.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.levy, random.iterators.levy\n","random.streams.levy.factory":"\nrandom.streams.levy.factory( [μ, c, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a Lévy distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    c: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.levy.factory( opts );\n\n","random.streams.levy.objectMode":"\nrandom.streams.levy.objectMode( μ, c[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a Lévy distribution.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    c: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.levy.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.levy, random.iterators.levy\n","random.streams.logistic":"\nrandom.streams.logistic( μ, s[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    logistic distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    s: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.logistic( 2.0, 5.0, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.logistic.factory( [μ, s, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a logistic distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    s: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.logistic.factory( opts );\n\n\nrandom.streams.logistic.objectMode( μ, s[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a logistic distribution.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    s: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.logistic.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.logistic, random.iterators.logistic\n","random.streams.logistic.factory":"\nrandom.streams.logistic.factory( [μ, s, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a logistic distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    s: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.logistic.factory( opts );\n\n","random.streams.logistic.objectMode":"\nrandom.streams.logistic.objectMode( μ, s[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a logistic distribution.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    s: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.logistic.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.logistic, random.iterators.logistic\n","random.streams.lognormal":"\nrandom.streams.lognormal( μ, σ[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    lognormal distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.lognormal( 2.0, 5.0, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.lognormal.factory( [μ, σ, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a lognormal distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Location parameter.\n\n    σ: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.lognormal.factory( opts );\n\n\nrandom.streams.lognormal.objectMode( μ, σ[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a lognormal distribution.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.lognormal.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.lognormal, random.iterators.lognormal\n","random.streams.lognormal.factory":"\nrandom.streams.lognormal.factory( [μ, σ, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a lognormal distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Location parameter.\n\n    σ: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.lognormal.factory( opts );\n\n","random.streams.lognormal.objectMode":"\nrandom.streams.lognormal.objectMode( μ, σ[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a lognormal distribution.\n\n    Parameters\n    ----------\n    μ: number\n        Location parameter.\n\n    σ: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.lognormal.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.lognormal, random.iterators.lognormal\n","random.streams.minstd":"\nrandom.streams.minstd( [options] )\n    Returns a readable stream for generating pseudorandom numbers on the\n    interval `[1, 2147483646]`.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    The underlying pseudorandom number generator (PRNG) is a linear congruential\n    pseudorandom number generator (LCG) based on Park and Miller.\n\n    The generator has a period of approximately `2.1e9`.\n\n    An LCG is fast and uses little memory. On the other hand, because the\n    generator is a simple LCG, the generator has recognized shortcomings. By\n    today's PRNG standards, the generator's period is relatively short. More\n    importantly, the \"randomness quality\" of the generator's output is lacking.\n    These defects make the generator unsuitable, for example, in Monte Carlo\n    simulations and in cryptographic applications.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.normalized: boolean (optional)\n        Boolean indicating whether to return pseudorandom numbers on the\n        interval `[0,1)`.\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        signed 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing signed 32-bit integers.\n\n    options.state: Int32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.seed: Int32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Int32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.minstd( opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.minstd.factory( [options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers on the interval `[1, 2147483646]`.\n\n    Parameters\n    ----------\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.normalized: boolean (optional)\n        Boolean indicating whether to return pseudorandom numbers on the\n        interval `[0,1)`.\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        signed 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing signed 32-bit integers.\n\n    options.state: Int32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.minstd.factory( opts );\n\n\nrandom.streams.minstd.objectMode( [options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    on the interval `[1, 2147483646]`.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.normalized: boolean (optional)\n        Boolean indicating whether to return pseudorandom numbers on the\n        interval `[0,1)`.\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        signed 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing signed 32-bit integers.\n\n    options.state: Int32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.seed: Int32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Int32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.minstd.objectMode( opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.minstd, random.iterators.minstd, random.streams.minstdShuffle, random.streams.mt19937, random.streams.randi, random.streams.randu\n","random.streams.minstd.factory":"\nrandom.streams.minstd.factory( [options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers on the interval `[1, 2147483646]`.\n\n    Parameters\n    ----------\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.normalized: boolean (optional)\n        Boolean indicating whether to return pseudorandom numbers on the\n        interval `[0,1)`.\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        signed 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing signed 32-bit integers.\n\n    options.state: Int32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.minstd.factory( opts );\n\n","random.streams.minstd.objectMode":"\nrandom.streams.minstd.objectMode( [options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    on the interval `[1, 2147483646]`.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.normalized: boolean (optional)\n        Boolean indicating whether to return pseudorandom numbers on the\n        interval `[0,1)`.\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        signed 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing signed 32-bit integers.\n\n    options.state: Int32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.seed: Int32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Int32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.minstd.objectMode( opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.minstd, random.iterators.minstd, random.streams.minstdShuffle, random.streams.mt19937, random.streams.randi, random.streams.randu\n","random.streams.minstdShuffle":"\nrandom.streams.minstdShuffle( [options] )\n    Returns a readable stream for generating pseudorandom numbers on the\n    interval `[1, 2147483646]`.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    The underlying pseudorandom number generator (PRNG) is a linear congruential\n    pseudorandom number generator (LCG) whose output is shuffled using the Bays-\n    Durham algorithm. The shuffle step considerably strengthens the \"randomness\n    quality\" of a simple LCG's output.\n\n    The generator has a period of approximately `2.1e9`.\n\n    An LCG is fast and uses little memory. On the other hand, because the\n    generator is a simple LCG, the generator has recognized shortcomings. By\n    today's PRNG standards, the generator's period is relatively short. In\n    general, this generator is unsuitable for Monte Carlo simulations and\n    cryptographic applications.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.normalized: boolean (optional)\n        Boolean indicating whether to return pseudorandom numbers on the\n        interval `[0,1)`.\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        signed 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing signed 32-bit integers.\n\n    options.state: Int32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.seed: Int32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Int32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.minstdShuffle( opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.minstdShuffle.factory( [options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers on the interval `[1, 2147483646]`.\n\n    Parameters\n    ----------\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.normalized: boolean (optional)\n        Boolean indicating whether to return pseudorandom numbers on the\n        interval `[0,1)`.\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        signed 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing signed 32-bit integers.\n\n    options.state: Int32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.minstdShuffle.factory( opts );\n\n\nrandom.streams.minstdShuffle.objectMode( [options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    on the interval `[1, 2147483646]`.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.normalized: boolean (optional)\n        Boolean indicating whether to return pseudorandom numbers on the\n        interval `[0,1)`.\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        signed 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing signed 32-bit integers.\n\n    options.state: Int32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.seed: Int32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Int32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.minstdShuffle.objectMode( opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.minstdShuffle, random.iterators.minstdShuffle, random.streams.minstd, random.streams.mt19937, random.streams.randi, random.streams.randu\n","random.streams.minstdShuffle.factory":"\nrandom.streams.minstdShuffle.factory( [options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers on the interval `[1, 2147483646]`.\n\n    Parameters\n    ----------\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.normalized: boolean (optional)\n        Boolean indicating whether to return pseudorandom numbers on the\n        interval `[0,1)`.\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        signed 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing signed 32-bit integers.\n\n    options.state: Int32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.minstdShuffle.factory( opts );\n\n","random.streams.minstdShuffle.objectMode":"\nrandom.streams.minstdShuffle.objectMode( [options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    on the interval `[1, 2147483646]`.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.normalized: boolean (optional)\n        Boolean indicating whether to return pseudorandom numbers on the\n        interval `[0,1)`.\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        signed 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing signed 32-bit integers.\n\n    options.state: Int32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.seed: Int32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Int32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.minstdShuffle.objectMode( opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.minstdShuffle, random.iterators.minstdShuffle, random.streams.minstd, random.streams.mt19937, random.streams.randi, random.streams.randu\n","random.streams.mt19937":"\nrandom.streams.mt19937( [options] )\n    Returns a readable stream for generating pseudorandom numbers on the\n    interval `[1, 4294967295]`.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    The underlying pseudorandom number generator (PRNG) is a 32-bit Mersenne\n    Twister pseudorandom number generator.\n\n    The PRNG is *not* a cryptographically secure PRNG.\n\n    The PRNG has a period of 2^19937 - 1.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.normalized: boolean (optional)\n        Boolean indicating whether to return pseudorandom numbers on the\n        interval `[0,1)`.\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.mt19937( opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.mt19937.factory( [options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers on the interval `[1, 4294967295]`.\n\n    Parameters\n    ----------\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.normalized: boolean (optional)\n        Boolean indicating whether to return pseudorandom numbers on the\n        interval `[0,1)`.\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.mt19937.factory( opts );\n\n\nrandom.streams.mt19937.objectMode( [options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    on the interval `[1, 4294967295]`.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.normalized: boolean (optional)\n        Boolean indicating whether to return pseudorandom numbers on the\n        interval `[0,1)`.\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.mt19937.objectMode( opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.mt19937, random.iterators.mt19937, random.streams.minstd, random.streams.minstdShuffle, random.streams.randi, random.streams.randu\n","random.streams.mt19937.factory":"\nrandom.streams.mt19937.factory( [options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers on the interval `[1, 4294967295]`.\n\n    Parameters\n    ----------\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.normalized: boolean (optional)\n        Boolean indicating whether to return pseudorandom numbers on the\n        interval `[0,1)`.\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.mt19937.factory( opts );\n\n","random.streams.mt19937.objectMode":"\nrandom.streams.mt19937.objectMode( [options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    on the interval `[1, 4294967295]`.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.normalized: boolean (optional)\n        Boolean indicating whether to return pseudorandom numbers on the\n        interval `[0,1)`.\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.mt19937.objectMode( opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.mt19937, random.iterators.mt19937, random.streams.minstd, random.streams.minstdShuffle, random.streams.randi, random.streams.randu\n","random.streams.negativeBinomial":"\nrandom.streams.negativeBinomial( r, p[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    negative binomial distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    r: number\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.negativeBinomial( 20.0, 0.5, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.negativeBinomial.factory( [r, p, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a negative binomial distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    r: number (optional)\n        Number of successes until experiment is stopped.\n\n    p: number (optional)\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.negativeBinomial.factory( opts );\n\n\nrandom.streams.negativeBinomial.objectMode( r, p[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a negative binomial distribution.\n\n    Parameters\n    ----------\n    r: integer\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.negativeBinomial.objectMode( 20.0, 0.5, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.negativeBinomial, random.iterators.negativeBinomial\n","random.streams.negativeBinomial.factory":"\nrandom.streams.negativeBinomial.factory( [r, p, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a negative binomial distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    r: number (optional)\n        Number of successes until experiment is stopped.\n\n    p: number (optional)\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.negativeBinomial.factory( opts );\n\n","random.streams.negativeBinomial.objectMode":"\nrandom.streams.negativeBinomial.objectMode( r, p[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a negative binomial distribution.\n\n    Parameters\n    ----------\n    r: integer\n        Number of successes until experiment is stopped.\n\n    p: number\n        Success probability.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.negativeBinomial.objectMode( 20.0, 0.5, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.negativeBinomial, random.iterators.negativeBinomial\n","random.streams.normal":"\nrandom.streams.normal( μ, σ[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    normal distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    σ: number\n        Standard deviation.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.normal( 2.0, 5.0, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.normal.factory( [μ, σ, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a normal distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    σ: number (optional)\n        Standard deviation.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.normal.factory( opts );\n\n\nrandom.streams.normal.objectMode( μ, σ[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a normal distribution.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    σ: number\n        Standard deviation.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.normal.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.normal, random.iterators.normal\n","random.streams.normal.factory":"\nrandom.streams.normal.factory( [μ, σ, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a normal distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    μ: number (optional)\n        Mean.\n\n    σ: number (optional)\n        Standard deviation.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.normal.factory( opts );\n\n","random.streams.normal.objectMode":"\nrandom.streams.normal.objectMode( μ, σ[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a normal distribution.\n\n    Parameters\n    ----------\n    μ: number\n        Mean.\n\n    σ: number\n        Standard deviation.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.normal.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.normal, random.iterators.normal\n","random.streams.pareto1":"\nrandom.streams.pareto1( α, β[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    Pareto (Type I) distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.pareto1( 2.0, 5.0, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.pareto1.factory( [α, β, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a Pareto (Type I) distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter.\n\n    β: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.pareto1.factory( opts );\n\n\nrandom.streams.pareto1.objectMode( α, β[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a Pareto (Type I) distribution.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.pareto1.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.pareto1, random.iterators.pareto1\n","random.streams.pareto1.factory":"\nrandom.streams.pareto1.factory( [α, β, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a Pareto (Type I) distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    α: number (optional)\n        Shape parameter.\n\n    β: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.pareto1.factory( opts );\n\n","random.streams.pareto1.objectMode":"\nrandom.streams.pareto1.objectMode( α, β[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a Pareto (Type I) distribution.\n\n    Parameters\n    ----------\n    α: number\n        Shape parameter.\n\n    β: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.pareto1.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.pareto1, random.iterators.pareto1\n","random.streams.poisson":"\nrandom.streams.poisson( λ[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    Poisson distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    λ: number\n        Mean.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.poisson( 3.0, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.poisson.factory( [λ, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a Poisson distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    λ: number (optional)\n        Mean.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.poisson.factory( opts );\n\n\nrandom.streams.poisson.objectMode( λ[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a Poisson distribution.\n\n    Parameters\n    ----------\n    λ: number\n        Mean.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.poisson.objectMode( 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.poisson, random.iterators.poisson\n","random.streams.poisson.factory":"\nrandom.streams.poisson.factory( [λ, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a Poisson distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    λ: number (optional)\n        Mean.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.poisson.factory( opts );\n\n","random.streams.poisson.objectMode":"\nrandom.streams.poisson.objectMode( λ[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a Poisson distribution.\n\n    Parameters\n    ----------\n    λ: number\n        Mean.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.poisson.objectMode( 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.poisson, random.iterators.poisson\n","random.streams.randi":"\nrandom.streams.randi( [options] )\n    Returns a readable stream for generating pseudorandom numbers having integer\n    values.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    The default underlying pseudorandom number generator (PRNG) *may* change in\n    the future. If exact reproducibility is required, either explicitly specify\n    a PRNG via the `name` option or use an underlying PRNG directly.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.name: string (optional)\n        Name of a supported pseudorandom number generator (PRNG), which will\n        serve as the underlying source of pseudorandom numbers. The following\n        PRNGs are supported:\n\n        - mt19937: 32-bit Mersenne Twister.\n        - minstd: linear congruential PRNG based on Park and Miller.\n        - minstd-shuffle: linear congruential PRNG whose output is shuffled.\n\n        Default: 'mt19937'.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed. Valid seed values vary according to\n        the underlying PRNG.\n\n    options.state: any (optional)\n        Pseudorandom number generator state. Valid state values vary according\n        to the underling PRNG. If provided, the `seed` option is ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: any\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer\n        Length of generator seed.\n\n    stream.state: any\n        Generator state.\n\n    stream.stateLength: integer\n        Length of generator state.\n\n    stream.byteLength: integer\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.randi( opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.randi.factory( [options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers having integer values.\n\n    Parameters\n    ----------\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.name: string (optional)\n        Name of a supported pseudorandom number generator (PRNG), which will\n        serve as the underlying source of pseudorandom numbers. The following\n        PRNGs are supported:\n\n        - mt19937: 32-bit Mersenne Twister.\n        - minstd: linear congruential PRNG based on Park and Miller.\n        - minstd-shuffle: linear congruential PRNG whose output is shuffled.\n\n        Default: 'mt19937'.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed. Valid seed values vary according to\n        the underlying PRNG.\n\n    options.state: any (optional)\n        Pseudorandom number generator state. Valid state values vary according\n        to the underling PRNG. If provided, the `seed` option is ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.randi.factory( opts );\n\n\nrandom.streams.randi.objectMode( [options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    having integer values.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.name: string (optional)\n        Name of a supported pseudorandom number generator (PRNG), which will\n        serve as the underlying source of pseudorandom numbers. The following\n        PRNGs are supported:\n\n        - mt19937: 32-bit Mersenne Twister.\n        - minstd: linear congruential PRNG based on Park and Miller.\n        - minstd-shuffle: linear congruential PRNG whose output is shuffled.\n\n        Default: 'mt19937'.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed. Valid seed values vary according to\n        the underlying PRNG.\n\n    options.state: any (optional)\n        Pseudorandom number generator state. Valid state values vary according\n        to the underling PRNG. If provided, the `seed` option is ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: any\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer\n        Length of generator seed.\n\n    stream.state: any\n        Generator state.\n\n    stream.stateLength: integer\n        Length of generator state.\n\n    stream.byteLength: integer\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.randi.objectMode( opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.randi, random.iterators.randi, random.streams.randu\n","random.streams.randi.factory":"\nrandom.streams.randi.factory( [options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers having integer values.\n\n    Parameters\n    ----------\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.name: string (optional)\n        Name of a supported pseudorandom number generator (PRNG), which will\n        serve as the underlying source of pseudorandom numbers. The following\n        PRNGs are supported:\n\n        - mt19937: 32-bit Mersenne Twister.\n        - minstd: linear congruential PRNG based on Park and Miller.\n        - minstd-shuffle: linear congruential PRNG whose output is shuffled.\n\n        Default: 'mt19937'.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed. Valid seed values vary according to\n        the underlying PRNG.\n\n    options.state: any (optional)\n        Pseudorandom number generator state. Valid state values vary according\n        to the underling PRNG. If provided, the `seed` option is ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.randi.factory( opts );\n\n","random.streams.randi.objectMode":"\nrandom.streams.randi.objectMode( [options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    having integer values.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.name: string (optional)\n        Name of a supported pseudorandom number generator (PRNG), which will\n        serve as the underlying source of pseudorandom numbers. The following\n        PRNGs are supported:\n\n        - mt19937: 32-bit Mersenne Twister.\n        - minstd: linear congruential PRNG based on Park and Miller.\n        - minstd-shuffle: linear congruential PRNG whose output is shuffled.\n\n        Default: 'mt19937'.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed. Valid seed values vary according to\n        the underlying PRNG.\n\n    options.state: any (optional)\n        Pseudorandom number generator state. Valid state values vary according\n        to the underling PRNG. If provided, the `seed` option is ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: any\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer\n        Length of generator seed.\n\n    stream.state: any\n        Generator state.\n\n    stream.stateLength: integer\n        Length of generator state.\n\n    stream.byteLength: integer\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.randi.objectMode( opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.randi, random.iterators.randi, random.streams.randu\n","random.streams.randn":"\nrandom.streams.randn( [options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    standard normal distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    The default underlying pseudorandom number generator (PRNG) *may* change in\n    the future. If exact reproducibility is required, either explicitly specify\n    a PRNG via the `name` option or use an underlying PRNG directly.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.name: string (optional)\n        Name of a supported pseudorandom number generator (PRNG), which will\n        serve as the underlying source of pseudorandom numbers. The following\n        PRNGs are supported:\n\n        - improved-ziggurat: improved ziggurat method.\n        - box-muller: Box-Muller transform.\n\n        Default: 'improved-ziggurat'.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.randn( opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.randn.factory( [options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a standard normal distribution.\n\n    Parameters\n    ----------\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.name: string (optional)\n        Name of a supported pseudorandom number generator (PRNG), which will\n        serve as the underlying source of pseudorandom numbers. The following\n        PRNGs are supported:\n\n        - improved-ziggurat: improved ziggurat method.\n        - box-muller: Box-Muller transform.\n\n        Default: 'improved-ziggurat'.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.randn.factory( opts );\n\n\nrandom.streams.randn.objectMode( [options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a standard normal distribution.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.name: string (optional)\n        Name of a supported pseudorandom number generator (PRNG), which will\n        serve as the underlying source of pseudorandom numbers. The following\n        PRNGs are supported:\n\n        - improved-ziggurat: improved ziggurat method.\n        - box-muller: Box-Muller transform.\n\n        Default: 'improved-ziggurat'.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.randn.objectMode( opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.randn, random.iterators.randn, random.streams.boxMuller, random.streams.improvedZiggurat\n","random.streams.randn.factory":"\nrandom.streams.randn.factory( [options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a standard normal distribution.\n\n    Parameters\n    ----------\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.name: string (optional)\n        Name of a supported pseudorandom number generator (PRNG), which will\n        serve as the underlying source of pseudorandom numbers. The following\n        PRNGs are supported:\n\n        - improved-ziggurat: improved ziggurat method.\n        - box-muller: Box-Muller transform.\n\n        Default: 'improved-ziggurat'.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.randn.factory( opts );\n\n","random.streams.randn.objectMode":"\nrandom.streams.randn.objectMode( [options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a standard normal distribution.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.name: string (optional)\n        Name of a supported pseudorandom number generator (PRNG), which will\n        serve as the underlying source of pseudorandom numbers. The following\n        PRNGs are supported:\n\n        - improved-ziggurat: improved ziggurat method.\n        - box-muller: Box-Muller transform.\n\n        Default: 'improved-ziggurat'.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.randn.objectMode( opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.randn, random.iterators.randn, random.streams.boxMuller, random.streams.improvedZiggurat\n","random.streams.randu":"\nrandom.streams.randu( [options] )\n    Returns a readable stream for generating uniformly distributed pseudorandom\n    numbers between 0 and 1.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    The default underlying pseudorandom number generator (PRNG) *may* change in\n    the future. If exact reproducibility is required, either explicitly specify\n    a PRNG via the `name` option or use an underlying PRNG directly.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.name: string (optional)\n        Name of a supported pseudorandom number generator (PRNG), which will\n        serve as the underlying source of pseudorandom numbers. The following\n        PRNGs are supported:\n\n        - mt19937: 32-bit Mersenne Twister.\n        - minstd: linear congruential PRNG based on Park and Miller.\n        - minstd-shuffle: linear congruential PRNG whose output is shuffled.\n\n        Default: 'mt19937'.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed. Valid seed values vary according to\n        the underlying PRNG.\n\n    options.state: any (optional)\n        Pseudorandom number generator state. Valid state values vary according\n        to the underling PRNG. If provided, the `seed` option is ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: any\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer\n        Length of generator seed.\n\n    stream.state: any\n        Generator state.\n\n    stream.stateLength: integer\n        Length of generator state.\n\n    stream.byteLength: integer\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.randu( opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.randu.factory( [options] )\n    Returns a function for creating readable streams which generate uniformly\n    distributed pseudorandom numbers between 0 and 1.\n\n    Parameters\n    ----------\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.name: string (optional)\n        Name of a supported pseudorandom number generator (PRNG), which will\n        serve as the underlying source of pseudorandom numbers. The following\n        PRNGs are supported:\n\n        - mt19937: 32-bit Mersenne Twister.\n        - minstd: linear congruential PRNG based on Park and Miller.\n        - minstd-shuffle: linear congruential PRNG whose output is shuffled.\n\n        Default: 'mt19937'.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed. Valid seed values vary according to\n        the underlying PRNG.\n\n    options.state: any (optional)\n        Pseudorandom number generator state. Valid state values vary according\n        to the underling PRNG. If provided, the `seed` option is ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.randu.factory( opts );\n\n\nrandom.streams.randu.objectMode( [options] )\n    Returns an \"objectMode\" readable stream for generating uniformly distributed\n    pseudorandom numbers between 0 and 1.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.name: string (optional)\n        Name of a supported pseudorandom number generator (PRNG), which will\n        serve as the underlying source of pseudorandom numbers. The following\n        PRNGs are supported:\n\n        - mt19937: 32-bit Mersenne Twister.\n        - minstd: linear congruential PRNG based on Park and Miller.\n        - minstd-shuffle: linear congruential PRNG whose output is shuffled.\n\n        Default: 'mt19937'.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed. Valid seed values vary according to\n        the underlying PRNG.\n\n    options.state: any (optional)\n        Pseudorandom number generator state. Valid state values vary according\n        to the underling PRNG. If provided, the `seed` option is ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: any\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer\n        Length of generator seed.\n\n    stream.state: any\n        Generator state.\n\n    stream.stateLength: integer\n        Length of generator state.\n\n    stream.byteLength: integer\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.randu.objectMode( opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.randu, random.iterators.randu, random.streams.randi\n","random.streams.randu.factory":"\nrandom.streams.randu.factory( [options] )\n    Returns a function for creating readable streams which generate uniformly\n    distributed pseudorandom numbers between 0 and 1.\n\n    Parameters\n    ----------\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.name: string (optional)\n        Name of a supported pseudorandom number generator (PRNG), which will\n        serve as the underlying source of pseudorandom numbers. The following\n        PRNGs are supported:\n\n        - mt19937: 32-bit Mersenne Twister.\n        - minstd: linear congruential PRNG based on Park and Miller.\n        - minstd-shuffle: linear congruential PRNG whose output is shuffled.\n\n        Default: 'mt19937'.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed. Valid seed values vary according to\n        the underlying PRNG.\n\n    options.state: any (optional)\n        Pseudorandom number generator state. Valid state values vary according\n        to the underling PRNG. If provided, the `seed` option is ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.randu.factory( opts );\n\n","random.streams.randu.objectMode":"\nrandom.streams.randu.objectMode( [options] )\n    Returns an \"objectMode\" readable stream for generating uniformly distributed\n    pseudorandom numbers between 0 and 1.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.name: string (optional)\n        Name of a supported pseudorandom number generator (PRNG), which will\n        serve as the underlying source of pseudorandom numbers. The following\n        PRNGs are supported:\n\n        - mt19937: 32-bit Mersenne Twister.\n        - minstd: linear congruential PRNG based on Park and Miller.\n        - minstd-shuffle: linear congruential PRNG whose output is shuffled.\n\n        Default: 'mt19937'.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed. Valid seed values vary according to\n        the underlying PRNG.\n\n    options.state: any (optional)\n        Pseudorandom number generator state. Valid state values vary according\n        to the underling PRNG. If provided, the `seed` option is ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: any\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer\n        Length of generator seed.\n\n    stream.state: any\n        Generator state.\n\n    stream.stateLength: integer\n        Length of generator state.\n\n    stream.byteLength: integer\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.randu.objectMode( opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.randu, random.iterators.randu, random.streams.randi\n","random.streams.rayleigh":"\nrandom.streams.rayleigh( σ[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    Rayleigh distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    σ: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.rayleigh( 3.0, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.rayleigh.factory( [σ, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a Rayleigh distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    σ: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.rayleigh.factory( opts );\n\n\nrandom.streams.rayleigh.objectMode( σ[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a Rayleigh distribution.\n\n    Parameters\n    ----------\n    σ: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.rayleigh.objectMode( 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.rayleigh, random.iterators.rayleigh\n","random.streams.rayleigh.factory":"\nrandom.streams.rayleigh.factory( [σ, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a Rayleigh distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    σ: number (optional)\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.rayleigh.factory( opts );\n\n","random.streams.rayleigh.objectMode":"\nrandom.streams.rayleigh.objectMode( σ[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a Rayleigh distribution.\n\n    Parameters\n    ----------\n    σ: number\n        Scale parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.rayleigh.objectMode( 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.rayleigh, random.iterators.rayleigh\n","random.streams.t":"\nrandom.streams.t( v[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    Student's t distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.t( 3.0, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.t.factory( [v, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a Student's t distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    v: number (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.t.factory( opts );\n\n\nrandom.streams.t.objectMode( v[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a Student's t distribution.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.t.objectMode( 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.t, random.iterators.t\n","random.streams.t.factory":"\nrandom.streams.t.factory( [v, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a Student's t distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    v: number (optional)\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.t.factory( opts );\n\n","random.streams.t.objectMode":"\nrandom.streams.t.objectMode( v[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a Student's t distribution.\n\n    Parameters\n    ----------\n    v: number\n        Degrees of freedom.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.t.objectMode( 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.t, random.iterators.t\n","random.streams.triangular":"\nrandom.streams.triangular( a, b, c[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    triangular distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.triangular( 2.0, 5.0, 4.0, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.triangular.factory( [a, b, c, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a triangular distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    a: number (optional)\n        Minimum support.\n\n    b: number (optional)\n        Maximum support.\n\n    c: number (optional)\n        Mode.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.triangular.factory( opts );\n\n\nrandom.streams.triangular.objectMode( a, b, c[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a triangular distribution.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.triangular.objectMode( 2.0, 5.0, 4.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.triangular, random.iterators.triangular\n","random.streams.triangular.factory":"\nrandom.streams.triangular.factory( [a, b, c, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a triangular distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    a: number (optional)\n        Minimum support.\n\n    b: number (optional)\n        Maximum support.\n\n    c: number (optional)\n        Mode.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.triangular.factory( opts );\n\n","random.streams.triangular.objectMode":"\nrandom.streams.triangular.objectMode( a, b, c[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a triangular distribution.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    c: number\n        Mode.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.triangular.objectMode( 2.0, 5.0, 4.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.triangular, random.iterators.triangular\n","random.streams.uniform":"\nrandom.streams.uniform( a, b[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    uniform distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.uniform( 2.0, 5.0, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.uniform.factory( [a, b, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a uniform distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    a: number (optional)\n        Minimum support.\n\n    b: number (optional)\n        Maximum support.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.uniform.factory( opts );\n\n\nrandom.streams.uniform.objectMode( a, b[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a uniform distribution.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.uniform.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.uniform, random.iterators.uniform\n","random.streams.uniform.factory":"\nrandom.streams.uniform.factory( [a, b, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a uniform distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    a: number (optional)\n        Minimum support.\n\n    b: number (optional)\n        Maximum support.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.uniform.factory( opts );\n\n","random.streams.uniform.objectMode":"\nrandom.streams.uniform.objectMode( a, b[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a uniform distribution.\n\n    Parameters\n    ----------\n    a: number\n        Minimum support.\n\n    b: number\n        Maximum support.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.uniform.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.uniform, random.iterators.uniform\n","random.streams.weibull":"\nrandom.streams.weibull( k, λ[, options] )\n    Returns a readable stream for generating pseudorandom numbers drawn from a\n    Weibull distribution.\n\n    In addition to standard readable stream events, the returned stream emits a\n    'state' event after internally generating `siter` pseudorandom numbers,\n    which is useful when wanting to deterministically capture a stream's\n    underlying PRNG state.\n\n    Parameters\n    ----------\n    k: number\n        Scale parameter.\n\n    λ: number\n        Shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.weibull( 2.0, 5.0, opts );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nrandom.streams.weibull.factory( [k, λ, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a Weibull distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    k: number (optional)\n        Scale parameter.\n\n    λ: number (optional)\n        Shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.weibull.factory( opts );\n\n\nrandom.streams.weibull.objectMode( k, λ[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a Weibull distribution.\n\n    Parameters\n    ----------\n    k: number\n        Scale parameter.\n\n    λ: number\n        Shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.weibull.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.weibull, random.iterators.weibull\n","random.streams.weibull.factory":"\nrandom.streams.weibull.factory( [k, λ, ][options] )\n    Returns a function for creating readable streams which generate pseudorandom\n    numbers drawn from a Weibull distribution.\n\n    If provided distribution parameters, the returned function returns readable\n    streams which generate pseudorandom numbers drawn from the specified\n    distribution.\n\n    If not provided distribution parameters, the returned function requires that\n    distribution parameters be provided at each invocation.\n\n    Parameters\n    ----------\n    k: number (optional)\n        Scale parameter.\n\n    λ: number (optional)\n        Shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = random.streams.weibull.factory( opts );\n\n","random.streams.weibull.objectMode":"\nrandom.streams.weibull.objectMode( k, λ[, options] )\n    Returns an \"objectMode\" readable stream for generating pseudorandom numbers\n    drawn from a Weibull distribution.\n\n    Parameters\n    ----------\n    k: number\n        Scale parameter.\n\n    λ: number\n        Shape parameter.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to generate additional pseudorandom numbers.\n\n    options.iter: integer (optional)\n        Number of iterations.\n\n    options.prng: Function (optional)\n        Pseudorandom number generator (PRNG) for generating uniformly\n        distributed pseudorandom numbers on the interval `[0,1)`. If provided,\n        the `state` and `seed` options are ignored. In order to seed the\n        returned iterator, one must seed the provided `prng` (assuming the\n        provided `prng` is seedable).\n\n    options.seed: integer|ArrayLikeObject<integer> (optional)\n        Pseudorandom number generator seed. The seed may be either a positive\n        unsigned 32-bit integer or, for arbitrary length seeds, an array-like\n        object containing unsigned 32-bit integers.\n\n    options.state: Uint32Array (optional)\n        Pseudorandom number generator state. If provided, the `seed` option is\n        ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned iterator has exclusive control over\n        its internal state. Default: true.\n\n    options.siter: integer (optional)\n        Number of iterations after which to emit the PRNG state. Default: 1e308.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    stream.PRNG: Function\n        Underlying pseudorandom number generator.\n\n    stream.seed: Uint32Array|null\n        Pseudorandom number generator seed.\n\n    stream.seedLength: integer|null\n        Length of generator seed.\n\n    stream.state: Uint32Array|null\n        Generator state.\n\n    stream.stateLength: integer|null\n        Length of generator state.\n\n    stream.byteLength: integer|null\n        Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var opts = { 'iter': 10 };\n    > var s = random.streams.weibull.objectMode( 2.0, 5.0, opts );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    base.random.weibull, random.iterators.weibull\n","ranks":"\nranks( arr[, options] )\n    Computes the sample ranks for the values of an array-like object.\n\n    When all elements of the `array` are different, the ranks are uniquely\n    determined. When there are equal elements (called *ties*), the `method`\n    option determines how they are handled. The default, `'average'`, replaces\n    the ranks of the ties by their mean. Other possible options are `'min'` and\n    `'max'`, which replace the ranks of the ties by their minimum and maximum,\n    respectively. `'dense'` works like `'min'`, with the difference that the\n    next highest element after a tie is assigned the next smallest integer.\n    Finally, `ordinal` gives each element in `arr` a distinct rank, according to\n    the position they appear in.\n\n    The `missing` option is used to specify how to handle missing data.\n    By default, `NaN` or `null` are treated as missing values. `'last'`specifies\n    that missing values are placed last, `'first'` that the are assigned the\n    lowest ranks and `'remove'` means that they are removed from the array\n    before the ranks are calculated.\n\n    Parameters\n    ----------\n    arr: Array<number>\n        Input values.\n\n    options: Object (optional)\n        Function options.\n\n    options.method (optional)\n        Method name determining how ties are treated (`average`, `min`, `max`,\n        `dense`, or `ordinal`). Default: `'average'`.\n\n    options.missing (optional)\n        Determines where missing values go (`first`, `last`, or `remove`).\n        Default: `'last'`.\n\n    options.encoding (optional)\n        Array of values encoding missing values. Default: `[ null, NaN ]`.\n\n    Returns\n    -------\n    out: Array\n        Array containing the computed ranks for the elements of the input array.\n\n    Examples\n    --------\n    > var arr = [ 1.1, 2.0, 3.5, 0.0, 2.4 ] ;\n    > var out = ranks( arr )\n    [ 2, 3, 5, 1, 4 ]\n\n    // Ties are averaged:\n    > arr =  [ 2, 2, 1, 4, 3 ];\n    > out = ranks( arr )\n    [ 2.5, 2.5, 1, 5, 4 ]\n\n    // Missing values are placed last:\n    > arr = [ null, 2, 2, 1, 4, 3, NaN, NaN ];\n    > out = ranks( arr )\n    [ 6, 2.5, 2.5, 1, 5, 4, 7 ,8 ]\n\n","RE_BASENAME":"\nRE_BASENAME\n    Regular expression to capture the last part of a path.\n\n    The regular expression is platform-dependent. If the current process is\n    running on Windows, the regular expression is `*.win32`; otherwise,\n    `*.posix`.\n\n\nRE_BASENAME.posix\n    Regular expression to capture the last part of a POSIX path.\n\n    Examples\n    --------\n    > var base = RE_BASENAME.exec( '/foo/bar/index.js' )[ 1 ]\n    'index.js'\n\n\nRE_BASENAME.win32\n    Regular expression to capture the last part of a Windows path.\n\n    Examples\n    --------\n    > var base = RE_BASENAME.exec( 'C:\\\\foo\\\\bar\\\\index.js' )[ 1 ]\n    'index.js'\n\n    See Also\n    --------\n    RE_BASENAME_POSIX, RE_BASENAME_WINDOWS\n","RE_BASENAME.posix":"\nRE_BASENAME.posix\n    Regular expression to capture the last part of a POSIX path.\n\n    Examples\n    --------\n    > var base = RE_BASENAME.exec( '/foo/bar/index.js' )[ 1 ]\n    'index.js'\n\n","RE_BASENAME.win32":"\nRE_BASENAME.win32\n    Regular expression to capture the last part of a Windows path.\n\n    Examples\n    --------\n    > var base = RE_BASENAME.exec( 'C:\\\\foo\\\\bar\\\\index.js' )[ 1 ]\n    'index.js'\n\n    See Also\n    --------\n    RE_BASENAME_POSIX, RE_BASENAME_WINDOWS\n","RE_BASENAME_POSIX":"\nRE_BASENAME_POSIX\n    Regular expression to capture the last part of a POSIX path.\n\n    Examples\n    --------\n    > var base = RE_BASENAME_POSIX.exec( '/foo/bar/index.js' )[ 1 ]\n    'index.js'\n    > base = RE_BASENAME_POSIX.exec( './foo/bar/.gitignore' )[ 1 ]\n    '.gitignore'\n    > base = RE_BASENAME_POSIX.exec( 'foo/file.pdf' )[ 1 ]\n    'file.pdf'\n    > base = RE_BASENAME_POSIX.exec( '/foo/bar/file' )[ 1 ]\n    'file'\n    > base = RE_BASENAME_POSIX.exec( 'index.js' )[ 1 ]\n    'index.js'\n    > base = RE_BASENAME_POSIX.exec( '.' )[ 1 ]\n    '.'\n    > base = RE_BASENAME_POSIX.exec( './' )[ 1 ]\n    '.'\n    > base = RE_BASENAME_POSIX.exec( '' )[ 1 ]\n    ''\n\n    See Also\n    --------\n    RE_BASENAME, RE_BASENAME_WINDOWS\n","RE_BASENAME_WINDOWS":"\nRE_BASENAME_WINDOWS\n    Regular expression to capture the last part of a Windows path.\n\n    Examples\n    --------\n    > var base = RE_BASENAME_WINDOWS.exec( '\\\\foo\\\\bar\\\\index.js' )[ 1 ]\n    'index.js'\n    > base = RE_BASENAME_WINDOWS.exec( 'C:\\\\foo\\\\bar\\\\.gitignore' )[ 1 ]\n    '.gitignore'\n    > base = RE_BASENAME_WINDOWS.exec( 'foo\\\\file.pdf' )[ 1 ]\n    'file.pdf'\n    > base = RE_BASENAME_WINDOWS.exec( 'foo\\\\bar\\\\file' )[ 1 ]\n    'file'\n    > base = RE_BASENAME_WINDOWS.exec( 'index.js' )[ 1 ]\n    'index.js'\n    > base = RE_BASENAME_WINDOWS.exec( '.' )[ 1 ]\n    '.'\n    > base = RE_BASENAME_WINDOWS.exec( '' )[ 1 ]\n    ''\n\n    See Also\n    --------\n    RE_BASENAME, RE_BASENAME_POSIX\n","RE_COLOR_HEXADECIMAL":"\nRE_COLOR_HEXADECIMAL\n    Regular expression to match a hexadecimal color.\n\n    Examples\n    --------\n    > var bool = RE_COLOR_HEXADECIMAL.test( 'ffffff' )\n    true\n    > bool = RE_COLOR_HEXADECIMAL.test( '000' )\n    false\n    > bool = RE_COLOR_HEXADECIMAL.test( 'beep' )\n    false\n\n\nRE_COLOR_HEXADECIMAL.shorthand\n    Regular expression to match a shorthand hexadecimal color.\n\n    Examples\n    --------\n    > var bool = RE_COLOR_HEXADECIMAL.shorthand.test( 'ffffff' )\n    false\n    > bool = RE_COLOR_HEXADECIMAL.shorthand.test( '000' )\n    true\n    > bool = RE_COLOR_HEXADECIMAL.shorthand.test( 'beep' )\n    false\n\n\nRE_COLOR_HEXADECIMAL.either\n    Regular expression to match either a shorthand or full length hexadecimal\n    color.\n\n    Examples\n    --------\n    > var bool = RE_COLOR_HEXADECIMAL.either.test( 'ffffff' )\n    true\n    > bool = RE_COLOR_HEXADECIMAL.either.test( '000' )\n    true\n    > bool = RE_COLOR_HEXADECIMAL.either.test( 'beep' )\n    false\n\n","RE_COLOR_HEXADECIMAL.shorthand":"\nRE_COLOR_HEXADECIMAL.shorthand\n    Regular expression to match a shorthand hexadecimal color.\n\n    Examples\n    --------\n    > var bool = RE_COLOR_HEXADECIMAL.shorthand.test( 'ffffff' )\n    false\n    > bool = RE_COLOR_HEXADECIMAL.shorthand.test( '000' )\n    true\n    > bool = RE_COLOR_HEXADECIMAL.shorthand.test( 'beep' )\n    false\n\n","RE_COLOR_HEXADECIMAL.either":"\nRE_COLOR_HEXADECIMAL.either\n    Regular expression to match either a shorthand or full length hexadecimal\n    color.\n\n    Examples\n    --------\n    > var bool = RE_COLOR_HEXADECIMAL.either.test( 'ffffff' )\n    true\n    > bool = RE_COLOR_HEXADECIMAL.either.test( '000' )\n    true\n    > bool = RE_COLOR_HEXADECIMAL.either.test( 'beep' )\n    false\n\n","RE_DECIMAL_NUMBER":"\nRE_DECIMAL_NUMBER\n    Regular expression to capture a decimal number.\n\n    A leading digit is not required.\n\n    A decimal point and at least one trailing digit is required.\n\n    Examples\n    --------\n    > var bool = RE_DECIMAL_NUMBER.test( '1.234' )\n    true\n    > bool = RE_DECIMAL_NUMBER.test( '-1.234' )\n    true\n    > bool = RE_DECIMAL_NUMBER.test( '0.0' )\n    true\n    > bool = RE_DECIMAL_NUMBER.test( '.0' )\n    true\n    > bool = RE_DECIMAL_NUMBER.test( '0' )\n    false\n    > bool = RE_DECIMAL_NUMBER.test( 'beep' )\n    false\n\n    // Create a RegExp to capture all decimal numbers:\n    > var re = new RegExp( RE_DECIMAL_NUMBER.source, 'g' );\n    > var str = '1.234 5.6, 7.8';\n    > var out = str.match( re )\n    [ '1.234', '5.6', '7.8' ]\n\n\n","RE_DIRNAME":"\nRE_DIRNAME\n    Regular expression to capture a path dirname.\n\n    The regular expression is platform-dependent. If the current process is\n    running on Windows, the regular expression is `*.win32`; otherwise,\n    `*.posix`.\n\n\nRE_DIRNAME.posix\n    Regular expression to capture a POSIX path dirname.\n\n    Examples\n    --------\n    > var dir = RE_DIRNAME.exec( '/foo/bar/index.js' )[ 1 ]\n    '/foo/bar'\n\n\nRE_DIRNAME.win32\n    Regular expression to capture a Windows path dirname.\n\n    Examples\n    --------\n    > var dir = RE_DIRNAME.exec( 'C:\\\\foo\\\\bar\\\\index.js' )[ 1 ]\n    'C:\\\\foo\\\\bar'\n\n    See Also\n    --------\n    RE_DIRNAME_POSIX, RE_DIRNAME_WINDOWS, dirname\n","RE_DIRNAME.posix":"\nRE_DIRNAME.posix\n    Regular expression to capture a POSIX path dirname.\n\n    Examples\n    --------\n    > var dir = RE_DIRNAME.exec( '/foo/bar/index.js' )[ 1 ]\n    '/foo/bar'\n\n","RE_DIRNAME.win32":"\nRE_DIRNAME.win32\n    Regular expression to capture a Windows path dirname.\n\n    Examples\n    --------\n    > var dir = RE_DIRNAME.exec( 'C:\\\\foo\\\\bar\\\\index.js' )[ 1 ]\n    'C:\\\\foo\\\\bar'\n\n    See Also\n    --------\n    RE_DIRNAME_POSIX, RE_DIRNAME_WINDOWS, dirname\n","RE_DIRNAME_POSIX":"\nRE_DIRNAME_POSIX\n    Regular expression to capture a POSIX path dirname.\n\n    Examples\n    --------\n    > var dir = RE_DIRNAME_POSIX.exec( '/foo/bar/index.js' )[ 1 ]\n    '/foo/bar'\n    > dir = RE_DIRNAME_POSIX.exec( './foo/bar/.gitignore' )[ 1 ]\n    './foo/bar'\n    > dir = RE_DIRNAME_POSIX.exec( 'foo/file.pdf' )[ 1 ]\n    'foo'\n    > dir = RE_DIRNAME_POSIX.exec( '/foo/bar/file' )[ 1 ]\n    '/foo/bar'\n    > dir = RE_DIRNAME_POSIX.exec( 'index.js' )[ 1 ]\n    ''\n    > dir = RE_DIRNAME_POSIX.exec( '.' )[ 1 ]\n    '.'\n    > dir = RE_DIRNAME_POSIX.exec( './' )[ 1 ]\n    '.'\n    > dir = RE_DIRNAME_POSIX.exec( '' )[ 1 ]\n    ''\n\n    See Also\n    --------\n    RE_DIRNAME, RE_DIRNAME_WINDOWS, dirname\n","RE_DIRNAME_WINDOWS":"\nRE_DIRNAME_WINDOWS\n    Regular expression to capture a Windows path dirname.\n\n    Examples\n    --------\n    > var dir = RE_DIRNAME_WINDOWS.exec( 'foo\\\\bar\\\\index.js' )[ 1 ]\n    'foo\\\\bar'\n    > dir = RE_DIRNAME_WINDOWS.exec( 'C:\\\\foo\\\\bar\\\\.gitignore' )[ 1 ]\n    'C:\\\\foo\\\\bar'\n    > dir = RE_DIRNAME_WINDOWS.exec( 'foo\\\\file.pdf' )[ 1 ]\n    'foo'\n    > dir = RE_DIRNAME_WINDOWS.exec( '\\\\foo\\\\bar\\\\file' )[ 1 ]\n    '\\\\foo\\\\bar'\n    > dir = RE_DIRNAME_WINDOWS.exec( 'index.js' )[ 1 ]\n    ''\n    > dir = RE_DIRNAME_WINDOWS.exec( '' )[ 1 ]\n    ''\n\n    See Also\n    --------\n    RE_DIRNAME, RE_DIRNAME_POSIX, dirname\n","RE_EOL":"\nRE_EOL\n    Regular expression to match a newline character sequence: /\\r?\\n/.\n\n    Examples\n    --------\n    > var bool = RE_EOL.test( '\\n' )\n    true\n    > bool = RE_EOL.test( '\\r\\n' )\n    true\n    > bool = RE_EOL.test( '\\\\r\\\\n' )\n    false\n\n","RE_EXTENDED_LENGTH_PATH":"\nRE_EXTENDED_LENGTH_PATH\n    Regular expression to test if a string is an extended-length path.\n\n    Extended-length paths are Windows paths which begin with `\\\\?\\`.\n\n    Examples\n    --------\n    > var path = '\\\\\\\\?\\\\C:\\\\foo\\\\bar';\n    > var bool = RE_EXTENDED_LENGTH_PATH.test( path )\n    true\n    > path = '\\\\\\\\?\\\\UNC\\\\server\\\\share';\n    > bool = RE_EXTENDED_LENGTH_PATH.test( path )\n    true\n    > path = 'C:\\\\foo\\\\bar';\n    > bool = RE_EXTENDED_LENGTH_PATH.test( path )\n    false\n    > path = '/c/foo/bar';\n    > bool = RE_EXTENDED_LENGTH_PATH.test( path )\n    false\n    > path = '/foo/bar';\n    > bool = RE_EXTENDED_LENGTH_PATH.test( path )\n    false\n\n","RE_EXTNAME":"\nRE_EXTNAME\n    Regular expression to capture a filename extension.\n\n    The regular expression is platform-dependent. If the current process is\n    running on Windows, the regular expression is `*.win32`; otherwise,\n    `*.posix`.\n\n\nRE_EXTNAME.posix\n    Regular expression to capture a POSIX filename extension.\n\n    Examples\n    --------\n    > var dir = RE_EXTNAME.exec( '/foo/bar/index.js' )[ 1 ]\n    '.js'\n\n\nRE_EXTNAME.win32\n    Regular expression to capture a Windows filename extension.\n\n    Examples\n    --------\n    > var dir = RE_EXTNAME.exec( 'C:\\\\foo\\\\bar\\\\index.js' )[ 1 ]\n    '.js'\n\n    See Also\n    --------\n    RE_EXTNAME_POSIX, RE_EXTNAME_WINDOWS, extname\n","RE_EXTNAME.posix":"\nRE_EXTNAME.posix\n    Regular expression to capture a POSIX filename extension.\n\n    Examples\n    --------\n    > var dir = RE_EXTNAME.exec( '/foo/bar/index.js' )[ 1 ]\n    '.js'\n\n","RE_EXTNAME.win32":"\nRE_EXTNAME.win32\n    Regular expression to capture a Windows filename extension.\n\n    Examples\n    --------\n    > var dir = RE_EXTNAME.exec( 'C:\\\\foo\\\\bar\\\\index.js' )[ 1 ]\n    '.js'\n\n    See Also\n    --------\n    RE_EXTNAME_POSIX, RE_EXTNAME_WINDOWS, extname\n","RE_EXTNAME_POSIX":"\nRE_EXTNAME_POSIX\n    Regular expression to capture a POSIX filename extension.\n\n    When executed against dotfile filenames (e.g., `.gitignore`), the regular\n    expression does not capture the basename as a filename extension.\n\n    Examples\n    --------\n    > var ext = RE_EXTNAME_POSIX.exec( '/foo/bar/index.js' )[ 1 ]\n    '.js'\n    > ext = RE_EXTNAME_POSIX.exec( './foo/bar/.gitignore' )[ 1 ]\n    ''\n    > ext = RE_EXTNAME_POSIX.exec( 'foo/file.pdf' )[ 1 ]\n    '.pdf'\n    > ext = RE_EXTNAME_POSIX.exec( '/foo/bar/file' )[ 1 ]\n    ''\n    > ext = RE_EXTNAME_POSIX.exec( 'index.js' )[ 1 ]\n    '.js'\n    > ext = RE_EXTNAME_POSIX.exec( '.' )[ 1 ]\n    ''\n    > ext = RE_EXTNAME_POSIX.exec( './' )[ 1 ]\n    ''\n    > ext = RE_EXTNAME_POSIX.exec( '' )[ 1 ]\n    ''\n\n    See Also\n    --------\n    RE_EXTNAME, RE_EXTNAME_WINDOWS, extname\n","RE_EXTNAME_WINDOWS":"\nRE_EXTNAME_WINDOWS\n    Regular expression to capture a Windows filename extension.\n\n    When executed against dotfile filenames (e.g., `.gitignore`), the regular\n    expression does not capture the basename as a filename extension.\n\n    Examples\n    --------\n    > var ext = RE_EXTNAME_WINDOWS.exec( 'C:\\\\foo\\\\bar\\\\index.js' )[ 1 ]\n    '.js'\n    > ext = RE_EXTNAME_WINDOWS.exec( 'C:\\\\foo\\\\bar\\\\.gitignore' )[ 1 ]\n    ''\n    > ext = RE_EXTNAME_WINDOWS.exec( 'foo\\\\file.pdf' )[ 1 ]\n    '.pdf'\n    > ext = RE_EXTNAME_WINDOWS.exec( '\\\\foo\\\\bar\\\\file' )[ 1 ]\n    ''\n    > ext = RE_EXTNAME_WINDOWS.exec( 'beep\\\\boop.' )[ 1 ]\n    '.'\n    > ext = RE_EXTNAME_WINDOWS.exec( 'index.js' )[ 1 ]\n    '.js'\n    > ext = RE_EXTNAME_WINDOWS.exec( '' )[ 1 ]\n    ''\n\n    See Also\n    --------\n    RE_EXTNAME, RE_EXTNAME_POSIX, extname\n","RE_FILENAME":"\nRE_FILENAME\n    Regular expression to split a filename.\n\n    The regular expression is platform-dependent. If the current process is\n    running on Windows, the regular expression is `*.win32`; otherwise,\n    `*.posix`.\n\n\nRE_FILENAME.posix\n    Regular expression to split a POSIX filename.\n\n    When executed, the regular expression splits a POSIX filename into the\n    following parts:\n\n    - input value\n    - root\n    - dirname\n    - basename\n    - extname\n\n    Examples\n    --------\n    > var f = '/foo/bar/index.js';\n    > var parts = RE_FILENAME.exec( f ).slice()\n    [ '/foo/bar/index.js', '/', 'foo/bar/', 'index.js', '.js' ]\n\n\nRE_FILENAME.win32\n    Regular expression to split a Windows filename.\n\n    When executed, the regular expression splits a Windows filename into the\n    following parts:\n\n    - input value\n    - device\n    - slash\n    - dirname\n    - basename\n    - extname\n\n    Examples\n    --------\n    > var f = 'C:\\\\foo\\\\bar\\\\index.js';\n    > var parts = RE_FILENAME.exec( f ).slice()\n    [ 'C:\\\\foo\\\\bar\\\\index.js', 'C:', '\\\\', 'foo\\\\bar\\\\', 'index.js', '.js' ]\n\n    See Also\n    --------\n    RE_FILENAME_POSIX, RE_FILENAME_WINDOWS\n","RE_FILENAME.posix":"\nRE_FILENAME.posix\n    Regular expression to split a POSIX filename.\n\n    When executed, the regular expression splits a POSIX filename into the\n    following parts:\n\n    - input value\n    - root\n    - dirname\n    - basename\n    - extname\n\n    Examples\n    --------\n    > var f = '/foo/bar/index.js';\n    > var parts = RE_FILENAME.exec( f ).slice()\n    [ '/foo/bar/index.js', '/', 'foo/bar/', 'index.js', '.js' ]\n\n","RE_FILENAME.win32":"\nRE_FILENAME.win32\n    Regular expression to split a Windows filename.\n\n    When executed, the regular expression splits a Windows filename into the\n    following parts:\n\n    - input value\n    - device\n    - slash\n    - dirname\n    - basename\n    - extname\n\n    Examples\n    --------\n    > var f = 'C:\\\\foo\\\\bar\\\\index.js';\n    > var parts = RE_FILENAME.exec( f ).slice()\n    [ 'C:\\\\foo\\\\bar\\\\index.js', 'C:', '\\\\', 'foo\\\\bar\\\\', 'index.js', '.js' ]\n\n    See Also\n    --------\n    RE_FILENAME_POSIX, RE_FILENAME_WINDOWS\n","RE_FILENAME_POSIX":"\nRE_FILENAME_POSIX\n    Regular expression to split a POSIX filename.\n\n    When executed, the regular expression splits a POSIX filename into the\n    following parts:\n\n    - input value\n    - root\n    - dirname\n    - basename\n    - extname\n\n    When executed against dotfile filenames (e.g., `.gitignore`), the regular\n    expression does not capture the basename as a filename extension.\n\n    Examples\n    --------\n    > var parts = RE_FILENAME_POSIX.exec( '/foo/bar/index.js' ).slice()\n    [ '/foo/bar/index.js', '/', 'foo/bar/', 'index.js', '.js' ]\n    > parts = RE_FILENAME_POSIX.exec( './foo/bar/.gitignore' ).slice()\n    [ './foo/bar/.gitignore', '', './foo/bar/', '.gitignore', '' ]\n    > parts = RE_FILENAME_POSIX.exec( 'foo/file.pdf' ).slice()\n    [ 'foo/file.pdf', '', 'foo/', 'file.pdf', '.pdf' ]\n    > parts = RE_FILENAME_POSIX.exec( '/foo/bar/file' ).slice()\n    [ '/foo/bar/file', '/', 'foo/bar/', 'file', '' ]\n    > parts = RE_FILENAME_POSIX.exec( 'index.js' ).slice()\n    [ 'index.js', '', '', 'index.js', '.js' ]\n    > parts = RE_FILENAME_POSIX.exec( '.' ).slice()\n    [ '.', '', '', '.', '' ]\n    > parts = RE_FILENAME_POSIX.exec( './' ).slice()\n    [ './', '', '.', '.', '' ]\n    > parts = RE_FILENAME_POSIX.exec( '' ).slice()\n    [ '', '', '', '', '' ]\n\n    See Also\n    --------\n    RE_FILENAME, RE_FILENAME_WINDOWS\n","RE_FILENAME_WINDOWS":"\nRE_FILENAME_WINDOWS\n    Regular expression to split a Windows filename.\n\n    When executed, the regular expression splits a Windows filename into the\n    following parts:\n\n    - input value\n    - device\n    - slash\n    - dirname\n    - basename\n    - extname\n\n    When executed against dotfile filenames (e.g., `.gitignore`), the regular\n    expression does not capture the basename as a filename extension.\n\n    Examples\n    --------\n    > var parts = RE_FILENAME_WINDOWS.exec( 'C:\\\\foo\\\\bar\\\\index.js' ).slice()\n    [ 'C:\\\\foo\\\\bar\\\\index.js', 'C:', '\\\\', 'foo\\\\bar\\\\', 'index.js', '.js' ]\n    > parts = RE_FILENAME_WINDOWS.exec( '\\\\foo\\\\bar\\\\.gitignore' ).slice()\n    [ '\\\\foo\\\\bar\\\\.gitignore', '', '\\\\', 'foo\\\\bar\\\\', '.gitignore', '' ]\n    > parts = RE_FILENAME_WINDOWS.exec( 'foo\\\\file.pdf' ).slice()\n    [ 'foo\\\\file.pdf', '', '', 'foo\\\\', 'file.pdf', '.pdf' ]\n    > parts = RE_FILENAME_WINDOWS.exec( '\\\\foo\\\\bar\\\\file' ).slice()\n    [ '\\\\foo\\\\bar\\\\file', '', '\\\\', 'foo\\\\bar\\\\', 'file', '' ]\n    > parts = RE_FILENAME_WINDOWS.exec( 'index.js' ).slice()\n    [ 'index.js', '', '', '', 'index.js', '.js' ]\n    > parts = RE_FILENAME_WINDOWS.exec( '.' ).slice()\n    [ '.', '', '', '', '.', '' ]\n    > parts = RE_FILENAME_WINDOWS.exec( './' ).slice()\n    [ './', '', '', '.', '.', '' ]\n    > parts = RE_FILENAME_WINDOWS.exec( '' ).slice()\n    [ '', '', '', '', '', '' ]\n\n    See Also\n    --------\n    RE_FILENAME, RE_FILENAME_POSIX\n","RE_FUNCTION_NAME":"\nRE_FUNCTION_NAME\n    Regular expression to capture a function name.\n\n    Examples\n    --------\n    > function beep() { return 'boop'; };\n    > var name = RE_FUNCTION_NAME.exec( beep.toString() )[ 1 ]\n    'beep'\n    > name = RE_FUNCTION_NAME.exec( function () {} )[ 1 ]\n    ''\n\n    See Also\n    --------\n    functionName\n","RE_NATIVE_FUNCTION":"\nRE_NATIVE_FUNCTION\n    Regular expression to match a native function.\n\n    Examples\n    --------\n    > var bool = RE_NATIVE_FUNCTION.test( Date.toString() )\n    true\n    > bool = RE_NATIVE_FUNCTION.test( (function noop() {}).toString() )\n    false\n\n    See Also\n    --------\n    RE_FUNCTION_NAME, functionName\n","RE_REGEXP":"\nRE_REGEXP\n    Regular expression to parse a regular expression string.\n\n    Regular expression strings should be escaped.\n\n    Examples\n    --------\n    > var bool = RE_REGEXP.test( '/^beep$/' )\n    true\n    > bool = RE_REGEXP.test( '/boop' )\n    false\n\n    // Escape regular expression strings:\n    > bool = RE_REGEXP.test( '/^\\/([^\\/]+)\\/(.*)$/' )\n    false\n    > bool = RE_REGEXP.test( '/^\\\\/([^\\\\/]+)\\\\/(.*)$/' )\n    true\n\n    See Also\n    --------\n    reFromString\n","RE_UNC_PATH":"\nRE_UNC_PATH\n    Regular expression to parse a UNC path.\n\n    Examples\n    --------\n    > var path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz:a:b';\n    > var bool = RE_UNC_PATH.test( path )\n    true\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz::b';\n    > bool = RE_UNC_PATH.test( path )\n    true\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz:a';\n    > bool = RE_UNC_PATH.test( path )\n    true\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz';\n    > bool = RE_UNC_PATH.test( path )\n    true\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar';\n    > bool = RE_UNC_PATH.test( path )\n    true\n    > path = '\\\\\\\\server\\\\share\\\\foo';\n    > bool = RE_UNC_PATH.test( path )\n    true\n    > path = '\\\\\\\\server\\\\share';\n    > bool = RE_UNC_PATH.test( path )\n    true\n    > path = '\\\\\\\\server\\\\\\\\share';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\\\\\\\\\server\\\\share';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = 'beep boop \\\\\\\\server\\\\share';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\server';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\server\\\\share\\\\';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz:';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz:a:';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz::';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\baz:a:b:c';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '\\\\\\\\server\\\\share\\\\foo\\\\bar\\\\';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '//server/share';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '/foo/bar';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = 'foo/bar';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = './foo/bar';\n    > bool = RE_UNC_PATH.test( path )\n    false\n    > path = '/foo/../bar';\n    > bool = RE_UNC_PATH.test( path )\n    false\n\n    See Also\n    --------\n    isUNCPath\n","RE_UTF16_SURROGATE_PAIR":"\nRE_UTF16_SURROGATE_PAIR\n    Regular expression to match a UTF-16 surrogate pair.\n\n    Examples\n    --------\n    > var bool = RE_UTF16_SURROGATE_PAIR.test( 'abc\\uD800\\uDC00def' )\n    true\n    > bool = RE_UTF16_SURROGATE_PAIR.test( 'abcdef' )\n    false\n\n    See Also\n    --------\n    RE_UTF16_UNPAIRED_SURROGATE\n","RE_UTF16_UNPAIRED_SURROGATE":"\nRE_UTF16_UNPAIRED_SURROGATE\n    Regular expression to match an unpaired UTF-16 surrogate.\n\n    Examples\n    --------\n    > var bool = RE_UTF16_UNPAIRED_SURROGATE.test( 'abc' )\n    false\n    > bool = RE_UTF16_UNPAIRED_SURROGATE.test( '\\uD800' )\n    true\n\n    See Also\n    --------\n    RE_UTF16_SURROGATE_PAIR\n","RE_WHITESPACE":"\nRE_WHITESPACE\n    Regular expression to match a white space character.\n\n    Matches the 25 characters defined as white space (\"WSpace=Y\",\"WS\")\n    characters in the Unicode 9.0 character database.\n\n    Matches one related white space character without the Unicode character\n    property \"WSpace=Y\" (zero width non-breaking space which was deprecated as\n    of Unicode 3.2).\n\n    Examples\n    --------\n    > var bool = RE_WHITESPACE.test( '\\n' )\n    true\n    > bool = RE_WHITESPACE.test( ' ' )\n    true\n    > bool = RE_WHITESPACE.test( 'a' )\n    false\n\n    See Also\n    --------\n    isWhitespace\n","readDir":"\nreadDir( path, clbk )\n    Asynchronously reads the contents of a directory.\n\n    Parameters\n    ----------\n    path: string|Buffer\n        Directory path.\n\n    clbk: Function\n        Callback to invoke after reading directory contents.\n\n    Examples\n    --------\n    > function onRead( error, data ) {\n    ...     if ( error ) {\n    ...         console.error( error.message );\n    ...     } else {\n    ...         console.log( data );\n    ...     }\n    ... };\n    > readDir( './beep/boop', onRead );\n\n\nreadDir.sync( path )\n    Synchronously reads the contents of a directory.\n\n    Parameters\n    ----------\n    path: string|Buffer\n        Directory path.\n\n    Returns\n    -------\n    out: Error|Array|Array<string>\n        Directory contents.\n\n    Examples\n    --------\n    > var out = readDir.sync( './beep/boop' );\n\n    See Also\n    --------\n    exists, readFile\n","readDir.sync":"\nreadDir.sync( path )\n    Synchronously reads the contents of a directory.\n\n    Parameters\n    ----------\n    path: string|Buffer\n        Directory path.\n\n    Returns\n    -------\n    out: Error|Array|Array<string>\n        Directory contents.\n\n    Examples\n    --------\n    > var out = readDir.sync( './beep/boop' );\n\n    See Also\n    --------\n    exists, readFile\n","readFile":"\nreadFile( file[, options], clbk )\n    Asynchronously reads the entire contents of a file.\n\n    If provided an encoding, the function returns a string. Otherwise, the\n    function returns a Buffer object.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    options: Object|string (optional)\n        Options. If a string, the value is the encoding.\n\n    options.encoding: string|null (optional)\n        Encoding. Default: null.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    clbk: Function\n        Callback to invoke upon reading file contents.\n\n    Examples\n    --------\n    > function onRead( error, data ) {\n    ...     if ( error ) {\n    ...         console.error( error.message );\n    ...     } else {\n    ...         console.log( data );\n    ...     }\n    ... };\n    > readFile( './beep/boop.js', onRead );\n\n\nreadFile.sync( file[, options] )\n    Synchronously reads the entire contents of a file.\n\n    If provided an encoding, the function returns a string. Otherwise, the\n    function returns a Buffer object.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    options: Object|string (optional)\n        Options. If a string, the value is the encoding.\n\n    options.encoding: string|null (optional)\n        Encoding. Default: null.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    Returns\n    -------\n    out: Error|Buffer|string\n        File contents.\n\n    Examples\n    --------\n    > var out = readFile.sync( './beep/boop.js' );\n\n    See Also\n    --------\n    exists, readDir, readJSON, writeFile\n","readFile.sync":"\nreadFile.sync( file[, options] )\n    Synchronously reads the entire contents of a file.\n\n    If provided an encoding, the function returns a string. Otherwise, the\n    function returns a Buffer object.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    options: Object|string (optional)\n        Options. If a string, the value is the encoding.\n\n    options.encoding: string|null (optional)\n        Encoding. Default: null.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    Returns\n    -------\n    out: Error|Buffer|string\n        File contents.\n\n    Examples\n    --------\n    > var out = readFile.sync( './beep/boop.js' );\n\n    See Also\n    --------\n    exists, readDir, readJSON, writeFile\n","readFileList":"\nreadFileList( filepaths[, options], clbk )\n    Asynchronously reads the entire contents of each file in a file list.\n\n    If a provided an encoding, the function returns file contents as strings.\n    Otherwise, the function returns Buffer objects.\n\n    Each file is represented by an object with the following fields:\n\n    - file: file path\n    - data: file contents as either a Buffer or string\n\n    Parameters\n    ----------\n    filepaths: Array<string>\n        Filepaths.\n\n    options: Object|string (optional)\n        Options. If a string, the value is the encoding.\n\n    options.encoding: string|null (optional)\n        Encoding. Default: null.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    clbk: Function\n        Callback to invoke upon reading file contents.\n\n    Examples\n    --------\n    > function onRead( error, data ) {\n    ...     if ( error ) {\n    ...         console.error( error.message );\n    ...     } else {\n    ...         console.log( data );\n    ...     }\n    ... };\n    > var filepaths = [ './beep/boop.txt', './foo/bar.txt' ];\n    > readFileList( filepaths, onRead );\n\n\nreadFileList.sync( filepaths[, options] )\n    Synchronously reads the entire contents of each file in a file list.\n\n    If a provided an encoding, the function returns file contents as strings.\n    Otherwise, the function returns Buffer objects.\n\n    Parameters\n    ----------\n    filepaths: Array<string>\n        Filepaths.\n\n    options: Object|string (optional)\n        Options. If a string, the value is the encoding.\n\n    options.encoding: string|null (optional)\n        Encoding. Default: null.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    Returns\n    -------\n    out: Error|Array|Array<string>\n        File contents.\n\n    out[ i ].file: string\n        File path.\n\n    out[ i ].data: Buffer|string\n        File contents.\n\n    Examples\n    --------\n    > var filepaths = [ './beep/boop.txt', './foo/bar.txt' ];\n    > var out = readFileList.sync( filepaths );\n\n","readFileList.sync":"\nreadFileList.sync( filepaths[, options] )\n    Synchronously reads the entire contents of each file in a file list.\n\n    If a provided an encoding, the function returns file contents as strings.\n    Otherwise, the function returns Buffer objects.\n\n    Parameters\n    ----------\n    filepaths: Array<string>\n        Filepaths.\n\n    options: Object|string (optional)\n        Options. If a string, the value is the encoding.\n\n    options.encoding: string|null (optional)\n        Encoding. Default: null.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    Returns\n    -------\n    out: Error|Array|Array<string>\n        File contents.\n\n    out[ i ].file: string\n        File path.\n\n    out[ i ].data: Buffer|string\n        File contents.\n\n    Examples\n    --------\n    > var filepaths = [ './beep/boop.txt', './foo/bar.txt' ];\n    > var out = readFileList.sync( filepaths );\n\n","readJSON":"\nreadJSON( file[, options], clbk )\n    Asynchronously reads a file as JSON.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    options: Object|string (optional)\n        Options. If a string, the value is the encoding.\n\n    options.encoding: string|null (optional)\n        Encoding. If the encoding option is set to `utf8` and the file has a\n        UTF-8 byte order mark (BOM), the byte order mark is *removed* before\n        attempting to parse as JSON. Default: null.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    options.reviver: Function (optional)\n        JSON transformation function.\n\n    clbk: Function\n        Callback to invoke upon reading file contents.\n\n    Examples\n    --------\n    > function onRead( error, data ) {\n    ...     if ( error ) {\n    ...         console.error( error.message );\n    ...     } else {\n    ...         console.log( data );\n    ...     }\n    ... };\n    > readJSON( './beep/boop.json', onRead );\n\n\nreadJSON.sync( file[, options] )\n    Synchronously reads a file as JSON.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    options: Object|string (optional)\n        Options. If a string, the value is the encoding.\n\n    options.encoding: string|null (optional)\n        Encoding. If the encoding option is set to `utf8` and the file has a\n        UTF-8 byte order mark (BOM), the byte order mark is *removed* before\n        attempting to parse as JSON. Default: null.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    options.reviver: Function (optional)\n        JSON transformation function.\n\n    Returns\n    -------\n    out: Error|JSON\n        File contents.\n\n    Examples\n    --------\n    > var out = readJSON.sync( './beep/boop.json' );\n\n    See Also\n    --------\n    readFile\n","readJSON.sync":"\nreadJSON.sync( file[, options] )\n    Synchronously reads a file as JSON.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    options: Object|string (optional)\n        Options. If a string, the value is the encoding.\n\n    options.encoding: string|null (optional)\n        Encoding. If the encoding option is set to `utf8` and the file has a\n        UTF-8 byte order mark (BOM), the byte order mark is *removed* before\n        attempting to parse as JSON. Default: null.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    options.reviver: Function (optional)\n        JSON transformation function.\n\n    Returns\n    -------\n    out: Error|JSON\n        File contents.\n\n    Examples\n    --------\n    > var out = readJSON.sync( './beep/boop.json' );\n\n    See Also\n    --------\n    readFile\n","readWASM":"\nreadWASM( file[, options], clbk )\n    Asynchronously reads a file as WebAssembly.\n\n    The function returns file contents as a Uint8Array.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    options: Object (optional)\n        Options.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    clbk: Function\n        Callback to invoke upon reading file contents.\n\n    Examples\n    --------\n    > function onRead( error, data ) {\n    ...     if ( error ) {\n    ...         console.error( error.message );\n    ...     } else {\n    ...         console.log( data );\n    ...     }\n    ... };\n    > readWASM( './beep/boop.wasm', onRead );\n\n\nreadWASM.sync( file[, options] )\n    Synchronously reads a file as WebAssembly.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    options: Object (optional)\n        Options.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    Returns\n    -------\n    out: Error|Uint8Array\n        File contents.\n\n    Examples\n    --------\n    > var out = readWASM.sync( './beep/boop.wasm' );\n\n    See Also\n    --------\n    readFile\n","readWASM.sync":"\nreadWASM.sync( file[, options] )\n    Synchronously reads a file as WebAssembly.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    options: Object (optional)\n        Options.\n\n    options.flag: string (optional)\n        Flag. Default: 'r'.\n\n    Returns\n    -------\n    out: Error|Uint8Array\n        File contents.\n\n    Examples\n    --------\n    > var out = readWASM.sync( './beep/boop.wasm' );\n\n    See Also\n    --------\n    readFile\n","real":"\nreal( z )\n    Returns the real component of a complex number.\n\n    Parameters\n    ----------\n    z: Complex\n        Complex number.\n\n    Returns\n    -------\n    re: number\n        Real component.\n\n    Examples\n    --------\n    > var z = new Complex128( 5.0, 3.0 );\n    > var re = real( z )\n    5.0\n\n    See Also\n    --------\n    imag, reim\n","realmax":"\nrealmax( dtype )\n    Returns the maximum finite value capable of being represented by a numeric\n    real type.\n\n    The following numeric real types are supported:\n\n    - float64: double-precision floating-point numbers\n    - float32: single-precision floating-point numbers\n    - float16: half-precision floating-point numbers\n\n    Parameters\n    ----------\n    dtype: string\n        Numeric type.\n\n    Returns\n    -------\n    out: number\n        Maximum finite value.\n\n    Examples\n    --------\n    > var m = realmax( 'float16' )\n    65504.0\n    > m = realmax( 'float32' )\n    3.4028234663852886e+38\n\n    See Also\n    --------\n    realmin, typemax\n","realmin":"\nrealmin( dtype )\n    Returns the smallest positive normal value capable of being represented by a\n    numeric real type.\n\n    The following numeric real types are supported:\n\n    - float64: double-precision floating-point numbers\n    - float32: single-precision floating-point numbers\n    - float16: half-precision floating-point numbers\n\n    Parameters\n    ----------\n    dtype: string\n        Numeric type.\n\n    Returns\n    -------\n    out: number\n        Smallest finite normal value.\n\n    Examples\n    --------\n    > var m = realmin( 'float16' )\n    0.00006103515625\n    > m = realmin( 'float32' )\n    1.1754943508222875e-38\n\n    See Also\n    --------\n    realmax, typemin\n","reduce":"\nreduce( collection, initial, reducer[, thisArg] )\n    Applies a function against an accumulator and each element in a collection\n    and returns the accumulated result.\n\n    When invoked, the reduction function is provided four arguments:\n\n    - `accumulator`: accumulated value\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    If provided an empty collection, the function returns the initial value.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection. If provided an object, the object must be array-like\n        (excluding strings and functions).\n\n    initial: any\n        Accumulator value used in the first invocation of the reduction\n        function.\n\n    reducer: Function\n        Function to invoke for each element in the input collection.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: any\n        Accumulated result.\n\n    Examples\n    --------\n    > function sum( acc, v ) { return acc + v; };\n    > var arr = [ 1.0, 2.0, 3.0 ];\n    > var out = reduce( arr, 0, sum )\n    6.0\n\n    See Also\n    --------\n    forEach, reduceAsync, reduceRight\n","reduceAsync":"\nreduceAsync( collection, initial, [options,] reducer, done )\n    Applies a function against an accumulator and each element in a collection\n    and returns the accumulated result.\n\n    When invoked, `reducer` is provided a maximum of five arguments:\n\n    - `accumulator`: accumulated value\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If\n    `reducer` accepts three arguments, `reducer` is provided:\n\n    - `accumulator`\n    - `value`\n    - `next`\n\n    If `reducer` accepts four arguments, `reducer` is provided:\n\n    - `accumulator`\n    - `value`\n    - `index`\n    - `next`\n\n    For every other `reducer` signature, `reducer` is provided all five\n    arguments.\n\n    The `next` callback accepts two arguments:\n\n    - `error`: error argument\n    - `accumulator`: accumulated value\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    If provided an empty collection, the function invokes the `done` callback\n    with the `initial` value as the second argument.\n\n    The function does not skip `undefined` elements.\n\n    When processing collection elements concurrently, *beware* of race\n    conditions when updating an accumulator. This is especially true when an\n    accumulator is a primitive (e.g., a number). In general, prefer object\n    accumulators.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    initial: any\n        Accumulator value used in the first invocation of the reduction\n        function.\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: true.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    reducer: Function\n        The function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function fcn( acc, value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         acc.sum += value;\n    ...         next( null, acc );\n    ...     }\n    ... };\n    > function done( error, acc ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( acc.sum );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > var acc = { 'sum': 0 };\n    > reduceAsync( arr, acc, fcn, done )\n    3000\n    2500\n    1000\n    6500\n\n    // Limit number of concurrent invocations:\n    > function fcn( acc, value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         acc.sum += value;\n    ...         next( null, acc );\n    ...     }\n    ... };\n    > function done( error, acc ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( acc.sum );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > var acc = { 'sum': 0 };\n    > reduceAsync( arr, acc, opts, fcn, done )\n    2500\n    3000\n    1000\n    6500\n\n    // Process concurrently:\n    > function fcn( acc, value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         acc.sum += value;\n    ...         next( null, acc );\n    ...     }\n    ... };\n    > function done( error, acc ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( acc.sum );\n    ... };\n    > var opts = { 'series': false };\n    > var arr = [ 3000, 2500, 1000 ];\n    > var acc = { 'sum': 0 };\n    > reduceAsync( arr, acc, opts, fcn, done )\n    1000\n    2500\n    3000\n    6500\n\n\nreduceAsync.factory( [options,] fcn )\n    Returns a function which applies a function against an accumulator and each\n    element in a collection and returns the accumulated result.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: true.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which invokes a function for each element in a collection.\n\n    Examples\n    --------\n    > function fcn( acc, value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         acc.sum += value;\n    ...         next( null, acc );\n    ...     }\n    ... };\n    > var opts = { 'series': false };\n    > var f = reduceAsync.factory( opts, fcn );\n    > function done( error, acc ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( acc.sum );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > var acc = { 'sum': 0 };\n    > f( arr, acc, done )\n    1000\n    2500\n    3000\n    6500\n    > acc = { 'sum': 0 };\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, acc, done )\n    1000\n    1500\n    2000\n    4500\n\n    See Also\n    --------\n    forEachAsync, reduce, reduceRightAsync\n","reduceAsync.factory":"\nreduceAsync.factory( [options,] fcn )\n    Returns a function which applies a function against an accumulator and each\n    element in a collection and returns the accumulated result.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: true.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which invokes a function for each element in a collection.\n\n    Examples\n    --------\n    > function fcn( acc, value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         acc.sum += value;\n    ...         next( null, acc );\n    ...     }\n    ... };\n    > var opts = { 'series': false };\n    > var f = reduceAsync.factory( opts, fcn );\n    > function done( error, acc ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( acc.sum );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > var acc = { 'sum': 0 };\n    > f( arr, acc, done )\n    1000\n    2500\n    3000\n    6500\n    > acc = { 'sum': 0 };\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, acc, done )\n    1000\n    1500\n    2000\n    4500\n\n    See Also\n    --------\n    forEachAsync, reduce, reduceRightAsync\n","reduceRight":"\nreduceRight( collection, initial, reducer[, thisArg] )\n    Applies a function against an accumulator and each element in a collection\n    and returns the accumulated result, iterating from right to left.\n\n    When invoked, the reduction function is provided four arguments:\n\n    - `accumulator`: accumulated value\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    If provided an empty collection, the function returns the initial value.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection. If provided an object, the object must be array-like\n        (excluding strings and functions).\n\n    initial: any\n        Accumulator value used in the first invocation of the reduction\n        function.\n\n    reducer: Function\n        Function to invoke for each element in the input collection.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    out: any\n        Accumulated result.\n\n    Examples\n    --------\n    > function sum( acc, v ) {\n    ...     console.log( '%s: %d', acc, v );\n    ...     return acc + v;\n    ... };\n    > var arr = [ 1.0, 2.0, 3.0 ];\n    > var out = reduceRight( arr, 0, sum );\n    2: 3.0\n    1: 2.0\n    0: 1.0\n    > out\n    6.0\n\n    See Also\n    --------\n    forEachRight, reduce, reduceRightAsync\n","reduceRightAsync":"\nreduceRightAsync( collection, initial, [options,] reducer, done )\n    Applies a function against an accumulator and each element in a collection\n    and returns the accumulated result, iterating from right to left.\n\n    When invoked, `reducer` is provided a maximum of five arguments:\n\n    - `accumulator`: accumulated value\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If\n    `reducer` accepts three arguments, `reducer` is provided:\n\n    - `accumulator`\n    - `value`\n    - `next`\n\n    If `reducer` accepts four arguments, `reducer` is provided:\n\n    - `accumulator`\n    - `value`\n    - `index`\n    - `next`\n\n    For every other `reducer` signature, `reducer` is provided all five\n    arguments.\n\n    The `next` callback accepts two arguments:\n\n    - `error`: error argument\n    - `accumulator`: accumulated value\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    If provided an empty collection, the function invokes the `done` callback\n    with the `initial` value as the second argument.\n\n    The function does not skip `undefined` elements.\n\n    When processing collection elements concurrently, *beware* of race\n    conditions when updating an accumulator. This is especially true when an\n    accumulator is a primitive (e.g., a number). In general, prefer object\n    accumulators.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    initial: any\n        Accumulator value used in the first invocation of the reduction\n        function.\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: true.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    reducer: Function\n        The function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function fcn( acc, value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         acc.sum += value;\n    ...         next( null, acc );\n    ...     }\n    ... };\n    > function done( error, acc ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( acc.sum );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > var acc = { 'sum': 0 };\n    > reduceRightAsync( arr, acc, fcn, done )\n    3000\n    2500\n    1000\n    6500\n\n    // Limit number of concurrent invocations:\n    > function fcn( acc, value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         acc.sum += value;\n    ...         next( null, acc );\n    ...     }\n    ... };\n    > function done( error, acc ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( acc.sum );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 1000, 2500, 3000 ];\n    > var acc = { 'sum': 0 };\n    > reduceRightAsync( arr, acc, opts, fcn, done )\n    2500\n    3000\n    1000\n    6500\n\n    // Process concurrently:\n    > function fcn( acc, value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         acc.sum += value;\n    ...         next( null, acc );\n    ...     }\n    ... };\n    > function done( error, acc ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( acc.sum );\n    ... };\n    > var opts = { 'series': false };\n    > var arr = [ 1000, 2500, 3000 ];\n    > var acc = { 'sum': 0 };\n    > reduceRightAsync( arr, acc, opts, fcn, done )\n    1000\n    2500\n    3000\n    6500\n\n\nreduceRightAsync.factory( [options,] fcn )\n    Returns a function which applies a function against an accumulator and each\n    element in a collection and returns the accumulated result, iterating from\n    right to left.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: true.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which invokes a function for each element in a collection.\n\n    Examples\n    --------\n    > function fcn( acc, value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         acc.sum += value;\n    ...         next( null, acc );\n    ...     }\n    ... };\n    > var opts = { 'series': false };\n    > var f = reduceRightAsync.factory( opts, fcn );\n    > function done( error, acc ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( acc.sum );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > var acc = { 'sum': 0 };\n    > f( arr, acc, done )\n    1000\n    2500\n    3000\n    6500\n    > acc = { 'sum': 0 };\n    > arr = [ 1000, 1500, 2000 ];\n    > f( arr, acc, done )\n    1000\n    1500\n    2000\n    4500\n\n    See Also\n    --------\n    forEachRightAsync, reduceAsync, reduceRight\n","reduceRightAsync.factory":"\nreduceRightAsync.factory( [options,] fcn )\n    Returns a function which applies a function against an accumulator and each\n    element in a collection and returns the accumulated result, iterating from\n    right to left.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: true.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which invokes a function for each element in a collection.\n\n    Examples\n    --------\n    > function fcn( acc, value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         acc.sum += value;\n    ...         next( null, acc );\n    ...     }\n    ... };\n    > var opts = { 'series': false };\n    > var f = reduceRightAsync.factory( opts, fcn );\n    > function done( error, acc ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( acc.sum );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > var acc = { 'sum': 0 };\n    > f( arr, acc, done )\n    1000\n    2500\n    3000\n    6500\n    > acc = { 'sum': 0 };\n    > arr = [ 1000, 1500, 2000 ];\n    > f( arr, acc, done )\n    1000\n    1500\n    2000\n    4500\n\n    See Also\n    --------\n    forEachRightAsync, reduceAsync, reduceRight\n","reFromString":"\nreFromString( str )\n    Parses a regular expression string and returns a new regular expression.\n\n    Provided strings should be properly escaped.\n\n    If unable to parse a string as a regular expression, the function returns\n    `null`.\n\n    Parameters\n    ----------\n    str: string\n        Regular expression string.\n\n    Returns\n    -------\n    out: RegExp|null\n        Regular expression or null.\n\n    Examples\n    --------\n    > var re = reFromString( '/beep/' )\n    /beep/\n    > re = reFromString( '/beep' )\n    null\n\n","reim":"\nreim( z )\n    Returns the real and imaginary components of a complex number.\n\n    Parameters\n    ----------\n    z: Complex\n        Complex number.\n\n    Returns\n    -------\n    out: Float64Array|Float32Array\n        Array containing the real and imaginary components, respectively.\n\n    Examples\n    --------\n    > var z = new Complex128( 5.0, 3.0 );\n    > var out = reim( z )\n    <Float64Array>[ 5.0, 3.0 ]\n\n    See Also\n    --------\n    imag, real\n","removeFirst":"\nremoveFirst( str )\n    Removes the first character of a `string`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Updated string.\n\n    Examples\n    --------\n    > var out = removeFirst( 'beep' )\n    'eep'\n    > out = removeFirst( 'Boop' )\n    'oop'\n\n    See Also\n    --------\n    removeLast\n","removeLast":"\nremoveLast( str )\n    Removes the last character of a `string`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Updated string.\n\n    Examples\n    --------\n    > var out = removeLast( 'beep' )\n    'bee'\n    > out = removeLast( 'Boop' )\n    'Boo'\n\n    See Also\n    --------\n    removeFirst\n","removePunctuation":"\nremovePunctuation( str )\n    Removes punctuation characters from a `string`.\n\n    The function removes the following characters:\n\n    - Apostrophe: `\n    - Braces : { }\n    - Brackets: [ ]\n    - Colon: :\n    - Comma: ,\n    - Exclamation Mark: !\n    - Fraction Slash: /\n    - Guillemets: < >\n    - Parentheses: ( )\n    - Period: .\n    - Semicolon: ;\n    - Tilde: ~\n    - Vertical Bar: |\n    - Question Mark: ?\n    - Quotation Marks: ' \"\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        String with punctuation characters removed.\n\n    Examples\n    --------\n    > var str = 'Sun Tzu said: \"A leader leads by example not by force.\"';\n    > var out = removePunctuation( str )\n    'Sun Tzu said A leader leads by example not by force'\n\n    > str = 'This function removes these characters: `{}[]:,!/<>().;~|?\\'\"';\n    > out = removePunctuation( str )\n    'This function removes these characters '\n\n","removeUTF8BOM":"\nremoveUTF8BOM( str )\n    Removes a UTF-8 byte order mark (BOM) from the beginning of a `string`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        String with BOM removed.\n\n    Examples\n    --------\n    > var out = removeUTF8BOM( '\\ufeffbeep' )\n    'beep'\n\n","removeWords":"\nremoveWords( str, words[, ignoreCase] )\n    Removes all occurrences of the given words from a `string`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    words: Array<string>\n        Array of words to be removed.\n\n    ignoreCase: boolean (optional)\n        Boolean indicating whether to perform a case-insensitive operation.\n        Default: `false`.\n\n    Returns\n    -------\n    out: string\n        String with words removed.\n\n    Examples\n    --------\n    > var out = removeWords( 'beep boop Foo bar', [ 'boop', 'foo' ] )\n    'beep  Foo bar'\n\n    // Case-insensitive:\n    > out = removeWords( 'beep boop Foo bar', [ 'boop', 'foo' ], true )\n    'beep   bar'\n\n","rename":"\nrename( oldPath, newPath, clbk )\n    Asynchronously renames a file.\n\n    The old path can specify a directory. In this case, the new path must either\n    not exist, or it must specify an empty directory.\n\n    The old pathname should not name an ancestor directory of the new pathname.\n\n    If the old path points to the pathname of a file that is not a directory,\n    the new path should not point to the pathname of a directory.\n\n    Write access permission is required for both the directory containing the\n    old path and the directory containing the new path.\n\n    If the link named by the new path exists, the new path is removed and the\n    old path is renamed to the new path. The link named by the new path will\n    remain visible to other threads throughout the renaming operation and refer\n    to either the file referred to by the new path or to the file referred to by\n    the old path before the operation began.\n\n    If the old path and the new path resolve to either the same existing\n    directory entry or to different directory entries for the same existing\n    file, no action is taken, and no error is returned.\n\n    If the old path points to a pathname of a symbolic link, the symbolic link\n    is renamed. If the new path points to a pathname of a symbolic link, the\n    symbolic link is removed.\n\n    If a link named by the new path exists and the file's link count becomes 0\n    when it is removed and no process has the file open, the space occupied by\n    the file is freed and the file is no longer accessible. If one or more\n    processes have the file open when the last link is removed, the link is\n    removed before the function returns, but the removal of file contents is\n    postponed until all references to the file are closed.\n\n    Parameters\n    ----------\n    oldPath: string|Buffer\n        Old path.\n\n    newPath: string|Buffer\n        New path.\n\n    clbk: Function\n        Callback to invoke upon renaming a file.\n\n    Examples\n    --------\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         console.error( error.message );\n    ...     }\n    ... };\n    > rename( './beep/boop.txt', './beep/foo.txt', done );\n\n\nrename.sync( oldPath, newPath )\n    Synchronously renames a file.\n\n    Parameters\n    ----------\n    oldPath: string|Buffer\n        Old path.\n\n    newPath: string|Buffer\n        New path.\n\n    Returns\n    -------\n    err: Error|null\n        Error object or null.\n\n    Examples\n    --------\n    > var err = rename.sync( './beep/boop.txt', './beep/foo.txt' );\n\n    See Also\n    --------\n    exists, readFile, writeFile, unlink\n","rename.sync":"\nrename.sync( oldPath, newPath )\n    Synchronously renames a file.\n\n    Parameters\n    ----------\n    oldPath: string|Buffer\n        Old path.\n\n    newPath: string|Buffer\n        New path.\n\n    Returns\n    -------\n    err: Error|null\n        Error object or null.\n\n    Examples\n    --------\n    > var err = rename.sync( './beep/boop.txt', './beep/foo.txt' );\n\n    See Also\n    --------\n    exists, readFile, writeFile, unlink\n","reorderArguments":"\nreorderArguments( fcn, indices[, thisArg] )\n    Returns a function that invokes a provided function with reordered\n    arguments.\n\n    Parameters\n    ----------\n    fcn: Function\n        Input function.\n\n    indices: Array<integer>\n        Argument indices.\n\n    thisArg: any (optional)\n        Function context.\n\n    Returns\n    -------\n    out: Function\n        Function with reordered arguments.\n\n    Examples\n    --------\n    > function foo( a, b, c ) { return [ a, b, c ]; };\n    > var bar = reorderArguments( foo, [ 2, 0, 1 ] );\n    > var out = bar( 1, 2, 3 )\n    [ 3, 1, 2 ]\n\n    See Also\n    --------\n    reverseArguments\n","repeat":"\nrepeat( str, n )\n    Repeats a string `n` times and returns the concatenated result.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    n: integer\n        Number of repetitions.\n\n    Returns\n    -------\n    out: string\n        Repeated string.\n\n    Examples\n    --------\n    > var out = repeat( 'a', 5 )\n    'aaaaa'\n    > out = repeat( '', 100 )\n    ''\n    > out = repeat( 'beep', 0 )\n    ''\n\n    See Also\n    --------\n    pad\n","replace":"\nreplace( str, search, newval )\n    Replaces `search` occurrences with a replacement `string`.\n\n    When provided a `string` as the `search` value, the function replaces *all*\n    occurrences. To remove only the first match, use a regular expression.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    search: string|RegExp\n        Search expression.\n\n    newval: string|Function\n        Replacement value or function.\n\n    Returns\n    -------\n    out: string\n        String containing replacement(s).\n\n    Examples\n    --------\n    // Standard usage:\n    > var out = replace( 'beep', 'e', 'o' )\n    'boop'\n\n    // Replacer function:\n    > function replacer( match, p1 ) { return '/'+p1+'/'; };\n    > var str = 'Oranges and lemons';\n    > out = replace( str, /([^\\s]+)/gi, replacer )\n    '/Oranges/ /and/ /lemons/'\n\n    // Replace only first match:\n    > out = replace( 'beep', /e/, 'o' )\n    'boep'\n\n","rescape":"\nrescape( str )\n    Escapes a regular expression string.\n\n    Parameters\n    ----------\n    str: string\n        Regular expression string.\n\n    Returns\n    -------\n    out: string\n        Escaped string.\n\n    Examples\n    --------\n    > var str = rescape( '[A-Z]*' )\n    '\\\\[A\\\\-Z\\\\]\\\\*'\n\n","resolveParentPath":"\nresolveParentPath( path[, options], clbk )\n    Asynchronously resolves a path by walking parent directories.\n\n    If unable to resolve a path, the function returns `null` as the path result.\n\n    Parameters\n    ----------\n    path: string\n        Path to resolve.\n\n    options: Object (optional)\n        Options.\n\n    options.dir: string (optional)\n        Base directory from which to search. Default: current working directory.\n\n    clbk: Function\n        Callback to invoke after resolving a path.\n\n    Examples\n    --------\n    > function onPath( error, path ) {\n    ...     if ( error ) {\n    ...         console.error( error.message );\n    ...     } else {\n    ...         console.log( path );\n    ...     }\n    ... };\n    > resolveParentPath( 'package.json', onPath );\n\n\nresolveParentPath.sync( path[, options] )\n    Synchronously resolves a path by walking parent directories.\n\n    Parameters\n    ----------\n    path: string\n        Path to resolve.\n\n    options: Object (optional)\n        Options.\n\n    options.dir: string (optional)\n        Base directory from which to search. Default: current working directory.\n\n    Returns\n    -------\n    out: string|null\n        Resolved path.\n\n    Examples\n    --------\n    > var out = resolveParentPath.sync( 'package.json' );\n\n","resolveParentPath.sync":"\nresolveParentPath.sync( path[, options] )\n    Synchronously resolves a path by walking parent directories.\n\n    Parameters\n    ----------\n    path: string\n        Path to resolve.\n\n    options: Object (optional)\n        Options.\n\n    options.dir: string (optional)\n        Base directory from which to search. Default: current working directory.\n\n    Returns\n    -------\n    out: string|null\n        Resolved path.\n\n    Examples\n    --------\n    > var out = resolveParentPath.sync( 'package.json' );\n\n","reverseArguments":"\nreverseArguments( fcn[, thisArg] )\n    Returns a function that invokes a provided function with arguments in\n    reverse order.\n\n    Parameters\n    ----------\n    fcn: Function\n        Input function.\n\n    thisArg: any (optional)\n        Function context.\n\n    Returns\n    -------\n    out: Function\n        Function with reversed arguments.\n\n    Examples\n    --------\n    > function foo( a, b, c ) { return [ a, b, c ]; };\n    > var bar = reverseArguments( foo );\n    > var out = bar( 1, 2, 3 )\n    [ 3, 2, 1 ]\n\n    See Also\n    --------\n    reorderArguments\n","reverseString":"\nreverseString( str )\n    Reverses a `string`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Reversed string.\n\n    Examples\n    --------\n    > var out = reverseString( 'foo' )\n    'oof'\n    > out = reverseString( 'abcdef' )\n    'fedcba'\n\n","reviveBasePRNG":"\nreviveBasePRNG( key, value )\n    Revives a JSON-serialized pseudorandom number generator (PRNG).\n\n    Parameters\n    ----------\n    key: string\n        Key.\n\n    value: any\n        Value.\n\n    Returns\n    -------\n    out: any\n        Value or PRNG.\n\n    Examples\n    --------\n    > var str = JSON.stringify( base.random.mt19937 );\n    > var r = parseJSON( str, reviveBasePRNG )\n    <Function>\n\n","reviveBuffer":"\nreviveBuffer( key, value )\n    Revives a JSON-serialized Buffer.\n\n    The serialization format for a Buffer is an object having the following\n    fields:\n\n    - type: value type (Buffer)\n    - data: buffer data as an array of integers\n\n    Parameters\n    ----------\n    key: string\n        Key.\n\n    value: any\n        Value.\n\n    Returns\n    -------\n    out: any\n        Value or Buffer.\n\n    Examples\n    --------\n    > var str = '{\"type\":\"Buffer\",\"data\":[5,3]}';\n    > var buf = parseJSON( str, reviveBuffer )\n    <Buffer>[ 5, 3 ]\n\n    See Also\n    --------\n    buffer2json\n","reviveComplex":"\nreviveComplex( key, value )\n    Revives a JSON-serialized complex number.\n\n    The serialization format for complex numbers is an object having the\n    following fields:\n\n    - type: complex number type (e.g., \"Complex128\", \"Complex64\")\n    - re: real component (number)\n    - im: imaginary component (number)\n\n    Parameters\n    ----------\n    key: string\n        Key.\n\n    value: any\n        Value.\n\n    Returns\n    -------\n    out: any\n        Value or complex number.\n\n    Examples\n    --------\n    > var str = '{\"type\":\"Complex128\",\"re\":5,\"im\":3}';\n    > var z = parseJSON( str, reviveComplex )\n    <Complex128>\n\n    See Also\n    --------\n    Complex128, Complex64, reviveComplex128, reviveComplex64\n","reviveComplex64":"\nreviveComplex64( key, value )\n    Revives a JSON-serialized 64-bit complex number.\n\n    Parameters\n    ----------\n    key: string\n        Key.\n\n    value: any\n        Value.\n\n    Returns\n    -------\n    out: any\n        Value or complex number.\n\n    Examples\n    --------\n    > var str = '{\"type\":\"Complex64\",\"re\":5,\"im\":3}';\n    > var z = parseJSON( str, reviveComplex64 )\n    <Complex64>\n\n    See Also\n    --------\n    Complex64, reviveComplex128, reviveComplex\n","reviveComplex128":"\nreviveComplex128( key, value )\n    Revives a JSON-serialized 128-bit complex number.\n\n    Parameters\n    ----------\n    key: string\n        Key.\n\n    value: any\n        Value.\n\n    Returns\n    -------\n    out: any\n        Value or complex number.\n\n    Examples\n    --------\n    > var str = '{\"type\":\"Complex128\",\"re\":5,\"im\":3}';\n    > var z = parseJSON( str, reviveComplex128 )\n    <Complex128>\n\n    See Also\n    --------\n    Complex128, reviveComplex64, reviveComplex\n","reviveError":"\nreviveError( key, value )\n    Revives a JSON-serialized error object.\n\n    The following built-in error types are supported:\n\n    - Error\n    - URIError\n    - ReferenceError\n    - SyntaxError\n    - RangeError\n    - EvalError\n    - TypeError\n\n    Parameters\n    ----------\n    key: string\n        Key.\n\n    value: any\n        Value.\n\n    Returns\n    -------\n    out: any\n        Value or error object.\n\n    Examples\n    --------\n    > var str = '{\"type\":\"TypeError\",\"message\":\"beep\"}';\n    > var err = JSON.parse( str, reviveError )\n    <TypeError>\n\n    See Also\n    --------\n    error2json\n","reviveTypedArray":"\nreviveTypedArray( key, value )\n    Revives a JSON-serialized typed array.\n\n    The serialization format for typed array is an object having the following\n    fields:\n\n    - type: typed array type (e.g., \"Float64Array\", \"Int8Array\")\n    - data: typed array data as an array of numbers\n\n    Parameters\n    ----------\n    key: string\n        Key.\n\n    value: any\n        Value.\n\n    Returns\n    -------\n    out: any\n        Value or typed array.\n\n    Examples\n    --------\n    > var str = '{\"type\":\"Float64Array\",\"data\":[5,3]}';\n    > var arr = parseJSON( str, reviveTypedArray )\n    <Float64Array>[ 5.0, 3.0 ]\n\n    See Also\n    --------\n    typedarray2json\n","rpad":"\nrpad( str, len[, pad] )\n    Right pads a `string` such that the padded `string` has a length of at least\n    `len`.\n\n    An output string is not guaranteed to have a length of exactly `len`, but to\n    have a length of at least `len`. To generate a padded string having a length\n    equal to `len`, post-process a padded string by trimming off excess\n    characters.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    len: integer\n        Minimum string length.\n\n    pad: string (optional)\n        String used to pad. Default: ' '.\n\n    Returns\n    -------\n    out: string\n        Padded string.\n\n    Examples\n    --------\n    > var out = rpad( 'a', 5 )\n    'a    '\n    > out = rpad( 'beep', 10, 'p' )\n    'beeppppppp'\n    > out = rpad( 'beep', 12, 'boop' )\n    'beepboopboop'\n\n    See Also\n    --------\n    lpad, pad\n","rtrim":"\nrtrim( str )\n    Trims whitespace from the end of a `string`.\n\n    \"Whitespace\" is defined as the following characters:\n\n    - \\f\n    - \\n\n    - \\r\n    - \\t\n    - \\v\n    - \\u0020\n    - \\u00a0\n    - \\u1680\n    - \\u2000-\\u200a\n    - \\u2028\n    - \\u2029\n    - \\u202f\n    - \\u205f\n    - \\u3000\n    - \\ufeff\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Trimmed string.\n\n    Examples\n    --------\n    > var out = rtrim( ' \\t\\t\\n  Beep \\r\\n\\t  ' )\n    ' \\t\\t\\n  Beep'\n\n    See Also\n    --------\n    ltrim, trim\n","safeintmax":"\nsafeintmax( dtype )\n    Returns the maximum safe integer capable of being represented by a numeric\n    real type.\n\n    The following numeric real types are supported:\n\n    - float64: double-precision floating-point numbers\n    - float32: single-precision floating-point numbers\n    - float16: half-precision floating-point numbers\n\n    Parameters\n    ----------\n    dtype: string\n        Numeric type.\n\n    Returns\n    -------\n    out: integer\n        Maximum safe integer.\n\n    Examples\n    --------\n    > var m = safeintmax( 'float16' )\n    2047\n    > m = safeintmax( 'float32' )\n    16777215\n\n    See Also\n    --------\n    safeintmin, realmax, typemax\n","safeintmin":"\nsafeintmin( dtype )\n    Returns the minimum safe integer capable of being represented by a numeric\n    real type.\n\n    The following numeric real types are supported:\n\n    - float64: double-precision floating-point numbers\n    - float32: single-precision floating-point numbers\n    - float16: half-precision floating-point numbers\n\n    Parameters\n    ----------\n    dtype: string\n        Numeric type.\n\n    Returns\n    -------\n    out: integer\n        Minimum safe integer.\n\n    Examples\n    --------\n    > var m = safeintmin( 'float16' )\n    -2047\n    > m = safeintmin( 'float32' )\n    -16777215\n\n    See Also\n    --------\n    safeintmax, realmin, typemin\n","sample":"\nsample( x[, options] )\n    Samples elements from an array-like object.\n\n    Parameters\n    ----------\n    x: ArrayLike\n        Array-like object from which to sample.\n\n    options: Object (optional)\n        Options.\n\n    options.size: integer (optional)\n        Sample size. By default, the function returns an array having the same\n        length as `x`. Specify the `size` option to generate a sample of a\n        different size.\n\n    options.probs: Array<number> (optional)\n        Element probabilities. By default, the probability of sampling an\n        element is the same for all elements. To assign elements different\n        probabilities, set the `probs` option. The `probs` option must be a\n        numeric array consisting of nonnegative values which sum to one. When\n        sampling without replacement, note that the `probs` option denotes the\n        initial element probabilities which are then updated after each draw.\n\n    options.replace: boolean (optional)\n        Boolean indicating whether to sample with replacement. If the `replace`\n        option is set to `false`, the `size` option cannot be an integer larger\n        than the number of elements in `x`. Default: `true`.\n\n    Returns\n    -------\n    out: Array\n        Sample.\n\n    Examples\n    --------\n    > var out = sample( 'abc' )\n    e.g., [ 'a', 'a', 'b' ]\n    > out = sample( [ 3, 6, 9 ] )\n    e.g., [ 3, 9, 6 ]\n    > var bool = ( out.length === 3 )\n    true\n\n    > out = sample( [ 3, null, NaN, 'abc', function(){} ] )\n    e.g., [ 3, 'abc', null, 3, null ]\n\n    // Set sample size:\n    > out = sample( [ 3, 6, 9 ], { 'size': 10 })\n    e.g., [ 6, 3, 9, 9, 9, 6, 9, 6, 9, 3 ]\n    > out = sample( [ 0, 1 ], { 'size': 20 })\n    e.g., [ 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0 ]\n\n    // Draw without replacement:\n    > out = sample( [ 1, 2, 3, 4, 5, 6 ], { 'replace': false, 'size': 3 })\n    e.g., [ 6, 1, 5 ]\n    > out = sample( [ 0, 1 ], { 'replace': false })\n    e.g., [ 0, 1 ]\n\n    // Assigning non-uniform element probabilities:\n    > var x = [ 1, 2, 3, 4, 5, 6 ];\n    > var probs = [ 0.1, 0.1, 0.1, 0.1, 0.1, 0.5 ];\n    > out = sample( x, { 'probs': probs })\n    e.g., [ 5, 6, 6, 5, 6, 4 ]\n    > out = sample( x, { 'probs': probs, 'size': 3, 'replace': false })\n    e.g., [ 6, 4, 1 ]\n\n\nsample.factory( [pool, ][options] )\n    Returns a function to sample elements from an array-like object.\n\n    If provided an array-like object `pool`, the returned function will always\n    sample from the supplied object.\n\n    Parameters\n    ----------\n    pool: ArrayLike (optional)\n        Array-like object from which to sample.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: integer (optional)\n        Integer-valued seed.\n\n    options.size: integer (optional)\n        Sample size.\n\n    options.replace: boolean (optional)\n        Boolean indicating whether to sample with replacement. Default: `true`.\n\n    options.mutate: boolean (optional)\n        Boolean indicating whether to mutate the `pool` when sampling without\n        replacement. If a population from which to sample is provided, the\n        underlying `pool` remains by default constant for each function\n        invocation. To mutate the `pool` by permanently removing observations\n        when sampling without replacement, set the `mutate` option to `true`.\n        The returned function returns `null` after all population units are\n        exhausted. Default: `false`.\n\n    Returns\n    -------\n    fcn: Function\n        Function to sample elements from an array-like object.\n\n    Examples\n    --------\n    // Set a seed:\n    > var mysample = sample.factory({ 'seed': 232 });\n    > var out = mysample( 'abcdefg' )\n    e.g., [ 'g', 'd', 'g', 'f', 'c', 'e', 'f' ]\n\n    // Provide `pool` and set a seed plus a default sample size:\n    > var pool = [ 1, 2, 3, 4, 5, 6 ];\n    > mysample = sample.factory( pool, { 'seed': 232, 'size': 2 });\n    > out = mysample()\n    e.g., [ 6, 4 ]\n    > out = mysample()\n    e.g., [ 6, 5 ]\n\n    // Mutate the `pool`:\n    > var opts = { 'seed': 474, 'size': 3, 'mutate': true, 'replace': false };\n    > pool = [ 1, 2, 3, 4, 5, 6 ];\n    > mysample = sample.factory( pool, opts );\n    > out = mysample()\n    e.g., [ 4, 3, 6 ]\n    > out = mysample()\n    e.g., [ 1, 5, 2 ]\n    > out = mysample()\n    null\n\n    // Override default `size` parameter when invoking created function:\n    > mysample = sample.factory( [ 0, 1 ], { 'size': 2 });\n    > out = mysample()\n    e.g., [ 1, 1 ]\n    > out = mysample({ 'size': 10 })\n    e.g, [ 0, 1, 1, 1, 0, 1, 0, 0, 1, 1 ]\n\n    // Sample with and without replacement:\n    > mysample = sample.factory( [ 0, 1 ], { 'size': 2 });\n    > out = mysample()\n    e.g., [ 1, 1 ]\n    > out = mysample({ 'replace': false })\n    e.g., [ 0, 1 ] or [ 1, 0 ]\n    > out = mysample()\n    e.g., [ 1, 1 ]\n\n","sample.factory":"\nsample.factory( [pool, ][options] )\n    Returns a function to sample elements from an array-like object.\n\n    If provided an array-like object `pool`, the returned function will always\n    sample from the supplied object.\n\n    Parameters\n    ----------\n    pool: ArrayLike (optional)\n        Array-like object from which to sample.\n\n    options: Object (optional)\n        Options.\n\n    options.seed: integer (optional)\n        Integer-valued seed.\n\n    options.size: integer (optional)\n        Sample size.\n\n    options.replace: boolean (optional)\n        Boolean indicating whether to sample with replacement. Default: `true`.\n\n    options.mutate: boolean (optional)\n        Boolean indicating whether to mutate the `pool` when sampling without\n        replacement. If a population from which to sample is provided, the\n        underlying `pool` remains by default constant for each function\n        invocation. To mutate the `pool` by permanently removing observations\n        when sampling without replacement, set the `mutate` option to `true`.\n        The returned function returns `null` after all population units are\n        exhausted. Default: `false`.\n\n    Returns\n    -------\n    fcn: Function\n        Function to sample elements from an array-like object.\n\n    Examples\n    --------\n    // Set a seed:\n    > var mysample = sample.factory({ 'seed': 232 });\n    > var out = mysample( 'abcdefg' )\n    e.g., [ 'g', 'd', 'g', 'f', 'c', 'e', 'f' ]\n\n    // Provide `pool` and set a seed plus a default sample size:\n    > var pool = [ 1, 2, 3, 4, 5, 6 ];\n    > mysample = sample.factory( pool, { 'seed': 232, 'size': 2 });\n    > out = mysample()\n    e.g., [ 6, 4 ]\n    > out = mysample()\n    e.g., [ 6, 5 ]\n\n    // Mutate the `pool`:\n    > var opts = { 'seed': 474, 'size': 3, 'mutate': true, 'replace': false };\n    > pool = [ 1, 2, 3, 4, 5, 6 ];\n    > mysample = sample.factory( pool, opts );\n    > out = mysample()\n    e.g., [ 4, 3, 6 ]\n    > out = mysample()\n    e.g., [ 1, 5, 2 ]\n    > out = mysample()\n    null\n\n    // Override default `size` parameter when invoking created function:\n    > mysample = sample.factory( [ 0, 1 ], { 'size': 2 });\n    > out = mysample()\n    e.g., [ 1, 1 ]\n    > out = mysample({ 'size': 10 })\n    e.g, [ 0, 1, 1, 1, 0, 1, 0, 0, 1, 1 ]\n\n    // Sample with and without replacement:\n    > mysample = sample.factory( [ 0, 1 ], { 'size': 2 });\n    > out = mysample()\n    e.g., [ 1, 1 ]\n    > out = mysample({ 'replace': false })\n    e.g., [ 0, 1 ] or [ 1, 0 ]\n    > out = mysample()\n    e.g., [ 1, 1 ]\n\n","SAVOY_STOPWORDS_FIN":"\nSAVOY_STOPWORDS_FIN()\n    Returns a list of Finnish stop words.\n\n    Returns\n    -------\n    out: Array<string>\n        List of stop words.\n\n    Examples\n    --------\n    > var list = SAVOY_STOPWORDS_FIN()\n    [ 'aiemmin', 'aika', 'aikaa', ... ]\n\n    References\n    ----------\n    - Savoy, Jacques. 2005. \"IR Multilingual Resources at UniNE.\"\n    <http://members.unine.ch/jacques.savoy/clef/>.\n\n","SAVOY_STOPWORDS_FR":"\nSAVOY_STOPWORDS_FR()\n    Returns a list of French stop words.\n\n    Returns\n    -------\n    out: Array<string>\n        List of stop words.\n\n    Examples\n    --------\n    > var list = SAVOY_STOPWORDS_FR()\n    [ 'a', 'à', 'â', 'abord', ... ]\n\n    References\n    ----------\n    - Savoy, Jacques. 2005. \"IR Multilingual Resources at UniNE.\"\n    <http://members.unine.ch/jacques.savoy/clef/>.\n\n","SAVOY_STOPWORDS_GER":"\nSAVOY_STOPWORDS_GER()\n    Returns a list of German stop words.\n\n    Returns\n    -------\n    out: Array<string>\n        List of stop words.\n\n    Examples\n    --------\n    > var list = SAVOY_STOPWORDS_GER()\n    [ 'a', 'ab', 'aber', 'ach', ... ]\n\n    References\n    ----------\n    - Savoy, Jacques. 2005. \"IR Multilingual Resources at UniNE.\"\n    <http://members.unine.ch/jacques.savoy/clef/>.\n\n","SAVOY_STOPWORDS_IT":"\nSAVOY_STOPWORDS_IT()\n    Returns a list of Italian stop words.\n\n    Returns\n    -------\n    out: Array<string>\n        List of stop words.\n\n    Examples\n    --------\n    > var list = SAVOY_STOPWORDS_IT()\n    [ 'a', 'abbastanza', 'accidenti', 'ad', ... ]\n\n    References\n    ----------\n    - Savoy, Jacques. 2005. \"IR Multilingual Resources at UniNE.\"\n    <http://members.unine.ch/jacques.savoy/clef/>.\n\n","SAVOY_STOPWORDS_POR":"\nSAVOY_STOPWORDS_POR()\n    Returns a list of Portuguese stop words.\n\n    Returns\n    -------\n    out: Array<string>\n        List of stop words.\n\n    Examples\n    --------\n    > var list = SAVOY_STOPWORDS_POR()\n    [ 'aiemmin', 'aika', 'aikaa', ... ]\n\n    References\n    ----------\n    - Savoy, Jacques. 2005. \"IR Multilingual Resources at UniNE.\"\n    <http://members.unine.ch/jacques.savoy/clef/>.\n\n","SAVOY_STOPWORDS_SP":"\nSAVOY_STOPWORDS_SP()\n    Returns a list of Spanish stop words.\n\n    Returns\n    -------\n    out: Array<string>\n        List of stop words.\n\n    Examples\n    --------\n    > var list = SAVOY_STOPWORDS_SP()\n    [ 'a', 'acuerdo', 'adelante', 'ademas', ... ]\n\n    References\n    ----------\n    - Savoy, Jacques. 2005. \"IR Multilingual Resources at UniNE.\"\n    <http://members.unine.ch/jacques.savoy/clef/>.\n\n","SAVOY_STOPWORDS_SWE":"\nSAVOY_STOPWORDS_SWE()\n    Returns a list of Swedish stop words.\n\n    Returns\n    -------\n    out: Array<string>\n        List of stop words.\n\n    Examples\n    --------\n    > var list = SAVOY_STOPWORDS_SWE()\n    [ 'aderton', 'adertonde', 'adjö', ... ]\n\n    References\n    ----------\n    - Savoy, Jacques. 2005. \"IR Multilingual Resources at UniNE.\"\n    <http://members.unine.ch/jacques.savoy/clef/>.\n\n","SECONDS_IN_DAY":"\nSECONDS_IN_DAY\n    Number of seconds in a day.\n\n    The value is a generalization and does **not** take into account\n    inaccuracies due to daylight savings conventions, crossing timezones, or\n    other complications with time and dates.\n\n    Examples\n    --------\n    > var days = 3.14;\n    > var secs = days * SECONDS_IN_DAY\n    271296\n\n","SECONDS_IN_HOUR":"\nSECONDS_IN_HOUR\n    Number of seconds in an hour.\n\n    The value is a generalization and does **not** take into account\n    inaccuracies due to daylight savings conventions, crossing timezones, or\n    other complications with time and dates.\n\n    Examples\n    --------\n    > var hrs = 3.14;\n    > var secs = hrs * SECONDS_IN_HOUR\n    11304\n\n","SECONDS_IN_MINUTE":"\nSECONDS_IN_MINUTE\n    Number of seconds in a minute.\n\n    The value is a generalization and does **not** take into account\n    inaccuracies arising due to complications with time and dates.\n\n    Examples\n    --------\n    > var mins = 3.14;\n    > var secs = mins * SECONDS_IN_MINUTE\n    188.4\n\n","SECONDS_IN_WEEK":"\nSECONDS_IN_WEEK\n    Number of seconds in a week.\n\n    The value is a generalization and does **not** take into account\n    inaccuracies due to daylight savings conventions, crossing timezones, or\n    other complications with time and dates.\n\n    Examples\n    --------\n    > var wks = 3.14;\n    > var secs = wks * SECONDS_IN_WEEK\n    1899072\n\n","secondsInMonth":"\nsecondsInMonth( [month[, year]] )\n    Returns the number of seconds in a month.\n\n    By default, the function returns the number of seconds in the current month\n    of the current year (according to local time). To determine the number of\n    seconds for a particular month and year, provide `month` and `year`\n    arguments.\n\n    A `month` may be either a month's integer value, three letter abbreviation,\n    or full name (case insensitive).\n\n    The function's return value is a generalization and does **not** take into\n    account inaccuracies due to daylight savings conventions, crossing\n    timezones, or other complications with time and dates.\n\n    Parameters\n    ----------\n    month: string|Date|integer (optional)\n        Month.\n\n    year: integer (optional)\n        Year.\n\n    Returns\n    -------\n    out: integer\n        Seconds in a month.\n\n    Examples\n    --------\n    > var num = secondsInMonth()\n    <number>\n    > num = secondsInMonth( 2 )\n    <number>\n    > num = secondsInMonth( 2, 2016 )\n    2505600\n    > num = secondsInMonth( 2, 2017 )\n    2419200\n\n    // Other ways to supply month:\n    > num = secondsInMonth( 'feb', 2016 )\n    2505600\n    > num = secondsInMonth( 'february', 2016 )\n    2505600\n\n    See Also\n    --------\n    secondsInYear\n","secondsInYear":"\nsecondsInYear( [value] )\n    Returns the number of seconds in a year according to the Gregorian calendar.\n\n    By default, the function returns the number of seconds in the current year\n    (according to local time). To determine the number of seconds for a\n    particular year, provide either a year or a `Date` object.\n\n    The function's return value is a generalization and does **not** take into\n    account inaccuracies due to daylight savings conventions, crossing\n    timezones, or other complications with time and dates.\n\n    Parameters\n    ----------\n    value: integer|Date (optional)\n        Year or `Date` object.\n\n    Returns\n    -------\n    out: integer\n        Number of seconds in a year.\n\n    Examples\n    --------\n    > var num = secondsInYear()\n    <number>\n    > num = secondsInYear( 2016 )\n    31622400\n    > num = secondsInYear( 2017 )\n    31536000\n\n    See Also\n    --------\n    secondsInMonth\n","setConfigurableReadOnly":"\nsetConfigurableReadOnly( obj, prop, value )\n    Defines a configurable read-only property.\n\n    Configurable read-only properties are enumerable.\n\n    Parameters\n    ----------\n    obj: Object\n        Object on which to define the property.\n\n    prop: string|symbol\n        Property name.\n\n    value: any\n        Value to set.\n\n    Examples\n    --------\n    > var obj = {};\n    > setConfigurableReadOnly( obj, 'foo', 'bar' );\n    > obj.foo = 'boop';\n    > obj\n    { 'foo': 'bar' }\n\n    See Also\n    --------\n    setConfigurableReadOnlyAccessor, setConfigurableReadWriteAccessor, defineProperty, setReadOnly\n","setConfigurableReadOnlyAccessor":"\nsetConfigurableReadOnlyAccessor( obj, prop, getter )\n    Defines a configurable read-only accessor.\n\n    Configurable read-only accessors are enumerable.\n\n    Parameters\n    ----------\n    obj: Object\n        Object on which to define the property.\n\n    prop: string|symbol\n        Property name.\n\n    getter: Function\n        Get accessor.\n\n    Examples\n    --------\n    > var obj = {};\n    > function getter() { return 'bar'; };\n    > setConfigurableReadOnlyAccessor( obj, 'foo', getter );\n    > obj.foo\n    'bar'\n\n    See Also\n    --------\n    setConfigurableReadOnly, setConfigurableReadWriteAccessor, setConfigurableWriteOnlyAccessor, defineProperty, setReadOnlyAccessor\n","setConfigurableReadWriteAccessor":"\nsetConfigurableReadWriteAccessor( obj, prop, getter, setter )\n    Defines a configurable property having read-write accessors.\n\n    Configurable read-write accessors are enumerable.\n\n    Parameters\n    ----------\n    obj: Object\n        Object on which to define the property.\n\n    prop: string|symbol\n        Property name.\n\n    getter: Function\n        Get accessor.\n\n    setter: Function\n        Set accessor.\n\n    Examples\n    --------\n    > var obj = {};\n    > var name = 'bar';\n    > function getter() { return name + ' foo'; };\n    > function setter( v ) { name = v; };\n    > setConfigurableReadWriteAccessor( obj, 'foo', getter, setter );\n    > obj.foo\n    'bar foo'\n    > obj.foo = 'beep';\n    > obj.foo\n    'beep foo'\n\n    See Also\n    --------\n    setConfigurableReadOnly, setConfigurableReadOnlyAccessor, setConfigurableWriteOnlyAccessor, defineProperty, setReadWriteAccessor\n","setConfigurableWriteOnlyAccessor":"\nsetConfigurableWriteOnlyAccessor( obj, prop, setter )\n    Defines a configurable write-only accessor.\n\n    Configurable write-only accessors are enumerable.\n\n    Parameters\n    ----------\n    obj: Object\n        Object on which to define the property.\n\n    prop: string|symbol\n        Property name.\n\n    setter: Function\n        Set accessor.\n\n    Examples\n    --------\n    > var obj = {};\n    > var val = '';\n    > function setter( v ) { val = v; };\n    > setConfigurableWriteOnlyAccessor( obj, 'foo', setter );\n    > obj.foo = 'bar';\n    > val\n    'bar'\n\n    See Also\n    --------\n    setConfigurableReadOnly, setConfigurableReadOnlyAccessor, setConfigurableReadWriteAccessor, defineProperty, setWriteOnlyAccessor\n","setMemoizedConfigurableReadOnly":"\nsetMemoizedConfigurableReadOnly( obj, prop, fcn )\n    Defines a configurable memoized read-only object property.\n\n    Configurable read-only properties are enumerable.\n\n    Parameters\n    ----------\n    obj: Object\n        Object on which to define the property.\n\n    prop: string|symbol\n        Property name.\n\n    fcn: Function\n        Synchronous function whose return value will be memoized and set as the\n        property value.\n\n    Examples\n    --------\n    > var obj = {};\n    > function foo() { return 'bar'; };\n    > setMemoizedConfigurableReadOnly( obj, 'foo', foo );\n    > obj.foo\n    'bar'\n\n    See Also\n    --------\n    setConfigurableReadOnly, setMemoizedReadOnly, setReadOnly\n","setMemoizedReadOnly":"\nsetMemoizedReadOnly( obj, prop, fcn )\n    Defines a memoized read-only object property.\n\n    Read-only properties are enumerable and non-configurable.\n\n    Parameters\n    ----------\n    obj: Object\n        Object on which to define the property.\n\n    prop: string|symbol\n        Property name.\n\n    fcn: Function\n        Synchronous function whose return value will be memoized and set as the\n        property value.\n\n    Examples\n    --------\n    > var obj = {};\n    > function foo() { return 'bar'; };\n    > setMemoizedReadOnly( obj, 'foo', foo );\n    > obj.foo\n    'bar'\n\n    See Also\n    --------\n    defineMemoizedProperty, setReadOnly\n","setNonEnumerableProperty":"\nsetNonEnumerableProperty( obj, prop, value )\n    Defines a non-enumerable property.\n\n    Non-enumerable properties are writable and configurable.\n\n    Parameters\n    ----------\n    obj: Object\n        Object on which to define the property.\n\n    prop: string|symbol\n        Property name.\n\n    value: any\n        Value to set.\n\n    Examples\n    --------\n    > var obj = {};\n    > setNonEnumerableProperty( obj, 'foo', 'bar' );\n    > obj.foo\n    'bar'\n    > objectKeys( obj )\n    []\n\n    See Also\n    --------\n    setNonEnumerableReadOnlyAccessor, setNonEnumerableReadOnly, setNonEnumerableReadWriteAccessor, setNonEnumerableWriteOnlyAccessor, setReadOnly\n","setNonEnumerableReadOnly":"\nsetNonEnumerableReadOnly( obj, prop, value )\n    Defines a non-enumerable read-only property.\n\n    Non-enumerable read-only properties are non-configurable.\n\n    Parameters\n    ----------\n    obj: Object\n        Object on which to define the property.\n\n    prop: string|symbol\n        Property name.\n\n    value: any\n        Value to set.\n\n    Examples\n    --------\n    > var obj = {};\n    > setNonEnumerableReadOnly( obj, 'foo', 'bar' );\n    > obj.foo = 'boop';\n    > obj\n    { 'foo': 'bar' }\n\n    See Also\n    --------\n    setNonEnumerableProperty, setNonEnumerableReadOnlyAccessor, setNonEnumerableReadWriteAccessor, setNonEnumerableWriteOnlyAccessor, setReadOnly\n","setNonEnumerableReadOnlyAccessor":"\nsetNonEnumerableReadOnlyAccessor( obj, prop, getter )\n    Defines a non-enumerable read-only accessor.\n\n    Non-enumerable read-only accessors are non-configurable.\n\n    Parameters\n    ----------\n    obj: Object\n        Object on which to define the property.\n\n    prop: string|symbol\n        Property name.\n\n    getter: Function\n        Get accessor.\n\n    Examples\n    --------\n    > var obj = {};\n    > function getter() { return 'bar'; };\n    > setNonEnumerableReadOnlyAccessor( obj, 'foo', getter );\n    > obj.foo\n    'bar'\n\n    See Also\n    --------\n    setNonEnumerableProperty, setNonEnumerableReadOnly, setNonEnumerableReadWriteAccessor, setNonEnumerableWriteOnlyAccessor, setReadOnlyAccessor\n","setNonEnumerableReadWriteAccessor":"\nsetNonEnumerableReadWriteAccessor( obj, prop, getter, setter )\n    Defines a non-enumerable property having read-write accessors.\n\n    Non-enumerable read-write accessors are non-configurable.\n\n    Parameters\n    ----------\n    obj: Object\n        Object on which to define the property.\n\n    prop: string|symbol\n        Property name.\n\n    getter: Function\n        Get accessor.\n\n    setter: Function\n        Set accessor.\n\n    Examples\n    --------\n    > var obj = {};\n    > var name = 'bar';\n    > function getter() { return name + ' foo'; };\n    > function setter( v ) { name = v; };\n    > setNonEnumerableReadWriteAccessor( obj, 'foo', getter, setter );\n    > obj.foo\n    'bar foo'\n    > obj.foo = 'beep';\n    > obj.foo\n    'beep foo'\n\n    See Also\n    --------\n    setNonEnumerableProperty, setNonEnumerableReadOnlyAccessor, setNonEnumerableReadOnly, setNonEnumerableWriteOnlyAccessor, setReadWriteAccessor\n","setNonEnumerableWriteOnlyAccessor":"\nsetNonEnumerableWriteOnlyAccessor( obj, prop, setter )\n    Defines a non-enumerable write-only accessor.\n\n    Non-enumerable write-only accessors are non-configurable.\n\n    Parameters\n    ----------\n    obj: Object\n        Object on which to define the property.\n\n    prop: string|symbol\n        Property name.\n\n    setter: Function\n        Set accessor.\n\n    Examples\n    --------\n    > var obj = {};\n    > var val = '';\n    > function setter( v ) { val = v; };\n    > setNonEnumerableWriteOnlyAccessor( obj, 'foo', setter );\n    > obj.foo = 'bar';\n    > val\n    'bar'\n\n    See Also\n    --------\n    setNonEnumerableProperty, setNonEnumerableReadOnlyAccessor, setNonEnumerableReadOnly, setNonEnumerableReadWriteAccessor, setWriteOnlyAccessor\n","setReadOnly":"\nsetReadOnly( obj, prop, value )\n    Defines a read-only property.\n\n    Read-only properties are enumerable and non-configurable.\n\n    Parameters\n    ----------\n    obj: Object\n        Object on which to define the property.\n\n    prop: string|symbol\n        Property name.\n\n    value: any\n        Value to set.\n\n    Examples\n    --------\n    > var obj = {};\n    > setReadOnly( obj, 'foo', 'bar' );\n    > obj.foo = 'boop';\n    > obj\n    { 'foo': 'bar' }\n\n    See Also\n    --------\n    setReadOnlyAccessor, setReadWriteAccessor, setWriteOnlyAccessor\n","setReadOnlyAccessor":"\nsetReadOnlyAccessor( obj, prop, getter )\n    Defines a read-only accessor.\n\n    Read-only accessors are enumerable and non-configurable.\n\n    Parameters\n    ----------\n    obj: Object\n        Object on which to define the property.\n\n    prop: string|symbol\n        Property name.\n\n    getter: Function\n        Get accessor.\n\n    Examples\n    --------\n    > var obj = {};\n    > function getter() { return 'bar'; };\n    > setReadOnlyAccessor( obj, 'foo', getter );\n    > obj.foo\n    'bar'\n\n    See Also\n    --------\n    setReadOnly, setReadWriteAccessor, setWriteOnlyAccessor\n","setReadWriteAccessor":"\nsetReadWriteAccessor( obj, prop, getter, setter )\n    Defines a property having read-write accessors.\n\n    Read-write accessors are enumerable and non-configurable.\n\n    Parameters\n    ----------\n    obj: Object\n        Object on which to define the property.\n\n    prop: string|symbol\n        Property name.\n\n    getter: Function\n        Get accessor.\n\n    setter: Function\n        Set accessor.\n\n    Examples\n    --------\n    > var obj = {};\n    > var name = 'bar';\n    > function getter() { return name + ' foo'; };\n    > function setter( v ) { name = v; };\n    > setReadWriteAccessor( obj, 'foo', getter, setter );\n    > obj.foo\n    'bar foo'\n    > obj.foo = 'beep';\n    > obj.foo\n    'beep foo'\n\n    See Also\n    --------\n    setReadOnly, setReadOnlyAccessor, setWriteOnlyAccessor\n","setWriteOnlyAccessor":"\nsetWriteOnlyAccessor( obj, prop, setter )\n    Defines a write-only accessor.\n\n    Write-only accessors are enumerable and non-configurable.\n\n    Parameters\n    ----------\n    obj: Object\n        Object on which to define the property.\n\n    prop: string|symbol\n        Property name.\n\n    setter: Function\n        Set accessor.\n\n    Examples\n    --------\n    > var obj = {};\n    > var val = '';\n    > function setter( v ) { val = v; };\n    > setWriteOnlyAccessor( obj, 'foo', setter );\n    > obj.foo = 'bar';\n    > val\n    'bar'\n\n    See Also\n    --------\n    setReadOnly, setReadOnlyAccessor, setReadWriteAccessor\n","SharedArrayBuffer":"\nSharedArrayBuffer( size )\n    Returns a shared array buffer having a specified number of bytes.\n\n    A shared array buffer behaves similarly to a non-shared array buffer, except\n    that a shared array buffer allows creating views of memory shared between\n    threads.\n\n    Buffer contents are initialized to 0.\n\n    If an environment does not support shared array buffers, the function throws\n    an error.\n\n    Parameters\n    ----------\n    size: integer\n        Number of bytes.\n\n    Returns\n    -------\n    out: SharedArrayBuffer\n        A shared array buffer.\n\n    Examples\n    --------\n    // Assuming an environment supports SharedArrayBuffers...\n    > var buf = new SharedArrayBuffer( 5 )\n    <SharedArrayBuffer>\n\n\nSharedArrayBuffer.length\n    Number of input arguments the constructor accepts.\n\n    Examples\n    --------\n    > SharedArrayBuffer.length\n    1\n\n\nSharedArrayBuffer.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the array buffer.\n\n    Examples\n    --------\n    // Assuming an environment supports SharedArrayBuffers...\n    > var buf = new SharedArrayBuffer( 5 );\n    > buf.byteLength\n    5\n\n\nSharedArrayBuffer.prototype.slice( [start[, end]] )\n    Copies the bytes of a shared array buffer to a new shared array buffer.\n\n    Parameters\n    ----------\n    start: integer (optional)\n        Index at which to start copying buffer contents (inclusive). If\n        negative, the index is relative to the end of the buffer.\n\n    end: integer (optional)\n        Index at which to stop copying buffer contents (exclusive). If negative,\n        the index is relative to the end of the buffer.\n\n    Returns\n    -------\n    out: SharedArrayBuffer\n        A new shared array buffer whose contents have been copied from the\n        calling shared array buffer.\n\n    Examples\n    --------\n    // Assuming an environment supports SharedArrayBuffers...\n    > var b1 = new SharedArrayBuffer( 10 );\n    > var b2 = b1.slice( 2, 6 );\n    > var bool = ( b1 === b2 )\n    false\n    > b2.byteLength\n    4\n\n    See Also\n    --------\n    Buffer, ArrayBuffer, Float32Array, Float64Array, Int16Array, Int32Array, Int8Array, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray\n","SharedArrayBuffer.length":"\nSharedArrayBuffer.length\n    Number of input arguments the constructor accepts.\n\n    Examples\n    --------\n    > SharedArrayBuffer.length\n    1\n\n","SharedArrayBuffer.prototype.byteLength":"\nSharedArrayBuffer.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the array buffer.\n\n    Examples\n    --------\n    // Assuming an environment supports SharedArrayBuffers...\n    > var buf = new SharedArrayBuffer( 5 );\n    > buf.byteLength\n    5\n\n","SharedArrayBuffer.prototype.slice":"\nSharedArrayBuffer.prototype.slice( [start[, end]] )\n    Copies the bytes of a shared array buffer to a new shared array buffer.\n\n    Parameters\n    ----------\n    start: integer (optional)\n        Index at which to start copying buffer contents (inclusive). If\n        negative, the index is relative to the end of the buffer.\n\n    end: integer (optional)\n        Index at which to stop copying buffer contents (exclusive). If negative,\n        the index is relative to the end of the buffer.\n\n    Returns\n    -------\n    out: SharedArrayBuffer\n        A new shared array buffer whose contents have been copied from the\n        calling shared array buffer.\n\n    Examples\n    --------\n    // Assuming an environment supports SharedArrayBuffers...\n    > var b1 = new SharedArrayBuffer( 10 );\n    > var b2 = b1.slice( 2, 6 );\n    > var bool = ( b1 === b2 )\n    false\n    > b2.byteLength\n    4\n\n    See Also\n    --------\n    Buffer, ArrayBuffer, Float32Array, Float64Array, Int16Array, Int32Array, Int8Array, Uint16Array, Uint32Array, Uint8Array, Uint8ClampedArray\n","shift":"\nshift( collection )\n    Removes and returns the first element of a collection.\n\n    The function returns an array with two elements: the shortened collection\n    and the removed element.\n\n    If the input collection is a typed array whose length is greater than `0`,\n    the first return value does not equal the input reference.\n\n    For purposes of generality, always treat the output collection as distinct\n    from the input collection.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        A collection. If the collection is an `Object`, the value should be\n        array-like.\n\n    Returns\n    -------\n    out: Array\n        Updated collection and the removed item.\n\n    Examples\n    --------\n    // Arrays:\n    > var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > var out = shift( arr )\n    [ [ 2.0, 3.0, 4.0, 5.0 ], 1.0 ]\n\n    // Typed arrays:\n    > arr = new Float64Array( [ 1.0, 2.0 ] );\n    > out = shift( arr )\n    [ <Float64Array>[ 2.0 ], 1.0 ]\n\n    // Array-like object:\n    > arr = { 'length': 2, '0': 1.0, '1': 2.0 };\n    > out = shift( arr )\n    [ { 'length': 1, '0': 2.0 }, 1.0 ]\n\n    See Also\n    --------\n    pop, push, unshift\n","shuffle":"\nshuffle( arr[, options] )\n    Shuffles elements of an array-like object.\n\n    Parameters\n    ----------\n    arr: ArrayLike\n        Array-like object to shuffle.\n\n    options: Object (optional)\n        Options.\n\n    options.copy: string (optional)\n        String indicating whether to return a copy (`deep`,`shallow` or `none`).\n        Default: `'shallow'`.\n\n    Returns\n    -------\n    out: ArrayLike\n        Shuffled array-like object.\n\n    Examples\n    --------\n    > var data = [ 1, 2, 3 ];\n    > var out = shuffle( data )\n    e.g., [ 3, 1, 2 ]\n    > out = shuffle( data, { 'copy': 'none' });\n    > var bool = ( data === out )\n    true\n\n\nshuffle.factory( [options] )\n    Returns a function to shuffle elements of array-like objects.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.seed: integer (optional)\n        Integer-valued seed.\n\n    options.copy: string (optional)\n        String indicating whether to return a copy (`deep`,`shallow` or `none`).\n        Default: `'shallow'`.\n\n    Returns\n    -------\n    fcn: Function\n        Shuffle function.\n\n    Examples\n    --------\n    > var myshuffle = shuffle.factory();\n\n    // Set a seed:\n    > myshuffle = shuffle.factory({ 'seed': 239 });\n    > var arr = [ 0, 1, 2, 3, 4 ];\n    > var out = myshuffle( arr )\n    e.g., [ 3, 4, 1, 0, 2 ]\n\n    // Use a different copy strategy:\n    > myshuffle = shuffle.factory({ 'copy': 'none', 'seed': 867 });\n\n    // Created shuffle function mutates input array by default:\n    > arr = [ 1, 2, 3, 4, 5, 6 ];\n    > out = myshuffle( arr );\n    > var bool = ( arr === out )\n    true\n    // Default option can be overridden:\n    > arr = [ 1, 2, 3, 4 ];\n    > out = myshuffle( arr, { 'copy': 'shallow' });\n    > bool = ( arr === out )\n    false\n\n    See Also\n    --------\n    sample\n","shuffle.factory":"\nshuffle.factory( [options] )\n    Returns a function to shuffle elements of array-like objects.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.seed: integer (optional)\n        Integer-valued seed.\n\n    options.copy: string (optional)\n        String indicating whether to return a copy (`deep`,`shallow` or `none`).\n        Default: `'shallow'`.\n\n    Returns\n    -------\n    fcn: Function\n        Shuffle function.\n\n    Examples\n    --------\n    > var myshuffle = shuffle.factory();\n\n    // Set a seed:\n    > myshuffle = shuffle.factory({ 'seed': 239 });\n    > var arr = [ 0, 1, 2, 3, 4 ];\n    > var out = myshuffle( arr )\n    e.g., [ 3, 4, 1, 0, 2 ]\n\n    // Use a different copy strategy:\n    > myshuffle = shuffle.factory({ 'copy': 'none', 'seed': 867 });\n\n    // Created shuffle function mutates input array by default:\n    > arr = [ 1, 2, 3, 4, 5, 6 ];\n    > out = myshuffle( arr );\n    > var bool = ( arr === out )\n    true\n    // Default option can be overridden:\n    > arr = [ 1, 2, 3, 4 ];\n    > out = myshuffle( arr, { 'copy': 'shallow' });\n    > bool = ( arr === out )\n    false\n\n    See Also\n    --------\n    sample\n","sizeOf":"\nsizeOf( dtype )\n    Returns the size (in bytes) of the canonical binary representation of a\n    specified numeric type.\n\n    The following numeric types are supported:\n\n    - float64: double-precision floating-point numbers\n    - float32: single-precision floating-point numbers\n    - float16: half-precision floating-point numbers\n    - int32: 32-bit two's complement signed integers\n    - uint32: 32-bit unsigned integers\n    - int16: 16-bit two's complement signed integers\n    - uint16: 16-bit unsigned integers\n    - int8: 8-bit two's complement signed integers\n    - uint8: 8-bit unsigned integers\n    - uint8c: 8-bit unsigned integers clamped to 0-255\n    - complex128: 128-bit complex numbers\n    - complex64: 64-bit complex numbers\n\n    Parameters\n    ----------\n    dtype: string\n        Numeric type.\n\n    Returns\n    -------\n    out: number\n        Size (in bytes).\n\n    Examples\n    --------\n    > var s = sizeOf( 'int8' )\n    1\n    > s = sizeOf( 'uint32' )\n    4\n\n    See Also\n    --------\n    realmax, typemax\n","some":"\nsome( collection, n )\n    Tests whether at least `n` elements in a collection are truthy.\n\n    The function immediately returns upon finding `n` truthy elements.\n\n    If provided an empty collection, the function returns `false`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    n: number\n        Minimum number of truthy elements.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if a collection contains at least `n` truthy\n        elements; otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > var arr = [ 0, 0, 1, 2, 3 ];\n    > var bool = some( arr, 3 )\n    true\n\n    See Also\n    --------\n    any, every, forEach, none, someBy\n","someBy":"\nsomeBy( collection, n, predicate[, thisArg ] )\n    Tests whether a collection contains at least `n` elements which pass a test\n    implemented by a predicate function.\n\n    The predicate function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    The function immediately returns upon finding `n` successful elements.\n\n    If provided an empty collection, the function returns `false`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    n: number\n        Minimum number of successful elements.\n\n    predicate: Function\n        The test function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if a collection contains at least `n`\n        successful elements; otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > function negative( v ) { return ( v < 0 ); };\n    > var arr = [ 1, 2, -3, 4, -1 ];\n    > var bool = someBy( arr, 2, negative )\n    true\n\n    See Also\n    --------\n    anyBy, everyBy, forEach, noneBy, someByAsync, someByRight\n","someByAsync":"\nsomeByAsync( collection, n, [options,] predicate, done )\n    Tests whether a collection contains at least `n` elements which pass a test\n    implemented by a predicate function.\n\n    When invoked, the predicate function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    predicate function accepts two arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the predicate function accepts three arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other predicate function signature, the predicate function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `result`: test result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    The function immediately returns upon receiving `n` non-falsy `result`\n    values and calls the `done` callback with `null` as the first argument and\n    `true` as the second argument.\n\n    If all elements fail, the function calls the `done` callback with `null`\n    as the first argument and `false` as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    n: number\n        Minimum number of successful elements.\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > someByAsync( arr, 2, predicate, done )\n    1000\n    2500\n    3000\n    false\n\n    // Limit number of concurrent invocations:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000 ];\n    > someByAsync( arr, 2, opts, predicate, done )\n    2500\n    3000\n    1000\n    false\n\n    // Process sequentially:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000 ];\n    > someByAsync( arr, 2, opts, predicate, done )\n    3000\n    2500\n    1000\n    false\n\n\nsomeByAsync.factory( [options,] predicate )\n    Returns a function which tests whether a collection contains at least `n`\n    elements which pass a test implemented by a predicate function.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = someByAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, 2, done )\n    3000\n    2500\n    1000\n    false\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, 2, done )\n    2000\n    1500\n    1000\n    false\n\n    See Also\n    --------\n    anyByAsync, everyByAsync, forEachAsync, noneByAsync, someBy, someByRightAsync\n","someByAsync.factory":"\nsomeByAsync.factory( [options,] predicate )\n    Returns a function which tests whether a collection contains at least `n`\n    elements which pass a test implemented by a predicate function.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = someByAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 3000, 2500, 1000 ];\n    > f( arr, 2, done )\n    3000\n    2500\n    1000\n    false\n    > arr = [ 2000, 1500, 1000 ];\n    > f( arr, 2, done )\n    2000\n    1500\n    1000\n    false\n\n    See Also\n    --------\n    anyByAsync, everyByAsync, forEachAsync, noneByAsync, someBy, someByRightAsync\n","someByRight":"\nsomeByRight( collection, n, predicate[, thisArg ] )\n    Tests whether a collection contains at least `n` elements which pass a test\n    implemented by a predicate function, iterating from right to left.\n\n    The predicate function is provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    The function immediately returns upon finding `n` successful elements.\n\n    If provided an empty collection, the function returns `false`.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    n: number\n        Minimum number of successful elements.\n\n    predicate: Function\n        The test function.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    bool: boolean\n        The function returns `true` if a collection contains at least `n`\n        successful elements; otherwise, the function returns `false`.\n\n    Examples\n    --------\n    > function negative( v ) { return ( v < 0 ); };\n    > var arr = [ -1, 1, -2, 3, 4 ];\n    > var bool = someByRight( arr, 2, negative )\n    true\n\n    See Also\n    --------\n    anyByRight, everyByRight, forEachRight, noneByRight, someBy, someByRightAsync\n","someByRightAsync":"\nsomeByRightAsync( collection, n, [options,] predicate, done )\n    Tests whether a collection contains at least `n` elements which pass a test\n    implemented by a predicate function, iterating from right to left.\n\n    When invoked, the predicate function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    predicate function accepts two arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the predicate function accepts three arguments, the predicate function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other predicate function signature, the predicate function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `result`: test result\n\n    If a provided function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    The function immediately returns upon receiving `n` non-falsy `result`\n    values and calls the `done` callback with `null` as the first argument and\n    `true` as the second argument.\n\n    If all elements fail, the function calls the `done` callback with `null`\n    as the first argument and `false` as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    n: number\n        Minimum number of successful elements.\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > someByRightAsync( arr, 2, predicate, done )\n    1000\n    2500\n    3000\n    false\n\n    // Limit number of concurrent invocations:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 1000, 2500, 3000 ];\n    > someByRightAsync( arr, 2, opts, predicate, done )\n    2500\n    3000\n    1000\n    false\n\n    // Process sequentially:\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 1000, 2500, 3000 ];\n    > someByRightAsync( arr, 2, opts, predicate, done )\n    3000\n    2500\n    1000\n    false\n\n\nsomeByRightAsync.factory( [options,] predicate )\n    Returns a function which tests whether a collection contains at least `n`\n    elements which pass a test implemented by a predicate function, iterating\n    from right to left.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = someByRightAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > f( arr, 2, done )\n    3000\n    2500\n    1000\n    false\n    > arr = [ 1000, 1500, 2000 ];\n    > f( arr, 2, done )\n    2000\n    1500\n    1000\n    false\n\n    See Also\n    --------\n    anyByRightAsync, everyByRightAsync, forEachRightAsync, noneByRightAsync, someByAsync, someByRight\n","someByRightAsync.factory":"\nsomeByRightAsync.factory( [options,] predicate )\n    Returns a function which tests whether a collection contains at least `n`\n    elements which pass a test implemented by a predicate function, iterating\n    from right to left.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    predicate: Function\n        The test function to invoke for each element in a collection.\n\n    Returns\n    -------\n    out: Function\n        A function which tests each element in a collection.\n\n    Examples\n    --------\n    > function predicate( value, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, false );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = someByRightAsync.factory( opts, predicate );\n    > function done( error, bool ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( bool );\n    ... };\n    > var arr = [ 1000, 2500, 3000 ];\n    > f( arr, 2, done )\n    3000\n    2500\n    1000\n    false\n    > arr = [ 1000, 1500, 2000 ];\n    > f( arr, 2, done )\n    2000\n    1500\n    1000\n    false\n\n    See Also\n    --------\n    anyByRightAsync, everyByRightAsync, forEachRightAsync, noneByRightAsync, someByAsync, someByRight\n","SOTU":"\nSOTU( [options] )\n    Returns State of the Union (SOTU) addresses.\n\n    Each State of the Union address is represented by an object with the\n    following fields:\n\n    - year: speech year\n    - name: President name\n    - party: the President's political party\n    - text: speech text\n\n    The following political parties are recognized:\n\n    - Democratic\n    - Republican\n    - Democratic-Republican\n    - Federalist\n    - National Union\n    - Whig\n    - Whig & Democratic\n    - none\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.name: String|Array<string> (optional)\n        President name(s).\n\n    options.party: String|Array<string> (optional)\n        Political party (or parties).\n\n    options.year: integer|Array<integer> (optional)\n        Year(s).\n\n    options.range: Array<integer> (optional)\n        Two-element array specifying a year range.\n\n    Returns\n    -------\n    out: Array<Object>\n        State of the Union addresses.\n\n    Examples\n    --------\n    > var out = SOTU()\n    [ {...}, {...}, ... ]\n\n    // Retrieve addresses by one or more Presidents...\n    > var opts = { 'name': 'Barack Obama' };\n    > out = SOTU( opts )\n    [ {...}, {...}, ... ]\n\n    // Retrieve addresses by one or more political parties...\n    > opts = { 'party': [ 'Democratic', 'Federalist' ] };\n    > out = SOTU( opts )\n    [ {...}, {...}, ... ]\n\n    // Retrieve addresses from one or more years...\n    > opts = { 'year': [ 2008, 2009, 2011 ] };\n    > out = SOTU( opts )\n    [ {...}, {...}, {...} ]\n\n    // Retrieve addresses from a range of consecutive years...\n    > opts = { 'range': [ 2008, 2016 ] }\n    > out = SOTU( opts )\n    [ {...}, {...}, ... ]\n\n","SPACHE_REVISED":"\nSPACHE_REVISED()\n    Returns a list of simple American-English words (revised Spache).\n\n    Returns\n    -------\n    out: Array<string>\n        List of simple American-English words.\n\n    Examples\n    --------\n    > var list = SPACHE_REVISED()\n    [ 'a', 'able', 'about', 'above', ... ]\n\n    References\n    ----------\n    - Spache, George. 1953. \"A New Readability Formula for Primary-Grade Reading\n    Materials.\" *The Elementary School Journal* 53 (7): 410–13. doi:10.1086/\n    458513.\n    - Klare, George R. 1974. \"Assessing Readability.\" *Reading Research\n    Quarterly* 10 (1). Wiley, International Reading Association: 62–102.\n    <http://www.jstor.org/stable/747086>.\n    - Stone, Clarence R. 1956. \"Measuring Difficulty of Primary Reading\n    Material: A Constructive Criticism of Spache's Measure.\" *The Elementary\n    School Journal* 57 (1). University of Chicago Press: 36–41.\n    <http://www.jstor.org/stable/999700>.\n    - Perera, Katherine. 2012. \"The assessment of linguistic difficulty in\n    reading material.\" In *Linguistics and the Teacher*, edited by Ronald\n    Carter, 101–13. Routledge Library Editions: Education. Taylor & Francis.\n    <https://books.google.com/books?id=oNXFQ9Gn6XIC>.\n\n","SPAM_ASSASSIN":"\nSPAM_ASSASSIN()\n    Returns the Spam Assassin public mail corpus.\n\n    Each array element has the following fields:\n\n    - id: message id (relative to message group)\n    - group: message group\n    - checksum: object containing checksum info\n    - text: message text (including headers)\n\n    The message group may be one of the following:\n\n    - easy-ham-1: easier to detect non-spam e-mails (2500 messages)\n    - easy-ham-2: easier to detect non-spam e-mails collected at a later date\n      (1400 messages)\n    - hard-ham-1: harder to detect non-spam e-mails (250 messages)\n    - spam-1: spam e-mails (500 messages)\n    - spam-2: spam e-mails collected at a later date (1396 messages)\n\n    The checksum object contains the following fields:\n\n    - type: checksum type (e.g., MD5)\n    - value: checksum value\n\n    Returns\n    -------\n    out: Array<Object>\n        Corpus.\n\n    Examples\n    --------\n    > var data = SPAM_ASSASSIN()\n    [ {...}, {...}, ... ]\n\n","SparklineBase":"\nSparklineBase( [data,] [options] )\n    Returns a Sparkline instance.\n\n    This constructor is a base Sparkline constructor from which constructors\n    tailored to generating particular types of Sparkline graphics should be\n    derived.\n\n    At a minimum, descendants should implement a private `_render()` method\n    which will be automatically invoked by the public `render()` method.\n\n    The `data` argument takes precedence over the `data` option.\n\n    Parameters\n    ----------\n    data: ArrayLike|ndarray (optional)\n        Sparkline data.\n\n    options: Object (optional)\n        Options.\n\n    options.autoRender: boolean (optional)\n        Boolean indicating whether to re-render on a 'change' event. Default:\n        false.\n\n    options.bufferSize: integer|null (optional)\n        Data buffer size. If provided, data is kept in a first-in first-out\n        (FIFO) buffer which cannot exceed the buffer size. Default: +infinity.\n\n    options.data: ArrayLike|ndarray (optional)\n        Sparkline data.\n\n    options.description: string (optional)\n        Sparkline description.\n\n    options.isDefined: Function (optional)\n        An accessor function indicating whether a datum is defined.\n\n    options.label: string (optional)\n        Data label.\n\n    Returns\n    -------\n    sparkline: Sparkline\n        Sparkline instance.\n\n    sparkline.autoRender\n        Rendering mode. If `true`, an instance renders on each 'change' event;\n        otherwise, rendering must be triggered manually.\n\n    sparkline.bufferSize\n        Data buffer size.\n\n    sparkline.description\n        Sparkline description.\n\n    sparkline.data\n        Sparkline data.\n\n    sparkline.label\n        Data label.\n\n    sparkline.isDefined( d, i )\n        An accessor function which defines whether a datum is defined. This\n        accessor is used to define how missing values are encoded. The default\n        behavior is to ignore values which are `NaN`.\n\n    sparkline.render()\n        Renders a sparkline. This method calls `_render()` which must be\n        implemented by instances and child classes. The default behavior is\n        throw an error.\n\n    Examples\n    --------\n    > var sparkline = new SparklineBase()\n    <Sparkline>\n\n    // Provide sparkline data at instantiation:\n    > var data = [ 1, 2, 3 ];\n    > sparkline = new SparklineBase( data )\n    <Sparkline>\n\n    See Also\n    --------\n    plot, Plot, UnicodeColumnChartSparkline, UnicodeLineChartSparkline, UnicodeTristateChartSparkline, UnicodeWinLossChartSparkline\n","sparsearray2iterator":"\nsparsearray2iterator( src[, mapFcn[, thisArg]] )\n    Returns an iterator which iterates over the elements of a sparse array-like\n    object.\n\n    The returned iterator skips elements which are undefined.\n\n    When invoked, an input function is provided three arguments:\n\n    - value: iterated value\n    - index: iterated value index\n    - src: source array-like object\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    If an environment supports Symbol.iterator, the function explicitly does not\n    not invoke an array's `@@iterator` method, regardless of whether this method\n    is defined. To convert an array to an implementation defined iterator,\n    invoke this method directly.\n\n    Parameters\n    ----------\n    src: ArrayLikeObject\n        Sparse array-like object from which to create the iterator.\n\n    mapFcn: Function (optional)\n        Function to invoke for each iterated value.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = sparsearray2iterator( [ 1, , 3, 4 ] );\n    > var v = it.next().value\n    1\n    > v = it.next().value\n    3\n\n    See Also\n    --------\n    iterator2array, array2iterator, sparsearray2iteratorRight\n","sparsearray2iteratorRight":"\nsparsearray2iteratorRight( src[, mapFcn[, thisArg]] )\n    Returns an iterator which iterates from right to left over the elements of a\n    sparse array-like object.\n\n    The returned iterator skips elements which are undefined.\n\n    When invoked, an input function is provided three arguments:\n\n    - value: iterated value\n    - index: iterated value index\n    - src: source array-like object\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    If an environment supports Symbol.iterator, the function explicitly does not\n    not invoke an array's `@@iterator` method, regardless of whether this method\n    is defined. To convert an array to an implementation defined iterator,\n    invoke this method directly.\n\n    Parameters\n    ----------\n    src: ArrayLikeObject\n        Sparse array-like object from which to create the iterator.\n\n    mapFcn: Function (optional)\n        Function to invoke for each iterated value.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = sparsearray2iteratorRight( [ 1, 2, , 4 ] );\n    > var v = it.next().value\n    4\n    > v = it.next().value\n    2\n\n    See Also\n    --------\n    iterator2array, array2iteratorRight, sparsearray2iterator\n","splitStream":"\nsplitStream( [options] )\n    Returns a transform stream which splits streamed data.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Separator used to split streamed data. A separator may be either a\n        regular expression or a string. A separator which is a regular\n        expression containing a matching group will result in the separator\n        being retained in the output stream.Default: /\\r?\\n/.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.allowHalfOpen: boolean (optional)\n        Specifies whether a stream should remain open even if one side ends.\n        Default: false.\n\n    options.writableObjectMode: boolean (optional)\n        Specifies whether the writable side should be in \"objectMode\". Default:\n        false.\n\n    Returns\n    -------\n    stream: TransformStream\n        Transform stream.\n\n    Examples\n    --------\n    > var s = splitStream();\n    > s.write( 'a\\nb\\nc' );\n    > s.end();\n\n\nsplitStream.factory( [options] )\n    Returns a function for creating transform streams for splitting streamed\n    data.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Separator used to split streamed data. A separator may be either a\n        regular expression or a string. A separator which is a regular\n        expression containing a matching group will result in the separator\n        being retained in the output stream. Default: /\\r?\\n/.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.allowHalfOpen: boolean (optional)\n        Specifies whether a stream should remain open even if one side ends.\n        Default: false.\n\n    options.writableObjectMode: boolean (optional)\n        Specifies whether the writable side should be in \"objectMode\". Default:\n        false.\n\n    Returns\n    -------\n    createStream: Function\n        Function for creating transform streams.\n\n    Examples\n    --------\n    > var opts = { 'highWaterMark': 64 };\n    > var createStream = splitStream.factory( opts );\n    > var s = createStream();\n    > s.write( 'a\\nb\\nc' );\n    > s.end();\n\n\nsplitStream.objectMode( [options] )\n    Returns an \"objectMode\" transform stream for splitting streamed data.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Separator used to split streamed data. A separator may be either a\n        regular expression or a string. A separator which is a regular\n        expression containing a matching group will result in the separator\n        being retained in the output stream. Default: /\\r?\\n/.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.allowHalfOpen: boolean (optional)\n        Specifies whether a stream should remain open even if one side ends.\n        Default: false.\n\n    options.writableObjectMode: boolean (optional)\n        Specifies whether the writable side should be in \"objectMode\". Default:\n        false.\n\n    Returns\n    -------\n    stream: TransformStream\n        Transform stream operating in \"objectMode\".\n\n    Examples\n    --------\n    > var s = splitStream.objectMode();\n    > s.write( 'a\\nb\\c' );\n    > s.end();\n\n    See Also\n    --------\n    joinStream\n","splitStream.factory":"\nsplitStream.factory( [options] )\n    Returns a function for creating transform streams for splitting streamed\n    data.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Separator used to split streamed data. A separator may be either a\n        regular expression or a string. A separator which is a regular\n        expression containing a matching group will result in the separator\n        being retained in the output stream. Default: /\\r?\\n/.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.allowHalfOpen: boolean (optional)\n        Specifies whether a stream should remain open even if one side ends.\n        Default: false.\n\n    options.writableObjectMode: boolean (optional)\n        Specifies whether the writable side should be in \"objectMode\". Default:\n        false.\n\n    Returns\n    -------\n    createStream: Function\n        Function for creating transform streams.\n\n    Examples\n    --------\n    > var opts = { 'highWaterMark': 64 };\n    > var createStream = splitStream.factory( opts );\n    > var s = createStream();\n    > s.write( 'a\\nb\\nc' );\n    > s.end();\n\n","splitStream.objectMode":"\nsplitStream.objectMode( [options] )\n    Returns an \"objectMode\" transform stream for splitting streamed data.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.sep: string (optional)\n        Separator used to split streamed data. A separator may be either a\n        regular expression or a string. A separator which is a regular\n        expression containing a matching group will result in the separator\n        being retained in the output stream. Default: /\\r?\\n/.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.allowHalfOpen: boolean (optional)\n        Specifies whether a stream should remain open even if one side ends.\n        Default: false.\n\n    options.writableObjectMode: boolean (optional)\n        Specifies whether the writable side should be in \"objectMode\". Default:\n        false.\n\n    Returns\n    -------\n    stream: TransformStream\n        Transform stream operating in \"objectMode\".\n\n    Examples\n    --------\n    > var s = splitStream.objectMode();\n    > s.write( 'a\\nb\\c' );\n    > s.end();\n\n    See Also\n    --------\n    joinStream\n","SQRT_EPS":"\nSQRT_EPS\n    Square root of double-precision floating-point epsilon.\n\n    Examples\n    --------\n    > SQRT_EPS\n    0.14901161193847656e-7\n\n    See Also\n    --------\n    EPS\n","SQRT_HALF":"\nSQRT_HALF\n    Square root of `1/2`.\n\n    Examples\n    --------\n    > SQRT_HALF\n    0.7071067811865476\n\n    See Also\n    --------\n    LN_HALF\n","SQRT_HALF_PI":"\nSQRT_HALF_PI\n    Square root of the mathematical constant `π` divided by `2`.\n\n    Examples\n    --------\n    > SQRT_HALF_PI\n    1.2533141373155003\n\n    See Also\n    --------\n    PI\n","SQRT_PHI":"\nSQRT_PHI\n    Square root of the golden ratio.\n\n    Examples\n    --------\n    > SQRT_PHI\n    1.272019649514069\n\n    See Also\n    --------\n    PHI\n","SQRT_PI":"\nSQRT_PI\n    Square root of the mathematical constant `π`.\n\n    Examples\n    --------\n    > SQRT_PI\n    1.7724538509055160\n\n    See Also\n    --------\n    PI\n","SQRT_THREE":"\nSQRT_THREE\n    Square root of `3`.\n\n    Examples\n    --------\n    > SQRT_THREE\n    1.7320508075688772\n\n","SQRT_TWO":"\nSQRT_TWO\n    Square root of `2`.\n\n    Examples\n    --------\n    > SQRT_TWO\n    1.4142135623730951\n\n    See Also\n    --------\n    LN2\n","SQRT_TWO_PI":"\nSQRT_TWO_PI\n    Square root of the mathematical constant `π` times `2`.\n\n    Examples\n    --------\n    > SQRT_TWO_PI\n    2.5066282746310007\n\n    See Also\n    --------\n    TWO_PI\n","Stack":"\nStack()\n    Stack constructor.\n\n    A stack is also referred to as a \"last-in-first-out\" queue.\n\n    Returns\n    -------\n    stack: Object\n        Stack data structure.\n\n    stack.clear: Function\n        Clears the stack.\n\n    stack.first: Function\n        Returns the \"newest\" stack value (i.e., the value which is \"first-out\").\n        If the stack is empty, the returned value is `undefined`.\n\n    stack.iterator: Function\n        Returns an iterator for iterating over a stack. If an environment\n        supports Symbol.iterator, the returned iterator is iterable. Note that,\n        in order to prevent confusion arising from stack mutation during\n        iteration, a returned iterator **always** iterates over a stack\n        \"snapshot\", which is defined as the list of stack elements at the time\n        of the method's invocation.\n\n    stack.last: Function\n        Returns the \"oldest\" stack value (i.e., the value which is \"last-out\").\n        If the stack is empty, the returned value is `undefined`.\n\n    stack.length: integer\n        Stack length.\n\n    stack.pop: Function\n        Removes and returns the current \"first-out\" value from the stack. If the\n        stack is empty, the returned value is `undefined`.\n\n    stack.push: Function\n        Adds a value to the stack.\n\n    stack.toArray: Function\n        Returns an array of stack values.\n\n    stack.toJSON: Function\n        Serializes a stack as JSON.\n\n    Examples\n    --------\n    > var s = Stack();\n    > s.push( 'foo' ).push( 'bar' );\n    > s.length\n    2\n    > s.pop()\n    'bar'\n    > s.length\n    1\n    > s.pop()\n    'foo'\n    > s.length\n    0\n\n    See Also\n    --------\n    FIFO\n","startcase":"\nstartcase( str )\n    Capitalizes the first letter of each word in an input `string`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        String containing words where each first letter is capitalized.\n\n    Examples\n    --------\n    > var out = startcase( 'beep boop' )\n    'Beep Boop'\n\n    See Also\n    --------\n    lowercase, uppercase\n","startsWith":"\nstartsWith( str, search[, position] )\n    Tests if a `string` starts with the characters of another `string`.\n\n    If provided an empty `search` string, the function always returns `true`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    search: string\n        Search string.\n\n    position: integer (optional)\n        Position at which to start searching for `search`. If less than `0`, the\n        start position is determined relative to the end of the input string.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether a `string` starts with the characters of\n        another `string`.\n\n    Examples\n    --------\n    > var bool = startsWith( 'Beep', 'Be' )\n    true\n    > bool = startsWith( 'Beep', 'ep' )\n    false\n    > bool = startsWith( 'Beep', 'ee', 1 )\n    true\n    > bool = startsWith( 'Beep', 'ee', -3 )\n    true\n    > bool = startsWith( 'Beep', '' )\n    true\n\n    See Also\n    --------\n    endsWith\n","STOPWORDS_EN":"\nSTOPWORDS_EN()\n    Returns a list of English stop words.\n\n    Returns\n    -------\n    out: Array<string>\n        List of stop words.\n\n    Examples\n    --------\n    > var list = STOPWORDS_EN()\n    [ 'a', 'about', 'above', 'across', ... ]\n\n","stridedarray2iterator":"\nstridedarray2iterator( N, src, stride, offset[, mapFcn[, thisArg]] )\n    Returns an iterator which iterates over elements of an array-like object\n    according to specified stride parameters.\n\n    When invoked, an input function is provided four arguments:\n\n    - value: iterated value\n    - index: iterated value index\n    - n: iteration count (zero-based)\n    - src: source array-like object\n\n    If an environment supports Symbol.iterator, the returned iterator is\n    iterable.\n\n    If an environment supports Symbol.iterator, the function explicitly does not\n    not invoke an array's `@@iterator` method, regardless of whether this method\n    is defined. To convert an array to an implementation defined iterator,\n    invoke this method directly.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to iterate.\n\n    src: ArrayLikeObject\n        Array-like object from which to create the iterator.\n\n    stride: integer\n        Stride length.\n\n    offset: integer\n        Starting index.\n\n    mapFcn: Function (optional)\n        Function to invoke for each iterated value.\n\n    thisArg: any (optional)\n        Execution context.\n\n    Returns\n    -------\n    iterator: Object\n        Iterator.\n\n    iterator.next(): Function\n        Returns an iterator protocol-compliant object containing the next\n        iterated value (if one exists) and a boolean flag indicating whether the\n        iterator is finished.\n\n    iterator.return( [value] ): Function\n        Finishes an iterator and returns a provided value.\n\n    Examples\n    --------\n    > var it = stridedarray2iterator( 2, [ 1, 2, 3, 4 ], -2, 3 );\n    > var v = it.next().value\n    4\n    > v = it.next().value\n    2\n\n    See Also\n    --------\n    iterator2array, array2iterator\n","stridedArrayStream":"\nstridedArrayStream( N, buffer, stride, offset[, options] )\n    Creates a readable stream from a strided array-like object.\n\n    In object mode, `null` is a reserved value. If an array contains `null`\n    values (e.g., as a means to encode missing values), the stream will\n    prematurely end. Consider an alternative encoding or filter `null` values\n    prior to invocation.\n\n    In binary mode, if an array contains `undefined` values, the stream will\n    emit an error. Consider providing a custom serialization function or\n    filtering `undefined` values prior to invocation.\n\n    If a serialization function fails to return a string or Buffer, the stream\n    emits an error.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to stream.\n\n    buffer: ArrayLikeObject\n        Array-like object from which to create the stream.\n\n    stride: integer\n        Stride length.\n\n    offset: integer\n        Starting index.\n\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before pausing the stream.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.serialize: Function (optional)\n        Serialization function. The default behavior is to serialize streamed\n        values as JSON strings. This option is only applicable when a stream is\n        not in \"objectMode\".\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream.\n\n    Examples\n    --------\n    > function fcn( chunk ) { console.log( chunk.toString() ); };\n    > var s = stridedArrayStream( 3, [ 1, 2, 3 ], 1, 0 );\n    > var o = inspectSinkStream( fcn );\n    > s.pipe( o );\n\n\nstridedArrayStream.factory( [options] )\n    Returns a function for creating readable streams from array-like objects.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before pausing streaming.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.serialize: Function (optional)\n        Serialization function. The default behavior is to serialize streamed\n        values as JSON strings. This option is only applicable when a stream is\n        not in \"objectMode\".\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = stridedArrayStream.factory( opts );\n\n\nstridedArrayStream.objectMode( N, buffer, stride, offset[, options] )\n    Returns an \"objectMode\" readable stream from a strided array-like object.\n\n    In object mode, `null` is a reserved value. If an array contains `null`\n    values (e.g., as a means to encode missing values), the stream will\n    prematurely end. Consider an alternative encoding or filter `null` values\n    prior to invocation.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to stream.\n\n    buffer: ArrayLikeObject\n        Array-like object from which to create the stream.\n\n    stride: integer\n        Stride length.\n\n    offset: integer\n        Starting index.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before pausing streaming.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var s = stridedArrayStream.objectMode( 3, [ 1, 2, 3 ], 1, 0 );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    arrayStream\n","stridedArrayStream.factory":"\nstridedArrayStream.factory( [options] )\n    Returns a function for creating readable streams from array-like objects.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before pausing streaming.\n\n    options.sep: string (optional)\n        Separator used to join streamed data. This option is only applicable\n        when a stream is not in \"objectMode\". Default: '\\n'.\n\n    options.serialize: Function (optional)\n        Serialization function. The default behavior is to serialize streamed\n        values as JSON strings. This option is only applicable when a stream is\n        not in \"objectMode\".\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating readable streams.\n\n    Examples\n    --------\n    > var opts = { 'objectMode': true, 'highWaterMark': 64 };\n    > var createStream = stridedArrayStream.factory( opts );\n\n","stridedArrayStream.objectMode":"\nstridedArrayStream.objectMode( N, buffer, stride, offset[, options] )\n    Returns an \"objectMode\" readable stream from a strided array-like object.\n\n    In object mode, `null` is a reserved value. If an array contains `null`\n    values (e.g., as a means to encode missing values), the stream will\n    prematurely end. Consider an alternative encoding or filter `null` values\n    prior to invocation.\n\n    Parameters\n    ----------\n    N: integer\n        Number of values to stream.\n\n    buffer: ArrayLikeObject\n        Array-like object from which to create the stream.\n\n    stride: integer\n        Stride length.\n\n    offset: integer\n        Starting index.\n\n    options: Object (optional)\n        Options.\n\n    options.encoding: string|null (optional)\n        Specifies how Buffer objects should be decoded to strings. Default:\n        null.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of objects to store in an internal buffer\n        before pausing streaming.\n\n    Returns\n    -------\n    stream: ReadableStream\n        Readable stream operating in \"objectMode\".\n\n    Examples\n    --------\n    > function fcn( v ) { console.log( v ); };\n    > var s = stridedArrayStream.objectMode( 3, [ 1, 2, 3 ], 1, 0 );\n    > var o = inspectSinkStream.objectMode( fcn );\n    > s.pipe( o );\n\n    See Also\n    --------\n    arrayStream\n","string2buffer":"\nstring2buffer( str[, encoding] )\n    Allocates a buffer containing a provided string.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    encoding: string (optional)\n        Character encoding. Default: 'utf8'.\n\n    Returns\n    -------\n    out: Buffer\n        Buffer instance.\n\n    Examples\n    --------\n    > var b = string2buffer( 'beep boop' )\n    <Buffer>\n    > b = string2buffer( '7468697320697320612074c3a97374', 'hex' );\n    > b.toString()\n    'this is a tést'\n\n    See Also\n    --------\n    Buffer, array2buffer, arraybuffer2buffer, copyBuffer\n","sub2ind":"\nsub2ind( shape, ...subscript[, options] )\n    Converts subscripts to a linear index.\n\n    Parameters\n    ----------\n    shape: ArrayLike\n        Array shape.\n\n    subscript: ...integer\n        Subscripts.\n\n    options: Object (optional)\n        Options.\n\n    options.order: string (optional)\n        Specifies whether an array is row-major (C-style) or column-major\n        (Fortran style). Default: 'row-major'.\n\n    options.mode: string|Array<string> (optional)\n        Specifies how to handle subscripts which exceed array dimensions. If\n        equal to 'throw', the function throws an error when a subscript exceeds\n        array dimensions. If equal to 'wrap', the function wraps around\n        subscripts exceeding array dimensions using modulo arithmetic. If equal\n        to 'clamp', the function sets subscripts exceeding array dimensions to\n        either `0` (minimum index) or the maximum index along a particular\n        dimension. If provided a mode array, each array element specifies the\n        mode for a corresponding array dimension. If provided fewer modes than\n        dimensions, the function recycles modes using modulo arithmetic.\n        Default: [ 'throw' ].\n\n    Returns\n    -------\n    idx: integer\n        Linear index.\n\n    Examples\n    --------\n    > var d = [ 3, 3, 3 ];\n    > var idx = sub2ind( d, 1, 2, 2 )\n    17\n\n    See Also\n    --------\n    array, ndarray, ind2sub\n","SUTHAHARAN_MULTI_HOP_SENSOR_NETWORK":"\nSUTHAHARAN_MULTI_HOP_SENSOR_NETWORK()\n    Returns a dataset consisting of labeled wireless sensor network data set\n    collected from a multi-hop wireless sensor network deployment using TelosB\n    motes.\n\n    Humidity and temperature measurements were collected at 5 second intervals\n    over a six hour period on July 10, 2010.\n\n    Temperature is in degrees Celsius.\n\n    Humidity is temperature corrected relative humidity, ranging from 0-100%.\n\n    The label '0' denotes normal data, and the label '1' denotes an introduced\n    event.\n\n    If a mote was an indoor sensor, the corresponding indicator is '1'. If a\n    mote was an outdoor sensor, the indoor indicator is '0'.\n\n    Returns\n    -------\n    out: Array<Object>\n        Sensor data.\n\n    Examples\n    --------\n    > var data = SUTHAHARAN_MULTI_HOP_SENSOR_NETWORK()\n    [{...}, {...}, ...]\n\n    References\n    ----------\n    - Suthaharan, Shan, Mohammed Alzahrani, Sutharshan Rajasegarar, Christopher\n    Leckie, and Marimuthu Palaniswami. 2010. \"Labelled data collection for\n    anomaly detection in wireless sensor networks.\" In _Proceedings of the Sixth\n    International Conference on Intelligent Sensors, Sensor Networks and\n    Information Processing (ISSNIP 2010)_. Brisbane, Australia: IEEE.\n\n    * If you use the data for publication or third party consumption, please\n    cite the listed reference.\n\n    See Also\n    --------\n    SUTHAHARAN_SINGLE_HOP_SENSOR_NETWORK\n","SUTHAHARAN_SINGLE_HOP_SENSOR_NETWORK":"\nSUTHAHARAN_SINGLE_HOP_SENSOR_NETWORK()\n    Returns a dataset consisting of labeled wireless sensor network data set\n    collected from a simple single-hop wireless sensor network deployment using\n    TelosB motes.\n\n    Humidity and temperature measurements were collected at 5 second intervals\n    over a six hour period on May 9, 2010.\n\n    Temperature is in degrees Celsius.\n\n    Humidity is temperature corrected relative humidity, ranging from 0-100%.\n\n    The label '0' denotes normal data, and the label '1' denotes an introduced\n    event.\n\n    If a mote was an indoor sensor, the corresponding indicator is '1'. If a\n    mote was an outdoor sensor, the indoor indicator is '0'.\n\n    Returns\n    -------\n    out: Array<Object>\n        Sensor data.\n\n    Examples\n    --------\n    > var data = SUTHAHARAN_SINGLE_HOP_SENSOR_NETWORK()\n    [{...}, {...}, ...]\n\n    References\n    ----------\n    - Suthaharan, Shan, Mohammed Alzahrani, Sutharshan Rajasegarar, Christopher\n    Leckie, and Marimuthu Palaniswami. 2010. \"Labelled data collection for\n    anomaly detection in wireless sensor networks.\" In _Proceedings of the Sixth\n    International Conference on Intelligent Sensors, Sensor Networks and\n    Information Processing (ISSNIP 2010)_. Brisbane, Australia: IEEE.\n\n    * If you use the data for publication or third party consumption, please\n    cite the listed reference.\n\n    See Also\n    --------\n    SUTHAHARAN_MULTI_HOP_SENSOR_NETWORK\n","Symbol":"\nSymbol( [description] )\n    Returns a symbol.\n\n    Unlike conventional constructors, this function does **not** support the\n    `new` keyword.\n\n    This function is only supported in environments which support symbols.\n\n    Parameters\n    ----------\n    description: string (optional)\n        Symbol description which can be used for debugging but not to access the\n        symbol itself.\n\n    Returns\n    -------\n    out: symbol\n        Symbol.\n\n    Examples\n    --------\n    > var s = ( Symbol ) ? Symbol( 'beep' ) : null\n\n","tabulate":"\ntabulate( collection )\n    Generates a frequency table.\n\n    The table is an array of arrays where each sub-array corresponds to a unique\n    value in the input collection. Each sub-array is structured as follows:\n\n    - 0: unique value\n    - 1: value count\n    - 2: frequency percentage\n\n    If provided an empty collection, the function returns an empty array.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection to tabulate. If provided an object, the object must be\n        array-like (excluding strings and functions).\n\n    Returns\n    -------\n    out: Array<Array>|Array\n        Frequency table.\n\n    Examples\n    --------\n    > var collection = [ 'beep', 'boop', 'foo', 'beep' ];\n    > var out = tabulate( collection )\n    [ [ 'beep', 2, 0.5 ], [ 'boop', 1, 0.25 ], [ 'foo', 1, 0.25 ] ]\n\n    See Also\n    --------\n    countBy, groupBy, tabulateBy\n","tabulateBy":"\ntabulateBy( collection, [options,] indicator )\n    Generates a frequency table according to an indicator function.\n\n    When invoked, the indicator function is provided two arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n\n    The table is an array of arrays where each sub-array corresponds to a unique\n    value in the input collection. Each sub-array is structured as follows:\n\n    - 0: unique value\n    - 1: value count\n    - 2: frequency percentage\n\n    If provided an empty collection, the function returns an empty array.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection to tabulate. If provided an object, the object must be\n        array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Options.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    indicator: Function\n        Indicator function specifying how to categorize a collection element.\n\n    Returns\n    -------\n    out: Array<Array>|Array\n        Frequency table.\n\n    Examples\n    --------\n    > function indicator( value ) { return value[ 0 ]; };\n    > var collection = [ 'beep', 'boop', 'foo', 'beep' ];\n    > var out = tabulateBy( collection, indicator )\n    [ [ 'b', 3, 0.75 ], [ 'f', 1, 0.25 ] ]\n\n    See Also\n    --------\n    countBy, groupBy, tabulate\n","tabulateByAsync":"\ntabulateByAsync( collection, [options,] indicator, done )\n    Generates a frequency table according to an indicator function.\n\n    The table is an array of arrays where each sub-array corresponds to a unique\n    value in the input collection. Each sub-array is structured as follows:\n\n    - 0: unique value\n    - 1: value count\n    - 2: frequency percentage\n\n    When invoked, the indicator function is provided a maximum of four\n    arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n    - `next`: a callback to be invoked after processing a collection `value`\n\n    The actual number of provided arguments depends on function length. If the\n    indicator function accepts two arguments, the indicator function is\n    provided:\n\n    - `value`\n    - `next`\n\n    If the indicator function accepts three arguments, the indicator function is\n    provided:\n\n    - `value`\n    - `index`\n    - `next`\n\n    For every other indicator function signature, the indicator function is\n    provided all four arguments.\n\n    The `next` callback takes two arguments:\n\n    - `error`: error argument\n    - `group`: value group\n\n    If an indicator function calls the `next` callback with a truthy `error`\n    argument, the function suspends execution and immediately calls the `done`\n    callback for subsequent `error` handling.\n\n    If provided an empty collection, the function calls the `done` callback with\n    an empty array as the second argument.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    The function does not support dynamic collection resizing.\n\n    The function does not skip `undefined` elements.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    indicator: Function\n        Indicator function specifying how to categorize a collection element.\n\n    done: Function\n        A callback invoked either upon processing all collection elements or\n        upon encountering an error.\n\n    Examples\n    --------\n    // Basic usage:\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) ? 'even': 'odd' );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var arr = [ 3000, 2500, 1000, 750 ];\n    > tabulateByAsync( arr, indicator, done )\n    750\n    1000\n    2500\n    3000\n    [ [ 'odd', 2, 0.5 ], [ 'even', 2, 0.5 ] ]\n\n    // Limit number of concurrent invocations:\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) ? 'even' : 'odd' );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var opts = { 'limit': 2 };\n    > var arr = [ 3000, 2500, 1000, 750 ];\n    > tabulateByAsync( arr, opts, indicator, done )\n    2500\n    3000\n    1000\n    750\n    [ [ 'odd', 2, 0.5 ], [ 'even', 2, 0.5 ] ]\n\n    // Process sequentially:\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) ? 'even' : 'odd' );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var opts = { 'series': true };\n    > var arr = [ 3000, 2500, 1000, 750 ];\n    > tabulateByAsync( arr, opts, indicator, done )\n    3000\n    2500\n    1000\n    750\n    [ [ 'even', 2, 0.5 ], [ 'odd', 2, 0.5 ] ]\n\n\ntabulateByAsync.factory( [options,] indicator )\n    Returns a function which generates a frequency table according to an\n    indicator function.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    indicator: Function\n        Indicator function specifying how to categorize a collection element.\n\n    Returns\n    -------\n    out: Function\n        A function which generates a frequency table according to an indicator\n        function.\n\n    Examples\n    --------\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) ? 'even' : 'odd' );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = tabulateByAsync.factory( opts, indicator );\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var arr = [ 3000, 2500, 1000, 750 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    750\n    [ [ 'even', 2, 0.5 ], [ 'odd', 2, 0.5 ] ]\n    > arr = [ 2000, 1500, 1000, 750 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    750\n    [ [ 'even', 2, 0.5 ], [ 'odd', 2, 0.5 ] ]\n\n    See Also\n    --------\n    countByAsync, groupByAsync, tabulateBy\n","tabulateByAsync.factory":"\ntabulateByAsync.factory( [options,] indicator )\n    Returns a function which generates a frequency table according to an\n    indicator function.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.limit: integer (optional)\n        Maximum number of pending invocations. Default: Infinity.\n\n    options.series: boolean (optional)\n        Boolean indicating whether to process each collection element\n        sequentially. Default: false.\n\n    options.thisArg: any (optional)\n        Execution context.\n\n    indicator: Function\n        Indicator function specifying how to categorize a collection element.\n\n    Returns\n    -------\n    out: Function\n        A function which generates a frequency table according to an indicator\n        function.\n\n    Examples\n    --------\n    > function indicator( value, index, next ) {\n    ...     setTimeout( onTimeout, value );\n    ...     function onTimeout() {\n    ...         console.log( value );\n    ...         next( null, ( index%2 === 0 ) ? 'even' : 'odd' );\n    ...     }\n    ... };\n    > var opts = { 'series': true };\n    > var f = tabulateByAsync.factory( opts, indicator );\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > var arr = [ 3000, 2500, 1000, 750 ];\n    > f( arr, done )\n    3000\n    2500\n    1000\n    750\n    [ [ 'even', 2, 0.5 ], [ 'odd', 2, 0.5 ] ]\n    > arr = [ 2000, 1500, 1000, 750 ];\n    > f( arr, done )\n    2000\n    1500\n    1000\n    750\n    [ [ 'even', 2, 0.5 ], [ 'odd', 2, 0.5 ] ]\n\n    See Also\n    --------\n    countByAsync, groupByAsync, tabulateBy\n","tic":"\ntic()\n    Returns a high-resolution time.\n\n    The returned array has the following format: `[seconds, nanoseconds]`.\n\n    Returns\n    -------\n    out: Array<integer>\n        High resolution time.\n\n    Examples\n    --------\n    > var t = tic()\n    [ <number>, <number> ]\n\n    See Also\n    --------\n    toc\n","timeit":"\ntimeit( code, [options,] clbk )\n    Times a snippet.\n\n    If the `asynchronous` option is set to `true`, the implementation assumes\n    that `before`, `after`, and `code` snippets are all asynchronous.\n    Accordingly, these snippets should invoke a `next( [error] )` callback\n    once complete. The implementation wraps the snippet within a function\n    accepting two arguments: `state` and `next`.\n\n    The `state` parameter is simply an empty object which allows the `before`,\n    `after`, and `code` snippets to share state.\n\n    Notes:\n\n    - Snippets always run in strict mode.\n    - Always verify results. Doing so prevents the compiler from performing dead\n      code elimination and other optimization techniques, which would render\n      timing results meaningless.\n    - Executed code is not sandboxed and has access to the global state. You are\n      strongly advised against timing untrusted code. To time untrusted code,\n      do so in an isolated environment (e.g., a separate process with restricted\n      access to both global state and the host environment).\n    - Wrapping asynchronous code does add overhead, but, in most cases, the\n      overhead should be negligible compared to the execution cost of the timed\n      snippet.\n    - When the `asynchronous` options is `true`, ensure that the main `code`\n      snippet is actually asynchronous. If a snippet releases the zalgo, an\n      error complaining about exceeding the maximum call stack size is highly\n      likely.\n    - While many benchmark frameworks calculate various statistics over raw\n      timing results (e.g., mean and standard deviation), do not do this.\n      Instead, consider the fastest time an approximate lower bound for how fast\n      an environment can execute a snippet. Slower times are more likely\n      attributable to other processes interfering with timing accuracy rather\n      than attributable to variability in JavaScript's speed. In which case, the\n      minimum time is most likely the only result of interest. When considering\n      all raw timing results, apply common sense rather than statistics.\n\n    Parameters\n    ----------\n    code: string\n         Snippet to time.\n\n    options: Object (optional)\n        Options.\n\n    options.before: string (optional)\n        Setup code. Default: `''`.\n\n    options.after: string (optional)\n        Cleanup code. Default: `''`.\n\n    options.iterations: integer|null (optional)\n        Number of iterations. If `null`, the number of iterations is determined\n        by trying successive powers of `10` until the total time is at least\n        `0.1` seconds. Default: `1e6`.\n\n    options.repeats: integer (optional)\n        Number of repeats. Default: `3`.\n\n    options.asynchronous: boolean (optional)\n        Boolean indicating whether a snippet is asynchronous. Default: `false`.\n\n    clbk: Function\n        Callback to invoke upon completion.\n\n    Examples\n    --------\n    > var code = 'var x = Math.pow( Math.random(), 3 );';\n    > code += 'if ( x !== x ) {';\n    > code += 'throw new Error( \\'Something went wrong.\\' );';\n    > code += '}';\n    > function done( error, results ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.dir( results );\n    ... };\n    > timeit( code, done )\n    e.g.,\n    {\n        \"iterations\": 1000000,\n        \"repeats\": 3,\n        \"min\": [ 0, 135734733 ],    // [seconds,nanoseconds]\n        \"elapsed\": 0.135734733,     // seconds\n        \"rate\": 7367311.062526641,  // iterations/second\n        \"times\": [                  // raw timing results\n            [ 0, 145641393 ],\n            [ 0, 135734733 ],\n            [ 0, 140462721 ]\n        ]\n    }\n\n","tmpdir":"\ntmpdir()\n    Returns the directory for storing temporary files.\n\n    Returns\n    -------\n    dir: string\n        Directory for temporary files.\n\n    Examples\n    --------\n    > var dir = tmpdir()\n    e.g., '/path/to/temporary/files/directory'\n\n    See Also\n    --------\n    configdir, homedir\n","toc":"\ntoc( time )\n    Returns a high-resolution time difference, where `time` is a two-element\n    array with format `[seconds, nanoseconds]`.\n\n    Similar to `time`, the returned array has format `[seconds, nanoseconds]`.\n\n    Parameters\n    ----------\n    time: Array<integer>\n        High-resolution time.\n\n    Returns\n    -------\n    out: Array<integer>\n        High resolution time difference.\n\n    Examples\n    --------\n    > var start = tic();\n    > var delta = toc( start )\n    [ <number>, <number> ]\n\n    See Also\n    --------\n    tic\n","tokenize":"\ntokenize( str[, keepWhitespace] )\n    Tokenizes a string.\n\n    To include whitespace characters (spaces, tabs, line breaks) in the output\n    array, set `keepWhitespace` to `true`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    keepWhitespace: boolean (optional)\n        Boolean indicating whether whitespace characters should be returned as\n        part of the token array. Default: `false`.\n\n    Returns\n    -------\n    out: Array\n        Array of tokens.\n\n    Examples\n    --------\n    > var out = tokenize( 'Hello Mrs. Maple, could you call me back?' )\n    [ 'Hello', 'Mrs.', 'Maple', ',', 'could', 'you', 'call', 'me', 'back', '?' ]\n\n    > out = tokenize( 'Hello World!', true )\n    [ 'Hello', ' ', 'World', '!' ]\n\n","transformStream":"\ntransformStream( [options] )\n    Returns a transform stream.\n\n    If a transform function is not provided, the returned stream will be a\n    simple pass through stream.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.transform: Function (optional)\n        Callback to invoke upon receiving a new chunk.\n\n    options.flush: Function (optional)\n        Callback to invoke after receiving all chunks and prior to a stream\n        closing.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.allowHalfOpen: boolean (optional)\n        Specifies whether a stream should remain open even if one side ends.\n        Default: false.\n\n    options.decodeStrings: boolean (optional)\n        Specifies whether to decode strings into Buffer objects when writing.\n        Default: true.\n\n    Returns\n    -------\n    stream: TransformStream\n        Transform stream.\n\n    Examples\n    --------\n    > var s = transformStream();\n    > s.write( 'a' );\n    > s.write( 'b' );\n    > s.write( 'c' );\n    > s.end();\n\n\ntransformStream.factory( [options] )\n    Returns a function for creating transform streams.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.allowHalfOpen: boolean (optional)\n        Specifies whether a stream should remain open even if one side ends.\n        Default: false.\n\n    options.decodeStrings: boolean (optional)\n        Specifies whether to decode strings into Buffer objects when writing.\n        Default: true.\n\n    Returns\n    -------\n    createStream( transform[, flush] ): Function\n        Function for creating transform streams.\n\n    Examples\n    --------\n    > var opts = { 'highWaterMark': 64 };\n    > var createStream = transformStream.factory( opts );\n    > function fcn( chunk, enc, cb ) { cb( null, chunk.toString()+'-beep' ); };\n    > var s = createStream( fcn );\n    > s.write( 'a' );\n    > s.write( 'b' );\n    > s.write( 'c' );\n    > s.end();\n\n\ntransformStream.objectMode( [options] )\n    Returns an \"objectMode\" transform stream.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.transform: Function (optional)\n        Callback to invoke upon receiving a new chunk.\n\n    options.flush: Function (optional)\n        Callback to invoke after receiving all chunks and prior to a stream\n        closing.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.allowHalfOpen: boolean (optional)\n        Specifies whether a stream should remain open even if one side ends.\n        Default: false.\n\n    options.decodeStrings: boolean (optional)\n        Specifies whether to decode strings into Buffer objects when writing.\n        Default: true.\n\n    Returns\n    -------\n    stream: TransformStream\n        Transform stream operating in \"objectMode\".\n\n    Examples\n    --------\n    > var s = transformStream.objectMode();\n    > s.write( { 'value': 'a' } );\n    > s.write( { 'value': 'b' } );\n    > s.write( { 'value': 'c' } );\n    > s.end();\n\n\ntransformStream.ctor( [options] )\n    Returns a custom transform stream constructor.\n\n    If provided `transform` and `flush` options, these methods are bound to the\n    constructor prototype.\n\n    If not provided a transform function, the returned constructor creates\n    simple pass through streams.\n\n    The returned constructor accepts the same options as the constructor\n    factory, *except* for the `transform` and `flush` options, which are not\n    supported.\n\n    Any options provided to the constructor *override* options provided to the\n    constructor factory.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.transform: Function (optional)\n        Callback to invoke upon receiving a new chunk.\n\n    options.flush: Function (optional)\n        Callback to invoke after receiving all chunks and prior to a stream\n        closing.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.allowHalfOpen: boolean (optional)\n        Specifies whether a stream should remain open even if one side ends.\n        Default: false.\n\n    options.decodeStrings: boolean (optional)\n        Specifies whether to decode strings into Buffer objects when writing.\n        Default: true.\n\n    Returns\n    -------\n    ctor: Function\n        Custom transform stream constructor.\n\n    Examples\n    --------\n    > function fcn( chunk, enc, cb ) { cb( null, chunk.toString()+'-beep' ); };\n    > var opts = { 'highWaterMark': 64, 'transform': fcn };\n    > var customStream = transformStream.ctor( opts );\n    > var s = customStream();\n    > s.write( 'a' );\n    > s.write( 'b' );\n    > s.write( 'c' );\n    > s.end();\n\n","transformStream.factory":"\ntransformStream.factory( [options] )\n    Returns a function for creating transform streams.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.allowHalfOpen: boolean (optional)\n        Specifies whether a stream should remain open even if one side ends.\n        Default: false.\n\n    options.decodeStrings: boolean (optional)\n        Specifies whether to decode strings into Buffer objects when writing.\n        Default: true.\n\n    Returns\n    -------\n    createStream( transform[, flush] ): Function\n        Function for creating transform streams.\n\n    Examples\n    --------\n    > var opts = { 'highWaterMark': 64 };\n    > var createStream = transformStream.factory( opts );\n    > function fcn( chunk, enc, cb ) { cb( null, chunk.toString()+'-beep' ); };\n    > var s = createStream( fcn );\n    > s.write( 'a' );\n    > s.write( 'b' );\n    > s.write( 'c' );\n    > s.end();\n\n","transformStream.objectMode":"\ntransformStream.objectMode( [options] )\n    Returns an \"objectMode\" transform stream.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.transform: Function (optional)\n        Callback to invoke upon receiving a new chunk.\n\n    options.flush: Function (optional)\n        Callback to invoke after receiving all chunks and prior to a stream\n        closing.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.allowHalfOpen: boolean (optional)\n        Specifies whether a stream should remain open even if one side ends.\n        Default: false.\n\n    options.decodeStrings: boolean (optional)\n        Specifies whether to decode strings into Buffer objects when writing.\n        Default: true.\n\n    Returns\n    -------\n    stream: TransformStream\n        Transform stream operating in \"objectMode\".\n\n    Examples\n    --------\n    > var s = transformStream.objectMode();\n    > s.write( { 'value': 'a' } );\n    > s.write( { 'value': 'b' } );\n    > s.write( { 'value': 'c' } );\n    > s.end();\n\n","transformStream.ctor":"\ntransformStream.ctor( [options] )\n    Returns a custom transform stream constructor.\n\n    If provided `transform` and `flush` options, these methods are bound to the\n    constructor prototype.\n\n    If not provided a transform function, the returned constructor creates\n    simple pass through streams.\n\n    The returned constructor accepts the same options as the constructor\n    factory, *except* for the `transform` and `flush` options, which are not\n    supported.\n\n    Any options provided to the constructor *override* options provided to the\n    constructor factory.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.transform: Function (optional)\n        Callback to invoke upon receiving a new chunk.\n\n    options.flush: Function (optional)\n        Callback to invoke after receiving all chunks and prior to a stream\n        closing.\n\n    options.objectMode: boolean (optional)\n        Specifies whether a stream should operate in \"objectMode\". Default:\n        false.\n\n    options.highWaterMark: integer (optional)\n        Specifies the maximum number of bytes to store in an internal buffer\n        before ceasing to push downstream.\n\n    options.allowHalfOpen: boolean (optional)\n        Specifies whether a stream should remain open even if one side ends.\n        Default: false.\n\n    options.decodeStrings: boolean (optional)\n        Specifies whether to decode strings into Buffer objects when writing.\n        Default: true.\n\n    Returns\n    -------\n    ctor: Function\n        Custom transform stream constructor.\n\n    Examples\n    --------\n    > function fcn( chunk, enc, cb ) { cb( null, chunk.toString()+'-beep' ); };\n    > var opts = { 'highWaterMark': 64, 'transform': fcn };\n    > var customStream = transformStream.ctor( opts );\n    > var s = customStream();\n    > s.write( 'a' );\n    > s.write( 'b' );\n    > s.write( 'c' );\n    > s.end();\n\n","trim":"\ntrim( str )\n    Trims whitespace from the beginning and end of a `string`.\n\n    \"Whitespace\" is defined as the following characters:\n\n    - \\f\n    - \\n\n    - \\r\n    - \\t\n    - \\v\n    - \\u0020\n    - \\u00a0\n    - \\u1680\n    - \\u2000-\\u200a\n    - \\u2028\n    - \\u2029\n    - \\u202f\n    - \\u205f\n    - \\u3000\n    - \\ufeff\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Trimmed string.\n\n    Examples\n    --------\n    > var out = trim( ' \\t\\t\\n  Beep \\r\\n\\t  ' )\n    'Beep'\n\n    See Also\n    --------\n    ltrim, pad, rtrim\n","trycatch":"\ntrycatch( x, y )\n    If a function does not throw, returns the function return value; otherwise,\n    returns `y`.\n\n    Parameters\n    ----------\n    x: Function\n        Function to try invoking.\n\n    y: any\n        Value to return if a function throws an error.\n\n    Returns\n    -------\n    z: any\n        Either the return value of `x` or the provided argument `y`.\n\n    Examples\n    --------\n    > function x() {\n    ...     if ( base.random.randu() < 0.5 ) {\n    ...         throw new Error( 'beep' );\n    ...     }\n    ...     return 1.0;\n    ... };\n    > var z = trycatch( x, -1.0 )\n    <number>\n\n    See Also\n    --------\n    trycatchAsync, trythen\n","trycatchAsync":"\ntrycatchAsync( x, y, done )\n    If a function does not return an error, invokes a callback with the function\n    result; otherwise, invokes a callback with a value `y`.\n\n    A function `x` is provided a single argument:\n\n    - clbk: callback to invoke upon function completion\n\n    The callback function accepts two arguments:\n\n    - error: error object\n    - result: function result\n\n    The `done` callback is invoked upon function completion and is provided two\n    arguments:\n\n    - error: error object\n    - result: either the result of `x` or the provided argument `y`\n\n    If `x` invokes `clbk` with an error argument, the function invokes the\n    `done` callback with both the error and the argument `y`.\n\n    If `x` does not invoke `clbk` with an error argument, the function invokes\n    the `done` callback with a first argument equal to `null` and the function\n    `result`.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    x: Function\n        Function to invoke.\n\n    y: any\n        Value to return if `x` returns an error.\n\n    done: Function\n        Callback to invoke upon completion.\n\n    Examples\n    --------\n    > function x( clbk ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         clbk( new Error( 'beep' ) );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         // process error...\n    ...     }\n    ...     console.log( result );\n    ... };\n    > trycatchAsync( x, 'boop', done )\n    'boop'\n\n    See Also\n    --------\n    trycatch, trythenAsync\n","tryFunction":"\ntryFunction( fcn[, thisArg] )\n    Wraps a function in a try/catch block.\n\n    If provided an asynchronous function, the returned function only traps\n    errors which occur during the current event loop tick.\n\n    If a function throws a literal, the literal is serialized as a string and\n    returned as an `Error` object.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to wrap.\n\n    thisArg: any (optional)\n        Function context.\n\n    Returns\n    -------\n    out: Function\n        Wrapped function.\n\n    Examples\n    --------\n    > function fcn() { throw new Error( 'beep boop' ); };\n    > var f = tryFunction( fcn );\n    > var out = f();\n    > out.message\n    'beep boop'\n\n","tryRequire":"\ntryRequire( id )\n    Wraps `require` in a `try/catch` block.\n\n    This function traps and returns any errors encountered when attempting to\n    require a module.\n\n    Use caution when attempting to resolve a relative path or a local module.\n    This function attempts to resolve a module from its current path. Thus, the\n    function is unable to resolve anything which is not along its search path.\n    For local requires, use an absolute file path.\n\n    Parameters\n    ----------\n    id: string\n        Module id.\n\n    Returns\n    -------\n    out: any|Error\n        Resolved module or an `Error`.\n\n    Examples\n    --------\n    > var out = tryRequire( '_unknown_module_id_' )\n    <Error>\n\n","trythen":"\ntrythen( x, y )\n    If a function does not throw, returns the function return value; otherwise,\n    returns the value returned by a second function `y`.\n\n    The function `y` is provided a single argument:\n\n    - error: the error thrown by `x`\n\n    Parameters\n    ----------\n    x: Function\n        Function to try invoking.\n\n    y: Function\n        Function to invoke if an initial function throws an error.\n\n    Returns\n    -------\n    z: any\n        The return value of either `x` or `y`.\n\n    Examples\n    --------\n    > function x() {\n    ...     if ( base.random.randu() < 0.5 ) {\n    ...         throw new Error( 'beep' );\n    ...     }\n    ...     return 1.0;\n    ... };\n    > function y() {\n    ...     return -1.0;\n    ... };\n    > var z = trythen( x, y )\n    <number>\n\n    See Also\n    --------\n    trycatch, trythenAsync\n","trythenAsync":"\ntrythenAsync( x, y, done )\n    If a function does not return an error, invokes a callback with the function\n    result; otherwise, invokes a second function `y`.\n\n    A function `x` is provided a single argument:\n\n    - clbk: callback to invoke upon function completion\n\n    The callback function accepts any number of arguments, with the first\n    argument reserved for providing an error.\n\n    If the error argument is falsy, the function invokes a `done` callback with\n    its first argument as `null` and all other provided arguments.\n\n    If the error argument is truthy, the function invokes a function `y`. The\n    number of arguments provided to `y` depends on the function's length. If `y`\n    is a unary function, `y` is provided a single argument:\n\n    - clbk: callback to invoke upon function completion\n\n    Otherwise, `y` is provided two arguments:\n\n    - error: the error from `x`\n    - clbk: callback to invoke upon function completion\n\n    The callback function accepts any number of arguments, with the first\n    argument reserved for providing an error.\n\n    If the error argument is falsy, the `done` callback is invoked with its\n    first argument equal to `null` and all other arguments provided by `y`.\n\n    If the error argument is truthy, the `done` callback is invoked with only\n    the error argument provided by `y`.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    x: Function\n        Function to invoke.\n\n    y: Function\n        Function to invoke if `x` returns an error.\n\n    done: Function\n        Callback to invoke upon completion.\n\n    Examples\n    --------\n    > function x( clbk ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         clbk( new Error( 'beep' ) );\n    ...     }\n    ... };\n    > function y( clbk ) {\n    ...     setTimeout( onTimeout, 0 );\n    ...     function onTimeout() {\n    ...         clbk( null, 'boop' );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > trythenAsync( x, y, done )\n    'boop'\n\n    See Also\n    --------\n    trycatchAsync, trythen\n","ttest":"\nttest( x[, y][, options] )\n    Computes a one-sample or paired Student's t test.\n\n    When no `y` is supplied, the function performs a one-sample t-test for the\n    null hypothesis that the data in array or typed array `x` is drawn from a\n    normal distribution with mean zero and unknown variance.\n\n    When array or typed array `y` is supplied, the function tests whether the\n    differences `x - y` come from a normal distribution with mean zero and\n    unknown variance via the paired t-test.\n\n    The returned object comes with a `.print()` method which when invoked will\n    print a formatted output of the results of the hypothesis test.\n\n    Parameters\n    ----------\n    x: Array<number>\n        Data array.\n\n    y: Array<number> (optional)\n        Paired data array.\n\n    options: Object (optional)\n        Options.\n\n    options.alpha: number (optional)\n        Number in the interval `[0,1]` giving the significance level of the\n        hypothesis test. Default: `0.05`.\n\n    options.alternative: string (optional)\n        Indicates whether the alternative hypothesis is that the mean of `x` is\n        larger than `mu` (`greater`), smaller than `mu` (`less`) or equal to\n        `mu` (`two-sided`). Default: `'two-sided'`.\n\n    options.mu: number (optional)\n        Hypothesized true mean under the null hypothesis. Set this option to\n        test whether the data comes from a distribution with the specified `mu`.\n        Default: `0`.\n\n    Returns\n    -------\n    out: Object\n        Test result object.\n\n    out.alpha: number\n        Used significance level.\n\n    out.rejected: boolean\n        Test decision.\n\n    out.pValue: number\n        p-value of the test.\n\n    out.statistic: number\n        Value of test statistic.\n\n    out.ci: Array<number>\n        1-alpha confidence interval for the mean.\n\n    out.nullValue: number\n        Assumed mean under H0 (or difference in means when `y` is supplied).\n\n    out.alternative: string\n        Alternative hypothesis (`two-sided`, `less` or `greater`).\n\n    out.df: number\n        Degrees of freedom.\n\n    out.mean: number\n        Sample mean of `x` or `x - y`, respectively.\n\n    out.sd: number\n        Standard error of the mean.\n\n    out.method: string\n        Name of test.\n\n    out.print: Function\n        Function to print formatted output.\n\n    Examples\n    --------\n    // One-sample t-test:\n    > var rnorm = base.random.normal.factory( 0.0, 2.0, { 'seed': 5776 });\n    > var x = new Array( 100 );\n    > for ( var i = 0; i < x.length; i++ ) {\n    ...     x[ i ] = rnorm();\n    ... }\n    > var out = ttest( x )\n    {\n        rejected: false,\n        pValue: ~0.722,\n        statistic: ~0.357,\n        ci: [~-0.333,~0.479],\n        // ...\n    }\n\n    // Paired t-test:\n    > rnorm = base.random.normal.factory( 1.0, 2.0, { 'seed': 786 });\n    > x = new Array( 100 );\n    > var y = new Array( 100 );\n    > for ( i = 0; i < x.length; i++ ) {\n    ...     x[ i ] = rnorm();\n    ...     y[ i ] = rnorm();\n    ... }\n    > out = ttest( x, y )\n    {\n        rejected: false,\n        pValue: ~0.191,\n        statistic: ~1.315,\n        ci: [ ~-0.196, ~0.964 ],\n        // ...\n    }\n\n    // Print formatted output:\n    > var table = out.print()\n    Paired t-test\n\n    Alternative hypothesis: True difference in means is not equal to 0\n\n        pValue: 0.1916\n        statistic: 1.3148\n        df: 99\n        95% confidence interval: [-0.1955,0.9635]\n\n    Test Decision: Fail to reject null in favor of alternative at 5%\n    significance level\n\n    // Choose custom significance level:\n    > arr = [ 2, 4, 3, 1, 0 ];\n    > out = ttest( arr, { 'alpha': 0.01 });\n    > table = out.print()\n    One-sample t-test\n\n    Alternative hypothesis: True mean is not equal to 0\n\n        pValue: 0.0474\n        statistic: 2.8284\n        df: 4\n        99% confidence interval: [-1.2556,5.2556]\n\n    Test Decision: Fail to reject null in favor of alternative at 1%\n    significance level\n\n    // Test for a mean equal to five:\n    > var arr = [ 4, 4, 6, 6, 5 ];\n    > out = ttest( arr, { 'mu': 5 })\n    {\n        rejected: false,\n        pValue: 1,\n        statistic: 0,\n        ci: [ ~3.758, ~6.242 ],\n        // ...\n    }\n\n    // Perform one-sided tests:\n    > arr = [ 4, 4, 6, 6, 5 ];\n    > out = ttest( arr, { 'alternative': 'less' });\n    > table = out.print()\n    One-sample t-test\n\n    Alternative hypothesis: True mean is less than 0\n\n        pValue: 0.9998\n        statistic: 11.1803\n        df: 4\n        95% confidence interval: [-Infinity,5.9534]\n\n    Test Decision: Fail to reject null in favor of alternative at 5%\n    significance level\n\n    > out = ttest( arr, { 'alternative': 'greater' });\n    > table = out.print()\n    One-sample t-test\n\n    Alternative hypothesis: True mean is greater than 0\n\n        pValue: 0.0002\n        statistic: 11.1803\n        df: 4\n        95% confidence interval: [4.0466,Infinity]\n\n    Test Decision: Reject null in favor of alternative at 5% significance level\n\n    See Also\n    --------\n    ttest2\n","ttest2":"\nttest2( x, y[, options] )\n    Computes a two-sample Student's t test.\n\n    By default, the function performs a two-sample t-test for the null\n    hypothesis that the data in arrays or typed arrays `x` and `y` is\n    independently drawn from normal distributions with equal means.\n\n    The returned object comes with a `.print()` method which when invoked will\n    print a formatted output of the results of the hypothesis test.\n\n    Parameters\n    ----------\n    x: Array<number>\n        First data array.\n\n    y: Array<number>\n        Second data array.\n\n    options: Object (optional)\n        Options.\n\n    options.alpha: number (optional)\n        Number in the interval `[0,1]` giving the significance level of the\n        hypothesis test. Default: `0.05`.\n\n    options.alternative: string (optional)\n        Either `two-sided`, `less` or `greater`. Indicates whether the\n        alternative hypothesis is that `x` has a larger mean than `y`\n        (`greater`), `x` has a smaller mean than `y` (`less`) or the means are\n        the same (`two-sided`). Default: `'two-sided'`.\n\n    options.difference: number (optional)\n        Number denoting the difference in means under the null hypothesis.\n        Default: `0`.\n\n    options.variance: string (optional)\n        String indicating if the test should be conducted under the assumption\n        that the unknown variances of the normal distributions are `equal` or\n        `unequal`. As a default choice, the function carries out the Welch test\n        (using the Satterthwaite approximation for the degrees of freedom),\n        which does not have the requirement that the variances of the underlying\n        distributions are equal. If the equal variances assumption seems\n        warranted, set the option to `equal`. Default: `unequal`.\n\n    Returns\n    -------\n    out: Object\n        Test result object.\n\n    out.alpha: number\n        Used significance level.\n\n    out.rejected: boolean\n        Test decision.\n\n    out.pValue: number\n        p-value of the test.\n\n    out.statistic: number\n        Value of test statistic.\n\n    out.ci: Array<number>\n        1-alpha confidence interval for the mean.\n\n    out.nullValue: number\n        Assumed difference in means under H0.\n\n    out.xmean: number\n        Sample mean of `x`.\n\n    out.ymean: number\n        Sample mean of `y`.\n\n    out.alternative: string\n        Alternative hypothesis (`two-sided`, `less` or `greater`).\n\n    out.df: number\n        Degrees of freedom.\n\n    out.method: string\n        Name of test.\n\n    out.print: Function\n        Function to print formatted output.\n\n    Examples\n    --------\n    // Student's sleep data:\n    > var x = [ 0.7, -1.6, -0.2, -1.2, -0.1, 3.4, 3.7, 0.8, 0.0, 2.0 ];\n    > var y = [ 1.9, 0.8, 1.1, 0.1, -0.1, 4.4, 5.5, 1.6, 4.6, 3.4 ];\n    > var out = ttest2( x, y )\n    {\n        rejected: false,\n        pValue: ~0.079,\n        statistic: ~-1.861,\n        ci: [ ~-3.365, ~0.205 ],\n        // ...\n    }\n\n    // Print table output:\n    > var table = out.print()\n    Welch two-sample t-test\n\n    Alternative hypothesis: True difference in means is not equal to 0\n\n        pValue: 0.0794\n        statistic: -1.8608\n        95% confidence interval: [-3.3655,0.2055]\n\n    Test Decision: Fail to reject null in favor of alternative at 5%\n    significance level\n\n    // Choose a different significance level than `0.05`:\n    > out = ttest2( x, y, { 'alpha': 0.1 });\n    > table = out.print()\n    Welch two-sample t-test\n\n    Alternative hypothesis: True difference in means is not equal to 0\n\n        pValue: 0.0794\n        statistic: -1.8608\n        90% confidence interval: [-3.0534,-0.1066]\n\n    Test Decision: Reject null in favor of alternative at 10% significance level\n\n    // Perform one-sided tests:\n    > out = ttest2( x, y, { 'alternative': 'less' });\n    > table = out.print()\n    Welch two-sample t-test\n\n    Alternative hypothesis: True difference in means is less than 0\n\n        pValue: 0.0397\n        statistic: -1.8608\n        df: 17.7765\n        95% confidence interval: [-Infinity,-0.1066]\n\n    Test Decision: Reject null in favor of alternative at 5% significance level\n\n    > out = ttest2( x, y, { 'alternative': 'greater' });\n    > table = out.print()\n    Welch two-sample t-test\n\n    Alternative hypothesis: True difference in means is greater than 0\n\n        pValue: 0.9603\n        statistic: -1.8608\n        df: 17.7765\n        95% confidence interval: [-3.0534,Infinity]\n\n    Test Decision: Fail to reject null in favor of alternative at 5%\n    significance level\n\n    // Run tests with equal variances assumption:\n    > x = [ 2, 3, 1, 4 ];\n    > y = [ 1, 2, 3, 1, 2, 5, 3, 4 ];\n    > out = ttest2( x, y, { 'variance': 'equal' });\n    > table = out.print()\n    Two-sample t-test\n\n    Alternative hypothesis: True difference in means is not equal to 0\n\n        pValue: 0.8848\n        statistic: -0.1486\n        df: 10\n        95% confidence interval: [-1.9996,1.7496]\n\n    Test Decision: Fail to reject null in favor of alternative at 5%\n    significance level\n\n    // Test for a difference in means besides zero:\n    > var rnorm = base.random.normal.factory({ 'seed': 372 });\n    > x = new Array( 100 );\n    > for ( i = 0; i < x.length; i++ ) {\n    ...     x[ i ] = rnorm( 2.0, 3.0 );\n    ... }\n    > y = new Array( 100 );\n    > for ( i = 0; i < x.length; i++ ) {\n    ...     y[ i ] = rnorm( 1.0, 3.0 );\n    ... }\n    > out = ttest2( x, y, { 'difference': 1.0, 'variance': 'equal' })\n    {\n        rejected: false,\n        pValue: ~0.642,\n        statistic: ~-0.466,\n        ci: [ ~-0.0455, ~1.646 ],\n        // ...\n    }\n\n    See Also\n    --------\n    ttest\n","TWO_PI":"\nTWO_PI\n    The mathematical constant `π` times `2`.\n\n    Examples\n    --------\n    > TWO_PI\n    6.283185307179586\n\n    See Also\n    --------\n    PI\n","typedarray":"\ntypedarray( [dtype] )\n    Creates a typed array.\n\n    The function supports the following data types:\n\n    - float64: double-precision floating-point numbers (IEEE 754)\n    - float32: single-precision floating-point numbers (IEEE 754)\n    - int32: 32-bit two's complement signed integers\n    - uint32: 32-bit unsigned integers\n    - int16: 16-bit two's complement signed integers\n    - uint16: 16-bit unsigned integers\n    - int8: 8-bit two's complement signed integers\n    - uint8: 8-bit unsigned integers\n    - uint8c: 8-bit unsigned integers clamped to 0-255\n\n    The default typed array data type is `float64`.\n\n    Parameters\n    ----------\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr = typedarray()\n    <Float64Array>\n    > arr = typedarray( 'float32' )\n    <Float32Array>\n\n\ntypedarray( length[, dtype] )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr = typedarray( 5 )\n    <Float64Array>[ 0.0, 0.0, 0.0, 0.0, 0.0 ]\n    > arr = typedarray( 5, 'int32' )\n    <Int32Array>[ 0, 0, 0, 0, 0 ]\n\n\ntypedarray( typedarray[, dtype] )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = typedarray( [ 0.5, 0.5, 0.5 ] );\n    > var arr2 = typedarray( arr1, 'float32' )\n    <Float32Array>[ 0.5, 0.5, 0.5 ]\n\n\ntypedarray( obj[, dtype] )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 0.5, 0.5, 0.5 ];\n    > var arr2 = typedarray( arr1, 'float32' )\n    <Float32Array>[ 0.5, 0.5, 0.5 ]\n\n\ntypedarray( buffer[, byteOffset[, length]][, dtype] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 16 );\n    > var arr = typedarray( buf, 0, 4, 'float32' )\n    <Float32Array>[ 0.0, 0.0, 0.0, 0.0 ]\n\n    See Also\n    --------\n    Float64Array, Float32Array, Int32Array, Uint32Array, Int16Array, Uint16Array, Int8Array, Uint8Array, Uint8ClampedArray\n","typedarray2json":"\ntypedarray2json( arr )\n    Returns a JSON representation of a typed array.\n\n    The following typed array types are supported:\n\n    - Float64Array\n    - Float32Array\n    - Int32Array\n    - Uint32Array\n    - Int16Array\n    - Uint16Array\n    - Int8Array\n    - Uint8Array\n    - Uint8ClampedArray\n\n    The returned JSON object has the following properties:\n\n    - type: typed array type\n    - data: typed array data as a generic array\n\n    The implementation supports custom typed arrays and sets the `type` field to\n    the closest known typed array type.\n\n    Parameters\n    ----------\n    arr: TypedArray\n        Typed array to serialize.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var arr = new Float64Array( 2 );\n    > arr[ 0 ] = 5.0;\n    > arr[ 1 ] = 3.0;\n    > var json = typedarray2json( arr )\n    { 'type': 'Float64Array', 'data': [ 5.0, 3.0 ] }\n\n    See Also\n    --------\n    reviveTypedArray\n","typedarrayComplexCtors":"\ntypedarrayComplexCtors( dtype )\n    Returns a complex typed array constructor.\n\n    The function returns constructors for the following data types:\n\n    - complex64: single-precision floating-point complex numbers.\n    - complex128: double-precision floating-point complex numbers.\n\n    Parameters\n    ----------\n    dtype: string\n        Data type.\n\n    Returns\n    -------\n    out: Function|null\n        Complex typed array constructor.\n\n    Examples\n    --------\n    > var ctor = typedarrayComplexCtors( 'complex64' )\n    <Function>\n    > ctor = typedarrayComplexCtors( 'float32' )\n    null\n\n    See Also\n    --------\n    arrayCtors, typedarrayCtors\n","typedarrayComplexDataTypes":"\ntypedarrayComplexDataTypes()\n    Returns a list of complex typed array data types.\n\n    The output array contains the following data types:\n\n    - complex64: single-precision floating-point complex numbers.\n    - complex128: double-precision floating-point complex numbers.\n\n    Returns\n    -------\n    out: Array<string>\n        List of complex typed array data types.\n\n    Examples\n    --------\n    > var out = typedarrayComplexDataTypes()\n    <Array>\n\n    See Also\n    --------\n    arrayDataTypes, typedarrayDataTypes, ndarrayDataTypes\n","typedarrayCtors":"\ntypedarrayCtors( dtype )\n    Returns a typed array constructor.\n\n    The function returns constructors for the following data types:\n\n    - float32: single-precision floating-point numbers.\n    - float64: double-precision floating-point numbers.\n    - int16: signed 16-bit integers.\n    - int32: signed 32-bit integers.\n    - int8: signed 8-bit integers.\n    - uint16: unsigned 16-bit integers.\n    - uint32: unsigned 32-bit integers.\n    - uint8: unsigned 8-bit integers.\n    - uint8c: unsigned clamped 8-bit integers.\n\n    Parameters\n    ----------\n    dtype: string\n        Data type.\n\n    Returns\n    -------\n    out: Function|null\n        Typed array constructor.\n\n    Examples\n    --------\n    > var ctor = typedarrayCtors( 'float64' )\n    <Function>\n    > ctor = typedarrayCtors( 'float' )\n    null\n\n    See Also\n    --------\n    arrayCtors\n","typedarrayDataTypes":"\ntypedarrayDataTypes()\n    Returns a list of typed array data types.\n\n    The output array contains the following data types:\n\n    - float32: single-precision floating-point numbers.\n    - float64: double-precision floating-point numbers.\n    - int16: signed 16-bit integers.\n    - int32: signed 32-bit integers.\n    - int8: signed 8-bit integers.\n    - uint16: unsigned 16-bit integers.\n    - uint32: unsigned 32-bit integers.\n    - uint8: unsigned 8-bit integers.\n    - uint8c: unsigned clamped 8-bit integers.\n\n    Returns\n    -------\n    out: Array<string>\n        List of typed array data types.\n\n    Examples\n    --------\n    > var out = typedarrayDataTypes()\n    <Array>\n\n    See Also\n    --------\n    arrayDataTypes, ndarrayDataTypes\n","typedarraypool":"\ntypedarraypool( [dtype] )\n    Returns an uninitialized typed array from a typed array memory pool.\n\n    Memory is **uninitialized**, which means that the contents of a returned\n    typed array may contain sensitive contents.\n\n    The function supports the following data types:\n\n    - float64: double-precision floating-point numbers (IEEE 754)\n    - float32: single-precision floating-point numbers (IEEE 754)\n    - int32: 32-bit two's complement signed integers\n    - uint32: 32-bit unsigned integers\n    - int16: 16-bit two's complement signed integers\n    - uint16: 16-bit unsigned integers\n    - int8: 8-bit two's complement signed integers\n    - uint8: 8-bit unsigned integers\n    - uint8c: 8-bit unsigned integers clamped to 0-255\n\n    The default typed array data type is `float64`.\n\n    Parameters\n    ----------\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray|null\n        If the function is unable to allocate a typed array from the typed array\n        pool (e.g., due to insufficient memory), the function returns `null`.\n\n    Examples\n    --------\n    > var arr = typedarraypool()\n    <Float64Array>[]\n    > arr = typedarraypool( 'float32' )\n    <Float32Array>[]\n\n\ntypedarraypool( length[, dtype] )\n    Returns an uninitialized typed array having a specified length from a typed\n    array memory pool.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray|null\n        If the function is unable to allocate a typed array from the typed array\n        pool (e.g., due to insufficient memory), the function returns `null`.\n\n    Examples\n    --------\n    > var arr = typedarraypool( 5 )\n    <Float64Array>\n    > arr = typedarraypool( 5, 'int32' )\n    <Int32Array>\n\n\ntypedarraypool( typedarray[, dtype] )\n    Creates a pooled typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray|null\n        If the function is unable to allocate a typed array from the typed array\n        pool (e.g., due to insufficient memory), the function returns `null`.\n\n    Examples\n    --------\n    > var arr1 = typedarraypool( [ 0.5, 0.5, 0.5 ] );\n    > var arr2 = typedarraypool( arr1, 'float32' )\n    <Float32Array>[ 0.5, 0.5, 0.5 ]\n\n\ntypedarraypool( obj[, dtype] )\n    Creates a pooled typed array from an array-like object.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object from which to generate a typed array.\n\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray|null\n        If the function is unable to allocate a typed array from the typed array\n        pool (e.g., due to insufficient memory), the function returns `null`.\n\n    Examples\n    --------\n    > var arr1 = [ 0.5, 0.5, 0.5 ];\n    > var arr2 = typedarraypool( arr1, 'float32' )\n    <Float32Array>[ 0.5, 0.5, 0.5 ]\n\n\ntypedarraypool.malloc( [dtype] )\n    Returns an uninitialized typed array from a typed array memory pool.\n\n    This method shares the same security vulnerabilities mentioned above.\n\n    Parameters\n    ----------\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray|null\n        If the function is unable to allocate a typed array from the typed array\n        pool (e.g., due to insufficient memory), the function returns `null`.\n\n    Examples\n    --------\n    > var arr = typedarraypool.malloc()\n    <Float64Array>\n    > arr = typedarraypool.malloc( 'float32' )\n    <Float32Array>\n\n\ntypedarraypool.malloc( length[, dtype] )\n    Returns a typed array having a specified length from a typed array memory\n    pool.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray|null\n        If the function is unable to allocate a typed array from the typed array\n        pool (e.g., due to insufficient memory), the function returns `null`.\n\n    Examples\n    --------\n    > var arr = typedarraypool.malloc( 5 )\n    <Float64Array>\n    > arr = typedarraypool.malloc( 5, 'int32' )\n    <Int32Array>\n\n\ntypedarraypool.malloc( typedarray[, dtype] )\n    Creates a pooled typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray|null\n        If the function is unable to allocate a typed array from the typed array\n        pool (e.g., due to insufficient memory), the function returns `null`.\n\n    Examples\n    --------\n    > var arr1 = typedarraypool.malloc( [ 0.5, 0.5, 0.5 ] );\n    > var arr2 = typedarraypool.malloc( arr1, 'float32' )\n    <Float32Array>[ 0.5, 0.5, 0.5 ]\n\n\ntypedarraypool.malloc( obj[, dtype] )\n    Creates a pooled typed array from an array-like object.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object from which to generate a typed array.\n\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray|null\n        If the function is unable to allocate a typed array from the typed array\n        pool (e.g., due to insufficient memory), the function returns `null`.\n\n    Examples\n    --------\n    > var arr1 = [ 0.5, 0.5, 0.5 ];\n    > var arr2 = typedarraypool.malloc( arr1, 'float32' )\n    <Float32Array>[ 0.5, 0.5, 0.5 ]\n\n\ntypedarraypool.calloc( [dtype] )\n    Returns a zero-initialized typed array from a typed array memory pool.\n\n    Parameters\n    ----------\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray|null\n        If the function is unable to allocate a typed array from the typed array\n        pool (e.g., due to insufficient memory), the function returns `null`.\n\n    Examples\n    --------\n    > var arr = typedarraypool.calloc()\n    <Float64Array>[]\n    > arr = typedarraypool.calloc( 'float32' )\n    <Float32Array>[]\n\n\ntypedarraypool.calloc( length[, dtype] )\n    Returns a zero-initialized typed array having a specified length from a\n    typed array memory pool.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray|null\n        If the function is unable to allocate a typed array from the typed array\n        pool (e.g., due to insufficient memory), the function returns `null`.\n\n    Examples\n    --------\n    > var arr = typedarraypool.calloc( 5 )\n    <Float64Array>[ 0.0, 0.0, 0.0, 0.0, 0.0 ]\n    > arr = typedarraypool.calloc( 5, 'int32' )\n    <Int32Array>[ 0, 0, 0, 0, 0 ]\n\n\ntypedarraypool.free( buf )\n    Frees a typed array or typed array buffer for use in a future allocation.\n\n    Parameters\n    ----------\n    buf: TypedArray|ArrayBuffer\n        Typed array or typed array buffer to free.\n\n    Examples\n    --------\n    > var arr = typedarraypool( 5 )\n    <Float64Array>\n    > typedarraypool.free( arr )\n\n\ntypedarraypool.clear()\n    Clears the typed array pool allowing garbage collection of previously\n    allocated (and currently free) array buffers.\n\n    Examples\n    --------\n    > var arr = typedarraypool( 5 )\n    <Float64Array>\n    > typedarraypool.free( arr );\n    > typedarraypool.clear()\n\n\ntypedarraypool.highWaterMark\n    Read-only property returning the pool's high water mark.\n\n    Once a high water mark is reached, typed array allocation fails.\n\n    Examples\n    --------\n    > typedarraypool.highWaterMark\n\n\ntypedarraypool.nbytes\n    Read-only property returning the total number of allocated bytes.\n\n    The returned value is the total accumulated value. Hence, anytime a pool\n    must allocate a new array buffer (i.e., more memory), the pool increments\n    this value.\n\n    The only time this value is decremented is when a pool is cleared.\n\n    This behavior means that, while allocated buffers which are never freed may,\n    in fact, be garbage collected, they continue to count against the high water\n    mark limit.\n\n    Accordingly, you should *always* free allocated buffers in order to prevent\n    the pool from believing that non-freed buffers are continually in use.\n\n    Examples\n    --------\n    > var arr = typedarraypool( 5 )\n    <Float64Array>\n    > typedarraypool.nbytes\n\n\ntypedarraypool.factory( [options] )\n    Creates a typed array pool.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.highWaterMark: integer (optional)\n        Maximum total memory (in bytes) which can be allocated.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating typed arrays from a typed array memory pool.\n\n    Examples\n    --------\n    > var pool = typedarraypool.factory();\n    > var arr1 = pool( 3, 'float64' )\n    <Float64Array>\n\n    See Also\n    --------\n    typedarray\n","typedarraypool.malloc":"\ntypedarraypool.malloc( [dtype] )\n    Returns an uninitialized typed array from a typed array memory pool.\n\n    This method shares the same security vulnerabilities mentioned above.\n\n    Parameters\n    ----------\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray|null\n        If the function is unable to allocate a typed array from the typed array\n        pool (e.g., due to insufficient memory), the function returns `null`.\n\n    Examples\n    --------\n    > var arr = typedarraypool.malloc()\n    <Float64Array>\n    > arr = typedarraypool.malloc( 'float32' )\n    <Float32Array>\n\ntypedarraypool.malloc( length[, dtype] )\n    Returns a typed array having a specified length from a typed array memory\n    pool.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray|null\n        If the function is unable to allocate a typed array from the typed array\n        pool (e.g., due to insufficient memory), the function returns `null`.\n\n    Examples\n    --------\n    > var arr = typedarraypool.malloc( 5 )\n    <Float64Array>\n    > arr = typedarraypool.malloc( 5, 'int32' )\n    <Int32Array>\n\ntypedarraypool.malloc( typedarray[, dtype] )\n    Creates a pooled typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray|null\n        If the function is unable to allocate a typed array from the typed array\n        pool (e.g., due to insufficient memory), the function returns `null`.\n\n    Examples\n    --------\n    > var arr1 = typedarraypool.malloc( [ 0.5, 0.5, 0.5 ] );\n    > var arr2 = typedarraypool.malloc( arr1, 'float32' )\n    <Float32Array>[ 0.5, 0.5, 0.5 ]\n\ntypedarraypool.malloc( obj[, dtype] )\n    Creates a pooled typed array from an array-like object.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object from which to generate a typed array.\n\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray|null\n        If the function is unable to allocate a typed array from the typed array\n        pool (e.g., due to insufficient memory), the function returns `null`.\n\n    Examples\n    --------\n    > var arr1 = [ 0.5, 0.5, 0.5 ];\n    > var arr2 = typedarraypool.malloc( arr1, 'float32' )\n    <Float32Array>[ 0.5, 0.5, 0.5 ]\n\n","typedarraypool.calloc":"\ntypedarraypool.calloc( [dtype] )\n    Returns a zero-initialized typed array from a typed array memory pool.\n\n    Parameters\n    ----------\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray|null\n        If the function is unable to allocate a typed array from the typed array\n        pool (e.g., due to insufficient memory), the function returns `null`.\n\n    Examples\n    --------\n    > var arr = typedarraypool.calloc()\n    <Float64Array>[]\n    > arr = typedarraypool.calloc( 'float32' )\n    <Float32Array>[]\n\ntypedarraypool.calloc( length[, dtype] )\n    Returns a zero-initialized typed array having a specified length from a\n    typed array memory pool.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    dtype: string (optional)\n        Data type. Default: 'float64'.\n\n    Returns\n    -------\n    out: TypedArray|null\n        If the function is unable to allocate a typed array from the typed array\n        pool (e.g., due to insufficient memory), the function returns `null`.\n\n    Examples\n    --------\n    > var arr = typedarraypool.calloc( 5 )\n    <Float64Array>[ 0.0, 0.0, 0.0, 0.0, 0.0 ]\n    > arr = typedarraypool.calloc( 5, 'int32' )\n    <Int32Array>[ 0, 0, 0, 0, 0 ]\n\n","typedarraypool.free":"\ntypedarraypool.free( buf )\n    Frees a typed array or typed array buffer for use in a future allocation.\n\n    Parameters\n    ----------\n    buf: TypedArray|ArrayBuffer\n        Typed array or typed array buffer to free.\n\n    Examples\n    --------\n    > var arr = typedarraypool( 5 )\n    <Float64Array>\n    > typedarraypool.free( arr )\n\n","typedarraypool.clear":"\ntypedarraypool.clear()\n    Clears the typed array pool allowing garbage collection of previously\n    allocated (and currently free) array buffers.\n\n    Examples\n    --------\n    > var arr = typedarraypool( 5 )\n    <Float64Array>\n    > typedarraypool.free( arr );\n    > typedarraypool.clear()\n\n","typedarraypool.highWaterMark":"\ntypedarraypool.highWaterMark\n    Read-only property returning the pool's high water mark.\n\n    Once a high water mark is reached, typed array allocation fails.\n\n    Examples\n    --------\n    > typedarraypool.highWaterMark\n\n","typedarraypool.nbytes":"\ntypedarraypool.nbytes\n    Read-only property returning the total number of allocated bytes.\n\n    The returned value is the total accumulated value. Hence, anytime a pool\n    must allocate a new array buffer (i.e., more memory), the pool increments\n    this value.\n\n    The only time this value is decremented is when a pool is cleared.\n\n    This behavior means that, while allocated buffers which are never freed may,\n    in fact, be garbage collected, they continue to count against the high water\n    mark limit.\n\n    Accordingly, you should *always* free allocated buffers in order to prevent\n    the pool from believing that non-freed buffers are continually in use.\n\n    Examples\n    --------\n    > var arr = typedarraypool( 5 )\n    <Float64Array>\n    > typedarraypool.nbytes\n\n","typedarraypool.factory":"\ntypedarraypool.factory( [options] )\n    Creates a typed array pool.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Function options.\n\n    options.highWaterMark: integer (optional)\n        Maximum total memory (in bytes) which can be allocated.\n\n    Returns\n    -------\n    fcn: Function\n        Function for creating typed arrays from a typed array memory pool.\n\n    Examples\n    --------\n    > var pool = typedarraypool.factory();\n    > var arr1 = pool( 3, 'float64' )\n    <Float64Array>\n\n    See Also\n    --------\n    typedarray\n","typemax":"\ntypemax( dtype )\n    Returns the maximum value of a specified numeric type.\n\n    The following numeric types are supported:\n\n    - float64: double-precision floating-point numbers\n    - float32: single-precision floating-point numbers\n    - float16: half-precision floating-point numbers\n    - int32: 32-bit two's complement signed integers\n    - uint32: 32-bit unsigned integers\n    - int16: 16-bit two's complement signed integers\n    - uint16: 16-bit unsigned integers\n    - int8: 8-bit two's complement signed integers\n    - uint8: 8-bit unsigned integers\n    - uint8c: 8-bit unsigned integers clamped to 0-255\n\n    Parameters\n    ----------\n    dtype: string\n        Numeric type.\n\n    Returns\n    -------\n    out: number\n        Maximum value.\n\n    Examples\n    --------\n    > var m = typemax( 'int8' )\n    127\n    > m = typemax( 'uint32' )\n    4294967295\n\n    See Also\n    --------\n    realmax, typemin\n","typemin":"\ntypemin( dtype )\n    Returns the minimum value of a specified numeric type.\n\n    The following numeric types are supported:\n\n    - float64: double-precision floating-point numbers\n    - float32: single-precision floating-point numbers\n    - float16: half-precision floating-point numbers\n    - int32: 32-bit two's complement signed integers\n    - uint32: 32-bit unsigned integers\n    - int16: 16-bit two's complement signed integers\n    - uint16: 16-bit unsigned integers\n    - int8: 8-bit two's complement signed integers\n    - uint8: 8-bit unsigned integers\n    - uint8c: 8-bit unsigned integers clamped to 0-255\n\n    Parameters\n    ----------\n    dtype: string\n        Numeric type.\n\n    Returns\n    -------\n    out: number\n        Minimum value.\n\n    Examples\n    --------\n    > var m = typemin( 'int8' )\n    -128\n    > m = typemin( 'uint32' )\n    0\n\n    See Also\n    --------\n    realmin, typemax\n","typeOf":"\ntypeOf( value )\n    Determines a value's type.\n\n    The following values are not natively provided in older JavaScript engines:\n\n    - Map\n    - Set\n    - WeakMap\n    - WeakSet\n    - Symbol\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    out: string\n        The value's type.\n\n    Examples\n    --------\n    // Built-ins:\n    > var t = typeOf( 'a' )\n    'string'\n    > t = typeOf( 5 )\n    'number'\n    > t = typeOf( NaN )\n    'number'\n    > t = typeOf( true )\n    'boolean'\n    > t = typeOf( false )\n    'boolean'\n    > t = typeOf( null )\n    'null'\n    > t = typeOf( undefined )\n    'undefined'\n    > t = typeOf( [] )\n    'array'\n    > t = typeOf( {} )\n    'object'\n    > t = typeOf( function noop() {} )\n    'function'\n    > t = typeOf( Symbol( 'beep' ) )\n    'symbol'\n    > t = typeOf( /.+/ )\n    'regexp'\n    > t = typeOf( new String( 'beep' ) )\n    'string'\n    > t = typeOf( new Number( 5 ) )\n    'number'\n    > t = typeOf( new Boolean( false ) )\n    'boolean'\n    > t = typeOf( new Array() )\n    'array'\n    > t = typeOf( new Object() )\n    'object'\n    > t = typeOf( new Int8Array( 10 ) )\n    'int8array'\n    > t = typeOf( new Uint8Array( 10 ) )\n    'uint8array'\n    > t = typeOf( new Uint8ClampedArray( 10 ) )\n    'uint8clampedarray'\n    > t = typeOf( new Int16Array( 10 ) )\n    'int16array'\n    > t = typeOf( new Uint16Array( 10 ) )\n    'uint16array'\n    > t = typeOf( new Int32Array( 10 ) )\n    'int32array'\n    > t = typeOf( new Uint32Array( 10 ) )\n    'uint32array'\n    > t = typeOf( new Float32Array( 10 ) )\n    'float32array'\n    > t = typeOf( new Float64Array( 10 ) )\n    'float64array'\n    > t = typeOf( new ArrayBuffer( 10 ) )\n    'arraybuffer'\n    > t = typeOf( new Date() )\n    'date'\n    > t = typeOf( new RegExp( '.+' ) )\n    'regexp'\n    > t = typeOf( new Map() )\n    'map'\n    > t = typeOf( new Set() )\n    'set'\n    > t = typeOf( new WeakMap() )\n    'weakmap'\n    > t = typeOf( new WeakSet() )\n    'weakset'\n    > t = typeOf( new Error( 'beep' ) )\n    'error'\n    > t = typeOf( new TypeError( 'beep' ) )\n    'typeerror'\n    > t = typeOf( new SyntaxError( 'beep' ) )\n    'syntaxerror'\n    > t = typeOf( new ReferenceError( 'beep' ) )\n    'referenceerror'\n    > t = typeOf( new URIError( 'beep' ) )\n    'urierror'\n    > t = typeOf( new RangeError( 'beep' ) )\n    'rangeerror'\n    > t = typeOf( new EvalError( 'beep' ) )\n    'evalerror'\n    > t = typeOf( Math )\n    'math'\n    > t = typeOf( JSON )\n    'json'\n\n    // Arguments object:\n    > function beep() { return arguments; };\n    > t = typeOf( beep() )\n    'arguments'\n\n    // Node.js Buffer object:\n    > t = typeOf( new Buffer( 10 ) )\n    'buffer'\n\n    // Custom constructor:\n    > function Person() { return this };\n    > t = typeOf( new Person() )\n    'person'\n\n    // Anonymous constructor:\n    > var Foo = function () { return this; };\n    > t = typeOf( new Foo() )\n    '' || 'foo'\n\n    See Also\n    --------\n    constructorName, nativeClass\n","UINT8_MAX":"\nUINT8_MAX\n    Maximum unsigned 8-bit integer.\n\n    The maximum unsigned 8-bit integer is given by `2^8 - 1`.\n\n    Examples\n    --------\n    > UINT8_MAX\n    255\n\n    See Also\n    --------\n    INT8_MAX\n","UINT8_NUM_BYTES":"\nUINT8_NUM_BYTES\n    Size (in bytes) of an 8-bit unsigned integer.\n\n    Examples\n    --------\n    > UINT8_NUM_BYTES\n    1\n\n    See Also\n    --------\n    INT8_NUM_BYTES, UINT16_NUM_BYTES, UINT32_NUM_BYTES\n","Uint8Array":"\nUint8Array()\n    A typed array constructor which returns a typed array representing an array\n    of 8-bit unsigned integers in the platform byte order.\n\n    Returns\n    -------\n    out: Uint8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Uint8Array()\n    <Uint8Array>\n\n\nUint8Array( length )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    Returns\n    -------\n    out: Uint8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( 5 )\n    <Uint8Array>[ 0, 0, 0, 0, 0 ]\n\n\nUint8Array( typedarray )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    Returns\n    -------\n    out: Uint8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int32Array( [ 5, 5, 5 ] );\n    > var arr2 = new Uint8Array( arr1 )\n    <Uint8Array>[ 5, 5, 5 ]\n\n\nUint8Array( obj )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    Returns\n    -------\n    out: Uint8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 5.0, 5.0, 5.0 ];\n    > var arr2 = new Uint8Array( arr1 )\n    <Uint8Array>[ 5, 5, 5 ]\n\n\nUint8Array( buffer[, byteOffset[, length]] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Uint8Array\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 4 );\n    > var arr = new Uint8Array( buf, 0, 4 )\n    <Uint8Array>[ 0, 0, 0, 0 ]\n\n\nUint8Array.from( src[, map[, thisArg]] )\n    Creates a new typed array from an array-like object or an iterable.\n\n    A callback is provided the following arguments:\n\n    - value: source value.\n    - index: source index.\n\n    Parameters\n    ----------\n    src: ArrayLike|Iterable\n        Source of array elements.\n\n    map: Function (optional)\n        Callback to invoke for each source element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Uint8Array\n        A typed array.\n\n    Examples\n    --------\n    > function mapFcn( v ) { return v * 2; };\n    > var arr = Uint8Array.from( [ 1, 2 ], mapFcn )\n    <Uint8Array>[ 2, 4 ]\n\n\nUint8Array.of( element0[, element1[, ...elementN]] )\n    Creates a new typed array from a variable number of arguments.\n\n    Parameters\n    ----------\n    element0: number\n        Array element.\n\n    element1: number (optional)\n        Array element.\n\n    elementN: number (optional)\n        Array elements.\n\n    Returns\n    -------\n    out: Uint8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = Uint8Array.of( 1, 2 )\n    <Uint8Array>[ 1, 2 ]\n\n\nUint8Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Uint8Array.BYTES_PER_ELEMENT\n    1\n\n\nUint8Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Uint8Array.name\n    'Uint8Array'\n\n\nUint8Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n\nUint8Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( 5 );\n    > arr.byteLength\n    5\n\n\nUint8Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( 5 );\n    > arr.byteOffset\n    0\n\n\nUint8Array.prototype.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( 5 );\n    > arr.BYTES_PER_ELEMENT\n    1\n\n\nUint8Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( 5 );\n    > arr.length\n    5\n\n\nUint8Array.prototype.copyWithin( target, start[, end] )\n    Copies a sequence of elements within the array starting at `start` and\n    ending at `end` (non-inclusive) to the position starting at `target`.\n\n    Parameters\n    ----------\n    target: integer\n        Target start index position.\n\n    start: integer\n        Source start index position.\n\n    end: integer (optional)\n        Source end index position. Default: out.length.\n\n    Returns\n    -------\n    out: Uint8Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2, 3, 4, 5 ] );\n    > arr.copyWithin( 3, 0, 2 );\n    > arr[ 3 ]\n    1\n    > arr[ 4 ]\n    2\n\n\nUint8Array.prototype.entries()\n    Returns an iterator for iterating over array key-value pairs.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array key-value pairs.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2 ] );\n    > it = arr.entries();\n    > it.next().value\n    [ 0, 1 ]\n    > it.next().value\n    [ 1, 2 ]\n    > it.next().done\n    true\n\n\nUint8Array.prototype.every( predicate[, thisArg] )\n    Tests whether all array elements pass a test implemented by a predicate\n    function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, an array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether all array elements pass.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2 ] );\n    > function predicate( v ) { return ( v <= 1 ); };\n    > arr.every( predicate )\n    false\n\n\nUint8Array.prototype.fill( value[, start[, end]] )\n    Fills an array from a start index to an end index (non-inclusive) with a\n    provided value.\n\n    Parameters\n    ----------\n    value: number\n        Fill value.\n\n    start: integer (optional)\n        Start index. If less than zero, the start index is resolved relative to\n        the last array element. Default: 0.\n\n    end: integer (optional)\n        End index (non-inclusive). If less than zero, the end index is resolved\n        relative to the last array element. Default: out.length.\n\n    Returns\n    -------\n    out: Uint8Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2 ] );\n    > arr.fill( 3 );\n    > arr[ 0 ]\n    3\n    > arr[ 1 ]\n    3\n\n\nUint8Array.prototype.filter( predicate[, thisArg] )\n    Creates a new array which includes those elements for which a predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    If a predicate function does not return a truthy value for any array\n    element, the method returns `null`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which filters array elements. If a predicate function\n        returns a truthy value, an array element is included in the output\n        array; otherwise, an array element is not included in the output array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Uint8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Uint8Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 1 ); };\n    > var arr2 = arr1.filter( predicate );\n    > arr2.length\n    2\n\n\nUint8Array.prototype.find( predicate[, thisArg] )\n    Returns the first array element for which a provided predicate function\n    returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `undefined`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    value: number|undefined\n        Array element.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 2 ); };\n    > var v = arr.find( predicate )\n    3\n\n\nUint8Array.prototype.findIndex( predicate[, thisArg] )\n    Returns the index of the first array element for which a provided predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `-1`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 2 ); };\n    > var idx = arr.findIndex( predicate )\n    2\n\n\nUint8Array.prototype.forEach( fcn[, thisArg] )\n    Invokes a callback for each array element.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to invoke for each array element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 3, 2, 1 ] );\n    > var str = ' ';\n    > function fcn( v, i ) { str += i + ':' + v + ' '; };\n    > arr.forEach( fcn );\n    > str\n    ' 0:3 1:2 2:1 '\n\n\nUint8Array.prototype.includes( searchElement[, fromIndex] )\n    Returns a boolean indicating whether an array includes a search element.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether an array includes a search element.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2, 3 ] );\n    > var bool = arr.includes( 4 )\n    false\n    > bool = arr.includes( 3 )\n    true\n\n\nUint8Array.prototype.indexOf( searchElement[, fromIndex] )\n    Returns the index of the first array element strictly equal to a search\n    element.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2, 3 ] );\n    > var idx = arr.indexOf( 4 )\n    -1\n    > idx = arr.indexOf( 3 )\n    2\n\n\nUint8Array.prototype.join( [separator] )\n    Serializes an array by joining all array elements as a string.\n\n    Parameters\n    ----------\n    separator: string (optional)\n        String delineating array elements. Default: ','.\n\n    Returns\n    -------\n    str: string\n        Array serialized as a string.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2, 3 ] );\n    > arr.join( '|' )\n    '1|2|3'\n\n\nUint8Array.prototype.keys()\n    Returns an iterator for iterating over array keys.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array keys.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2 ] );\n    > it = arr.keys();\n    > it.next().value\n    0\n    > it.next().value\n    1\n    > it.next().done\n    true\n\n\nUint8Array.prototype.lastIndexOf( searchElement[, fromIndex] )\n    Returns the index of the last array element strictly equal to a search\n    element.\n\n    The method iterates from the last array element to the first array element.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: -1.\n\n    Returns\n    -------\n    idx: integer\n        array index.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 0, 2, 0, 1 ] );\n    > var idx = arr.lastIndexOf( 3 )\n    -1\n    > idx = arr.lastIndexOf( 0 )\n    3\n\n\nUint8Array.prototype.map( fcn[, thisArg] )\n    Maps each array element to an element in a new typed array.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function which maps array elements to elements in the new array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Uint8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Uint8Array( [ 1, 2, 3 ] );\n    > function fcn( v ) { return v * 2; };\n    > var arr2 = arr1.map( fcn );\n    <Uint8Array>[ 2, 4, 6 ]\n\n\nUint8Array.prototype.reduce( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the first array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the first array element as the first argument and the second array\n    element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2, 3 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduce( fcn, 0 )\n    14\n\n\nUint8Array.prototype.reduceRight( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result, iterating from right to left.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the last array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the last array element as the first argument and the second-to-last\n    array element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2, 3 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduceRight( fcn, 0 )\n    14\n\n\nUint8Array.prototype.reverse()\n    Reverses an array *in-place*.\n\n    This method mutates the array on which the method is invoked.\n\n    Returns\n    -------\n    out: Uint8Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2, 3 ] )\n    <Uint8Array>[ 1, 2, 3 ]\n    > arr.reverse()\n    <Uint8Array>[ 3, 2, 1 ]\n\n\nUint8Array.prototype.set( arr[, offset] )\n    Sets array elements.\n\n    Parameters\n    ----------\n    arr: ArrayLike\n        Source array containing array values to set.\n\n    offset: integer (optional)\n        Array index at which to start writing values. Default: 0.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2, 3 ] );\n    > arr.set( [ 4, 4 ], 1 );\n    > arr[ 1 ]\n    4\n    > arr[ 2 ]\n    4\n\n\nUint8Array.prototype.slice( [begin[, end]] )\n    Copies array elements to a new array with the same underlying data type as\n    the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns `null`.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Uint8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Uint8Array( [ 1, 2, 3 ] );\n    > var arr2 = arr1.slice( 1 );\n    > arr2.length\n    2\n    > arr2[ 0 ]\n    1\n    > arr2[ 1 ]\n    2\n\n\nUint8Array.prototype.some( predicate[, thisArg] )\n    Tests whether at least one array element passes a test implemented by a\n    predicate function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, a array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether at least one array element passes.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2 ] );\n    > function predicate( v ) { return ( v > 1 ); };\n    > arr.some( predicate )\n    true\n\n\nUint8Array.prototype.sort( [compareFunction] )\n    Sorts an array *in-place*.\n\n    The comparison function is provided two array elements per invocation: `a`\n    and `b`.\n\n    The comparison function return value determines the sort order as follows:\n\n    - If the comparison function returns a value less than zero, then the method\n    sorts `a` to an index lower than `b` (i.e., `a` should come *before* `b`).\n\n    - If the comparison function returns a value greater than zero, then the\n    method sorts `a` to an index higher than `b` (i.e., `b` should come *before*\n    `a`).\n\n    - If the comparison function returns zero, then the relative order of `a`\n    and `b` should remain unchanged.\n\n    This method mutates the array on which the method is invoked.\n\n    Parameters\n    ----------\n    compareFunction: Function (optional)\n        Function which specifies the sort order. The default sort order is\n        ascending order.\n\n    Returns\n    -------\n    out: Uint8Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2, 0, 2, 1 ] );\n    > arr.sort()\n    <Uint8Array>[ 0, 1, 1, 2, 2 ]\n\n\nUint8Array.prototype.subarray( [begin[, end]] )\n    Creates a new typed array over the same underlying ArrayBuffer and with the\n    same underlying data type as the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns an empty typed array.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Uint8Array\n        A new typed array view.\n\n    Examples\n    --------\n    > var arr1 = new Uint8Array( [ 1, 2, 3, 4, 5 ] );\n    > var arr2 = arr1.subarray( 2 )\n    <Uint8Array>[ 3, 4, 5 ]\n\n\nUint8Array.prototype.toLocaleString( [locales[, options]] )\n    Serializes an array as a locale-specific string.\n\n    Parameters\n    ----------\n    locales: string|Array<string> (optional)\n        A BCP 47 language tag, or an array of such tags.\n\n    options: Object (optional)\n        Options.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2, 3 ] );\n    > arr.toLocaleString()\n    '1,2,3'\n\n\nUint8Array.prototype.toString()\n    Serializes an array as a string.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2, 3 ] );\n    > arr.toString()\n    '1,2,3'\n\n\nUint8Array.prototype.values()\n    Returns an iterator for iterating over array elements.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array elements.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2 ] );\n    > it = arr.values();\n    > it.next().value\n    1\n    > it.next().value\n    2\n    > it.next().done\n    true\n\n\n    See Also\n    --------\n    ArrayBuffer, Float32Array, Float64Array, Int16Array, Int32Array, Int8Array, Uint16Array, Uint32Array, Uint8ClampedArray\n","Uint8Array.from":"\nUint8Array.from( src[, map[, thisArg]] )\n    Creates a new typed array from an array-like object or an iterable.\n\n    A callback is provided the following arguments:\n\n    - value: source value.\n    - index: source index.\n\n    Parameters\n    ----------\n    src: ArrayLike|Iterable\n        Source of array elements.\n\n    map: Function (optional)\n        Callback to invoke for each source element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Uint8Array\n        A typed array.\n\n    Examples\n    --------\n    > function mapFcn( v ) { return v * 2; };\n    > var arr = Uint8Array.from( [ 1, 2 ], mapFcn )\n    <Uint8Array>[ 2, 4 ]\n\n","Uint8Array.of":"\nUint8Array.of( element0[, element1[, ...elementN]] )\n    Creates a new typed array from a variable number of arguments.\n\n    Parameters\n    ----------\n    element0: number\n        Array element.\n\n    element1: number (optional)\n        Array element.\n\n    elementN: number (optional)\n        Array elements.\n\n    Returns\n    -------\n    out: Uint8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = Uint8Array.of( 1, 2 )\n    <Uint8Array>[ 1, 2 ]\n\n","Uint8Array.BYTES_PER_ELEMENT":"\nUint8Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Uint8Array.BYTES_PER_ELEMENT\n    1\n\n","Uint8Array.name":"\nUint8Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Uint8Array.name\n    'Uint8Array'\n\n","Uint8Array.prototype.buffer":"\nUint8Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n","Uint8Array.prototype.byteLength":"\nUint8Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( 5 );\n    > arr.byteLength\n    5\n\n","Uint8Array.prototype.byteOffset":"\nUint8Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( 5 );\n    > arr.byteOffset\n    0\n\n","Uint8Array.prototype.BYTES_PER_ELEMENT":"\nUint8Array.prototype.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( 5 );\n    > arr.BYTES_PER_ELEMENT\n    1\n\n","Uint8Array.prototype.length":"\nUint8Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( 5 );\n    > arr.length\n    5\n\n","Uint8Array.prototype.copyWithin":"\nUint8Array.prototype.copyWithin( target, start[, end] )\n    Copies a sequence of elements within the array starting at `start` and\n    ending at `end` (non-inclusive) to the position starting at `target`.\n\n    Parameters\n    ----------\n    target: integer\n        Target start index position.\n\n    start: integer\n        Source start index position.\n\n    end: integer (optional)\n        Source end index position. Default: out.length.\n\n    Returns\n    -------\n    out: Uint8Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2, 3, 4, 5 ] );\n    > arr.copyWithin( 3, 0, 2 );\n    > arr[ 3 ]\n    1\n    > arr[ 4 ]\n    2\n\n","Uint8Array.prototype.entries":"\nUint8Array.prototype.entries()\n    Returns an iterator for iterating over array key-value pairs.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array key-value pairs.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2 ] );\n    > it = arr.entries();\n    > it.next().value\n    [ 0, 1 ]\n    > it.next().value\n    [ 1, 2 ]\n    > it.next().done\n    true\n\n","Uint8Array.prototype.every":"\nUint8Array.prototype.every( predicate[, thisArg] )\n    Tests whether all array elements pass a test implemented by a predicate\n    function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, an array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether all array elements pass.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2 ] );\n    > function predicate( v ) { return ( v <= 1 ); };\n    > arr.every( predicate )\n    false\n\n","Uint8Array.prototype.fill":"\nUint8Array.prototype.fill( value[, start[, end]] )\n    Fills an array from a start index to an end index (non-inclusive) with a\n    provided value.\n\n    Parameters\n    ----------\n    value: number\n        Fill value.\n\n    start: integer (optional)\n        Start index. If less than zero, the start index is resolved relative to\n        the last array element. Default: 0.\n\n    end: integer (optional)\n        End index (non-inclusive). If less than zero, the end index is resolved\n        relative to the last array element. Default: out.length.\n\n    Returns\n    -------\n    out: Uint8Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2 ] );\n    > arr.fill( 3 );\n    > arr[ 0 ]\n    3\n    > arr[ 1 ]\n    3\n\n","Uint8Array.prototype.filter":"\nUint8Array.prototype.filter( predicate[, thisArg] )\n    Creates a new array which includes those elements for which a predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    If a predicate function does not return a truthy value for any array\n    element, the method returns `null`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which filters array elements. If a predicate function\n        returns a truthy value, an array element is included in the output\n        array; otherwise, an array element is not included in the output array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Uint8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Uint8Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 1 ); };\n    > var arr2 = arr1.filter( predicate );\n    > arr2.length\n    2\n\n","Uint8Array.prototype.find":"\nUint8Array.prototype.find( predicate[, thisArg] )\n    Returns the first array element for which a provided predicate function\n    returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `undefined`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    value: number|undefined\n        Array element.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 2 ); };\n    > var v = arr.find( predicate )\n    3\n\n","Uint8Array.prototype.findIndex":"\nUint8Array.prototype.findIndex( predicate[, thisArg] )\n    Returns the index of the first array element for which a provided predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `-1`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 2 ); };\n    > var idx = arr.findIndex( predicate )\n    2\n\n","Uint8Array.prototype.forEach":"\nUint8Array.prototype.forEach( fcn[, thisArg] )\n    Invokes a callback for each array element.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to invoke for each array element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 3, 2, 1 ] );\n    > var str = ' ';\n    > function fcn( v, i ) { str += i + ':' + v + ' '; };\n    > arr.forEach( fcn );\n    > str\n    ' 0:3 1:2 2:1 '\n\n","Uint8Array.prototype.includes":"\nUint8Array.prototype.includes( searchElement[, fromIndex] )\n    Returns a boolean indicating whether an array includes a search element.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether an array includes a search element.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2, 3 ] );\n    > var bool = arr.includes( 4 )\n    false\n    > bool = arr.includes( 3 )\n    true\n\n","Uint8Array.prototype.indexOf":"\nUint8Array.prototype.indexOf( searchElement[, fromIndex] )\n    Returns the index of the first array element strictly equal to a search\n    element.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2, 3 ] );\n    > var idx = arr.indexOf( 4 )\n    -1\n    > idx = arr.indexOf( 3 )\n    2\n\n","Uint8Array.prototype.join":"\nUint8Array.prototype.join( [separator] )\n    Serializes an array by joining all array elements as a string.\n\n    Parameters\n    ----------\n    separator: string (optional)\n        String delineating array elements. Default: ','.\n\n    Returns\n    -------\n    str: string\n        Array serialized as a string.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2, 3 ] );\n    > arr.join( '|' )\n    '1|2|3'\n\n","Uint8Array.prototype.keys":"\nUint8Array.prototype.keys()\n    Returns an iterator for iterating over array keys.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array keys.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2 ] );\n    > it = arr.keys();\n    > it.next().value\n    0\n    > it.next().value\n    1\n    > it.next().done\n    true\n\n","Uint8Array.prototype.lastIndexOf":"\nUint8Array.prototype.lastIndexOf( searchElement[, fromIndex] )\n    Returns the index of the last array element strictly equal to a search\n    element.\n\n    The method iterates from the last array element to the first array element.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: -1.\n\n    Returns\n    -------\n    idx: integer\n        array index.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 0, 2, 0, 1 ] );\n    > var idx = arr.lastIndexOf( 3 )\n    -1\n    > idx = arr.lastIndexOf( 0 )\n    3\n\n","Uint8Array.prototype.map":"\nUint8Array.prototype.map( fcn[, thisArg] )\n    Maps each array element to an element in a new typed array.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function which maps array elements to elements in the new array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Uint8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Uint8Array( [ 1, 2, 3 ] );\n    > function fcn( v ) { return v * 2; };\n    > var arr2 = arr1.map( fcn );\n    <Uint8Array>[ 2, 4, 6 ]\n\n","Uint8Array.prototype.reduce":"\nUint8Array.prototype.reduce( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the first array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the first array element as the first argument and the second array\n    element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2, 3 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduce( fcn, 0 )\n    14\n\n","Uint8Array.prototype.reduceRight":"\nUint8Array.prototype.reduceRight( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result, iterating from right to left.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the last array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the last array element as the first argument and the second-to-last\n    array element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2, 3 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduceRight( fcn, 0 )\n    14\n\n","Uint8Array.prototype.reverse":"\nUint8Array.prototype.reverse()\n    Reverses an array *in-place*.\n\n    This method mutates the array on which the method is invoked.\n\n    Returns\n    -------\n    out: Uint8Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2, 3 ] )\n    <Uint8Array>[ 1, 2, 3 ]\n    > arr.reverse()\n    <Uint8Array>[ 3, 2, 1 ]\n\n","Uint8Array.prototype.set":"\nUint8Array.prototype.set( arr[, offset] )\n    Sets array elements.\n\n    Parameters\n    ----------\n    arr: ArrayLike\n        Source array containing array values to set.\n\n    offset: integer (optional)\n        Array index at which to start writing values. Default: 0.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2, 3 ] );\n    > arr.set( [ 4, 4 ], 1 );\n    > arr[ 1 ]\n    4\n    > arr[ 2 ]\n    4\n\n","Uint8Array.prototype.slice":"\nUint8Array.prototype.slice( [begin[, end]] )\n    Copies array elements to a new array with the same underlying data type as\n    the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns `null`.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Uint8Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Uint8Array( [ 1, 2, 3 ] );\n    > var arr2 = arr1.slice( 1 );\n    > arr2.length\n    2\n    > arr2[ 0 ]\n    1\n    > arr2[ 1 ]\n    2\n\n","Uint8Array.prototype.some":"\nUint8Array.prototype.some( predicate[, thisArg] )\n    Tests whether at least one array element passes a test implemented by a\n    predicate function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, a array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether at least one array element passes.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2 ] );\n    > function predicate( v ) { return ( v > 1 ); };\n    > arr.some( predicate )\n    true\n\n","Uint8Array.prototype.sort":"\nUint8Array.prototype.sort( [compareFunction] )\n    Sorts an array *in-place*.\n\n    The comparison function is provided two array elements per invocation: `a`\n    and `b`.\n\n    The comparison function return value determines the sort order as follows:\n\n    - If the comparison function returns a value less than zero, then the method\n    sorts `a` to an index lower than `b` (i.e., `a` should come *before* `b`).\n\n    - If the comparison function returns a value greater than zero, then the\n    method sorts `a` to an index higher than `b` (i.e., `b` should come *before*\n    `a`).\n\n    - If the comparison function returns zero, then the relative order of `a`\n    and `b` should remain unchanged.\n\n    This method mutates the array on which the method is invoked.\n\n    Parameters\n    ----------\n    compareFunction: Function (optional)\n        Function which specifies the sort order. The default sort order is\n        ascending order.\n\n    Returns\n    -------\n    out: Uint8Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2, 0, 2, 1 ] );\n    > arr.sort()\n    <Uint8Array>[ 0, 1, 1, 2, 2 ]\n\n","Uint8Array.prototype.subarray":"\nUint8Array.prototype.subarray( [begin[, end]] )\n    Creates a new typed array over the same underlying ArrayBuffer and with the\n    same underlying data type as the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns an empty typed array.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Uint8Array\n        A new typed array view.\n\n    Examples\n    --------\n    > var arr1 = new Uint8Array( [ 1, 2, 3, 4, 5 ] );\n    > var arr2 = arr1.subarray( 2 )\n    <Uint8Array>[ 3, 4, 5 ]\n\n","Uint8Array.prototype.toLocaleString":"\nUint8Array.prototype.toLocaleString( [locales[, options]] )\n    Serializes an array as a locale-specific string.\n\n    Parameters\n    ----------\n    locales: string|Array<string> (optional)\n        A BCP 47 language tag, or an array of such tags.\n\n    options: Object (optional)\n        Options.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2, 3 ] );\n    > arr.toLocaleString()\n    '1,2,3'\n\n","Uint8Array.prototype.toString":"\nUint8Array.prototype.toString()\n    Serializes an array as a string.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2, 3 ] );\n    > arr.toString()\n    '1,2,3'\n\n","Uint8Array.prototype.values":"\nUint8Array.prototype.values()\n    Returns an iterator for iterating over array elements.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array elements.\n\n    Examples\n    --------\n    > var arr = new Uint8Array( [ 1, 2 ] );\n    > it = arr.values();\n    > it.next().value\n    1\n    > it.next().value\n    2\n    > it.next().done\n    true\n\n\n    See Also\n    --------\n    ArrayBuffer, Float32Array, Float64Array, Int16Array, Int32Array, Int8Array, Uint16Array, Uint32Array, Uint8ClampedArray\n","Uint8ClampedArray":"\nUint8ClampedArray()\n    A typed array constructor which returns a typed array representing an array\n    of 8-bit unsigned integers in the platform byte order clamped to 0-255.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray()\n    <Uint8ClampedArray>\n\n\nUint8ClampedArray( length )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( 5 )\n    <Uint8ClampedArray>[ 0, 0, 0, 0, 0 ]\n\n\nUint8ClampedArray( typedarray )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int32Array( [ 5, 5, 5 ] );\n    > var arr2 = new Uint8ClampedArray( arr1 )\n    <Uint8ClampedArray>[ 5, 5, 5 ]\n\n\nUint8ClampedArray( obj )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 5.0, 5.0, 5.0 ];\n    > var arr2 = new Uint8ClampedArray( arr1 )\n    <Uint8ClampedArray>[ 5, 5, 5 ]\n\n\nUint8ClampedArray( buffer[, byteOffset[, length]] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 4 );\n    > var arr = new Uint8ClampedArray( buf, 0, 4 )\n    <Uint8ClampedArray>[ 0, 0, 0, 0 ]\n\n\nUint8ClampedArray.from( src[, map[, thisArg]] )\n    Creates a new typed array from an array-like object or an iterable.\n\n    A callback is provided the following arguments:\n\n    - value: source value.\n    - index: source index.\n\n    Parameters\n    ----------\n    src: ArrayLike|Iterable\n        Source of array elements.\n\n    map: Function (optional)\n        Callback to invoke for each source element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        A typed array.\n\n    Examples\n    --------\n    > function mapFcn( v ) { return v * 2; };\n    > var arr = Uint8ClampedArray.from( [ 1, 2 ], mapFcn )\n    <Uint8ClampedArray>[ 2, 4 ]\n\n\nUint8ClampedArray.of( element0[, element1[, ...elementN]] )\n    Creates a new typed array from a variable number of arguments.\n\n    Parameters\n    ----------\n    element0: number\n        Array element.\n\n    element1: number (optional)\n        Array element.\n\n    elementN: number (optional)\n        Array elements.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr = Uint8ClampedArray.of( 1, 2 )\n    <Uint8ClampedArray>[ 1, 2 ]\n\n\nUint8ClampedArray.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Uint8ClampedArray.BYTES_PER_ELEMENT\n    1\n\n\nUint8ClampedArray.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Uint8ClampedArray.name\n    'Uint8ClampedArray'\n\n\nUint8ClampedArray.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n\nUint8ClampedArray.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( 5 );\n    > arr.byteLength\n    5\n\n\nUint8ClampedArray.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( 5 );\n    > arr.byteOffset\n    0\n\n\nUint8ClampedArray.prototype.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( 5 );\n    > arr.BYTES_PER_ELEMENT\n    1\n\n\nUint8ClampedArray.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( 5 );\n    > arr.length\n    5\n\n\nUint8ClampedArray.prototype.copyWithin( target, start[, end] )\n    Copies a sequence of elements within the array starting at `start` and\n    ending at `end` (non-inclusive) to the position starting at `target`.\n\n    Parameters\n    ----------\n    target: integer\n        Target start index position.\n\n    start: integer\n        Source start index position.\n\n    end: integer (optional)\n        Source end index position. Default: out.length.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2, 3, 4, 5 ] );\n    > arr.copyWithin( 3, 0, 2 );\n    > arr[ 3 ]\n    1\n    > arr[ 4 ]\n    2\n\n\nUint8ClampedArray.prototype.entries()\n    Returns an iterator for iterating over array key-value pairs.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array key-value pairs.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2 ] );\n    > it = arr.entries();\n    > it.next().value\n    [ 0, 1 ]\n    > it.next().value\n    [ 1, 2 ]\n    > it.next().done\n    true\n\n\nUint8ClampedArray.prototype.every( predicate[, thisArg] )\n    Tests whether all array elements pass a test implemented by a predicate\n    function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, an array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether all array elements pass.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2 ] );\n    > function predicate( v ) { return ( v <= 1 ); };\n    > arr.every( predicate )\n    false\n\n\nUint8ClampedArray.prototype.fill( value[, start[, end]] )\n    Fills an array from a start index to an end index (non-inclusive) with a\n    provided value.\n\n    Parameters\n    ----------\n    value: number\n        Fill value.\n\n    start: integer (optional)\n        Start index. If less than zero, the start index is resolved relative to\n        the last array element. Default: 0.\n\n    end: integer (optional)\n        End index (non-inclusive). If less than zero, the end index is resolved\n        relative to the last array element. Default: out.length.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2 ] );\n    > arr.fill( 3 );\n    > arr[ 0 ]\n    3\n    > arr[ 1 ]\n    3\n\n\nUint8ClampedArray.prototype.filter( predicate[, thisArg] )\n    Creates a new array which includes those elements for which a predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    If a predicate function does not return a truthy value for any array\n    element, the method returns `null`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which filters array elements. If a predicate function\n        returns a truthy value, an array element is included in the output\n        array; otherwise, an array element is not included in the output array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Uint8ClampedArray( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 1 ); };\n    > var arr2 = arr1.filter( predicate );\n    > arr2.length\n    2\n\n\nUint8ClampedArray.prototype.find( predicate[, thisArg] )\n    Returns the first array element for which a provided predicate function\n    returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `undefined`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    value: number|undefined\n        Array element.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 2 ); };\n    > var v = arr.find( predicate )\n    3\n\n\nUint8ClampedArray.prototype.findIndex( predicate[, thisArg] )\n    Returns the index of the first array element for which a provided predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `-1`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 2 ); };\n    > var idx = arr.findIndex( predicate )\n    2\n\n\nUint8ClampedArray.prototype.forEach( fcn[, thisArg] )\n    Invokes a callback for each array element.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to invoke for each array element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 3, 2, 1 ] );\n    > var str = ' ';\n    > function fcn( v, i ) { str += i + ':' + v + ' '; };\n    > arr.forEach( fcn );\n    > str\n    ' 0:3 1:2 2:1 '\n\n\nUint8ClampedArray.prototype.includes( searchElement[, fromIndex] )\n    Returns a boolean indicating whether an array includes a search element.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether an array includes a search element.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\n    > var bool = arr.includes( 4 )\n    false\n    > bool = arr.includes( 3 )\n    true\n\n\nUint8ClampedArray.prototype.indexOf( searchElement[, fromIndex] )\n    Returns the index of the first array element strictly equal to a search\n    element.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\n    > var idx = arr.indexOf( 4 )\n    -1\n    > idx = arr.indexOf( 3 )\n    2\n\n\nUint8ClampedArray.prototype.join( [separator] )\n    Serializes an array by joining all array elements as a string.\n\n    Parameters\n    ----------\n    separator: string (optional)\n        String delineating array elements. Default: ','.\n\n    Returns\n    -------\n    str: string\n        Array serialized as a string.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\n    > arr.join( '|' )\n    '1|2|3'\n\n\nUint8ClampedArray.prototype.keys()\n    Returns an iterator for iterating over array keys.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array keys.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2 ] );\n    > it = arr.keys();\n    > it.next().value\n    0\n    > it.next().value\n    1\n    > it.next().done\n    true\n\n\nUint8ClampedArray.prototype.lastIndexOf( searchElement[, fromIndex] )\n    Returns the index of the last array element strictly equal to a search\n    element.\n\n    The method iterates from the last array element to the first array element.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: -1.\n\n    Returns\n    -------\n    idx: integer\n        array index.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 0, 2, 0, 1 ] );\n    > var idx = arr.lastIndexOf( 3 )\n    -1\n    > idx = arr.lastIndexOf( 0 )\n    3\n\n\nUint8ClampedArray.prototype.map( fcn[, thisArg] )\n    Maps each array element to an element in a new typed array.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function which maps array elements to elements in the new array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Uint8ClampedArray( [ 1, 2, 3 ] );\n    > function fcn( v ) { return v * 2; };\n    > var arr2 = arr1.map( fcn );\n    <Uint8ClampedArray>[ 2, 4, 6 ]\n\n\nUint8ClampedArray.prototype.reduce( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the first array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the first array element as the first argument and the second array\n    element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduce( fcn, 0 )\n    14\n\n\nUint8ClampedArray.prototype.reduceRight( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result, iterating from right to left.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the last array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the last array element as the first argument and the second-to-last\n    array element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduceRight( fcn, 0 )\n    14\n\n\nUint8ClampedArray.prototype.reverse()\n    Reverses an array *in-place*.\n\n    This method mutates the array on which the method is invoked.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2, 3 ] )\n    <Uint8ClampedArray>[ 1, 2, 3 ]\n    > arr.reverse()\n    <Uint8ClampedArray>[ 3, 2, 1 ]\n\n\nUint8ClampedArray.prototype.set( arr[, offset] )\n    Sets array elements.\n\n    Parameters\n    ----------\n    arr: ArrayLike\n        Source array containing array values to set.\n\n    offset: integer (optional)\n        Array index at which to start writing values. Default: 0.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\n    > arr.set( [ 4, 4 ], 1 );\n    > arr[ 1 ]\n    4\n    > arr[ 2 ]\n    4\n\n\nUint8ClampedArray.prototype.slice( [begin[, end]] )\n    Copies array elements to a new array with the same underlying data type as\n    the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns `null`.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Uint8ClampedArray( [ 1, 2, 3 ] );\n    > var arr2 = arr1.slice( 1 );\n    > arr2.length\n    2\n    > arr2[ 0 ]\n    1\n    > arr2[ 1 ]\n    2\n\n\nUint8ClampedArray.prototype.some( predicate[, thisArg] )\n    Tests whether at least one array element passes a test implemented by a\n    predicate function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, a array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether at least one array element passes.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2 ] );\n    > function predicate( v ) { return ( v > 1 ); };\n    > arr.some( predicate )\n    true\n\n\nUint8ClampedArray.prototype.sort( [compareFunction] )\n    Sorts an array *in-place*.\n\n    The comparison function is provided two array elements per invocation: `a`\n    and `b`.\n\n    The comparison function return value determines the sort order as follows:\n\n    - If the comparison function returns a value less than zero, then the method\n    sorts `a` to an index lower than `b` (i.e., `a` should come *before* `b`).\n\n    - If the comparison function returns a value greater than zero, then the\n    method sorts `a` to an index higher than `b` (i.e., `b` should come *before*\n    `a`).\n\n    - If the comparison function returns zero, then the relative order of `a`\n    and `b` should remain unchanged.\n\n    This method mutates the array on which the method is invoked.\n\n    Parameters\n    ----------\n    compareFunction: Function (optional)\n        Function which specifies the sort order. The default sort order is\n        ascending order.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2, 0, 2, 1 ] );\n    > arr.sort()\n    <Uint8ClampedArray>[ 0, 1, 1, 2, 2 ]\n\n\nUint8ClampedArray.prototype.subarray( [begin[, end]] )\n    Creates a new typed array over the same underlying ArrayBuffer and with the\n    same underlying data type as the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns an empty typed array.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        A new typed array view.\n\n    Examples\n    --------\n    > var arr1 = new Uint8ClampedArray( [ 1, 2, 3, 4, 5 ] );\n    > var arr2 = arr1.subarray( 2 )\n    <Uint8ClampedArray>[ 3, 4, 5 ]\n\n\nUint8ClampedArray.prototype.toLocaleString( [locales[, options]] )\n    Serializes an array as a locale-specific string.\n\n    Parameters\n    ----------\n    locales: string|Array<string> (optional)\n        A BCP 47 language tag, or an array of such tags.\n\n    options: Object (optional)\n        Options.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\n    > arr.toLocaleString()\n    '1,2,3'\n\n\nUint8ClampedArray.prototype.toString()\n    Serializes an array as a string.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\n    > arr.toString()\n    '1,2,3'\n\n\nUint8ClampedArray.prototype.values()\n    Returns an iterator for iterating over array elements.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array elements.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2 ] );\n    > it = arr.values();\n    > it.next().value\n    1\n    > it.next().value\n    2\n    > it.next().done\n    true\n\n\n    See Also\n    --------\n    ArrayBuffer, Float32Array, Float64Array, Int16Array, Int32Array, Int8Array, Uint16Array, Uint32Array, Uint8Array\n","Uint8ClampedArray.from":"\nUint8ClampedArray.from( src[, map[, thisArg]] )\n    Creates a new typed array from an array-like object or an iterable.\n\n    A callback is provided the following arguments:\n\n    - value: source value.\n    - index: source index.\n\n    Parameters\n    ----------\n    src: ArrayLike|Iterable\n        Source of array elements.\n\n    map: Function (optional)\n        Callback to invoke for each source element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        A typed array.\n\n    Examples\n    --------\n    > function mapFcn( v ) { return v * 2; };\n    > var arr = Uint8ClampedArray.from( [ 1, 2 ], mapFcn )\n    <Uint8ClampedArray>[ 2, 4 ]\n\n","Uint8ClampedArray.of":"\nUint8ClampedArray.of( element0[, element1[, ...elementN]] )\n    Creates a new typed array from a variable number of arguments.\n\n    Parameters\n    ----------\n    element0: number\n        Array element.\n\n    element1: number (optional)\n        Array element.\n\n    elementN: number (optional)\n        Array elements.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr = Uint8ClampedArray.of( 1, 2 )\n    <Uint8ClampedArray>[ 1, 2 ]\n\n","Uint8ClampedArray.BYTES_PER_ELEMENT":"\nUint8ClampedArray.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Uint8ClampedArray.BYTES_PER_ELEMENT\n    1\n\n","Uint8ClampedArray.name":"\nUint8ClampedArray.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Uint8ClampedArray.name\n    'Uint8ClampedArray'\n\n","Uint8ClampedArray.prototype.buffer":"\nUint8ClampedArray.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n","Uint8ClampedArray.prototype.byteLength":"\nUint8ClampedArray.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( 5 );\n    > arr.byteLength\n    5\n\n","Uint8ClampedArray.prototype.byteOffset":"\nUint8ClampedArray.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( 5 );\n    > arr.byteOffset\n    0\n\n","Uint8ClampedArray.prototype.BYTES_PER_ELEMENT":"\nUint8ClampedArray.prototype.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( 5 );\n    > arr.BYTES_PER_ELEMENT\n    1\n\n","Uint8ClampedArray.prototype.length":"\nUint8ClampedArray.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( 5 );\n    > arr.length\n    5\n\n","Uint8ClampedArray.prototype.copyWithin":"\nUint8ClampedArray.prototype.copyWithin( target, start[, end] )\n    Copies a sequence of elements within the array starting at `start` and\n    ending at `end` (non-inclusive) to the position starting at `target`.\n\n    Parameters\n    ----------\n    target: integer\n        Target start index position.\n\n    start: integer\n        Source start index position.\n\n    end: integer (optional)\n        Source end index position. Default: out.length.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2, 3, 4, 5 ] );\n    > arr.copyWithin( 3, 0, 2 );\n    > arr[ 3 ]\n    1\n    > arr[ 4 ]\n    2\n\n","Uint8ClampedArray.prototype.entries":"\nUint8ClampedArray.prototype.entries()\n    Returns an iterator for iterating over array key-value pairs.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array key-value pairs.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2 ] );\n    > it = arr.entries();\n    > it.next().value\n    [ 0, 1 ]\n    > it.next().value\n    [ 1, 2 ]\n    > it.next().done\n    true\n\n","Uint8ClampedArray.prototype.every":"\nUint8ClampedArray.prototype.every( predicate[, thisArg] )\n    Tests whether all array elements pass a test implemented by a predicate\n    function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, an array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether all array elements pass.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2 ] );\n    > function predicate( v ) { return ( v <= 1 ); };\n    > arr.every( predicate )\n    false\n\n","Uint8ClampedArray.prototype.fill":"\nUint8ClampedArray.prototype.fill( value[, start[, end]] )\n    Fills an array from a start index to an end index (non-inclusive) with a\n    provided value.\n\n    Parameters\n    ----------\n    value: number\n        Fill value.\n\n    start: integer (optional)\n        Start index. If less than zero, the start index is resolved relative to\n        the last array element. Default: 0.\n\n    end: integer (optional)\n        End index (non-inclusive). If less than zero, the end index is resolved\n        relative to the last array element. Default: out.length.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2 ] );\n    > arr.fill( 3 );\n    > arr[ 0 ]\n    3\n    > arr[ 1 ]\n    3\n\n","Uint8ClampedArray.prototype.filter":"\nUint8ClampedArray.prototype.filter( predicate[, thisArg] )\n    Creates a new array which includes those elements for which a predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    If a predicate function does not return a truthy value for any array\n    element, the method returns `null`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which filters array elements. If a predicate function\n        returns a truthy value, an array element is included in the output\n        array; otherwise, an array element is not included in the output array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Uint8ClampedArray( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 1 ); };\n    > var arr2 = arr1.filter( predicate );\n    > arr2.length\n    2\n\n","Uint8ClampedArray.prototype.find":"\nUint8ClampedArray.prototype.find( predicate[, thisArg] )\n    Returns the first array element for which a provided predicate function\n    returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `undefined`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    value: number|undefined\n        Array element.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 2 ); };\n    > var v = arr.find( predicate )\n    3\n\n","Uint8ClampedArray.prototype.findIndex":"\nUint8ClampedArray.prototype.findIndex( predicate[, thisArg] )\n    Returns the index of the first array element for which a provided predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `-1`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 2 ); };\n    > var idx = arr.findIndex( predicate )\n    2\n\n","Uint8ClampedArray.prototype.forEach":"\nUint8ClampedArray.prototype.forEach( fcn[, thisArg] )\n    Invokes a callback for each array element.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to invoke for each array element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 3, 2, 1 ] );\n    > var str = ' ';\n    > function fcn( v, i ) { str += i + ':' + v + ' '; };\n    > arr.forEach( fcn );\n    > str\n    ' 0:3 1:2 2:1 '\n\n","Uint8ClampedArray.prototype.includes":"\nUint8ClampedArray.prototype.includes( searchElement[, fromIndex] )\n    Returns a boolean indicating whether an array includes a search element.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether an array includes a search element.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\n    > var bool = arr.includes( 4 )\n    false\n    > bool = arr.includes( 3 )\n    true\n\n","Uint8ClampedArray.prototype.indexOf":"\nUint8ClampedArray.prototype.indexOf( searchElement[, fromIndex] )\n    Returns the index of the first array element strictly equal to a search\n    element.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\n    > var idx = arr.indexOf( 4 )\n    -1\n    > idx = arr.indexOf( 3 )\n    2\n\n","Uint8ClampedArray.prototype.join":"\nUint8ClampedArray.prototype.join( [separator] )\n    Serializes an array by joining all array elements as a string.\n\n    Parameters\n    ----------\n    separator: string (optional)\n        String delineating array elements. Default: ','.\n\n    Returns\n    -------\n    str: string\n        Array serialized as a string.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\n    > arr.join( '|' )\n    '1|2|3'\n\n","Uint8ClampedArray.prototype.keys":"\nUint8ClampedArray.prototype.keys()\n    Returns an iterator for iterating over array keys.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array keys.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2 ] );\n    > it = arr.keys();\n    > it.next().value\n    0\n    > it.next().value\n    1\n    > it.next().done\n    true\n\n","Uint8ClampedArray.prototype.lastIndexOf":"\nUint8ClampedArray.prototype.lastIndexOf( searchElement[, fromIndex] )\n    Returns the index of the last array element strictly equal to a search\n    element.\n\n    The method iterates from the last array element to the first array element.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: -1.\n\n    Returns\n    -------\n    idx: integer\n        array index.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 0, 2, 0, 1 ] );\n    > var idx = arr.lastIndexOf( 3 )\n    -1\n    > idx = arr.lastIndexOf( 0 )\n    3\n\n","Uint8ClampedArray.prototype.map":"\nUint8ClampedArray.prototype.map( fcn[, thisArg] )\n    Maps each array element to an element in a new typed array.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function which maps array elements to elements in the new array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Uint8ClampedArray( [ 1, 2, 3 ] );\n    > function fcn( v ) { return v * 2; };\n    > var arr2 = arr1.map( fcn );\n    <Uint8ClampedArray>[ 2, 4, 6 ]\n\n","Uint8ClampedArray.prototype.reduce":"\nUint8ClampedArray.prototype.reduce( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the first array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the first array element as the first argument and the second array\n    element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduce( fcn, 0 )\n    14\n\n","Uint8ClampedArray.prototype.reduceRight":"\nUint8ClampedArray.prototype.reduceRight( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result, iterating from right to left.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the last array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the last array element as the first argument and the second-to-last\n    array element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduceRight( fcn, 0 )\n    14\n\n","Uint8ClampedArray.prototype.reverse":"\nUint8ClampedArray.prototype.reverse()\n    Reverses an array *in-place*.\n\n    This method mutates the array on which the method is invoked.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2, 3 ] )\n    <Uint8ClampedArray>[ 1, 2, 3 ]\n    > arr.reverse()\n    <Uint8ClampedArray>[ 3, 2, 1 ]\n\n","Uint8ClampedArray.prototype.set":"\nUint8ClampedArray.prototype.set( arr[, offset] )\n    Sets array elements.\n\n    Parameters\n    ----------\n    arr: ArrayLike\n        Source array containing array values to set.\n\n    offset: integer (optional)\n        Array index at which to start writing values. Default: 0.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\n    > arr.set( [ 4, 4 ], 1 );\n    > arr[ 1 ]\n    4\n    > arr[ 2 ]\n    4\n\n","Uint8ClampedArray.prototype.slice":"\nUint8ClampedArray.prototype.slice( [begin[, end]] )\n    Copies array elements to a new array with the same underlying data type as\n    the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns `null`.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Uint8ClampedArray( [ 1, 2, 3 ] );\n    > var arr2 = arr1.slice( 1 );\n    > arr2.length\n    2\n    > arr2[ 0 ]\n    1\n    > arr2[ 1 ]\n    2\n\n","Uint8ClampedArray.prototype.some":"\nUint8ClampedArray.prototype.some( predicate[, thisArg] )\n    Tests whether at least one array element passes a test implemented by a\n    predicate function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, a array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether at least one array element passes.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2 ] );\n    > function predicate( v ) { return ( v > 1 ); };\n    > arr.some( predicate )\n    true\n\n","Uint8ClampedArray.prototype.sort":"\nUint8ClampedArray.prototype.sort( [compareFunction] )\n    Sorts an array *in-place*.\n\n    The comparison function is provided two array elements per invocation: `a`\n    and `b`.\n\n    The comparison function return value determines the sort order as follows:\n\n    - If the comparison function returns a value less than zero, then the method\n    sorts `a` to an index lower than `b` (i.e., `a` should come *before* `b`).\n\n    - If the comparison function returns a value greater than zero, then the\n    method sorts `a` to an index higher than `b` (i.e., `b` should come *before*\n    `a`).\n\n    - If the comparison function returns zero, then the relative order of `a`\n    and `b` should remain unchanged.\n\n    This method mutates the array on which the method is invoked.\n\n    Parameters\n    ----------\n    compareFunction: Function (optional)\n        Function which specifies the sort order. The default sort order is\n        ascending order.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2, 0, 2, 1 ] );\n    > arr.sort()\n    <Uint8ClampedArray>[ 0, 1, 1, 2, 2 ]\n\n","Uint8ClampedArray.prototype.subarray":"\nUint8ClampedArray.prototype.subarray( [begin[, end]] )\n    Creates a new typed array over the same underlying ArrayBuffer and with the\n    same underlying data type as the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns an empty typed array.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Uint8ClampedArray\n        A new typed array view.\n\n    Examples\n    --------\n    > var arr1 = new Uint8ClampedArray( [ 1, 2, 3, 4, 5 ] );\n    > var arr2 = arr1.subarray( 2 )\n    <Uint8ClampedArray>[ 3, 4, 5 ]\n\n","Uint8ClampedArray.prototype.toLocaleString":"\nUint8ClampedArray.prototype.toLocaleString( [locales[, options]] )\n    Serializes an array as a locale-specific string.\n\n    Parameters\n    ----------\n    locales: string|Array<string> (optional)\n        A BCP 47 language tag, or an array of such tags.\n\n    options: Object (optional)\n        Options.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\n    > arr.toLocaleString()\n    '1,2,3'\n\n","Uint8ClampedArray.prototype.toString":"\nUint8ClampedArray.prototype.toString()\n    Serializes an array as a string.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2, 3 ] );\n    > arr.toString()\n    '1,2,3'\n\n","Uint8ClampedArray.prototype.values":"\nUint8ClampedArray.prototype.values()\n    Returns an iterator for iterating over array elements.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array elements.\n\n    Examples\n    --------\n    > var arr = new Uint8ClampedArray( [ 1, 2 ] );\n    > it = arr.values();\n    > it.next().value\n    1\n    > it.next().value\n    2\n    > it.next().done\n    true\n\n\n    See Also\n    --------\n    ArrayBuffer, Float32Array, Float64Array, Int16Array, Int32Array, Int8Array, Uint16Array, Uint32Array, Uint8Array\n","UINT16_MAX":"\nUINT16_MAX\n    Maximum unsigned 16-bit integer.\n\n    The maximum unsigned 16-bit integer is given by `2^16 - 1`.\n\n    Examples\n    --------\n    > UINT16_MAX\n    65535\n\n    See Also\n    --------\n    INT16_MAX\n","UINT16_NUM_BYTES":"\nUINT16_NUM_BYTES\n    Size (in bytes) of a 16-bit unsigned integer.\n\n    Examples\n    --------\n    > UINT16_NUM_BYTES\n    2\n\n    See Also\n    --------\n    INT16_NUM_BYTES, UINT32_NUM_BYTES, UINT8_NUM_BYTES\n","Uint16Array":"\nUint16Array()\n    A typed array constructor which returns a typed array representing an array\n    of 16-bit unsigned integers in the platform byte order.\n\n    Returns\n    -------\n    out: Uint16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Uint16Array()\n    <Uint16Array>\n\n\nUint16Array( length )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    Returns\n    -------\n    out: Uint16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( 5 )\n    <Uint16Array>[ 0, 0, 0, 0, 0 ]\n\n\nUint16Array( typedarray )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    Returns\n    -------\n    out: Uint16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int32Array( [ 5, 5, 5 ] );\n    > var arr2 = new Uint16Array( arr1 )\n    <Uint16Array>[ 5, 5, 5 ]\n\n\nUint16Array( obj )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    Returns\n    -------\n    out: Uint16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 5.0, 5.0, 5.0 ];\n    > var arr2 = new Uint16Array( arr1 )\n    <Uint16Array>[ 5, 5, 5 ]\n\n\nUint16Array( buffer[, byteOffset[, length]] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Uint16Array\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 8 );\n    > var arr = new Uint16Array( buf, 0, 4 )\n    <Uint16Array>[ 0, 0, 0, 0 ]\n\n\nUint16Array.from( src[, map[, thisArg]] )\n    Creates a new typed array from an array-like object or an iterable.\n\n    A callback is provided the following arguments:\n\n    - value: source value.\n    - index: source index.\n\n    Parameters\n    ----------\n    src: ArrayLike|Iterable\n        Source of array elements.\n\n    map: Function (optional)\n        Callback to invoke for each source element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Uint16Array\n        A typed array.\n\n    Examples\n    --------\n    > function mapFcn( v ) { return v * 2; };\n    > var arr = Uint16Array.from( [ 1, 2 ], mapFcn )\n    <Uint16Array>[ 2, 4 ]\n\n\nUint16Array.of( element0[, element1[, ...elementN]] )\n    Creates a new typed array from a variable number of arguments.\n\n    Parameters\n    ----------\n    element0: number\n        Array element.\n\n    element1: number (optional)\n        Array element.\n\n    elementN: number (optional)\n        Array elements.\n\n    Returns\n    -------\n    out: Uint16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = Uint16Array.of( 1, 2 )\n    <Uint16Array>[ 1, 2 ]\n\n\nUint16Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Uint16Array.BYTES_PER_ELEMENT\n    2\n\n\nUint16Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Uint16Array.name\n    'Uint16Array'\n\n\nUint16Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n\nUint16Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( 5 );\n    > arr.byteLength\n    10\n\n\nUint16Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( 5 );\n    > arr.byteOffset\n    0\n\n\nUint16Array.prototype.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( 5 );\n    > arr.BYTES_PER_ELEMENT\n    2\n\n\nUint16Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( 5 );\n    > arr.length\n    5\n\n\nUint16Array.prototype.copyWithin( target, start[, end] )\n    Copies a sequence of elements within the array starting at `start` and\n    ending at `end` (non-inclusive) to the position starting at `target`.\n\n    Parameters\n    ----------\n    target: integer\n        Target start index position.\n\n    start: integer\n        Source start index position.\n\n    end: integer (optional)\n        Source end index position. Default: out.length.\n\n    Returns\n    -------\n    out: Uint16Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2, 3, 4, 5 ] );\n    > arr.copyWithin( 3, 0, 2 );\n    > arr[ 3 ]\n    1\n    > arr[ 4 ]\n    2\n\n\nUint16Array.prototype.entries()\n    Returns an iterator for iterating over array key-value pairs.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array key-value pairs.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2 ] );\n    > it = arr.entries();\n    > it.next().value\n    [ 0, 1 ]\n    > it.next().value\n    [ 1, 2 ]\n    > it.next().done\n    true\n\n\nUint16Array.prototype.every( predicate[, thisArg] )\n    Tests whether all array elements pass a test implemented by a predicate\n    function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, an array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether all array elements pass.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2 ] );\n    > function predicate( v ) { return ( v <= 1 ); };\n    > arr.every( predicate )\n    false\n\n\nUint16Array.prototype.fill( value[, start[, end]] )\n    Fills an array from a start index to an end index (non-inclusive) with a\n    provided value.\n\n    Parameters\n    ----------\n    value: number\n        Fill value.\n\n    start: integer (optional)\n        Start index. If less than zero, the start index is resolved relative to\n        the last array element. Default: 0.\n\n    end: integer (optional)\n        End index (non-inclusive). If less than zero, the end index is resolved\n        relative to the last array element. Default: out.length.\n\n    Returns\n    -------\n    out: Uint16Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2 ] );\n    > arr.fill( 3 );\n    > arr[ 0 ]\n    3\n    > arr[ 1 ]\n    3\n\n\nUint16Array.prototype.filter( predicate[, thisArg] )\n    Creates a new array which includes those elements for which a predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    If a predicate function does not return a truthy value for any array\n    element, the method returns `null`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which filters array elements. If a predicate function\n        returns a truthy value, an array element is included in the output\n        array; otherwise, an array element is not included in the output array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Uint16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Uint16Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 1 ); };\n    > var arr2 = arr1.filter( predicate );\n    > arr2.length\n    2\n\n\nUint16Array.prototype.find( predicate[, thisArg] )\n    Returns the first array element for which a provided predicate function\n    returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `undefined`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    value: number|undefined\n        Array element.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 2 ); };\n    > var v = arr.find( predicate )\n    3\n\n\nUint16Array.prototype.findIndex( predicate[, thisArg] )\n    Returns the index of the first array element for which a provided predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `-1`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 2 ); };\n    > var idx = arr.findIndex( predicate )\n    2\n\n\nUint16Array.prototype.forEach( fcn[, thisArg] )\n    Invokes a callback for each array element.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to invoke for each array element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 3, 2, 1 ] );\n    > var str = ' ';\n    > function fcn( v, i ) { str += i + ':' + v + ' '; };\n    > arr.forEach( fcn );\n    > str\n    ' 0:3 1:2 2:1 '\n\n\nUint16Array.prototype.includes( searchElement[, fromIndex] )\n    Returns a boolean indicating whether an array includes a search element.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether an array includes a search element.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2, 3 ] );\n    > var bool = arr.includes( 4 )\n    false\n    > bool = arr.includes( 3 )\n    true\n\n\nUint16Array.prototype.indexOf( searchElement[, fromIndex] )\n    Returns the index of the first array element strictly equal to a search\n    element.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2, 3 ] );\n    > var idx = arr.indexOf( 4 )\n    -1\n    > idx = arr.indexOf( 3 )\n    2\n\n\nUint16Array.prototype.join( [separator] )\n    Serializes an array by joining all array elements as a string.\n\n    Parameters\n    ----------\n    separator: string (optional)\n        String delineating array elements. Default: ','.\n\n    Returns\n    -------\n    str: string\n        Array serialized as a string.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2, 3 ] );\n    > arr.join( '|' )\n    '1|2|3'\n\n\nUint16Array.prototype.keys()\n    Returns an iterator for iterating over array keys.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array keys.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2 ] );\n    > it = arr.keys();\n    > it.next().value\n    0\n    > it.next().value\n    1\n    > it.next().done\n    true\n\n\nUint16Array.prototype.lastIndexOf( searchElement[, fromIndex] )\n    Returns the index of the last array element strictly equal to a search\n    element.\n\n    The method iterates from the last array element to the first array element.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: -1.\n\n    Returns\n    -------\n    idx: integer\n        array index.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 0, 2, 0, 1 ] );\n    > var idx = arr.lastIndexOf( 3 )\n    -1\n    > idx = arr.lastIndexOf( 0 )\n    3\n\n\nUint16Array.prototype.map( fcn[, thisArg] )\n    Maps each array element to an element in a new typed array.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function which maps array elements to elements in the new array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Uint16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Uint16Array( [ 1, 2, 3 ] );\n    > function fcn( v ) { return v * 2; };\n    > var arr2 = arr1.map( fcn );\n    <Uint16Array>[ 2, 4, 6 ]\n\n\nUint16Array.prototype.reduce( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the first array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the first array element as the first argument and the second array\n    element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2, 3 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduce( fcn, 0 )\n    14\n\n\nUint16Array.prototype.reduceRight( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result, iterating from right to left.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the last array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the last array element as the first argument and the second-to-last\n    array element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2, 3 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduceRight( fcn, 0 )\n    14\n\n\nUint16Array.prototype.reverse()\n    Reverses an array *in-place*.\n\n    This method mutates the array on which the method is invoked.\n\n    Returns\n    -------\n    out: Uint16Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2, 3 ] )\n    <Uint16Array>[ 1, 2, 3 ]\n    > arr.reverse()\n    <Uint16Array>[ 3, 2, 1 ]\n\n\nUint16Array.prototype.set( arr[, offset] )\n    Sets array elements.\n\n    Parameters\n    ----------\n    arr: ArrayLike\n        Source array containing array values to set.\n\n    offset: integer (optional)\n        Array index at which to start writing values. Default: 0.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2, 3 ] );\n    > arr.set( [ 4, 4 ], 1 );\n    > arr[ 1 ]\n    4\n    > arr[ 2 ]\n    4\n\n\nUint16Array.prototype.slice( [begin[, end]] )\n    Copies array elements to a new array with the same underlying data type as\n    the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns `null`.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Uint16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Uint16Array( [ 1, 2, 3 ] );\n    > var arr2 = arr1.slice( 1 );\n    > arr2.length\n    2\n    > arr2[ 0 ]\n    1\n    > arr2[ 1 ]\n    2\n\n\nUint16Array.prototype.some( predicate[, thisArg] )\n    Tests whether at least one array element passes a test implemented by a\n    predicate function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, a array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether at least one array element passes.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2 ] );\n    > function predicate( v ) { return ( v > 1 ); };\n    > arr.some( predicate )\n    true\n\n\nUint16Array.prototype.sort( [compareFunction] )\n    Sorts an array *in-place*.\n\n    The comparison function is provided two array elements per invocation: `a`\n    and `b`.\n\n    The comparison function return value determines the sort order as follows:\n\n    - If the comparison function returns a value less than zero, then the method\n    sorts `a` to an index lower than `b` (i.e., `a` should come *before* `b`).\n\n    - If the comparison function returns a value greater than zero, then the\n    method sorts `a` to an index higher than `b` (i.e., `b` should come *before*\n    `a`).\n\n    - If the comparison function returns zero, then the relative order of `a`\n    and `b` should remain unchanged.\n\n    This method mutates the array on which the method is invoked.\n\n    Parameters\n    ----------\n    compareFunction: Function (optional)\n        Function which specifies the sort order. The default sort order is\n        ascending order.\n\n    Returns\n    -------\n    out: Uint16Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2, 0, 2, 1 ] );\n    > arr.sort()\n    <Uint16Array>[ 0, 1, 1, 2, 2 ]\n\n\nUint16Array.prototype.subarray( [begin[, end]] )\n    Creates a new typed array over the same underlying ArrayBuffer and with the\n    same underlying data type as the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns an empty typed array.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Uint16Array\n        A new typed array view.\n\n    Examples\n    --------\n    > var arr1 = new Uint16Array( [ 1, 2, 3, 4, 5 ] );\n    > var arr2 = arr1.subarray( 2 )\n    <Uint16Array>[ 3, 4, 5 ]\n\n\nUint16Array.prototype.toLocaleString( [locales[, options]] )\n    Serializes an array as a locale-specific string.\n\n    Parameters\n    ----------\n    locales: string|Array<string> (optional)\n        A BCP 47 language tag, or an array of such tags.\n\n    options: Object (optional)\n        Options.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2, 3 ] );\n    > arr.toLocaleString()\n    '1,2,3'\n\n\nUint16Array.prototype.toString()\n    Serializes an array as a string.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2, 3 ] );\n    > arr.toString()\n    '1,2,3'\n\n\nUint16Array.prototype.values()\n    Returns an iterator for iterating over array elements.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array elements.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2 ] );\n    > it = arr.values();\n    > it.next().value\n    1\n    > it.next().value\n    2\n    > it.next().done\n    true\n\n\n    See Also\n    --------\n    ArrayBuffer, Float32Array, Float64Array, Int16Array, Int32Array, Int8Array, Uint32Array, Uint8Array, Uint8ClampedArray\n","Uint16Array.from":"\nUint16Array.from( src[, map[, thisArg]] )\n    Creates a new typed array from an array-like object or an iterable.\n\n    A callback is provided the following arguments:\n\n    - value: source value.\n    - index: source index.\n\n    Parameters\n    ----------\n    src: ArrayLike|Iterable\n        Source of array elements.\n\n    map: Function (optional)\n        Callback to invoke for each source element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Uint16Array\n        A typed array.\n\n    Examples\n    --------\n    > function mapFcn( v ) { return v * 2; };\n    > var arr = Uint16Array.from( [ 1, 2 ], mapFcn )\n    <Uint16Array>[ 2, 4 ]\n\n","Uint16Array.of":"\nUint16Array.of( element0[, element1[, ...elementN]] )\n    Creates a new typed array from a variable number of arguments.\n\n    Parameters\n    ----------\n    element0: number\n        Array element.\n\n    element1: number (optional)\n        Array element.\n\n    elementN: number (optional)\n        Array elements.\n\n    Returns\n    -------\n    out: Uint16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = Uint16Array.of( 1, 2 )\n    <Uint16Array>[ 1, 2 ]\n\n","Uint16Array.BYTES_PER_ELEMENT":"\nUint16Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Uint16Array.BYTES_PER_ELEMENT\n    2\n\n","Uint16Array.name":"\nUint16Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Uint16Array.name\n    'Uint16Array'\n\n","Uint16Array.prototype.buffer":"\nUint16Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n","Uint16Array.prototype.byteLength":"\nUint16Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( 5 );\n    > arr.byteLength\n    10\n\n","Uint16Array.prototype.byteOffset":"\nUint16Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( 5 );\n    > arr.byteOffset\n    0\n\n","Uint16Array.prototype.BYTES_PER_ELEMENT":"\nUint16Array.prototype.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( 5 );\n    > arr.BYTES_PER_ELEMENT\n    2\n\n","Uint16Array.prototype.length":"\nUint16Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( 5 );\n    > arr.length\n    5\n\n","Uint16Array.prototype.copyWithin":"\nUint16Array.prototype.copyWithin( target, start[, end] )\n    Copies a sequence of elements within the array starting at `start` and\n    ending at `end` (non-inclusive) to the position starting at `target`.\n\n    Parameters\n    ----------\n    target: integer\n        Target start index position.\n\n    start: integer\n        Source start index position.\n\n    end: integer (optional)\n        Source end index position. Default: out.length.\n\n    Returns\n    -------\n    out: Uint16Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2, 3, 4, 5 ] );\n    > arr.copyWithin( 3, 0, 2 );\n    > arr[ 3 ]\n    1\n    > arr[ 4 ]\n    2\n\n","Uint16Array.prototype.entries":"\nUint16Array.prototype.entries()\n    Returns an iterator for iterating over array key-value pairs.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array key-value pairs.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2 ] );\n    > it = arr.entries();\n    > it.next().value\n    [ 0, 1 ]\n    > it.next().value\n    [ 1, 2 ]\n    > it.next().done\n    true\n\n","Uint16Array.prototype.every":"\nUint16Array.prototype.every( predicate[, thisArg] )\n    Tests whether all array elements pass a test implemented by a predicate\n    function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, an array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether all array elements pass.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2 ] );\n    > function predicate( v ) { return ( v <= 1 ); };\n    > arr.every( predicate )\n    false\n\n","Uint16Array.prototype.fill":"\nUint16Array.prototype.fill( value[, start[, end]] )\n    Fills an array from a start index to an end index (non-inclusive) with a\n    provided value.\n\n    Parameters\n    ----------\n    value: number\n        Fill value.\n\n    start: integer (optional)\n        Start index. If less than zero, the start index is resolved relative to\n        the last array element. Default: 0.\n\n    end: integer (optional)\n        End index (non-inclusive). If less than zero, the end index is resolved\n        relative to the last array element. Default: out.length.\n\n    Returns\n    -------\n    out: Uint16Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2 ] );\n    > arr.fill( 3 );\n    > arr[ 0 ]\n    3\n    > arr[ 1 ]\n    3\n\n","Uint16Array.prototype.filter":"\nUint16Array.prototype.filter( predicate[, thisArg] )\n    Creates a new array which includes those elements for which a predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    If a predicate function does not return a truthy value for any array\n    element, the method returns `null`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which filters array elements. If a predicate function\n        returns a truthy value, an array element is included in the output\n        array; otherwise, an array element is not included in the output array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Uint16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Uint16Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 1 ); };\n    > var arr2 = arr1.filter( predicate );\n    > arr2.length\n    2\n\n","Uint16Array.prototype.find":"\nUint16Array.prototype.find( predicate[, thisArg] )\n    Returns the first array element for which a provided predicate function\n    returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `undefined`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    value: number|undefined\n        Array element.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 2 ); };\n    > var v = arr.find( predicate )\n    3\n\n","Uint16Array.prototype.findIndex":"\nUint16Array.prototype.findIndex( predicate[, thisArg] )\n    Returns the index of the first array element for which a provided predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `-1`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 2 ); };\n    > var idx = arr.findIndex( predicate )\n    2\n\n","Uint16Array.prototype.forEach":"\nUint16Array.prototype.forEach( fcn[, thisArg] )\n    Invokes a callback for each array element.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to invoke for each array element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 3, 2, 1 ] );\n    > var str = ' ';\n    > function fcn( v, i ) { str += i + ':' + v + ' '; };\n    > arr.forEach( fcn );\n    > str\n    ' 0:3 1:2 2:1 '\n\n","Uint16Array.prototype.includes":"\nUint16Array.prototype.includes( searchElement[, fromIndex] )\n    Returns a boolean indicating whether an array includes a search element.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether an array includes a search element.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2, 3 ] );\n    > var bool = arr.includes( 4 )\n    false\n    > bool = arr.includes( 3 )\n    true\n\n","Uint16Array.prototype.indexOf":"\nUint16Array.prototype.indexOf( searchElement[, fromIndex] )\n    Returns the index of the first array element strictly equal to a search\n    element.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2, 3 ] );\n    > var idx = arr.indexOf( 4 )\n    -1\n    > idx = arr.indexOf( 3 )\n    2\n\n","Uint16Array.prototype.join":"\nUint16Array.prototype.join( [separator] )\n    Serializes an array by joining all array elements as a string.\n\n    Parameters\n    ----------\n    separator: string (optional)\n        String delineating array elements. Default: ','.\n\n    Returns\n    -------\n    str: string\n        Array serialized as a string.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2, 3 ] );\n    > arr.join( '|' )\n    '1|2|3'\n\n","Uint16Array.prototype.keys":"\nUint16Array.prototype.keys()\n    Returns an iterator for iterating over array keys.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array keys.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2 ] );\n    > it = arr.keys();\n    > it.next().value\n    0\n    > it.next().value\n    1\n    > it.next().done\n    true\n\n","Uint16Array.prototype.lastIndexOf":"\nUint16Array.prototype.lastIndexOf( searchElement[, fromIndex] )\n    Returns the index of the last array element strictly equal to a search\n    element.\n\n    The method iterates from the last array element to the first array element.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: -1.\n\n    Returns\n    -------\n    idx: integer\n        array index.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 0, 2, 0, 1 ] );\n    > var idx = arr.lastIndexOf( 3 )\n    -1\n    > idx = arr.lastIndexOf( 0 )\n    3\n\n","Uint16Array.prototype.map":"\nUint16Array.prototype.map( fcn[, thisArg] )\n    Maps each array element to an element in a new typed array.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function which maps array elements to elements in the new array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Uint16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Uint16Array( [ 1, 2, 3 ] );\n    > function fcn( v ) { return v * 2; };\n    > var arr2 = arr1.map( fcn );\n    <Uint16Array>[ 2, 4, 6 ]\n\n","Uint16Array.prototype.reduce":"\nUint16Array.prototype.reduce( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the first array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the first array element as the first argument and the second array\n    element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2, 3 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduce( fcn, 0 )\n    14\n\n","Uint16Array.prototype.reduceRight":"\nUint16Array.prototype.reduceRight( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result, iterating from right to left.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the last array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the last array element as the first argument and the second-to-last\n    array element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2, 3 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduceRight( fcn, 0 )\n    14\n\n","Uint16Array.prototype.reverse":"\nUint16Array.prototype.reverse()\n    Reverses an array *in-place*.\n\n    This method mutates the array on which the method is invoked.\n\n    Returns\n    -------\n    out: Uint16Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2, 3 ] )\n    <Uint16Array>[ 1, 2, 3 ]\n    > arr.reverse()\n    <Uint16Array>[ 3, 2, 1 ]\n\n","Uint16Array.prototype.set":"\nUint16Array.prototype.set( arr[, offset] )\n    Sets array elements.\n\n    Parameters\n    ----------\n    arr: ArrayLike\n        Source array containing array values to set.\n\n    offset: integer (optional)\n        Array index at which to start writing values. Default: 0.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2, 3 ] );\n    > arr.set( [ 4, 4 ], 1 );\n    > arr[ 1 ]\n    4\n    > arr[ 2 ]\n    4\n\n","Uint16Array.prototype.slice":"\nUint16Array.prototype.slice( [begin[, end]] )\n    Copies array elements to a new array with the same underlying data type as\n    the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns `null`.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Uint16Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Uint16Array( [ 1, 2, 3 ] );\n    > var arr2 = arr1.slice( 1 );\n    > arr2.length\n    2\n    > arr2[ 0 ]\n    1\n    > arr2[ 1 ]\n    2\n\n","Uint16Array.prototype.some":"\nUint16Array.prototype.some( predicate[, thisArg] )\n    Tests whether at least one array element passes a test implemented by a\n    predicate function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, a array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether at least one array element passes.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2 ] );\n    > function predicate( v ) { return ( v > 1 ); };\n    > arr.some( predicate )\n    true\n\n","Uint16Array.prototype.sort":"\nUint16Array.prototype.sort( [compareFunction] )\n    Sorts an array *in-place*.\n\n    The comparison function is provided two array elements per invocation: `a`\n    and `b`.\n\n    The comparison function return value determines the sort order as follows:\n\n    - If the comparison function returns a value less than zero, then the method\n    sorts `a` to an index lower than `b` (i.e., `a` should come *before* `b`).\n\n    - If the comparison function returns a value greater than zero, then the\n    method sorts `a` to an index higher than `b` (i.e., `b` should come *before*\n    `a`).\n\n    - If the comparison function returns zero, then the relative order of `a`\n    and `b` should remain unchanged.\n\n    This method mutates the array on which the method is invoked.\n\n    Parameters\n    ----------\n    compareFunction: Function (optional)\n        Function which specifies the sort order. The default sort order is\n        ascending order.\n\n    Returns\n    -------\n    out: Uint16Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2, 0, 2, 1 ] );\n    > arr.sort()\n    <Uint16Array>[ 0, 1, 1, 2, 2 ]\n\n","Uint16Array.prototype.subarray":"\nUint16Array.prototype.subarray( [begin[, end]] )\n    Creates a new typed array over the same underlying ArrayBuffer and with the\n    same underlying data type as the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns an empty typed array.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Uint16Array\n        A new typed array view.\n\n    Examples\n    --------\n    > var arr1 = new Uint16Array( [ 1, 2, 3, 4, 5 ] );\n    > var arr2 = arr1.subarray( 2 )\n    <Uint16Array>[ 3, 4, 5 ]\n\n","Uint16Array.prototype.toLocaleString":"\nUint16Array.prototype.toLocaleString( [locales[, options]] )\n    Serializes an array as a locale-specific string.\n\n    Parameters\n    ----------\n    locales: string|Array<string> (optional)\n        A BCP 47 language tag, or an array of such tags.\n\n    options: Object (optional)\n        Options.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2, 3 ] );\n    > arr.toLocaleString()\n    '1,2,3'\n\n","Uint16Array.prototype.toString":"\nUint16Array.prototype.toString()\n    Serializes an array as a string.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2, 3 ] );\n    > arr.toString()\n    '1,2,3'\n\n","Uint16Array.prototype.values":"\nUint16Array.prototype.values()\n    Returns an iterator for iterating over array elements.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array elements.\n\n    Examples\n    --------\n    > var arr = new Uint16Array( [ 1, 2 ] );\n    > it = arr.values();\n    > it.next().value\n    1\n    > it.next().value\n    2\n    > it.next().done\n    true\n\n\n    See Also\n    --------\n    ArrayBuffer, Float32Array, Float64Array, Int16Array, Int32Array, Int8Array, Uint32Array, Uint8Array, Uint8ClampedArray\n","UINT32_MAX":"\nUINT32_MAX\n    Maximum unsigned 32-bit integer.\n\n    The maximum unsigned 32-bit integer is given by `2^32 - 1`.\n\n    Examples\n    --------\n    > UINT32_MAX\n    4294967295\n\n    See Also\n    --------\n    INT32_MAX\n","UINT32_NUM_BYTES":"\nUINT32_NUM_BYTES\n    Size (in bytes) of a 32-bit unsigned integer.\n\n    Examples\n    --------\n    > UINT32_NUM_BYTES\n    4\n\n    See Also\n    --------\n    INT32_NUM_BYTES, UINT16_NUM_BYTES, UINT8_NUM_BYTES\n","Uint32Array":"\nUint32Array()\n    A typed array constructor which returns a typed array representing an array\n    of 32-bit unsigned integers in the platform byte order.\n\n    Returns\n    -------\n    out: Uint32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Uint32Array()\n    <Uint32Array>\n\n\nUint32Array( length )\n    Returns a typed array having a specified length.\n\n    Parameters\n    ----------\n    length: integer\n        Typed array length.\n\n    Returns\n    -------\n    out: Uint32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( 5 )\n    <Uint32Array>[ 0, 0, 0, 0, 0 ]\n\n\nUint32Array( typedarray )\n    Creates a typed array from another typed array.\n\n    Parameters\n    ----------\n    typedarray: TypedArray\n        Typed array from which to generate another typed array.\n\n    Returns\n    -------\n    out: Uint32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Int32Array( [ 5, 5, 5 ] );\n    > var arr2 = new Uint32Array( arr1 )\n    <Uint32Array>[ 5, 5, 5 ]\n\n\nUint32Array( obj )\n    Creates a typed array from an array-like object or iterable.\n\n    Parameters\n    ----------\n    obj: Object\n        Array-like object or iterable from which to generate a typed array.\n\n    Returns\n    -------\n    out: Uint32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = [ 5.0, 5.0, 5.0 ];\n    > var arr2 = new Uint32Array( arr1 )\n    <Uint32Array>[ 5, 5, 5 ]\n\n\nUint32Array( buffer[, byteOffset[, length]] )\n    Returns a typed array view of an ArrayBuffer.\n\n    Parameters\n    ----------\n    buffer: ArrayBuffer\n        Underlying ArrayBuffer.\n\n    byteOffset: integer (optional)\n        Integer byte offset specifying the location of the first typed array\n        element. Default: 0.\n\n    length: integer (optional)\n        View length. If not provided, the view spans from the byteOffset to\n        the end of the underlying ArrayBuffer.\n\n    Returns\n    -------\n    out: Uint32Array\n        A typed array.\n\n    Examples\n    --------\n    > var buf = new ArrayBuffer( 16 );\n    > var arr = new Uint32Array( buf, 0, 4 )\n    <Uint32Array>[ 0, 0, 0, 0 ]\n\n\nUint32Array.from( src[, map[, thisArg]] )\n    Creates a new typed array from an array-like object or an iterable.\n\n    A callback is provided the following arguments:\n\n    - value: source value.\n    - index: source index.\n\n    Parameters\n    ----------\n    src: ArrayLike|Iterable\n        Source of array elements.\n\n    map: Function (optional)\n        Callback to invoke for each source element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Uint32Array\n        A typed array.\n\n    Examples\n    --------\n    > function mapFcn( v ) { return v * 2; };\n    > var arr = Uint32Array.from( [ 1, 2 ], mapFcn )\n    <Uint32Array>[ 2, 4 ]\n\n\nUint32Array.of( element0[, element1[, ...elementN]] )\n    Creates a new typed array from a variable number of arguments.\n\n    Parameters\n    ----------\n    element0: number\n        Array element.\n\n    element1: number (optional)\n        Array element.\n\n    elementN: number (optional)\n        Array elements.\n\n    Returns\n    -------\n    out: Uint32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = Uint32Array.of( 1, 2 )\n    <Uint32Array>[ 1, 2 ]\n\n\nUint32Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Uint32Array.BYTES_PER_ELEMENT\n    4\n\n\nUint32Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Uint32Array.name\n    'Uint32Array'\n\n\nUint32Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n\nUint32Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( 5 );\n    > arr.byteLength\n    20\n\n\nUint32Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( 5 );\n    > arr.byteOffset\n    0\n\n\nUint32Array.prototype.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( 5 );\n    > arr.BYTES_PER_ELEMENT\n    4\n\n\nUint32Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( 5 );\n    > arr.length\n    5\n\n\nUint32Array.prototype.copyWithin( target, start[, end] )\n    Copies a sequence of elements within the array starting at `start` and\n    ending at `end` (non-inclusive) to the position starting at `target`.\n\n    Parameters\n    ----------\n    target: integer\n        Target start index position.\n\n    start: integer\n        Source start index position.\n\n    end: integer (optional)\n        Source end index position. Default: out.length.\n\n    Returns\n    -------\n    out: Uint32Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2, 3, 4, 5 ] );\n    > arr.copyWithin( 3, 0, 2 );\n    > arr[ 3 ]\n    1\n    > arr[ 4 ]\n    2\n\n\nUint32Array.prototype.entries()\n    Returns an iterator for iterating over array key-value pairs.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array key-value pairs.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2 ] );\n    > it = arr.entries();\n    > it.next().value\n    [ 0, 1 ]\n    > it.next().value\n    [ 1, 2 ]\n    > it.next().done\n    true\n\n\nUint32Array.prototype.every( predicate[, thisArg] )\n    Tests whether all array elements pass a test implemented by a predicate\n    function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, an array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether all array elements pass.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2 ] );\n    > function predicate( v ) { return ( v <= 1 ); };\n    > arr.every( predicate )\n    false\n\n\nUint32Array.prototype.fill( value[, start[, end]] )\n    Fills an array from a start index to an end index (non-inclusive) with a\n    provided value.\n\n    Parameters\n    ----------\n    value: number\n        Fill value.\n\n    start: integer (optional)\n        Start index. If less than zero, the start index is resolved relative to\n        the last array element. Default: 0.\n\n    end: integer (optional)\n        End index (non-inclusive). If less than zero, the end index is resolved\n        relative to the last array element. Default: out.length.\n\n    Returns\n    -------\n    out: Uint32Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2 ] );\n    > arr.fill( 3 );\n    > arr[ 0 ]\n    3\n    > arr[ 1 ]\n    3\n\n\nUint32Array.prototype.filter( predicate[, thisArg] )\n    Creates a new array which includes those elements for which a predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    If a predicate function does not return a truthy value for any array\n    element, the method returns `null`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which filters array elements. If a predicate function\n        returns a truthy value, an array element is included in the output\n        array; otherwise, an array element is not included in the output array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Uint32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Uint32Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 1 ); };\n    > var arr2 = arr1.filter( predicate );\n    > arr2.length\n    2\n\n\nUint32Array.prototype.find( predicate[, thisArg] )\n    Returns the first array element for which a provided predicate function\n    returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `undefined`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    value: number|undefined\n        Array element.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 2 ); };\n    > var v = arr.find( predicate )\n    3\n\n\nUint32Array.prototype.findIndex( predicate[, thisArg] )\n    Returns the index of the first array element for which a provided predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `-1`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 2 ); };\n    > var idx = arr.findIndex( predicate )\n    2\n\n\nUint32Array.prototype.forEach( fcn[, thisArg] )\n    Invokes a callback for each array element.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to invoke for each array element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 3, 2, 1 ] );\n    > var str = ' ';\n    > function fcn( v, i ) { str += i + ':' + v + ' '; };\n    > arr.forEach( fcn );\n    > str\n    ' 0:3 1:2 2:1 '\n\n\nUint32Array.prototype.includes( searchElement[, fromIndex] )\n    Returns a boolean indicating whether an array includes a search element.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether an array includes a search element.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2, 3 ] );\n    > var bool = arr.includes( 4 )\n    false\n    > bool = arr.includes( 3 )\n    true\n\n\nUint32Array.prototype.indexOf( searchElement[, fromIndex] )\n    Returns the index of the first array element strictly equal to a search\n    element.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2, 3 ] );\n    > var idx = arr.indexOf( 4 )\n    -1\n    > idx = arr.indexOf( 3 )\n    2\n\n\nUint32Array.prototype.join( [separator] )\n    Serializes an array by joining all array elements as a string.\n\n    Parameters\n    ----------\n    separator: string (optional)\n        String delineating array elements. Default: ','.\n\n    Returns\n    -------\n    str: string\n        Array serialized as a string.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2, 3 ] );\n    > arr.join( '|' )\n    '1|2|3'\n\n\nUint32Array.prototype.keys()\n    Returns an iterator for iterating over array keys.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array keys.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2 ] );\n    > it = arr.keys();\n    > it.next().value\n    0\n    > it.next().value\n    1\n    > it.next().done\n    true\n\n\nUint32Array.prototype.lastIndexOf( searchElement[, fromIndex] )\n    Returns the index of the last array element strictly equal to a search\n    element.\n\n    The method iterates from the last array element to the first array element.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: -1.\n\n    Returns\n    -------\n    idx: integer\n        array index.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 0, 2, 0, 1 ] );\n    > var idx = arr.lastIndexOf( 3 )\n    -1\n    > idx = arr.lastIndexOf( 0 )\n    3\n\n\nUint32Array.prototype.map( fcn[, thisArg] )\n    Maps each array element to an element in a new typed array.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function which maps array elements to elements in the new array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Uint32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Uint32Array( [ 1, 2, 3 ] );\n    > function fcn( v ) { return v * 2; };\n    > var arr2 = arr1.map( fcn );\n    <Uint32Array>[ 2, 4, 6 ]\n\n\nUint32Array.prototype.reduce( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the first array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the first array element as the first argument and the second array\n    element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2, 3 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduce( fcn, 0 )\n    14\n\n\nUint32Array.prototype.reduceRight( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result, iterating from right to left.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the last array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the last array element as the first argument and the second-to-last\n    array element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2, 3 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduceRight( fcn, 0 )\n    14\n\n\nUint32Array.prototype.reverse()\n    Reverses an array *in-place*.\n\n    This method mutates the array on which the method is invoked.\n\n    Returns\n    -------\n    out: Uint32Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2, 3 ] )\n    <Uint32Array>[ 1, 2, 3 ]\n    > arr.reverse()\n    <Uint32Array>[ 3, 2, 1 ]\n\n\nUint32Array.prototype.set( arr[, offset] )\n    Sets array elements.\n\n    Parameters\n    ----------\n    arr: ArrayLike\n        Source array containing array values to set.\n\n    offset: integer (optional)\n        Array index at which to start writing values. Default: 0.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2, 3 ] );\n    > arr.set( [ 4, 4 ], 1 );\n    > arr[ 1 ]\n    4\n    > arr[ 2 ]\n    4\n\n\nUint32Array.prototype.slice( [begin[, end]] )\n    Copies array elements to a new array with the same underlying data type as\n    the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns `null`.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Uint32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Uint32Array( [ 1, 2, 3 ] );\n    > var arr2 = arr1.slice( 1 );\n    > arr2.length\n    2\n    > arr2[ 0 ]\n    1\n    > arr2[ 1 ]\n    2\n\n\nUint32Array.prototype.some( predicate[, thisArg] )\n    Tests whether at least one array element passes a test implemented by a\n    predicate function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, a array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether at least one array element passes.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2 ] );\n    > function predicate( v ) { return ( v > 1 ); };\n    > arr.some( predicate )\n    true\n\n\nUint32Array.prototype.sort( [compareFunction] )\n    Sorts an array *in-place*.\n\n    The comparison function is provided two array elements per invocation: `a`\n    and `b`.\n\n    The comparison function return value determines the sort order as follows:\n\n    - If the comparison function returns a value less than zero, then the method\n    sorts `a` to an index lower than `b` (i.e., `a` should come *before* `b`).\n\n    - If the comparison function returns a value greater than zero, then the\n    method sorts `a` to an index higher than `b` (i.e., `b` should come *before*\n    `a`).\n\n    - If the comparison function returns zero, then the relative order of `a`\n    and `b` should remain unchanged.\n\n    This method mutates the array on which the method is invoked.\n\n    Parameters\n    ----------\n    compareFunction: Function (optional)\n        Function which specifies the sort order. The default sort order is\n        ascending order.\n\n    Returns\n    -------\n    out: Uint32Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2, 0, 2, 1 ] );\n    > arr.sort()\n    <Uint32Array>[ 0, 1, 1, 2, 2 ]\n\n\nUint32Array.prototype.subarray( [begin[, end]] )\n    Creates a new typed array over the same underlying ArrayBuffer and with the\n    same underlying data type as the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns an empty typed array.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Uint32Array\n        A new typed array view.\n\n    Examples\n    --------\n    > var arr1 = new Uint32Array( [ 1, 2, 3, 4, 5 ] );\n    > var arr2 = arr1.subarray( 2 )\n    <Uint32Array>[ 3, 4, 5 ]\n\n\nUint32Array.prototype.toLocaleString( [locales[, options]] )\n    Serializes an array as a locale-specific string.\n\n    Parameters\n    ----------\n    locales: string|Array<string> (optional)\n        A BCP 47 language tag, or an array of such tags.\n\n    options: Object (optional)\n        Options.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2, 3 ] );\n    > arr.toLocaleString()\n    '1,2,3'\n\n\nUint32Array.prototype.toString()\n    Serializes an array as a string.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2, 3 ] );\n    > arr.toString()\n    '1,2,3'\n\n\nUint32Array.prototype.values()\n    Returns an iterator for iterating over array elements.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array elements.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2 ] );\n    > it = arr.values();\n    > it.next().value\n    1\n    > it.next().value\n    2\n    > it.next().done\n    true\n\n\n    See Also\n    --------\n    ArrayBuffer, Float32Array, Float64Array, Int16Array, Int32Array, Int8Array, Uint16Array, Uint8Array, Uint8ClampedArray\n","Uint32Array.from":"\nUint32Array.from( src[, map[, thisArg]] )\n    Creates a new typed array from an array-like object or an iterable.\n\n    A callback is provided the following arguments:\n\n    - value: source value.\n    - index: source index.\n\n    Parameters\n    ----------\n    src: ArrayLike|Iterable\n        Source of array elements.\n\n    map: Function (optional)\n        Callback to invoke for each source element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Uint32Array\n        A typed array.\n\n    Examples\n    --------\n    > function mapFcn( v ) { return v * 2; };\n    > var arr = Uint32Array.from( [ 1, 2 ], mapFcn )\n    <Uint32Array>[ 2, 4 ]\n\n","Uint32Array.of":"\nUint32Array.of( element0[, element1[, ...elementN]] )\n    Creates a new typed array from a variable number of arguments.\n\n    Parameters\n    ----------\n    element0: number\n        Array element.\n\n    element1: number (optional)\n        Array element.\n\n    elementN: number (optional)\n        Array elements.\n\n    Returns\n    -------\n    out: Uint32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr = Uint32Array.of( 1, 2 )\n    <Uint32Array>[ 1, 2 ]\n\n","Uint32Array.BYTES_PER_ELEMENT":"\nUint32Array.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > Uint32Array.BYTES_PER_ELEMENT\n    4\n\n","Uint32Array.name":"\nUint32Array.name\n    Typed array constructor name.\n\n    Examples\n    --------\n    > Uint32Array.name\n    'Uint32Array'\n\n","Uint32Array.prototype.buffer":"\nUint32Array.prototype.buffer\n    Read-only property which returns the ArrayBuffer referenced by the typed\n    array.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( 5 );\n    > arr.buffer\n    <ArrayBuffer>\n\n","Uint32Array.prototype.byteLength":"\nUint32Array.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the typed array.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( 5 );\n    > arr.byteLength\n    20\n\n","Uint32Array.prototype.byteOffset":"\nUint32Array.prototype.byteOffset\n    Read-only property which returns the offset (in bytes) of the typed array\n    from the start of its ArrayBuffer.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( 5 );\n    > arr.byteOffset\n    0\n\n","Uint32Array.prototype.BYTES_PER_ELEMENT":"\nUint32Array.prototype.BYTES_PER_ELEMENT\n    Number of bytes per view element.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( 5 );\n    > arr.BYTES_PER_ELEMENT\n    4\n\n","Uint32Array.prototype.length":"\nUint32Array.prototype.length\n    Read-only property which returns the number of view elements.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( 5 );\n    > arr.length\n    5\n\n","Uint32Array.prototype.copyWithin":"\nUint32Array.prototype.copyWithin( target, start[, end] )\n    Copies a sequence of elements within the array starting at `start` and\n    ending at `end` (non-inclusive) to the position starting at `target`.\n\n    Parameters\n    ----------\n    target: integer\n        Target start index position.\n\n    start: integer\n        Source start index position.\n\n    end: integer (optional)\n        Source end index position. Default: out.length.\n\n    Returns\n    -------\n    out: Uint32Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2, 3, 4, 5 ] );\n    > arr.copyWithin( 3, 0, 2 );\n    > arr[ 3 ]\n    1\n    > arr[ 4 ]\n    2\n\n","Uint32Array.prototype.entries":"\nUint32Array.prototype.entries()\n    Returns an iterator for iterating over array key-value pairs.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array key-value pairs.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2 ] );\n    > it = arr.entries();\n    > it.next().value\n    [ 0, 1 ]\n    > it.next().value\n    [ 1, 2 ]\n    > it.next().done\n    true\n\n","Uint32Array.prototype.every":"\nUint32Array.prototype.every( predicate[, thisArg] )\n    Tests whether all array elements pass a test implemented by a predicate\n    function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, an array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether all array elements pass.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2 ] );\n    > function predicate( v ) { return ( v <= 1 ); };\n    > arr.every( predicate )\n    false\n\n","Uint32Array.prototype.fill":"\nUint32Array.prototype.fill( value[, start[, end]] )\n    Fills an array from a start index to an end index (non-inclusive) with a\n    provided value.\n\n    Parameters\n    ----------\n    value: number\n        Fill value.\n\n    start: integer (optional)\n        Start index. If less than zero, the start index is resolved relative to\n        the last array element. Default: 0.\n\n    end: integer (optional)\n        End index (non-inclusive). If less than zero, the end index is resolved\n        relative to the last array element. Default: out.length.\n\n    Returns\n    -------\n    out: Uint32Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2 ] );\n    > arr.fill( 3 );\n    > arr[ 0 ]\n    3\n    > arr[ 1 ]\n    3\n\n","Uint32Array.prototype.filter":"\nUint32Array.prototype.filter( predicate[, thisArg] )\n    Creates a new array which includes those elements for which a predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    If a predicate function does not return a truthy value for any array\n    element, the method returns `null`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which filters array elements. If a predicate function\n        returns a truthy value, an array element is included in the output\n        array; otherwise, an array element is not included in the output array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Uint32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Uint32Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 1 ); };\n    > var arr2 = arr1.filter( predicate );\n    > arr2.length\n    2\n\n","Uint32Array.prototype.find":"\nUint32Array.prototype.find( predicate[, thisArg] )\n    Returns the first array element for which a provided predicate function\n    returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `undefined`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    value: number|undefined\n        Array element.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 2 ); };\n    > var v = arr.find( predicate )\n    3\n\n","Uint32Array.prototype.findIndex":"\nUint32Array.prototype.findIndex( predicate[, thisArg] )\n    Returns the index of the first array element for which a provided predicate\n    function returns a truthy value.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    If a predicate function never returns a truthy value, the method returns\n    `-1`.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2, 3 ] );\n    > function predicate( v ) { return ( v > 2 ); };\n    > var idx = arr.findIndex( predicate )\n    2\n\n","Uint32Array.prototype.forEach":"\nUint32Array.prototype.forEach( fcn[, thisArg] )\n    Invokes a callback for each array element.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to invoke for each array element.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 3, 2, 1 ] );\n    > var str = ' ';\n    > function fcn( v, i ) { str += i + ':' + v + ' '; };\n    > arr.forEach( fcn );\n    > str\n    ' 0:3 1:2 2:1 '\n\n","Uint32Array.prototype.includes":"\nUint32Array.prototype.includes( searchElement[, fromIndex] )\n    Returns a boolean indicating whether an array includes a search element.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether an array includes a search element.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2, 3 ] );\n    > var bool = arr.includes( 4 )\n    false\n    > bool = arr.includes( 3 )\n    true\n\n","Uint32Array.prototype.indexOf":"\nUint32Array.prototype.indexOf( searchElement[, fromIndex] )\n    Returns the index of the first array element strictly equal to a search\n    element.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: 0.\n\n    Returns\n    -------\n    idx: integer\n        Array index.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2, 3 ] );\n    > var idx = arr.indexOf( 4 )\n    -1\n    > idx = arr.indexOf( 3 )\n    2\n\n","Uint32Array.prototype.join":"\nUint32Array.prototype.join( [separator] )\n    Serializes an array by joining all array elements as a string.\n\n    Parameters\n    ----------\n    separator: string (optional)\n        String delineating array elements. Default: ','.\n\n    Returns\n    -------\n    str: string\n        Array serialized as a string.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2, 3 ] );\n    > arr.join( '|' )\n    '1|2|3'\n\n","Uint32Array.prototype.keys":"\nUint32Array.prototype.keys()\n    Returns an iterator for iterating over array keys.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array keys.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2 ] );\n    > it = arr.keys();\n    > it.next().value\n    0\n    > it.next().value\n    1\n    > it.next().done\n    true\n\n","Uint32Array.prototype.lastIndexOf":"\nUint32Array.prototype.lastIndexOf( searchElement[, fromIndex] )\n    Returns the index of the last array element strictly equal to a search\n    element.\n\n    The method iterates from the last array element to the first array element.\n\n    If unable to locate a search element, the method returns `-1`.\n\n    Parameters\n    ----------\n    searchElement: number\n        Search element.\n\n    fromIndex: integer (optional)\n        Array index from which to begin searching. If provided a negative value,\n        the method resolves the start index relative to the last array element.\n        Default: -1.\n\n    Returns\n    -------\n    idx: integer\n        array index.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 0, 2, 0, 1 ] );\n    > var idx = arr.lastIndexOf( 3 )\n    -1\n    > idx = arr.lastIndexOf( 0 )\n    3\n\n","Uint32Array.prototype.map":"\nUint32Array.prototype.map( fcn[, thisArg] )\n    Maps each array element to an element in a new typed array.\n\n    A provided function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    The returned array has the same data type as the host array.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function which maps array elements to elements in the new array.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    out: Uint32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Uint32Array( [ 1, 2, 3 ] );\n    > function fcn( v ) { return v * 2; };\n    > var arr2 = arr1.map( fcn );\n    <Uint32Array>[ 2, 4, 6 ]\n\n","Uint32Array.prototype.reduce":"\nUint32Array.prototype.reduce( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the first array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the first array element as the first argument and the second array\n    element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2, 3 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduce( fcn, 0 )\n    14\n\n","Uint32Array.prototype.reduceRight":"\nUint32Array.prototype.reduceRight( fcn[, initialValue] )\n    Applies a function against an accumulator and each element in an array and\n    returns the accumulated result, iterating from right to left.\n\n    The provided function is provided the following arguments:\n\n    - acc: accumulated result.\n    - value: current array element.\n    - index: index of the current array element.\n    - arr: array on which the method is invoked.\n\n    If provided an initial value, the method invokes a provided function with\n    the initial value as the first argument and the last array element as the\n    second argument.\n\n    If not provided an initial value, the method invokes a provided function\n    with the last array element as the first argument and the second-to-last\n    array element as the second argument.\n\n    Parameters\n    ----------\n    fcn: Function\n        Function to apply.\n\n    initialValue: Any (optional)\n        Initial accumulation value.\n\n    Returns\n    -------\n    out: Any\n        Accumulated result.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2, 3 ] );\n    > function fcn( acc, v ) { return acc + (v*v); };\n    > var v = arr.reduceRight( fcn, 0 )\n    14\n\n","Uint32Array.prototype.reverse":"\nUint32Array.prototype.reverse()\n    Reverses an array *in-place*.\n\n    This method mutates the array on which the method is invoked.\n\n    Returns\n    -------\n    out: Uint32Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2, 3 ] )\n    <Uint32Array>[ 1, 2, 3 ]\n    > arr.reverse()\n    <Uint32Array>[ 3, 2, 1 ]\n\n","Uint32Array.prototype.set":"\nUint32Array.prototype.set( arr[, offset] )\n    Sets array elements.\n\n    Parameters\n    ----------\n    arr: ArrayLike\n        Source array containing array values to set.\n\n    offset: integer (optional)\n        Array index at which to start writing values. Default: 0.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2, 3 ] );\n    > arr.set( [ 4, 4 ], 1 );\n    > arr[ 1 ]\n    4\n    > arr[ 2 ]\n    4\n\n","Uint32Array.prototype.slice":"\nUint32Array.prototype.slice( [begin[, end]] )\n    Copies array elements to a new array with the same underlying data type as\n    the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns `null`.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Uint32Array\n        A typed array.\n\n    Examples\n    --------\n    > var arr1 = new Uint32Array( [ 1, 2, 3 ] );\n    > var arr2 = arr1.slice( 1 );\n    > arr2.length\n    2\n    > arr2[ 0 ]\n    1\n    > arr2[ 1 ]\n    2\n\n","Uint32Array.prototype.some":"\nUint32Array.prototype.some( predicate[, thisArg] )\n    Tests whether at least one array element passes a test implemented by a\n    predicate function.\n\n    A predicate function is provided the following arguments:\n\n    - value: array element.\n    - index: array index.\n    - arr: array on which the method is invoked.\n\n    Parameters\n    ----------\n    predicate: Function\n        Predicate function which tests array elements. If a predicate function\n        returns a truthy value, a array element passes; otherwise, an array\n        element fails.\n\n    thisArg: Any (optional)\n        Callback execution context.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating whether at least one array element passes.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2 ] );\n    > function predicate( v ) { return ( v > 1 ); };\n    > arr.some( predicate )\n    true\n\n","Uint32Array.prototype.sort":"\nUint32Array.prototype.sort( [compareFunction] )\n    Sorts an array *in-place*.\n\n    The comparison function is provided two array elements per invocation: `a`\n    and `b`.\n\n    The comparison function return value determines the sort order as follows:\n\n    - If the comparison function returns a value less than zero, then the method\n    sorts `a` to an index lower than `b` (i.e., `a` should come *before* `b`).\n\n    - If the comparison function returns a value greater than zero, then the\n    method sorts `a` to an index higher than `b` (i.e., `b` should come *before*\n    `a`).\n\n    - If the comparison function returns zero, then the relative order of `a`\n    and `b` should remain unchanged.\n\n    This method mutates the array on which the method is invoked.\n\n    Parameters\n    ----------\n    compareFunction: Function (optional)\n        Function which specifies the sort order. The default sort order is\n        ascending order.\n\n    Returns\n    -------\n    out: Uint32Array\n        Modified array.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2, 0, 2, 1 ] );\n    > arr.sort()\n    <Uint32Array>[ 0, 1, 1, 2, 2 ]\n\n","Uint32Array.prototype.subarray":"\nUint32Array.prototype.subarray( [begin[, end]] )\n    Creates a new typed array over the same underlying ArrayBuffer and with the\n    same underlying data type as the host array.\n\n    If the method is unable to resolve indices to a non-empty array subsequence,\n    the method returns an empty typed array.\n\n    Parameters\n    ----------\n    begin: integer (optional)\n        Start element index (inclusive). If less than zero, the start index is\n        resolved relative to the last array element. Default: 0.\n\n    end: integer (optional)\n        End element index (exclusive). If less than zero, the end index is\n        resolved relative to the last array element. Default: arr.length.\n\n    Returns\n    -------\n    out: Uint32Array\n        A new typed array view.\n\n    Examples\n    --------\n    > var arr1 = new Uint32Array( [ 1, 2, 3, 4, 5 ] );\n    > var arr2 = arr1.subarray( 2 )\n    <Uint32Array>[ 3, 4, 5 ]\n\n","Uint32Array.prototype.toLocaleString":"\nUint32Array.prototype.toLocaleString( [locales[, options]] )\n    Serializes an array as a locale-specific string.\n\n    Parameters\n    ----------\n    locales: string|Array<string> (optional)\n        A BCP 47 language tag, or an array of such tags.\n\n    options: Object (optional)\n        Options.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2, 3 ] );\n    > arr.toLocaleString()\n    '1,2,3'\n\n","Uint32Array.prototype.toString":"\nUint32Array.prototype.toString()\n    Serializes an array as a string.\n\n    Returns\n    -------\n    str: string\n        A typed array string representation.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2, 3 ] );\n    > arr.toString()\n    '1,2,3'\n\n","Uint32Array.prototype.values":"\nUint32Array.prototype.values()\n    Returns an iterator for iterating over array elements.\n\n    Returns\n    -------\n    iter: Iterator\n        Iterator for iterating over array elements.\n\n    Examples\n    --------\n    > var arr = new Uint32Array( [ 1, 2 ] );\n    > it = arr.values();\n    > it.next().value\n    1\n    > it.next().value\n    2\n    > it.next().done\n    true\n\n\n    See Also\n    --------\n    ArrayBuffer, Float32Array, Float64Array, Int16Array, Int32Array, Int8Array, Uint16Array, Uint8Array, Uint8ClampedArray\n","umask":"\numask( [mask,] [options] )\n    Returns the current process mask, if not provided a mask; otherwise, sets\n    the process mask and returns the previous mask.\n\n    A mask is a set of bits, each of which restricts how its corresponding\n    permission is set for newly created files.\n\n    On POSIX platforms, each file has a set of attributes that control who can\n    read, write, or execute that file. Upon creating a file, file permissions\n    must be set to an initial setting. The process mask restricts those\n    permission settings.\n\n    If the mask contains a bit set to \"1\", the corresponding initial file\n    permission is disabled. If the mask contains a bit set to \"0\", the\n    corresponding permission is left to be determined by the requesting process\n    and the system.\n\n    The process mask is thus a filter that removes permissions as a file is\n    created; i.e., each bit set to a \"1\" removes its corresponding permission.\n\n    In octal representation, a mask is a four digit number, e.g., 0077,\n    comprised as follows:\n\n    - 0: special permissions (setuid, setgid, sticky bit)\n    - 0: (u)ser/owner permissions\n    - 7: (g)roup permissions\n    - 7: (o)thers/non-group permissions\n\n    Octal codes correspond to the following permissions:\n\n    - 0: read, write, execute\n    - 1: read, write\n    - 2: read, execute\n    - 3: read\n    - 4: write, execute\n    - 5: write\n    - 6: execute\n    - 7: no permissions\n\n    If provided fewer than four digits, the mask is left-padded with zeros.\n\n    Note, however, that only the last three digits (i.e., the file permissions\n    digits) of the mask are actually used when the mask is applied.\n\n    Permissions can be represented using the following symbolic form:\n\n        u=rwx,g=rwx,o=rwx\n\n    where\n\n    - u: user permissions\n    - g: group permissions\n    - o: other/non-group permissions\n    - r: read\n    - w: write\n    - x: execute\n\n    When setting permissions using symbolic notation, the function accepts a\n    mask expression of the form:\n\n        [<classes>]<operator><symbols>\n\n    where \"classes\" may be a combination of\n\n    - u: user\n    - g: group\n    - o: other/non-group\n    - a: all\n\n    \"symbols\" may be a combination of\n\n    - r: read\n    - w: write\n    - x: execute\n    - X: special execute\n    - s: setuid/gid on execution\n    - t: sticky\n\n    and \"operator\" may be one of\n\n    - `+`: enable\n    - `-`: disable\n    - `=`: enable specified and disable unspecified permissions\n\n    For example,\n\n    - `u-w`: disable user write permissions\n    - `u+w`: enable user write permissions\n    - `u=w`: enable user write permissions and disable user read and execute\n\n    To specify multiple changes, provide a comma-separated list of mask\n    expressions. For example,\n\n        u+rwx,g-x,o=r\n\n    would enable user read, write, and execute permissions, disable group\n    execute permissions, enable other read permissions, and disable other\n    write and execute permissions.\n\n    The `a` class indicates \"all\", which is the same as specifying \"ugo\". This\n    is the default class if a class is omitted when specifying permissions. For\n    example, `+x` is equivalent to `a+x` which is equivalent to `ugo+x` which\n    is equivalent to `u+x,g+x,o+x` and enables execution for all classes.\n\n    Parameters\n    ----------\n    mask: integer|string (optional)\n        Mask or mask expression. If the mask is a string, the mask is assumed to\n        be in symbolic notation.\n\n    options: Object (optional)\n        Options.\n\n    options.symbolic: boolean (optional)\n        Boolean indicating whether to return the mask using symbolic notation.\n\n    Returns\n    -------\n    mask: integer|string\n        Process mask. If provided a mask, the returned value is the previous\n        mask; otherwise, the returned value is the current process mask.\n\n    Examples\n    --------\n    > var mask = umask()\n    <number>\n    > mask = umask( { 'symbolic': true } )\n    <string>\n\n","uncapitalize":"\nuncapitalize( str )\n    Lowercases the first character of a `string`.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Uncapitalized string.\n\n    Examples\n    --------\n    > var out = uncapitalize( 'Beep' )\n    'beep'\n    > out = uncapitalize( 'bOOp' )\n    'bOOp'\n\n    See Also\n    --------\n    capitalize, lowercase\n","uncapitalizeKeys":"\nuncapitalizeKeys( obj )\n    Converts the first letter of each object key to lowercase.\n\n    The function only transforms own properties. Hence, the function does not\n    transform inherited properties.\n\n    The function shallow copies key values.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > var obj = { 'AA': 1, 'BB': 2 };\n    > var out = uncapitalizeKeys( obj )\n    { 'aA': 1, 'bB': 2 }\n\n    See Also\n    --------\n    capitalizeKeys, lowercaseKeys\n","uncurry":"\nuncurry( fcn[, arity, ][thisArg] )\n    Transforms a curried function into a function invoked with multiple\n    arguments.\n\n    Parameters\n    ----------\n    fcn: Function\n        Curried function.\n\n    arity: integer (optional)\n        Number of parameters.\n\n    thisArg: any (optional)\n        Evaluation context.\n\n    Returns\n    -------\n    out: Function\n        Uncurried function.\n\n    Examples\n    --------\n    > function addX( x ) {\n    ...     return function addY( y ) {\n    ...         return x + y;\n    ...     };\n    ... };\n    > var fcn = uncurry( addX );\n    > var sum = fcn( 2, 3 )\n    5\n\n    // To enforce a fixed number of parameters, provide an `arity` argument:\n    > function add( x ) {\n    ...     return function add( y ) {\n    ...         return x + y;\n    ...     };\n    ... };\n    > fcn = uncurry( add, 2 );\n    > sum = fcn( 9 )\n    <Error>\n\n    // To specify an execution context, provide a `thisArg` argument:\n    > function addX( x ) {\n    ...     this.x = x;\n    ...     return addY;\n    ... };\n    > function addY( y ) {\n    ...     return this.x + y;\n    ... };\n    > fcn = uncurry( addX, {} );\n    > sum = fcn( 2, 3 )\n    5\n\n    See Also\n    --------\n    curry, uncurryRight\n","uncurryRight":"\nuncurryRight( fcn[, arity, ][thisArg] )\n    Transforms a curried function into a function invoked with multiple\n    arguments.\n\n    Provided arguments are applied starting from the right.\n\n    Parameters\n    ----------\n    fcn: Function\n        Curried function.\n\n    arity: integer (optional)\n        Number of parameters.\n\n    thisArg: any (optional)\n        Evaluation context.\n\n    Returns\n    -------\n    out: Function\n        Uncurried function.\n\n    Examples\n    --------\n    > function addX( x ) {\n    ...     return function addY( y ) {\n    ...         return x + y;\n    ...     };\n    ... };\n    > var fcn = uncurryRight( addX );\n    > var sum = fcn( 3, 2 )\n    5\n\n    // To enforce a fixed number of parameters, provide an `arity` argument:\n    > function add( y ) {\n    ...     return function add( x ) {\n    ...         return x + y;\n    ...     };\n    ... };\n    > fcn = uncurryRight( add, 2 );\n    > sum = fcn( 9 )\n    <Error>\n\n    // To specify an execution context, provide a `thisArg` argument:\n    > function addY( y ) {\n    ...     this.y = y;\n    ...     return addX;\n    ... };\n    > function addX( x ) {\n    ...     return x + this.y;\n    ... };\n    > fcn = uncurryRight( addY, {} );\n    > sum = fcn( 3, 2 )\n    5\n\n    See Also\n    --------\n    curry, curryRight, uncurry\n","UNICODE_MAX":"\nUNICODE_MAX\n    Maximum Unicode code point.\n\n    Examples\n    --------\n    > UNICODE_MAX\n    1114111\n\n    See Also\n    --------\n    UNICODE_MAX_BMP\n","UNICODE_MAX_BMP":"\nUNICODE_MAX_BMP\n    Maximum Unicode code point in the Basic Multilingual Plane (BMP).\n\n    Examples\n    --------\n    > UNICODE_MAX_BMP\n    65535\n\n    See Also\n    --------\n    UNICODE_MAX\n","UnicodeColumnChartSparkline":"\nUnicodeColumnChartSparkline( [data,] [options] )\n    Returns a sparkline column chart instance.\n\n    The `data` argument takes precedence over the `data` option.\n\n    Parameters\n    ----------\n    data: ArrayLike|ndarray (optional)\n        Chart data.\n\n    options: Object (optional)\n        Options.\n\n    options.autoRender: boolean (optional)\n        Boolean indicating whether to re-render on a 'change' event. Default:\n        false.\n\n    options.bufferSize: integer|null (optional)\n        Data buffer size. If provided, data is kept in a first-in first-out\n        (FIFO) buffer which cannot exceed the buffer size. Default: +infinity.\n\n    options.data: ArrayLike|ndarray (optional)\n        Chart data.\n\n    options.description: string (optional)\n        Chart description.\n\n    options.infinities: boolean (optional)\n        Boolean indicating whether to encode infinite values. Default: false.\n\n    options.isDefined: Function (optional)\n        An accessor function indicating whether a datum is defined.\n\n    options.label: string (optional)\n        Data label.\n\n    options.yMax: number|null (optional)\n        Maximum value of the y-axis domain. If `null`, the value is computed\n        from the data. Default: null.\n\n    options.yMin: number|null (optional)\n        Minimum value of the y-axis domain. If `null`, the value is computed\n        from the data. Default: null.\n\n    Returns\n    -------\n    chart: ColumnChart\n        Column chart instance.\n\n    chart.autoRender\n        Rendering mode. If `true`, an instance renders on each 'change' event;\n        otherwise, rendering must be triggered manually.\n\n    chart.bufferSize\n        Data buffer size.\n\n    chart.description\n        Chart description.\n\n    chart.data\n        Chart data.\n\n    chart.label\n        Data label.\n\n    chart.infinities\n        Indicates whether to encode infinite values.\n\n    chart.isDefined( d, i )\n        An accessor function which defines whether a datum is defined. This\n        accessor is used to define how missing values are encoded. The default\n        behavior is to ignore values which are `NaN`.\n\n    chart.render()\n        Renders a column chart sparkline.\n\n    chart.yMax\n        Maximum value of the y-axis domain. If set to `null`, when accessed, the\n        returned value is computed from the data.\n\n    chart.yMin\n        Minimum value of the y-axis domain. If set to `null`, when accessed, the\n        returned value is computed from the data.\n\n    Examples\n    --------\n    > var data = [ 1.0, 5.0, 3.0, 2.0, 4.0, 4.0, 3.0 ];\n    > var chart = new UnicodeColumnChartSparkline( data );\n    > chart.render()\n    '▁█▅▃▆▆▅'\n\n    See Also\n    --------\n    plot, Plot, UnicodeSparkline, UnicodeLineChartSparkline, UnicodeTristateChartSparkline, UnicodeUpDownChartSparkline, UnicodeWinLossChartSparkline\n","UnicodeLineChartSparkline":"\nUnicodeLineChartSparkline( [data,] [options] )\n    Returns a sparkline line chart instance.\n\n    The `data` argument takes precedence over the `data` option.\n\n    Parameters\n    ----------\n    data: ArrayLike|ndarray (optional)\n        Chart data.\n\n    options: Object (optional)\n        Options.\n\n    options.autoRender: boolean (optional)\n        Boolean indicating whether to re-render on a 'change' event. Default:\n        false.\n\n    options.bufferSize: integer|null (optional)\n        Data buffer size. If provided, data is kept in a first-in first-out\n        (FIFO) buffer which cannot exceed the buffer size. Default: +infinity.\n\n    options.data: ArrayLike|ndarray (optional)\n        Chart data.\n\n    options.description: string (optional)\n        Chart description.\n\n    options.infinities: boolean (optional)\n        Boolean indicating whether to encode infinite values. Default: false.\n\n    options.isDefined: Function (optional)\n        An accessor function indicating whether a datum is defined.\n\n    options.label: string (optional)\n        Data label.\n\n    options.yMax: number|null (optional)\n        Maximum value of the y-axis domain. If `null`, the value is computed\n        from the data. Default: null.\n\n    options.yMin: number|null (optional)\n        Minimum value of the y-axis domain. If `null`, the value is computed\n        from the data. Default: null.\n\n    Returns\n    -------\n    chart: LineChart\n        Line chart instance.\n\n    chart.autoRender\n        Rendering mode. If `true`, an instance renders on each 'change' event;\n        otherwise, rendering must be triggered manually.\n\n    chart.bufferSize\n        Data buffer size.\n\n    chart.description\n        Chart description.\n\n    chart.data\n        Chart data.\n\n    chart.label\n        Data label.\n\n    chart.infinities\n        Indicates whether to encode infinite values.\n\n    chart.isDefined( d, i )\n        An accessor function which defines whether a datum is defined. This\n        accessor is used to define how missing values are encoded. The default\n        behavior is to ignore values which are `NaN`.\n\n    chart.render()\n        Renders a line chart sparkline.\n\n    chart.yMax\n        Maximum value of the y-axis domain. If set to `null`, when accessed, the\n        returned value is computed from the data.\n\n    chart.yMin\n        Minimum value of the y-axis domain. If set to `null`, when accessed, the\n        returned value is computed from the data.\n\n    Examples\n    --------\n    > var data = [ 1.0, 5.0, 3.0, 2.0, 4.0, 4.0, 3.0 ];\n    > var chart = new UnicodeLineChartSparkline( data );\n    > chart.render()\n    '⡈⠑⠢⠔⠒⠒⠒'\n\n    See Also\n    --------\n    plot, Plot, UnicodeSparkline, UnicodeColumnChartSparkline, UnicodeTristateChartSparkline, UnicodeUpDownChartSparkline, UnicodeWinLossChartSparkline\n","UnicodeSparkline":"\nUnicodeSparkline( [data,] [options] )\n    Returns a Unicode sparkline instance.\n\n    The following chart types are supported:\n\n    - column: column chart (e.g., ▃▆▂▄▁▅▅).\n    - line: line chart (e.g., ⡈⠑⠢⠔⠒⠒⠒).\n    - tristate: tristate chart (e.g., ▄▀──▀▄▄▀).\n    - up-down: up/down chart (e.g., ↓↑↑↑↑↓↓↑).\n    - win-loss: win/loss chart (e.g., ┌╵└┴╵╷╷╵).\n\n    The `data` argument takes precedence over the `data` option.\n\n    Parameters\n    ----------\n    data: ArrayLike|ndarray (optional)\n        Chart data.\n\n    options: Object (optional)\n        Options.\n\n    options.autoRender: boolean (optional)\n        Boolean indicating whether to re-render on a 'change' event. Default:\n        false.\n\n    options.bufferSize: integer|null (optional)\n        Data buffer size. If provided, data is kept in a first-in first-out\n        (FIFO) buffer which cannot exceed the buffer size. Default: +infinity.\n\n    options.data: ArrayLike|ndarray (optional)\n        Chart data.\n\n    options.description: string (optional)\n        Chart description.\n\n    options.infinities: boolean (optional)\n        Boolean indicating whether to encode infinite values. Default: false.\n\n    options.isDefined: Function (optional)\n        An accessor function indicating whether a datum is defined.\n\n    options.label: string (optional)\n        Data label.\n\n    options.type: string (optional)\n        Chart type. Default: 'column'.\n\n    options.yMax: number|null (optional)\n        Maximum value of the y-axis domain. If `null`, the value is computed\n        from the data. Default: null.\n\n    options.yMin: number|null (optional)\n        Minimum value of the y-axis domain. If `null`, the value is computed\n        from the data. Default: null.\n\n    Returns\n    -------\n    chart: ColumnChart\n        Column chart instance.\n\n    chart.autoRender\n        Rendering mode. If `true`, an instance renders on each 'change' event;\n        otherwise, rendering must be triggered manually.\n\n    chart.bufferSize\n        Data buffer size.\n\n    chart.description\n        Chart description.\n\n    chart.data\n        Chart data.\n\n    chart.label\n        Data label.\n\n    chart.infinities\n        Indicates whether to encode infinite values.\n\n    chart.isDefined( d, i )\n        An accessor function which defines whether a datum is defined. This\n        accessor is used to define how missing values are encoded. The default\n        behavior is to ignore values which are `NaN`.\n\n    chart.render()\n        Renders a column chart sparkline.\n\n    chart.type\n        Chart type.\n\n    chart.yMax\n        Maximum value of the y-axis domain. If set to `null`, when accessed, the\n        returned value is computed from the data.\n\n    chart.yMin\n        Minimum value of the y-axis domain. If set to `null`, when accessed, the\n        returned value is computed from the data.\n\n    Examples\n    --------\n    > var data = [ 1.0, 5.0, 3.0, 2.0, 4.0, 4.0, 3.0 ];\n    > var chart = new UnicodeSparkline( data );\n    > chart.render()\n    '▁█▅▃▆▆▅'\n    > chart.type = 'line';\n    > chart.render()\n    '⡈⠑⠢⠔⠒⠒⠒'\n\n    See Also\n    --------\n    plot, Plot, UnicodeColumnChartSparkline, UnicodeLineChartSparkline, UnicodeTristateChartSparkline, UnicodeUpDownChartSparkline, UnicodeWinLossChartSparkline\n","UnicodeTristateChartSparkline":"\nUnicodeTristateChartSparkline( [data,] [options] )\n    Returns a sparkline tristate chart instance.\n\n    In a tristate chart, negative values are encoded as lower blocks, positive\n    values are encoded as upper blocks, and values equal to zero are encoded as\n    middle lines.\n\n    The `data` argument takes precedence over the `data` option.\n\n    Parameters\n    ----------\n    data: ArrayLike|ndarray (optional)\n        Chart data.\n\n    options: Object (optional)\n        Options.\n\n    options.autoRender: boolean (optional)\n        Boolean indicating whether to re-render on a 'change' event. Default:\n        false.\n\n    options.bufferSize: integer|null (optional)\n        Data buffer size. If provided, data is kept in a first-in first-out\n        (FIFO) buffer which cannot exceed the buffer size. Default: +infinity.\n\n    options.data: ArrayLike|ndarray (optional)\n        Chart data.\n\n    options.description: string (optional)\n        Chart description.\n\n    options.isDefined: Function (optional)\n        An accessor function indicating whether a datum is defined.\n\n    options.label: string (optional)\n        Data label.\n\n    Returns\n    -------\n    chart: TristateChart\n        Tristate chart instance.\n\n    chart.autoRender\n        Rendering mode. If `true`, an instance renders on each 'change' event;\n        otherwise, rendering must be triggered manually.\n\n    chart.bufferSize\n        Data buffer size.\n\n    chart.description\n        Chart description.\n\n    chart.data\n        Chart data.\n\n    chart.label\n        Data label.\n\n    chart.isDefined( d, i )\n        An accessor function which defines whether a datum is defined. This\n        accessor is used to define how missing values are encoded. The default\n        behavior is to ignore values which are `NaN`.\n\n    chart.render()\n        Renders a tristate chart sparkline.\n\n    Examples\n    --------\n    > var data = [ -1, 1, 0, 0, 1, -1, -1, 1 ];\n    > var chart = new UnicodeTristateChartSparkline( data );\n    > chart.render()\n    '▄▀──▀▄▄▀'\n\n    See Also\n    --------\n    plot, Plot, UnicodeSparkline, UnicodeColumnChartSparkline, UnicodeLineChartSparkline, UnicodeUpDownChartSparkline, UnicodeWinLossChartSparkline\n","UnicodeUpDownChartSparkline":"\nUnicodeUpDownChartSparkline( [data,] [options] )\n    Returns a sparkline up/down chart instance.\n\n    Glyphs:\n\n    | Value | Glyph |\n    |:-----:|:-----:|\n    |   1   |   ↑   |\n    |   -1  |   ↓   |\n\n    If provided any other value other than 1 or -1, the value is encoded as a\n    missing value.\n\n    The `data` argument takes precedence over the `data` option.\n\n    Parameters\n    ----------\n    data: ArrayLike|ndarray (optional)\n        Chart data.\n\n    options: Object (optional)\n        Options.\n\n    options.autoRender: boolean (optional)\n        Boolean indicating whether to re-render on a 'change' event. Default:\n        false.\n\n    options.bufferSize: integer|null (optional)\n        Data buffer size. If provided, data is kept in a first-in first-out\n        (FIFO) buffer which cannot exceed the buffer size. Default: +infinity.\n\n    options.data: ArrayLike|ndarray (optional)\n        Chart data.\n\n    options.description: string (optional)\n        Chart description.\n\n    options.isDefined: Function (optional)\n        An accessor function indicating whether a datum is defined.\n\n    options.label: string (optional)\n        Data label.\n\n    Returns\n    -------\n    chart: UpDownChart\n        Chart instance.\n\n    chart.autoRender\n        Rendering mode. If `true`, an instance renders on each 'change' event;\n        otherwise, rendering must be triggered manually.\n\n    chart.bufferSize\n        Data buffer size.\n\n    chart.description\n        Chart description.\n\n    chart.data\n        Chart data.\n\n    chart.label\n        Data label.\n\n    chart.isDefined( d, i )\n        An accessor function which defines whether a datum is defined. This\n        accessor is used to define how missing values are encoded. The default\n        behavior is to ignore any values which are not 1 or -1.\n\n    chart.render()\n        Renders an up/down chart sparkline.\n\n    Examples\n    --------\n    > var data = [ -1, 1, 1, 1, 1, -1, -1, 1 ];\n    > var chart = new UnicodeUpDownChartSparkline( data );\n    > chart.render()\n    '↓↑↑↑↑↓↓↑'\n\n    See Also\n    --------\n    plot, Plot, UnicodeSparkline, UnicodeColumnChartSparkline, UnicodeLineChartSparkline, UnicodeTristateChartSparkline, UnicodeWinLossChartSparkline\n","UnicodeWinLossChartSparkline":"\nUnicodeWinLossChartSparkline( [data,] [options] )\n    Returns a sparkline win/loss chart instance.\n\n    Glyphs:\n\n    | Value | Glyph |\n    |:-----:|:-----:|\n    |   1   |   ╵   |\n    |   -1  |   ╷   |\n    |   2   |   └   |\n    |   -2  |   ┌   |\n\n    If a `2` or `-2` is preceded by a `2` or `-2`,\n\n    | Value | Glyph |\n    |:-----:|:-----:|\n    |   2   |   ┴   |\n    |   -2  |   ┬   |\n\n    Based on the win/loss analogy,\n\n    - 1: win away\n    - 2: win at home\n    - -1: loss away\n    - -2: loss at home\n\n    If provided any value other than 1, -1, 2, or -2, the value is encoded as a\n    missing value.\n\n    The `data` argument takes precedence over the `data` option.\n\n    Parameters\n    ----------\n    data: ArrayLike|ndarray (optional)\n        Chart data.\n\n    options: Object (optional)\n        Options.\n\n    options.autoRender: boolean (optional)\n        Boolean indicating whether to re-render on a 'change' event. Default:\n        false.\n\n    options.bufferSize: integer|null (optional)\n        Data buffer size. If provided, data is kept in a first-in first-out\n        (FIFO) buffer which cannot exceed the buffer size. Default: +infinity.\n\n    options.data: ArrayLike|ndarray (optional)\n        Chart data.\n\n    options.description: string (optional)\n        Chart description.\n\n    options.isDefined: Function (optional)\n        An accessor function indicating whether a datum is defined.\n\n    options.label: string (optional)\n        Data label.\n\n    Returns\n    -------\n    chart: WinLossChart\n        Chart instance.\n\n    chart.autoRender\n        Rendering mode. If `true`, an instance renders on each 'change' event;\n        otherwise, rendering must be triggered manually.\n\n    chart.bufferSize\n        Data buffer size.\n\n    chart.description\n        Chart description.\n\n    chart.data\n        Chart data.\n\n    chart.label\n        Data label.\n\n    chart.isDefined( d, i )\n        An accessor function which defines whether a datum is defined. This\n        accessor is used to define how missing values are encoded. The default\n        behavior is to ignore any values which are not 1, -1, 2, or -2.\n\n    chart.render()\n        Renders a win/loss chart sparkline.\n\n    Examples\n    --------\n    > var data = [ -2, 1, 2, 2, 1, -1, -1, 1 ];\n    > var chart = new UnicodeWinLossChartSparkline( data );\n    > chart.render()\n    '┌╵└┴╵╷╷╵'\n\n    See Also\n    --------\n    plot, Plot, UnicodeSparkline, UnicodeColumnChartSparkline, UnicodeLineChartSparkline, UnicodeTristateChartSparkline, UnicodeUpDownChartSparkline\n","unlink":"\nunlink( path, clbk )\n    Asynchronously removes a directory entry.\n\n    If a provided path is a symbolic link, the function removes the symbolic\n    link named by the path and does not affect any file or directory named by\n    the contents of the symbolic link.\n\n    Otherwise, the function removes the link named by the provided path and\n    decrements the link count of the file referenced by the link.\n\n    When a file's link count becomes 0 and no process has the file open, the\n    space occupied by the file is freed and the file is no longer accessible.\n\n    If one or more processes have the file open when the last link is removed,\n    the link is removed before the function returns; however, the removal of\n    file contents is postponed until all references to the file are closed.\n\n    If the path refers to a socket, FIFO, or device, processes which have the\n    object open may continue to use it.\n\n    The path argument should *not* be a directory. To remove a directory, use\n    rmdir().\n\n    Parameters\n    ----------\n    path: string|Buffer|integer\n        Entry path.\n\n    clbk: Function\n        Callback to invoke upon removing an entry.\n\n    Examples\n    --------\n    > function done( error ) {\n    ...     if ( error ) {\n    ...         console.error( error.message );\n    ...     }\n    ... };\n    > unlink( './beep/boop.txt', done );\n\n\nunlink.sync( path )\n    Synchronously removes a directory entry.\n\n   Parameters\n    ----------\n    path: string|Buffer|integer\n        Entry path.\n\n    Returns\n    -------\n    out: Error|null\n        Error object or null.\n\n    Examples\n    --------\n    > var out = unlink.sync( './beep/boop.txt' );\n\n    See Also\n    --------\n    exists\n","unlink.sync":"\nunlink.sync( path )\n    Synchronously removes a directory entry.\n\n   Parameters\n    ----------\n    path: string|Buffer|integer\n        Entry path.\n\n    Returns\n    -------\n    out: Error|null\n        Error object or null.\n\n    Examples\n    --------\n    > var out = unlink.sync( './beep/boop.txt' );\n\n    See Also\n    --------\n    exists\n","unshift":"\nunshift( collection, ...items )\n    Adds one or more elements to the beginning of a collection.\n\n    If the input collection is a typed array, the output value does not equal\n    the input reference and the underlying `ArrayBuffer` may *not* be the same\n    as the `ArrayBuffer` belonging to the input view.\n\n    For purposes of generality, always treat the output collection as distinct\n    from the input collection.\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        A collection. If the collection is an `Object`, the collection should be\n        array-like.\n\n    items: ...any\n        Items to add.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Updated collection.\n\n    Examples\n    --------\n    // Arrays:\n    > var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];\n    > arr = unshift( arr, 6.0, 7.0 )\n    [ 6.0, 7.0, 1.0, 2.0, 3.0, 4.0, 5.0 ]\n\n    // Typed arrays:\n    > arr = new Float64Array( [ 1.0, 2.0 ] );\n    > arr = unshift( arr, 3.0, 4.0 )\n    <Float64Array>[ 3.0, 4.0, 1.0, 2.0 ]\n\n    // Array-like object:\n    > arr = { 'length': 1, '0': 1.0 };\n    > arr = unshift( arr, 2.0, 3.0 )\n    { 'length': 3, '0': 2.0, '1': 3.0, '2': 1.0 }\n\n    See Also\n    --------\n    pop, push, shift\n","until":"\nuntil( predicate, fcn[, thisArg] )\n    Invokes a function until a test condition is true.\n\n    When invoked, both the predicate function and the function to invoke are\n    provided a single argument:\n\n    - `i`: iteration number (starting from zero)\n\n    Parameters\n    ----------\n    predicate: Function\n        The predicate function which indicates whether to stop invoking a\n        function.\n\n    fcn: Function\n        The function to invoke.\n\n    thisArg: any (optional)\n        Execution context for the invoked function.\n\n    Examples\n    --------\n    > function predicate( i ) { return ( i >= 5 ); };\n    > function beep( i ) { console.log( 'boop: %d', i ); };\n    > until( predicate, beep )\n    boop: 0\n    boop: 1\n    boop: 2\n    boop: 3\n    boop: 4\n\n    See Also\n    --------\n    doUntil, doWhile, untilAsync, untilEach, whilst\n","untilAsync":"\nuntilAsync( predicate, fcn, done[, thisArg] )\n    Invokes a function until a test condition is true.\n\n    The predicate function is provided two arguments:\n\n    - `i`: iteration number (starting from zero)\n    - `clbk`: a callback indicating whether to invoke `fcn`\n\n    The `clbk` function accepts two arguments:\n\n    - `error`: error argument\n    - `bool`: test result\n\n    If the test result is falsy, the function invokes `fcn`; otherwise, the\n    function invokes the `done` callback.\n\n    The function to invoke is provided two arguments:\n\n    - `i`: iteration number (starting from zero)\n    - `next`: a callback which must be invoked before proceeding to the next\n      iteration\n\n    The first argument of the `next` callback is an `error` argument. If `fcn`\n    calls the `next` callback with a truthy `error` argument, the function\n    suspends execution and immediately calls the `done` callback for subsequent\n    `error` handling.\n\n    The `done` callback is invoked with an `error` argument and any arguments\n    passed to the final `next` callback.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    predicate: Function\n        The predicate function which indicates whether to continue invoking a\n        function.\n\n    fcn: Function\n        The function to invoke.\n\n    done: Function\n        Callback to invoke upon completion.\n\n    thisArg: any (optional)\n        Execution context for the invoked function.\n\n    Examples\n    --------\n    > function predicate( i, clbk ) { clbk( null, i >= 5 ); };\n    > function fcn( i, next ) {\n    ...     setTimeout( onTimeout, i );\n    ...     function onTimeout() {\n    ...         next( null, 'boop'+i );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > untilAsync( predicate, fcn, done )\n    boop: 4\n\n    See Also\n    --------\n    doUntilAsync, doWhileAsync, until, whileAsync\n","untilEach":"\nuntilEach( collection, predicate, fcn[, thisArg] )\n    Until a test condition is true, invokes a function for each element in a\n    collection.\n\n    When invoked, both the predicate function and the function to apply are\n    provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The predicate function which indicates whether to stop iterating over a\n        collection.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context for the applied function.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function predicate( v ) { return v !== v; };\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, 2, 3, 4, NaN, 5 ];\n    > untilEach( arr, predicate, logger )\n    0: 1\n    1: 2\n    2: 3\n    3: 4\n\n    See Also\n    --------\n    untilEachRight, whileEach\n","untilEachRight":"\nuntilEachRight( collection, predicate, fcn[, thisArg] )\n    Until a test condition is true, invokes a function for each element in a\n    collection, iterating from right to left.\n\n    When invoked, both the predicate function and the function to apply are\n    provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The predicate function which indicates whether to stop iterating over a\n        collection.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context for the applied function.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function predicate( v ) { return v !== v; };\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, NaN, 2, 3, 4, 5 ];\n    > untilEachRight( arr, predicate, logger )\n    5: 5\n    4: 4\n    3: 3\n    2: 2\n\n    See Also\n    --------\n    untilEach, whileEachRight\n","unzip":"\nunzip( arr[, idx] )\n    Unzips a zipped array (i.e., a nested array of tuples).\n\n    Parameters\n    ----------\n    arr: Array\n        Zipped array.\n\n    idx: Array<number> (optional)\n        Array of indices specifying which tuple elements to unzip.\n\n    Returns\n    -------\n    out: Array\n        Array of unzipped arrays.\n\n    Examples\n    --------\n    // Basic usage:\n    > var arr = [ [ 1, 'a', 3 ], [ 2, 'b', 4 ] ];\n    > var out = unzip( arr )\n    [ [ 1, 2 ], [ 'a', 'b' ], [ 3, 4 ] ]\n\n    // Provide indices:\n    > arr = [ [ 1, 'a', 3 ], [ 2, 'b', 4 ] ];\n    > out = unzip( arr, [ 0, 2 ] )\n    [ [ 1, 2 ], [ 3, 4 ] ]\n\n    See Also\n    --------\n    zip\n","uppercase":"\nuppercase( str )\n    Converts a `string` to uppercase.\n\n    Parameters\n    ----------\n    str: string\n        Input string.\n\n    Returns\n    -------\n    out: string\n        Uppercase string.\n\n    Examples\n    --------\n    > var out = uppercase( 'bEEp' )\n    'BEEP'\n\n    See Also\n    --------\n    capitalize, lowercase\n","uppercaseKeys":"\nuppercaseKeys( obj )\n    Converts each object key to uppercase.\n\n    The function only transforms own properties. Hence, the function does not\n    transform inherited properties.\n\n    The function shallow copies key values.\n\n    Parameters\n    ----------\n    obj: Object\n        Source object.\n\n    Returns\n    -------\n    out: Object\n        New object.\n\n    Examples\n    --------\n    > var obj = { 'a': 1, 'b': 2 };\n    > var out = uppercaseKeys( obj )\n    { 'A': 1, 'B': 2 }\n\n    See Also\n    --------\n    capitalizeKeys, lowercaseKeys\n","US_STATES_ABBR":"\nUS_STATES_ABBR()\n    Returns a list of US state two-letter abbreviations in alphabetical order\n    according to state name.\n\n    Returns\n    -------\n    out: Array<string>\n        List of US state two-letter abbreviations.\n\n    Examples\n    --------\n    > var list = US_STATES_ABBR()\n    [ 'AL', 'AK', 'AZ', 'AR', ... ]\n\n    See Also\n    --------\n    US_STATES_CAPITALS, US_STATES_NAMES\n","US_STATES_CAPITALS":"\nUS_STATES_CAPITALS()\n    Returns a list of US state capitals in alphabetical order according to state\n    name.\n\n    Returns\n    -------\n    out: Array<string>\n        List of US state capitals.\n\n    Examples\n    --------\n    > var list = US_STATES_CAPITALS()\n    [ 'Montgomery', 'Juneau', 'Phoenix', ... ]\n\n    See Also\n    --------\n    US_STATES_ABBR, US_STATES_CAPITALS_NAMES, US_STATES_NAMES, US_STATES_NAMES_CAPITALS\n","US_STATES_CAPITALS_NAMES":"\nUS_STATES_CAPITALS_NAMES()\n    Returns an object mapping US state capitals to state names.\n\n    Returns\n    -------\n    out: Object\n        An object mapping US state capitals to state names.\n\n    Examples\n    --------\n    > var out = US_STATES_CAPITALS_NAMES()\n    { 'Montgomery': 'Alabama', 'Juneau': 'Alaska', ... }\n\n    See Also\n    --------\n    US_STATES_CAPITALS, US_STATES_NAMES, US_STATES_NAMES_CAPITALS\n","US_STATES_NAMES":"\nUS_STATES_NAMES()\n    Returns a list of US state names in alphabetical order.\n\n    Returns\n    -------\n    out: Array<string>\n        List of US state names.\n\n    Examples\n    --------\n    > var list = US_STATES_NAMES()\n    [ 'Alabama', 'Alaska', 'Arizona', ... ]\n\n    See Also\n    --------\n    US_STATES_ABBR, US_STATES_CAPITALS, US_STATES_CAPITALS_NAMES, US_STATES_NAMES_CAPITALS\n","US_STATES_NAMES_CAPITALS":"\nUS_STATES_NAMES_CAPITALS()\n    Returns an object mapping US state names to state capitals.\n\n    Returns\n    -------\n    out: Object\n        An object mapping US state names to state capitals.\n\n    Examples\n    --------\n    > var out = US_STATES_NAMES_CAPITALS()\n    { 'Alabama': 'Montgomery', 'Alaska': 'Juneau', ... }\n\n    See Also\n    --------\n    US_STATES_CAPITALS, US_STATES_NAMES, US_STATES_NAMES_CAPITALS\n","utf16ToUTF8Array":"\nutf16ToUTF8Array( str )\n    Converts a UTF-16 encoded string to an array of integers using UTF-8\n    encoding.\n\n    The following byte sequences are used to represent a character. The sequence\n    depends on the code point:\n\n        0x00000000 - 0x0000007F:\n            0xxxxxxx\n\n        0x00000080 - 0x000007FF:\n            110xxxxx 10xxxxxx\n\n        0x00000800 - 0x0000FFFF:\n            1110xxxx 10xxxxxx 10xxxxxx\n\n        0x00010000 - 0x001FFFFF:\n            11110xxx 10xxxxxx 10xxxxxx 10xxxxxx\n\n    The `x` bit positions correspond to code point bits.\n\n    Only the shortest possible multi-byte sequence which can represent a code\n    point is used.\n\n    Parameters\n    ----------\n    str: string\n        UTF-16 encoded string.\n\n    Returns\n    -------\n    out: Array\n        Array of integers.\n\n    Examples\n    --------\n    > var str = '☃';\n    > var out = utf16ToUTF8Array( str )\n    [ 226, 152, 131 ]\n\n","vartest":"\nvartest( x, y[, options] )\n    Computes a two-sample F-test for equal variances.\n\n    The returned object comes with a `.print()` method which when invoked will\n    print a formatted output of the results of the hypothesis test.\n\n    Parameters\n    ----------\n    x: Array<number>\n        First data array.\n\n    y: Array<number>\n        Second data array.\n\n    options: Object (optional)\n        Options.\n\n    options.alpha: number (optional)\n        Number in the interval `[0,1]` giving the significance level of the\n        hypothesis test. Default: `0.05`.\n\n    options.alternative: string (optional)\n        Either `two-sided`, `less` or `greater`.\n\n    options.ratio: number (optional)\n        Positive number denoting the ratio of the two population variances under\n        the null hypothesis. Default: `1`.\n\n    Returns\n    -------\n    out: Object\n        Test result object.\n\n    out.alpha: number\n        Used significance level.\n\n    out.rejected: boolean\n        Test decision.\n\n    out.pValue: number\n        p-value of the test.\n\n    out.statistic: number\n        Value of test statistic.\n\n    out.ci: Array<number>\n        1-alpha confidence interval for the ratio of variances.\n\n    out.nullValue: number\n        Assumed ratio of variances under H0.\n\n    out.xvar: number\n        Sample variance of `x`.\n\n    out.yvar: number\n        Sample variance of `y`.\n\n    out.alternative: string\n        Alternative hypothesis (`two-sided`, `less` or `greater`).\n\n    out.dfX: number\n        Numerator degrees of freedom.\n\n    out.dfY: number\n        Denominator degrees of freedom.\n\n    out.method: string\n        Name of test.\n\n    out.print: Function\n        Function to print formatted output.\n\n    Examples\n    --------\n    > var x = [ 610, 610, 550, 590, 565, 570 ];\n    > var y = [ 560, 550, 580, 550, 560, 590, 550, 590 ];\n    > var out = vartest( x, y )\n    {\n        rejected: false,\n        pValue: ~0.399,\n        statistic: ~1.976,\n        ci: [ ~0.374, ~13.542 ],\n        // ...\n    }\n\n    // Print table output:\n    > var table = out.print()\n    F test for comparing two variances\n\n    Alternative hypothesis: True ratio in variances is not equal to 1\n\n        pValue: 0.3992\n        statistic: 1.976\n        variance of x: 617.5 (df of x: 5)\n        variance of y: 312.5 (df of y: 7)\n        95% confidence interval: [0.3739,13.5417]\n\n    Test Decision: Fail to reject null in favor of alternative at 5%\n    significance level\n\n    See Also\n    --------\n    bartlettTest\n","waterfall":"\nwaterfall( fcns, clbk[, thisArg] )\n    Executes functions in series, passing the results of one function as\n    arguments to the next function.\n\n    The last argument applied to each waterfall function is a callback. The\n    callback should be invoked upon a series function completion. The first\n    argument is reserved as an error argument (which can be `null`). Any results\n    which should be passed to the next function in the series should be provided\n    beginning with the second argument.\n\n    If any function calls the provided callback with a truthy `error` argument,\n    the waterfall suspends execution and immediately calls the completion\n    callback for subsequent error handling.\n\n    Execution is *not* guaranteed to be asynchronous. To ensure asynchrony, wrap\n    the completion callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    fcns: Array<Function>\n        Array of functions.\n\n    clbk: Function\n        Callback to invoke upon completion.\n\n    thisArg: any (optional)\n        Function context.\n\n    Examples\n    --------\n    > function foo( next ) { next( null, 'beep' ); };\n    > function bar( str, next ) { console.log( str ); next(); };\n    > function done( error ) { if ( error ) { throw error; } };\n    > var fcns = [ foo, bar ];\n    > waterfall( fcns, done );\n\n\nwaterfall.factory( fcns, clbk[, thisArg] )\n    Returns a reusable waterfall function.\n\n    Parameters\n    ----------\n    fcns: Array<Function>\n        Array of functions.\n\n    clbk: Function\n        Callback to invoke upon completion.\n\n    thisArg: any (optional)\n        Function context.\n\n    Returns\n    -------\n    fcn: Function\n        Waterfall function.\n\n    Examples\n    --------\n    > function foo( next ) { next( null, 'beep' ); };\n    > function bar( str, next ) { console.log( str ); next(); };\n    > function done( error ) { if ( error ) { throw error; } };\n    > var fcns = [ foo, bar ];\n    > var waterfall = waterfall.factory( fcns, done );\n    > waterfall();\n    > waterfall();\n    > waterfall();\n\n","waterfall.factory":"\nwaterfall.factory( fcns, clbk[, thisArg] )\n    Returns a reusable waterfall function.\n\n    Parameters\n    ----------\n    fcns: Array<Function>\n        Array of functions.\n\n    clbk: Function\n        Callback to invoke upon completion.\n\n    thisArg: any (optional)\n        Function context.\n\n    Returns\n    -------\n    fcn: Function\n        Waterfall function.\n\n    Examples\n    --------\n    > function foo( next ) { next( null, 'beep' ); };\n    > function bar( str, next ) { console.log( str ); next(); };\n    > function done( error ) { if ( error ) { throw error; } };\n    > var fcns = [ foo, bar ];\n    > var waterfall = waterfall.factory( fcns, done );\n    > waterfall();\n    > waterfall();\n    > waterfall();\n\n","whileAsync":"\nwhileAsync( predicate, fcn, done[, thisArg] )\n    Invokes a function while a test condition is true.\n\n    The predicate function is provided two arguments:\n\n    - `i`: iteration number (starting from zero)\n    - `clbk`: a callback indicating whether to invoke `fcn`\n\n    The `clbk` function accepts two arguments:\n\n    - `error`: error argument\n    - `bool`: test result\n\n    If the test result is truthy, the function invokes `fcn`; otherwise, the\n    function invokes the `done` callback.\n\n    The function to invoke is provided two arguments:\n\n    - `i`: iteration number (starting from zero)\n    - `next`: a callback which must be invoked before proceeding to the next\n      iteration\n\n    The first argument of the `next` callback is an `error` argument. If `fcn`\n    calls the `next` callback with a truthy `error` argument, the function\n    suspends execution and immediately calls the `done` callback for subsequent\n    `error` handling.\n\n    The `done` callback is invoked with an `error` argument and any arguments\n    passed to the final `next` callback.\n\n    Execution is *not* guaranteed to be asynchronous. To guarantee asynchrony,\n    wrap the `done` callback in a function which either executes at the end of\n    the current stack (e.g., `nextTick`) or during a subsequent turn of the\n    event loop (e.g., `setImmediate`, `setTimeout`).\n\n    Parameters\n    ----------\n    predicate: Function\n        The predicate function which indicates whether to continue invoking a\n        function.\n\n    fcn: Function\n        The function to invoke.\n\n    done: Function\n        Callback to invoke upon completion.\n\n    thisArg: any (optional)\n        Execution context for the invoked function.\n\n    Examples\n    --------\n    > function predicate( i, clbk ) { clbk( null, i < 5 ); };\n    > function fcn( i, next ) {\n    ...     setTimeout( onTimeout, i );\n    ...     function onTimeout() {\n    ...         next( null, 'boop'+i );\n    ...     }\n    ... };\n    > function done( error, result ) {\n    ...     if ( error ) {\n    ...         throw error;\n    ...     }\n    ...     console.log( result );\n    ... };\n    > whileAsync( predicate, fcn, done )\n    boop: 4\n\n    See Also\n    --------\n    doUntilAsync, doWhileAsync, untilAsync, whilst\n","whileEach":"\nwhileEach( collection, predicate, fcn[, thisArg] )\n    While a test condition is true, invokes a function for each element in a\n    collection.\n\n    When invoked, both the predicate function and the function to apply are\n    provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The predicate function which indicates whether to continue iterating\n        over a collection.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context for the applied function.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function predicate( v ) { return v === v; };\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, 2, 3, 4, NaN, 5 ];\n    > whileEach( arr, predicate, logger )\n    0: 1\n    1: 2\n    2: 3\n    3: 4\n\n    See Also\n    --------\n    untilEach, whileEachRight\n","whileEachRight":"\nwhileEachRight( collection, predicate, fcn[, thisArg] )\n    While a test condition is true, invokes a function for each element in a\n    collection, iterating from right to left.\n\n    When invoked, both the predicate function and the function to apply are\n    provided three arguments:\n\n    - `value`: collection value\n    - `index`: collection index\n    - `collection`: the input collection\n\n    Parameters\n    ----------\n    collection: Array|TypedArray|Object\n        Input collection over which to iterate. If provided an object, the\n        object must be array-like (excluding strings and functions).\n\n    predicate: Function\n        The predicate function which indicates whether to continue iterating\n        over a collection.\n\n    fcn: Function\n        The function to invoke for each element in a collection.\n\n    thisArg: any (optional)\n        Execution context for the applied function.\n\n    Returns\n    -------\n    out: Array|TypedArray|Object\n        Input collection.\n\n    Examples\n    --------\n    > function predicate( v ) { return v === v; };\n    > function logger( v, i ) { console.log( '%s: %d', i, v ); };\n    > var arr = [ 1, NaN, 2, 3, 4, 5 ];\n    > whileEachRight( arr, predicate, logger )\n    5: 5\n    4: 4\n    3: 3\n    2: 2\n\n    See Also\n    --------\n    whileEach, untilEachRight\n","whilst":"\nwhilst( predicate, fcn[, thisArg] )\n    Invokes a function while a test condition is true.\n\n    When invoked, both the predicate function and the function to invoke are\n    provided a single argument:\n\n    - `i`: iteration number (starting from zero)\n\n    Parameters\n    ----------\n    predicate: Function\n        The predicate function which indicates whether to continue invoking a\n        function.\n\n    fcn: Function\n        The function to invoke.\n\n    thisArg: any (optional)\n        Execution context for the invoked function.\n\n    Examples\n    --------\n    > function predicate( i ) { return ( i < 5 ); };\n    > function beep( i ) { console.log( 'boop: %d', i ); };\n    > whilst( predicate, beep )\n    boop: 0\n    boop: 1\n    boop: 2\n    boop: 3\n    boop: 4\n\n    See Also\n    --------\n    doUntil, doWhile, until, whileAsync, whileEach\n","writableProperties":"\nwritableProperties( value )\n    Returns an array of an object's own writable property names and symbols.\n\n    Property order is not guaranteed, as object property enumeration is not\n    specified according to the ECMAScript specification. In practice, however,\n    most engines use insertion order to sort an object's properties, thus\n    allowing for deterministic extraction.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    props: Array\n        List of an object's own writable properties.\n\n    Examples\n    --------\n    > function Foo() { this.beep = 'boop'; return this; };\n    > Foo.prototype.foo = 'bar';\n    > var obj = new Foo();\n    > var props = writableProperties( obj )\n    [ 'beep' ]\n\n    See Also\n    --------\n    inheritedWritableProperties, writablePropertiesIn, properties\n","writablePropertiesIn":"\nwritablePropertiesIn( value )\n    Returns an array of an object's own and inherited writable property names\n    and symbols.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    props: Array\n        List of an object's own and inherited writable property names and\n        symbols.\n\n    Examples\n    --------\n    > var props = writablePropertiesIn( [] )\n\n    See Also\n    --------\n    inheritedWritableProperties, writableProperties, propertiesIn\n","writablePropertyNames":"\nwritablePropertyNames( value )\n    Returns an array of an object's own writable property names.\n\n    Name order is not guaranteed, as object key enumeration is not specified\n    according to the ECMAScript specification. In practice, however, most\n    engines use insertion order to sort an object's keys, thus allowing for\n    deterministic extraction.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    keys: Array\n        List of an object's own writable property names.\n\n    Examples\n    --------\n    > var obj = { 'a': 'b' };\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = true;\n    > desc.writable = false;\n    > desc.value = 'boop';\n    > defineProperty( obj, 'beep', desc );\n    > var keys = writablePropertyNames( obj )\n    [ 'a' ]\n\n    See Also\n    --------\n    inheritedWritablePropertyNames, writableProperties, writablePropertyNamesIn, writablePropertySymbols, propertyNames\n","writablePropertyNamesIn":"\nwritablePropertyNamesIn( value )\n    Returns an array of an object's own and inherited writable property names.\n\n    Name order is not guaranteed, as object key enumeration is not specified\n    according to the ECMAScript specification. In practice, however, most\n    engines use insertion order to sort an object's keys, thus allowing for\n    deterministic extraction.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    keys: Array\n        List of an object's own and inherited writable property names.\n\n    Examples\n    --------\n    > var obj = { 'a': 'b' };\n    > var desc = {};\n    > desc.configurable = true;\n    > desc.enumerable = true;\n    > desc.writable = false;\n    > desc.value = 'boop';\n    > defineProperty( obj, 'beep', desc );\n    > var keys = writablePropertyNamesIn( obj )\n    e.g., [ 'a', ... ]\n\n    See Also\n    --------\n    inheritedWritablePropertyNames, writablePropertiesIn, writablePropertyNames, writablePropertySymbolsIn, propertyNamesIn\n","writablePropertySymbols":"\nwritablePropertySymbols( value )\n    Returns an array of an object's own writable symbol properties.\n\n    Property order is not guaranteed, as object property enumeration is not\n    specified according to the ECMAScript specification. In practice, however,\n    most engines use insertion order to sort an object's properties, thus\n    allowing for deterministic extraction.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    symbols: Array\n        List of an object's own writable symbol properties.\n\n    Examples\n    --------\n    > var obj = {};\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = false;\n    > desc.writable = true;\n    > desc.value = 'boop';\n    > var sym = ( Symbol ) ? Symbol( 'beep' ) : 'beep';\n    > defineProperty( obj, sym, desc );\n    > var symbols = writablePropertySymbols( obj )\n\n    See Also\n    --------\n    inheritedWritablePropertySymbols, writableProperties, writablePropertyNames, writablePropertySymbolsIn, propertySymbols\n","writablePropertySymbolsIn":"\nwritablePropertySymbolsIn( value )\n    Returns an array of an object's own and inherited writable symbol\n    properties.\n\n    Property order is not guaranteed, as object property enumeration is not\n    specified according to the ECMAScript specification. In practice, however,\n    most engines use insertion order to sort an object's properties, thus\n    allowing for deterministic extraction.\n\n    If provided `null` or `undefined`, the function returns an empty array.\n\n    Parameters\n    ----------\n    value: any\n        Input value.\n\n    Returns\n    -------\n    symbols: Array\n        List of an object's own and inherited writable symbol properties.\n\n    Examples\n    --------\n    > var obj = {};\n    > var desc = {};\n    > desc.configurable = false;\n    > desc.enumerable = false;\n    > desc.writable = true;\n    > desc.value = 'boop';\n    > var sym = ( Symbol ) ? Symbol( 'beep' ) : 'beep';\n    > defineProperty( obj, sym, desc );\n    > var symbols = writablePropertySymbolsIn( obj )\n\n    See Also\n    --------\n    inheritedWritablePropertySymbols, writablePropertiesIn, writablePropertyNamesIn, writablePropertySymbols, propertySymbolsIn\n","writeFile":"\nwriteFile( file, data[, options], clbk )\n    Asynchronously writes data to a file.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    data: string|Buffer\n        Data to write.\n\n    options: Object|string (optional)\n        Options. If a string, the value is the encoding.\n\n    options.encoding: string|null (optional)\n        Encoding. The encoding option is ignored if the data argument is a\n        buffer. Default: 'utf8'.\n\n    options.flag: string (optional)\n        Flag. Default: 'w'.\n\n    options.mode: integer (optional)\n        Mode. Default: 0o666.\n\n    clbk: Function\n        Callback to invoke upon writing data to a file.\n\n    Examples\n    --------\n    > function onWrite( error ) {\n    ...     if ( error ) {\n    ...         console.error( error.message );\n    ...     }\n    ... };\n    > writeFile( './beep/boop.txt', 'beep boop', onWrite );\n\n\nwriteFile.sync( file, data[, options] )\n    Synchronously writes data to a file.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    data: string|Buffer\n        Data to write.\n\n    options: Object|string (optional)\n        Options. If a string, the value is the encoding.\n\n    options.encoding: string|null (optional)\n        Encoding. The encoding option is ignored if the data argument is a\n        buffer. Default: 'utf8'.\n\n    options.flag: string (optional)\n        Flag. Default: 'w'.\n\n    options.mode: integer (optional)\n        Mode. Default: 0o666.\n\n    Returns\n    -------\n    err: Error|null\n        Error object or null.\n\n    Examples\n    --------\n    > var err = writeFile.sync( './beep/boop.txt', 'beep boop' );\n\n    See Also\n    --------\n    exists, readFile\n","writeFile.sync":"\nwriteFile.sync( file, data[, options] )\n    Synchronously writes data to a file.\n\n    Parameters\n    ----------\n    file: string|Buffer|integer\n        Filename or file descriptor.\n\n    data: string|Buffer\n        Data to write.\n\n    options: Object|string (optional)\n        Options. If a string, the value is the encoding.\n\n    options.encoding: string|null (optional)\n        Encoding. The encoding option is ignored if the data argument is a\n        buffer. Default: 'utf8'.\n\n    options.flag: string (optional)\n        Flag. Default: 'w'.\n\n    options.mode: integer (optional)\n        Mode. Default: 0o666.\n\n    Returns\n    -------\n    err: Error|null\n        Error object or null.\n\n    Examples\n    --------\n    > var err = writeFile.sync( './beep/boop.txt', 'beep boop' );\n\n    See Also\n    --------\n    exists, readFile\n","zip":"\nzip( ...arr[, options] )\n    Generates array tuples from input arrays.\n\n    Parameters\n    ----------\n    arr: ...Array\n        Input arrays to be zipped.\n\n    options: Object (optional)\n        Options.\n\n    options.trunc: boolean (optional)\n        Boolean indicating whether to truncate arrays longer than the shortest\n        input array. Default: `true`.\n\n    options.fill: any (optional)\n        Fill value used for arrays of unequal length. Default: `null`.\n\n    options.arrays: boolean (optional)\n        Boolean indicating whether an input array should be interpreted as an\n        array of arrays to be zipped. Default: `false`.\n\n    Returns\n    -------\n    out: Array\n        Array of arrays.\n\n    Examples\n    --------\n    // Basic usage:\n    > var out = zip( [ 1, 2 ], [ 'a', 'b' ] )\n    [ [ 1, 'a' ], [ 2, 'b' ] ]\n\n    // Turn off truncation:\n    > var opts = { 'trunc': false };\n    > out = zip( [ 1, 2, 3 ], [ 'a', 'b' ], opts )\n    [ [ 1, 'a' ], [ 2, 'b' ], [ 3, null ] ]\n\n    See Also\n    --------\n    unzip\n","ztest":"\nztest( x, sigma[, options] )\n    Computes a one-sample z-test.\n\n    The function performs a one-sample z-test for the null hypothesis that the\n    data in array or typed array `x` is drawn from a normal distribution with\n    mean zero and standard deviation `sigma`.\n\n    The returned object comes with a `.print()` method which when invoked will\n    print a formatted output of the results of the hypothesis test.\n\n    Parameters\n    ----------\n    x: Array<number>\n        Data array.\n\n    sigma: number\n        Known standard deviation.\n\n    options: Object (optional)\n        Options.\n\n    options.alpha: number (optional)\n        Number in the interval `[0,1]` giving the significance level of the\n        hypothesis test. Default: `0.05`.\n\n    options.alternative: string (optional)\n        Indicates whether the alternative hypothesis is that the mean of `x` is\n        larger than `mu` (`greater`), smaller than `mu` (`less`) or equal to\n        `mu` (`two-sided`). Default: `'two-sided'`.\n\n    options.mu: number (optional)\n        Hypothesized true mean under the null hypothesis. Set this option to\n        test whether the data comes from a distribution with the specified `mu`.\n        Default: `0`.\n\n    Returns\n    -------\n    out: Object\n        Test result object.\n\n    out.alpha: number\n        Used significance level.\n\n    out.rejected: boolean\n        Test decision.\n\n    out.pValue: number\n        p-value of the test.\n\n    out.statistic: number\n        Value of test statistic.\n\n    out.ci: Array<number>\n        1-alpha confidence interval for mean.\n\n    out.nullValue: number\n        Assumed mean value under H0.\n\n    out.sd: number\n        Standard error.\n\n    out.alternative: string\n        Alternative hypothesis (`two-sided`, `less` or `greater`).\n\n    out.method: string\n        Name of test (`One-Sample z-test`).\n\n    out.print: Function\n        Function to print formatted output.\n\n    Examples\n    --------\n    // One-sample z-test:\n    > var rnorm = base.random.normal.factory( 0.0, 2.0, { 'seed': 212 });\n    > var x = new Array( 100 );\n    > for ( var i = 0; i < x.length; i++ ) {\n    ...     x[ i ] = rnorm();\n    ... }\n    > var out = ztest( x, 2.0 )\n    {\n        alpha: 0.05,\n        rejected: false,\n        pValue: ~0.180,\n        statistic: ~-1.34,\n        ci: [ ~-0.66, ~0.124 ],\n        ...\n    }\n\n    // Choose custom significance level and print output:\n    > arr = [ 2, 4, 3, 1, 0 ];\n    > out = ztest( arr, 2.0, { 'alpha': 0.01 });\n    > table = out.print()\n    One-sample z-test\n\n    Alternative hypothesis: True mean is not equal to 0\n\n        pValue: 0.0253\n        statistic: 2.2361\n        99% confidence interval: [-0.3039,4.3039]\n\n    Test Decision: Fail to reject null in favor of alternative at 1%\n    significance level\n\n\n    // Test for a mean equal to five:\n    > var arr = [ 4, 4, 6, 6, 5 ];\n    > out = ztest( arr, 1.0, { 'mu': 5 })\n    {\n        rejected: false,\n        pValue: 1,\n        statistic: 0,\n        ci: [ ~4.123, ~5.877 ],\n        // ...\n    }\n\n    // Perform one-sided tests:\n    > arr = [ 4, 4, 6, 6, 5 ];\n    > out = ztest( arr, 1.0, { 'alternative': 'less' })\n    {\n        alpha: 0.05,\n        rejected: false,\n        pValue: 1,\n        statistic: 11.180339887498949,\n        ci: [ -Infinity, 5.735600904580115 ],\n        // ...\n    }\n    > out = ztest( arr, 1.0, { 'alternative': 'greater' })\n    {\n        alpha: 0.05,\n        rejected: true,\n        pValue: 0,\n        statistic: 11.180339887498949,\n        ci: [ 4.264399095419885, Infinity ],\n        //...\n    }\n\n    See Also\n    --------\n    ztest2\n","ztest2":"\nztest2( x, y, sigmax, sigmay[, options] )\n    Computes a two-sample z-test.\n\n    By default, the function performs a two-sample z-test for the null\n    hypothesis that the data in arrays or typed arrays `x` and `y` is\n    independently drawn from normal distributions with equal means and known\n    standard deviations `sigmax` and `sigmay`.\n\n    The returned object comes with a `.print()` method which when invoked will\n    print a formatted output of the results of the hypothesis test.\n\n    Parameters\n    ----------\n    x: Array<number>\n        First data array.\n\n    y: Array<number>\n        Second data array.\n\n    sigmax: number\n        Known standard deviation of first group.\n\n    sigmay: number\n        Known standard deviation of second group.\n\n    options: Object (optional)\n        Options.\n\n    options.alpha: number (optional)\n        Number in the interval `[0,1]` giving the significance level of the\n        hypothesis test. Default: `0.05`.\n\n    options.alternative: string (optional)\n        Either `two-sided`, `less` or `greater`. Indicates whether the\n        alternative hypothesis is that `x` has a larger mean than `y`\n        (`greater`), `x` has a smaller mean than `y` (`less`) or the means are\n        the same (`two-sided`). Default: `'two-sided'`.\n\n    options.difference: number (optional)\n        Number denoting the difference in means under the null hypothesis.\n        Default: `0`.\n\n    Returns\n    -------\n    out: Object\n        Test result object.\n\n    out.alpha: number\n        Used significance level.\n\n    out.rejected: boolean\n        Test decision.\n\n    out.pValue: number\n        p-value of the test.\n\n    out.statistic: number\n        Value of test statistic.\n\n    out.ci: Array<number>\n        1-alpha confidence interval for the mean.\n\n    out.nullValue: number\n        Assumed difference in means under H0.\n\n    out.xmean: number\n        Sample mean of `x`.\n\n    out.ymean: number\n        Sample mean of `y`.\n\n    out.alternative: string\n        Alternative hypothesis (`two-sided`, `less` or `greater`).\n\n    out.method: string\n        Name of test.\n\n    out.print: Function\n        Function to print formatted output.\n\n    Examples\n    --------\n    // Drawn from Normal(0,2):\n    > var x = [ -0.21, 0.14, 1.65, 2.11, -1.86, -0.29, 1.48, 0.81, 0.86, 1.04 ];\n\n    // Drawn from Normal(1,2):\n    > var y = [ -1.53, -2.93, 2.34, -1.15, 2.7, -0.12, 4.22, 1.66, 3.43, 4.66 ];\n    > var out = ztest2( x, y, 2.0, 2.0 )\n    {\n        alpha: 0.05,\n        rejected: false,\n        pValue: ~0.398,\n        statistic: ~-0.844\n        ci: [ ~-2.508, ~0.988 ],\n        alternative: 'two-sided',\n        method: 'Two-sample z-test',\n        nullValue: 0,\n        xmean: ~0.573,\n        ymean: ~1.328\n    }\n\n    // Print table output:\n    > var table = out.print()\n    Two-sample z-test\n\n    Alternative hypothesis: True difference in means is not equal to 0\n\n        pValue: 0.3986\n        statistic: -0.8441\n        95% confidence interval: [-2.508,0.998]\n\n    Test Decision: Fail to reject null in favor of alternative at 5%\n    significance level\n\n    // Choose a different significance level than `0.05`:\n    > out = ztest2( x, y, 2.0, 2.0, { 'alpha': 0.4 });\n    > table = out.print()\n    Two-sample z-test\n\n    Alternative hypothesis: True difference in means is not equal to 0\n\n        pValue: 0.3986\n        statistic: -0.8441\n        60% confidence interval: [-1.5078,-0.0022]\n\n    Test Decision: Reject null in favor of alternative at 40% significance level\n\n    // Perform one-sided tests:\n    > out = ztest2( x, y, 2.0, 2.0, { 'alternative': 'less' });\n    > table = out.print()\n    Two-sample z-test\n\n    Alternative hypothesis: True difference in means is less than 0\n\n        pValue: 0.1993\n        statistic: -0.8441\n        95% confidence interval: [-Infinity,0.7162]\n\n    Test Decision: Fail to reject null in favor of alternative at 5%\n    significance level\n\n\n    > out = ztest2( x, y, 2.0, 2.0, { 'alternative': 'greater' });\n    > table = out.print()\n    Two-sample z-test\n\n    Alternative hypothesis: True difference in means is greater than 0\n\n        pValue: 0.8007\n        statistic: -0.8441\n        95% confidence interval: [-2.2262,Infinity]\n\n    Test Decision: Fail to reject null in favor of alternative at 5%\n    significance level\n\n    // Test for a difference in means besides zero:\n    > var rnorm = base.random.normal.factory({ 'seed': 372 });\n    > x = new Array( 100 );\n    > for ( i = 0; i < x.length; i++ ) {\n    ...     x[ i ] = rnorm( 2.0, 1.0 );\n    ... }\n    > y = new Array( 100 );\n    ... for ( i = 0; i < x.length; i++ ) {\n    ...     y[ i ] = rnorm( 0.0, 2.0 );\n    ... }\n    > out = ztest2( x, y, 1.0, 2.0, { 'difference': 2.0 })\n    {\n        rejected: false,\n        pValue: ~0.35,\n        statistic: ~-0.935\n        ci: [ ~1.353, ~2.229 ],\n        // ...\n    }\n\n    See Also\n    --------\n    ztest\n"}