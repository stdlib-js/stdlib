/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var InspectStream = require( '@stdlib/streams/node/inspect' );
var noop = require( '@stdlib/utils/noop' );
var previewCompleter = require( './../lib/completer_preview.js' );
var REPL = require( './../lib' );


// TESTS //

tape( 'main export is an object', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof previewCompleter, 'function', 'main export is an object' );
	t.strictEqual( typeof previewCompleter().beforeKeypress, 'function' );
	t.strictEqual( typeof previewCompleter().onKeypress, 'function' );
	t.end();
});

tape( 'Preview completion is shown', function test( t ) {
	var outputStream;
	var inputStream;
	var outputs;
	var opts;
	var r;

	inputStream = new InspectStream( noop );
	outputStream = new InspectStream( outputLog );

	outputs = [];
	function outputLog(chunk) {
		outputs.push(chunk.toString());
	}

	opts = {
		'input': inputStream,
		'output': outputStream,
		'isTTY': true
	};
	r = new REPL( opts );
	inputStream.write('conso');

	t.strictEqual( outputs[ outputs.length - 2 ], '\x1b[90mle\x1b[0m' );
	t.strictEqual( outputs[ outputs.length - 1 ], '\x1b[2D' );
	r.close();
	t.end();
});

tape( 'Preview completion is shown when word is not first in the line', function test( t ) {
	var outputStream;
	var inputStream;
	var outputs;
	var opts;
	var r;

	inputStream = new InspectStream( noop );
	outputStream = new InspectStream( outputLog );

	outputs = [];
	function outputLog( chunk ) {
		outputs.push( chunk.toString() );
	}

	opts = {
		'input': inputStream,
		'output': outputStream,
		'isTTY': true
	};
	r = new REPL( opts );
	inputStream.write('this is a prefix console.ta');

	t.strictEqual( outputs[ outputs.length - 2 ], '\x1b[90mble\x1b[0m' );
	t.strictEqual( outputs[ outputs.length - 1 ], '\x1b[3D' );
	r.close();
	t.end();
});

tape( 'Preview completion is shown when the cursor moves to the left', function test( t ) {
	var outputStream;
	var inputStream;
	var outputs;
	var opts;
	var r;

	inputStream = new InspectStream( noop );
	outputStream = new InspectStream( outputLog );

	outputs = [];
	function outputLog( chunk ) {
		outputs.push( chunk.toString() );
	}

	opts = {
		'input': inputStream,
		'output': outputStream,
		'isTTY': true
	};
	r = new REPL( opts );
	inputStream.write( 'console.l' );

	// Move cursor to the left
	inputStream.write( '\x1b[1D' );
	t.strictEqual( outputs[ outputs.length - 6 ], '\x1b[90mog\x1b[0m' );
	t.strictEqual( outputs[ outputs.length - 5 ], '\x1b[2D' );
	t.strictEqual( outputs[ outputs.length - 4 ], '\x1b[1D' );
	t.strictEqual( outputs[ outputs.length - 3 ], '\x1b[1C' );
	t.strictEqual( outputs[ outputs.length - 2 ], '\x1b[90mog\x1b[0m' );
	t.strictEqual( outputs[ outputs.length - 1 ], '\x1b[3D' );
	r.close();
	t.end();
});

tape( 'Preview is erased when user types something else', function test( t ) {
	var outputStream;
	var inputStream;
	var outputs;
	var opts;
	var r;

	inputStream = new InspectStream( noop );
	outputStream = new InspectStream( outputLog );

	outputs = [];
	function outputLog( chunk ) {
		outputs.push( chunk.toString() );
	}

	opts = {
		'input': inputStream,
		'output': outputStream,
		'isTTY': true
	};
	r = new REPL( opts );
	inputStream.write( 'conso' );
	t.strictEqual( outputs[ outputs.length - 2 ], '\x1b[90mle\x1b[0m' );
	t.strictEqual( outputs[ outputs.length - 1 ], '\x1b[2D' );
	inputStream.write( 'o' );

	// Preview is replaced with empty spaces
	t.strictEqual( outputs[ outputs.length - 2 ], '  ' );
	t.strictEqual( outputs[ outputs.length - 1 ], '\x1b[2D' );
	r.close();
	t.end();
});

tape( 'Preview is filled in when user moves cursor into it', function test( t ) {
	var outputStream;
	var inputStream;
	var outputs;
	var opts;
	var r;

	inputStream = new InspectStream( noop );
	outputStream = new InspectStream( outputLog );

	outputs = [];
	function outputLog( chunk ) {
		outputs.push( chunk.toString() );
	}

	opts = {
		'input': inputStream,
		'output': outputStream,
		'isTTY': true
	};
	r = new REPL( opts );
	inputStream.write( 'conso' );
	inputStream.write( '\x1b[1C' );
	t.strictEqual( outputs[ outputs.length - 1 ], 'le' );
	r.close();
	t.end();
});

tape( 'Preview is filled in when user presses return', function test( t ) {
	var outputStream;
	var inputStream;
	var outputs;
	var opts;
	var r;

	inputStream = new InspectStream( noop );
	outputStream = new InspectStream( outputLog );

	outputs = [];
	function outputLog( chunk ) {
		outputs.push( chunk.toString() );
	}

	opts = {
		'input': inputStream,
		'output': outputStream,
		'isTTY': true
	};
	r = new REPL( opts );
	inputStream.write( 'console.l\n' );
	t.strictEqual( outputs[ outputs.length - 3 ], 'og' );
	t.strictEqual( outputs[ outputs.length - 1 ].trim(), 'Out[1]: [Function: log]' );
	r.close();
	t.end();
});
