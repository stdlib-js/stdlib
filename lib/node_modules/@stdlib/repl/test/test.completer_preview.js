/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var DebugStream = require( '@stdlib/streams/node/debug' );
var previewCompleter = require( './../lib/completer_preview.js' );


// FIXTURES //

var replDebug = require( './fixtures/repl_debug.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof previewCompleter, 'function', 'main export is a function' );
	t.strictEqual( typeof previewCompleter().beforeKeypress, 'function' );
	t.strictEqual( typeof previewCompleter().onKeypress, 'function' );
	t.end();
});

tape( 'Preview completion is shown', function test( t ) {
	var inputStream;
	var outputs;

	inputStream = new DebugStream({
		'name': 'repl-input-stream'
	});

	// Create a repl which takes input from inputStream and which stores the output in outputs
	outputs = replDebug( inputStream, {
		'isTTY': true
	});

	// Declare a variable with an unique name, to prevent collisions with other packages:
	inputStream.write( 'var abcdefgh = 1\n' );

	// Write the beginning of the variable's name:
	inputStream.write( 'abcdef' );

	// Check that the completion 'gh' is written to the console...
	t.strictEqual( outputs[ outputs.length - 2 ], '\x1b[90mgh\x1b[0m' );

	// Check that the cursor is moved back two positions, to where it was originally...
	t.strictEqual( outputs[ outputs.length - 1 ], '\x1b[2D' );
	t.end();
});

tape( 'Preview completion is shown even with other words at the beginning of the line', function test( t ) {
	var inputStream;
	var outputs;

	inputStream = new DebugStream({
		'name': 'repl-input-stream'
	});

	// Create a repl which takes input from inputStream and which stores the output in outputs
	outputs = replDebug( inputStream, {
		'isTTY': true
	});

	// Declare a variable with an unique name, to prevent collisions with other packages:
	inputStream.write( 'var abcdefgh = 1\n' );

	// Write some other words before the beginning of the variable's name:
	inputStream.write('this is a prefix abcde');

	// Check that the completion "fgh" is shown, even with the extra text at the beginning of the line...
	t.strictEqual( outputs[ outputs.length - 2 ], '\x1b[90mfgh\x1b[0m' );
	t.strictEqual( outputs[ outputs.length - 1 ], '\x1b[3D' );
	t.end();
});

tape( 'Preview completion is shown even after cursor is moved', function test( t ) {
	var inputStream;
	var outputs;

	inputStream = new DebugStream({
		'name': 'repl-input-stream'
	});

	// Create a repl which takes input from inputStream and which stores the output in outputs
	outputs = replDebug( inputStream, {
		'isTTY': true
	});

	// Declare a variable with an unique name, to prevent collisions with other packages:
	inputStream.write( 'var abcdefgh = 1\n' );

	// Write the beginning of the variable's name:
	inputStream.write( 'abcdef' );

	// Check that the preview "gh" is shown...
	t.strictEqual( outputs[ outputs.length - 2 ], '\x1b[90mgh\x1b[0m' );

	// Check that the cursor is moved back to its orginal position...
	t.strictEqual( outputs[ outputs.length - 1 ], '\x1b[2D' );

	// Move cursor to the left by one position:
	inputStream.write( '\x1b[1D' );

	// Check that the cursor is moved forward, to the end of the line
	t.strictEqual( outputs[ outputs.length - 3 ], '\x1b[1C' );

	// Check that the preview "gh" is shown...
	t.strictEqual( outputs[ outputs.length - 2 ], '\x1b[90mgh\x1b[0m' );

	// Check that the cursor is moved back 3 positions, to where it was originally...
	t.strictEqual( outputs[ outputs.length - 1 ], '\x1b[3D' );
	t.end();
});

tape( 'Preview is erased when new input makes the preview invalid', function test( t ) {
	var inputStream;
	var outputs;

	inputStream = new DebugStream({
		'name': 'repl-input-stream'
	});

	// Create a repl which takes input from inputStream and which stores the output in outputs
	outputs = replDebug( inputStream, {
		'isTTY': true
	});

	// Declare a variable with an unique name, to prevent collisions with other packages:
	inputStream.write( 'var abcdefgh = 1\n' );

	// Write the beginning of the variable's name:
	inputStream.write( 'abcdef' );

	// Check that the preview is shown...
	t.strictEqual( outputs[ outputs.length - 2 ], '\x1b[90mgh\x1b[0m' );
	t.strictEqual( outputs[ outputs.length - 1 ], '\x1b[2D' );

	// Write a character that does not correspond to the variable's name:
	inputStream.write( 'o' );

	// Check that preview is replaced with empty spaces...
	t.strictEqual( outputs[ outputs.length - 2 ], '  ' );
	t.strictEqual( outputs[ outputs.length - 1 ], '\x1b[2D' );
	t.end();
});

tape( 'Preview is filled in when user moves cursor into it', function test( t ) {
	var inputStream;
	var outputs;

	inputStream = new DebugStream({
		'name': 'repl-input-stream'
	});

	// Create a repl which takes input from inputStream and which stores the output in outputs
	outputs = replDebug( inputStream, {
		'isTTY': true
	});

	// Declare a variable with an unique name, to prevent collisions with other packages:
	inputStream.write( 'var abcdefgh = 1\n' );

	// Write the beginning of the variable's name:
	inputStream.write( 'abcdef' );

	// Move cursor to the right by one space, which moves it into the preview:
	inputStream.write( '\x1b[1C' );

	// Check the preview 'gh' was filled in...
	t.strictEqual( outputs[ outputs.length - 1 ], 'gh' );
	t.end();
});

tape( 'Preview is filled in when user executes line', function test( t ) {
	var inputStream;
	var outputs;

	inputStream = new DebugStream({
		'name': 'repl-input-stream'
	});

	// Create a repl which takes input from inputStream and which stores the output in outputs
	outputs = replDebug( inputStream, {
		'isTTY': true
	});

	// Simulate writing 'console.l' and pressing submitting the line:
	inputStream.write( 'console.l\n' );

	// Check that the completion 'og' was filled in...
	t.strictEqual( outputs[ outputs.length - 3 ], 'og' );

	// Check the output is that of executing the line 'console.log'...
	t.strictEqual( outputs[ outputs.length - 1 ].trim(), 'Out[1]: [Function: log]' );
	t.end();
});

tape( 'Preview is erased after user enters white space', function test( t ) {
	var inputStream;
	var outputs;

	inputStream = new DebugStream({
		'name': 'repl-input-stream'
	});

	// Create a repl which takes input from inputStream and which stores the output in outputs
	outputs = replDebug( inputStream, {
		'isTTY': true
	});

	// Declare a variable with an unique name, to prevent collisions with other packages:
	inputStream.write( 'var abcdefgh = 1\n' );

	// Write the beginning of the variable's name:
	inputStream.write( 'abcdef' );

	// Check that the preview is shown...
	t.strictEqual( outputs[ outputs.length - 2 ], '\x1b[90mgh\x1b[0m' );

	// Write a white space character
	inputStream.write( ' ' );

	// Check that the preview 'gh' was erased (replaced with white space) after the user entered white space...
	t.strictEqual( outputs[ outputs.length - 2 ], '  ' );
	t.end();
});
