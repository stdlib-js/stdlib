/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-new */

'use strict';

// MODULES //

var InspectStreamSink = require( '@stdlib/streams/node/inspect-sink' );
var REPL = require( '@stdlib/repl' );


// MAIN //

/**
* Creates a REPL instance connected to debugging IO streams.
*
* Takes an writable stream as a parameter and passes the input written to that
* stream to the repl instance, as if the user was typing it.
* As the commands are evaluated, any output written by the repl will be stored as
* strings in the array that this function returns.
*
* @param {Writable} inputStream - input stream passed to the repl instance
* @param {Object} opts - additional options passed to the repl
* @returns {Array} - array of strings in which the repl output is stored
*
* @example
* var inputStream;
* var outputs;
* inputStream = new DebugStream({
*     'name': 'repl-input-stream'
* });
*
* // Create a repl taking input from inputStream and storing the output in outputs.
* outputs = replDebug( inputStream, { 'isTTY': true } );

* // Simulate writing 'console.log( "hello" )' to the repl and pressing enter.
* inputStream.write( 'console.log( "hello" )\n' );
* // outputs[outputs.length - 1] equals 'hello\n'
*/
function replDebug( inputStream, opts ) {
	var outputStream;
	var outputs;

	// Create the initially empty array where the REPL output is stored:
	outputs = [];

	// Create the output stream, passing a function which will log the outputs.
	outputStream = new InspectStreamSink( outputLog );

	// If no additional options are passed, assign opts to empty object...
	if ( opts === undefined ) {
		opts = {};
	}

	// Pass the debug input streams to the repl, along any additional options.
	opts[ 'input' ] = inputStream;
	opts[ 'output' ] = outputStream;

	new REPL( opts );

	return outputs;

	/**
	* Adds the content written to the output stream to the array containing the outputs.
	*
	* @private
	* @param {string} chunk - the new content written to the output stream
	* @returns {void}
	*/
	function outputLog( chunk ) {
		outputs.push( chunk.toString() );
	}
}

module.exports = replDebug;
