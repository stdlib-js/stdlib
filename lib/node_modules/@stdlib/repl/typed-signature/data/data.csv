AFINN_96,"AFINN_96()"
AFINN_111,"AFINN_111()"
alias2pkg,"alias2pkg( alias:string )"
alias2related,"alias2related( alias:string )"
aliases,"aliases( [namespace:string] )"
allocUnsafe,"allocUnsafe( size:integer )"
anova1,"anova1( x:Array<number>, factor:Array[, options:Object] )"
ANSCOMBES_QUARTET,"ANSCOMBES_QUARTET()"
any,"any( collection:Array|TypedArray|Object )"
anyBy,"anyBy( collection:Array|TypedArray|Object, predicate:Function[, thisArg:any ] )"
anyByAsync,"anyByAsync( collection:Array|TypedArray|Object, [options:Object,] predicate:Function, done:Function )"
anyByAsync.factory,"anyByAsync.factory( [options:Object,] predicate:Function )"
anyByRight,"anyByRight( collection:Array|TypedArray|Object, predicate:Function[, thisArg:any ] )"
anyByRightAsync,"anyByRightAsync( collection:Array|TypedArray|Object, [options:Object,] predicate:Function, done:Function )"
anyByRightAsync.factory,"anyByRightAsync.factory( [options:Object,] predicate:Function )"
APERY,"APERY"
append,"append( collection1:Array|TypedArray|Object, collection2:Array|TypedArray|Object )"
ARCH,"ARCH"
argumentFunction,"argumentFunction( idx:integer )"
ARGV,"ARGV"
array,"array( [buffer:Array|TypedArray|Buffer|ndarray,] [options:Object] )"
array2buffer,"array2buffer( arr:Array<integer> )"
array2iterator,"array2iterator( src:ArrayLikeObject[, mapFcn:Function[, thisArg:any]] )"
array2iteratorRight,"array2iteratorRight( src:ArrayLikeObject[, mapFcn:Function[, thisArg:any]] )"
ArrayBuffer,"ArrayBuffer( size:integer )"
ArrayBuffer.length,"ArrayBuffer.length"
ArrayBuffer.isView,"ArrayBuffer.isView( arr:any )"
ArrayBuffer.prototype.byteLength,"ArrayBuffer.prototype.byteLength"
ArrayBuffer.prototype.slice,"ArrayBuffer.prototype.slice( [start:integer[, end:integer]] )"
arraybuffer2buffer,"arraybuffer2buffer( buf:ArrayBuffer[, byteOffset:integer[, length:integer]] )"
arrayCtors,"arrayCtors( dtype:string )"
arrayDataType,"arrayDataType( array:any )"
arrayDataTypes,"arrayDataTypes()"
arrayMinDataType,"arrayMinDataType( value:any )"
arrayNextDataType,"arrayNextDataType( [dtype:string] )"
arrayPromotionRules,"arrayPromotionRules( [dtype1:string, dtype2:string] )"
arraySafeCasts,"arraySafeCasts( [dtype:string] )"
arraySameKindCasts,"arraySameKindCasts( [dtype:string] )"
arrayShape,"arrayShape( arr:Array )"
arrayStream,"arrayStream( src:ArrayLikeObject[, options:Object] )"
arrayStream.factory,"arrayStream.factory( [options:Object] )"
arrayStream.objectMode,"arrayStream.objectMode( src:ArrayLikeObject[, options:Object] )"
arrayview2iterator,"arrayview2iterator( src:ArrayLikeObject[, begin:integer[, end:integer]][, mapFcn:Function[, thisArg:any]] )"
arrayview2iteratorRight,"arrayview2iteratorRight( src:ArrayLikeObject[, begin:integer[, end:integer]][, mapFcn:Function[, thisArg:any]] )"
AsyncIteratorSymbol,"AsyncIteratorSymbol"
bartlettTest,"bartlettTest( ...x:Array[, options:Object] )"
base.abs,"base.abs( x:number )"
base.abs2,"base.abs2( x:number )"
base.absdiff,"base.absdiff( x:number, y:number )"
base.absInt32,"base.absInt32( x:integer )"
base.acos,"base.acos( x:number )"
base.acosh,"base.acosh( x:number )"
base.acoth,"base.acoth( x:number )"
base.acovercos,"base.acovercos( x:number )"
base.acoversin,"base.acoversin( x:number )"
base.ahavercos,"base.ahavercos( x:number )"
base.ahaversin,"base.ahaversin( x:number )"
base.asin,"base.asin( x:number )"
base.asinh,"base.asinh( x:number )"
base.atan,"base.atan( x:number )"
base.atan2,"base.atan2( y:number, x:number )"
base.atanh,"base.atanh( x:number )"
base.avercos,"base.avercos( x:number )"
base.aversin,"base.aversin( x:number )"
base.bernoulli,"base.bernoulli( n:integer )"
base.besselj0,"base.besselj0( x:number )"
base.besselj1,"base.besselj1( x:number )"
base.bessely0,"base.bessely0( x:number )"
base.bessely1,"base.bessely1( x:number )"
base.beta,"base.beta( x:number, y:number )"
base.betainc,"base.betainc( x:number, a:number, b:number[, regularized:boolean[, upper:boolean]] )"
base.betaincinv,"base.betaincinv( p:number, a:number, b:number[, upper:boolean] )"
base.betaln,"base.betaln( a:number, b:number )"
base.binet,"base.binet( x:number )"
base.binomcoef,"base.binomcoef( n:integer, k:integer )"
base.binomcoefln,"base.binomcoefln( n:integer, k:integer )"
base.boxcox,"base.boxcox( x:number, lambda:number )"
base.boxcox1p,"base.boxcox1p( x:number, lambda:number )"
base.boxcox1pinv,"base.boxcox1pinv( y:number, lambda:number )"
base.boxcoxinv,"base.boxcoxinv( y:number, lambda:number )"
base.cabs,"base.cabs( re:number, im:number )"
base.cabs2,"base.cabs2( re:number, im:number )"
base.cadd,"base.cadd( [out:Array|TypedArray|Object,] re1:number, im1:number, re2:number, im2:number )"
base.cbrt,"base.cbrt( x:number )"
base.cceil,"base.cceil( [out:Array|TypedArray|Object,] re:number, im:number )"
base.cceiln,"base.cceiln( [out:Array|TypedArray|Object,] re:number, im:number, n:integer )"
base.ccis,"base.ccis( [out:Array|TypedArray|Object,] re:number, im:number )"
base.cdiv,"base.cdiv( [out:Array|TypedArray|Object,] re1:number, im1:number, re2:number, im2:number )"
base.ceil,"base.ceil( x:number )"
base.ceil2,"base.ceil2( x:number )"
base.ceil10,"base.ceil10( x:number )"
base.ceilb,"base.ceilb( x:number, n:integer, b:integer )"
base.ceiln,"base.ceiln( x:number, n:integer )"
base.ceilsd,"base.ceilsd( x:number, n:integer[, b:integer] )"
base.cexp,"base.cexp( [out:Array|TypedArray|Object,] re:number, im:number )"
base.cflipsign,"base.cflipsign( [out:Array|TypedArray|Object,] re:number, im:number, y:number )"
base.cfloor,"base.cfloor( [out:Array|TypedArray|Object,] re:number, im:number )"
base.cfloorn,"base.cfloorn( [out:Array|TypedArray|Object,] re:number, im:number, n:integer )"
base.cinv,"base.cinv( [out:Array|TypedArray|Object,] re:number, im:number )"
base.clamp,"base.clamp( v:number, min:number, max:number )"
base.cmul,"base.cmul( [out:Array|TypedArray|Object,] re1:number, im1:number, re2:number, im2:number )"
base.cneg,"base.cneg( [out:Array|TypedArray|Object,] re:number, im:number )"
base.continuedFraction,"base.continuedFraction( generator:Function[, options:Object] )"
base.copysign,"base.copysign( x:number, y:number )"
base.cos,"base.cos( x:number )"
base.cosh,"base.cosh( x:number )"
base.cosm1,"base.cosm1( x:number )"
base.cospi,"base.cospi( x:number )"
base.covercos,"base.covercos( x:number )"
base.coversin,"base.coversin( x:number )"
base.cphase,"base.cphase( re:number, im:number )"
base.cpolar,"base.cpolar( [out:Array|TypedArray|Object,] re:number, im:number )"
base.cround,"base.cround( [out:Array|TypedArray|Object,] re:number, im:number )"
base.croundn,"base.croundn( [out:Array|TypedArray|Object,] re:number, im:number, n:integer )"
base.csignum,"base.csignum( [out:Array|TypedArray|Object,] re:number, im:number )"
base.csub,"base.csub( [out:Array|TypedArray|Object,] re1:number, im1:number, re2:number, im2:number )"
base.dasum,"base.dasum( N:integer, x:Float64Array, stride:integer )"
base.dasum.ndarray,"base.dasum.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"
base.dasum.wasm,"base.dasum.wasm( [options:Object] )"
base.daxpy,"base.daxpy( N:integer, alpha:number, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"
base.daxpy.ndarray,"base.daxpy.ndarray( N:integer, alpha:number, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"
base.daxpy.wasm,"base.daxpy.wasm( [options:Object] )"
base.dcopy,"base.dcopy( N:integer, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"
base.dcopy.ndarray,"base.dcopy.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"
base.deg2rad,"base.deg2rad( x:number )"
base.digamma,"base.digamma( x:number )"
base.diracDelta,"base.diracDelta( x:number )"
base.dists.arcsine.Arcsine,"base.dists.arcsine.Arcsine( [a:number, b:number] )"
base.dists.arcsine.cdf,"base.dists.arcsine.cdf( x:number, a:number, b:number )"
base.dists.arcsine.cdf.factory,"base.dists.arcsine.cdf.factory( a:number, b:number )"
base.dists.arcsine.entropy,"base.dists.arcsine.entropy( a:number, b:number )"
base.dists.arcsine.kurtosis,"base.dists.arcsine.kurtosis( a:number, b:number )"
base.dists.arcsine.logcdf,"base.dists.arcsine.logcdf( x:number, a:number, b:number )"
base.dists.arcsine.logcdf.factory,"base.dists.arcsine.logcdf.factory( a:number, b:number )"
base.dists.arcsine.logpdf,"base.dists.arcsine.logpdf( x:number, a:number, b:number )"
base.dists.arcsine.logpdf.factory,"base.dists.arcsine.logpdf.factory( a:number, b:number )"
base.dists.arcsine.mean,"base.dists.arcsine.mean( a:number, b:number )"
base.dists.arcsine.median,"base.dists.arcsine.median( a:number, b:number )"
base.dists.arcsine.mode,"base.dists.arcsine.mode( a:number, b:number )"
base.dists.arcsine.pdf,"base.dists.arcsine.pdf( x:number, a:number, b:number )"
base.dists.arcsine.pdf.factory,"base.dists.arcsine.pdf.factory( a:number, b:number )"
base.dists.arcsine.quantile,"base.dists.arcsine.quantile( p:number, a:number, b:number )"
base.dists.arcsine.quantile.factory,"base.dists.arcsine.quantile.factory( a:number, b:number )"
base.dists.arcsine.skewness,"base.dists.arcsine.skewness( a:number, b:number )"
base.dists.arcsine.stdev,"base.dists.arcsine.stdev( a:number, b:number )"
base.dists.arcsine.variance,"base.dists.arcsine.variance( a:number, b:number )"
base.dists.bernoulli.Bernoulli,"base.dists.bernoulli.Bernoulli( [p:number] )"
base.dists.bernoulli.cdf,"base.dists.bernoulli.cdf( x:number, p:number )"
base.dists.bernoulli.cdf.factory,"base.dists.bernoulli.cdf.factory( p:number )"
base.dists.bernoulli.entropy,"base.dists.bernoulli.entropy( p:number )"
base.dists.bernoulli.kurtosis,"base.dists.bernoulli.kurtosis( p:number )"
base.dists.bernoulli.mean,"base.dists.bernoulli.mean( p:number )"
base.dists.bernoulli.median,"base.dists.bernoulli.median( p:number )"
base.dists.bernoulli.mgf,"base.dists.bernoulli.mgf( t:number, p:number )"
base.dists.bernoulli.mgf.factory,"base.dists.bernoulli.mgf.factory( p:number )"
base.dists.bernoulli.mode,"base.dists.bernoulli.mode( p:number )"
base.dists.bernoulli.pmf,"base.dists.bernoulli.pmf( x:number, p:number )"
base.dists.bernoulli.pmf.factory,"base.dists.bernoulli.pmf.factory( p:number )"
base.dists.bernoulli.quantile,"base.dists.bernoulli.quantile( r:number, p:number )"
base.dists.bernoulli.quantile.factory,"base.dists.bernoulli.quantile.factory( p:number )"
base.dists.bernoulli.skewness,"base.dists.bernoulli.skewness( p:number )"
base.dists.bernoulli.stdev,"base.dists.bernoulli.stdev( p:number )"
base.dists.bernoulli.variance,"base.dists.bernoulli.variance( p:number )"
base.dists.beta.Beta,"base.dists.beta.Beta( [α:number, β:number] )"
base.dists.beta.cdf,"base.dists.beta.cdf( x:number, α:number, β:number )"
base.dists.beta.cdf.factory,"base.dists.beta.cdf.factory( α:number, β:number )"
base.dists.beta.entropy,"base.dists.beta.entropy( α:number, β:number )"
base.dists.beta.kurtosis,"base.dists.beta.kurtosis( α:number, β:number )"
base.dists.beta.logcdf,"base.dists.beta.logcdf( x:number, α:number, β:number )"
base.dists.beta.logcdf.factory,"base.dists.beta.logcdf.factory( α:number, β:number )"
base.dists.beta.logpdf,"base.dists.beta.logpdf( x:number, α:number, β:number )"
base.dists.beta.logpdf.factory,"base.dists.beta.logpdf.factory( α:number, β:number )"
base.dists.beta.mean,"base.dists.beta.mean( α:number, β:number )"
base.dists.beta.median,"base.dists.beta.median( α:number, β:number )"
base.dists.beta.mgf,"base.dists.beta.mgf( t:number, α:number, β:number )"
base.dists.beta.mgf.factory,"base.dists.beta.mgf.factory( α:number, β:number )"
base.dists.beta.mode,"base.dists.beta.mode( α:number, β:number )"
base.dists.beta.pdf,"base.dists.beta.pdf( x:number, α:number, β:number )"
base.dists.beta.pdf.factory,"base.dists.beta.pdf.factory( α:number, β:number )"
base.dists.beta.quantile,"base.dists.beta.quantile( p:number, α:number, β:number )"
base.dists.beta.quantile.factory,"base.dists.beta.quantile.factory( α:number, β:number )"
base.dists.beta.skewness,"base.dists.beta.skewness( α:number, β:number )"
base.dists.beta.stdev,"base.dists.beta.stdev( α:number, β:number )"
base.dists.beta.variance,"base.dists.beta.variance( α:number, β:number )"
base.dists.betaprime.BetaPrime,"base.dists.betaprime.BetaPrime( [α:number, β:number] )"
base.dists.betaprime.cdf,"base.dists.betaprime.cdf( x:number, α:number, β:number )"
base.dists.betaprime.cdf.factory,"base.dists.betaprime.cdf.factory( α:number, β:number )"
base.dists.betaprime.kurtosis,"base.dists.betaprime.kurtosis( α:number, β:number )"
base.dists.betaprime.logcdf,"base.dists.betaprime.logcdf( x:number, α:number, β:number )"
base.dists.betaprime.logcdf.factory,"base.dists.betaprime.logcdf.factory( α:number, β:number )"
base.dists.betaprime.logpdf,"base.dists.betaprime.logpdf( x:number, α:number, β:number )"
base.dists.betaprime.logpdf.factory,"base.dists.betaprime.logpdf.factory( α:number, β:number )"
base.dists.betaprime.mean,"base.dists.betaprime.mean( α:number, β:number )"
base.dists.betaprime.mode,"base.dists.betaprime.mode( α:number, β:number )"
base.dists.betaprime.pdf,"base.dists.betaprime.pdf( x:number, α:number, β:number )"
base.dists.betaprime.pdf.factory,"base.dists.betaprime.pdf.factory( α:number, β:number )"
base.dists.betaprime.quantile,"base.dists.betaprime.quantile( p:number, α:number, β:number )"
base.dists.betaprime.quantile.factory,"base.dists.betaprime.quantile.factory( α:number, β:number )"
base.dists.betaprime.skewness,"base.dists.betaprime.skewness( α:number, β:number )"
base.dists.betaprime.stdev,"base.dists.betaprime.stdev( α:number, β:number )"
base.dists.betaprime.variance,"base.dists.betaprime.variance( α:number, β:number )"
base.dists.binomial.Binomial,"base.dists.binomial.Binomial( [n:integer, p:number] )"
base.dists.binomial.cdf,"base.dists.binomial.cdf( x:number, n:integer, p:number )"
base.dists.binomial.cdf.factory,"base.dists.binomial.cdf.factory( n:integer, p:number )"
base.dists.binomial.entropy,"base.dists.binomial.entropy( n:integer, p:number )"
base.dists.binomial.kurtosis,"base.dists.binomial.kurtosis( n:integer, p:number )"
base.dists.binomial.logpmf,"base.dists.binomial.logpmf( x:number, n:integer, p:number )"
base.dists.binomial.logpmf.factory,"base.dists.binomial.logpmf.factory( n:integer, p:number )"
base.dists.binomial.mean,"base.dists.binomial.mean( n:integer, p:number )"
base.dists.binomial.median,"base.dists.binomial.median( n:integer, p:number )"
base.dists.binomial.mgf,"base.dists.binomial.mgf( t:number, n:integer, p:number )"
base.dists.binomial.mgf.factory,"base.dists.binomial.mgf.factory( n:integer, p:number )"
base.dists.binomial.mode,"base.dists.binomial.mode( n:integer, p:number )"
base.dists.binomial.pmf,"base.dists.binomial.pmf( x:number, n:integer, p:number )"
base.dists.binomial.pmf.factory,"base.dists.binomial.pmf.factory( n:integer, p:number )"
base.dists.binomial.quantile,"base.dists.binomial.quantile( r:number, n:integer, p:number )"
base.dists.binomial.quantile.factory,"base.dists.binomial.quantile.factory( n:integer, p:number )"
base.dists.binomial.skewness,"base.dists.binomial.skewness( n:integer, p:number )"
base.dists.binomial.stdev,"base.dists.binomial.stdev( n:integer, p:number )"
base.dists.binomial.variance,"base.dists.binomial.variance( n:integer, p:number )"
base.dists.cauchy.Cauchy,"base.dists.cauchy.Cauchy( [x0:number, Ɣ:number] )"
base.dists.cauchy.cdf,"base.dists.cauchy.cdf( x:number, x0:number, Ɣ:number )"
base.dists.cauchy.cdf.factory,"base.dists.cauchy.cdf.factory( x0:number, Ɣ:number )"
base.dists.cauchy.entropy,"base.dists.cauchy.entropy( x0:number, Ɣ:number )"
base.dists.cauchy.logcdf,"base.dists.cauchy.logcdf( x:number, x0:number, Ɣ:number )"
base.dists.cauchy.logcdf.factory,"base.dists.cauchy.logcdf.factory( x0:number, Ɣ:number )"
base.dists.cauchy.logpdf,"base.dists.cauchy.logpdf( x:number, x0:number, Ɣ:number )"
base.dists.cauchy.logpdf.factory,"base.dists.cauchy.logpdf.factory( x0:number, Ɣ:number )"
base.dists.cauchy.median,"base.dists.cauchy.median( x0:number, Ɣ:number )"
base.dists.cauchy.mode,"base.dists.cauchy.mode( x0:number, Ɣ:number )"
base.dists.cauchy.pdf,"base.dists.cauchy.pdf( x:number, x0:number, Ɣ:number )"
base.dists.cauchy.pdf.factory,"base.dists.cauchy.pdf.factory( x0:number, Ɣ:number )"
base.dists.cauchy.quantile,"base.dists.cauchy.quantile( p:number, x0:number, Ɣ:number )"
base.dists.cauchy.quantile.factory,"base.dists.cauchy.quantile.factory( x0:number, Ɣ:number )"
base.dists.chi.cdf,"base.dists.chi.cdf( x:number, k:number )"
base.dists.chi.cdf.factory,"base.dists.chi.cdf.factory( k:number )"
base.dists.chi.Chi,"base.dists.chi.Chi( [k:number] )"
base.dists.chi.entropy,"base.dists.chi.entropy( k:number )"
base.dists.chi.kurtosis,"base.dists.chi.kurtosis( k:number )"
base.dists.chi.logpdf,"base.dists.chi.logpdf( x:number, k:number )"
base.dists.chi.logpdf.factory,"base.dists.chi.logpdf.factory( k:number )"
base.dists.chi.mean,"base.dists.chi.mean( k:number )"
base.dists.chi.mode,"base.dists.chi.mode( k:number )"
base.dists.chi.pdf,"base.dists.chi.pdf( x:number, k:number )"
base.dists.chi.pdf.factory,"base.dists.chi.pdf.factory( k:number )"
base.dists.chi.quantile,"base.dists.chi.quantile( p:number, k:number )"
base.dists.chi.quantile.factory,"base.dists.chi.quantile.factory( k:number )"
base.dists.chi.skewness,"base.dists.chi.skewness( k:number )"
base.dists.chi.stdev,"base.dists.chi.stdev( k:number )"
base.dists.chi.variance,"base.dists.chi.variance( k:number )"
base.dists.chisquare.cdf,"base.dists.chisquare.cdf( x:number, k:number )"
base.dists.chisquare.cdf.factory,"base.dists.chisquare.cdf.factory( k:number )"
base.dists.chisquare.ChiSquare,"base.dists.chisquare.ChiSquare( [k:number] )"
base.dists.chisquare.entropy,"base.dists.chisquare.entropy( k:number )"
base.dists.chisquare.kurtosis,"base.dists.chisquare.kurtosis( k:number )"
base.dists.chisquare.logpdf,"base.dists.chisquare.logpdf( x:number, k:number )"
base.dists.chisquare.logpdf.factory,"base.dists.chisquare.logpdf.factory( k:number )"
base.dists.chisquare.mean,"base.dists.chisquare.mean( k:number )"
base.dists.chisquare.mgf,"base.dists.chisquare.mgf( t:number, k:number )"
base.dists.chisquare.mgf.factory,"base.dists.chisquare.mgf.factory( k:number )"
base.dists.chisquare.mode,"base.dists.chisquare.mode( k:number )"
base.dists.chisquare.pdf,"base.dists.chisquare.pdf( x:number, k:number )"
base.dists.chisquare.pdf.factory,"base.dists.chisquare.pdf.factory( k:number )"
base.dists.chisquare.quantile,"base.dists.chisquare.quantile( p:number, k:number )"
base.dists.chisquare.quantile.factory,"base.dists.chisquare.quantile.factory( k:number )"
base.dists.chisquare.skewness,"base.dists.chisquare.skewness( k:number )"
base.dists.chisquare.stdev,"base.dists.chisquare.stdev( k:number )"
base.dists.chisquare.variance,"base.dists.chisquare.variance( k:number )"
base.dists.cosine.cdf,"base.dists.cosine.cdf( x:number, μ:number, s:number )"
base.dists.cosine.cdf.factory,"base.dists.cosine.cdf.factory( μ:number, s:number )"
base.dists.cosine.Cosine,"base.dists.cosine.Cosine( [μ:number, s:number] )"
base.dists.cosine.kurtosis,"base.dists.cosine.kurtosis( μ:number, s:number )"
base.dists.cosine.logcdf,"base.dists.cosine.logcdf( x:number, μ:number, s:number )"
base.dists.cosine.logcdf.factory,"base.dists.cosine.logcdf.factory( μ:number, s:number )"
base.dists.cosine.logpdf,"base.dists.cosine.logpdf( x:number, μ:number, s:number )"
base.dists.cosine.logpdf.factory,"base.dists.cosine.logpdf.factory( μ:number, s:number )"
base.dists.cosine.mean,"base.dists.cosine.mean( μ:number, s:number )"
base.dists.cosine.median,"base.dists.cosine.median( μ:number, s:number )"
base.dists.cosine.mgf,"base.dists.cosine.mgf( t:number, μ:number, s:number )"
base.dists.cosine.mgf.factory,"base.dists.cosine.mgf.factory( μ:number, s:number )"
base.dists.cosine.mode,"base.dists.cosine.mode( μ:number, s:number )"
base.dists.cosine.pdf,"base.dists.cosine.pdf( x:number, μ:number, s:number )"
base.dists.cosine.pdf.factory,"base.dists.cosine.pdf.factory( μ:number, s:number )"
base.dists.cosine.quantile,"base.dists.cosine.quantile( p:number, μ:number, s:number )"
base.dists.cosine.quantile.factory,"base.dists.cosine.quantile.factory( μ:number, s:number )"
base.dists.cosine.skewness,"base.dists.cosine.skewness( μ:number, s:number )"
base.dists.cosine.stdev,"base.dists.cosine.stdev( μ:number, s:number )"
base.dists.cosine.variance,"base.dists.cosine.variance( μ:number, s:number )"
base.dists.degenerate.cdf,"base.dists.degenerate.cdf( x:number, μ:number )"
base.dists.degenerate.cdf.factory,"base.dists.degenerate.cdf.factory( μ:number )"
base.dists.degenerate.Degenerate,"base.dists.degenerate.Degenerate( [μ:number] )"
base.dists.degenerate.entropy,"base.dists.degenerate.entropy( μ:number )"
base.dists.degenerate.logcdf,"base.dists.degenerate.logcdf( x:number, μ:number )"
base.dists.degenerate.logcdf.factory,"base.dists.degenerate.logcdf.factory( μ:number )"
base.dists.degenerate.logpdf,"base.dists.degenerate.logpdf( x:number, μ:number )"
base.dists.degenerate.logpdf.factory,"base.dists.degenerate.logpdf.factory( μ:number )"
base.dists.degenerate.logpmf,"base.dists.degenerate.logpmf( x:number, μ:number )"
base.dists.degenerate.logpmf.factory,"base.dists.degenerate.logpmf.factory( μ:number )"
base.dists.degenerate.mean,"base.dists.degenerate.mean( μ:number )"
base.dists.degenerate.median,"base.dists.degenerate.median( μ:number )"
base.dists.degenerate.mgf,"base.dists.degenerate.mgf( x:number, μ:number )"
base.dists.degenerate.mgf.factory,"base.dists.degenerate.mgf.factory( μ:number )"
base.dists.degenerate.mode,"base.dists.degenerate.mode( μ:number )"
base.dists.degenerate.pdf,"base.dists.degenerate.pdf( x:number, μ:number )"
base.dists.degenerate.pdf.factory,"base.dists.degenerate.pdf.factory( μ:number )"
base.dists.degenerate.pmf,"base.dists.degenerate.pmf( x:number, μ:number )"
base.dists.degenerate.pmf.factory,"base.dists.degenerate.pmf.factory( μ:number )"
base.dists.degenerate.quantile,"base.dists.degenerate.quantile( p:number, μ:number )"
base.dists.degenerate.quantile.factory,"base.dists.degenerate.quantile.factory( μ:number )"
base.dists.degenerate.stdev,"base.dists.degenerate.stdev( μ:number )"
base.dists.degenerate.variance,"base.dists.degenerate.variance( μ:number )"
base.dists.discreteUniform.cdf,"base.dists.discreteUniform.cdf( x:number, a:integer, b:integer )"
base.dists.discreteUniform.cdf.factory,"base.dists.discreteUniform.cdf.factory( a:integer, b:integer )"
base.dists.discreteUniform.DiscreteUniform,"base.dists.discreteUniform.DiscreteUniform( [a:integer, b:integer] )"
base.dists.discreteUniform.kurtosis,"base.dists.discreteUniform.kurtosis( a:integer, b:integer )"
base.dists.discreteUniform.logcdf,"base.dists.discreteUniform.logcdf( x:number, a:integer, b:integer )"
base.dists.discreteUniform.logcdf.factory,"base.dists.discreteUniform.logcdf.factory( a:integer, b:integer )"
base.dists.discreteUniform.logpmf,"base.dists.discreteUniform.logpmf( x:number, a:integer, b:integer )"
base.dists.discreteUniform.logpmf.factory,"base.dists.discreteUniform.logpmf.factory( a:integer, b:integer )"
base.dists.discreteUniform.mean,"base.dists.discreteUniform.mean( a:integer, b:integer )"
base.dists.discreteUniform.median,"base.dists.discreteUniform.median( a:integer, b:integer )"
base.dists.discreteUniform.mgf,"base.dists.discreteUniform.mgf( t:number, a:integer, b:integer )"
base.dists.discreteUniform.mgf.factory,"base.dists.discreteUniform.mgf.factory( a:integer, b:integer )"
base.dists.discreteUniform.pmf,"base.dists.discreteUniform.pmf( x:number, a:integer, b:integer )"
base.dists.discreteUniform.pmf.factory,"base.dists.discreteUniform.pmf.factory( a:integer, b:integer )"
base.dists.discreteUniform.quantile,"base.dists.discreteUniform.quantile( p:number, a:integer, b:integer )"
base.dists.discreteUniform.quantile.factory,"base.dists.discreteUniform.quantile.factory( a:integer, b:integer )"
base.dists.discreteUniform.skewness,"base.dists.discreteUniform.skewness( a:integer, b:integer )"
base.dists.discreteUniform.stdev,"base.dists.discreteUniform.stdev( a:integer, b:integer )"
base.dists.discreteUniform.variance,"base.dists.discreteUniform.variance( a:integer, b:integer )"
base.dists.erlang.cdf,"base.dists.erlang.cdf( x:number, k:number, λ:number )"
base.dists.erlang.cdf.factory,"base.dists.erlang.cdf.factory( k:number, λ:number )"
base.dists.erlang.entropy,"base.dists.erlang.entropy( k:integer, λ:number )"
base.dists.erlang.Erlang,"base.dists.erlang.Erlang( [k:number, λ:number] )"
base.dists.erlang.kurtosis,"base.dists.erlang.kurtosis( k:integer, λ:number )"
base.dists.erlang.logpdf,"base.dists.erlang.logpdf( x:number, k:number, λ:number )"
base.dists.erlang.logpdf.factory,"base.dists.erlang.logpdf.factory( k:number, λ:number )"
base.dists.erlang.mean,"base.dists.erlang.mean( k:integer, λ:number )"
base.dists.erlang.mgf,"base.dists.erlang.mgf( t:number, k:number, λ:number )"
base.dists.erlang.mgf.factory,"base.dists.erlang.mgf.factory( k:number, λ:number )"
base.dists.erlang.mode,"base.dists.erlang.mode( k:integer, λ:number )"
base.dists.erlang.pdf,"base.dists.erlang.pdf( x:number, k:number, λ:number )"
base.dists.erlang.pdf.factory,"base.dists.erlang.pdf.factory( k:number, λ:number )"
base.dists.erlang.quantile,"base.dists.erlang.quantile( p:number, k:number, λ:number )"
base.dists.erlang.quantile.factory,"base.dists.erlang.quantile.factory( k:number, λ:number )"
base.dists.erlang.skewness,"base.dists.erlang.skewness( k:integer, λ:number )"
base.dists.erlang.stdev,"base.dists.erlang.stdev( k:integer, λ:number )"
base.dists.erlang.variance,"base.dists.erlang.variance( k:integer, λ:number )"
base.dists.exponential.cdf,"base.dists.exponential.cdf( x:number, λ:number )"
base.dists.exponential.cdf.factory,"base.dists.exponential.cdf.factory( λ:number )"
base.dists.exponential.entropy,"base.dists.exponential.entropy( λ:number )"
base.dists.exponential.Exponential,"base.dists.exponential.Exponential( [λ:number] )"
base.dists.exponential.kurtosis,"base.dists.exponential.kurtosis( λ:number )"
base.dists.exponential.logcdf,"base.dists.exponential.logcdf( x:number, λ:number )"
base.dists.exponential.logcdf.factory,"base.dists.exponential.logcdf.factory( λ:number )"
base.dists.exponential.logpdf,"base.dists.exponential.logpdf( x:number, λ:number )"
base.dists.exponential.logpdf.factory,"base.dists.exponential.logpdf.factory( λ:number )"
base.dists.exponential.mean,"base.dists.exponential.mean( λ:number )"
base.dists.exponential.median,"base.dists.exponential.median( λ:number )"
base.dists.exponential.mgf,"base.dists.exponential.mgf( t:number, λ:number )"
base.dists.exponential.mgf.factory,"base.dists.exponential.mgf.factory( λ:number )"
base.dists.exponential.mode,"base.dists.exponential.mode( λ:number )"
base.dists.exponential.pdf,"base.dists.exponential.pdf( x:number, λ:number )"
base.dists.exponential.pdf.factory,"base.dists.exponential.pdf.factory( λ:number )"
base.dists.exponential.quantile,"base.dists.exponential.quantile( p:number, λ:number )"
base.dists.exponential.quantile.factory,"base.dists.exponential.quantile.factory( λ:number )"
base.dists.exponential.skewness,"base.dists.exponential.skewness( λ:number )"
base.dists.exponential.stdev,"base.dists.exponential.stdev( λ:number )"
base.dists.exponential.variance,"base.dists.exponential.variance( λ:number )"
base.dists.f.cdf,"base.dists.f.cdf( x:number, d1:number, d2:number )"
base.dists.f.cdf.factory,"base.dists.f.cdf.factory( d1:number, d2:number )"
base.dists.f.entropy,"base.dists.f.entropy( d1:number, d2:number )"
base.dists.f.F,"base.dists.f.F( [d1:number, d2:number] )"
base.dists.f.kurtosis,"base.dists.f.kurtosis( d1:number, d2:number )"
base.dists.f.mean,"base.dists.f.mean( d1:number, d2:number )"
base.dists.f.mode,"base.dists.f.mode( d1:number, d2:number )"
base.dists.f.pdf,"base.dists.f.pdf( x:number, d1:number, d2:number )"
base.dists.f.pdf.factory,"base.dists.f.pdf.factory( d1:number, d2:number )"
base.dists.f.quantile,"base.dists.f.quantile( p:number, d1:number, d2:number )"
base.dists.f.quantile.factory,"base.dists.f.quantile.factory( d1:number, d2:number )"
base.dists.f.skewness,"base.dists.f.skewness( d1:number, d2:number )"
base.dists.f.stdev,"base.dists.f.stdev( d1:number, d2:number )"
base.dists.f.variance,"base.dists.f.variance( d1:number, d2:number )"
base.dists.frechet.cdf,"base.dists.frechet.cdf( x:number, α:number, s:number, m:number )"
base.dists.frechet.cdf.factory,"base.dists.frechet.cdf.factory( α:number, s:number, m:number )"
base.dists.frechet.entropy,"base.dists.frechet.entropy( α:number, s:number, m:number )"
base.dists.frechet.Frechet,"base.dists.frechet.Frechet( [α:number, s:number, m:number] )"
base.dists.frechet.kurtosis,"base.dists.frechet.kurtosis( α:number, s:number, m:number )"
base.dists.frechet.logcdf,"base.dists.frechet.logcdf( x:number, α:number, s:number, m:number )"
base.dists.frechet.logcdf.factory,"base.dists.frechet.logcdf.factory( α:number, s:number, m:number )"
base.dists.frechet.logpdf,"base.dists.frechet.logpdf( x:number, α:number, s:number, m:number )"
base.dists.frechet.logpdf.factory,"base.dists.frechet.logpdf.factory( α:number, s:number, m:number )"
base.dists.frechet.mean,"base.dists.frechet.mean( α:number, s:number, m:number )"
base.dists.frechet.median,"base.dists.frechet.median( α:number, s:number, m:number )"
base.dists.frechet.mode,"base.dists.frechet.mode( α:number, s:number, m:number )"
base.dists.frechet.pdf,"base.dists.frechet.pdf( x:number, α:number, s:number, m:number )"
base.dists.frechet.pdf.factory,"base.dists.frechet.pdf.factory( α:number, s:number, m:number )"
base.dists.frechet.quantile,"base.dists.frechet.quantile( p:number, α:number, s:number, m:number )"
base.dists.frechet.quantile.factory,"base.dists.frechet.quantile.factory( α:number, s:number, m:number )"
base.dists.frechet.skewness,"base.dists.frechet.skewness( α:number, s:number, m:number )"
base.dists.frechet.stdev,"base.dists.frechet.stdev( α:number, s:number, m:number )"
base.dists.frechet.variance,"base.dists.frechet.variance( α:number, s:number, m:number )"
base.dists.gamma.cdf,"base.dists.gamma.cdf( x:number, α:number, β:number )"
base.dists.gamma.cdf.factory,"base.dists.gamma.cdf.factory( α:number, β:number )"
base.dists.gamma.entropy,"base.dists.gamma.entropy( α:number, β:number )"
base.dists.gamma.Gamma,"base.dists.gamma.Gamma( [α:number, β:number] )"
base.dists.gamma.kurtosis,"base.dists.gamma.kurtosis( α:number, β:number )"
base.dists.gamma.logpdf,"base.dists.gamma.logpdf( x:number, α:number, β:number )"
base.dists.gamma.logpdf.factory,"base.dists.gamma.logpdf.factory( α:number, β:number )"
base.dists.gamma.mean,"base.dists.gamma.mean( α:number, β:number )"
base.dists.gamma.mgf,"base.dists.gamma.mgf( t:number, α:number, β:number )"
base.dists.gamma.mgf.factory,"base.dists.gamma.mgf.factory( α:number, β:number )"
base.dists.gamma.mode,"base.dists.gamma.mode( α:number, β:number )"
base.dists.gamma.pdf,"base.dists.gamma.pdf( x:number, α:number, β:number )"
base.dists.gamma.pdf.factory,"base.dists.gamma.pdf.factory( α:number, β:number )"
base.dists.gamma.quantile,"base.dists.gamma.quantile( p:number, α:number, β:number )"
base.dists.gamma.quantile.factory,"base.dists.gamma.quantile.factory( α:number, β:number )"
base.dists.gamma.skewness,"base.dists.gamma.skewness( α:number, β:number )"
base.dists.gamma.stdev,"base.dists.gamma.stdev( α:number, β:number )"
base.dists.gamma.variance,"base.dists.gamma.variance( α:number, β:number )"
base.dists.geometric.cdf,"base.dists.geometric.cdf( x:number, p:number )"
base.dists.geometric.cdf.factory,"base.dists.geometric.cdf.factory( p:number )"
base.dists.geometric.entropy,"base.dists.geometric.entropy( p:number )"
base.dists.geometric.Geometric,"base.dists.geometric.Geometric( [p:number] )"
base.dists.geometric.kurtosis,"base.dists.geometric.kurtosis( p:number )"
base.dists.geometric.logcdf,"base.dists.geometric.logcdf( x:number, p:number )"
base.dists.geometric.logcdf.factory,"base.dists.geometric.logcdf.factory( p:number )"
base.dists.geometric.logpmf,"base.dists.geometric.logpmf( x:number, p:number )"
base.dists.geometric.logpmf.factory,"base.dists.geometric.logpmf.factory( p:number )"
base.dists.geometric.mean,"base.dists.geometric.mean( p:number )"
base.dists.geometric.median,"base.dists.geometric.median( p:number )"
base.dists.geometric.mgf,"base.dists.geometric.mgf( t:number, p:number )"
base.dists.geometric.mgf.factory,"base.dists.geometric.mgf.factory( p:number )"
base.dists.geometric.mode,"base.dists.geometric.mode( p:number )"
base.dists.geometric.pmf,"base.dists.geometric.pmf( x:number, p:number )"
base.dists.geometric.pmf.factory,"base.dists.geometric.pmf.factory( p:number )"
base.dists.geometric.quantile,"base.dists.geometric.quantile( r:number, p:number )"
base.dists.geometric.quantile.factory,"base.dists.geometric.quantile.factory( p:number )"
base.dists.geometric.skewness,"base.dists.geometric.skewness( p:number )"
base.dists.geometric.stdev,"base.dists.geometric.stdev( p:number )"
base.dists.geometric.variance,"base.dists.geometric.variance( p:number )"
base.dists.gumbel.cdf,"base.dists.gumbel.cdf( x:number, μ:number, β:number )"
base.dists.gumbel.cdf.factory,"base.dists.gumbel.cdf.factory( μ:number, β:number )"
base.dists.gumbel.entropy,"base.dists.gumbel.entropy( μ:number, β:number )"
base.dists.gumbel.Gumbel,"base.dists.gumbel.Gumbel( [μ:number, β:number] )"
base.dists.gumbel.kurtosis,"base.dists.gumbel.kurtosis( μ:number, β:number )"
base.dists.gumbel.logcdf,"base.dists.gumbel.logcdf( x:number, μ:number, β:number )"
base.dists.gumbel.logcdf.factory,"base.dists.gumbel.logcdf.factory( μ:number, β:number )"
base.dists.gumbel.logpdf,"base.dists.gumbel.logpdf( x:number, μ:number, β:number )"
base.dists.gumbel.logpdf.factory,"base.dists.gumbel.logpdf.factory( μ:number, β:number )"
base.dists.gumbel.mean,"base.dists.gumbel.mean( μ:number, β:number )"
base.dists.gumbel.median,"base.dists.gumbel.median( μ:number, β:number )"
base.dists.gumbel.mgf,"base.dists.gumbel.mgf( t:number, μ:number, β:number )"
base.dists.gumbel.mgf.factory,"base.dists.gumbel.mgf.factory( μ:number, β:number )"
base.dists.gumbel.mode,"base.dists.gumbel.mode( μ:number, β:number )"
base.dists.gumbel.pdf,"base.dists.gumbel.pdf( x:number, μ:number, β:number )"
base.dists.gumbel.pdf.factory,"base.dists.gumbel.pdf.factory( μ:number, β:number )"
base.dists.gumbel.quantile,"base.dists.gumbel.quantile( p:number, μ:number, β:number )"
base.dists.gumbel.quantile.factory,"base.dists.gumbel.quantile.factory( μ:number, β:number )"
base.dists.gumbel.skewness,"base.dists.gumbel.skewness( μ:number, β:number )"
base.dists.gumbel.stdev,"base.dists.gumbel.stdev( μ:number, β:number )"
base.dists.gumbel.variance,"base.dists.gumbel.variance( μ:number, β:number )"
base.dists.hypergeometric.cdf,"base.dists.hypergeometric.cdf( x:number, N:integer, K:integer, n:integer )"
base.dists.hypergeometric.cdf.factory,"base.dists.hypergeometric.cdf.factory( N:integer, K:integer, n:integer )"
base.dists.hypergeometric.Hypergeometric,"base.dists.hypergeometric.Hypergeometric( [N:integer, K:integer, n:integer] )"
base.dists.hypergeometric.kurtosis,"base.dists.hypergeometric.kurtosis( N:integer, K:integer, n:integer )"
base.dists.hypergeometric.logpmf,"base.dists.hypergeometric.logpmf( x:number, N:integer, K:integer, n:integer )"
base.dists.hypergeometric.logpmf.factory,"base.dists.hypergeometric.logpmf.factory( N:integer, K:integer, n:integer )"
base.dists.hypergeometric.mean,"base.dists.hypergeometric.mean( N:integer, K:integer, n:integer )"
base.dists.hypergeometric.mode,"base.dists.hypergeometric.mode( N:integer, K:integer, n:integer )"
base.dists.hypergeometric.pmf,"base.dists.hypergeometric.pmf( x:number, N:integer, K:integer, n:integer )"
base.dists.hypergeometric.pmf.factory,"base.dists.hypergeometric.pmf.factory( N:integer, K:integer, n:integer )"
base.dists.hypergeometric.quantile,"base.dists.hypergeometric.quantile( p:number, N:integer, K:integer, n:integer )"
base.dists.hypergeometric.quantile.factory,"base.dists.hypergeometric.quantile.factory( N:integer, K:integer, n:integer )"
base.dists.hypergeometric.skewness,"base.dists.hypergeometric.skewness( N:integer, K:integer, n:integer )"
base.dists.hypergeometric.stdev,"base.dists.hypergeometric.stdev( N:integer, K:integer, n:integer )"
base.dists.hypergeometric.variance,"base.dists.hypergeometric.variance( N:integer, K:integer, n:integer )"
base.dists.invgamma.cdf,"base.dists.invgamma.cdf( x:number, α:number, β:number )"
base.dists.invgamma.cdf.factory,"base.dists.invgamma.cdf.factory( α:number, β:number )"
base.dists.invgamma.entropy,"base.dists.invgamma.entropy( α:number, β:number )"
base.dists.invgamma.InvGamma,"base.dists.invgamma.InvGamma( [α:number, β:number] )"
base.dists.invgamma.kurtosis,"base.dists.invgamma.kurtosis( α:number, β:number )"
base.dists.invgamma.logpdf,"base.dists.invgamma.logpdf( x:number, α:number, β:number )"
base.dists.invgamma.logpdf.factory,"base.dists.invgamma.logpdf.factory( α:number, β:number )"
base.dists.invgamma.mean,"base.dists.invgamma.mean( α:number, β:number )"
base.dists.invgamma.mode,"base.dists.invgamma.mode( α:number, β:number )"
base.dists.invgamma.pdf,"base.dists.invgamma.pdf( x:number, α:number, β:number )"
base.dists.invgamma.pdf.factory,"base.dists.invgamma.pdf.factory( α:number, β:number )"
base.dists.invgamma.quantile,"base.dists.invgamma.quantile( p:number, α:number, β:number )"
base.dists.invgamma.quantile.factory,"base.dists.invgamma.quantile.factory( α:number, β:number )"
base.dists.invgamma.skewness,"base.dists.invgamma.skewness( α:number, β:number )"
base.dists.invgamma.stdev,"base.dists.invgamma.stdev( α:number, β:number )"
base.dists.invgamma.variance,"base.dists.invgamma.variance( α:number, β:number )"
base.dists.kumaraswamy.cdf,"base.dists.kumaraswamy.cdf( x:number, a:number, b:number )"
base.dists.kumaraswamy.cdf.factory,"base.dists.kumaraswamy.cdf.factory( a:number, b:number )"
base.dists.kumaraswamy.Kumaraswamy,"base.dists.kumaraswamy.Kumaraswamy( [a:number, b:number] )"
base.dists.kumaraswamy.kurtosis,"base.dists.kumaraswamy.kurtosis( a:number, b:number )"
base.dists.kumaraswamy.logcdf,"base.dists.kumaraswamy.logcdf( x:number, a:number, b:number )"
base.dists.kumaraswamy.logcdf.factory,"base.dists.kumaraswamy.logcdf.factory( a:number, b:number )"
base.dists.kumaraswamy.logpdf,"base.dists.kumaraswamy.logpdf( x:number, a:number, b:number )"
base.dists.kumaraswamy.logpdf.factory,"base.dists.kumaraswamy.logpdf.factory( a:number, b:number )"
base.dists.kumaraswamy.mean,"base.dists.kumaraswamy.mean( a:number, b:number )"
base.dists.kumaraswamy.median,"base.dists.kumaraswamy.median( a:number, b:number )"
base.dists.kumaraswamy.mode,"base.dists.kumaraswamy.mode( a:number, b:number )"
base.dists.kumaraswamy.pdf,"base.dists.kumaraswamy.pdf( x:number, a:number, b:number )"
base.dists.kumaraswamy.pdf.factory,"base.dists.kumaraswamy.pdf.factory( a:number, b:number )"
base.dists.kumaraswamy.quantile,"base.dists.kumaraswamy.quantile( p:number, a:number, b:number )"
base.dists.kumaraswamy.quantile.factory,"base.dists.kumaraswamy.quantile.factory( a:number, b:number )"
base.dists.kumaraswamy.skewness,"base.dists.kumaraswamy.skewness( a:number, b:number )"
base.dists.kumaraswamy.stdev,"base.dists.kumaraswamy.stdev( a:number, b:number )"
base.dists.kumaraswamy.variance,"base.dists.kumaraswamy.variance( a:number, b:number )"
base.dists.laplace.cdf,"base.dists.laplace.cdf( x:number, μ:number, b:number )"
base.dists.laplace.cdf.factory,"base.dists.laplace.cdf.factory( μ:number, b:number )"
base.dists.laplace.entropy,"base.dists.laplace.entropy( μ:number, b:number )"
base.dists.laplace.kurtosis,"base.dists.laplace.kurtosis( μ:number, b:number )"
base.dists.laplace.Laplace,"base.dists.laplace.Laplace( [μ:number, b:number] )"
base.dists.laplace.logcdf,"base.dists.laplace.logcdf( x:number, μ:number, b:number )"
base.dists.laplace.logcdf.factory,"base.dists.laplace.logcdf.factory( μ:number, b:number )"
base.dists.laplace.logpdf,"base.dists.laplace.logpdf( x:number, μ:number, b:number )"
base.dists.laplace.logpdf.factory,"base.dists.laplace.logpdf.factory( μ:number, b:number )"
base.dists.laplace.mean,"base.dists.laplace.mean( μ:number, b:number )"
base.dists.laplace.median,"base.dists.laplace.median( μ:number, b:number )"
base.dists.laplace.mgf,"base.dists.laplace.mgf( t:number, μ:number, b:number )"
base.dists.laplace.mgf.factory,"base.dists.laplace.mgf.factory( μ:number, b:number )"
base.dists.laplace.mode,"base.dists.laplace.mode( μ:number, b:number )"
base.dists.laplace.pdf,"base.dists.laplace.pdf( x:number, μ:number, b:number )"
base.dists.laplace.pdf.factory,"base.dists.laplace.pdf.factory( μ:number, b:number )"
base.dists.laplace.quantile,"base.dists.laplace.quantile( p:number, μ:number, b:number )"
base.dists.laplace.quantile.factory,"base.dists.laplace.quantile.factory( μ:number, b:number )"
base.dists.laplace.skewness,"base.dists.laplace.skewness( μ:number, b:number )"
base.dists.laplace.stdev,"base.dists.laplace.stdev( μ:number, b:number )"
base.dists.laplace.variance,"base.dists.laplace.variance( μ:number, b:number )"
base.dists.levy.cdf,"base.dists.levy.cdf( x:number, μ:number, c:number )"
base.dists.levy.cdf.factory,"base.dists.levy.cdf.factory( μ:number, c:number )"
base.dists.levy.entropy,"base.dists.levy.entropy( μ:number, c:number )"
base.dists.levy.Levy,"base.dists.levy.Levy( [μ:number, c:number] )"
base.dists.levy.logcdf,"base.dists.levy.logcdf( x:number, μ:number, c:number )"
base.dists.levy.logcdf.factory,"base.dists.levy.logcdf.factory( μ:number, c:number )"
base.dists.levy.logpdf,"base.dists.levy.logpdf( x:number, μ:number, c:number )"
base.dists.levy.logpdf.factory,"base.dists.levy.logpdf.factory( μ:number, c:number )"
base.dists.levy.mean,"base.dists.levy.mean( μ:number, c:number )"
base.dists.levy.median,"base.dists.levy.median( μ:number, c:number )"
base.dists.levy.mode,"base.dists.levy.mode( μ:number, c:number )"
base.dists.levy.pdf,"base.dists.levy.pdf( x:number, μ:number, c:number )"
base.dists.levy.pdf.factory,"base.dists.levy.pdf.factory( μ:number, c:number )"
base.dists.levy.quantile,"base.dists.levy.quantile( p:number, μ:number, c:number )"
base.dists.levy.quantile.factory,"base.dists.levy.quantile.factory( μ:number, c:number )"
base.dists.levy.stdev,"base.dists.levy.stdev( μ:number, c:number )"
base.dists.levy.variance,"base.dists.levy.variance( μ:number, c:number )"
base.dists.logistic.cdf,"base.dists.logistic.cdf( x:number, μ:number, s:number )"
base.dists.logistic.cdf.factory,"base.dists.logistic.cdf.factory( μ:number, s:number )"
base.dists.logistic.entropy,"base.dists.logistic.entropy( μ:number, s:number )"
base.dists.logistic.kurtosis,"base.dists.logistic.kurtosis( μ:number, s:number )"
base.dists.logistic.logcdf,"base.dists.logistic.logcdf( x:number, μ:number, s:number )"
base.dists.logistic.logcdf.factory,"base.dists.logistic.logcdf.factory( μ:number, s:number )"
base.dists.logistic.Logistic,"base.dists.logistic.Logistic( [μ:number, s:number] )"
base.dists.logistic.logpdf,"base.dists.logistic.logpdf( x:number, μ:number, s:number )"
base.dists.logistic.logpdf.factory,"base.dists.logistic.logpdf.factory( μ:number, s:number )"
base.dists.logistic.mean,"base.dists.logistic.mean( μ:number, s:number )"
base.dists.logistic.median,"base.dists.logistic.median( μ:number, s:number )"
base.dists.logistic.mgf,"base.dists.logistic.mgf( t:number, μ:number, s:number )"
base.dists.logistic.mgf.factory,"base.dists.logistic.mgf.factory( μ:number, s:number )"
base.dists.logistic.mode,"base.dists.logistic.mode( μ:number, s:number )"
base.dists.logistic.pdf,"base.dists.logistic.pdf( x:number, μ:number, s:number )"
base.dists.logistic.pdf.factory,"base.dists.logistic.pdf.factory( μ:number, s:number )"
base.dists.logistic.quantile,"base.dists.logistic.quantile( p:number, μ:number, s:number )"
base.dists.logistic.quantile.factory,"base.dists.logistic.quantile.factory( μ:number, s:number )"
base.dists.logistic.skewness,"base.dists.logistic.skewness( μ:number, s:number )"
base.dists.logistic.stdev,"base.dists.logistic.stdev( μ:number, s:number )"
base.dists.logistic.variance,"base.dists.logistic.variance( μ:number, s:number )"
base.dists.lognormal.cdf,"base.dists.lognormal.cdf( x:number, μ:number, σ:number )"
base.dists.lognormal.cdf.factory,"base.dists.lognormal.cdf.factory( μ:number, σ:number )"
base.dists.lognormal.entropy,"base.dists.lognormal.entropy( μ:number, σ:number )"
base.dists.lognormal.kurtosis,"base.dists.lognormal.kurtosis( μ:number, σ:number )"
base.dists.lognormal.LogNormal,"base.dists.lognormal.LogNormal( [μ:number, σ:number] )"
base.dists.lognormal.logpdf,"base.dists.lognormal.logpdf( x:number, μ:number, σ:number )"
base.dists.lognormal.logpdf.factory,"base.dists.lognormal.logpdf.factory( μ:number, σ:number )"
base.dists.lognormal.mean,"base.dists.lognormal.mean( μ:number, σ:number )"
base.dists.lognormal.median,"base.dists.lognormal.median( μ:number, σ:number )"
base.dists.lognormal.mode,"base.dists.lognormal.mode( μ:number, σ:number )"
base.dists.lognormal.pdf,"base.dists.lognormal.pdf( x:number, μ:number, σ:number )"
base.dists.lognormal.pdf.factory,"base.dists.lognormal.pdf.factory( μ:number, σ:number )"
base.dists.lognormal.quantile,"base.dists.lognormal.quantile( p:number, μ:number, σ:number )"
base.dists.lognormal.quantile.factory,"base.dists.lognormal.quantile.factory( μ:number, σ:number )"
base.dists.lognormal.skewness,"base.dists.lognormal.skewness( μ:number, σ:number )"
base.dists.lognormal.stdev,"base.dists.lognormal.stdev( μ:number, σ:number )"
base.dists.lognormal.variance,"base.dists.lognormal.variance( μ:number, σ:number )"
base.dists.negativeBinomial.cdf,"base.dists.negativeBinomial.cdf( x:number, r:number, p:number )"
base.dists.negativeBinomial.cdf.factory,"base.dists.negativeBinomial.cdf.factory( r:number, p:number )"
base.dists.negativeBinomial.kurtosis,"base.dists.negativeBinomial.kurtosis( r:integer, p:number )"
base.dists.negativeBinomial.logpmf,"base.dists.negativeBinomial.logpmf( x:number, r:number, p:number )"
base.dists.negativeBinomial.logpmf.factory,"base.dists.negativeBinomial.logpmf.factory( r:number, p:number )"
base.dists.negativeBinomial.mean,"base.dists.negativeBinomial.mean( r:integer, p:number )"
base.dists.negativeBinomial.mgf,"base.dists.negativeBinomial.mgf( x:number, r:number, p:number )"
base.dists.negativeBinomial.mgf.factory,"base.dists.negativeBinomial.mgf.factory( r:number, p:number )"
base.dists.negativeBinomial.mode,"base.dists.negativeBinomial.mode( r:integer, p:number )"
base.dists.negativeBinomial.NegativeBinomial,"base.dists.negativeBinomial.NegativeBinomial( [r:number, p:number] )"
base.dists.negativeBinomial.pmf,"base.dists.negativeBinomial.pmf( x:number, r:number, p:number )"
base.dists.negativeBinomial.pmf.factory,"base.dists.negativeBinomial.pmf.factory( r:number, p:number )"
base.dists.negativeBinomial.quantile,"base.dists.negativeBinomial.quantile( k:number, r:number, p:number )"
base.dists.negativeBinomial.quantile.factory,"base.dists.negativeBinomial.quantile.factory( r:number, p:number )"
base.dists.negativeBinomial.skewness,"base.dists.negativeBinomial.skewness( r:integer, p:number )"
base.dists.negativeBinomial.stdev,"base.dists.negativeBinomial.stdev( r:integer, p:number )"
base.dists.negativeBinomial.variance,"base.dists.negativeBinomial.variance( r:integer, p:number )"
base.dists.normal.cdf,"base.dists.normal.cdf( x:number, μ:number, σ:number )"
base.dists.normal.cdf.factory,"base.dists.normal.cdf.factory( μ:number, σ:number )"
base.dists.normal.entropy,"base.dists.normal.entropy( μ:number, σ:number )"
base.dists.normal.kurtosis,"base.dists.normal.kurtosis( μ:number, σ:number )"
base.dists.normal.logpdf,"base.dists.normal.logpdf( x:number, μ:number, σ:number )"
base.dists.normal.logpdf.factory,"base.dists.normal.logpdf.factory( μ:number, σ:number )"
base.dists.normal.mean,"base.dists.normal.mean( μ:number, σ:number )"
base.dists.normal.median,"base.dists.normal.median( μ:number, σ:number )"
base.dists.normal.mgf,"base.dists.normal.mgf( x:number, μ:number, σ:number )"
base.dists.normal.mgf.factory,"base.dists.normal.mgf.factory( μ:number, σ:number )"
base.dists.normal.mode,"base.dists.normal.mode( μ:number, σ:number )"
base.dists.normal.Normal,"base.dists.normal.Normal( [μ:number, σ:number] )"
base.dists.normal.pdf,"base.dists.normal.pdf( x:number, μ:number, σ:number )"
base.dists.normal.pdf.factory,"base.dists.normal.pdf.factory( μ:number, σ:number )"
base.dists.normal.quantile,"base.dists.normal.quantile( p:number, μ:number, σ:number )"
base.dists.normal.quantile.factory,"base.dists.normal.quantile.factory( μ:number, σ:number )"
base.dists.normal.skewness,"base.dists.normal.skewness( μ:number, σ:number )"
base.dists.normal.stdev,"base.dists.normal.stdev( μ:number, σ:number )"
base.dists.normal.variance,"base.dists.normal.variance( μ:number, σ:number )"
base.dists.pareto1.cdf,"base.dists.pareto1.cdf( x:number, α:number, β:number )"
base.dists.pareto1.cdf.factory,"base.dists.pareto1.cdf.factory( α:number, β:number )"
base.dists.pareto1.entropy,"base.dists.pareto1.entropy( α:number, β:number )"
base.dists.pareto1.kurtosis,"base.dists.pareto1.kurtosis( α:number, β:number )"
base.dists.pareto1.logcdf,"base.dists.pareto1.logcdf( x:number, α:number, β:number )"
base.dists.pareto1.logcdf.factory,"base.dists.pareto1.logcdf.factory( α:number, β:number )"
base.dists.pareto1.logpdf,"base.dists.pareto1.logpdf( x:number, α:number, β:number )"
base.dists.pareto1.logpdf.factory,"base.dists.pareto1.logpdf.factory( α:number, β:number )"
base.dists.pareto1.mean,"base.dists.pareto1.mean( α:number, β:number )"
base.dists.pareto1.median,"base.dists.pareto1.median( α:number, β:number )"
base.dists.pareto1.mode,"base.dists.pareto1.mode( α:number, β:number )"
base.dists.pareto1.Pareto1,"base.dists.pareto1.Pareto1( [α:number, β:number] )"
base.dists.pareto1.pdf,"base.dists.pareto1.pdf( x:number, α:number, β:number )"
base.dists.pareto1.pdf.factory,"base.dists.pareto1.pdf.factory( α:number, β:number )"
base.dists.pareto1.quantile,"base.dists.pareto1.quantile( p:number, α:number, β:number )"
base.dists.pareto1.quantile.factory,"base.dists.pareto1.quantile.factory( α:number, β:number )"
base.dists.pareto1.skewness,"base.dists.pareto1.skewness( α:number, β:number )"
base.dists.pareto1.stdev,"base.dists.pareto1.stdev( α:number, β:number )"
base.dists.pareto1.variance,"base.dists.pareto1.variance( α:number, β:number )"
base.dists.poisson.cdf,"base.dists.poisson.cdf( x:number, λ:number )"
base.dists.poisson.cdf.factory,"base.dists.poisson.cdf.factory( λ:number )"
base.dists.poisson.entropy,"base.dists.poisson.entropy( λ:number )"
base.dists.poisson.kurtosis,"base.dists.poisson.kurtosis( λ:number )"
base.dists.poisson.logpmf,"base.dists.poisson.logpmf( x:number, λ:number )"
base.dists.poisson.logpmf.factory,"base.dists.poisson.logpmf.factory( λ:number )"
base.dists.poisson.mean,"base.dists.poisson.mean( λ:number )"
base.dists.poisson.median,"base.dists.poisson.median( λ:number )"
base.dists.poisson.mgf,"base.dists.poisson.mgf( x:number, λ:number )"
base.dists.poisson.mgf.factory,"base.dists.poisson.mgf.factory( λ:number )"
base.dists.poisson.mode,"base.dists.poisson.mode( λ:number )"
base.dists.poisson.pmf,"base.dists.poisson.pmf( x:number, λ:number )"
base.dists.poisson.pmf.factory,"base.dists.poisson.pmf.factory( λ:number )"
base.dists.poisson.Poisson,"base.dists.poisson.Poisson( [λ:number] )"
base.dists.poisson.quantile,"base.dists.poisson.quantile( p:number, λ:number )"
base.dists.poisson.quantile.factory,"base.dists.poisson.quantile.factory( λ:number )"
base.dists.poisson.skewness,"base.dists.poisson.skewness( λ:number )"
base.dists.poisson.stdev,"base.dists.poisson.stdev( λ:number )"
base.dists.poisson.variance,"base.dists.poisson.variance( λ:number )"
base.dists.rayleigh.cdf,"base.dists.rayleigh.cdf( x:number, sigma:number )"
base.dists.rayleigh.cdf.factory,"base.dists.rayleigh.cdf.factory( sigma:number )"
base.dists.rayleigh.entropy,"base.dists.rayleigh.entropy( σ:number )"
base.dists.rayleigh.kurtosis,"base.dists.rayleigh.kurtosis( σ:number )"
base.dists.rayleigh.logcdf,"base.dists.rayleigh.logcdf( x:number, sigma:number )"
base.dists.rayleigh.logcdf.factory,"base.dists.rayleigh.logcdf.factory( sigma:number )"
base.dists.rayleigh.logpdf,"base.dists.rayleigh.logpdf( x:number, sigma:number )"
base.dists.rayleigh.logpdf.factory,"base.dists.rayleigh.logpdf.factory( sigma:number )"
base.dists.rayleigh.mean,"base.dists.rayleigh.mean( σ:number )"
base.dists.rayleigh.median,"base.dists.rayleigh.median( σ:number )"
base.dists.rayleigh.mgf,"base.dists.rayleigh.mgf( t:number, sigma:number )"
base.dists.rayleigh.mgf.factory,"base.dists.rayleigh.mgf.factory( sigma:number )"
base.dists.rayleigh.mode,"base.dists.rayleigh.mode( σ:number )"
base.dists.rayleigh.pdf,"base.dists.rayleigh.pdf( x:number, sigma:number )"
base.dists.rayleigh.pdf.factory,"base.dists.rayleigh.pdf.factory( sigma:number )"
base.dists.rayleigh.quantile,"base.dists.rayleigh.quantile( p:number, sigma:number )"
base.dists.rayleigh.quantile.factory,"base.dists.rayleigh.quantile.factory( sigma:number )"
base.dists.rayleigh.Rayleigh,"base.dists.rayleigh.Rayleigh( [σ:number] )"
base.dists.rayleigh.skewness,"base.dists.rayleigh.skewness( σ:number )"
base.dists.rayleigh.stdev,"base.dists.rayleigh.stdev( σ:number )"
base.dists.rayleigh.variance,"base.dists.rayleigh.variance( σ:number )"
base.dists.t.cdf,"base.dists.t.cdf( x:number, v:number )"
base.dists.t.cdf.factory,"base.dists.t.cdf.factory( v:number )"
base.dists.t.entropy,"base.dists.t.entropy( v:number )"
base.dists.t.kurtosis,"base.dists.t.kurtosis( v:number )"
base.dists.t.mean,"base.dists.t.mean( v:number )"
base.dists.t.median,"base.dists.t.median( v:number )"
base.dists.t.mode,"base.dists.t.mode( v:number )"
base.dists.t.pdf,"base.dists.t.pdf( x:number, v:number )"
base.dists.t.pdf.factory,"base.dists.t.pdf.factory( v:number )"
base.dists.t.quantile,"base.dists.t.quantile( p:number, v:number )"
base.dists.t.quantile.factory,"base.dists.t.quantile.factory( v:number )"
base.dists.t.skewness,"base.dists.t.skewness( v:number )"
base.dists.t.stdev,"base.dists.t.stdev( v:number )"
base.dists.t.T,"base.dists.t.T( [v:number] )"
base.dists.t.variance,"base.dists.t.variance( v:number )"
base.dists.triangular.cdf,"base.dists.triangular.cdf( x:number, a:number, b:number, c:number )"
base.dists.triangular.cdf.factory,"base.dists.triangular.cdf.factory( a:number, b:number, c:number )"
base.dists.triangular.entropy,"base.dists.triangular.entropy( a:number, b:number, c:number )"
base.dists.triangular.kurtosis,"base.dists.triangular.kurtosis( a:number, b:number, c:number )"
base.dists.triangular.logcdf,"base.dists.triangular.logcdf( x:number, a:number, b:number, c:number )"
base.dists.triangular.logcdf.factory,"base.dists.triangular.logcdf.factory( a:number, b:number, c:number )"
base.dists.triangular.logpdf,"base.dists.triangular.logpdf( x:number, a:number, b:number, c:number )"
base.dists.triangular.logpdf.factory,"base.dists.triangular.logpdf.factory( a:number, b:number, c:number )"
base.dists.triangular.mean,"base.dists.triangular.mean( a:number, b:number, c:number )"
base.dists.triangular.median,"base.dists.triangular.median( a:number, b:number, c:number )"
base.dists.triangular.mgf,"base.dists.triangular.mgf( t:number, a:number, b:number, c:number )"
base.dists.triangular.mgf.factory,"base.dists.triangular.mgf.factory( a:number, b:number, c:number )"
base.dists.triangular.mode,"base.dists.triangular.mode( a:number, b:number, c:number )"
base.dists.triangular.pdf,"base.dists.triangular.pdf( x:number, a:number, b:number, c:number )"
base.dists.triangular.pdf.factory,"base.dists.triangular.pdf.factory( a:number, b:number, c:number )"
base.dists.triangular.quantile,"base.dists.triangular.quantile( p:number, a:number, b:number, c:number )"
base.dists.triangular.quantile.factory,"base.dists.triangular.quantile.factory( a:number, b:number, c:number )"
base.dists.triangular.skewness,"base.dists.triangular.skewness( a:number, b:number, c:number )"
base.dists.triangular.stdev,"base.dists.triangular.stdev( a:number, b:number, c:number )"
base.dists.triangular.Triangular,"base.dists.triangular.Triangular( [a:number, b:number, c:number] )"
base.dists.triangular.variance,"base.dists.triangular.variance( a:number, b:number, c:number )"
base.dists.uniform.cdf,"base.dists.uniform.cdf( x:number, a:number, b:number )"
base.dists.uniform.cdf.factory,"base.dists.uniform.cdf.factory( a:number, b:number )"
base.dists.uniform.entropy,"base.dists.uniform.entropy( a:number, b:number )"
base.dists.uniform.kurtosis,"base.dists.uniform.kurtosis( a:number, b:number )"
base.dists.uniform.logcdf,"base.dists.uniform.logcdf( x:number, a:number, b:number )"
base.dists.uniform.logcdf.factory,"base.dists.uniform.logcdf.factory( a:number, b:number )"
base.dists.uniform.logpdf,"base.dists.uniform.logpdf( x:number, a:number, b:number )"
base.dists.uniform.logpdf.factory,"base.dists.uniform.logpdf.factory( a:number, b:number )"
base.dists.uniform.mean,"base.dists.uniform.mean( a:number, b:number )"
base.dists.uniform.median,"base.dists.uniform.median( a:number, b:number )"
base.dists.uniform.mgf,"base.dists.uniform.mgf( t:number, a:number, b:number )"
base.dists.uniform.mgf.factory,"base.dists.uniform.mgf.factory( a:number, b:number )"
base.dists.uniform.pdf,"base.dists.uniform.pdf( x:number, a:number, b:number )"
base.dists.uniform.pdf.factory,"base.dists.uniform.pdf.factory( a:number, b:number )"
base.dists.uniform.quantile,"base.dists.uniform.quantile( p:number, a:number, b:number )"
base.dists.uniform.quantile.factory,"base.dists.uniform.quantile.factory( a:number, b:number )"
base.dists.uniform.skewness,"base.dists.uniform.skewness( a:number, b:number )"
base.dists.uniform.stdev,"base.dists.uniform.stdev( a:number, b:number )"
base.dists.uniform.Uniform,"base.dists.uniform.Uniform( [a:number, b:number] )"
base.dists.uniform.variance,"base.dists.uniform.variance( a:number, b:number )"
base.dists.weibull.cdf,"base.dists.weibull.cdf( x:number, k:number, λ:number )"
base.dists.weibull.cdf.factory,"base.dists.weibull.cdf.factory( k:number, λ:number )"
base.dists.weibull.entropy,"base.dists.weibull.entropy( k:number, λ:number )"
base.dists.weibull.kurtosis,"base.dists.weibull.kurtosis( k:number, λ:number )"
base.dists.weibull.logcdf,"base.dists.weibull.logcdf( x:number, k:number, λ:number )"
base.dists.weibull.logcdf.factory,"base.dists.weibull.logcdf.factory( k:number, λ:number)"
base.dists.weibull.logpdf,"base.dists.weibull.logpdf( x:number, k:number, λ:number )"
base.dists.weibull.logpdf.factory,"base.dists.weibull.logpdf.factory( k:number, λ:number )"
base.dists.weibull.mean,"base.dists.weibull.mean( k:number, λ:number )"
base.dists.weibull.median,"base.dists.weibull.median( k:number, λ:number )"
base.dists.weibull.mgf,"base.dists.weibull.mgf( x:number, k:number, λ:number )"
base.dists.weibull.mgf.factory,"base.dists.weibull.mgf.factory( k:number, λ:number )"
base.dists.weibull.mode,"base.dists.weibull.mode( k:number, λ:number )"
base.dists.weibull.pdf,"base.dists.weibull.pdf( x:number, k:number, λ:number )"
base.dists.weibull.pdf.factory,"base.dists.weibull.pdf.factory( k:number, λ:number )"
base.dists.weibull.quantile,"base.dists.weibull.quantile( p:number, k:number, λ:number )"
base.dists.weibull.quantile.factory,"base.dists.weibull.quantile.factory( k:number, λ:number )"
base.dists.weibull.skewness,"base.dists.weibull.skewness( k:number, λ:number )"
base.dists.weibull.stdev,"base.dists.weibull.stdev( k:number, λ:number )"
base.dists.weibull.variance,"base.dists.weibull.variance( k:number, λ:number )"
base.dists.weibull.Weibull,"base.dists.weibull.Weibull( [k:number, λ:number] )"
base.ellipe,"base.ellipe( m:number )"
base.ellipk,"base.ellipk( m:number )"
base.epsdiff,"base.epsdiff( x:number, y:number[, scale:string|Function] )"
base.erf,"base.erf( x:number )"
base.erfc,"base.erfc( x:number )"
base.erfcinv,"base.erfcinv( x:number )"
base.erfinv,"base.erfinv( x:number )"
base.eta,"base.eta( s:number )"
base.evalpoly,"base.evalpoly( c:Array<number>, x:number )"
base.evalpoly.factory,"base.evalpoly.factory( c:Array<number> )"
base.evalrational,"base.evalrational( P:Array<number>, Q:Array<number>, x:number )"
base.evalrational.factory,"base.evalrational.factory( P:Array<number>, Q:Array<number> )"
base.exp,"base.exp( x:number )"
base.exp2,"base.exp2( x:number )"
base.exp10,"base.exp10( x:number )"
base.expit,"base.expit( x:number )"
base.expm1,"base.expm1( x:number )"
base.expm1rel,"base.expm1rel( x:number )"
base.exponent,"base.exponent( x:number )"
base.exponentf,"base.exponentf( x:float )"
base.factorial,"base.factorial( x:number )"
base.factorialln,"base.factorialln( x:number )"
base.fallingFactorial,"base.fallingFactorial( x:number, n:integer )"
base.fibonacci,"base.fibonacci( n:integer )"
base.fibonacciIndex,"base.fibonacciIndex( F:integer )"
base.fibpoly,"base.fibpoly( n:integer, x:number )"
base.fibpoly.factory,"base.fibpoly.factory( n:integer )"
base.flipsign,"base.flipsign( x:number, y:number )"
base.float32ToInt32,"base.float32ToInt32( x:float )"
base.float32ToUint32,"base.float32ToUint32( x:float )"
base.float64ToFloat32,"base.float64ToFloat32( x:number )"
base.float64ToInt32,"base.float64ToInt32( x:number )"
base.float64ToUint32,"base.float64ToUint32( x:number )"
base.floor,"base.floor( x:number )"
base.floor2,"base.floor2( x:number )"
base.floor10,"base.floor10( x:number )"
base.floorb,"base.floorb( x:number, n:integer, b:integer )"
base.floorn,"base.floorn( x:number, n:integer )"
base.floorsd,"base.floorsd( x:number, n:integer[, b:integer] )"
base.fresnel,"base.fresnel( [out:Array|TypedArray|Object,] x:number )"
base.fresnelc,"base.fresnelc( x:number )"
base.fresnels,"base.fresnels( x:number )"
base.frexp,"base.frexp( [out:Array|TypedArray|Object,] x:number )"
base.fromBinaryString,"base.fromBinaryString( bstr:string )"
base.fromBinaryStringf,"base.fromBinaryStringf( bstr:string )"
base.fromBinaryStringUint8,"base.fromBinaryStringUint8( bstr:string )"
base.fromBinaryStringUint16,"base.fromBinaryStringUint16( bstr:string )"
base.fromBinaryStringUint32,"base.fromBinaryStringUint32( bstr:string )"
base.fromWordf,"base.fromWordf( x:integer )"
base.fromWords,"base.fromWords( high:integer, low:integer )"
base.gamma,"base.gamma( x:number )"
base.gamma1pm1,"base.gamma1pm1( x:number )"
base.gammaDeltaRatio,"base.gammaDeltaRatio( z:number, delta:number )"
base.gammainc,"base.gammainc( x:number, s:number[, regularized:boolean[, upper:boolean]] )"
base.gammaincinv,"base.gammaincinv( p:number, a:number[, upper:boolean] )"
base.gammaLanczosSum,"base.gammaLanczosSum( x:number )"
base.gammaLanczosSumExpGScaled,"base.gammaLanczosSumExpGScaled( x:number )"
base.gammaln,"base.gammaln( x:number )"
base.gasum,"base.gasum( N:integer, x:Array<number>, stride:integer )"
base.gasum.ndarray,"base.gasum.ndarray( N:integer, x:Array<number>, stride:integer, offset:integer )"
base.gaxpy,"base.gaxpy( N:integer, alpha:number, x:Array|TypedArray, strideX:integer, y:Array|TypedArray, strideY:integer )"
base.gaxpy.ndarray,"base.gaxpy.ndarray( N:integer, alpha:number, x:Array|TypedArray, strideX:integer, offsetX:integer, y:Array|TypedArray, strideY:integer, offsetY:integer )"
base.gcd,"base.gcd( a:integer, b:integer )"
base.gcopy,"base.gcopy( N:integer, x:Array|TypedArray, strideX:integer, y:Array|TypedArray, strideY:integer )"
base.gcopy.ndarray,"base.gcopy.ndarray( N:integer, x:Array|TypedArray, strideX:integer, offsetX:integer, y:Array|TypedArray, strideY:integer, offsetY:integer )"
base.getHighWord,"base.getHighWord( x:number )"
base.getLowWord,"base.getLowWord( x:number )"
base.hacovercos,"base.hacovercos( x:number )"
base.hacoversin,"base.hacoversin( x:number )"
base.havercos,"base.havercos( x:number )"
base.haversin,"base.haversin( x:number )"
base.heaviside,"base.heaviside( x:number[, continuity:string] )"
base.hermitepoly,"base.hermitepoly( n:integer, x:number )"
base.hermitepoly.factory,"base.hermitepoly.factory( n:integer )"
base.hypot,"base.hypot( x:number, y:number )"
base.imul,"base.imul( a:integer, b:integer )"
base.imuldw,"base.imuldw( [out:ArrayLikeObject,] a:integer, b:integer )"
base.int32ToUint32,"base.int32ToUint32( x:integer )"
base.inv,"base.inv( x:number )"
base.isEven,"base.isEven( x:number )"
base.isEvenInt32,"base.isEvenInt32( x:integer )"
base.isFinite,"base.isFinite( x:number )"
base.isInfinite,"base.isInfinite( x:number )"
base.isInteger,"base.isInteger( x:number )"
base.isnan,"base.isnan( x:number )"
base.isNegativeInteger,"base.isNegativeInteger( x:number )"
base.isNegativeZero,"base.isNegativeZero( x:number )"
base.isNonNegativeInteger,"base.isNonNegativeInteger( x:number )"
base.isNonPositiveInteger,"base.isNonPositiveInteger( x:number )"
base.isOdd,"base.isOdd( x:number )"
base.isOddInt32,"base.isOddInt32( x:integer )"
base.isPositiveInteger,"base.isPositiveInteger( x:number )"
base.isPositiveZero,"base.isPositiveZero( x:number )"
base.isPow2Uint32,"base.isPow2Uint32( x:integer )"
base.isProbability,"base.isProbability( x:number )"
base.isSafeInteger,"base.isSafeInteger( x:number )"
base.kernelBetainc,"base.kernelBetainc( [out:Array|TypedArray|Object,] x:number, a:number, b:number, regularized:boolean, upper:boolean )"
base.kernelBetaincinv,"base.kernelBetaincinv( a:number, b:number, p:number, q:number )"
base.kernelCos,"base.kernelCos( x:number, y:number )"
base.kernelSin,"base.kernelSin( x:number, y:number )"
base.kernelTan,"base.kernelTan( x:number, y:number, k:integer )"
base.kroneckerDelta,"base.kroneckerDelta( i:number, j:number )"
base.lcm,"base.lcm( a:integer, b:integer )"
base.ldexp,"base.ldexp( frac:number, exp:number )"
base.ln,"base.ln( x:number )"
base.log,"base.log( x:number, b:number )"
base.log1mexp,"base.log1mexp( x:number )"
base.log1p,"base.log1p( x:number )"
base.log1pexp,"base.log1pexp( x:number )"
base.log2,"base.log2( x:number )"
base.log10,"base.log10( x:number )"
base.logaddexp,"base.logaddexp( x:number, y:number )"
base.logit,"base.logit( p:number )"
base.lucas,"base.lucas( n:integer )"
base.lucaspoly,"base.lucaspoly( n:integer, x:number )"
base.lucaspoly.factory,"base.lucaspoly.factory( n:integer )"
base.max,"base.max( [x:number[, y:number[, ...args:number]]] )"
base.maxabs,"base.maxabs( [x:number[, y:number[, ...args:number]]] )"
base.min,"base.min( [x:number[, y:number[, ...args:number]]] )"
base.minabs,"base.minabs( [x:number[, y:number[, ...args:number]]] )"
base.minmax,"base.minmax( [out:Array|TypedArray|Object,] x:number[, y:number[, ...args:number]] )"
base.minmaxabs,"base.minmaxabs( [out:Array|TypedArray|Object,] x:number[, y:number[, ...args:number]] )"
base.modf,"base.modf( [out:Array|TypedArray|Object,] x:number )"
base.ndarray,"base.ndarray( dtype:string, ndims:integer[, options:Object] )"
base.ndarrayMemoized,"base.ndarrayMemoized( dtype:string, ndims:integer[, options:Object] )"
base.negafibonacci,"base.negafibonacci( n:integer )"
base.negalucas,"base.negalucas( n:integer )"
base.nonfibonacci,"base.nonfibonacci( n:integer )"
base.normalize,"base.normalize( [out:Array|TypedArray|Object,] x:number )"
base.normalizef,"base.normalizef( [out:Array|TypedArray|Object,] x:float )"
base.normhermitepoly,"base.normhermitepoly( n:integer, x:number )"
base.normhermitepoly.factory,"base.normhermitepoly.factory( n:integer )"
base.pdiff,"base.pdiff( x:number, y:number )"
base.polygamma,"base.polygamma( n:integer, x:number )"
base.pow,"base.pow( b:number, x:number )"
base.powm1,"base.powm1( b:number, x:number )"
base.rad2deg,"base.rad2deg( x:number )"
base.ramp,"base.ramp( x:number )"
base.random.arcsine,"base.random.arcsine( a:number, b:number )"
base.random.arcsine.factory,"base.random.arcsine.factory( [a:number, b:number, ][options:Object] )"
base.random.arcsine.NAME,"base.random.arcsine.NAME"
base.random.arcsine.PRNG,"base.random.arcsine.PRNG"
base.random.arcsine.seed,"base.random.arcsine.seed"
base.random.arcsine.seedLength,"base.random.arcsine.seedLength"
base.random.arcsine.state,"base.random.arcsine.state"
base.random.arcsine.stateLength,"base.random.arcsine.stateLength"
base.random.arcsine.byteLength,"base.random.arcsine.byteLength"
base.random.arcsine.toJSON,"base.random.arcsine.toJSON()"
base.random.bernoulli,"base.random.bernoulli( p:number )"
base.random.bernoulli.factory,"base.random.bernoulli.factory( [p:number, ][options:Object] )"
base.random.bernoulli.NAME,"base.random.bernoulli.NAME"
base.random.bernoulli.PRNG,"base.random.bernoulli.PRNG"
base.random.bernoulli.seed,"base.random.bernoulli.seed"
base.random.bernoulli.seedLength,"base.random.bernoulli.seedLength"
base.random.bernoulli.state,"base.random.bernoulli.state"
base.random.bernoulli.stateLength,"base.random.bernoulli.stateLength"
base.random.bernoulli.byteLength,"base.random.bernoulli.byteLength"
base.random.bernoulli.toJSON,"base.random.bernoulli.toJSON()"
base.random.beta,"base.random.beta( α:number, β:number )"
base.random.beta.factory,"base.random.beta.factory( [α:number, β:number, ][options:Object] )"
base.random.beta.NAME,"base.random.beta.NAME"
base.random.beta.PRNG,"base.random.beta.PRNG"
base.random.beta.seed,"base.random.beta.seed"
base.random.beta.seedLength,"base.random.beta.seedLength"
base.random.beta.state,"base.random.beta.state"
base.random.beta.stateLength,"base.random.beta.stateLength"
base.random.beta.byteLength,"base.random.beta.byteLength"
base.random.beta.toJSON,"base.random.beta.toJSON()"
base.random.betaprime,"base.random.betaprime( α:number, β:number )"
base.random.betaprime.factory,"base.random.betaprime.factory( [α:number, β:number, ][options:Object] )"
base.random.betaprime.NAME,"base.random.betaprime.NAME"
base.random.betaprime.PRNG,"base.random.betaprime.PRNG"
base.random.betaprime.seed,"base.random.betaprime.seed"
base.random.betaprime.seedLength,"base.random.betaprime.seedLength"
base.random.betaprime.state,"base.random.betaprime.state"
base.random.betaprime.stateLength,"base.random.betaprime.stateLength"
base.random.betaprime.byteLength,"base.random.betaprime.byteLength"
base.random.betaprime.toJSON,"base.random.betaprime.toJSON()"
base.random.binomial,"base.random.binomial( n:integer, p:number )"
base.random.binomial.factory,"base.random.binomial.factory( [n:integer, p:number, ][options:Object] )"
base.random.binomial.NAME,"base.random.binomial.NAME"
base.random.binomial.PRNG,"base.random.binomial.PRNG"
base.random.binomial.seed,"base.random.binomial.seed"
base.random.binomial.seedLength,"base.random.binomial.seedLength"
base.random.binomial.state,"base.random.binomial.state"
base.random.binomial.stateLength,"base.random.binomial.stateLength"
base.random.binomial.byteLength,"base.random.binomial.byteLength"
base.random.binomial.toJSON,"base.random.binomial.toJSON()"
base.random.boxMuller,"base.random.boxMuller()"
base.random.boxMuller.factory,"base.random.boxMuller.factory( [options:Object] )"
base.random.boxMuller.NAME,"base.random.boxMuller.NAME"
base.random.boxMuller.PRNG,"base.random.boxMuller.PRNG"
base.random.boxMuller.seed,"base.random.boxMuller.seed"
base.random.boxMuller.seedLength,"base.random.boxMuller.seedLength"
base.random.boxMuller.state,"base.random.boxMuller.state"
base.random.boxMuller.stateLength,"base.random.boxMuller.stateLength"
base.random.boxMuller.byteLength,"base.random.boxMuller.byteLength"
base.random.boxMuller.toJSON,"base.random.boxMuller.toJSON()"
base.random.cauchy,"base.random.cauchy( x0:number, Ɣ:number )"
base.random.cauchy.factory,"base.random.cauchy.factory( [x0:number, Ɣ:number, ][options:Object] )"
base.random.cauchy.NAME,"base.random.cauchy.NAME"
base.random.cauchy.PRNG,"base.random.cauchy.PRNG"
base.random.cauchy.seed,"base.random.cauchy.seed"
base.random.cauchy.seedLength,"base.random.cauchy.seedLength"
base.random.cauchy.state,"base.random.cauchy.state"
base.random.cauchy.stateLength,"base.random.cauchy.stateLength"
base.random.cauchy.byteLength,"base.random.cauchy.byteLength"
base.random.cauchy.toJSON,"base.random.cauchy.toJSON()"
base.random.chi,"base.random.chi( k:number )"
base.random.chi.factory,"base.random.chi.factory( [k:number, ][options:Object] )"
base.random.chi.NAME,"base.random.chi.NAME"
base.random.chi.PRNG,"base.random.chi.PRNG"
base.random.chi.seed,"base.random.chi.seed"
base.random.chi.seedLength,"base.random.chi.seedLength"
base.random.chi.state,"base.random.chi.state"
base.random.chi.stateLength,"base.random.chi.stateLength"
base.random.chi.byteLength,"base.random.chi.byteLength"
base.random.chi.toJSON,"base.random.chi.toJSON()"
base.random.chisquare,"base.random.chisquare( k:number )"
base.random.chisquare.factory,"base.random.chisquare.factory( [k:number, ][options:Object] )"
base.random.chisquare.NAME,"base.random.chisquare.NAME"
base.random.chisquare.PRNG,"base.random.chisquare.PRNG"
base.random.chisquare.seed,"base.random.chisquare.seed"
base.random.chisquare.seedLength,"base.random.chisquare.seedLength"
base.random.chisquare.state,"base.random.chisquare.state"
base.random.chisquare.stateLength,"base.random.chisquare.stateLength"
base.random.chisquare.byteLength,"base.random.chisquare.byteLength"
base.random.chisquare.toJSON,"base.random.chisquare.toJSON()"
base.random.cosine,"base.random.cosine( μ:number, s:number )"
base.random.cosine.factory,"base.random.cosine.factory( [μ:number, s:number, ][options:Object] )"
base.random.cosine.NAME,"base.random.cosine.NAME"
base.random.cosine.PRNG,"base.random.cosine.PRNG"
base.random.cosine.seed,"base.random.cosine.seed"
base.random.cosine.seedLength,"base.random.cosine.seedLength"
base.random.cosine.state,"base.random.cosine.state"
base.random.cosine.stateLength,"base.random.cosine.stateLength"
base.random.cosine.byteLength,"base.random.cosine.byteLength"
base.random.cosine.toJSON,"base.random.cosine.toJSON()"
base.random.discreteUniform,"base.random.discreteUniform( a:integer, b:integer )"
base.random.discreteUniform.factory,"base.random.discreteUniform.factory( [a:integer, b:integer, ][options:Object] )"
base.random.discreteUniform.NAME,"base.random.discreteUniform.NAME"
base.random.discreteUniform.PRNG,"base.random.discreteUniform.PRNG"
base.random.discreteUniform.seed,"base.random.discreteUniform.seed"
base.random.discreteUniform.seedLength,"base.random.discreteUniform.seedLength"
base.random.discreteUniform.state,"base.random.discreteUniform.state"
base.random.discreteUniform.stateLength,"base.random.discreteUniform.stateLength"
base.random.discreteUniform.byteLength,"base.random.discreteUniform.byteLength"
base.random.discreteUniform.toJSON,"base.random.discreteUniform.toJSON()"
base.random.erlang,"base.random.erlang( k:integer, λ:number )"
base.random.erlang.factory,"base.random.erlang.factory( [k:integer, λ:number, ][options:Object] )"
base.random.erlang.NAME,"base.random.erlang.NAME"
base.random.erlang.PRNG,"base.random.erlang.PRNG"
base.random.erlang.seed,"base.random.erlang.seed"
base.random.erlang.seedLength,"base.random.erlang.seedLength"
base.random.erlang.state,"base.random.erlang.state"
base.random.erlang.stateLength,"base.random.erlang.stateLength"
base.random.erlang.byteLength,"base.random.erlang.byteLength"
base.random.erlang.toJSON,"base.random.erlang.toJSON()"
base.random.exponential,"base.random.exponential( λ:number )"
base.random.exponential.factory,"base.random.exponential.factory( [λ:number, ][options:Object] )"
base.random.exponential.NAME,"base.random.exponential.NAME"
base.random.exponential.PRNG,"base.random.exponential.PRNG"
base.random.exponential.seed,"base.random.exponential.seed"
base.random.exponential.seedLength,"base.random.exponential.seedLength"
base.random.exponential.state,"base.random.exponential.state"
base.random.exponential.stateLength,"base.random.exponential.stateLength"
base.random.exponential.byteLength,"base.random.exponential.byteLength"
base.random.exponential.toJSON,"base.random.exponential.toJSON()"
base.random.f,"base.random.f( d1:number, d2:number )"
base.random.f.factory,"base.random.f.factory( [d1:number, d2:number, ][options:Object] )"
base.random.f.NAME,"base.random.f.NAME"
base.random.f.PRNG,"base.random.f.PRNG"
base.random.f.seed,"base.random.f.seed"
base.random.f.seedLength,"base.random.f.seedLength"
base.random.f.state,"base.random.f.state"
base.random.f.stateLength,"base.random.f.stateLength"
base.random.f.byteLength,"base.random.f.byteLength"
base.random.f.toJSON,"base.random.f.toJSON()"
base.random.frechet,"base.random.frechet( α:number, s:number, m:number )"
base.random.frechet.factory,"base.random.frechet.factory( [α:number, s:number, m:number, ][options:Object] )"
base.random.frechet.NAME,"base.random.frechet.NAME"
base.random.frechet.PRNG,"base.random.frechet.PRNG"
base.random.frechet.seed,"base.random.frechet.seed"
base.random.frechet.seedLength,"base.random.frechet.seedLength"
base.random.frechet.state,"base.random.frechet.state"
base.random.frechet.stateLength,"base.random.frechet.stateLength"
base.random.frechet.byteLength,"base.random.frechet.byteLength"
base.random.frechet.toJSON,"base.random.frechet.toJSON()"
base.random.gamma,"base.random.gamma( α:number, β:number )"
base.random.gamma.factory,"base.random.gamma.factory( [α:number, β:number, ][options:Object] )"
base.random.gamma.NAME,"base.random.gamma.NAME"
base.random.gamma.PRNG,"base.random.gamma.PRNG"
base.random.gamma.seed,"base.random.gamma.seed"
base.random.gamma.seedLength,"base.random.gamma.seedLength"
base.random.gamma.state,"base.random.gamma.state"
base.random.gamma.stateLength,"base.random.gamma.stateLength"
base.random.gamma.byteLength,"base.random.gamma.byteLength"
base.random.gamma.toJSON,"base.random.gamma.toJSON()"
base.random.geometric,"base.random.geometric( p:number )"
base.random.geometric.factory,"base.random.geometric.factory( [p:number, ][options:Object] )"
base.random.geometric.NAME,"base.random.geometric.NAME"
base.random.geometric.PRNG,"base.random.geometric.PRNG"
base.random.geometric.seed,"base.random.geometric.seed"
base.random.geometric.seedLength,"base.random.geometric.seedLength"
base.random.geometric.state,"base.random.geometric.state"
base.random.geometric.stateLength,"base.random.geometric.stateLength"
base.random.geometric.byteLength,"base.random.geometric.byteLength"
base.random.geometric.toJSON,"base.random.geometric.toJSON()"
base.random.gumbel,"base.random.gumbel( μ:number, β:number )"
base.random.gumbel.factory,"base.random.gumbel.factory( [μ:number, β:number, ][options:Object] )"
base.random.gumbel.NAME,"base.random.gumbel.NAME"
base.random.gumbel.PRNG,"base.random.gumbel.PRNG"
base.random.gumbel.seed,"base.random.gumbel.seed"
base.random.gumbel.seedLength,"base.random.gumbel.seedLength"
base.random.gumbel.state,"base.random.gumbel.state"
base.random.gumbel.stateLength,"base.random.gumbel.stateLength"
base.random.gumbel.byteLength,"base.random.gumbel.byteLength"
base.random.gumbel.toJSON,"base.random.gumbel.toJSON()"
base.random.hypergeometric,"base.random.hypergeometric( N:integer, K:integer, n:integer )"
base.random.hypergeometric.factory,"base.random.hypergeometric.factory( [N:integer, K:integer, n:integer, ][options:Object] )"
base.random.hypergeometric.NAME,"base.random.hypergeometric.NAME"
base.random.hypergeometric.PRNG,"base.random.hypergeometric.PRNG"
base.random.hypergeometric.seed,"base.random.hypergeometric.seed"
base.random.hypergeometric.seedLength,"base.random.hypergeometric.seedLength"
base.random.hypergeometric.state,"base.random.hypergeometric.state"
base.random.hypergeometric.stateLength,"base.random.hypergeometric.stateLength"
base.random.hypergeometric.byteLength,"base.random.hypergeometric.byteLength"
base.random.hypergeometric.toJSON,"base.random.hypergeometric.toJSON()"
base.random.improvedZiggurat,"base.random.improvedZiggurat()"
base.random.improvedZiggurat.factory,"base.random.improvedZiggurat.factory( [options:Object] )"
base.random.improvedZiggurat.NAME,"base.random.improvedZiggurat.NAME"
base.random.improvedZiggurat.PRNG,"base.random.improvedZiggurat.PRNG"
base.random.improvedZiggurat.seed,"base.random.improvedZiggurat.seed"
base.random.improvedZiggurat.seedLength,"base.random.improvedZiggurat.seedLength"
base.random.improvedZiggurat.state,"base.random.improvedZiggurat.state"
base.random.improvedZiggurat.stateLength,"base.random.improvedZiggurat.stateLength"
base.random.improvedZiggurat.byteLength,"base.random.improvedZiggurat.byteLength"
base.random.improvedZiggurat.toJSON,"base.random.improvedZiggurat.toJSON()"
base.random.invgamma,"base.random.invgamma( α:number, β:number )"
base.random.invgamma.factory,"base.random.invgamma.factory( [α:number, β:number, ][options:Object] )"
base.random.invgamma.NAME,"base.random.invgamma.NAME"
base.random.invgamma.PRNG,"base.random.invgamma.PRNG"
base.random.invgamma.seed,"base.random.invgamma.seed"
base.random.invgamma.seedLength,"base.random.invgamma.seedLength"
base.random.invgamma.state,"base.random.invgamma.state"
base.random.invgamma.stateLength,"base.random.invgamma.stateLength"
base.random.invgamma.byteLength,"base.random.invgamma.byteLength"
base.random.invgamma.toJSON,"base.random.invgamma.toJSON()"
base.random.kumaraswamy,"base.random.kumaraswamy( a:number, b:number )"
base.random.kumaraswamy.factory,"base.random.kumaraswamy.factory( [a:number, b:number, ][options:Object] )"
base.random.kumaraswamy.NAME,"base.random.kumaraswamy.NAME"
base.random.kumaraswamy.PRNG,"base.random.kumaraswamy.PRNG"
base.random.kumaraswamy.seed,"base.random.kumaraswamy.seed"
base.random.kumaraswamy.seedLength,"base.random.kumaraswamy.seedLength"
base.random.kumaraswamy.state,"base.random.kumaraswamy.state"
base.random.kumaraswamy.stateLength,"base.random.kumaraswamy.stateLength"
base.random.kumaraswamy.byteLength,"base.random.kumaraswamy.byteLength"
base.random.kumaraswamy.toJSON,"base.random.kumaraswamy.toJSON()"
base.random.laplace,"base.random.laplace( μ:number, b:number )"
base.random.laplace.factory,"base.random.laplace.factory( [μ:number, b:number, ][options:Object] )"
base.random.laplace.NAME,"base.random.laplace.NAME"
base.random.laplace.PRNG,"base.random.laplace.PRNG"
base.random.laplace.seed,"base.random.laplace.seed"
base.random.laplace.seedLength,"base.random.laplace.seedLength"
base.random.laplace.state,"base.random.laplace.state"
base.random.laplace.stateLength,"base.random.laplace.stateLength"
base.random.laplace.byteLength,"base.random.laplace.byteLength"
base.random.laplace.toJSON,"base.random.laplace.toJSON()"
base.random.levy,"base.random.levy( μ:number, c:number )"
base.random.levy.factory,"base.random.levy.factory( [μ:number, c:number, ][options:Object] )"
base.random.levy.NAME,"base.random.levy.NAME"
base.random.levy.PRNG,"base.random.levy.PRNG"
base.random.levy.seed,"base.random.levy.seed"
base.random.levy.seedLength,"base.random.levy.seedLength"
base.random.levy.state,"base.random.levy.state"
base.random.levy.stateLength,"base.random.levy.stateLength"
base.random.levy.byteLength,"base.random.levy.byteLength"
base.random.levy.toJSON,"base.random.levy.toJSON()"
base.random.logistic,"base.random.logistic( μ:number, s:number )"
base.random.logistic.factory,"base.random.logistic.factory( [μ:number, s:number, ][options:Object] )"
base.random.logistic.NAME,"base.random.logistic.NAME"
base.random.logistic.PRNG,"base.random.logistic.PRNG"
base.random.logistic.seed,"base.random.logistic.seed"
base.random.logistic.seedLength,"base.random.logistic.seedLength"
base.random.logistic.state,"base.random.logistic.state"
base.random.logistic.stateLength,"base.random.logistic.stateLength"
base.random.logistic.byteLength,"base.random.logistic.byteLength"
base.random.logistic.toJSON,"base.random.logistic.toJSON()"
base.random.lognormal,"base.random.lognormal( μ:number, σ:number )"
base.random.lognormal.factory,"base.random.lognormal.factory( [μ:number, σ:number, ][options:Object] )"
base.random.lognormal.NAME,"base.random.lognormal.NAME"
base.random.lognormal.PRNG,"base.random.lognormal.PRNG"
base.random.lognormal.seed,"base.random.lognormal.seed"
base.random.lognormal.seedLength,"base.random.lognormal.seedLength"
base.random.lognormal.state,"base.random.lognormal.state"
base.random.lognormal.stateLength,"base.random.lognormal.stateLength"
base.random.lognormal.byteLength,"base.random.lognormal.byteLength"
base.random.lognormal.toJSON,"base.random.lognormal.toJSON()"
base.random.minstd,"base.random.minstd()"
base.random.minstd.normalized,"base.random.minstd.normalized()"
base.random.minstd.factory,"base.random.minstd.factory( [options:Object] )"
base.random.minstd.NAME,"base.random.minstd.NAME"
base.random.minstd.MIN,"base.random.minstd.MIN"
base.random.minstd.MAX,"base.random.minstd.MAX"
base.random.minstd.seed,"base.random.minstd.seed"
base.random.minstd.seedLength,"base.random.minstd.seedLength"
base.random.minstd.state,"base.random.minstd.state"
base.random.minstd.stateLength,"base.random.minstd.stateLength"
base.random.minstd.byteLength,"base.random.minstd.byteLength"
base.random.minstd.toJSON,"base.random.minstd.toJSON()"
base.random.minstdShuffle,"base.random.minstdShuffle()"
base.random.minstdShuffle.normalized,"base.random.minstdShuffle.normalized()"
base.random.minstdShuffle.factory,"base.random.minstdShuffle.factory( [options:Object] )"
base.random.minstdShuffle.NAME,"base.random.minstdShuffle.NAME"
base.random.minstdShuffle.MIN,"base.random.minstdShuffle.MIN"
base.random.minstdShuffle.MAX,"base.random.minstdShuffle.MAX"
base.random.minstdShuffle.seed,"base.random.minstdShuffle.seed"
base.random.minstdShuffle.seedLength,"base.random.minstdShuffle.seedLength"
base.random.minstdShuffle.state,"base.random.minstdShuffle.state"
base.random.minstdShuffle.stateLength,"base.random.minstdShuffle.stateLength"
base.random.minstdShuffle.byteLength,"base.random.minstdShuffle.byteLength"
base.random.minstdShuffle.toJSON,"base.random.minstdShuffle.toJSON()"
base.random.mt19937,"base.random.mt19937()"
base.random.mt19937.normalized,"base.random.mt19937.normalized()"
base.random.mt19937.factory,"base.random.mt19937.factory( [options:Object] )"
base.random.mt19937.NAME,"base.random.mt19937.NAME"
base.random.mt19937.MIN,"base.random.mt19937.MIN"
base.random.mt19937.MAX,"base.random.mt19937.MAX"
base.random.mt19937.seed,"base.random.mt19937.seed"
base.random.mt19937.seedLength,"base.random.mt19937.seedLength"
base.random.mt19937.state,"base.random.mt19937.state"
base.random.mt19937.stateLength,"base.random.mt19937.stateLength"
base.random.mt19937.byteLength,"base.random.mt19937.byteLength"
base.random.mt19937.toJSON,"base.random.mt19937.toJSON()"
base.random.negativeBinomial,"base.random.negativeBinomial( r:number, p:number )"
base.random.negativeBinomial.factory,"base.random.negativeBinomial.factory( [r:number, p:number, ][options:Object] )"
base.random.negativeBinomial.NAME,"base.random.negativeBinomial.NAME"
base.random.negativeBinomial.PRNG,"base.random.negativeBinomial.PRNG"
base.random.negativeBinomial.seed,"base.random.negativeBinomial.seed"
base.random.negativeBinomial.seedLength,"base.random.negativeBinomial.seedLength"
base.random.negativeBinomial.state,"base.random.negativeBinomial.state"
base.random.negativeBinomial.stateLength,"base.random.negativeBinomial.stateLength"
base.random.negativeBinomial.byteLength,"base.random.negativeBinomial.byteLength"
base.random.negativeBinomial.toJSON,"base.random.negativeBinomial.toJSON()"
base.random.normal,"base.random.normal( μ:number, σ:number )"
base.random.normal.factory,"base.random.normal.factory( [μ:number, σ:number, ][options:Object] )"
base.random.normal.NAME,"base.random.normal.NAME"
base.random.normal.PRNG,"base.random.normal.PRNG"
base.random.normal.seed,"base.random.normal.seed"
base.random.normal.seedLength,"base.random.normal.seedLength"
base.random.normal.state,"base.random.normal.state"
base.random.normal.stateLength,"base.random.normal.stateLength"
base.random.normal.byteLength,"base.random.normal.byteLength"
base.random.normal.toJSON,"base.random.normal.toJSON()"
base.random.pareto1,"base.random.pareto1( α:number, β:number )"
base.random.pareto1.factory,"base.random.pareto1.factory( [α:number, β:number, ][options:Object] )"
base.random.pareto1.NAME,"base.random.pareto1.NAME"
base.random.pareto1.PRNG,"base.random.pareto1.PRNG"
base.random.pareto1.seed,"base.random.pareto1.seed"
base.random.pareto1.seedLength,"base.random.pareto1.seedLength"
base.random.pareto1.state,"base.random.pareto1.state"
base.random.pareto1.stateLength,"base.random.pareto1.stateLength"
base.random.pareto1.byteLength,"base.random.pareto1.byteLength"
base.random.pareto1.toJSON,"base.random.pareto1.toJSON()"
base.random.poisson,"base.random.poisson( λ:number )"
base.random.poisson.factory,"base.random.poisson.factory( [λ:number, ][options:Object] )"
base.random.poisson.NAME,"base.random.poisson.NAME"
base.random.poisson.PRNG,"base.random.poisson.PRNG"
base.random.poisson.seed,"base.random.poisson.seed"
base.random.poisson.seedLength,"base.random.poisson.seedLength"
base.random.poisson.state,"base.random.poisson.state"
base.random.poisson.stateLength,"base.random.poisson.stateLength"
base.random.poisson.byteLength,"base.random.poisson.byteLength"
base.random.poisson.toJSON,"base.random.poisson.toJSON()"
base.random.randi,"base.random.randi()"
base.random.randi.factory,"base.random.randi.factory( [options:Object] )"
base.random.randi.NAME,"base.random.randi.NAME"
base.random.randi.PRNG,"base.random.randi.PRNG"
base.random.randi.MIN,"base.random.randi.MIN"
base.random.randi.MAX,"base.random.randi.MAX"
base.random.randi.seed,"base.random.randi.seed"
base.random.randi.seedLength,"base.random.randi.seedLength"
base.random.randi.state,"base.random.randi.state"
base.random.randi.stateLength,"base.random.randi.stateLength"
base.random.randi.byteLength,"base.random.randi.byteLength"
base.random.randi.toJSON,"base.random.randi.toJSON()"
base.random.randn,"base.random.randn()"
base.random.randn.factory,"base.random.randn.factory( [options:Object] )"
base.random.randn.NAME,"base.random.randn.NAME"
base.random.randn.PRNG,"base.random.randn.PRNG"
base.random.randn.seed,"base.random.randn.seed"
base.random.randn.seedLength,"base.random.randn.seedLength"
base.random.randn.state,"base.random.randn.state"
base.random.randn.stateLength,"base.random.randn.stateLength"
base.random.randn.byteLength,"base.random.randn.byteLength"
base.random.randn.toJSON,"base.random.randn.toJSON()"
base.random.randu,"base.random.randu()"
base.random.randu.factory,"base.random.randu.factory( [options:Object] )"
base.random.randu.NAME,"base.random.randu.NAME"
base.random.randu.PRNG,"base.random.randu.PRNG"
base.random.randu.MIN,"base.random.randu.MIN"
base.random.randu.MAX,"base.random.randu.MAX"
base.random.randu.seed,"base.random.randu.seed"
base.random.randu.seedLength,"base.random.randu.seedLength"
base.random.randu.state,"base.random.randu.state"
base.random.randu.stateLength,"base.random.randu.stateLength"
base.random.randu.byteLength,"base.random.randu.byteLength"
base.random.randu.toJSON,"base.random.randu.toJSON()"
base.random.rayleigh,"base.random.rayleigh( σ:number )"
base.random.rayleigh.factory,"base.random.rayleigh.factory( [σ:number, ][options:Object] )"
base.random.rayleigh.NAME,"base.random.rayleigh.NAME"
base.random.rayleigh.PRNG,"base.random.rayleigh.PRNG"
base.random.rayleigh.seed,"base.random.rayleigh.seed"
base.random.rayleigh.seedLength,"base.random.rayleigh.seedLength"
base.random.rayleigh.state,"base.random.rayleigh.state"
base.random.rayleigh.stateLength,"base.random.rayleigh.stateLength"
base.random.rayleigh.byteLength,"base.random.rayleigh.byteLength"
base.random.rayleigh.toJSON,"base.random.rayleigh.toJSON()"
base.random.t,"base.random.t( v:number )"
base.random.t.factory,"base.random.t.factory( [v:number, ][options:Object] )"
base.random.t.NAME,"base.random.t.NAME"
base.random.t.PRNG,"base.random.t.PRNG"
base.random.t.seed,"base.random.t.seed"
base.random.t.seedLength,"base.random.t.seedLength"
base.random.t.state,"base.random.t.state"
base.random.t.stateLength,"base.random.t.stateLength"
base.random.t.byteLength,"base.random.t.byteLength"
base.random.t.toJSON,"base.random.t.toJSON()"
base.random.triangular,"base.random.triangular( a:number, b:number, c:number )"
base.random.triangular.factory,"base.random.triangular.factory( [a:number, b:number, c:number, ][options:Object] )"
base.random.triangular.NAME,"base.random.triangular.NAME"
base.random.triangular.PRNG,"base.random.triangular.PRNG"
base.random.triangular.seed,"base.random.triangular.seed"
base.random.triangular.seedLength,"base.random.triangular.seedLength"
base.random.triangular.state,"base.random.triangular.state"
base.random.triangular.stateLength,"base.random.triangular.stateLength"
base.random.triangular.byteLength,"base.random.triangular.byteLength"
base.random.triangular.toJSON,"base.random.triangular.toJSON()"
base.random.uniform,"base.random.uniform( a:number, b:number )"
base.random.uniform.factory,"base.random.uniform.factory( [a:number, b:number, ][options:Object] )"
base.random.uniform.NAME,"base.random.uniform.NAME"
base.random.uniform.PRNG,"base.random.uniform.PRNG"
base.random.uniform.seed,"base.random.uniform.seed"
base.random.uniform.seedLength,"base.random.uniform.seedLength"
base.random.uniform.state,"base.random.uniform.state"
base.random.uniform.stateLength,"base.random.uniform.stateLength"
base.random.uniform.byteLength,"base.random.uniform.byteLength"
base.random.uniform.toJSON,"base.random.uniform.toJSON()"
base.random.weibull,"base.random.weibull( k:number, λ:number )"
base.random.weibull.factory,"base.random.weibull.factory( [k:number, λ:number, ][options:Object] )"
base.random.weibull.NAME,"base.random.weibull.NAME"
base.random.weibull.PRNG,"base.random.weibull.PRNG"
base.random.weibull.seed,"base.random.weibull.seed"
base.random.weibull.seedLength,"base.random.weibull.seedLength"
base.random.weibull.state,"base.random.weibull.state"
base.random.weibull.stateLength,"base.random.weibull.stateLength"
base.random.weibull.byteLength,"base.random.weibull.byteLength"
base.random.weibull.toJSON,"base.random.weibull.toJSON()"
base.reldiff,"base.reldiff( x:number, y:number[, scale:string|Function] )"
base.rempio2,"base.rempio2( x:number, y:Array|TypedArray|Object )"
base.risingFactorial,"base.risingFactorial( x:number, n:integer )"
base.rotl32,"base.rotl32( x:integer, shift:integer )"
base.rotr32,"base.rotr32( x:integer, shift:integer )"
base.round,"base.round( x:number )"
base.round2,"base.round2( x:number )"
base.round10,"base.round10( x:number )"
base.roundb,"base.roundb( x:number, n:integer, b:integer )"
base.roundn,"base.roundn( x:number, n:integer )"
base.roundsd,"base.roundsd( x:number, n:integer[, b:integer] )"
base.rsqrt,"base.rsqrt( x:number )"
base.sasum,"base.sasum( N:integer, x:Float32Array, stride:integer )"
base.sasum.ndarray,"base.sasum.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"
base.saxpy,"base.saxpy( N:integer, alpha:number, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"
base.saxpy.ndarray,"base.saxpy.ndarray( N:integer, alpha:number, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"
base.scopy,"base.scopy( N:integer, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"
base.scopy.ndarray,"base.scopy.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"
base.sdot,"base.sdot( N:integer, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"
base.sdot.ndarray,"base.sdot.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"
base.setHighWord,"base.setHighWord( x:number, high:integer )"
base.setLowWord,"base.setLowWord( x:number, low:integer )"
base.sici,"base.sici( [out:Array|TypedArray|Object,] x:number )"
base.signbit,"base.signbit( x:number )"
base.signbitf,"base.signbitf( x:float )"
base.significandf,"base.significandf( x:float )"
base.signum,"base.signum( x:number )"
base.sin,"base.sin( x:number )"
base.sinc,"base.sinc( x:number )"
base.sincos,"base.sincos( [out:Array|TypedArray|Object,] x:number )"
base.sincospi,"base.sincospi( [out:Array|TypedArray|Object,] x:number )"
base.sinh,"base.sinh( x:number )"
base.sinpi,"base.sinpi( x:number )"
base.spence,"base.spence( x:number )"
base.sqrt,"base.sqrt( x:number )"
base.sqrt1pm1,"base.sqrt1pm1( x:number )"
base.sumSeries,"base.sumSeries( generator:Function[, options:Object] )"
base.tan,"base.tan( x:number )"
base.tanh,"base.tanh( x:number )"
base.toBinaryString,"base.toBinaryString( x:number )"
base.toBinaryStringf,"base.toBinaryStringf( x:float )"
base.toBinaryStringUint8,"base.toBinaryStringUint8( x:integer )"
base.toBinaryStringUint16,"base.toBinaryStringUint16( x:integer )"
base.toBinaryStringUint32,"base.toBinaryStringUint32( x:integer )"
base.toWordf,"base.toWordf( x:float )"
base.toWords,"base.toWords( [out:Array|TypedArray|Object,] x:number )"
base.trigamma,"base.trigamma( x:number )"
base.trunc,"base.trunc( x:number )"
base.trunc2,"base.trunc2( x:number )"
base.trunc10,"base.trunc10( x:number )"
base.truncb,"base.truncb( x:number, n:integer, b:integer )"
base.truncn,"base.truncn( x:number, n:integer )"
base.truncsd,"base.truncsd( x:number, n:integer[, b:integer] )"
base.uimul,"base.uimul( a:integer, b:integer )"
base.uimuldw,"base.uimuldw( [out:ArrayLikeObject,] a:integer, b:integer )"
base.uint32ToInt32,"base.uint32ToInt32( x:integer )"
base.vercos,"base.vercos( x:number )"
base.versin,"base.versin( x:number )"
base.wrap,"base.wrap( v:number, min:number, max:number )"
base.xlog1py,"base.xlog1py( x:number, y:number )"
base.xlogy,"base.xlogy( x:number, y:number )"
base.zeta,"base.zeta( s:number )"
BERNDT_CPS_WAGES_1985,"BERNDT_CPS_WAGES_1985()"
bifurcate,"bifurcate( collection:Array|TypedArray|Object, [options:Object,] filter:Array|TypedArray|Object )"
bifurcateBy,"bifurcateBy( collection:Array|TypedArray|Object, [options:Object,] predicate:Function )"
bifurcateByAsync,"bifurcateByAsync( collection:Array|TypedArray|Object, [options:Object,] predicate:Function, done:Function )"
bifurcateByAsync.factory,"bifurcateByAsync.factory( [options:Object,] predicate:Function )"
bifurcateIn,"bifurcateIn( obj:Object|Array|TypedArray, [options:Object,] predicate:Function )"
bifurcateOwn,"bifurcateOwn( obj:Object|Array|TypedArray, [options:Object,] predicate:Function )"
binomialTest,"binomialTest( x:Array<number>[, n:Array<number>][, options:Object] )"
Buffer,"Buffer"
Buffer,"Buffer( size:integer )"
Buffer,"Buffer( buffer:Buffer )"
Buffer,"Buffer( array:Array )"
Buffer,"Buffer( str:string[, encoding:string] )"
buffer2json,"buffer2json( buffer:Buffer )"
capitalize,"capitalize( str:string )"
capitalizeKeys,"capitalizeKeys( obj:Object )"
CATALAN,"CATALAN"
CBRT_EPS,"CBRT_EPS"
chdir,"chdir( path:string )"
chi2gof,"chi2gof( x:Array<number>, y:Array<number>[, ...args:number][, options:Object] )"
circarray2iterator,"circarray2iterator( src:ArrayLikeObject[, options:Object][, mapFcn:Function[, thisArg:any]] )"
circularArrayStream,"circularArrayStream( src:ArrayLikeObject[, options:Object] )"
circularArrayStream.factory,"circularArrayStream.factory( [options:Object] )"
circularArrayStream.objectMode,"circularArrayStream.objectMode( src:ArrayLikeObject[, options:Object] )"
CircularBuffer,"CircularBuffer( buffer:integer|ArrayLike )"
CMUDICT,"CMUDICT( [options:Object] )"
complex,"complex( real:number, imag:number[, dtype:string] )"
Complex64,"Complex64( real:number, imag:number )"
COMPLEX64_NUM_BYTES,"COMPLEX64_NUM_BYTES"
Complex128,"Complex128( real:number, imag:number )"
COMPLEX128_NUM_BYTES,"COMPLEX128_NUM_BYTES"
compose,"compose( ...f:Function )"
composeAsync,"composeAsync( ...f:Function )"
configdir,"configdir( [p:string] )"
conj,"conj( z:Complex )"
constantFunction,"constantFunction( val:any )"
constantStream,"constantStream( value:string|Buffer|Uint8Array|any[, options:Object] )"
constantStream.factory,"constantStream.factory( [value:string|Buffer|Uint8Array|any, ][options:Object] )"
constantStream.objectMode,"constantStream.objectMode( value:any[, options:Object] )"
constructorName,"constructorName( val:any )"
contains,"contains( val:ArrayLike, searchValue:any[, position:integer] )"
convertArray,"convertArray( arr:Array|TypedArray, dtype:string )"
convertArraySame,"convertArraySame( x:Array|TypedArray, y:Array|TypedArray )"
convertPath,"convertPath( from:string, to:string )"
copy,"copy( value:any[, level:integer] )"
copyBuffer,"copyBuffer( buffer:Buffer )"
countBy,"countBy( collection:Array|TypedArray|Object, [options:Object,] indicator:Function )"
countByAsync,"countByAsync( collection:Array|TypedArray|Object, [options:Object,] indicator:Function, done:Function )"
countByAsync.factory,"countByAsync.factory( [options:Object,] indicator:Function )"
curry,"curry( fcn:Function[, arity:integer][, thisArg:any] )"
curryRight,"curryRight( fcn:Function[, arity:integer][, thisArg:any] )"
cwd,"cwd()"
DALE_CHALL_NEW,"DALE_CHALL_NEW()"
datasets,"datasets( name:string[, options:Object] )"
dayOfQuarter,"dayOfQuarter( [month:string|integer|Date[, day:integer, year:integer]] )"
dayOfYear,"dayOfYear( [month:string|integer|Date[, day:integer, year:integer]] )"
daysInMonth,"daysInMonth( [month:string|integer|Date[, year:integer]] )"
daysInYear,"daysInYear( [value:integer|Date] )"
debugSinkStream,"debugSinkStream( [options:Object,] [clbk:Function] )"
debugSinkStream.factory,"debugSinkStream.factory( [options:Object] )"
debugSinkStream.objectMode,"debugSinkStream.objectMode( [options:Object,] [clbk:Function] )"
debugStream,"debugStream( [options:Object,] [clbk:Function] )"
debugStream.factory,"debugStream.factory( [options:Object] )"
debugStream.objectMode,"debugStream.objectMode( [options:Object,] [clbk:Function] )"
deepEqual,"deepEqual( a:any, b:any )"
deepGet,"deepGet( obj:ObjectLike, path:string|Array[, options:Object] )"
deepGet.factory,"deepGet.factory( path:string|Array[, options:Object] )"
deepHasOwnProp,"deepHasOwnProp( value:any, path:string|Array[, options:Object] )"
deepHasOwnProp.factory,"deepHasOwnProp.factory( path:string|Array[, options:Object] )"
deepHasProp,"deepHasProp( value:any, path:string|Array[, options:Object] )"
deepHasProp.factory,"deepHasProp.factory( path:string|Array[, options:Object] )"
deepPluck,"deepPluck( arr:Array, path:string|Array[, options:Object] )"
deepSet,"deepSet( obj:ObjectLike, path:string|Array, value:any[, options:Object] )"
deepSet.factory,"deepSet.factory( path:string|Array[, options:Object] )"
defineMemoizedProperty,"defineMemoizedProperty( obj:Object, prop:string|symbol, descriptor:Object )"
defineProperties,"defineProperties( obj:Object, properties:Object )"
defineProperty,"defineProperty( obj:Object, prop:string|symbol, descriptor:Object )"
dirname,"dirname( path:string )"
DoublyLinkedList,"DoublyLinkedList()"
doUntil,"doUntil( fcn:Function, predicate:Function[, thisArg:any] )"
doUntilAsync,"doUntilAsync( fcn:Function, predicate:Function, done:Function[, thisArg:any] )"
doUntilEach,"doUntilEach( collection:Array|TypedArray|Object, fcn:Function, predicate:Function[, thisArg:any] )"
doUntilEachRight,"doUntilEachRight( collection:Array|TypedArray|Object, fcn:Function, predicate:Function[, thisArg:any] )"
doWhile,"doWhile( fcn:Function, predicate:Function[, thisArg:any] )"
doWhileAsync,"doWhileAsync( fcn:Function, predicate:Function, done:Function[, thisArg:any] )"
doWhileEach,"doWhileEach( collection:Array|TypedArray|Object, fcn:Function, predicate:Function[, thisArg:any] )"
doWhileEachRight,"doWhileEachRight( collection:Array|TypedArray|Object, fcn:Function, predicate:Function[, thisArg:any] )"
E,"E"
EMOJI,"EMOJI()"
EMOJI_CODE_PICTO,"EMOJI_CODE_PICTO()"
EMOJI_PICTO_CODE,"EMOJI_PICTO_CODE()"
emptyStream,"emptyStream( [options:Object] )"
emptyStream.factory,"emptyStream.factory( [options:Object] )"
emptyStream.objectMode,"emptyStream.objectMode()"
endsWith,"endsWith( str:string, search:string[, len:integer] )"
enumerableProperties,"enumerableProperties( value:any )"
enumerablePropertiesIn,"enumerablePropertiesIn( value:any )"
enumerablePropertySymbols,"enumerablePropertySymbols( value:any )"
enumerablePropertySymbolsIn,"enumerablePropertySymbolsIn( value:any )"
ENV,"ENV"
EPS,"EPS"
error2json,"error2json( error:Error )"
EULERGAMMA,"EULERGAMMA"
every,"every( collection:Array|TypedArray|Object )"
everyBy,"everyBy( collection:Array|TypedArray|Object, predicate:Function[, thisArg:any ] )"
everyByAsync,"everyByAsync( collection:Array|TypedArray|Object, [options:Object,] predicate:Function, done:Function )"
everyByAsync.factory,"everyByAsync.factory( [options:Object,] predicate:Function )"
everyByRight,"everyByRight( collection:Array|TypedArray|Object, predicate:Function[, thisArg:any ] )"
everyByRightAsync,"everyByRightAsync( collection:Array|TypedArray|Object, [options:Object,] predicate:Function, done:Function )"
everyByRightAsync.factory,"everyByRightAsync.factory( [options:Object,] predicate:Function )"
evil,"evil( str:string )"
exists,"exists( path:string|Buffer, clbk:Function )"
exists.sync,"exists.sync( path:string|Buffer )"
expandContractions,"expandContractions( str:string )"
extname,"extname( filename:string )"
fastmath.abs,"fastmath.abs( x:number )"
fastmath.acosh,"fastmath.acosh( x:number )"
fastmath.ampbm,"fastmath.ampbm( x:number, y:number )"
fastmath.ampbm.factory,"fastmath.ampbm.factory( alpha:number, beta:number, [nonnegative:boolean[, ints:boolean]] )"
fastmath.asinh,"fastmath.asinh( x:number )"
fastmath.atanh,"fastmath.atanh( x:number )"
fastmath.hypot,"fastmath.hypot( x:number, y:number )"
fastmath.log2Uint32,"fastmath.log2Uint32( x:uinteger )"
fastmath.max,"fastmath.max( x:number, y:number )"
fastmath.min,"fastmath.min( x:number, y:number )"
fastmath.powint,"fastmath.powint( x:number, y:integer )"
fastmath.sqrtUint32,"fastmath.sqrtUint32( x:uinteger )"
FEMALE_FIRST_NAMES_EN,"FEMALE_FIRST_NAMES_EN()"
FIFO,"FIFO()"
find,"find( arr:Array|TypedArray|string, [options:Object,] clbk:Function )"
flattenArray,"flattenArray( arr:Array[, options:Object] )"
flattenArray.factory,"flattenArray.factory( dims:Array<integer>[, options:Object] )"
flattenObject,"flattenObject( obj:ObjectLike[, options:Object] )"
flattenObject.factory,"flattenObject.factory( [options:Object] )"
flignerTest,"flignerTest( ...x:Array[, options:Object] )"
FLOAT16_CBRT_EPS,"FLOAT16_CBRT_EPS"
FLOAT16_EPS,"FLOAT16_EPS"
FLOAT16_EXPONENT_BIAS,"FLOAT16_EXPONENT_BIAS"
FLOAT16_MAX,"FLOAT16_MAX"
FLOAT16_MAX_SAFE_INTEGER,"FLOAT16_MAX_SAFE_INTEGER"
FLOAT16_MIN_SAFE_INTEGER,"FLOAT16_MIN_SAFE_INTEGER"
FLOAT16_NINF,"FLOAT16_NINF"
FLOAT16_NUM_BYTES,"FLOAT16_NUM_BYTES"
FLOAT16_PINF,"FLOAT16_PINF"
FLOAT16_PRECISION,"FLOAT16_PRECISION"
FLOAT16_SMALLEST_NORMAL,"FLOAT16_SMALLEST_NORMAL"
FLOAT16_SMALLEST_SUBNORMAL,"FLOAT16_SMALLEST_SUBNORMAL"
FLOAT16_SQRT_EPS,"FLOAT16_SQRT_EPS"
FLOAT32_CBRT_EPS,"FLOAT32_CBRT_EPS"
FLOAT32_EPS,"FLOAT32_EPS"
FLOAT32_EXPONENT_BIAS,"FLOAT32_EXPONENT_BIAS"
FLOAT32_MAX,"FLOAT32_MAX"
FLOAT32_MAX_SAFE_INTEGER,"FLOAT32_MAX_SAFE_INTEGER"
FLOAT32_MIN_SAFE_INTEGER,"FLOAT32_MIN_SAFE_INTEGER"
FLOAT32_NINF,"FLOAT32_NINF"
FLOAT32_NUM_BYTES,"FLOAT32_NUM_BYTES"
FLOAT32_PINF,"FLOAT32_PINF"
FLOAT32_PRECISION,"FLOAT32_PRECISION"
FLOAT32_SMALLEST_NORMAL,"FLOAT32_SMALLEST_NORMAL"
FLOAT32_SMALLEST_SUBNORMAL,"FLOAT32_SMALLEST_SUBNORMAL"
FLOAT32_SQRT_EPS,"FLOAT32_SQRT_EPS"
Float32Array,"Float32Array()"
Float32Array,"Float32Array( length:integer )"
Float32Array,"Float32Array( typedarray:TypedArray )"
Float32Array,"Float32Array( obj:Object )"
Float32Array,"Float32Array( buffer:ArrayBuffer[, byteOffset:integer[, length:integer]] )"
Float32Array.from,"Float32Array.from( src:ArrayLike|Iterable[, map:Function[, thisArg:Any]] )"
Float32Array.of,"Float32Array.of( element0:number[, element1:number[, ...elementN:number]] )"
Float32Array.BYTES_PER_ELEMENT,"Float32Array.BYTES_PER_ELEMENT"
Float32Array.name,"Float32Array.name"
Float32Array.prototype.buffer,"Float32Array.prototype.buffer"
Float32Array.prototype.byteLength,"Float32Array.prototype.byteLength"
Float32Array.prototype.byteOffset,"Float32Array.prototype.byteOffset"
Float32Array.prototype.BYTES_PER_ELEMENT,"Float32Array.prototype.BYTES_PER_ELEMENT"
Float32Array.prototype.length,"Float32Array.prototype.length"
Float32Array.prototype.copyWithin,"Float32Array.prototype.copyWithin( target:integer, start:integer[, end:integer] )"
Float32Array.prototype.entries,"Float32Array.prototype.entries()"
Float32Array.prototype.every,"Float32Array.prototype.every( predicate:Function[, thisArg:Any] )"
Float32Array.prototype.fill,"Float32Array.prototype.fill( value:number[, start:integer[, end:integer]] )"
Float32Array.prototype.filter,"Float32Array.prototype.filter( predicate:Function[, thisArg:Any] )"
Float32Array.prototype.find,"Float32Array.prototype.find( predicate:Function[, thisArg:Any] )"
Float32Array.prototype.findIndex,"Float32Array.prototype.findIndex( predicate:Function[, thisArg:Any] )"
Float32Array.prototype.forEach,"Float32Array.prototype.forEach( fcn:Function[, thisArg:Any] )"
Float32Array.prototype.includes,"Float32Array.prototype.includes( searchElement:number[, fromIndex:integer] )"
Float32Array.prototype.indexOf,"Float32Array.prototype.indexOf( searchElement:number[, fromIndex:integer] )"
Float32Array.prototype.join,"Float32Array.prototype.join( [separator:string] )"
Float32Array.prototype.keys,"Float32Array.prototype.keys()"
Float32Array.prototype.lastIndexOf,"Float32Array.prototype.lastIndexOf( searchElement:number[, fromIndex:integer] )"
Float32Array.prototype.map,"Float32Array.prototype.map( fcn:Function[, thisArg:Any] )"
Float32Array.prototype.reduce,"Float32Array.prototype.reduce( fcn:Function[, initialValue:Any] )"
Float32Array.prototype.reduceRight,"Float32Array.prototype.reduceRight( fcn:Function[, initialValue:Any] )"
Float32Array.prototype.reverse,"Float32Array.prototype.reverse()"
Float32Array.prototype.set,"Float32Array.prototype.set( arr:ArrayLike[, offset:integer] )"
Float32Array.prototype.slice,"Float32Array.prototype.slice( [begin:integer[, end:integer]] )"
Float32Array.prototype.some,"Float32Array.prototype.some( predicate:Function[, thisArg:Any] )"
Float32Array.prototype.sort,"Float32Array.prototype.sort( [compareFunction:Function] )"
Float32Array.prototype.subarray,"Float32Array.prototype.subarray( [begin:integer[, end:integer]] )"
Float32Array.prototype.toLocaleString,"Float32Array.prototype.toLocaleString( [locales:Array<string>[, options:Object]] )"
Float32Array.prototype.toString,"Float32Array.prototype.toString()"
Float32Array.prototype.values,"Float32Array.prototype.values()"
FLOAT64_EXPONENT_BIAS,"FLOAT64_EXPONENT_BIAS"
FLOAT64_HIGH_WORD_EXPONENT_MASK,"FLOAT64_HIGH_WORD_EXPONENT_MASK"
FLOAT64_HIGH_WORD_SIGNIFICAND_MASK,"FLOAT64_HIGH_WORD_SIGNIFICAND_MASK"
FLOAT64_MAX,"FLOAT64_MAX"
FLOAT64_MAX_BASE2_EXPONENT,"FLOAT64_MAX_BASE2_EXPONENT"
FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL,"FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL"
FLOAT64_MAX_BASE10_EXPONENT,"FLOAT64_MAX_BASE10_EXPONENT"
FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL,"FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL"
FLOAT64_MAX_LN,"FLOAT64_MAX_LN"
FLOAT64_MAX_SAFE_FIBONACCI,"FLOAT64_MAX_SAFE_FIBONACCI"
FLOAT64_MAX_SAFE_INTEGER,"FLOAT64_MAX_SAFE_INTEGER"
FLOAT64_MAX_SAFE_LUCAS,"FLOAT64_MAX_SAFE_LUCAS"
FLOAT64_MAX_SAFE_NTH_FIBONACCI,"FLOAT64_MAX_SAFE_NTH_FIBONACCI"
FLOAT64_MAX_SAFE_NTH_LUCAS,"FLOAT64_MAX_SAFE_NTH_LUCAS"
FLOAT64_MIN_BASE2_EXPONENT,"FLOAT64_MIN_BASE2_EXPONENT"
FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL,"FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL"
FLOAT64_MIN_BASE10_EXPONENT,"FLOAT64_MIN_BASE10_EXPONENT"
FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL,"FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL"
FLOAT64_MIN_LN,"FLOAT64_MIN_LN"
FLOAT64_MIN_SAFE_INTEGER,"FLOAT64_MIN_SAFE_INTEGER"
FLOAT64_NUM_BYTES,"FLOAT64_NUM_BYTES"
FLOAT64_PRECISION,"FLOAT64_PRECISION"
FLOAT64_SMALLEST_NORMAL,"FLOAT64_SMALLEST_NORMAL"
FLOAT64_SMALLEST_SUBNORMAL,"FLOAT64_SMALLEST_SUBNORMAL"
Float64Array,"Float64Array()"
Float64Array,"Float64Array( length:integer )"
Float64Array,"Float64Array( typedarray:TypedArray )"
Float64Array,"Float64Array( obj:Object )"
Float64Array,"Float64Array( buffer:ArrayBuffer[, byteOffset:integer[, length:integer]] )"
Float64Array.from,"Float64Array.from( src:ArrayLike|Iterable[, map:Function[, thisArg:Any]] )"
Float64Array.of,"Float64Array.of( element0:number[, element1:number[, ...elementN:number]] )"
Float64Array.BYTES_PER_ELEMENT,"Float64Array.BYTES_PER_ELEMENT"
Float64Array.name,"Float64Array.name"
Float64Array.prototype.buffer,"Float64Array.prototype.buffer"
Float64Array.prototype.byteLength,"Float64Array.prototype.byteLength"
Float64Array.prototype.byteOffset,"Float64Array.prototype.byteOffset"
Float64Array.prototype.BYTES_PER_ELEMENT,"Float64Array.prototype.BYTES_PER_ELEMENT"
Float64Array.prototype.length,"Float64Array.prototype.length"
Float64Array.prototype.copyWithin,"Float64Array.prototype.copyWithin( target:integer, start:integer[, end:integer] )"
Float64Array.prototype.entries,"Float64Array.prototype.entries()"
Float64Array.prototype.every,"Float64Array.prototype.every( predicate:Function[, thisArg:Any] )"
Float64Array.prototype.fill,"Float64Array.prototype.fill( value:number[, start:integer[, end:integer]] )"
Float64Array.prototype.filter,"Float64Array.prototype.filter( predicate:Function[, thisArg:Any] )"
Float64Array.prototype.find,"Float64Array.prototype.find( predicate:Function[, thisArg:Any] )"
Float64Array.prototype.findIndex,"Float64Array.prototype.findIndex( predicate:Function[, thisArg:Any] )"
Float64Array.prototype.forEach,"Float64Array.prototype.forEach( fcn:Function[, thisArg:Any] )"
Float64Array.prototype.includes,"Float64Array.prototype.includes( searchElement:number[, fromIndex:integer] )"
Float64Array.prototype.indexOf,"Float64Array.prototype.indexOf( searchElement:number[, fromIndex:integer] )"
Float64Array.prototype.join,"Float64Array.prototype.join( [separator:string] )"
Float64Array.prototype.keys,"Float64Array.prototype.keys()"
Float64Array.prototype.lastIndexOf,"Float64Array.prototype.lastIndexOf( searchElement:number[, fromIndex:integer] )"
Float64Array.prototype.map,"Float64Array.prototype.map( fcn:Function[, thisArg:Any] )"
Float64Array.prototype.reduce,"Float64Array.prototype.reduce( fcn:Function[, initialValue:Any] )"
Float64Array.prototype.reduceRight,"Float64Array.prototype.reduceRight( fcn:Function[, initialValue:Any] )"
Float64Array.prototype.reverse,"Float64Array.prototype.reverse()"
Float64Array.prototype.set,"Float64Array.prototype.set( arr:ArrayLike[, offset:integer] )"
Float64Array.prototype.slice,"Float64Array.prototype.slice( [begin:integer[, end:integer]] )"
Float64Array.prototype.some,"Float64Array.prototype.some( predicate:Function[, thisArg:Any] )"
Float64Array.prototype.sort,"Float64Array.prototype.sort( [compareFunction:Function] )"
Float64Array.prototype.subarray,"Float64Array.prototype.subarray( [begin:integer[, end:integer]] )"
Float64Array.prototype.toLocaleString,"Float64Array.prototype.toLocaleString( [locales:Array<string>[, options:Object]] )"
Float64Array.prototype.toString,"Float64Array.prototype.toString()"
Float64Array.prototype.values,"Float64Array.prototype.values()"
forEach,"forEach( collection:Array|TypedArray|Object, fcn:Function[, thisArg:any] )"
forEachAsync,"forEachAsync( collection:Array|TypedArray|Object, [options:Object,] fcn:Function, done:Function )"
forEachAsync.factory,"forEachAsync.factory( [options:Object,] fcn:Function )"
forEachRight,"forEachRight( collection:Array|TypedArray|Object, fcn:Function[, thisArg:any] )"
forEachRightAsync,"forEachRightAsync( collection:Array|TypedArray|Object, [options:Object,] fcn:Function, done:Function )"
forEachRightAsync.factory,"forEachRightAsync.factory( [options:Object,] fcn:Function )"
forIn,"forIn( obj:Object, fcn:Function[, thisArg:any] )"
forOwn,"forOwn( obj:Object, fcn:Function[, thisArg:any] )"
FOURTH_PI,"FOURTH_PI"
FOURTH_ROOT_EPS,"FOURTH_ROOT_EPS"
FRB_SF_WAGE_RIGIDITY,"FRB_SF_WAGE_RIGIDITY()"
fromCodePoint,"fromCodePoint( ...pt:integer )"
functionName,"functionName( fcn:Function )"
functionSequence,"functionSequence( ...fcn:Function )"
functionSequenceAsync,"functionSequenceAsync( ...fcn:Function )"
GAMMA_LANCZOS_G,"GAMMA_LANCZOS_G"
getegid,"getegid()"
geteuid,"geteuid()"
getgid,"getgid()"
getGlobal,"getGlobal( [codegen:boolean] )"
getPrototypeOf,"getPrototypeOf( value:any )"
getuid,"getuid()"
GLAISHER,"GLAISHER"
group,"group( collection:Array|TypedArray|Object, [options:Object,] groups:Array|TypedArray|Object )"
groupBy,"groupBy( collection:Array|TypedArray|Object, [options:Object,] indicator:Function )"
groupByAsync,"groupByAsync( collection:Array|TypedArray|Object, [options:Object,] indicator:Function, done:Function )"
groupByAsync.factory,"groupByAsync.factory( [options:Object,] indicator:Function )"
groupIn,"groupIn( obj:Object|Array|TypedArray, [options:Object,] indicator:Function )"
groupOwn,"groupOwn( obj:Object|Array|TypedArray, [options:Object,] indicator:Function )"
HALF_LN2,"HALF_LN2"
HALF_PI,"HALF_PI"
HARRISON_BOSTON_HOUSE_PRICES,"HARRISON_BOSTON_HOUSE_PRICES()"
HARRISON_BOSTON_HOUSE_PRICES_CORRECTED,"HARRISON_BOSTON_HOUSE_PRICES_CORRECTED()"
hasArrayBufferSupport,"hasArrayBufferSupport()"
hasAsyncAwaitSupport,"hasAsyncAwaitSupport()"
hasAsyncIteratorSymbolSupport,"hasAsyncIteratorSymbolSupport()"
hasClassSupport,"hasClassSupport()"
hasDefinePropertiesSupport,"hasDefinePropertiesSupport()"
hasDefinePropertySupport,"hasDefinePropertySupport()"
hasFloat32ArraySupport,"hasFloat32ArraySupport()"
hasFloat64ArraySupport,"hasFloat64ArraySupport()"
hasFunctionNameSupport,"hasFunctionNameSupport()"
hasGeneratorSupport,"hasGeneratorSupport()"
hasGlobalThisSupport,"hasGlobalThisSupport()"
hasInt8ArraySupport,"hasInt8ArraySupport()"
hasInt16ArraySupport,"hasInt16ArraySupport()"
hasInt32ArraySupport,"hasInt32ArraySupport()"
hasIteratorSymbolSupport,"hasIteratorSymbolSupport()"
hasMapSupport,"hasMapSupport()"
hasNodeBufferSupport,"hasNodeBufferSupport()"
hasOwnProp,"hasOwnProp( value:any, property:any )"
hasProp,"hasProp( value:any, property:any )"
hasProxySupport,"hasProxySupport()"
hasSetSupport,"hasSetSupport()"
hasSharedArrayBufferSupport,"hasSharedArrayBufferSupport()"
hasSymbolSupport,"hasSymbolSupport()"
hasToStringTagSupport,"hasToStringTagSupport()"
hasUint8ArraySupport,"hasUint8ArraySupport()"
hasUint8ClampedArraySupport,"hasUint8ClampedArraySupport()"
hasUint16ArraySupport,"hasUint16ArraySupport()"
hasUint32ArraySupport,"hasUint32ArraySupport()"
hasWeakMapSupport,"hasWeakMapSupport()"
hasWeakSetSupport,"hasWeakSetSupport()"
hasWebAssemblySupport,"hasWebAssemblySupport()"
HERNDON_VENUS_SEMIDIAMETERS,"HERNDON_VENUS_SEMIDIAMETERS()"
homedir,"homedir()"
HOURS_IN_DAY,"HOURS_IN_DAY"
HOURS_IN_WEEK,"HOURS_IN_WEEK"
hoursInMonth,"hoursInMonth( [month:string|Date|integer[, year:integer]] )"
hoursInYear,"hoursInYear( [value:integer|Date] )"
httpServer,"httpServer( [options:Object,] [requestListener:Function] )"
identity,"identity( x:any )"
ifelse,"ifelse( bool:boolean, x:any, y:any )"
ifelseAsync,"ifelseAsync( predicate:Function, x:any, y:any, done:Function )"
ifthen,"ifthen( bool:boolean, x:Function, y:Function )"
ifthenAsync,"ifthenAsync( predicate:Function, x:Function, y:Function, done:Function )"
imag,"imag( z:Complex )"
IMG_ACANTHUS_MOLLIS,"IMG_ACANTHUS_MOLLIS()"
IMG_AIRPLANE_FROM_ABOVE,"IMG_AIRPLANE_FROM_ABOVE()"
IMG_ALLIUM_OREOPHILUM,"IMG_ALLIUM_OREOPHILUM()"
IMG_BLACK_CANYON,"IMG_BLACK_CANYON()"
IMG_DUST_BOWL_HOME,"IMG_DUST_BOWL_HOME()"
IMG_FRENCH_ALPINE_LANDSCAPE,"IMG_FRENCH_ALPINE_LANDSCAPE()"
IMG_LOCOMOTION_HOUSE_CAT,"IMG_LOCOMOTION_HOUSE_CAT()"
IMG_LOCOMOTION_NUDE_MALE,"IMG_LOCOMOTION_NUDE_MALE()"
IMG_MARCH_PASTORAL,"IMG_MARCH_PASTORAL()"
IMG_NAGASAKI_BOATS,"IMG_NAGASAKI_BOATS()"
incrapcorr,"incrapcorr( [mx:number, my:number] )"
incrcount,"incrcount()"
incrcovariance,"incrcovariance( [mx:number, my:number] )"
incrcovmat,"incrcovmat( out:integer|ndarray[, means:ndarray] )"
incrcv,"incrcv( [mean:number] )"
increwmean,"increwmean( α:number )"
increwstdev,"increwstdev( α:number )"
increwvariance,"increwvariance( α:number )"
incrgmean,"incrgmean()"
incrgrubbs,"incrgrubbs( [options:Object] )"
incrhmean,"incrhmean()"
incrkmeans,"incrkmeans( k:integer|ndarray[, ndims:integer][, options:Object] )"
incrkurtosis,"incrkurtosis()"
incrmaape,"incrmaape()"
incrmae,"incrmae()"
incrmapcorr,"incrmapcorr( W:integer[, mx:number, my:number] )"
incrmape,"incrmape()"
incrmax,"incrmax()"
incrmaxabs,"incrmaxabs()"
incrmcovariance,"incrmcovariance( W:integer[, mx:number, my:number] )"
incrmcv,"incrmcv( W:integer[, mean:number] )"
incrmda,"incrmda()"
incrme,"incrme()"
incrmean,"incrmean()"
incrmeanabs,"incrmeanabs()"
incrmeanabs2,"incrmeanabs2()"
incrmeanstdev,"incrmeanstdev( [out:Array|TypedArray] )"
incrmeanvar,"incrmeanvar( [out:Array|TypedArray] )"
incrmgmean,"incrmgmean( W:integer )"
incrmgrubbs,"incrmgrubbs( W:integer[, options:Object] )"
incrmhmean,"incrmhmean( W:integer )"
incrmidrange,"incrmidrange()"
incrmin,"incrmin()"
incrminabs,"incrminabs()"
incrminmax,"incrminmax( [out:Array|TypedArray] )"
incrminmaxabs,"incrminmaxabs( [out:Array|TypedArray] )"
incrmmaape,"incrmmaape( W:integer )"
incrmmae,"incrmmae( W:integer )"
incrmmape,"incrmmape( W:integer )"
incrmmax,"incrmmax( W:integer )"
incrmmaxabs,"incrmmaxabs( W:integer )"
incrmmda,"incrmmda( W:integer )"
incrmme,"incrmme( W:integer )"
incrmmean,"incrmmean( W:integer )"
incrmmeanabs,"incrmmeanabs( W:integer )"
incrmmeanabs2,"incrmmeanabs2( W:integer )"
incrmmeanstdev,"incrmmeanstdev( [out:Array|TypedArray,] W:integer )"
incrmmeanvar,"incrmmeanvar( [out:Array|TypedArray,] W:integer )"
incrmmidrange,"incrmmidrange( W:integer )"
incrmmin,"incrmmin( W:integer )"
incrmminabs,"incrmminabs( W:integer )"
incrmminmax,"incrmminmax( [out:Array|TypedArray,] W:integer )"
incrmminmaxabs,"incrmminmaxabs( [out:Array|TypedArray,] W:integer )"
incrmmpe,"incrmmpe( W:integer )"
incrmmse,"incrmmse( W:integer )"
incrmpcorr,"incrmpcorr( W:integer[, mx:number, my:number] )"
incrmpcorr2,"incrmpcorr2( W:integer[, mx:number, my:number] )"
incrmpcorrdist,"incrmpcorrdist( W:integer[, mx:number, my:number] )"
incrmpe,"incrmpe()"
incrmprod,"incrmprod( W:integer )"
incrmrange,"incrmrange( W:integer )"
incrmrmse,"incrmrmse( W:integer )"
incrmrss,"incrmrss( W:integer )"
incrmse,"incrmse()"
incrmstdev,"incrmstdev( W:integer[, mean:number] )"
incrmsum,"incrmsum( W:integer )"
incrmsumabs,"incrmsumabs( W:integer )"
incrmsumabs2,"incrmsumabs2( W:integer )"
incrmsummary,"incrmsummary( W:integer )"
incrmsumprod,"incrmsumprod( W:integer )"
incrmvariance,"incrmvariance( W:integer[, mean:number] )"
incrmvmr,"incrmvmr( W:integer[, mean:number] )"
incrpcorr,"incrpcorr( [mx:number, my:number] )"
incrpcorr2,"incrpcorr2( [mx:number, my:number] )"
incrpcorrdist,"incrpcorrdist( [mx:number, my:number] )"
incrpcorrdistmat,"incrpcorrdistmat( out:integer|ndarray[, means:ndarray] )"
incrpcorrmat,"incrpcorrmat( out:integer|ndarray[, means:ndarray] )"
incrprod,"incrprod()"
incrrange,"incrrange()"
incrrmse,"incrrmse()"
incrrss,"incrrss()"
incrskewness,"incrskewness()"
incrspace,"incrspace( start:number, stop:number[, increment:number] )"
incrstdev,"incrstdev( [mean:number] )"
incrsum,"incrsum()"
incrsumabs,"incrsumabs()"
incrsumabs2,"incrsumabs2()"
incrsummary,"incrsummary()"
incrsumprod,"incrsumprod()"
incrvariance,"incrvariance( [mean:number] )"
incrvmr,"incrvmr( [mean:number] )"
incrwmean,"incrwmean()"
ind2sub,"ind2sub( [out:Array|TypedArray|Object,] shape:ArrayLike, idx:integer[, options:Object] )"
indexOf,"indexOf( arr:ArrayLike, searchElement:any[, fromIndex:integer] )"
inherit,"inherit( ctor:Object|Function, superCtor:Object|Function )"
inheritedEnumerableProperties,"inheritedEnumerableProperties( value:any[, level:integer] )"
inheritedEnumerablePropertySymbols,"inheritedEnumerablePropertySymbols( value:any[, level:integer] )"
inheritedKeys,"inheritedKeys( value:any[, level:integer] )"
inheritedNonEnumerableProperties,"inheritedNonEnumerableProperties( value:any[, level:integer] )"
inheritedNonEnumerablePropertyNames,"inheritedNonEnumerablePropertyNames( value:any[, level:integer] )"
inheritedNonEnumerablePropertySymbols,"inheritedNonEnumerablePropertySymbols( value:any[, level:integer] )"
inheritedProperties,"inheritedProperties( value:any[, level:integer] )"
inheritedPropertyDescriptor,"inheritedPropertyDescriptor( value:any, property:string|symbol[, level:integer] )"
inheritedPropertyDescriptors,"inheritedPropertyDescriptors( value:any[, level:integer] )"
inheritedPropertyNames,"inheritedPropertyNames( value:any[, level:integer] )"
inheritedPropertySymbols,"inheritedPropertySymbols( value:any[, level:integer] )"
inheritedWritableProperties,"inheritedWritableProperties( value:any[, level:integer] )"
inheritedWritablePropertyNames,"inheritedWritablePropertyNames( value:any[, level:integer] )"
inheritedWritablePropertySymbols,"inheritedWritablePropertySymbols( value:any[, level:integer] )"
inmap,"inmap( collection:Array|TypedArray|Object, fcn:Function[, thisArg:any] )"
inmapAsync,"inmapAsync( collection:Array|TypedArray|Object, [options:Object,] fcn:Function, done:Function )"
inmapAsync.factory,"inmapAsync.factory( [options:Object,] fcn:Function )"
inmapRight,"inmapRight( collection:Array|TypedArray|Object, fcn:Function[, thisArg:any] )"
inmapRightAsync,"inmapRightAsync( collection:Array|TypedArray|Object, [options:Object,] fcn:Function, done:Function )"
inmapRightAsync.factory,"inmapRightAsync.factory( [options:Object,] fcn:Function )"
inspectSinkStream,"inspectSinkStream( [options:Object,] clbk:Function )"
inspectSinkStream.factory,"inspectSinkStream.factory( [options:Object] )"
inspectSinkStream.objectMode,"inspectSinkStream.objectMode( [options:Object,] clbk:Function )"
inspectStream,"inspectStream( [options:Object,] clbk:Function )"
inspectStream.factory,"inspectStream.factory( [options:Object] )"
inspectStream.objectMode,"inspectStream.objectMode( [options:Object,] clbk:Function )"
instanceOf,"instanceOf( value:any, constructor:Function )"
INT8_MAX,"INT8_MAX"
INT8_MIN,"INT8_MIN"
INT8_NUM_BYTES,"INT8_NUM_BYTES"
Int8Array,"Int8Array()"
Int8Array,"Int8Array( length:integer )"
Int8Array,"Int8Array( typedarray:TypedArray )"
Int8Array,"Int8Array( obj:Object )"
Int8Array,"Int8Array( buffer:ArrayBuffer[, byteOffset:integer[, length:integer]] )"
Int8Array.from,"Int8Array.from( src:ArrayLike|Iterable[, map:Function[, thisArg:Any]] )"
Int8Array.of,"Int8Array.of( element0:number[, element1:number[, ...elementN:number]] )"
Int8Array.BYTES_PER_ELEMENT,"Int8Array.BYTES_PER_ELEMENT"
Int8Array.name,"Int8Array.name"
Int8Array.prototype.buffer,"Int8Array.prototype.buffer"
Int8Array.prototype.byteLength,"Int8Array.prototype.byteLength"
Int8Array.prototype.byteOffset,"Int8Array.prototype.byteOffset"
Int8Array.prototype.BYTES_PER_ELEMENT,"Int8Array.prototype.BYTES_PER_ELEMENT"
Int8Array.prototype.length,"Int8Array.prototype.length"
Int8Array.prototype.copyWithin,"Int8Array.prototype.copyWithin( target:integer, start:integer[, end:integer] )"
Int8Array.prototype.entries,"Int8Array.prototype.entries()"
Int8Array.prototype.every,"Int8Array.prototype.every( predicate:Function[, thisArg:Any] )"
Int8Array.prototype.fill,"Int8Array.prototype.fill( value:number[, start:integer[, end:integer]] )"
Int8Array.prototype.filter,"Int8Array.prototype.filter( predicate:Function[, thisArg:Any] )"
Int8Array.prototype.find,"Int8Array.prototype.find( predicate:Function[, thisArg:Any] )"
Int8Array.prototype.findIndex,"Int8Array.prototype.findIndex( predicate:Function[, thisArg:Any] )"
Int8Array.prototype.forEach,"Int8Array.prototype.forEach( fcn:Function[, thisArg:Any] )"
Int8Array.prototype.includes,"Int8Array.prototype.includes( searchElement:number[, fromIndex:integer] )"
Int8Array.prototype.indexOf,"Int8Array.prototype.indexOf( searchElement:number[, fromIndex:integer] )"
Int8Array.prototype.join,"Int8Array.prototype.join( [separator:string] )"
Int8Array.prototype.keys,"Int8Array.prototype.keys()"
Int8Array.prototype.lastIndexOf,"Int8Array.prototype.lastIndexOf( searchElement:number[, fromIndex:integer] )"
Int8Array.prototype.map,"Int8Array.prototype.map( fcn:Function[, thisArg:Any] )"
Int8Array.prototype.reduce,"Int8Array.prototype.reduce( fcn:Function[, initialValue:Any] )"
Int8Array.prototype.reduceRight,"Int8Array.prototype.reduceRight( fcn:Function[, initialValue:Any] )"
Int8Array.prototype.reverse,"Int8Array.prototype.reverse()"
Int8Array.prototype.set,"Int8Array.prototype.set( arr:ArrayLike[, offset:integer] )"
Int8Array.prototype.slice,"Int8Array.prototype.slice( [begin:integer[, end:integer]] )"
Int8Array.prototype.some,"Int8Array.prototype.some( predicate:Function[, thisArg:Any] )"
Int8Array.prototype.sort,"Int8Array.prototype.sort( [compareFunction:Function] )"
Int8Array.prototype.subarray,"Int8Array.prototype.subarray( [begin:integer[, end:integer]] )"
Int8Array.prototype.toLocaleString,"Int8Array.prototype.toLocaleString( [locales:Array<string>[, options:Object]] )"
Int8Array.prototype.toString,"Int8Array.prototype.toString()"
Int8Array.prototype.values,"Int8Array.prototype.values()"
INT16_MAX,"INT16_MAX"
INT16_MIN,"INT16_MIN"
INT16_NUM_BYTES,"INT16_NUM_BYTES"
Int16Array,"Int16Array()"
Int16Array,"Int16Array( length:integer )"
Int16Array,"Int16Array( typedarray:TypedArray )"
Int16Array,"Int16Array( obj:Object )"
Int16Array,"Int16Array( buffer:ArrayBuffer[, byteOffset:integer[, length:integer]] )"
Int16Array.from,"Int16Array.from( src:ArrayLike|Iterable[, map:Function[, thisArg:Any]] )"
Int16Array.of,"Int16Array.of( element0:number[, element1:number[, ...elementN:number]] )"
Int16Array.BYTES_PER_ELEMENT,"Int16Array.BYTES_PER_ELEMENT"
Int16Array.name,"Int16Array.name"
Int16Array.prototype.buffer,"Int16Array.prototype.buffer"
Int16Array.prototype.byteLength,"Int16Array.prototype.byteLength"
Int16Array.prototype.byteOffset,"Int16Array.prototype.byteOffset"
Int16Array.prototype.BYTES_PER_ELEMENT,"Int16Array.prototype.BYTES_PER_ELEMENT"
Int16Array.prototype.length,"Int16Array.prototype.length"
Int16Array.prototype.copyWithin,"Int16Array.prototype.copyWithin( target:integer, start:integer[, end:integer] )"
Int16Array.prototype.entries,"Int16Array.prototype.entries()"
Int16Array.prototype.every,"Int16Array.prototype.every( predicate:Function[, thisArg:Any] )"
Int16Array.prototype.fill,"Int16Array.prototype.fill( value:number[, start:integer[, end:integer]] )"
Int16Array.prototype.filter,"Int16Array.prototype.filter( predicate:Function[, thisArg:Any] )"
Int16Array.prototype.find,"Int16Array.prototype.find( predicate:Function[, thisArg:Any] )"
Int16Array.prototype.findIndex,"Int16Array.prototype.findIndex( predicate:Function[, thisArg:Any] )"
Int16Array.prototype.forEach,"Int16Array.prototype.forEach( fcn:Function[, thisArg:Any] )"
Int16Array.prototype.includes,"Int16Array.prototype.includes( searchElement:number[, fromIndex:integer] )"
Int16Array.prototype.indexOf,"Int16Array.prototype.indexOf( searchElement:number[, fromIndex:integer] )"
Int16Array.prototype.join,"Int16Array.prototype.join( [separator:string] )"
Int16Array.prototype.keys,"Int16Array.prototype.keys()"
Int16Array.prototype.lastIndexOf,"Int16Array.prototype.lastIndexOf( searchElement:number[, fromIndex:integer] )"
Int16Array.prototype.map,"Int16Array.prototype.map( fcn:Function[, thisArg:Any] )"
Int16Array.prototype.reduce,"Int16Array.prototype.reduce( fcn:Function[, initialValue:Any] )"
Int16Array.prototype.reduceRight,"Int16Array.prototype.reduceRight( fcn:Function[, initialValue:Any] )"
Int16Array.prototype.reverse,"Int16Array.prototype.reverse()"
Int16Array.prototype.set,"Int16Array.prototype.set( arr:ArrayLike[, offset:integer] )"
Int16Array.prototype.slice,"Int16Array.prototype.slice( [begin:integer[, end:integer]] )"
Int16Array.prototype.some,"Int16Array.prototype.some( predicate:Function[, thisArg:Any] )"
Int16Array.prototype.sort,"Int16Array.prototype.sort( [compareFunction:Function] )"
Int16Array.prototype.subarray,"Int16Array.prototype.subarray( [begin:integer[, end:integer]] )"
Int16Array.prototype.toLocaleString,"Int16Array.prototype.toLocaleString( [locales:Array<string>[, options:Object]] )"
Int16Array.prototype.toString,"Int16Array.prototype.toString()"
Int16Array.prototype.values,"Int16Array.prototype.values()"
INT32_MAX,"INT32_MAX"
INT32_MIN,"INT32_MIN"
INT32_NUM_BYTES,"INT32_NUM_BYTES"
Int32Array,"Int32Array()"
Int32Array,"Int32Array( length:integer )"
Int32Array,"Int32Array( typedarray:TypedArray )"
Int32Array,"Int32Array( obj:Object )"
Int32Array,"Int32Array( buffer:ArrayBuffer[, byteOffset:integer[, length:integer]] )"
Int32Array.from,"Int32Array.from( src:ArrayLike|Iterable[, map:Function[, thisArg:Any]] )"
Int32Array.of,"Int32Array.of( element0:number[, element1:number[, ...elementN:number]] )"
Int32Array.BYTES_PER_ELEMENT,"Int32Array.BYTES_PER_ELEMENT"
Int32Array.name,"Int32Array.name"
Int32Array.prototype.buffer,"Int32Array.prototype.buffer"
Int32Array.prototype.byteLength,"Int32Array.prototype.byteLength"
Int32Array.prototype.byteOffset,"Int32Array.prototype.byteOffset"
Int32Array.prototype.BYTES_PER_ELEMENT,"Int32Array.prototype.BYTES_PER_ELEMENT"
Int32Array.prototype.length,"Int32Array.prototype.length"
Int32Array.prototype.copyWithin,"Int32Array.prototype.copyWithin( target:integer, start:integer[, end:integer] )"
Int32Array.prototype.entries,"Int32Array.prototype.entries()"
Int32Array.prototype.every,"Int32Array.prototype.every( predicate:Function[, thisArg:Any] )"
Int32Array.prototype.fill,"Int32Array.prototype.fill( value:number[, start:integer[, end:integer]] )"
Int32Array.prototype.filter,"Int32Array.prototype.filter( predicate:Function[, thisArg:Any] )"
Int32Array.prototype.find,"Int32Array.prototype.find( predicate:Function[, thisArg:Any] )"
Int32Array.prototype.findIndex,"Int32Array.prototype.findIndex( predicate:Function[, thisArg:Any] )"
Int32Array.prototype.forEach,"Int32Array.prototype.forEach( fcn:Function[, thisArg:Any] )"
Int32Array.prototype.includes,"Int32Array.prototype.includes( searchElement:number[, fromIndex:integer] )"
Int32Array.prototype.indexOf,"Int32Array.prototype.indexOf( searchElement:number[, fromIndex:integer] )"
Int32Array.prototype.join,"Int32Array.prototype.join( [separator:string] )"
Int32Array.prototype.keys,"Int32Array.prototype.keys()"
Int32Array.prototype.lastIndexOf,"Int32Array.prototype.lastIndexOf( searchElement:number[, fromIndex:integer] )"
Int32Array.prototype.map,"Int32Array.prototype.map( fcn:Function[, thisArg:Any] )"
Int32Array.prototype.reduce,"Int32Array.prototype.reduce( fcn:Function[, initialValue:Any] )"
Int32Array.prototype.reduceRight,"Int32Array.prototype.reduceRight( fcn:Function[, initialValue:Any] )"
Int32Array.prototype.reverse,"Int32Array.prototype.reverse()"
Int32Array.prototype.set,"Int32Array.prototype.set( arr:ArrayLike[, offset:integer] )"
Int32Array.prototype.slice,"Int32Array.prototype.slice( [begin:integer[, end:integer]] )"
Int32Array.prototype.some,"Int32Array.prototype.some( predicate:Function[, thisArg:Any] )"
Int32Array.prototype.sort,"Int32Array.prototype.sort( [compareFunction:Function] )"
Int32Array.prototype.subarray,"Int32Array.prototype.subarray( [begin:integer[, end:integer]] )"
Int32Array.prototype.toLocaleString,"Int32Array.prototype.toLocaleString( [locales:Array<string>[, options:Object]] )"
Int32Array.prototype.toString,"Int32Array.prototype.toString()"
Int32Array.prototype.values,"Int32Array.prototype.values()"
IS_BIG_ENDIAN,"IS_BIG_ENDIAN"
IS_BROWSER,"IS_BROWSER"
IS_DARWIN,"IS_DARWIN"
IS_ELECTRON,"IS_ELECTRON"
IS_ELECTRON_MAIN,"IS_ELECTRON_MAIN"
IS_ELECTRON_RENDERER,"IS_ELECTRON_RENDERER"
IS_LITTLE_ENDIAN,"IS_LITTLE_ENDIAN"
IS_NODE,"IS_NODE"
IS_WEB_WORKER,"IS_WEB_WORKER"
IS_WINDOWS,"IS_WINDOWS"
isAbsolutePath,"isAbsolutePath( value:any )"
isAbsolutePath.posix,"isAbsolutePath.posix( value:any )"
isAbsolutePath.win32,"isAbsolutePath.win32( value:any )"
isAccessorProperty,"isAccessorProperty( value:any, property:any )"
isAccessorPropertyIn,"isAccessorPropertyIn( value:any, property:any )"
isAlphagram,"isAlphagram( value:any )"
isAlphaNumeric,"isAlphaNumeric( str:string )"
isAnagram,"isAnagram( str:string, value:any )"
isArguments,"isArguments( value:any )"
isArray,"isArray( value:any )"
isArrayArray,"isArrayArray( value:any )"
isArrayBuffer,"isArrayBuffer( value:any )"
isArrayLength,"isArrayLength( value:any )"
isArrayLike,"isArrayLike( value:any )"
isArrayLikeObject,"isArrayLikeObject( value:any )"
isASCII,"isASCII( str:string )"
isBetween,"isBetween( value:any, a:any, b:any[, left:string, right:string] )"
isBetweenArray,"isBetweenArray( value:any, a:any, b:any[, left:string, right:string] )"
isBinaryString,"isBinaryString( value:any )"
isBoolean,"isBoolean( value:any )"
isBoolean.isPrimitive,"isBoolean.isPrimitive( value:any )"
isBoolean.isObject,"isBoolean.isObject( value:any )"
isBooleanArray,"isBooleanArray( value:any )"
isBooleanArray.primitives,"isBooleanArray.primitives( value:any )"
isBooleanArray.objects,"isBooleanArray.objects( value:any )"
isBoxedPrimitive,"isBoxedPrimitive( value:any )"
isBuffer,"isBuffer( value:any )"
isCapitalized,"isCapitalized( value:any )"
isCentrosymmetricMatrix,"isCentrosymmetricMatrix( value:any )"
isCircular,"isCircular( value:any )"
isCircularArray,"isCircularArray( value:any )"
isCircularPlainObject,"isCircularPlainObject( value:any )"
isCollection,"isCollection( value:any )"
isComplex,"isComplex( value:any )"
isComplex64,"isComplex64( value:any )"
isComplex64Array,"isComplex64Array( value:any )"
isComplex128,"isComplex128( value:any )"
isComplex128Array,"isComplex128Array( value:any )"
isComplexLike,"isComplexLike( value:any )"
isComplexTypedArray,"isComplexTypedArray( value:any )"
isConfigurableProperty,"isConfigurableProperty( value:any, property:any )"
isConfigurablePropertyIn,"isConfigurablePropertyIn( value:any, property:any )"
isDataProperty,"isDataProperty( value:any, property:any )"
isDataPropertyIn,"isDataPropertyIn( value:any, property:any )"
isDateObject,"isDateObject( value:any )"
isDigitString,"isDigitString( str:string )"
isEmailAddress,"isEmailAddress( value:any )"
isEmptyArray,"isEmptyArray( value:any )"
isEmptyObject,"isEmptyObject( value:any )"
isEmptyString,"isEmptyString( value:any )"
isEmptyString.isPrimitive,"isEmptyString.isPrimitive( value:any )"
isEmptyString.isObject,"isEmptyString.isObject( value:any )"
isEnumerableProperty,"isEnumerableProperty( value:any, property:any )"
isEnumerablePropertyIn,"isEnumerablePropertyIn( value:any, property:any )"
isError,"isError( value:any )"
isEvalError,"isEvalError( value:any )"
isEven,"isEven( value:any )"
isEven.isPrimitive,"isEven.isPrimitive( value:any )"
isEven.isObject,"isEven.isObject( value:any )"
isFalsy,"isFalsy( value:any )"
isFalsyArray,"isFalsyArray( value:any )"
isFinite,"isFinite( value:any )"
isFinite.isPrimitive,"isFinite.isPrimitive( value:any )"
isFinite.isObject,"isFinite.isObject( value:any )"
isFiniteArray,"isFiniteArray( value:any )"
isFiniteArray.primitives,"isFiniteArray.primitives( value:any )"
isFiniteArray.objects,"isFiniteArray.objects( value:any )"
isFloat32Array,"isFloat32Array( value:any )"
isFloat64Array,"isFloat64Array( value:any )"
isFunction,"isFunction( value:any )"
isFunctionArray,"isFunctionArray( value:any )"
isGeneratorObject,"isGeneratorObject( value:any )"
isGeneratorObjectLike,"isGeneratorObjectLike( value:any )"
isHexString,"isHexString( str:string )"
isInfinite,"isInfinite( value:any )"
isInfinite.isPrimitive,"isInfinite.isPrimitive( value:any )"
isInfinite.isObject,"isInfinite.isObject( value:any )"
isInheritedProperty,"isInheritedProperty( value:any, property:any )"
isInt8Array,"isInt8Array( value:any )"
isInt16Array,"isInt16Array( value:any )"
isInt32Array,"isInt32Array( value:any )"
isInteger,"isInteger( value:any )"
isInteger.isPrimitive,"isInteger.isPrimitive( value:any )"
isInteger.isObject,"isInteger.isObject( value:any )"
isIntegerArray,"isIntegerArray( value:any )"
isIntegerArray.primitives,"isIntegerArray.primitives( value:any )"
isIntegerArray.objects,"isIntegerArray.objects( value:any )"
isIterableLike,"isIterableLike( value:any )"
isIteratorLike,"isIteratorLike( value:any )"
isJSON,"isJSON( value:any )"
isLeapYear,"isLeapYear( value:any )"
isLowercase,"isLowercase( value:any )"
isMatrixLike,"isMatrixLike( value:any )"
isMethod,"isMethod( value:any, property:any )"
isMethodIn,"isMethodIn( value:any, property:any )"
isNamedTypedTupleLike,"isNamedTypedTupleLike( value:any )"
isnan,"isnan( value:any )"
isnan.isPrimitive,"isnan.isPrimitive( value:any )"
isnan.isObject,"isnan.isObject( value:any )"
isNaNArray,"isNaNArray( value:any )"
isNaNArray.primitives,"isNaNArray.primitives( value:any )"
isNaNArray.objects,"isNaNArray.objects( value:any )"
isNativeFunction,"isNativeFunction( value:any )"
isndarrayLike,"isndarrayLike( value:any )"
isNegativeInteger,"isNegativeInteger( value:any )"
isNegativeInteger.isPrimitive,"isNegativeInteger.isPrimitive( value:any )"
isNegativeInteger.isObject,"isNegativeInteger.isObject( value:any )"
isNegativeIntegerArray,"isNegativeIntegerArray( value:any )"
isNegativeIntegerArray.primitives,"isNegativeIntegerArray.primitives( value:any )"
isNegativeIntegerArray.objects,"isNegativeIntegerArray.objects( value:any )"
isNegativeNumber,"isNegativeNumber( value:any )"
isNegativeNumber.isPrimitive,"isNegativeNumber.isPrimitive( value:any )"
isNegativeNumber.isObject,"isNegativeNumber.isObject( value:any )"
isNegativeNumberArray,"isNegativeNumberArray( value:any )"
isNegativeNumberArray.primitives,"isNegativeNumberArray.primitives( value:any )"
isNegativeNumberArray.objects,"isNegativeNumberArray.objects( value:any )"
isNegativeZero,"isNegativeZero( value:any )"
isNegativeZero.isPrimitive,"isNegativeZero.isPrimitive( value:any )"
isNegativeZero.isObject,"isNegativeZero.isObject( value:any )"
isNodeBuiltin,"isNodeBuiltin( str:string )"
isNodeDuplexStreamLike,"isNodeDuplexStreamLike( value:any )"
isNodeReadableStreamLike,"isNodeReadableStreamLike( value:any )"
isNodeREPL,"isNodeREPL()"
isNodeStreamLike,"isNodeStreamLike( value:any )"
isNodeTransformStreamLike,"isNodeTransformStreamLike( value:any )"
isNodeWritableStreamLike,"isNodeWritableStreamLike( value:any )"
isNonConfigurableProperty,"isNonConfigurableProperty( value:any, property:any )"
isNonConfigurablePropertyIn,"isNonConfigurablePropertyIn( value:any, property:any )"
isNonEnumerableProperty,"isNonEnumerableProperty( value:any, property:any )"
isNonEnumerablePropertyIn,"isNonEnumerablePropertyIn( value:any, property:any )"
isNonNegativeInteger,"isNonNegativeInteger( value:any )"
isNonNegativeInteger.isPrimitive,"isNonNegativeInteger.isPrimitive( value:any )"
isNonNegativeInteger.isObject,"isNonNegativeInteger.isObject( value:any )"
isNonNegativeIntegerArray,"isNonNegativeIntegerArray( value:any )"
isNonNegativeIntegerArray.primitives,"isNonNegativeIntegerArray.primitives( value:any )"
isNonNegativeIntegerArray.objects,"isNonNegativeIntegerArray.objects( value:any )"
isNonNegativeNumber,"isNonNegativeNumber( value:any )"
isNonNegativeNumber.isPrimitive,"isNonNegativeNumber.isPrimitive( value:any )"
isNonNegativeNumber.isObject,"isNonNegativeNumber.isObject( value:any )"
isNonNegativeNumberArray,"isNonNegativeNumberArray( value:any )"
isNonNegativeNumberArray.primitives,"isNonNegativeNumberArray.primitives( value:any )"
isNonNegativeNumberArray.objects,"isNonNegativeNumberArray.objects( value:any )"
isNonPositiveInteger,"isNonPositiveInteger( value:any )"
isNonPositiveInteger.isPrimitive,"isNonPositiveInteger.isPrimitive( value:any )"
isNonPositiveInteger.isObject,"isNonPositiveInteger.isObject( value:any )"
isNonPositiveIntegerArray,"isNonPositiveIntegerArray( value:any )"
isNonPositiveIntegerArray.primitives,"isNonPositiveIntegerArray.primitives( value:any )"
isNonPositiveIntegerArray.objects,"isNonPositiveIntegerArray.objects( value:any )"
isNonPositiveNumber,"isNonPositiveNumber( value:any )"
isNonPositiveNumber.isPrimitive,"isNonPositiveNumber.isPrimitive( value:any )"
isNonPositiveNumber.isObject,"isNonPositiveNumber.isObject( value:any )"
isNonPositiveNumberArray,"isNonPositiveNumberArray( value:any )"
isNonPositiveNumberArray.primitives,"isNonPositiveNumberArray.primitives( value:any )"
isNonPositiveNumberArray.objects,"isNonPositiveNumberArray.objects( value:any )"
isNonSymmetricMatrix,"isNonSymmetricMatrix( value:any )"
isNull,"isNull( value:any )"
isNullArray,"isNullArray( value:any )"
isNumber,"isNumber( value:any )"
isNumber.isPrimitive,"isNumber.isPrimitive( value:any )"
isNumber.isObject,"isNumber.isObject( value:any )"
isNumberArray,"isNumberArray( value:any )"
isNumberArray.primitives,"isNumberArray.primitives( value:any )"
isNumberArray.objects,"isNumberArray.objects( value:any )"
isNumericArray,"isNumericArray( value:any )"
isObject,"isObject( value:any )"
isObjectArray,"isObjectArray( value:any )"
isObjectLike,"isObjectLike( value:any )"
isOdd,"isOdd( value:any )"
isOdd.isPrimitive,"isOdd.isPrimitive( value:any )"
isOdd.isObject,"isOdd.isObject( value:any )"
isoWeeksInYear,"isoWeeksInYear( [year:integer] )"
isPersymmetricMatrix,"isPersymmetricMatrix( value:any )"
isPlainObject,"isPlainObject( value:any )"
isPlainObjectArray,"isPlainObjectArray( value:any )"
isPositiveInteger,"isPositiveInteger( value:any )"
isPositiveInteger.isPrimitive,"isPositiveInteger.isPrimitive( value:any )"
isPositiveInteger.isObject,"isPositiveInteger.isObject( value:any )"
isPositiveIntegerArray,"isPositiveIntegerArray( value:any )"
isPositiveIntegerArray.primitives,"isPositiveIntegerArray.primitives( value:any )"
isPositiveIntegerArray.objects,"isPositiveIntegerArray.objects( value:any )"
isPositiveNumber,"isPositiveNumber( value:any )"
isPositiveNumber.isPrimitive,"isPositiveNumber.isPrimitive( value:any )"
isPositiveNumber.isObject,"isPositiveNumber.isObject( value:any )"
isPositiveNumberArray,"isPositiveNumberArray( value:any )"
isPositiveNumberArray.primitives,"isPositiveNumberArray.primitives( value:any )"
isPositiveNumberArray.objects,"isPositiveNumberArray.objects( value:any )"
isPositiveZero,"isPositiveZero( value:any )"
isPositiveZero.isPrimitive,"isPositiveZero.isPrimitive( value:any )"
isPositiveZero.isObject,"isPositiveZero.isObject( value:any )"
isPrimitive,"isPrimitive( value:any )"
isPrimitiveArray,"isPrimitiveArray( value:any )"
isPRNGLike,"isPRNGLike( value:any )"
isProbability,"isProbability( value:any )"
isProbability.isPrimitive,"isProbability.isPrimitive( value:any )"
isProbability.isObject,"isProbability.isObject( value:any )"
isProbabilityArray,"isProbabilityArray( value:any )"
isProbabilityArray.primitives,"isProbabilityArray.primitives( value:any )"
isProbabilityArray.objects,"isProbabilityArray.objects( value:any )"
isPrototypeOf,"isPrototypeOf( value:any, proto:Object|Function )"
isRangeError,"isRangeError( value:any )"
isReadableProperty,"isReadableProperty( value:any, property:any )"
isReadablePropertyIn,"isReadablePropertyIn( value:any, property:any )"
isReadOnlyProperty,"isReadOnlyProperty( value:any, property:any )"
isReadOnlyPropertyIn,"isReadOnlyPropertyIn( value:any, property:any )"
isReadWriteProperty,"isReadWriteProperty( value:any, property:any )"
isReadWritePropertyIn,"isReadWritePropertyIn( value:any, property:any )"
isReferenceError,"isReferenceError( value:any )"
isRegExp,"isRegExp( value:any )"
isRegExpString,"isRegExpString( value:any )"
isRelativePath,"isRelativePath( value:any )"
isRelativePath.posix,"isRelativePath.posix( value:any )"
isRelativePath.win32,"isRelativePath.win32( value:any )"
isSafeInteger,"isSafeInteger( value:any )"
isSafeInteger.isPrimitive,"isSafeInteger.isPrimitive( value:any )"
isSafeInteger.isObject,"isSafeInteger.isObject( value:any )"
isSafeIntegerArray,"isSafeIntegerArray( value:any )"
isSafeIntegerArray.primitives,"isSafeIntegerArray.primitives( value:any )"
isSafeIntegerArray.objects,"isSafeIntegerArray.objects( value:any )"
isSameValue,"isSameValue( a:any, b:any )"
isSameValueZero,"isSameValueZero( a:any, b:any )"
isSharedArrayBuffer,"isSharedArrayBuffer( value:any )"
isSkewCentrosymmetricMatrix,"isSkewCentrosymmetricMatrix( value:any )"
isSkewPersymmetricMatrix,"isSkewPersymmetricMatrix( value:any )"
isSkewSymmetricMatrix,"isSkewSymmetricMatrix( value:any )"
isSquareMatrix,"isSquareMatrix( value:any )"
isStrictEqual,"isStrictEqual( a:any, b:any )"
isString,"isString( value:any )"
isString.isPrimitive,"isString.isPrimitive( value:any )"
isString.isObject,"isString.isObject( value:any )"
isStringArray,"isStringArray( value:any )"
isStringArray.primitives,"isStringArray.primitives( value:any )"
isStringArray.objects,"isStringArray.objects( value:any )"
isSymbol,"isSymbol( value:any )"
isSymbolArray,"isSymbolArray( value:any )"
isSymbolArray.primitives,"isSymbolArray.primitives( value:any )"
isSymbolArray.objects,"isSymbolArray.objects( value:any )"
isSymmetricMatrix,"isSymmetricMatrix( value:any )"
isSyntaxError,"isSyntaxError( value:any )"
isTruthy,"isTruthy( value:any )"
isTruthyArray,"isTruthyArray( value:any )"
isTypedArray,"isTypedArray( value:any )"
isTypedArrayLength,"isTypedArrayLength( value:any )"
isTypedArrayLike,"isTypedArrayLike( value:any )"
isTypeError,"isTypeError( value:any )"
isUint8Array,"isUint8Array( value:any )"
isUint8ClampedArray,"isUint8ClampedArray( value:any )"
isUint16Array,"isUint16Array( value:any )"
isUint32Array,"isUint32Array( value:any )"
isUNCPath,"isUNCPath( value:any )"
isUndefined,"isUndefined( value:any )"
isUndefinedOrNull,"isUndefinedOrNull( value:any )"
isUnityProbabilityArray,"isUnityProbabilityArray( value:any )"
isUppercase,"isUppercase( value:any )"
isURI,"isURI( value:any )"
isURIError,"isURIError( value:any )"
isVectorLike,"isVectorLike( value:any )"
isWhitespace,"isWhitespace( str:string )"
isWritableProperty,"isWritableProperty( value:any, property:any )"
isWritablePropertyIn,"isWritablePropertyIn( value:any, property:any )"
isWriteOnlyProperty,"isWriteOnlyProperty( value:any, property:any )"
isWriteOnlyPropertyIn,"isWriteOnlyPropertyIn( value:any, property:any )"
iterAdd,"iterAdd( iter0:Object, ...iterator:Object )"
iterAdvance,"iterAdvance( iterator:Object[, n:integer] )"
iterAny,"iterAny( iterator:Object )"
iterAnyBy,"iterAnyBy( iterator:Object, predicate:Function[, thisArg:any ] )"
iterator2array,"iterator2array( iterator:Object[, out:ArrayLikeObject][, mapFcn:Function[, thisArg:any]] )"
iterator2arrayview,"iterator2arrayview( iterator:Object, dest:ArrayLikeObject[, begin:integer[, end:integer]][, mapFcn:Function[, thisArg:any]] )"
iterator2arrayviewRight,"iterator2arrayviewRight( iterator:Object, dest:ArrayLikeObject[, begin:integer[, end:integer]][, mapFcn:Function[, thisArg:any]] )"
iteratorStream,"iteratorStream( iterator:Object[, options:Object] )"
iteratorStream.factory,"iteratorStream.factory( [options:Object] )"
iteratorStream.objectMode,"iteratorStream.objectMode( iterator:Object[, options:Object] )"
IteratorSymbol,"IteratorSymbol"
iterawgn,"iterawgn( iterator:Object, sigma:number[, options:Object] )"
iterawln,"iterawln( iterator:Object, sigma:number[, options:Object] )"
iterawun,"iterawun( iterator:Object, sigma:number[, options:Object] )"
iterBartlettHannPulse,"iterBartlettHannPulse( [options:Object] )"
iterBartlettPulse,"iterBartlettPulse( [options:Object] )"
iterConcat,"iterConcat( iter0:Object, ...iterator:Object )"
iterConstant,"iterConstant( value:any[, options:Object] )"
iterCosineWave,"iterCosineWave( [options:Object] )"
iterCounter,"iterCounter( iterator:Object )"
itercugmean,"itercugmean( iterator:Object )"
itercuhmean,"itercuhmean( iterator:Object )"
itercumax,"itercumax( iterator:Object )"
itercumaxabs,"itercumaxabs( iterator:Object )"
itercumean,"itercumean( iterator:Object )"
itercumeanabs,"itercumeanabs( iterator:Object )"
itercumeanabs2,"itercumeanabs2( iterator:Object )"
itercumidrange,"itercumidrange( iterator:Object )"
itercumin,"itercumin( iterator:Object )"
itercuminabs,"itercuminabs( iterator:Object )"
itercuprod,"itercuprod( iterator:Object )"
itercurange,"itercurange( iterator:Object )"
itercusum,"itercusum( iterator:Object )"
itercusumabs,"itercusumabs( iterator:Object )"
itercusumabs2,"itercusumabs2( iterator:Object )"
iterDedupe,"iterDedupe( iterator:Object[, limit:integer] )"
iterDedupeBy,"iterDedupeBy( iterator:Object, [limit:integer,] fcn:Function )"
iterDiracComb,"iterDiracComb( [options:Object] )"
iterDivide,"iterDivide( iter0:Object, ...iterator:Object )"
iterEmpty,"iterEmpty()"
iterEvery,"iterEvery( iterator:Object )"
iterEveryBy,"iterEveryBy( iterator:Object, predicate:Function[, thisArg:any ] )"
iterFibonacci,"iterFibonacci( [options:Object] )"
iterFill,"iterFill( iterator:Object, value:any[, begin:integer[, end:integer]] )"
iterFilter,"iterFilter( iterator:Object, predicate:Function[, thisArg:any] )"
iterFilterMap,"iterFilterMap( iterator:Object, fcn:Function[, thisArg:any] )"
iterFirst,"iterFirst( iterator:Object )"
iterFlatTopPulse,"iterFlatTopPulse( [options:Object] )"
iterFlow,"iterFlow( methods:Object )"
iterForEach,"iterForEach( iterator:Object, fcn:Function[, thisArg:any] )"
iterHannPulse,"iterHannPulse( [options:Object] )"
iterHead,"iterHead( iterator:Object, n:integer )"
iterIntersection,"iterIntersection( iter0:Object, ...iterator:Object )"
iterIntersectionByHash,"iterIntersectionByHash( iter0:Object, ...iterator:Object, hashFcn:Function[, thisArg:any] )"
iterLanczosPulse,"iterLanczosPulse( [options:Object] )"
iterLast,"iterLast( iterator:Object )"
iterLength,"iterLength( iterator:Object )"
iterMap,"iterMap( iterator:Object, fcn:Function[, thisArg:any] )"
iterMapN,"iterMapN( iter0:Object, ...iterator:Object, fcn:Function[, thisArg:any] )"
itermax,"itermax( iterator:Object )"
itermaxabs,"itermaxabs( iterator:Object )"
itermean,"itermean( iterator:Object )"
itermeanabs,"itermeanabs( iterator:Object )"
itermeanabs2,"itermeanabs2( iterator:Object )"
itermidrange,"itermidrange( iterator:Object )"
itermin,"itermin( iterator:Object )"
iterminabs,"iterminabs( iterator:Object )"
itermmax,"itermmax( iterator:Object, W:integer )"
itermmaxabs,"itermmaxabs( iterator:Object, W:integer )"
itermmean,"itermmean( iterator:Object, W:integer )"
itermmeanabs,"itermmeanabs( iterator:Object, W:integer )"
itermmeanabs2,"itermmeanabs2( iterator:Object, W:integer )"
itermmidrange,"itermmidrange( iterator:Object, W:integer )"
itermmin,"itermmin( iterator:Object, W:integer )"
itermminabs,"itermminabs( iterator:Object, W:integer )"
iterMod,"iterMod( iter0:Object, ...iterator:Object )"
itermprod,"itermprod( iterator:Object, W:integer )"
itermrange,"itermrange( iterator:Object, W:integer )"
itermsum,"itermsum( iterator:Object, W:integer )"
itermsumabs,"itermsumabs( iterator:Object, W:integer )"
itermsumabs2,"itermsumabs2( iterator:Object, W:integer )"
iterMultiply,"iterMultiply( iter0:Object, ...iterator:Object )"
iterNone,"iterNone( iterator:Object )"
iterNoneBy,"iterNoneBy( iterator:Object, predicate:Function[, thisArg:any ] )"
iterNonFibonacci,"iterNonFibonacci( [options:Object] )"
iterNth,"iterNth( iterator:Object, n:integer )"
iterPeriodicSinc,"iterPeriodicSinc( n:integer[, options:Object] )"
iterPipeline,"iterPipeline( iterFcn:Function|Array[, ...iterFcn:Function] )"
iterPop,"iterPop( iterator:Object[, clbk:Function[, thisArg:any]] )"
iterprod,"iterprod( iterator:Object )"
iterPulse,"iterPulse( [options:Object] )"
iterPush,"iterPush( iterator:Object, ...items:any )"
iterrange,"iterrange( iterator:Object )"
iterReject,"iterReject( iterator:Object, predicate:Function[, thisArg:any] )"
iterReplicate,"iterReplicate( iterator:Object, n:integer )"
iterReplicateBy,"iterReplicateBy( iterator:Object, fcn:Function[, thisArg:any] )"
iterSawtoothWave,"iterSawtoothWave( [options:Object] )"
iterShift,"iterShift( iterator:Object[, clbk:Function[, thisArg:any]] )"
iterSineWave,"iterSineWave( [options:Object] )"
iterSlice,"iterSlice( iterator:Object[, begin:integer[, end:integer]] )"
iterSome,"iterSome( iterator:Object, n:number )"
iterSomeBy,"iterSomeBy( iterator:Object, n:integer, predicate:Function[, thisArg:any ] )"
iterSquareWave,"iterSquareWave( [options:Object] )"
iterstdev,"iterstdev( iterator:Object[, mean:number] )"
iterSubtract,"iterSubtract( iter0:Object, ...iterator:Object )"
itersum,"itersum( iterator:Object )"
itersumabs,"itersumabs( iterator:Object )"
itersumabs2,"itersumabs2( iterator:Object )"
iterThunk,"iterThunk( iterFcn:Function[, ...args:any] )"
iterTriangleWave,"iterTriangleWave( [options:Object] )"
iterUnion,"iterUnion( iter0:Object, ...iterator:Object )"
iterUnique,"iterUnique( iterator:Object )"
iterUniqueBy,"iterUniqueBy( iterator:Object, predicate:Function[, thisArg:any] )"
iterUniqueByHash,"iterUniqueByHash( iterator:Object, hashFcn:Function[, thisArg:any] )"
iterUnshift,"iterUnshift( iterator:Object, ...items:any )"
itervariance,"itervariance( iterator:Object[, mean:number] )"
joinStream,"joinStream( [options:Object] )"
joinStream.factory,"joinStream.factory( [options:Object] )"
joinStream.objectMode,"joinStream.objectMode( [options:Object] )"
keyBy,"keyBy( collection:Array|TypedArray|Object, fcn:Function[, thisArg:any] )"
keyByRight,"keyByRight( collection:Array|TypedArray|Object, fcn:Function[, thisArg:any] )"
keysIn,"keysIn( obj:any )"
kruskalTest,"kruskalTest( ...x:Array[, options:Object] )"
kstest,"kstest( x:Array<number>, y:Function|string[, ...params:number][, options:Object] )"
LinkedList,"LinkedList()"
linspace,"linspace( start:number, stop:number[, length:integer] )"
LIU_NEGATIVE_OPINION_WORDS_EN,"LIU_NEGATIVE_OPINION_WORDS_EN()"
LIU_POSITIVE_OPINION_WORDS_EN,"LIU_POSITIVE_OPINION_WORDS_EN()"
LN_HALF,"LN_HALF"
LN_PI,"LN_PI"
LN_SQRT_TWO_PI,"LN_SQRT_TWO_PI"
LN_TWO_PI,"LN_TWO_PI"
LN2,"LN2"
LN10,"LN10"
LOG2E,"LOG2E"
LOG10E,"LOG10E"
logspace,"logspace( a:number, b:number[, length:integer] )"
lowercase,"lowercase( str:string )"
lowercaseKeys,"lowercaseKeys( obj:Object )"
lowess,"lowess( x:Array<number>, y:Array<number>[, options:Object] )"
lpad,"lpad( str:string, len:integer[, pad:string] )"
ltrim,"ltrim( str:string )"
MALE_FIRST_NAMES_EN,"MALE_FIRST_NAMES_EN()"
mapFun,"mapFun( fcn:Function, n:integer[, thisArg:any] )"
mapFunAsync,"mapFunAsync( fcn:Function, n:integer, [options:Object,] done:Function )"
mapFunAsync.factory,"mapFunAsync.factory( [options:Object,] fcn:Function )"
mapKeys,"mapKeys( obj:Object, transform:Function )"
mapKeysAsync,"mapKeysAsync( obj:Object, [options:Object,] transform:Function, done:Function )"
mapKeysAsync.factory,"mapKeysAsync.factory( [options:Object,] transform:Function )"
mapValues,"mapValues( obj:Object, transform:Function )"
mapValuesAsync,"mapValuesAsync( obj:Object, [options:Object,] transform:Function, done:Function )"
mapValuesAsync.factory,"mapValuesAsync.factory( [options:Object,] transform:Function )"
MAX_ARRAY_LENGTH,"MAX_ARRAY_LENGTH"
MAX_TYPED_ARRAY_LENGTH,"MAX_TYPED_ARRAY_LENGTH"
memoize,"memoize( fcn:Function[, hashFunction:Function] )"
merge,"merge( target:Object, ...source:Object )"
merge.factory,"merge.factory( options:Object )"
MILLISECONDS_IN_DAY,"MILLISECONDS_IN_DAY"
MILLISECONDS_IN_HOUR,"MILLISECONDS_IN_HOUR"
MILLISECONDS_IN_MINUTE,"MILLISECONDS_IN_MINUTE"
MILLISECONDS_IN_SECOND,"MILLISECONDS_IN_SECOND"
MILLISECONDS_IN_WEEK,"MILLISECONDS_IN_WEEK"
MINARD_NAPOLEONS_MARCH,"MINARD_NAPOLEONS_MARCH( [options:Object] )"
MINUTES_IN_DAY,"MINUTES_IN_DAY"
MINUTES_IN_HOUR,"MINUTES_IN_HOUR"
MINUTES_IN_WEEK,"MINUTES_IN_WEEK"
minutesInMonth,"minutesInMonth( [month:string|Date|integer[, year:integer]] )"
minutesInYear,"minutesInYear( [value:integer|Date] )"
MOBY_DICK,"MOBY_DICK()"
MONTH_NAMES_EN,"MONTH_NAMES_EN()"
MONTHS_IN_YEAR,"MONTHS_IN_YEAR"
moveProperty,"moveProperty( source:Object, prop:string, target:Object )"
namedtypedtuple,"namedtypedtuple( fields:Array<string>[, options:Object] )"
nativeClass,"nativeClass( value:any )"
ndarray,"ndarray( dtype:string, ndims:integer[, options:Object] )"
ndarrayCastingModes,"ndarrayCastingModes()"
ndarrayDataTypes,"ndarrayDataTypes()"
ndarrayIndexModes,"ndarrayIndexModes()"
ndarrayMemoized,"ndarrayMemoized( dtype:string, ndims:integer[, options:Object] )"
ndarrayMinDataType,"ndarrayMinDataType( value:any )"
ndarrayNextDataType,"ndarrayNextDataType( [dtype:string] )"
ndarrayOrders,"ndarrayOrders()"
ndarrayPromotionRules,"ndarrayPromotionRules( [dtype1:string, dtype2:string] )"
ndarraySafeCasts,"ndarraySafeCasts( [dtype:string] )"
ndarraySameKindCasts,"ndarraySameKindCasts( [dtype:string] )"
NIGHTINGALES_ROSE,"NIGHTINGALES_ROSE()"
NINF,"NINF"
NODE_VERSION,"NODE_VERSION"
none,"none( collection:Array|TypedArray|Object )"
noneBy,"noneBy( collection:Array|TypedArray|Object, predicate:Function[, thisArg:any ] )"
noneByAsync,"noneByAsync( collection:Array|TypedArray|Object, [options:Object,] predicate:Function, done:Function )"
noneByAsync.factory,"noneByAsync.factory( [options:Object,] predicate:Function )"
noneByRight,"noneByRight( collection:Array|TypedArray|Object, predicate:Function[, thisArg:any ] )"
noneByRightAsync,"noneByRightAsync( collection:Array|TypedArray|Object, [options:Object,] predicate:Function, done:Function )"
noneByRightAsync.factory,"noneByRightAsync.factory( [options:Object,] predicate:Function )"
nonEnumerableProperties,"nonEnumerableProperties( value:any )"
nonEnumerablePropertiesIn,"nonEnumerablePropertiesIn( value:any )"
nonEnumerablePropertyNames,"nonEnumerablePropertyNames( value:any )"
nonEnumerablePropertyNamesIn,"nonEnumerablePropertyNamesIn( value:any )"
nonEnumerablePropertySymbols,"nonEnumerablePropertySymbols( value:any )"
nonEnumerablePropertySymbolsIn,"nonEnumerablePropertySymbolsIn( value:any )"
noop,"noop()"
now,"now()"
NUM_CPUS,"NUM_CPUS"
Number,"Number( value:number )"
objectEntries,"objectEntries( obj:ObjectLike )"
objectEntriesIn,"objectEntriesIn( obj:ObjectLike )"
objectFromEntries,"objectFromEntries( entries:Array<Array> )"
objectInverse,"objectInverse( obj:ObjectLike[, options:Object] )"
objectInverseBy,"objectInverseBy( obj:ObjectLike, [options:Object,] transform:Function )"
objectKeys,"objectKeys( value:any )"
objectValues,"objectValues( obj:ObjectLike )"
objectValuesIn,"objectValuesIn( obj:ObjectLike )"
omit,"omit( obj:Object, keys:Array<string> )"
omitBy,"omitBy( obj:Object, predicate:Function )"
openURL,"openURL( url:string )"
PACE_BOSTON_HOUSE_PRICES,"PACE_BOSTON_HOUSE_PRICES()"
pad,"pad( str:string, len:integer[, options:Object] )"
papply,"papply( fcn:Function, ...args:any )"
papplyRight,"papplyRight( fcn:Function, ...args:any )"
parallel,"parallel( files:Array<string>, [options:Object,] clbk:Function )"
parseJSON,"parseJSON( str:string[, reviver:Function] )"
PATH_DELIMITER,"PATH_DELIMITER"
PATH_DELIMITER_POSIX,"PATH_DELIMITER_POSIX"
PATH_DELIMITER_WIN32,"PATH_DELIMITER_WIN32"
PATH_SEP,"PATH_SEP"
PATH_SEP_POSIX,"PATH_SEP_POSIX"
PATH_SEP_WIN32,"PATH_SEP_WIN32"
pcorrtest,"pcorrtest( x:Array<number>, y:Array<number>[, options:Object] )"
percentEncode,"percentEncode( str:string )"
PHI,"PHI"
PI,"PI"
PI_SQUARED,"PI_SQUARED"
pick,"pick( obj:Object, keys:Array<string> )"
pickBy,"pickBy( obj:Object, predicate:Function )"
PINF,"PINF"
pkg2alias,"pkg2alias( pkg:string )"
pkg2related,"pkg2related( pkg:string )"
PLATFORM,"PLATFORM"
plot,"plot( [x:Array<Array>, y:Array<Array>,] [options:Object] )"
Plot,"Plot( [x:Array<Array>, y:Array<Array>,] [options:Object] )"
pluck,"pluck( arr:Array, prop:string[, options:Object] )"
pop,"pop( collection:Array|TypedArray|Object )"
porterStemmer,"porterStemmer( word:string )"
prepend,"prepend( collection1:Array|TypedArray|Object, collection2:Array|TypedArray|Object )"
properties,"properties( value:any )"
propertiesIn,"propertiesIn( value:any )"
propertyDescriptor,"propertyDescriptor( value:any, property:string|symbol )"
propertyDescriptorIn,"propertyDescriptorIn( value:any, property:string|symbol )"
propertyDescriptors,"propertyDescriptors( value:any )"
propertyDescriptorsIn,"propertyDescriptorsIn( value:any )"
propertyNames,"propertyNames( value:any )"
propertyNamesIn,"propertyNamesIn( value:any )"
propertySymbols,"propertySymbols( value:any )"
propertySymbolsIn,"propertySymbolsIn( value:any )"
Proxy,"Proxy( target:Object, handlers:Object )"
Proxy.revocable,"Proxy.revocable( target:Object, handlers:Object )"
push,"push( collection:Array|TypedArray|Object, ...items:any )"
quarterOfYear,"quarterOfYear( [month:integer|string|Date] )"
random.iterators.arcsine,"random.iterators.arcsine( a:number, b:number[, options:Object] )"
random.iterators.bernoulli,"random.iterators.bernoulli( p:number[, options:Object] )"
random.iterators.beta,"random.iterators.beta( α:number, β:number[, options:Object] )"
random.iterators.betaprime,"random.iterators.betaprime( α:number, β:number[, options:Object] )"
random.iterators.binomial,"random.iterators.binomial( n:integer, p:number[, options:Object] )"
random.iterators.boxMuller,"random.iterators.boxMuller( [options:Object] )"
random.iterators.cauchy,"random.iterators.cauchy( x0:number, Ɣ:number[, options:Object] )"
random.iterators.chi,"random.iterators.chi( k:number[, options:Object] )"
random.iterators.chisquare,"random.iterators.chisquare( k:number[, options:Object] )"
random.iterators.cosine,"random.iterators.cosine( μ:number, s:number[, options:Object] )"
random.iterators.discreteUniform,"random.iterators.discreteUniform( a:integer, b:integer[, options:Object] )"
random.iterators.erlang,"random.iterators.erlang( k:integer, λ:number[, options:Object] )"
random.iterators.exponential,"random.iterators.exponential( λ:number[, options:Object] )"
random.iterators.f,"random.iterators.f( d1:number, d2:number[, options:Object] )"
random.iterators.frechet,"random.iterators.frechet( α:number, s:number, m:number[, options:Object] )"
random.iterators.gamma,"random.iterators.gamma( α:number, β:number[, options:Object] )"
random.iterators.geometric,"random.iterators.geometric( p:number[, options:Object] )"
random.iterators.gumbel,"random.iterators.gumbel( μ:number, β:number[, options:Object] )"
random.iterators.hypergeometric,"random.iterators.hypergeometric( N:integer, K:integer, n:integer[, options:Object] )"
random.iterators.improvedZiggurat,"random.iterators.improvedZiggurat( [options:Object] )"
random.iterators.invgamma,"random.iterators.invgamma( α:number, β:number[, options:Object] )"
random.iterators.kumaraswamy,"random.iterators.kumaraswamy( a:number, b:number[, options:Object] )"
random.iterators.laplace,"random.iterators.laplace( μ:number, b:number[, options:Object] )"
random.iterators.levy,"random.iterators.levy( μ:number, c:number[, options:Object] )"
random.iterators.logistic,"random.iterators.logistic( μ:number, s:number[, options:Object] )"
random.iterators.lognormal,"random.iterators.lognormal( μ:number, σ:number[, options:Object] )"
random.iterators.minstd,"random.iterators.minstd( [options:Object] )"
random.iterators.minstdShuffle,"random.iterators.minstdShuffle( [options:Object] )"
random.iterators.mt19937,"random.iterators.mt19937( [options:Object] )"
random.iterators.negativeBinomial,"random.iterators.negativeBinomial( r:number, p:number[, options:Object] )"
random.iterators.normal,"random.iterators.normal( μ:number, σ:number[, options:Object] )"
random.iterators.pareto1,"random.iterators.pareto1( α:number, β:number[, options:Object] )"
random.iterators.poisson,"random.iterators.poisson( λ:number[, options:Object] )"
random.iterators.randi,"random.iterators.randi( [options:Object] )"
random.iterators.randn,"random.iterators.randn( [options:Object] )"
random.iterators.randu,"random.iterators.randu( [options:Object] )"
random.iterators.rayleigh,"random.iterators.rayleigh( σ:number[, options:Object] )"
random.iterators.t,"random.iterators.t( v:number[, options:Object] )"
random.iterators.triangular,"random.iterators.triangular( a:number, b:number, c:number[, options:Object] )"
random.iterators.uniform,"random.iterators.uniform( a:number, b:number[, options:Object] )"
random.iterators.weibull,"random.iterators.weibull( k:number, λ:number[, options:Object] )"
random.streams.arcsine,"random.streams.arcsine( a:number, b:number[, options:Object] )"
random.streams.arcsine.factory,"random.streams.arcsine.factory( [a:number, b:number, ][options:Object] )"
random.streams.arcsine.objectMode,"random.streams.arcsine.objectMode( a:number, b:number[, options:Object] )"
random.streams.bernoulli,"random.streams.bernoulli( p:number[, options:Object] )"
random.streams.bernoulli.factory,"random.streams.bernoulli.factory( [p:number, ][options:Object] )"
random.streams.bernoulli.objectMode,"random.streams.bernoulli.objectMode( p:number[, options:Object] )"
random.streams.beta,"random.streams.beta( α:number, β:number[, options:Object] )"
random.streams.beta.factory,"random.streams.beta.factory( [α:number, β:number, ][options:Object] )"
random.streams.beta.objectMode,"random.streams.beta.objectMode( α:number, β:number[, options:Object] )"
random.streams.betaprime,"random.streams.betaprime( α:number, β:number[, options:Object] )"
random.streams.betaprime.factory,"random.streams.betaprime.factory( [α:number, β:number, ][options:Object] )"
random.streams.betaprime.objectMode,"random.streams.betaprime.objectMode( α:number, β:number[, options:Object] )"
random.streams.binomial,"random.streams.binomial( n:integer, p:number[, options:Object] )"
random.streams.binomial.factory,"random.streams.binomial.factory( [n:integer, p:number, ][options:Object] )"
random.streams.binomial.objectMode,"random.streams.binomial.objectMode( n:integer, p:number[, options:Object] )"
random.streams.boxMuller,"random.streams.boxMuller( [options:Object] )"
random.streams.boxMuller.factory,"random.streams.boxMuller.factory( [options:Object] )"
random.streams.boxMuller.objectMode,"random.streams.boxMuller.objectMode( [options:Object] )"
random.streams.cauchy,"random.streams.cauchy( x0:number, γ:number[, options:Object] )"
random.streams.cauchy.factory,"random.streams.cauchy.factory( [x0:number, γ:number, ][options:Object] )"
random.streams.cauchy.objectMode,"random.streams.cauchy.objectMode( x0:number, γ:number[, options:Object] )"
random.streams.chi,"random.streams.chi( k:number[, options:Object] )"
random.streams.chi.factory,"random.streams.chi.factory( [k:number, ][options:Object] )"
random.streams.chi.objectMode,"random.streams.chi.objectMode( k:number[, options:Object] )"
random.streams.chisquare,"random.streams.chisquare( k:number[, options:Object] )"
random.streams.chisquare.factory,"random.streams.chisquare.factory( [k:number, ][options:Object] )"
random.streams.chisquare.objectMode,"random.streams.chisquare.objectMode( k:number[, options:Object] )"
random.streams.cosine,"random.streams.cosine( μ:number, s:number[, options:Object] )"
random.streams.cosine.factory,"random.streams.cosine.factory( [μ:number, s:number, ][options:Object] )"
random.streams.cosine.objectMode,"random.streams.cosine.objectMode( μ:number, s:number[, options:Object] )"
random.streams.discreteUniform,"random.streams.discreteUniform( a:integer, b:integer[, options:Object] )"
random.streams.discreteUniform.factory,"random.streams.discreteUniform.factory( [a:integer, b:integer, ][options:Object] )"
random.streams.discreteUniform.objectMode,"random.streams.discreteUniform.objectMode( a:integer, b:integer[, options:Object] )"
random.streams.erlang,"random.streams.erlang( k:integer, λ:number[, options:Object] )"
random.streams.erlang.factory,"random.streams.erlang.factory( [k:number, λ:number, ][options:Object] )"
random.streams.erlang.objectMode,"random.streams.erlang.objectMode( k:number, λ:number[, options:Object] )"
random.streams.exponential,"random.streams.exponential( λ:number[, options:Object] )"
random.streams.exponential.factory,"random.streams.exponential.factory( [λ:number, ][options:Object] )"
random.streams.exponential.objectMode,"random.streams.exponential.objectMode( λ:number[, options:Object] )"
random.streams.f,"random.streams.f( d1:number, d2:number[, options:Object] )"
random.streams.f.factory,"random.streams.f.factory( [d1:number, d2:number, ][options:Object] )"
random.streams.f.objectMode,"random.streams.f.objectMode( d1:number, d2:number[, options:Object] )"
random.streams.frechet,"random.streams.frechet( α:number, s:number, m:number[, options:Object] )"
random.streams.frechet.factory,"random.streams.frechet.factory( [α:number, s:number, m:number,][options:Object] )"
random.streams.frechet.objectMode,"random.streams.frechet.objectMode( α:number, s:number, m:number[, options:Object] )"
random.streams.gamma,"random.streams.gamma( α:number, β:number[, options:Object] )"
random.streams.gamma.factory,"random.streams.gamma.factory( [α:number, β:number, ][options:Object] )"
random.streams.gamma.objectMode,"random.streams.gamma.objectMode( α:number, β:number[, options:Object] )"
random.streams.geometric,"random.streams.geometric( p:number[, options:Object] )"
random.streams.geometric.factory,"random.streams.geometric.factory( [p:number, ][options:Object] )"
random.streams.geometric.objectMode,"random.streams.geometric.objectMode( p:number[, options:Object] )"
random.streams.gumbel,"random.streams.gumbel( μ:number, β:number[, options:Object] )"
random.streams.gumbel.factory,"random.streams.gumbel.factory( [μ:number, β:number, ][options:Object] )"
random.streams.gumbel.objectMode,"random.streams.gumbel.objectMode( μ:number, β:number[, options:Object] )"
random.streams.hypergeometric,"random.streams.hypergeometric( N:integer, K:integer, n:integer[, options:Object] )"
random.streams.hypergeometric.factory,"random.streams.hypergeometric.factory( [N:integer, K:integer, n:integer,][options:Object] )"
random.streams.hypergeometric.objectMode,"random.streams.hypergeometric.objectMode( N:integer, K:integer, n:integer[, options:Object] )"
random.streams.improvedZiggurat,"random.streams.improvedZiggurat( [options:Object] )"
random.streams.improvedZiggurat.factory,"random.streams.improvedZiggurat.factory( [options:Object] )"
random.streams.improvedZiggurat.objectMode,"random.streams.improvedZiggurat.objectMode( [options:Object] )"
random.streams.invgamma,"random.streams.invgamma( α:number, β:number[, options:Object] )"
random.streams.invgamma.factory,"random.streams.invgamma.factory( [α:number, β:number, ][options:Object] )"
random.streams.invgamma.objectMode,"random.streams.invgamma.objectMode( α:number, β:number[, options:Object] )"
random.streams.kumaraswamy,"random.streams.kumaraswamy( a:number, b:number[, options:Object] )"
random.streams.kumaraswamy.factory,"random.streams.kumaraswamy.factory( [a:number, b:number, ][options:Object] )"
random.streams.kumaraswamy.objectMode,"random.streams.kumaraswamy.objectMode( a:number, b:number[, options:Object] )"
random.streams.laplace,"random.streams.laplace( μ:number, b:number[, options:Object] )"
random.streams.laplace.factory,"random.streams.laplace.factory( [μ:number, b:number, ][options:Object] )"
random.streams.laplace.objectMode,"random.streams.laplace.objectMode( μ:number, b:number[, options:Object] )"
random.streams.levy,"random.streams.levy( μ:number, c:number[, options:Object] )"
random.streams.levy.factory,"random.streams.levy.factory( [μ:number, c:number, ][options:Object] )"
random.streams.levy.objectMode,"random.streams.levy.objectMode( μ:number, c:number[, options:Object] )"
random.streams.logistic,"random.streams.logistic( μ:number, s:number[, options:Object] )"
random.streams.logistic.factory,"random.streams.logistic.factory( [μ:number, s:number, ][options:Object] )"
random.streams.logistic.objectMode,"random.streams.logistic.objectMode( μ:number, s:number[, options:Object] )"
random.streams.lognormal,"random.streams.lognormal( μ:number, σ:number[, options:Object] )"
random.streams.lognormal.factory,"random.streams.lognormal.factory( [μ:number, σ:number, ][options:Object] )"
random.streams.lognormal.objectMode,"random.streams.lognormal.objectMode( μ:number, σ:number[, options:Object] )"
random.streams.minstd,"random.streams.minstd( [options:Object] )"
random.streams.minstd.factory,"random.streams.minstd.factory( [options] )"
random.streams.minstd.objectMode,"random.streams.minstd.objectMode( [options:Object] )"
random.streams.minstdShuffle,"random.streams.minstdShuffle( [options:Object] )"
random.streams.minstdShuffle.factory,"random.streams.minstdShuffle.factory( [options] )"
random.streams.minstdShuffle.objectMode,"random.streams.minstdShuffle.objectMode( [options:Object] )"
random.streams.mt19937,"random.streams.mt19937( [options:Object] )"
random.streams.mt19937.factory,"random.streams.mt19937.factory( [options] )"
random.streams.mt19937.objectMode,"random.streams.mt19937.objectMode( [options:Object] )"
random.streams.negativeBinomial,"random.streams.negativeBinomial( r:number, p:number[, options:Object] )"
random.streams.negativeBinomial.factory,"random.streams.negativeBinomial.factory( [r:number, p:number, ][options:Object] )"
random.streams.negativeBinomial.objectMode,"random.streams.negativeBinomial.objectMode( r:integer, p:number[, options:Object] )"
random.streams.normal,"random.streams.normal( μ:number, σ:number[, options:Object] )"
random.streams.normal.factory,"random.streams.normal.factory( [μ:number, σ:number, ][options:Object] )"
random.streams.normal.objectMode,"random.streams.normal.objectMode( μ:number, σ:number[, options:Object] )"
random.streams.pareto1,"random.streams.pareto1( α:number, β:number[, options:Object] )"
random.streams.pareto1.factory,"random.streams.pareto1.factory( [α:number, β:number, ][options:Object] )"
random.streams.pareto1.objectMode,"random.streams.pareto1.objectMode( α:number, β:number[, options:Object] )"
random.streams.poisson,"random.streams.poisson( λ:number[, options:Object] )"
random.streams.poisson.factory,"random.streams.poisson.factory( [λ:number, ][options:Object] )"
random.streams.poisson.objectMode,"random.streams.poisson.objectMode( λ:number[, options:Object] )"
random.streams.randi,"random.streams.randi( [options:Object] )"
random.streams.randi.factory,"random.streams.randi.factory( [options] )"
random.streams.randi.objectMode,"random.streams.randi.objectMode( [options:Object] )"
random.streams.randn,"random.streams.randn( [options:Object] )"
random.streams.randn.factory,"random.streams.randn.factory( [options] )"
random.streams.randn.objectMode,"random.streams.randn.objectMode( [options:Object] )"
random.streams.randu,"random.streams.randu( [options:Object] )"
random.streams.randu.factory,"random.streams.randu.factory( [options] )"
random.streams.randu.objectMode,"random.streams.randu.objectMode( [options:Object] )"
random.streams.rayleigh,"random.streams.rayleigh( σ:number[, options:Object] )"
random.streams.rayleigh.factory,"random.streams.rayleigh.factory( [σ:number, ][options:Object] )"
random.streams.rayleigh.objectMode,"random.streams.rayleigh.objectMode( σ:number[, options:Object] )"
random.streams.t,"random.streams.t( v:number[, options:Object] )"
random.streams.t.factory,"random.streams.t.factory( [v:number, ][options:Object] )"
random.streams.t.objectMode,"random.streams.t.objectMode( v:number[, options:Object] )"
random.streams.triangular,"random.streams.triangular( a:number, b:number, c:number[, options:Object] )"
random.streams.triangular.factory,"random.streams.triangular.factory( [a:number, b:number, c:number, ][options:Object] )"
random.streams.triangular.objectMode,"random.streams.triangular.objectMode( a:number, b:number, c:number[, options:Object] )"
random.streams.uniform,"random.streams.uniform( a:number, b:number[, options:Object] )"
random.streams.uniform.factory,"random.streams.uniform.factory( [a:number, b:number, ][options:Object] )"
random.streams.uniform.objectMode,"random.streams.uniform.objectMode( a:number, b:number[, options:Object] )"
random.streams.weibull,"random.streams.weibull( k:number, λ:number[, options:Object] )"
random.streams.weibull.factory,"random.streams.weibull.factory( [k:number, λ:number, ][options:Object] )"
random.streams.weibull.objectMode,"random.streams.weibull.objectMode( k:number, λ:number[, options:Object] )"
ranks,"ranks( arr:Array<number>[, options:Object] )"
RE_BASENAME,"RE_BASENAME"
RE_BASENAME.posix,"RE_BASENAME.posix"
RE_BASENAME.win32,"RE_BASENAME.win32"
RE_BASENAME_POSIX,"RE_BASENAME_POSIX"
RE_BASENAME_WINDOWS,"RE_BASENAME_WINDOWS"
RE_COLOR_HEXADECIMAL,"RE_COLOR_HEXADECIMAL"
RE_COLOR_HEXADECIMAL.shorthand,"RE_COLOR_HEXADECIMAL.shorthand"
RE_COLOR_HEXADECIMAL.either,"RE_COLOR_HEXADECIMAL.either"
RE_DECIMAL_NUMBER,"RE_DECIMAL_NUMBER"
RE_DIRNAME,"RE_DIRNAME"
RE_DIRNAME.posix,"RE_DIRNAME.posix"
RE_DIRNAME.win32,"RE_DIRNAME.win32"
RE_DIRNAME_POSIX,"RE_DIRNAME_POSIX"
RE_DIRNAME_WINDOWS,"RE_DIRNAME_WINDOWS"
RE_EOL,"RE_EOL"
RE_EXTENDED_LENGTH_PATH,"RE_EXTENDED_LENGTH_PATH"
RE_EXTNAME,"RE_EXTNAME"
RE_EXTNAME.posix,"RE_EXTNAME.posix"
RE_EXTNAME.win32,"RE_EXTNAME.win32"
RE_EXTNAME_POSIX,"RE_EXTNAME_POSIX"
RE_EXTNAME_WINDOWS,"RE_EXTNAME_WINDOWS"
RE_FILENAME,"RE_FILENAME"
RE_FILENAME.posix,"RE_FILENAME.posix"
RE_FILENAME.win32,"RE_FILENAME.win32"
RE_FILENAME_POSIX,"RE_FILENAME_POSIX"
RE_FILENAME_WINDOWS,"RE_FILENAME_WINDOWS"
RE_FUNCTION_NAME,"RE_FUNCTION_NAME"
RE_NATIVE_FUNCTION,"RE_NATIVE_FUNCTION"
RE_REGEXP,"RE_REGEXP"
RE_UNC_PATH,"RE_UNC_PATH"
RE_UTF16_SURROGATE_PAIR,"RE_UTF16_SURROGATE_PAIR"
RE_UTF16_UNPAIRED_SURROGATE,"RE_UTF16_UNPAIRED_SURROGATE"
RE_WHITESPACE,"RE_WHITESPACE"
readDir,"readDir( path:string|Buffer, clbk:Function )"
readDir.sync,"readDir.sync( path:string|Buffer )"
readFile,"readFile( file:string|Buffer|integer[, options:Object|string], clbk:Function )"
readFile.sync,"readFile.sync( file:string|Buffer|integer[, options:Object|string] )"
readFileList,"readFileList( filepaths:Array<string>[, options:Object|string], clbk:Function )"
readFileList.sync,"readFileList.sync( filepaths:Array<string>[, options:Object|string] )"
readJSON,"readJSON( file:string|Buffer|integer[, options:Object|string], clbk:Function )"
readJSON.sync,"readJSON.sync( file:string|Buffer|integer[, options:Object|string] )"
readWASM,"readWASM( file:string|Buffer|integer[, options:Object], clbk:Function )"
readWASM.sync,"readWASM.sync( file:string|Buffer|integer[, options:Object] )"
real,"real( z:Complex )"
realmax,"realmax( dtype:string )"
realmin,"realmin( dtype:string )"
reduce,"reduce( collection:Array|TypedArray|Object, initial:any, reducer:Function[, thisArg:any] )"
reduceAsync,"reduceAsync( collection:Array|TypedArray|Object, initial:any, [options:Object,] reducer:Function, done:Function )"
reduceAsync.factory,"reduceAsync.factory( [options:Object,] fcn:Function )"
reduceRight,"reduceRight( collection:Array|TypedArray|Object, initial:any, reducer:Function[, thisArg:any] )"
reduceRightAsync,"reduceRightAsync( collection:Array|TypedArray|Object, initial:any, [options:Object,] reducer:Function, done:Function )"
reduceRightAsync.factory,"reduceRightAsync.factory( [options:Object,] fcn:Function )"
reFromString,"reFromString( str:string )"
reim,"reim( z:Complex )"
removeFirst,"removeFirst( str:string )"
removeLast,"removeLast( str:string )"
removePunctuation,"removePunctuation( str:string )"
removeUTF8BOM,"removeUTF8BOM( str:string )"
removeWords,"removeWords( str:string, words:Array<string>[, ignoreCase:boolean] )"
rename,"rename( oldPath:string|Buffer, newPath:string|Buffer, clbk:Function )"
rename.sync,"rename.sync( oldPath:string|Buffer, newPath:string|Buffer )"
reorderArguments,"reorderArguments( fcn:Function, indices:Array<integer>[, thisArg:any] )"
repeat,"repeat( str:string, n:integer )"
replace,"replace( str:string, search:string|RegExp, newval:string|Function )"
rescape,"rescape( str:string )"
resolveParentPath,"resolveParentPath( path:string[, options:Object], clbk:Function )"
resolveParentPath.sync,"resolveParentPath.sync( path:string[, options:Object] )"
reverseArguments,"reverseArguments( fcn:Function[, thisArg:any] )"
reverseString,"reverseString( str:string )"
reviveBasePRNG,"reviveBasePRNG( key:string, value:any )"
reviveBuffer,"reviveBuffer( key:string, value:any )"
reviveComplex,"reviveComplex( key:string, value:any )"
reviveComplex64,"reviveComplex64( key:string, value:any )"
reviveComplex128,"reviveComplex128( key:string, value:any )"
reviveError,"reviveError( key:string, value:any )"
reviveTypedArray,"reviveTypedArray( key:string, value:any )"
rpad,"rpad( str:string, len:integer[, pad:string] )"
rtrim,"rtrim( str:string )"
safeintmax,"safeintmax( dtype:string )"
safeintmin,"safeintmin( dtype:string )"
sample,"sample( x:ArrayLike[, options:Object] )"
sample.factory,"sample.factory( [pool:ArrayLike, ][options:Object] )"
SAVOY_STOPWORDS_FIN,"SAVOY_STOPWORDS_FIN()"
SAVOY_STOPWORDS_FR,"SAVOY_STOPWORDS_FR()"
SAVOY_STOPWORDS_GER,"SAVOY_STOPWORDS_GER()"
SAVOY_STOPWORDS_IT,"SAVOY_STOPWORDS_IT()"
SAVOY_STOPWORDS_POR,"SAVOY_STOPWORDS_POR()"
SAVOY_STOPWORDS_SP,"SAVOY_STOPWORDS_SP()"
SAVOY_STOPWORDS_SWE,"SAVOY_STOPWORDS_SWE()"
SECONDS_IN_DAY,"SECONDS_IN_DAY"
SECONDS_IN_HOUR,"SECONDS_IN_HOUR"
SECONDS_IN_MINUTE,"SECONDS_IN_MINUTE"
SECONDS_IN_WEEK,"SECONDS_IN_WEEK"
secondsInMonth,"secondsInMonth( [month:string|Date|integer[, year:integer]] )"
secondsInYear,"secondsInYear( [value:integer|Date] )"
setConfigurableReadOnly,"setConfigurableReadOnly( obj:Object, prop:string|symbol, value:any )"
setConfigurableReadOnlyAccessor,"setConfigurableReadOnlyAccessor( obj:Object, prop:string|symbol, getter:Function )"
setConfigurableReadWriteAccessor,"setConfigurableReadWriteAccessor( obj:Object, prop:string|symbol, getter:Function, setter:Function )"
setConfigurableWriteOnlyAccessor,"setConfigurableWriteOnlyAccessor( obj:Object, prop:string|symbol, setter:Function )"
setMemoizedConfigurableReadOnly,"setMemoizedConfigurableReadOnly( obj:Object, prop:string|symbol, fcn:Function )"
setMemoizedReadOnly,"setMemoizedReadOnly( obj:Object, prop:string|symbol, fcn:Function )"
setNonEnumerableProperty,"setNonEnumerableProperty( obj:Object, prop:string|symbol, value:any )"
setNonEnumerableReadOnly,"setNonEnumerableReadOnly( obj:Object, prop:string|symbol, value:any )"
setNonEnumerableReadOnlyAccessor,"setNonEnumerableReadOnlyAccessor( obj:Object, prop:string|symbol, getter:Function )"
setNonEnumerableReadWriteAccessor,"setNonEnumerableReadWriteAccessor( obj:Object, prop:string|symbol, getter:Function, setter:Function )"
setNonEnumerableWriteOnlyAccessor,"setNonEnumerableWriteOnlyAccessor( obj:Object, prop:string|symbol, setter:Function )"
setReadOnly,"setReadOnly( obj:Object, prop:string|symbol, value:any )"
setReadOnlyAccessor,"setReadOnlyAccessor( obj:Object, prop:string|symbol, getter:Function )"
setReadWriteAccessor,"setReadWriteAccessor( obj:Object, prop:string|symbol, getter:Function, setter:Function )"
setWriteOnlyAccessor,"setWriteOnlyAccessor( obj:Object, prop:string|symbol, setter:Function )"
SharedArrayBuffer,"SharedArrayBuffer( size:integer )"
SharedArrayBuffer.length,"SharedArrayBuffer.length"
SharedArrayBuffer.prototype.byteLength,"SharedArrayBuffer.prototype.byteLength"
SharedArrayBuffer.prototype.slice,"SharedArrayBuffer.prototype.slice( [start:integer[, end:integer]] )"
shift,"shift( collection:Array|TypedArray|Object )"
shuffle,"shuffle( arr:ArrayLike[, options:Object] )"
shuffle.factory,"shuffle.factory( [options:Object] )"
sizeOf,"sizeOf( dtype:string )"
some,"some( collection:Array|TypedArray|Object, n:number )"
someBy,"someBy( collection:Array|TypedArray|Object, n:number, predicate:Function[, thisArg:any ] )"
someByAsync,"someByAsync( collection:Array|TypedArray|Object, n:number, [options:Object,] predicate:Function, done:Function )"
someByAsync.factory,"someByAsync.factory( [options:Object,] predicate:Function )"
someByRight,"someByRight( collection:Array|TypedArray|Object, n:number, predicate:Function[, thisArg:any ] )"
someByRightAsync,"someByRightAsync( collection:Array|TypedArray|Object, n:number, [options:Object,] predicate:Function, done:Function )"
someByRightAsync.factory,"someByRightAsync.factory( [options:Object,] predicate:Function )"
SOTU,"SOTU( [options:Object] )"
SPACHE_REVISED,"SPACHE_REVISED()"
SPAM_ASSASSIN,"SPAM_ASSASSIN()"
SparklineBase,"SparklineBase( [data:ArrayLike|ndarray,] [options:Object] )"
sparsearray2iterator,"sparsearray2iterator( src:ArrayLikeObject[, mapFcn:Function[, thisArg:any]] )"
sparsearray2iteratorRight,"sparsearray2iteratorRight( src:ArrayLikeObject[, mapFcn:Function[, thisArg:any]] )"
splitStream,"splitStream( [options:Object] )"
splitStream.factory,"splitStream.factory( [options:Object] )"
splitStream.objectMode,"splitStream.objectMode( [options:Object] )"
SQRT_EPS,"SQRT_EPS"
SQRT_HALF,"SQRT_HALF"
SQRT_HALF_PI,"SQRT_HALF_PI"
SQRT_PHI,"SQRT_PHI"
SQRT_PI,"SQRT_PI"
SQRT_THREE,"SQRT_THREE"
SQRT_TWO,"SQRT_TWO"
SQRT_TWO_PI,"SQRT_TWO_PI"
Stack,"Stack()"
startcase,"startcase( str:string )"
startsWith,"startsWith( str:string, search:string[, position:integer] )"
STOPWORDS_EN,"STOPWORDS_EN()"
stridedarray2iterator,"stridedarray2iterator( N:integer, src:ArrayLikeObject, stride:integer, offset:integer[, mapFcn:Function[, thisArg:any]] )"
stridedArrayStream,"stridedArrayStream( N:integer, buffer:ArrayLikeObject, stride:integer, offset:integer[, options:Object] )"
stridedArrayStream.factory,"stridedArrayStream.factory( [options:Object] )"
stridedArrayStream.objectMode,"stridedArrayStream.objectMode( N:integer, buffer:ArrayLikeObject, stride:integer, offset:integer[, options:Object] )"
string2buffer,"string2buffer( str:string[, encoding:string] )"
sub2ind,"sub2ind( shape:ArrayLike, ...subscript:integer[, options:Object] )"
SUTHAHARAN_MULTI_HOP_SENSOR_NETWORK,"SUTHAHARAN_MULTI_HOP_SENSOR_NETWORK()"
SUTHAHARAN_SINGLE_HOP_SENSOR_NETWORK,"SUTHAHARAN_SINGLE_HOP_SENSOR_NETWORK()"
Symbol,"Symbol( [description:string] )"
tabulate,"tabulate( collection:Array|TypedArray|Object )"
tabulateBy,"tabulateBy( collection:Array|TypedArray|Object, [options:Object,] indicator:Function )"
tabulateByAsync,"tabulateByAsync( collection:Array|TypedArray|Object, [options:Object,] indicator:Function, done:Function )"
tabulateByAsync.factory,"tabulateByAsync.factory( [options:Object,] indicator:Function )"
tic,"tic()"
timeit,"timeit( code:string, [options:Object,] clbk:Function )"
tmpdir,"tmpdir()"
toc,"toc( time:Array<integer> )"
tokenize,"tokenize( str:string[, keepWhitespace:boolean] )"
transformStream,"transformStream( [options:Object] )"
transformStream.factory,"transformStream.factory( [options:Object] )"
transformStream.objectMode,"transformStream.objectMode( [options:Object] )"
transformStream.ctor,"transformStream.ctor( [options:Object] )"
trim,"trim( str:string )"
trycatch,"trycatch( x:Function, y:any )"
trycatchAsync,"trycatchAsync( x:Function, y:any, done:Function )"
tryFunction,"tryFunction( fcn:Function[, thisArg:any] )"
tryRequire,"tryRequire( id:string )"
trythen,"trythen( x:Function, y:Function )"
trythenAsync,"trythenAsync( x:Function, y:Function, done:Function )"
ttest,"ttest( x:Array<number>[, y:Array<number>][, options:Object] )"
ttest2,"ttest2( x:Array<number>, y:Array<number>[, options:Object] )"
TWO_PI,"TWO_PI"
typedarray,"typedarray( [dtype:string] )"
typedarray,"typedarray( length:integer[, dtype:string] )"
typedarray,"typedarray( typedarray:TypedArray[, dtype:string] )"
typedarray,"typedarray( obj:Object[, dtype:string] )"
typedarray,"typedarray( buffer:ArrayBuffer[, byteOffset:integer[, length:integer]][, dtype:string] )"
typedarray2json,"typedarray2json( arr:TypedArray )"
typedarrayComplexCtors,"typedarrayComplexCtors( dtype:string )"
typedarrayComplexDataTypes,"typedarrayComplexDataTypes()"
typedarrayCtors,"typedarrayCtors( dtype:string )"
typedarrayDataTypes,"typedarrayDataTypes()"
typedarraypool,"typedarraypool( [dtype:string] )"
typedarraypool,"typedarraypool( length:integer[, dtype:string] )"
typedarraypool,"typedarraypool( typedarray:TypedArray[, dtype:string] )"
typedarraypool,"typedarraypool( obj:Object[, dtype:string] )"
typedarraypool.malloc,"typedarraypool.malloc( [dtype:string] )"
typedarraypool.malloc,"typedarraypool.malloc( length:integer[, dtype:string] )"
typedarraypool.malloc,"typedarraypool.malloc( typedarray:TypedArray[, dtype:string] )"
typedarraypool.malloc,"typedarraypool.malloc( obj:Object[, dtype:string] )"
typedarraypool.calloc,"typedarraypool.calloc( [dtype:string] )"
typedarraypool.calloc,"typedarraypool.calloc( length:integer[, dtype:string] )"
typedarraypool.free,"typedarraypool.free( buf:TypedArray|ArrayBuffer )"
typedarraypool.clear,"typedarraypool.clear()"
typedarraypool.highWaterMark,"typedarraypool.highWaterMark"
typedarraypool.nbytes,"typedarraypool.nbytes"
typedarraypool.factory,"typedarraypool.factory( [options:Object] )"
typemax,"typemax( dtype:string )"
typemin,"typemin( dtype:string )"
typeOf,"typeOf( value:any )"
UINT8_MAX,"UINT8_MAX"
UINT8_NUM_BYTES,"UINT8_NUM_BYTES"
Uint8Array,"Uint8Array()"
Uint8Array,"Uint8Array( length:integer )"
Uint8Array,"Uint8Array( typedarray:TypedArray )"
Uint8Array,"Uint8Array( obj:Object )"
Uint8Array,"Uint8Array( buffer:ArrayBuffer[, byteOffset:integer[, length:integer]] )"
Uint8Array.from,"Uint8Array.from( src:ArrayLike|Iterable[, map:Function[, thisArg:Any]] )"
Uint8Array.of,"Uint8Array.of( element0:number[, element1:number[, ...elementN:number]] )"
Uint8Array.BYTES_PER_ELEMENT,"Uint8Array.BYTES_PER_ELEMENT"
Uint8Array.name,"Uint8Array.name"
Uint8Array.prototype.buffer,"Uint8Array.prototype.buffer"
Uint8Array.prototype.byteLength,"Uint8Array.prototype.byteLength"
Uint8Array.prototype.byteOffset,"Uint8Array.prototype.byteOffset"
Uint8Array.prototype.BYTES_PER_ELEMENT,"Uint8Array.prototype.BYTES_PER_ELEMENT"
Uint8Array.prototype.length,"Uint8Array.prototype.length"
Uint8Array.prototype.copyWithin,"Uint8Array.prototype.copyWithin( target:integer, start:integer[, end:integer] )"
Uint8Array.prototype.entries,"Uint8Array.prototype.entries()"
Uint8Array.prototype.every,"Uint8Array.prototype.every( predicate:Function[, thisArg:Any] )"
Uint8Array.prototype.fill,"Uint8Array.prototype.fill( value:number[, start:integer[, end:integer]] )"
Uint8Array.prototype.filter,"Uint8Array.prototype.filter( predicate:Function[, thisArg:Any] )"
Uint8Array.prototype.find,"Uint8Array.prototype.find( predicate:Function[, thisArg:Any] )"
Uint8Array.prototype.findIndex,"Uint8Array.prototype.findIndex( predicate:Function[, thisArg:Any] )"
Uint8Array.prototype.forEach,"Uint8Array.prototype.forEach( fcn:Function[, thisArg:Any] )"
Uint8Array.prototype.includes,"Uint8Array.prototype.includes( searchElement:number[, fromIndex:integer] )"
Uint8Array.prototype.indexOf,"Uint8Array.prototype.indexOf( searchElement:number[, fromIndex:integer] )"
Uint8Array.prototype.join,"Uint8Array.prototype.join( [separator:string] )"
Uint8Array.prototype.keys,"Uint8Array.prototype.keys()"
Uint8Array.prototype.lastIndexOf,"Uint8Array.prototype.lastIndexOf( searchElement:number[, fromIndex:integer] )"
Uint8Array.prototype.map,"Uint8Array.prototype.map( fcn:Function[, thisArg:Any] )"
Uint8Array.prototype.reduce,"Uint8Array.prototype.reduce( fcn:Function[, initialValue:Any] )"
Uint8Array.prototype.reduceRight,"Uint8Array.prototype.reduceRight( fcn:Function[, initialValue:Any] )"
Uint8Array.prototype.reverse,"Uint8Array.prototype.reverse()"
Uint8Array.prototype.set,"Uint8Array.prototype.set( arr:ArrayLike[, offset:integer] )"
Uint8Array.prototype.slice,"Uint8Array.prototype.slice( [begin:integer[, end:integer]] )"
Uint8Array.prototype.some,"Uint8Array.prototype.some( predicate:Function[, thisArg:Any] )"
Uint8Array.prototype.sort,"Uint8Array.prototype.sort( [compareFunction:Function] )"
Uint8Array.prototype.subarray,"Uint8Array.prototype.subarray( [begin:integer[, end:integer]] )"
Uint8Array.prototype.toLocaleString,"Uint8Array.prototype.toLocaleString( [locales:Array<string>[, options:Object]] )"
Uint8Array.prototype.toString,"Uint8Array.prototype.toString()"
Uint8Array.prototype.values,"Uint8Array.prototype.values()"
Uint8ClampedArray,"Uint8ClampedArray()"
Uint8ClampedArray,"Uint8ClampedArray( length:integer )"
Uint8ClampedArray,"Uint8ClampedArray( typedarray:TypedArray )"
Uint8ClampedArray,"Uint8ClampedArray( obj:Object )"
Uint8ClampedArray,"Uint8ClampedArray( buffer:ArrayBuffer[, byteOffset:integer[, length:integer]] )"
Uint8ClampedArray.from,"Uint8ClampedArray.from( src:ArrayLike|Iterable[, map:Function[, thisArg:Any]] )"
Uint8ClampedArray.of,"Uint8ClampedArray.of( element0:number[, element1:number[, ...elementN:number]] )"
Uint8ClampedArray.BYTES_PER_ELEMENT,"Uint8ClampedArray.BYTES_PER_ELEMENT"
Uint8ClampedArray.name,"Uint8ClampedArray.name"
Uint8ClampedArray.prototype.buffer,"Uint8ClampedArray.prototype.buffer"
Uint8ClampedArray.prototype.byteLength,"Uint8ClampedArray.prototype.byteLength"
Uint8ClampedArray.prototype.byteOffset,"Uint8ClampedArray.prototype.byteOffset"
Uint8ClampedArray.prototype.BYTES_PER_ELEMENT,"Uint8ClampedArray.prototype.BYTES_PER_ELEMENT"
Uint8ClampedArray.prototype.length,"Uint8ClampedArray.prototype.length"
Uint8ClampedArray.prototype.copyWithin,"Uint8ClampedArray.prototype.copyWithin( target:integer, start:integer[, end:integer] )"
Uint8ClampedArray.prototype.entries,"Uint8ClampedArray.prototype.entries()"
Uint8ClampedArray.prototype.every,"Uint8ClampedArray.prototype.every( predicate:Function[, thisArg:Any] )"
Uint8ClampedArray.prototype.fill,"Uint8ClampedArray.prototype.fill( value:number[, start:integer[, end:integer]] )"
Uint8ClampedArray.prototype.filter,"Uint8ClampedArray.prototype.filter( predicate:Function[, thisArg:Any] )"
Uint8ClampedArray.prototype.find,"Uint8ClampedArray.prototype.find( predicate:Function[, thisArg:Any] )"
Uint8ClampedArray.prototype.findIndex,"Uint8ClampedArray.prototype.findIndex( predicate:Function[, thisArg:Any] )"
Uint8ClampedArray.prototype.forEach,"Uint8ClampedArray.prototype.forEach( fcn:Function[, thisArg:Any] )"
Uint8ClampedArray.prototype.includes,"Uint8ClampedArray.prototype.includes( searchElement:number[, fromIndex:integer] )"
Uint8ClampedArray.prototype.indexOf,"Uint8ClampedArray.prototype.indexOf( searchElement:number[, fromIndex:integer] )"
Uint8ClampedArray.prototype.join,"Uint8ClampedArray.prototype.join( [separator:string] )"
Uint8ClampedArray.prototype.keys,"Uint8ClampedArray.prototype.keys()"
Uint8ClampedArray.prototype.lastIndexOf,"Uint8ClampedArray.prototype.lastIndexOf( searchElement:number[, fromIndex:integer] )"
Uint8ClampedArray.prototype.map,"Uint8ClampedArray.prototype.map( fcn:Function[, thisArg:Any] )"
Uint8ClampedArray.prototype.reduce,"Uint8ClampedArray.prototype.reduce( fcn:Function[, initialValue:Any] )"
Uint8ClampedArray.prototype.reduceRight,"Uint8ClampedArray.prototype.reduceRight( fcn:Function[, initialValue:Any] )"
Uint8ClampedArray.prototype.reverse,"Uint8ClampedArray.prototype.reverse()"
Uint8ClampedArray.prototype.set,"Uint8ClampedArray.prototype.set( arr:ArrayLike[, offset:integer] )"
Uint8ClampedArray.prototype.slice,"Uint8ClampedArray.prototype.slice( [begin:integer[, end:integer]] )"
Uint8ClampedArray.prototype.some,"Uint8ClampedArray.prototype.some( predicate:Function[, thisArg:Any] )"
Uint8ClampedArray.prototype.sort,"Uint8ClampedArray.prototype.sort( [compareFunction:Function] )"
Uint8ClampedArray.prototype.subarray,"Uint8ClampedArray.prototype.subarray( [begin:integer[, end:integer]] )"
Uint8ClampedArray.prototype.toLocaleString,"Uint8ClampedArray.prototype.toLocaleString( [locales:Array<string>[, options:Object]] )"
Uint8ClampedArray.prototype.toString,"Uint8ClampedArray.prototype.toString()"
Uint8ClampedArray.prototype.values,"Uint8ClampedArray.prototype.values()"
UINT16_MAX,"UINT16_MAX"
UINT16_NUM_BYTES,"UINT16_NUM_BYTES"
Uint16Array,"Uint16Array()"
Uint16Array,"Uint16Array( length:integer )"
Uint16Array,"Uint16Array( typedarray:TypedArray )"
Uint16Array,"Uint16Array( obj:Object )"
Uint16Array,"Uint16Array( buffer:ArrayBuffer[, byteOffset:integer[, length:integer]] )"
Uint16Array.from,"Uint16Array.from( src:ArrayLike|Iterable[, map:Function[, thisArg:Any]] )"
Uint16Array.of,"Uint16Array.of( element0:number[, element1:number[, ...elementN:number]] )"
Uint16Array.BYTES_PER_ELEMENT,"Uint16Array.BYTES_PER_ELEMENT"
Uint16Array.name,"Uint16Array.name"
Uint16Array.prototype.buffer,"Uint16Array.prototype.buffer"
Uint16Array.prototype.byteLength,"Uint16Array.prototype.byteLength"
Uint16Array.prototype.byteOffset,"Uint16Array.prototype.byteOffset"
Uint16Array.prototype.BYTES_PER_ELEMENT,"Uint16Array.prototype.BYTES_PER_ELEMENT"
Uint16Array.prototype.length,"Uint16Array.prototype.length"
Uint16Array.prototype.copyWithin,"Uint16Array.prototype.copyWithin( target:integer, start:integer[, end:integer] )"
Uint16Array.prototype.entries,"Uint16Array.prototype.entries()"
Uint16Array.prototype.every,"Uint16Array.prototype.every( predicate:Function[, thisArg:Any] )"
Uint16Array.prototype.fill,"Uint16Array.prototype.fill( value:number[, start:integer[, end:integer]] )"
Uint16Array.prototype.filter,"Uint16Array.prototype.filter( predicate:Function[, thisArg:Any] )"
Uint16Array.prototype.find,"Uint16Array.prototype.find( predicate:Function[, thisArg:Any] )"
Uint16Array.prototype.findIndex,"Uint16Array.prototype.findIndex( predicate:Function[, thisArg:Any] )"
Uint16Array.prototype.forEach,"Uint16Array.prototype.forEach( fcn:Function[, thisArg:Any] )"
Uint16Array.prototype.includes,"Uint16Array.prototype.includes( searchElement:number[, fromIndex:integer] )"
Uint16Array.prototype.indexOf,"Uint16Array.prototype.indexOf( searchElement:number[, fromIndex:integer] )"
Uint16Array.prototype.join,"Uint16Array.prototype.join( [separator:string] )"
Uint16Array.prototype.keys,"Uint16Array.prototype.keys()"
Uint16Array.prototype.lastIndexOf,"Uint16Array.prototype.lastIndexOf( searchElement:number[, fromIndex:integer] )"
Uint16Array.prototype.map,"Uint16Array.prototype.map( fcn:Function[, thisArg:Any] )"
Uint16Array.prototype.reduce,"Uint16Array.prototype.reduce( fcn:Function[, initialValue:Any] )"
Uint16Array.prototype.reduceRight,"Uint16Array.prototype.reduceRight( fcn:Function[, initialValue:Any] )"
Uint16Array.prototype.reverse,"Uint16Array.prototype.reverse()"
Uint16Array.prototype.set,"Uint16Array.prototype.set( arr:ArrayLike[, offset:integer] )"
Uint16Array.prototype.slice,"Uint16Array.prototype.slice( [begin:integer[, end:integer]] )"
Uint16Array.prototype.some,"Uint16Array.prototype.some( predicate:Function[, thisArg:Any] )"
Uint16Array.prototype.sort,"Uint16Array.prototype.sort( [compareFunction:Function] )"
Uint16Array.prototype.subarray,"Uint16Array.prototype.subarray( [begin:integer[, end:integer]] )"
Uint16Array.prototype.toLocaleString,"Uint16Array.prototype.toLocaleString( [locales:Array<string>[, options:Object]] )"
Uint16Array.prototype.toString,"Uint16Array.prototype.toString()"
Uint16Array.prototype.values,"Uint16Array.prototype.values()"
UINT32_MAX,"UINT32_MAX"
UINT32_NUM_BYTES,"UINT32_NUM_BYTES"
Uint32Array,"Uint32Array()"
Uint32Array,"Uint32Array( length:integer )"
Uint32Array,"Uint32Array( typedarray:TypedArray )"
Uint32Array,"Uint32Array( obj:Object )"
Uint32Array,"Uint32Array( buffer:ArrayBuffer[, byteOffset:integer[, length:integer]] )"
Uint32Array.from,"Uint32Array.from( src:ArrayLike|Iterable[, map:Function[, thisArg:Any]] )"
Uint32Array.of,"Uint32Array.of( element0:number[, element1:number[, ...elementN:number]] )"
Uint32Array.BYTES_PER_ELEMENT,"Uint32Array.BYTES_PER_ELEMENT"
Uint32Array.name,"Uint32Array.name"
Uint32Array.prototype.buffer,"Uint32Array.prototype.buffer"
Uint32Array.prototype.byteLength,"Uint32Array.prototype.byteLength"
Uint32Array.prototype.byteOffset,"Uint32Array.prototype.byteOffset"
Uint32Array.prototype.BYTES_PER_ELEMENT,"Uint32Array.prototype.BYTES_PER_ELEMENT"
Uint32Array.prototype.length,"Uint32Array.prototype.length"
Uint32Array.prototype.copyWithin,"Uint32Array.prototype.copyWithin( target:integer, start:integer[, end:integer] )"
Uint32Array.prototype.entries,"Uint32Array.prototype.entries()"
Uint32Array.prototype.every,"Uint32Array.prototype.every( predicate:Function[, thisArg:Any] )"
Uint32Array.prototype.fill,"Uint32Array.prototype.fill( value:number[, start:integer[, end:integer]] )"
Uint32Array.prototype.filter,"Uint32Array.prototype.filter( predicate:Function[, thisArg:Any] )"
Uint32Array.prototype.find,"Uint32Array.prototype.find( predicate:Function[, thisArg:Any] )"
Uint32Array.prototype.findIndex,"Uint32Array.prototype.findIndex( predicate:Function[, thisArg:Any] )"
Uint32Array.prototype.forEach,"Uint32Array.prototype.forEach( fcn:Function[, thisArg:Any] )"
Uint32Array.prototype.includes,"Uint32Array.prototype.includes( searchElement:number[, fromIndex:integer] )"
Uint32Array.prototype.indexOf,"Uint32Array.prototype.indexOf( searchElement:number[, fromIndex:integer] )"
Uint32Array.prototype.join,"Uint32Array.prototype.join( [separator:string] )"
Uint32Array.prototype.keys,"Uint32Array.prototype.keys()"
Uint32Array.prototype.lastIndexOf,"Uint32Array.prototype.lastIndexOf( searchElement:number[, fromIndex:integer] )"
Uint32Array.prototype.map,"Uint32Array.prototype.map( fcn:Function[, thisArg:Any] )"
Uint32Array.prototype.reduce,"Uint32Array.prototype.reduce( fcn:Function[, initialValue:Any] )"
Uint32Array.prototype.reduceRight,"Uint32Array.prototype.reduceRight( fcn:Function[, initialValue:Any] )"
Uint32Array.prototype.reverse,"Uint32Array.prototype.reverse()"
Uint32Array.prototype.set,"Uint32Array.prototype.set( arr:ArrayLike[, offset:integer] )"
Uint32Array.prototype.slice,"Uint32Array.prototype.slice( [begin:integer[, end:integer]] )"
Uint32Array.prototype.some,"Uint32Array.prototype.some( predicate:Function[, thisArg:Any] )"
Uint32Array.prototype.sort,"Uint32Array.prototype.sort( [compareFunction:Function] )"
Uint32Array.prototype.subarray,"Uint32Array.prototype.subarray( [begin:integer[, end:integer]] )"
Uint32Array.prototype.toLocaleString,"Uint32Array.prototype.toLocaleString( [locales:Array<string>[, options:Object]] )"
Uint32Array.prototype.toString,"Uint32Array.prototype.toString()"
Uint32Array.prototype.values,"Uint32Array.prototype.values()"
umask,"umask( [mask:integer|string,] [options:Object] )"
uncapitalize,"uncapitalize( str:string )"
uncapitalizeKeys,"uncapitalizeKeys( obj:Object )"
uncurry,"uncurry( fcn:Function[, arity:integer, ][thisArg:any] )"
uncurryRight,"uncurryRight( fcn:Function[, arity:integer, ][thisArg:any] )"
UNICODE_MAX,"UNICODE_MAX"
UNICODE_MAX_BMP,"UNICODE_MAX_BMP"
UnicodeColumnChartSparkline,"UnicodeColumnChartSparkline( [data:ArrayLike|ndarray,] [options:Object] )"
UnicodeLineChartSparkline,"UnicodeLineChartSparkline( [data:ArrayLike|ndarray,] [options:Object] )"
UnicodeSparkline,"UnicodeSparkline( [data:ArrayLike|ndarray,] [options:Object] )"
UnicodeTristateChartSparkline,"UnicodeTristateChartSparkline( [data:ArrayLike|ndarray,] [options:Object] )"
UnicodeUpDownChartSparkline,"UnicodeUpDownChartSparkline( [data:ArrayLike|ndarray,] [options:Object] )"
UnicodeWinLossChartSparkline,"UnicodeWinLossChartSparkline( [data:ArrayLike|ndarray,] [options:Object] )"
unlink,"unlink( path:string|Buffer|integer, clbk:Function )"
unlink.sync,"unlink.sync( path:string|Buffer|integer )"
unshift,"unshift( collection:Array|TypedArray|Object, ...items:any )"
until,"until( predicate:Function, fcn:Function[, thisArg:any] )"
untilAsync,"untilAsync( predicate:Function, fcn:Function, done:Function[, thisArg:any] )"
untilEach,"untilEach( collection:Array|TypedArray|Object, predicate:Function, fcn:Function[, thisArg:any] )"
untilEachRight,"untilEachRight( collection:Array|TypedArray|Object, predicate:Function, fcn:Function[, thisArg:any] )"
unzip,"unzip( arr:Array[, idx:Array<number>] )"
uppercase,"uppercase( str:string )"
uppercaseKeys,"uppercaseKeys( obj:Object )"
US_STATES_ABBR,"US_STATES_ABBR()"
US_STATES_CAPITALS,"US_STATES_CAPITALS()"
US_STATES_CAPITALS_NAMES,"US_STATES_CAPITALS_NAMES()"
US_STATES_NAMES,"US_STATES_NAMES()"
US_STATES_NAMES_CAPITALS,"US_STATES_NAMES_CAPITALS()"
utf16ToUTF8Array,"utf16ToUTF8Array( str:string )"
vartest,"vartest( x:Array<number>, y:Array<number>[, options:Object] )"
waterfall,"waterfall( fcns:Array<Function>, clbk:Function[, thisArg:any] )"
waterfall.factory,"waterfall.factory( fcns:Array<Function>, clbk:Function[, thisArg:any] )"
whileAsync,"whileAsync( predicate:Function, fcn:Function, done:Function[, thisArg:any] )"
whileEach,"whileEach( collection:Array|TypedArray|Object, predicate:Function, fcn:Function[, thisArg:any] )"
whileEachRight,"whileEachRight( collection:Array|TypedArray|Object, predicate:Function, fcn:Function[, thisArg:any] )"
whilst,"whilst( predicate:Function, fcn:Function[, thisArg:any] )"
writableProperties,"writableProperties( value:any )"
writablePropertiesIn,"writablePropertiesIn( value:any )"
writablePropertyNames,"writablePropertyNames( value:any )"
writablePropertyNamesIn,"writablePropertyNamesIn( value:any )"
writablePropertySymbols,"writablePropertySymbols( value:any )"
writablePropertySymbolsIn,"writablePropertySymbolsIn( value:any )"
writeFile,"writeFile( file:string|Buffer|integer, data:string|Buffer[, options:Object|string], clbk:Function )"
writeFile.sync,"writeFile.sync( file:string|Buffer|integer, data:string|Buffer[, options:Object|string] )"
zip,"zip( ...arr:Array[, options:Object] )"
ztest,"ztest( x:Array<number>, sigma:number[, options:Object] )"
ztest2,"ztest2( x:Array<number>, y:Array<number>, sigmax:number, sigmay:number[, options:Object] )"
