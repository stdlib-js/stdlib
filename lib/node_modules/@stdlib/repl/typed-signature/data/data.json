[["abs","abs( x:ndarray|ArrayLikeObject|number[, options:Object] )"],["abs.assign","abs.assign( x:ndarray|ArrayLikeObject, y:ndarray|ArrayLikeObject )"],["acartesianPower","acartesianPower( x:ArrayLikeObject, n:integer )"],["acartesianProduct","acartesianProduct( x1:ArrayLikeObject, x2:ArrayLikeObject )"],["acartesianSquare","acartesianSquare( x:ArrayLikeObject )"],["acronym","acronym( str:string[, options:Object] )"],["aempty","aempty( length:integer[, dtype:string] )"],["aemptyLike","aemptyLike( x:TypedArray|Array[, dtype:string] )"],["AFINN_96","AFINN_96()"],["AFINN_111","AFINN_111()"],["afull","afull( length:integer, value:any[, dtype:string] )"],["afullLike","afullLike( x:TypedArray|Array[, dtype:string] )"],["alias2pkg","alias2pkg( alias:string )"],["alias2related","alias2related( alias:string )"],["alias2standalone","alias2standalone( alias:string )"],["aliases","aliases( [namespace:string] )"],["allocUnsafe","allocUnsafe( size:integer )"],["amskfilter","amskfilter( x:Array|TypedArray|Object, mask:Array|TypedArray|Object )"],["amskput","amskput( x:ArrayLikeObject, mask:ArrayLikeObject, values:ArrayLikeObject[, options:Object] )"],["amskreject","amskreject( x:Array|TypedArray|Object, mask:Array|TypedArray|Object )"],["anans","anans( length:integer[, dtype:string] )"],["anansLike","anansLike( x:TypedArray|Array[, dtype:string] )"],["anova1","anova1( x:Array<number>, factor:Array[, options:Object] )"],["ANSCOMBES_QUARTET","ANSCOMBES_QUARTET()"],["any","any( collection:Array|TypedArray|Object )"],["anyBy","anyBy( collection:Array|TypedArray|Object, predicate:Function[, thisArg:any ] )"],["anyByAsync","anyByAsync( collection:Array|TypedArray|Object, [options:Object,] predicate:Function, done:Function )"],["anyByAsync.factory","anyByAsync.factory( [options:Object,] predicate:Function )"],["anyByRight","anyByRight( collection:Array|TypedArray|Object, predicate:Function[, thisArg:any ] )"],["anyByRightAsync","anyByRightAsync( collection:Array|TypedArray|Object, [options:Object,] predicate:Function, done:Function )"],["anyByRightAsync.factory","anyByRightAsync.factory( [options:Object,] predicate:Function )"],["anyInBy","anyInBy( object:Object, predicate:Function[, thisArg:any ] )"],["anyOwnBy","anyOwnBy( object:Object, predicate:Function[, thisArg:any ] )"],["aones","aones( length:integer[, dtype:string] )"],["aonesLike","aonesLike( x:TypedArray|Array[, dtype:string] )"],["aoneTo","aoneTo( n:integer[, dtype:string] )"],["aoneToLike","aoneToLike( x:TypedArray|Array[, dtype:string] )"],["APERY","APERY"],["aplace","aplace( x:ArrayLikeObject, mask:ArrayLikeObject, values:ArrayLikeObject[, options:Object] )"],["append","append( collection1:Array|TypedArray|Object, collection2:Array|TypedArray|Object )"],["aput","aput( x:ArrayLikeObject, indices:ArrayLikeObject<integer>, values:ArrayLikeObject[, options:Object] )"],["ARCH","ARCH"],["argumentFunction","argumentFunction( idx:integer )"],["ARGV","ARGV"],["array","array( [buffer:Array|TypedArray|Buffer|ndarray,] [options:Object] )"],["array2buffer","array2buffer( arr:Array<integer> )"],["array2fancy","array2fancy( x:Array|TypedArray|Object[, options:Object] )"],["array2fancy.factory","array2fancy.factory( [options:Object] )"],["array2fancy.idx","array2fancy.idx( x:Array|TypedArray|Object[, options:Object] )"],["array2iterator","array2iterator( src:ArrayLikeObject[, mapFcn:Function[, thisArg:any]] )"],["array2iteratorRight","array2iteratorRight( src:ArrayLikeObject[, mapFcn:Function[, thisArg:any]] )"],["ArrayBuffer","ArrayBuffer( size:integer )"],["ArrayBuffer.length","ArrayBuffer.length"],["ArrayBuffer.isView","ArrayBuffer.isView( arr:any )"],["ArrayBuffer.prototype.byteLength","ArrayBuffer.prototype.byteLength"],["ArrayBuffer.prototype.slice","ArrayBuffer.prototype.slice( [start:integer[, end:integer]] )"],["arraybuffer2buffer","arraybuffer2buffer( buf:ArrayBuffer[, byteOffset:integer[, length:integer]] )"],["arrayCtors","arrayCtors( dtype:string )"],["arrayDataType","arrayDataType( array:any )"],["arrayDataTypes","arrayDataTypes( [kind:string] )"],["ArrayIndex","ArrayIndex( x:Array|TypedArray|Object[, options:Object] )"],["ArrayIndex.free","ArrayIndex.free( id:string )"],["ArrayIndex.get","ArrayIndex.get( id:string )"],["ArrayIndex.prototype.data","ArrayIndex.prototype.data"],["ArrayIndex.prototype.dtype","ArrayIndex.prototype.dtype"],["ArrayIndex.prototype.id","ArrayIndex.prototype.id"],["ArrayIndex.prototype.isCached","ArrayIndex.prototype.isCached"],["ArrayIndex.prototype.type","ArrayIndex.prototype.type"],["ArrayIndex.prototype.toString","ArrayIndex.prototype.toString()"],["ArrayIndex.prototype.toJSON","ArrayIndex.prototype.toJSON()"],["arrayMinDataType","arrayMinDataType( value:any )"],["arrayMostlySafeCasts","arrayMostlySafeCasts( [dtype:any] )"],["arrayNextDataType","arrayNextDataType( [dtype:string] )"],["arrayPromotionRules","arrayPromotionRules( [dtype1:any, dtype2:any] )"],["arraySafeCasts","arraySafeCasts( [dtype:any] )"],["arraySameKindCasts","arraySameKindCasts( [dtype:any] )"],["arrayShape","arrayShape( arr:ArrayLikeObject )"],["arrayStream","arrayStream( src:ArrayLikeObject[, options:Object] )"],["arrayStream.factory","arrayStream.factory( [options:Object] )"],["arrayStream.objectMode","arrayStream.objectMode( src:ArrayLikeObject[, options:Object] )"],["arrayview2iterator","arrayview2iterator( src:ArrayLikeObject[, begin:integer[, end:integer]][, mapFcn:Function[, thisArg:any]] )"],["arrayview2iteratorRight","arrayview2iteratorRight( src:ArrayLikeObject[, begin:integer[, end:integer]][, mapFcn:Function[, thisArg:any]] )"],["aslice","aslice( x:ArrayLikeObject[, start:integer[, end:integer]] )"],["AsyncIteratorSymbol","AsyncIteratorSymbol"],["atake","atake( x:Array|TypedArray|Object, indices:ArrayLikeObject<integer>[, options:Object] )"],["azeros","azeros( length:integer[, dtype:string] )"],["azerosLike","azerosLike( x:TypedArray|Array[, dtype:string] )"],["azeroTo","azeroTo( n:integer[, dtype:string] )"],["azeroToLike","azeroToLike( x:TypedArray|Array[, dtype:string] )"],["bartlettTest","bartlettTest( ...x:Array[, options:Object] )"],["base.abs","base.abs( x:number )"],["base.abs2","base.abs2( x:number )"],["base.abs2f","base.abs2f( x:number )"],["base.absdiff","base.absdiff( x:number, y:number )"],["base.absf","base.absf( x:number )"],["base.acartesianPower","base.acartesianPower( x:ArrayLikeObject, n:integer )"],["base.acartesianProduct","base.acartesianProduct( x1:ArrayLikeObject, x2:ArrayLikeObject )"],["base.acartesianSquare","base.acartesianSquare( x:ArrayLikeObject )"],["base.acos","base.acos( x:number )"],["base.acosd","base.acosd( x:number )"],["base.acosf","base.acosf( x:number )"],["base.acosh","base.acosh( x:number )"],["base.acot","base.acot( x:number )"],["base.acotd","base.acotd( x:number )"],["base.acotf","base.acotf( x:number )"],["base.acoth","base.acoth( x:number )"],["base.acovercos","base.acovercos( x:number )"],["base.acoversin","base.acoversin( x:number )"],["base.acsc","base.acsc( x:number )"],["base.acscd","base.acscd( x:number )"],["base.acscdf","base.acscdf( x:number )"],["base.acscf","base.acscf( x:number )"],["base.acsch","base.acsch( x:number )"],["base.add","base.add( x:number, y:number )"],["base.add3","base.add3( x:number, y:number, z:number )"],["base.add4","base.add4( x:number, y:number, z:number, w:number )"],["base.add5","base.add5( x:number, y:number, z:number, w:number, u:number )"],["base.addf","base.addf( x:number, y:number )"],["base.afilled","base.afilled( value:any, len:integer )"],["base.afilled2d","base.afilled2d( value:any, shape:Array<integer> )"],["base.afilled2dBy","base.afilled2dBy( shape:Array<integer>, clbk:Function[, thisArg:any] )"],["base.afilled3d","base.afilled3d( value:any, shape:Array<integer> )"],["base.afilled3dBy","base.afilled3dBy( shape:Array<integer>, clbk:Function[, thisArg:any] )"],["base.afilled4d","base.afilled4d( value:any, shape:Array<integer> )"],["base.afilled4dBy","base.afilled4dBy( shape:Array<integer>, clbk:Function[, thisArg:any] )"],["base.afilled5d","base.afilled5d( value:any, shape:Array<integer> )"],["base.afilled5dBy","base.afilled5dBy( shape:Array<integer>, clbk:Function[, thisArg:any] )"],["base.afilledBy","base.afilledBy( len:integer, clbk:Function[, thisArg:any] )"],["base.afillednd","base.afillednd( value:any, shape:Array<integer> )"],["base.afilledndBy","base.afilledndBy( shape:Array<integer>, clbk:Function[, thisArg:any] )"],["base.afilter","base.afilter( x:Array|TypedArray|Object, predicate:Function[, thisArg:any] )"],["base.afirst","base.afirst( arr:ArrayLikeObject )"],["base.aflatten","base.aflatten( x:Array, shape:Array<integer>, colexicographic:boolean )"],["base.aflatten.assign","base.aflatten.assign( x:Array, shape:Array<integer>, colexicographic:boolean, out:Collection, stride:integer, offset:integer )"],["base.aflatten2d","base.aflatten2d( x:Array, shape:Array<integer>, colexicographic:boolean )"],["base.aflatten2d.assign","base.aflatten2d.assign( x:Array, shape:Array<integer>, colexicographic:boolean, out:Collection, stride:integer, offset:integer )"],["base.aflatten2dBy","base.aflatten2dBy( x:Array, shape:Array<integer>, colex:boolean, clbk:Function[, thisArg:any] )"],["base.aflatten2dBy.assign","base.aflatten2dBy.assign( x:Array, shape:Array<integer>, colex:boolean, out:Collection, stride:integer, offset:integer, clbk:Function[, thisArg:any] )"],["base.aflatten3d","base.aflatten3d( x:ArrayLikeObject, shape:Array<integer>, colexicographic:boolean )"],["base.aflatten3d.assign","base.aflatten3d.assign( x:Array, shape:Array<integer>, colexicographic:boolean, out:Collection, stride:integer, offset:integer )"],["base.aflatten3dBy","base.aflatten3dBy( x:ArrayLikeObject, shape:Array<integer>, colex:boolean, clbk:Function[, thisArg:any] )"],["base.aflatten3dBy.assign","base.aflatten3dBy.assign( x:Array, shape:Array<integer>, colex:boolean, out:Collection, stride:integer, offset:integer, clbk:Function[, thisArg:any] )"],["base.aflatten4d","base.aflatten4d( x:ArrayLikeObject, shape:Array<integer>, colexicographic:boolean )"],["base.aflatten4d.assign","base.aflatten4d.assign( x:Array, shape:Array<integer>, colexicographic:boolean, out:Collection, stride:integer, offset:integer )"],["base.aflatten4dBy","base.aflatten4dBy( x:ArrayLikeObject, shape:Array<integer>, colex:boolean, clbk:Function[, thisArg:any] )"],["base.aflatten4dBy.assign","base.aflatten4dBy.assign( x:Array, shape:Array<integer>, colex:boolean, out:Collection, stride:integer, offset:integer, clbk:Function[, thisArg:any] )"],["base.aflatten5d","base.aflatten5d( x:ArrayLikeObject, shape:Array<integer>, colexicographic:boolean )"],["base.aflatten5d.assign","base.aflatten5d.assign( x:Array, shape:Array<integer>, colexicographic:boolean, out:Collection, stride:integer, offset:integer )"],["base.aflatten5dBy","base.aflatten5dBy( x:ArrayLikeObject, shape:Array<integer>, colex:boolean, clbk:Function[, thisArg:any] )"],["base.aflatten5dBy.assign","base.aflatten5dBy.assign( x:Array, shape:Array<integer>, colex:boolean, out:Collection, stride:integer, offset:integer, clbk:Function[, thisArg:any] )"],["base.aflattenBy","base.aflattenBy( x:Array, shape:Array<integer>, colex:boolean, clbk:Function[, thisArg:any] )"],["base.aflattenBy.assign","base.aflattenBy.assign( x:Array, shape:Array<integer>, colex:boolean, out:Collection, stride:integer, offset:integer, clbk:Function[, thisArg:any] )"],["base.afliplr2d","base.afliplr2d( x:ArrayLikeObject )"],["base.afliplr3d","base.afliplr3d( x:ArrayLikeObject )"],["base.afliplr4d","base.afliplr4d( x:ArrayLikeObject )"],["base.afliplr5d","base.afliplr5d( x:ArrayLikeObject )"],["base.aflipud2d","base.aflipud2d( x:ArrayLikeObject )"],["base.aflipud3d","base.aflipud3d( x:ArrayLikeObject )"],["base.aflipud4d","base.aflipud4d( x:ArrayLikeObject )"],["base.aflipud5d","base.aflipud5d( x:ArrayLikeObject )"],["base.ahavercos","base.ahavercos( x:number )"],["base.ahaversin","base.ahaversin( x:number )"],["base.altcase","base.altcase( str:string )"],["base.aones","base.aones( len:integer )"],["base.aones2d","base.aones2d( shape:Array<integer> )"],["base.aones3d","base.aones3d( shape:Array<integer> )"],["base.aones4d","base.aones4d( shape:Array<integer> )"],["base.aones5d","base.aones5d( shape:Array<integer> )"],["base.aonesnd","base.aonesnd( shape:Array<integer> )"],["base.aoneTo","base.aoneTo( n:number )"],["base.aoneTo.assign","base.aoneTo.assign( out:ArrayLikeObject, stride:integer, offset:integer )"],["base.args2multislice","base.args2multislice( args:Array<Slice|integer|null|undefined> )"],["base.asec","base.asec( x:number )"],["base.asecd","base.asecd( x:number )"],["base.asecdf","base.asecdf( x:number )"],["base.asecf","base.asecf( x:number )"],["base.asech","base.asech( x:number )"],["base.asin","base.asin( x:number )"],["base.asind","base.asind( x:number )"],["base.asindf","base.asindf( x:number )"],["base.asinf","base.asinf( x:number )"],["base.asinh","base.asinh( x:number )"],["base.atan","base.atan( x:number )"],["base.atan2","base.atan2( y:number, x:number )"],["base.atand","base.atand( x:number )"],["base.atanf","base.atanf( x:number )"],["base.atanh","base.atanh( x:number )"],["base.avercos","base.avercos( x:number )"],["base.aversin","base.aversin( x:number )"],["base.azeros","base.azeros( len:integer )"],["base.azeros2d","base.azeros2d( shape:Array<integer> )"],["base.azeros3d","base.azeros3d( shape:Array<integer> )"],["base.azeros4d","base.azeros4d( shape:Array<integer> )"],["base.azeros5d","base.azeros5d( shape:Array<integer> )"],["base.azerosnd","base.azerosnd( shape:Array<integer> )"],["base.azeroTo","base.azeroTo( n:number )"],["base.azeroTo.assign","base.azeroTo.assign( out:ArrayLikeObject, stride:integer, offset:integer )"],["base.bernoulli","base.bernoulli( n:integer )"],["base.besselj0","base.besselj0( x:number )"],["base.besselj1","base.besselj1( x:number )"],["base.bessely0","base.bessely0( x:number )"],["base.bessely1","base.bessely1( x:number )"],["base.beta","base.beta( x:number, y:number )"],["base.betainc","base.betainc( x:number, a:number, b:number[, regularized:boolean[, upper:boolean]] )"],["base.betaincinv","base.betaincinv( p:number, a:number, b:number[, upper:boolean] )"],["base.betaln","base.betaln( a:number, b:number )"],["base.binet","base.binet( x:number )"],["base.binomcoef","base.binomcoef( n:integer, k:integer )"],["base.binomcoefln","base.binomcoefln( n:integer, k:integer )"],["base.boxcox","base.boxcox( x:number, lambda:number )"],["base.boxcox1p","base.boxcox1p( x:number, lambda:number )"],["base.boxcox1pinv","base.boxcox1pinv( y:number, lambda:number )"],["base.boxcoxinv","base.boxcoxinv( y:number, lambda:number )"],["base.cabs","base.cabs( z:Complex128 )"],["base.cabs2","base.cabs2( z:Complex128 )"],["base.cabs2f","base.cabs2f( z:Complex64 )"],["base.cabsf","base.cabsf( z:Complex64 )"],["base.cadd","base.cadd( z1:Complex128, z2:Complex128 )"],["base.caddf","base.caddf( z1:Complex64, z2:Complex64 )"],["base.camelcase","base.camelcase( str:string )"],["base.capitalize","base.capitalize( str:string )"],["base.cbrt","base.cbrt( x:number )"],["base.cbrtf","base.cbrtf( x:number )"],["base.cceil","base.cceil( z:Complex128 )"],["base.cceilf","base.cceilf( z:Complex64 )"],["base.cceiln","base.cceiln( z:Complex128, n:integer )"],["base.ccis","base.ccis( z:Complex128 )"],["base.cdiv","base.cdiv( z1:Complex128, z2:Complex128 )"],["base.ceil","base.ceil( x:number )"],["base.ceil2","base.ceil2( x:number )"],["base.ceil10","base.ceil10( x:number )"],["base.ceilb","base.ceilb( x:number, n:integer, b:integer )"],["base.ceilf","base.ceilf( x:number )"],["base.ceiln","base.ceiln( x:number, n:integer )"],["base.ceilsd","base.ceilsd( x:number, n:integer[, b:integer] )"],["base.cexp","base.cexp( z:Complex128 )"],["base.cflipsign","base.cflipsign( z:Complex128, y:number )"],["base.cflipsignf","base.cflipsignf( z:Complex64, y:number )"],["base.cfloor","base.cfloor( z:Complex128 )"],["base.cfloorn","base.cfloorn( z:Complex128, n:integer )"],["base.cidentity","base.cidentity( z:Complex128 )"],["base.cidentityf","base.cidentityf( z:Complex64 )"],["base.cinv","base.cinv( z:Complex128 )"],["base.clamp","base.clamp( v:number, min:number, max:number )"],["base.clampf","base.clampf( v:number, min:number, max:number )"],["base.cmul","base.cmul( z1:Complex128, z2:Complex128 )"],["base.cmulf","base.cmulf( z1:Complex64, z2:Complex64 )"],["base.cneg","base.cneg( z )"],["base.cnegf","base.cnegf( z )"],["base.codePointAt","base.codePointAt( str:string, idx:integer, backward:boolean )"],["base.constantcase","base.constantcase( str:string )"],["base.continuedFraction","base.continuedFraction( generator:Function[, options:Object] )"],["base.copysign","base.copysign( x:number, y:number )"],["base.copysignf","base.copysignf( x:number, y:number )"],["base.cos","base.cos( x:number )"],["base.cosd","base.cosd( x:number )"],["base.cosh","base.cosh( x:number )"],["base.cosm1","base.cosm1( x:number )"],["base.cospi","base.cospi( x:number )"],["base.cot","base.cot( x:number )"],["base.cotd","base.cotd( x:number )"],["base.coth","base.coth( x:number )"],["base.covercos","base.covercos( x:number )"],["base.coversin","base.coversin( x:number )"],["base.cphase","base.cphase( z:Complex128 )"],["base.cpolar","base.cpolar( z:Complex128 )"],["base.cpolar.assign","base.cpolar.assign( z:Complex128, out:Array|TypedArray|Object, stride:integer, offset:integer )"],["base.cround","base.cround( z:Complex128 )"],["base.croundn","base.croundn( z:Complex128, n:integer )"],["base.csc","base.csc( x:number )"],["base.cscd","base.cscd( x:number )"],["base.csch","base.csch( x:number )"],["base.csignum","base.csignum( z:Complex128 )"],["base.csub","base.csub( z1:Complex128, z2:Complex128 )"],["base.csubf","base.csubf( z1:Complex64, z2:Complex64 )"],["base.deg2rad","base.deg2rad( x:number )"],["base.deg2radf","base.deg2radf( x:number )"],["base.digamma","base.digamma( x:number )"],["base.diracDelta","base.diracDelta( x:number )"],["base.div","base.div( x:number, y:number )"],["base.divf","base.divf( x:number, y:number )"],["base.dotcase","base.dotcase( str:string )"],["base.dists.arcsine.Arcsine","base.dists.arcsine.Arcsine( [a:number, b:number] )"],["base.dists.arcsine.cdf","base.dists.arcsine.cdf( x:number, a:number, b:number )"],["base.dists.arcsine.cdf.factory","base.dists.arcsine.cdf.factory( a:number, b:number )"],["base.dists.arcsine.entropy","base.dists.arcsine.entropy( a:number, b:number )"],["base.dists.arcsine.kurtosis","base.dists.arcsine.kurtosis( a:number, b:number )"],["base.dists.arcsine.logcdf","base.dists.arcsine.logcdf( x:number, a:number, b:number )"],["base.dists.arcsine.logcdf.factory","base.dists.arcsine.logcdf.factory( a:number, b:number )"],["base.dists.arcsine.logpdf","base.dists.arcsine.logpdf( x:number, a:number, b:number )"],["base.dists.arcsine.logpdf.factory","base.dists.arcsine.logpdf.factory( a:number, b:number )"],["base.dists.arcsine.mean","base.dists.arcsine.mean( a:number, b:number )"],["base.dists.arcsine.median","base.dists.arcsine.median( a:number, b:number )"],["base.dists.arcsine.mode","base.dists.arcsine.mode( a:number, b:number )"],["base.dists.arcsine.pdf","base.dists.arcsine.pdf( x:number, a:number, b:number )"],["base.dists.arcsine.pdf.factory","base.dists.arcsine.pdf.factory( a:number, b:number )"],["base.dists.arcsine.quantile","base.dists.arcsine.quantile( p:number, a:number, b:number )"],["base.dists.arcsine.quantile.factory","base.dists.arcsine.quantile.factory( a:number, b:number )"],["base.dists.arcsine.skewness","base.dists.arcsine.skewness( a:number, b:number )"],["base.dists.arcsine.stdev","base.dists.arcsine.stdev( a:number, b:number )"],["base.dists.arcsine.variance","base.dists.arcsine.variance( a:number, b:number )"],["base.dists.bernoulli.Bernoulli","base.dists.bernoulli.Bernoulli( [p:number] )"],["base.dists.bernoulli.cdf","base.dists.bernoulli.cdf( x:number, p:number )"],["base.dists.bernoulli.cdf.factory","base.dists.bernoulli.cdf.factory( p:number )"],["base.dists.bernoulli.entropy","base.dists.bernoulli.entropy( p:number )"],["base.dists.bernoulli.kurtosis","base.dists.bernoulli.kurtosis( p:number )"],["base.dists.bernoulli.mean","base.dists.bernoulli.mean( p:number )"],["base.dists.bernoulli.median","base.dists.bernoulli.median( p:number )"],["base.dists.bernoulli.mgf","base.dists.bernoulli.mgf( t:number, p:number )"],["base.dists.bernoulli.mgf.factory","base.dists.bernoulli.mgf.factory( p:number )"],["base.dists.bernoulli.mode","base.dists.bernoulli.mode( p:number )"],["base.dists.bernoulli.pmf","base.dists.bernoulli.pmf( x:number, p:number )"],["base.dists.bernoulli.pmf.factory","base.dists.bernoulli.pmf.factory( p:number )"],["base.dists.bernoulli.quantile","base.dists.bernoulli.quantile( r:number, p:number )"],["base.dists.bernoulli.quantile.factory","base.dists.bernoulli.quantile.factory( p:number )"],["base.dists.bernoulli.skewness","base.dists.bernoulli.skewness( p:number )"],["base.dists.bernoulli.stdev","base.dists.bernoulli.stdev( p:number )"],["base.dists.bernoulli.variance","base.dists.bernoulli.variance( p:number )"],["base.dists.beta.Beta","base.dists.beta.Beta( [α:number, β:number] )"],["base.dists.beta.cdf","base.dists.beta.cdf( x:number, α:number, β:number )"],["base.dists.beta.cdf.factory","base.dists.beta.cdf.factory( α:number, β:number )"],["base.dists.beta.entropy","base.dists.beta.entropy( α:number, β:number )"],["base.dists.beta.kurtosis","base.dists.beta.kurtosis( α:number, β:number )"],["base.dists.beta.logcdf","base.dists.beta.logcdf( x:number, α:number, β:number )"],["base.dists.beta.logcdf.factory","base.dists.beta.logcdf.factory( α:number, β:number )"],["base.dists.beta.logpdf","base.dists.beta.logpdf( x:number, α:number, β:number )"],["base.dists.beta.logpdf.factory","base.dists.beta.logpdf.factory( α:number, β:number )"],["base.dists.beta.mean","base.dists.beta.mean( α:number, β:number )"],["base.dists.beta.median","base.dists.beta.median( α:number, β:number )"],["base.dists.beta.mgf","base.dists.beta.mgf( t:number, α:number, β:number )"],["base.dists.beta.mgf.factory","base.dists.beta.mgf.factory( α:number, β:number )"],["base.dists.beta.mode","base.dists.beta.mode( α:number, β:number )"],["base.dists.beta.pdf","base.dists.beta.pdf( x:number, α:number, β:number )"],["base.dists.beta.pdf.factory","base.dists.beta.pdf.factory( α:number, β:number )"],["base.dists.beta.quantile","base.dists.beta.quantile( p:number, α:number, β:number )"],["base.dists.beta.quantile.factory","base.dists.beta.quantile.factory( α:number, β:number )"],["base.dists.beta.skewness","base.dists.beta.skewness( α:number, β:number )"],["base.dists.beta.stdev","base.dists.beta.stdev( α:number, β:number )"],["base.dists.beta.variance","base.dists.beta.variance( α:number, β:number )"],["base.dists.betaprime.BetaPrime","base.dists.betaprime.BetaPrime( [α:number, β:number] )"],["base.dists.betaprime.cdf","base.dists.betaprime.cdf( x:number, α:number, β:number )"],["base.dists.betaprime.cdf.factory","base.dists.betaprime.cdf.factory( α:number, β:number )"],["base.dists.betaprime.kurtosis","base.dists.betaprime.kurtosis( α:number, β:number )"],["base.dists.betaprime.logcdf","base.dists.betaprime.logcdf( x:number, α:number, β:number )"],["base.dists.betaprime.logcdf.factory","base.dists.betaprime.logcdf.factory( α:number, β:number )"],["base.dists.betaprime.logpdf","base.dists.betaprime.logpdf( x:number, α:number, β:number )"],["base.dists.betaprime.logpdf.factory","base.dists.betaprime.logpdf.factory( α:number, β:number )"],["base.dists.betaprime.mean","base.dists.betaprime.mean( α:number, β:number )"],["base.dists.betaprime.mode","base.dists.betaprime.mode( α:number, β:number )"],["base.dists.betaprime.pdf","base.dists.betaprime.pdf( x:number, α:number, β:number )"],["base.dists.betaprime.pdf.factory","base.dists.betaprime.pdf.factory( α:number, β:number )"],["base.dists.betaprime.quantile","base.dists.betaprime.quantile( p:number, α:number, β:number )"],["base.dists.betaprime.quantile.factory","base.dists.betaprime.quantile.factory( α:number, β:number )"],["base.dists.betaprime.skewness","base.dists.betaprime.skewness( α:number, β:number )"],["base.dists.betaprime.stdev","base.dists.betaprime.stdev( α:number, β:number )"],["base.dists.betaprime.variance","base.dists.betaprime.variance( α:number, β:number )"],["base.dists.binomial.Binomial","base.dists.binomial.Binomial( [n:integer, p:number] )"],["base.dists.binomial.cdf","base.dists.binomial.cdf( x:number, n:integer, p:number )"],["base.dists.binomial.cdf.factory","base.dists.binomial.cdf.factory( n:integer, p:number )"],["base.dists.binomial.entropy","base.dists.binomial.entropy( n:integer, p:number )"],["base.dists.binomial.kurtosis","base.dists.binomial.kurtosis( n:integer, p:number )"],["base.dists.binomial.logpmf","base.dists.binomial.logpmf( x:number, n:integer, p:number )"],["base.dists.binomial.logpmf.factory","base.dists.binomial.logpmf.factory( n:integer, p:number )"],["base.dists.binomial.mean","base.dists.binomial.mean( n:integer, p:number )"],["base.dists.binomial.median","base.dists.binomial.median( n:integer, p:number )"],["base.dists.binomial.mgf","base.dists.binomial.mgf( t:number, n:integer, p:number )"],["base.dists.binomial.mgf.factory","base.dists.binomial.mgf.factory( n:integer, p:number )"],["base.dists.binomial.mode","base.dists.binomial.mode( n:integer, p:number )"],["base.dists.binomial.pmf","base.dists.binomial.pmf( x:number, n:integer, p:number )"],["base.dists.binomial.pmf.factory","base.dists.binomial.pmf.factory( n:integer, p:number )"],["base.dists.binomial.quantile","base.dists.binomial.quantile( r:number, n:integer, p:number )"],["base.dists.binomial.quantile.factory","base.dists.binomial.quantile.factory( n:integer, p:number )"],["base.dists.binomial.skewness","base.dists.binomial.skewness( n:integer, p:number )"],["base.dists.binomial.stdev","base.dists.binomial.stdev( n:integer, p:number )"],["base.dists.binomial.variance","base.dists.binomial.variance( n:integer, p:number )"],["base.dists.cauchy.Cauchy","base.dists.cauchy.Cauchy( [x0:number, Ɣ:number] )"],["base.dists.cauchy.cdf","base.dists.cauchy.cdf( x:number, x0:number, Ɣ:number )"],["base.dists.cauchy.cdf.factory","base.dists.cauchy.cdf.factory( x0:number, Ɣ:number )"],["base.dists.cauchy.entropy","base.dists.cauchy.entropy( x0:number, Ɣ:number )"],["base.dists.cauchy.logcdf","base.dists.cauchy.logcdf( x:number, x0:number, Ɣ:number )"],["base.dists.cauchy.logcdf.factory","base.dists.cauchy.logcdf.factory( x0:number, Ɣ:number )"],["base.dists.cauchy.logpdf","base.dists.cauchy.logpdf( x:number, x0:number, Ɣ:number )"],["base.dists.cauchy.logpdf.factory","base.dists.cauchy.logpdf.factory( x0:number, Ɣ:number )"],["base.dists.cauchy.median","base.dists.cauchy.median( x0:number, Ɣ:number )"],["base.dists.cauchy.mode","base.dists.cauchy.mode( x0:number, Ɣ:number )"],["base.dists.cauchy.pdf","base.dists.cauchy.pdf( x:number, x0:number, Ɣ:number )"],["base.dists.cauchy.pdf.factory","base.dists.cauchy.pdf.factory( x0:number, Ɣ:number )"],["base.dists.cauchy.quantile","base.dists.cauchy.quantile( p:number, x0:number, Ɣ:number )"],["base.dists.cauchy.quantile.factory","base.dists.cauchy.quantile.factory( x0:number, Ɣ:number )"],["base.dists.chi.cdf","base.dists.chi.cdf( x:number, k:number )"],["base.dists.chi.cdf.factory","base.dists.chi.cdf.factory( k:number )"],["base.dists.chi.Chi","base.dists.chi.Chi( [k:number] )"],["base.dists.chi.entropy","base.dists.chi.entropy( k:number )"],["base.dists.chi.kurtosis","base.dists.chi.kurtosis( k:number )"],["base.dists.chi.logpdf","base.dists.chi.logpdf( x:number, k:number )"],["base.dists.chi.logpdf.factory","base.dists.chi.logpdf.factory( k:number )"],["base.dists.chi.mean","base.dists.chi.mean( k:number )"],["base.dists.chi.mode","base.dists.chi.mode( k:number )"],["base.dists.chi.pdf","base.dists.chi.pdf( x:number, k:number )"],["base.dists.chi.pdf.factory","base.dists.chi.pdf.factory( k:number )"],["base.dists.chi.quantile","base.dists.chi.quantile( p:number, k:number )"],["base.dists.chi.quantile.factory","base.dists.chi.quantile.factory( k:number )"],["base.dists.chi.skewness","base.dists.chi.skewness( k:number )"],["base.dists.chi.stdev","base.dists.chi.stdev( k:number )"],["base.dists.chi.variance","base.dists.chi.variance( k:number )"],["base.dists.chisquare.cdf","base.dists.chisquare.cdf( x:number, k:number )"],["base.dists.chisquare.cdf.factory","base.dists.chisquare.cdf.factory( k:number )"],["base.dists.chisquare.ChiSquare","base.dists.chisquare.ChiSquare( [k:number] )"],["base.dists.chisquare.entropy","base.dists.chisquare.entropy( k:number )"],["base.dists.chisquare.kurtosis","base.dists.chisquare.kurtosis( k:number )"],["base.dists.chisquare.logpdf","base.dists.chisquare.logpdf( x:number, k:number )"],["base.dists.chisquare.logpdf.factory","base.dists.chisquare.logpdf.factory( k:number )"],["base.dists.chisquare.mean","base.dists.chisquare.mean( k:number )"],["base.dists.chisquare.median","base.dists.chisquare.median( k:number )"],["base.dists.chisquare.mgf","base.dists.chisquare.mgf( t:number, k:number )"],["base.dists.chisquare.mgf.factory","base.dists.chisquare.mgf.factory( k:number )"],["base.dists.chisquare.mode","base.dists.chisquare.mode( k:number )"],["base.dists.chisquare.pdf","base.dists.chisquare.pdf( x:number, k:number )"],["base.dists.chisquare.pdf.factory","base.dists.chisquare.pdf.factory( k:number )"],["base.dists.chisquare.quantile","base.dists.chisquare.quantile( p:number, k:number )"],["base.dists.chisquare.quantile.factory","base.dists.chisquare.quantile.factory( k:number )"],["base.dists.chisquare.skewness","base.dists.chisquare.skewness( k:number )"],["base.dists.chisquare.stdev","base.dists.chisquare.stdev( k:number )"],["base.dists.chisquare.variance","base.dists.chisquare.variance( k:number )"],["base.dists.cosine.cdf","base.dists.cosine.cdf( x:number, μ:number, s:number )"],["base.dists.cosine.cdf.factory","base.dists.cosine.cdf.factory( μ:number, s:number )"],["base.dists.cosine.Cosine","base.dists.cosine.Cosine( [μ:number, s:number] )"],["base.dists.cosine.kurtosis","base.dists.cosine.kurtosis( μ:number, s:number )"],["base.dists.cosine.logcdf","base.dists.cosine.logcdf( x:number, μ:number, s:number )"],["base.dists.cosine.logcdf.factory","base.dists.cosine.logcdf.factory( μ:number, s:number )"],["base.dists.cosine.logpdf","base.dists.cosine.logpdf( x:number, μ:number, s:number )"],["base.dists.cosine.logpdf.factory","base.dists.cosine.logpdf.factory( μ:number, s:number )"],["base.dists.cosine.mean","base.dists.cosine.mean( μ:number, s:number )"],["base.dists.cosine.median","base.dists.cosine.median( μ:number, s:number )"],["base.dists.cosine.mgf","base.dists.cosine.mgf( t:number, μ:number, s:number )"],["base.dists.cosine.mgf.factory","base.dists.cosine.mgf.factory( μ:number, s:number )"],["base.dists.cosine.mode","base.dists.cosine.mode( μ:number, s:number )"],["base.dists.cosine.pdf","base.dists.cosine.pdf( x:number, μ:number, s:number )"],["base.dists.cosine.pdf.factory","base.dists.cosine.pdf.factory( μ:number, s:number )"],["base.dists.cosine.quantile","base.dists.cosine.quantile( p:number, μ:number, s:number )"],["base.dists.cosine.quantile.factory","base.dists.cosine.quantile.factory( μ:number, s:number )"],["base.dists.cosine.skewness","base.dists.cosine.skewness( μ:number, s:number )"],["base.dists.cosine.stdev","base.dists.cosine.stdev( μ:number, s:number )"],["base.dists.cosine.variance","base.dists.cosine.variance( μ:number, s:number )"],["base.dists.degenerate.cdf","base.dists.degenerate.cdf( x:number, μ:number )"],["base.dists.degenerate.cdf.factory","base.dists.degenerate.cdf.factory( μ:number )"],["base.dists.degenerate.Degenerate","base.dists.degenerate.Degenerate( [μ:number] )"],["base.dists.degenerate.entropy","base.dists.degenerate.entropy( μ:number )"],["base.dists.degenerate.logcdf","base.dists.degenerate.logcdf( x:number, μ:number )"],["base.dists.degenerate.logcdf.factory","base.dists.degenerate.logcdf.factory( μ:number )"],["base.dists.degenerate.logpdf","base.dists.degenerate.logpdf( x:number, μ:number )"],["base.dists.degenerate.logpdf.factory","base.dists.degenerate.logpdf.factory( μ:number )"],["base.dists.degenerate.logpmf","base.dists.degenerate.logpmf( x:number, μ:number )"],["base.dists.degenerate.logpmf.factory","base.dists.degenerate.logpmf.factory( μ:number )"],["base.dists.degenerate.mean","base.dists.degenerate.mean( μ:number )"],["base.dists.degenerate.median","base.dists.degenerate.median( μ:number )"],["base.dists.degenerate.mgf","base.dists.degenerate.mgf( x:number, μ:number )"],["base.dists.degenerate.mgf.factory","base.dists.degenerate.mgf.factory( μ:number )"],["base.dists.degenerate.mode","base.dists.degenerate.mode( μ:number )"],["base.dists.degenerate.pdf","base.dists.degenerate.pdf( x:number, μ:number )"],["base.dists.degenerate.pdf.factory","base.dists.degenerate.pdf.factory( μ:number )"],["base.dists.degenerate.pmf","base.dists.degenerate.pmf( x:number, μ:number )"],["base.dists.degenerate.pmf.factory","base.dists.degenerate.pmf.factory( μ:number )"],["base.dists.degenerate.quantile","base.dists.degenerate.quantile( p:number, μ:number )"],["base.dists.degenerate.quantile.factory","base.dists.degenerate.quantile.factory( μ:number )"],["base.dists.degenerate.stdev","base.dists.degenerate.stdev( μ:number )"],["base.dists.degenerate.variance","base.dists.degenerate.variance( μ:number )"],["base.dists.discreteUniform.cdf","base.dists.discreteUniform.cdf( x:number, a:integer, b:integer )"],["base.dists.discreteUniform.cdf.factory","base.dists.discreteUniform.cdf.factory( a:integer, b:integer )"],["base.dists.discreteUniform.DiscreteUniform","base.dists.discreteUniform.DiscreteUniform( [a:integer, b:integer] )"],["base.dists.discreteUniform.entropy","base.dists.discreteUniform.entropy( a:integer, b:integer )"],["base.dists.discreteUniform.kurtosis","base.dists.discreteUniform.kurtosis( a:integer, b:integer )"],["base.dists.discreteUniform.logcdf","base.dists.discreteUniform.logcdf( x:number, a:integer, b:integer )"],["base.dists.discreteUniform.logcdf.factory","base.dists.discreteUniform.logcdf.factory( a:integer, b:integer )"],["base.dists.discreteUniform.logpmf","base.dists.discreteUniform.logpmf( x:number, a:integer, b:integer )"],["base.dists.discreteUniform.logpmf.factory","base.dists.discreteUniform.logpmf.factory( a:integer, b:integer )"],["base.dists.discreteUniform.mean","base.dists.discreteUniform.mean( a:integer, b:integer )"],["base.dists.discreteUniform.median","base.dists.discreteUniform.median( a:integer, b:integer )"],["base.dists.discreteUniform.mgf","base.dists.discreteUniform.mgf( t:number, a:integer, b:integer )"],["base.dists.discreteUniform.mgf.factory","base.dists.discreteUniform.mgf.factory( a:integer, b:integer )"],["base.dists.discreteUniform.pmf","base.dists.discreteUniform.pmf( x:number, a:integer, b:integer )"],["base.dists.discreteUniform.pmf.factory","base.dists.discreteUniform.pmf.factory( a:integer, b:integer )"],["base.dists.discreteUniform.quantile","base.dists.discreteUniform.quantile( p:number, a:integer, b:integer )"],["base.dists.discreteUniform.quantile.factory","base.dists.discreteUniform.quantile.factory( a:integer, b:integer )"],["base.dists.discreteUniform.skewness","base.dists.discreteUniform.skewness( a:integer, b:integer )"],["base.dists.discreteUniform.stdev","base.dists.discreteUniform.stdev( a:integer, b:integer )"],["base.dists.discreteUniform.variance","base.dists.discreteUniform.variance( a:integer, b:integer )"],["base.dists.erlang.cdf","base.dists.erlang.cdf( x:number, k:number, λ:number )"],["base.dists.erlang.cdf.factory","base.dists.erlang.cdf.factory( k:number, λ:number )"],["base.dists.erlang.entropy","base.dists.erlang.entropy( k:integer, λ:number )"],["base.dists.erlang.Erlang","base.dists.erlang.Erlang( [k:number, λ:number] )"],["base.dists.erlang.kurtosis","base.dists.erlang.kurtosis( k:integer, λ:number )"],["base.dists.erlang.logpdf","base.dists.erlang.logpdf( x:number, k:number, λ:number )"],["base.dists.erlang.logpdf.factory","base.dists.erlang.logpdf.factory( k:number, λ:number )"],["base.dists.erlang.mean","base.dists.erlang.mean( k:integer, λ:number )"],["base.dists.erlang.mgf","base.dists.erlang.mgf( t:number, k:number, λ:number )"],["base.dists.erlang.mgf.factory","base.dists.erlang.mgf.factory( k:number, λ:number )"],["base.dists.erlang.mode","base.dists.erlang.mode( k:integer, λ:number )"],["base.dists.erlang.pdf","base.dists.erlang.pdf( x:number, k:number, λ:number )"],["base.dists.erlang.pdf.factory","base.dists.erlang.pdf.factory( k:number, λ:number )"],["base.dists.erlang.quantile","base.dists.erlang.quantile( p:number, k:number, λ:number )"],["base.dists.erlang.quantile.factory","base.dists.erlang.quantile.factory( k:number, λ:number )"],["base.dists.erlang.skewness","base.dists.erlang.skewness( k:integer, λ:number )"],["base.dists.erlang.stdev","base.dists.erlang.stdev( k:integer, λ:number )"],["base.dists.erlang.variance","base.dists.erlang.variance( k:integer, λ:number )"],["base.dists.exponential.cdf","base.dists.exponential.cdf( x:number, λ:number )"],["base.dists.exponential.cdf.factory","base.dists.exponential.cdf.factory( λ:number )"],["base.dists.exponential.entropy","base.dists.exponential.entropy( λ:number )"],["base.dists.exponential.Exponential","base.dists.exponential.Exponential( [λ:number] )"],["base.dists.exponential.kurtosis","base.dists.exponential.kurtosis( λ:number )"],["base.dists.exponential.logcdf","base.dists.exponential.logcdf( x:number, λ:number )"],["base.dists.exponential.logcdf.factory","base.dists.exponential.logcdf.factory( λ:number )"],["base.dists.exponential.logpdf","base.dists.exponential.logpdf( x:number, λ:number )"],["base.dists.exponential.logpdf.factory","base.dists.exponential.logpdf.factory( λ:number )"],["base.dists.exponential.mean","base.dists.exponential.mean( λ:number )"],["base.dists.exponential.median","base.dists.exponential.median( λ:number )"],["base.dists.exponential.mgf","base.dists.exponential.mgf( t:number, λ:number )"],["base.dists.exponential.mgf.factory","base.dists.exponential.mgf.factory( λ:number )"],["base.dists.exponential.mode","base.dists.exponential.mode( λ:number )"],["base.dists.exponential.pdf","base.dists.exponential.pdf( x:number, λ:number )"],["base.dists.exponential.pdf.factory","base.dists.exponential.pdf.factory( λ:number )"],["base.dists.exponential.quantile","base.dists.exponential.quantile( p:number, λ:number )"],["base.dists.exponential.quantile.factory","base.dists.exponential.quantile.factory( λ:number )"],["base.dists.exponential.skewness","base.dists.exponential.skewness( λ:number )"],["base.dists.exponential.stdev","base.dists.exponential.stdev( λ:number )"],["base.dists.exponential.variance","base.dists.exponential.variance( λ:number )"],["base.dists.f.cdf","base.dists.f.cdf( x:number, d1:number, d2:number )"],["base.dists.f.cdf.factory","base.dists.f.cdf.factory( d1:number, d2:number )"],["base.dists.f.entropy","base.dists.f.entropy( d1:number, d2:number )"],["base.dists.f.F","base.dists.f.F( [d1:number, d2:number] )"],["base.dists.f.kurtosis","base.dists.f.kurtosis( d1:number, d2:number )"],["base.dists.f.mean","base.dists.f.mean( d1:number, d2:number )"],["base.dists.f.mode","base.dists.f.mode( d1:number, d2:number )"],["base.dists.f.pdf","base.dists.f.pdf( x:number, d1:number, d2:number )"],["base.dists.f.pdf.factory","base.dists.f.pdf.factory( d1:number, d2:number )"],["base.dists.f.quantile","base.dists.f.quantile( p:number, d1:number, d2:number )"],["base.dists.f.quantile.factory","base.dists.f.quantile.factory( d1:number, d2:number )"],["base.dists.f.skewness","base.dists.f.skewness( d1:number, d2:number )"],["base.dists.f.stdev","base.dists.f.stdev( d1:number, d2:number )"],["base.dists.f.variance","base.dists.f.variance( d1:number, d2:number )"],["base.dists.frechet.cdf","base.dists.frechet.cdf( x:number, α:number, s:number, m:number )"],["base.dists.frechet.cdf.factory","base.dists.frechet.cdf.factory( α:number, s:number, m:number )"],["base.dists.frechet.entropy","base.dists.frechet.entropy( α:number, s:number, m:number )"],["base.dists.frechet.Frechet","base.dists.frechet.Frechet( [α:number, s:number, m:number] )"],["base.dists.frechet.kurtosis","base.dists.frechet.kurtosis( α:number, s:number, m:number )"],["base.dists.frechet.logcdf","base.dists.frechet.logcdf( x:number, α:number, s:number, m:number )"],["base.dists.frechet.logcdf.factory","base.dists.frechet.logcdf.factory( α:number, s:number, m:number )"],["base.dists.frechet.logpdf","base.dists.frechet.logpdf( x:number, α:number, s:number, m:number )"],["base.dists.frechet.logpdf.factory","base.dists.frechet.logpdf.factory( α:number, s:number, m:number )"],["base.dists.frechet.mean","base.dists.frechet.mean( α:number, s:number, m:number )"],["base.dists.frechet.median","base.dists.frechet.median( α:number, s:number, m:number )"],["base.dists.frechet.mode","base.dists.frechet.mode( α:number, s:number, m:number )"],["base.dists.frechet.pdf","base.dists.frechet.pdf( x:number, α:number, s:number, m:number )"],["base.dists.frechet.pdf.factory","base.dists.frechet.pdf.factory( α:number, s:number, m:number )"],["base.dists.frechet.quantile","base.dists.frechet.quantile( p:number, α:number, s:number, m:number )"],["base.dists.frechet.quantile.factory","base.dists.frechet.quantile.factory( α:number, s:number, m:number )"],["base.dists.frechet.skewness","base.dists.frechet.skewness( α:number, s:number, m:number )"],["base.dists.frechet.stdev","base.dists.frechet.stdev( α:number, s:number, m:number )"],["base.dists.frechet.variance","base.dists.frechet.variance( α:number, s:number, m:number )"],["base.dists.gamma.cdf","base.dists.gamma.cdf( x:number, α:number, β:number )"],["base.dists.gamma.cdf.factory","base.dists.gamma.cdf.factory( α:number, β:number )"],["base.dists.gamma.entropy","base.dists.gamma.entropy( α:number, β:number )"],["base.dists.gamma.Gamma","base.dists.gamma.Gamma( [α:number, β:number] )"],["base.dists.gamma.kurtosis","base.dists.gamma.kurtosis( α:number, β:number )"],["base.dists.gamma.logcdf","base.dists.gamma.logcdf( x:number, α:number, β:number )"],["base.dists.gamma.logcdf.factory","base.dists.gamma.logcdf.factory( α:number, β:number )"],["base.dists.gamma.logpdf","base.dists.gamma.logpdf( x:number, α:number, β:number )"],["base.dists.gamma.logpdf.factory","base.dists.gamma.logpdf.factory( α:number, β:number )"],["base.dists.gamma.mean","base.dists.gamma.mean( α:number, β:number )"],["base.dists.gamma.mgf","base.dists.gamma.mgf( t:number, α:number, β:number )"],["base.dists.gamma.mgf.factory","base.dists.gamma.mgf.factory( α:number, β:number )"],["base.dists.gamma.mode","base.dists.gamma.mode( α:number, β:number )"],["base.dists.gamma.pdf","base.dists.gamma.pdf( x:number, α:number, β:number )"],["base.dists.gamma.pdf.factory","base.dists.gamma.pdf.factory( α:number, β:number )"],["base.dists.gamma.quantile","base.dists.gamma.quantile( p:number, α:number, β:number )"],["base.dists.gamma.quantile.factory","base.dists.gamma.quantile.factory( α:number, β:number )"],["base.dists.gamma.skewness","base.dists.gamma.skewness( α:number, β:number )"],["base.dists.gamma.stdev","base.dists.gamma.stdev( α:number, β:number )"],["base.dists.gamma.variance","base.dists.gamma.variance( α:number, β:number )"],["base.dists.geometric.cdf","base.dists.geometric.cdf( x:number, p:number )"],["base.dists.geometric.cdf.factory","base.dists.geometric.cdf.factory( p:number )"],["base.dists.geometric.entropy","base.dists.geometric.entropy( p:number )"],["base.dists.geometric.Geometric","base.dists.geometric.Geometric( [p:number] )"],["base.dists.geometric.kurtosis","base.dists.geometric.kurtosis( p:number )"],["base.dists.geometric.logcdf","base.dists.geometric.logcdf( x:number, p:number )"],["base.dists.geometric.logcdf.factory","base.dists.geometric.logcdf.factory( p:number )"],["base.dists.geometric.logpmf","base.dists.geometric.logpmf( x:number, p:number )"],["base.dists.geometric.logpmf.factory","base.dists.geometric.logpmf.factory( p:number )"],["base.dists.geometric.mean","base.dists.geometric.mean( p:number )"],["base.dists.geometric.median","base.dists.geometric.median( p:number )"],["base.dists.geometric.mgf","base.dists.geometric.mgf( t:number, p:number )"],["base.dists.geometric.mgf.factory","base.dists.geometric.mgf.factory( p:number )"],["base.dists.geometric.mode","base.dists.geometric.mode( p:number )"],["base.dists.geometric.pmf","base.dists.geometric.pmf( x:number, p:number )"],["base.dists.geometric.pmf.factory","base.dists.geometric.pmf.factory( p:number )"],["base.dists.geometric.quantile","base.dists.geometric.quantile( r:number, p:number )"],["base.dists.geometric.quantile.factory","base.dists.geometric.quantile.factory( p:number )"],["base.dists.geometric.skewness","base.dists.geometric.skewness( p:number )"],["base.dists.geometric.stdev","base.dists.geometric.stdev( p:number )"],["base.dists.geometric.variance","base.dists.geometric.variance( p:number )"],["base.dists.gumbel.cdf","base.dists.gumbel.cdf( x:number, μ:number, β:number )"],["base.dists.gumbel.cdf.factory","base.dists.gumbel.cdf.factory( μ:number, β:number )"],["base.dists.gumbel.entropy","base.dists.gumbel.entropy( μ:number, β:number )"],["base.dists.gumbel.Gumbel","base.dists.gumbel.Gumbel( [μ:number, β:number] )"],["base.dists.gumbel.kurtosis","base.dists.gumbel.kurtosis( μ:number, β:number )"],["base.dists.gumbel.logcdf","base.dists.gumbel.logcdf( x:number, μ:number, β:number )"],["base.dists.gumbel.logcdf.factory","base.dists.gumbel.logcdf.factory( μ:number, β:number )"],["base.dists.gumbel.logpdf","base.dists.gumbel.logpdf( x:number, μ:number, β:number )"],["base.dists.gumbel.logpdf.factory","base.dists.gumbel.logpdf.factory( μ:number, β:number )"],["base.dists.gumbel.mean","base.dists.gumbel.mean( μ:number, β:number )"],["base.dists.gumbel.median","base.dists.gumbel.median( μ:number, β:number )"],["base.dists.gumbel.mgf","base.dists.gumbel.mgf( t:number, μ:number, β:number )"],["base.dists.gumbel.mgf.factory","base.dists.gumbel.mgf.factory( μ:number, β:number )"],["base.dists.gumbel.mode","base.dists.gumbel.mode( μ:number, β:number )"],["base.dists.gumbel.pdf","base.dists.gumbel.pdf( x:number, μ:number, β:number )"],["base.dists.gumbel.pdf.factory","base.dists.gumbel.pdf.factory( μ:number, β:number )"],["base.dists.gumbel.quantile","base.dists.gumbel.quantile( p:number, μ:number, β:number )"],["base.dists.gumbel.quantile.factory","base.dists.gumbel.quantile.factory( μ:number, β:number )"],["base.dists.gumbel.skewness","base.dists.gumbel.skewness( μ:number, β:number )"],["base.dists.gumbel.stdev","base.dists.gumbel.stdev( μ:number, β:number )"],["base.dists.gumbel.variance","base.dists.gumbel.variance( μ:number, β:number )"],["base.dists.hypergeometric.cdf","base.dists.hypergeometric.cdf( x:number, N:integer, K:integer, n:integer )"],["base.dists.hypergeometric.cdf.factory","base.dists.hypergeometric.cdf.factory( N:integer, K:integer, n:integer )"],["base.dists.hypergeometric.Hypergeometric","base.dists.hypergeometric.Hypergeometric( [N:integer, K:integer, n:integer] )"],["base.dists.hypergeometric.kurtosis","base.dists.hypergeometric.kurtosis( N:integer, K:integer, n:integer )"],["base.dists.hypergeometric.logpmf","base.dists.hypergeometric.logpmf( x:number, N:integer, K:integer, n:integer )"],["base.dists.hypergeometric.logpmf.factory","base.dists.hypergeometric.logpmf.factory( N:integer, K:integer, n:integer )"],["base.dists.hypergeometric.mean","base.dists.hypergeometric.mean( N:integer, K:integer, n:integer )"],["base.dists.hypergeometric.mode","base.dists.hypergeometric.mode( N:integer, K:integer, n:integer )"],["base.dists.hypergeometric.pmf","base.dists.hypergeometric.pmf( x:number, N:integer, K:integer, n:integer )"],["base.dists.hypergeometric.pmf.factory","base.dists.hypergeometric.pmf.factory( N:integer, K:integer, n:integer )"],["base.dists.hypergeometric.quantile","base.dists.hypergeometric.quantile( p:number, N:integer, K:integer, n:integer )"],["base.dists.hypergeometric.quantile.factory","base.dists.hypergeometric.quantile.factory( N:integer, K:integer, n:integer )"],["base.dists.hypergeometric.skewness","base.dists.hypergeometric.skewness( N:integer, K:integer, n:integer )"],["base.dists.hypergeometric.stdev","base.dists.hypergeometric.stdev( N:integer, K:integer, n:integer )"],["base.dists.hypergeometric.variance","base.dists.hypergeometric.variance( N:integer, K:integer, n:integer )"],["base.dists.invgamma.cdf","base.dists.invgamma.cdf( x:number, α:number, β:number )"],["base.dists.invgamma.cdf.factory","base.dists.invgamma.cdf.factory( α:number, β:number )"],["base.dists.invgamma.entropy","base.dists.invgamma.entropy( α:number, β:number )"],["base.dists.invgamma.InvGamma","base.dists.invgamma.InvGamma( [α:number, β:number] )"],["base.dists.invgamma.kurtosis","base.dists.invgamma.kurtosis( α:number, β:number )"],["base.dists.invgamma.logpdf","base.dists.invgamma.logpdf( x:number, α:number, β:number )"],["base.dists.invgamma.logpdf.factory","base.dists.invgamma.logpdf.factory( α:number, β:number )"],["base.dists.invgamma.mean","base.dists.invgamma.mean( α:number, β:number )"],["base.dists.invgamma.mode","base.dists.invgamma.mode( α:number, β:number )"],["base.dists.invgamma.pdf","base.dists.invgamma.pdf( x:number, α:number, β:number )"],["base.dists.invgamma.pdf.factory","base.dists.invgamma.pdf.factory( α:number, β:number )"],["base.dists.invgamma.quantile","base.dists.invgamma.quantile( p:number, α:number, β:number )"],["base.dists.invgamma.quantile.factory","base.dists.invgamma.quantile.factory( α:number, β:number )"],["base.dists.invgamma.skewness","base.dists.invgamma.skewness( α:number, β:number )"],["base.dists.invgamma.stdev","base.dists.invgamma.stdev( α:number, β:number )"],["base.dists.invgamma.variance","base.dists.invgamma.variance( α:number, β:number )"],["base.dists.kumaraswamy.cdf","base.dists.kumaraswamy.cdf( x:number, a:number, b:number )"],["base.dists.kumaraswamy.cdf.factory","base.dists.kumaraswamy.cdf.factory( a:number, b:number )"],["base.dists.kumaraswamy.Kumaraswamy","base.dists.kumaraswamy.Kumaraswamy( [a:number, b:number] )"],["base.dists.kumaraswamy.kurtosis","base.dists.kumaraswamy.kurtosis( a:number, b:number )"],["base.dists.kumaraswamy.logcdf","base.dists.kumaraswamy.logcdf( x:number, a:number, b:number )"],["base.dists.kumaraswamy.logcdf.factory","base.dists.kumaraswamy.logcdf.factory( a:number, b:number )"],["base.dists.kumaraswamy.logpdf","base.dists.kumaraswamy.logpdf( x:number, a:number, b:number )"],["base.dists.kumaraswamy.logpdf.factory","base.dists.kumaraswamy.logpdf.factory( a:number, b:number )"],["base.dists.kumaraswamy.mean","base.dists.kumaraswamy.mean( a:number, b:number )"],["base.dists.kumaraswamy.median","base.dists.kumaraswamy.median( a:number, b:number )"],["base.dists.kumaraswamy.mode","base.dists.kumaraswamy.mode( a:number, b:number )"],["base.dists.kumaraswamy.pdf","base.dists.kumaraswamy.pdf( x:number, a:number, b:number )"],["base.dists.kumaraswamy.pdf.factory","base.dists.kumaraswamy.pdf.factory( a:number, b:number )"],["base.dists.kumaraswamy.quantile","base.dists.kumaraswamy.quantile( p:number, a:number, b:number )"],["base.dists.kumaraswamy.quantile.factory","base.dists.kumaraswamy.quantile.factory( a:number, b:number )"],["base.dists.kumaraswamy.skewness","base.dists.kumaraswamy.skewness( a:number, b:number )"],["base.dists.kumaraswamy.stdev","base.dists.kumaraswamy.stdev( a:number, b:number )"],["base.dists.kumaraswamy.variance","base.dists.kumaraswamy.variance( a:number, b:number )"],["base.dists.laplace.cdf","base.dists.laplace.cdf( x:number, μ:number, b:number )"],["base.dists.laplace.cdf.factory","base.dists.laplace.cdf.factory( μ:number, b:number )"],["base.dists.laplace.entropy","base.dists.laplace.entropy( μ:number, b:number )"],["base.dists.laplace.kurtosis","base.dists.laplace.kurtosis( μ:number, b:number )"],["base.dists.laplace.Laplace","base.dists.laplace.Laplace( [μ:number, b:number] )"],["base.dists.laplace.logcdf","base.dists.laplace.logcdf( x:number, μ:number, b:number )"],["base.dists.laplace.logcdf.factory","base.dists.laplace.logcdf.factory( μ:number, b:number )"],["base.dists.laplace.logpdf","base.dists.laplace.logpdf( x:number, μ:number, b:number )"],["base.dists.laplace.logpdf.factory","base.dists.laplace.logpdf.factory( μ:number, b:number )"],["base.dists.laplace.mean","base.dists.laplace.mean( μ:number, b:number )"],["base.dists.laplace.median","base.dists.laplace.median( μ:number, b:number )"],["base.dists.laplace.mgf","base.dists.laplace.mgf( t:number, μ:number, b:number )"],["base.dists.laplace.mgf.factory","base.dists.laplace.mgf.factory( μ:number, b:number )"],["base.dists.laplace.mode","base.dists.laplace.mode( μ:number, b:number )"],["base.dists.laplace.pdf","base.dists.laplace.pdf( x:number, μ:number, b:number )"],["base.dists.laplace.pdf.factory","base.dists.laplace.pdf.factory( μ:number, b:number )"],["base.dists.laplace.quantile","base.dists.laplace.quantile( p:number, μ:number, b:number )"],["base.dists.laplace.quantile.factory","base.dists.laplace.quantile.factory( μ:number, b:number )"],["base.dists.laplace.skewness","base.dists.laplace.skewness( μ:number, b:number )"],["base.dists.laplace.stdev","base.dists.laplace.stdev( μ:number, b:number )"],["base.dists.laplace.variance","base.dists.laplace.variance( μ:number, b:number )"],["base.dists.levy.cdf","base.dists.levy.cdf( x:number, μ:number, c:number )"],["base.dists.levy.cdf.factory","base.dists.levy.cdf.factory( μ:number, c:number )"],["base.dists.levy.entropy","base.dists.levy.entropy( μ:number, c:number )"],["base.dists.levy.Levy","base.dists.levy.Levy( [μ:number, c:number] )"],["base.dists.levy.logcdf","base.dists.levy.logcdf( x:number, μ:number, c:number )"],["base.dists.levy.logcdf.factory","base.dists.levy.logcdf.factory( μ:number, c:number )"],["base.dists.levy.logpdf","base.dists.levy.logpdf( x:number, μ:number, c:number )"],["base.dists.levy.logpdf.factory","base.dists.levy.logpdf.factory( μ:number, c:number )"],["base.dists.levy.mean","base.dists.levy.mean( μ:number, c:number )"],["base.dists.levy.median","base.dists.levy.median( μ:number, c:number )"],["base.dists.levy.mode","base.dists.levy.mode( μ:number, c:number )"],["base.dists.levy.pdf","base.dists.levy.pdf( x:number, μ:number, c:number )"],["base.dists.levy.pdf.factory","base.dists.levy.pdf.factory( μ:number, c:number )"],["base.dists.levy.quantile","base.dists.levy.quantile( p:number, μ:number, c:number )"],["base.dists.levy.quantile.factory","base.dists.levy.quantile.factory( μ:number, c:number )"],["base.dists.levy.stdev","base.dists.levy.stdev( μ:number, c:number )"],["base.dists.levy.variance","base.dists.levy.variance( μ:number, c:number )"],["base.dists.logistic.cdf","base.dists.logistic.cdf( x:number, μ:number, s:number )"],["base.dists.logistic.cdf.factory","base.dists.logistic.cdf.factory( μ:number, s:number )"],["base.dists.logistic.entropy","base.dists.logistic.entropy( μ:number, s:number )"],["base.dists.logistic.kurtosis","base.dists.logistic.kurtosis( μ:number, s:number )"],["base.dists.logistic.logcdf","base.dists.logistic.logcdf( x:number, μ:number, s:number )"],["base.dists.logistic.logcdf.factory","base.dists.logistic.logcdf.factory( μ:number, s:number )"],["base.dists.logistic.Logistic","base.dists.logistic.Logistic( [μ:number, s:number] )"],["base.dists.logistic.logpdf","base.dists.logistic.logpdf( x:number, μ:number, s:number )"],["base.dists.logistic.logpdf.factory","base.dists.logistic.logpdf.factory( μ:number, s:number )"],["base.dists.logistic.mean","base.dists.logistic.mean( μ:number, s:number )"],["base.dists.logistic.median","base.dists.logistic.median( μ:number, s:number )"],["base.dists.logistic.mgf","base.dists.logistic.mgf( t:number, μ:number, s:number )"],["base.dists.logistic.mgf.factory","base.dists.logistic.mgf.factory( μ:number, s:number )"],["base.dists.logistic.mode","base.dists.logistic.mode( μ:number, s:number )"],["base.dists.logistic.pdf","base.dists.logistic.pdf( x:number, μ:number, s:number )"],["base.dists.logistic.pdf.factory","base.dists.logistic.pdf.factory( μ:number, s:number )"],["base.dists.logistic.quantile","base.dists.logistic.quantile( p:number, μ:number, s:number )"],["base.dists.logistic.quantile.factory","base.dists.logistic.quantile.factory( μ:number, s:number )"],["base.dists.logistic.skewness","base.dists.logistic.skewness( μ:number, s:number )"],["base.dists.logistic.stdev","base.dists.logistic.stdev( μ:number, s:number )"],["base.dists.logistic.variance","base.dists.logistic.variance( μ:number, s:number )"],["base.dists.lognormal.cdf","base.dists.lognormal.cdf( x:number, μ:number, σ:number )"],["base.dists.lognormal.cdf.factory","base.dists.lognormal.cdf.factory( μ:number, σ:number )"],["base.dists.lognormal.entropy","base.dists.lognormal.entropy( μ:number, σ:number )"],["base.dists.lognormal.kurtosis","base.dists.lognormal.kurtosis( μ:number, σ:number )"],["base.dists.lognormal.LogNormal","base.dists.lognormal.LogNormal( [μ:number, σ:number] )"],["base.dists.lognormal.logcdf","base.dists.lognormal.logcdf( x:number, μ:number, σ:number )"],["base.dists.lognormal.logcdf.factory","base.dists.lognormal.logcdf.factory( μ:number, σ:number )"],["base.dists.lognormal.logpdf","base.dists.lognormal.logpdf( x:number, μ:number, σ:number )"],["base.dists.lognormal.logpdf.factory","base.dists.lognormal.logpdf.factory( μ:number, σ:number )"],["base.dists.lognormal.mean","base.dists.lognormal.mean( μ:number, σ:number )"],["base.dists.lognormal.median","base.dists.lognormal.median( μ:number, σ:number )"],["base.dists.lognormal.mode","base.dists.lognormal.mode( μ:number, σ:number )"],["base.dists.lognormal.pdf","base.dists.lognormal.pdf( x:number, μ:number, σ:number )"],["base.dists.lognormal.pdf.factory","base.dists.lognormal.pdf.factory( μ:number, σ:number )"],["base.dists.lognormal.quantile","base.dists.lognormal.quantile( p:number, μ:number, σ:number )"],["base.dists.lognormal.quantile.factory","base.dists.lognormal.quantile.factory( μ:number, σ:number )"],["base.dists.lognormal.skewness","base.dists.lognormal.skewness( μ:number, σ:number )"],["base.dists.lognormal.stdev","base.dists.lognormal.stdev( μ:number, σ:number )"],["base.dists.lognormal.variance","base.dists.lognormal.variance( μ:number, σ:number )"],["base.dists.negativeBinomial.cdf","base.dists.negativeBinomial.cdf( x:number, r:number, p:number )"],["base.dists.negativeBinomial.cdf.factory","base.dists.negativeBinomial.cdf.factory( r:number, p:number )"],["base.dists.negativeBinomial.kurtosis","base.dists.negativeBinomial.kurtosis( r:integer, p:number )"],["base.dists.negativeBinomial.logpmf","base.dists.negativeBinomial.logpmf( x:number, r:number, p:number )"],["base.dists.negativeBinomial.logpmf.factory","base.dists.negativeBinomial.logpmf.factory( r:number, p:number )"],["base.dists.negativeBinomial.mean","base.dists.negativeBinomial.mean( r:integer, p:number )"],["base.dists.negativeBinomial.mgf","base.dists.negativeBinomial.mgf( x:number, r:number, p:number )"],["base.dists.negativeBinomial.mgf.factory","base.dists.negativeBinomial.mgf.factory( r:number, p:number )"],["base.dists.negativeBinomial.mode","base.dists.negativeBinomial.mode( r:integer, p:number )"],["base.dists.negativeBinomial.NegativeBinomial","base.dists.negativeBinomial.NegativeBinomial( [r:number, p:number] )"],["base.dists.negativeBinomial.pmf","base.dists.negativeBinomial.pmf( x:number, r:number, p:number )"],["base.dists.negativeBinomial.pmf.factory","base.dists.negativeBinomial.pmf.factory( r:number, p:number )"],["base.dists.negativeBinomial.quantile","base.dists.negativeBinomial.quantile( k:number, r:number, p:number )"],["base.dists.negativeBinomial.quantile.factory","base.dists.negativeBinomial.quantile.factory( r:number, p:number )"],["base.dists.negativeBinomial.skewness","base.dists.negativeBinomial.skewness( r:integer, p:number )"],["base.dists.negativeBinomial.stdev","base.dists.negativeBinomial.stdev( r:integer, p:number )"],["base.dists.negativeBinomial.variance","base.dists.negativeBinomial.variance( r:integer, p:number )"],["base.dists.normal.cdf","base.dists.normal.cdf( x:number, μ:number, σ:number )"],["base.dists.normal.cdf.factory","base.dists.normal.cdf.factory( μ:number, σ:number )"],["base.dists.normal.entropy","base.dists.normal.entropy( μ:number, σ:number )"],["base.dists.normal.kurtosis","base.dists.normal.kurtosis( μ:number, σ:number )"],["base.dists.normal.logcdf","base.dists.normal.logcdf( x:number, μ:number, σ:number )"],["base.dists.normal.logcdf.factory","base.dists.normal.logcdf.factory( μ:number, σ:number )"],["base.dists.normal.logpdf","base.dists.normal.logpdf( x:number, μ:number, σ:number )"],["base.dists.normal.logpdf.factory","base.dists.normal.logpdf.factory( μ:number, σ:number )"],["base.dists.normal.mean","base.dists.normal.mean( μ:number, σ:number )"],["base.dists.normal.median","base.dists.normal.median( μ:number, σ:number )"],["base.dists.normal.mgf","base.dists.normal.mgf( x:number, μ:number, σ:number )"],["base.dists.normal.mgf.factory","base.dists.normal.mgf.factory( μ:number, σ:number )"],["base.dists.normal.mode","base.dists.normal.mode( μ:number, σ:number )"],["base.dists.normal.Normal","base.dists.normal.Normal( [μ:number, σ:number] )"],["base.dists.normal.pdf","base.dists.normal.pdf( x:number, μ:number, σ:number )"],["base.dists.normal.pdf.factory","base.dists.normal.pdf.factory( μ:number, σ:number )"],["base.dists.normal.quantile","base.dists.normal.quantile( p:number, μ:number, σ:number )"],["base.dists.normal.quantile.factory","base.dists.normal.quantile.factory( μ:number, σ:number )"],["base.dists.normal.skewness","base.dists.normal.skewness( μ:number, σ:number )"],["base.dists.normal.stdev","base.dists.normal.stdev( μ:number, σ:number )"],["base.dists.normal.variance","base.dists.normal.variance( μ:number, σ:number )"],["base.dists.pareto1.cdf","base.dists.pareto1.cdf( x:number, α:number, β:number )"],["base.dists.pareto1.cdf.factory","base.dists.pareto1.cdf.factory( α:number, β:number )"],["base.dists.pareto1.entropy","base.dists.pareto1.entropy( α:number, β:number )"],["base.dists.pareto1.kurtosis","base.dists.pareto1.kurtosis( α:number, β:number )"],["base.dists.pareto1.logcdf","base.dists.pareto1.logcdf( x:number, α:number, β:number )"],["base.dists.pareto1.logcdf.factory","base.dists.pareto1.logcdf.factory( α:number, β:number )"],["base.dists.pareto1.logpdf","base.dists.pareto1.logpdf( x:number, α:number, β:number )"],["base.dists.pareto1.logpdf.factory","base.dists.pareto1.logpdf.factory( α:number, β:number )"],["base.dists.pareto1.mean","base.dists.pareto1.mean( α:number, β:number )"],["base.dists.pareto1.median","base.dists.pareto1.median( α:number, β:number )"],["base.dists.pareto1.mode","base.dists.pareto1.mode( α:number, β:number )"],["base.dists.pareto1.Pareto1","base.dists.pareto1.Pareto1( [α:number, β:number] )"],["base.dists.pareto1.pdf","base.dists.pareto1.pdf( x:number, α:number, β:number )"],["base.dists.pareto1.pdf.factory","base.dists.pareto1.pdf.factory( α:number, β:number )"],["base.dists.pareto1.quantile","base.dists.pareto1.quantile( p:number, α:number, β:number )"],["base.dists.pareto1.quantile.factory","base.dists.pareto1.quantile.factory( α:number, β:number )"],["base.dists.pareto1.skewness","base.dists.pareto1.skewness( α:number, β:number )"],["base.dists.pareto1.stdev","base.dists.pareto1.stdev( α:number, β:number )"],["base.dists.pareto1.variance","base.dists.pareto1.variance( α:number, β:number )"],["base.dists.poisson.cdf","base.dists.poisson.cdf( x:number, λ:number )"],["base.dists.poisson.cdf.factory","base.dists.poisson.cdf.factory( λ:number )"],["base.dists.poisson.entropy","base.dists.poisson.entropy( λ:number )"],["base.dists.poisson.kurtosis","base.dists.poisson.kurtosis( λ:number )"],["base.dists.poisson.logpmf","base.dists.poisson.logpmf( x:number, λ:number )"],["base.dists.poisson.logpmf.factory","base.dists.poisson.logpmf.factory( λ:number )"],["base.dists.poisson.mean","base.dists.poisson.mean( λ:number )"],["base.dists.poisson.median","base.dists.poisson.median( λ:number )"],["base.dists.poisson.mgf","base.dists.poisson.mgf( x:number, λ:number )"],["base.dists.poisson.mgf.factory","base.dists.poisson.mgf.factory( λ:number )"],["base.dists.poisson.mode","base.dists.poisson.mode( λ:number )"],["base.dists.poisson.pmf","base.dists.poisson.pmf( x:number, λ:number )"],["base.dists.poisson.pmf.factory","base.dists.poisson.pmf.factory( λ:number )"],["base.dists.poisson.Poisson","base.dists.poisson.Poisson( [λ:number] )"],["base.dists.poisson.quantile","base.dists.poisson.quantile( p:number, λ:number )"],["base.dists.poisson.quantile.factory","base.dists.poisson.quantile.factory( λ:number )"],["base.dists.poisson.skewness","base.dists.poisson.skewness( λ:number )"],["base.dists.poisson.stdev","base.dists.poisson.stdev( λ:number )"],["base.dists.poisson.variance","base.dists.poisson.variance( λ:number )"],["base.dists.rayleigh.cdf","base.dists.rayleigh.cdf( x:number, sigma:number )"],["base.dists.rayleigh.cdf.factory","base.dists.rayleigh.cdf.factory( sigma:number )"],["base.dists.rayleigh.entropy","base.dists.rayleigh.entropy( σ:number )"],["base.dists.rayleigh.kurtosis","base.dists.rayleigh.kurtosis( σ:number )"],["base.dists.rayleigh.logcdf","base.dists.rayleigh.logcdf( x:number, sigma:number )"],["base.dists.rayleigh.logcdf.factory","base.dists.rayleigh.logcdf.factory( sigma:number )"],["base.dists.rayleigh.logpdf","base.dists.rayleigh.logpdf( x:number, sigma:number )"],["base.dists.rayleigh.logpdf.factory","base.dists.rayleigh.logpdf.factory( sigma:number )"],["base.dists.rayleigh.mean","base.dists.rayleigh.mean( σ:number )"],["base.dists.rayleigh.median","base.dists.rayleigh.median( σ:number )"],["base.dists.rayleigh.mgf","base.dists.rayleigh.mgf( t:number, sigma:number )"],["base.dists.rayleigh.mgf.factory","base.dists.rayleigh.mgf.factory( sigma:number )"],["base.dists.rayleigh.mode","base.dists.rayleigh.mode( σ:number )"],["base.dists.rayleigh.pdf","base.dists.rayleigh.pdf( x:number, sigma:number )"],["base.dists.rayleigh.pdf.factory","base.dists.rayleigh.pdf.factory( sigma:number )"],["base.dists.rayleigh.quantile","base.dists.rayleigh.quantile( p:number, sigma:number )"],["base.dists.rayleigh.quantile.factory","base.dists.rayleigh.quantile.factory( sigma:number )"],["base.dists.rayleigh.Rayleigh","base.dists.rayleigh.Rayleigh( [σ:number] )"],["base.dists.rayleigh.skewness","base.dists.rayleigh.skewness( σ:number )"],["base.dists.rayleigh.stdev","base.dists.rayleigh.stdev( σ:number )"],["base.dists.rayleigh.variance","base.dists.rayleigh.variance( σ:number )"],["base.dists.signrank.cdf","base.dists.signrank.cdf( x:number, n:integer )"],["base.dists.signrank.cdf.factory","base.dists.signrank.cdf.factory( n:integer )"],["base.dists.signrank.pdf","base.dists.signrank.pdf( x:number, n:integer )"],["base.dists.signrank.pdf.factory","base.dists.signrank.pdf.factory( n:integer )"],["base.dists.signrank.quantile","base.dists.signrank.quantile( p:number, n:integer )"],["base.dists.signrank.quantile.factory","base.dists.signrank.quantile.factory( n:integer )"],["base.dists.studentizedRange.cdf","base.dists.studentizedRange.cdf( x:number, r:number, v:number[, nranges:integer] )"],["base.dists.studentizedRange.cdf.factory","base.dists.studentizedRange.cdf.factory( r:number, v:number[, nranges:integer] )"],["base.dists.studentizedRange.quantile","base.dists.studentizedRange.quantile( p:number, r:number, v:number[, nranges:integer] )"],["base.dists.studentizedRange.quantile.factory","base.dists.studentizedRange.quantile.factory( r:number, v:number[, nranges:integer] )"],["base.dists.t.cdf","base.dists.t.cdf( x:number, v:number )"],["base.dists.t.cdf.factory","base.dists.t.cdf.factory( v:number )"],["base.dists.t.entropy","base.dists.t.entropy( v:number )"],["base.dists.t.kurtosis","base.dists.t.kurtosis( v:number )"],["base.dists.t.logcdf","base.dists.t.logcdf( x:number, v:number )"],["base.dists.t.logcdf.factory","base.dists.t.logcdf.factory( v:number )"],["base.dists.t.logpdf","base.dists.t.logpdf( x:number, v:number )"],["base.dists.t.logpdf.factory","base.dists.t.logpdf.factory( v:number )"],["base.dists.t.mean","base.dists.t.mean( v:number )"],["base.dists.t.median","base.dists.t.median( v:number )"],["base.dists.t.mode","base.dists.t.mode( v:number )"],["base.dists.t.pdf","base.dists.t.pdf( x:number, v:number )"],["base.dists.t.pdf.factory","base.dists.t.pdf.factory( v:number )"],["base.dists.t.quantile","base.dists.t.quantile( p:number, v:number )"],["base.dists.t.quantile.factory","base.dists.t.quantile.factory( v:number )"],["base.dists.t.skewness","base.dists.t.skewness( v:number )"],["base.dists.t.stdev","base.dists.t.stdev( v:number )"],["base.dists.t.T","base.dists.t.T( [v:number] )"],["base.dists.t.variance","base.dists.t.variance( v:number )"],["base.dists.triangular.cdf","base.dists.triangular.cdf( x:number, a:number, b:number, c:number )"],["base.dists.triangular.cdf.factory","base.dists.triangular.cdf.factory( a:number, b:number, c:number )"],["base.dists.triangular.entropy","base.dists.triangular.entropy( a:number, b:number, c:number )"],["base.dists.triangular.kurtosis","base.dists.triangular.kurtosis( a:number, b:number, c:number )"],["base.dists.triangular.logcdf","base.dists.triangular.logcdf( x:number, a:number, b:number, c:number )"],["base.dists.triangular.logcdf.factory","base.dists.triangular.logcdf.factory( a:number, b:number, c:number )"],["base.dists.triangular.logpdf","base.dists.triangular.logpdf( x:number, a:number, b:number, c:number )"],["base.dists.triangular.logpdf.factory","base.dists.triangular.logpdf.factory( a:number, b:number, c:number )"],["base.dists.triangular.mean","base.dists.triangular.mean( a:number, b:number, c:number )"],["base.dists.triangular.median","base.dists.triangular.median( a:number, b:number, c:number )"],["base.dists.triangular.mgf","base.dists.triangular.mgf( t:number, a:number, b:number, c:number )"],["base.dists.triangular.mgf.factory","base.dists.triangular.mgf.factory( a:number, b:number, c:number )"],["base.dists.triangular.mode","base.dists.triangular.mode( a:number, b:number, c:number )"],["base.dists.triangular.pdf","base.dists.triangular.pdf( x:number, a:number, b:number, c:number )"],["base.dists.triangular.pdf.factory","base.dists.triangular.pdf.factory( a:number, b:number, c:number )"],["base.dists.triangular.quantile","base.dists.triangular.quantile( p:number, a:number, b:number, c:number )"],["base.dists.triangular.quantile.factory","base.dists.triangular.quantile.factory( a:number, b:number, c:number )"],["base.dists.triangular.skewness","base.dists.triangular.skewness( a:number, b:number, c:number )"],["base.dists.triangular.stdev","base.dists.triangular.stdev( a:number, b:number, c:number )"],["base.dists.triangular.Triangular","base.dists.triangular.Triangular( [a:number, b:number, c:number] )"],["base.dists.triangular.variance","base.dists.triangular.variance( a:number, b:number, c:number )"],["base.dists.uniform.cdf","base.dists.uniform.cdf( x:number, a:number, b:number )"],["base.dists.uniform.cdf.factory","base.dists.uniform.cdf.factory( a:number, b:number )"],["base.dists.uniform.entropy","base.dists.uniform.entropy( a:number, b:number )"],["base.dists.uniform.kurtosis","base.dists.uniform.kurtosis( a:number, b:number )"],["base.dists.uniform.logcdf","base.dists.uniform.logcdf( x:number, a:number, b:number )"],["base.dists.uniform.logcdf.factory","base.dists.uniform.logcdf.factory( a:number, b:number )"],["base.dists.uniform.logpdf","base.dists.uniform.logpdf( x:number, a:number, b:number )"],["base.dists.uniform.logpdf.factory","base.dists.uniform.logpdf.factory( a:number, b:number )"],["base.dists.uniform.mean","base.dists.uniform.mean( a:number, b:number )"],["base.dists.uniform.median","base.dists.uniform.median( a:number, b:number )"],["base.dists.uniform.mgf","base.dists.uniform.mgf( t:number, a:number, b:number )"],["base.dists.uniform.mgf.factory","base.dists.uniform.mgf.factory( a:number, b:number )"],["base.dists.uniform.pdf","base.dists.uniform.pdf( x:number, a:number, b:number )"],["base.dists.uniform.pdf.factory","base.dists.uniform.pdf.factory( a:number, b:number )"],["base.dists.uniform.quantile","base.dists.uniform.quantile( p:number, a:number, b:number )"],["base.dists.uniform.quantile.factory","base.dists.uniform.quantile.factory( a:number, b:number )"],["base.dists.uniform.skewness","base.dists.uniform.skewness( a:number, b:number )"],["base.dists.uniform.stdev","base.dists.uniform.stdev( a:number, b:number )"],["base.dists.uniform.Uniform","base.dists.uniform.Uniform( [a:number, b:number] )"],["base.dists.uniform.variance","base.dists.uniform.variance( a:number, b:number )"],["base.dists.weibull.cdf","base.dists.weibull.cdf( x:number, k:number, λ:number )"],["base.dists.weibull.cdf.factory","base.dists.weibull.cdf.factory( k:number, λ:number )"],["base.dists.weibull.entropy","base.dists.weibull.entropy( k:number, λ:number )"],["base.dists.weibull.kurtosis","base.dists.weibull.kurtosis( k:number, λ:number )"],["base.dists.weibull.logcdf","base.dists.weibull.logcdf( x:number, k:number, λ:number )"],["base.dists.weibull.logcdf.factory","base.dists.weibull.logcdf.factory( k:number, λ:number)"],["base.dists.weibull.logpdf","base.dists.weibull.logpdf( x:number, k:number, λ:number )"],["base.dists.weibull.logpdf.factory","base.dists.weibull.logpdf.factory( k:number, λ:number )"],["base.dists.weibull.mean","base.dists.weibull.mean( k:number, λ:number )"],["base.dists.weibull.median","base.dists.weibull.median( k:number, λ:number )"],["base.dists.weibull.mgf","base.dists.weibull.mgf( x:number, k:number, λ:number )"],["base.dists.weibull.mgf.factory","base.dists.weibull.mgf.factory( k:number, λ:number )"],["base.dists.weibull.mode","base.dists.weibull.mode( k:number, λ:number )"],["base.dists.weibull.pdf","base.dists.weibull.pdf( x:number, k:number, λ:number )"],["base.dists.weibull.pdf.factory","base.dists.weibull.pdf.factory( k:number, λ:number )"],["base.dists.weibull.quantile","base.dists.weibull.quantile( p:number, k:number, λ:number )"],["base.dists.weibull.quantile.factory","base.dists.weibull.quantile.factory( k:number, λ:number )"],["base.dists.weibull.skewness","base.dists.weibull.skewness( k:number, λ:number )"],["base.dists.weibull.stdev","base.dists.weibull.stdev( k:number, λ:number )"],["base.dists.weibull.variance","base.dists.weibull.variance( k:number, λ:number )"],["base.dists.weibull.Weibull","base.dists.weibull.Weibull( [k:number, λ:number] )"],["base.ellipe","base.ellipe( m:number )"],["base.ellipj","base.ellipj( u:number, m:number )"],["base.ellipj.assign","base.ellipj.assign( u:number, m:number, out:Array|TypedArray|Object, stride:integer, offset:integer )"],["base.ellipj.sn","base.ellipj.sn( u:number, m:number )"],["base.ellipj.cn","base.ellipj.cn( u:number, m:number )"],["base.ellipj.dn","base.ellipj.dn( u:number, m:number )"],["base.ellipj.am","base.ellipj.am( u:number, m:number )"],["base.ellipk","base.ellipk( m:number )"],["base.endsWith","base.endsWith( str:string, search:string, len:integer )"],["base.epsdiff","base.epsdiff( x:number, y:number[, scale:string|Function] )"],["base.erf","base.erf( x:number )"],["base.erfc","base.erfc( x:number )"],["base.erfcinv","base.erfcinv( x:number )"],["base.erfcx","base.erfcx( x:number )"],["base.erfinv","base.erfinv( x:number )"],["base.eta","base.eta( s:number )"],["base.evalpoly","base.evalpoly( c:Array<number>, x:number )"],["base.evalpoly.factory","base.evalpoly.factory( c:Array<number> )"],["base.evalrational","base.evalrational( P:Array<number>, Q:Array<number>, x:number )"],["base.evalrational.factory","base.evalrational.factory( P:Array<number>, Q:Array<number> )"],["base.exp","base.exp( x:number )"],["base.exp2","base.exp2( x:number )"],["base.exp10","base.exp10( x:number )"],["base.expit","base.expit( x:number )"],["base.expm1","base.expm1( x:number )"],["base.expm1rel","base.expm1rel( x:number )"],["base.exponent","base.exponent( x:number )"],["base.exponentf","base.exponentf( x:float )"],["base.factorial","base.factorial( x:number )"],["base.factorial2","base.factorial2( n:number )"],["base.factorialln","base.factorialln( x:number )"],["base.fallingFactorial","base.fallingFactorial( x:number, n:integer )"],["base.fibonacci","base.fibonacci( n:integer )"],["base.fibonacciIndex","base.fibonacciIndex( F:integer )"],["base.fibpoly","base.fibpoly( n:integer, x:number )"],["base.fibpoly.factory","base.fibpoly.factory( n:integer )"],["base.firstCodePoint","base.firstCodePoint( str:string, n:integer )"],["base.firstCodeUnit","base.firstCodeUnit( str:string, n:integer )"],["base.firstGraphemeCluster","base.firstGraphemeCluster( str:string, n:integer )"],["base.flipsign","base.flipsign( x:number, y:number )"],["base.flipsignf","base.flipsignf( x:number, y:number )"],["base.float32ToInt32","base.float32ToInt32( x:float )"],["base.float32ToUint32","base.float32ToUint32( x:float )"],["base.float64ToFloat32","base.float64ToFloat32( x:number )"],["base.float64ToInt32","base.float64ToInt32( x:number )"],["base.float64ToInt64Bytes","base.float64ToInt64Bytes( x:integer )"],["base.float64ToInt64Bytes.assign","base.float64ToInt64Bytes.assign( x:integer, out:Array|TypedArray|Object, stride:integer, offset:integer )"],["base.float64ToUint32","base.float64ToUint32( x:number )"],["base.floor","base.floor( x:number )"],["base.floor2","base.floor2( x:number )"],["base.floor10","base.floor10( x:number )"],["base.floorb","base.floorb( x:number, n:integer, b:integer )"],["base.floorf","base.floorf( x:number )"],["base.floorn","base.floorn( x:number, n:integer )"],["base.floorsd","base.floorsd( x:number, n:integer[, b:integer] )"],["base.forEachChar","base.forEachChar( str:string, clbk:Function[, thisArg:any] )"],["base.forEachCodePoint","base.forEachCodePoint( str:string, clbk:Function[, thisArg:any] )"],["base.forEachCodePointRight","base.forEachCodePointRight( str:string, clbk:Function[, thisArg:any] )"],["base.forEachGraphemeCluster","base.forEachGraphemeCluster( str:string, clbk:Function[, thisArg:any] )"],["base.forEachRight","base.forEachRight( str:string, clbk:Function[, thisArg:any] )"],["base.formatInterpolate","base.formatInterpolate( tokens:Array, ...args:any )"],["base.formatTokenize","base.formatTokenize( str:string )"],["base.fresnel","base.fresnel( x:number )"],["base.fresnel.assign","base.fresnel.assign( x:number, out:Array<number>, stride:integer, offset:integer )"],["base.fresnelc","base.fresnelc( x:number )"],["base.fresnels","base.fresnels( x:number )"],["base.frexp","base.frexp( x:number )"],["base.frexp.assign","base.frexp.assign( x:number, out:Array<number>, stride:integer, offset:integer )"],["base.fromBinaryString","base.fromBinaryString( bstr:string )"],["base.fromBinaryStringf","base.fromBinaryStringf( bstr:string )"],["base.fromBinaryStringUint8","base.fromBinaryStringUint8( bstr:string )"],["base.fromBinaryStringUint16","base.fromBinaryStringUint16( bstr:string )"],["base.fromBinaryStringUint32","base.fromBinaryStringUint32( bstr:string )"],["base.fromInt64Bytes","base.fromInt64Bytes( bytes:Array|TypedArray|Object, stride:integer, offset:integer )"],["base.fromWordf","base.fromWordf( word:integer )"],["base.fromWords","base.fromWords( high:integer, low:integer )"],["base.gamma","base.gamma( x:number )"],["base.gamma1pm1","base.gamma1pm1( x:number )"],["base.gammaDeltaRatio","base.gammaDeltaRatio( z:number, delta:number )"],["base.gammainc","base.gammainc( x:number, s:number[, regularized:boolean[, upper:boolean]] )"],["base.gammaincinv","base.gammaincinv( p:number, a:number[, upper:boolean] )"],["base.gammaLanczosSum","base.gammaLanczosSum( x:number )"],["base.gammaLanczosSumExpGScaled","base.gammaLanczosSumExpGScaled( x:number )"],["base.gammaln","base.gammaln( x:number )"],["base.gammasgn","base.gammasgn( x:number )"],["base.gcd","base.gcd( a:integer, b:integer )"],["base.getHighWord","base.getHighWord( x:number )"],["base.getLowWord","base.getLowWord( x:number )"],["base.hacovercos","base.hacovercos( x:number )"],["base.hacoversin","base.hacoversin( x:number )"],["base.havercos","base.havercos( x:number )"],["base.haversin","base.haversin( x:number )"],["base.headercase","base.headercase( str:string )"],["base.heaviside","base.heaviside( x:number[, continuity:string] )"],["base.hermitepoly","base.hermitepoly( n:integer, x:number )"],["base.hermitepoly.factory","base.hermitepoly.factory( n:integer )"],["base.hypot","base.hypot( x:number, y:number )"],["base.hypotf","base.hypotf( x:number, y:number )"],["base.identity","base.identity( x:number )"],["base.identityf","base.identityf( x:number )"],["base.imul","base.imul( a:integer, b:integer )"],["base.imuldw","base.imuldw( a:integer, b:integer )"],["base.imuldw.assign","base.imuldw.assign( a:integer, b:integer, out:Array|TypedArray|Object, stride:integer, offset:integer )"],["base.int2slice","base.int2slice( value:integer, max:integer, strict:boolean )"],["base.int32ToUint32","base.int32ToUint32( x:integer )"],["base.inv","base.inv( x:number )"],["base.invcase","base.invcase( str:string )"],["base.invf","base.invf( x:number )"],["base.isComposite","base.isComposite( x:number )"],["base.isCoprime","base.isCoprime( a:number, b:number )"],["base.isEven","base.isEven( x:number )"],["base.isEvenInt32","base.isEvenInt32( x:integer )"],["base.isFinite","base.isFinite( x:number )"],["base.isFinitef","base.isFinitef( x:number )"],["base.isInfinite","base.isInfinite( x:number )"],["base.isInfinitef","base.isInfinitef( x:number )"],["base.isInteger","base.isInteger( x:number )"],["base.isnan","base.isnan( x:number )"],["base.isnanf","base.isnanf( x:number )"],["base.isNegativeFinite","base.isNegativeFinite( x:number )"],["base.isNegativeInteger","base.isNegativeInteger( x:number )"],["base.isNegativeZero","base.isNegativeZero( x:number )"],["base.isNegativeZerof","base.isNegativeZerof( x:number )"],["base.isNonNegativeFinite","base.isNonNegativeFinite( x:number )"],["base.isNonNegativeInteger","base.isNonNegativeInteger( x:number )"],["base.isNonPositiveFinite","base.isNonPositiveFinite( x:number )"],["base.isNonPositiveInteger","base.isNonPositiveInteger( x:number )"],["base.isOdd","base.isOdd( x:number )"],["base.isOddInt32","base.isOddInt32( x:integer )"],["base.isPositiveFinite","base.isPositiveFinite( x:number )"],["base.isPositiveInteger","base.isPositiveInteger( x:number )"],["base.isPositiveZero","base.isPositiveZero( x:number )"],["base.isPositiveZerof","base.isPositiveZerof( x:number )"],["base.isPow2Uint32","base.isPow2Uint32( x:integer )"],["base.isPrime","base.isPrime( x:number )"],["base.isProbability","base.isProbability( x:number )"],["base.isSafeInteger","base.isSafeInteger( x:number )"],["base.kebabcase","base.kebabcase( str:string )"],["base.kernelBetainc","base.kernelBetainc( x:number, a:number, b:number, regularized:boolean, upper:boolean )"],["base.kernelBetainc.assign","base.kernelBetainc.assign( x:number, a:number, b:number, regularized:boolean, upper:boolean, out:Array|TypedArray|Object, stride:integer, offset:integer )"],["base.kernelBetaincinv","base.kernelBetaincinv( a:number, b:number, p:number, q:number )"],["base.kernelCos","base.kernelCos( x:number, y:number )"],["base.kernelLog1p","base.kernelLog1p( f:number )"],["base.kernelSin","base.kernelSin( x:number, y:number )"],["base.kernelTan","base.kernelTan( x:number, y:number, k:integer )"],["base.kroneckerDelta","base.kroneckerDelta( i:number, j:number )"],["base.kroneckerDeltaf","base.kroneckerDeltaf( i:number, j:number )"],["base.labs","base.labs( x:integer )"],["base.last","base.last( str:string, n:integer )"],["base.lastCodePoint","base.lastCodePoint( str:string, n:integer )"],["base.lastGraphemeCluster","base.lastGraphemeCluster( str:string, n:integer )"],["base.lcm","base.lcm( a:integer, b:integer )"],["base.ldexp","base.ldexp( frac:number, exp:number )"],["base.leftPad","base.leftPad( str:string, len:integer, pad:string )"],["base.leftTrim","base.leftTrim( str:string )"],["base.ln","base.ln( x:number )"],["base.log","base.log( x:number, b:number )"],["base.log1mexp","base.log1mexp( x:number )"],["base.log1p","base.log1p( x:number )"],["base.log1pexp","base.log1pexp( x:number )"],["base.log1pmx","base.log1pmx( x:number )"],["base.log2","base.log2( x:number )"],["base.log10","base.log10( x:number )"],["base.logaddexp","base.logaddexp( x:number, y:number )"],["base.logit","base.logit( p:number )"],["base.lowercase","base.lowercase( str:string )"],["base.lucas","base.lucas( n:integer )"],["base.lucaspoly","base.lucaspoly( n:integer, x:number )"],["base.lucaspoly.factory","base.lucaspoly.factory( n:integer )"],["base.max","base.max( x:number, y:number )"],["base.maxabs","base.maxabs( x:number, y:number )"],["base.maxabsn","base.maxabsn( [x:number[, y:number[, ...args:number]]] )"],["base.maxn","base.maxn( [x:number[, y:number[, ...args:number]]] )"],["base.min","base.min( x:number, y:number )"],["base.minabs","base.minabs( x:number, y:number )"],["base.minabsn","base.minabsn( [x:number[, y:number[, ...args:number]]] )"],["base.minmax","base.minmax( x:number, y:number )"],["base.minmax.assign","base.minmax.assign( x:number, y:number, out:Array|TypedArray|Object, stride:integer, offset:integer )"],["base.minmaxabs","base.minmaxabs( x:number, y:number )"],["base.minmaxabs.assign","base.minmaxabs.assign( x:number, y:number, out:Array|TypedArray|Object, stride:integer, offset:integer )"],["base.minmaxabsn","base.minmaxabsn( [x:number[, y:number[, ...args:number]]] )"],["base.minmaxabsn.assign","base.minmaxabsn.assign( [x:number[, y:number[, ...args:number]]], out:Array|TypedArray|Object, stride:integer, offset:integer )"],["base.minmaxn","base.minmaxn( [x:number[, y:number[, ...args:number]]] )"],["base.minmaxn.assign","base.minmaxn.assign( [x:number[, y:number[, ...args:number]]], out:Array|TypedArray|Object, stride:integer, offset:integer )"],["base.minn","base.minn( [x:number[, y:number[, ...args:number]]] )"],["base.modf","base.modf( x:number )"],["base.modf.assign","base.modf.assign( x:number, out:Array|TypedArray|Object, stride:integer, offset:integer )"],["base.mul","base.mul( x:number, y:number )"],["base.mulf","base.mulf( x:number, y:number )"],["base.ndarray","base.ndarray( dtype:string, buffer:ArrayLikeObject|TypedArray|Buffer, shape:ArrayLikeObject<integer>, strides:ArrayLikeObject<integer>, offset:integer, order:string )"],["base.ndarray.prototype.byteLength","base.ndarray.prototype.byteLength"],["base.ndarray.prototype.BYTES_PER_ELEMENT","base.ndarray.prototype.BYTES_PER_ELEMENT"],["base.ndarray.prototype.data","base.ndarray.prototype.data"],["base.ndarray.prototype.dtype","base.ndarray.prototype.dtype"],["base.ndarray.prototype.flags","base.ndarray.prototype.flags"],["base.ndarray.prototype.length","base.ndarray.prototype.length"],["base.ndarray.prototype.ndims","base.ndarray.prototype.ndims"],["base.ndarray.prototype.offset","base.ndarray.prototype.offset"],["base.ndarray.prototype.order: string","base.ndarray.prototype.order: string"],["base.ndarray.prototype.shape","base.ndarray.prototype.shape"],["base.ndarray.prototype.strides","base.ndarray.prototype.strides"],["base.ndarray.prototype.get","base.ndarray.prototype.get( ...idx:integer )"],["base.ndarray.prototype.iget","base.ndarray.prototype.iget( idx:integer )"],["base.ndarray.prototype.set","base.ndarray.prototype.set( ...idx:integer, v:any )"],["base.ndarray.prototype.iset","base.ndarray.prototype.iset( idx:integer, v:any )"],["base.ndarray.prototype.toString","base.ndarray.prototype.toString()"],["base.ndarray.prototype.toJSON","base.ndarray.prototype.toJSON()"],["base.ndarrayUnary","base.ndarrayUnary( arrays:ArrayLikeObject<ndarray>, fcn:Function )"],["base.ndzeros","base.ndzeros( dtype:string, shape:ArrayLikeObject<integer>, order:string )"],["base.ndzerosLike","base.ndzerosLike( x:ndarray )"],["base.negafibonacci","base.negafibonacci( n:integer )"],["base.negalucas","base.negalucas( n:integer )"],["base.nonfibonacci","base.nonfibonacci( n:integer )"],["base.normalize","base.normalize( x:number )"],["base.normalize.assign","base.normalize.assign( x:number, out:Array|TypedArray|Object, stride:integer, offset:integer )"],["base.normalizef","base.normalizef( x:float )"],["base.normalizef.assign","base.normalizef.assign( x:float, out:Array|TypedArray|Object, stride:integer, offset:integer )"],["base.normalizeSlice","base.normalizeSlice( slice:Slice, len:integer, strict:boolean )"],["base.normhermitepoly","base.normhermitepoly( n:integer, x:number )"],["base.normhermitepoly.factory","base.normhermitepoly.factory( n:integer )"],["base.pascalcase","base.pascalcase( str:string )"],["base.pdiff","base.pdiff( x:number, y:number )"],["base.pdifff","base.pdifff( x:number, y:number )"],["base.percentEncode","base.percentEncode( str:string )"],["base.polygamma","base.polygamma( n:integer, x:number )"],["base.pow","base.pow( b:number, x:number )"],["base.powm1","base.powm1( b:number, x:number )"],["base.rad2deg","base.rad2deg( x:number )"],["base.rad2degf","base.rad2degf( x:number )"],["base.ramp","base.ramp( x:number )"],["base.rampf","base.rampf( x:number )"],["base.random.arcsine","base.random.arcsine( a:number, b:number )"],["base.random.arcsine.factory","base.random.arcsine.factory( [a:number, b:number, ][options:Object] )"],["base.random.arcsine.NAME","base.random.arcsine.NAME"],["base.random.arcsine.PRNG","base.random.arcsine.PRNG"],["base.random.arcsine.seed","base.random.arcsine.seed"],["base.random.arcsine.seedLength","base.random.arcsine.seedLength"],["base.random.arcsine.state","base.random.arcsine.state"],["base.random.arcsine.stateLength","base.random.arcsine.stateLength"],["base.random.arcsine.byteLength","base.random.arcsine.byteLength"],["base.random.arcsine.toJSON","base.random.arcsine.toJSON()"],["base.random.bernoulli","base.random.bernoulli( p:number )"],["base.random.bernoulli.factory","base.random.bernoulli.factory( [p:number, ][options:Object] )"],["base.random.bernoulli.NAME","base.random.bernoulli.NAME"],["base.random.bernoulli.PRNG","base.random.bernoulli.PRNG"],["base.random.bernoulli.seed","base.random.bernoulli.seed"],["base.random.bernoulli.seedLength","base.random.bernoulli.seedLength"],["base.random.bernoulli.state","base.random.bernoulli.state"],["base.random.bernoulli.stateLength","base.random.bernoulli.stateLength"],["base.random.bernoulli.byteLength","base.random.bernoulli.byteLength"],["base.random.bernoulli.toJSON","base.random.bernoulli.toJSON()"],["base.random.beta","base.random.beta( α:number, β:number )"],["base.random.beta.factory","base.random.beta.factory( [α:number, β:number, ][options:Object] )"],["base.random.beta.NAME","base.random.beta.NAME"],["base.random.beta.PRNG","base.random.beta.PRNG"],["base.random.beta.seed","base.random.beta.seed"],["base.random.beta.seedLength","base.random.beta.seedLength"],["base.random.beta.state","base.random.beta.state"],["base.random.beta.stateLength","base.random.beta.stateLength"],["base.random.beta.byteLength","base.random.beta.byteLength"],["base.random.beta.toJSON","base.random.beta.toJSON()"],["base.random.betaprime","base.random.betaprime( α:number, β:number )"],["base.random.betaprime.factory","base.random.betaprime.factory( [α:number, β:number, ][options:Object] )"],["base.random.betaprime.NAME","base.random.betaprime.NAME"],["base.random.betaprime.PRNG","base.random.betaprime.PRNG"],["base.random.betaprime.seed","base.random.betaprime.seed"],["base.random.betaprime.seedLength","base.random.betaprime.seedLength"],["base.random.betaprime.state","base.random.betaprime.state"],["base.random.betaprime.stateLength","base.random.betaprime.stateLength"],["base.random.betaprime.byteLength","base.random.betaprime.byteLength"],["base.random.betaprime.toJSON","base.random.betaprime.toJSON()"],["base.random.binomial","base.random.binomial( n:integer, p:number )"],["base.random.binomial.factory","base.random.binomial.factory( [n:integer, p:number, ][options:Object] )"],["base.random.binomial.NAME","base.random.binomial.NAME"],["base.random.binomial.PRNG","base.random.binomial.PRNG"],["base.random.binomial.seed","base.random.binomial.seed"],["base.random.binomial.seedLength","base.random.binomial.seedLength"],["base.random.binomial.state","base.random.binomial.state"],["base.random.binomial.stateLength","base.random.binomial.stateLength"],["base.random.binomial.byteLength","base.random.binomial.byteLength"],["base.random.binomial.toJSON","base.random.binomial.toJSON()"],["base.random.boxMuller","base.random.boxMuller()"],["base.random.boxMuller.factory","base.random.boxMuller.factory( [options:Object] )"],["base.random.boxMuller.NAME","base.random.boxMuller.NAME"],["base.random.boxMuller.PRNG","base.random.boxMuller.PRNG"],["base.random.boxMuller.seed","base.random.boxMuller.seed"],["base.random.boxMuller.seedLength","base.random.boxMuller.seedLength"],["base.random.boxMuller.state","base.random.boxMuller.state"],["base.random.boxMuller.stateLength","base.random.boxMuller.stateLength"],["base.random.boxMuller.byteLength","base.random.boxMuller.byteLength"],["base.random.boxMuller.toJSON","base.random.boxMuller.toJSON()"],["base.random.cauchy","base.random.cauchy( x0:number, Ɣ:number )"],["base.random.cauchy.factory","base.random.cauchy.factory( [x0:number, Ɣ:number, ][options:Object] )"],["base.random.cauchy.NAME","base.random.cauchy.NAME"],["base.random.cauchy.PRNG","base.random.cauchy.PRNG"],["base.random.cauchy.seed","base.random.cauchy.seed"],["base.random.cauchy.seedLength","base.random.cauchy.seedLength"],["base.random.cauchy.state","base.random.cauchy.state"],["base.random.cauchy.stateLength","base.random.cauchy.stateLength"],["base.random.cauchy.byteLength","base.random.cauchy.byteLength"],["base.random.cauchy.toJSON","base.random.cauchy.toJSON()"],["base.random.chi","base.random.chi( k:number )"],["base.random.chi.factory","base.random.chi.factory( [k:number, ][options:Object] )"],["base.random.chi.NAME","base.random.chi.NAME"],["base.random.chi.PRNG","base.random.chi.PRNG"],["base.random.chi.seed","base.random.chi.seed"],["base.random.chi.seedLength","base.random.chi.seedLength"],["base.random.chi.state","base.random.chi.state"],["base.random.chi.stateLength","base.random.chi.stateLength"],["base.random.chi.byteLength","base.random.chi.byteLength"],["base.random.chi.toJSON","base.random.chi.toJSON()"],["base.random.chisquare","base.random.chisquare( k:number )"],["base.random.chisquare.factory","base.random.chisquare.factory( [k:number, ][options:Object] )"],["base.random.chisquare.NAME","base.random.chisquare.NAME"],["base.random.chisquare.PRNG","base.random.chisquare.PRNG"],["base.random.chisquare.seed","base.random.chisquare.seed"],["base.random.chisquare.seedLength","base.random.chisquare.seedLength"],["base.random.chisquare.state","base.random.chisquare.state"],["base.random.chisquare.stateLength","base.random.chisquare.stateLength"],["base.random.chisquare.byteLength","base.random.chisquare.byteLength"],["base.random.chisquare.toJSON","base.random.chisquare.toJSON()"],["base.random.cosine","base.random.cosine( μ:number, s:number )"],["base.random.cosine.factory","base.random.cosine.factory( [μ:number, s:number, ][options:Object] )"],["base.random.cosine.NAME","base.random.cosine.NAME"],["base.random.cosine.PRNG","base.random.cosine.PRNG"],["base.random.cosine.seed","base.random.cosine.seed"],["base.random.cosine.seedLength","base.random.cosine.seedLength"],["base.random.cosine.state","base.random.cosine.state"],["base.random.cosine.stateLength","base.random.cosine.stateLength"],["base.random.cosine.byteLength","base.random.cosine.byteLength"],["base.random.cosine.toJSON","base.random.cosine.toJSON()"],["base.random.discreteUniform","base.random.discreteUniform( a:integer, b:integer )"],["base.random.discreteUniform.factory","base.random.discreteUniform.factory( [a:integer, b:integer, ][options:Object] )"],["base.random.discreteUniform.NAME","base.random.discreteUniform.NAME"],["base.random.discreteUniform.PRNG","base.random.discreteUniform.PRNG"],["base.random.discreteUniform.seed","base.random.discreteUniform.seed"],["base.random.discreteUniform.seedLength","base.random.discreteUniform.seedLength"],["base.random.discreteUniform.state","base.random.discreteUniform.state"],["base.random.discreteUniform.stateLength","base.random.discreteUniform.stateLength"],["base.random.discreteUniform.byteLength","base.random.discreteUniform.byteLength"],["base.random.discreteUniform.toJSON","base.random.discreteUniform.toJSON()"],["base.random.erlang","base.random.erlang( k:integer, λ:number )"],["base.random.erlang.factory","base.random.erlang.factory( [k:integer, λ:number, ][options:Object] )"],["base.random.erlang.NAME","base.random.erlang.NAME"],["base.random.erlang.PRNG","base.random.erlang.PRNG"],["base.random.erlang.seed","base.random.erlang.seed"],["base.random.erlang.seedLength","base.random.erlang.seedLength"],["base.random.erlang.state","base.random.erlang.state"],["base.random.erlang.stateLength","base.random.erlang.stateLength"],["base.random.erlang.byteLength","base.random.erlang.byteLength"],["base.random.erlang.toJSON","base.random.erlang.toJSON()"],["base.random.exponential","base.random.exponential( λ:number )"],["base.random.exponential.factory","base.random.exponential.factory( [λ:number, ][options:Object] )"],["base.random.exponential.NAME","base.random.exponential.NAME"],["base.random.exponential.PRNG","base.random.exponential.PRNG"],["base.random.exponential.seed","base.random.exponential.seed"],["base.random.exponential.seedLength","base.random.exponential.seedLength"],["base.random.exponential.state","base.random.exponential.state"],["base.random.exponential.stateLength","base.random.exponential.stateLength"],["base.random.exponential.byteLength","base.random.exponential.byteLength"],["base.random.exponential.toJSON","base.random.exponential.toJSON()"],["base.random.f","base.random.f( d1:number, d2:number )"],["base.random.f.factory","base.random.f.factory( [d1:number, d2:number, ][options:Object] )"],["base.random.f.NAME","base.random.f.NAME"],["base.random.f.PRNG","base.random.f.PRNG"],["base.random.f.seed","base.random.f.seed"],["base.random.f.seedLength","base.random.f.seedLength"],["base.random.f.state","base.random.f.state"],["base.random.f.stateLength","base.random.f.stateLength"],["base.random.f.byteLength","base.random.f.byteLength"],["base.random.f.toJSON","base.random.f.toJSON()"],["base.random.frechet","base.random.frechet( α:number, s:number, m:number )"],["base.random.frechet.factory","base.random.frechet.factory( [α:number, s:number, m:number, ][options:Object] )"],["base.random.frechet.NAME","base.random.frechet.NAME"],["base.random.frechet.PRNG","base.random.frechet.PRNG"],["base.random.frechet.seed","base.random.frechet.seed"],["base.random.frechet.seedLength","base.random.frechet.seedLength"],["base.random.frechet.state","base.random.frechet.state"],["base.random.frechet.stateLength","base.random.frechet.stateLength"],["base.random.frechet.byteLength","base.random.frechet.byteLength"],["base.random.frechet.toJSON","base.random.frechet.toJSON()"],["base.random.gamma","base.random.gamma( α:number, β:number )"],["base.random.gamma.factory","base.random.gamma.factory( [α:number, β:number, ][options:Object] )"],["base.random.gamma.NAME","base.random.gamma.NAME"],["base.random.gamma.PRNG","base.random.gamma.PRNG"],["base.random.gamma.seed","base.random.gamma.seed"],["base.random.gamma.seedLength","base.random.gamma.seedLength"],["base.random.gamma.state","base.random.gamma.state"],["base.random.gamma.stateLength","base.random.gamma.stateLength"],["base.random.gamma.byteLength","base.random.gamma.byteLength"],["base.random.gamma.toJSON","base.random.gamma.toJSON()"],["base.random.geometric","base.random.geometric( p:number )"],["base.random.geometric.factory","base.random.geometric.factory( [p:number, ][options:Object] )"],["base.random.geometric.NAME","base.random.geometric.NAME"],["base.random.geometric.PRNG","base.random.geometric.PRNG"],["base.random.geometric.seed","base.random.geometric.seed"],["base.random.geometric.seedLength","base.random.geometric.seedLength"],["base.random.geometric.state","base.random.geometric.state"],["base.random.geometric.stateLength","base.random.geometric.stateLength"],["base.random.geometric.byteLength","base.random.geometric.byteLength"],["base.random.geometric.toJSON","base.random.geometric.toJSON()"],["base.random.gumbel","base.random.gumbel( μ:number, β:number )"],["base.random.gumbel.factory","base.random.gumbel.factory( [μ:number, β:number, ][options:Object] )"],["base.random.gumbel.NAME","base.random.gumbel.NAME"],["base.random.gumbel.PRNG","base.random.gumbel.PRNG"],["base.random.gumbel.seed","base.random.gumbel.seed"],["base.random.gumbel.seedLength","base.random.gumbel.seedLength"],["base.random.gumbel.state","base.random.gumbel.state"],["base.random.gumbel.stateLength","base.random.gumbel.stateLength"],["base.random.gumbel.byteLength","base.random.gumbel.byteLength"],["base.random.gumbel.toJSON","base.random.gumbel.toJSON()"],["base.random.hypergeometric","base.random.hypergeometric( N:integer, K:integer, n:integer )"],["base.random.hypergeometric.factory","base.random.hypergeometric.factory( [N:integer, K:integer, n:integer, ][options:Object] )"],["base.random.hypergeometric.NAME","base.random.hypergeometric.NAME"],["base.random.hypergeometric.PRNG","base.random.hypergeometric.PRNG"],["base.random.hypergeometric.seed","base.random.hypergeometric.seed"],["base.random.hypergeometric.seedLength","base.random.hypergeometric.seedLength"],["base.random.hypergeometric.state","base.random.hypergeometric.state"],["base.random.hypergeometric.stateLength","base.random.hypergeometric.stateLength"],["base.random.hypergeometric.byteLength","base.random.hypergeometric.byteLength"],["base.random.hypergeometric.toJSON","base.random.hypergeometric.toJSON()"],["base.random.improvedZiggurat","base.random.improvedZiggurat()"],["base.random.improvedZiggurat.factory","base.random.improvedZiggurat.factory( [options:Object] )"],["base.random.improvedZiggurat.NAME","base.random.improvedZiggurat.NAME"],["base.random.improvedZiggurat.PRNG","base.random.improvedZiggurat.PRNG"],["base.random.improvedZiggurat.seed","base.random.improvedZiggurat.seed"],["base.random.improvedZiggurat.seedLength","base.random.improvedZiggurat.seedLength"],["base.random.improvedZiggurat.state","base.random.improvedZiggurat.state"],["base.random.improvedZiggurat.stateLength","base.random.improvedZiggurat.stateLength"],["base.random.improvedZiggurat.byteLength","base.random.improvedZiggurat.byteLength"],["base.random.improvedZiggurat.toJSON","base.random.improvedZiggurat.toJSON()"],["base.random.invgamma","base.random.invgamma( α:number, β:number )"],["base.random.invgamma.factory","base.random.invgamma.factory( [α:number, β:number, ][options:Object] )"],["base.random.invgamma.NAME","base.random.invgamma.NAME"],["base.random.invgamma.PRNG","base.random.invgamma.PRNG"],["base.random.invgamma.seed","base.random.invgamma.seed"],["base.random.invgamma.seedLength","base.random.invgamma.seedLength"],["base.random.invgamma.state","base.random.invgamma.state"],["base.random.invgamma.stateLength","base.random.invgamma.stateLength"],["base.random.invgamma.byteLength","base.random.invgamma.byteLength"],["base.random.invgamma.toJSON","base.random.invgamma.toJSON()"],["base.random.kumaraswamy","base.random.kumaraswamy( a:number, b:number )"],["base.random.kumaraswamy.factory","base.random.kumaraswamy.factory( [a:number, b:number, ][options:Object] )"],["base.random.kumaraswamy.NAME","base.random.kumaraswamy.NAME"],["base.random.kumaraswamy.PRNG","base.random.kumaraswamy.PRNG"],["base.random.kumaraswamy.seed","base.random.kumaraswamy.seed"],["base.random.kumaraswamy.seedLength","base.random.kumaraswamy.seedLength"],["base.random.kumaraswamy.state","base.random.kumaraswamy.state"],["base.random.kumaraswamy.stateLength","base.random.kumaraswamy.stateLength"],["base.random.kumaraswamy.byteLength","base.random.kumaraswamy.byteLength"],["base.random.kumaraswamy.toJSON","base.random.kumaraswamy.toJSON()"],["base.random.laplace","base.random.laplace( μ:number, b:number )"],["base.random.laplace.factory","base.random.laplace.factory( [μ:number, b:number, ][options:Object] )"],["base.random.laplace.NAME","base.random.laplace.NAME"],["base.random.laplace.PRNG","base.random.laplace.PRNG"],["base.random.laplace.seed","base.random.laplace.seed"],["base.random.laplace.seedLength","base.random.laplace.seedLength"],["base.random.laplace.state","base.random.laplace.state"],["base.random.laplace.stateLength","base.random.laplace.stateLength"],["base.random.laplace.byteLength","base.random.laplace.byteLength"],["base.random.laplace.toJSON","base.random.laplace.toJSON()"],["base.random.levy","base.random.levy( μ:number, c:number )"],["base.random.levy.factory","base.random.levy.factory( [μ:number, c:number, ][options:Object] )"],["base.random.levy.NAME","base.random.levy.NAME"],["base.random.levy.PRNG","base.random.levy.PRNG"],["base.random.levy.seed","base.random.levy.seed"],["base.random.levy.seedLength","base.random.levy.seedLength"],["base.random.levy.state","base.random.levy.state"],["base.random.levy.stateLength","base.random.levy.stateLength"],["base.random.levy.byteLength","base.random.levy.byteLength"],["base.random.levy.toJSON","base.random.levy.toJSON()"],["base.random.logistic","base.random.logistic( μ:number, s:number )"],["base.random.logistic.factory","base.random.logistic.factory( [μ:number, s:number, ][options:Object] )"],["base.random.logistic.NAME","base.random.logistic.NAME"],["base.random.logistic.PRNG","base.random.logistic.PRNG"],["base.random.logistic.seed","base.random.logistic.seed"],["base.random.logistic.seedLength","base.random.logistic.seedLength"],["base.random.logistic.state","base.random.logistic.state"],["base.random.logistic.stateLength","base.random.logistic.stateLength"],["base.random.logistic.byteLength","base.random.logistic.byteLength"],["base.random.logistic.toJSON","base.random.logistic.toJSON()"],["base.random.lognormal","base.random.lognormal( μ:number, σ:number )"],["base.random.lognormal.factory","base.random.lognormal.factory( [μ:number, σ:number, ][options:Object] )"],["base.random.lognormal.NAME","base.random.lognormal.NAME"],["base.random.lognormal.PRNG","base.random.lognormal.PRNG"],["base.random.lognormal.seed","base.random.lognormal.seed"],["base.random.lognormal.seedLength","base.random.lognormal.seedLength"],["base.random.lognormal.state","base.random.lognormal.state"],["base.random.lognormal.stateLength","base.random.lognormal.stateLength"],["base.random.lognormal.byteLength","base.random.lognormal.byteLength"],["base.random.lognormal.toJSON","base.random.lognormal.toJSON()"],["base.random.minstd","base.random.minstd()"],["base.random.minstd.normalized","base.random.minstd.normalized()"],["base.random.minstd.factory","base.random.minstd.factory( [options:Object] )"],["base.random.minstd.NAME","base.random.minstd.NAME"],["base.random.minstd.MIN","base.random.minstd.MIN"],["base.random.minstd.MAX","base.random.minstd.MAX"],["base.random.minstd.seed","base.random.minstd.seed"],["base.random.minstd.seedLength","base.random.minstd.seedLength"],["base.random.minstd.state","base.random.minstd.state"],["base.random.minstd.stateLength","base.random.minstd.stateLength"],["base.random.minstd.byteLength","base.random.minstd.byteLength"],["base.random.minstd.toJSON","base.random.minstd.toJSON()"],["base.random.minstdShuffle","base.random.minstdShuffle()"],["base.random.minstdShuffle.normalized","base.random.minstdShuffle.normalized()"],["base.random.minstdShuffle.factory","base.random.minstdShuffle.factory( [options:Object] )"],["base.random.minstdShuffle.NAME","base.random.minstdShuffle.NAME"],["base.random.minstdShuffle.MIN","base.random.minstdShuffle.MIN"],["base.random.minstdShuffle.MAX","base.random.minstdShuffle.MAX"],["base.random.minstdShuffle.seed","base.random.minstdShuffle.seed"],["base.random.minstdShuffle.seedLength","base.random.minstdShuffle.seedLength"],["base.random.minstdShuffle.state","base.random.minstdShuffle.state"],["base.random.minstdShuffle.stateLength","base.random.minstdShuffle.stateLength"],["base.random.minstdShuffle.byteLength","base.random.minstdShuffle.byteLength"],["base.random.minstdShuffle.toJSON","base.random.minstdShuffle.toJSON()"],["base.random.mt19937","base.random.mt19937()"],["base.random.mt19937.normalized","base.random.mt19937.normalized()"],["base.random.mt19937.factory","base.random.mt19937.factory( [options:Object] )"],["base.random.mt19937.NAME","base.random.mt19937.NAME"],["base.random.mt19937.MIN","base.random.mt19937.MIN"],["base.random.mt19937.MAX","base.random.mt19937.MAX"],["base.random.mt19937.seed","base.random.mt19937.seed"],["base.random.mt19937.seedLength","base.random.mt19937.seedLength"],["base.random.mt19937.state","base.random.mt19937.state"],["base.random.mt19937.stateLength","base.random.mt19937.stateLength"],["base.random.mt19937.byteLength","base.random.mt19937.byteLength"],["base.random.mt19937.toJSON","base.random.mt19937.toJSON()"],["base.random.negativeBinomial","base.random.negativeBinomial( r:number, p:number )"],["base.random.negativeBinomial.factory","base.random.negativeBinomial.factory( [r:number, p:number, ][options:Object] )"],["base.random.negativeBinomial.NAME","base.random.negativeBinomial.NAME"],["base.random.negativeBinomial.PRNG","base.random.negativeBinomial.PRNG"],["base.random.negativeBinomial.seed","base.random.negativeBinomial.seed"],["base.random.negativeBinomial.seedLength","base.random.negativeBinomial.seedLength"],["base.random.negativeBinomial.state","base.random.negativeBinomial.state"],["base.random.negativeBinomial.stateLength","base.random.negativeBinomial.stateLength"],["base.random.negativeBinomial.byteLength","base.random.negativeBinomial.byteLength"],["base.random.negativeBinomial.toJSON","base.random.negativeBinomial.toJSON()"],["base.random.normal","base.random.normal( μ:number, σ:number )"],["base.random.normal.factory","base.random.normal.factory( [μ:number, σ:number, ][options:Object] )"],["base.random.normal.NAME","base.random.normal.NAME"],["base.random.normal.PRNG","base.random.normal.PRNG"],["base.random.normal.seed","base.random.normal.seed"],["base.random.normal.seedLength","base.random.normal.seedLength"],["base.random.normal.state","base.random.normal.state"],["base.random.normal.stateLength","base.random.normal.stateLength"],["base.random.normal.byteLength","base.random.normal.byteLength"],["base.random.normal.toJSON","base.random.normal.toJSON()"],["base.random.pareto1","base.random.pareto1( α:number, β:number )"],["base.random.pareto1.factory","base.random.pareto1.factory( [α:number, β:number, ][options:Object] )"],["base.random.pareto1.NAME","base.random.pareto1.NAME"],["base.random.pareto1.PRNG","base.random.pareto1.PRNG"],["base.random.pareto1.seed","base.random.pareto1.seed"],["base.random.pareto1.seedLength","base.random.pareto1.seedLength"],["base.random.pareto1.state","base.random.pareto1.state"],["base.random.pareto1.stateLength","base.random.pareto1.stateLength"],["base.random.pareto1.byteLength","base.random.pareto1.byteLength"],["base.random.pareto1.toJSON","base.random.pareto1.toJSON()"],["base.random.poisson","base.random.poisson( λ:number )"],["base.random.poisson.factory","base.random.poisson.factory( [λ:number, ][options:Object] )"],["base.random.poisson.NAME","base.random.poisson.NAME"],["base.random.poisson.PRNG","base.random.poisson.PRNG"],["base.random.poisson.seed","base.random.poisson.seed"],["base.random.poisson.seedLength","base.random.poisson.seedLength"],["base.random.poisson.state","base.random.poisson.state"],["base.random.poisson.stateLength","base.random.poisson.stateLength"],["base.random.poisson.byteLength","base.random.poisson.byteLength"],["base.random.poisson.toJSON","base.random.poisson.toJSON()"],["base.random.randi","base.random.randi()"],["base.random.randi.factory","base.random.randi.factory( [options:Object] )"],["base.random.randi.NAME","base.random.randi.NAME"],["base.random.randi.PRNG","base.random.randi.PRNG"],["base.random.randi.MIN","base.random.randi.MIN"],["base.random.randi.MAX","base.random.randi.MAX"],["base.random.randi.seed","base.random.randi.seed"],["base.random.randi.seedLength","base.random.randi.seedLength"],["base.random.randi.state","base.random.randi.state"],["base.random.randi.stateLength","base.random.randi.stateLength"],["base.random.randi.byteLength","base.random.randi.byteLength"],["base.random.randi.toJSON","base.random.randi.toJSON()"],["base.random.randn","base.random.randn()"],["base.random.randn.factory","base.random.randn.factory( [options:Object] )"],["base.random.randn.NAME","base.random.randn.NAME"],["base.random.randn.PRNG","base.random.randn.PRNG"],["base.random.randn.seed","base.random.randn.seed"],["base.random.randn.seedLength","base.random.randn.seedLength"],["base.random.randn.state","base.random.randn.state"],["base.random.randn.stateLength","base.random.randn.stateLength"],["base.random.randn.byteLength","base.random.randn.byteLength"],["base.random.randn.toJSON","base.random.randn.toJSON()"],["base.random.randu","base.random.randu()"],["base.random.randu.factory","base.random.randu.factory( [options:Object] )"],["base.random.randu.NAME","base.random.randu.NAME"],["base.random.randu.PRNG","base.random.randu.PRNG"],["base.random.randu.MIN","base.random.randu.MIN"],["base.random.randu.MAX","base.random.randu.MAX"],["base.random.randu.seed","base.random.randu.seed"],["base.random.randu.seedLength","base.random.randu.seedLength"],["base.random.randu.state","base.random.randu.state"],["base.random.randu.stateLength","base.random.randu.stateLength"],["base.random.randu.byteLength","base.random.randu.byteLength"],["base.random.randu.toJSON","base.random.randu.toJSON()"],["base.random.rayleigh","base.random.rayleigh( σ:number )"],["base.random.rayleigh.factory","base.random.rayleigh.factory( [σ:number, ][options:Object] )"],["base.random.rayleigh.NAME","base.random.rayleigh.NAME"],["base.random.rayleigh.PRNG","base.random.rayleigh.PRNG"],["base.random.rayleigh.seed","base.random.rayleigh.seed"],["base.random.rayleigh.seedLength","base.random.rayleigh.seedLength"],["base.random.rayleigh.state","base.random.rayleigh.state"],["base.random.rayleigh.stateLength","base.random.rayleigh.stateLength"],["base.random.rayleigh.byteLength","base.random.rayleigh.byteLength"],["base.random.rayleigh.toJSON","base.random.rayleigh.toJSON()"],["base.random.t","base.random.t( v:number )"],["base.random.t.factory","base.random.t.factory( [v:number, ][options:Object] )"],["base.random.t.NAME","base.random.t.NAME"],["base.random.t.PRNG","base.random.t.PRNG"],["base.random.t.seed","base.random.t.seed"],["base.random.t.seedLength","base.random.t.seedLength"],["base.random.t.state","base.random.t.state"],["base.random.t.stateLength","base.random.t.stateLength"],["base.random.t.byteLength","base.random.t.byteLength"],["base.random.t.toJSON","base.random.t.toJSON()"],["base.random.triangular","base.random.triangular( a:number, b:number, c:number )"],["base.random.triangular.factory","base.random.triangular.factory( [a:number, b:number, c:number, ][options:Object] )"],["base.random.triangular.NAME","base.random.triangular.NAME"],["base.random.triangular.PRNG","base.random.triangular.PRNG"],["base.random.triangular.seed","base.random.triangular.seed"],["base.random.triangular.seedLength","base.random.triangular.seedLength"],["base.random.triangular.state","base.random.triangular.state"],["base.random.triangular.stateLength","base.random.triangular.stateLength"],["base.random.triangular.byteLength","base.random.triangular.byteLength"],["base.random.triangular.toJSON","base.random.triangular.toJSON()"],["base.random.uniform","base.random.uniform( a:number, b:number )"],["base.random.uniform.factory","base.random.uniform.factory( [a:number, b:number, ][options:Object] )"],["base.random.uniform.NAME","base.random.uniform.NAME"],["base.random.uniform.PRNG","base.random.uniform.PRNG"],["base.random.uniform.seed","base.random.uniform.seed"],["base.random.uniform.seedLength","base.random.uniform.seedLength"],["base.random.uniform.state","base.random.uniform.state"],["base.random.uniform.stateLength","base.random.uniform.stateLength"],["base.random.uniform.byteLength","base.random.uniform.byteLength"],["base.random.uniform.toJSON","base.random.uniform.toJSON()"],["base.random.weibull","base.random.weibull( k:number, λ:number )"],["base.random.weibull.factory","base.random.weibull.factory( [k:number, λ:number, ][options:Object] )"],["base.random.weibull.NAME","base.random.weibull.NAME"],["base.random.weibull.PRNG","base.random.weibull.PRNG"],["base.random.weibull.seed","base.random.weibull.seed"],["base.random.weibull.seedLength","base.random.weibull.seedLength"],["base.random.weibull.state","base.random.weibull.state"],["base.random.weibull.stateLength","base.random.weibull.stateLength"],["base.random.weibull.byteLength","base.random.weibull.byteLength"],["base.random.weibull.toJSON","base.random.weibull.toJSON()"],["base.rcbrt","base.rcbrt( x:number )"],["base.rcbrtf","base.rcbrtf( x:number )"],["base.reldiff","base.reldiff( x:number, y:number[, scale:string|Function] )"],["base.removeFirst","base.removeFirst( str:string, n:integer )"],["base.removeFirstCodePoint","base.removeFirstCodePoint( str:string, n:integer )"],["base.removeFirstGraphemeCluster","base.removeFirstGraphemeCluster( str:string, n:integer )"],["base.removeLast","base.removeLast( str:string, n:integer )"],["base.removeLastCodePoint","base.removeLastCodePoint( str:string, n:integer )"],["base.removeLastGraphemeCluster","base.removeLastGraphemeCluster( str:string, n:integer )"],["base.rempio2","base.rempio2( x:number, y:Array|TypedArray|Object )"],["base.repeat","base.repeat( str:string, n:integer )"],["base.replace","base.replace( str:string, search:RegExp, newval:string|Function )"],["base.replaceAfter","base.replaceAfter( str:string, search:string, replacement:string, fromIndex:integer )"],["base.replaceAfterLast","base.replaceAfterLast( str:string, search:string, replacement:string, fromIndex:integer )"],["base.replaceBefore","base.replaceBefore( str:string, search:string, replacement:string, fromIndex:integer )"],["base.replaceBeforeLast","base.replaceBeforeLast( str:string, search:string, replacement:string, fromIndex:integer )"],["base.reverse","base.reverse( str:string )"],["base.reverseCodePoints","base.reverseCodePoints( str:string )"],["base.reverseGraphemeClusters","base.reverseGraphemeClusters( str:string )"],["base.rightPad","base.rightPad( str:string, len:integer, pad:string )"],["base.rightTrim","base.rightTrim( str:string )"],["base.risingFactorial","base.risingFactorial( x:number, n:integer )"],["base.rotl32","base.rotl32( x:integer, shift:integer )"],["base.rotr32","base.rotr32( x:integer, shift:integer )"],["base.round","base.round( x:number )"],["base.round2","base.round2( x:number )"],["base.round10","base.round10( x:number )"],["base.roundb","base.roundb( x:number, n:integer, b:integer )"],["base.roundn","base.roundn( x:number, n:integer )"],["base.roundsd","base.roundsd( x:number, n:integer[, b:integer] )"],["base.rsqrt","base.rsqrt( x:number )"],["base.rsqrtf","base.rsqrtf( x:number )"],["base.sargs2multislice","base.sargs2multislice( str:string )"],["base.scalar2ndarray","base.scalar2ndarray( value:any, dtype:string, order:string )"],["base.secd","base.secd( x:number )"],["base.seq2multislice","base.seq2multislice( str:string, shape:Array<integer>, strict:boolean )"],["base.seq2slice","base.seq2slice( str:string, len:integer, strict:boolean )"],["base.setHighWord","base.setHighWord( x:number, high:integer )"],["base.setLowWord","base.setLowWord( x:number, low:integer )"],["base.sici","base.sici( x:number )"],["base.sici.assign","base.sici.assign( x:number, out:Array|TypedArray|Object, stride:integer, offset:integer )"],["base.signbit","base.signbit( x:number )"],["base.signbitf","base.signbitf( x:float )"],["base.significandf","base.significandf( x:float )"],["base.signum","base.signum( x:number )"],["base.signumf","base.signumf( x:number )"],["base.sin","base.sin( x:number )"],["base.sinc","base.sinc( x:number )"],["base.sincos","base.sincos( x:number )"],["base.sincos","base.sincos( x:number, out:Array|TypedArray|Object, stride:integer, offset:integer )"],["base.sincospi","base.sincospi( x:number )"],["base.sincospi.assign","base.sincospi.assign( x:number, out:Array|TypedArray|Object, stride:integer, offset:integer )"],["base.sinh","base.sinh( x:number )"],["base.sinpi","base.sinpi( x:number )"],["base.slice2seq","base.slice2seq( slice:Slice )"],["base.sliceLength","base.sliceLength( slice:Slice )"],["base.sliceNonReducedDimensions","base.sliceNonReducedDimensions( slice:MultiSlice )"],["base.sliceReducedDimensions","base.sliceReducedDimensions( slice:MultiSlice )"],["base.sliceShape","base.sliceShape( slice:MultiSlice )"],["base.snakecase","base.snakecase( str:string )"],["base.spence","base.spence( x:number )"],["base.sqrt","base.sqrt( x:number )"],["base.sqrt1pm1","base.sqrt1pm1( x:number )"],["base.sqrtf","base.sqrtf( x:number )"],["base.sqrtpi","base.sqrtpi( x:number )"],["base.startcase","base.startcase( str:string )"],["base.startsWith","base.startsWith( str:string, search:string, position:integer )"],["base.stickycase","base.stickycase( str[, p] )"],["base.strided.binary","base.strided.binary( arrays:ArrayLikeObject<ArrayLikeObject>, shape:ArrayLikeObject<integer>, strides:ArrayLikeObject<integer>, fcn:Function )"],["base.strided.binary.ndarray","base.strided.binary.ndarray( arrays:ArrayLikeObject<ArrayLikeObject>, shape:ArrayLikeObject<integer>, strides:ArrayLikeObject<integer>, offsets:ArrayLikeObject<integer>, fcn:Function )"],["base.strided.binaryDtypeSignatures","base.strided.binaryDtypeSignatures( dtypes1:ArrayLike<any>, dtypes2:ArrayLike<any>, dtypes3:ArrayLike<any>[, options:Object] )"],["base.strided.binarySignatureCallbacks","base.strided.binarySignatureCallbacks( table:Object, signatures:ArrayLike<any> )"],["base.strided.ccopy","base.strided.ccopy( N:integer, x:Complex64Array, strideX:integer, y:Complex64Array, strideY:integer )"],["base.strided.ccopy.ndarray","base.strided.ccopy.ndarray( N:integer, x:Complex64Array, strideX:integer, offsetX:integer, y:Complex64Array, strideY:integer, offsetY:integer )"],["base.strided.cmap","base.strided.cmap( N:integer, x:Complex64Array, strideX:integer, y:Complex64Array, strideY:integer, fcn:Function )"],["base.strided.cmap.ndarray","base.strided.cmap.ndarray( N:integer, x:Complex64Array, strideX:integer, offsetX:integer, y:Complex64Array, strideY:integer, offsetY:integer, fcn:Function )"],["base.strided.cswap","base.strided.cswap( N:integer, x:Complex64Array, strideX:integer, y:Complex64Array, strideY:integer )"],["base.strided.cswap.ndarray","base.strided.cswap.ndarray( N:integer, x:Complex64Array, strideX:integer, offsetX:integer, y:Complex64Array, strideY:integer, offsetY:integer )"],["base.strided.cumax","base.strided.cumax( N:integer, x:Array|TypedArray, strideX:integer, y:Array|TypedArray, strideY:integer )"],["base.strided.cumax.ndarray","base.strided.cumax.ndarray( N:integer, x:Array|TypedArray, strideX:integer, offsetX:integer, y:Array|TypedArray, strideY:integer, offsetY:integer )"],["base.strided.cumaxabs","base.strided.cumaxabs( N:integer, x:Array|TypedArray, strideX:integer, y:Array|TypedArray, strideY:integer )"],["base.strided.cumaxabs.ndarray","base.strided.cumaxabs.ndarray( N:integer, x:Array|TypedArray, strideX:integer, offsetX:integer, y:Array|TypedArray, strideY:integer, offsetY:integer )"],["base.strided.cumin","base.strided.cumin( N:integer, x:Array|TypedArray, strideX:integer, y:Array|TypedArray, strideY:integer )"],["base.strided.cumin.ndarray","base.strided.cumin.ndarray( N:integer, x:Array|TypedArray, strideX:integer, offsetX:integer, y:Array|TypedArray, strideY:integer, offsetY:integer )"],["base.strided.cuminabs","base.strided.cuminabs( N:integer, x:Array|TypedArray, strideX:integer, y:Array|TypedArray, strideY:integer )"],["base.strided.cuminabs.ndarray","base.strided.cuminabs.ndarray( N:integer, x:Array|TypedArray, strideX:integer, offsetX:integer, y:Array|TypedArray, strideY:integer, offsetY:integer )"],["base.strided.dabs","base.strided.dabs( N:integer, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"],["base.strided.dabs.ndarray","base.strided.dabs.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"],["base.strided.dabs2","base.strided.dabs2( N:integer, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"],["base.strided.dabs2.ndarray","base.strided.dabs2.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"],["base.strided.dapx","base.strided.dapx( N:integer, alpha:number, x:Float64Array, stride:integer )"],["base.strided.dapx.ndarray","base.strided.dapx.ndarray( N:integer, alpha:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dapxsum","base.strided.dapxsum( N:integer, alpha:number, x:Float64Array, stride:integer )"],["base.strided.dapxsum.ndarray","base.strided.dapxsum.ndarray( N:integer, alpha:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dapxsumkbn","base.strided.dapxsumkbn( N:integer, alpha:number, x:Float64Array, stride:integer )"],["base.strided.dapxsumkbn.ndarray","base.strided.dapxsumkbn.ndarray( N:integer, alpha:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dapxsumkbn2","base.strided.dapxsumkbn2( N:integer, alpha:number, x:Float64Array, stride:integer )"],["base.strided.dapxsumkbn2.ndarray","base.strided.dapxsumkbn2.ndarray( N:integer, alpha:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dapxsumors","base.strided.dapxsumors( N:integer, alpha:number, x:Float64Array, stride:integer )"],["base.strided.dapxsumors.ndarray","base.strided.dapxsumors.ndarray( N:integer, alpha:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dapxsumpw","base.strided.dapxsumpw( N:integer, alpha:number, x:Float64Array, stride:integer )"],["base.strided.dapxsumpw.ndarray","base.strided.dapxsumpw.ndarray( N:integer, alpha:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dasum","base.strided.dasum( N:integer, x:Float64Array, stride:integer )"],["base.strided.dasum.ndarray","base.strided.dasum.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dasumpw","base.strided.dasumpw( N:integer, x:Float64Array, stride:integer )"],["base.strided.dasumpw.ndarray","base.strided.dasumpw.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.daxpy","base.strided.daxpy( N:integer, alpha:number, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"],["base.strided.daxpy.ndarray","base.strided.daxpy.ndarray( N:integer, alpha:number, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"],["base.strided.dcbrt","base.strided.dcbrt( N:integer, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"],["base.strided.dcbrt.ndarray","base.strided.dcbrt.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"],["base.strided.dceil","base.strided.dceil( N:integer, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"],["base.strided.dceil.ndarray","base.strided.dceil.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"],["base.strided.dcopy","base.strided.dcopy( N:integer, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"],["base.strided.dcopy.ndarray","base.strided.dcopy.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"],["base.strided.dcumax","base.strided.dcumax( N:integer, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"],["base.strided.dcumax.ndarray","base.strided.dcumax.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"],["base.strided.dcumaxabs","base.strided.dcumaxabs( N:integer, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"],["base.strided.dcumaxabs.ndarray","base.strided.dcumaxabs.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"],["base.strided.dcumin","base.strided.dcumin( N:integer, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"],["base.strided.dcumin.ndarray","base.strided.dcumin.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"],["base.strided.dcuminabs","base.strided.dcuminabs( N:integer, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"],["base.strided.dcuminabs.ndarray","base.strided.dcuminabs.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"],["base.strided.dcusum","base.strided.dcusum( N:integer, sum:number, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"],["base.strided.dcusum.ndarray","base.strided.dcusum.ndarray( N:integer, sum:number, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"],["base.strided.dcusumkbn","base.strided.dcusumkbn( N:integer, sum:number, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"],["base.strided.dcusumkbn.ndarray","base.strided.dcusumkbn.ndarray( N:integer, sum:number, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"],["base.strided.dcusumkbn2","base.strided.dcusumkbn2( N:integer, sum:number, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"],["base.strided.dcusumkbn2.ndarray","base.strided.dcusumkbn2.ndarray( N:integer, sum:number, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"],["base.strided.dcusumors","base.strided.dcusumors( N:integer, sum:number, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"],["base.strided.dcusumors.ndarray","base.strided.dcusumors.ndarray( N:integer, sum:number, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"],["base.strided.dcusumpw","base.strided.dcusumpw( N:integer, sum:number, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"],["base.strided.dcusumpw.ndarray","base.strided.dcusumpw.ndarray( N:integer, sum:number, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"],["base.strided.ddeg2rad","base.strided.ddeg2rad( N:integer, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"],["base.strided.ddeg2rad.ndarray","base.strided.ddeg2rad.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"],["base.strided.ddot","base.strided.ddot( N:integer, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"],["base.strided.ddot.ndarray","base.strided.ddot.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"],["base.strided.dfill","base.strided.dfill( N:integer, alpha:number, x:Float64Array, stride:integer )"],["base.strided.dfill.ndarray","base.strided.dfill.ndarray( N:integer, alpha:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dfloor","base.strided.dfloor( N:integer, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"],["base.strided.dfloor.ndarray","base.strided.dfloor.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"],["base.strided.dinv","base.strided.dinv( N:integer, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"],["base.strided.dinv.ndarray","base.strided.dinv.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"],["base.strided.dmap","base.strided.dmap( N:integer, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer, fcn:Function )"],["base.strided.dmap.ndarray","base.strided.dmap.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer, fcn:Function )"],["base.strided.dmap2","base.strided.dmap2( N:integer, x:Float64Array, sx:integer, y:Float64Array, sy:integer, z:Float64Array, sz:integer, fcn:Function )"],["base.strided.dmap2.ndarray","base.strided.dmap2.ndarray( N:integer, x:Float64Array, sx:integer, ox:integer, y:Float64Array, sy:integer, oy:integer, z:Float64Array, sz:integer, oz:integer, fcn:Function )"],["base.strided.dmax","base.strided.dmax( N:integer, x:Float64Array, stride:integer )"],["base.strided.dmax.ndarray","base.strided.dmax.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dmaxabs","base.strided.dmaxabs( N:integer, x:Float64Array, stride:integer )"],["base.strided.dmaxabs.ndarray","base.strided.dmaxabs.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dmaxabssorted","base.strided.dmaxabssorted( N:integer, x:Float64Array, stride:integer )"],["base.strided.dmaxabssorted.ndarray","base.strided.dmaxabssorted.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dmaxsorted","base.strided.dmaxsorted( N:integer, x:Float64Array, stride:integer )"],["base.strided.dmaxsorted.ndarray","base.strided.dmaxsorted.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dmean","base.strided.dmean( N:integer, x:Float64Array, stride:integer )"],["base.strided.dmean.ndarray","base.strided.dmean.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dmeankbn","base.strided.dmeankbn( N:integer, x:Float64Array, stride:integer )"],["base.strided.dmeankbn.ndarray","base.strided.dmeankbn.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dmeankbn2","base.strided.dmeankbn2( N:integer, x:Float64Array, stride:integer )"],["base.strided.dmeankbn2.ndarray","base.strided.dmeankbn2.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dmeanli","base.strided.dmeanli( N:integer, x:Float64Array, stride:integer )"],["base.strided.dmeanli.ndarray","base.strided.dmeanli.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dmeanlipw","base.strided.dmeanlipw( N:integer, x:Float64Array, stride:integer )"],["base.strided.dmeanlipw.ndarray","base.strided.dmeanlipw.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dmeanors","base.strided.dmeanors( N:integer, x:Float64Array, stride:integer )"],["base.strided.dmeanors.ndarray","base.strided.dmeanors.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dmeanpn","base.strided.dmeanpn( N:integer, x:Float64Array, stride:integer )"],["base.strided.dmeanpn.ndarray","base.strided.dmeanpn.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dmeanpw","base.strided.dmeanpw( N:integer, x:Float64Array, stride:integer )"],["base.strided.dmeanpw.ndarray","base.strided.dmeanpw.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dmeanstdev","base.strided.dmeanstdev( N:integer, c:number, x:Float64Array, strideX:integer, out:Float64Array, strideOut:integer )"],["base.strided.dmeanstdev.ndarray","base.strided.dmeanstdev.ndarray( N:integer, c:number, x:Float64Array, strideX:integer, offsetX:integer, out:Float64Array, strideOut:integer, offsetOut:integer )"],["base.strided.dmeanstdevpn","base.strided.dmeanstdevpn( N:integer, c:number, x:Float64Array, strideX:integer, out:Float64Array, strideOut:integer )"],["base.strided.dmeanstdevpn.ndarray","base.strided.dmeanstdevpn.ndarray( N:integer, c:number, x:Float64Array, strideX:integer, offsetX:integer, out:Float64Array, strideOut:integer, offsetOut:integer )"],["base.strided.dmeanvar","base.strided.dmeanvar( N:integer, c:number, x:Float64Array, strideX:integer, out:Float64Array, strideOut:integer )"],["base.strided.dmeanvar.ndarray","base.strided.dmeanvar.ndarray( N:integer, c:number, x:Float64Array, strideX:integer, offsetX:integer, out:Float64Array, strideOut:integer, offsetOut:integer )"],["base.strided.dmeanvarpn","base.strided.dmeanvarpn( N:integer, c:number, x:Float64Array, strideX:integer, out:Float64Array, strideOut:integer )"],["base.strided.dmeanvarpn.ndarray","base.strided.dmeanvarpn.ndarray( N:integer, c:number, x:Float64Array, strideX:integer, offsetX:integer, out:Float64Array, strideOut:integer, offsetOut:integer )"],["base.strided.dmeanwd","base.strided.dmeanwd( N:integer, x:Float64Array, stride:integer )"],["base.strided.dmeanwd.ndarray","base.strided.dmeanwd.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dmediansorted","base.strided.dmediansorted( N:integer, x:Float64Array, stride:integer )"],["base.strided.dmediansorted.ndarray","base.strided.dmediansorted.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dmidrange","base.strided.dmidrange( N:integer, x:Float64Array, stride:integer )"],["base.strided.dmidrange.ndarray","base.strided.dmidrange.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dmin","base.strided.dmin( N:integer, x:Float64Array, stride:integer )"],["base.strided.dmin.ndarray","base.strided.dmin.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dminabs","base.strided.dminabs( N:integer, x:Float64Array, stride:integer )"],["base.strided.dminabs.ndarray","base.strided.dminabs.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dminsorted","base.strided.dminsorted( N:integer, x:Float64Array, stride:integer )"],["base.strided.dminsorted.ndarray","base.strided.dminsorted.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dmskabs","base.strided.dmskabs( N:integer, x:Float64Array, sx:integer, m:Uint8Array, sm:integer, y:Float64Array, sy:integer )"],["base.strided.dmskabs.ndarray","base.strided.dmskabs.ndarray( N:integer, x:Float64Array, sx:integer, ox:integer, m:Float64Array, sm:integer, om:integer, y:Float64Array, sy:integer, oy:integer )"],["base.strided.dmskabs2","base.strided.dmskabs2( N:integer, x:Float64Array, sx:integer, m:Uint8Array, sm:integer, y:Float64Array, sy:integer )"],["base.strided.dmskabs2.ndarray","base.strided.dmskabs2.ndarray( N:integer, x:Float64Array, sx:integer, ox:integer, m:Float64Array, sm:integer, om:integer, y:Float64Array, sy:integer, oy:integer )"],["base.strided.dmskcbrt","base.strided.dmskcbrt( N:integer, x:Float64Array, sx:integer, m:Uint8Array, sm:integer, y:Float64Array, sy:integer )"],["base.strided.dmskcbrt.ndarray","base.strided.dmskcbrt.ndarray( N:integer, x:Float64Array, sx:integer, ox:integer, m:Float64Array, sm:integer, om:integer, y:Float64Array, sy:integer, oy:integer )"],["base.strided.dmskceil","base.strided.dmskceil( N:integer, x:Float64Array, sx:integer, m:Uint8Array, sm:integer, y:Float64Array, sy:integer )"],["base.strided.dmskceil.ndarray","base.strided.dmskceil.ndarray( N:integer, x:Float64Array, sx:integer, ox:integer, m:Float64Array, sm:integer, om:integer, y:Float64Array, sy:integer, oy:integer )"],["base.strided.dmskdeg2rad","base.strided.dmskdeg2rad( N:integer, x:Float64Array, sx:integer, m:Uint8Array, sm:integer, y:Float64Array, sy:integer )"],["base.strided.dmskdeg2rad.ndarray","base.strided.dmskdeg2rad.ndarray( N:integer, x:Float64Array, sx:integer, ox:integer, m:Float64Array, sm:integer, om:integer, y:Float64Array, sy:integer, oy:integer )"],["base.strided.dmskfloor","base.strided.dmskfloor( N:integer, x:Float64Array, sx:integer, m:Uint8Array, sm:integer, y:Float64Array, sy:integer )"],["base.strided.dmskfloor.ndarray","base.strided.dmskfloor.ndarray( N:integer, x:Float64Array, sx:integer, ox:integer, m:Float64Array, sm:integer, om:integer, y:Float64Array, sy:integer, oy:integer )"],["base.strided.dmskinv","base.strided.dmskinv( N:integer, x:Float64Array, sx:integer, m:Uint8Array, sm:integer, y:Float64Array, sy:integer )"],["base.strided.dmskinv.ndarray","base.strided.dmskinv.ndarray( N:integer, x:Float64Array, sx:integer, ox:integer, m:Float64Array, sm:integer, om:integer, y:Float64Array, sy:integer, oy:integer )"],["base.strided.dmskmap","base.strided.dmskmap( N:integer, x:Float64Array, sx:integer, m:Uint8Array, sm:integer, y:Float64Array, sy:integer, fcn:Function )"],["base.strided.dmskmap.ndarray","base.strided.dmskmap.ndarray( N:integer, x:Float64Array, sx:integer, ox:integer, m:Uint8Array, sm:integer, om:integer, y:Float64Array, sy:integer, oy:integer, fcn:Function )"],["base.strided.dmskmap2","base.strided.dmskmap2( N:integer, x:Float64Array, sx:integer, y:Float64Array, sy:integer, m:Uint8Array, sm:integer, z:Float64Array, sz:integer, fcn:Function )"],["base.strided.dmskmap2.ndarray","base.strided.dmskmap2.ndarray( N:integer, x:Float64Array, sx:integer, ox:integer, y:Float64Array, sy:integer, oy:integer, m:Uint8Array, sm:integer, om:integer, z:Float64Array, sz:integer, oz:integer, fcn:Function )"],["base.strided.dmskmax","base.strided.dmskmax( N:integer, x:Float64Array, strideX:integer, mask:Uint8Array, strideMask:integer )"],["base.strided.dmskmax.ndarray","base.strided.dmskmax.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, mask:Uint8Array, strideMask:integer, offsetMask:integer )"],["base.strided.dmskmin","base.strided.dmskmin( N:integer, x:Float64Array, strideX:integer, mask:Uint8Array, strideMask:integer )"],["base.strided.dmskmin.ndarray","base.strided.dmskmin.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, mask:Uint8Array, strideMask:integer, offsetMask:integer )"],["base.strided.dmskramp","base.strided.dmskramp( N:integer, x:Float64Array, sx:integer, m:Uint8Array, sm:integer, y:Float64Array, sy:integer )"],["base.strided.dmskramp.ndarray","base.strided.dmskramp.ndarray( N:integer, x:Float64Array, sx:integer, ox:integer, m:Float64Array, sm:integer, om:integer, y:Float64Array, sy:integer, oy:integer )"],["base.strided.dmskrange","base.strided.dmskrange( N:integer, x:Float64Array, strideX:integer, mask:Uint8Array, strideMask:integer )"],["base.strided.dmskrange.ndarray","base.strided.dmskrange.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, mask:Uint8Array, strideMask:integer, offsetMask:integer )"],["base.strided.dmskrsqrt","base.strided.dmskrsqrt( N:integer, x:Float64Array, sx:integer, m:Uint8Array, sm:integer, y:Float64Array, sy:integer )"],["base.strided.dmskrsqrt.ndarray","base.strided.dmskrsqrt.ndarray( N:integer, x:Float64Array, sx:integer, ox:integer, m:Float64Array, sm:integer, om:integer, y:Float64Array, sy:integer, oy:integer )"],["base.strided.dmsksqrt","base.strided.dmsksqrt( N:integer, x:Float64Array, sx:integer, m:Uint8Array, sm:integer, y:Float64Array, sy:integer )"],["base.strided.dmsksqrt.ndarray","base.strided.dmsksqrt.ndarray( N:integer, x:Float64Array, sx:integer, ox:integer, m:Float64Array, sm:integer, om:integer, y:Float64Array, sy:integer, oy:integer )"],["base.strided.dmsktrunc","base.strided.dmsktrunc( N:integer, x:Float64Array, sx:integer, m:Uint8Array, sm:integer, y:Float64Array, sy:integer )"],["base.strided.dmsktrunc.ndarray","base.strided.dmsktrunc.ndarray( N:integer, x:Float64Array, sx:integer, ox:integer, m:Float64Array, sm:integer, om:integer, y:Float64Array, sy:integer, oy:integer )"],["base.strided.dnanasum","base.strided.dnanasum( N:integer, x:Float64Array, stride:integer )"],["base.strided.dnanasum.ndarray","base.strided.dnanasum.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnanasumors","base.strided.dnanasumors( N:integer, x:Float64Array, stride:integer )"],["base.strided.dnanasumors.ndarray","base.strided.dnanasumors.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnanmax","base.strided.dnanmax( N:integer, x:Float64Array, stride:integer )"],["base.strided.dnanmax.ndarray","base.strided.dnanmax.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnanmaxabs","base.strided.dnanmaxabs( N:integer, x:Float64Array, stride:integer )"],["base.strided.dnanmaxabs.ndarray","base.strided.dnanmaxabs.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnanmean","base.strided.dnanmean( N:integer, x:Float64Array, stride:integer )"],["base.strided.dnanmean.ndarray","base.strided.dnanmean.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnanmeanors","base.strided.dnanmeanors( N:integer, x:Float64Array, stride:integer )"],["base.strided.dnanmeanors.ndarray","base.strided.dnanmeanors.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnanmeanpn","base.strided.dnanmeanpn( N:integer, x:Float64Array, stride:integer )"],["base.strided.dnanmeanpn.ndarray","base.strided.dnanmeanpn.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnanmeanpw","base.strided.dnanmeanpw( N:integer, x:Float64Array, stride:integer )"],["base.strided.dnanmeanpw.ndarray","base.strided.dnanmeanpw.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnanmeanwd","base.strided.dnanmeanwd( N:integer, x:Float64Array, stride:integer )"],["base.strided.dnanmeanwd.ndarray","base.strided.dnanmeanwd.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnanmin","base.strided.dnanmin( N:integer, x:Float64Array, stride:integer )"],["base.strided.dnanmin.ndarray","base.strided.dnanmin.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnanminabs","base.strided.dnanminabs( N:integer, x:Float64Array, stride:integer )"],["base.strided.dnanminabs.ndarray","base.strided.dnanminabs.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnanmskmax","base.strided.dnanmskmax( N:integer, x:Float64Array, strideX:integer, mask:Uint8Array, strideMask:integer )"],["base.strided.dnanmskmax.ndarray","base.strided.dnanmskmax.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, mask:Uint8Array, strideMask:integer, offsetMask:integer )"],["base.strided.dnanmskmin","base.strided.dnanmskmin( N:integer, x:Float64Array, strideX:integer, mask:Uint8Array, strideMask:integer )"],["base.strided.dnanmskmin.ndarray","base.strided.dnanmskmin.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, mask:Uint8Array, strideMask:integer, offsetMask:integer )"],["base.strided.dnanmskrange","base.strided.dnanmskrange( N:integer, x:Float64Array, strideX:integer, mask:Uint8Array, strideMask:integer )"],["base.strided.dnanmskrange.ndarray","base.strided.dnanmskrange.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, mask:Uint8Array, strideMask:integer, offsetMask:integer )"],["base.strided.dnannsum","base.strided.dnannsum( N:integer, x:Float64Array, strideX:integer, out:Float64Array, strideOut:integer )"],["base.strided.dnannsum.ndarray","base.strided.dnannsum.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, out:Float64Array, strideOut:integer, offsetOut:integer )"],["base.strided.dnannsumkbn","base.strided.dnannsumkbn( N:integer, x:Float64Array, strideX:integer, out:Float64Array, strideOut:integer )"],["base.strided.dnannsumkbn.ndarray","base.strided.dnannsumkbn.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, out:Float64Array, strideOut:integer, offsetOut:integer )"],["base.strided.dnannsumkbn2","base.strided.dnannsumkbn2( N:integer, x:Float64Array, strideX:integer, out:Float64Array, strideOut:integer )"],["base.strided.dnannsumkbn2.ndarray","base.strided.dnannsumkbn2.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, out:Float64Array, strideOut:integer, offsetOut:integer )"],["base.strided.dnannsumors","base.strided.dnannsumors( N:integer, x:Float64Array, strideX:integer, out:Float64Array, strideOut:integer )"],["base.strided.dnannsumors.ndarray","base.strided.dnannsumors.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, out:Float64Array, strideOut:integer, offsetOut:integer )"],["base.strided.dnannsumpw","base.strided.dnannsumpw( N:integer, x:Float64Array, strideX:integer, out:Float64Array, strideOut:integer )"],["base.strided.dnannsumpw.ndarray","base.strided.dnannsumpw.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, out:Float64Array, strideOut:integer, offsetOut:integer )"],["base.strided.dnanrange","base.strided.dnanrange( N:integer, x:Float64Array, stride:integer )"],["base.strided.dnanrange.ndarray","base.strided.dnanrange.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnanstdev","base.strided.dnanstdev( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dnanstdev.ndarray","base.strided.dnanstdev.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnanstdevch","base.strided.dnanstdevch( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dnanstdevch.ndarray","base.strided.dnanstdevch.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnanstdevpn","base.strided.dnanstdevpn( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dnanstdevpn.ndarray","base.strided.dnanstdevpn.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnanstdevtk","base.strided.dnanstdevtk( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dnanstdevtk.ndarray","base.strided.dnanstdevtk.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnanstdevwd","base.strided.dnanstdevwd( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dnanstdevwd.ndarray","base.strided.dnanstdevwd.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnanstdevyc","base.strided.dnanstdevyc( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dnanstdevyc.ndarray","base.strided.dnanstdevyc.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnansum","base.strided.dnansum( N:integer, x:Float64Array, stride:integer )"],["base.strided.dnansum.ndarray","base.strided.dnansum.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnansumkbn","base.strided.dnansumkbn( N:integer, x:Float64Array, stride:integer )"],["base.strided.dnansumkbn.ndarray","base.strided.dnansumkbn.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnansumkbn2","base.strided.dnansumkbn2( N:integer, x:Float64Array, stride:integer )"],["base.strided.dnansumkbn2.ndarray","base.strided.dnansumkbn2.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnansumors","base.strided.dnansumors( N:integer, x:Float64Array, stride:integer )"],["base.strided.dnansumors.ndarray","base.strided.dnansumors.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnansumpw","base.strided.dnansumpw( N:integer, x:Float64Array, stride:integer )"],["base.strided.dnansumpw.ndarray","base.strided.dnansumpw.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnanvariance","base.strided.dnanvariance( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dnanvariance.ndarray","base.strided.dnanvariance.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnanvariancech","base.strided.dnanvariancech( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dnanvariancech.ndarray","base.strided.dnanvariancech.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnanvariancepn","base.strided.dnanvariancepn( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dnanvariancepn.ndarray","base.strided.dnanvariancepn.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnanvariancetk","base.strided.dnanvariancetk( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dnanvariancetk.ndarray","base.strided.dnanvariancetk.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnanvariancewd","base.strided.dnanvariancewd( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dnanvariancewd.ndarray","base.strided.dnanvariancewd.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnanvarianceyc","base.strided.dnanvarianceyc( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dnanvarianceyc.ndarray","base.strided.dnanvarianceyc.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dnrm2","base.strided.dnrm2( N:integer, x:Float64Array, stride:integer )"],["base.strided.dnrm2.ndarray","base.strided.dnrm2.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dramp","base.strided.dramp( N:integer, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"],["base.strided.dramp.ndarray","base.strided.dramp.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"],["base.strided.drange","base.strided.drange( N:integer, x:Float64Array, stride:integer )"],["base.strided.drange.ndarray","base.strided.drange.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.drev","base.strided.drev( N:integer, x:Float64Array, stride:integer )"],["base.strided.drev.ndarray","base.strided.drev.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.drsqrt","base.strided.drsqrt( N:integer, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"],["base.strided.drsqrt.ndarray","base.strided.drsqrt.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"],["base.strided.dsapxsum","base.strided.dsapxsum( N:integer, alpha:number, x:Float32Array, stride:integer )"],["base.strided.dsapxsum.ndarray","base.strided.dsapxsum.ndarray( N:integer, alpha:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.dsapxsumpw","base.strided.dsapxsumpw( N:integer, alpha:number, x:Float32Array, stride:integer )"],["base.strided.dsapxsumpw.ndarray","base.strided.dsapxsumpw.ndarray( N:integer, alpha:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.dscal","base.strided.dscal( N:integer, alpha:number, x:Float64Array, stride:integer )"],["base.strided.dscal.ndarray","base.strided.dscal.ndarray( N:integer, alpha:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dsdot","base.strided.dsdot( N:integer, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.dsdot.ndarray","base.strided.dsdot.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.dsem","base.strided.dsem( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dsem.ndarray","base.strided.dsem.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dsemch","base.strided.dsemch( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dsemch.ndarray","base.strided.dsemch.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dsempn","base.strided.dsempn( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dsempn.ndarray","base.strided.dsempn.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dsemtk","base.strided.dsemtk( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dsemtk.ndarray","base.strided.dsemtk.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dsemwd","base.strided.dsemwd( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dsemwd.ndarray","base.strided.dsemwd.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dsemyc","base.strided.dsemyc( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dsemyc.ndarray","base.strided.dsemyc.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dsmean","base.strided.dsmean( N:integer, x:Float32Array, stride:integer )"],["base.strided.dsmean.ndarray","base.strided.dsmean.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.dsmeanors","base.strided.dsmeanors( N:integer, x:Float32Array, stride:integer )"],["base.strided.dsmeanors.ndarray","base.strided.dsmeanors.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.dsmeanpn","base.strided.dsmeanpn( N:integer, x:Float32Array, stride:integer )"],["base.strided.dsmeanpn.ndarray","base.strided.dsmeanpn.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.dsmeanpw","base.strided.dsmeanpw( N:integer, x:Float32Array, stride:integer )"],["base.strided.dsmeanpw.ndarray","base.strided.dsmeanpw.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.dsmeanwd","base.strided.dsmeanwd( N:integer, x:Float32Array, stride:integer )"],["base.strided.dsmeanwd.ndarray","base.strided.dsmeanwd.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.dsnanmean","base.strided.dsnanmean( N:integer, x:Float32Array, stride:integer )"],["base.strided.dsnanmean.ndarray","base.strided.dsnanmean.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.dsnanmeanors","base.strided.dsnanmeanors( N:integer, x:Float32Array, stride:integer )"],["base.strided.dsnanmeanors.ndarray","base.strided.dsnanmeanors.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.dsnanmeanpn","base.strided.dsnanmeanpn( N:integer, x:Float32Array, stride:integer )"],["base.strided.dsnanmeanpn.ndarray","base.strided.dsnanmeanpn.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.dsnanmeanwd","base.strided.dsnanmeanwd( N:integer, x:Float32Array, stride:integer )"],["base.strided.dsnanmeanwd.ndarray","base.strided.dsnanmeanwd.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.dsnannsumors","base.strided.dsnannsumors( N:integer, x:Float32Array, strideX:integer, out:Float64Array, strideOut:integer )"],["base.strided.dsnannsumors.ndarray","base.strided.dsnannsumors.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, out:Float64Array, strideOut:integer, offsetOut:integer )"],["base.strided.dsnansum","base.strided.dsnansum( N:integer, x:Float32Array, stride:integer )"],["base.strided.dsnansum.ndarray","base.strided.dsnansum.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.dsnansumors","base.strided.dsnansumors( N:integer, x:Float32Array, stride:integer )"],["base.strided.dsnansumors.ndarray","base.strided.dsnansumors.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.dsnansumpw","base.strided.dsnansumpw( N:integer, x:Float32Array, stride:integer )"],["base.strided.dsnansumpw.ndarray","base.strided.dsnansumpw.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.dsort2hp","base.strided.dsort2hp( N:integer, order:number, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"],["base.strided.dsort2hp.ndarray","base.strided.dsort2hp.ndarray( N:integer, order:number, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"],["base.strided.dsort2ins","base.strided.dsort2ins( N:integer, order:number, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"],["base.strided.dsort2ins.ndarray","base.strided.dsort2ins.ndarray( N:integer, order:number, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"],["base.strided.dsort2sh","base.strided.dsort2sh( N:integer, order:number, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"],["base.strided.dsort2sh.ndarray","base.strided.dsort2sh.ndarray( N:integer, order:number, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"],["base.strided.dsorthp","base.strided.dsorthp( N:integer, order:number, x:Float64Array, stride:integer )"],["base.strided.dsorthp.ndarray","base.strided.dsorthp.ndarray( N:integer, order:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dsortins","base.strided.dsortins( N:integer, order:number, x:Float64Array, stride:integer )"],["base.strided.dsortins.ndarray","base.strided.dsortins.ndarray( N:integer, order:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dsortsh","base.strided.dsortsh( N:integer, order:number, x:Float64Array, stride:integer )"],["base.strided.dsortsh.ndarray","base.strided.dsortsh.ndarray( N:integer, order:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dsqrt","base.strided.dsqrt( N:integer, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"],["base.strided.dsqrt.ndarray","base.strided.dsqrt.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"],["base.strided.dssum","base.strided.dssum( N:integer, x:Float32Array, stride:integer )"],["base.strided.dssum.ndarray","base.strided.dssum.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.dssumors","base.strided.dssumors( N:integer, x:Float32Array, stride:integer )"],["base.strided.dssumors.ndarray","base.strided.dssumors.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.dssumpw","base.strided.dssumpw( N:integer, x:Float32Array, stride:integer )"],["base.strided.dssumpw.ndarray","base.strided.dssumpw.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.dstdev","base.strided.dstdev( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dstdev.ndarray","base.strided.dstdev.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dstdevch","base.strided.dstdevch( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dstdevch.ndarray","base.strided.dstdevch.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dstdevpn","base.strided.dstdevpn( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dstdevpn.ndarray","base.strided.dstdevpn.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dstdevtk","base.strided.dstdevtk( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dstdevtk.ndarray","base.strided.dstdevtk.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dstdevwd","base.strided.dstdevwd( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dstdevwd.ndarray","base.strided.dstdevwd.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dstdevyc","base.strided.dstdevyc( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dstdevyc.ndarray","base.strided.dstdevyc.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dsum","base.strided.dsum( N:integer, x:Float64Array, stride:integer )"],["base.strided.dsum.ndarray","base.strided.dsum.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dsumkbn","base.strided.dsumkbn( N:integer, x:Float64Array, stride:integer )"],["base.strided.dsumkbn.ndarray","base.strided.dsumkbn.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dsumkbn2","base.strided.dsumkbn2( N:integer, x:Float64Array, stride:integer )"],["base.strided.dsumkbn2.ndarray","base.strided.dsumkbn2.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dsumors","base.strided.dsumors( N:integer, x:Float64Array, stride:integer )"],["base.strided.dsumors.ndarray","base.strided.dsumors.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dsumpw","base.strided.dsumpw( N:integer, x:Float64Array, stride:integer )"],["base.strided.dsumpw.ndarray","base.strided.dsumpw.ndarray( N:integer, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dsvariance","base.strided.dsvariance( N:integer, correction:number, x:Float32Array, stride:integer )"],["base.strided.dsvariance.ndarray","base.strided.dsvariance.ndarray( N:integer, correction:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.dsvariancepn","base.strided.dsvariancepn( N:integer, correction:number, x:Float32Array, stride:integer )"],["base.strided.dsvariancepn.ndarray","base.strided.dsvariancepn.ndarray( N:integer, correction:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.dswap","base.strided.dswap( N:integer, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"],["base.strided.dswap.ndarray","base.strided.dswap.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"],["base.strided.dtrunc","base.strided.dtrunc( N:integer, x:Float64Array, strideX:integer, y:Float64Array, strideY:integer )"],["base.strided.dtrunc.ndarray","base.strided.dtrunc.ndarray( N:integer, x:Float64Array, strideX:integer, offsetX:integer, y:Float64Array, strideY:integer, offsetY:integer )"],["base.strided.dtypeEnum2Str","base.strided.dtypeEnum2Str( dtype:integer )"],["base.strided.dtypeResolveEnum","base.strided.dtypeResolveEnum( dtype:any )"],["base.strided.dtypeResolveStr","base.strided.dtypeResolveStr( dtype:any )"],["base.strided.dtypeStr2Enum","base.strided.dtypeStr2Enum( dtype:string )"],["base.strided.dvariance","base.strided.dvariance( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dvariance.ndarray","base.strided.dvariance.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dvariancech","base.strided.dvariancech( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dvariancech.ndarray","base.strided.dvariancech.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dvariancepn","base.strided.dvariancepn( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dvariancepn.ndarray","base.strided.dvariancepn.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dvariancetk","base.strided.dvariancetk( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dvariancetk.ndarray","base.strided.dvariancetk.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dvariancewd","base.strided.dvariancewd( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dvariancewd.ndarray","base.strided.dvariancewd.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dvarianceyc","base.strided.dvarianceyc( N:integer, correction:number, x:Float64Array, stride:integer )"],["base.strided.dvarianceyc.ndarray","base.strided.dvarianceyc.ndarray( N:integer, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dvarm","base.strided.dvarm( N:integer, mean:number, correction:number, x:Float64Array, stride:integer )"],["base.strided.dvarm.ndarray","base.strided.dvarm.ndarray( N:integer, mean:number, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dvarmpn","base.strided.dvarmpn( N:integer, mean:number, correction:number, x:Float64Array, stride:integer )"],["base.strided.dvarmpn.ndarray","base.strided.dvarmpn.ndarray( N:integer, mean:number, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.dvarmtk","base.strided.dvarmtk( N:integer, mean:number, correction:number, x:Float64Array, stride:integer )"],["base.strided.dvarmtk.ndarray","base.strided.dvarmtk.ndarray( N:integer, mean:number, correction:number, x:Float64Array, stride:integer, offset:integer )"],["base.strided.gapx","base.strided.gapx( N:integer, alpha:number, x:Array|TypedArray, stride:integer )"],["base.strided.gapx.ndarray","base.strided.gapx.ndarray( N:integer, alpha:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.gapxsum","base.strided.gapxsum( N:integer, alpha:number, x:Array|TypedArray, stride:integer )"],["base.strided.gapxsum.ndarray","base.strided.gapxsum.ndarray( N:integer, alpha:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.gapxsumkbn","base.strided.gapxsumkbn( N:integer, alpha:number, x:Array|TypedArray, stride:integer )"],["base.strided.gapxsumkbn.ndarray","base.strided.gapxsumkbn.ndarray( N:integer, alpha:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.gapxsumkbn2","base.strided.gapxsumkbn2( N:integer, alpha:number, x:Array|TypedArray, stride:integer )"],["base.strided.gapxsumkbn2.ndarray","base.strided.gapxsumkbn2.ndarray( N:integer, alpha:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.gapxsumors","base.strided.gapxsumors( N:integer, alpha:number, x:Array|TypedArray, stride:integer )"],["base.strided.gapxsumors.ndarray","base.strided.gapxsumors.ndarray( N:integer, alpha:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.gapxsumpw","base.strided.gapxsumpw( N:integer, alpha:number, x:Array|TypedArray, stride:integer )"],["base.strided.gapxsumpw.ndarray","base.strided.gapxsumpw.ndarray( N:integer, alpha:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.gasum","base.strided.gasum( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.gasum.ndarray","base.strided.gasum.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.gasumpw","base.strided.gasumpw( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.gasumpw.ndarray","base.strided.gasumpw.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.gaxpy","base.strided.gaxpy( N:integer, alpha:number, x:Array|TypedArray, strideX:integer, y:Array|TypedArray, strideY:integer )"],["base.strided.gaxpy.ndarray","base.strided.gaxpy.ndarray( N:integer, alpha:number, x:Array|TypedArray, strideX:integer, offsetX:integer, y:Array|TypedArray, strideY:integer, offsetY:integer )"],["base.strided.gcopy","base.strided.gcopy( N:integer, x:ArrayLikeObject, strideX:integer, y:ArrayLikeObject, strideY:integer )"],["base.strided.gcopy.ndarray","base.strided.gcopy.ndarray( N:integer, x:ArrayLikeObject, strideX:integer, offsetX:integer, y:ArrayLikeObject, strideY:integer, offsetY:integer )"],["base.strided.gcusum","base.strided.gcusum( N:integer, sum:number, x:Array|TypedArray, strideX:integer, y:Array|TypedArray, strideY:integer )"],["base.strided.gcusum.ndarray","base.strided.gcusum.ndarray( N:integer, sum:number, x:Array|TypedArray, strideX:integer, offsetX:integer, y:Array|TypedArray, strideY:integer, offsetY:integer )"],["base.strided.gcusumkbn","base.strided.gcusumkbn( N:integer, sum:number, x:Array|TypedArray, strideX:integer, y:Array|TypedArray, strideY:integer )"],["base.strided.gcusumkbn.ndarray","base.strided.gcusumkbn.ndarray( N:integer, sum:number, x:Array|TypedArray, strideX:integer, offsetX:integer, y:Array|TypedArray, strideY:integer, offsetY:integer )"],["base.strided.gcusumkbn2","base.strided.gcusumkbn2( N:integer, sum:number, x:Array|TypedArray, strideX:integer, y:Array|TypedArray, strideY:integer )"],["base.strided.gcusumkbn2.ndarray","base.strided.gcusumkbn2.ndarray( N:integer, sum:number, x:Array|TypedArray, strideX:integer, offsetX:integer, y:Array|TypedArray, strideY:integer, offsetY:integer )"],["base.strided.gcusumors","base.strided.gcusumors( N:integer, sum:number, x:Array|TypedArray, strideX:integer, y:Array|TypedArray, strideY:integer )"],["base.strided.gcusumors.ndarray","base.strided.gcusumors.ndarray( N:integer, sum:number, x:Array|TypedArray, strideX:integer, offsetX:integer, y:Array|TypedArray, strideY:integer, offsetY:integer )"],["base.strided.gcusumpw","base.strided.gcusumpw( N:integer, sum:number, x:Array|TypedArray, strideX:integer, y:Array|TypedArray, strideY:integer )"],["base.strided.gcusumpw.ndarray","base.strided.gcusumpw.ndarray( N:integer, sum:number, x:Array|TypedArray, strideX:integer, offsetX:integer, y:Array|TypedArray, strideY:integer, offsetY:integer )"],["base.strided.gdot","base.strided.gdot( N:integer, x:Array|TypedArray, strideX:integer, y:Array|TypedArray, strideY:integer )"],["base.strided.gdot.ndarray","base.strided.gdot.ndarray( N:integer, x:Array|TypedArray, strideX:integer, offsetX:integer, y:Array|TypedArray, strideY:integer, offsetY:integer )"],["base.strided.gfill","base.strided.gfill( N:integer, alpha:any, x:ArrayLikeObject, stride:integer )"],["base.strided.gfill.ndarray","base.strided.gfill.ndarray( N:integer, alpha:any, x:ArrayLikeObject, stride:integer, offset:integer )"],["base.strided.gfillBy","base.strided.gfillBy( N:integer, x:ArrayLikeObject, stride:integer, clbk:Function[, thisArg:any] )"],["base.strided.gfillBy.ndarray","base.strided.gfillBy.ndarray( N:integer, x:ArrayLikeObject, stride:integer, offset:integer, clbk:Function[, thisArg:any] )"],["base.strided.gnannsumkbn","base.strided.gnannsumkbn( N:integer, x:Array|TypedArray, strideX:integer, out:Array|TypedArray, strideOut:integer )"],["base.strided.gnannsumkbn.ndarray","base.strided.gnannsumkbn.ndarray( N:integer, x:Array|TypedArray, strideX:integer, offsetX:integer, out:Array|TypedArray, strideOut:integer, offsetOut:integer )"],["base.strided.gnansum","base.strided.gnansum( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.gnansum.ndarray","base.strided.gnansum.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.gnansumkbn","base.strided.gnansumkbn( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.gnansumkbn.ndarray","base.strided.gnansumkbn.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.gnansumkbn2","base.strided.gnansumkbn2( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.gnansumkbn2.ndarray","base.strided.gnansumkbn2.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.gnansumors","base.strided.gnansumors( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.gnansumors.ndarray","base.strided.gnansumors.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.gnansumpw","base.strided.gnansumpw( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.gnansumpw.ndarray","base.strided.gnansumpw.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.gnrm2","base.strided.gnrm2( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.gnrm2.ndarray","base.strided.gnrm2.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.grev","base.strided.grev( N:integer, x:ArrayLikeObject, stride:integer )"],["base.strided.grev.ndarray","base.strided.grev.ndarray( N:integer, x:ArrayLikeObject, stride:integer, offset:integer )"],["base.strided.gscal","base.strided.gscal( N:integer, alpha:number, x:Array|TypedArray, stride:integer )"],["base.strided.gscal.ndarray","base.strided.gscal.ndarray( N:integer, alpha:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.gsort2hp","base.strided.gsort2hp( N:integer, order:number, x:Array|TypedArray, strideX:integer, y:Array|TypedArray, strideY:integer )"],["base.strided.gsort2hp.ndarray","base.strided.gsort2hp.ndarray( N:integer, order:number, x:Array|TypedArray, strideX:integer, offsetX:integer, y:Array|TypedArray, strideY:integer, offsetY:integer )"],["base.strided.gsort2ins","base.strided.gsort2ins( N:integer, order:number, x:Array|TypedArray, strideX:integer, y:Array|TypedArray, strideY:integer )"],["base.strided.gsort2ins.ndarray","base.strided.gsort2ins.ndarray( N:integer, order:number, x:Array|TypedArray, strideX:integer, offsetX:integer, y:Array|TypedArray, strideY:integer, offsetY:integer )"],["base.strided.gsort2sh","base.strided.gsort2sh( N:integer, order:number, x:Array|TypedArray, strideX:integer, y:Array|TypedArray, strideY:integer )"],["base.strided.gsort2sh.ndarray","base.strided.gsort2sh.ndarray( N:integer, order:number, x:Array|TypedArray, strideX:integer, offsetX:integer, y:Array|TypedArray, strideY:integer, offsetY:integer )"],["base.strided.gsorthp","base.strided.gsorthp( N:integer, order:number, x:Array|TypedArray, stride:integer )"],["base.strided.gsorthp.ndarray","base.strided.gsorthp.ndarray( N:integer, order:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.gsortins","base.strided.gsortins( N:integer, order:number, x:Array|TypedArray, stride:integer )"],["base.strided.gsortins.ndarray","base.strided.gsortins.ndarray( N:integer, order:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.gsortsh","base.strided.gsortsh( N:integer, order:number, x:Array|TypedArray, stride:integer )"],["base.strided.gsortsh.ndarray","base.strided.gsortsh.ndarray( N:integer, order:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.gsum","base.strided.gsum( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.gsum.ndarray","base.strided.gsum.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.gsumkbn","base.strided.gsumkbn( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.gsumkbn.ndarray","base.strided.gsumkbn.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.gsumkbn2","base.strided.gsumkbn2( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.gsumkbn2.ndarray","base.strided.gsumkbn2.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.gsumors","base.strided.gsumors( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.gsumors.ndarray","base.strided.gsumors.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.gsumpw","base.strided.gsumpw( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.gsumpw.ndarray","base.strided.gsumpw.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.gswap","base.strided.gswap( N:integer, x:ArrayLikeObject, strideX:integer, y:ArrayLikeObject, strideY:integer )"],["base.strided.gswap.ndarray","base.strided.gswap.ndarray( N:integer, x:ArrayLikeObject, strideX:integer, offsetX:integer, y:ArrayLikeObject, strideY:integer, offsetY:integer )"],["base.strided.mapBy","base.strided.mapBy( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, fcn:Function, clbk:Function[, thisArg:any] )"],["base.strided.mapBy.ndarray","base.strided.mapBy.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, fcn:Function, clbk:Function[, thisArg:any] )"],["base.strided.mapBy2","base.strided.mapBy2( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, z:Array|TypedArray|Object, sz:integer, fcn:Function, clbk:Function[, thisArg:any] )"],["base.strided.mapBy2.ndarray","base.strided.mapBy2.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, z:Array|TypedArray|Object, sz:integer, oz:integer, fcn:Function, clbk:Function[, thisArg:any] )"],["base.strided.max","base.strided.max( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.max.ndarray","base.strided.max.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.maxabs","base.strided.maxabs( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.maxabs.ndarray","base.strided.maxabs.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.maxBy","base.strided.maxBy( N:integer, x:Array|TypedArray|Object, stride:integer, clbk:Function[, thisArg:any] )"],["base.strided.maxBy.ndarray","base.strided.maxBy.ndarray( N:integer, x:Array|TypedArray|Object, stride:integer, offset:integer, clbk:Function[, thisArg:any] )"],["base.strided.maxsorted","base.strided.maxsorted( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.maxsorted.ndarray","base.strided.maxsorted.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.maxViewBufferIndex","base.strided.maxViewBufferIndex( N:integer, stride:integer, offset:integer )"],["base.strided.mean","base.strided.mean( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.mean.ndarray","base.strided.mean.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.meankbn","base.strided.meankbn( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.meankbn.ndarray","base.strided.meankbn.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.meankbn2","base.strided.meankbn2( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.meankbn2.ndarray","base.strided.meankbn2.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.meanors","base.strided.meanors( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.meanors.ndarray","base.strided.meanors.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.meanpn","base.strided.meanpn( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.meanpn.ndarray","base.strided.meanpn.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.meanpw","base.strided.meanpw( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.meanpw.ndarray","base.strided.meanpw.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.meanwd","base.strided.meanwd( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.meanwd.ndarray","base.strided.meanwd.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.mediansorted","base.strided.mediansorted( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.mediansorted.ndarray","base.strided.mediansorted.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.metaDataProps","base.strided.metaDataProps( meta:Object, dtypes:ArrayLikeObject, obj:Object|Function, bool:boolean )"],["base.strided.min","base.strided.min( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.min.ndarray","base.strided.min.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.minabs","base.strided.minabs( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.minabs.ndarray","base.strided.minabs.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.minBy","base.strided.minBy( N:integer, x:Array|TypedArray|Object, stride:integer, clbk:Function[, thisArg:any] )"],["base.strided.minBy.ndarray","base.strided.minBy.ndarray( N:integer, x:Array|TypedArray|Object, stride:integer, offset:integer, clbk:Function[, thisArg:any] )"],["base.strided.minsorted","base.strided.minsorted( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.minsorted.ndarray","base.strided.minsorted.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.minViewBufferIndex","base.strided.minViewBufferIndex( N:integer, stride:integer, offset:integer )"],["base.strided.mskmax","base.strided.mskmax( N:integer, x:Array|TypedArray, strideX:integer, mask:Array|TypedArray, strideMask:integer )"],["base.strided.mskmax.ndarray","base.strided.mskmax.ndarray( N:integer, x:Array|TypedArray, strideX:integer, offsetX:integer, mask:Array|TypedArray, strideMask:integer, offsetMask:integer )"],["base.strided.mskmin","base.strided.mskmin( N:integer, x:Array|TypedArray, strideX:integer, mask:Array|TypedArray, strideMask:integer )"],["base.strided.mskmin.ndarray","base.strided.mskmin.ndarray( N:integer, x:Array|TypedArray, strideX:integer, offsetX:integer, mask:Array|TypedArray, strideMask:integer, offsetMask:integer )"],["base.strided.mskrange","base.strided.mskrange( N:integer, x:Array|TypedArray, strideX:integer, mask:Array|TypedArray, strideMask:integer )"],["base.strided.mskrange.ndarray","base.strided.mskrange.ndarray( N:integer, x:Array|TypedArray, strideX:integer, offsetX:integer, mask:Array|TypedArray, strideMask:integer, offsetMask:integer )"],["base.strided.mskunary","base.strided.mskunary( arrays:ArrayLikeObject<ArrayLikeObject>, shape:ArrayLikeObject<integer>, strides:ArrayLikeObject<integer>, fcn:Function )"],["base.strided.mskunary.ndarray","base.strided.mskunary.ndarray( arrays:ArrayLikeObject<ArrayLikeObject>, shape:ArrayLikeObject<integer>, strides:ArrayLikeObject<integer>, offsets:ArrayLikeObject<integer>, fcn:Function )"],["base.strided.mskunaryDtypeSignatures","base.strided.mskunaryDtypeSignatures( dtypes1:ArrayLike<any>, dtypes2:ArrayLike<any>[, options:Object] )"],["base.strided.mskunarySignatureCallbacks","base.strided.mskunarySignatureCallbacks( table:Object, signatures:ArrayLike<any> )"],["base.strided.nanmax","base.strided.nanmax( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.nanmax.ndarray","base.strided.nanmax.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.nanmaxabs","base.strided.nanmaxabs( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.nanmaxabs.ndarray","base.strided.nanmaxabs.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.nanmaxBy","base.strided.nanmaxBy( N:integer, x:Array|TypedArray|Object, stride:integer, clbk:Function[, thisArg:any] )"],["base.strided.nanmaxBy.ndarray","base.strided.nanmaxBy.ndarray( N:integer, x:Array|TypedArray|Object, stride:integer, offset:integer, clbk:Function[, thisArg:any] )"],["base.strided.nanmean","base.strided.nanmean( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.nanmean.ndarray","base.strided.nanmean.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.nanmeanors","base.strided.nanmeanors( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.nanmeanors.ndarray","base.strided.nanmeanors.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.nanmeanpn","base.strided.nanmeanpn( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.nanmeanpn.ndarray","base.strided.nanmeanpn.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.nanmeanwd","base.strided.nanmeanwd( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.nanmeanwd.ndarray","base.strided.nanmeanwd.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.nanmin","base.strided.nanmin( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.nanmin.ndarray","base.strided.nanmin.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.nanminabs","base.strided.nanminabs( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.nanminabs.ndarray","base.strided.nanminabs.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.nanminBy","base.strided.nanminBy( N:integer, x:Array|TypedArray|Object, stride:integer, clbk:Function[, thisArg:any] )"],["base.strided.nanminBy.ndarray","base.strided.nanminBy.ndarray( N:integer, x:Array|TypedArray|Object, stride:integer, offset:integer, clbk:Function[, thisArg:any] )"],["base.strided.nanmskmax","base.strided.nanmskmax( N:integer, x:Array|TypedArray, strideX:integer, mask:Array|TypedArray, strideMask:integer )"],["base.strided.nanmskmax.ndarray","base.strided.nanmskmax.ndarray( N:integer, x:Array|TypedArray, strideX:integer, offsetX:integer, mask:Array|TypedArray, strideMask:integer, offsetMask:integer )"],["base.strided.nanmskmin","base.strided.nanmskmin( N:integer, x:Array|TypedArray, strideX:integer, mask:Array|TypedArray, strideMask:integer )"],["base.strided.nanmskmin.ndarray","base.strided.nanmskmin.ndarray( N:integer, x:Array|TypedArray, strideX:integer, offsetX:integer, mask:Array|TypedArray, strideMask:integer, offsetMask:integer )"],["base.strided.nanmskrange","base.strided.nanmskrange( N:integer, x:Array|TypedArray, strideX:integer, mask:Array|TypedArray, strideMask:integer )"],["base.strided.nanmskrange.ndarray","base.strided.nanmskrange.ndarray( N:integer, x:Array|TypedArray, strideX:integer, offsetX:integer, mask:Array|TypedArray, strideMask:integer, offsetMask:integer )"],["base.strided.nanrange","base.strided.nanrange( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.nanrange.ndarray","base.strided.nanrange.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.nanrangeBy","base.strided.nanrangeBy( N:integer, x:Array|TypedArray|Object, stride:integer, clbk:Function[, thisArg:any] )"],["base.strided.nanrangeBy.ndarray","base.strided.nanrangeBy.ndarray( N:integer, x:Array|TypedArray|Object, stride:integer, offset:integer, clbk:Function[, thisArg:any] )"],["base.strided.nanstdev","base.strided.nanstdev( N:integer, correction:number, x:Array|TypedArray, stride:integer )"],["base.strided.nanstdev.ndarray","base.strided.nanstdev.ndarray( N:integer, correction:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.nanstdevch","base.strided.nanstdevch( N:integer, correction:number, x:Array|TypedArray, stride:integer )"],["base.strided.nanstdevch.ndarray","base.strided.nanstdevch.ndarray( N:integer, correction:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.nanstdevpn","base.strided.nanstdevpn( N:integer, correction:number, x:Array|TypedArray, stride:integer )"],["base.strided.nanstdevpn.ndarray","base.strided.nanstdevpn.ndarray( N:integer, correction:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.nanstdevtk","base.strided.nanstdevtk( N:integer, correction:number, x:Array|TypedArray, stride:integer )"],["base.strided.nanstdevtk.ndarray","base.strided.nanstdevtk.ndarray( N:integer, correction:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.nanstdevwd","base.strided.nanstdevwd( N:integer, correction:number, x:Array|TypedArray, stride:integer )"],["base.strided.nanstdevwd.ndarray","base.strided.nanstdevwd.ndarray( N:integer, correction:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.nanstdevyc","base.strided.nanstdevyc( N:integer, correction:number, x:Array|TypedArray, stride:integer )"],["base.strided.nanstdevyc.ndarray","base.strided.nanstdevyc.ndarray( N:integer, correction:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.nanvariance","base.strided.nanvariance( N:integer, correction:number, x:Array|TypedArray, stride:integer )"],["base.strided.nanvariance.ndarray","base.strided.nanvariance.ndarray( N:integer, correction:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.nanvariancech","base.strided.nanvariancech( N:integer, correction:number, x:Array|TypedArray, stride:integer )"],["base.strided.nanvariancech.ndarray","base.strided.nanvariancech.ndarray( N:integer, correction:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.nanvariancepn","base.strided.nanvariancepn( N:integer, correction:number, x:Array|TypedArray, stride:integer )"],["base.strided.nanvariancepn.ndarray","base.strided.nanvariancepn.ndarray( N:integer, correction:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.nanvariancetk","base.strided.nanvariancetk( N:integer, correction:number, x:Array|TypedArray, stride:integer )"],["base.strided.nanvariancetk.ndarray","base.strided.nanvariancetk.ndarray( N:integer, correction:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.nanvariancewd","base.strided.nanvariancewd( N:integer, correction:number, x:Array|TypedArray, stride:integer )"],["base.strided.nanvariancewd.ndarray","base.strided.nanvariancewd.ndarray( N:integer, correction:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.nanvarianceyc","base.strided.nanvarianceyc( N:integer, correction:number, x:Array|TypedArray, stride:integer )"],["base.strided.nanvarianceyc.ndarray","base.strided.nanvarianceyc.ndarray( N:integer, correction:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.nullary","base.strided.nullary( arrays:ArrayLikeObject<ArrayLikeObject>, shape:ArrayLikeObject<integer>, strides:ArrayLikeObject<integer>, fcn:Function )"],["base.strided.nullary.ndarray","base.strided.nullary.ndarray( arrays:ArrayLikeObject<ArrayLikeObject>, shape:ArrayLikeObject<integer>, strides:ArrayLikeObject<integer>, offsets:ArrayLikeObject<integer>, fcn:Function )"],["base.strided.offsetView","base.strided.offsetView( x:TypedArray, offset:integer )"],["base.strided.quaternary","base.strided.quaternary( arrays:ArrayLikeObject<ArrayLikeObject>, shape:ArrayLikeObject<integer>, strides:ArrayLikeObject<integer>, fcn:Function )"],["base.strided.quaternary.ndarray","base.strided.quaternary.ndarray( arrays:ArrayLikeObject<ArrayLikeObject>, shape:ArrayLikeObject<integer>, strides:ArrayLikeObject<integer>, offsets:ArrayLikeObject<integer>, fcn:Function )"],["base.strided.quinary","base.strided.quinary( arrays:ArrayLikeObject<ArrayLikeObject>, shape:ArrayLikeObject<integer>, strides:ArrayLikeObject<integer>, fcn:Function )"],["base.strided.quinary.ndarray","base.strided.quinary.ndarray( arrays:ArrayLikeObject<ArrayLikeObject>, shape:ArrayLikeObject<integer>, strides:ArrayLikeObject<integer>, offsets:ArrayLikeObject<integer>, fcn:Function )"],["base.strided.range","base.strided.range( N:integer, x:Array|TypedArray, stride:integer )"],["base.strided.range.ndarray","base.strided.range.ndarray( N:integer, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.rangeBy","base.strided.rangeBy( N:integer, x:Array|TypedArray|Object, stride:integer, clbk:Function[, thisArg:any] )"],["base.strided.rangeBy.ndarray","base.strided.rangeBy.ndarray( N:integer, x:Array|TypedArray|Object, stride:integer, offset:integer, clbk:Function[, thisArg:any] )"],["base.strided.reinterpretComplex","base.strided.reinterpretComplex( x:Complex128Array|Complex64Array, offset:integer )"],["base.strided.reinterpretComplex64","base.strided.reinterpretComplex64( x:Complex64Array, offset:integer )"],["base.strided.reinterpretComplex128","base.strided.reinterpretComplex128( x:Complex128Array, offset:integer )"],["base.strided.sabs","base.strided.sabs( N:integer, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.sabs.ndarray","base.strided.sabs.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.sabs2","base.strided.sabs2( N:integer, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.sabs2.ndarray","base.strided.sabs2.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.sapx","base.strided.sapx( N:integer, alpha:number, x:Float32Array, stride:integer )"],["base.strided.sapx.ndarray","base.strided.sapx.ndarray( N:integer, alpha:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.sapxsum","base.strided.sapxsum( N:integer, alpha:number, x:Float32Array, stride:integer )"],["base.strided.sapxsum.ndarray","base.strided.sapxsum.ndarray( N:integer, alpha:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.sapxsumkbn","base.strided.sapxsumkbn( N:integer, alpha:number, x:Float32Array, stride:integer )"],["base.strided.sapxsumkbn.ndarray","base.strided.sapxsumkbn.ndarray( N:integer, alpha:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.sapxsumkbn2","base.strided.sapxsumkbn2( N:integer, alpha:number, x:Float32Array, stride:integer )"],["base.strided.sapxsumkbn2.ndarray","base.strided.sapxsumkbn2.ndarray( N:integer, alpha:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.sapxsumors","base.strided.sapxsumors( N:integer, alpha:number, x:Float32Array, stride:integer )"],["base.strided.sapxsumors.ndarray","base.strided.sapxsumors.ndarray( N:integer, alpha:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.sapxsumpw","base.strided.sapxsumpw( N:integer, alpha:number, x:Float32Array, stride:integer )"],["base.strided.sapxsumpw.ndarray","base.strided.sapxsumpw.ndarray( N:integer, alpha:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.sasum","base.strided.sasum( N:integer, x:Float32Array, stride:integer )"],["base.strided.sasum.ndarray","base.strided.sasum.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.sasumpw","base.strided.sasumpw( N:integer, x:Float32Array, stride:integer )"],["base.strided.sasumpw.ndarray","base.strided.sasumpw.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.saxpy","base.strided.saxpy( N:integer, alpha:number, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.saxpy.ndarray","base.strided.saxpy.ndarray( N:integer, alpha:number, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.scbrt","base.strided.scbrt( N:integer, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.scbrt.ndarray","base.strided.scbrt.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.sceil","base.strided.sceil( N:integer, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.sceil.ndarray","base.strided.sceil.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.scopy","base.strided.scopy( N:integer, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.scopy.ndarray","base.strided.scopy.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.scumax","base.strided.scumax( N:integer, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.scumax.ndarray","base.strided.scumax.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.scumaxabs","base.strided.scumaxabs( N:integer, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.scumaxabs.ndarray","base.strided.scumaxabs.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.scumin","base.strided.scumin( N:integer, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.scumin.ndarray","base.strided.scumin.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.scuminabs","base.strided.scuminabs( N:integer, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.scuminabs.ndarray","base.strided.scuminabs.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.scusum","base.strided.scusum( N:integer, sum:number, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.scusum.ndarray","base.strided.scusum.ndarray( N:integer, sum:number, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.scusumkbn","base.strided.scusumkbn( N:integer, sum:number, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.scusumkbn.ndarray","base.strided.scusumkbn.ndarray( N:integer, sum:number, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.scusumkbn2","base.strided.scusumkbn2( N:integer, sum:number, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.scusumkbn2.ndarray","base.strided.scusumkbn2.ndarray( N:integer, sum:number, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.scusumors","base.strided.scusumors( N:integer, sum:number, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.scusumors.ndarray","base.strided.scusumors.ndarray( N:integer, sum:number, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.scusumpw","base.strided.scusumpw( N:integer, sum:number, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.scusumpw.ndarray","base.strided.scusumpw.ndarray( N:integer, sum:number, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.sdeg2rad","base.strided.sdeg2rad( N:integer, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.sdeg2rad.ndarray","base.strided.sdeg2rad.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.sdot","base.strided.sdot( N:integer, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.sdot.ndarray","base.strided.sdot.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.sdsapxsum","base.strided.sdsapxsum( N:integer, alpha:number, x:Float32Array, stride:integer )"],["base.strided.sdsapxsum.ndarray","base.strided.sdsapxsum.ndarray( N:integer, alpha:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.sdsapxsumpw","base.strided.sdsapxsumpw( N:integer, alpha:number, x:Float32Array, stride:integer )"],["base.strided.sdsapxsumpw.ndarray","base.strided.sdsapxsumpw.ndarray( N:integer, alpha:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.sdsdot","base.strided.sdsdot( N:integer, scalar:number, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.sdsdot.ndarray","base.strided.sdsdot.ndarray( N:integer, scalar:number, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.sdsmean","base.strided.sdsmean( N:integer, x:Float32Array, stride:integer )"],["base.strided.sdsmean.ndarray","base.strided.sdsmean.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.sdsmeanors","base.strided.sdsmeanors( N:integer, x:Float32Array, stride:integer )"],["base.strided.sdsmeanors.ndarray","base.strided.sdsmeanors.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.sdsnanmean","base.strided.sdsnanmean( N:integer, x:Float32Array, stride:integer )"],["base.strided.sdsnanmean.ndarray","base.strided.sdsnanmean.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.sdsnanmeanors","base.strided.sdsnanmeanors( N:integer, x:Float32Array, stride:integer )"],["base.strided.sdsnanmeanors.ndarray","base.strided.sdsnanmeanors.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.sdsnansum","base.strided.sdsnansum( N:integer, x:Float32Array, stride:integer )"],["base.strided.sdsnansum.ndarray","base.strided.sdsnansum.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.sdsnansumpw","base.strided.sdsnansumpw( N:integer, x:Float32Array, stride:integer )"],["base.strided.sdsnansumpw.ndarray","base.strided.sdsnansumpw.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.sdssum","base.strided.sdssum( N:integer, x:Float32Array, stride:integer )"],["base.strided.sdssum.ndarray","base.strided.sdssum.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.sdssumpw","base.strided.sdssumpw( N:integer, x:Float32Array, stride:integer )"],["base.strided.sdssumpw.ndarray","base.strided.sdssumpw.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.sfill","base.strided.sfill( N:integer, alpha:number, x:Float32Array, stride:integer )"],["base.strided.sfill.ndarray","base.strided.sfill.ndarray( N:integer, alpha:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.sfloor","base.strided.sfloor( N:integer, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.sfloor.ndarray","base.strided.sfloor.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.sinv","base.strided.sinv( N:integer, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.sinv.ndarray","base.strided.sinv.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.smap","base.strided.smap( N:integer, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer, fcn:Function )"],["base.strided.smap.ndarray","base.strided.smap.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer, fcn:Function )"],["base.strided.smap2","base.strided.smap2( N:integer, x:Float32Array, sx:integer, y:Float32Array, sy:integer, z:Float32Array, sz:integer, fcn:Function )"],["base.strided.smap2.ndarray","base.strided.smap2.ndarray( N:integer, x:Float32Array, sx:integer, ox:integer, y:Float32Array, sy:integer, oy:integer, z:Float32Array, sz:integer, oz:integer, fcn:Function )"],["base.strided.smax","base.strided.smax( N:integer, x:Float32Array, stride:integer )"],["base.strided.smax.ndarray","base.strided.smax.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.smaxabs","base.strided.smaxabs( N:integer, x:Float32Array, stride:integer )"],["base.strided.smaxabs.ndarray","base.strided.smaxabs.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.smaxabssorted","base.strided.smaxabssorted( N:integer, x:Float32Array, stride:integer )"],["base.strided.smaxabssorted.ndarray","base.strided.smaxabssorted.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.smaxsorted","base.strided.smaxsorted( N:integer, x:Float32Array, stride:integer )"],["base.strided.smaxsorted.ndarray","base.strided.smaxsorted.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.smean","base.strided.smean( N:integer, x:Float32Array, stride:integer )"],["base.strided.smean.ndarray","base.strided.smean.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.smeankbn","base.strided.smeankbn( N:integer, x:Float32Array, stride:integer )"],["base.strided.smeankbn.ndarray","base.strided.smeankbn.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.smeankbn2","base.strided.smeankbn2( N:integer, x:Float32Array, stride:integer )"],["base.strided.smeankbn2.ndarray","base.strided.smeankbn2.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.smeanli","base.strided.smeanli( N:integer, x:Float32Array, stride:integer )"],["base.strided.smeanli.ndarray","base.strided.smeanli.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.smeanlipw","base.strided.smeanlipw( N:integer, x:Float32Array, stride:integer )"],["base.strided.smeanlipw.ndarray","base.strided.smeanlipw.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.smeanors","base.strided.smeanors( N:integer, x:Float32Array, stride:integer )"],["base.strided.smeanors.ndarray","base.strided.smeanors.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.smeanpn","base.strided.smeanpn( N:integer, x:Float32Array, stride:integer )"],["base.strided.smeanpn.ndarray","base.strided.smeanpn.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.smeanpw","base.strided.smeanpw( N:integer, x:Float32Array, stride:integer )"],["base.strided.smeanpw.ndarray","base.strided.smeanpw.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.smeanwd","base.strided.smeanwd( N:integer, x:Float32Array, stride:integer )"],["base.strided.smeanwd.ndarray","base.strided.smeanwd.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.smediansorted","base.strided.smediansorted( N:integer, x:Float32Array, stride:integer )"],["base.strided.smediansorted.ndarray","base.strided.smediansorted.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.smidrange","base.strided.smidrange( N:integer, x:Float32Array, stride:integer )"],["base.strided.smidrange.ndarray","base.strided.smidrange.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.smin","base.strided.smin( N:integer, x:Float32Array, stride:integer )"],["base.strided.smin.ndarray","base.strided.smin.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.sminabs","base.strided.sminabs( N:integer, x:Float32Array, stride:integer )"],["base.strided.sminabs.ndarray","base.strided.sminabs.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.sminsorted","base.strided.sminsorted( N:integer, x:Float32Array, stride:integer )"],["base.strided.sminsorted.ndarray","base.strided.sminsorted.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.smskabs","base.strided.smskabs( N:integer, x:Float32Array, sx:integer, m:Uint8Array, sm:integer, y:Float32Array, sy:integer )"],["base.strided.smskabs.ndarray","base.strided.smskabs.ndarray( N:integer, x:Float32Array, sx:integer, ox:integer, m:Float32Array, sm:integer, om:integer, y:Float32Array, sy:integer, oy:integer )"],["base.strided.smskabs2","base.strided.smskabs2( N:integer, x:Float32Array, sx:integer, m:Uint8Array, sm:integer, y:Float32Array, sy:integer )"],["base.strided.smskabs2.ndarray","base.strided.smskabs2.ndarray( N:integer, x:Float32Array, sx:integer, ox:integer, m:Float32Array, sm:integer, om:integer, y:Float32Array, sy:integer, oy:integer )"],["base.strided.smskcbrt","base.strided.smskcbrt( N:integer, x:Float32Array, sx:integer, m:Uint8Array, sm:integer, y:Float32Array, sy:integer )"],["base.strided.smskcbrt.ndarray","base.strided.smskcbrt.ndarray( N:integer, x:Float32Array, sx:integer, ox:integer, m:Float32Array, sm:integer, om:integer, y:Float32Array, sy:integer, oy:integer )"],["base.strided.smskceil","base.strided.smskceil( N:integer, x:Float32Array, sx:integer, m:Uint8Array, sm:integer, y:Float32Array, sy:integer )"],["base.strided.smskceil.ndarray","base.strided.smskceil.ndarray( N:integer, x:Float32Array, sx:integer, ox:integer, m:Float32Array, sm:integer, om:integer, y:Float32Array, sy:integer, oy:integer )"],["base.strided.smskdeg2rad","base.strided.smskdeg2rad( N:integer, x:Float32Array, sx:integer, m:Uint8Array, sm:integer, y:Float32Array, sy:integer )"],["base.strided.smskdeg2rad.ndarray","base.strided.smskdeg2rad.ndarray( N:integer, x:Float32Array, sx:integer, ox:integer, m:Float32Array, sm:integer, om:integer, y:Float32Array, sy:integer, oy:integer )"],["base.strided.smskfloor","base.strided.smskfloor( N:integer, x:Float32Array, sx:integer, m:Uint8Array, sm:integer, y:Float32Array, sy:integer )"],["base.strided.smskfloor.ndarray","base.strided.smskfloor.ndarray( N:integer, x:Float32Array, sx:integer, ox:integer, m:Float32Array, sm:integer, om:integer, y:Float32Array, sy:integer, oy:integer )"],["base.strided.smskinv","base.strided.smskinv( N:integer, x:Float32Array, sx:integer, m:Uint8Array, sm:integer, y:Float32Array, sy:integer )"],["base.strided.smskinv.ndarray","base.strided.smskinv.ndarray( N:integer, x:Float32Array, sx:integer, ox:integer, m:Float32Array, sm:integer, om:integer, y:Float32Array, sy:integer, oy:integer )"],["base.strided.smskmap","base.strided.smskmap( N:integer, x:Float32Array, sx:integer, m:Uint8Array, sm:integer, y:Float32Array, sy:integer, fcn:Function )"],["base.strided.smskmap.ndarray","base.strided.smskmap.ndarray( N:integer, x:Float32Array, sx:integer, ox:integer, m:Uint8Array, sm:integer, om:integer, y:Float32Array, sy:integer, oy:integer, fcn:Function )"],["base.strided.smskmap2","base.strided.smskmap2( N:integer, x:Float32Array, sx:integer, y:Float32Array, sy:integer, m:Uint8Array, sm:integer, z:Float32Array, sz:integer, fcn:Function )"],["base.strided.smskmap2.ndarray","base.strided.smskmap2.ndarray( N:integer, x:Float32Array, sx:integer, ox:integer, y:Float32Array, sy:integer, oy:integer, m:Uint8Array, sm:integer, om:integer, z:Float32Array, sz:integer, oz:integer, fcn:Function )"],["base.strided.smskmax","base.strided.smskmax( N:integer, x:Float32Array, strideX:integer, mask:Uint8Array, strideMask:integer )"],["base.strided.smskmax.ndarray","base.strided.smskmax.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, mask:Uint8Array, strideMask:integer, offsetMask:integer )"],["base.strided.smskmin","base.strided.smskmin( N:integer, x:Float32Array, strideX:integer, mask:Uint8Array, strideMask:integer )"],["base.strided.smskmin.ndarray","base.strided.smskmin.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, mask:Uint8Array, strideMask:integer, offsetMask:integer )"],["base.strided.smskramp","base.strided.smskramp( N:integer, x:Float32Array, sx:integer, m:Uint8Array, sm:integer, y:Float32Array, sy:integer )"],["base.strided.smskramp.ndarray","base.strided.smskramp.ndarray( N:integer, x:Float32Array, sx:integer, ox:integer, m:Float32Array, sm:integer, om:integer, y:Float32Array, sy:integer, oy:integer )"],["base.strided.smskrange","base.strided.smskrange( N:integer, x:Float32Array, strideX:integer, mask:Uint8Array, strideMask:integer )"],["base.strided.smskrange.ndarray","base.strided.smskrange.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, mask:Uint8Array, strideMask:integer, offsetMask:integer )"],["base.strided.smskrsqrt","base.strided.smskrsqrt( N:integer, x:Float32Array, sx:integer, m:Uint8Array, sm:integer, y:Float32Array, sy:integer )"],["base.strided.smskrsqrt.ndarray","base.strided.smskrsqrt.ndarray( N:integer, x:Float32Array, sx:integer, ox:integer, m:Float32Array, sm:integer, om:integer, y:Float32Array, sy:integer, oy:integer )"],["base.strided.smsksqrt","base.strided.smsksqrt( N:integer, x:Float32Array, sx:integer, m:Uint8Array, sm:integer, y:Float32Array, sy:integer )"],["base.strided.smsksqrt.ndarray","base.strided.smsksqrt.ndarray( N:integer, x:Float32Array, sx:integer, ox:integer, m:Float32Array, sm:integer, om:integer, y:Float32Array, sy:integer, oy:integer )"],["base.strided.smsktrunc","base.strided.smsktrunc( N:integer, x:Float32Array, sx:integer, m:Uint8Array, sm:integer, y:Float32Array, sy:integer )"],["base.strided.smsktrunc.ndarray","base.strided.smsktrunc.ndarray( N:integer, x:Float32Array, sx:integer, ox:integer, m:Float32Array, sm:integer, om:integer, y:Float32Array, sy:integer, oy:integer )"],["base.strided.snanmax","base.strided.snanmax( N:integer, x:Float32Array, stride:integer )"],["base.strided.snanmax.ndarray","base.strided.snanmax.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.snanmaxabs","base.strided.snanmaxabs( N:integer, x:Float32Array, stride:integer )"],["base.strided.snanmaxabs.ndarray","base.strided.snanmaxabs.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.snanmean","base.strided.snanmean( N:integer, x:Float32Array, stride:integer )"],["base.strided.snanmean.ndarray","base.strided.snanmean.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.snanmeanors","base.strided.snanmeanors( N:integer, x:Float32Array, stride:integer )"],["base.strided.snanmeanors.ndarray","base.strided.snanmeanors.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.snanmeanpn","base.strided.snanmeanpn( N:integer, x:Float32Array, stride:integer )"],["base.strided.snanmeanpn.ndarray","base.strided.snanmeanpn.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.snanmeanwd","base.strided.snanmeanwd( N:integer, x:Float32Array, stride:integer )"],["base.strided.snanmeanwd.ndarray","base.strided.snanmeanwd.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.snanmin","base.strided.snanmin( N:integer, x:Float32Array, stride:integer )"],["base.strided.snanmin.ndarray","base.strided.snanmin.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.snanminabs","base.strided.snanminabs( N:integer, x:Float32Array, stride:integer )"],["base.strided.snanminabs.ndarray","base.strided.snanminabs.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.snanmskmax","base.strided.snanmskmax( N:integer, x:Float32Array, strideX:integer, mask:Uint8Array, strideMask:integer )"],["base.strided.snanmskmax.ndarray","base.strided.snanmskmax.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, mask:Uint8Array, strideMask:integer, offsetMask:integer )"],["base.strided.snanmskmin","base.strided.snanmskmin( N:integer, x:Float32Array, strideX:integer, mask:Uint8Array, strideMask:integer )"],["base.strided.snanmskmin.ndarray","base.strided.snanmskmin.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, mask:Uint8Array, strideMask:integer, offsetMask:integer )"],["base.strided.snanmskrange","base.strided.snanmskrange( N:integer, x:Float32Array, strideX:integer, mask:Uint8Array, strideMask:integer )"],["base.strided.snanmskrange.ndarray","base.strided.snanmskrange.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, mask:Uint8Array, strideMask:integer, offsetMask:integer )"],["base.strided.snanrange","base.strided.snanrange( N:integer, x:Float32Array, stride:integer )"],["base.strided.snanrange.ndarray","base.strided.snanrange.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.snanstdev","base.strided.snanstdev( N:integer, correction:number, x:Float32Array, stride:integer )"],["base.strided.snanstdev.ndarray","base.strided.snanstdev.ndarray( N:integer, correction:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.snanstdevch","base.strided.snanstdevch( N:integer, correction:number, x:Float32Array, stride:integer )"],["base.strided.snanstdevch.ndarray","base.strided.snanstdevch.ndarray( N:integer, correction:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.snanstdevpn","base.strided.snanstdevpn( N:integer, correction:number, x:Float32Array, stride:integer )"],["base.strided.snanstdevpn.ndarray","base.strided.snanstdevpn.ndarray( N:integer, correction:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.snanstdevtk","base.strided.snanstdevtk( N:integer, correction:number, x:Float32Array, stride:integer )"],["base.strided.snanstdevtk.ndarray","base.strided.snanstdevtk.ndarray( N:integer, correction:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.snanstdevwd","base.strided.snanstdevwd( N:integer, correction:number, x:Float32Array, stride:integer )"],["base.strided.snanstdevwd.ndarray","base.strided.snanstdevwd.ndarray( N:integer, correction:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.snanstdevyc","base.strided.snanstdevyc( N:integer, correction:number, x:Float32Array, stride:integer )"],["base.strided.snanstdevyc.ndarray","base.strided.snanstdevyc.ndarray( N:integer, correction:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.snansum","base.strided.snansum( N:integer, x:Float32Array, stride:integer )"],["base.strided.snansum.ndarray","base.strided.snansum.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.snansumkbn","base.strided.snansumkbn( N:integer, x:Float32Array, stride:integer )"],["base.strided.snansumkbn.ndarray","base.strided.snansumkbn.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.snansumkbn2","base.strided.snansumkbn2( N:integer, x:Float32Array, stride:integer )"],["base.strided.snansumkbn2.ndarray","base.strided.snansumkbn2.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.snansumors","base.strided.snansumors( N:integer, x:Float32Array, stride:integer )"],["base.strided.snansumors.ndarray","base.strided.snansumors.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.snansumpw","base.strided.snansumpw( N:integer, x:Float32Array, stride:integer )"],["base.strided.snansumpw.ndarray","base.strided.snansumpw.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.snanvariance","base.strided.snanvariance( N:integer, correction:number, x:Float32Array, stride:integer )"],["base.strided.snanvariance.ndarray","base.strided.snanvariance.ndarray( N:integer, correction:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.snanvariancech","base.strided.snanvariancech( N:integer, correction:number, x:Float32Array, stride:integer )"],["base.strided.snanvariancech.ndarray","base.strided.snanvariancech.ndarray( N:integer, correction:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.snanvariancepn","base.strided.snanvariancepn( N:integer, correction:number, x:Float32Array, stride:integer )"],["base.strided.snanvariancepn.ndarray","base.strided.snanvariancepn.ndarray( N:integer, correction:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.snanvariancetk","base.strided.snanvariancetk( N:integer, correction:number, x:Float32Array, stride:integer )"],["base.strided.snanvariancetk.ndarray","base.strided.snanvariancetk.ndarray( N:integer, correction:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.snanvariancewd","base.strided.snanvariancewd( N:integer, correction:number, x:Float32Array, stride:integer )"],["base.strided.snanvariancewd.ndarray","base.strided.snanvariancewd.ndarray( N:integer, correction:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.snanvarianceyc","base.strided.snanvarianceyc( N:integer, correction:number, x:Float32Array, stride:integer )"],["base.strided.snanvarianceyc.ndarray","base.strided.snanvarianceyc.ndarray( N:integer, correction:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.snrm2","base.strided.snrm2( N:integer, x:Float32Array, stride:integer )"],["base.strided.snrm2.ndarray","base.strided.snrm2.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.sramp","base.strided.sramp( N:integer, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.sramp.ndarray","base.strided.sramp.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.srange","base.strided.srange( N:integer, x:Float32Array, stride:integer )"],["base.strided.srange.ndarray","base.strided.srange.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.srev","base.strided.srev( N:integer, x:Float32Array, stride:integer )"],["base.strided.srev.ndarray","base.strided.srev.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.srsqrt","base.strided.srsqrt( N:integer, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.srsqrt.ndarray","base.strided.srsqrt.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.sscal","base.strided.sscal( N:integer, alpha:number, x:Float32Array, stride:integer )"],["base.strided.sscal.ndarray","base.strided.sscal.ndarray( N:integer, alpha:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.ssort2hp","base.strided.ssort2hp( N:integer, order:number, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.ssort2hp.ndarray","base.strided.ssort2hp.ndarray( N:integer, order:number, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.ssort2ins","base.strided.ssort2ins( N:integer, order:number, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.ssort2ins.ndarray","base.strided.ssort2ins.ndarray( N:integer, order:number, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.ssort2sh","base.strided.ssort2sh( N:integer, order:number, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.ssort2sh.ndarray","base.strided.ssort2sh.ndarray( N:integer, order:number, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.ssorthp","base.strided.ssorthp( N:integer, order:number, x:Float32Array, stride:integer )"],["base.strided.ssorthp.ndarray","base.strided.ssorthp.ndarray( N:integer, order:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.ssortins","base.strided.ssortins( N:integer, order:number, x:Float32Array, stride:integer )"],["base.strided.ssortins.ndarray","base.strided.ssortins.ndarray( N:integer, order:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.ssortsh","base.strided.ssortsh( N:integer, order:number, x:Float32Array, stride:integer )"],["base.strided.ssortsh.ndarray","base.strided.ssortsh.ndarray( N:integer, order:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.ssqrt","base.strided.ssqrt( N:integer, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.ssqrt.ndarray","base.strided.ssqrt.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.sstdev","base.strided.sstdev( N:integer, correction:number, x:Float32Array, stride:integer )"],["base.strided.sstdev.ndarray","base.strided.sstdev.ndarray( N:integer, correction:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.sstdevch","base.strided.sstdevch( N:integer, correction:number, x:Float32Array, stride:integer )"],["base.strided.sstdevch.ndarray","base.strided.sstdevch.ndarray( N:integer, correction:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.sstdevpn","base.strided.sstdevpn( N:integer, correction:number, x:Float32Array, stride:integer )"],["base.strided.sstdevpn.ndarray","base.strided.sstdevpn.ndarray( N:integer, correction:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.sstdevtk","base.strided.sstdevtk( N:integer, correction:number, x:Float32Array, stride:integer )"],["base.strided.sstdevtk.ndarray","base.strided.sstdevtk.ndarray( N:integer, correction:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.sstdevwd","base.strided.sstdevwd( N:integer, correction:number, x:Float32Array, stride:integer )"],["base.strided.sstdevwd.ndarray","base.strided.sstdevwd.ndarray( N:integer, correction:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.sstdevyc","base.strided.sstdevyc( N:integer, correction:number, x:Float32Array, stride:integer )"],["base.strided.sstdevyc.ndarray","base.strided.sstdevyc.ndarray( N:integer, correction:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.ssum","base.strided.ssum( N:integer, x:Float32Array, stride:integer )"],["base.strided.ssum.ndarray","base.strided.ssum.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.ssumkbn","base.strided.ssumkbn( N:integer, x:Float32Array, stride:integer )"],["base.strided.ssumkbn.ndarray","base.strided.ssumkbn.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.ssumkbn2","base.strided.ssumkbn2( N:integer, x:Float32Array, stride:integer )"],["base.strided.ssumkbn2.ndarray","base.strided.ssumkbn2.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.ssumors","base.strided.ssumors( N:integer, x:Float32Array, stride:integer )"],["base.strided.ssumors.ndarray","base.strided.ssumors.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.ssumpw","base.strided.ssumpw( N:integer, x:Float32Array, stride:integer )"],["base.strided.ssumpw.ndarray","base.strided.ssumpw.ndarray( N:integer, x:Float32Array, stride:integer, offset:integer )"],["base.strided.sswap","base.strided.sswap( N:integer, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.sswap.ndarray","base.strided.sswap.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.stdev","base.strided.stdev( N:integer, correction:number, x:Array|TypedArray, stride:integer )"],["base.strided.stdev.ndarray","base.strided.stdev.ndarray( N:integer, correction:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.stdevch","base.strided.stdevch( N:integer, correction:number, x:Array|TypedArray, stride:integer )"],["base.strided.stdevch.ndarray","base.strided.stdevch.ndarray( N:integer, correction:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.stdevpn","base.strided.stdevpn( N:integer, correction:number, x:Array|TypedArray, stride:integer )"],["base.strided.stdevpn.ndarray","base.strided.stdevpn.ndarray( N:integer, correction:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.stdevtk","base.strided.stdevtk( N:integer, correction:number, x:Array|TypedArray, stride:integer )"],["base.strided.stdevtk.ndarray","base.strided.stdevtk.ndarray( N:integer, correction:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.stdevwd","base.strided.stdevwd( N:integer, correction:number, x:Array|TypedArray, stride:integer )"],["base.strided.stdevwd.ndarray","base.strided.stdevwd.ndarray( N:integer, correction:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.stdevyc","base.strided.stdevyc( N:integer, correction:number, x:Array|TypedArray, stride:integer )"],["base.strided.stdevyc.ndarray","base.strided.stdevyc.ndarray( N:integer, correction:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.strunc","base.strided.strunc( N:integer, x:Float32Array, strideX:integer, y:Float32Array, strideY:integer )"],["base.strided.strunc.ndarray","base.strided.strunc.ndarray( N:integer, x:Float32Array, strideX:integer, offsetX:integer, y:Float32Array, strideY:integer, offsetY:integer )"],["base.strided.svariance","base.strided.svariance( N:integer, correction:number, x:Float32Array, stride:integer )"],["base.strided.svariance.ndarray","base.strided.svariance.ndarray( N:integer, correction:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.svariancech","base.strided.svariancech( N:integer, correction:number, x:Float32Array, stride:integer )"],["base.strided.svariancech.ndarray","base.strided.svariancech.ndarray( N:integer, correction:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.svariancepn","base.strided.svariancepn( N:integer, correction:number, x:Float32Array, stride:integer )"],["base.strided.svariancepn.ndarray","base.strided.svariancepn.ndarray( N:integer, correction:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.svariancetk","base.strided.svariancetk( N:integer, correction:number, x:Float32Array, stride:integer )"],["base.strided.svariancetk.ndarray","base.strided.svariancetk.ndarray( N:integer, correction:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.svariancewd","base.strided.svariancewd( N:integer, correction:number, x:Float32Array, stride:integer )"],["base.strided.svariancewd.ndarray","base.strided.svariancewd.ndarray( N:integer, correction:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.svarianceyc","base.strided.svarianceyc( N:integer, correction:number, x:Float32Array, stride:integer )"],["base.strided.svarianceyc.ndarray","base.strided.svarianceyc.ndarray( N:integer, correction:number, x:Float32Array, stride:integer, offset:integer )"],["base.strided.ternary","base.strided.ternary( arrays:ArrayLikeObject<ArrayLikeObject>, shape:ArrayLikeObject<integer>, strides:ArrayLikeObject<integer>, fcn:Function )"],["base.strided.ternary.ndarray","base.strided.ternary.ndarray( arrays:ArrayLikeObject<ArrayLikeObject>, shape:ArrayLikeObject<integer>, strides:ArrayLikeObject<integer>, offsets:ArrayLikeObject<integer>, fcn:Function )"],["base.strided.unary","base.strided.unary( arrays:ArrayLikeObject<ArrayLikeObject>, shape:ArrayLikeObject<integer>, strides:ArrayLikeObject<integer>, fcn:Function )"],["base.strided.unary.ndarray","base.strided.unary.ndarray( arrays:ArrayLikeObject<ArrayLikeObject>, shape:ArrayLikeObject<integer>, strides:ArrayLikeObject<integer>, offsets:ArrayLikeObject<integer>, fcn:Function )"],["base.strided.unaryBy","base.strided.unaryBy( arrays:ArrayLikeObject<ArrayLikeObject>, shape:ArrayLikeObject<integer>, strides:ArrayLikeObject<integer>, fcn:Function, clbk:Function[, thisArg:any] )"],["base.strided.unaryBy.ndarray","base.strided.unaryBy.ndarray( arrays:ArrayLikeObject<ArrayLikeObject>, shape:ArrayLikeObject<integer>, strides:ArrayLikeObject<integer>, offsets:ArrayLikeObject<integer>, fcn:Function, clbk:Function[, thisArg:any] )"],["base.strided.unaryDtypeSignatures","base.strided.unaryDtypeSignatures( dtypes1:ArrayLike<any>, dtypes2:ArrayLike<any>[, options:Object] )"],["base.strided.unarySignatureCallbacks","base.strided.unarySignatureCallbacks( table:Object, signatures:ArrayLike<any> )"],["base.strided.variance","base.strided.variance( N:integer, correction:number, x:Array|TypedArray, stride:integer )"],["base.strided.variance.ndarray","base.strided.variance.ndarray( N:integer, correction:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.variancech","base.strided.variancech( N:integer, correction:number, x:Array|TypedArray, stride:integer )"],["base.strided.variancech.ndarray","base.strided.variancech.ndarray( N:integer, correction:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.variancepn","base.strided.variancepn( N:integer, correction:number, x:Array|TypedArray, stride:integer )"],["base.strided.variancepn.ndarray","base.strided.variancepn.ndarray( N:integer, correction:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.variancetk","base.strided.variancetk( N:integer, correction:number, x:Array|TypedArray, stride:integer )"],["base.strided.variancetk.ndarray","base.strided.variancetk.ndarray( N:integer, correction:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.variancewd","base.strided.variancewd( N:integer, correction:number, x:Array|TypedArray, stride:integer )"],["base.strided.variancewd.ndarray","base.strided.variancewd.ndarray( N:integer, correction:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.varianceyc","base.strided.varianceyc( N:integer, correction:number, x:Array|TypedArray, stride:integer )"],["base.strided.varianceyc.ndarray","base.strided.varianceyc.ndarray( N:integer, correction:number, x:Array|TypedArray, stride:integer, offset:integer )"],["base.strided.zmap","base.strided.zmap( N:integer, x:Complex128Array, strideX:integer, y:Complex128Array, strideY:integer, fcn:Function )"],["base.strided.zmap.ndarray","base.strided.zmap.ndarray( N:integer, x:Complex128Array, strideX:integer, offsetX:integer, y:Complex128Array, strideY:integer, offsetY:integer, fcn:Function )"],["base.str2multislice","base.str2multislice( str:string )"],["base.str2slice","base.str2slice( str:string )"],["base.sub","base.sub( x:number, y:number )"],["base.subf","base.subf( x:number, y:number )"],["base.sumSeries","base.sumSeries( generator:Function[, options:Object] )"],["base.tan","base.tan( x:number )"],["base.tand","base.tand( x:number )"],["base.tanh","base.tanh( x:number )"],["base.toBinaryString","base.toBinaryString( x:number )"],["base.toBinaryStringf","base.toBinaryStringf( x:float )"],["base.toBinaryStringUint8","base.toBinaryStringUint8( x:integer )"],["base.toBinaryStringUint16","base.toBinaryStringUint16( x:integer )"],["base.toBinaryStringUint32","base.toBinaryStringUint32( x:integer )"],["base.toWordf","base.toWordf( x:float )"],["base.toWords","base.toWords( x:number )"],["base.toWords.assign","base.toWords.assign( x:number, out:Array|TypedArray|Object, stride:integer, offset:integer )"],["base.transpose","base.transpose( x:ndarray )"],["base.tribonacci","base.tribonacci( n:integer )"],["base.trigamma","base.trigamma( x:number )"],["base.trim","base.trim( str:string )"],["base.trunc","base.trunc( x:number )"],["base.trunc2","base.trunc2( x:number )"],["base.trunc10","base.trunc10( x:number )"],["base.truncateMiddle","base.truncateMiddle( str:string, len:integer, seq:string )"],["base.truncb","base.truncb( x:number, n:integer, b:integer )"],["base.truncf","base.truncf( x:number )"],["base.truncn","base.truncn( x:number, n:integer )"],["base.truncsd","base.truncsd( x:number, n:integer[, b:integer] )"],["base.uint32ToInt32","base.uint32ToInt32( x:integer )"],["base.umul","base.umul( a:integer, b:integer )"],["base.umuldw","base.umuldw( a:integer, b:integer )"],["base.umuldw.assign","base.umuldw.assign( a:integer, b:integer, out:Array|TypedArray|Object, stride:integer, offset:integer )"],["base.uncapitalize","base.uncapitalize( str:string )"],["base.uppercase","base.uppercase( str:string )"],["base.vercos","base.vercos( x:number )"],["base.versin","base.versin( x:number )"],["base.wrap","base.wrap( v:number, min:number, max:number )"],["base.xlog1py","base.xlog1py( x:number, y:number )"],["base.xlogy","base.xlogy( x:number, y:number )"],["base.zeta","base.zeta( s:number )"],["BERNDT_CPS_WAGES_1985","BERNDT_CPS_WAGES_1985()"],["bifurcate","bifurcate( collection:Array|TypedArray|Object, [options:Object,] filter:Array|TypedArray|Object )"],["bifurcateBy","bifurcateBy( collection:Array|TypedArray|Object, [options:Object,] predicate:Function )"],["bifurcateByAsync","bifurcateByAsync( collection:Array|TypedArray|Object, [options:Object,] predicate:Function, done:Function )"],["bifurcateByAsync.factory","bifurcateByAsync.factory( [options:Object,] predicate:Function )"],["bifurcateIn","bifurcateIn( obj:Object|Array|TypedArray, [options:Object,] predicate:Function )"],["bifurcateOwn","bifurcateOwn( obj:Object|Array|TypedArray, [options:Object,] predicate:Function )"],["BigInt","BigInt( value:integer|string )"],["binomialTest","binomialTest( x:(number|Array[, n:Array<number>][, options:Object] )"],["Boolean","Boolean( value:any )"],["Boolean.prototype.toString","Boolean.prototype.toString()"],["Boolean.prototype.valueOf","Boolean.prototype.valueOf()"],["BooleanArray","BooleanArray()"],["BooleanArray","BooleanArray( length:integer )"],["BooleanArray","BooleanArray( booleanarray:BooleanArray )"],["BooleanArray","BooleanArray( typedarray:TypedArray )"],["BooleanArray","BooleanArray( obj:Object )"],["BooleanArray","BooleanArray( buffer:ArrayBuffer[, byteOffset:integer[, length:integer]] )"],["BooleanArray.from","BooleanArray.from( src:ArrayLike|Iterable[, clbk:Function[, thisArg:Any]] )"],["BooleanArray.of","BooleanArray.of( element0:bool[, element1:bool[, ...elementN:bool]] )"],["BooleanArray.BYTES_PER_ELEMENT","BooleanArray.BYTES_PER_ELEMENT"],["BooleanArray.name","BooleanArray.name"],["BooleanArray.prototype.buffer","BooleanArray.prototype.buffer"],["BooleanArray.prototype.byteLength","BooleanArray.prototype.byteLength"],["BooleanArray.prototype.byteOffset","BooleanArray.prototype.byteOffset"],["BooleanArray.prototype.BYTES_PER_ELEMENT","BooleanArray.prototype.BYTES_PER_ELEMENT"],["BooleanArray.prototype.length","BooleanArray.prototype.length"],["BooleanArray.prototype.every","BooleanArray.prototype.every( predicate:Function[, thisArg:Any] )"],["BooleanArray.prototype.find","BooleanArray.prototype.find( predicate:Function[, thisArg:Any] )"],["BooleanArray.prototype.findIndex","BooleanArray.prototype.findIndex( predicate:Function[, thisArg:Any] )"],["BooleanArray.prototype.findLast","BooleanArray.prototype.findLast( predicate:Function[, thisArg:Any] )"],["BooleanArray.prototype.findLastIndex","BooleanArray.prototype.findLastIndex( predicate:Function[, thisArg:Any] )"],["BooleanArray.prototype.get","BooleanArray.prototype.get( i:integer )"],["BooleanArray.prototype.indexOf","BooleanArray.prototype.indexOf( searchElement:boolean[, fromIndex:integer] )"],["BooleanArray.prototype.lastIndexOf","BooleanArray.prototype.lastIndexOf( searchElement:boolean[, fromIndex:integer] )"],["BooleanArray.prototype.map","BooleanArray.prototype.map( clbk:Function[, thisArg:Any] )"],["BooleanArray.prototype.reverse","BooleanArray.prototype.reverse()"],["BooleanArray.prototype.set","BooleanArray.prototype.set( v:bool|BooleanArray|ArrayLikeObject[, i:integer] )"],["BooleanArray.prototype.some","BooleanArray.prototype.some( predicate:Function[, thisArg:Any] )"],["BooleanArray.prototype.sort","BooleanArray.prototype.sort( [compareFunction:Function] )"],["BooleanArray.prototype.toReversed","BooleanArray.prototype.toReversed()"],["BooleanArray.prototype.toSorted","BooleanArray.prototype.toSorted( [compareFunction:Function] )"],["broadcastArray","broadcastArray( x:ndarray, shape:ArrayLikeObject )"],["broadcastArrays","broadcastArrays( ...arrays:ndarray|ArrayLikeObject<ndarray> )"],["Buffer","Buffer"],["Buffer","Buffer( size:integer )"],["Buffer","Buffer( buffer:Buffer )"],["Buffer","Buffer( array:Array )"],["Buffer","Buffer( str:string[, encoding:string] )"],["buffer2json","buffer2json( buffer:Buffer )"],["BYTE_ORDER","BYTE_ORDER"],["camelcase","camelcase( str:string )"],["capitalize","capitalize( str:string )"],["capitalizeKeys","capitalizeKeys( obj:Object )"],["CATALAN","CATALAN"],["CBRT_EPS","CBRT_EPS"],["CDC_NCHS_US_BIRTHS_1969_1988","CDC_NCHS_US_BIRTHS_1969_1988()"],["CDC_NCHS_US_BIRTHS_1994_2003","CDC_NCHS_US_BIRTHS_1994_2003()"],["CDC_NCHS_US_INFANT_MORTALITY_BW_1915_2013","CDC_NCHS_US_INFANT_MORTALITY_BW_1915_2013()"],["chdir","chdir( path:string )"],["chi2gof","chi2gof( x:ndarray|Array|TypedArray, y:ndarray|Array|TypedArray|string[, ...args:number][, options:Object] )"],["chi2test","chi2test( x:ndarray|Array[, options:Object] )"],["circarray2iterator","circarray2iterator( src:ArrayLikeObject[, options:Object][, mapFcn:Function[, thisArg:any]] )"],["circularArrayStream","circularArrayStream( src:ArrayLikeObject[, options:Object] )"],["circularArrayStream.factory","circularArrayStream.factory( [options:Object] )"],["circularArrayStream.objectMode","circularArrayStream.objectMode( src:ArrayLikeObject[, options:Object] )"],["CircularBuffer","CircularBuffer( buffer:integer|ArrayLike )"],["CircularBuffer.prototype.clear","CircularBuffer.prototype.clear()"],["CircularBuffer.prototype.count","CircularBuffer.prototype.count"],["CircularBuffer.prototype.full","CircularBuffer.prototype.full"],["CircularBuffer.prototype.iterator","CircularBuffer.prototype.iterator( [niters:integer] )"],["CircularBuffer.prototype.length","CircularBuffer.prototype.length"],["CircularBuffer.prototype.push","CircularBuffer.prototype.push( value:any )"],["CircularBuffer.prototype.toArray","CircularBuffer.prototype.toArray()"],["CircularBuffer.prototype.toJSON","CircularBuffer.prototype.toJSON()"],["close","close( fd:integer, clbk:Function )"],["close.sync","close.sync( fd:integer )"],["CMUDICT","CMUDICT( [options:Object] )"],["codePointAt","codePointAt( str:string, idx:integer[, backward:boolean] )"],["commonKeys","commonKeys( obj1:any, obj2:any[, ...obj:any] )"],["commonKeysIn","commonKeysIn( obj1:any, obj2:any[, ...obj:any] )"],["complex","complex( real:number, imag:number[, dtype:string] )"],["Complex64","Complex64( real:number, imag:number )"],["Complex64.BYTES_PER_ELEMENT","Complex64.BYTES_PER_ELEMENT"],["Complex64.prototype.BYTES_PER_ELEMENT","Complex64.prototype.BYTES_PER_ELEMENT"],["Complex64.prototype.byteLength","Complex64.prototype.byteLength"],["COMPLEX64_NAN","COMPLEX64_NAN"],["COMPLEX64_NUM_BYTES","COMPLEX64_NUM_BYTES"],["COMPLEX64_ZERO","COMPLEX64_ZERO"],["Complex64Array","Complex64Array()"],["Complex64Array","Complex64Array( length:integer )"],["Complex64Array","Complex64Array( complexarray:Complex64Array )"],["Complex64Array","Complex64Array( typedarray:TypedArray )"],["Complex64Array","Complex64Array( obj:Object )"],["Complex64Array","Complex64Array( buffer:ArrayBuffer[, byteOffset:integer[, length:integer]] )"],["Complex64Array.from","Complex64Array.from( src:ArrayLike|Iterable[, clbk:Function[, thisArg:Any]] )"],["Complex64Array.of","Complex64Array.of( element0:number[, element1:number[, ...elementN:number]] )"],["Complex64Array.BYTES_PER_ELEMENT","Complex64Array.BYTES_PER_ELEMENT"],["Complex64Array.name","Complex64Array.name"],["Complex64Array.prototype.buffer","Complex64Array.prototype.buffer"],["Complex64Array.prototype.byteLength","Complex64Array.prototype.byteLength"],["Complex64Array.prototype.byteOffset","Complex64Array.prototype.byteOffset"],["Complex64Array.prototype.BYTES_PER_ELEMENT","Complex64Array.prototype.BYTES_PER_ELEMENT"],["Complex64Array.prototype.length","Complex64Array.prototype.length"],["Complex64Array.prototype.at","Complex64Array.prototype.at( i:integer )"],["Complex64Array.prototype.copyWithin","Complex64Array.prototype.copyWithin( target, start[, end] )"],["Complex64Array.prototype.entries","Complex64Array.prototype.entries()"],["Complex64Array.prototype.every","Complex64Array.prototype.every( predicate:Function[, thisArg:Any] )"],["Complex64Array.prototype.fill","Complex64Array.prototype.fill( value:Complex64[, start:integer[, end:integer]] )"],["Complex64Array.prototype.filter","Complex64Array.prototype.filter( predicate:Function[, thisArg:Any] )"],["Complex64Array.prototype.find","Complex64Array.prototype.find( predicate:Function[, thisArg:Any] )"],["Complex64Array.prototype.findIndex","Complex64Array.prototype.findIndex( predicate:Function[, thisArg:Any] )"],["Complex64Array.prototype.findLast","Complex64Array.prototype.findLast( predicate:Function[, thisArg:Any] )"],["Complex64Array.prototype.findLastIndex","Complex64Array.prototype.findLastIndex( predicate:Function[, thisArg:Any] )"],["Complex64Array.prototype.forEach","Complex64Array.prototype.forEach( clbk:Function[, thisArg:Any] )"],["Complex64Array.prototype.get","Complex64Array.prototype.get( i:integer )"],["Complex64Array.prototype.includes","Complex64Array.prototype.includes( searchElement:Complex64[, fromIndex:integer] )"],["Complex64Array.prototype.indexOf","Complex64Array.prototype.indexOf( searchElement:Complex64[, fromIndex:integer] )"],["Complex64Array.prototype.join","Complex64Array.prototype.join( [separator:string] )"],["Complex64Array.prototype.keys","Complex64Array.prototype.keys()"],["Complex64Array.prototype.lastIndexOf","Complex64Array.prototype.lastIndexOf( searchElement:Complex64[, fromIndex:integer] )"],["Complex64Array.prototype.map","Complex64Array.prototype.map( clbk:Function[, thisArg:Any] )"],["Complex64Array.prototype.reduce","Complex64Array.prototype.reduce( reducerFn:Function[, initialValue:any] )"],["Complex64Array.prototype.reduceRight","Complex64Array.prototype.reduceRight( reducerFn:Function[, initialValue:any] )"],["Complex64Array.prototype.reverse","Complex64Array.prototype.reverse()"],["Complex64Array.prototype.set","Complex64Array.prototype.set( z:Complex64|Complex64Array|ArrayLikeObject[, i:integer] )"],["Complex64Array.prototype.slice","Complex64Array.prototype.slice( [start:integer[, end:integer]] )"],["Complex64Array.prototype.some","Complex64Array.prototype.some( predicate[, thisArg] )"],["Complex64Array.prototype.sort","Complex64Array.prototype.sort( compareFunction:Function )"],["Complex64Array.prototype.subarray","Complex64Array.prototype.subarray( [begin:integer[, end:integer]] )"],["Complex64Array.prototype.toLocaleString","Complex64Array.prototype.toLocaleString( [locales[, options]] )"],["Complex64Array.prototype.toReversed","Complex64Array.prototype.toReversed()"],["Complex64Array.prototype.toSorted","Complex64Array.prototype.toSorted( compareFcn:Function )"],["Complex64Array.prototype.toString","Complex64Array.prototype.toString()"],["Complex64Array.prototype.values","Complex64Array.prototype.values()"],["Complex64Array.prototype.with","Complex64Array.prototype.with( index, value )"],["Complex128","Complex128( real:number, imag:number )"],["Complex128.BYTES_PER_ELEMENT","Complex128.BYTES_PER_ELEMENT"],["Complex128.prototype.BYTES_PER_ELEMENT","Complex128.prototype.BYTES_PER_ELEMENT"],["Complex128.prototype.byteLength","Complex128.prototype.byteLength"],["COMPLEX128_NAN","COMPLEX128_NAN"],["COMPLEX128_NUM_BYTES","COMPLEX128_NUM_BYTES"],["COMPLEX128_ZERO","COMPLEX128_ZERO"],["Complex128Array","Complex128Array()"],["Complex128Array","Complex128Array( length:integer )"],["Complex128Array","Complex128Array( complexarray:Complex128Array )"],["Complex128Array","Complex128Array( typedarray:TypedArray )"],["Complex128Array","Complex128Array( obj:Object )"],["Complex128Array","Complex128Array( buffer:ArrayBuffer[, byteOffset:integer[, length:integer]] )"],["Complex128Array.from","Complex128Array.from( src:ArrayLike|Iterable[, clbk:Function[, thisArg:Any]] )"],["Complex128Array.of","Complex128Array.of( element0:number|ComplexLike[, element1:number |ComplexLike[, ...elementN:number|ComplexLike]] )"],["Complex128Array.BYTES_PER_ELEMENT","Complex128Array.BYTES_PER_ELEMENT"],["Complex128Array.name","Complex128Array.name"],["Complex128Array.prototype.buffer","Complex128Array.prototype.buffer"],["Complex128Array.prototype.byteLength","Complex128Array.prototype.byteLength"],["Complex128Array.prototype.byteOffset","Complex128Array.prototype.byteOffset"],["Complex128Array.prototype.BYTES_PER_ELEMENT","Complex128Array.prototype.BYTES_PER_ELEMENT"],["Complex128Array.prototype.length","Complex128Array.prototype.length"],["Complex128Array.prototype.at","Complex128Array.prototype.at( i:integer )"],["Complex128Array.prototype.copyWithin","Complex128Array.prototype.copyWithin( target, start[, end] )"],["Complex128Array.prototype.entries","Complex128Array.prototype.entries()"],["Complex128Array.prototype.every","Complex128Array.prototype.every( predicate:Function[, thisArg:Any] )"],["Complex128Array.prototype.fill","Complex128Array.prototype.fill( value:Complex128[, start:integer[, end:integer]] )"],["Complex128Array.prototype.filter","Complex128Array.prototype.filter( predicate:Function[, thisArg:Any] )"],["Complex128Array.prototype.find","Complex128Array.prototype.find( predicate:Function[, thisArg:Any] )"],["Complex128Array.prototype.findIndex","Complex128Array.prototype.findIndex( predicate:Function[, thisArg:Any] )"],["Complex128Array.prototype.findLast","Complex128Array.prototype.findLast( predicate:Function[, thisArg:Any] )"],["Complex128Array.prototype.findLastIndex","Complex128Array.prototype.findLastIndex( predicate:Function[, thisArg:Any] )"],["Complex128Array.prototype.forEach","Complex128Array.prototype.forEach( clbk:Function[, thisArg:Any] )"],["Complex128Array.prototype.get","Complex128Array.prototype.get( i:integer )"],["Complex128Array.prototype.includes","Complex128Array.prototype.includes( searchElement:Complex128[, fromIndex:integer] )"],["Complex128Array.prototype.indexOf","Complex128Array.prototype.indexOf( searchElement:Complex128[, fromIndex:integer] )"],["Complex128Array.prototype.join","Complex128Array.prototype.join( [separator:string] )"],["Complex128Array.prototype.keys","Complex128Array.prototype.keys()"],["Complex128Array.prototype.lastIndexOf","Complex128Array.prototype.lastIndexOf( searchElement:Complex128[, fromIndex:integer] )"],["Complex128Array.prototype.map","Complex128Array.prototype.map( clbk:Function[, thisArg:Any] )"],["Complex128Array.prototype.reduce","Complex128Array.prototype.reduce( reducerFn:Function[, initialValue:any] )"],["Complex128Array.prototype.reduceRight","Complex128Array.prototype.reduceRight( reducerFn:Function[, initialValue:any] )"],["Complex128Array.prototype.reverse","Complex128Array.prototype.reverse()"],["Complex128Array.prototype.set","Complex128Array.prototype.set( z:Complex128|Complex128Array|ArrayLikeObject[, i:integer] )"],["Complex128Array.prototype.slice","Complex128Array.prototype.slice( [start:integer[, end:integer]] )"],["Complex128Array.prototype.some","Complex128Array.prototype.some( predicate[, thisArg] )"],["Complex128Array.prototype.sort","Complex128Array.prototype.sort( compareFunction:Function )"],["Complex128Array.prototype.subarray","Complex128Array.prototype.subarray( [begin:integer[, end:integer]] )"],["Complex128Array.prototype.toLocaleString","Complex128Array.prototype.toLocaleString( [locales[, options]] )"],["Complex128Array.prototype.toReversed","Complex128Array.prototype.toReversed()"],["Complex128Array.prototype.toSorted","Complex128Array.prototype.toSorted( compareFcn:Function )"],["Complex128Array.prototype.toString","Complex128Array.prototype.toString()"],["Complex128Array.prototype.values","Complex128Array.prototype.values()"],["Complex128Array.prototype.with","Complex128Array.prototype.with( index, value )"],["complexarray","complexarray( [dtype:string] )"],["complexarray","complexarray( length:integer[, dtype:string] )"],["complexarray","complexarray( complexarray:ComplexArray[, dtype:string] )"],["complexarray","complexarray( obj:Object[, dtype:string] )"],["complexarray","complexarray( buffer:ArrayBuffer[, byteOffset:integer[, length:integer]][, dtype:string] )"],["complexarrayCtors","complexarrayCtors( dtype:string )"],["complexarrayDataTypes","complexarrayDataTypes()"],["complexCtors","complexCtors( dtype:string )"],["complexDataType","complexDataType( value:any )"],["complexDataTypes","complexDataTypes()"],["complexPromotionRules","complexPromotionRules( [dtype1:string, dtype2:string] )"],["compose","compose( ...f:Function )"],["composeAsync","composeAsync( ...f:Function )"],["configdir","configdir( [p:string] )"],["conj","conj( z:Complex128 )"],["conjf","conjf( z:Complex64 )"],["constantcase","constantcase( str:string )"],["constantFunction","constantFunction( val:any )"],["constantStream","constantStream( value:string|Buffer|Uint8Array|any[, options:Object] )"],["constantStream.factory","constantStream.factory( [value:string|Buffer|Uint8Array|any, ][options:Object] )"],["constantStream.objectMode","constantStream.objectMode( value:any[, options:Object] )"],["constructorName","constructorName( val:any )"],["contains","contains( val:ArrayLike, searchValue:any[, position:integer] )"],["convertArray","convertArray( arr:ArrayLikeObject, dtype:string )"],["convertArraySame","convertArraySame( x:ArrayLikeObject, y:Array|TypedArray )"],["convertPath","convertPath( from:string, to:string )"],["copy","copy( value:any[, level:integer] )"],["copyBuffer","copyBuffer( buffer:Buffer )"],["countBy","countBy( collection:Array|TypedArray|Object, [options:Object,] indicator:Function )"],["countByAsync","countByAsync( collection:Array|TypedArray|Object, [options:Object,] indicator:Function, done:Function )"],["countByAsync.factory","countByAsync.factory( [options:Object,] indicator:Function )"],["currentYear","currentYear()"],["curry","curry( fcn:Function[, arity:integer][, thisArg:any] )"],["curryRight","curryRight( fcn:Function[, arity:integer][, thisArg:any] )"],["cwd","cwd()"],["DALE_CHALL_NEW","DALE_CHALL_NEW()"],["datasets","datasets( name:string[, options:Object] )"],["DataView","DataView( buffer:ArrayBuffer|SharedArrayBuffer[, byteOffset:integer[, byteLength:integer]] )"],["DataView.prototype.buffer","DataView.prototype.buffer"],["DataView.prototype.byteLength","DataView.prototype.byteLength"],["DataView.prototype.byteOffset","DataView.prototype.byteOffset"],["datespace","datespace( start:number, stop:number[, length:integer][ , options:Object] )"],["dayOfQuarter","dayOfQuarter( [month:string|integer|Date[, day:integer, year:integer]] )"],["dayOfYear","dayOfYear( [month:string|integer|Date[, day:integer, year:integer]] )"],["daysInMonth","daysInMonth( [month:string|integer|Date[, year:integer]] )"],["daysInYear","daysInYear( [value:integer|Date] )"],["ddot","ddot( x:ndarray, y:ndarray )"],["debugSinkStream","debugSinkStream( [options:Object,] [clbk:Function] )"],["debugSinkStream.factory","debugSinkStream.factory( [options:Object] )"],["debugSinkStream.objectMode","debugSinkStream.objectMode( [options:Object,] [clbk:Function] )"],["debugStream","debugStream( [options:Object,] [clbk:Function] )"],["debugStream.factory","debugStream.factory( [options:Object] )"],["debugStream.objectMode","debugStream.objectMode( [options:Object,] [clbk:Function] )"],["decorateAfter","decorateAfter( fcn:Function, arity:integer, after:Function[, thisArg:any] )"],["decorateAfter.factory","decorateAfter.factory( fcn:Function, arity:integer, after:Function[, thisArg:any] )"],["deepEqual","deepEqual( a:any, b:any )"],["deepGet","deepGet( obj:ObjectLike, path:string|Array[, options:Object] )"],["deepGet.factory","deepGet.factory( path:string|Array[, options:Object] )"],["deepHasOwnProp","deepHasOwnProp( value:any, path:string|Array[, options:Object] )"],["deepHasOwnProp.factory","deepHasOwnProp.factory( path:string|Array[, options:Object] )"],["deepHasProp","deepHasProp( value:any, path:string|Array[, options:Object] )"],["deepHasProp.factory","deepHasProp.factory( path:string|Array[, options:Object] )"],["deepPluck","deepPluck( arr:Array, path:string|Array[, options:Object] )"],["deepSet","deepSet( obj:ObjectLike, path:string|Array, value:any[, options:Object] )"],["deepSet.factory","deepSet.factory( path:string|Array[, options:Object] )"],["defineMemoizedProperty","defineMemoizedProperty( obj:Object, prop:string|symbol, descriptor:Object )"],["defineProperties","defineProperties( obj:Object, properties:Object )"],["defineProperty","defineProperty( obj:Object, prop:string|symbol, descriptor:Object )"],["dirname","dirname( path:string )"],["dotcase","dotcase( str:string )"],["DoublyLinkedList","DoublyLinkedList()"],["doUntil","doUntil( fcn:Function, predicate:Function[, thisArg:any] )"],["doUntilAsync","doUntilAsync( fcn:Function, predicate:Function, done:Function[, thisArg:any] )"],["doUntilEach","doUntilEach( collection:Array|TypedArray|Object, fcn:Function, predicate:Function[, thisArg:any] )"],["doUntilEachRight","doUntilEachRight( collection:Array|TypedArray|Object, fcn:Function, predicate:Function[, thisArg:any] )"],["doWhile","doWhile( fcn:Function, predicate:Function[, thisArg:any] )"],["doWhileAsync","doWhileAsync( fcn:Function, predicate:Function, done:Function[, thisArg:any] )"],["doWhileEach","doWhileEach( collection:Array|TypedArray|Object, fcn:Function, predicate:Function[, thisArg:any] )"],["doWhileEachRight","doWhileEachRight( collection:Array|TypedArray|Object, fcn:Function, predicate:Function[, thisArg:any] )"],["dswap","dswap( x:ndarray, y:ndarray )"],["E","E"],["EMOJI","EMOJI()"],["EMOJI_CODE_PICTO","EMOJI_CODE_PICTO()"],["EMOJI_PICTO_CODE","EMOJI_PICTO_CODE()"],["emptyStream","emptyStream( [options:Object] )"],["emptyStream.factory","emptyStream.factory( [options:Object] )"],["emptyStream.objectMode","emptyStream.objectMode()"],["endsWith","endsWith( str:string, search:string[, len:integer] )"],["enumerableProperties","enumerableProperties( value:any )"],["enumerablePropertiesIn","enumerablePropertiesIn( value:any )"],["enumerablePropertySymbols","enumerablePropertySymbols( value:any )"],["enumerablePropertySymbolsIn","enumerablePropertySymbolsIn( value:any )"],["ENV","ENV"],["EPS","EPS"],["error2json","error2json( error:Error )"],["EULERGAMMA","EULERGAMMA"],["every","every( collection:Array|TypedArray|Object )"],["everyBy","everyBy( collection:Array|TypedArray|Object, predicate:Function[, thisArg:any ] )"],["everyByAsync","everyByAsync( collection:Array|TypedArray|Object, [options:Object,] predicate:Function, done:Function )"],["everyByAsync.factory","everyByAsync.factory( [options:Object,] predicate:Function )"],["everyByRight","everyByRight( collection:Array|TypedArray|Object, predicate:Function[, thisArg:any ] )"],["everyByRightAsync","everyByRightAsync( collection:Array|TypedArray|Object, [options:Object,] predicate:Function, done:Function )"],["everyByRightAsync.factory","everyByRightAsync.factory( [options:Object,] predicate:Function )"],["everyInBy","everyInBy( object:Object, predicate:Function[, thisArg:any ] )"],["everyOwnBy","everyOwnBy( object:Object, predicate:Function[, thisArg:any ] )"],["evil","evil( str:string )"],["EXEC_PATH","EXEC_PATH"],["exists","exists( path:string|Buffer, clbk:Function )"],["exists.sync","exists.sync( path:string|Buffer )"],["expandAcronyms","expandAcronyms( str:string )"],["expandContractions","expandContractions( str:string )"],["extname","extname( filename:string )"],["FancyArray","FancyArray( dtype:string, buffer:ArrayLikeObject|TypedArray|Buffer, shape:ArrayLikeObject<integer>, strides:ArrayLikeObject<integer>, offset:integer, order:string[, options:Object] )"],["FancyArray.prototype.byteLength","FancyArray.prototype.byteLength"],["FancyArray.prototype.BYTES_PER_ELEMENT","FancyArray.prototype.BYTES_PER_ELEMENT"],["FancyArray.prototype.data","FancyArray.prototype.data"],["FancyArray.prototype.dtype","FancyArray.prototype.dtype"],["FancyArray.prototype.flags","FancyArray.prototype.flags"],["FancyArray.prototype.length","FancyArray.prototype.length"],["FancyArray.prototype.ndims","FancyArray.prototype.ndims"],["FancyArray.prototype.offset","FancyArray.prototype.offset"],["FancyArray.prototype.order","FancyArray.prototype.order"],["FancyArray.prototype.shape","FancyArray.prototype.shape"],["FancyArray.prototype.strides","FancyArray.prototype.strides"],["FancyArray.prototype.get","FancyArray.prototype.get( ...idx:integer )"],["FancyArray.prototype.iget","FancyArray.prototype.iget( idx:integer )"],["FancyArray.prototype.set","FancyArray.prototype.set( ...idx:integer, v:any )"],["FancyArray.prototype.iset","FancyArray.prototype.iset( idx:integer, v:any )"],["FancyArray.prototype.toString","FancyArray.prototype.toString()"],["FancyArray.prototype.toJSON","FancyArray.prototype.toJSON()"],["fastmath.abs","fastmath.abs( x:number )"],["fastmath.acosh","fastmath.acosh( x:number )"],["fastmath.ampbm","fastmath.ampbm( x:number, y:number )"],["fastmath.ampbm.factory","fastmath.ampbm.factory( alpha:number, beta:number, [nonnegative:boolean[, ints:boolean]] )"],["fastmath.asinh","fastmath.asinh( x:number )"],["fastmath.atanh","fastmath.atanh( x:number )"],["fastmath.hypot","fastmath.hypot( x:number, y:number )"],["fastmath.log2Uint32","fastmath.log2Uint32( x:uinteger )"],["fastmath.max","fastmath.max( x:number, y:number )"],["fastmath.min","fastmath.min( x:number, y:number )"],["fastmath.powint","fastmath.powint( x:number, y:integer )"],["fastmath.sqrtUint32","fastmath.sqrtUint32( x:uinteger )"],["FEMALE_FIRST_NAMES_EN","FEMALE_FIRST_NAMES_EN()"],["FIFO","FIFO()"],["filledarray","filledarray( [dtype:string] )"],["filledarray","filledarray( value:any, length:integer[, dtype:string] )"],["filledarray","filledarray( value:any, array:ArrayLikeObject[, dtype:string] )"],["filledarray","filledarray( value:any, iterable:Iterable[, dtype:string] )"],["filledarray","filledarray( value:any, buffer:ArrayBuffer[, byteOffset:integer[, length:integer]][, dtype:string] )"],["filledarrayBy","filledarrayBy( [dtype:string] )"],["filledarrayBy","filledarrayBy( length:integer[, dtype:string], clbk:Function[, thisArg:any] )"],["filledarrayBy","filledarrayBy( array:ArrayLikeObject[, dtype:string], clbk:Function[, thisArg:any] )"],["filledarrayBy","filledarrayBy( iterable:Iterable[, dtype:string], clbk:Function[, thisArg:any] )"],["filledarrayBy","filledarrayBy( buffer:ArrayBuffer[, byteOffset:integer[, length:integer]][, dtype:string], clbk:Function[, thisArg:any] )"],["filterArguments","filterArguments( fcn:Function, predicate:Function[, thisArg:any] )"],["find","find( arr:Array|TypedArray|string, [options:Object,] clbk:Function )"],["firstChar","firstChar( str:string[, n:integer][, options:Object] )"],["FIVETHIRTYEIGHT_FFQ","FIVETHIRTYEIGHT_FFQ()"],["flattenArray","flattenArray( arr:ArrayLikeObject[, options:Object] )"],["flattenArray.factory","flattenArray.factory( dims:ArrayLike<integer>[, options:Object] )"],["flattenObject","flattenObject( obj:ObjectLike[, options:Object] )"],["flattenObject.factory","flattenObject.factory( [options:Object] )"],["flignerTest","flignerTest( ...x:Array[, options:Object] )"],["FLOAT_WORD_ORDER","FLOAT_WORD_ORDER"],["FLOAT16_CBRT_EPS","FLOAT16_CBRT_EPS"],["FLOAT16_EPS","FLOAT16_EPS"],["FLOAT16_EXPONENT_BIAS","FLOAT16_EXPONENT_BIAS"],["FLOAT16_MAX","FLOAT16_MAX"],["FLOAT16_MAX_SAFE_INTEGER","FLOAT16_MAX_SAFE_INTEGER"],["FLOAT16_MIN_SAFE_INTEGER","FLOAT16_MIN_SAFE_INTEGER"],["FLOAT16_NINF","FLOAT16_NINF"],["FLOAT16_NUM_BYTES","FLOAT16_NUM_BYTES"],["FLOAT16_PINF","FLOAT16_PINF"],["FLOAT16_PRECISION","FLOAT16_PRECISION"],["FLOAT16_SMALLEST_NORMAL","FLOAT16_SMALLEST_NORMAL"],["FLOAT16_SMALLEST_SUBNORMAL","FLOAT16_SMALLEST_SUBNORMAL"],["FLOAT16_SQRT_EPS","FLOAT16_SQRT_EPS"],["FLOAT32_ABS_MASK","FLOAT32_ABS_MASK"],["FLOAT32_CBRT_EPS","FLOAT32_CBRT_EPS"],["FLOAT32_EPS","FLOAT32_EPS"],["FLOAT32_EXPONENT_BIAS","FLOAT32_EXPONENT_BIAS"],["FLOAT32_EXPONENT_MASK","FLOAT32_EXPONENT_MASK"],["FLOAT32_FOURTH_PI","FLOAT32_FOURTH_PI"],["FLOAT32_HALF_PI","FLOAT32_HALF_PI"],["FLOAT32_MAX","FLOAT32_MAX"],["FLOAT32_MAX_SAFE_INTEGER","FLOAT32_MAX_SAFE_INTEGER"],["FLOAT32_MIN_SAFE_INTEGER","FLOAT32_MIN_SAFE_INTEGER"],["FLOAT32_NAN","FLOAT32_NAN"],["FLOAT32_NINF","FLOAT32_NINF"],["FLOAT32_NUM_BYTES","FLOAT32_NUM_BYTES"],["FLOAT32_PI","FLOAT32_PI"],["FLOAT32_PINF","FLOAT32_PINF"],["FLOAT32_PRECISION","FLOAT32_PRECISION"],["FLOAT32_SIGN_MASK","FLOAT32_SIGN_MASK"],["FLOAT32_SIGNIFICAND_MASK","FLOAT32_SIGNIFICAND_MASK"],["FLOAT32_SMALLEST_NORMAL","FLOAT32_SMALLEST_NORMAL"],["FLOAT32_SMALLEST_SUBNORMAL","FLOAT32_SMALLEST_SUBNORMAL"],["FLOAT32_SQRT_EPS","FLOAT32_SQRT_EPS"],["FLOAT32_TWO_PI","FLOAT32_TWO_PI"],["Float32Array","Float32Array()"],["Float32Array","Float32Array( length:integer )"],["Float32Array","Float32Array( typedarray:TypedArray )"],["Float32Array","Float32Array( obj:Object )"],["Float32Array","Float32Array( buffer:ArrayBuffer[, byteOffset:integer[, length:integer]] )"],["Float32Array.from","Float32Array.from( src:ArrayLike|Iterable[, map:Function[, thisArg:Any]] )"],["Float32Array.of","Float32Array.of( element0:number[, element1:number[, ...elementN:number]] )"],["Float32Array.BYTES_PER_ELEMENT","Float32Array.BYTES_PER_ELEMENT"],["Float32Array.name","Float32Array.name"],["Float32Array.prototype.buffer","Float32Array.prototype.buffer"],["Float32Array.prototype.byteLength","Float32Array.prototype.byteLength"],["Float32Array.prototype.byteOffset","Float32Array.prototype.byteOffset"],["Float32Array.prototype.BYTES_PER_ELEMENT","Float32Array.prototype.BYTES_PER_ELEMENT"],["Float32Array.prototype.length","Float32Array.prototype.length"],["Float32Array.prototype.copyWithin","Float32Array.prototype.copyWithin( target:integer, start:integer[, end:integer] )"],["Float32Array.prototype.entries","Float32Array.prototype.entries()"],["Float32Array.prototype.every","Float32Array.prototype.every( predicate:Function[, thisArg:Any] )"],["Float32Array.prototype.fill","Float32Array.prototype.fill( value:number[, start:integer[, end:integer]] )"],["Float32Array.prototype.filter","Float32Array.prototype.filter( predicate:Function[, thisArg:Any] )"],["Float32Array.prototype.find","Float32Array.prototype.find( predicate:Function[, thisArg:Any] )"],["Float32Array.prototype.findIndex","Float32Array.prototype.findIndex( predicate:Function[, thisArg:Any] )"],["Float32Array.prototype.forEach","Float32Array.prototype.forEach( fcn:Function[, thisArg:Any] )"],["Float32Array.prototype.includes","Float32Array.prototype.includes( searchElement:number[, fromIndex:integer] )"],["Float32Array.prototype.indexOf","Float32Array.prototype.indexOf( searchElement:number[, fromIndex:integer] )"],["Float32Array.prototype.join","Float32Array.prototype.join( [separator:string] )"],["Float32Array.prototype.keys","Float32Array.prototype.keys()"],["Float32Array.prototype.lastIndexOf","Float32Array.prototype.lastIndexOf( searchElement:number[, fromIndex:integer] )"],["Float32Array.prototype.map","Float32Array.prototype.map( fcn:Function[, thisArg:Any] )"],["Float32Array.prototype.reduce","Float32Array.prototype.reduce( fcn:Function[, initialValue:Any] )"],["Float32Array.prototype.reduceRight","Float32Array.prototype.reduceRight( fcn:Function[, initialValue:Any] )"],["Float32Array.prototype.reverse","Float32Array.prototype.reverse()"],["Float32Array.prototype.set","Float32Array.prototype.set( arr:ArrayLike[, offset:integer] )"],["Float32Array.prototype.slice","Float32Array.prototype.slice( [begin:integer[, end:integer]] )"],["Float32Array.prototype.some","Float32Array.prototype.some( predicate:Function[, thisArg:Any] )"],["Float32Array.prototype.sort","Float32Array.prototype.sort( [compareFunction:Function] )"],["Float32Array.prototype.subarray","Float32Array.prototype.subarray( [begin:integer[, end:integer]] )"],["Float32Array.prototype.toLocaleString","Float32Array.prototype.toLocaleString( [locales:string|Array[, options:Object]] )"],["Float32Array.prototype.toString","Float32Array.prototype.toString()"],["Float32Array.prototype.values","Float32Array.prototype.values()"],["FLOAT64_EXPONENT_BIAS","FLOAT64_EXPONENT_BIAS"],["FLOAT64_HIGH_WORD_ABS_MASK","FLOAT64_HIGH_WORD_ABS_MASK"],["FLOAT64_HIGH_WORD_EXPONENT_MASK","FLOAT64_HIGH_WORD_EXPONENT_MASK"],["FLOAT64_HIGH_WORD_SIGN_MASK","FLOAT64_HIGH_WORD_SIGN_MASK"],["FLOAT64_HIGH_WORD_SIGNIFICAND_MASK","FLOAT64_HIGH_WORD_SIGNIFICAND_MASK"],["FLOAT64_MAX","FLOAT64_MAX"],["FLOAT64_MAX_BASE2_EXPONENT","FLOAT64_MAX_BASE2_EXPONENT"],["FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL","FLOAT64_MAX_BASE2_EXPONENT_SUBNORMAL"],["FLOAT64_MAX_BASE10_EXPONENT","FLOAT64_MAX_BASE10_EXPONENT"],["FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL","FLOAT64_MAX_BASE10_EXPONENT_SUBNORMAL"],["FLOAT64_MAX_LN","FLOAT64_MAX_LN"],["FLOAT64_MAX_SAFE_FIBONACCI","FLOAT64_MAX_SAFE_FIBONACCI"],["FLOAT64_MAX_SAFE_INTEGER","FLOAT64_MAX_SAFE_INTEGER"],["FLOAT64_MAX_SAFE_LUCAS","FLOAT64_MAX_SAFE_LUCAS"],["FLOAT64_MAX_SAFE_NTH_FIBONACCI","FLOAT64_MAX_SAFE_NTH_FIBONACCI"],["FLOAT64_MAX_SAFE_NTH_LUCAS","FLOAT64_MAX_SAFE_NTH_LUCAS"],["FLOAT64_MIN_BASE2_EXPONENT","FLOAT64_MIN_BASE2_EXPONENT"],["FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL","FLOAT64_MIN_BASE2_EXPONENT_SUBNORMAL"],["FLOAT64_MIN_BASE10_EXPONENT","FLOAT64_MIN_BASE10_EXPONENT"],["FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL","FLOAT64_MIN_BASE10_EXPONENT_SUBNORMAL"],["FLOAT64_MIN_LN","FLOAT64_MIN_LN"],["FLOAT64_MIN_SAFE_INTEGER","FLOAT64_MIN_SAFE_INTEGER"],["FLOAT64_NUM_BYTES","FLOAT64_NUM_BYTES"],["FLOAT64_PRECISION","FLOAT64_PRECISION"],["FLOAT64_SMALLEST_NORMAL","FLOAT64_SMALLEST_NORMAL"],["FLOAT64_SMALLEST_SUBNORMAL","FLOAT64_SMALLEST_SUBNORMAL"],["Float64Array","Float64Array()"],["Float64Array","Float64Array( length:integer )"],["Float64Array","Float64Array( typedarray:TypedArray )"],["Float64Array","Float64Array( obj:Object )"],["Float64Array","Float64Array( buffer:ArrayBuffer[, byteOffset:integer[, length:integer]] )"],["Float64Array.from","Float64Array.from( src:ArrayLike|Iterable[, map:Function[, thisArg:Any]] )"],["Float64Array.of","Float64Array.of( element0:number[, element1:number[, ...elementN:number]] )"],["Float64Array.BYTES_PER_ELEMENT","Float64Array.BYTES_PER_ELEMENT"],["Float64Array.name","Float64Array.name"],["Float64Array.prototype.buffer","Float64Array.prototype.buffer"],["Float64Array.prototype.byteLength","Float64Array.prototype.byteLength"],["Float64Array.prototype.byteOffset","Float64Array.prototype.byteOffset"],["Float64Array.prototype.BYTES_PER_ELEMENT","Float64Array.prototype.BYTES_PER_ELEMENT"],["Float64Array.prototype.length","Float64Array.prototype.length"],["Float64Array.prototype.copyWithin","Float64Array.prototype.copyWithin( target:integer, start:integer[, end:integer] )"],["Float64Array.prototype.entries","Float64Array.prototype.entries()"],["Float64Array.prototype.every","Float64Array.prototype.every( predicate:Function[, thisArg:Any] )"],["Float64Array.prototype.fill","Float64Array.prototype.fill( value:number[, start:integer[, end:integer]] )"],["Float64Array.prototype.filter","Float64Array.prototype.filter( predicate:Function[, thisArg:Any] )"],["Float64Array.prototype.find","Float64Array.prototype.find( predicate:Function[, thisArg:Any] )"],["Float64Array.prototype.findIndex","Float64Array.prototype.findIndex( predicate:Function[, thisArg:Any] )"],["Float64Array.prototype.forEach","Float64Array.prototype.forEach( fcn:Function[, thisArg:Any] )"],["Float64Array.prototype.includes","Float64Array.prototype.includes( searchElement:number[, fromIndex:integer] )"],["Float64Array.prototype.indexOf","Float64Array.prototype.indexOf( searchElement:number[, fromIndex:integer] )"],["Float64Array.prototype.join","Float64Array.prototype.join( [separator:string] )"],["Float64Array.prototype.keys","Float64Array.prototype.keys()"],["Float64Array.prototype.lastIndexOf","Float64Array.prototype.lastIndexOf( searchElement:number[, fromIndex:integer] )"],["Float64Array.prototype.map","Float64Array.prototype.map( fcn:Function[, thisArg:Any] )"],["Float64Array.prototype.reduce","Float64Array.prototype.reduce( fcn:Function[, initialValue:Any] )"],["Float64Array.prototype.reduceRight","Float64Array.prototype.reduceRight( fcn:Function[, initialValue:Any] )"],["Float64Array.prototype.reverse","Float64Array.prototype.reverse()"],["Float64Array.prototype.set","Float64Array.prototype.set( arr:ArrayLike[, offset:integer] )"],["Float64Array.prototype.slice","Float64Array.prototype.slice( [begin:integer[, end:integer]] )"],["Float64Array.prototype.some","Float64Array.prototype.some( predicate:Function[, thisArg:Any] )"],["Float64Array.prototype.sort","Float64Array.prototype.sort( [compareFunction:Function] )"],["Float64Array.prototype.subarray","Float64Array.prototype.subarray( [begin:integer[, end:integer]] )"],["Float64Array.prototype.toLocaleString","Float64Array.prototype.toLocaleString( [locales:string|Array[, options:Object]] )"],["Float64Array.prototype.toString","Float64Array.prototype.toString()"],["Float64Array.prototype.values","Float64Array.prototype.values()"],["forEach","forEach( collection:Array|TypedArray|Object, fcn:Function[, thisArg:any] )"],["forEachAsync","forEachAsync( collection:Array|TypedArray|Object, [options:Object,] fcn:Function, done:Function )"],["forEachAsync.factory","forEachAsync.factory( [options:Object,] fcn:Function )"],["forEachChar","forEachChar( str:string, [options:Object,] clbk:Function[, thisArg:any] )"],["forEachRight","forEachRight( collection:Array|TypedArray|Object, fcn:Function[, thisArg:any] )"],["forEachRightAsync","forEachRightAsync( collection:Array|TypedArray|Object, [options:Object,] fcn:Function, done:Function )"],["forEachRightAsync.factory","forEachRightAsync.factory( [options:Object,] fcn:Function )"],["forIn","forIn( obj:Object, fcn:Function[, thisArg:any] )"],["format","format( str:string, ...args:any )"],["forOwn","forOwn( obj:Object, fcn:Function[, thisArg:any] )"],["FOURTH_PI","FOURTH_PI"],["FOURTH_ROOT_EPS","FOURTH_ROOT_EPS"],["FRB_SF_WAGE_RIGIDITY","FRB_SF_WAGE_RIGIDITY()"],["fromCodePoint","fromCodePoint( ...pt:integer )"],["Function","Function( [...argNames:any,] body:string )"],["Function.prototype.apply","Function.prototype.apply( thisArg:any, args:Array )"],["Function.prototype.call","Function.prototype.call( thisArg:any, ...args:any )"],["Function.prototype.bind","Function.prototype.bind( thisArg:any, ...args:any )"],["Function.prototype.toString","Function.prototype.toString()"],["Function.prototype.length","Function.prototype.length"],["Function.prototype.name","Function.prototype.name"],["Function.prototype.prototype","Function.prototype.prototype"],["function2string","function2string( fcn:Function )"],["functionName","functionName( fcn:Function )"],["functionSequence","functionSequence( ...fcn:Function )"],["functionSequenceAsync","functionSequenceAsync( ...fcn:Function )"],["GAMMA_LANCZOS_G","GAMMA_LANCZOS_G"],["gdot","gdot( x:ndarray|ArrayLikeObject, y:ndarray|ArrayLikeObject )"],["getegid","getegid()"],["geteuid","geteuid()"],["getgid","getgid()"],["getGlobal","getGlobal( [codegen:boolean] )"],["getPrototypeOf","getPrototypeOf( value:any )"],["getuid","getuid()"],["GLAISHER","GLAISHER"],["graphemeClusters2iterator","graphemeClusters2iterator( src:string[, mapFcn:Function[, thisArg:any]] )"],["graphemeClusters2iteratorRight","graphemeClusters2iteratorRight( src:string[, mapFcn:Function[, thisArg:any]] )"],["group","group( collection:Array|TypedArray|Object, [options:Object,] groups:Array|TypedArray|Object )"],["groupBy","groupBy( collection:Array|TypedArray|Object, [options:Object,] indicator:Function )"],["groupByAsync","groupByAsync( collection:Array|TypedArray|Object, [options:Object,] indicator:Function, done:Function )"],["groupByAsync.factory","groupByAsync.factory( [options:Object,] indicator:Function )"],["groupIn","groupIn( obj:Object|Array|TypedArray, [options:Object,] indicator:Function )"],["groupOwn","groupOwn( obj:Object|Array|TypedArray, [options:Object,] indicator:Function )"],["gswap","gswap( x:ndarray|ArrayLikeObject, y:ndarray|ArrayLikeObject )"],["HALF_LN2","HALF_LN2"],["HALF_PI","HALF_PI"],["HARRISON_BOSTON_HOUSE_PRICES","HARRISON_BOSTON_HOUSE_PRICES()"],["HARRISON_BOSTON_HOUSE_PRICES_CORRECTED","HARRISON_BOSTON_HOUSE_PRICES_CORRECTED()"],["hasArrayBufferSupport","hasArrayBufferSupport()"],["hasArrowFunctionSupport","hasArrowFunctionSupport()"],["hasAsyncAwaitSupport","hasAsyncAwaitSupport()"],["hasAsyncIteratorSymbolSupport","hasAsyncIteratorSymbolSupport()"],["hasBigInt64ArraySupport","hasBigInt64ArraySupport()"],["hasBigIntSupport","hasBigIntSupport()"],["hasBigUint64ArraySupport","hasBigUint64ArraySupport()"],["hasClassSupport","hasClassSupport()"],["hasDataViewSupport","hasDataViewSupport()"],["hasDefinePropertiesSupport","hasDefinePropertiesSupport()"],["hasDefinePropertySupport","hasDefinePropertySupport()"],["hasFloat32ArraySupport","hasFloat32ArraySupport()"],["hasFloat64ArraySupport","hasFloat64ArraySupport()"],["hasFunctionNameSupport","hasFunctionNameSupport()"],["hasGeneratorSupport","hasGeneratorSupport()"],["hasGlobalThisSupport","hasGlobalThisSupport()"],["hasInt8ArraySupport","hasInt8ArraySupport()"],["hasInt16ArraySupport","hasInt16ArraySupport()"],["hasInt32ArraySupport","hasInt32ArraySupport()"],["hasIteratorSymbolSupport","hasIteratorSymbolSupport()"],["hasMapSupport","hasMapSupport()"],["hasNodeBufferSupport","hasNodeBufferSupport()"],["hasOwnProp","hasOwnProp( value:any, property:any )"],["hasProp","hasProp( value:any, property:any )"],["hasProxySupport","hasProxySupport()"],["hasSetSupport","hasSetSupport()"],["hasSharedArrayBufferSupport","hasSharedArrayBufferSupport()"],["hasSymbolSupport","hasSymbolSupport()"],["hasToStringTagSupport","hasToStringTagSupport()"],["hasUint8ArraySupport","hasUint8ArraySupport()"],["hasUint8ClampedArraySupport","hasUint8ClampedArraySupport()"],["hasUint16ArraySupport","hasUint16ArraySupport()"],["hasUint32ArraySupport","hasUint32ArraySupport()"],["hasUTF16SurrogatePairAt","hasUTF16SurrogatePairAt( str:string, pos:integer )"],["hasWeakMapSupport","hasWeakMapSupport()"],["hasWeakSetSupport","hasWeakSetSupport()"],["hasWebAssemblySupport","hasWebAssemblySupport()"],["headercase","headercase( str:string )"],["HERNDON_VENUS_SEMIDIAMETERS","HERNDON_VENUS_SEMIDIAMETERS()"],["homedir","homedir()"],["HOURS_IN_DAY","HOURS_IN_DAY"],["HOURS_IN_WEEK","HOURS_IN_WEEK"],["hoursInMonth","hoursInMonth( [month:string|Date|integer[, year:integer]] )"],["hoursInYear","hoursInYear( [value:integer|Date] )"],["httpServer","httpServer( [options:Object,] [requestListener:Function] )"],["identity","identity( x:any )"],["ifelse","ifelse( bool:boolean, x:any, y:any )"],["ifelseAsync","ifelseAsync( predicate:Function, x:any, y:any, done:Function )"],["ifthen","ifthen( bool:boolean, x:Function, y:Function )"],["ifthenAsync","ifthenAsync( predicate:Function, x:Function, y:Function, done:Function )"],["imag","imag( z:Complex128 )"],["imagf","imagf( z:Complex64 )"],["IMG_ACANTHUS_MOLLIS","IMG_ACANTHUS_MOLLIS()"],["IMG_AIRPLANE_FROM_ABOVE","IMG_AIRPLANE_FROM_ABOVE()"],["IMG_ALLIUM_OREOPHILUM","IMG_ALLIUM_OREOPHILUM()"],["IMG_BLACK_CANYON","IMG_BLACK_CANYON()"],["IMG_DUST_BOWL_HOME","IMG_DUST_BOWL_HOME()"],["IMG_FRENCH_ALPINE_LANDSCAPE","IMG_FRENCH_ALPINE_LANDSCAPE()"],["IMG_LOCOMOTION_HOUSE_CAT","IMG_LOCOMOTION_HOUSE_CAT()"],["IMG_LOCOMOTION_NUDE_MALE","IMG_LOCOMOTION_NUDE_MALE()"],["IMG_MARCH_PASTORAL","IMG_MARCH_PASTORAL()"],["IMG_NAGASAKI_BOATS","IMG_NAGASAKI_BOATS()"],["incrapcorr","incrapcorr( [mx:number, my:number] )"],["incrBinaryClassification","incrBinaryClassification( N:integer[, options:Object] )"],["incrcount","incrcount()"],["incrcovariance","incrcovariance( [mx:number, my:number] )"],["incrcovmat","incrcovmat( out:integer|ndarray[, means:ndarray] )"],["incrcv","incrcv( [mean:number] )"],["increwmean","increwmean( α:number )"],["increwstdev","increwstdev( α:number )"],["increwvariance","increwvariance( α:number )"],["incrgmean","incrgmean()"],["incrgrubbs","incrgrubbs( [options:Object] )"],["incrhmean","incrhmean()"],["incrkmeans","incrkmeans( k:integer|ndarray[, ndims:integer][, options:Object] )"],["incrkurtosis","incrkurtosis()"],["incrmaape","incrmaape()"],["incrmae","incrmae()"],["incrmapcorr","incrmapcorr( W:integer[, mx:number, my:number] )"],["incrmape","incrmape()"],["incrmax","incrmax()"],["incrmaxabs","incrmaxabs()"],["incrmcovariance","incrmcovariance( W:integer[, mx:number, my:number] )"],["incrmcv","incrmcv( W:integer[, mean:number] )"],["incrmda","incrmda()"],["incrme","incrme()"],["incrmean","incrmean()"],["incrmeanabs","incrmeanabs()"],["incrmeanabs2","incrmeanabs2()"],["incrmeanstdev","incrmeanstdev( [out:Array|TypedArray] )"],["incrmeanvar","incrmeanvar( [out:Array|TypedArray] )"],["incrmgmean","incrmgmean( W:integer )"],["incrmgrubbs","incrmgrubbs( W:integer[, options:Object] )"],["incrmhmean","incrmhmean( W:integer )"],["incrmidrange","incrmidrange()"],["incrmin","incrmin()"],["incrminabs","incrminabs()"],["incrminmax","incrminmax( [out:Array|TypedArray] )"],["incrminmaxabs","incrminmaxabs( [out:Array|TypedArray] )"],["incrmmaape","incrmmaape( W:integer )"],["incrmmae","incrmmae( W:integer )"],["incrmmape","incrmmape( W:integer )"],["incrmmax","incrmmax( W:integer )"],["incrmmaxabs","incrmmaxabs( W:integer )"],["incrmmda","incrmmda( W:integer )"],["incrmme","incrmme( W:integer )"],["incrmmean","incrmmean( W:integer )"],["incrmmeanabs","incrmmeanabs( W:integer )"],["incrmmeanabs2","incrmmeanabs2( W:integer )"],["incrmmeanstdev","incrmmeanstdev( [out:Array|TypedArray,] W:integer )"],["incrmmeanvar","incrmmeanvar( [out:Array|TypedArray,] W:integer )"],["incrmmidrange","incrmmidrange( W:integer )"],["incrmmin","incrmmin( W:integer )"],["incrmminabs","incrmminabs( W:integer )"],["incrmminmax","incrmminmax( [out:Array|TypedArray,] W:integer )"],["incrmminmaxabs","incrmminmaxabs( [out:Array|TypedArray,] W:integer )"],["incrmmpe","incrmmpe( W:integer )"],["incrmmse","incrmmse( W:integer )"],["incrmpcorr","incrmpcorr( W:integer[, mx:number, my:number] )"],["incrmpcorr2","incrmpcorr2( W:integer[, mx:number, my:number] )"],["incrmpcorrdist","incrmpcorrdist( W:integer[, mx:number, my:number] )"],["incrmpe","incrmpe()"],["incrmprod","incrmprod( W:integer )"],["incrmrange","incrmrange( W:integer )"],["incrmrmse","incrmrmse( W:integer )"],["incrmrss","incrmrss( W:integer )"],["incrmse","incrmse()"],["incrmstdev","incrmstdev( W:integer[, mean:number] )"],["incrmsum","incrmsum( W:integer )"],["incrmsumabs","incrmsumabs( W:integer )"],["incrmsumabs2","incrmsumabs2( W:integer )"],["incrmsummary","incrmsummary( W:integer )"],["incrmsumprod","incrmsumprod( W:integer )"],["incrmvariance","incrmvariance( W:integer[, mean:number] )"],["incrmvmr","incrmvmr( W:integer[, mean:number] )"],["incrnancount","incrnancount()"],["incrnansum","incrnansum()"],["incrnansumabs","incrnansumabs()"],["incrnansumabs2","incrnansumabs2()"],["incrpcorr","incrpcorr( [mx:number, my:number] )"],["incrpcorr2","incrpcorr2( [mx:number, my:number] )"],["incrpcorrdist","incrpcorrdist( [mx:number, my:number] )"],["incrpcorrdistmat","incrpcorrdistmat( out:integer|ndarray[, means:ndarray] )"],["incrpcorrmat","incrpcorrmat( out:integer|ndarray[, means:ndarray] )"],["incrprod","incrprod()"],["incrrange","incrrange()"],["incrrmse","incrrmse()"],["incrrss","incrrss()"],["incrskewness","incrskewness()"],["incrspace","incrspace( start:number, stop:number[, increment:number] )"],["incrstdev","incrstdev( [mean:number] )"],["incrsum","incrsum()"],["incrsumabs","incrsumabs()"],["incrsumabs2","incrsumabs2()"],["incrsummary","incrsummary()"],["incrsumprod","incrsumprod()"],["incrvariance","incrvariance( [mean:number] )"],["incrvmr","incrvmr( [mean:number] )"],["incrwmean","incrwmean()"],["ind2sub","ind2sub( shape:ArrayLike, idx:integer[, options:Object] )"],["ind2sub.assign","ind2sub.assign( shape:ArrayLike, idx:integer[, options:Object], out:Array|TypedArray|Object )"],["indexOf","indexOf( arr:ArrayLike, searchElement:any[, fromIndex:integer] )"],["inherit","inherit( ctor:Object|Function, superCtor:Object|Function )"],["inheritedEnumerableProperties","inheritedEnumerableProperties( value:any[, level:integer] )"],["inheritedEnumerablePropertySymbols","inheritedEnumerablePropertySymbols( value:any[, level:integer] )"],["inheritedKeys","inheritedKeys( value:any[, level:integer] )"],["inheritedNonEnumerableProperties","inheritedNonEnumerableProperties( value:any[, level:integer] )"],["inheritedNonEnumerablePropertyNames","inheritedNonEnumerablePropertyNames( value:any[, level:integer] )"],["inheritedNonEnumerablePropertySymbols","inheritedNonEnumerablePropertySymbols( value:any[, level:integer] )"],["inheritedProperties","inheritedProperties( value:any[, level:integer] )"],["inheritedPropertyDescriptor","inheritedPropertyDescriptor( value:any, property:string|symbol[, level:integer] )"],["inheritedPropertyDescriptors","inheritedPropertyDescriptors( value:any[, level:integer] )"],["inheritedPropertyNames","inheritedPropertyNames( value:any[, level:integer] )"],["inheritedPropertySymbols","inheritedPropertySymbols( value:any[, level:integer] )"],["inheritedWritableProperties","inheritedWritableProperties( value:any[, level:integer] )"],["inheritedWritablePropertyNames","inheritedWritablePropertyNames( value:any[, level:integer] )"],["inheritedWritablePropertySymbols","inheritedWritablePropertySymbols( value:any[, level:integer] )"],["inmap","inmap( collection:Array|TypedArray|Object, fcn:Function[, thisArg:any] )"],["inmapAsync","inmapAsync( collection:Array|TypedArray|Object, [options:Object,] fcn:Function, done:Function )"],["inmapAsync.factory","inmapAsync.factory( [options:Object,] fcn:Function )"],["inmapRight","inmapRight( collection:Array|TypedArray|Object, fcn:Function[, thisArg:any] )"],["inmapRightAsync","inmapRightAsync( collection:Array|TypedArray|Object, [options:Object,] fcn:Function, done:Function )"],["inmapRightAsync.factory","inmapRightAsync.factory( [options:Object,] fcn:Function )"],["inspectSinkStream","inspectSinkStream( [options:Object,] clbk:Function )"],["inspectSinkStream.factory","inspectSinkStream.factory( [options:Object] )"],["inspectSinkStream.objectMode","inspectSinkStream.objectMode( [options:Object,] clbk:Function )"],["inspectStream","inspectStream( [options:Object,] clbk:Function )"],["inspectStream.factory","inspectStream.factory( [options:Object] )"],["inspectStream.objectMode","inspectStream.objectMode( [options:Object,] clbk:Function )"],["instanceOf","instanceOf( value:any, constructor:Function )"],["INT8_MAX","INT8_MAX"],["INT8_MIN","INT8_MIN"],["INT8_NUM_BYTES","INT8_NUM_BYTES"],["Int8Array","Int8Array()"],["Int8Array","Int8Array( length:integer )"],["Int8Array","Int8Array( typedarray:TypedArray )"],["Int8Array","Int8Array( obj:Object )"],["Int8Array","Int8Array( buffer:ArrayBuffer[, byteOffset:integer[, length:integer]] )"],["Int8Array.from","Int8Array.from( src:ArrayLike|Iterable[, map:Function[, thisArg:Any]] )"],["Int8Array.of","Int8Array.of( element0:number[, element1:number[, ...elementN:number]] )"],["Int8Array.BYTES_PER_ELEMENT","Int8Array.BYTES_PER_ELEMENT"],["Int8Array.name","Int8Array.name"],["Int8Array.prototype.buffer","Int8Array.prototype.buffer"],["Int8Array.prototype.byteLength","Int8Array.prototype.byteLength"],["Int8Array.prototype.byteOffset","Int8Array.prototype.byteOffset"],["Int8Array.prototype.BYTES_PER_ELEMENT","Int8Array.prototype.BYTES_PER_ELEMENT"],["Int8Array.prototype.length","Int8Array.prototype.length"],["Int8Array.prototype.copyWithin","Int8Array.prototype.copyWithin( target:integer, start:integer[, end:integer] )"],["Int8Array.prototype.entries","Int8Array.prototype.entries()"],["Int8Array.prototype.every","Int8Array.prototype.every( predicate:Function[, thisArg:Any] )"],["Int8Array.prototype.fill","Int8Array.prototype.fill( value:number[, start:integer[, end:integer]] )"],["Int8Array.prototype.filter","Int8Array.prototype.filter( predicate:Function[, thisArg:Any] )"],["Int8Array.prototype.find","Int8Array.prototype.find( predicate:Function[, thisArg:Any] )"],["Int8Array.prototype.findIndex","Int8Array.prototype.findIndex( predicate:Function[, thisArg:Any] )"],["Int8Array.prototype.forEach","Int8Array.prototype.forEach( fcn:Function[, thisArg:Any] )"],["Int8Array.prototype.includes","Int8Array.prototype.includes( searchElement:number[, fromIndex:integer] )"],["Int8Array.prototype.indexOf","Int8Array.prototype.indexOf( searchElement:number[, fromIndex:integer] )"],["Int8Array.prototype.join","Int8Array.prototype.join( [separator:string] )"],["Int8Array.prototype.keys","Int8Array.prototype.keys()"],["Int8Array.prototype.lastIndexOf","Int8Array.prototype.lastIndexOf( searchElement:number[, fromIndex:integer] )"],["Int8Array.prototype.map","Int8Array.prototype.map( fcn:Function[, thisArg:Any] )"],["Int8Array.prototype.reduce","Int8Array.prototype.reduce( fcn:Function[, initialValue:Any] )"],["Int8Array.prototype.reduceRight","Int8Array.prototype.reduceRight( fcn:Function[, initialValue:Any] )"],["Int8Array.prototype.reverse","Int8Array.prototype.reverse()"],["Int8Array.prototype.set","Int8Array.prototype.set( arr:ArrayLike[, offset:integer] )"],["Int8Array.prototype.slice","Int8Array.prototype.slice( [begin:integer[, end:integer]] )"],["Int8Array.prototype.some","Int8Array.prototype.some( predicate:Function[, thisArg:Any] )"],["Int8Array.prototype.sort","Int8Array.prototype.sort( [compareFunction:Function] )"],["Int8Array.prototype.subarray","Int8Array.prototype.subarray( [begin:integer[, end:integer]] )"],["Int8Array.prototype.toLocaleString","Int8Array.prototype.toLocaleString( [locales:string|Array[, options:Object]] )"],["Int8Array.prototype.toString","Int8Array.prototype.toString()"],["Int8Array.prototype.values","Int8Array.prototype.values()"],["INT16_MAX","INT16_MAX"],["INT16_MIN","INT16_MIN"],["INT16_NUM_BYTES","INT16_NUM_BYTES"],["Int16Array","Int16Array()"],["Int16Array","Int16Array( length:integer )"],["Int16Array","Int16Array( typedarray:TypedArray )"],["Int16Array","Int16Array( obj:Object )"],["Int16Array","Int16Array( buffer:ArrayBuffer[, byteOffset:integer[, length:integer]] )"],["Int16Array.from","Int16Array.from( src:ArrayLike|Iterable[, map:Function[, thisArg:Any]] )"],["Int16Array.of","Int16Array.of( element0:number[, element1:number[, ...elementN:number]] )"],["Int16Array.BYTES_PER_ELEMENT","Int16Array.BYTES_PER_ELEMENT"],["Int16Array.name","Int16Array.name"],["Int16Array.prototype.buffer","Int16Array.prototype.buffer"],["Int16Array.prototype.byteLength","Int16Array.prototype.byteLength"],["Int16Array.prototype.byteOffset","Int16Array.prototype.byteOffset"],["Int16Array.prototype.BYTES_PER_ELEMENT","Int16Array.prototype.BYTES_PER_ELEMENT"],["Int16Array.prototype.length","Int16Array.prototype.length"],["Int16Array.prototype.copyWithin","Int16Array.prototype.copyWithin( target:integer, start:integer[, end:integer] )"],["Int16Array.prototype.entries","Int16Array.prototype.entries()"],["Int16Array.prototype.every","Int16Array.prototype.every( predicate:Function[, thisArg:Any] )"],["Int16Array.prototype.fill","Int16Array.prototype.fill( value:number[, start:integer[, end:integer]] )"],["Int16Array.prototype.filter","Int16Array.prototype.filter( predicate:Function[, thisArg:Any] )"],["Int16Array.prototype.find","Int16Array.prototype.find( predicate:Function[, thisArg:Any] )"],["Int16Array.prototype.findIndex","Int16Array.prototype.findIndex( predicate:Function[, thisArg:Any] )"],["Int16Array.prototype.forEach","Int16Array.prototype.forEach( fcn:Function[, thisArg:Any] )"],["Int16Array.prototype.includes","Int16Array.prototype.includes( searchElement:number[, fromIndex:integer] )"],["Int16Array.prototype.indexOf","Int16Array.prototype.indexOf( searchElement:number[, fromIndex:integer] )"],["Int16Array.prototype.join","Int16Array.prototype.join( [separator:string] )"],["Int16Array.prototype.keys","Int16Array.prototype.keys()"],["Int16Array.prototype.lastIndexOf","Int16Array.prototype.lastIndexOf( searchElement:number[, fromIndex:integer] )"],["Int16Array.prototype.map","Int16Array.prototype.map( fcn:Function[, thisArg:Any] )"],["Int16Array.prototype.reduce","Int16Array.prototype.reduce( fcn:Function[, initialValue:Any] )"],["Int16Array.prototype.reduceRight","Int16Array.prototype.reduceRight( fcn:Function[, initialValue:Any] )"],["Int16Array.prototype.reverse","Int16Array.prototype.reverse()"],["Int16Array.prototype.set","Int16Array.prototype.set( arr:ArrayLike[, offset:integer] )"],["Int16Array.prototype.slice","Int16Array.prototype.slice( [begin:integer[, end:integer]] )"],["Int16Array.prototype.some","Int16Array.prototype.some( predicate:Function[, thisArg:Any] )"],["Int16Array.prototype.sort","Int16Array.prototype.sort( [compareFunction:Function] )"],["Int16Array.prototype.subarray","Int16Array.prototype.subarray( [begin:integer[, end:integer]] )"],["Int16Array.prototype.toLocaleString","Int16Array.prototype.toLocaleString( [locales:string|Array[, options:Object]] )"],["Int16Array.prototype.toString","Int16Array.prototype.toString()"],["Int16Array.prototype.values","Int16Array.prototype.values()"],["INT32_MAX","INT32_MAX"],["INT32_MIN","INT32_MIN"],["INT32_NUM_BYTES","INT32_NUM_BYTES"],["Int32Array","Int32Array()"],["Int32Array","Int32Array( length:integer )"],["Int32Array","Int32Array( typedarray:TypedArray )"],["Int32Array","Int32Array( obj:Object )"],["Int32Array","Int32Array( buffer:ArrayBuffer[, byteOffset:integer[, length:integer]] )"],["Int32Array.from","Int32Array.from( src:ArrayLike|Iterable[, map:Function[, thisArg:Any]] )"],["Int32Array.of","Int32Array.of( element0:number[, element1:number[, ...elementN:number]] )"],["Int32Array.BYTES_PER_ELEMENT","Int32Array.BYTES_PER_ELEMENT"],["Int32Array.name","Int32Array.name"],["Int32Array.prototype.buffer","Int32Array.prototype.buffer"],["Int32Array.prototype.byteLength","Int32Array.prototype.byteLength"],["Int32Array.prototype.byteOffset","Int32Array.prototype.byteOffset"],["Int32Array.prototype.BYTES_PER_ELEMENT","Int32Array.prototype.BYTES_PER_ELEMENT"],["Int32Array.prototype.length","Int32Array.prototype.length"],["Int32Array.prototype.copyWithin","Int32Array.prototype.copyWithin( target:integer, start:integer[, end:integer] )"],["Int32Array.prototype.entries","Int32Array.prototype.entries()"],["Int32Array.prototype.every","Int32Array.prototype.every( predicate:Function[, thisArg:Any] )"],["Int32Array.prototype.fill","Int32Array.prototype.fill( value:number[, start:integer[, end:integer]] )"],["Int32Array.prototype.filter","Int32Array.prototype.filter( predicate:Function[, thisArg:Any] )"],["Int32Array.prototype.find","Int32Array.prototype.find( predicate:Function[, thisArg:Any] )"],["Int32Array.prototype.findIndex","Int32Array.prototype.findIndex( predicate:Function[, thisArg:Any] )"],["Int32Array.prototype.forEach","Int32Array.prototype.forEach( fcn:Function[, thisArg:Any] )"],["Int32Array.prototype.includes","Int32Array.prototype.includes( searchElement:number[, fromIndex:integer] )"],["Int32Array.prototype.indexOf","Int32Array.prototype.indexOf( searchElement:number[, fromIndex:integer] )"],["Int32Array.prototype.join","Int32Array.prototype.join( [separator:string] )"],["Int32Array.prototype.keys","Int32Array.prototype.keys()"],["Int32Array.prototype.lastIndexOf","Int32Array.prototype.lastIndexOf( searchElement:number[, fromIndex:integer] )"],["Int32Array.prototype.map","Int32Array.prototype.map( fcn:Function[, thisArg:Any] )"],["Int32Array.prototype.reduce","Int32Array.prototype.reduce( fcn:Function[, initialValue:Any] )"],["Int32Array.prototype.reduceRight","Int32Array.prototype.reduceRight( fcn:Function[, initialValue:Any] )"],["Int32Array.prototype.reverse","Int32Array.prototype.reverse()"],["Int32Array.prototype.set","Int32Array.prototype.set( arr:ArrayLike[, offset:integer] )"],["Int32Array.prototype.slice","Int32Array.prototype.slice( [begin:integer[, end:integer]] )"],["Int32Array.prototype.some","Int32Array.prototype.some( predicate:Function[, thisArg:Any] )"],["Int32Array.prototype.sort","Int32Array.prototype.sort( [compareFunction:Function] )"],["Int32Array.prototype.subarray","Int32Array.prototype.subarray( [begin:integer[, end:integer]] )"],["Int32Array.prototype.toLocaleString","Int32Array.prototype.toLocaleString( [locales:string|Array[, options:Object]] )"],["Int32Array.prototype.toString","Int32Array.prototype.toString()"],["Int32Array.prototype.values","Int32Array.prototype.values()"],["IS_BIG_ENDIAN","IS_BIG_ENDIAN"],["IS_BROWSER","IS_BROWSER"],["IS_DARWIN","IS_DARWIN"],["IS_DOCKER","IS_DOCKER"],["IS_ELECTRON","IS_ELECTRON"],["IS_ELECTRON_MAIN","IS_ELECTRON_MAIN"],["IS_ELECTRON_RENDERER","IS_ELECTRON_RENDERER"],["IS_LITTLE_ENDIAN","IS_LITTLE_ENDIAN"],["IS_MOBILE","IS_MOBILE"],["IS_NODE","IS_NODE"],["IS_TOUCH_DEVICE","IS_TOUCH_DEVICE"],["IS_WEB_WORKER","IS_WEB_WORKER"],["IS_WINDOWS","IS_WINDOWS"],["isAbsoluteHttpURI","isAbsoluteHttpURI( value:any )"],["isAbsolutePath","isAbsolutePath( value:any )"],["isAbsolutePath.posix","isAbsolutePath.posix( value:any )"],["isAbsolutePath.win32","isAbsolutePath.win32( value:any )"],["isAbsoluteURI","isAbsoluteURI( value:any )"],["isAccessorArray","isAccessorArray( value:any )"],["isAccessorProperty","isAccessorProperty( value:any, property:any )"],["isAccessorPropertyIn","isAccessorPropertyIn( value:any, property:any )"],["isAlphagram","isAlphagram( value:any )"],["isAlphaNumeric","isAlphaNumeric( str:string )"],["isAnagram","isAnagram( str:string, value:any )"],["isArguments","isArguments( value:any )"],["isArray","isArray( value:any )"],["isArrayArray","isArrayArray( value:any )"],["isArrayBuffer","isArrayBuffer( value:any )"],["isArrayBufferView","isArrayBufferView( value:any )"],["isArrayLength","isArrayLength( value:any )"],["isArrayLike","isArrayLike( value:any )"],["isArrayLikeObject","isArrayLikeObject( value:any )"],["isArrowFunction","isArrowFunction( value:any )"],["isASCII","isASCII( str:string )"],["isBetween","isBetween( value:any, a:any, b:any[, left:string, right:string] )"],["isBetweenArray","isBetweenArray( value:any, a:any, b:any[, left:string, right:string] )"],["isBigInt","isBigInt( value:any )"],["isBigInt64Array","isBigInt64Array( value:any )"],["isBigUint64Array","isBigUint64Array( value:any )"],["isBinaryString","isBinaryString( value:any )"],["isBlankString","isBlankString( value:any )"],["isBoolean","isBoolean( value:any )"],["isBoolean.isPrimitive","isBoolean.isPrimitive( value:any )"],["isBoolean.isObject","isBoolean.isObject( value:any )"],["isBooleanArray","isBooleanArray( value:any )"],["isBooleanArray.primitives","isBooleanArray.primitives( value:any )"],["isBooleanArray.objects","isBooleanArray.objects( value:any )"],["isBoxedPrimitive","isBoxedPrimitive( value:any )"],["isBuffer","isBuffer( value:any )"],["isCamelcase","isCamelcase( value:any )"],["isCapitalized","isCapitalized( value:any )"],["isCentrosymmetricMatrix","isCentrosymmetricMatrix( value:any )"],["isCircular","isCircular( value:any )"],["isCircularArray","isCircularArray( value:any )"],["isCircularPlainObject","isCircularPlainObject( value:any )"],["isClass","isClass( value:any )"],["isCollection","isCollection( value:any )"],["isComplex","isComplex( value:any )"],["isComplex64","isComplex64( value:any )"],["isComplex64Array","isComplex64Array( value:any )"],["isComplex64MatrixLike","isComplex64MatrixLike( value:any )"],["isComplex64ndarrayLike","isComplex64ndarrayLike( value:any )"],["isComplex64VectorLike","isComplex64VectorLike( value:any )"],["isComplex128","isComplex128( value:any )"],["isComplex128Array","isComplex128Array( value:any )"],["isComplex128MatrixLike","isComplex128MatrixLike( value:any )"],["isComplex128ndarrayLike","isComplex128ndarrayLike( value:any )"],["isComplex128VectorLike","isComplex128VectorLike( value:any )"],["isComplexLike","isComplexLike( value:any )"],["isComplexTypedArray","isComplexTypedArray( value:any )"],["isComplexTypedArrayLike","isComplexTypedArrayLike( value:any )"],["isComposite","isComposite( value:any )"],["isComposite.isPrimitive","isComposite.isPrimitive( value:any )"],["isComposite.isObject","isComposite.isObject( value:any )"],["isConfigurableProperty","isConfigurableProperty( value:any, property:any )"],["isConfigurablePropertyIn","isConfigurablePropertyIn( value:any, property:any )"],["isConstantcase","isConstantcase( value:any )"],["isCubeNumber","isCubeNumber( value:any )"],["isCubeNumber.isPrimitive","isCubeNumber.isPrimitive( value:any )"],["isCubeNumber.isObject","isCubeNumber.isObject( value:any )"],["isCurrentYear","isCurrentYear( value:any )"],["isDataProperty","isDataProperty( value:any, property:any )"],["isDataPropertyIn","isDataPropertyIn( value:any, property:any )"],["isDataView","isDataView( value:any )"],["isDateObject","isDateObject( value:any )"],["isDateObjectArray","isDateObjectArray( value:any )"],["isDigitString","isDigitString( str:string )"],["isDomainName","isDomainName( value:any )"],["isDurationString","isDurationString( value:any )"],["isEmailAddress","isEmailAddress( value:any )"],["isEmptyArray","isEmptyArray( value:any )"],["isEmptyArrayLikeObject","isEmptyArrayLikeObject( value:any )"],["isEmptyCollection","isEmptyCollection( value:any )"],["isEmptyObject","isEmptyObject( value:any )"],["isEmptyString","isEmptyString( value:any )"],["isEmptyString.isPrimitive","isEmptyString.isPrimitive( value:any )"],["isEmptyString.isObject","isEmptyString.isObject( value:any )"],["isEnumerableProperty","isEnumerableProperty( value:any, property:any )"],["isEnumerablePropertyIn","isEnumerablePropertyIn( value:any, property:any )"],["isError","isError( value:any )"],["isEvalError","isEvalError( value:any )"],["isEven","isEven( value:any )"],["isEven.isPrimitive","isEven.isPrimitive( value:any )"],["isEven.isObject","isEven.isObject( value:any )"],["isFalsy","isFalsy( value:any )"],["isFalsyArray","isFalsyArray( value:any )"],["isFinite","isFinite( value:any )"],["isFinite.isPrimitive","isFinite.isPrimitive( value:any )"],["isFinite.isObject","isFinite.isObject( value:any )"],["isFiniteArray","isFiniteArray( value:any )"],["isFiniteArray.primitives","isFiniteArray.primitives( value:any )"],["isFiniteArray.objects","isFiniteArray.objects( value:any )"],["isFloat32Array","isFloat32Array( value:any )"],["isFloat32MatrixLike","isFloat32MatrixLike( value:any )"],["isFloat32ndarrayLike","isFloat32ndarrayLike( value:any )"],["isFloat32VectorLike","isFloat32VectorLike( value:any )"],["isFloat64Array","isFloat64Array( value:any )"],["isFloat64MatrixLike","isFloat64MatrixLike( value:any )"],["isFloat64ndarrayLike","isFloat64ndarrayLike( value:any )"],["isFloat64VectorLike","isFloat64VectorLike( value:any )"],["isFunction","isFunction( value:any )"],["isFunctionArray","isFunctionArray( value:any )"],["isGeneratorObject","isGeneratorObject( value:any )"],["isGeneratorObjectLike","isGeneratorObjectLike( value:any )"],["isgzipBuffer","isgzipBuffer( value:any )"],["isHexString","isHexString( str:string )"],["isInfinite","isInfinite( value:any )"],["isInfinite.isPrimitive","isInfinite.isPrimitive( value:any )"],["isInfinite.isObject","isInfinite.isObject( value:any )"],["isInheritedProperty","isInheritedProperty( value:any, property:any )"],["isInt8Array","isInt8Array( value:any )"],["isInt16Array","isInt16Array( value:any )"],["isInt32Array","isInt32Array( value:any )"],["isInteger","isInteger( value:any )"],["isInteger.isPrimitive","isInteger.isPrimitive( value:any )"],["isInteger.isObject","isInteger.isObject( value:any )"],["isIntegerArray","isIntegerArray( value:any )"],["isIntegerArray.primitives","isIntegerArray.primitives( value:any )"],["isIntegerArray.objects","isIntegerArray.objects( value:any )"],["isIterableLike","isIterableLike( value:any )"],["isIteratorLike","isIteratorLike( value:any )"],["isJSON","isJSON( value:any )"],["isKebabcase","isKebabcase( value:any )"],["isLeapYear","isLeapYear( value:any )"],["isLocalhost","isLocalhost( value:any )"],["isLowercase","isLowercase( value:any )"],["isMatrixLike","isMatrixLike( value:any )"],["isMethod","isMethod( value:any, property:any )"],["isMethodIn","isMethodIn( value:any, property:any )"],["isMultiSlice","isMultiSlice( value:any )"],["isNamedTypedTupleLike","isNamedTypedTupleLike( value:any )"],["isnan","isnan( value:any )"],["isnan.isPrimitive","isnan.isPrimitive( value:any )"],["isnan.isObject","isnan.isObject( value:any )"],["isNaNArray","isNaNArray( value:any )"],["isNaNArray.primitives","isNaNArray.primitives( value:any )"],["isNaNArray.objects","isNaNArray.objects( value:any )"],["isNativeFunction","isNativeFunction( value:any )"],["isndarrayLike","isndarrayLike( value:any )"],["isNegativeFinite","isNegativeFinite( value:any )"],["isNegativeFinite.isPrimitive","isNegativeFinite.isPrimitive( value:any )"],["isNegativeFinite.isObject","isNegativeFinite.isObject( value:any )"],["isNegativeInteger","isNegativeInteger( value:any )"],["isNegativeInteger.isPrimitive","isNegativeInteger.isPrimitive( value:any )"],["isNegativeInteger.isObject","isNegativeInteger.isObject( value:any )"],["isNegativeIntegerArray","isNegativeIntegerArray( value:any )"],["isNegativeIntegerArray.primitives","isNegativeIntegerArray.primitives( value:any )"],["isNegativeIntegerArray.objects","isNegativeIntegerArray.objects( value:any )"],["isNegativeNumber","isNegativeNumber( value:any )"],["isNegativeNumber.isPrimitive","isNegativeNumber.isPrimitive( value:any )"],["isNegativeNumber.isObject","isNegativeNumber.isObject( value:any )"],["isNegativeNumberArray","isNegativeNumberArray( value:any )"],["isNegativeNumberArray.primitives","isNegativeNumberArray.primitives( value:any )"],["isNegativeNumberArray.objects","isNegativeNumberArray.objects( value:any )"],["isNegativeZero","isNegativeZero( value:any )"],["isNegativeZero.isPrimitive","isNegativeZero.isPrimitive( value:any )"],["isNegativeZero.isObject","isNegativeZero.isObject( value:any )"],["isNodeBuiltin","isNodeBuiltin( str:string )"],["isNodeDuplexStreamLike","isNodeDuplexStreamLike( value:any )"],["isNodeReadableStreamLike","isNodeReadableStreamLike( value:any )"],["isNodeREPL","isNodeREPL()"],["isNodeStreamLike","isNodeStreamLike( value:any )"],["isNodeTransformStreamLike","isNodeTransformStreamLike( value:any )"],["isNodeWritableStreamLike","isNodeWritableStreamLike( value:any )"],["isNonConfigurableProperty","isNonConfigurableProperty( value:any, property:any )"],["isNonConfigurablePropertyIn","isNonConfigurablePropertyIn( value:any, property:any )"],["isNonEnumerableProperty","isNonEnumerableProperty( value:any, property:any )"],["isNonEnumerablePropertyIn","isNonEnumerablePropertyIn( value:any, property:any )"],["isNonNegativeFinite","isNonNegativeFinite( value:any )"],["isNonNegativeFinite.isPrimitive","isNonNegativeFinite.isPrimitive( value:any )"],["isNonNegativeFinite.isObject","isNonNegativeFinite.isObject( value:any )"],["isNonNegativeInteger","isNonNegativeInteger( value:any )"],["isNonNegativeInteger.isPrimitive","isNonNegativeInteger.isPrimitive( value:any )"],["isNonNegativeInteger.isObject","isNonNegativeInteger.isObject( value:any )"],["isNonNegativeIntegerArray","isNonNegativeIntegerArray( value:any )"],["isNonNegativeIntegerArray.primitives","isNonNegativeIntegerArray.primitives( value:any )"],["isNonNegativeIntegerArray.objects","isNonNegativeIntegerArray.objects( value:any )"],["isNonNegativeNumber","isNonNegativeNumber( value:any )"],["isNonNegativeNumber.isPrimitive","isNonNegativeNumber.isPrimitive( value:any )"],["isNonNegativeNumber.isObject","isNonNegativeNumber.isObject( value:any )"],["isNonNegativeNumberArray","isNonNegativeNumberArray( value:any )"],["isNonNegativeNumberArray.primitives","isNonNegativeNumberArray.primitives( value:any )"],["isNonNegativeNumberArray.objects","isNonNegativeNumberArray.objects( value:any )"],["isNonPositiveFinite","isNonPositiveFinite( value:any )"],["isNonPositiveFinite.isPrimitive","isNonPositiveFinite.isPrimitive( value:any )"],["isNonPositiveFinite.isObject","isNonPositiveFinite.isObject( value:any )"],["isNonPositiveInteger","isNonPositiveInteger( value:any )"],["isNonPositiveInteger.isPrimitive","isNonPositiveInteger.isPrimitive( value:any )"],["isNonPositiveInteger.isObject","isNonPositiveInteger.isObject( value:any )"],["isNonPositiveIntegerArray","isNonPositiveIntegerArray( value:any )"],["isNonPositiveIntegerArray.primitives","isNonPositiveIntegerArray.primitives( value:any )"],["isNonPositiveIntegerArray.objects","isNonPositiveIntegerArray.objects( value:any )"],["isNonPositiveNumber","isNonPositiveNumber( value:any )"],["isNonPositiveNumber.isPrimitive","isNonPositiveNumber.isPrimitive( value:any )"],["isNonPositiveNumber.isObject","isNonPositiveNumber.isObject( value:any )"],["isNonPositiveNumberArray","isNonPositiveNumberArray( value:any )"],["isNonPositiveNumberArray.primitives","isNonPositiveNumberArray.primitives( value:any )"],["isNonPositiveNumberArray.objects","isNonPositiveNumberArray.objects( value:any )"],["isNonSymmetricMatrix","isNonSymmetricMatrix( value:any )"],["isNull","isNull( value:any )"],["isNullArray","isNullArray( value:any )"],["isNumber","isNumber( value:any )"],["isNumber.isPrimitive","isNumber.isPrimitive( value:any )"],["isNumber.isObject","isNumber.isObject( value:any )"],["isNumberArray","isNumberArray( value:any )"],["isNumberArray.primitives","isNumberArray.primitives( value:any )"],["isNumberArray.objects","isNumberArray.objects( value:any )"],["isNumericArray","isNumericArray( value:any )"],["isObject","isObject( value:any )"],["isObjectArray","isObjectArray( value:any )"],["isObjectLike","isObjectLike( value:any )"],["isOdd","isOdd( value:any )"],["isOdd.isPrimitive","isOdd.isPrimitive( value:any )"],["isOdd.isObject","isOdd.isObject( value:any )"],["isoWeeksInYear","isoWeeksInYear( [year:integer] )"],["isPascalcase","isPascalcase( value:any )"],["isPersymmetricMatrix","isPersymmetricMatrix( value:any )"],["isPlainObject","isPlainObject( value:any )"],["isPlainObjectArray","isPlainObjectArray( value:any )"],["isPositiveFinite","isPositiveFinite( value:any )"],["isPositiveFinite.isPrimitive","isPositiveFinite.isPrimitive( value:any )"],["isPositiveFinite.isObject","isPositiveFinite.isObject( value:any )"],["isPositiveInteger","isPositiveInteger( value:any )"],["isPositiveInteger.isPrimitive","isPositiveInteger.isPrimitive( value:any )"],["isPositiveInteger.isObject","isPositiveInteger.isObject( value:any )"],["isPositiveIntegerArray","isPositiveIntegerArray( value:any )"],["isPositiveIntegerArray.primitives","isPositiveIntegerArray.primitives( value:any )"],["isPositiveIntegerArray.objects","isPositiveIntegerArray.objects( value:any )"],["isPositiveNumber","isPositiveNumber( value:any )"],["isPositiveNumber.isPrimitive","isPositiveNumber.isPrimitive( value:any )"],["isPositiveNumber.isObject","isPositiveNumber.isObject( value:any )"],["isPositiveNumberArray","isPositiveNumberArray( value:any )"],["isPositiveNumberArray.primitives","isPositiveNumberArray.primitives( value:any )"],["isPositiveNumberArray.objects","isPositiveNumberArray.objects( value:any )"],["isPositiveZero","isPositiveZero( value:any )"],["isPositiveZero.isPrimitive","isPositiveZero.isPrimitive( value:any )"],["isPositiveZero.isObject","isPositiveZero.isObject( value:any )"],["isPrime","isPrime( value:any )"],["isPrime.isPrimitive","isPrime.isPrimitive( value:any )"],["isPrime.isObject","isPrime.isObject( value:any )"],["isPrimitive","isPrimitive( value:any )"],["isPrimitiveArray","isPrimitiveArray( value:any )"],["isPRNGLike","isPRNGLike( value:any )"],["isProbability","isProbability( value:any )"],["isProbability.isPrimitive","isProbability.isPrimitive( value:any )"],["isProbability.isObject","isProbability.isObject( value:any )"],["isProbabilityArray","isProbabilityArray( value:any )"],["isProbabilityArray.primitives","isProbabilityArray.primitives( value:any )"],["isProbabilityArray.objects","isProbabilityArray.objects( value:any )"],["isPropertyKey","isPropertyKey( value:any )"],["isPrototypeOf","isPrototypeOf( value:any, proto:Object|Function )"],["isRaggedNestedArray","isRaggedNestedArray( value:any )"],["isRangeError","isRangeError( value:any )"],["isReadableProperty","isReadableProperty( value:any, property:any )"],["isReadablePropertyIn","isReadablePropertyIn( value:any, property:any )"],["isReadOnlyProperty","isReadOnlyProperty( value:any, property:any )"],["isReadOnlyPropertyIn","isReadOnlyPropertyIn( value:any, property:any )"],["isReadWriteProperty","isReadWriteProperty( value:any, property:any )"],["isReadWritePropertyIn","isReadWritePropertyIn( value:any, property:any )"],["isReferenceError","isReferenceError( value:any )"],["isRegExp","isRegExp( value:any )"],["isRegExpString","isRegExpString( value:any )"],["isRelativePath","isRelativePath( value:any )"],["isRelativePath.posix","isRelativePath.posix( value:any )"],["isRelativePath.win32","isRelativePath.win32( value:any )"],["isRelativeURI","isRelativeURI( value:any )"],["isSafeInteger","isSafeInteger( value:any )"],["isSafeInteger.isPrimitive","isSafeInteger.isPrimitive( value:any )"],["isSafeInteger.isObject","isSafeInteger.isObject( value:any )"],["isSafeIntegerArray","isSafeIntegerArray( value:any )"],["isSafeIntegerArray.primitives","isSafeIntegerArray.primitives( value:any )"],["isSafeIntegerArray.objects","isSafeIntegerArray.objects( value:any )"],["isSameArray","isSameArray( v1:any, v2:any )"],["isSameComplex64","isSameComplex64( v1:any, v2:any )"],["isSameComplex64Array","isSameComplex64Array( v1:any, v2:any )"],["isSameComplex128","isSameComplex128( v1:any, v2:any )"],["isSameComplex128Array","isSameComplex128Array( v1:any, v2:any )"],["isSameDateObject","isSameDateObject( d1, d2 )"],["isSameFloat32Array","isSameFloat32Array( v1:any, v2:any )"],["isSameFloat64Array","isSameFloat64Array( v1:any, v2:any )"],["isSameNativeClass","isSameNativeClass( a:any, b:any )"],["isSameType","isSameType( a:any, b:any )"],["isSameValue","isSameValue( a:any, b:any )"],["isSameValueZero","isSameValueZero( a:any, b:any )"],["isSemVer","isSemVer( value:any )"],["isSharedArrayBuffer","isSharedArrayBuffer( value:any )"],["isSkewCentrosymmetricMatrix","isSkewCentrosymmetricMatrix( value:any )"],["isSkewPersymmetricMatrix","isSkewPersymmetricMatrix( value:any )"],["isSkewSymmetricMatrix","isSkewSymmetricMatrix( value:any )"],["isSlice","isSlice( value:any )"],["isSnakecase","isSnakecase( value:any )"],["isSquareMatrix","isSquareMatrix( value:any )"],["isSquareNumber","isSquareNumber( value:any )"],["isSquareNumber.isPrimitive","isSquareNumber.isPrimitive( value:any )"],["isSquareNumber.isObject","isSquareNumber.isObject( value:any )"],["isSquareTriangularNumber","isSquareTriangularNumber( value:any )"],["isSquareTriangularNumber.isPrimitive","isSquareTriangularNumber.isPrimitive( value:any )"],["isSquareTriangularNumber.isObject","isSquareTriangularNumber.isObject( value:any )"],["isStartcase","isStartcase( value:any )"],["isStrictEqual","isStrictEqual( a:any, b:any )"],["isString","isString( value:any )"],["isString.isPrimitive","isString.isPrimitive( value:any )"],["isString.isObject","isString.isObject( value:any )"],["isStringArray","isStringArray( value:any )"],["isStringArray.primitives","isStringArray.primitives( value:any )"],["isStringArray.objects","isStringArray.objects( value:any )"],["isSymbol","isSymbol( value:any )"],["isSymbolArray","isSymbolArray( value:any )"],["isSymbolArray.primitives","isSymbolArray.primitives( value:any )"],["isSymbolArray.objects","isSymbolArray.objects( value:any )"],["isSymmetricMatrix","isSymmetricMatrix( value:any )"],["isSyntaxError","isSyntaxError( value:any )"],["isTriangularNumber","isTriangularNumber( value:any )"],["isTriangularNumber.isPrimitive","isTriangularNumber.isPrimitive( value:any )"],["isTriangularNumber.isObject","isTriangularNumber.isObject( value:any )"],["isTruthy","isTruthy( value:any )"],["isTruthyArray","isTruthyArray( value:any )"],["isTypedArray","isTypedArray( value:any )"],["isTypedArrayLength","isTypedArrayLength( value:any )"],["isTypedArrayLike","isTypedArrayLike( value:any )"],["isTypeError","isTypeError( value:any )"],["isUint8Array","isUint8Array( value:any )"],["isUint8ClampedArray","isUint8ClampedArray( value:any )"],["isUint16Array","isUint16Array( value:any )"],["isUint32Array","isUint32Array( value:any )"],["isUNCPath","isUNCPath( value:any )"],["isUndefined","isUndefined( value:any )"],["isUndefinedOrNull","isUndefinedOrNull( value:any )"],["isUnityProbabilityArray","isUnityProbabilityArray( value:any )"],["isUppercase","isUppercase( value:any )"],["isURI","isURI( value:any )"],["isURIError","isURIError( value:any )"],["isVectorLike","isVectorLike( value:any )"],["isWellFormedString","isWellFormedString( str:any )"],["isWellFormedString.isPrimitive","isWellFormedString.isPrimitive( str:any )"],["isWellFormedString.isObject","isWellFormedString.isObject( str:any )"],["isWhitespace","isWhitespace( str:string )"],["isWritableProperty","isWritableProperty( value:any, property:any )"],["isWritablePropertyIn","isWritablePropertyIn( value:any, property:any )"],["isWriteOnlyProperty","isWriteOnlyProperty( value:any, property:any )"],["isWriteOnlyPropertyIn","isWriteOnlyPropertyIn( value:any, property:any )"],["iterAbs","iterAbs( iterator:Object )"],["iterAbs2","iterAbs2( iterator:Object )"],["iterAcos","iterAcos( iterator:Object )"],["iterAcosh","iterAcosh( iterator:Object )"],["iterAcot","iterAcot( iterator:Object )"],["iterAcoth","iterAcoth( iterator:Object )"],["iterAcovercos","iterAcovercos( iterator:Object )"],["iterAcoversin","iterAcoversin( iterator:Object )"],["iterAdd","iterAdd( iter0:Object, ...iterator:Object )"],["iterAdvance","iterAdvance( iterator:Object[, n:integer] )"],["iterAhavercos","iterAhavercos( iterator:Object )"],["iterAhaversin","iterAhaversin( iterator:Object )"],["iterAny","iterAny( iterator:Object )"],["iterAnyBy","iterAnyBy( iterator:Object, predicate:Function[, thisArg:any ] )"],["iterAsin","iterAsin( iterator:Object )"],["iterAsinh","iterAsinh( iterator:Object )"],["iterAtan","iterAtan( iterator:Object )"],["iterAtan2","iterAtan2( y:Object|number, x:Object|number )"],["iterAtanh","iterAtanh( iterator:Object )"],["iterator2array","iterator2array( iterator:Object[, out:ArrayLikeObject][, mapFcn:Function[, thisArg:any]] )"],["iterator2arrayview","iterator2arrayview( iterator:Object, dest:ArrayLikeObject[, begin:integer[, end:integer]][, mapFcn:Function[, thisArg:any]] )"],["iterator2arrayviewRight","iterator2arrayviewRight( iterator:Object, dest:ArrayLikeObject[, begin:integer[, end:integer]][, mapFcn:Function[, thisArg:any]] )"],["iteratorStream","iteratorStream( iterator:Object[, options:Object] )"],["iteratorStream.factory","iteratorStream.factory( [options:Object] )"],["iteratorStream.objectMode","iteratorStream.objectMode( iterator:Object[, options:Object] )"],["IteratorSymbol","IteratorSymbol"],["iterAvercos","iterAvercos( iterator:Object )"],["iterAversin","iterAversin( iterator:Object )"],["iterawgn","iterawgn( iterator:Object, sigma:number[, options:Object] )"],["iterawln","iterawln( iterator:Object, sigma:number[, options:Object] )"],["iterawun","iterawun( iterator:Object, sigma:number[, options:Object] )"],["iterBartlettHannPulse","iterBartlettHannPulse( [options:Object] )"],["iterBartlettPulse","iterBartlettPulse( [options:Object] )"],["iterBesselj0","iterBesselj0( iterator:Object )"],["iterBesselj1","iterBesselj1( iterator:Object )"],["iterBessely0","iterBessely0( iterator:Object )"],["iterBessely1","iterBessely1( iterator:Object )"],["iterBeta","iterBeta( x:Object|number, y:Object|number )"],["iterBetaln","iterBetaln( x:Object|number, y:Object|number )"],["iterBinet","iterBinet( iterator:Object )"],["iterCbrt","iterCbrt( iterator:Object )"],["iterCeil","iterCeil( iterator:Object )"],["iterCeil2","iterCeil2( iterator:Object )"],["iterCeil10","iterCeil10( iterator:Object )"],["iterCompositesSeq","iterCompositesSeq( [options:Object] )"],["iterConcat","iterConcat( iter0:Object, ...iterator:Object )"],["iterConstant","iterConstant( value:any[, options:Object] )"],["iterContinuedFraction","iterContinuedFraction( iterator:Object[, options:Object] )"],["iterContinuedFractionSeq","iterContinuedFractionSeq( x:number[, options:Object] )"],["iterCos","iterCos( iterator:Object )"],["iterCosh","iterCosh( iterator:Object )"],["iterCosineWave","iterCosineWave( [options:Object] )"],["iterCosm1","iterCosm1( iterator:Object )"],["iterCospi","iterCospi( iterator:Object )"],["iterCounter","iterCounter( iterator:Object )"],["iterCovercos","iterCovercos( iterator:Object )"],["iterCoversin","iterCoversin( iterator:Object )"],["iterCubesSeq","iterCubesSeq( [options:Object] )"],["itercugmean","itercugmean( iterator:Object )"],["itercuhmean","itercuhmean( iterator:Object )"],["itercumax","itercumax( iterator:Object )"],["itercumaxabs","itercumaxabs( iterator:Object )"],["itercumean","itercumean( iterator:Object )"],["itercumeanabs","itercumeanabs( iterator:Object )"],["itercumeanabs2","itercumeanabs2( iterator:Object )"],["itercumidrange","itercumidrange( iterator:Object )"],["itercumin","itercumin( iterator:Object )"],["itercuminabs","itercuminabs( iterator:Object )"],["itercuprod","itercuprod( iterator:Object )"],["itercurange","itercurange( iterator:Object )"],["itercusum","itercusum( iterator:Object )"],["itercusumabs","itercusumabs( iterator:Object )"],["itercusumabs2","itercusumabs2( iterator:Object )"],["iterDatespace","iterDatespace( start:integer|string|Date, stop:integer|string|Date[, N:integer][, options:Object] )"],["iterDedupe","iterDedupe( iterator:Object[, limit:integer] )"],["iterDedupeBy","iterDedupeBy( iterator:Object, [limit:integer,] fcn:Function )"],["iterDeg2rad","iterDeg2rad( iterator:Object )"],["iterDigamma","iterDigamma( iterator:Object )"],["iterDiracComb","iterDiracComb( [options:Object] )"],["iterDiracDelta","iterDiracDelta( iterator:Object )"],["iterDivide","iterDivide( iter0:Object, ...iterator:Object )"],["iterDoWhileEach","iterDoWhileEach( iterator:Object, predicate:Function, fcn:Function[, thisArg:any] )"],["iterEllipe","iterEllipe( iterator:Object )"],["iterEllipk","iterEllipk( iterator:Object )"],["iterEmpty","iterEmpty()"],["iterErf","iterErf( iterator:Object )"],["iterErfc","iterErfc( iterator:Object )"],["iterErfcinv","iterErfcinv( iterator:Object )"],["iterErfinv","iterErfinv( iterator:Object )"],["iterEta","iterEta( iterator:Object )"],["iterEvenIntegersSeq","iterEvenIntegersSeq( [options:Object] )"],["iterEvery","iterEvery( iterator:Object )"],["iterEveryBy","iterEveryBy( iterator:Object, predicate:Function[, thisArg:any ] )"],["iterExp","iterExp( iterator:Object )"],["iterExp2","iterExp2( iterator:Object )"],["iterExp10","iterExp10( iterator:Object )"],["iterExpit","iterExpit( iterator:Object )"],["iterExpm1","iterExpm1( iterator:Object )"],["iterExpm1rel","iterExpm1rel( iterator:Object )"],["iterFactorial","iterFactorial( iterator:Object )"],["iterFactorialln","iterFactorialln( iterator:Object )"],["iterFactorialsSeq","iterFactorialsSeq( [options:Object] )"],["iterFibonacciSeq","iterFibonacciSeq( [options:Object] )"],["iterFifthPowersSeq","iterFifthPowersSeq( [options:Object] )"],["iterFill","iterFill( iterator:Object, value:any[, begin:integer[, end:integer]] )"],["iterFilter","iterFilter( iterator:Object, predicate:Function[, thisArg:any] )"],["iterFilterMap","iterFilterMap( iterator:Object, fcn:Function[, thisArg:any] )"],["iterFirst","iterFirst( iterator:Object )"],["iterFlatTopPulse","iterFlatTopPulse( [options:Object] )"],["iterFloor","iterFloor( iterator:Object )"],["iterFloor2","iterFloor2( iterator:Object )"],["iterFloor10","iterFloor10( iterator:Object )"],["iterFlow","iterFlow( methods:Object )"],["iterForEach","iterForEach( iterator:Object, fcn:Function[, thisArg:any] )"],["iterFourthPowersSeq","iterFourthPowersSeq( [options:Object] )"],["iterFresnelc","iterFresnelc( iterator:Object )"],["iterFresnels","iterFresnels( iterator:Object )"],["iterGamma","iterGamma( iterator:Object )"],["iterGamma1pm1","iterGamma1pm1( iterator:Object )"],["iterGammaln","iterGammaln( iterator:Object )"],["iterHacovercos","iterHacovercos( iterator:Object )"],["iterHacoversin","iterHacoversin( iterator:Object )"],["iterHannPulse","iterHannPulse( [options:Object] )"],["iterHavercos","iterHavercos( iterator:Object )"],["iterHaversin","iterHaversin( iterator:Object )"],["iterHead","iterHead( iterator:Object, n:integer )"],["iterIncrspace","iterIncrspace( start:number, stop:number[, increment:number] )"],["iterIntegersSeq","iterIntegersSeq( [options:Object] )"],["iterIntersection","iterIntersection( iter0:Object, ...iterator:Object )"],["iterIntersectionByHash","iterIntersectionByHash( iter0:Object, ...iterator:Object, hashFcn:Function[, thisArg:any] )"],["iterInv","iterInv( iterator:Object )"],["iterLanczosPulse","iterLanczosPulse( [options:Object] )"],["iterLast","iterLast( iterator:Object )"],["iterLength","iterLength( iterator:Object )"],["iterLinspace","iterLinspace( start:number, stop:number[, N:integer] )"],["iterLn","iterLn( iterator:Object )"],["iterLog","iterLog( x:Object|number, b:Object|number )"],["iterLog1mexp","iterLog1mexp( iterator:Object )"],["iterLog1p","iterLog1p( iterator:Object )"],["iterLog1pexp","iterLog1pexp( iterator:Object )"],["iterLog2","iterLog2( iterator:Object )"],["iterLog10","iterLog10( iterator:Object )"],["iterLogit","iterLogit( iterator:Object )"],["iterLogspace","iterLogspace( start:number, stop:number[, N:integer][, options:Object] )"],["iterLucasSeq","iterLucasSeq( [options:Object] )"],["iterMap","iterMap( iterator:Object, fcn:Function[, thisArg:any] )"],["iterMapN","iterMapN( iter0:Object, ...iterator:Object, fcn:Function[, thisArg:any] )"],["itermax","itermax( iterator:Object )"],["itermaxabs","itermaxabs( iterator:Object )"],["itermean","itermean( iterator:Object )"],["itermeanabs","itermeanabs( iterator:Object )"],["itermeanabs2","itermeanabs2( iterator:Object )"],["itermidrange","itermidrange( iterator:Object )"],["itermin","itermin( iterator:Object )"],["iterminabs","iterminabs( iterator:Object )"],["itermmax","itermmax( iterator:Object, W:integer )"],["itermmaxabs","itermmaxabs( iterator:Object, W:integer )"],["itermmean","itermmean( iterator:Object, W:integer )"],["itermmeanabs","itermmeanabs( iterator:Object, W:integer )"],["itermmeanabs2","itermmeanabs2( iterator:Object, W:integer )"],["itermmidrange","itermmidrange( iterator:Object, W:integer )"],["itermmin","itermmin( iterator:Object, W:integer )"],["itermminabs","itermminabs( iterator:Object, W:integer )"],["iterMod","iterMod( iter0:Object, ...iterator:Object )"],["itermprod","itermprod( iterator:Object, W:integer )"],["itermrange","itermrange( iterator:Object, W:integer )"],["itermsum","itermsum( iterator:Object, W:integer )"],["itermsumabs","itermsumabs( iterator:Object, W:integer )"],["itermsumabs2","itermsumabs2( iterator:Object, W:integer )"],["iterMultiply","iterMultiply( iter0:Object, ...iterator:Object )"],["iterNegaFibonacciSeq","iterNegaFibonacciSeq( [options:Object] )"],["iterNegaLucasSeq","iterNegaLucasSeq( [options:Object] )"],["iterNegativeEvenIntegersSeq","iterNegativeEvenIntegersSeq( [options:Object] )"],["iterNegativeIntegersSeq","iterNegativeIntegersSeq( [options:Object] )"],["iterNegativeOddIntegersSeq","iterNegativeOddIntegersSeq( [options:Object] )"],["iterNone","iterNone( iterator:Object )"],["iterNoneBy","iterNoneBy( iterator:Object, predicate:Function[, thisArg:any ] )"],["iterNonFibonacciSeq","iterNonFibonacciSeq( [options:Object] )"],["iterNonNegativeEvenIntegersSeq","iterNonNegativeEvenIntegersSeq( [options:Object] )"],["iterNonNegativeIntegersSeq","iterNonNegativeIntegersSeq( [options:Object] )"],["iterNonPositiveEvenIntegersSeq","iterNonPositiveEvenIntegersSeq( [options:Object] )"],["iterNonPositiveIntegersSeq","iterNonPositiveIntegersSeq( [options:Object] )"],["iterNonSquaresSeq","iterNonSquaresSeq( [options:Object] )"],["iterNth","iterNth( iterator:Object, n:integer )"],["iterOddIntegersSeq","iterOddIntegersSeq( [options:Object] )"],["iterPeriodicSinc","iterPeriodicSinc( n:integer[, options:Object] )"],["iterPipeline","iterPipeline( iterFcn:Function|Array[, ...iterFcn:Function] )"],["iterPop","iterPop( iterator:Object[, clbk:Function[, thisArg:any]] )"],["iterPositiveEvenIntegersSeq","iterPositiveEvenIntegersSeq( [options:Object] )"],["iterPositiveIntegersSeq","iterPositiveIntegersSeq( [options:Object] )"],["iterPositiveOddIntegersSeq","iterPositiveOddIntegersSeq( [options:Object] )"],["iterPow","iterPow( base:Object|number, exponent:Object|number )"],["iterPrimesSeq","iterPrimesSeq( [options:Object] )"],["iterprod","iterprod( iterator:Object )"],["iterPulse","iterPulse( [options:Object] )"],["iterPush","iterPush( iterator:Object, ...items:any )"],["iterRad2deg","iterRad2deg( iterator:Object )"],["iterRamp","iterRamp( iterator:Object )"],["iterrange","iterrange( iterator:Object )"],["iterReject","iterReject( iterator:Object, predicate:Function[, thisArg:any] )"],["iterReplicate","iterReplicate( iterator:Object, n:integer )"],["iterReplicateBy","iterReplicateBy( iterator:Object, fcn:Function[, thisArg:any] )"],["iterRound","iterRound( iterator:Object )"],["iterRound2","iterRound2( iterator:Object )"],["iterRound10","iterRound10( iterator:Object )"],["iterRsqrt","iterRsqrt( iterator:Object )"],["iterSawtoothWave","iterSawtoothWave( [options:Object] )"],["iterShift","iterShift( iterator:Object[, clbk:Function[, thisArg:any]] )"],["iterSignum","iterSignum( iterator:Object )"],["iterSin","iterSin( iterator:Object )"],["iterSinc","iterSinc( iterator:Object )"],["iterSineWave","iterSineWave( [options:Object] )"],["iterSinh","iterSinh( iterator:Object )"],["iterSinpi","iterSinpi( iterator:Object )"],["iterSlice","iterSlice( iterator:Object[, begin:integer[, end:integer]] )"],["iterSome","iterSome( iterator:Object, n:number )"],["iterSomeBy","iterSomeBy( iterator:Object, n:integer, predicate:Function[, thisArg:any ] )"],["iterSpence","iterSpence( iterator:Object )"],["iterSqrt","iterSqrt( iterator:Object )"],["iterSqrt1pm1","iterSqrt1pm1( iterator:Object )"],["iterSquaredTriangularSeq","iterSquaredTriangularSeq( [options:Object] )"],["iterSquaresSeq","iterSquaresSeq( [options:Object] )"],["iterSquareWave","iterSquareWave( [options:Object] )"],["iterstdev","iterstdev( iterator:Object[, mean:number] )"],["iterStep","iterStep( start:number, increment:number[, N:number] )"],["iterStrided","iterStrided( iterator:Object, stride:integer[, offset:integer[, eager:boolean]] )"],["iterStridedBy","iterStridedBy( iterator:Object, fcn:Function[, offset:integer[, eager:boolean]][, thisArg:any] )"],["iterSubtract","iterSubtract( iter0:Object, ...iterator:Object )"],["itersum","itersum( iterator:Object )"],["itersumabs","itersumabs( iterator:Object )"],["itersumabs2","itersumabs2( iterator:Object )"],["iterTan","iterTan( iterator:Object )"],["iterTanh","iterTanh( iterator:Object )"],["iterThunk","iterThunk( iterFcn:Function[, ...args:any] )"],["iterTriangleWave","iterTriangleWave( [options:Object] )"],["iterTriangularSeq","iterTriangularSeq( [options:Object] )"],["iterTribonnaciSeq","iterTribonnaciSeq( [options:Object] )"],["iterTrigamma","iterTrigamma( iterator:Object )"],["iterTrunc","iterTrunc( iterator:Object )"],["iterTrunc2","iterTrunc2( iterator:Object )"],["iterTrunc10","iterTrunc10( iterator:Object )"],["iterUnion","iterUnion( iter0:Object, ...iterator:Object )"],["iterUnique","iterUnique( iterator:Object )"],["iterUniqueBy","iterUniqueBy( iterator:Object, predicate:Function[, thisArg:any] )"],["iterUniqueByHash","iterUniqueByHash( iterator:Object, hashFcn:Function[, thisArg:any] )"],["iterUnitspace","iterUnitspace( start:number[, stop:number] )"],["iterUnshift","iterUnshift( iterator:Object, ...items:any )"],["iterUntilEach","iterUntilEach( iterator:Object, predicate:Function, fcn:Function[, thisArg:any] )"],["itervariance","itervariance( iterator:Object[, mean:number] )"],["iterVercos","iterVercos( iterator:Object )"],["iterVersin","iterVersin( iterator:Object )"],["iterWhileEach","iterWhileEach( iterator:Object, predicate:Function, fcn:Function[, thisArg:any] )"],["iterZeta","iterZeta( iterator:Object )"],["joinStream","joinStream( [options:Object] )"],["joinStream.factory","joinStream.factory( [options:Object] )"],["joinStream.objectMode","joinStream.objectMode( [options:Object] )"],["kde2d","kde2d( x:Array<number>, y:Array<number>[, options:Object] )"],["kebabcase","kebabcase( str:string )"],["keyBy","keyBy( collection:Array|TypedArray|Object, fcn:Function[, thisArg:any] )"],["keyByRight","keyByRight( collection:Array|TypedArray|Object, fcn:Function[, thisArg:any] )"],["keysIn","keysIn( obj:any )"],["kruskalTest","kruskalTest( ...x:Array[, options:Object] )"],["kstest","kstest( x:Array<number>, y:Function|string[, ...params:number][, options:Object] )"],["last","last( str:string[, n:integer][, options:Object] )"],["leveneTest","leveneTest( x:Array<number>[, ...y:Array<number>[, options:Object]] )"],["LinkedList","LinkedList()"],["linspace","linspace( start:number|ComplexLike, stop:number|ComplexLike, length:integer[, options:Object] )"],["linspace.assign","linspace.assign( start:number|ComplexLike, stop:number|ComplexLike, out:ArrayLikeObject[, options:Object] )"],["LIU_NEGATIVE_OPINION_WORDS_EN","LIU_NEGATIVE_OPINION_WORDS_EN()"],["LIU_POSITIVE_OPINION_WORDS_EN","LIU_POSITIVE_OPINION_WORDS_EN()"],["LN_HALF","LN_HALF"],["LN_PI","LN_PI"],["LN_SQRT_TWO_PI","LN_SQRT_TWO_PI"],["LN_TWO_PI","LN_TWO_PI"],["LN2","LN2"],["LN10","LN10"],["LOG2E","LOG2E"],["LOG10E","LOG10E"],["logspace","logspace( a:number, b:number[, length:integer] )"],["lowercase","lowercase( str:string )"],["lowercaseKeys","lowercaseKeys( obj:Object )"],["lowess","lowess( x:Array<number>, y:Array<number>[, options:Object] )"],["lpad","lpad( str:string, len:integer[, pad:string] )"],["ltrim","ltrim( str:string )"],["ltrimN","ltrimN( str:string, n:integer[, chars:Array|string] )"],["MALE_FIRST_NAMES_EN","MALE_FIRST_NAMES_EN()"],["map","map( arr:ArrayLikeObject|ndarray, fcn:Function[, thisArg:any] )"],["map.assign","map.assign( arr:ArrayLikeObject|ndarray, out:ArrayLikeObject|ndarray, fcn:Function[, thisArg:any] )"],["map2","map2( x:ArrayLikeObject|ndarray, y:ArrayLikeObject|ndarray, fcn:Function[, thisArg:any] )"],["map2.assign","map2.assign( x:ArrayLikeObject|ndarray, y:ArrayLikeObject|ndarray, out:ArrayLikeObject|ndarray, fcn:Function[, thisArg:any] )"],["map2d","map2d( arr:ArrayLikeObject<ArrayLikeObject>, fcn:Function[, thisArg:any] )"],["map2Right","map2Right( x:ArrayLikeObject|ndarray, y:ArrayLikeObject|ndarray, fcn:Function[, thisArg:any] )"],["map2Right.assign","map2Right.assign( x:ArrayLikeObject|ndarray, y:ArrayLikeObject|ndarray, out:ArrayLikeObject|ndarray, fcn:Function[, thisArg:any] )"],["map3d","map3d( arr:ArrayLikeObject<ArrayLikeObject<ArrayLikeObject>>, fcn:Function[, thisArg:any] )"],["map4d","map4d( arr:ArrayLikeObject<ArrayLikeObject>, fcn:Function[, thisArg:any] )"],["map5d","map5d( arr:ArrayLikeObject<ArrayLikeObject>, fcn:Function[, thisArg:any] )"],["mapArguments","mapArguments( fcn:Function, clbk:Function[, thisArg:any] )"],["mapFun","mapFun( fcn:Function, n:integer[, thisArg:any] )"],["mapFunAsync","mapFunAsync( fcn:Function, n:integer, [options:Object,] done:Function )"],["mapFunAsync.factory","mapFunAsync.factory( [options:Object,] fcn:Function )"],["mapKeys","mapKeys( obj:Object, transform:Function )"],["mapKeysAsync","mapKeysAsync( obj:Object, [options:Object,] transform:Function, done:Function )"],["mapKeysAsync.factory","mapKeysAsync.factory( [options:Object,] transform:Function )"],["mapReduce","mapReduce( arr:ArrayLikeObject|ndarray, initial:any, mapper:Function, reducer:Function[, thisArg:any] )"],["mapReduceRight","mapReduceRight( arr:ArrayLikeObject|ndarray, initial:any, mapper:Function, reducer:Function[, thisArg:any] )"],["mapRight","mapRight( arr:ArrayLikeObject|ndarray, fcn:Function[, thisArg:any] )"],["mapRight.assign","mapRight.assign( arr:ArrayLikeObject|ndarray, out:ArrayLikeObject|ndarray, fcn:Function[, thisArg:any] )"],["mapValues","mapValues( obj:Object, transform:Function )"],["mapValuesAsync","mapValuesAsync( obj:Object, [options:Object,] transform:Function, done:Function )"],["mapValuesAsync.factory","mapValuesAsync.factory( [options:Object,] transform:Function )"],["maskArguments","maskArguments( fcn:Function, mask:ArrayLikeObject[, thisArg:any] )"],["MAX_ARRAY_LENGTH","MAX_ARRAY_LENGTH"],["MAX_TYPED_ARRAY_LENGTH","MAX_TYPED_ARRAY_LENGTH"],["maybeBroadcastArray","maybeBroadcastArray( x:ndarray, shape:ArrayLikeObject )"],["maybeBroadcastArrays","maybeBroadcastArrays( ...arrays:ndarray|ArrayLikeObject<ndarray> )"],["memoize","memoize( fcn:Function[, hashFunction:Function] )"],["merge","merge( target:Object, ...source:Object )"],["merge.factory","merge.factory( options:Object )"],["MILLISECONDS_IN_DAY","MILLISECONDS_IN_DAY"],["MILLISECONDS_IN_HOUR","MILLISECONDS_IN_HOUR"],["MILLISECONDS_IN_MINUTE","MILLISECONDS_IN_MINUTE"],["MILLISECONDS_IN_SECOND","MILLISECONDS_IN_SECOND"],["MILLISECONDS_IN_WEEK","MILLISECONDS_IN_WEEK"],["MINARD_NAPOLEONS_MARCH","MINARD_NAPOLEONS_MARCH( [options:Object] )"],["MINUTES_IN_DAY","MINUTES_IN_DAY"],["MINUTES_IN_HOUR","MINUTES_IN_HOUR"],["MINUTES_IN_WEEK","MINUTES_IN_WEEK"],["minutesInMonth","minutesInMonth( [month:string|Date|integer[, year:integer]] )"],["minutesInYear","minutesInYear( [value:integer|Date] )"],["MOBY_DICK","MOBY_DICK()"],["MONTH_NAMES_EN","MONTH_NAMES_EN()"],["MONTHS_IN_YEAR","MONTHS_IN_YEAR"],["moveProperty","moveProperty( source:Object, prop:string, target:Object )"],["MultiSlice","MultiSlice( ...slice )"],["MultiSlice.prototype.ndims","MultiSlice.prototype.ndims"],["MultiSlice.prototype.data","MultiSlice.prototype.data"],["MultiSlice.prototype.toString","MultiSlice.prototype.toString()"],["MultiSlice.prototype.toJSON","MultiSlice.prototype.toJSON()"],["namedtypedtuple","namedtypedtuple( fields:Array<string>[, options:Object] )"],["NAN","NAN"],["naryFunction","naryFunction( fcn:Function, arity:integer[, thisArg:any] )"],["nativeClass","nativeClass( value:any )"],["ndarray","ndarray( dtype:string, buffer:ArrayLikeObject|TypedArray|Buffer, shape:ArrayLikeObject<integer>, strides:ArrayLikeObject<integer>, offset:integer, order:string[, options:Object] )"],["ndarray.prototype.byteLength","ndarray.prototype.byteLength"],["ndarray.prototype.BYTES_PER_ELEMENT","ndarray.prototype.BYTES_PER_ELEMENT"],["ndarray.prototype.data","ndarray.prototype.data"],["ndarray.prototype.dtype","ndarray.prototype.dtype"],["ndarray.prototype.flags","ndarray.prototype.flags"],["ndarray.prototype.length","ndarray.prototype.length"],["ndarray.prototype.ndims","ndarray.prototype.ndims"],["ndarray.prototype.offset","ndarray.prototype.offset"],["ndarray.prototype.order","ndarray.prototype.order"],["ndarray.prototype.shape","ndarray.prototype.shape"],["ndarray.prototype.strides","ndarray.prototype.strides"],["ndarray.prototype.get","ndarray.prototype.get( ...idx:integer )"],["ndarray.prototype.iget","ndarray.prototype.iget( idx:integer )"],["ndarray.prototype.set","ndarray.prototype.set( ...idx:integer, v:any )"],["ndarray.prototype.iset","ndarray.prototype.iset( idx:integer, v:any )"],["ndarray.prototype.toString","ndarray.prototype.toString()"],["ndarray.prototype.toJSON","ndarray.prototype.toJSON()"],["ndarray2array","ndarray2array( x:ndarray )"],["ndarrayCastingModes","ndarrayCastingModes()"],["ndarrayDataBuffer","ndarrayDataBuffer( x:ndarray )"],["ndarrayDataType","ndarrayDataType( x:ndarray )"],["ndarrayDataTypes","ndarrayDataTypes( [kind:string] )"],["ndarrayDispatch","ndarrayDispatch( fcns:Function|ArrayLikeObject<Function>, types:ArrayLikeObject, data:ArrayLikeObject|null, nargs:integer, nin:integer, nout:integer )"],["ndarrayFlag","ndarrayFlag( x:ndarray, name:string|symbol )"],["ndarrayFlags","ndarrayFlags( x:ndarray )"],["ndarrayIndexModes","ndarrayIndexModes()"],["ndarrayMinDataType","ndarrayMinDataType( value:any )"],["ndarrayMostlySafeCasts","ndarrayMostlySafeCasts( [dtype:any] )"],["ndarrayNextDataType","ndarrayNextDataType( [dtype:any] )"],["ndarrayOffset","ndarrayOffset( x:ndarray )"],["ndarrayOrder","ndarrayOrder( x:ndarray )"],["ndarrayOrders","ndarrayOrders()"],["ndarrayPromotionRules","ndarrayPromotionRules( [dtype1:any, dtype2:any] )"],["ndarraySafeCasts","ndarraySafeCasts( [dtype:any] )"],["ndarraySameKindCasts","ndarraySameKindCasts( [dtype:any] )"],["ndarrayShape","ndarrayShape( x:ndarray )"],["ndarrayStride","ndarrayStride( x:ndarray, dim:integer )"],["ndarrayStrides","ndarrayStrides( x:ndarray )"],["ndat","ndat( x:ndarray[, ...indices:integer] )"],["ndempty","ndempty( shape:ArrayLikeObject<integer>|integer[, options:Object] )"],["ndemptyLike","ndemptyLike( x:ndarray[, options:Object] )"],["ndims","ndims( x:ndarray )"],["nditerColumnEntries","nditerColumnEntries( x:ndarray[, options:Object] )"],["nditerColumns","nditerColumns( x:ndarray[, options:Object] )"],["nditerEntries","nditerEntries( x:ndarray[, options:Object] )"],["nditerIndices","nditerIndices( shape:Array<integer>[, options:Object] )"],["nditerMatrices","nditerMatrices( x:ndarray[, options:Object] )"],["nditerMatrixEntries","nditerMatrixEntries( x:ndarray[, options:Object] )"],["nditerRowEntries","nditerRowEntries( x:ndarray[, options:Object] )"],["nditerRows","nditerRows( x:ndarray[, options:Object] )"],["nditerValues","nditerValues( x:ndarray[, options:Object] )"],["ndslice","ndslice( x:ndarray, ...s:MultiSlice|Slice|null|undefined|integer|ArrayLike[, options:Object] )"],["ndsliceAssign","ndsliceAssign( x:ndarray, y:ndarray, ...s:MultiSlice|Slice|null|undefined|integer|ArrayLike[, options:Object] )"],["ndsliceDimension","ndsliceDimension( x:ndarray, dim:integer, slice:Slice|integer|null|undefined[, options:Object] )"],["ndsliceDimensionFrom","ndsliceDimensionFrom( x:ndarray, dim:integer, start:integer[, options:Object] )"],["ndsliceDimensionTo","ndsliceDimensionTo( x:ndarray, dim:integer, stop:integer[, options:Object] )"],["ndsliceFrom","ndsliceFrom( x:ndarray, ...start:null|void|integer[, options:Object] )"],["ndsliceTo","ndsliceTo( x:ndarray, ...stop:null|void|integer[, options:Object] )"],["ndzeros","ndzeros( shape:ArrayLikeObject<integer>|integer[, options:Object] )"],["ndzerosLike","ndzerosLike( x:ndarray[, options:Object] )"],["nextGraphemeClusterBreak","nextGraphemeClusterBreak( str:string[, fromIndex:integer] )"],["nextTick","nextTick( clbk[, ...args] )"],["NIGHTINGALES_ROSE","NIGHTINGALES_ROSE()"],["NINF","NINF"],["NODE_VERSION","NODE_VERSION"],["none","none( collection:Array|TypedArray|Object )"],["noneBy","noneBy( collection:Array|TypedArray|Object, predicate:Function[, thisArg:any ] )"],["noneByAsync","noneByAsync( collection:Array|TypedArray|Object, [options:Object,] predicate:Function, done:Function )"],["noneByAsync.factory","noneByAsync.factory( [options:Object,] predicate:Function )"],["noneByRight","noneByRight( collection:Array|TypedArray|Object, predicate:Function[, thisArg:any ] )"],["noneByRightAsync","noneByRightAsync( collection:Array|TypedArray|Object, [options:Object,] predicate:Function, done:Function )"],["noneByRightAsync.factory","noneByRightAsync.factory( [options:Object,] predicate:Function )"],["noneInBy","noneInBy( object:Object, predicate:Function[, thisArg:any ] )"],["nonEnumerableProperties","nonEnumerableProperties( value:any )"],["nonEnumerablePropertiesIn","nonEnumerablePropertiesIn( value:any )"],["nonEnumerablePropertyNames","nonEnumerablePropertyNames( value:any )"],["nonEnumerablePropertyNamesIn","nonEnumerablePropertyNamesIn( value:any )"],["nonEnumerablePropertySymbols","nonEnumerablePropertySymbols( value:any )"],["nonEnumerablePropertySymbolsIn","nonEnumerablePropertySymbolsIn( value:any )"],["noneOwnBy","noneOwnBy( object:Object, predicate:Function[, thisArg:any ] )"],["nonIndexKeys","nonIndexKeys( obj:any )"],["noop","noop()"],["now","now()"],["NUM_CPUS","NUM_CPUS"],["num2words","num2words( value:integer[, options:Object] )"],["Number","Number( value:number )"],["numel","numel( x:ndarray )"],["numelDimension","numelDimension( x:ndarray, dim:integer )"],["numGraphemeClusters","numGraphemeClusters( str:string )"],["Object","Object( value:any )"],["Object.assign","Object.assign( target:Object, ...sources:Object )"],["Object.create","Object.create( prototype:Object, properties:Object )"],["Object.defineProperties","Object.defineProperties( obj:Object, properties:Object )"],["Object.defineProperty","Object.defineProperty( obj:Object, key:string, descriptor:Object )"],["Object.entries","Object.entries( obj:Object )"],["Object.freeze","Object.freeze( obj:Object )"],["Object.getOwnPropertyDescriptor","Object.getOwnPropertyDescriptor( obj:Object, key:string )"],["Object.getOwnPropertyDescriptors","Object.getOwnPropertyDescriptors( obj:Object )"],["Object.getOwnPropertyNames","Object.getOwnPropertyNames( obj:Object )"],["Object.getOwnPropertySymbols","Object.getOwnPropertySymbols( obj:Object )"],["Object.getPrototypeOf","Object.getPrototypeOf( obj:Object )"],["Object.hasOwn","Object.hasOwn( obj:Object, p:string )"],["Object.is","Object.is( value1:any, value2:any )"],["Object.isExtensible","Object.isExtensible( obj:Object )"],["Object.isFrozen","Object.isFrozen( obj:Object )"],["Object.isSealed","Object.isSealed( obj:Object )"],["Object.keys","Object.keys( obj:Object )"],["Object.preventExtensions","Object.preventExtensions( obj:Object )"],["Object.seal","Object.seal( obj:Object )"],["Object.setPrototypeOf","Object.setPrototypeOf( obj:Object, proto:Object )"],["Object.values","Object.values( obj:Object )"],["Object.prototype.toLocaleString","Object.prototype.toLocaleString()"],["Object.prototype.toString","Object.prototype.toString()"],["Object.prototype.valueOf","Object.prototype.valueOf()"],["Object.prototype.hasOwnProperty","Object.prototype.hasOwnProperty( p:string )"],["Object.prototype.isPrototypeOf","Object.prototype.isPrototypeOf( obj:Object )"],["Object.prototype.propertyIsEnumerable","Object.prototype.propertyIsEnumerable( p:string )"],["Object.prototype.constructor","Object.prototype.constructor"],["objectEntries","objectEntries( obj:ObjectLike )"],["objectEntriesIn","objectEntriesIn( obj:ObjectLike )"],["objectFromEntries","objectFromEntries( entries:Array<Array> )"],["objectInverse","objectInverse( obj:ObjectLike[, options:Object] )"],["objectInverseBy","objectInverseBy( obj:ObjectLike, [options:Object,] transform:Function )"],["objectKeys","objectKeys( value:any )"],["objectValues","objectValues( obj:ObjectLike )"],["objectValuesIn","objectValuesIn( obj:ObjectLike )"],["omit","omit( obj:Object, keys:string|Array )"],["omitBy","omitBy( obj:Object, predicate:Function )"],["open","open( path:string|Buffer[, flags:string|number[, mode:integer]], clbk:Function )"],["open.sync","open.sync( path:string|Buffer[, flags:string|number[, mode:integer]] )"],["openURL","openURL( url:string )"],["ordinalize","ordinalize( value:string|integer[, options:Object] )"],["PACE_BOSTON_HOUSE_PRICES","PACE_BOSTON_HOUSE_PRICES()"],["pad","pad( str:string, len:integer[, options:Object] )"],["padjust","padjust( pvals:Array<number>, method:string[, comparisons:integer] )"],["papply","papply( fcn:Function, ...args:any )"],["papplyRight","papplyRight( fcn:Function, ...args:any )"],["parallel","parallel( files:Array<string>, [options:Object,] clbk:Function )"],["parseJSON","parseJSON( str:string[, reviver:Function] )"],["pascalcase","pascalcase( str:string )"],["PATH_DELIMITER","PATH_DELIMITER"],["PATH_DELIMITER_POSIX","PATH_DELIMITER_POSIX"],["PATH_DELIMITER_WIN32","PATH_DELIMITER_WIN32"],["PATH_SEP","PATH_SEP"],["PATH_SEP_POSIX","PATH_SEP_POSIX"],["PATH_SEP_WIN32","PATH_SEP_WIN32"],["pcorrtest","pcorrtest( x:Array<number>, y:Array<number>[, options:Object] )"],["percentEncode","percentEncode( str:string )"],["PHI","PHI"],["PI","PI"],["PI_SQUARED","PI_SQUARED"],["pick","pick( obj:Object, keys:string|Array )"],["pickArguments","pickArguments( fcn:Function, indices:Array<integer>[, thisArg:any] )"],["pickBy","pickBy( obj:Object, predicate:Function )"],["PINF","PINF"],["pkg2alias","pkg2alias( pkg:string )"],["pkg2related","pkg2related( pkg:string )"],["pkg2standalone","pkg2standalone( pkg:string )"],["PLATFORM","PLATFORM"],["plot","plot( [x:Array|Array, y:Array|Array,] [options:Object] )"],["Plot","Plot( [x:Array|Array, y:Array|Array,] [options:Object] )"],["pluck","pluck( arr:Array, prop:string[, options:Object] )"],["pop","pop( collection:Array|TypedArray|Object )"],["porterStemmer","porterStemmer( word:string )"],["prepend","prepend( collection1:Array|TypedArray|Object, collection2:Array|TypedArray|Object )"],["prevGraphemeClusterBreak","prevGraphemeClusterBreak( str:string[, fromIndex:integer] )"],["PRIMES_100K","PRIMES_100K()"],["properties","properties( value:any )"],["propertiesIn","propertiesIn( value:any )"],["propertyDescriptor","propertyDescriptor( value:any, property:string|symbol )"],["propertyDescriptorIn","propertyDescriptorIn( value:any, property:string|symbol )"],["propertyDescriptors","propertyDescriptors( value:any )"],["propertyDescriptorsIn","propertyDescriptorsIn( value:any )"],["propertyNames","propertyNames( value:any )"],["propertyNamesIn","propertyNamesIn( value:any )"],["propertySymbols","propertySymbols( value:any )"],["propertySymbolsIn","propertySymbolsIn( value:any )"],["Proxy","Proxy( target:Object, handlers:Object )"],["Proxy.revocable","Proxy.revocable( target:Object, handlers:Object )"],["push","push( collection:Array|TypedArray|Object, ...items:any )"],["quarterOfYear","quarterOfYear( [month:integer|string|Date] )"],["random.array.arcsine","random.array.arcsine( len:integer, a:number, b:number[, options:Object] )"],["random.array.arcsine.assign","random.array.arcsine.assign( a:number, b:number, out:Array|Float64Array|Float32Array )"],["random.array.arcsine.factory","random.array.arcsine.factory( [a:number, b:number, ][options:Object] )"],["random.array.arcsine.PRNG","random.array.arcsine.PRNG"],["random.array.arcsine.seed","random.array.arcsine.seed"],["random.array.arcsine.seedLength","random.array.arcsine.seedLength"],["random.array.arcsine.state","random.array.arcsine.state"],["random.array.arcsine.stateLength","random.array.arcsine.stateLength"],["random.array.arcsine.byteLength","random.array.arcsine.byteLength"],["random.array.bernoulli","random.array.bernoulli( len:integer, p:number[, options:Object] )"],["random.array.bernoulli.assign","random.array.bernoulli.assign( p:number, out:Array|TypedArray )"],["random.array.bernoulli.factory","random.array.bernoulli.factory( [p:number, ][options:Object] )"],["random.array.bernoulli.PRNG","random.array.bernoulli.PRNG"],["random.array.bernoulli.seed","random.array.bernoulli.seed"],["random.array.bernoulli.seedLength","random.array.bernoulli.seedLength"],["random.array.bernoulli.state","random.array.bernoulli.state"],["random.array.bernoulli.stateLength","random.array.bernoulli.stateLength"],["random.array.bernoulli.byteLength","random.array.bernoulli.byteLength"],["random.array.beta","random.array.beta( len:integer, alpha:number, beta:number[, options:Object] )"],["random.array.beta.assign","random.array.beta.assign( alpha:number, beta:number, out:Array|Float64Array|Float32Array )"],["random.array.beta.factory","random.array.beta.factory( [alpha:number, beta:number, ][options:Object] )"],["random.array.beta.PRNG","random.array.beta.PRNG"],["random.array.beta.seed","random.array.beta.seed"],["random.array.beta.seedLength","random.array.beta.seedLength"],["random.array.beta.state","random.array.beta.state"],["random.array.beta.stateLength","random.array.beta.stateLength"],["random.array.beta.byteLength","random.array.beta.byteLength"],["random.array.betaprime","random.array.betaprime( len:integer, alpha:number, beta:number[, options:Object] )"],["random.array.betaprime.assign","random.array.betaprime.assign( alpha:number, beta:number, out:Array|Float64Array|Float32Array )"],["random.array.betaprime.factory","random.array.betaprime.factory( [alpha:number, beta:number, ][options:Object] )"],["random.array.betaprime.PRNG","random.array.betaprime.PRNG"],["random.array.betaprime.seed","random.array.betaprime.seed"],["random.array.betaprime.seedLength","random.array.betaprime.seedLength"],["random.array.betaprime.state","random.array.betaprime.state"],["random.array.betaprime.stateLength","random.array.betaprime.stateLength"],["random.array.betaprime.byteLength","random.array.betaprime.byteLength"],["random.array.binomial","random.array.binomial( len:integer, n:number, p:number[, options:Object] )"],["random.array.binomial.assign","random.array.binomial.assign( n:number, p:number, out:Array|TypedArray )"],["random.array.binomial.factory","random.array.binomial.factory( [n:number, p:number, ][options:Object] )"],["random.array.binomial.PRNG","random.array.binomial.PRNG"],["random.array.binomial.seed","random.array.binomial.seed"],["random.array.binomial.seedLength","random.array.binomial.seedLength"],["random.array.binomial.state","random.array.binomial.state"],["random.array.binomial.stateLength","random.array.binomial.stateLength"],["random.array.binomial.byteLength","random.array.binomial.byteLength"],["random.array.cauchy","random.array.cauchy( len:integer, x0:number, gamma:number[, options:Object] )"],["random.array.cauchy.assign","random.array.cauchy.assign( x0:number, gamma:number, out:Array|Float64Array|Float32Array )"],["random.array.cauchy.factory","random.array.cauchy.factory( [x0:number, gamma:number, ][options:Object] )"],["random.array.cauchy.PRNG","random.array.cauchy.PRNG"],["random.array.cauchy.seed","random.array.cauchy.seed"],["random.array.cauchy.seedLength","random.array.cauchy.seedLength"],["random.array.cauchy.state","random.array.cauchy.state"],["random.array.cauchy.stateLength","random.array.cauchy.stateLength"],["random.array.cauchy.byteLength","random.array.cauchy.byteLength"],["random.array.chi","random.array.chi( len:integer, k:number[, options:Object] )"],["random.array.chi.assign","random.array.chi.assign( k:number, out:Array|Float64Array|Float32Array )"],["random.array.chi.factory","random.array.chi.factory( [k:number, ][options:Object] )"],["random.array.chi.PRNG","random.array.chi.PRNG"],["random.array.chi.seed","random.array.chi.seed"],["random.array.chi.seedLength","random.array.chi.seedLength"],["random.array.chi.state","random.array.chi.state"],["random.array.chi.stateLength","random.array.chi.stateLength"],["random.array.chi.byteLength","random.array.chi.byteLength"],["random.array.chisquare","random.array.chisquare( len:integer, k:number[, options:Object] )"],["random.array.chisquare.assign","random.array.chisquare.assign( k:number, out:Array|Float64Array|Float32Array )"],["random.array.chisquare.factory","random.array.chisquare.factory( [k:number, ][options:Object] )"],["random.array.chisquare.PRNG","random.array.chisquare.PRNG"],["random.array.chisquare.seed","random.array.chisquare.seed"],["random.array.chisquare.seedLength","random.array.chisquare.seedLength"],["random.array.chisquare.state","random.array.chisquare.state"],["random.array.chisquare.stateLength","random.array.chisquare.stateLength"],["random.array.chisquare.byteLength","random.array.chisquare.byteLength"],["random.array.cosine","random.array.cosine( len:integer, mu:number, s:number[, options:Object] )"],["random.array.cosine.assign","random.array.cosine.assign( mu:number, s:number, out:Array|Float64Array|Float32Array )"],["random.array.cosine.factory","random.array.cosine.factory( [mu:number, s:number, ][options:Object] )"],["random.array.cosine.PRNG","random.array.cosine.PRNG"],["random.array.cosine.seed","random.array.cosine.seed"],["random.array.cosine.seedLength","random.array.cosine.seedLength"],["random.array.cosine.state","random.array.cosine.state"],["random.array.cosine.stateLength","random.array.cosine.stateLength"],["random.array.cosine.byteLength","random.array.cosine.byteLength"],["random.array.discreteUniform","random.array.discreteUniform( len:integer, a:number, b:number[, options:Object] )"],["random.array.discreteUniform.assign","random.array.discreteUniform.assign( a:number, b:number, out:Array|TypedArray )"],["random.array.discreteUniform.factory","random.array.discreteUniform.factory( [a:number, b:number, ][options:Object] )"],["random.array.discreteUniform.PRNG","random.array.discreteUniform.PRNG"],["random.array.discreteUniform.seed","random.array.discreteUniform.seed"],["random.array.discreteUniform.seedLength","random.array.discreteUniform.seedLength"],["random.array.discreteUniform.state","random.array.discreteUniform.state"],["random.array.discreteUniform.stateLength","random.array.discreteUniform.stateLength"],["random.array.discreteUniform.byteLength","random.array.discreteUniform.byteLength"],["random.array.erlang","random.array.erlang( len:integer, k:number, lambda:number[, options:Object] )"],["random.array.erlang.assign","random.array.erlang.assign( k:number, lambda:number, out:Array|Float64Array|Float32Array )"],["random.array.erlang.factory","random.array.erlang.factory( [k:number, lambda:number, ][options:Object] )"],["random.array.erlang.PRNG","random.array.erlang.PRNG"],["random.array.erlang.seed","random.array.erlang.seed"],["random.array.erlang.seedLength","random.array.erlang.seedLength"],["random.array.erlang.state","random.array.erlang.state"],["random.array.erlang.stateLength","random.array.erlang.stateLength"],["random.array.erlang.byteLength","random.array.erlang.byteLength"],["random.array.exponential","random.array.exponential( len:integer, lambda:number[, options:Object] )"],["random.array.exponential.assign","random.array.exponential.assign( lambda:number, out:Array|Float64Array|Float32Array )"],["random.array.exponential.factory","random.array.exponential.factory( [lambda:number, ][options:Object] )"],["random.array.exponential.PRNG","random.array.exponential.PRNG"],["random.array.exponential.seed","random.array.exponential.seed"],["random.array.exponential.seedLength","random.array.exponential.seedLength"],["random.array.exponential.state","random.array.exponential.state"],["random.array.exponential.stateLength","random.array.exponential.stateLength"],["random.array.exponential.byteLength","random.array.exponential.byteLength"],["random.array.f","random.array.f( len:integer, d1:number, d2:number[, options:Object] )"],["random.array.f.assign","random.array.f.assign( d1:number, d2:number, out:Array|Float64Array|Float32Array )"],["random.array.f.factory","random.array.f.factory( [d1:number, d2:number, ][options:Object] )"],["random.array.f.PRNG","random.array.f.PRNG"],["random.array.f.seed","random.array.f.seed"],["random.array.f.seedLength","random.array.f.seedLength"],["random.array.f.state","random.array.f.state"],["random.array.f.stateLength","random.array.f.stateLength"],["random.array.f.byteLength","random.array.f.byteLength"],["random.array.frechet","random.array.frechet( len:integer, alpha:number, s:number, m:number[, options:Object] )"],["random.array.frechet.assign","random.array.frechet.assign( alpha:number, s:number, m:number, out:Array|Float64Array|Float32Array )"],["random.array.frechet.factory","random.array.frechet.factory( [alpha:number, s:number, m:number, ][options:Object] )"],["random.array.frechet.PRNG","random.array.frechet.PRNG"],["random.array.frechet.seed","random.array.frechet.seed"],["random.array.frechet.seedLength","random.array.frechet.seedLength"],["random.array.frechet.state","random.array.frechet.state"],["random.array.frechet.stateLength","random.array.frechet.stateLength"],["random.array.frechet.byteLength","random.array.frechet.byteLength"],["random.array.gamma","random.array.gamma( len:integer, alpha:number, beta:number[, options:Object] )"],["random.array.gamma.assign","random.array.gamma.assign( alpha:number, beta:number, out:Array|Float64Array|Float32Array )"],["random.array.gamma.factory","random.array.gamma.factory( [alpha:number, beta:number, ][options:Object] )"],["random.array.gamma.PRNG","random.array.gamma.PRNG"],["random.array.gamma.seed","random.array.gamma.seed"],["random.array.gamma.seedLength","random.array.gamma.seedLength"],["random.array.gamma.state","random.array.gamma.state"],["random.array.gamma.stateLength","random.array.gamma.stateLength"],["random.array.gamma.byteLength","random.array.gamma.byteLength"],["random.array.geometric","random.array.geometric( len:integer, p:number[, options:Object] )"],["random.array.geometric.assign","random.array.geometric.assign( p:number, out:Array|TypedArray )"],["random.array.geometric.factory","random.array.geometric.factory( [p:number, ][options:Object] )"],["random.array.geometric.PRNG","random.array.geometric.PRNG"],["random.array.geometric.seed","random.array.geometric.seed"],["random.array.geometric.seedLength","random.array.geometric.seedLength"],["random.array.geometric.state","random.array.geometric.state"],["random.array.geometric.stateLength","random.array.geometric.stateLength"],["random.array.geometric.byteLength","random.array.geometric.byteLength"],["random.array.gumbel","random.array.gumbel( len:integer, mu:number, beta:number[, options:Object] )"],["random.array.gumbel.assign","random.array.gumbel.assign( mu:number, beta:number, out:Array|Float64Array|Float32Array )"],["random.array.gumbel.factory","random.array.gumbel.factory( [mu:number, beta:number, ][options:Object] )"],["random.array.gumbel.PRNG","random.array.gumbel.PRNG"],["random.array.gumbel.seed","random.array.gumbel.seed"],["random.array.gumbel.seedLength","random.array.gumbel.seedLength"],["random.array.gumbel.state","random.array.gumbel.state"],["random.array.gumbel.stateLength","random.array.gumbel.stateLength"],["random.array.gumbel.byteLength","random.array.gumbel.byteLength"],["random.array.hypergeometric","random.array.hypergeometric( len:integer, N:number, K:number, n:number[, options:Object] )"],["random.array.hypergeometric.assign","random.array.hypergeometric.assign( N:number, K:number, n:number, out:Array|TypedArray )"],["random.array.hypergeometric.factory","random.array.hypergeometric.factory( [N:number, K:number, n:number, ][options:Object] )"],["random.array.hypergeometric.PRNG","random.array.hypergeometric.PRNG"],["random.array.hypergeometric.seed","random.array.hypergeometric.seed"],["random.array.hypergeometric.seedLength","random.array.hypergeometric.seedLength"],["random.array.hypergeometric.state","random.array.hypergeometric.state"],["random.array.hypergeometric.stateLength","random.array.hypergeometric.stateLength"],["random.array.hypergeometric.byteLength","random.array.hypergeometric.byteLength"],["random.array.invgamma","random.array.invgamma( len:integer, alpha:number, beta:number[, options:Object] )"],["random.array.invgamma.assign","random.array.invgamma.assign( alpha:number, beta:number, out:Array|Float64Array|Float32Array )"],["random.array.invgamma.factory","random.array.invgamma.factory( [alpha:number, beta:number, ][options:Object] )"],["random.array.invgamma.PRNG","random.array.invgamma.PRNG"],["random.array.invgamma.seed","random.array.invgamma.seed"],["random.array.invgamma.seedLength","random.array.invgamma.seedLength"],["random.array.invgamma.state","random.array.invgamma.state"],["random.array.invgamma.stateLength","random.array.invgamma.stateLength"],["random.array.invgamma.byteLength","random.array.invgamma.byteLength"],["random.array.kumaraswamy","random.array.kumaraswamy( len:integer, a:number, b:number[, options:Object] )"],["random.array.kumaraswamy.assign","random.array.kumaraswamy.assign( a:number, b:number, out:Array|Float64Array|Float32Array )"],["random.array.kumaraswamy.factory","random.array.kumaraswamy.factory( [a:number, b:number, ][options:Object] )"],["random.array.kumaraswamy.PRNG","random.array.kumaraswamy.PRNG"],["random.array.kumaraswamy.seed","random.array.kumaraswamy.seed"],["random.array.kumaraswamy.seedLength","random.array.kumaraswamy.seedLength"],["random.array.kumaraswamy.state","random.array.kumaraswamy.state"],["random.array.kumaraswamy.stateLength","random.array.kumaraswamy.stateLength"],["random.array.kumaraswamy.byteLength","random.array.kumaraswamy.byteLength"],["random.array.laplace","random.array.laplace( len:integer, mu:number, b:number[, options:Object] )"],["random.array.laplace.assign","random.array.laplace.assign( mu:number, b:number, out:Array|Float64Array|Float32Array )"],["random.array.laplace.factory","random.array.laplace.factory( [mu:number, b:number, ][options:Object] )"],["random.array.laplace.PRNG","random.array.laplace.PRNG"],["random.array.laplace.seed","random.array.laplace.seed"],["random.array.laplace.seedLength","random.array.laplace.seedLength"],["random.array.laplace.state","random.array.laplace.state"],["random.array.laplace.stateLength","random.array.laplace.stateLength"],["random.array.laplace.byteLength","random.array.laplace.byteLength"],["random.array.levy","random.array.levy( len:integer, mu:number, c:number[, options:Object] )"],["random.array.levy.assign","random.array.levy.assign( mu:number, c:number, out:Array|Float64Array|Float32Array )"],["random.array.levy.factory","random.array.levy.factory( [mu:number, c:number, ][options:Object] )"],["random.array.levy.PRNG","random.array.levy.PRNG"],["random.array.levy.seed","random.array.levy.seed"],["random.array.levy.seedLength","random.array.levy.seedLength"],["random.array.levy.state","random.array.levy.state"],["random.array.levy.stateLength","random.array.levy.stateLength"],["random.array.levy.byteLength","random.array.levy.byteLength"],["random.array.logistic","random.array.logistic( len:integer, mu:number, s:number[, options:Object] )"],["random.array.logistic.assign","random.array.logistic.assign( mu:number, s:number, out:Array|Float64Array|Float32Array )"],["random.array.logistic.factory","random.array.logistic.factory( [mu:number, s:number, ][options:Object] )"],["random.array.logistic.PRNG","random.array.logistic.PRNG"],["random.array.logistic.seed","random.array.logistic.seed"],["random.array.logistic.seedLength","random.array.logistic.seedLength"],["random.array.logistic.state","random.array.logistic.state"],["random.array.logistic.stateLength","random.array.logistic.stateLength"],["random.array.logistic.byteLength","random.array.logistic.byteLength"],["random.array.lognormal","random.array.lognormal( len:integer, mu:number, sigma:number[, options:Object] )"],["random.array.lognormal.assign","random.array.lognormal.assign( mu:number, sigma:number, out:Array|Float64Array|Float32Array )"],["random.array.lognormal.factory","random.array.lognormal.factory( [mu:number, sigma:number, ][options:Object] )"],["random.array.lognormal.PRNG","random.array.lognormal.PRNG"],["random.array.lognormal.seed","random.array.lognormal.seed"],["random.array.lognormal.seedLength","random.array.lognormal.seedLength"],["random.array.lognormal.state","random.array.lognormal.state"],["random.array.lognormal.stateLength","random.array.lognormal.stateLength"],["random.array.lognormal.byteLength","random.array.lognormal.byteLength"],["random.array.minstd","random.array.minstd( len:integer[, options:Object] )"],["random.array.minstd.normalized","random.array.minstd.normalized( len:integer[, options:Object] )"],["random.array.minstd.factory","random.array.minstd.factory( [options:Object] )"],["random.array.minstd.PRNG","random.array.minstd.PRNG"],["random.array.minstd.seed","random.array.minstd.seed"],["random.array.minstd.seedLength","random.array.minstd.seedLength"],["random.array.minstd.state","random.array.minstd.state"],["random.array.minstd.stateLength","random.array.minstd.stateLength"],["random.array.minstd.byteLength","random.array.minstd.byteLength"],["random.array.minstdShuffle","random.array.minstdShuffle( len:integer[, options:Object] )"],["random.array.minstdShuffle.normalized","random.array.minstdShuffle.normalized( len:integer[, options:Object] )"],["random.array.minstdShuffle.factory","random.array.minstdShuffle.factory( [options:Object] )"],["random.array.minstdShuffle.PRNG","random.array.minstdShuffle.PRNG"],["random.array.minstdShuffle.seed","random.array.minstdShuffle.seed"],["random.array.minstdShuffle.seedLength","random.array.minstdShuffle.seedLength"],["random.array.minstdShuffle.state","random.array.minstdShuffle.state"],["random.array.minstdShuffle.stateLength","random.array.minstdShuffle.stateLength"],["random.array.minstdShuffle.byteLength","random.array.minstdShuffle.byteLength"],["random.array.mt19937","random.array.mt19937( len:integer[, options:Object] )"],["random.array.mt19937.normalized","random.array.mt19937.normalized( len:integer[, options:Object] )"],["random.array.mt19937.factory","random.array.mt19937.factory( [options:Object] )"],["random.array.mt19937.PRNG","random.array.mt19937.PRNG"],["random.array.mt19937.seed","random.array.mt19937.seed"],["random.array.mt19937.seedLength","random.array.mt19937.seedLength"],["random.array.mt19937.state","random.array.mt19937.state"],["random.array.mt19937.stateLength","random.array.mt19937.stateLength"],["random.array.mt19937.byteLength","random.array.mt19937.byteLength"],["random.array.negativeBinomial","random.array.negativeBinomial( len:integer, r:number, p:number[, options:Object] )"],["random.array.negativeBinomial.assign","random.array.negativeBinomial.assign( r:number, p:number, out:Array|TypedArray )"],["random.array.negativeBinomial.factory","random.array.negativeBinomial.factory( [r:number, p:number, ][options:Object] )"],["random.array.negativeBinomial.PRNG","random.array.negativeBinomial.PRNG"],["random.array.negativeBinomial.seed","random.array.negativeBinomial.seed"],["random.array.negativeBinomial.seedLength","random.array.negativeBinomial.seedLength"],["random.array.negativeBinomial.state","random.array.negativeBinomial.state"],["random.array.negativeBinomial.stateLength","random.array.negativeBinomial.stateLength"],["random.array.negativeBinomial.byteLength","random.array.negativeBinomial.byteLength"],["random.array.normal","random.array.normal( len:integer, mu:number, sigma:number[, options:Object] )"],["random.array.normal.assign","random.array.normal.assign( mu:number, sigma:number, out:Array|Float64Array|Float32Array )"],["random.array.normal.factory","random.array.normal.factory( [mu:number, sigma:number, ][options:Object] )"],["random.array.normal.PRNG","random.array.normal.PRNG"],["random.array.normal.seed","random.array.normal.seed"],["random.array.normal.seedLength","random.array.normal.seedLength"],["random.array.normal.state","random.array.normal.state"],["random.array.normal.stateLength","random.array.normal.stateLength"],["random.array.normal.byteLength","random.array.normal.byteLength"],["random.array.pareto1","random.array.pareto1( len:integer, alpha:number, beta:number[, options:Object] )"],["random.array.pareto1.assign","random.array.pareto1.assign( alpha:number, beta:number, out:Array|Float64Array|Float32Array )"],["random.array.pareto1.factory","random.array.pareto1.factory( [alpha:number, beta:number, ][options:Object] )"],["random.array.pareto1.PRNG","random.array.pareto1.PRNG"],["random.array.pareto1.seed","random.array.pareto1.seed"],["random.array.pareto1.seedLength","random.array.pareto1.seedLength"],["random.array.pareto1.state","random.array.pareto1.state"],["random.array.pareto1.stateLength","random.array.pareto1.stateLength"],["random.array.pareto1.byteLength","random.array.pareto1.byteLength"],["random.array.poisson","random.array.poisson( len:integer, lambda:number[, options:Object] )"],["random.array.poisson.assign","random.array.poisson.assign( lambda:number, out:Array|TypedArray )"],["random.array.poisson.factory","random.array.poisson.factory( [lambda:number, ][options:Object] )"],["random.array.poisson.PRNG","random.array.poisson.PRNG"],["random.array.poisson.seed","random.array.poisson.seed"],["random.array.poisson.seedLength","random.array.poisson.seedLength"],["random.array.poisson.state","random.array.poisson.state"],["random.array.poisson.stateLength","random.array.poisson.stateLength"],["random.array.poisson.byteLength","random.array.poisson.byteLength"],["random.array.randu","random.array.randu( len:integer[, options:Object] )"],["random.array.randu.factory","random.array.randu.factory( [options:Object] )"],["random.array.randu.PRNG","random.array.randu.PRNG"],["random.array.randu.seed","random.array.randu.seed"],["random.array.randu.seedLength","random.array.randu.seedLength"],["random.array.randu.state","random.array.randu.state"],["random.array.randu.stateLength","random.array.randu.stateLength"],["random.array.randu.byteLength","random.array.randu.byteLength"],["random.array.rayleigh","random.array.rayleigh( len:integer, sigma:number[, options:Object] )"],["random.array.rayleigh.assign","random.array.rayleigh.assign( sigma:number, out:Array|Float64Array|Float32Array )"],["random.array.rayleigh.factory","random.array.rayleigh.factory( [sigma:number, ][options:Object] )"],["random.array.rayleigh.PRNG","random.array.rayleigh.PRNG"],["random.array.rayleigh.seed","random.array.rayleigh.seed"],["random.array.rayleigh.seedLength","random.array.rayleigh.seedLength"],["random.array.rayleigh.state","random.array.rayleigh.state"],["random.array.rayleigh.stateLength","random.array.rayleigh.stateLength"],["random.array.rayleigh.byteLength","random.array.rayleigh.byteLength"],["random.array.t","random.array.t( len:integer, v:number[, options:Object] )"],["random.array.t.assign","random.array.t.assign( v:number, out:Array|Float64Array|Float32Array )"],["random.array.t.factory","random.array.t.factory( [v:number, ][options:Object] )"],["random.array.t.PRNG","random.array.t.PRNG"],["random.array.t.seed","random.array.t.seed"],["random.array.t.seedLength","random.array.t.seedLength"],["random.array.t.state","random.array.t.state"],["random.array.t.stateLength","random.array.t.stateLength"],["random.array.t.byteLength","random.array.t.byteLength"],["random.array.triangular","random.array.triangular( len:integer, a:number, b:number, c:number[, options:Object] )"],["random.array.triangular.assign","random.array.triangular.assign( a:number, b:number, c:number, out:Array|Float64Array|Float32Array )"],["random.array.triangular.factory","random.array.triangular.factory( [a:number, b:number, c:number, ][options:Object] )"],["random.array.triangular.PRNG","random.array.triangular.PRNG"],["random.array.triangular.seed","random.array.triangular.seed"],["random.array.triangular.seedLength","random.array.triangular.seedLength"],["random.array.triangular.state","random.array.triangular.state"],["random.array.triangular.stateLength","random.array.triangular.stateLength"],["random.array.triangular.byteLength","random.array.triangular.byteLength"],["random.array.uniform","random.array.uniform( len:integer, a:number, b:number[, options:Object] )"],["random.array.uniform.assign","random.array.uniform.assign( a:number, b:number, out:Array|Float64Array|Float32Array )"],["random.array.uniform.factory","random.array.uniform.factory( [a:number, b:number, ][options:Object] )"],["random.array.uniform.PRNG","random.array.uniform.PRNG"],["random.array.uniform.seed","random.array.uniform.seed"],["random.array.uniform.seedLength","random.array.uniform.seedLength"],["random.array.uniform.state","random.array.uniform.state"],["random.array.uniform.stateLength","random.array.uniform.stateLength"],["random.array.uniform.byteLength","random.array.uniform.byteLength"],["random.array.weibull","random.array.weibull( len:integer, k:number, lambda:number[, options:Object] )"],["random.array.weibull.assign","random.array.weibull.assign( k:number, lambda:number, out:Array|Float64Array|Float32Array )"],["random.array.weibull.factory","random.array.weibull.factory( [k:number, lambda:number, ][options:Object] )"],["random.array.weibull.PRNG","random.array.weibull.PRNG"],["random.array.weibull.seed","random.array.weibull.seed"],["random.array.weibull.seedLength","random.array.weibull.seedLength"],["random.array.weibull.state","random.array.weibull.state"],["random.array.weibull.stateLength","random.array.weibull.stateLength"],["random.array.weibull.byteLength","random.array.weibull.byteLength"],["random.iterators.arcsine","random.iterators.arcsine( a:number, b:number[, options:Object] )"],["random.iterators.bernoulli","random.iterators.bernoulli( p:number[, options:Object] )"],["random.iterators.beta","random.iterators.beta( α:number, β:number[, options:Object] )"],["random.iterators.betaprime","random.iterators.betaprime( α:number, β:number[, options:Object] )"],["random.iterators.binomial","random.iterators.binomial( n:integer, p:number[, options:Object] )"],["random.iterators.boxMuller","random.iterators.boxMuller( [options:Object] )"],["random.iterators.cauchy","random.iterators.cauchy( x0:number, Ɣ:number[, options:Object] )"],["random.iterators.chi","random.iterators.chi( k:number[, options:Object] )"],["random.iterators.chisquare","random.iterators.chisquare( k:number[, options:Object] )"],["random.iterators.cosine","random.iterators.cosine( μ:number, s:number[, options:Object] )"],["random.iterators.discreteUniform","random.iterators.discreteUniform( a:integer, b:integer[, options:Object] )"],["random.iterators.erlang","random.iterators.erlang( k:integer, λ:number[, options:Object] )"],["random.iterators.exponential","random.iterators.exponential( λ:number[, options:Object] )"],["random.iterators.f","random.iterators.f( d1:number, d2:number[, options:Object] )"],["random.iterators.frechet","random.iterators.frechet( α:number, s:number, m:number[, options:Object] )"],["random.iterators.gamma","random.iterators.gamma( α:number, β:number[, options:Object] )"],["random.iterators.geometric","random.iterators.geometric( p:number[, options:Object] )"],["random.iterators.gumbel","random.iterators.gumbel( μ:number, β:number[, options:Object] )"],["random.iterators.hypergeometric","random.iterators.hypergeometric( N:integer, K:integer, n:integer[, options:Object] )"],["random.iterators.improvedZiggurat","random.iterators.improvedZiggurat( [options:Object] )"],["random.iterators.invgamma","random.iterators.invgamma( α:number, β:number[, options:Object] )"],["random.iterators.kumaraswamy","random.iterators.kumaraswamy( a:number, b:number[, options:Object] )"],["random.iterators.laplace","random.iterators.laplace( μ:number, b:number[, options:Object] )"],["random.iterators.levy","random.iterators.levy( μ:number, c:number[, options:Object] )"],["random.iterators.logistic","random.iterators.logistic( μ:number, s:number[, options:Object] )"],["random.iterators.lognormal","random.iterators.lognormal( μ:number, σ:number[, options:Object] )"],["random.iterators.minstd","random.iterators.minstd( [options:Object] )"],["random.iterators.minstdShuffle","random.iterators.minstdShuffle( [options:Object] )"],["random.iterators.mt19937","random.iterators.mt19937( [options:Object] )"],["random.iterators.negativeBinomial","random.iterators.negativeBinomial( r:number, p:number[, options:Object] )"],["random.iterators.normal","random.iterators.normal( μ:number, σ:number[, options:Object] )"],["random.iterators.pareto1","random.iterators.pareto1( α:number, β:number[, options:Object] )"],["random.iterators.poisson","random.iterators.poisson( λ:number[, options:Object] )"],["random.iterators.randi","random.iterators.randi( [options:Object] )"],["random.iterators.randn","random.iterators.randn( [options:Object] )"],["random.iterators.randu","random.iterators.randu( [options:Object] )"],["random.iterators.rayleigh","random.iterators.rayleigh( σ:number[, options:Object] )"],["random.iterators.t","random.iterators.t( v:number[, options:Object] )"],["random.iterators.triangular","random.iterators.triangular( a:number, b:number, c:number[, options:Object] )"],["random.iterators.uniform","random.iterators.uniform( a:number, b:number[, options:Object] )"],["random.iterators.weibull","random.iterators.weibull( k:number, λ:number[, options:Object] )"],["random.streams.arcsine","random.streams.arcsine( a:number, b:number[, options:Object] )"],["random.streams.arcsine.factory","random.streams.arcsine.factory( [a:number, b:number, ][options:Object] )"],["random.streams.arcsine.objectMode","random.streams.arcsine.objectMode( a:number, b:number[, options:Object] )"],["random.streams.bernoulli","random.streams.bernoulli( p:number[, options:Object] )"],["random.streams.bernoulli.factory","random.streams.bernoulli.factory( [p:number, ][options:Object] )"],["random.streams.bernoulli.objectMode","random.streams.bernoulli.objectMode( p:number[, options:Object] )"],["random.streams.beta","random.streams.beta( α:number, β:number[, options:Object] )"],["random.streams.beta.factory","random.streams.beta.factory( [α:number, β:number, ][options:Object] )"],["random.streams.beta.objectMode","random.streams.beta.objectMode( α:number, β:number[, options:Object] )"],["random.streams.betaprime","random.streams.betaprime( α:number, β:number[, options:Object] )"],["random.streams.betaprime.factory","random.streams.betaprime.factory( [α:number, β:number, ][options:Object] )"],["random.streams.betaprime.objectMode","random.streams.betaprime.objectMode( α:number, β:number[, options:Object] )"],["random.streams.binomial","random.streams.binomial( n:integer, p:number[, options:Object] )"],["random.streams.binomial.factory","random.streams.binomial.factory( [n:integer, p:number, ][options:Object] )"],["random.streams.binomial.objectMode","random.streams.binomial.objectMode( n:integer, p:number[, options:Object] )"],["random.streams.boxMuller","random.streams.boxMuller( [options:Object] )"],["random.streams.boxMuller.factory","random.streams.boxMuller.factory( [options:Object] )"],["random.streams.boxMuller.objectMode","random.streams.boxMuller.objectMode( [options:Object] )"],["random.streams.cauchy","random.streams.cauchy( x0:number, γ:number[, options:Object] )"],["random.streams.cauchy.factory","random.streams.cauchy.factory( [x0:number, γ:number, ][options:Object] )"],["random.streams.cauchy.objectMode","random.streams.cauchy.objectMode( x0:number, γ:number[, options:Object] )"],["random.streams.chi","random.streams.chi( k:number[, options:Object] )"],["random.streams.chi.factory","random.streams.chi.factory( [k:number, ][options:Object] )"],["random.streams.chi.objectMode","random.streams.chi.objectMode( k:number[, options:Object] )"],["random.streams.chisquare","random.streams.chisquare( k:number[, options:Object] )"],["random.streams.chisquare.factory","random.streams.chisquare.factory( [k:number, ][options:Object] )"],["random.streams.chisquare.objectMode","random.streams.chisquare.objectMode( k:number[, options:Object] )"],["random.streams.cosine","random.streams.cosine( μ:number, s:number[, options:Object] )"],["random.streams.cosine.factory","random.streams.cosine.factory( [μ:number, s:number, ][options:Object] )"],["random.streams.cosine.objectMode","random.streams.cosine.objectMode( μ:number, s:number[, options:Object] )"],["random.streams.discreteUniform","random.streams.discreteUniform( a:integer, b:integer[, options:Object] )"],["random.streams.discreteUniform.factory","random.streams.discreteUniform.factory( [a:integer, b:integer, ][options:Object] )"],["random.streams.discreteUniform.objectMode","random.streams.discreteUniform.objectMode( a:integer, b:integer[, options:Object] )"],["random.streams.erlang","random.streams.erlang( k:integer, λ:number[, options:Object] )"],["random.streams.erlang.factory","random.streams.erlang.factory( [k:number, λ:number, ][options:Object] )"],["random.streams.erlang.objectMode","random.streams.erlang.objectMode( k:number, λ:number[, options:Object] )"],["random.streams.exponential","random.streams.exponential( λ:number[, options:Object] )"],["random.streams.exponential.factory","random.streams.exponential.factory( [λ:number, ][options:Object] )"],["random.streams.exponential.objectMode","random.streams.exponential.objectMode( λ:number[, options:Object] )"],["random.streams.f","random.streams.f( d1:number, d2:number[, options:Object] )"],["random.streams.f.factory","random.streams.f.factory( [d1:number, d2:number, ][options:Object] )"],["random.streams.f.objectMode","random.streams.f.objectMode( d1:number, d2:number[, options:Object] )"],["random.streams.frechet","random.streams.frechet( α:number, s:number, m:number[, options:Object] )"],["random.streams.frechet.factory","random.streams.frechet.factory( [α:number, s:number, m:number,][options:Object] )"],["random.streams.frechet.objectMode","random.streams.frechet.objectMode( α:number, s:number, m:number[, options:Object] )"],["random.streams.gamma","random.streams.gamma( α:number, β:number[, options:Object] )"],["random.streams.gamma.factory","random.streams.gamma.factory( [α:number, β:number, ][options:Object] )"],["random.streams.gamma.objectMode","random.streams.gamma.objectMode( α:number, β:number[, options:Object] )"],["random.streams.geometric","random.streams.geometric( p:number[, options:Object] )"],["random.streams.geometric.factory","random.streams.geometric.factory( [p:number, ][options:Object] )"],["random.streams.geometric.objectMode","random.streams.geometric.objectMode( p:number[, options:Object] )"],["random.streams.gumbel","random.streams.gumbel( μ:number, β:number[, options:Object] )"],["random.streams.gumbel.factory","random.streams.gumbel.factory( [μ:number, β:number, ][options:Object] )"],["random.streams.gumbel.objectMode","random.streams.gumbel.objectMode( μ:number, β:number[, options:Object] )"],["random.streams.hypergeometric","random.streams.hypergeometric( N:integer, K:integer, n:integer[, options:Object] )"],["random.streams.hypergeometric.factory","random.streams.hypergeometric.factory( [N:integer, K:integer, n:integer,][options:Object] )"],["random.streams.hypergeometric.objectMode","random.streams.hypergeometric.objectMode( N:integer, K:integer, n:integer[, options:Object] )"],["random.streams.improvedZiggurat","random.streams.improvedZiggurat( [options:Object] )"],["random.streams.improvedZiggurat.factory","random.streams.improvedZiggurat.factory( [options:Object] )"],["random.streams.improvedZiggurat.objectMode","random.streams.improvedZiggurat.objectMode( [options:Object] )"],["random.streams.invgamma","random.streams.invgamma( α:number, β:number[, options:Object] )"],["random.streams.invgamma.factory","random.streams.invgamma.factory( [α:number, β:number, ][options:Object] )"],["random.streams.invgamma.objectMode","random.streams.invgamma.objectMode( α:number, β:number[, options:Object] )"],["random.streams.kumaraswamy","random.streams.kumaraswamy( a:number, b:number[, options:Object] )"],["random.streams.kumaraswamy.factory","random.streams.kumaraswamy.factory( [a:number, b:number, ][options:Object] )"],["random.streams.kumaraswamy.objectMode","random.streams.kumaraswamy.objectMode( a:number, b:number[, options:Object] )"],["random.streams.laplace","random.streams.laplace( μ:number, b:number[, options:Object] )"],["random.streams.laplace.factory","random.streams.laplace.factory( [μ:number, b:number, ][options:Object] )"],["random.streams.laplace.objectMode","random.streams.laplace.objectMode( μ:number, b:number[, options:Object] )"],["random.streams.levy","random.streams.levy( μ:number, c:number[, options:Object] )"],["random.streams.levy.factory","random.streams.levy.factory( [μ:number, c:number, ][options:Object] )"],["random.streams.levy.objectMode","random.streams.levy.objectMode( μ:number, c:number[, options:Object] )"],["random.streams.logistic","random.streams.logistic( μ:number, s:number[, options:Object] )"],["random.streams.logistic.factory","random.streams.logistic.factory( [μ:number, s:number, ][options:Object] )"],["random.streams.logistic.objectMode","random.streams.logistic.objectMode( μ:number, s:number[, options:Object] )"],["random.streams.lognormal","random.streams.lognormal( μ:number, σ:number[, options:Object] )"],["random.streams.lognormal.factory","random.streams.lognormal.factory( [μ:number, σ:number, ][options:Object] )"],["random.streams.lognormal.objectMode","random.streams.lognormal.objectMode( μ:number, σ:number[, options:Object] )"],["random.streams.minstd","random.streams.minstd( [options:Object] )"],["random.streams.minstd.factory","random.streams.minstd.factory( [options] )"],["random.streams.minstd.objectMode","random.streams.minstd.objectMode( [options:Object] )"],["random.streams.minstdShuffle","random.streams.minstdShuffle( [options:Object] )"],["random.streams.minstdShuffle.factory","random.streams.minstdShuffle.factory( [options] )"],["random.streams.minstdShuffle.objectMode","random.streams.minstdShuffle.objectMode( [options:Object] )"],["random.streams.mt19937","random.streams.mt19937( [options:Object] )"],["random.streams.mt19937.factory","random.streams.mt19937.factory( [options] )"],["random.streams.mt19937.objectMode","random.streams.mt19937.objectMode( [options:Object] )"],["random.streams.negativeBinomial","random.streams.negativeBinomial( r:number, p:number[, options:Object] )"],["random.streams.negativeBinomial.factory","random.streams.negativeBinomial.factory( [r:number, p:number, ][options:Object] )"],["random.streams.negativeBinomial.objectMode","random.streams.negativeBinomial.objectMode( r:integer, p:number[, options:Object] )"],["random.streams.normal","random.streams.normal( μ:number, σ:number[, options:Object] )"],["random.streams.normal.factory","random.streams.normal.factory( [μ:number, σ:number, ][options:Object] )"],["random.streams.normal.objectMode","random.streams.normal.objectMode( μ:number, σ:number[, options:Object] )"],["random.streams.pareto1","random.streams.pareto1( α:number, β:number[, options:Object] )"],["random.streams.pareto1.factory","random.streams.pareto1.factory( [α:number, β:number, ][options:Object] )"],["random.streams.pareto1.objectMode","random.streams.pareto1.objectMode( α:number, β:number[, options:Object] )"],["random.streams.poisson","random.streams.poisson( λ:number[, options:Object] )"],["random.streams.poisson.factory","random.streams.poisson.factory( [λ:number, ][options:Object] )"],["random.streams.poisson.objectMode","random.streams.poisson.objectMode( λ:number[, options:Object] )"],["random.streams.randi","random.streams.randi( [options:Object] )"],["random.streams.randi.factory","random.streams.randi.factory( [options] )"],["random.streams.randi.objectMode","random.streams.randi.objectMode( [options:Object] )"],["random.streams.randn","random.streams.randn( [options:Object] )"],["random.streams.randn.factory","random.streams.randn.factory( [options] )"],["random.streams.randn.objectMode","random.streams.randn.objectMode( [options:Object] )"],["random.streams.randu","random.streams.randu( [options:Object] )"],["random.streams.randu.factory","random.streams.randu.factory( [options] )"],["random.streams.randu.objectMode","random.streams.randu.objectMode( [options:Object] )"],["random.streams.rayleigh","random.streams.rayleigh( σ:number[, options:Object] )"],["random.streams.rayleigh.factory","random.streams.rayleigh.factory( [σ:number, ][options:Object] )"],["random.streams.rayleigh.objectMode","random.streams.rayleigh.objectMode( σ:number[, options:Object] )"],["random.streams.t","random.streams.t( v:number[, options:Object] )"],["random.streams.t.factory","random.streams.t.factory( [v:number, ][options:Object] )"],["random.streams.t.objectMode","random.streams.t.objectMode( v:number[, options:Object] )"],["random.streams.triangular","random.streams.triangular( a:number, b:number, c:number[, options:Object] )"],["random.streams.triangular.factory","random.streams.triangular.factory( [a:number, b:number, c:number, ][options:Object] )"],["random.streams.triangular.objectMode","random.streams.triangular.objectMode( a:number, b:number, c:number[, options:Object] )"],["random.streams.uniform","random.streams.uniform( a:number, b:number[, options:Object] )"],["random.streams.uniform.factory","random.streams.uniform.factory( [a:number, b:number, ][options:Object] )"],["random.streams.uniform.objectMode","random.streams.uniform.objectMode( a:number, b:number[, options:Object] )"],["random.streams.weibull","random.streams.weibull( k:number, λ:number[, options:Object] )"],["random.streams.weibull.factory","random.streams.weibull.factory( [k:number, λ:number, ][options:Object] )"],["random.streams.weibull.objectMode","random.streams.weibull.objectMode( k:number, λ:number[, options:Object] )"],["random.strided.arcsine","random.strided.arcsine( N:integer, a:ArrayLikeObject, sa:integer, b:ArrayLikeObject, sb:integer, out:ArrayLikeObject, so:integer[, options:Object] )"],["random.strided.arcsine.ndarray","random.strided.arcsine.ndarray( N:integer, a:ArrayLikeObject, sa:integer, oa:integer, b:ArrayLikeObject, sb:integer, ob:integer, out:ArrayLikeObject, so:integer, oo:integer[, options:Object] )"],["random.strided.bernoulli","random.strided.bernoulli( N:integer, p:ArrayLikeObject, sp:integer, out:ArrayLikeObject, so:integer )"],["random.strided.bernoulli.ndarray","random.strided.bernoulli.ndarray( N:integer, p:ArrayLikeObject, sp:integer, op:integer, out:ArrayLikeObject, so:integer, oo:integer )"],["random.strided.bernoulli.factory","random.strided.bernoulli.factory( [options:Object] )"],["random.strided.bernoulli.PRNG","random.strided.bernoulli.PRNG"],["random.strided.bernoulli.seed","random.strided.bernoulli.seed"],["random.strided.bernoulli.seedLength","random.strided.bernoulli.seedLength"],["random.strided.bernoulli.state","random.strided.bernoulli.state"],["random.strided.bernoulli.stateLength","random.strided.bernoulli.stateLength"],["random.strided.bernoulli.byteLength","random.strided.bernoulli.byteLength"],["random.strided.beta","random.strided.beta( N:integer, alpha:ArrayLikeObject, sa:integer, beta:ArrayLikeObject, sb:integer, out:ArrayLikeObject, so:integer[, options:Object] )"],["random.strided.beta.ndarray","random.strided.beta.ndarray( N:integer, alpha:ArrayLikeObject, sa:integer, oa:integer, beta:ArrayLikeObject, sb:integer, ob:integer, out:ArrayLikeObject, so:integer, oo:integer[, options:Object] )"],["random.strided.betaprime","random.strided.betaprime( N:integer, alpha:ArrayLikeObject, sa:integer, beta:ArrayLikeObject, sb:integer, out:ArrayLikeObject, so:integer[, options:Object] )"],["random.strided.betaprime.ndarray","random.strided.betaprime.ndarray( N:integer, alpha:ArrayLikeObject, sa:integer, oa:integer, beta:ArrayLikeObject, sb:integer, ob:integer, out:ArrayLikeObject, so:integer, oo:integer[, options:Object] )"],["random.strided.chi","random.strided.chi( N:integer, k:ArrayLikeObject, sk:integer, out:ArrayLikeObject, so:integer )"],["random.strided.chi.ndarray","random.strided.chi.ndarray( N:integer, k:ArrayLikeObject, sk:integer, ok:integer, out:ArrayLikeObject, so:integer, oo:integer )"],["random.strided.chi.factory","random.strided.chi.factory( [options:Object] )"],["random.strided.chi.PRNG","random.strided.chi.PRNG"],["random.strided.chi.seed","random.strided.chi.seed"],["random.strided.chi.seedLength","random.strided.chi.seedLength"],["random.strided.chi.state","random.strided.chi.state"],["random.strided.chi.stateLength","random.strided.chi.stateLength"],["random.strided.chi.byteLength","random.strided.chi.byteLength"],["random.strided.chisquare","random.strided.chisquare( N:integer, k:ArrayLikeObject, sk:integer, out:ArrayLikeObject, so:integer )"],["random.strided.chisquare.ndarray","random.strided.chisquare.ndarray( N:integer, k:ArrayLikeObject, sk:integer, ok:integer, out:ArrayLikeObject, so:integer, oo:integer )"],["random.strided.chisquare.factory","random.strided.chisquare.factory( [options:Object] )"],["random.strided.chisquare.PRNG","random.strided.chisquare.PRNG"],["random.strided.chisquare.seed","random.strided.chisquare.seed"],["random.strided.chisquare.seedLength","random.strided.chisquare.seedLength"],["random.strided.chisquare.state","random.strided.chisquare.state"],["random.strided.chisquare.stateLength","random.strided.chisquare.stateLength"],["random.strided.chisquare.byteLength","random.strided.chisquare.byteLength"],["random.strided.cosine","random.strided.cosine( N:integer, mu:ArrayLikeObject, sm:integer, s:ArrayLikeObject, ss:integer, out:ArrayLikeObject, so:integer[, options:Object] )"],["random.strided.cosine.ndarray","random.strided.cosine.ndarray( N:integer, mu:ArrayLikeObject, sm:integer, om:integer, s:ArrayLikeObject, ss:integer, os:integer, out:ArrayLikeObject, so:integer, oo:integer[, options:Object] )"],["random.strided.discreteUniform","random.strided.discreteUniform( N:integer, a:ArrayLikeObject, sa:integer, b:ArrayLikeObject, sb:integer, out:ArrayLikeObject, so:integer[, options:Object] )"],["random.strided.discreteUniform.ndarray","random.strided.discreteUniform.ndarray( N:integer, a:ArrayLikeObject, sa:integer, oa:integer, b:ArrayLikeObject, sb:integer, ob:integer, out:ArrayLikeObject, so:integer, oo:integer[, options:Object] )"],["random.strided.exponential","random.strided.exponential( N:integer, lambda:ArrayLikeObject, sl:integer, out:ArrayLikeObject, so:integer )"],["random.strided.exponential.ndarray","random.strided.exponential.ndarray( N:integer, lambda:ArrayLikeObject, sl:integer, ol:integer, out:ArrayLikeObject, so:integer, oo:integer )"],["random.strided.exponential.factory","random.strided.exponential.factory( [options:Object] )"],["random.strided.exponential.PRNG","random.strided.exponential.PRNG"],["random.strided.exponential.seed","random.strided.exponential.seed"],["random.strided.exponential.seedLength","random.strided.exponential.seedLength"],["random.strided.exponential.state","random.strided.exponential.state"],["random.strided.exponential.stateLength","random.strided.exponential.stateLength"],["random.strided.exponential.byteLength","random.strided.exponential.byteLength"],["random.strided.gamma","random.strided.gamma( N:integer, alpha:ArrayLikeObject, sa:integer, beta:ArrayLikeObject, sb:integer, out:ArrayLikeObject, so:integer[, options:Object] )"],["random.strided.gamma.ndarray","random.strided.gamma.ndarray( N:integer, alpha:ArrayLikeObject, sa:integer, oa:integer, beta:ArrayLikeObject, sb:integer, ob:integer, out:ArrayLikeObject, so:integer, oo:integer[, options:Object] )"],["random.strided.geometric","random.strided.geometric( N:integer, p:ArrayLikeObject, sp:integer, out:ArrayLikeObject, so:integer )"],["random.strided.geometric.ndarray","random.strided.geometric.ndarray( N:integer, p:ArrayLikeObject, sp:integer, op:integer, out:ArrayLikeObject, so:integer, oo:integer )"],["random.strided.geometric.factory","random.strided.geometric.factory( [options:Object] )"],["random.strided.geometric.PRNG","random.strided.geometric.PRNG"],["random.strided.geometric.seed","random.strided.geometric.seed"],["random.strided.geometric.seedLength","random.strided.geometric.seedLength"],["random.strided.geometric.state","random.strided.geometric.state"],["random.strided.geometric.stateLength","random.strided.geometric.stateLength"],["random.strided.geometric.byteLength","random.strided.geometric.byteLength"],["random.strided.invgamma","random.strided.invgamma( N:integer, alpha:ArrayLikeObject, sa:integer, beta:ArrayLikeObject, sb:integer, out:ArrayLikeObject, so:integer[, options:Object] )"],["random.strided.invgamma.ndarray","random.strided.invgamma.ndarray( N:integer, alpha:ArrayLikeObject, sa:integer, oa:integer, beta:ArrayLikeObject, sb:integer, ob:integer, out:ArrayLikeObject, so:integer, oo:integer[, options:Object] )"],["random.strided.lognormal","random.strided.lognormal( N:integer, mu:ArrayLikeObject, sm:integer, sigma:ArrayLikeObject, ss:integer, out:ArrayLikeObject, so:integer[, options:Object] )"],["random.strided.lognormal.ndarray","random.strided.lognormal.ndarray( N:integer, mu:ArrayLikeObject, sm:integer, om:integer, sigma:ArrayLikeObject, ss:integer, os:integer, out:ArrayLikeObject, so:integer, oo:integer[, options:Object] )"],["random.strided.minstd","random.strided.minstd( N:integer, out:ArrayLikeObject, so:integer[, options:Object] )"],["random.strided.minstd.ndarray","random.strided.minstd.ndarray( N:integer, out:ArrayLikeObject, so:integer, oo:integer[, options:Object] )"],["random.strided.minstd.normalized","random.strided.minstd.normalized( N:integer, out:ArrayLikeObject, so:integer[, options:Object] )"],["random.strided.minstd.normalized.ndarray","random.strided.minstd.normalized.ndarray( N:integer, out:ArrayLikeObject, so:integer, oo:integer[, options:Object] )"],["random.strided.minstdShuffle","random.strided.minstdShuffle( N:integer, out:ArrayLikeObject, so:integer[, options:Object] )"],["random.strided.minstdShuffle.ndarray","random.strided.minstdShuffle.ndarray( N:integer, out:ArrayLikeObject, so:integer, oo:integer[, options:Object] )"],["random.strided.minstdShuffle.normalized","random.strided.minstdShuffle.normalized( N:integer, out:ArrayLikeObject, so:integer[, options:Object] )"],["random.strided.minstdShuffle.normalized.ndarray","random.strided.minstdShuffle.normalized.ndarray( N:integer, out:ArrayLikeObject, so:integer, oo:integer[, options:Object] )"],["random.strided.mt19937","random.strided.mt19937( N:integer, out:ArrayLikeObject, so:integer[, options:Object] )"],["random.strided.mt19937.ndarray","random.strided.mt19937.ndarray( N:integer, out:ArrayLikeObject, so:integer, oo:integer[, options:Object] )"],["random.strided.mt19937.normalized","random.strided.mt19937.normalized( N:integer, out:ArrayLikeObject, so:integer[, options:Object] )"],["random.strided.mt19937.normalized.ndarray","random.strided.mt19937.normalized.ndarray( N:integer, out:ArrayLikeObject, so:integer, oo:integer[, options:Object] )"],["random.strided.normal","random.strided.normal( N:integer, mu:ArrayLikeObject, sm:integer, sigma:ArrayLikeObject, ss:integer, out:ArrayLikeObject, so:integer[, options:Object] )"],["random.strided.normal.ndarray","random.strided.normal.ndarray( N:integer, mu:ArrayLikeObject, sm:integer, om:integer, sigma:ArrayLikeObject, ss:integer, os:integer, out:ArrayLikeObject, so:integer, oo:integer[, options:Object] )"],["random.strided.poisson","random.strided.poisson( N:integer, lambda:ArrayLikeObject, sl:integer, out:ArrayLikeObject, so:integer )"],["random.strided.poisson.ndarray","random.strided.poisson.ndarray( N:integer, lambda:ArrayLikeObject, sl:integer, ol:integer, out:ArrayLikeObject, so:integer, oo:integer )"],["random.strided.poisson.factory","random.strided.poisson.factory( [options:Object] )"],["random.strided.poisson.PRNG","random.strided.poisson.PRNG"],["random.strided.poisson.seed","random.strided.poisson.seed"],["random.strided.poisson.seedLength","random.strided.poisson.seedLength"],["random.strided.poisson.state","random.strided.poisson.state"],["random.strided.poisson.stateLength","random.strided.poisson.stateLength"],["random.strided.poisson.byteLength","random.strided.poisson.byteLength"],["random.strided.randu","random.strided.randu( N:integer, out:ArrayLikeObject, so:integer[, options:Object] )"],["random.strided.randu.ndarray","random.strided.randu.ndarray( N:integer, out:ArrayLikeObject, so:integer, oo:integer[, options:Object] )"],["random.strided.rayleigh","random.strided.rayleigh( N:integer, sigma:ArrayLikeObject, ss:integer, out:ArrayLikeObject, so:integer )"],["random.strided.rayleigh.ndarray","random.strided.rayleigh.ndarray( N:integer, sigma:ArrayLikeObject, ss:integer, os:integer, out:ArrayLikeObject, so:integer, oo:integer )"],["random.strided.rayleigh.factory","random.strided.rayleigh.factory( [options:Object] )"],["random.strided.rayleigh.PRNG","random.strided.rayleigh.PRNG"],["random.strided.rayleigh.seed","random.strided.rayleigh.seed"],["random.strided.rayleigh.seedLength","random.strided.rayleigh.seedLength"],["random.strided.rayleigh.state","random.strided.rayleigh.state"],["random.strided.rayleigh.stateLength","random.strided.rayleigh.stateLength"],["random.strided.rayleigh.byteLength","random.strided.rayleigh.byteLength"],["random.strided.t","random.strided.t( N:integer, v:ArrayLikeObject, sv:integer, out:ArrayLikeObject, so:integer )"],["random.strided.t.ndarray","random.strided.t.ndarray( N:integer, v:ArrayLikeObject, sv:integer, ov:integer, out:ArrayLikeObject, so:integer, oo:integer )"],["random.strided.t.factory","random.strided.t.factory( [options:Object] )"],["random.strided.t.PRNG","random.strided.t.PRNG"],["random.strided.t.seed","random.strided.t.seed"],["random.strided.t.seedLength","random.strided.t.seedLength"],["random.strided.t.state","random.strided.t.state"],["random.strided.t.stateLength","random.strided.t.stateLength"],["random.strided.t.byteLength","random.strided.t.byteLength"],["random.strided.uniform","random.strided.uniform( N:integer, a:ArrayLikeObject, sa:integer, b:ArrayLikeObject, sb:integer, out:ArrayLikeObject, so:integer[, options:Object] )"],["random.strided.uniform.ndarray","random.strided.uniform.ndarray( N:integer, a:ArrayLikeObject, sa:integer, oa:integer, b:ArrayLikeObject, sb:integer, ob:integer, out:ArrayLikeObject, so:integer, oo:integer[, options:Object] )"],["random.strided.weibull","random.strided.weibull( N:integer, k:ArrayLikeObject, sk:integer, lambda:ArrayLikeObject, sl:integer, out:ArrayLikeObject, so:integer[, options:Object] )"],["random.strided.weibull.ndarray","random.strided.weibull.ndarray( N:integer, k:ArrayLikeObject, sk:integer, ok:integer, lambda:ArrayLikeObject, sl:integer, ol:integer, out:ArrayLikeObject, so:integer, oo:integer[, options:Object] )"],["ranks","ranks( arr:Array<number>[, options:Object] )"],["readDir","readDir( path:string|Buffer, clbk:Function )"],["readDir.sync","readDir.sync( path:string|Buffer )"],["readFile","readFile( file:string|Buffer|integer[, options:Object|string], clbk:Function )"],["readFile.sync","readFile.sync( file:string|Buffer|integer[, options:Object|string] )"],["readFileList","readFileList( filepaths:Array<string>[, options:Object|string], clbk:Function )"],["readFileList.sync","readFileList.sync( filepaths:Array<string>[, options:Object|string] )"],["readJSON","readJSON( file:string|Buffer|integer[, options:Object|string], clbk:Function )"],["readJSON.sync","readJSON.sync( file:string|Buffer|integer[, options:Object|string] )"],["readWASM","readWASM( file:string|Buffer|integer[, options:Object], clbk:Function )"],["readWASM.sync","readWASM.sync( file:string|Buffer|integer[, options:Object] )"],["real","real( z:Complex128 )"],["realarray","realarray( [dtype:string] )"],["realarray","realarray( length:integer[, dtype:string] )"],["realarray","realarray( typedarray:TypedArray[, dtype:string] )"],["realarray","realarray( obj:Object[, dtype:string] )"],["realarray","realarray( buffer:ArrayBuffer[, byteOffset:integer[, length:integer]][, dtype:string] )"],["realarrayCtors","realarrayCtors( dtype:string )"],["realarrayDataTypes","realarrayDataTypes()"],["realf","realf( z:Complex64 )"],["realmax","realmax( dtype:string )"],["realmin","realmin( dtype:string )"],["reBasename","reBasename( [platform:string] )"],["reBasename.REGEXP","reBasename.REGEXP"],["reBasename.REGEXP_POSIX","reBasename.REGEXP_POSIX"],["reBasename.REGEXP_WIN32","reBasename.REGEXP_WIN32"],["reBasenamePosix","reBasenamePosix()"],["reBasenamePosix.REGEXP","reBasenamePosix.REGEXP"],["reBasenameWindows","reBasenameWindows()"],["reBasenameWindows.REGEXP","reBasenameWindows.REGEXP"],["reColorHexadecimal","reColorHexadecimal( [mode:string] )"],["reColorHexadecimal.REGEXP","reColorHexadecimal.REGEXP"],["reColorHexadecimal.REGEXP_SHORTHAND","reColorHexadecimal.REGEXP_SHORTHAND"],["reColorHexadecimal.REGEXP_EITHER","reColorHexadecimal.REGEXP_EITHER"],["reDecimalNumber","reDecimalNumber( [options:Object] )"],["reDecimalNumber.REGEXP","reDecimalNumber.REGEXP"],["reDecimalNumber.REGEXP_CAPTURE","reDecimalNumber.REGEXP_CAPTURE"],["reDirname","reDirname( [platform:string] )"],["reDirname.REGEXP","reDirname.REGEXP"],["reDirname.REGEXP_POSIX","reDirname.REGEXP_POSIX"],["reDirname.REGEXP_WIN32","reDirname.REGEXP_WIN32"],["reDirnamePosix","reDirnamePosix()"],["reDirnamePosix.REGEXP","reDirnamePosix.REGEXP"],["reDirnameWindows","reDirnameWindows()"],["reDirnameWindows.REGEXP","reDirnameWindows.REGEXP"],["reduce","reduce( arr:ArrayLikeObject|ndarray, initial:any, reducer:Function[, thisArg:any] )"],["reduce2d","reduce2d( arr:ArrayLikeObject<ArrayLikeObject>, initial:ArrayLikeObject, reducer:Function[, thisArg:any] )"],["reduceAsync","reduceAsync( collection:Array|TypedArray|Object, initial:any, [options:Object,] reducer:Function, done:Function )"],["reduceAsync.factory","reduceAsync.factory( [options:Object,] fcn:Function )"],["reduceRight","reduceRight( arr:ArrayLikeObject|ndarray, initial:any, reducer:Function[, thisArg:any] )"],["reduceRightAsync","reduceRightAsync( collection:Array|TypedArray|Object, initial:any, [options:Object,] reducer:Function, done:Function )"],["reduceRightAsync.factory","reduceRightAsync.factory( [options:Object,] fcn:Function )"],["reDurationString","reDurationString()"],["reDurationString.REGEXP","reDurationString.REGEXP"],["reEOL","reEOL( [options:Object] )"],["reEOL.REGEXP","reEOL.REGEXP"],["reEOL.REGEXP_CAPTURE","reEOL.REGEXP_CAPTURE"],["reExtendedLengthPath","reExtendedLengthPath()"],["reExtendedLengthPath.REGEXP","reExtendedLengthPath.REGEXP"],["reExtname","reExtname( [platform:string] )"],["reExtname.REGEXP","reExtname.REGEXP"],["reExtname.REGEXP_POSIX","reExtname.REGEXP_POSIX"],["reExtname.REGEXP_WIN32","reExtname.REGEXP_WIN32"],["reExtnamePosix","reExtnamePosix"],["reExtnamePosix.REGEXP","reExtnamePosix.REGEXP"],["reExtnameWindows","reExtnameWindows"],["reExtnameWindows.REGEXP","reExtnameWindows.REGEXP"],["reFilename","reFilename( [platform:string] )"],["reFilename.REGEXP","reFilename.REGEXP"],["reFilename.REGEXP_POSIX","reFilename.REGEXP_POSIX"],["reFilename.REGEXP_WIN32","reFilename.REGEXP_WIN32"],["reFilenamePosix","reFilenamePosix()"],["reFilenamePosix.REGEXP","reFilenamePosix.REGEXP"],["reFilenameWindows","reFilenameWindows()"],["reFilenameWindows.REGEXP","reFilenameWindows.REGEXP"],["reFromString","reFromString( str:string )"],["reFunctionName","reFunctionName()"],["reFunctionName.REGEXP","reFunctionName.REGEXP"],["regexp2json","regexp2json( re:RegExp )"],["reim","reim( z:Complex128 )"],["reimf","reimf( z:Complex64 )"],["rejectArguments","rejectArguments( fcn:Function, predicate:Function[, thisArg:any] )"],["removeFirst","removeFirst( str:string[, n:integer][, options:Object] )"],["removeLast","removeLast( str:string[, n:integer][, options:Object] )"],["removePunctuation","removePunctuation( str:string )"],["removeUTF8BOM","removeUTF8BOM( str:string )"],["removeWords","removeWords( str:string, words:Array<string>[, ignoreCase:boolean] )"],["rename","rename( oldPath:string|Buffer, newPath:string|Buffer, clbk:Function )"],["rename.sync","rename.sync( oldPath:string|Buffer, newPath:string|Buffer )"],["reNativeFunction","reNativeFunction()"],["reNativeFunction.REGEXP","reNativeFunction.REGEXP"],["reorderArguments","reorderArguments( fcn:Function, indices:Array<integer>[, thisArg:any] )"],["repeat","repeat( str:string, n:integer )"],["replace","replace( str:string, search:string|RegExp, newval:string|Function )"],["replaceBefore","replaceBefore( str, search, replacement )"],["reRegExp","reRegExp()"],["reRegExp.REGEXP","reRegExp.REGEXP"],["rescape","rescape( str:string )"],["reSemVer","reSemVer()"],["reSemVer.REGEXP","reSemVer.REGEXP"],["resolveParentPath","resolveParentPath( path:string[, options:Object], clbk:Function )"],["resolveParentPath.sync","resolveParentPath.sync( path:string[, options:Object] )"],["resolveParentPathBy","resolveParentPathBy( path:string[, options:Object], predicate:Function, clbk:Function )"],["resolveParentPathBy.sync","resolveParentPathBy.sync( path:string[, options:Object], predicate:Function )"],["reUncPath","reUncPath()"],["reUncPath.REGEXP","reUncPath.REGEXP"],["reUtf16SurrogatePair","reUtf16SurrogatePair()"],["reUtf16SurrogatePair.REGEXP","reUtf16SurrogatePair.REGEXP"],["reUtf16UnpairedSurrogate","reUtf16UnpairedSurrogate()"],["reUtf16UnpairedSurrogate.REGEXP","reUtf16UnpairedSurrogate.REGEXP"],["reverseArguments","reverseArguments( fcn:Function[, thisArg:any] )"],["reverseString","reverseString( str:string[, options:Object] )"],["reviveBasePRNG","reviveBasePRNG( key:string, value:any )"],["reviveBuffer","reviveBuffer( key:string, value:any )"],["reviveComplex","reviveComplex( key:string, value:any )"],["reviveComplex64","reviveComplex64( key:string, value:any )"],["reviveComplex128","reviveComplex128( key:string, value:any )"],["reviveError","reviveError( key:string, value:any )"],["reviveRegExp","reviveRegExp( key:string, value:any )"],["reviveTypedArray","reviveTypedArray( key:string, value:any )"],["reWhitespace","reWhitespace( [options:Object] )"],["reWhitespace.REGEXP","reWhitespace.REGEXP"],["reWhitespace.REGEXP_CAPTURE","reWhitespace.REGEXP_CAPTURE"],["rpad","rpad( str:string, len:integer[, pad:string] )"],["rtrim","rtrim( str:string )"],["rtrimN","rtrimN( str:string, n:integer[, chars:Array|string] )"],["safeintmax","safeintmax( dtype:string )"],["safeintmin","safeintmin( dtype:string )"],["sample","sample( x:ArrayLike[, options:Object] )"],["sample.factory","sample.factory( [pool:ArrayLike, ][options:Object] )"],["SAVOY_STOPWORDS_FIN","SAVOY_STOPWORDS_FIN()"],["SAVOY_STOPWORDS_FR","SAVOY_STOPWORDS_FR()"],["SAVOY_STOPWORDS_GER","SAVOY_STOPWORDS_GER()"],["SAVOY_STOPWORDS_IT","SAVOY_STOPWORDS_IT()"],["SAVOY_STOPWORDS_POR","SAVOY_STOPWORDS_POR()"],["SAVOY_STOPWORDS_SP","SAVOY_STOPWORDS_SP()"],["SAVOY_STOPWORDS_SWE","SAVOY_STOPWORDS_SWE()"],["scalar2array","scalar2array( value:any[, dtype:string] )"],["scalar2ndarray","scalar2ndarray( value:any[, options:Object] )"],["sdot","sdot( x:ndarray, y:ndarray )"],["SECONDS_IN_DAY","SECONDS_IN_DAY"],["SECONDS_IN_HOUR","SECONDS_IN_HOUR"],["SECONDS_IN_MINUTE","SECONDS_IN_MINUTE"],["SECONDS_IN_WEEK","SECONDS_IN_WEEK"],["secondsInMonth","secondsInMonth( [month:string|Date|integer[, year:integer]] )"],["secondsInYear","secondsInYear( [value:integer|Date] )"],["sentencize","sentencize( str:string )"],["seq2slice","seq2slice( str:string, len:integer, strict:boolean )"],["setConfigurableReadOnly","setConfigurableReadOnly( obj:Object, prop:string|symbol, value:any )"],["setConfigurableReadOnlyAccessor","setConfigurableReadOnlyAccessor( obj:Object, prop:string|symbol, getter:Function )"],["setConfigurableReadWriteAccessor","setConfigurableReadWriteAccessor( obj:Object, prop:string|symbol, getter:Function, setter:Function )"],["setConfigurableWriteOnlyAccessor","setConfigurableWriteOnlyAccessor( obj:Object, prop:string|symbol, setter:Function )"],["setMemoizedConfigurableReadOnly","setMemoizedConfigurableReadOnly( obj:Object, prop:string|symbol, fcn:Function )"],["setMemoizedReadOnly","setMemoizedReadOnly( obj:Object, prop:string|symbol, fcn:Function )"],["setNonEnumerableProperty","setNonEnumerableProperty( obj:Object, prop:string|symbol, value:any )"],["setNonEnumerableReadOnly","setNonEnumerableReadOnly( obj:Object, prop:string|symbol, value:any )"],["setNonEnumerableReadOnlyAccessor","setNonEnumerableReadOnlyAccessor( obj:Object, prop:string|symbol, getter:Function )"],["setNonEnumerableReadWriteAccessor","setNonEnumerableReadWriteAccessor( obj:Object, prop:string|symbol, getter:Function, setter:Function )"],["setNonEnumerableWriteOnlyAccessor","setNonEnumerableWriteOnlyAccessor( obj:Object, prop:string|symbol, setter:Function )"],["setReadOnly","setReadOnly( obj:Object, prop:string|symbol, value:any )"],["setReadOnlyAccessor","setReadOnlyAccessor( obj:Object, prop:string|symbol, getter:Function )"],["setReadWriteAccessor","setReadWriteAccessor( obj:Object, prop:string|symbol, getter:Function, setter:Function )"],["setWriteOnlyAccessor","setWriteOnlyAccessor( obj:Object, prop:string|symbol, setter:Function )"],["SharedArrayBuffer","SharedArrayBuffer( size:integer )"],["SharedArrayBuffer.length","SharedArrayBuffer.length"],["SharedArrayBuffer.prototype.byteLength","SharedArrayBuffer.prototype.byteLength"],["SharedArrayBuffer.prototype.slice","SharedArrayBuffer.prototype.slice( [start:integer[, end:integer]] )"],["shift","shift( collection:Array|TypedArray|Object )"],["shuffle","shuffle( arr:ArrayLike[, options:Object] )"],["shuffle.factory","shuffle.factory( [options:Object] )"],["sizeOf","sizeOf( dtype:string )"],["Slice","Slice( [stop:integer|null|undefined] )"],["Slice","Slice( start:integer|null|undefined, stop:integer|null|undefined[, step:integer|null|undefined] )"],["Slice.prototype.start","Slice.prototype.start"],["Slice.prototype.stop","Slice.prototype.stop"],["Slice.prototype.step","Slice.prototype.step"],["Slice.prototype.toString","Slice.prototype.toString()"],["Slice.prototype.toJSON","Slice.prototype.toJSON()"],["snakecase","snakecase( str:string )"],["some","some( collection:Array|TypedArray|Object, n:number )"],["someBy","someBy( collection:Array|TypedArray|Object, n:number, predicate:Function[, thisArg:any ] )"],["someByAsync","someByAsync( collection:Array|TypedArray|Object, n:number, [options:Object,] predicate:Function, done:Function )"],["someByAsync.factory","someByAsync.factory( [options:Object,] predicate:Function )"],["someByRight","someByRight( collection:Array|TypedArray|Object, n:number, predicate:Function[, thisArg:any ] )"],["someByRightAsync","someByRightAsync( collection:Array|TypedArray|Object, n:number, [options:Object,] predicate:Function, done:Function )"],["someByRightAsync.factory","someByRightAsync.factory( [options:Object,] predicate:Function )"],["someInBy","someInBy( obj:Object, n:number, predicate:Function[, thisArg:any ] )"],["someOwnBy","someOwnBy( obj:Object, n:number, predicate:Function[, thisArg:any ] )"],["SOTU","SOTU( [options:Object] )"],["SPACHE_REVISED","SPACHE_REVISED()"],["SPAM_ASSASSIN","SPAM_ASSASSIN()"],["SparklineBase","SparklineBase( [data:ArrayLike|ndarray,] [options:Object] )"],["sparsearray2iterator","sparsearray2iterator( src:ArrayLikeObject[, mapFcn:Function[, thisArg:any]] )"],["sparsearray2iteratorRight","sparsearray2iteratorRight( src:ArrayLikeObject[, mapFcn:Function[, thisArg:any]] )"],["splitStream","splitStream( [options:Object] )"],["splitStream.factory","splitStream.factory( [options:Object] )"],["splitStream.objectMode","splitStream.objectMode( [options:Object] )"],["SQRT_EPS","SQRT_EPS"],["SQRT_HALF","SQRT_HALF"],["SQRT_HALF_PI","SQRT_HALF_PI"],["SQRT_PHI","SQRT_PHI"],["SQRT_PI","SQRT_PI"],["SQRT_THREE","SQRT_THREE"],["SQRT_TWO","SQRT_TWO"],["SQRT_TWO_PI","SQRT_TWO_PI"],["SSA_US_BIRTHS_2000_2014","SSA_US_BIRTHS_2000_2014()"],["sswap","sswap( x:ndarray, y:ndarray )"],["Stack","Stack()"],["standalone2pkg","standalone2pkg( pkg:string )"],["STANDARD_CARD_DECK","STANDARD_CARD_DECK()"],["startcase","startcase( str:string )"],["startsWith","startsWith( str:string, search:string[, position:integer] )"],["STOPWORDS_EN","STOPWORDS_EN()"],["strided.abs","strided.abs( N:integer, dtypeX:any, x:ArrayLikeObject, strideX:integer, dtypeY:any, y:ArrayLikeObject, strideY:integer )"],["strided.abs.ndarray","strided.abs.ndarray( N:integer, dtypeX:any, x:ArrayLikeObject, strideX:integer, offsetX:integer, dtypeY:any, y:ArrayLikeObject, strideY:integer, offsetY:integer )"],["strided.abs2","strided.abs2( N:integer, dtypeX:any, x:ArrayLikeObject, strideX:integer, dtypeY:any, y:ArrayLikeObject, strideY:integer )"],["strided.abs2.ndarray","strided.abs2.ndarray( N:integer, dtypeX:any, x:ArrayLikeObject, strideX:integer, offsetX:integer, dtypeY:any, y:ArrayLikeObject, strideY:integer, offsetY:integer )"],["strided.abs2By","strided.abs2By( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, clbk:Function[, thisArg:any] )"],["strided.abs2By.ndarray","strided.abs2By.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, clbk:Function[, thisArg:any] )"],["strided.absBy","strided.absBy( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, clbk:Function[, thisArg:any] )"],["strided.absBy.ndarray","strided.absBy.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, clbk:Function[, thisArg:any] )"],["strided.acosBy","strided.acosBy( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, clbk:Function[, thisArg:any] )"],["strided.acosBy.ndarray","strided.acosBy.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, clbk:Function[, thisArg:any] )"],["strided.acoshBy","strided.acoshBy( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, clbk:Function[, thisArg:any] )"],["strided.acoshBy.ndarray","strided.acoshBy.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, clbk:Function[, thisArg:any] )"],["strided.acotBy","strided.acotBy( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, clbk:Function[, thisArg:any] )"],["strided.acotBy.ndarray","strided.acotBy.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, clbk:Function[, thisArg:any] )"],["strided.acothBy","strided.acothBy( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, clbk:Function[, thisArg:any] )"],["strided.acothBy.ndarray","strided.acothBy.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, clbk:Function[, thisArg:any] )"],["strided.acovercosBy","strided.acovercosBy( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, clbk:Function[, thisArg:any] )"],["strided.acovercosBy.ndarray","strided.acovercosBy.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, clbk:Function[, thisArg:any] )"],["strided.acoversinBy","strided.acoversinBy( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, clbk:Function[, thisArg:any] )"],["strided.acoversinBy.ndarray","strided.acoversinBy.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, clbk:Function[, thisArg:any] )"],["strided.add","strided.add( N:integer, dx:any, x:ArrayLikeObject, sx:integer, dy:any, y:ArrayLikeObject, sy:integer, dz:any, z:ArrayLikeObject, sz:integer )"],["strided.add.ndarray","strided.add.ndarray( N:integer, dx:any, x:ArrayLikeObject, sx:integer, ox:integer, dy:any, y:ArrayLikeObject, sy:integer, oy:integer, dz:any, z:ArrayLikeObject, sz:integer, oz:integer )"],["strided.addBy","strided.addBy( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, z:Array|TypedArray|Object, sz:integer, clbk:Function[, thisArg:any] )"],["strided.addBy.ndarray","strided.addBy.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, z:Array|TypedArray|Object, sz:integer, oz:integer, clbk:Function[, thisArg:any] )"],["strided.ahavercosBy","strided.ahavercosBy( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, clbk:Function[, thisArg:any] )"],["strided.ahavercosBy.ndarray","strided.ahavercosBy.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, clbk:Function[, thisArg:any] )"],["strided.ahaversinBy","strided.ahaversinBy( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, clbk:Function[, thisArg:any] )"],["strided.ahaversinBy.ndarray","strided.ahaversinBy.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, clbk:Function[, thisArg:any] )"],["strided.asinBy","strided.asinBy( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, clbk:Function[, thisArg:any] )"],["strided.asinBy.ndarray","strided.asinBy.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, clbk:Function[, thisArg:any] )"],["strided.asinhBy","strided.asinhBy( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, clbk:Function[, thisArg:any] )"],["strided.asinhBy.ndarray","strided.asinhBy.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, clbk:Function[, thisArg:any] )"],["strided.atanBy","strided.atanBy( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, clbk:Function[, thisArg:any] )"],["strided.atanBy.ndarray","strided.atanBy.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, clbk:Function[, thisArg:any] )"],["strided.atanhBy","strided.atanhBy( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, clbk:Function[, thisArg:any] )"],["strided.atanhBy.ndarray","strided.atanhBy.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, clbk:Function[, thisArg:any] )"],["strided.avercosBy","strided.avercosBy( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, clbk:Function[, thisArg:any] )"],["strided.avercosBy.ndarray","strided.avercosBy.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, clbk:Function[, thisArg:any] )"],["strided.aversinBy","strided.aversinBy( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, clbk:Function[, thisArg:any] )"],["strided.aversinBy.ndarray","strided.aversinBy.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, clbk:Function[, thisArg:any] )"],["strided.besselj0By","strided.besselj0By( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, clbk:Function[, thisArg:any] )"],["strided.besselj0By.ndarray","strided.besselj0By.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, clbk:Function[, thisArg:any] )"],["strided.besselj1By","strided.besselj1By( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, clbk:Function[, thisArg:any] )"],["strided.besselj1By.ndarray","strided.besselj1By.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, clbk:Function[, thisArg:any] )"],["strided.bessely0By","strided.bessely0By( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, clbk:Function[, thisArg:any] )"],["strided.bessely0By.ndarray","strided.bessely0By.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, clbk:Function[, thisArg:any] )"],["strided.bessely1By","strided.bessely1By( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, clbk:Function[, thisArg:any] )"],["strided.bessely1By.ndarray","strided.bessely1By.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, clbk:Function[, thisArg:any] )"],["strided.binetBy","strided.binetBy( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, clbk:Function[, thisArg:any] )"],["strided.binetBy.ndarray","strided.binetBy.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, clbk:Function[, thisArg:any] )"],["strided.cbrt","strided.cbrt( N:integer, dtypeX:any, x:ArrayLikeObject, strideX:integer, dtypeY:any, y:ArrayLikeObject, strideY:integer )"],["strided.cbrt.ndarray","strided.cbrt.ndarray( N:integer, dtypeX:any, x:ArrayLikeObject, strideX:integer, offsetX:integer, dtypeY:any, y:ArrayLikeObject, strideY:integer, offsetY:integer )"],["strided.cbrtBy","strided.cbrtBy( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, clbk:Function[, thisArg:any] )"],["strided.cbrtBy.ndarray","strided.cbrtBy.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, clbk:Function[, thisArg:any] )"],["strided.ceil","strided.ceil( N:integer, dtypeX:any, x:ArrayLikeObject, strideX:integer, dtypeY:any, y:ArrayLikeObject, strideY:integer )"],["strided.ceil.ndarray","strided.ceil.ndarray( N:integer, dtypeX:any, x:ArrayLikeObject, strideX:integer, offsetX:integer, dtypeY:any, y:ArrayLikeObject, strideY:integer, offsetY:integer )"],["strided.cosBy","strided.cosBy( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, clbk:Function[, thisArg:any] )"],["strided.cosBy.ndarray","strided.cosBy.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, clbk:Function[, thisArg:any] )"],["strided.deg2rad","strided.deg2rad( N:integer, dtypeX:any, x:ArrayLikeObject, strideX:integer, dtypeY:any, y:ArrayLikeObject, strideY:integer )"],["strided.deg2rad.ndarray","strided.deg2rad.ndarray( N:integer, dtypeX:any, x:ArrayLikeObject, strideX:integer, offsetX:integer, dtypeY:any, y:ArrayLikeObject, strideY:integer, offsetY:integer )"],["strided.dataTypes","strided.dataTypes()"],["strided.dcbrtBy","strided.dcbrtBy( N:integer, x:Float64Array, sx:integer, y:Float64Array, sy:integer, clbk:Function[, thisArg:any] )"],["strided.dcbrtBy.ndarray","strided.dcbrtBy.ndarray( N:integer, x:Float64Array, sx:integer, ox:integer, y:Float64Array, sy:integer, oy:integer, clbk:Function[, thisArg:any] )"],["strided.dispatch","strided.dispatch( fcns:Function|ArrayLikeObject<Function>, types:ArrayLikeObject, data:ArrayLikeObject|null, nargs:integer, nin:integer, nout:integer )"],["strided.dispatchBy","strided.dispatchBy( fcns:Function|ArrayLikeObject<Function>, types:ArrayLikeObject, data:ArrayLikeObject|null, nargs:integer, nin:integer, nout:integer )"],["strided.floor","strided.floor( N:integer, dtypeX:any, x:ArrayLikeObject, strideX:integer, dtypeY:any, y:ArrayLikeObject, strideY:integer )"],["strided.floor.ndarray","strided.floor.ndarray( N:integer, dtypeX:any, x:ArrayLikeObject, strideX:integer, offsetX:integer, dtypeY:any, y:ArrayLikeObject, strideY:integer, offsetY:integer )"],["strided.inv","strided.inv( N:integer, dtypeX:any, x:ArrayLikeObject, strideX:integer, dtypeY:any, y:ArrayLikeObject, strideY:integer )"],["strided.inv.ndarray","strided.inv.ndarray( N:integer, dtypeX:any, x:ArrayLikeObject, strideX:integer, offsetX:integer, dtypeY:any, y:ArrayLikeObject, strideY:integer, offsetY:integer )"],["strided.mul","strided.mul( N:integer, dx:any, x:ArrayLikeObject, sx:integer, dy:any, y:ArrayLikeObject, sy:integer, dz:any, z:ArrayLikeObject, sz:integer )"],["strided.mul.ndarray","strided.mul.ndarray( N:integer, dx:any, x:ArrayLikeObject, sx:integer, ox:integer, dy:any, y:ArrayLikeObject, sy:integer, oy:integer, dz:any, z:ArrayLikeObject, sz:integer, oz:integer )"],["strided.mulBy","strided.mulBy( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, z:Array|TypedArray|Object, sz:integer, clbk:Function[, thisArg:any] )"],["strided.mulBy.ndarray","strided.mulBy.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, z:Array|TypedArray|Object, sz:integer, oz:integer, clbk:Function[, thisArg:any] )"],["strided.ramp","strided.ramp( N:integer, dtypeX:any, x:ArrayLikeObject, strideX:integer, dtypeY:any, y:ArrayLikeObject, strideY:integer )"],["strided.ramp.ndarray","strided.ramp.ndarray( N:integer, dtypeX:any, x:ArrayLikeObject, strideX:integer, offsetX:integer, dtypeY:any, y:ArrayLikeObject, strideY:integer, offsetY:integer )"],["strided.rsqrt","strided.rsqrt( N:integer, dtypeX:any, x:ArrayLikeObject, strideX:integer, dtypeY:any, y:ArrayLikeObject, strideY:integer )"],["strided.rsqrt.ndarray","strided.rsqrt.ndarray( N:integer, dtypeX:any, x:ArrayLikeObject, strideX:integer, offsetX:integer, dtypeY:any, y:ArrayLikeObject, strideY:integer, offsetY:integer )"],["strided.sinBy","strided.sinBy( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, clbk:Function[, thisArg:any] )"],["strided.sinBy.ndarray","strided.sinBy.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, clbk:Function[, thisArg:any] )"],["strided.sqrt","strided.sqrt( N:integer, dtypeX:any, x:ArrayLikeObject, strideX:integer, dtypeY:any, y:ArrayLikeObject, strideY:integer )"],["strided.sqrt.ndarray","strided.sqrt.ndarray( N:integer, dtypeX:any, x:ArrayLikeObject, strideX:integer, offsetX:integer, dtypeY:any, y:ArrayLikeObject, strideY:integer, offsetY:integer )"],["strided.sqrtBy","strided.sqrtBy( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, clbk:Function[, thisArg:any] )"],["strided.sqrtBy.ndarray","strided.sqrtBy.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, clbk:Function[, thisArg:any] )"],["strided.sub","strided.sub( N:integer, dx:any, x:ArrayLikeObject, sx:integer, dy:any, y:ArrayLikeObject, sy:integer, dz:any, z:ArrayLikeObject, sz:integer )"],["strided.sub.ndarray","strided.sub.ndarray( N:integer, dx:any, x:ArrayLikeObject, sx:integer, ox:integer, dy:any, y:ArrayLikeObject, sy:integer, oy:integer, dz:any, z:ArrayLikeObject, sz:integer, oz:integer )"],["strided.subBy","strided.subBy( N:integer, x:Array|TypedArray|Object, sx:integer, y:Array|TypedArray|Object, sy:integer, z:Array|TypedArray|Object, sz:integer, clbk:Function[, thisArg:any] )"],["strided.subBy.ndarray","strided.subBy.ndarray( N:integer, x:Array|TypedArray|Object, sx:integer, ox:integer, y:Array|TypedArray|Object, sy:integer, oy:integer, z:Array|TypedArray|Object, sz:integer, oz:integer, clbk:Function[, thisArg:any] )"],["strided.trunc","strided.trunc( N:integer, dtypeX:any, x:ArrayLikeObject, strideX:integer, dtypeY:any, y:ArrayLikeObject, strideY:integer )"],["strided.trunc.ndarray","strided.trunc.ndarray( N:integer, dtypeX:any, x:ArrayLikeObject, strideX:integer, offsetX:integer, dtypeY:any, y:ArrayLikeObject, strideY:integer, offsetY:integer )"],["stridedarray2iterator","stridedarray2iterator( N:integer, src:ArrayLikeObject, stride:integer, offset:integer[, mapFcn:Function[, thisArg:any]] )"],["stridedArrayStream","stridedArrayStream( N:integer, buffer:ArrayLikeObject, stride:integer, offset:integer[, options:Object] )"],["stridedArrayStream.factory","stridedArrayStream.factory( [options:Object] )"],["stridedArrayStream.objectMode","stridedArrayStream.objectMode( N:integer, buffer:ArrayLikeObject, stride:integer, offset:integer[, options:Object] )"],["string2buffer","string2buffer( str:string[, encoding:string] )"],["sub2ind","sub2ind( shape:ArrayLike, ...subscript:integer[, options:Object] )"],["substringAfter","substringAfter( str:string, search:string[, fromIndex:integer] )"],["substringAfterLast","substringAfterLast( str:string, search:string[, fromIndex:integer] )"],["substringBefore","substringBefore( str:string, search:string )"],["substringBeforeLast","substringBeforeLast( str:string, search:string )"],["SUTHAHARAN_MULTI_HOP_SENSOR_NETWORK","SUTHAHARAN_MULTI_HOP_SENSOR_NETWORK()"],["SUTHAHARAN_SINGLE_HOP_SENSOR_NETWORK","SUTHAHARAN_SINGLE_HOP_SENSOR_NETWORK()"],["Symbol","Symbol( [description:string] )"],["tabulate","tabulate( collection:Array|TypedArray|Object )"],["tabulateBy","tabulateBy( collection:Array|TypedArray|Object, [options:Object,] indicator:Function )"],["tabulateByAsync","tabulateByAsync( collection:Array|TypedArray|Object, [options:Object,] indicator:Function, done:Function )"],["tabulateByAsync.factory","tabulateByAsync.factory( [options:Object,] indicator:Function )"],["thunk","thunk( fcn:Function[, ...args:any] )"],["tic","tic()"],["timeit","timeit( code:string, [options:Object,] clbk:Function )"],["tmpdir","tmpdir()"],["toc","toc( time:Array<integer> )"],["tokenize","tokenize( str:string[, keepWhitespace:boolean] )"],["transformStream","transformStream( [options:Object] )"],["transformStream.factory","transformStream.factory( [options:Object] )"],["transformStream.objectMode","transformStream.objectMode( [options:Object] )"],["transformStream.ctor","transformStream.ctor( [options:Object] )"],["trim","trim( str:string )"],["truncate","truncate( str:string, len:integer[, ending:string] )"],["truncateMiddle","truncateMiddle( str:string, len:integer[, seq:string] )"],["trycatch","trycatch( x:Function, y:any )"],["trycatchAsync","trycatchAsync( x:Function, y:any, done:Function )"],["tryFunction","tryFunction( fcn:Function[, thisArg:any] )"],["tryRequire","tryRequire( id:string )"],["trythen","trythen( x:Function, y:Function )"],["trythenAsync","trythenAsync( x:Function, y:Function, done:Function )"],["ttest","ttest( x:Array<number>[, y:Array<number>][, options:Object] )"],["ttest2","ttest2( x:Array<number>, y:Array<number>[, options:Object] )"],["TWO_PI","TWO_PI"],["typedarray","typedarray( [dtype:string] )"],["typedarray","typedarray( length:integer[, dtype:string] )"],["typedarray","typedarray( typedarray:TypedArray[, dtype:string] )"],["typedarray","typedarray( obj:Object[, dtype:string] )"],["typedarray","typedarray( buffer:ArrayBuffer[, byteOffset:integer[, length:integer]][, dtype:string] )"],["typedarray2json","typedarray2json( arr:TypedArray )"],["typedarrayCtors","typedarrayCtors( dtype:string )"],["typedarrayDataTypes","typedarrayDataTypes()"],["typedarraypool","typedarraypool( [dtype:string] )"],["typedarraypool","typedarraypool( length:integer[, dtype:string] )"],["typedarraypool","typedarraypool( typedarray:TypedArray[, dtype:string] )"],["typedarraypool","typedarraypool( obj:Object[, dtype:string] )"],["typedarraypool.malloc","typedarraypool.malloc( [dtype:string] )"],["typedarraypool.malloc","typedarraypool.malloc( length:integer[, dtype:string] )"],["typedarraypool.malloc","typedarraypool.malloc( typedarray:TypedArray[, dtype:string] )"],["typedarraypool.malloc","typedarraypool.malloc( obj:Object[, dtype:string] )"],["typedarraypool.calloc","typedarraypool.calloc( [dtype:string] )"],["typedarraypool.calloc","typedarraypool.calloc( length:integer[, dtype:string] )"],["typedarraypool.free","typedarraypool.free( buf:TypedArray|ArrayBuffer )"],["typedarraypool.clear","typedarraypool.clear()"],["typedarraypool.highWaterMark","typedarraypool.highWaterMark"],["typedarraypool.nbytes","typedarraypool.nbytes"],["typedarraypool.factory","typedarraypool.factory( [options:Object] )"],["typemax","typemax( dtype:string )"],["typemin","typemin( dtype:string )"],["typeOf","typeOf( value:any )"],["UINT8_MAX","UINT8_MAX"],["UINT8_NUM_BYTES","UINT8_NUM_BYTES"],["Uint8Array","Uint8Array()"],["Uint8Array","Uint8Array( length:integer )"],["Uint8Array","Uint8Array( typedarray:TypedArray )"],["Uint8Array","Uint8Array( obj:Object )"],["Uint8Array","Uint8Array( buffer:ArrayBuffer[, byteOffset:integer[, length:integer]] )"],["Uint8Array.from","Uint8Array.from( src:ArrayLike|Iterable[, map:Function[, thisArg:Any]] )"],["Uint8Array.of","Uint8Array.of( element0:number[, element1:number[, ...elementN:number]] )"],["Uint8Array.BYTES_PER_ELEMENT","Uint8Array.BYTES_PER_ELEMENT"],["Uint8Array.name","Uint8Array.name"],["Uint8Array.prototype.buffer","Uint8Array.prototype.buffer"],["Uint8Array.prototype.byteLength","Uint8Array.prototype.byteLength"],["Uint8Array.prototype.byteOffset","Uint8Array.prototype.byteOffset"],["Uint8Array.prototype.BYTES_PER_ELEMENT","Uint8Array.prototype.BYTES_PER_ELEMENT"],["Uint8Array.prototype.length","Uint8Array.prototype.length"],["Uint8Array.prototype.copyWithin","Uint8Array.prototype.copyWithin( target:integer, start:integer[, end:integer] )"],["Uint8Array.prototype.entries","Uint8Array.prototype.entries()"],["Uint8Array.prototype.every","Uint8Array.prototype.every( predicate:Function[, thisArg:Any] )"],["Uint8Array.prototype.fill","Uint8Array.prototype.fill( value:number[, start:integer[, end:integer]] )"],["Uint8Array.prototype.filter","Uint8Array.prototype.filter( predicate:Function[, thisArg:Any] )"],["Uint8Array.prototype.find","Uint8Array.prototype.find( predicate:Function[, thisArg:Any] )"],["Uint8Array.prototype.findIndex","Uint8Array.prototype.findIndex( predicate:Function[, thisArg:Any] )"],["Uint8Array.prototype.forEach","Uint8Array.prototype.forEach( fcn:Function[, thisArg:Any] )"],["Uint8Array.prototype.includes","Uint8Array.prototype.includes( searchElement:number[, fromIndex:integer] )"],["Uint8Array.prototype.indexOf","Uint8Array.prototype.indexOf( searchElement:number[, fromIndex:integer] )"],["Uint8Array.prototype.join","Uint8Array.prototype.join( [separator:string] )"],["Uint8Array.prototype.keys","Uint8Array.prototype.keys()"],["Uint8Array.prototype.lastIndexOf","Uint8Array.prototype.lastIndexOf( searchElement:number[, fromIndex:integer] )"],["Uint8Array.prototype.map","Uint8Array.prototype.map( fcn:Function[, thisArg:Any] )"],["Uint8Array.prototype.reduce","Uint8Array.prototype.reduce( fcn:Function[, initialValue:Any] )"],["Uint8Array.prototype.reduceRight","Uint8Array.prototype.reduceRight( fcn:Function[, initialValue:Any] )"],["Uint8Array.prototype.reverse","Uint8Array.prototype.reverse()"],["Uint8Array.prototype.set","Uint8Array.prototype.set( arr:ArrayLike[, offset:integer] )"],["Uint8Array.prototype.slice","Uint8Array.prototype.slice( [begin:integer[, end:integer]] )"],["Uint8Array.prototype.some","Uint8Array.prototype.some( predicate:Function[, thisArg:Any] )"],["Uint8Array.prototype.sort","Uint8Array.prototype.sort( [compareFunction:Function] )"],["Uint8Array.prototype.subarray","Uint8Array.prototype.subarray( [begin:integer[, end:integer]] )"],["Uint8Array.prototype.toLocaleString","Uint8Array.prototype.toLocaleString( [locales:string|Array[, options:Object]] )"],["Uint8Array.prototype.toString","Uint8Array.prototype.toString()"],["Uint8Array.prototype.values","Uint8Array.prototype.values()"],["Uint8ClampedArray","Uint8ClampedArray()"],["Uint8ClampedArray","Uint8ClampedArray( length:integer )"],["Uint8ClampedArray","Uint8ClampedArray( typedarray:TypedArray )"],["Uint8ClampedArray","Uint8ClampedArray( obj:Object )"],["Uint8ClampedArray","Uint8ClampedArray( buffer:ArrayBuffer[, byteOffset:integer[, length:integer]] )"],["Uint8ClampedArray.from","Uint8ClampedArray.from( src:ArrayLike|Iterable[, map:Function[, thisArg:Any]] )"],["Uint8ClampedArray.of","Uint8ClampedArray.of( element0:number[, element1:number[, ...elementN:number]] )"],["Uint8ClampedArray.BYTES_PER_ELEMENT","Uint8ClampedArray.BYTES_PER_ELEMENT"],["Uint8ClampedArray.name","Uint8ClampedArray.name"],["Uint8ClampedArray.prototype.buffer","Uint8ClampedArray.prototype.buffer"],["Uint8ClampedArray.prototype.byteLength","Uint8ClampedArray.prototype.byteLength"],["Uint8ClampedArray.prototype.byteOffset","Uint8ClampedArray.prototype.byteOffset"],["Uint8ClampedArray.prototype.BYTES_PER_ELEMENT","Uint8ClampedArray.prototype.BYTES_PER_ELEMENT"],["Uint8ClampedArray.prototype.length","Uint8ClampedArray.prototype.length"],["Uint8ClampedArray.prototype.copyWithin","Uint8ClampedArray.prototype.copyWithin( target:integer, start:integer[, end:integer] )"],["Uint8ClampedArray.prototype.entries","Uint8ClampedArray.prototype.entries()"],["Uint8ClampedArray.prototype.every","Uint8ClampedArray.prototype.every( predicate:Function[, thisArg:Any] )"],["Uint8ClampedArray.prototype.fill","Uint8ClampedArray.prototype.fill( value:number[, start:integer[, end:integer]] )"],["Uint8ClampedArray.prototype.filter","Uint8ClampedArray.prototype.filter( predicate:Function[, thisArg:Any] )"],["Uint8ClampedArray.prototype.find","Uint8ClampedArray.prototype.find( predicate:Function[, thisArg:Any] )"],["Uint8ClampedArray.prototype.findIndex","Uint8ClampedArray.prototype.findIndex( predicate:Function[, thisArg:Any] )"],["Uint8ClampedArray.prototype.forEach","Uint8ClampedArray.prototype.forEach( fcn:Function[, thisArg:Any] )"],["Uint8ClampedArray.prototype.includes","Uint8ClampedArray.prototype.includes( searchElement:number[, fromIndex:integer] )"],["Uint8ClampedArray.prototype.indexOf","Uint8ClampedArray.prototype.indexOf( searchElement:number[, fromIndex:integer] )"],["Uint8ClampedArray.prototype.join","Uint8ClampedArray.prototype.join( [separator:string] )"],["Uint8ClampedArray.prototype.keys","Uint8ClampedArray.prototype.keys()"],["Uint8ClampedArray.prototype.lastIndexOf","Uint8ClampedArray.prototype.lastIndexOf( searchElement:number[, fromIndex:integer] )"],["Uint8ClampedArray.prototype.map","Uint8ClampedArray.prototype.map( fcn:Function[, thisArg:Any] )"],["Uint8ClampedArray.prototype.reduce","Uint8ClampedArray.prototype.reduce( fcn:Function[, initialValue:Any] )"],["Uint8ClampedArray.prototype.reduceRight","Uint8ClampedArray.prototype.reduceRight( fcn:Function[, initialValue:Any] )"],["Uint8ClampedArray.prototype.reverse","Uint8ClampedArray.prototype.reverse()"],["Uint8ClampedArray.prototype.set","Uint8ClampedArray.prototype.set( arr:ArrayLike[, offset:integer] )"],["Uint8ClampedArray.prototype.slice","Uint8ClampedArray.prototype.slice( [begin:integer[, end:integer]] )"],["Uint8ClampedArray.prototype.some","Uint8ClampedArray.prototype.some( predicate:Function[, thisArg:Any] )"],["Uint8ClampedArray.prototype.sort","Uint8ClampedArray.prototype.sort( [compareFunction:Function] )"],["Uint8ClampedArray.prototype.subarray","Uint8ClampedArray.prototype.subarray( [begin:integer[, end:integer]] )"],["Uint8ClampedArray.prototype.toLocaleString","Uint8ClampedArray.prototype.toLocaleString( [locales:string|Array[, options:Object]] )"],["Uint8ClampedArray.prototype.toString","Uint8ClampedArray.prototype.toString()"],["Uint8ClampedArray.prototype.values","Uint8ClampedArray.prototype.values()"],["UINT16_MAX","UINT16_MAX"],["UINT16_NUM_BYTES","UINT16_NUM_BYTES"],["Uint16Array","Uint16Array()"],["Uint16Array","Uint16Array( length:integer )"],["Uint16Array","Uint16Array( typedarray:TypedArray )"],["Uint16Array","Uint16Array( obj:Object )"],["Uint16Array","Uint16Array( buffer:ArrayBuffer[, byteOffset:integer[, length:integer]] )"],["Uint16Array.from","Uint16Array.from( src:ArrayLike|Iterable[, map:Function[, thisArg:Any]] )"],["Uint16Array.of","Uint16Array.of( element0:number[, element1:number[, ...elementN:number]] )"],["Uint16Array.BYTES_PER_ELEMENT","Uint16Array.BYTES_PER_ELEMENT"],["Uint16Array.name","Uint16Array.name"],["Uint16Array.prototype.buffer","Uint16Array.prototype.buffer"],["Uint16Array.prototype.byteLength","Uint16Array.prototype.byteLength"],["Uint16Array.prototype.byteOffset","Uint16Array.prototype.byteOffset"],["Uint16Array.prototype.BYTES_PER_ELEMENT","Uint16Array.prototype.BYTES_PER_ELEMENT"],["Uint16Array.prototype.length","Uint16Array.prototype.length"],["Uint16Array.prototype.copyWithin","Uint16Array.prototype.copyWithin( target:integer, start:integer[, end:integer] )"],["Uint16Array.prototype.entries","Uint16Array.prototype.entries()"],["Uint16Array.prototype.every","Uint16Array.prototype.every( predicate:Function[, thisArg:Any] )"],["Uint16Array.prototype.fill","Uint16Array.prototype.fill( value:number[, start:integer[, end:integer]] )"],["Uint16Array.prototype.filter","Uint16Array.prototype.filter( predicate:Function[, thisArg:Any] )"],["Uint16Array.prototype.find","Uint16Array.prototype.find( predicate:Function[, thisArg:Any] )"],["Uint16Array.prototype.findIndex","Uint16Array.prototype.findIndex( predicate:Function[, thisArg:Any] )"],["Uint16Array.prototype.forEach","Uint16Array.prototype.forEach( fcn:Function[, thisArg:Any] )"],["Uint16Array.prototype.includes","Uint16Array.prototype.includes( searchElement:number[, fromIndex:integer] )"],["Uint16Array.prototype.indexOf","Uint16Array.prototype.indexOf( searchElement:number[, fromIndex:integer] )"],["Uint16Array.prototype.join","Uint16Array.prototype.join( [separator:string] )"],["Uint16Array.prototype.keys","Uint16Array.prototype.keys()"],["Uint16Array.prototype.lastIndexOf","Uint16Array.prototype.lastIndexOf( searchElement:number[, fromIndex:integer] )"],["Uint16Array.prototype.map","Uint16Array.prototype.map( fcn:Function[, thisArg:Any] )"],["Uint16Array.prototype.reduce","Uint16Array.prototype.reduce( fcn:Function[, initialValue:Any] )"],["Uint16Array.prototype.reduceRight","Uint16Array.prototype.reduceRight( fcn:Function[, initialValue:Any] )"],["Uint16Array.prototype.reverse","Uint16Array.prototype.reverse()"],["Uint16Array.prototype.set","Uint16Array.prototype.set( arr:ArrayLike[, offset:integer] )"],["Uint16Array.prototype.slice","Uint16Array.prototype.slice( [begin:integer[, end:integer]] )"],["Uint16Array.prototype.some","Uint16Array.prototype.some( predicate:Function[, thisArg:Any] )"],["Uint16Array.prototype.sort","Uint16Array.prototype.sort( [compareFunction:Function] )"],["Uint16Array.prototype.subarray","Uint16Array.prototype.subarray( [begin:integer[, end:integer]] )"],["Uint16Array.prototype.toLocaleString","Uint16Array.prototype.toLocaleString( [locales:string|Array[, options:Object]] )"],["Uint16Array.prototype.toString","Uint16Array.prototype.toString()"],["Uint16Array.prototype.values","Uint16Array.prototype.values()"],["UINT32_MAX","UINT32_MAX"],["UINT32_NUM_BYTES","UINT32_NUM_BYTES"],["Uint32Array","Uint32Array()"],["Uint32Array","Uint32Array( length:integer )"],["Uint32Array","Uint32Array( typedarray:TypedArray )"],["Uint32Array","Uint32Array( obj:Object )"],["Uint32Array","Uint32Array( buffer:ArrayBuffer[, byteOffset:integer[, length:integer]] )"],["Uint32Array.from","Uint32Array.from( src:ArrayLike|Iterable[, map:Function[, thisArg:Any]] )"],["Uint32Array.of","Uint32Array.of( element0:number[, element1:number[, ...elementN:number]] )"],["Uint32Array.BYTES_PER_ELEMENT","Uint32Array.BYTES_PER_ELEMENT"],["Uint32Array.name","Uint32Array.name"],["Uint32Array.prototype.buffer","Uint32Array.prototype.buffer"],["Uint32Array.prototype.byteLength","Uint32Array.prototype.byteLength"],["Uint32Array.prototype.byteOffset","Uint32Array.prototype.byteOffset"],["Uint32Array.prototype.BYTES_PER_ELEMENT","Uint32Array.prototype.BYTES_PER_ELEMENT"],["Uint32Array.prototype.length","Uint32Array.prototype.length"],["Uint32Array.prototype.copyWithin","Uint32Array.prototype.copyWithin( target:integer, start:integer[, end:integer] )"],["Uint32Array.prototype.entries","Uint32Array.prototype.entries()"],["Uint32Array.prototype.every","Uint32Array.prototype.every( predicate:Function[, thisArg:Any] )"],["Uint32Array.prototype.fill","Uint32Array.prototype.fill( value:number[, start:integer[, end:integer]] )"],["Uint32Array.prototype.filter","Uint32Array.prototype.filter( predicate:Function[, thisArg:Any] )"],["Uint32Array.prototype.find","Uint32Array.prototype.find( predicate:Function[, thisArg:Any] )"],["Uint32Array.prototype.findIndex","Uint32Array.prototype.findIndex( predicate:Function[, thisArg:Any] )"],["Uint32Array.prototype.forEach","Uint32Array.prototype.forEach( fcn:Function[, thisArg:Any] )"],["Uint32Array.prototype.includes","Uint32Array.prototype.includes( searchElement:number[, fromIndex:integer] )"],["Uint32Array.prototype.indexOf","Uint32Array.prototype.indexOf( searchElement:number[, fromIndex:integer] )"],["Uint32Array.prototype.join","Uint32Array.prototype.join( [separator:string] )"],["Uint32Array.prototype.keys","Uint32Array.prototype.keys()"],["Uint32Array.prototype.lastIndexOf","Uint32Array.prototype.lastIndexOf( searchElement:number[, fromIndex:integer] )"],["Uint32Array.prototype.map","Uint32Array.prototype.map( fcn:Function[, thisArg:Any] )"],["Uint32Array.prototype.reduce","Uint32Array.prototype.reduce( fcn:Function[, initialValue:Any] )"],["Uint32Array.prototype.reduceRight","Uint32Array.prototype.reduceRight( fcn:Function[, initialValue:Any] )"],["Uint32Array.prototype.reverse","Uint32Array.prototype.reverse()"],["Uint32Array.prototype.set","Uint32Array.prototype.set( arr:ArrayLike[, offset:integer] )"],["Uint32Array.prototype.slice","Uint32Array.prototype.slice( [begin:integer[, end:integer]] )"],["Uint32Array.prototype.some","Uint32Array.prototype.some( predicate:Function[, thisArg:Any] )"],["Uint32Array.prototype.sort","Uint32Array.prototype.sort( [compareFunction:Function] )"],["Uint32Array.prototype.subarray","Uint32Array.prototype.subarray( [begin:integer[, end:integer]] )"],["Uint32Array.prototype.toLocaleString","Uint32Array.prototype.toLocaleString( [locales:string|Array[, options:Object]] )"],["Uint32Array.prototype.toString","Uint32Array.prototype.toString()"],["Uint32Array.prototype.values","Uint32Array.prototype.values()"],["umask","umask( [mask:integer|string,] [options:Object] )"],["uncapitalize","uncapitalize( str:string )"],["uncapitalizeKeys","uncapitalizeKeys( obj:Object )"],["uncurry","uncurry( fcn:Function[, arity:integer, ][thisArg:any] )"],["uncurryRight","uncurryRight( fcn:Function[, arity:integer, ][thisArg:any] )"],["UNICODE_MAX","UNICODE_MAX"],["UNICODE_MAX_BMP","UNICODE_MAX_BMP"],["UnicodeColumnChartSparkline","UnicodeColumnChartSparkline( [data:ArrayLike|ndarray,] [options:Object] )"],["UnicodeLineChartSparkline","UnicodeLineChartSparkline( [data:ArrayLike|ndarray,] [options:Object] )"],["UnicodeSparkline","UnicodeSparkline( [data:ArrayLike|ndarray,] [options:Object] )"],["UnicodeTristateChartSparkline","UnicodeTristateChartSparkline( [data:ArrayLike|ndarray,] [options:Object] )"],["UnicodeUpDownChartSparkline","UnicodeUpDownChartSparkline( [data:ArrayLike|ndarray,] [options:Object] )"],["UnicodeWinLossChartSparkline","UnicodeWinLossChartSparkline( [data:ArrayLike|ndarray,] [options:Object] )"],["unlink","unlink( path:string|Buffer|integer, clbk:Function )"],["unlink.sync","unlink.sync( path:string|Buffer|integer )"],["unshift","unshift( collection:Array|TypedArray|Object, ...items:any )"],["until","until( predicate:Function, fcn:Function[, thisArg:any] )"],["untilAsync","untilAsync( predicate:Function, fcn:Function, done:Function[, thisArg:any] )"],["untilEach","untilEach( collection:Array|TypedArray|Object, predicate:Function, fcn:Function[, thisArg:any] )"],["untilEachRight","untilEachRight( collection:Array|TypedArray|Object, predicate:Function, fcn:Function[, thisArg:any] )"],["unzip","unzip( arr:Array[, idx:Array<number>] )"],["uppercase","uppercase( str:string )"],["uppercaseKeys","uppercaseKeys( obj:Object )"],["US_STATES_ABBR","US_STATES_ABBR()"],["US_STATES_CAPITALS","US_STATES_CAPITALS()"],["US_STATES_CAPITALS_NAMES","US_STATES_CAPITALS_NAMES()"],["US_STATES_NAMES","US_STATES_NAMES()"],["US_STATES_NAMES_CAPITALS","US_STATES_NAMES_CAPITALS()"],["utf16ToUTF8Array","utf16ToUTF8Array( str:string )"],["vartest","vartest( x:Array<number>, y:Array<number>[, options:Object] )"],["waterfall","waterfall( fcns:Array<Function>, clbk:Function[, thisArg:any] )"],["waterfall.factory","waterfall.factory( fcns:Array<Function>, clbk:Function[, thisArg:any] )"],["whileAsync","whileAsync( predicate:Function, fcn:Function, done:Function[, thisArg:any] )"],["whileEach","whileEach( collection:Array|TypedArray|Object, predicate:Function, fcn:Function[, thisArg:any] )"],["whileEachRight","whileEachRight( collection:Array|TypedArray|Object, predicate:Function, fcn:Function[, thisArg:any] )"],["whilst","whilst( predicate:Function, fcn:Function[, thisArg:any] )"],["wilcoxon","wilcoxon( x:Array|TypedArray[, y:Array|TypedArray][, options:Object] )"],["writableProperties","writableProperties( value:any )"],["writablePropertiesIn","writablePropertiesIn( value:any )"],["writablePropertyNames","writablePropertyNames( value:any )"],["writablePropertyNamesIn","writablePropertyNamesIn( value:any )"],["writablePropertySymbols","writablePropertySymbols( value:any )"],["writablePropertySymbolsIn","writablePropertySymbolsIn( value:any )"],["writeFile","writeFile( file:string|Buffer|integer, data:string|Buffer[, options:Object|string], clbk:Function )"],["writeFile.sync","writeFile.sync( file:string|Buffer|integer, data:string|Buffer[, options:Object|string] )"],["zip","zip( ...arr:Array[, options:Object] )"],["ztest","ztest( x:Array<number>, sigma:number[, options:Object] )"],["ztest2","ztest2( x:Array<number>, y:Array<number>, sigmax:number, sigmay:number[, options:Object] )"]]
