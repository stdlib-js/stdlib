/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax,  no-underscore-dangle, no-invalid-this */

'use strict';

// MODULES //

var readline = require( 'readline' );
var logger = require( 'debug' );
var setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var repeat = require( '@stdlib/string/repeat' );
var longestCommonPrefix = require( './longest_common_prefix.js' );


// VARIABLES //

var debug = logger( 'repl:preview_completer' );


// MAIN //

/**
* Constructor for creating a preview completer.
*
* @private
* @constructor
* @param {Object} rli - readline instance
* @param {Function} completer - function for generating possible completions
* @param {WritableStream} ostream - writable stream
* @returns {PreviewCompleter} completer instance
*/
function PreviewCompleter( rli, completer, ostream ) {
	if ( !(this instanceof PreviewCompleter) ) {
		return new PreviewCompleter( rli, ostream );
	}
	debug( 'Creating a preview completer...' );

	// Cache a reference to the provided readline interface:
	this._rli = rli;

	// Cache a reference to the output writable stream:
	this._ostream = ostream;

	// Cache a reference to the provided completer:
	this._completer = completer;

	// Initialize a buffer containing the currently displayed completion preview:
	this._preview = '';

	return this;
}

/**
* Clears a completion preview.
*
* @private
* @name _clear
* @memberof PreviewCompleter.prototype
* @returns {void}
*/
setNonEnumerableReadOnly( PreviewCompleter.prototype, '_clear', function clear() {
	var preview = this._preview;

	// If no preview currently displayed, nothing to clear...
	if ( preview === '' ) {
		return;
	}
	debug( 'Clearing completion preview...' );

	// Replace the current display text with whitespace:
	this._ostream.write( repeat( ' ', preview.length ) );

	// Reset the cursor:
	readline.moveCursor( this._ostream, -preview.length );

	// Reset the completion preview buffer:
	this._preview = '';
});

PreviewCompleter.prototype.beforeKeypress = beforeKeypress;
PreviewCompleter.prototype.onKeypress = onKeypress;
PreviewCompleter.prototype._onCompletions = onCompletions;

/**
* This event fires before the keypress is processed by the readline input and ensures.
* the following interactions:
* If the user pressed 'return' while a preview is showing, and the user has the cursor
* at the end of the line, the preview is filled in before the line is executed.
* If the user pressed 'right' while the caret is at the end of the line and a preview is
* showing, the preview is filled in.
*
* @param {Object} key the key the user pressed
*/
function beforeKeypress( key ) {
	if ( key && ( key.name === 'return' || key.name === 'enter' ) && this._preview !== '' ) {
		if ( this._rli.cursor === this._rli.line.length ) {
			this._rli.write( this._preview );
			this._preview = '';
		} else {
			this._clear();
		}
	}
	if ( key && key.name === 'right' &&
		this._rli.cursor === this._rli.line.length &&
		this._preview !== '' ) {
		this._rli.write( this._preview );
		this._preview = '';
	}
}

/**
* Event listener which fires after a key is pressed.
*/
function onKeypress() {
	var self = this;

	// Get the possible tab completions from the completer
	this._completer( this._rli.line, clbk );

	/**
	* Callback invoked upon generating potential TAB completions.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Array} completions - completion results
	* @returns {void}
	*/
	function clbk( error, completions ) {
		if ( error ) {
			return;
		}
		self._onCompletions( completions );
	}
}

/**
* Callback function passed to the completer.
*
* @private
* @param {*} completions the possible completions passed by the completer
*/
function onCompletions( completions ) {
	var charactersToEnd;
	var commonPrefix;
	var completion;

	// If there is only one possible tab completion
	if ( completions[ 0 ].length === 1 ) {
		completion = completions[ 0 ][ 0 ];

		// Find the part of the completion the user hasn't typed yet
		commonPrefix = longestCommonPrefix( completion, completions[ 1 ] );
		completion = completion.substring( commonPrefix.length );
		if ( completion !== '' ) {
			charactersToEnd = this._rli.line.length - this._rli.cursor;

			// Write the completion at the end of the line regardless of where the cursor was
			readline.moveCursor( this._ostream, charactersToEnd );

			// The ASCII escape codes make the text grayed out
			this._ostream.write( '\x1b[90m' + completion + '\x1b[0m' );

			// Move cursor back to original posittion
			readline.moveCursor( this._ostream, -completion.length - charactersToEnd );
		}
		this._preview = completion;
	} else {
		this._clear();
	}
}


// EXPORTS //

module.exports = PreviewCompleter;
