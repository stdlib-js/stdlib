/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

var logger = require( 'debug' );
var parse = require( 'acorn-loose' ).parse;
var findNodeAround = require( 'acorn-walk' ).findNodeAround;
var setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var OPEN_SYMBOLS = require( './auto_close_pairs_open_symbols.js' );
var CLOSE_SYMBOLS = require( './auto_close_pairs_close_symbols.js' );


// VARIABLES //

var debug = logger( 'repl:auto_delete_pairs' );
var AOPTS = {
	'ecmaVersion': 'latest'
};


// MAIN //

/**
* Constructor for creating an auto-deleter.
*
* @private
* @constructor
* @param {Object} rli - readline instance
* @returns {AutoDeleter} auto-deleter instance
*/
function AutoDeleter( rli ) {
	if ( !(this instanceof AutoDeleter) ) {
		return new AutoDeleter( rli );
	}
	debug( 'Creating an auto-deleter...' );
	this._rli = rli;
	return this;
}

/**
* Callback which should be invoked **before** a "keypress" event is processed by a readline interface.
*
* @name beforeKeypress
* @memberof AutoDeleter.prototype
* @param {string} data - input data
* @param {Object} key - key object
* @returns {boolean} boolean indicating whether auto-delete was successful
*/
setNonEnumerableReadOnly( AutoDeleter.prototype, 'beforeKeypress', function beforeKeypress() {
	var cursor;
	var line;
	var data;
	var node;
	var ast;
	var ch;

	cursor = this._rli.cursor;
	line = this._rli.line;

	debug( 'Expression: %s', line );
	debug( 'Cursor position: %d', cursor );

	debug( 'Performing auto-delete...' );

	data = line[ cursor-1 ];
	debug( 'Character to delete: %s', data );

	debug( 'Checking if an opening symbol...' );
	ch = OPEN_SYMBOLS[ data ];
	if ( isString( ch ) ) {
		debug( 'Detected an opening symbol.' );

		debug( 'Checking if immediately followed by a closing symbol...' );
		ch = CLOSE_SYMBOLS[ line[ cursor ] ];
		if ( !isString( ch ) ) {
			debug( 'Opening symbol is not followed by a closing symbol. Skipping...' );
			debug( 'Finished performing auto-delete.' );
			return false;
		}
		debug( 'Detected a closing symbol.' );

		debug( 'Generating an AST...' );
		ast = parse( line, AOPTS );

		debug( 'Checking whether characters are within a string literal...' );
		node = findNodeAround( ast, cursor-1, 'Literal' );
		if ( node && node.node.start < cursor-1 ) {
			debug( 'Characters are within a string literal. Skipping...' );
			debug( 'Finished performing auto-delete.' );
			return false;
		}
		debug( 'Characters are not within a string literal.' );
		debug( 'Found an auto-delete candidate. Deleting symbols...' );
		this._rli.write( null, {
			'name': 'right'
		});
		this._rli.write( null, {
			'name': 'backspace'
		});
		debug( 'Resulting expression: %s', this._rli.line );
		debug( 'Finished performing auto-delete.' );
		return true;
	}
	debug( 'Failed to detect an opening symbol.' );
	debug( 'Finished performing auto-delete.' );
	return false;
});


// EXPORTS //

module.exports = AutoDeleter;
