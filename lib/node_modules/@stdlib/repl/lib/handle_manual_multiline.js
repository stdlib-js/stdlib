/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-underscore-dangle */

'use strict';

// MODULES //

var repeat = require( '@stdlib/string/repeat' );


// MAIN //

/**
* Returns a callback that handles multiline editing using a modifier key.
*
* @private
* @param {REPL} repl - REPL instance
* @returns {Function} callback
*/
function manualMultiline( repl ) {
	return onKeypress;

	/**
	* Callback invoked upon a readline interface "keypress" event.
	*
	* @private
	* @param {string} key - key event information
	*/
	function onKeypress( key ) {
		var charsAfterCursor;
		var codeAfterCursor;

		// For ALT+ENTER keypress, manually enter multi-line mode:
		if ( key && key.name === 'return' && key.meta ) {
			charsAfterCursor = repl._rli.line.length - repl._rli.cursor;
			codeAfterCursor = repl._rli.line.substring( repl._rli.cursor );

			// Update flag
			repl._multiline.mode = 'modifier';

			// Store code after cursor in buffer for next line
			repl._multiline.buffer = codeAfterCursor;
			repl._ostream.write( repeat( '\x1b[C', charsAfterCursor ) + repeat( '\b \b', charsAfterCursor ) );
			repl._rli.line = repl._rli.line.substring( 0, repl._rli.cursor );

			// Simulate `line` event
			repl._rli.write( null, {
				'name': 'return'
			});
		}
	}
}


// EXPORTS //

module.exports = manualMultiline;
