/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

var logger = require( 'debug' );
var parse = require( 'acorn-loose' ).parse;
var setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var walk = require( './auto_match_walk.js' );
var AUTO_MATCH_OPEN_SYMBOLS = require( './auto_match_open_symbols.js' );
var AUTO_MATCH_CLOSE_SYMBOLS = require( './auto_match_close_symbols.js' );


// VARIABLES //

var debug = logger( 'repl:auto_match' );
var AOPTS = {
	'ecmaVersion': 'latest'
};


// MAIN //

/**
* Constructor for creating an auto-matcher.
*
* @private
* @constructor
* @param {Object} rli - readline instance
* @returns {AutoMatcher} auto-matcher instance
*/
function AutoMatcher( rli ) {
	if ( !(this instanceof AutoMatcher) ) {
		return new AutoMatcher();
	}
	debug( 'Creating an auto-matcher...' );
	this._rli = rli;
	this._active = false;
	return this;
}

/**
* Callback for handling a "keypress" event.
*
* @name onKeypress
* @memberof AutoMatcher.prototype
* @param {string} data - input data
* @param {Object} key - key object
* @returns {boolean} boolean indicating whether auto-match was successful
*/
setNonEnumerableReadOnly( AutoMatcher.prototype, 'onKeypress', function onKeypress( data ) {
	var cursor;
	var line;
	var ast;
	var out;
	var ch;

	cursor = this._rli.cursor;
	line = this._rli.line;

	debug( 'Expression: %s', line );
	debug( 'Cursor position: %d', cursor );

	debug( 'Performing auto-match...' );
	debug( 'Checking for an opening symbol...' );
	ch = AUTO_MATCH_OPEN_SYMBOLS[ data ];
	if ( isString( ch ) ) {
		debug( 'Detected an opening symbol.' );

		// Generate an AST for the current line:
		debug( 'Generating an AST...' );
		ast = parse( line, AOPTS );

		// Attempt to walk the AST to determine whether to auto-match...
		try {
			debug( 'Determining whether to auto-match...' );
			out = walk( ast, cursor );
		} catch ( err ) {
			// If parsing failed, stay conservative and don't auto-match:
			debug( 'Error: %s', err.message );
			return false;
		}
		// If parsing succeeded and we should auto-match, go ahead and write the closing character...
		if ( out && data !== line[ cursor ] ) { // NOTE: `data !== line[cursor]` accounts for `foo`` being valid syntax (i.e., using untagged template literals as tags); hence, we need to guard against unnecessarily inserting a closing symbol when a user types `foo<|>` and then instinctively types ` in order to close a template literal.
			debug( 'Successfully detected an auto-match candidate. Inserting closing symbol...' );
			this._rli.write( ch );
			this._rli.write( null, {
				'ctrl': true,
				'name': 'b'
			});
			debug( 'Resulting expression: %s', this._rli.line );
			debug( 'Finished performing auto-match.' );
			return true;
		}
		debug( 'Failed to detect an auto-match candidate.' );
	}
	debug( 'Checking for a closing symbol...' );
	ch = AUTO_MATCH_CLOSE_SYMBOLS[ data ];
	if ( isString( ch ) ) {
		debug( 'Detected a closing symbol.' );

		// Support users who may instinctively add a closing symbol by skipping over the closing symbol character in order to avoid inserting an unwanted duplicate character...
		debug( 'Determining whether a closing symbol already exists...' );
		if ( data === line[ cursor ] ) {
			debug( 'Closing symbol already exists. Skipping over existing symbol...' );
			this._rli.write( null, {
				'name': 'backspace'
			});
			this._rli.write( null, {
				'name': 'right'
			});
			debug( 'Resulting expression: %s', this._rli.line );
			debug( 'Finished performing auto-match.' );
			return true;
		}
		debug( 'Did not find a closing symbol. Inserting closing symbol...' );
	}
	debug( 'Failed to detect a closing symbol.' );
	debug( 'Finished performing auto-match.' );
	return false;
});


// EXPORTS //

module.exports = AutoMatcher;
