/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

var logger = require( 'debug' );
var setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var AUTO_MATCH_SYMBOLS = require( './auto_match_symbols.js' );


// VARIABLES //

var debug = logger( 'repl:auto_match' );


// MAIN //

/**
* Constructor for creating an auto-matcher.
*
* @private
* @constructor
* @param {Object} rli - readline instance
* @returns {AutoMatcher} auto-matcher instance
*/
function AutoMatcher( rli ) {
	if ( !(this instanceof AutoMatcher) ) {
		return new AutoMatcher();
	}
	debug( 'Creating an auto-matcher...' );
	this._rli = rli;
	this._active = false;
	return this;
}

/**
* Callback for handling a "keypress" event.
*
* @name onKeypress
* @memberof AutoMatcher.prototype
* @param {string} data - input data
* @param {Object} key - key object
* @returns {void}
*/
setNonEnumerableReadOnly( AutoMatcher.prototype, 'onKeypress', function onKeypress( data, key ) {
	if ( this._active ) {
		// Auto delete appended symbol when deleting input
		if ( key.name === 'backspace' ) {
			this._rli.write( null, {
				'name': 'right'
			} );
			this._rli.write( null, {
				'name': 'backspace'
			} );
			return;
		}
		// Discard instinctive closing symbols
		if (
			this._rli.line[ this._rli.cursor ] === data &&
			AUTO_MATCH_SYMBOLS[ this._rli.line[ this._rli.cursor-2 ] ] === data
		) {
			this._rli.write( null, {
				'name': 'backspace'
			} );
			this._rli.write( null, {
				'name': 'right'
			} );
			this._active = false;
			return;
		}
		this._active = false;
	}

	// For a bracket/quotation input, append corresponding closing symbol
	if ( AUTO_MATCH_SYMBOLS[ data ] ) {
		if (
			(
				AUTO_MATCH_SYMBOLS[ data ] === '\'' || AUTO_MATCH_SYMBOLS[ data ] === '"'
			) &&
			(
				/^[a-zA-Z0-9"'/\\]$/.test( this._rli.line[ this._rli.cursor-2 ] ) ||
				/^[a-zA-Z0-9"'/\\]$/.test( this._rli.line[ this._rli.cursor ] )
			)
		) {
			// Don't auto-complete quotations around text
			return;
		}
		this._rli.write( AUTO_MATCH_SYMBOLS[ data ] );
		this._rli.write( null, {
			'ctrl': true,
			'name': 'b'
		} );
		this._active = true;
	}
});


// EXPORTS //

module.exports = AutoMatcher;
