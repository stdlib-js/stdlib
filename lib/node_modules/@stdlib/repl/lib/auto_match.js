/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-restricted-syntax, no-invalid-this */

'use strict';

// MODULES //

var logger = require( 'debug' );
var setNonEnumerableReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var AUTO_MATCH_SYMBOLS = require( './auto_match_symbols.js' );


// VARIABLES //

var debug = logger( 'repl:auto_match' );
var RE_TEXT = /^[a-zA-Z0-9"'/\\]$/;


// FUNCTIONS //

/**
* Tests whether a provided character is a quote symbol.
*
* @private
* @param {string} ch - input character
* @returns {boolean} boolean indicating if a character is a quote symbol
*
* @example
* var out = isQuote( '"' );
* // returns true
*
* @example
* var out = isQuote( 'a' );
* // returns false
*/
function isQuote( ch ) {
	return ( ch === '\'' || ch === '"' );
}

/**
* Tests whether a provided character is text.
*
* @private
* @param {string} ch - input character
* @returns {boolean} boolean indicating if a character is considered text
*
* @example
* var out = isText( 'a' );
* // returns true
*
* @example
* var out = isText( ']' );
* // returns false
*/
function isText( ch ) {
	return RE_TEXT.test( ch );
}


// MAIN //

/**
* Constructor for creating an auto-matcher.
*
* @private
* @constructor
* @param {Object} rli - readline instance
* @returns {AutoMatcher} auto-matcher instance
*/
function AutoMatcher( rli ) {
	if ( !(this instanceof AutoMatcher) ) {
		return new AutoMatcher();
	}
	debug( 'Creating an auto-matcher...' );
	this._rli = rli;
	this._active = false;
	return this;
}

/**
* Callback for handling a "keypress" event.
*
* @name onKeypress
* @memberof AutoMatcher.prototype
* @param {string} data - input data
* @param {Object} key - key object
* @returns {void}
*/
setNonEnumerableReadOnly( AutoMatcher.prototype, 'onKeypress', function onKeypress( data, key ) {
	var cursor;
	var line;
	var ch;

	cursor = this._rli.cursor;
	line = this._rli.line;

	// If we are currently in the process of auto-matching, handle special cases...
	if ( this._active ) {
		// Automatically remove a closing symbol when deleting an opening symbol...
		if ( key.name === 'backspace' ) {
			this._rli.write( null, {
				'name': 'right'
			} );
			this._rli.write( null, {
				'name': 'backspace'
			} );
			return;
		}
		// Remove auto-completed closing symbols when a user instinctively manually completes the closing symbol in order to avoid duplicate closing symbols...
		if ( line[ cursor ] === data && AUTO_MATCH_SYMBOLS[ line[ cursor-2 ] ] === data ) { // eslint-disable-line max-len
			this._rli.write( null, {
				'name': 'backspace'
			} );
			this._rli.write( null, {
				'name': 'right'
			} );
			this._active = false;
			return;
		}
		// Reset the flag indicating that we are actively auto-matching:
		this._active = false;
	}
	ch = AUTO_MATCH_SYMBOLS[ data ];
	if ( ch !== void 0 ) {
		// Avoid auto-completing quotation marks around text...
		if ( isQuote( ch ) && ( isText( line[ cursor-2 ] ) || isText( line[ cursor ] ) ) ) {
			return;
		}
		// Append a closing symbol:
		this._rli.write( ch );
		this._rli.write( null, {
			'ctrl': true,
			'name': 'b'
		});
		this._active = true;
	}
});


// EXPORTS //

module.exports = AutoMatcher;
