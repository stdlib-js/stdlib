/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var join = require( 'path' ).join;
var tape = require( 'tape' );
var validateLinks = require( './../lib/sync.js' );


// FIXTURES //

var LINKS = require( './fixtures/links.json' );
var EXPECTED = require( './fixtures/expected.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof validateLinks, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if the first argument is not an object array', function test( t ) {
	var values;
	var i;
	values = [
		5,
		NaN,
		null,
		void 0,
		true,
		{},
		[],
		function noop() {},
		'abc'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			validateLinks( value );
		};
	}
});

tape( 'if the function encounters an error when attempting to read a database, the function returns the error', function test( t ) {
	var out = validateLinks( LINKS, {
		'database': './nonexisting.json'
	});
	t.strictEqual( out instanceof Error, true, 'returns an error' );
	t.end();
});

tape( 'the function validates an array of link objects', function test( t ) {
	var out = validateLinks( LINKS );
	t.deepEqual( out, EXPECTED, 'returns expected validation errors' );
	t.end();
});

tape( 'the function validates an array of link objects (custom database)', function test( t ) {
	var out = validateLinks( LINKS, {
		'database': join( __dirname, 'fixtures', 'database.json' )
	});
	t.deepEqual( out, EXPECTED, 'returns expected validation errors' );
	t.end();
});
