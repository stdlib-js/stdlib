/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var isObjectArray = require( '@stdlib/assert/is-object-array' );
var isFunction = require( '@stdlib/assert/is-function' );
var readJSON = require( '@stdlib/fs/read-json' );
var format = require( '@stdlib/string/format' );
var cwd = require( '@stdlib/process/cwd' );
var config = require( './defaults.js' );
var validate = require( './validate.js' );
var check = require( './check.js' );


// MAIN //

/**
* Validates an array of link objects against a link database.
*
* @param {ObjectArray} links - array of link objects to validate
* @param {Options} [options] - options
* @param {string} [options.database] - path to a link database file (JSON)
* @param {Callback} clbk - callback to invoke upon resolving an id
* @throws {TypeError} first argument must be an object array
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {TypeError} last argument must be a function
*
* @example
* validateLinks([
*     {
*         'id': 'gumbel-distibution',
*         'url': 'https://en.wikipedia.org/wiki/Gumbel_distribution'
*     }
* ], clbk );
*
* function clbk( error, validationErrors ) {
*   if ( error ) {
*       throw error;
*   }
*   console.log( validationErrors );
* 	// => [...]
* }
*/
function validateLinks( links, options, clbk ) {
	var fopts;
	var opts;
	var err;
	var cb;
	if ( !isObjectArray( links ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be an array of objects. Value: `%s`.', links ) );
	}
	opts = {
		'database': config.database
	};
	if ( arguments.length === 2 ) {
		cb = options;
	} else {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
		cb = clbk;
	}
	if ( !isFunction( cb ) ) {
		throw new TypeError( format( 'invalid argument. Last argument must be a function. Value: `%s`.', cb ) );
	}
	opts.database = resolve( cwd(), opts.database );
	fopts = {
		'encoding': 'utf8'
	};
	readJSON( opts.database, fopts, onRead );

	/**
	* Callback invoked upon reading a file.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Object} db - database
	* @returns {void}
	*/
	function onRead( error, db ) {
		var out;
		if ( error ) {
			return cb( error );
		}
		out = check( links, db );
		cb( null, out );
	}
}


// EXPORTS //

module.exports = validateLinks;
