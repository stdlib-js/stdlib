#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var join = require( 'path' ).join;
var readline = require( 'readline' );
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/cli/ctor' );
var stdin = require( '@stdlib/streams/node/stdin' );
var stdout = require( '@stdlib/streams/node/stdout' );
var uri2id = require( './../lib' );


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var flags;
	var args;
	var opts;
	var cli;
	var uri;
	var rl;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( join( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line options:
	flags = cli.flags();
	if ( flags.help || flags.version ) {
		return;
	}

	// Get any provided command-line arguments:
	args = cli.args();

	// If we are provided a URI, we can proceed to resolve an id...
	opts = {};
	if ( args.length ) {
		if ( flags.database ) {
			opts.database = flags.database;
		}
		return uri2id( args[ 0 ], opts, done );
	}
	// Provide a series of prompts for a user to provide arguments...
	rl = readline.createInterface({
		'input': stdin,
		'output': stdout
	});
	rl.on( 'close', onClose );
	rl.on( 'SIGINT', onSIGINT );

	console.log( 'Please provide the following information...' ); // eslint-disable-line no-console
	rl.question( 'URI: ', onURI );

	/**
	* Callback invoked upon receiving a URI.
	*
	* @private
	* @param {string} answer - user input
	* @returns {void}
	*/
	function onURI( answer ) {
		uri = answer;
		if ( flags.database ) {
			return database( flags.database );
		}
		rl.question( 'database filepath (optional): ', database );
	}

	/**
	* Callback invoked upon receiving a database filepath.
	*
	* @private
	* @param {string} answer - user input
	*/
	function database( answer ) {
		if ( answer ) {
			opts.database = answer;
		}
		rl.close();
	}

	/**
	* Callback invoked once a readline interface closes.
	*
	* @private
	*/
	function onClose() {
		uri2id( uri, opts, done );
	}

	/**
	* Callback invoked upon completion.
	*
	* @private
	* @param {Error} [error] - error object
	* @param {(string|null)} id - id
	* @returns {void}
	*/
	function done( error, id ) {
		/* eslint-disable no-console */
		if ( error ) {
			return cli.error( error );
		}
		if ( id ) {
			console.log( id );
		} else {
			console.log( 'Unable to resolve id.' );
		}
		cli.close( 0 );

		/* eslint-enable no-console */
	}

	/**
	* Callback invoked upon receiving a SIGINT (e.g., ctrl+C).
	*
	* @private
	*/
	function onSIGINT() {
		console.error( '' ); // eslint-disable-line no-console
		cli.close( 1 );
	}
}

main();
