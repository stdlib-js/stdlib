#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var join = require( 'path' ).join;
var readline = require( 'readline' );
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/cli/ctor' );
var stdin = require( '@stdlib/streams/node/stdin' );
var stdout = require( '@stdlib/streams/node/stdout' );
var create = require( './../lib' );


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var flags;
	var args;
	var opts;
	var cli;
	var rl;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( join( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line options:
	flags = cli.flags();
	if ( flags.help || flags.version ) {
		return;
	}

	// Get any provided command-line arguments:
	args = cli.args();

	// If we are provided a URI, we assume we are provided other command-line arguments...
	if ( args[ 0 ] ) {
		opts = {
			'uri': args[ 0 ],
			'id': flags.id,
			'description': flags.desc
		};
		if ( flags.keywords ) {
			opts.keywords = flags.keywords.split( ',' );
		}
		if ( flags.database ) {
			opts.database = flags.database;
		}
		return create( opts, done );
	}

	// Provide a series of prompts for a user to provide arguments...
	rl = readline.createInterface({
		'input': stdin,
		'output': stdout
	});
	rl.on( 'close', onClose );
	rl.on( 'SIGINT', onSIGINT );

	opts = {};
	console.log( '\nPlease provide the following information: \n' ); // eslint-disable-line no-console
	rl.question( 'URI: ', uri );

	/**
	* Callback invoked upon receiving a URI.
	*
	* @private
	* @param {string} answer - user input
	* @returns {void}
	*/
	function uri( answer ) {
		opts.uri = answer;
		if ( flags.id ) {
			return id( flags.id );
		}
		rl.question( 'unique identifier (id): ', id );
	}

	/**
	* Callback invoked upon receiving a unique identifier.
	*
	* @private
	* @param {string} answer - user input
	* @returns {void}
	*/
	function id( answer ) {
		opts.id = answer;
		if ( flags.desc ) {
			return desc( flags.desc );
		}
		rl.question( 'description: ', desc );
	}

	/**
	* Callback invoked upon receiving a description.
	*
	* @private
	* @param {string} answer - user input
	* @returns {void}
	*/
	function desc( answer ) {
		opts.description = answer;
		if ( flags.keywords ) {
			return keywords( flags.keywords );
		}
		rl.question( 'keywords (optional): ', keywords );
	}

	/**
	* Callback invoked upon receiving a list of keywords.
	*
	* @private
	* @param {string} answer - user input
	* @returns {void}
	*/
	function keywords( answer ) {
		if ( answer ) {
			opts.keywords = answer.split( ',' );
		}
		if ( flags.database ) {
			return database( flags.database );
		}
		rl.question( 'database filepath (optional): ', database );
	}

	/**
	* Callback invoked upon receiving a database filepath.
	*
	* @private
	* @param {string} answer - user input
	*/
	function database( answer ) {
		if ( answer ) {
			opts.database = answer;
		}
		rl.close();
	}

	/**
	* Callback invoked once a readline interface closes.
	*
	* @private
	*/
	function onClose() {
		create( opts, done );
	}

	/**
	* Callback invoked upon receiving a SIGINT (e.g., ctrl+C).
	*
	* @private
	*/
	function onSIGINT() {
		console.error( '' ); // eslint-disable-line no-console
		cli.close( 1 );
	}

	/**
	* Callback invoked upon completion.
	*
	* @private
	* @param {Error} [error] - error object
	* @returns {void}
	*/
	function done( error ) {
		if ( error ) {
			return cli.error( error );
		}
		console.log( 'Success' ); // eslint-disable-line no-console
		cli.close( 0 );
	}
}

main();
