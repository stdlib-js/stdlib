/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var wrap = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof wrap, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function wraps a provided description', function test( t ) {
	var expected;
	var actual;
	var txt;

	txt = 'Computes the squared absolute value for each element in a strided array `x` and assigns the results to elements in a strided array `y`.';

	expected = '    Computes the squared absolute value for each element in a strided array `x`\n    and assigns the results to elements in a strided array `y`.';

	actual = wrap( txt );

	t.strictEqual( actual, expected, 'returns expected value' );
	t.end();
});

tape( 'the function wraps a provided description', function test( t ) {
	var expected;
	var actual;
	var txt;

	txt = 'Computes the absolute value of each element retrieved from a strided input array `x` via a callback function and assigns each result to an element in a strided output array `y`.';

	expected = '    Computes the absolute value of each element retrieved from a strided input\n    array `x` via a callback function and assigns each result to an element in a\n    strided output array `y`.';

	actual = wrap( txt );

	t.strictEqual( actual, expected, 'returns expected value' );
	t.end();
});

tape( 'the function wraps a provided description', function test( t ) {
	var expected;
	var actual;
	var txt;

	txt = 'Computes the squared absolute value for each element in a strided array `x` and assigns the results to elements in a strided array `y` using alternative indexing semantics.';

	expected = '    Computes the squared absolute value for each element in a strided array `x`\n    and assigns the results to elements in a strided array `y` using alternative\n    indexing semantics.';

	actual = wrap( txt );

	t.strictEqual( actual, expected, 'returns expected value' );
	t.end();
});

tape( 'the function wraps a provided description', function test( t ) {
	var expected;
	var actual;
	var txt;

	txt = 'Computes the absolute value of each element retrieved from a strided input array `x` via a callback function and assigns each result to an element in a strided output array `y`.';

	expected = '    Computes the absolute value of each element retrieved from a strided input\n    array `x` via a callback function and assigns each result to an element in a\n    strided output array `y`.';

	actual = wrap( txt );

	t.strictEqual( actual, expected, 'returns expected value' );
	t.end();
});

tape( 'the function wraps a provided description', function test( t ) {
	var expected;
	var actual;
	var txt;

	txt = 'Returns a function which dispatches to specified functions based on input argument types.';

	expected = '    Returns a function which dispatches to specified functions based on input\n    argument types.';

	actual = wrap( txt );

	t.strictEqual( actual, expected, 'returns expected value' );
	t.end();
});
