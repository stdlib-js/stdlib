[
	{
		"raw": "{{alias}}()\n    Returns a pseudorandom number drawn from a uniform distribution.\n\n    The default underlying pseudorandom number generator (PRNG) *may* change in\n    the future. If exact reproducibility is required, either use the `factory`\n    method to explicitly specify a PRNG via the `name` option or use an\n    underlying PRNG directly.\n\n    Returns\n    -------\n    r: number\n        Pseudorandom number on the interval `[0,1)`.\n\n    Examples\n    --------\n    > var r = {{alias}}();",
		"idx": 0,
		"last": false,
		"start": 2,
		"signature": {
			"name": "{{alias}}",
			"parameters": [],
			"raw": "{{alias}}()",
			"start": 2,
			"end": 2
		},
		"description": {
			"raw": "    Returns a pseudorandom number drawn from a uniform distribution.\n\n    The default underlying pseudorandom number generator (PRNG) *may* change in\n    the future. If exact reproducibility is required, either use the `factory`\n    method to explicitly specify a PRNG via the `name` option or use an\n    underlying PRNG directly.\n",
			"short": "Returns a pseudorandom number drawn from a uniform distribution.",
			"extended": "The default underlying pseudorandom number generator (PRNG) *may* change in the future. If exact reproducibility is required, either use the `factory` method to explicitly specify a PRNG via the `name` option or use an underlying PRNG directly.",
			"start": 3,
			"end": 8
		},
		"sections": [
			{
				"title": "Returns",
				"rawTitle": "\n    Returns\n    -------",
				"content": "r: number\n        Pseudorandom number on the interval `[0,1)`.",
				"start": 9,
				"tags": [
					{
						"name": "r",
						"type": {
							"name": "number"
						},
						"description": "Pseudorandom number on the interval `[0,1)`.",
						"optional": false
					}
				],
				"end": 13
			},
			{
				"title": "Examples",
				"rawTitle": "\n    Examples\n    --------",
				"content": "> var r = {{alias}}();",
				"start": 14,
				"examples": [
					{
						"code": "var r = {{alias}}();",
						"rawCode": "    > var r = {{alias}}();\n",
						"output": ""
					}
				],
				"end": 17
			}
		],
		"end": 17
	},
	{
		"raw": "{{alias}}.factory( [options] )\n    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a uniform distribution.\n\n    Parameters\n    ----------\n    options: Object (optional)\n        Options.\n\n    options.name: string (optional)\n        Name of the underlying pseudorandom number generator (PRNG). The\n        following PRNGs are supported:\n\n        - mt19937: 32-bit Mersenne Twister.\n        - minstd: linear congruential PRNG based on Park and Miller.\n        - minstd-shuffle: linear congruential PRNG whose output is shuffled.\n\n        Default: 'mt19937'.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed. Valid seed values vary according to\n        the underlying PRNG.\n\n    options.state: any (optional)\n        Pseudorandom number generator state. Valid state values vary according\n        to the underlying PRNG. If provided, the `seed` option is ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.\n\n    Returns\n    -------\n    rand: Function\n        Pseudorandom number generator (PRNG).\n\n    Examples\n    --------\n    // Basic usage:\n    > var rand = {{alias}}.factory();\n    > var r = rand();\n    > r = rand();\n\n    // Specify alternative PRNG:\n    > var rand = {{alias}}.factory({ 'name': 'minstd' });\n    > r = rand();\n    > r = rand();",
		"idx": 1,
		"last": false,
		"start": 20,
		"signature": {
			"name": "{{alias}}.factory",
			"parameters": [
				{
					"name": "options",
					"optional": true
				}
			],
			"raw": "{{alias}}.factory( [options] )",
			"start": 20,
			"end": 20
		},
		"description": {
			"raw": "    Returns a pseudorandom number generator (PRNG) for generating pseudorandom\n    numbers drawn from a uniform distribution.\n",
			"short": "Returns a pseudorandom number generator (PRNG) for generating pseudorandom numbers drawn from a uniform distribution.",
			"extended": "",
			"start": 21,
			"end": 22
		},
		"sections": [
			{
				"title": "Parameters",
				"rawTitle": "\n    Parameters\n    ----------",
				"content": "options: Object (optional)\n        Options.\n\n    options.name: string (optional)\n        Name of the underlying pseudorandom number generator (PRNG). The\n        following PRNGs are supported:\n\n        - mt19937: 32-bit Mersenne Twister.\n        - minstd: linear congruential PRNG based on Park and Miller.\n        - minstd-shuffle: linear congruential PRNG whose output is shuffled.\n\n        Default: 'mt19937'.\n\n    options.seed: any (optional)\n        Pseudorandom number generator seed. Valid seed values vary according to\n        the underlying PRNG.\n\n    options.state: any (optional)\n        Pseudorandom number generator state. Valid state values vary according\n        to the underlying PRNG. If provided, the `seed` option is ignored.\n\n    options.copy: boolean (optional)\n        Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.",
				"start": 23,
				"tags": [
					{
						"name": "options",
						"type": {
							"name": "Object"
						},
						"description": "Options.",
						"optional": true
					},
					{
						"name": "options.name",
						"type": {
							"name": "string"
						},
						"description": "Name of the underlying pseudorandom number generator (PRNG). The\n        following PRNGs are supported:\n\n        - mt19937: 32-bit Mersenne Twister.\n        - minstd: linear congruential PRNG based on Park and Miller.\n        - minstd-shuffle: linear congruential PRNG whose output is shuffled.\n\n        Default: 'mt19937'.",
						"optional": true
					},
					{
						"name": "options.seed",
						"type": {
							"name": "any"
						},
						"description": "Pseudorandom number generator seed. Valid seed values vary according to\n        the underlying PRNG.",
						"optional": true
					},
					{
						"name": "options.state",
						"type": {
							"name": "any"
						},
						"description": "Pseudorandom number generator state. Valid state values vary according\n        to the underlying PRNG. If provided, the `seed` option is ignored.",
						"optional": true
					},
					{
						"name": "options.copy",
						"type": {
							"name": "boolean"
						},
						"description": "Boolean indicating whether to copy a provided pseudorandom number\n        generator state. Setting this option to `false` allows sharing state\n        between two or more pseudorandom number generators. Setting this option\n        to `true` ensures that a returned generator has exclusive control over\n        its internal state. Default: true.",
						"optional": true
					}
				],
				"end": 52
			},
			{
				"title": "Returns",
				"rawTitle": "\n    Returns\n    -------",
				"content": "rand: Function\n        Pseudorandom number generator (PRNG).",
				"start": 53,
				"tags": [
					{
						"name": "rand",
						"type": {
							"name": "Function"
						},
						"description": "Pseudorandom number generator (PRNG).",
						"optional": false
					}
				],
				"end": 57
			},
			{
				"title": "Examples",
				"rawTitle": "\n    Examples\n    --------",
				"content": "// Basic usage:\n    > var rand = {{alias}}.factory();\n    > var r = rand();\n    > r = rand();\n\n    // Specify alternative PRNG:\n    > var rand = {{alias}}.factory({ 'name': 'minstd' });\n    > r = rand();\n    > r = rand();",
				"start": 58,
				"examples": [
					{
						"code": "var rand = {{alias}}.factory();",
						"rawCode": "    > var rand = {{alias}}.factory();\n",
						"output": ""
					},
					{
						"code": "var r = rand();",
						"rawCode": "    > var r = rand();\n",
						"output": ""
					},
					{
						"code": "r = rand();",
						"rawCode": "    > r = rand();\n",
						"output": ""
					},
					{
						"code": "var rand = {{alias}}.factory({ 'name': 'minstd' });",
						"rawCode": "    > var rand = {{alias}}.factory({ 'name': 'minstd' });\n",
						"output": ""
					},
					{
						"code": "r = rand();",
						"rawCode": "    > r = rand();\n",
						"output": ""
					},
					{
						"code": "r = rand();",
						"rawCode": "    > r = rand();\n",
						"output": ""
					}
				],
				"end": 69
			}
		],
		"end": 69
	},
	{
		"raw": "{{alias}}.NAME\n    Generator name.\n\n    Examples\n    --------\n    > var str = {{alias}}.NAME\n    'randu'",
		"idx": 2,
		"last": false,
		"start": 72,
		"signature": {
			"name": "{{alias}}.NAME",
			"parameters": [],
			"raw": "{{alias}}.NAME",
			"start": 72,
			"end": 72
		},
		"description": {
			"raw": "    Generator name.\n",
			"short": "Generator name.",
			"extended": "",
			"start": 73,
			"end": 73
		},
		"sections": [
			{
				"title": "Examples",
				"rawTitle": "\n    Examples\n    --------",
				"content": "> var str = {{alias}}.NAME\n    'randu'",
				"start": 74,
				"examples": [
					{
						"code": "var str = {{alias}}.NAME",
						"rawCode": "    > var str = {{alias}}.NAME",
						"output": "'randu'"
					}
				],
				"end": 78
			}
		],
		"end": 78
	},
	{
		"raw": "{{alias}}.PRNG\n    Underlying pseudorandom number generator.\n\n    Examples\n    --------\n    > var prng = {{alias}}.PRNG;",
		"idx": 3,
		"last": false,
		"start": 81,
		"signature": {
			"name": "{{alias}}.PRNG",
			"parameters": [],
			"raw": "{{alias}}.PRNG",
			"start": 81,
			"end": 81
		},
		"description": {
			"raw": "    Underlying pseudorandom number generator.\n",
			"short": "Underlying pseudorandom number generator.",
			"extended": "",
			"start": 82,
			"end": 82
		},
		"sections": [
			{
				"title": "Examples",
				"rawTitle": "\n    Examples\n    --------",
				"content": "> var prng = {{alias}}.PRNG;",
				"start": 83,
				"examples": [
					{
						"code": "var prng = {{alias}}.PRNG;",
						"rawCode": "    > var prng = {{alias}}.PRNG;\n",
						"output": ""
					}
				],
				"end": 86
			}
		],
		"end": 86
	},
	{
		"raw": "{{alias}}.MIN\n    Minimum possible value (specific to underlying PRNG).\n\n    Examples\n    --------\n    > var v = {{alias}}.MIN;",
		"idx": 4,
		"last": false,
		"start": 89,
		"signature": {
			"name": "{{alias}}.MIN",
			"parameters": [],
			"raw": "{{alias}}.MIN",
			"start": 89,
			"end": 89
		},
		"description": {
			"raw": "    Minimum possible value (specific to underlying PRNG).\n",
			"short": "Minimum possible value (specific to underlying PRNG).",
			"extended": "",
			"start": 90,
			"end": 90
		},
		"sections": [
			{
				"title": "Examples",
				"rawTitle": "\n    Examples\n    --------",
				"content": "> var v = {{alias}}.MIN;",
				"start": 91,
				"examples": [
					{
						"code": "var v = {{alias}}.MIN;",
						"rawCode": "    > var v = {{alias}}.MIN;\n",
						"output": ""
					}
				],
				"end": 94
			}
		],
		"end": 94
	},
	{
		"raw": "{{alias}}.MAX\n    Maximum possible value (specific to underlying PRNG).\n\n    Examples\n    --------\n    > var v = {{alias}}.MAX;",
		"idx": 5,
		"last": false,
		"start": 97,
		"signature": {
			"name": "{{alias}}.MAX",
			"parameters": [],
			"raw": "{{alias}}.MAX",
			"start": 97,
			"end": 97
		},
		"description": {
			"raw": "    Maximum possible value (specific to underlying PRNG).\n",
			"short": "Maximum possible value (specific to underlying PRNG).",
			"extended": "",
			"start": 98,
			"end": 98
		},
		"sections": [
			{
				"title": "Examples",
				"rawTitle": "\n    Examples\n    --------",
				"content": "> var v = {{alias}}.MAX;",
				"start": 99,
				"examples": [
					{
						"code": "var v = {{alias}}.MAX;",
						"rawCode": "    > var v = {{alias}}.MAX;\n",
						"output": ""
					}
				],
				"end": 102
			}
		],
		"end": 102
	},
	{
		"raw": "{{alias}}.seed\n    Pseudorandom number generator seed.\n\n    Examples\n    --------\n    > var seed = {{alias}}.seed;",
		"idx": 6,
		"last": false,
		"start": 105,
		"signature": {
			"name": "{{alias}}.seed",
			"parameters": [],
			"raw": "{{alias}}.seed",
			"start": 105,
			"end": 105
		},
		"description": {
			"raw": "    Pseudorandom number generator seed.\n",
			"short": "Pseudorandom number generator seed.",
			"extended": "",
			"start": 106,
			"end": 106
		},
		"sections": [
			{
				"title": "Examples",
				"rawTitle": "\n    Examples\n    --------",
				"content": "> var seed = {{alias}}.seed;",
				"start": 107,
				"examples": [
					{
						"code": "var seed = {{alias}}.seed;",
						"rawCode": "    > var seed = {{alias}}.seed;\n",
						"output": ""
					}
				],
				"end": 110
			}
		],
		"end": 110
	},
	{
		"raw": "{{alias}}.seedLength\n    Length of generator seed.\n\n    Examples\n    --------\n    > var len = {{alias}}.seedLength;",
		"idx": 7,
		"last": false,
		"start": 113,
		"signature": {
			"name": "{{alias}}.seedLength",
			"parameters": [],
			"raw": "{{alias}}.seedLength",
			"start": 113,
			"end": 113
		},
		"description": {
			"raw": "    Length of generator seed.\n",
			"short": "Length of generator seed.",
			"extended": "",
			"start": 114,
			"end": 114
		},
		"sections": [
			{
				"title": "Examples",
				"rawTitle": "\n    Examples\n    --------",
				"content": "> var len = {{alias}}.seedLength;",
				"start": 115,
				"examples": [
					{
						"code": "var len = {{alias}}.seedLength;",
						"rawCode": "    > var len = {{alias}}.seedLength;\n",
						"output": ""
					}
				],
				"end": 118
			}
		],
		"end": 118
	},
	{
		"raw": "{{alias}}.state\n    Generator state.\n\n    Examples\n    --------\n    > var r = {{alias}}()\n    <number>\n    > r = {{alias}}()\n    <number>\n    > r = {{alias}}()\n    <number>\n\n    // Get a copy of the current state:\n    > var state = {{alias}}.state;\n\n    > r = {{alias}}()\n    <number>\n    > r = {{alias}}()\n    <number>\n\n    // Set the state:\n    > {{alias}}.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = {{alias}}()\n    <number>\n    > r = {{alias}}()\n    <number>",
		"idx": 8,
		"last": false,
		"start": 121,
		"signature": {
			"name": "{{alias}}.state",
			"parameters": [],
			"raw": "{{alias}}.state",
			"start": 121,
			"end": 121
		},
		"description": {
			"raw": "    Generator state.\n",
			"short": "Generator state.",
			"extended": "",
			"start": 122,
			"end": 122
		},
		"sections": [
			{
				"title": "Examples",
				"rawTitle": "\n    Examples\n    --------",
				"content": "> var r = {{alias}}()\n    <number>\n    > r = {{alias}}()\n    <number>\n    > r = {{alias}}()\n    <number>\n\n    // Get a copy of the current state:\n    > var state = {{alias}}.state;\n\n    > r = {{alias}}()\n    <number>\n    > r = {{alias}}()\n    <number>\n\n    // Set the state:\n    > {{alias}}.state = state;\n\n    // Replay the last two pseudorandom numbers:\n    > r = {{alias}}()\n    <number>\n    > r = {{alias}}()\n    <number>",
				"start": 123,
				"examples": [
					{
						"code": "var r = {{alias}}()",
						"rawCode": "    > var r = {{alias}}()",
						"output": "<number>"
					},
					{
						"code": "r = {{alias}}()",
						"rawCode": "    > r = {{alias}}()",
						"output": "<number>"
					},
					{
						"code": "r = {{alias}}()",
						"rawCode": "    > r = {{alias}}()",
						"output": "<number>"
					},
					{
						"code": "var state = {{alias}}.state;",
						"rawCode": "    > var state = {{alias}}.state;\n\n",
						"output": ""
					},
					{
						"code": "r = {{alias}}()",
						"rawCode": "    > r = {{alias}}()",
						"output": "<number>"
					},
					{
						"code": "r = {{alias}}()",
						"rawCode": "    > r = {{alias}}()",
						"output": "<number>"
					},
					{
						"code": "{{alias}}.state = state;",
						"rawCode": "    > {{alias}}.state = state;\n",
						"output": ""
					},
					{
						"code": "r = {{alias}}()",
						"rawCode": "    > r = {{alias}}()",
						"output": "<number>"
					},
					{
						"code": "r = {{alias}}()",
						"rawCode": "    > r = {{alias}}()",
						"output": "<number>"
					}
				],
				"end": 148
			}
		],
		"end": 148
	},
	{
		"raw": "{{alias}}.stateLength\n    Length of generator state.\n\n    Examples\n    --------\n    > var len = {{alias}}.stateLength;",
		"idx": 9,
		"last": false,
		"start": 151,
		"signature": {
			"name": "{{alias}}.stateLength",
			"parameters": [],
			"raw": "{{alias}}.stateLength",
			"start": 151,
			"end": 151
		},
		"description": {
			"raw": "    Length of generator state.\n",
			"short": "Length of generator state.",
			"extended": "",
			"start": 152,
			"end": 152
		},
		"sections": [
			{
				"title": "Examples",
				"rawTitle": "\n    Examples\n    --------",
				"content": "> var len = {{alias}}.stateLength;",
				"start": 153,
				"examples": [
					{
						"code": "var len = {{alias}}.stateLength;",
						"rawCode": "    > var len = {{alias}}.stateLength;\n",
						"output": ""
					}
				],
				"end": 156
			}
		],
		"end": 156
	},
	{
		"raw": "{{alias}}.byteLength\n    Size (in bytes) of generator state.\n\n    Examples\n    --------\n    > var sz = {{alias}}.byteLength;",
		"idx": 10,
		"last": false,
		"start": 159,
		"signature": {
			"name": "{{alias}}.byteLength",
			"parameters": [],
			"raw": "{{alias}}.byteLength",
			"start": 159,
			"end": 159
		},
		"description": {
			"raw": "    Size (in bytes) of generator state.\n",
			"short": "Size (in bytes) of generator state.",
			"extended": "",
			"start": 160,
			"end": 160
		},
		"sections": [
			{
				"title": "Examples",
				"rawTitle": "\n    Examples\n    --------",
				"content": "> var sz = {{alias}}.byteLength;",
				"start": 161,
				"examples": [
					{
						"code": "var sz = {{alias}}.byteLength;",
						"rawCode": "    > var sz = {{alias}}.byteLength;\n",
						"output": ""
					}
				],
				"end": 164
			}
		],
		"end": 164
	},
	{
		"raw": "{{alias}}.toJSON()\n    Serializes the pseudorandom number generator as a JSON object.\n\n    Returns\n    -------\n    out: Object\n        JSON representation.\n\n    Examples\n    --------\n    > var o = {{alias}}.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }\n\n    See Also\n    --------",
		"idx": 11,
		"last": true,
		"start": 167,
		"signature": {
			"name": "{{alias}}.toJSON",
			"parameters": [],
			"raw": "{{alias}}.toJSON()",
			"start": 167,
			"end": 167
		},
		"description": {
			"raw": "    Serializes the pseudorandom number generator as a JSON object.\n",
			"short": "Serializes the pseudorandom number generator as a JSON object.",
			"extended": "",
			"start": 168,
			"end": 168
		},
		"sections": [
			{
				"title": "Returns",
				"rawTitle": "\n    Returns\n    -------",
				"content": "out: Object\n        JSON representation.",
				"start": 169,
				"tags": [
					{
						"name": "out",
						"type": {
							"name": "Object"
						},
						"description": "JSON representation.",
						"optional": false
					}
				],
				"end": 173
			},
			{
				"title": "Examples",
				"rawTitle": "\n    Examples\n    --------",
				"content": "> var o = {{alias}}.toJSON()\n    { 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }",
				"start": 174,
				"examples": [
					{
						"code": "var o = {{alias}}.toJSON()",
						"rawCode": "    > var o = {{alias}}.toJSON()",
						"output": "{ 'type': 'PRNG', 'name': '...', 'state': {...}, 'params': [] }"
					}
				],
				"end": 178
			},
			{
				"title": "See Also",
				"rawTitle": "\n    See Also\n    --------",
				"content": "",
				"start": 179,
				"tags": [],
				"end": 180
			}
		],
		"end": 180
	}
]
