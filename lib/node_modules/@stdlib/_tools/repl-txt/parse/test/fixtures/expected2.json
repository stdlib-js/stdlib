[
	{
		"raw": "{{alias}}( size )\n    Returns an array buffer having a specified number of bytes.\n\n    Buffer contents are initialized to 0.\n\n    Parameters\n    ----------\n    size: integer\n        Number of bytes.\n\n    Returns\n    -------\n    out: ArrayBuffer\n        An array buffer.\n\n    Examples\n    --------\n    > var buf = new {{alias}}( 5 )\n    <ArrayBuffer>",
		"idx": 0,
		"last": false,
		"start": 2,
		"signature": {
			"name": "{{alias}}",
			"parameters": [
				{
					"name": "size",
					"optional": false
				}
			],
			"raw": "{{alias}}( size )",
			"start": 2,
			"end": 2
		},
		"description": {
			"raw": "    Returns an array buffer having a specified number of bytes.\n\n    Buffer contents are initialized to 0.\n",
			"short": "Returns an array buffer having a specified number of bytes.",
			"extended": "Buffer contents are initialized to 0.",
			"start": 3,
			"end": 5
		},
		"sections": [
			{
				"title": "Parameters",
				"rawTitle": "\n    Parameters\n    ----------",
				"content": "size: integer\n        Number of bytes.",
				"start": 6,
				"tags": [
					{
						"name": "size",
						"type": {
							"name": "integer"
						},
						"description": "Number of bytes.",
						"optional": false
					}
				],
				"end": 10
			},
			{
				"title": "Returns",
				"rawTitle": "\n    Returns\n    -------",
				"content": "out: ArrayBuffer\n        An array buffer.",
				"start": 11,
				"tags": [
					{
						"name": "out",
						"type": {
							"name": "ArrayBuffer"
						},
						"description": "An array buffer.",
						"optional": false
					}
				],
				"end": 15
			},
			{
				"title": "Examples",
				"rawTitle": "\n    Examples\n    --------",
				"content": "> var buf = new {{alias}}( 5 )\n    <ArrayBuffer>",
				"start": 16,
				"examples": [
					{
						"code": "var buf = new {{alias}}( 5 )",
						"rawCode": "    > var buf = new {{alias}}( 5 )",
						"output": "<ArrayBuffer>"
					}
				],
				"end": 20
			}
		],
		"end": 20
	},
	{
		"raw": "{{alias}}.length\n    Number of input arguments the constructor accepts.\n\n    Examples\n    --------\n    > {{alias}}.length\n    1",
		"idx": 1,
		"last": false,
		"start": 23,
		"signature": {
			"name": "{{alias}}.length",
			"parameters": [],
			"raw": "{{alias}}.length",
			"start": 23,
			"end": 23
		},
		"description": {
			"raw": "    Number of input arguments the constructor accepts.\n",
			"short": "Number of input arguments the constructor accepts.",
			"extended": "",
			"start": 24,
			"end": 24
		},
		"sections": [
			{
				"title": "Examples",
				"rawTitle": "\n    Examples\n    --------",
				"content": "> {{alias}}.length\n    1",
				"start": 25,
				"examples": [
					{
						"code": "{{alias}}.length",
						"rawCode": "    > {{alias}}.length",
						"output": "1"
					}
				],
				"end": 29
			}
		],
		"end": 29
	},
	{
		"raw": "{{alias}}.isView( arr )\n    Returns a boolean indicating if provided an array buffer view.\n\n    Parameters\n    ----------\n    arr: any\n        Value to test.\n\n    Returns\n    -------\n    bool: boolean\n        Boolean indicating if an input argument is a buffer view.\n\n    Examples\n    --------\n    > var arr = new {{alias:@stdlib/array/float64}}( 10 );\n    > {{alias}}.isView( arr )\n    true",
		"idx": 2,
		"last": false,
		"start": 32,
		"signature": {
			"name": "{{alias}}.isView",
			"parameters": [
				{
					"name": "arr",
					"optional": false
				}
			],
			"raw": "{{alias}}.isView( arr )",
			"start": 32,
			"end": 32
		},
		"description": {
			"raw": "    Returns a boolean indicating if provided an array buffer view.\n",
			"short": "Returns a boolean indicating if provided an array buffer view.",
			"extended": "",
			"start": 33,
			"end": 33
		},
		"sections": [
			{
				"title": "Parameters",
				"rawTitle": "\n    Parameters\n    ----------",
				"content": "arr: any\n        Value to test.",
				"start": 34,
				"tags": [
					{
						"name": "arr",
						"type": {
							"name": "any"
						},
						"description": "Value to test.",
						"optional": false
					}
				],
				"end": 38
			},
			{
				"title": "Returns",
				"rawTitle": "\n    Returns\n    -------",
				"content": "bool: boolean\n        Boolean indicating if an input argument is a buffer view.",
				"start": 39,
				"tags": [
					{
						"name": "bool",
						"type": {
							"name": "boolean"
						},
						"description": "Boolean indicating if an input argument is a buffer view.",
						"optional": false
					}
				],
				"end": 43
			},
			{
				"title": "Examples",
				"rawTitle": "\n    Examples\n    --------",
				"content": "> var arr = new {{alias:@stdlib/array/float64}}( 10 );\n    > {{alias}}.isView( arr )\n    true",
				"start": 44,
				"examples": [
					{
						"code": "var arr = new {{alias:@stdlib/array/float64}}( 10 );",
						"rawCode": "    > var arr = new {{alias:@stdlib/array/float64}}( 10 );\n",
						"output": ""
					},
					{
						"code": "{{alias}}.isView( arr )",
						"rawCode": "    > {{alias}}.isView( arr )",
						"output": "true"
					}
				],
				"end": 49
			}
		],
		"end": 49
	},
	{
		"raw": "{{alias}}.prototype.byteLength\n    Read-only property which returns the length (in bytes) of the array buffer.\n\n    Examples\n    --------\n    > var buf = new {{alias}}( 5 );\n    > buf.byteLength\n    5",
		"idx": 3,
		"last": false,
		"start": 52,
		"signature": {
			"name": "{{alias}}.prototype.byteLength",
			"parameters": [],
			"raw": "{{alias}}.prototype.byteLength",
			"start": 52,
			"end": 52
		},
		"description": {
			"raw": "    Read-only property which returns the length (in bytes) of the array buffer.\n",
			"short": "Read-only property which returns the length (in bytes) of the array buffer.",
			"extended": "",
			"start": 53,
			"end": 53
		},
		"sections": [
			{
				"title": "Examples",
				"rawTitle": "\n    Examples\n    --------",
				"content": "> var buf = new {{alias}}( 5 );\n    > buf.byteLength\n    5",
				"start": 54,
				"examples": [
					{
						"code": "var buf = new {{alias}}( 5 );",
						"rawCode": "    > var buf = new {{alias}}( 5 );\n",
						"output": ""
					},
					{
						"code": "buf.byteLength",
						"rawCode": "    > buf.byteLength",
						"output": "5"
					}
				],
				"end": 59
			}
		],
		"end": 59
	},
	{
		"raw": "{{alias}}.prototype.slice( [start[, end]] )\n    Copies the bytes of an array buffer to a new array buffer.\n\n    Parameters\n    ----------\n    start: integer (optional)\n        Index at which to start copying buffer contents (inclusive). If\n        negative, the index is relative to the end of the buffer.\n\n    end: integer (optional)\n        Index at which to stop copying buffer contents (exclusive). If negative,\n        the index is relative to the end of the buffer.\n\n    Returns\n    -------\n    out: ArrayBuffer\n        A new array buffer whose contents have been copied from the calling\n        array buffer.\n\n    Examples\n    --------\n    > var b1 = new {{alias}}( 10 );\n    > var b2 = b1.slice( 2, 6 );\n    > var bool = ( b1 === b2 )\n    false\n    > b2.byteLength\n    4\n\n    See Also\n    --------",
		"idx": 4,
		"last": true,
		"start": 62,
		"signature": {
			"name": "{{alias}}.prototype.slice",
			"parameters": [
				{
					"name": "start",
					"optional": true
				},
				{
					"name": "end",
					"optional": true
				}
			],
			"raw": "{{alias}}.prototype.slice( [start[, end]] )",
			"start": 62,
			"end": 62
		},
		"description": {
			"raw": "    Copies the bytes of an array buffer to a new array buffer.\n",
			"short": "Copies the bytes of an array buffer to a new array buffer.",
			"extended": "",
			"start": 63,
			"end": 63
		},
		"sections": [
			{
				"title": "Parameters",
				"rawTitle": "\n    Parameters\n    ----------",
				"content": "start: integer (optional)\n        Index at which to start copying buffer contents (inclusive). If\n        negative, the index is relative to the end of the buffer.\n\n    end: integer (optional)\n        Index at which to stop copying buffer contents (exclusive). If negative,\n        the index is relative to the end of the buffer.",
				"start": 64,
				"tags": [
					{
						"name": "start",
						"type": {
							"name": "integer"
						},
						"description": "Index at which to start copying buffer contents (inclusive). If\n        negative, the index is relative to the end of the buffer.",
						"optional": true
					},
					{
						"name": "end",
						"type": {
							"name": "integer"
						},
						"description": "Index at which to stop copying buffer contents (exclusive). If negative,\n        the index is relative to the end of the buffer.",
						"optional": true
					}
				],
				"end": 73
			},
			{
				"title": "Returns",
				"rawTitle": "\n    Returns\n    -------",
				"content": "out: ArrayBuffer\n        A new array buffer whose contents have been copied from the calling\n        array buffer.",
				"start": 74,
				"tags": [
					{
						"name": "out",
						"type": {
							"name": "ArrayBuffer"
						},
						"description": "A new array buffer whose contents have been copied from the calling\n        array buffer.",
						"optional": false
					}
				],
				"end": 79
			},
			{
				"title": "Examples",
				"rawTitle": "\n    Examples\n    --------",
				"content": "> var b1 = new {{alias}}( 10 );\n    > var b2 = b1.slice( 2, 6 );\n    > var bool = ( b1 === b2 )\n    false\n    > b2.byteLength\n    4",
				"start": 80,
				"examples": [
					{
						"code": "var b1 = new {{alias}}( 10 );",
						"rawCode": "    > var b1 = new {{alias}}( 10 );\n",
						"output": ""
					},
					{
						"code": "var b2 = b1.slice( 2, 6 );",
						"rawCode": "    > var b2 = b1.slice( 2, 6 );\n",
						"output": ""
					},
					{
						"code": "var bool = ( b1 === b2 )",
						"rawCode": "    > var bool = ( b1 === b2 )",
						"output": "false"
					},
					{
						"code": "b2.byteLength",
						"rawCode": "    > b2.byteLength",
						"output": "4"
					}
				],
				"end": 88
			},
			{
				"title": "See Also",
				"rawTitle": "\n    See Also\n    --------",
				"content": "",
				"start": 89,
				"tags": [],
				"end": 91
			}
		],
		"end": 91
	}
]
