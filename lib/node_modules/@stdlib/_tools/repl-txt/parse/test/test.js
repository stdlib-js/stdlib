/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var tape = require( 'tape' );
var isArray = require( '@stdlib/assert/is-array' );
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var parse = require( './../lib' );


// FIXTURES //

var REPL1 = readFileSync( resolve( __dirname, 'fixtures', 'repl1.txt' ) ).toString();
var REPL2 = readFileSync( resolve( __dirname, 'fixtures', 'repl2.txt' ) ).toString();
var REPL3 = readFileSync( resolve( __dirname, 'fixtures', 'repl3.txt' ) ).toString();
var REPL4 = readFileSync( resolve( __dirname, 'fixtures', 'repl4.txt' ) ).toString();
var EXPECTED1 = require( './fixtures/expected1.json' );
var EXPECTED2 = require( './fixtures/expected2.json' );
var EXPECTED3 = require( './fixtures/expected3.json' );
var EXPECTED4 = require( './fixtures/expected4.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof parse, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided a string', function test( t ) {
	var values;
	var i;

	values = [
		5,
		null,
		true,
		void 0,
		NaN,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			parse( value );
		};
	}
});

tape( 'the function returns an expected syntax tree if provided a `repl.txt` string', function test( t ) {
	var expected;
	var values;
	var ast;
	var i;

	values = [
		REPL1,
		REPL2,
		REPL3,
		REPL4
	];
	expected = [
		EXPECTED1,
		EXPECTED2,
		EXPECTED3,
		EXPECTED4
	];

	for ( i = 0; i < values.length; i++ ) {
		ast = parse( values[ i ] );
		t.strictEqual( isArray( ast ), true, 'returns an array' );
		t.deepEqual( ast, expected[ i ], 'has expected properties' );
	}
	t.end();
});
