/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var contains = require( '@stdlib/assert/contains' );


// MAIN //

/**
* Rule for enforcing that the function signature matches the parameter list.
*
* @param {Context} context - lint context
* @returns {Object} validators
*/
function main( context ) {
	var signature;

	/**
	* Checks whether the function signature matches the parameter list.
	*
	* @private
	* @param {Object} section - function parameters section
	*/
	function matchSignature( section ) {
		var sigParams;
		var params;
		var skip;
		var i;

		sigParams = signature.parameters;
		params = section.tags;
		if ( params && sigParams ) {
			skip = 0;
			for ( i = 0; i < params.length; i++ ) {
				if ( contains( params[ i ].name, '.' ) ) {
					skip += 1;
					continue;
				}
				if ( !sigParams[ i-skip ] ) {
					context.report( 'Number of parameters does not match', signature );
				}
				if ( params[i].multiple !== sigParams[i-skip].multiple ) {
					context.report( 'Multiple parameters should be denoted as such in both the parameter list as well as the function signature', signature );
				}
				if ( params[ i ].name !== sigParams[ i-skip ].name ) {
					context.report( 'Parameters in signature and parameter list should have the same name', signature );
				}
				if ( params[ i ].optional !== sigParams[ i-skip ].optional ) {
					context.report( 'Optional parameters should be denoted as such in both the function signature and the parameter list', signature );
				}
			}
		}
	}

	/**
	* Registers function signature.
	*
	* @private
	* @param {Object} node - function signature
	*/
	function registerSignature( node ) {
		signature = node;
	}

	return {
		'signature': registerSignature,
		'parameters': matchSignature
	};
}


// EXPORTS //

module.exports = main;
