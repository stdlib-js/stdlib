/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable no-invalid-this */

'use strict';

// MODULES //

var logger = require( 'debug' );
var defineProperty = require( '@stdlib/utils/define-property' );
var setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var readJSON = require( '@stdlib/fs/read-json' ).sync;
var isNull = require( '@stdlib/assert/is-null' );
var registerValidators = require( './register_validators.js' );
var findConfigFile = require( './find_config_file.js' );
var validate = require( './validate.js' );


// VARIABLES //

var debug = logger( 'repl-txt:validate:linter' );


// FUNCTIONS //

/**
* Registers violation of lint rule.
*
* @private
* @param {string} id - rule id
* @param {string} severity - rule severity (`error` or `warn`)
* @param {string} message - error message
* @param {Object} node - node for which to log error
*/
function report( id, severity, message, node ) {
	var start = null;
	var end = null;
	if ( node ) {
		start = node.start;
		end = node.end;
	}
	this.messages.push({
		'id': id,
		'severity': severity,
		'message': message,
		'start': start,
		'end': end
	});
}

/**
* Re-initializes the linter.
*
* @private
* @param {Object} meta - meta-information
*/
function initialize( meta ) {
	this.messages = [];
	if ( meta ) {
		this.meta.filepath = meta.filepath;
	}
}

/**
* Returns array of encountered error messages.
*
* @private
* @returns {(Array|null)} error messages or `null`
*/
function getErrors() {
	var msg;
	var out;
	var i;

	out = [];
	for ( i = 0; i < this.messages.length; i++ ) {
		msg = this.messages[ i ];
		if ( msg.severity === 'error' ) {
			out.push( msg );
		}
	}
	if ( out.length === 0 ) {
		return null;
	}
	return out;
}

/**
* Returns array of encountered warning messages.
*
* @private
* @returns {(Array|null)} warning messages or `null`
*/
function getWarnings() {
	var msg;
	var out;
	var i;

	out = [];
	for ( i = 0; i < this.messages.length; i++ ) {
		msg = this.messages[ i ];
		if ( msg.severity === 'warn' ) {
			out.push( msg );
		}
	}
	if ( out.length === 0 ) {
		return null;
	}
	return out;
}


// MAIN //

/**
* Creates a linter instance.
*
* @private
*
* @throws {Error} throws when `.rlintrc` configuration file is not valid JSON
* @returns {Linter} linter
*/
function Linter() {
	var file;

	file = findConfigFile();
	if ( isNull( file ) ) {
		throw new Error( 'could\'t find `rtlintrc` file' );
	}
	debug( 'Configuration file: %s', file );
	this.config = readJSON( file );
	if ( this.config instanceof Error ) {
		throw new Error( 'couldn\'t parse `.rtlintrc` file' );
	}
	this.messages = [];
	this.meta = {};
	this.validators = registerValidators( this );
	return this;
}

setReadOnly( Linter.prototype, 'report', report );
setReadOnly( Linter.prototype, 'validate', validate );
setReadOnly( Linter.prototype, 'initialize', initialize );

defineProperty( Linter.prototype, 'errors', {
	'configurable': false,
	'enumerable': true,
	'get': getErrors
});

defineProperty( Linter.prototype, 'warnings', {
	'configurable': false,
	'enumerable': true,
	'get': getWarnings
});


// EXPORTS //

module.exports = Linter;
