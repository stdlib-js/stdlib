
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isArray = require( '@stdlib/assert/is-array' );
var objectKeys = require( '@stdlib/utils/keys' );
var RuleContext = require( './rule_context.js' );


// MAIN //

/**
* Creates validator object and registers lint rules.
*
* @private
* @param {Object} linter - linter object
* @returns {Object} validator object
*/
function registerValidators( linter ) {
	var validators;
	var rulePath;
	var context;
	var config;
	var rules;
	var mode;
	var opts;
	var i;

	validators = {
		'description': [],
		'function': [],
		'examples': [],
		'parameters': [],
		'returns': [],
		'sections': [],
		'section': [],
		'signature': [],
		'interfaces': []
	};
	config = linter.config;
	rules = objectKeys( config );
	for ( i = 0; i < rules.length; i++ ) {
		rulePath = rules[ i ];
		opts = [];
		if ( isArray( config[ rulePath ] ) ) {
			opts = config[ rulePath ].slice( 1 );
			mode = config[ rulePath ][ 0 ];
		} else {
			mode = config[ rulePath ];
		}
		if ( mode === 'error' || mode === 'warn' ) {
			context = new RuleContext( rulePath, mode, linter, opts );
			registerValidator( rules[ i ], context );
		}
	}
	return validators;

	/**
	* Registers validators for specified `repl.txt` lint rules.
	*
	* @private
	* @param {string} rulePath - path to rule
	* @param {RuleContext} context - rule context
	*/
	function registerValidator( rulePath, context ) {
		var validator;
		var create;
		var keys;
		var i;

		create = require( rulePath ); // eslint-disable-line stdlib/no-dynamic-require
		validator = create( context );
		keys = objectKeys( validator );
		for ( i = 0; i < keys.length; i++ ) {
			if ( hasOwnProp( validators, keys[ i ] ) ) {
				validators[ keys[ i ] ].push({
					'id': context.id,
					'validate': validator[ keys[ i ] ]
				});
			}
		}
	}
}


// EXPORTS //

module.exports = registerValidators;
