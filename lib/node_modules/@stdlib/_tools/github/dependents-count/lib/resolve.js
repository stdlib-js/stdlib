/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var logger = require( 'debug' );
var cheerio = require( 'cheerio' );
var exp2 = require( '@stdlib/math/base/special/exp2' );
var getOptions = require( './options.js' );
var request = require( './request.js' );
var urlpath = require( './path.js' );


// VARIABLES //

var debug = logger( 'github-dependents-count:resolve' );

// Specify the maximum number of retries in case we either encounter rate limiting (Too Many Requests) or service unavailable HTTP errors:
var MAX_RETRIES = 10;
var DELAY = 1000;

// Regular expressions for capturing metrics:
var RE_REPOS = /(\d+)\s*Repositories/;
var RE_PKGS = /(\d+)\s*Packages/;


// MAIN //

/**
* Resolves dependents.
*
* @private
* @param {Object} opts - options
* @param {Callback} clbk - callback to invoke after resolving dependents
* @returns {void}
*/
function resolve( opts, clbk ) {
	var options;
	var retries;
	var data;

	options = getOptions( opts ); // request options
	options.path = urlpath( opts.pathname );

	data = Object.create( null ); // no prototype
	retries = 0;

	debug( 'Resolving the number of dependents.' );
	debug( 'Request path: %s', options.path );
	request( options, onResource );

	/**
	* Callback invoked upon receiving an HTTP response.
	*
	* @private
	* @param {(Error|null)} error - error or null
	* @param {Object} response - HTTP response object
	* @param {string} body - response body
	* @returns {void}
	*/
	function onResource( error, response, body ) {
		var selection;
		var el;
		var $;
		if ( error ) {
			if (
				error.status === 429 || // https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/429
				error.status === 503 || // https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/503
				error.message.indexOf( 'Too Many Requests' ) >= 0 ||
				error.message.indexOf( 'Service Unavailable' ) >= 0
			) {
				retries += 1;
				if ( retries > MAX_RETRIES ) {
					debug( 'Maximum number of retries exceeded. Status: %d. Error: %s', error.status, error.message );
					return done( error );
				}
				debug( 'Encountered an error. Status: %d. Error: %s', error.status, error.message );
				return setTimeout( retry, exp2( retries ) * DELAY );
			}
			return done( error );
		}
		$ = cheerio.load( body );
		selection = $( '#dependents div.Box-header' );

		// Retrieve the repository count:
		el = selection.find( '.octicon.octicon-code-square' ).first().parent();
		data.repositories = parseInt( el.text().match( RE_REPOS )[ 1 ], 10 );
		debug( '%d repository dependents.', selection.length );

		// Retrieve the package count:
		el = selection.find( '.octicon.octicon-package' ).first().parent();
		data.packages = parseInt( el.text().match( RE_PKGS )[ 1 ], 10 );
		debug( '%d package dependents.', selection.length );

		return done();
	}

	/**
	* Retries a request.
	*
	* @private
	*/
	function retry() {
		debug( 'Retrying request (%d of %d).', retries, MAX_RETRIES );
		request( options, onResource );
	}

	/**
	* Callback invoked upon resolving resources.
	*
	* @private
	* @param {Error} [error] - error object
	* @returns {void}
	*/
	function done( error ) {
		if ( error ) {
			return clbk( error );
		}
		debug( 'Request completed.' );
		return clbk( null, data );
	}
}


// EXPORTS //

module.exports = resolve;
