#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var createReadStream = require( 'fs' ).createReadStream;
var resolve = require( 'path' ).resolve;
var join = require( 'path' ).join;
var exec = require( 'child_process' ).execSync;
var readline = require( 'readline' );
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var stdin = require( '@stdlib/streams/node/stdin' );
var stdout = require( '@stdlib/streams/node/stdout' );
var EOL = require( '@stdlib/regexp/eol' ).REGEXP;
var CLI = require( '@stdlib/cli/ctor' );
var ENV = require( '@stdlib/process/env' );
var cwd = require( '@stdlib/process/cwd' );
var del = require( './../lib' );


// MAIN //

/**
* Main execution sequence.
*
* @private
* @throws {Error} must either 1) provide a username via a command-line option, 2) set a GITHUB_USERNAME environment variable, or 3) have git installed and run this command in a .git repository
* @returns {void}
*/
function main() {
	var username;
	var tokenID;
	var flags;
	var args;
	var opts;
	var cli;
	var rl;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line options:
	flags = cli.flags();
	if ( flags.help || flags.version ) {
		return;
	}
	if ( flags.lscopes ) {
		createReadStream( join( __dirname, 'scopes.txt' ) )
			.pipe( process.stdout )
			.on( 'close', process.exit );
		return;
	}

	// Get any provided command-line arguments:
	args = cli.args();
	tokenID = args[ 0 ];

	opts = {};
	if ( flags.username ) {
		username = args.username;
	}
	else if ( ENV.GITHUB_USERNAME ) {
		username = ENV.GITHUB_USERNAME;
	}
	else {
		// Attempt to infer from `git config`...
		try {
			username = exec( 'git config user.name', {
				'cwd': cwd()
			});
			username = username.toString().replace( EOL, '' );
		} catch ( err ) {
			throw new Error( 'invalid invocation: '+err.message+'. Must either 1) provide a username via a command-line option, 2) set a GITHUB_USERNAME environment variable, or 3) have git installed and run this command in a .git repository.' );
		}
	}
	if ( username ) {
		opts.username = username;
	}
	if ( flags.otp ) {
		opts.otp = flags.otp;
	}
	if ( flags.useragent ) {
		opts.useragent = flags.useragent;
	}
	if ( flags.password ) {
		opts.password = flags.password;
		del( tokenID, opts, clbk );
	}
	else if ( ENV.GITHUB_PASSWORD ) {
		opts.password = ENV.GITHUB_PASSWORD;
		del( tokenID, opts, clbk );
	}
	else {
		// Prompt for a password:
		rl = readline.createInterface({
			'input': stdin,
			'output': stdout
		});
		rl.on( 'close', onClose );
		rl.on( 'SIGINT', onSIGINT );

		console.log( '\nPlease enter your GitHub credentials: \n' ); // eslint-disable-line no-console
		rl.question( 'Enter GitHub password: ', onPassword );
	}

	/**
	* Callback invoked upon deleting a token.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Object} info - rate limit info
	* @returns {void}
	*/
	function clbk( error, info ) {
		var str;
		var re;
		if ( info ) {
			console.error( JSON.stringify( info ) );
		}
		if ( error ) {
			re = /otp/ig;
			if ( error.status === 401 && re.test( error.message ) ) {
				// Prompt for multi-factor authentication:
				rl = readline.createInterface({
					'input': stdin,
					'output': stdout
				});
				rl.on( 'close', onClose );
				rl.on( 'SIGINT', onSIGINT );
				rl.question( 'Enter one-time password: ', onOTP );
			} else {
				cli.error( error );
			}
		}
		if ( tokenID ) {
			str = 'Deleted token ' + tokenID + '.';
			console.log( str );
		}
		cli.close( 0 );
	}

	/**
	* Callback invoked once a readline interface closes.
	*
	* @private
	*/
	function onClose() {
		del( tokenID, opts, clbk );
	}

	/**
	* Callback invoked upon receiving a one-time password.
	*
	* @private
	* @param {string} answer - user input
	* @returns {void}
	*/
	function onOTP( answer ) {
		opts.otp = answer;
		del( tokenID, opts, clbk );
	}

	/**
	* Callback invoked upon receiving a password.
	*
	* @private
	* @param {string} answer - user input
	* @returns {void}
	*/
	function onPassword( answer ) {
		opts.password = answer;
		del( tokenID, opts, clbk );
	}

	/**
	* Callback invoked upon receiving a SIGINT (e.g., ctrl+C).
	*
	* @private
	*/
	function onSIGINT() {
		console.error( '' ); // eslint-disable-line no-console
		cli.close( 1 );
	}
}

main();
