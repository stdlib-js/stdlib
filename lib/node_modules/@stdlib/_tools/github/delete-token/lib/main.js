/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isFunction = require( '@stdlib/assert/is-function' );
var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' );
var format = require( '@stdlib/string/format' );
var copy = require( '@stdlib/utils/copy' );
var validate = require( './validate.js' );
var defaults = require( './defaults.json' );
var query = require( './query.js' );


// MAIN //

/**
* Deletes a token.
*
* @param {number} id - token id
* @param {Object} options - function options
* @param {string} options.username - GitHub username
* @param {string} options.password - GitHub password
* @param {string} [options.otp] - GitHub one-time password
* @param {string} [options.useragent] - user agent string
* @param {Function} clbk - callback to invoke upon query completion
* @throws {TypeError} callback argument must be a function
* @throws {TypeError} token id must be a nonnegative integer
* @returns {void}
*/
function del( id, options, clbk ) {
	var opts;
	var err;
	if ( !isNonNegativeInteger( id ) ) {
		throw new TypeError( format( 'invalid argument. Token id must be a nonnegative integer. Value: `%s`.', id ) );
	}
	if ( !isFunction( clbk ) ) {
		throw new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', clbk ) );
	}
	opts = copy( defaults );
	err = validate( opts, options );
	if ( err ) {
		throw err;
	}
	query( id, opts, done );
	/**
	* Callback invoked after receiving an API response.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Object} info - response info
	* @returns {void}
	*/
	function done( error, info ) {
		error = error || null;
		info = info || null;
		clbk( error, info );
	}
}


// EXPORTS //

module.exports = del;
