/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var logger = require( 'debug' );
var string2buffer = require( '@stdlib/buffer/from-string' );
var replace = require( '@stdlib/string/replace' );
var getOpts = require( './options.js' );
var getData = require( './data.js' );
var request = require( './request.js' );
var ratelimit = require( './ratelimit.js' );


// VARIABLES //

var debug = logger( 'github-dispatch-workflow:query' );


// MAIN //

/**
* Queries a remote endpoint in order to create a workflow dispatch event.
*
* @private
* @param {string} slug - repository slug
* @param {string} id - workflow id or workflow file name
* @param {Object} options - query options
* @param {Callback} clbk - callback to invoke after completing a query
*/
function query( slug, id, options, clbk ) {
	var opts;
	var data;

	// Extract request options:
	opts = getOpts( options );

	// Set the query endpoint:
	opts.path = replace( options.pathname, '<slug>', slug );
	opts.path = replace( opts.path, '<id>', id );

	// Get the request data:
	data = string2buffer( getData( options ) );
	opts.headers[ 'Content-Length' ] = data.byteLength;

	// Make the request:
	request( opts, data, done );

	/**
	* Callback invoked after completing request.
	*
	* @private
	* @param {(Error|Null)} error - error object
	* @param {Object} response - HTTP response object
	* @returns {void}
	*/
	function done( error, response ) {
		var info;
		if ( arguments.length === 1 ) {
			debug( 'No available rate limit information.' );
			return clbk( error );
		}
		debug( 'Request completed.' );

		// Get rate limit information:
		info = ratelimit( response.headers );
		debug( 'Rate limit: %d', info.limit );
		debug( 'Rate limit remaining: %d', info.remaining );
		debug( 'Rate limit reset: %s', (new Date( info.reset*1000 )).toISOString() );

		if ( error ) {
			return clbk( error, info );
		}
		clbk( null, info );
	}
}


// EXPORTS //

module.exports = query;
