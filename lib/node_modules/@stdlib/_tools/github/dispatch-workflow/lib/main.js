/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isFunction = require( '@stdlib/assert/is-function' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var format = require( '@stdlib/string/format' );
var copy = require( '@stdlib/utils/copy' );
var validate = require( './validate.js' );
var defaults = require( './defaults.json' );
var query = require( './query.js' );


// VARIABLES //

var DEFAULT_HTTP_PORT = 80;
var DEFAULT_HTTPS_PORT = 443;


// MAIN //

/**
* Creates a workflow dispatch event.
*
* @param {string} slug - repository slug
* @param {string} id - workflow id or workflow file name
* @param {Options} options - function options
* @param {string} options.token - GitHub access token
* @param {string} [opts.protocol='https'] - request protocol
* @param {string} [opts.hostname='api.github.com'] - endpoint hostname
* @param {NonNegativeInteger} [opts.port] - endpoint port
* @param {string} [options.useragent] - user agent string
* @param {string} [options.ref='main'] - git reference for the workflow (branch or tag name)
* @param {Object} [options.inputs] - input key-value pairs overriding the defaults specified in the workflow file
* @param {Callback} clbk - callback to invoke upon query completion
* @throws {TypeError} first argument must be a string
* @throws {TypeError} second argument must be a string
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {TypeError} last argument must be a function
*
* @example
* var opts = {
*     'token': '<your_token_goes_here>'
* };
* dispatch( 'stdlib-js/utils-property-symbols', 'test.yml', opts, clbk );
*
* function clbk( error, info ) {
*     // Check for rate limit information...
*     if ( info ) {
*         console.error( 'Limit: %d', info.limit );
*         console.error( 'Remaining: %d', info.remaining );
*         console.error( 'Reset: %s', (new Date( info.reset*1000 )).toISOString() );
*     }
*     if ( error ) {
*         if ( error instanceof Error ) {
*             throw error;
*         }
*         console.error( error.message );
*     }
*     console.log( 'Success!' );
* }
*/
function dispatch( slug, id, options, clbk ) {
	var opts;
	var err;
	if ( !isString( slug ) ) {
		throw new TypeError( format( 'invalid argument. Repository slug must be a string. Value: `%s`.', slug ) );
	}
	if ( !isString( id ) ) {
		throw new TypeError( format( 'invalid argument. Workflow identifier must be a string. Value: `%s`.', id ) );
	}
	opts = copy( defaults );
	err = validate( opts, options );
	if ( err ) {
		throw err;
	}
	if ( opts.port === null ) {
		if ( opts.protocol === 'https' ) {
			opts.port = DEFAULT_HTTPS_PORT;
		} else {
			opts.port = DEFAULT_HTTP_PORT;
		}
	}
	if ( !isFunction( clbk ) ) {
		throw new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', clbk ) );
	}
	query( slug, id, opts, done );

	/**
	* Callback invoked after receiving an API response.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Object} data - query data
	* @param {Object} info - response info
	*/
	function done( error, data, info ) {
		error = error || null;
		data = data || null;
		info = info || null;
		clbk( error, data, info );
	}
}


// EXPORTS //

module.exports = dispatch;
