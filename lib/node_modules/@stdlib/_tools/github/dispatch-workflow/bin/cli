#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/cli/ctor' );
var ENV = require( '@stdlib/process/env' );
var Number = require( '@stdlib/number/ctor' );
var dispatch = require( './../lib' );


// VARIABLES //

var RE_NUMBER = /^[0-9e+-.]+$/;


// FUNCTIONS //

/**
* Parses input flag key-value pairs.
*
* @private
* @param {string} inputs - input key-value pairs separated by commas
* @returns {Object} key-value pair object
*/
function parseInputs( inputs ) {
	var arr;
	var out;
	var i;

	inputs = inputs.split( ',' );
	out = {};
	for ( i = 0; i < inputs.length; i++ ) {
		arr = inputs[ i ].split( '=' );
		out[ arr[ 0 ] ] = ( RE_NUMBER.test( arr[ 1 ] ) ) ?
			Number( arr[ 1 ] ) :
			arr[ 1 ];
	}
	return out;
}


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var flags;
	var args;
	var opts;
	var cli;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line options:
	flags = cli.flags();
	if ( flags.help || flags.version ) {
		return;
	}
	// Get any provided command-line arguments:
	args = cli.args();

	opts = {};
	if ( flags.protocol ) {
		opts.protocol = flags.protocol;
	}
	if ( flags.hostname ) {
		opts.hostname = flags.hostname;
	}
	if ( flags.port ) {
		opts.port = parseInt( flags.port, 10 );
	}
	if ( flags.useragent ) {
		opts.useragent = flags.useragent;
	}
	if ( flags.token ) {
		opts.token = flags.token;
	} else if ( ENV.GITHUB_TOKEN ) {
		opts.token = ENV.GITHUB_TOKEN;
	}
	if ( flags.ref ) {
		opts.ref = flags.ref;
	}
	if ( flags.inputs ) {
		opts.inputs = parseInputs( flags.inputs );
	}
	dispatch( args[ 0 ], flags.id, opts, onResponse );

	/**
	* Callback invoked upon receiving a request response.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Object} data - response data
	* @param {Object} info - rate limit info
	* @returns {void}
	*/
	function onResponse( error, data, info ) {
		/* eslint-disable no-console */
		if ( info ) {
			console.error( JSON.stringify( info ) );
		}
		if ( error ) {
			if ( error instanceof Error ) {
				return cli.error( error );
			}
			return cli.error( new Error( error.message ) );
		}
		console.log( JSON.stringify( data ) );
	}
}

main();
