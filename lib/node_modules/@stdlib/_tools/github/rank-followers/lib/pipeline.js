/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var objectKeys = require( '@stdlib/utils/keys' );
var followers = require( '@stdlib/_tools/github/followers' );
var details = require( '@stdlib/_tools/github/user-details' );
var analyze = require( '@stdlib/_tools/github/rank-users' );


// FUNCTIONS //

/**
* Extracts object values into an array.
*
* @private
* @param {Object} obj - input object
* @returns {Array} value array
*/
function toArray( obj ) {
	var keys;
	var out;
	var i;
	keys = objectKeys( obj );
	out = new Array( keys.length );
	for ( i = 0; i < keys.length; i++ ) {
		out[ i ] = obj[ keys[i] ];
	}
	return out;
}


// MAIN //

/**
* Analysis pipeline.
*
* @param {Object} opts - function options
* @param {Function} clbk - callback to invoke after running analysis
* @returns {void}
*/
function pipeline( opts, clbk ) {
	var ratelimit;
	followers( opts, onFollowers );
	/**
	* Callback invoked after receiving a user's followers.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {ObjectArray} data - follower data
	* @param {Object} info - rate limit info
	* @returns {void}
	*/
	function onFollowers( error, data, info ) {
		var usernames;
		var options;
		var i;

		ratelimit = info;
		if ( error ) {
			return done( error );
		}
		usernames = new Array( data.length );
		for ( i = 0; i < data.length; i++ ) {
			usernames[ i ] = data[ i ].login;
		}
		options = {
			'useragent': opts.useragent,
			'usernames': usernames
		};
		if ( opts.token ) {
			options.token = opts.token;
		}
		// Move to next step in pipeline:
		details( options, onDetails );
	}
	/**
	* Callback invoked upon receiving user details.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Object} results - user details
	* @param {Object} info - rate limit info
	* @returns {void}
	*/
	function onDetails( error, results, info ) {
		var options;
		var data;

		ratelimit = info;
		if ( error ) {
			return done( error );
		}
		if ( results.meta.failure ) {
			error = {
				'status': 429,
				'message': 'unable to resolve resources. This is likely due to rate limiting. Check your rate limit and try again.'
			};
			return done( error );
		}
		options = {
			'method': opts.method,
			'useragent': opts.useragent
		};
		if ( opts.token ) {
			options.token = opts.token;
		}
		data = toArray( results.data );

		// Move to next step in pipeline:
		analyze( data, options, done );
	}
	/**
	* Ends the analysis pipeline.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Object} results - analysis results
	* @param {Object} info - rate limit info
	* @returns {void}
	*/
	function done( error, results, info ) {
		if ( info ) {
			ratelimit = info;
		}
		if ( error ) {
			if ( ratelimit ) {
				return clbk( error, null, ratelimit );
			}
			return clbk( error );
		}
		clbk( null, results, ratelimit );
	}
}


// EXPORTS //

module.exports = pipeline;
