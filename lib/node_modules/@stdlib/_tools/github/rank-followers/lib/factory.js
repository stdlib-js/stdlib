/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isFunction = require( '@stdlib/assert/is-function' );
var format = require( '@stdlib/string/format' );
var merge = require( '@stdlib/utils/merge' );
var validate = require( './validate.js' );
var defaults = require( './defaults.json' );
var pipeline = require( './pipeline.js' );


// MAIN //

/**
* Returns a function for ranking a user's followers.
*
* @param {Object} options - function options
* @param {string} [options.token] - GitHub access token
* @param {string} [options.username] - GitHub username
* @param {string} [options.useragent] - user agent string
* @param {string} [options.method="followers"] - rank method
* @param {Function} clbk - callback to invoke upon query completion
* @throws {TypeError} callback argument must be a function
* @throws {Error} must provide a username or an access token
* @returns {Function} function for ranking a user's followers
*/
function factory( options, clbk ) {
	var opts;
	var err;
	opts = merge( {}, defaults );
	err = validate( opts, options );
	if ( err ) {
		throw err;
	}
	if ( !isFunction( clbk ) ) {
		throw new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', clbk ) );
	}
	if (
		opts.token === void 0 &&
		opts.username === void 0
	) {
		throw new Error( 'invalid argument. Must provide a username or, to rank an authenticated user\'s followers, an access token.' );
	}
	return rank;

	/**
	* Ranks a user's followers.
	*
	* @private
	* @returns {void}
	*/
	function rank() {
		pipeline( opts, done );
		/**
		* Callback invoked after running rank analysis.
		*
		* @private
		* @param {(Error|null)} error - error object
		* @param {ObjectArray} data - query data
		* @param {Object} info - response info
		* @returns {void}
		*/
		function done( error, data, info ) {
			error = error || null;
			data = data || null;
			info = info || null;
			clbk( error, data, info );
		}
	}
}


// EXPORTS //

module.exports = factory;
