/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var copy = require( '@stdlib/utils/copy' );
var analyze = require( './../lib/analyze.js' );


// FIXTURES //

var options = require( './fixtures/opts.js' );
var data = require( './fixtures/data.json' );


// FUNCTIONS //

function setup() {
	return copy( data );
}


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof analyze, 'function', 'main export is a function' );
	t.end();
});

tape( 'function supports ranking users based on follower counts', function test( t ) {
	var expected;
	var opts;

	opts = options();
	opts.method = 'followers';

	expected = [ data[0], data[1] ];
	analyze( setup(), opts, done );

	function done( error, actual ) {
		if ( error ) {
			t.fail( error.message );
		}
		t.deepEqual( actual.data, expected, 'ranks users based on follower counts' );
		t.end();
	}
});

tape( 'function supports ranking users based on following counts', function test( t ) {
	var expected;
	var opts;

	opts = options();
	opts.method = 'following';

	expected = [ data[1], data[0] ];
	analyze( setup(), opts, done );

	function done( error, actual ) {
		if ( error ) {
			t.fail( error.message );
		}
		t.deepEqual( actual.data, expected, 'ranks users based on following counts' );
		t.end();
	}
});

tape( 'function supports ranking users based on number of repo counts', function test( t ) {
	var expected;
	var opts;

	opts = options();
	opts.method = 'repos';

	expected = [ data[0], data[1] ];
	analyze( setup(), opts, done );

	function done( error, actual ) {
		if ( error ) {
			t.fail( error.message );
		}
		t.deepEqual( actual.data, expected, 'ranks users based on repo counts' );
		t.end();
	}
});

tape( 'function supports ranking users based on gist counts', function test( t ) {
	var expected;
	var opts;

	opts = options();
	opts.method = 'gists';

	expected = [ data[1], data[0] ];
	analyze( setup(), opts, done );

	function done( error, actual ) {
		if ( error ) {
			t.fail( error.message );
		}
		t.deepEqual( actual.data, expected, 'ranks users based on gist counts' );
		t.end();
	}
});

tape( 'function supports ranking users based on when a user created an account (descending)', function test( t ) {
	var expected;
	var opts;

	opts = options();
	opts.method = 'created';
	opts.order = 'desc';

	expected = [ data[0], data[1] ];
	analyze( setup(), opts, done );

	function done( error, actual ) {
		if ( error ) {
			t.fail( error.message );
		}
		t.deepEqual( actual.data, expected, 'ranks users based on when a user created an account' );
		t.end();
	}
});

tape( 'function supports ranking users based on when a user created an account (ascending)', function test( t ) {
	var expected;
	var opts;

	opts = options();
	opts.method = 'created';
	opts.order = 'asc';

	expected = [ data[1], data[0] ];
	analyze( setup(), opts, done );

	function done( error, actual ) {
		if ( error ) {
			t.fail( error.message );
		}
		t.deepEqual( actual.data, expected, 'ranks users based on when a user created an account' );
		t.end();
	}
});

tape( 'function supports ranking users based on the ratio of followers to following', function test( t ) {
	var expected;
	var opts;

	opts = options();
	opts.method = 'ffratio';

	expected = [ data[0], data[1] ];
	analyze( setup(), opts, done );

	function done( error, actual ) {
		if ( error ) {
			t.fail( error.message );
		}
		t.deepEqual( actual.data, expected, 'ranks users based on follower-to-following ratio' );
		t.end();
	}
});

tape( 'function returns the results used to rank users', function test( t ) {
	var expected;
	var opts;

	opts = options();
	opts.method = 'followers';

	expected = [ data[0].followers, data[1].followers ];
	analyze( setup(), opts, done );

	function done( error, actual ) {
		if ( error ) {
			t.fail( error.message );
		}
		t.deepEqual( actual.results, expected, 'returns scores' );
		t.end();
	}
});
