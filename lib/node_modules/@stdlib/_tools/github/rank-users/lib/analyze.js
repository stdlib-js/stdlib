/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var pluck = require( '@stdlib/utils/pluck' );
var format = require( '@stdlib/string/format' );
var methods = require( './methods.json' );
var raw = require( './pluck.raw.js' );
var ratio = require( './pluck.ratio.js' );
var sort = require( './sort.js' );
var shuffle = require( './shuffle.js' );


// MAIN //

/**
* Analyzes user detail data.
*
* @param {ObjectArray} data - user data
* @param {Object} opts - analysis options
* @param {string} opts.method - analysis method
* @param {string} opts.order - sort order
* @param {Function} clbk - callback to invoke after completing analysis
* @throws {TypeError} unknown method option
* @returns {void}
*/
function analyze( data, opts, clbk ) {
	var params;
	var scores;
	var tmp;

	params = methods[ opts.method ];

	// Assemble two element tuples consisting of the value index and a score on which to sort...
	switch ( opts.method ) {
	case 'followers':
	case 'following':
	case 'created':
	case 'repos':
	case 'gists':
		tmp = raw( data, params.key );
		break;
	case 'ffratio':
		tmp = ratio( data, params.key1, params.key2 );
		break;
	default:
		throw new TypeError( format( 'invalid option. Unknown method. Option: `%s`.', opts.method ) );
	}
	// For `created`, older users should be ranked higher...
	if ( opts.method === 'created' ) {
		if ( opts.order === 'desc' ) {
			opts.order = 'asc';
		} else {
			opts.order = 'desc';
		}
	}
	// Rank the data:
	tmp = sort( tmp, opts.order );

	// Shuffle the original data to match the sort order:
	data = shuffle( data, tmp );

	// Pluck the scores from the sort vector:
	scores = pluck( tmp, 1 );

	// Assemble the results data:
	data = {
		'data': data,
		'results': scores
	};

	setTimeout( onTimeout, 0 );

	/**
	* Dezalgo.
	*
	* @private
	*/
	function onTimeout() {
		clbk( null, data, null );
	}
}


// EXPORTS //

module.exports = analyze;
