#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/cli/ctor' );
var ENV = require( '@stdlib/process/env' );
var rank = require( './../lib' );


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var delimiter;
	var token;
	var flags;
	var opts;
	var cli;
	var fmt;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line options:
	flags = cli.flags();
	if ( flags.help || flags.version ) {
		return;
	}
	opts = {};
	if ( flags.useragent ) {
		opts.useragent = flags.useragent;
	}
	if ( flags.username ) {
		opts.username = flags.username;
	}
	if ( flags.method ) {
		opts.method = flags.method;
	}
	if ( flags.token ) {
		token = flags.token;
	}
	else if ( ENV.GITHUB_TOKEN ) {
		token = ENV.GITHUB_TOKEN;
	}
	if ( token ) {
		opts.token = token;
	}
	if (
		flags.format &&
		flags.format !== 'csv' &&
		flags.format !== 'json'
	) {
		cli.error( 'invalid option. Format option must be either `csv` or `json`. Option: `' + flags.format + '`.' );
	}
	fmt = flags.format || 'csv';
	delimiter = flags.delimiter || ',';

	rank( opts, clbk );

	/**
	* Callback invoked upon performing analysis.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Array[]} data - analysis results
	* @param {Object} info - rate limit info
	* @returns {void}
	*/
	function clbk( error, data, info ) {
		/* eslint-disable no-console */
		var writer;
		if ( info ) {
			console.error( JSON.stringify( info ) );
		}
		if ( error ) {
			if ( error instanceof Error ) {
				return cli.error( error );
			}
			return cli.error( new Error( error.message ) );
		}
		if ( fmt === 'json' ) {
			writer = json;
		} else {
			writer = csv;
		}
		writer( process.stdout, data );
	}

	/**
	* Writes newline-delimited column-separated values to a writable stream.
	*
	* @private
	* @param {Stream} stream - writable stream
	* @param {Object} data - data to write
	* @returns {void}
	*/
	function csv( stream, data ) {
		var scores;
		var row;
		var len;
		var i;

		scores = data.results;
		data = data.data;

		// Number of users:
		len = scores.length;

		// Write CSV headers...
		row = 'username'+delimiter+'value\n';
		stream.write( row, 'utf8' );

		// Write CSV values...
		for ( i = 0; i < len; i++ ) {
			row = data[ i ].login;
			row += delimiter;
			row += scores[ i ];
			row += '\n';

			// Write out the row:
			stream.write( row, 'utf8' );
		}
	}

	/**
	* Writes JSON to a writable stream.
	*
	* @private
	* @param {Stream} stream - writable stream
	* @param {Object} data - data to write
	* @returns {void}
	*/
	function json( stream, data ) {
		var out;
		out = JSON.stringify( data ) + '\n';
		stream.write( out, 'utf8' );
	}
}

main();
