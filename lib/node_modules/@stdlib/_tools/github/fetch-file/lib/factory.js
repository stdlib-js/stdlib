/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isFunction = require( '@stdlib/assert/is-function' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;
var copy = require( '@stdlib/utils/copy' );
var format = require( '@stdlib/string/format' );
var defaults = require( './defaults.json' );
var resolve = require( './resolve.js' );


// MAIN //

/**
* Returns a function to fetch a file from one or more repositories.
*
* @param {string} filepath - relative filepath of the file to fetch
* @param {StringArray} repos - array of repo slugs indicating the repositories from which to fetch a file
* @param {Function} clbk - callback to invoke upon query completion
* @throws {TypeError} first argument must be a string
* @throws {TypeError} second argument must be an array of strings
* @throws {TypeError} callback argument must be a function
* @returns {Function} function for fetching a file from one or more repositories
*/
function factory( filepath, repos, clbk ) {
	var opts;
	if ( !isString( filepath ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', filepath ) );
	}
	if ( !isStringArray( repos ) ) {
		throw new TypeError( format( 'invalid argument. Second argument must be an array of strings. Value: `%s`.', repos ) );
	}
	if ( !isFunction( clbk ) ) {
		throw new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', clbk ) );
	}
	opts = copy( defaults );
	return fetchFile;

	/**
	* Fetches a file from one or more repositories.
	*
	* @private
	* @returns {void}
	*/
	function fetchFile() {
		resolve( filepath, repos, opts, done );
		/**
		* Callback invoked after query completion.
		*
		* @private
		* @param {(Error|null)} error - error object
		* @param {Object} results - query results
		* @returns {void}
		*/
		function done( error, results ) {
			if ( error ) {
				return clbk( error );
			}
			clbk( null, results );
		}
	}
}


// EXPORTS //

module.exports = factory;
