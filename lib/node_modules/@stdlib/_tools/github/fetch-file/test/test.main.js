/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var fetchFile = require( './../lib/main.js' );


// FIXTURES //

var results = require( './fixtures/results.json' );
var repos = require( './fixtures/repos.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof fetchFile, 'function', 'export is a function' );
	t.end();
});

tape( 'function returns an error to a provided callback if an error is encountered when fetching a file', function test( t ) {
	var fetchFile;

	fetchFile = proxyquire( './../lib/main.js', {
		'./factory.js': factory
	});

	fetchFile( 'README.md', repos, done );

	function factory( filepath, repos, clbk ) {
		return function fetch() {
			setTimeout( onTimeout, 0 );
			function onTimeout() {
				clbk({
					'status': 404,
					'message': 'beep'
				});
			}
		};
	}

	function done( error ) {
		t.equal( error.status, 404, 'equal status' );
		t.equal( error.message, 'beep', 'equal message' );
		t.end();
	}
});

tape( 'functions returns a repo hash containing file contents to a provided callback', function test( t ) {
	var fetchFile;
	var expected;

	fetchFile = proxyquire( './../lib/main.js', {
		'./factory.js': factory
	});

	expected = results;

	fetchFile( 'README.md', repos, done );

	function factory( filepath, repos, clbk ) {
		return function fetch() {
			setTimeout( onTimeout, 0 );
			function onTimeout() {
				clbk( null, results );
			}
		};
	}

	function done( error, results ) {
		t.equal( error, null, 'does not return an error' );
		t.deepEqual( results, expected, 'deep equal' );
		t.end();
	}
});
