/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var noop = require( '@stdlib/utils/noop' );
var setTopics = require( './../lib/main.js' );


// FIXTURES //

var getOpts = require( './fixtures/opts.js' );
var info = require( './fixtures/info.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof setTopics, 'function', 'export is a function' );
	t.end();
});

tape( 'function throws if provided a slug argument which is not a string', function test( t ) {
	var values;
	var opts;
	var i;

	values = [
		5,
		NaN,
		null,
		void 0,
		true,
		[],
		{},
		function noop() {}
	];

	opts = getOpts();
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided ' + values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			setTopics( value, opts, noop );
		};
	}
});

tape( 'function throws if provided a topics argument which is not an array of strings', function test( t ) {
	var values;
	var opts;
	var i;

	values = [
		'abc',
		123,
		NaN,
		null,
		void 0,
		true,
		[],
		{},
		function noop() {}
	];

	opts = getOpts();
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided ' + values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			setTopics( 'math-io/erf', value, opts, noop );
		};
	}
});

tape( 'function throws if not provided a valid repository slug (:owner/:repo)', function test( t ) {
	var values;
	var opts;
	var i;

	values = [
		'beep',
		'beep//boop',
		'beep/boop/bop',
		'/beep/boop',
		'b/e/e/p/',
		'beep/boop/'
	];

	opts = getOpts();
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), Error, 'throws an error when provided ' + values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			setTopics( value, [ 'math', 'special' ], opts, noop );
		};
	}
});

tape( 'function throws if provided an invalid options argument', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		null,
		void 0,
		true,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided ' + values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			setTopics( 'math-io/erf', [ 'math', 'special' ], {
				'token': value
			}, noop );
		};
	}
});

tape( 'function throws if provided a callback argument which is not a function', function test( t ) {
	var values;
	var opts;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		void 0,
		true,
		[],
		{}
	];

	opts = getOpts();
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided ' + values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			setTopics( 'math-io/float64-to-words', [ 'math', 'binary' ], opts, value );
		};
	}
});

tape( 'function returns an error to a provided callback if an error is encountered when setting the topics of a repository', function test( t ) {
	var setTopics;
	var opts;

	setTopics = proxyquire( './../lib/main.js', {
		'./factory.js': factory
	});

	opts = getOpts();
	setTopics( 'math-io/powm1', [ 'math', 'special' ], opts, done );

	function factory( opts, clbk ) {
		return function setTopics() {
			setTimeout( onTimeout, 0 );
			function onTimeout() {
				clbk( new Error( 'beep' ), info );
			}
		};
	}

	function done( error ) {
		t.ok( error instanceof Error, 'error instance' );
		t.equal( error.message, 'beep' );
		t.end();
	}
});

tape( 'function returns rate limit info to a provided callback', function test( t ) {
	var setTopics;
	var expected;
	var opts;

	setTopics = proxyquire( './../lib/main.js', {
		'./factory.js': factory
	});

	expected = info;

	opts = getOpts();
	setTopics( 'math-io/log1p', [ 'math', 'special' ], opts, done );

	function factory( opts, clbk ) {
		return function setTopics() {
			setTimeout( onTimeout, 0 );
			function onTimeout() {
				clbk( null, info );
			}
		};
	}

	function done( error, info ) {
		t.equal( error, null, 'does not return an error' );
		t.deepEqual( info, expected, 'deep equal' );
		t.end();
	}
});
