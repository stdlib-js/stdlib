/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var logger = require( 'debug' );


// VARIABLES //

var debug = logger( 'github-create-repo:data' );


// MAIN //

/**
* Extracts data to be posted to a remote endpoint.
*
* @private
* @param {string} name - repository name
* @param {Object} opts - function options
* @param {string} opts.desc - repository description
* @param {string} opts.homepage - repository homepage
* @param {number} [opts.team] - team id (organizations)
* @param {string} [opts.gitignore] - .gitignore template
* @param {string} [opts.license] - LICENSE template
* @param {boolean} opts.private - boolean indicating whether a repository should be private
* @param {boolean} opts.issues - boolean indicating whether issues should be enabled
* @param {boolean} opts.projects - boolean indicating whether a repository should have project boards enabled
* @param {boolean} opts.wiki - boolean indicating whether a repository should have a wiki
* @param {boolean} opts.downloads - boolean indicating whether downloads should be enabled
* @param {boolean} opts.init - boolean indicating whether to initialize the repository with an empty README
* @param {boolean} opts.allowSquashMerge - boolean indicating whether to allow squash-merging
* @param {boolean} opts.allowMergeCommit - boolean indicating whether to allow merging pull requests with a merge commit
* @param {boolean} opts.allowRebaseMerge - boolean indicating whether to allow rebase-merging pull requests
* @returns {string} data to post
*/
function data( name, opts ) {
	var out = {};

	out.name = name;
	debug( 'Repository name: %s', name );

	out.description = opts.desc;
	debug( 'Repository description: %s', opts.desc );

	out.homepage = opts.homepage;
	debug( 'Repository homepage: %s', opts.homepage );

	if ( opts.team !== null ) {
		out.team_id = opts.team;
		debug( 'Organization team id: %d', opts.team );
	}
	if ( opts.gitignore ) {
		out.gitignore_template = opts.gitignore;
		debug( 'Repository .gitignore template: %s', opts.gitignore );
	}
	if ( opts.license ) {
		out.license_template = opts.license;
		debug( 'Repository license template: %s', opts.license );
	}
	out.private = opts.private;
	debug( 'Repository visibility: %s', ( opts.private ) ? 'private' : 'public' );

	out.has_issues = opts.issues;
	debug( 'Repository issues: %s', ( opts.issues ) ? 'enabled' : 'disabled' );

	out.has_projects = opts.projects;
	debug( 'Repository project boards: %s', ( opts.projects ) ? 'enabled' : 'disabled' );

	out.has_wiki = opts.wiki;
	debug( 'Repository wiki: %s', ( opts.wiki ) ? 'enabled' : 'disabled' );

	out.has_downloads = opts.downloads;
	debug( 'Repository downloads: %s', ( opts.downloads ) ? 'enabled' : 'disabled' );

	out.auto_init = opts.init;
	debug( 'Repository initialized: %s', ( opts.init ) ? 'true' : 'false' );

	out.allow_squash_merge = opts.allowSquashMerge;
	debug( 'Allow squash merging: %s', ( opts.allowSquashMerge ) ? 'true' : 'false' );

	out.allow_merge_commit = opts.allowMergeCommit;
	debug( 'Allow merge commits: %s', ( opts.allowMergeCommit ) ? 'true' : 'false' );

	out.allow_rebase_merge = opts.allowRebaseMerge;
	debug( 'Allow rebase merging: %s', ( opts.allowRebaseMerge ) ? 'true' : 'false' );

	return JSON.stringify( out );
}


// EXPORTS //

module.exports = data;
