#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/cli/ctor' );
var ENV = require( '@stdlib/process/env' );
var get = require( './../lib' );


// MAIN //

/**
* Main execution sequence.
*
* @private
*/
function main() {
	var flags;
	var opts;
	var cli;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line options:
	flags = cli.flags();
	if ( flags.help || flags.version ) {
		return;
	}

	opts = {};
	if ( flags.protocol ) {
		opts.protocol = flags.protocol;
	}
	if ( flags.hostname ) {
		opts.hostname = flags.hostname;
	}
	if ( flags.port ) {
		opts.port = parseInt( flags.port, 10 );
	}
	if ( flags.pathname ) {
		opts.pathname = flags.pathname;
	}
	if ( flags.page ) {
		opts.page = parseInt( flags.page, 10 );
	}
	if ( flags.last_page ) {
		if ( flags.last_page === 'last' ) {
			opts.last_page = flags.last_page;
		} else {
			opts.last_page = parseInt( flags.last_page, 10 );
		}
	}
	if ( flags.per_page ) {
		opts.per_page = parseInt( flags.per_page, 10 );
	}
	if ( flags.query ) {
		opts.query = flags.query;
	}
	if ( flags.accept ) {
		opts.accept = flags.accept;
	}
	if ( flags.useragent ) {
		opts.useragent = flags.useragent;
	}
	if ( flags.token ) {
		opts.token = flags.token;
	} else if ( ENV.GITHUB_TOKEN ) {
		opts.token = ENV.GITHUB_TOKEN;
	}

	get( opts, onResponse );

	/**
	* Callback invoked upon receiving a request response.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {(Object|ObjectArray)} data - response data
	* @param {Object} info - rate limit info
	* @returns {void}
	*/
	function onResponse( error, data, info ) {
		/* eslint-disable no-console */
		if ( info ) {
			console.error( JSON.stringify( info ) );
		}
		if ( error ) {
			return cli.error( error );
		}
		console.log( JSON.stringify( data ) );
	}
}

main();
