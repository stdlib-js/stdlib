/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* Retrieve resources from a GitHub API endpoint.
*
* @module @stdlib/_tools/github/get
*
* @example
* var get = require( '@stdlib/_tools/github/get' );
*
* get( onResponse );
*
* function onResponse( error, data, info ) {
*     // Check for rate limit info...
*     if ( info ) {
*         console.error( 'Limit: %d', info.limit );
*         console.error( 'Remaining: %d', info.remaining );
*         console.error( 'Reset: %s', (new Date( info.reset*1000 )).toISOString() );
*     }
*     if ( error ) {
*         if ( error instanceof Error ) {
*             throw error;
*         }
*         console.error( error.message );
*     } else {
*         console.log( JSON.stringify( data ) );
*     }
* }
*
* @example
* var factory = require( '@stdlib/_tools/github/get' ).factory;
*
* function onResponse( error, data, info ) {
*     // Check for rate limit info...
*     if ( info ) {
*         console.error( 'Limit: %d', info.limit );
*         console.error( 'Remaining: %d', info.remaining );
*         console.error( 'Reset: %s', (new Date( info.reset*1000 )).toISOString() );
*     }
*     if ( error ) {
*         if ( error instanceof Error ) {
*             throw error;
*         }
*         console.error( error.message );
*     } else {
*         console.log( JSON.stringify( data ) );
*     }
* }
*
* var options = {
*     'pathname': '/user/repos',
*     'page': 1,
*     'per_page': 100
* };
*
* var getRepos = factory( options, onReponse );
*
* // Make repeated requests:
* getRepos();
* getRepos();
*/

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var main = require( './main.js' );
var factory = require( './factory.js' );


// MAIN //

setReadOnly( main, 'factory', factory );


// EXPORTS //

module.exports = main;
