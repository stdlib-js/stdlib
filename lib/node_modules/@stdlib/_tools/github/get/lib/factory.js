/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isFunction = require( '@stdlib/assert/is-function' );
var format = require( '@stdlib/string/format' );
var copy = require( '@stdlib/utils/copy' );
var validate = require( './validate.js' );
var defaults = require( './defaults.json' );
var resolve = require( './resolve.js' );


// VARIABLES //

var DEFAULT_HTTP_PORT = 80;
var DEFAULT_HTTPS_PORT = 443;


// MAIN //

/**
* Returns a function for fetching resources from a GitHub API endpoint.
*
* @param {Options} options - function options
* @param {string} [options.protocol='https'] - request protocol
* @param {string} [options.hostname='api.github.com'] - endpoint hostname
* @param {NonNegativeInteger} [options.port] - endpoint port
* @param {string} [options.pathname='/'] - resource pathname
* @param {PositiveInteger} [options.page=1] - resource page
* @param {PositiveInteger} [options.last_page=1] - last resource page
* @param {PositiveInteger} [options.per_page=100] - page size
* @param {string} [options.query=""] - params portion of a query string
* @param {string} [options.token] - GitHub access token
* @param {string} [options.accept='application/vnd.github.moondragon+json'] - media type
* @param {string} [options.useragent] - user agent string
* @param {Callback} clbk - callback to invoke upon query completion
* @throws {TypeError} options argument must be an object
* @throws {(TypeError|Error)} must provide valid options
* @throws {TypeError} last argument must be a function
* @returns {Function} function for getting resources
*
* @example
* function onResponse( error, data, info ) {
*     // Check for rate limit info...
*     if ( info ) {
*         console.error( 'Limit: %d', info.limit );
*         console.error( 'Remaining: %d', info.remaining );
*         console.error( 'Reset: %s', (new Date( info.reset*1000 )).toISOString() );
*     }
*     if ( error ) {
*         if ( error instanceof Error ) {
*             throw error;
*         }
*         console.error( error.message );
*     } else {
*         console.log( JSON.stringify( data ) );
*     }
* }
*
* var options = {
*     'pathname': '/user/repos',
*     'page': 1,
*     'per_page': 100
* };
*
* var getRepos = factory( options, onReponse );
*
* // Make repeated requests:
* getRepos();
* getRepos();
*/
function factory( options, clbk ) {
	var opts;
	var err;
	opts = copy( defaults );
	err = validate( opts, options );
	if ( err ) {
		throw err;
	}
	if ( opts.port === null ) {
		if ( opts.protocol === 'https' ) {
			opts.port = DEFAULT_HTTPS_PORT;
		} else {
			opts.port = DEFAULT_HTTP_PORT;
		}
	}
	if ( !isFunction( clbk ) ) {
		throw new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', clbk ) );
	}
	return get;

	/**
	* Resolves endpoint resources.
	*
	* @private
	*/
	function get() {
		resolve( opts, done );

		/**
		* Callback invoked after resolving resources.
		*
		* @private
		* @param {(Error|null)} error - error object
		* @param {(ObjectArray|null)} data - query data
		* @param {(Object|null)} info - response info
		* @returns {void}
		*/
		function done( error, data, info ) {
			error = error || null;
			data = data || null;
			info = info || null;
			clbk( error, data, info );
		}
	}
}


// EXPORTS //

module.exports = factory;
