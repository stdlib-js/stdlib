/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var noop = require( '@stdlib/utils/noop' );
var get = require( './../lib/main.js' );


// FIXTURES //

var getOpts = require( './fixtures/opts.js' );
var data = require( './fixtures/results.json' );
var info = require( './fixtures/info.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof get, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if provided an invalid `options` argument', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			get( value, noop );
		};
	}
});

tape( 'the function throws an error if provided an invalid option', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var opts = {
				'port': value
			};
			get( opts, noop );
		};
	}
});

tape( 'the function throws if provided a callback argument which is not a function (options)', function test( t ) {
	var values;
	var opts;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{}
	];

	opts = getOpts();
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided ' + values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			get( opts, value );
		};
	}
});

tape( 'the function returns an error to a provided callback if an error is encountered when requesting resources', function test( t ) {
	var opts;
	var get;

	get = proxyquire( './../lib/main.js', {
		'./factory.js': factory
	});

	opts = getOpts();
	get( opts, done );

	function factory( opts, clbk ) {
		return get;

		function get() {
			setTimeout( onTimeout, 0 );
			function onTimeout() {
				clbk( new Error( 'beep' ), null, info );
			}
		}
	}

	function done( error ) {
		t.equal( error instanceof Error, true, 'error instance' );
		t.equal( error.message, 'beep', 'returns expected value' );
		t.end();
	}
});

tape( 'the function returns response data to a provided callback', function test( t ) {
	var expected;
	var opts;
	var get;

	get = proxyquire( './../lib/main.js', {
		'./factory.js': factory
	});

	expected = data;

	opts = getOpts();
	get( opts, done );

	function factory( opts, clbk ) {
		return get;

		function get() {
			setTimeout( onTimeout, 0 );
			function onTimeout() {
				clbk( null, data, info );
			}
		}
	}

	function done( error, data ) {
		if ( error ) {
			t.fail( error.message );
		}
		t.deepEqual( data, expected, 'returns expected value' );
		t.end();
	}
});

tape( 'the function returns rate limit info to a provided callback', function test( t ) {
	var expected;
	var opts;
	var get;

	get = proxyquire( './../lib/main.js', {
		'./factory.js': factory
	});

	expected = info;

	opts = getOpts();
	get( opts, done );

	function factory( opts, clbk ) {
		return get;

		function get() {
			setTimeout( onTimeout, 0 );
			function onTimeout() {
				clbk( null, data, info );
			}
		}
	}

	function done( error, data, info ) {
		if ( error ) {
			t.fail( error.message );
		}
		t.deepEqual( info, expected, 'returns expected value' );
		t.end();
	}
});

tape( 'the function does not require options', function test( t ) {
	var expected;
	var get;

	get = proxyquire( './../lib/main.js', {
		'./factory.js': factory
	});

	expected = data;

	get( done );

	function factory( opts, clbk ) {
		t.deepEqual( opts, {}, 'empty object' );
		return get;

		function get() {
			setTimeout( onTimeout, 0 );
			function onTimeout() {
				clbk( null, data, info );
			}
		}
	}

	function done( error, data ) {
		if ( error ) {
			t.fail( error.message );
		}
		t.deepEqual( data, expected, 'returns expected value' );
		t.end();
	}
});
