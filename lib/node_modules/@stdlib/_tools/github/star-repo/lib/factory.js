/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isFunction = require( '@stdlib/assert/is-function' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var format = require( '@stdlib/string/format' );
var copy = require( '@stdlib/utils/copy' );
var validate = require( './validate.js' );
var defaults = require( './defaults.json' );
var query = require( './query.js' );


// VARIABLES //

var DEFAULT_HTTP_PORT = 80;
var DEFAULT_HTTPS_PORT = 443;


// MAIN //

/**
* Returns a function for starring a repository.
*
* @param {Object} options - function options
* @param {string} options.token - GitHub access token
* @param {string} [options.useragent] - user agent string
* @param {Function} clbk - callback to invoke upon query completion
* @throws {TypeError} callback argument must be a function
* @returns {Function} function for starring a repository
*/
function factory( options, clbk ) {
	var opts;
	var err;
	opts = copy( defaults );
	err = validate( opts, options );
	if ( err ) {
		throw err;
	}
	if ( opts.port === null ) {
		if ( opts.protocol === 'https' ) {
			opts.port = DEFAULT_HTTPS_PORT;
		} else {
			opts.port = DEFAULT_HTTP_PORT;
		}
	}
	if ( !isFunction( clbk ) ) {
		throw new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', clbk ) );
	}
	return star;

	/**
	* Stars a repository.
	*
	* @private
	* @param {string} slug - repository slug
	* @throws {TypeError} repository slug must be a string
	* @throws {Error} repository slug must consist of an `owner` and a `repository`
	* @returns {void}
	*/
	function star( slug ) {
		if ( !isString( slug ) ) {
			throw new TypeError( format( 'invalid argument. Repository slug must be a string. Value: `%s`.', slug ) );
		}
		if ( slug.split( '/' ).length !== 2 ) {
			throw new Error( format( 'invalid argument. Repository slug must consist of an owner and a repository (e.g., "stdlib-js/utils"). Value: `%s`.', slug ) );
		}
		query( slug, opts, done );
		/**
		* Callback invoked after receiving an API response.
		*
		* @private
		* @param {(Error|null)} error - error object
		* @param {Object} info - response info
		* @returns {void}
		*/
		function done( error, info ) {
			error = error || null;
			info = info || null;
			clbk( error, info );
		}
	}
}


// EXPORTS //

module.exports = factory;
