/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var join = require( 'path' ).join;
var tape = require( 'tape' );
var remark = require( 'remark' );
var readSync = require( 'to-vfile' ).readSync; // eslint-disable-line node/no-sync
var IS_BROWSER = require( '@stdlib/assert/is-browser' );
var noop = require( '@stdlib/utils/noop' );
var run = require( './../lib' );


// VARIABLES //

var opts = {
	'skip': IS_BROWSER
};


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof run, 'function', 'main export is a function' );
	t.end();
});

tape( 'the plugin throws an error if provided an `options` argument which is not an object', opts, function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			remark().use( run, value ).process( '# Beep\n', noop );
		};
	}
});

tape( 'the plugin throws an error if provided an invalid option', opts, function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var opts = {
				'cwd': value
			};
			remark().use( run, opts ).process( '# Beep\n', noop );
		};
	}
});

tape( 'the plugin handles empty files', opts, function test( t ) {
	var fpath;
	var file;

	fpath = join( __dirname, 'fixtures', 'empty.md.txt' );
	file = readSync( fpath, 'utf8' );

	remark().use( run ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'does not error' );
		}
		t.end();
	}
});

tape( 'the plugin handles empty files (options)', opts, function test( t ) {
	var fpath;
	var file;

	fpath = join( __dirname, 'fixtures', 'empty.md.txt' );
	file = readSync( fpath, 'utf8' );

	remark().use( run, {} ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'does not error' );
		}
		t.end();
	}
});

tape( 'the plugin handles empty strings', opts, function test( t ) {
	remark().use( run ).process( '', done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'does not error' );
		}
		t.end();
	}
});

tape( 'the plugin handles empty strings (options)', opts, function test( t ) {
	remark().use( run, {} ).process( '', done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'does not error' );
		}
		t.end();
	}
});

tape( 'the plugin handles Markdown files without either a "usage" or "examples" section', opts, function test( t ) {
	var fpath;
	var file;

	fpath = join( __dirname, 'fixtures', 'no_usage.md.txt' );
	file = readSync( fpath, 'utf8' );

	remark().use( run ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'does not error' );
		}
		t.end();
	}
});

tape( 'the plugin handles Markdown files without an "examples" section', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'no_examples.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'does not error' );
		}
		t.end();
	}
});

tape( 'the plugin handles Markdown strings without either a "usage" or "examples" section', opts, function test( t ) {
	remark().use( run ).process( '# Beep\n\n## Boop\n', done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'does not error' );
		}
		t.end();
	}
});

tape( 'the plugin runs JavaScript examples (synchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'sync.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin runs JavaScript examples (synchronous; js code fence)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'sync_js.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin runs JavaScript examples (synchronous; cwd)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'sync.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'cwd': __dirname,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin runs JavaScript examples (synchronous; string)', opts, function test( t ) {
	var opts;
	var str;

	str = [
		'<section class="examples">',
		'',
		'## Examples',
		'',
		'```javascript',
		'x = 3.14;',
		'```',
		'',
		'</section>',
		'',
		'<!-- /.examples -->'
	];
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( str.join( '\n' ), done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin runs JavaScript examples (synchronous; string; cwd)', opts, function test( t ) {
	var opts;
	var str;

	str = [
		'<section class="examples">',
		'',
		'## Examples',
		'',
		'```javascript',
		'x = 3.14;',
		'```',
		'',
		'</section>',
		'',
		'<!-- /.examples -->'
	];
	opts = {
		'cwd': __dirname,
		'verbose': false
	};
	remark().use( run, opts ).process( str.join( '\n' ), done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin runs JavaScript examples (asynchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'async.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin runs JavaScript examples (asynchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'async_usage.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin runs JavaScript examples (asynchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'async_examples.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin runs JavaScript examples (asynchronous; cwd)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'async.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'cwd': __dirname,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin runs JavaScript examples (asynchronous; string)', opts, function test( t ) {
	var opts;
	var str;

	str = [
		'<section class="examples">',
		'',
		'## Examples',
		'',
		'```javascript',
		'setTimeout( onTimeout, 0 );',
		'',
		'function onTimeout() {',
		'\tvar x = 3.14;',
		'}',
		'```',
		'',
		'</section>',
		'',
		'<!-- /.examples -->'
	];
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( str.join( '\n' ), done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin runs JavaScript examples (asynchronous; string; cwd)', opts, function test( t ) {
	var opts;
	var str;

	str = [
		'<section class="examples">',
		'',
		'## Examples',
		'',
		'```javascript',
		'setTimeout( onTimeout, 0 );',
		'',
		'function onTimeout() {',
		'\tvar x = 3.14;',
		'}',
		'```',
		'',
		'</section>',
		'',
		'<!-- /.examples -->'
	];
	opts = {
		'cwd': __dirname,
		'verbose': false
	};
	remark().use( run, opts ).process( str.join( '\n' ), done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports JavaScript examples which print to `stdout` (synchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'sync_stdout.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports JavaScript examples which print to `stdout` (synchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'sync_stdout_usage.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports JavaScript examples which print to `stdout` (synchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'sync_stdout_examples.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports JavaScript examples which print to `stdout` (asynchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'async_stdout.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports JavaScript examples which print to `stdout` (asynchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'async_stdout_usage.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports JavaScript examples which print to `stdout` (asynchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'async_stdout_examples.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports quieting JavaScript examples which print to `stdout` (synchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'sync_stdout.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'quiet': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports quieting JavaScript examples which print to `stdout` (synchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'sync_stdout_usage.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'quiet': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports quieting JavaScript examples which print to `stdout` (synchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'sync_stdout_examples.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'quiet': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports quieting JavaScript examples which print to `stdout` (synchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'sync_stdout.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'silent': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports quieting JavaScript examples which print to `stdout` (synchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'sync_stdout_usage.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'silent': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports quieting JavaScript examples which print to `stdout` (synchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'sync_stdout_examples.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'silent': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports quieting JavaScript examples which print to `stdout` (synchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'sync_stdout.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'quiet': true,
		'silent': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports quieting JavaScript examples which print to `stdout` (synchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'sync_stdout_usage.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'quiet': true,
		'silent': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports quieting JavaScript examples which print to `stdout` (synchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'sync_stdout_examples.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'quiet': true,
		'silent': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports quieting JavaScript examples which print to `stdout` (asynchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'async_stdout.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'quiet': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports quieting JavaScript examples which print to `stdout` (asynchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'async_stdout_usage.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'quiet': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports quieting JavaScript examples which print to `stdout` (asynchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'async_stdout_examples.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'quiet': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports quieting JavaScript examples which print to `stdout` (asynchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'async_stdout.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'silent': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports quieting JavaScript examples which print to `stdout` (asynchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'async_stdout_usage.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'silent': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports quieting JavaScript examples which print to `stdout` (asynchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'async_stdout_examples.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'silent': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports quieting JavaScript examples which print to `stdout` (asynchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'async_stdout.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'quiet': true,
		'silent': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports quieting JavaScript examples which print to `stdout` (asynchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'async_stdout_usage.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'quiet': true,
		'silent': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports quieting JavaScript examples which print to `stdout` (asynchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'async_stdout_examples.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'quiet': true,
		'silent': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports JavaScript examples which print to `stderr` (synchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'sync_stderr.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports JavaScript examples which print to `stderr` (synchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'sync_stderr_usage.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports JavaScript examples which print to `stderr` (synchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'sync_stderr_examples.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports JavaScript examples which print to `stderr` (asynchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'async_stderr.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports JavaScript examples which print to `stderr` (asynchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'async_stderr_usage.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports JavaScript examples which print to `stderr` (asynchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'async_stderr_examples.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports JavaScript examples which print to `stderr` (synchronous; quiet)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'sync_stdout_stderr.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'quiet': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports JavaScript examples which print to `stderr` (synchronous; quiet)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'sync_stdout_stderr_usage.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'quiet': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports JavaScript examples which print to `stderr` (synchronous; quiet)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'sync_stdout_stderr_examples.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'quiet': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports JavaScript examples which print to `stderr` (asynchronous; quiet)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'async_stdout_stderr.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'quiet': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports JavaScript examples which print to `stderr` (asynchronous; quiet)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'async_stdout_stderr_usage.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'quiet': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports JavaScript examples which print to `stderr` (asynchronous; quiet)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'async_stdout_stderr_examples.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'quiet': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports silencing JavaScript examples which print to `stderr` (synchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'sync_stderr.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'silent': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports silencing JavaScript examples which print to `stderr` (synchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'sync_stderr_usage.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'silent': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports silencing JavaScript examples which print to `stderr` (synchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'sync_stderr_examples.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'silent': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports silencing JavaScript examples which print to `stderr` (asynchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'async_stderr.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'silent': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports silencing JavaScript examples which print to `stderr` (asynchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'async_stderr_usage.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'silent': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports silencing JavaScript examples which print to `stderr` (asynchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'async_stderr_examples.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'silent': true,
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'if an error is encountered during example execution, the plugin returns an error (synchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'sync_error_usage.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.pass( error.message );
		} else {
			t.fail( 'should return an error' );
		}
		t.end();
	}
});

tape( 'if an error is encountered during example execution, the plugin returns an error (synchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'sync_error_examples.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.pass( error.message );
		} else {
			t.fail( 'should return an error' );
		}
		t.end();
	}
});

tape( 'if an error is encountered during example execution, the plugin returns an error (synchronous; string)', opts, function test( t ) {
	var opts;
	var str;

	str = [
		'<section class="examples">',
		'',
		'## Examples',
		'',
		'```javascript',
		'throw new Error( "beep" );',
		'```',
		'',
		'</section>',
		'',
		'<!-- /.examples -->'
	];
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( str.join( '\n' ), done );

	function done( error ) {
		if ( error ) {
			t.pass( error.message );
		} else {
			t.fail( 'should return an error' );
		}
		t.end();
	}
});

tape( 'if an error is encountered during example execution, the plugin returns an error (asynchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'async_error_usage.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.pass( error.message );
		} else {
			t.fail( 'should return an error' );
		}
		t.end();
	}
});

tape( 'if an error is encountered during example execution, the plugin returns an error (asynchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'async_error_examples.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.pass( error.message );
		} else {
			t.fail( 'should return an error' );
		}
		t.end();
	}
});

tape( 'if an error is encountered during example execution, the plugin returns an error (asynchronous; string)', opts, function test( t ) {
	var opts;
	var str;

	str = [
		'<section class="examples">',
		'',
		'## Examples',
		'',
		'```javascript',
		'setTimeout( onTimeout, 0 );',
		'',
		'function onTimeout() {',
		'\tthrow new Error( "beep" );',
		'}',
		'```',
		'',
		'</section>',
		'',
		'<!-- /.examples -->'
	];
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( str.join( '\n' ), done );

	function done( error ) {
		if ( error ) {
			t.pass( error.message );
		} else {
			t.fail( 'should return an error' );
		}
		t.end();
	}
});

tape( 'the plugin supports configuration comments for disabling code block execution', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'disabled.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'does not return an error' );
		}
		t.end();
	}
});

tape( 'the plugin supports configuration comments for disabling code block execution (string)', opts, function test( t ) {
	var opts;
	var str;

	str = [
		'<section class="examples">',
		'',
		'## Examples',
		'',
		'<!-- run-disable -->',
		'',
		'```javascript',
		'console.log( "BEEP"! );',
		'```',
		'',
		'</section>',
		'',
		'<!-- /.examples -->'
	];
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( str.join( '\n' ), done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'does not return an error' );
		}
		t.end();
	}
});

tape( 'the plugin supports a "verbosity" option for printing plugin meta information', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'sync.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': true
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports a "timeout" option in order to terminate long running code blocks', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'timeout.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false,
		'timeout': 1000 // 1 second
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.pass( error.message );
		} else {
			t.fail( 'should return an error' );
		}
		t.end();
	}
});

tape( 'the plugin supports configuration comments for specifying code block execution settings (unrecognized/unsupported comments)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'config_comment_unrecognized_settings.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'should not return an error' );
		}
		t.end();
	}
});

tape( 'the plugin supports configuration comments for specifying code block execution settings (unrecognized/unsupported comments; multiple comments)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'config_multiple_comments_unrecognized_settings.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'should not return an error' );
		}
		t.end();
	}
});

tape( 'if an error is encountered when parsing a code block configuration, the plugin returns an error (invalid JSON)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'config_comment_invalid_json.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.pass( error.message );
		} else {
			t.fail( 'should return an error' );
		}
		t.end();
	}
});

tape( 'if an error is encountered when parsing a code block configuration, the plugin returns an error (missing value)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'config_comment_invalid_missing_value.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.pass( error.message );
		} else {
			t.fail( 'should return an error' );
		}
		t.end();
	}
});

tape( 'if an error is encountered when parsing a code block configuration, the plugin returns an error (invalid formatting)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'config_comment_invalid_formatting.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.pass( error.message );
		} else {
			t.fail( 'should return an error' );
		}
		t.end();
	}
});

tape( 'if an error is encountered when parsing a code block configuration, the plugin returns an error (invalid setting)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'config_comment_invalid_setting.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.pass( error.message );
		} else {
			t.fail( 'should return an error' );
		}
		t.end();
	}
});

tape( 'the plugin supports a code block configuration `timeout` option in order to terminate a long running code block', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'config_comment_timeout.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.pass( error.message );
		} else {
			t.fail( 'should return an error' );
		}
		t.end();
	}
});

tape( 'the plugin supports a code block configuration `maxBuffer` option in order to specify the maximum buffer size for code block\'s `stdout` and `stderr`', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'config_comment_maxbuffer.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports a code block configuration `cwd` option in order to specify the current working directory in which to execute a code block', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'config_comment_cwd.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin supports a code block configuration `throws` option in order to indicate whether a code block intentionally throws', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'config_comment_throws.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin returns an error if a code block fails to intentionally throw an exception', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'config_comment_throws_fail.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.pass( error.message );
		} else {
			t.fail( 'should return an error' );
		}
		t.end();
	}
});

tape( 'the plugin supports configuring a code block in order to indicate whether a code block intentionally throws asynchronously', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'config_comment_throws_async.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.pass( 'runs examples' );
		}
		t.end();
	}
});

tape( 'the plugin returns an error if a code block fails to intentionally throw an exception (asynchronous)', opts, function test( t ) {
	var fpath;
	var file;
	var opts;

	fpath = join( __dirname, 'fixtures', 'config_comment_throws_async_fail.md.txt' );
	file = readSync( fpath, 'utf8' );
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( file, done );

	function done( error ) {
		if ( error ) {
			t.pass( error.message );
		} else {
			t.fail( 'should return an error' );
		}
		t.end();
	}
});

tape( 'the plugin returns an error if a code block fails to intentionally throw an exception (asynchronous; string)', opts, function test( t ) {
	var opts;
	var str;

	str = [
		'<section class="examples">',
		'',
		'## Examples',
		'',
		'<!-- run throws: true -->',
		'',
		'```javascript',
		'setTimeout( onTimeout, 0 );',
		'',
		'function onTimeout() {',
		'\tvar x = 3.14;',
		'}',
		'```',
		'',
		'</section>',
		'',
		'<!-- /.examples -->'
	];
	opts = {
		'verbose': false
	};
	remark().use( run, opts ).process( str.join( '\n' ), done );

	function done( error ) {
		if ( error ) {
			t.pass( error.message );
		} else {
			t.fail( 'should return an error' );
		}
		t.end();
	}
});
