/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var exec = require( 'child_process' ).execSync; // eslint-disable-line node/no-sync
var resolve = require( 'path' ).resolve;
var join = require( 'path' ).join;
var logger = require( 'debug' );
var visit = require( 'unist-util-visit' );
var PATH_SEP = require( '@stdlib/constants/path/sep' );
var trim = require( '@stdlib/string/trim' );
var format = require( '@stdlib/string/format' );
var jsdelivr = require( '@stdlib/_tools/utils/jsdelivr-url' );
var git = require( './git.js' );


// VARIABLES //

var debug = logger( 'remark-img-equations-src-urls:transformer' );
var DIV_EQN = /<div class="equation"/;
var IMG_SOURCE = /(<img src=")([^"]*)(")/;
var LABEL = /data-equation="eq:([^"]*)">/;
var GIT = git();


// MAIN //

/**
* Returns a transformer function.
*
* @private
* @param {Options} opts - transformer options
* @param {string} opts.dir- resource directory
* @param {string} opts.prefix - filename prefix
* @returns {Function} transformer function
*/
function factory( opts ) {
	return transformer;

	/**
	* Transforms a Markdown abstract syntax tree (AST).
	*
	* @private
	* @param {Node} tree - root AST node
	* @param {File} file - virtual file
	*/
	function transformer( tree, file ) {
		debug( 'Processing virtual file...' );
		visit( tree, 'html', visitor );

		/**
		* Callback invoked upon finding a matching node. Inserts source URLs for image equations in Markdown equation elements.
		*
		* @private
		* @param {Node} node - reference node
		* @throws {Error} equation elements must have valid labels
		*/
		function visitor( node ) {
			var fpath;
			var rpath;
			var label;
			var slug;
			var hash;
			var url;
			var cmd;
			var out;

			if ( DIV_EQN.test( node.value ) === true ) {
				label = LABEL.exec( node.value );
				if ( label === null ) {
					debug( 'Invalid node: %s', node.value );
					throw new Error( format( 'invalid node. Equation element must have a valid label. Node: `%s`.', node.value ) );
				}
				label = label[ 1 ];
				debug( 'Equation label: %s', label );

				debug( 'File directory: %s', file.dirname );

				// Get absolute file path of current SVG (note: we assume that the `label` attribute matches the eqn filename):
				fpath = join( opts.dir, opts.prefix+label+'.svg' );
				debug( 'SVG filename: %s', fpath );

				fpath = resolve( file.dirname, fpath );
				debug( 'Absolute filepath: %s', fpath );

				// Get file path relative to Git repository:
				rpath = fpath.replace( GIT.dir + PATH_SEP, '' );
				debug( 'Relative filepath: %s', rpath );

				// Get the most recent Git hash affecting the file:
				cmd = 'git rev-list -1 '+GIT.branch+' '+fpath;
				out = exec( cmd, {
					'cwd': GIT.dir
				});
				out = trim( out.toString() );
				hash = out.match( /(.+)/ )[ 1 ];
				debug( 'Hash: %s', hash );

				// Generate the file path slug:
				slug = GIT.slug+'/'+hash;
				debug( 'Hash slug: %s', slug );

				// Retrieve source URL:
				url = jsdelivr({
					'slug': slug,
					'file': rpath
				});
				debug( 'Source URL: %s', url );

				// Replace `src` attribute in `<img>` tag:
				node.value = node.value.replace( IMG_SOURCE, '$1'+url+'$3' );
			}
		}
	}
}


// EXPORTS //

module.exports = factory;
