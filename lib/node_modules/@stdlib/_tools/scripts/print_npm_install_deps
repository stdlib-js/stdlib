#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/*
* Script to print dependencies for node_modules installation.
*/
'use strict';

// MODULES //

var join = require( 'path' ).join;
var rootDir = require( '@stdlib/_tools/utils/root-dir' );
var objectKeys = require( '@stdlib/utils/keys' );
var readJSON = require( '@stdlib/fs/read-json' ).sync;


// VARIABLES //

var ROOT_DIR = rootDir();
var RE_STDLIB = /^@stdlib\//;


// MAIN //

/**
* Main execution sequence.
*
* @private
* @throws {Error} unable to read project meta data
*/
function main() {
	var deps;
	var keys;
	var tmp;
	var pkg;
	var k;
	var i;

	// Load project meta data:
	pkg = readJSON( join( ROOT_DIR, 'package.json' ) );
	if ( pkg instanceof Error ) {
		throw pkg;
	}
	// Initialize an array for holding output:
	tmp = [];

	// Get the list of dependencies:
	deps = pkg.dependencies;

	// Extract external dependencies and their associated versions...
	keys = objectKeys( deps );
	for ( i = 0; i < keys.length; i++ ) {
		k = keys[ i ];
		if ( RE_STDLIB.test( k ) === false ) {
			tmp.push( k + '@"' + deps[ k ] + '"' );
		}
	}
	// Get the list of development dependencies:
	deps = pkg.devDependencies;

	// Extract external development dependencies and their associated versions...
	keys = objectKeys( deps );
	for ( i = 0; i < keys.length; i++ ) {
		k = keys[ i ];
		if ( RE_STDLIB.test( k ) === false ) {
			tmp.push( k + '@"' + deps[ k ] + '"' );
		}
	}
	// Get the list of optional dependencies:
	deps = pkg.optionalDependencies;

	// Extract external optional dependencies and their associated versions...
	keys = objectKeys( deps );
	for ( i = 0; i < keys.length; i++ ) {
		k = keys[ i ];
		if ( RE_STDLIB.test( k ) === false ) {
			tmp.push( k + '@"' + deps[ k ] + '"' );
		}
	}
	// Print the list of dependencies for installation:
	console.log( tmp.join( ' ' ) ); // eslint-disable-line no-console
}

main();
