#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable node/no-sync, node/shebang, no-console */

'use strict';

// MAIN //

var path = require( 'path' );
var fs = require( 'fs' );
var contains = require( '@stdlib/assert/contains' );
var stdin = require( '@stdlib/process/read-stdin' );
var stdinStream = require( '@stdlib/streams/node/stdin' );
var RE_EOL = require( '@stdlib/regexp/eol' ).REGEXP;
var removePunctuation = require( '@stdlib/string/remove-punctuation' );
var readJSON = require( '@stdlib/fs/read-json' ).sync;
var replace = require( '@stdlib/string/replace' );
var currentYear = require( '@stdlib/time/current-year' );
var rootDir = require( '@stdlib/_tools/utils/root-dir' );


// VARIABLES //

var IMPORT_STATEMENT = 'import <name> = require( \'<path>\' );';
var RE_TS_EXPORT = /export = ([^;]+);/;
var RE_EXAMPLE = /@example[\s\S]*?(?=@example|\*\/)/g;
var RE_NAMESPACE = /@namespace ([a-z.0-9]+)/i;
var RE_COPYRIGHT_YEAR = /Copyright \(c\) (\d{4}) The Stdlib Authors\./;


// FUNCTIONS //

/**
* Returns contents of a `test.ts` file for the chosen namespace.
*
* @private
* @returns {string} `test.ts` contents
*/
function createTestFile() {
	return [
		'/*',
		'* @license Apache-2.0',
		'*',
		'* Copyright (c) {{year}} The Stdlib Authors.',
		'*',
		'* Licensed under the Apache License, Version 2.0 (the "License");',
		'* you may not use this file except in compliance with the License.',
		'* You may obtain a copy of the License at',
		'*',
		'*    http://www.apache.org/licenses/LICENSE-2.0',
		'*',
		'* Unless required by applicable law or agreed to in writing, software',
		'* distributed under the License is distributed on an "AS IS" BASIS,',
		'* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.',
		'* See the License for the specific language governing permissions and',
		'* limitations under the License.',
		'*/',
		'',
		'/* tslint:disable:no-unused-expression */',
		'',
		'import ns = require( \'./index\' );',
		'',
		'',
		'// TESTS //',
		'',
		'// The exported value is the expected interface...',
		'{',
		'	ns; // $ExpectType Namespace',
		'}',
		''
	].join( '\n' );
}

/**
* Returns contents of a `index.d.ts` definition file for the chosen namespace.
*
* @private
* @param {string} ns - namespace name
* @param {Array<string>} imports - import statements for namespace packages
* @param {Array<string>} properties - interface property documentation for namespace contents
* @param {string} description - namespace description
* @returns {string} `index.d.ts` contents
*/
function createDefinitionFile( ns, imports, properties, description ) {
	return [
		'/*',
		'* @license Apache-2.0',
		'*',
		'* Copyright (c) {{year}} The Stdlib Authors.',
		'*',
		'* Licensed under the Apache License, Version 2.0 (the "License");',
		'* you may not use this file except in compliance with the License.',
		'* You may obtain a copy of the License at',
		'*',
		'*    http://www.apache.org/licenses/LICENSE-2.0',
		'*',
		'* Unless required by applicable law or agreed to in writing, software',
		'* distributed under the License is distributed on an "AS IS" BASIS,',
		'* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.',
		'* See the License for the specific language governing permissions and',
		'* limitations under the License.',
		'*/',
		'',
		'// TypeScript Version: 2.0',
		'',
		'/* tslint:disable:max-line-length */',
		'/* tslint:disable:max-file-line-count */',
		'',
		imports.join( '\n' ),
		'',
		'/**',
		'* Interface describing the `'+ns+'` namespace.',
		'*/',
		'interface Namespace {',
		properties.join( '\n' ),
		'}',
		'',
		'/**',
		'* '+description,
		'*/',
		'declare var ns: Namespace;',
		'',
		'',
		'// EXPORTS //',
		'',
		'export = ns;',
		''
	].join( '\n' );
}

/**
* Creates Typescript definition and test files for the chosen namespace.
*
* @private
* @param {string} fullPath - full namespace name
* @returns {void}
*/
function create( fullPath ) {
	var RE_DOC_MAIN_DECLARE;
	var copyrightYear;
	var nsIdentifier;
	var defFilePath;
	var description;
	var importStmts;
	var entryPoint;
	var mainExport;
	var properties;
	var indexFile;
	var tsDefPath;
	var testFile;
	var typesDir;
	var defFile;
	var pkgPath;
	var match;
	var tsDef;
	var tsDoc;
	var name;
	var last;
	var prop;
	var stmt;
	var str;
	var ns;
	var RE;

	importStmts = [];
	properties = [];

	if ( fullPath === '@stdlib/stdlib' ) {
		// Special case of creating type definitions for the main `@stdlib/stdlib` package:
		ns = 'stdlib';
		entryPoint = path.join( rootDir(), 'lib', 'main.js' );
	}
	else {
		ns = path.basename( fullPath );
		entryPoint = require.resolve( fullPath );
	}
	fullPath = path.join( entryPoint, '..', '..' );
	typesDir = path.join( fullPath, 'docs', 'types' );

	if ( !fs.existsSync( typesDir ) ) {
		return;
	}
	defFilePath = path.join( typesDir, 'index.d.ts' );

	if ( fs.existsSync( defFilePath ) ) {
		// Use existing copyright year from definition file if available...
		defFile = fs.readFileSync( defFilePath, 'utf8' );
		match = defFile.match( RE_COPYRIGHT_YEAR );
		copyrightYear = ( match ) ? match[ 1 ] : currentYear();
	} else {
		// Use current year as copyright year:
		copyrightYear = currentYear();
	}

	// Extract the copyright year from the existing definition file...
	RE_DOC_MAIN_DECLARE = /@declare\s+(\w+)\s+\((\w+)\)/;

	indexFile = fs.readFileSync( entryPoint, 'utf-8' );
	console.log( 'Loading '+entryPoint+'...' );
	if ( !RE_NAMESPACE.test( indexFile ) ) {
		return;
	}
	nsIdentifier = RE_NAMESPACE.exec( indexFile )[ 1 ];
	nsIdentifier = removePunctuation( nsIdentifier );
	RE = new RegExp( 'setReadOnly\\( '+nsIdentifier+', \'([a-z0-9_]+)\', require\\( \'([^\']+)\' \\) \\)', 'ig' );
	match = RE.exec( indexFile );
	if ( !match ) {
		nsIdentifier = 'ns';
		RE = new RegExp( 'setReadOnly\\( '+nsIdentifier+', \'([a-z0-9_]+)\', require\\( \'([^\']+)\' \\) \\)', 'ig' );
		match = RE.exec( indexFile );
	}
	while ( match !== null) {
		name = match[ 1 ];
		pkgPath = match[ 2 ];
		stmt = replace( IMPORT_STATEMENT, '<name>', name );
		stmt = replace( stmt, '<path>', pkgPath );
		importStmts.push( stmt );

		tsDefPath = replace( require.resolve( pkgPath ), 'lib/index.js', 'docs/types/index.d.ts' );
		if ( fs.existsSync( tsDefPath ) ) {
			tsDef = fs.readFileSync( tsDefPath, 'utf-8' );
			mainExport = tsDef.match( RE_TS_EXPORT );
			RE_DOC_MAIN_DECLARE = new RegExp( '(\\/\\*\\*\\n[\\s\\S]+?\\*\\/)\ndeclare (function|var|const) '+mainExport[ 1 ]+'([\\s\\S]*): ([\\s\\S]+?);' );
			last = tsDef.lastIndexOf( '/**' );
			tsDoc = tsDef.substring( last ).match( RE_DOC_MAIN_DECLARE );
			if ( !tsDoc ) {
				tsDoc = tsDef.match( /(\/\*\*\n[^/]+?\*\/)\ndeclare class/ );
			}
			prop = '\t'+name+': typeof '+name+';';
			if ( tsDoc && tsDoc[ 1 ] ) {
				str = tsDoc[ 1 ];
				str = replace( str, RE_EXAMPLE, onReplace );
				str = replace( str, '\n', '\n\t' );
				prop = '\t' + str + '\n' + prop;
			}
			else {
				tsDoc = tsDef.match( /(\/\*\*\n[\s\S]+?\*\/)\nexport =/ );
				if ( tsDoc && tsDoc[ 1 ] ) {
					str = tsDoc[ 1 ];
					str = replace( str, RE_EXAMPLE, onReplace );
					str = replace( str, '\n', '\n\t' );
					prop = '\t' + str + '\n' + prop;
				}
			}
			match = RE.exec( indexFile );
			if ( match ) {
				prop += '\n';
			}
			properties.push( prop );
		} else {
			match = RE.exec( indexFile );
		}
	}
	description = readJSON( path.join( fullPath, 'package.json' ) ).description;

	console.log( 'Writing definition file...' );
	defFile = createDefinitionFile( ns, importStmts, properties, description );
	defFile = replace( defFile, '{{year}}', String( copyrightYear ) );
	fs.writeFileSync( defFilePath, defFile );

	console.log( 'Writing test file...' );
	testFile = createTestFile( ns );
	testFile = replace( testFile, '{{year}}', String( copyrightYear ) );
	fs.writeFileSync( path.join( typesDir, 'test.ts' ), testFile );

	/**
	* Replaces variable names inside of example code to use exported namespace methods.
	*
	* @private
	* @param {string} match - example code
	* @returns {string} example code using namespace exports
	*/
	function onReplace( match ) {
		var RE;

		match = replace( match, mainExport[ 1 ], name );
		RE = new RegExp( '([^a-zA-Z@])'+name, 'g' );
		return replace( match, RE, '$1ns.'+name );
	}
}

/**
* Callback invoked upon reading from `stdin`.
*
* @private
* @param {(Error|null)} error - error object
* @param {Buffer} data - data
* @returns {void}
*/
function onRead( error, data ) {
	var lines;
	var i;
	if ( error ) {
		return console.error( error.message );
	}
	lines = data.toString().split( RE_EOL );
	for ( i = 0; i < lines.length; i++ ) {
		if ( lines[ i ] && !contains( lines[ i ], '_tools' ) ) {
			create( lines[ i ] );
		}
	}
}

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	// Check if we are receiving data from `stdin`...
	if ( !stdinStream.isTTY ) {
		return stdin( onRead );
	}
	create( process.argv[ 2 ] );
}

main();
