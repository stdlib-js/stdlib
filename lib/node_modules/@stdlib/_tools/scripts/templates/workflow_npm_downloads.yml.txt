#/
# @license Apache-2.0
#
# Copyright (c) 2022 The Stdlib Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#/

# Workflow name:
name: npm_downloads

# Workflow triggers:
on:
  # Run this workflow weekly:
  schedule:
    # cron: '<minutes> <hours> <day_of_month> <month> <day_of_week>'
    - cron: '{{cron}}'

  # Allow the workflow to be manually run:
  workflow_dispatch:

# Workflow jobs:
jobs:

  # Define a job for retrieving npm download counts...
  npm_downloads:

    # Define display name:
    name: 'Retrieve npm download counts'

    # Define the type of virtual host machine on which to run the job:
    runs-on: ubuntu-latest

    # Define the sequence of job steps...
    steps:
      # Checkout the repository:
      - name: 'Checkout repository'
        uses: actions/checkout@v3
        timeout-minutes: 10

      # Install Node.js:
      - name: 'Install Node.js'
        uses: actions/setup-node@v3
        with:
          node-version: 16
        timeout-minutes: 5

      # Resolve package name:
      - name: 'Resolve package name'
        id: package_name
        run: |
          name=`node -e 'console.log(require("./package.json").name)' | tr -d '\n'`
          echo "package_name=$name" >> $GITHUB_OUTPUT
        timeout-minutes: 5

      # Fetch download data:
      - name: 'Fetch data'
        id: download_data
        run: |
          url="https://api.npmjs.org/downloads/range/$(date --date='1 year ago' '+%Y-%m-%d'):$(date '+%Y-%m-%d')/${{ steps.package_name.outputs.package_name }}"
          echo "$url"
          data=$(curl "$url")
          mkdir ./tmp
          echo "$data" > ./tmp/npm_downloads.json
          echo "data=$data" >> $GITHUB_OUTPUT
        timeout-minutes: 5

      # Print summary of download data:
      - name: 'Print summary'
        run: |
          echo "| Date | Downloads  |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------------|" >> $GITHUB_STEP_SUMMARY
          cat ./tmp/npm_downloads.json | jq -r ".downloads | .[-14:] | to_entries | map(\"| \(.value.day) | \(.value.downloads) |\")  |.[]" >> $GITHUB_STEP_SUMMARY

      # Upload the download data:
      - name: 'Upload data'
        uses: actions/upload-artifact@v3
        with:
          # Define a name for the uploaded artifact (ensuring a unique name for each job):
          name: npm_downloads

          # Specify the path to the file to upload:
          path: ./tmp/npm_downloads.json

          # Specify the number of days to retain the artifact (default is 90 days):
          retention-days: 90
        timeout-minutes: 10
        if: success()

      # Send data to events server:
      - name: 'Post data'
        uses: distributhor/workflow-webhook@v3
        env:
          webhook_url: ${{ secrets.STDLIB_NPM_DOWNLOADS_URL }}
          webhook_secret: ${{ secrets.STDLIB_WEBHOOK_SECRET }}
          data: '{ "downloads": ${{ steps.download_data.outputs.data }} }'
        timeout-minutes: 5
        if: success()
