/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var Ajv = require( 'ajv' );
var isObject = require( '@stdlib/assert/is-plain-object' );
var schema = require( './../lib' );


// VARIABLES //

var ajv = new Ajv();
var validate = ajv.compile( schema() );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof schema, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns a JSON schema', function test( t ) {
	var json = schema();
	t.strictEqual( isObject( json ), true, 'returns an object' );
	t.end();
});

tape( 'the function returns `true` if provided a valid manifest JSON', function test( t ) {
	var bool;
	var pkg;

	pkg = require( './fixtures/good.json' );

	bool = validate( pkg );
	t.strictEqual( bool, true, 'returns true' );

	t.end();
});

tape( 'the function returns `false` if provided a manifest JSON missing a `confs` field', function test( t ) {
	var bool;
	var pkg;

	pkg = require( './fixtures/missing_confs.json' );

	bool = validate( pkg );
	t.strictEqual( bool, false, 'returns false' );

	t.end();
});

tape( 'the function returns `false` if provided a manifest JSON missing a `fields` field', function test( t ) {
	var bool;
	var pkg;

	pkg = require( './fixtures/missing_fields.json' );

	bool = validate( pkg );
	t.strictEqual( bool, false, 'returns false' );

	t.end();
});

tape( 'the function returns `false` if provided a manifest JSON missing an `options` field', function test( t ) {
	var bool;
	var pkg;

	pkg = require( './fixtures/missing_options.json' );

	bool = validate( pkg );
	t.strictEqual( bool, false, 'returns false' );

	t.end();
});

tape( 'the function returns `false` if provided a manifest JSON having an invalid `fields` field', function test( t ) {
	var bool;
	var pkg;

	pkg = require( './fixtures/bad_fields1.json' );

	bool = validate( pkg );
	t.strictEqual( bool, false, 'returns false' );

	t.end();
});

tape( 'the function returns `false` if provided a manifest JSON having an invalid `fields` field', function test( t ) {
	var bool;
	var pkg;

	pkg = require( './fixtures/bad_fields2.json' );

	bool = validate( pkg );
	t.strictEqual( bool, false, 'returns false' );

	t.end();
});

tape( 'the function returns `false` if provided a manifest JSON having an invalid `fields` field', function test( t ) {
	var bool;
	var pkg;

	pkg = require( './fixtures/bad_fields3.json' );

	bool = validate( pkg );
	t.strictEqual( bool, false, 'returns false' );

	t.end();
});

tape( 'the function returns `false` if provided a manifest JSON having an invalid `confs` field', function test( t ) {
	var bool;
	var pkg;

	pkg = require( './fixtures/bad_confs1.json' );

	bool = validate( pkg );
	t.strictEqual( bool, false, 'returns false' );

	t.end();
});

tape( 'the function returns `false` if provided a manifest JSON having an invalid `confs` field', function test( t ) {
	var bool;
	var pkg;

	pkg = require( './fixtures/bad_confs2.json' );

	bool = validate( pkg );
	t.strictEqual( bool, false, 'returns false' );

	t.end();
});

tape( 'the function returns `false` if provided a manifest JSON having an invalid `confs` field', function test( t ) {
	var bool;
	var pkg;

	pkg = require( './fixtures/bad_confs3.json' );

	bool = validate( pkg );
	t.strictEqual( bool, false, 'returns false' );

	t.end();
});

tape( 'the function returns `false` if provided a manifest JSON having an invalid `confs` field', function test( t ) {
	var bool;
	var pkg;

	pkg = require( './fixtures/bad_confs4.json' );

	bool = validate( pkg );
	t.strictEqual( bool, false, 'returns false' );

	t.end();
});
