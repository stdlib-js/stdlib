/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var noop = require( '@stdlib/utils/noop' );
var Symbol = require( '@stdlib/symbol/ctor' );
var Number = require( '@stdlib/number/ctor' );
var Object = require( '@stdlib/object/ctor' );
var Boolean = require( '@stdlib/boolean/ctor' );
var Float32Array = require( '@stdlib/array/float32' );
var Float64Array = require( '@stdlib/array/float64' );
var Complex64 = require( '@stdlib/complex/float32' );
var Complex128 = require( '@stdlib/complex/float64' );
var Complex64Array = require( '@stdlib/array/complex64' );
var Complex128Array = require( '@stdlib/array/complex128' );
var createAnnotationValue = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.strictEqual( typeof createAnnotationValue, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if provided an options argument which is not an object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		null,
		NaN,
		true,
		void 0,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws when provided a ' + ( typeof values[i] ) );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			createAnnotationValue( 123, value );
		};
	}
});

tape( 'the function throws an error if provided an invalid option', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		null,
		NaN,
		{},
		void 0,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws when provided a ' + ( typeof values[i] ) );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			createAnnotationValue( 123, {
				'decimal': value
			});
		};
	}
});

tape( 'the function creates a return annotation value for primitive values', function test( t ) {
	var expected;
	var opts;
	var val;

	val = 2.0;
	expected = '2';
	t.strictEqual( createAnnotationValue( val ), expected, 'returns expected value' );

	opts = {
		'decimal': true
	};
	expected = '2.0';
	t.strictEqual( createAnnotationValue( val, opts ), expected, 'returns expected value' );

	val = 1/3;
	expected = '~0.333';
	t.strictEqual( createAnnotationValue( val ), expected, 'returns expected value' );

	opts = {
		'precision': 4
	};
	expected = '~0.3333';
	t.strictEqual( createAnnotationValue( val, opts ), expected, 'returns expected value' );

	val = 1/0;
	expected = 'Infinity';
	t.strictEqual( createAnnotationValue( val ), expected, 'returns expected value' );

	val = -1/0;
	expected = '-Infinity';
	t.strictEqual( createAnnotationValue( val ), expected, 'returns expected value' );

	val = NaN;
	expected = 'NaN';
	t.strictEqual( createAnnotationValue( val ), expected, 'returns expected value' );

	val = false;
	expected = 'false';
	t.strictEqual( createAnnotationValue( val ), expected, 'returns expected value' );

	val = 'Hello World!';
	expected = '\'Hello World!\'';
	t.strictEqual( createAnnotationValue( val ), expected, 'returns expected value' );

	val = null;
	expected = 'null';
	t.strictEqual( createAnnotationValue( val ), expected, 'returns expected value' );

	val = void 0;
	expected = 'undefined';
	t.strictEqual( createAnnotationValue( val ), expected, 'returns expected value' );

	t.end();
});

tape( 'the function creates a type annotation value for primitive values', function test( t ) {
	var expected;
	var opts;
	var val;

	opts = {
		'type': true
	};

	val = 1/3;
	expected = '<number>';
	t.strictEqual( createAnnotationValue( val, opts ), expected, 'returns expected value' );

	val = NaN;
	expected = '<number>';
	t.strictEqual( createAnnotationValue( val, opts ), expected, 'returns expected value' );

	val = Symbol( '' );
	expected = '<symbol>';
	t.strictEqual( createAnnotationValue( val, opts ), expected, 'returns expected value' );

	val = false;
	expected = '<boolean>';
	t.strictEqual( createAnnotationValue( val, opts ), expected, 'returns expected value' );

	val = 'Hello World!';
	expected = '<string>';
	t.strictEqual( createAnnotationValue( val, opts ), expected, 'returns expected value' );

	val = null;
	expected = '<null>';
	t.strictEqual( createAnnotationValue( val, opts ), expected, 'returns expected value' );

	val = void 0;
	expected = '<undefined>';
	t.strictEqual( createAnnotationValue( val, opts ), expected, 'returns expected value' );

	t.end();
});

tape( 'the function creates a type annotation value for boxed primitives', function test( t ) {
	var expected;
	var opts;
	var val;

	opts = {
		'type': true
	};

	val = new Number( 1/3 ); // eslint-disable-line no-new-wrappers
	expected = '<Number>';
	t.strictEqual( createAnnotationValue( val, opts ), expected, 'returns expected value' );

	val = Object( Symbol( '' ) );
	expected = '<Symbol>';
	t.strictEqual( createAnnotationValue( val, opts ), expected, 'returns expected value' );

	val = new Boolean( false ); // eslint-disable-line no-new-wrappers
	expected = '<Boolean>';
	t.strictEqual( createAnnotationValue( val, opts ), expected, 'returns expected value' );

	val = new String( 'Hello World!' ); // eslint-disable-line no-new-wrappers
	expected = '<String>';
	t.strictEqual( createAnnotationValue( val, opts ), expected, 'returns expected value' );

	t.end();
});

tape( 'the function creates a type annotation value for errors', function test( t ) {
	var expected;
	var opts;
	var val;

	opts = {
		'type': true
	};

	val = new Error( 'beep' );
	expected = '<Error>';
	t.strictEqual( createAnnotationValue( val, opts ), expected, 'returns expected value' );

	val = new RangeError( 'boop' );
	expected = '<RangeError>';
	t.strictEqual( createAnnotationValue( val, opts ), expected, 'returns expected value' );

	val = new TypeError( 'baz' );
	expected = '<TypeError>';
	t.strictEqual( createAnnotationValue( val, opts ), expected, 'returns expected value' );

	t.end();
});

tape( 'the function creates a return annotation value for arrays', function test( t ) {
	var expected;
	var opts;
	var val;

	val = [ 1, 2, 3, 4, 5, 6, 7 ];
	expected = '[ 1, 2, ..., 6, 7 ]';
	t.strictEqual( createAnnotationValue( val ), expected, 'returns expected value' );

	opts = {
		'numel': 6
	};
	expected = '[ 1, 2, 3, ..., 5, 6, 7 ]';
	t.strictEqual( createAnnotationValue( val, opts ), expected, 'returns expected value' );

	opts = {
		'numel': 7
	};
	expected = '[ 1, 2, 3, 4, 5, 6, 7 ]';
	t.strictEqual( createAnnotationValue( val, opts ), expected, 'returns expected value' );

	val = [ 'a', 'b', 'c', 'd', 'e', 'f', 'g' ];
	expected = '[ \'a\', \'b\', ..., \'f\', \'g\' ]';
	t.strictEqual( createAnnotationValue( val ), expected, 'returns expected value' );

	val = [ 0, 1/3, 2/3, 1 ];
	expected = '[ 0, ~0.333, ~0.667, 1 ]';
	t.strictEqual( createAnnotationValue( val ), expected, 'returns expected value' );

	val = [ null, NaN, void 0 ];
	expected = '[ null, NaN, undefined ]';
	t.strictEqual( createAnnotationValue( val ), expected, 'returns expected value' );

	t.end();
});

tape( 'the function creates a deep instance equality annotation value for typed arrays', function test( t ) {
	var expected;
	var opts;
	var val;

	val = new Float64Array( [ 1, 2, 3, 4, 5, 6, 7 ] );
	expected = '<Float64Array>[ 1, 2, ..., 6, 7 ]';
	t.strictEqual( createAnnotationValue( val ), expected, 'returns expected value' );

	opts = {
		'numel': 6
	};
	expected = '<Float64Array>[ 1, 2, 3, ..., 5, 6, 7 ]';
	t.strictEqual( createAnnotationValue( val, opts ), expected, 'returns expected value' );

	opts = {
		'numel': 7
	};
	expected = '<Float64Array>[ 1, 2, 3, 4, 5, 6, 7 ]';
	t.strictEqual( createAnnotationValue( val, opts ), expected, 'returns expected value' );

	val = new Float32Array( [ 1/3, 1/2, 1 ] );
	expected = '<Float32Array>[ ~0.333, 0.5, 1 ]';
	t.strictEqual( createAnnotationValue( val, opts ), expected, 'returns expected value' );

	t.end();
});

tape( 'the function creates a return annotation value for plain objects', function test( t ) {
	var expected;
	var val;

	val = {};
	expected = '{}';
	t.strictEqual( createAnnotationValue( val ), expected, 'returns expected value' );

	val = {
		'a': 1,
		'b': 2,
		'c': 3,
		'd': 4
	};
	expected = '{ \'a\': 1, \'b\': 2, \'c\': 3, \'d\': 4 }';
	t.strictEqual( createAnnotationValue( val ), expected, 'returns expected value' );

	val = {
		'a': [ 1, 2 ],
		'b': 1/3,
		'c': false,
		'd': null
	};
	expected = '{ \'a\': [ 1, 2 ], \'b\': ~0.333, \'c\': false, \'d\': null }';
	t.strictEqual( createAnnotationValue( val ), expected, 'returns expected value' );

	val = {
		'a': [ 1/3, 2/3 ],
		'b': 1/3,
		'c': false,
		'd': null
	};
	expected = '{ \'a\': [ ~0.333, ~0.667 ], \'b\': ~0.333, \'c\': false, \'d\': null }';
	t.strictEqual( createAnnotationValue( val ), expected, 'returns expected value' );

	t.end();
});

tape( 'the function creates a type annotation for class instances', function test( t ) {
	var expected;
	var actual;
	var opts;
	var buf;

	opts = {
		'type': true
	};

	actual = new Float64Array( [ 0, 2, 3 ] );
	expected = '<Float64Array>';
	t.strictEqual( createAnnotationValue( actual, opts ), expected, 'returns expected value' );

	actual = new Float32Array( [ 0, 2, 3 ] );
	expected = '<Float32Array>';
	t.strictEqual( createAnnotationValue( actual, opts ), expected, 'returns expected value' );

	buf = new Float32Array( [ 1.0, -1.0, 2.0, -2.0 ] );
	actual = new Complex64Array( buf );
	expected = '<Complex64Array>';
	t.strictEqual( createAnnotationValue( actual, opts ), expected, 'returns expected value' );

	actual = new Complex64( 2.0, 3.0 );
	expected = '<Complex64>';
	t.strictEqual( createAnnotationValue( actual, opts ), expected, 'returns expected value' );

	buf = new Float64Array( [ 1.0, -1.0, 2.0, -2.0 ] );
	actual = new Complex128Array( buf );
	expected = '<Complex128Array>';
	t.strictEqual( createAnnotationValue( actual, opts ), expected, 'returns expected value' );

	actual = new Complex128( 2.0, 3.0 );
	expected = '<Complex128>';
	t.strictEqual( createAnnotationValue( actual, opts ), expected, 'returns expected value' );

	actual = noop;
	expected = '<Function>';
	t.strictEqual( createAnnotationValue( actual, opts ), expected, 'returns expected value' );

	t.end();
});

tape( 'the function creates a return annotation value for regular expressions', function test( t ) {
	var expected;
	var val;

	val = /beep/;
	expected = '/beep/';
	t.strictEqual( createAnnotationValue( val ), expected, 'returns expected value' );

	val = /[0-9]{1,3}/g;
	expected = '/[0-9]{1,3}/g';
	t.strictEqual( createAnnotationValue( val ), expected, 'returns expected value' );

	val = /[0-9]+[a-z]*/gmi;
	expected = '/[0-9]+[a-z]*/gim';
	t.strictEqual( createAnnotationValue( val ), expected, 'returns expected value' );

	val = /[a-z]*/i;
	expected = '/[a-z]*/i';
	t.strictEqual( createAnnotationValue( val ), expected, 'returns expected value' );

	t.end();
});
