/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var Number = require( '@stdlib/number/ctor' );
var Boolean = require( '@stdlib/boolean/ctor' );
var Float32Array = require( '@stdlib/array/float32' );
var Float64Array = require( '@stdlib/array/float64' );
var Complex64 = require( '@stdlib/complex/float32' );
var Complex128 = require( '@stdlib/complex/float64' );
var Complex64Array = require( '@stdlib/array/complex64' );
var Complex128Array = require( '@stdlib/array/complex128' );
var compareValues = require( './../lib' );


// FUNCTIONS //

function createErrorMessage( actual, expected ) {
	return 'Displayed return value is `'+expected+'`, but expected `'+actual+'` instead';
}


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.strictEqual( typeof compareValues, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function compares primitives and a corresponding matching return annotation', function test( t ) {
	var expected;
	var actual;

	actual = NaN;
	expected = 'NaN';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = true;
	expected = 'true';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = null;
	expected = 'null';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = undefined;
	expected = 'undefined';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = 2.13;
	expected = '2.13';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = 2.133131;
	expected = '~2.13';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = 2.133131e-10;
	expected = '~2.13e-10';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = '2.13';
	expected = '\'2.13\'';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	t.end();
});

tape( 'the function compares primitives and a corresponding non-matching return annotation', function test( t ) {
	var expected;
	var actual;
	var msg;

	actual = NaN;
	expected = 'null';
	msg = createErrorMessage( actual, expected );
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = false;
	expected = 'true';
	msg = createErrorMessage( actual, expected );
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = null;
	expected = 'undefined';
	msg = createErrorMessage( actual, expected );
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = undefined;
	expected = 'null';
	msg = createErrorMessage( actual, expected );
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = 2.13;
	expected = '2.19';
	msg = createErrorMessage( actual, expected );
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = 2.133131;
	expected = '2.13';
	msg = createErrorMessage( actual, expected );
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = 2.133131e-10;
	expected = '~2.13e-17';
	msg = createErrorMessage( actual, expected );
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = 2.13;
	expected = '\'2.13\'';
	msg = createErrorMessage( actual, expected );
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	t.end();
});

tape( 'the function compares an array and a corresponding return annotation', function test( t ) {
	var expected;
	var actual;
	var msg;

	actual = [ 0, 2, 3 ];
	expected = '[ 0, 2, 3 ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ 0, 2, 3 ];
	expected = '[ <number>, <number>,  <number> ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ 0, 2, 3 ];
	expected = '[ <number>, <number>, <boolean> ]';
	msg = 'Displayed return value is `[ <number>, <number>, <boolean> ]`, but expected `[ 0, 2, 3 ]` instead';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = [ +0, -0 ];
	expected = '[ +0, -0 ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ true, false, 0, 1 ];
	expected = '[ <boolean>, ... ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [];
	expected = '[]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ NaN, null ];
	expected = '[ NaN, null ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ NaN, NaN ];
	expected = '[ NaN, NaN ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ 1, void 0, void 0, 0.5 ];
	expected = '[ 1, , , 0.5 ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ 1, void 0, void 0, 0.5 ];
	expected = '[ 1,,,0.5 ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ 1, void 0, void 0, 0.5 ];
	expected = '[ 1, undefined, undefined, 0.5 ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ 2, Infinity ];
	expected = '[ 2, Infinity ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ 2, +Infinity ];
	expected = '[ 2, Infinity ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ 2, Infinity ];
	expected = '[ 2, +Infinity ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ 2, -Infinity ];
	expected = '[ 2, -Infinity ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ 0, 2, 3 ];
	expected = '[ 0, 2, 2 ]';
	msg = 'Displayed return value is `[ 0, 2, 2 ]`, but expected `[ 0, 2, 3 ]` instead';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = [ 0, 20, 40, 60, 80, 100 ];
	expected = '[ 0, 20, 40, 60, 80, 100 ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ 1, 2.51188643150958, 6.309573444801933, 15.848931924611142 ];
	expected = '[ 1, ~2.5, ~6.31, ~15.85 ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ 1, 2.51188643150958, 6.309573444801933, 15.848931924611142 ];
	expected = '[ 1, ~2.5, ~6.31, 15.85 ]';
	msg = 'Displayed return value is `[ 1, ~2.5, ~6.31, 15.85 ]`, but expected `[ 1, ~2.512, ~6.31, ~15.849 ]` instead';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = [ -3.8111, 3.8111 ];
	expected = '[ ~-3.81, ~3.81 ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ [ 3, 60 ], [ 2, 50 ] ];
	expected = '[ [3, 60], [2, 50] ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [
		{
			'beep': 1
		},
		{
			'boop': 1
		},
		{
			'baz': 1
		}
	];
	expected = '[ {...}, 222 ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ 1, undefined, undefined, 2 ];
	expected = '[ 1, undefined, undefined, 2 ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ 1, null, null, 2 ];
	expected = '[ 1, null, undefined, 2 ]';
	msg = 'Displayed return value is `[ 1, null, undefined, 2 ]`, but expected `[ 1, null, null, 2 ]` instead';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = [ /beep/, /boop/ ];
	expected = '[ /beep/, /boop/ ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = [ /beep/, /boop/ ];
	expected = '[ /beep/, /boop/i ]';
	msg = 'Displayed return value is `[ /beep/, /boop/i ]`, but expected `[ /beep/, /boop/ ]` instead';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = [
		'constructor',
		'c',
		'bip',
		null
	];
	expected = '[ ..., \'c\', \'bip\', ... ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	// eslint-disable-next-line
	actual = [[[10,8.04],[8,6.95],[13,7.58],[9,8.81],[11,8.33],[14,9.96],[6,7.24],[4,4.26],[12,10.84],[7,4.82],[5,5.68]],[[10,9.14],[8,8.14],[13,8.74],[9,8.77],[11,9.26],[14,8.1],[6,6.13],[4,3.1],[12,9.13],[7,7.26],[5,4.74]],[[10,7.46],[8,6.77],[13,12.74],[9,7.11],[11,7.81],[14,8.84],[6,6.08],[4,5.39],[12,8.15],[7,6.42],[5,5.73]],[[8,6.58],[8,5.76],[8,7.71],[8,8.84],[8,8.47],[8,7.04],[8,5.25],[19,12.5],[8,5.56],[8,7.91],[8,6.89]]];
	expected = '[[[10,8.04],...],[[10,9.14],...],[[10,7.46],...],[[8,6.58],...]]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	t.end();
});

tape( 'the function compares a typed array and a corresponding return annotation', function test( t ) {
	var expected;
	var actual;
	var buf;
	var msg;

	actual = new Float64Array( [ 0, 2, 3 ] );
	expected = '<Float64Array>[ 0, 2, 3 ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = new Float64Array( [ 0.16666666666666666, 0.5158304763865204 ] );
	expected = '<Float64Array>[ ~0.167, ~0.516 ]';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = new Float64Array( [ 0, 2, 3 ] );
	expected = '<Float64Array>[ 0, 2, 2 ]';
	msg = 'Expected array entries [0,2,2], but observed [0,2,3]';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = new Float64Array( [ 0, 2, 3 ] );
	expected = '<Float32Array>[ 0, 2, 2 ]';
	msg = 'Expected instance type <Float64Array>, but observed <Float32Array>';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	buf = new Float32Array( [ 1.0, -1.0, 2.0, -2.0 ] );
	actual = new Complex64Array( buf );
	expected = '<Complex64Array>';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	buf = new Float64Array( [ 1.0, -1.0, 2.0, -2.0 ] );
	actual = new Complex128Array( buf );
	expected = '<Complex128Array>';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	t.end();
});

tape( 'the function compares a value with a type equality return annotation', function test( t ) {
	var expected;
	var actual;
	var msg;

	actual = 2.3;
	expected = '<number>';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = 2.3;
	expected = '<string>';
	msg = 'Expected a <string>, but received: `2.3`';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = '2.3';
	expected = '<number>';
	msg = 'Expected a <number>, but received: `2.3`';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = true;
	expected = '<boolean>';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = true;
	expected = '<number>';
	msg = 'Expected a <number>, but received: `true`';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = 0;
	expected = '<boolean>';
	msg = 'Expected a <boolean>, but received: `0`';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = new Complex64( 2.0, 3.0 );
	expected = '<Complex64>';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = new Complex128( 2.0, 3.0 );
	expected = '<Complex128>';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	t.end();
});

tape( 'the function differentiates between boxed and primitive values', function test( t ) {
	var expected;
	var actual;
	var msg;

	actual = 2.3;
	expected = '<number>';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = 2.3;
	expected = '<Number>';
	msg = 'Expected a <Number>, but received an unboxed primitive: `2.3`';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = new Number( 2.3 ); // eslint-disable-line no-new-wrappers
	expected = '<number>';
	msg = 'Expected a <number>, but received a boxed primitive: `2.3`';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = 2.3;
	expected = '<number>';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = 'beep';
	expected = '<String>';
	msg = 'Expected a <String>, but received an unboxed primitive: `beep`';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = new String( 'beep' ); // eslint-disable-line no-new-wrappers
	expected = '<string>';
	msg = 'Expected a <string>, but received a boxed primitive: `beep`';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = false;
	expected = '<Boolean>';
	msg = 'Expected a <Boolean>, but received an unboxed primitive: `false`';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = new Boolean( false ); // eslint-disable-line no-new-wrappers
	expected = '<boolean>';
	msg = 'Expected a <boolean>, but received a boxed primitive: `false`';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = false;
	expected = '<boolean>';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	t.end();
});

tape( 'the function compares plain objects and corresponding return annotations', function test( t ) {
	var expected;
	var actual;

	actual = {
		'a:beep': 'beep',
		'b:boop': 'boop',
		'c:foo': 'foo',
		'd:bar': 'bar'
	};
	expected = '{ \'a:beep\': \'beep\', \'b:boop\': \'boop\', \'c:foo\': \'foo\', \'d:bar\': \'bar\' }';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = {
		'beep': {
			'a': 0,
			'b': 1
		},
		'boop': 'baz'
	};
	expected = '{ \'beep\': {...}, ... }';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = {
		'b': 2,
		'c': NaN
	};
	expected = '{ \'b\': 2, \'c\': NaN }';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = {
		'constructor': function Foo() {},
		'beep': 'boop'
	};
	expected = '{ \'beep\': {...}, ... }';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	t.end();
});

tape( 'the function compares a regular expression and a corresponding return annotation', function test( t ) {
	var expected;
	var actual;
	var msg;

	actual = /beep/;
	expected = '/beep/';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = /[0-9]+/g;
	expected = '/[0-9]+/g';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = /[0-9a-z]+/gi;
	expected = '/[0-9a-z]+/gi';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = /[0-9a-z]+/gim;
	expected = '/[0-9a-z]+/gim';
	t.strictEqual( compareValues( actual, expected ), null, 'returns null' );

	actual = /[0-9a-z]+/gi;
	expected = '/[0-9a-z]+/g';
	msg = 'Displayed return value is `/[0-9a-z]+/g`, but expected `/[0-9a-z]+/gi` instead';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	actual = /[0-9a-z]+/gi;
	expected = '/[0-9]+/gi';
	msg = 'Displayed return value is `/[0-9]+/gi`, but expected `/[0-9a-z]+/gi` instead';
	t.strictEqual( compareValues( actual, expected ), msg, 'returns expected message' );

	t.end();
});

tape( 'the function compares a function and a corresponding return annotation', function test( t ) {
	var expected;
	var msg;

	expected = 'function identity( x ) {\n\t\treturn x;\n\t}';
	t.strictEqual( compareValues( identity, expected ), null, 'returns null' );

	expected = 'function noop() {}';
	msg = 'Displayed return value is `function noop() {}`, but expected `function identity( x ) {\n\t\treturn x;\n\t}` instead';
	t.strictEqual( compareValues( identity, expected ), msg, 'returns expected message' );
	t.end();

	function identity( x ) {
		return x;
	}
});

// TODO: Add tests
