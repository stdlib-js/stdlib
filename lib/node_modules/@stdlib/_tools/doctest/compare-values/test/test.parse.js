/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var NINF = require( '@stdlib/constants/float64/ninf' );
var PINF = require( '@stdlib/constants/float64/pinf' );
var Int8Array = require( '@stdlib/array/int8' );
var parse = require( './../lib/parse.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.strictEqual( typeof parse, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function parses a return annotation value for a JavaScript primitive', function test( t ) {
	var expected;
	var val;

	val = 'null';
	expected = null;
	t.strictEqual( parse( val ), expected, 'returns expected value' );

	val = 'NaN';
	expected = 'NaN';
	t.strictEqual( parse( val ), expected, 'returns expected value' );

	val = 'undefined';
	expected = void 0;
	t.strictEqual( parse( val ), expected, 'returns expected value' );

	val = '\'Hello World!\'';
	expected = 'Hello World!';
	t.strictEqual( parse( val ), expected, 'returns expected value' );

	val = 'false';
	expected = false;
	t.strictEqual( parse( val ), expected, 'returns expected value' );

	val = 'true';
	expected = true;
	t.strictEqual( parse( val ), expected, 'returns expected value' );

	val = '~0.333';
	expected = '~0.333';
	t.strictEqual( parse( val ), expected, 'returns expected value' );

	val = '~-0.333';
	expected = '~-0.333';
	t.strictEqual( parse( val ), expected, 'returns expected value' );

	val = '-2';
	expected = -2;
	t.strictEqual( parse( val ), expected, 'returns expected value' );

	val = '2';
	expected = 2;
	t.strictEqual( parse( val ), expected, 'returns expected value' );

	val = '2.0';
	expected = 2;
	t.strictEqual( parse( val ), expected, 'returns expected value' );

	val = '+2';
	expected = 2;
	t.strictEqual( parse( val ), expected, 'returns expected value' );

	val = 'Infinity';
	expected = PINF;
	t.strictEqual( parse( val ), expected, 'returns expected value' );

	val = '-Infinity';
	expected = NINF;
	t.strictEqual( parse( val ), expected, 'returns expected value' );

	val = '+Infinity';
	expected = PINF;
	t.strictEqual( parse( val ), expected, 'returns expected value' );

	val = '~2.13e-17';
	expected = '~2.13e-17';
	t.strictEqual( parse( val ), expected, 'returns expected value' );

	val = '2.13e-17';
	expected = 2.13e-17;
	t.strictEqual( parse( val ), expected, 'returns expected value' );

	t.end();
});

tape( 'the function parses a return annotation value for an array', function test( t ) {
	var expected;
	var val;

	val = '[ 1, 2, 3 ]';
	expected = [ 1, 2, 3 ];
	t.deepEqual( parse( val ), expected, true, 'returns expected value' );

	val = '[ 1, , 3 ]';
	expected = [ 1, void 0, 3 ];
	t.deepEqual( parse( val ), expected, true, 'returns expected value' );

	val = '[ [ 1, , 3 ], [1,,3] ]';
	expected = [
		[ 1, void 0, 3 ],
		[ 1, void 0, 3 ]
	];
	t.deepEqual( parse( val ), expected, true, 'returns expected value' );

	val = '[ 1, , , 4, 5 ]';
	expected = [ 1, void 0, void 0, 4, 5 ];
	t.deepEqual( parse( val ), expected, true, 'returns expected value' );

	val = '[ 0, ~0.333, ~0.667, 1 ]';
	expected = [ 0, '~0.333', '~0.667', 1 ];
	t.deepEqual( parse( val ), expected, true, 'returns expected value' );

	val = '[ 1, 2, 3, ... ]';
	expected = [ 1, 2, 3, '...' ];
	t.deepEqual( parse( val ), expected, true, 'returns expected value' );

	val = '[ [ 1, 2, 3, ... ], [ 7, 8, 9, ... ] ]';
	expected = [
		[ 1, 2, 3, '...' ],
		[ 7, 8, 9, '...' ]
	];
	t.deepEqual( parse( val ), expected, true, 'returns expected value' );

	val = '[ [ 1, 2, 3, ... ], [ 7, 8, 9, ... ], ... ]';
	expected = [
		[ 1, 2, 3, '...' ],
		[ 7, 8, 9, '...' ],
		'...'
	];
	t.deepEqual( parse( val ), expected, true, 'returns expected value' );

	val = '[ 1, 2, ... ]';
	expected = [ 1, 2, '...' ];
	t.deepEqual( parse( val ), expected, true, 'returns expected value' );

	t.end();
});

tape( 'the function parses a return annotation value for a regular expression', function test( t ) {
	var expected;
	var val;

	val = '/beep/';
	expected = /beep/;
	t.deepEqual( parse( val ), expected, true, 'returns expected value' );

	val = '/beep/g';
	expected = /beep/g;
	t.deepEqual( parse( val ), expected, true, 'returns expected value' );

	val = '/beep/gi';
	expected = /beep/gi;
	t.deepEqual( parse( val ), expected, true, 'returns expected value' );

	val = '/beep/gim';
	expected = /beep/gim;
	t.deepEqual( parse( val ), expected, true, 'returns expected value' );

	val = '/[0-9]/m';
	expected = /[0-9]/m;
	t.deepEqual( parse( val ), expected, true, 'returns expected value' );

	t.end();
});

tape( 'the function parses a return annotation value for type annotations', function test( t ) {
	var expected;
	var val;

	val = '<string>';
	expected = '<string>';
	t.strictEqual( parse( val ), expected, true, 'returns expected value' );

	val = '<Int8Array>';
	expected = '<Int8Array>';
	t.strictEqual( parse( val ), expected, true, 'returns expected value' );

	val = '[ <string>, <string> ]';
	expected = [ '<string>', '<string>' ];
	t.deepEqual( parse( val ), expected, true, 'returns expected value' );

	val = '{ \'a\': <string>, \'b\': <number> }';
	expected = {
		'a': '<string>',
		'b': '<number>'
	};
	t.deepEqual( parse( val ), expected, true, 'returns expected value' );

	t.end();
});

tape( 'the function parses a return annotation value for a plain object', function test( t ) {
	var expected;
	var val;

	// Keys with single quotes:
	val = '{ \'a\': \'beep\', \'b\': 123 }';
	expected = {
		'a': 'beep',
		'b': 123
	};
	t.deepEqual( parse( val ), expected, true, 'returns expected value' );

	// Keys with double quotes:
	val = '{ "a": "beep", "b": 123 }';
	t.deepEqual( parse( val ), expected, true, 'returns expected value' );

	// Keys with mixed quotes:
	val = '{ \'a\': "beep", "b": 123 }';
	t.deepEqual( parse( val ), expected, true, 'returns expected value' );

	// Keys without quotes:
	val = '{ a: "beep", b: 123 }';
	t.deepEqual( parse( val ), expected, true, 'returns expected value' );

	t.end();
});

tape( 'the function parses placeholder annotations', function test( t ) {
	var expected;
	var val;

	val = '{...}';
	expected = '<Object>';
	t.strictEqual( parse( val), expected, 'returns expected value' );

	val = '[...]';
	expected = [ '...' ];
	t.deepEqual( parse( val ), expected, true, 'returns expected value' );

	t.end();
});

tape( 'the function parses a deep instance equality type annotation', function test( t ) {
	var expected;
	var actual;
	var val;

	val = '<Int8Array>[ 0, 1, 2, 3 ]';
	expected = new Int8Array( [ 0, 1, 2, 3 ] );
	actual = parse( val );
	t.deepEqual( actual, expected, true, 'returns expected value' );

	val = '<Int8Array>[ 1, ..., 3 ]';
	expected = [ 1, '...', 3 ];
	actual = parse( val );
	t.deepEqual( actual, expected, true, 'returns expected value' );

	t.end();
});

tape( 'the function throws an error if provided an invalid array annotation', function test( t ) {
	var values;
	var i;

	values = [
		'[',
		'[ [ ]'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), SyntaxError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			parse( value );
		};
	}
});

tape( 'the function throws an error if provided an invalid object annotation', function test( t ) {
	var values;
	var i;

	values = [
		'{',
		'{ a, b }',
		'{ { }',
		'{ { } }',
		'{ a: 22, a:c:23 }'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), SyntaxError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			parse( value );
		};
	}
});

tape( 'the function throws an error if provided an invalid string annotation', function test( t ) {
	var values;
	var i;

	values = [
		'"beep""',
		'""boop"'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), SyntaxError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			parse( value );
		};
	}
});

tape( 'the function throws an error if provided an invalid number annotation', function test( t ) {
	var values;
	var i;

	values = [
		'3.21.2',
		'22,22.2'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), SyntaxError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			parse( value );
		};
	}
});
