/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var visit = require( 'unist-util-visit' );


// MAIN //

/**
* Retrieves all nodes of the section with the specified name and replaces the AST.
*
* @private
* @param {Node} ast - root node
* @param {string} name - section name
*/
function sectionNodes( ast, name ) {
	var scope;
	var nodes;
	var FLG;

	scope = null;
	nodes = [];

	visit( ast, replacer );

	/**
	* Replaces AST by the nodes of the specified section.
	*
	* @private
	* @param {Node} node - reference node
	* @param {number} index - position of `node` in `parent`
	* @param {Node} parent - parent of `node`
	* @returns {void}
	*/
	function replacer( node, index, parent ) {
		var type;
		if ( FLG ) {
			return;
		}
		type = isSectionTag( node, name );
		if ( scope && parent === scope ) {
			if ( type === 'end' ) {
				// Replace scope by nodes belonging to the given section...
				scope.children.splice( 0, scope.children.length, {
					'type': 'root',
					'children': nodes
				});

				// Set a flag indicating that we have processed a section having the specified name:
				FLG = true;

				scope = null;
				nodes = [];
			} else {
				// Add elements to keep...
				nodes.push( node );
			}
		}
		if ( !scope && type === 'start' ) {
			scope = parent;
		}
	}
}

/**
* Tests whether a node is an opening or closing section tag.
*
* @private
* @param {Node} node - node to test
* @param {string} name - section name
* @returns {(string|null)} returns `start`, `end` or null
*/
function isSectionTag( node, name ) {
	if (
		node.type === 'html' &&
		node.value === '<section class="'+name+'">'
	) {
		return 'start';
	}
	if (
		node.type === 'html' &&
		node.value === '<!-- /.'+name+' -->'
	) {
		return 'end';
	}
	return null;
}


// MAIN //

/**
* Returns a remark attacher that extracts the section with the given name.
*
* @private
* @param {string} name - section name
* @returns {Function} remark attacher function
*/
function extractor( name ) {
	return attacher;

	/**
	* Attach a plugin to a remark processor in order to extract the specified section.
	*
	* @private
	* @returns {Function} transformer
	*/
	function attacher() {
		return transformer;
	}

	/**
	* Transforms a Markdown file.
	*
	* @private
	* @param {Node} ast - root node
	*/
	function transformer( ast ) {
		sectionNodes( ast, name );
	}
}


// EXPORTS //

module.exports = extractor;
