/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var objectKeys = require( '@stdlib/utils/keys' );
var isObject = require( '@stdlib/assert/is-plain-object' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;
var isRegExp = require( '@stdlib/assert/is-regexp' );
var format = require( '@stdlib/string/format' );


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {string} [options.dir] - root directory from which to search for files
* @param {string} [options.pattern] - filename pattern
* @param {StringArray} [options.ignore] - list of glob patterns used to exclude matches
* @param {(string|RegExp|Object)} [options.header] - license header to lint against
* @returns {(Error|null)} error object or null
*
* @example
* var opts = {};
* var options = {
*     'dir': './'
* };
*
* var err = validate( opts, options );
* if ( err ) {
*    throw err;
* }
*/
function validate( opts, options ) {
	var keys;
	var v;
	var i;
	if ( !isObject( options ) ) {
		return new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );
	}
	if ( hasOwnProp( options, 'dir' ) ) {
		opts.dir = options.dir;
		if ( !isString( opts.dir ) ) {
			return new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'dir', opts.dir ) );
		}
	}
	if ( hasOwnProp( options, 'pattern' ) ) {
		opts.pattern = options.pattern;
		if ( !isString( opts.pattern ) ) {
			return new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'pattern', opts.pattern ) );
		}
	}
	if ( hasOwnProp( options, 'ignore' ) ) {
		opts.ignore = options.ignore;
		if ( !isStringArray( opts.ignore ) ) {
			return new TypeError( format( 'invalid option. `%s` option must be an array of strings. Option: `%s`.', 'ignore', opts.ignore ) );
		}
	}
	if ( hasOwnProp( options, 'header' ) ) {
		opts.header = options.header;
		if ( isObject( opts.header ) ) {
			keys = objectKeys( opts.header );
			for ( i = 0; i < keys.length; i++ ) {
				v = opts.header[ keys[i] ];
				if ( !isString( v ) && !isRegExp( v ) ) {
					return new TypeError( format( 'invalid option. A `%s` option object must map each filename extension to a license header string or regular expression. `%s: %s`. Value: `%s`.', 'header', keys[i], v, JSON.stringify( opts.header ) ) );
				}
			}
		} else if ( !isString( opts.header ) && !isRegExp( opts.header ) ) {
			return new TypeError( format( 'invalid option. `%s` option must be either a string, a regular expression, or an object whose keys are filename extensions and whose values are header strings or regular expressions. Option: `%s`.', 'header', opts.header ) );
		}
	}
	return null;
}


// EXPORTS //

module.exports = validate;
