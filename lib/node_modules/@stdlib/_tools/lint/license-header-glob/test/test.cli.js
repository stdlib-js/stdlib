/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var exec = require( 'child_process' ).exec;
var tape = require( 'tape' );
var IS_BROWSER = require( '@stdlib/assert/is-browser' );
var IS_WINDOWS = require( '@stdlib/assert/is-windows' );
var isJSON = require( '@stdlib/assert/is-json' );
var RE_EOL = require( '@stdlib/regexp/eol' ).REGEXP;
var replace = require( '@stdlib/string/replace' );
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var EXEC_PATH = require( '@stdlib/process/exec-path' );


// VARIABLES //

var fpath = resolve( __dirname, '..', 'bin', 'cli' );
var opts = {
	'skip': IS_BROWSER || IS_WINDOWS
};


// FIXTURES //

var PKG_VERSION = require( './../package.json' ).version;


// TESTS //

tape( 'command-line interface', function test( t ) {
	t.ok( true, __filename );
	t.end();
});

tape( 'when invoked with a `--help` flag, the command-line interface prints the help text to `stderr`', opts, function test( t ) {
	var expected;
	var cmd;

	expected = readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
		'encoding': 'utf8'
	});
	cmd = [
		EXEC_PATH,
		fpath,
		'--help'
	];

	exec( cmd.join( ' ' ), done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
			t.strictEqual( stderr.toString(), expected+'\n', 'expected value' );
		}
		t.end();
	}
});

tape( 'when invoked with a `-h` flag, the command-line interface prints the help text to `stderr`', opts, function test( t ) {
	var expected;
	var cmd;

	expected = readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
		'encoding': 'utf8'
	});
	cmd = [
		EXEC_PATH,
		fpath,
		'-h'
	];

	exec( cmd.join( ' ' ), done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
			t.strictEqual( stderr.toString(), expected+'\n', 'expected value' );
		}
		t.end();
	}
});

tape( 'when invoked with a `--version` flag, the command-line interface prints the version to `stderr`', opts, function test( t ) {
	var cmd = [
		EXEC_PATH,
		fpath,
		'--version'
	];

	exec( cmd.join( ' ' ), done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
			t.strictEqual( stderr.toString(), PKG_VERSION+'\n', 'expected value' );
		}
		t.end();
	}
});

tape( 'when invoked with a `-V` flag, the command-line interface prints the version to `stderr`', opts, function test( t ) {
	var cmd = [
		EXEC_PATH,
		fpath,
		'-V'
	];

	exec( cmd.join( ' ' ), done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
			t.strictEqual( stderr.toString(), PKG_VERSION+'\n', 'expected value' );
		}
		t.end();
	}
});

tape( 'the command-line interface prints nothing if all files are valid', opts, function test( t ) {
	var cmd;
	var dir;

	dir = resolve( __dirname, 'fixtures', 'good' );

	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \''+dir+'\'; require( \''+fpath+'\' );"'
	];

	exec( cmd.join( ' ' ), done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'expected value' );
			t.strictEqual( stderr.toString(), '', 'does not print to `stderr`' );
		}
		t.end();
	}
});

tape( 'the command-line interface prints newline-delimited JSON (NDJSON) if files are invalid', opts, function test( t ) {
	var cmd;
	var dir;

	dir = resolve( __dirname, 'fixtures', 'bad' );

	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \''+dir+'\'; process.argv[ 3 ] = \'--ignore="node_modules/**"\'; require( \''+fpath+'\' );"'
	];

	exec( cmd.join( ' ' ), done );

	function done( error, stdout, stderr ) {
		var results;
		var i;
		if ( error ) {
			t.pass( error.message );
			t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );

			results = stderr.toString().split( RE_EOL );
			t.strictEqual( results.length-1 > 3, true, 'returns expected number of errors' );
			for ( i = 0; i < results.length-1; i++ ) {
				t.strictEqual( isJSON( results[i] ), true, 'returns JSON' );
			}
			t.strictEqual( results[i], '', 'includes ending newline' );
		} else {
			t.fail( 'process should error' );
		}
		t.end();
	}
});

tape( 'the command-line interface supports providing a custom glob pattern', opts, function test( t ) {
	var cmd;
	var dir;

	dir = resolve( __dirname, 'fixtures', 'bad' );

	// The glob pattern should not match anything.
	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \''+dir+'\'; process.argv[ 3 ] = \'--pattern="**/*.abcdefg"\'; process.argv[ 4 ] = \'--ignore="node_modules/**"\'; require( \''+fpath+'\' );"'
	];

	exec( cmd.join( ' ' ), done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'expected value' );
			t.strictEqual( stderr.toString(), '', 'does not print to `stderr`' );
		}
		t.end();
	}
});

tape( 'the command-line interface supports providing one or more `ignore` patterns', opts, function test( t ) {
	var cmd;
	var dir;

	dir = resolve( __dirname, 'fixtures', 'bad' );

	// We ignore the very directory we are supposed to search!
	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \''+dir+'\'; process.argv[ 3 ] = \'--ignore="'+dir+'/**"\'; process.argv[ 4 ] = \'--ignore="node_modules/**"\'; require( \''+fpath+'\' );"'
	];

	exec( cmd.join( ' ' ), done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'expected value' );
			t.strictEqual( stderr.toString(), '', 'does not print to `stderr`' );
		}
		t.end();
	}
});

tape( 'the command-line interface supports specifying a file containing license header string against which to lint (valid)', opts, function test( t ) {
	var opts;
	var cmd;
	var dir;

	dir = resolve( __dirname, 'fixtures', 'good' );

	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \''+dir+'\'; process.argv[ 3 ] = \'--ignore="node_modules/**"\'; process.argv[ 4 ] = \'--header=./fixtures/headers/minimal_string.txt\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'expected value' );
			t.strictEqual( stderr.toString(), '', 'does not print to `stderr`' );
		}
		t.end();
	}
});

tape( 'the command-line interface supports specifying a file containing license header string against which to lint (invalid)', opts, function test( t ) {
	var opts;
	var cmd;
	var dir;

	dir = resolve( __dirname, 'fixtures', 'good' );

	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \''+dir+'\'; process.argv[ 3 ] = \'--ignore="node_modules/**"\'; process.argv[ 4 ] = \'--header=./fixtures/headers/beepboop.txt\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var results;
		var i;
		if ( error ) {
			t.pass( error.message );
			t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );

			results = stderr.toString().split( RE_EOL );
			t.strictEqual( results.length-1 > 3, true, 'returns expected number of errors' );
			for ( i = 0; i < results.length-1; i++ ) {
				t.strictEqual( isJSON( results[i] ), true, 'returns JSON' );
			}
			t.strictEqual( results[i], '', 'includes ending newline' );
		} else {
			t.fail( 'process should error' );
		}
		t.end();
	}
});

tape( 'the command-line interface supports specifying a file containing license header string against which to lint (invalid)', opts, function test( t ) {
	var opts;
	var cmd;
	var dir;

	dir = resolve( __dirname, 'fixtures', 'good' );

	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \''+dir+'\'; process.argv[ 3 ] = \'--ignore="node_modules/**"\'; process.argv[ 4 ] = \'--header=./fixtures/headers/apache.c_style.txt\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var results;
		var i;
		if ( error ) {
			t.pass( error.message );
			t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );

			results = stderr.toString().split( RE_EOL );
			t.strictEqual( results.length-1 > 3, true, 'returns expected number of errors' );
			for ( i = 0; i < results.length-1; i++ ) {
				t.strictEqual( isJSON( results[i] ), true, 'returns JSON' );
			}
			t.strictEqual( results[i], '', 'includes ending newline' );
		} else {
			t.fail( 'process should error' );
		}
		t.end();
	}
});

tape( 'the command-line interface supports specifying a file containing a license header regular expression against which to lint (valid)', opts, function test( t ) {
	var opts;
	var cmd;
	var dir;

	dir = resolve( __dirname, 'fixtures', 'good' );

	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \''+dir+'\'; process.argv[ 3 ] = \'--ignore="node_modules/**"\'; process.argv[ 4 ] = \'--header=./fixtures/headers/re_apache.txt\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'expected value' );
			t.strictEqual( stderr.toString(), '', 'does not print to `stderr`' );
		}
		t.end();
	}
});

tape( 'the command-line interface supports specifying a file containing a license header regular expression against which to lint (invalid)', opts, function test( t ) {
	var opts;
	var cmd;
	var dir;

	dir = resolve( __dirname, 'fixtures', 'good' );

	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \''+dir+'\'; process.argv[ 3 ] = \'--ignore="node_modules/**"\'; process.argv[ 4 ] = \'--header=./fixtures/headers/re_mit.txt\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var results;
		var i;
		if ( error ) {
			t.pass( error.message );
			t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );

			results = stderr.toString().split( RE_EOL );
			t.strictEqual( results.length-1 > 3, true, 'returns expected number of errors' );
			for ( i = 0; i < results.length-1; i++ ) {
				t.strictEqual( isJSON( results[i] ), true, 'returns JSON' );
			}
			t.strictEqual( results[i], '', 'includes ending newline' );
		} else {
			t.fail( 'process should error' );
		}
		t.end();
	}
});

tape( 'the command-line interface supports specifying a file containing a license header regular expression against which to lint (invalid)', opts, function test( t ) {
	var opts;
	var cmd;
	var dir;

	dir = resolve( __dirname, 'fixtures', 'good' );

	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \''+dir+'\'; process.argv[ 3 ] = \'--ignore="node_modules/**"\'; process.argv[ 4 ] = \'--header=./fixtures/headers/re_apache.c_style.txt\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var results;
		var i;
		if ( error ) {
			t.pass( error.message );
			t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );

			results = stderr.toString().split( RE_EOL );
			t.strictEqual( results.length-1 > 3, true, 'returns expected number of errors' );
			for ( i = 0; i < results.length-1; i++ ) {
				t.strictEqual( isJSON( results[i] ), true, 'returns JSON' );
			}
			t.strictEqual( results[i], '', 'includes ending newline' );
		} else {
			t.fail( 'process should error' );
		}
		t.end();
	}
});

tape( 'the command-line interface supports specifying multiple license header options (valid)', opts, function test( t ) {
	var opts;
	var cmd;
	var dir;

	dir = resolve( __dirname, 'fixtures', 'good' );

	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \''+dir+'\'; process.argv[ 3 ] = \'--ignore="node_modules/**"\'; process.argv[ 4 ] = \'--header=awk:./fixtures/headers/minimal_string.txt\'; process.argv[ 5 ] = \'--header=js:./fixtures/headers/minimal_string.txt\'; process.argv[ 6 ] = \'--header=default:./fixtures/headers/re_apache.txt\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'expected value' );
			t.strictEqual( stderr.toString(), '', 'does not print to `stderr`' );
		}
		t.end();
	}
});

tape( 'the command-line interface supports specifying multiple license header options (invalid)', opts, function test( t ) {
	var opts;
	var cmd;
	var dir;

	dir = resolve( __dirname, 'fixtures', 'good' );

	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \''+dir+'\'; process.argv[ 3 ] = \'--ignore="node_modules/**"\'; process.argv[ 4 ] = \'--header=awk:./fixtures/headers/minimal_string.txt\'; process.argv[ 5 ] = \'--header=js:./fixtures/headers/minimal_string.txt\'; process.argv[ 6 ] = \'--header=default:./fixtures/headers/re_mit.txt\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var results;
		var i;
		if ( error ) {
			t.pass( error.message );
			t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );

			results = stderr.toString().split( RE_EOL );
			t.strictEqual( results.length-1 > 3, true, 'returns expected number of errors' );
			for ( i = 0; i < results.length-1; i++ ) {
				t.strictEqual( isJSON( results[i] ), true, 'returns JSON' );
			}
			t.strictEqual( results[i], '', 'includes ending newline' );
		} else {
			t.fail( 'process should error' );
		}
		t.end();
	}
});

tape( 'the command-line interface supports specifying multiple license header options (invalid)', opts, function test( t ) {
	var opts;
	var cmd;
	var dir;

	dir = resolve( __dirname, 'fixtures', 'good' );

	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \''+dir+'\'; process.argv[ 3 ] = \'--ignore="node_modules/**"\'; process.argv[ 4 ] = \'--header=awk:./fixtures/headers/minimal_string.txt\'; process.argv[ 5 ] = \'--header=js:./fixtures/headers/minimal_string.txt\'; process.argv[ 6 ] = \'--header=default:./fixtures/headers/re_apache.c_style.txt\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var results;
		var i;
		if ( error ) {
			t.pass( error.message );
			t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );

			results = stderr.toString().split( RE_EOL );
			t.strictEqual( results.length-1 > 3, true, 'returns expected number of errors' );
			for ( i = 0; i < results.length-1; i++ ) {
				t.strictEqual( isJSON( results[i] ), true, 'returns JSON' );
			}
			t.strictEqual( results[i], '', 'includes ending newline' );
		} else {
			t.fail( 'process should error' );
		}
		t.end();
	}
});

tape( 'if provided multiple header values and one or more of those values lacks a language prefix, the command-line interface prints an error and sets a non-zero exit code', opts, function test( t ) {
	var opts;
	var cmd;
	var dir;

	dir = resolve( __dirname, 'fixtures', 'good' );

	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \''+dir+'\'; process.argv[ 3 ] = \'--ignore="node_modules/**"\'; process.argv[ 4 ] = \'--header=awk:./fixtures/headers/minimal_string.txt\'; process.argv[ 5 ] = \'--header=./fixtures/headers/minimal_string.txt\'; process.argv[ 6 ] = \'--header=default:./fixtures/headers/re_apache.txt\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		var msg;
		if ( error ) {
			t.pass( error.message );
			t.strictEqual( error.code, 1, 'expected exit code' );
		}
		t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );

		msg = stderr.toString();
		t.strictEqual( msg.length > 0, true, msg );
		t.end();
	}
});

tape( 'if an error is encountered when linting files, the command-line interface prints an error and sets a non-zero exit code', opts, function test( t ) {
	var script;
	var opts;
	var cmd;

	script = readFileSync( resolve( __dirname, 'fixtures', 'cli_error.js.txt' ), {
		'encoding': 'utf8'
	});

	// Replace single quotes with double quotes:
	script = replace( script, '\'', '"' );

	cmd = [
		EXEC_PATH,
		'-e',
		'\''+script+'\''
	];

	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.pass( error.message );
			t.strictEqual( error.code, 1, 'expected exit code' );
		}
		t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
		t.strictEqual( stderr.toString(), 'Error: beep\n', 'expected value' );
		t.end();
	}
});

tape( 'if an error is encountered when reading a header file, the command-line interface prints an error and sets a non-zero exit code (non-prefix)', opts, function test( t ) {
	var opts;
	var cmd;
	var dir;

	dir = resolve( __dirname, 'fixtures', 'good' );

	// Non-existent file path:
	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \''+dir+'\'; process.argv[ 3 ] = \'--ignore="node_modules/**"\'; process.argv[ 4 ] = \'--header=./bdafjas/bkajflask/bkjlfakdsf/akfjaslf.txt\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.pass( error.message );
			t.strictEqual( error.code, 1, 'expected exit code' );
		}
		t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
		t.strictEqual( stderr.toString().length > 0, true, 'prints a message to `stderr`' );
		t.end();
	}
});

tape( 'if an error is encountered when reading a header file, the command-line interface prints an error and sets a non-zero exit code (prefix)', opts, function test( t ) {
	var opts;
	var cmd;
	var dir;

	dir = resolve( __dirname, 'fixtures', 'good' );

	// Non-existent file path:
	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \''+dir+'\'; process.argv[ 3 ] = \'--ignore="node_modules/**"\'; process.argv[ 4 ] = \'--header=awk:./bdafjas/bkajflask/bkjlfakdsf/akfjaslf.txt\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.pass( error.message );
			t.strictEqual( error.code, 1, 'expected exit code' );
		}
		t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
		t.strictEqual( stderr.toString().length > 0, true, 'prints a message to `stderr`' );
		t.end();
	}
});

tape( 'if an error is encountered when reading a header file, the command-line interface prints an error and sets a non-zero exit code (multiple)', opts, function test( t ) {
	var opts;
	var cmd;
	var dir;

	dir = resolve( __dirname, 'fixtures', 'good' );

	// Non-existent file path:
	cmd = [
		EXEC_PATH,
		'-e',
		'"process.stdin.isTTY = true; process.argv[ 2 ] = \''+dir+'\'; process.argv[ 3 ] = \'--ignore="node_modules/**"\'; process.argv[ 4 ] = \'--header=awk:./bdafjas/bkajflask/bkjlfakdsf/akfjaslf.txt\'; process.argv[ 5 ] = \'--header=js:./bdafjas/bkajflask/bkjlfakdsf/akfjaslf.txt\'; require( \''+fpath+'\' );"'
	];
	opts = {
		'cwd': __dirname
	};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.pass( error.message );
			t.strictEqual( error.code, 1, 'expected exit code' );
		}
		t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
		t.strictEqual( stderr.toString().length > 0, true, 'prints a message to `stderr`' );
		t.end();
	}
});
