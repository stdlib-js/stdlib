#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var join = require( 'path' ).join;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/cli/ctor' );
var lint = require( './../lib' );


// MAIN //

/**
* Main execution sequence.
*
* @private
*/
function main() {
	var flags;
	var args;
	var opts;
	var cli;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( join( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line options:
	flags = cli.flags();
	if ( flags.help || flags.version ) {
		return;
	}

	// Get any provided command-line arguments:
	args = cli.args();

	// Extract options...
	opts = {};
	if ( flags.pattern ) {
		opts.pattern = flags.pattern;
	}
	if ( flags.ignore ) {
		if ( typeof flags.ignore === 'string' ) {
			opts.ignore = [ flags.ignore ];
		} else {
			opts.ignore = flags.ignore;
		}
	}
	if ( args[ 0 ] ) {
		opts.dir = args[ 0 ];
	}
	// Lint namespace aliases:
	lint( opts, onLint );

	/**
	* Callback invoked upon completion.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {(ObjectArray|EmptyArray)} errs - lint errors
	* @returns {void}
	*/
	function onLint( error, errs ) {
		/* eslint-disable no-console */
		var i;
		if ( error ) {
			return cli.error( error );
		}
		if ( errs.length ) {
			console.error( '\nFound %d lint errors:\n', errs.length );
			for ( i = 0; i < errs.length; i++ ) {
				console.error( 'Namespace: %s', errs[ i ].namespace );
				console.error( 'Package: %s', errs[ i ].pkg );
				console.error( 'Expected: %s', errs[ i ].expected );
				console.error( 'Actual: %s', errs[ i ].actual );
				console.error( '' );
			}
			return cli.close( 1 );
		}
		console.log( 'No detected errors.' );
		cli.close( 0 );
	}
}

main();
