/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var basename = require( 'path' ).basename; // TODO: replace with stdlib pkg
var resolve = require( 'path' ).resolve;
var logger = require( 'debug' );
var objectKeys = require( '@stdlib/utils/keys' );
var isEmptyArray = require( '@stdlib/assert/is-empty-array' );
var isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isRegExp = require( '@stdlib/assert/is-regexp' );
var isObject = require( '@stdlib/assert/is-plain-object' );
var isFunction = require( '@stdlib/assert/is-function' );
var readFile = require( '@stdlib/fs/read-file' );
var extname = require( '@stdlib/utils/extname' );
var nextTick = require( '@stdlib/utils/next-tick' );
var cwd = require( '@stdlib/process/cwd' );
var headers = require( '@stdlib/_tools/licenses/header-regexp-table' );
var linter = require( '@stdlib/_tools/lint/license-header' );
var format = require( '@stdlib/string/format' );
var normalizeHeader = require( './normalize_header.js' );


// VARIABLES //

var debug = logger( 'lint:license-header-file-list:async' );

// Filesystem read options:
var FOPTS = {
	'encoding': 'utf8'
};

// Default SPDX license identifier:
var SPDX = 'Apache-2.0';


// MAIN //

/**
* Asynchronously lints each file in a provided file list.
*
* @param {(EmptyArray|StringArray)} files - file list
* @param {(string|RegExp|Object)} [header] - license header to lint against
* @param {Callback} clbk - callback to invoke upon completion
* @throws {TypeError} first argument must be an array of strings
* @throws {TypeError} `header` argument must be either a string, RegExp, or object
* @throws {TypeError} callback argument must be a function
* @returns {void}
*
* @example
* var files = [
*     __filename
* ];
*
* var header = '// This file is licensed under Apache-2.0.';
*
* lint( files, header, onLint );
*
* function onLint( error, errs ) {
*     if ( error ) {
*         throw error;
*     }
*     console.error( errs );
* }
*/
function lint( files, header, clbk ) {
	var total;
	var errs;
	var keys;
	var FLG;
	var idx;
	var dir;
	var cb;
	var h;
	var v;
	var i;

	FLG = isEmptyArray( files );
	if ( !FLG && !isStringArray( files ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be an array of strings. Value: `%s`.', files ) );
	}
	if ( arguments.length < 3 ) {
		h = headers( SPDX );
		cb = header;
	} else {
		h = header;
		cb = clbk;
		if ( isObject( h ) ) {
			keys = objectKeys( h );
			for ( i = 0; i < keys.length; i++ ) {
				v = h[ keys[i] ];
				if ( !isString( v ) && !isRegExp( v ) ) {
					throw new TypeError( format( 'invalid argument. A header object must map each filename extension to a license header string or regular expression. `%s: %s`. Value: `%s`.', keys[i], v, JSON.stringify( h ) ) );
				}
			}
		} else if ( !isString( h ) && !isRegExp( h ) ) {
			throw new TypeError( format( 'invalid argument. Second argument must be either a string, a regular expression, or an object whose keys are filename extensions and whose values are header strings or regular expressions. Value: `%s`.', h ) );
		}
	}
	if ( !isFunction( cb ) ) {
		throw new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', cb ) );
	}
	dir = cwd();
	debug( 'Current working directory: %s', dir );

	total = files.length;
	idx = -1;
	errs = [];
	if ( FLG ) {
		return done();
	}
	h = normalizeHeader( h );
	return next();

	/**
	* Processes the next file.
	*
	* @private
	* @returns {void}
	*/
	function next() {
		var fpath;
		var ext;
		var re;

		idx += 1;

		ext = extname( files[ idx ] ).slice( 1 ); // ignore leading `.`
		re = h[ ext ];
		if ( !re ) {
			// E.g., account for files such as `Makefile` which lack a filename extension...
			re = h[ basename( files[ idx ] ) ] || h.default || null;
		}
		if ( re ) {
			// Resolve an absolute filepath:
			fpath = resolve( dir, files[ idx ] );

			debug( 'Linting file (%d of %d): %s', idx+1, total, files[ idx ] );
			return readFile( fpath, FOPTS, onRead );
		}
		debug( 'Skipping file (%d of %d): %s', idx+1, total, files[ idx ] );
		return nextTick( done );

		/**
		* Callback invoked upon reading a file.
		*
		* @private
		* @param {(Error|null)} error - error object
		* @param {string} file - file contents
		* @returns {void}
		*/
		function onRead( error, file ) {
			var tmp;
			if ( error ) {
				debug( 'Encountered an error when attempting to read file: %s. Error: %s', files[ idx ], error.message );
				return done( error );
			}
			tmp = linter( file, re );
			if ( tmp ) {
				tmp.name = files[ idx ];
				errs.push( tmp );
			}
			debug( 'Finished linting file %d of %d.', idx+1, total );
			done();
		}
	}

	/**
	* Callback invoked upon linting a file.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @returns {void}
	*/
	function done( error ) {
		if ( error ) {
			return cb( error );
		}
		if ( idx === total-1 ) {
			return cb( null, errs );
		}
		next();
	}
}


// EXPORTS //

module.exports = lint;
