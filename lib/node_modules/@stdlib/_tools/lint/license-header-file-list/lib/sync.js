/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var basename = require( 'path' ).basename; // TODO: replace with stdlib pkg
var resolve = require( 'path' ).resolve;
var logger = require( 'debug' );
var objectKeys = require( '@stdlib/utils/keys' );
var isEmptyArray = require( '@stdlib/assert/is-empty-array' );
var isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isRegExp = require( '@stdlib/assert/is-regexp' );
var isObject = require( '@stdlib/assert/is-plain-object' );
var readFile = require( '@stdlib/fs/read-file' ).sync;
var extname = require( '@stdlib/utils/extname' );
var format = require( '@stdlib/string/format' );
var cwd = require( '@stdlib/process/cwd' );
var headers = require( '@stdlib/_tools/licenses/header-regexp-table' );
var linter = require( '@stdlib/_tools/lint/license-header' );
var normalizeHeader = require( './normalize_header.js' );


// VARIABLES //

var debug = logger( 'lint:license-header-file-list:sync' );

// Filesystem read options:
var FOPTS = {
	'encoding': 'utf8'
};

// Default SPDX license identifier:
var SPDX = 'Apache-2.0';


// MAIN //

/**
* Synchronously lints each file in a provided file list.
*
* @param {(EmptyArray|StringArray)} files - file list
* @param {(string|RegExp|Object)} [header] - license header to lint against
* @throws {TypeError} first argument must be an array of strings
* @throws {TypeError} second argument must be either a string, RegExp, or object
* @returns {(EmptyArray|ObjectArray|Error)} lint errors
*
* @example
* var files = [
*     __filename
* ];
*
* var header = '// This file is licensed under Apache-2.0.';
*
* var errs = lint( files, header );
* if ( errs instanceof Error ) {
*     throw errs;
* }
* console.error( errs );
*/
function lint( files, header ) {
	var total;
	var fpath;
	var errs;
	var file;
	var keys;
	var ext;
	var tmp;
	var dir;
	var re;
	var h;
	var f;
	var v;
	var i;

	if ( !isEmptyArray( files ) && !isStringArray( files ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be an array of strings. Value: `%s`.', files ) );
	}
	if ( arguments.length > 1 ) {
		h = header;
		if ( isObject( h ) ) {
			keys = objectKeys( h );
			for ( i = 0; i < keys.length; i++ ) {
				v = h[ keys[i] ];
				if ( !isString( v ) && !isRegExp( v ) ) {
					throw new TypeError( format( 'invalid argument. A header object must map each filename extension to a license header string or regular expression. `%s: %s`. Value: `%s`.', keys[i], v, JSON.stringify( h ) ) );
				}
			}
		} else if ( !isString( h ) && !isRegExp( h ) ) {
			throw new TypeError( format( 'invalid argument. Second argument must be either a string, a regular expression, or an object whose keys are filename extensions and whose values are header strings or regular expressions. Value: `%s`.', h ) );
		}
	} else {
		h = headers( SPDX );
	}
	h = normalizeHeader( h );

	dir = cwd();
	debug( 'Current working directory: %s', dir );

	total = files.length;
	errs = [];
	for ( i = 0; i < total; i++ ) {
		f = files[ i ];
		ext = extname( f ).slice( 1 ); // ignore leading `.`
		re = h[ ext ];
		if ( !re ) {
			// E.g., account for files such as `Makefile` which lack a filename extension...
			re = h[ basename( f ) ] || h.default || null;
		}
		if ( re ) {
			fpath = resolve( dir, f );

			debug( 'Linting file (%d of %d): %s', i+1, total, f );
			file = readFile( fpath, FOPTS );
			if ( file instanceof Error ) {
				debug( 'Encountered an error when attempting to read file: %s. Error: %s', f, file.message );
				return file;
			}
			tmp = linter( file, re );
			if ( tmp ) {
				tmp.name = f;
				errs.push( tmp );
			}
			debug( 'Finished linting file %d of %d.', i+1, total );
		} else {
			debug( 'Skipping file (%d of %d): %s', i+1, total, f );
		}
	}
	return errs;
}


// EXPORTS //

module.exports = lint;
