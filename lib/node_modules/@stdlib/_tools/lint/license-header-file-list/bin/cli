#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/cli/ctor' );
var cwd = require( '@stdlib/process/cwd' );
var stdin = require( '@stdlib/process/read-stdin' );
var stdinStream = require( '@stdlib/streams/node/stdin' );
var RE_EOL = require( '@stdlib/regexp/eol' ).REGEXP;
var isRegExpString = require( '@stdlib/assert/is-regexp-string' );
var reFromString = require( '@stdlib/utils/regexp-from-string' );
var replace = require( '@stdlib/string/replace' );
var lint = require( './../lib' );


// VARIABLES //

var RE_EXT_PREFIX = /^([a-zA-Z]+):/;
var RE_TRAILING_NEWLINE = /\r?\n$/;
var RE_C_COMMENT_BEGIN = /^\/\*/;
var RE_C_COMMENT_END = /\*\/$/;


// FUNCTIONS //

/**
* If provided a regular expression string, generates a regular expression; otherwise, returns the input string (sans a trailing newline).
*
* @private
* @param {string} header - header
* @returns {(RegExp|string)} regular expression or the input header string
*/
function parseHeader( header ) {
	// Remove single trailing newline:
	header = replace( header, RE_TRAILING_NEWLINE, '' );

	// Determine whether the "header" is a regular expression string or a literal header string:
	if (
		isRegExpString( header ) &&
		!(
			// NOTE: this check is not perfect (e.g., '/* beep */' could be a regular expression string, not a C-style comment)
			RE_C_COMMENT_BEGIN.test( header ) &&
			RE_C_COMMENT_END.test( header )
		)
	) {
		return reFromString( header );
	}
	return header;
}


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var header;
	var split;
	var flags;
	var fopts;
	var args;
	var cli;
	var dir;
	var tmp;
	var ext;
	var i;

	fopts = {
		'encoding': 'utf8'
	};

	// Determine the current working directory:
	dir = cwd();

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), fopts )
	});

	// Get any provided command-line options:
	flags = cli.flags();
	if ( flags.help || flags.version ) {
		return;
	}

	// Get any provided command-line arguments:
	args = cli.args();

	if ( flags.header ) {
		if ( typeof flags.header === 'string' ) {
			tmp = RE_EXT_PREFIX.exec( flags.header );
			if ( tmp ) {
				header = {};
				ext = tmp[ 1 ];
				tmp = flags.header.substring( ext.length+1 ); // omit the colon
				tmp = resolve( dir, tmp );
				tmp = readFileSync( tmp, fopts );
				if ( tmp instanceof Error ) {
					return onError( tmp );
				}
				header[ ext ] = parseHeader( tmp );
			} else {
				tmp = resolve( dir, flags.header );
				tmp = readFileSync( tmp, fopts );
				if ( tmp instanceof Error ) {
					return onError( tmp );
				}
				header = parseHeader( tmp );
			}
		} else {
			header = {};
			for ( i = 0; i < flags.header.length; i++ ) {
				tmp = RE_EXT_PREFIX.exec( flags.header[ i ] );
				if ( tmp ) {
					ext = tmp[ 1 ];
					tmp = flags.header[ i ].substring( ext.length+1 ); // omit the colon
					tmp = resolve( dir, tmp );
					tmp = readFileSync( tmp, fopts );
					if ( tmp instanceof Error ) {
						return onError( tmp );
					}
					header[ ext ] = parseHeader( tmp );
				} else {
					return onError( new Error( 'invalid option. When providing multiple headers, each header must have an associated filename extension prefix.' ) );
				}
			}
		}
	}
	if ( !stdinStream.isTTY ) {
		// We are receiving data from `stdin`...
		if ( flags.split ) {
			if ( !isRegExpString( flags.split ) ) {
				flags.split = '/'+flags.split+'/';
			}
			split = reFromString( flags.split );
		} else {
			split = RE_EOL;
		}
		return stdin( onRead );
	}
	if ( header ) {
		return lint( args, header, onLint );
	}
	return lint( args, onLint );

	/**
	* Callback invoked upon reading from `stdin`.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Buffer} data - data
	* @returns {void}
	*/
	function onRead( error, data ) {
		var lines;
		if ( error ) {
			return onError( error );
		}
		lines = data.toString().split( split );

		// Check if input data had a trailing newline...
		if ( lines[ lines.length-1 ] === '' ) {
			lines.length -= 1;
		}
		if ( header ) {
			return lint( lines, header, onLint );
		}
		return lint( lines, onLint );
	}

	/**
	* Callback invoked after linting files.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {(ObjectArray|EmptyArray)} errors - list of lint errors
	* @returns {void}
	*/
	function onLint( error, errors ) {
		var i;
		if ( error ) {
			return onError( error );
		}
		for ( i = 0; i < errors.length; i++ ) {
			console.error( JSON.stringify( errors[ i ] ) ); // eslint-disable-line no-console
		}
		if ( errors.length ) {
			return cli.close( 1 );
		}
	}

	/**
	* Callback invoked upon encountering an error.
	*
	* @private
	* @param {Error} error - error object
	*/
	function onError( error ) {
		cli.error( error );
	}
}

main();
