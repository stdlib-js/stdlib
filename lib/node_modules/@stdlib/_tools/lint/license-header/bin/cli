#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/cli/ctor' );
var stdin = require( '@stdlib/process/read-stdin' );
var stdinStream = require( '@stdlib/streams/node/stdin' );
var isRegExpString = require( '@stdlib/assert/is-regexp-string' );
var reFromString = require( '@stdlib/utils/regexp-from-string' );
var replace = require( '@stdlib/string/replace' );
var cwd = require( '@stdlib/process/cwd' );
var lint = require( './../lib' );


// VARIABLES //

var RE_TRAILING_NEWLINE = /\r?\n$/;
var RE_C_COMMENT_BEGIN = /^\/\*/;
var RE_C_COMMENT_END = /\*\/$/;


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var header;
	var flags;
	var fopts;
	var args;
	var cli;
	var err;
	var dir;
	var tmp;

	fopts = {
		'encoding': 'utf8'
	};

	// Determine the current working directory:
	dir = cwd();

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), fopts )
	});

	// Get any provided command-line options:
	flags = cli.flags();
	if ( flags.help || flags.version ) {
		return;
	}

	// Get any provided command-line arguments:
	args = cli.args();

	if ( flags.header ) {
		tmp = resolve( dir, flags.header );
		tmp = readFileSync( tmp, fopts );
		if ( tmp instanceof Error ) {
			return onError( tmp );
		}
		// Remove single trailing newline:
		header = replace( tmp, RE_TRAILING_NEWLINE, '' );

		// Determine whether the "header" is a regular expression string or a literal header string:
		if (
			isRegExpString( header ) &&
			!(
				// NOTE: this check is not perfect (e.g., '/* beep */' could be a regular expression string, not a C-style comment)
				RE_C_COMMENT_BEGIN.test( header ) &&
				RE_C_COMMENT_END.test( header )
			)
		) {
			header = reFromString( header );
		}
	}
	if ( !stdinStream.isTTY ) {
		return stdin( onRead );
	}
	tmp = readFileSync( resolve( dir, args[ 0 ] ), fopts );
	if ( tmp instanceof Error ) {
		return onError( tmp );
	}
	err = lint( tmp, header );
	if ( err ) {
		return cli.error( new Error( err.error ) );
	}

	/**
	* Callback invoked upon reading from `stdin`.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Buffer} data - data
	* @returns {void}
	*/
	function onRead( error, data ) {
		var err;
		if ( error ) {
			return onError( error );
		}
		err = lint( data, header );
		if ( err ) {
			return cli.error( new Error( err.error ) );
		}
	}

	/**
	* Callback invoked upon encountering an error.
	*
	* @private
	* @param {Error} error - error object
	*/
	function onError( error ) {
		cli.error( error );
	}
}

main();
