/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isBuffer = require( '@stdlib/assert/is-buffer' );
var isRegExp = require( '@stdlib/assert/is-regexp' );
var format = require( '@stdlib/string/format' );
var reEOL = require( '@stdlib/regexp/eol' );
var reFromString = require( '@stdlib/utils/regexp-from-string' );
var replace = require( '@stdlib/string/replace' );


// VARIABLES //

// Maximum line number at which a license header should start:
var START_THRESHOLD = 4;

// RegExp to test if a regular expression has a "global" flag:
var RE_GLOBAL_FLAG = /\/[\s\S]*\/.*g.*$/;

// RegExp to match regular expression special characters:
var RE_REGEXP_CHARS = /[-\/\\^$*+?.()|[\]{}]/g; // eslint-disable-line no-useless-escape

// Regular expression to match end-of-line characters for both Windows and POSIX:
var RE_EOL = reEOL({
	'flags': 'g'
});


// MAIN //

/**
* Lints a file blob against a specified license header.
*
* @param {(string|Buffer)} blob - file blob to lint
* @param {(string|RegExp)} header - license header against which to lint
* @throws {TypeError} first argument must be either a string or Buffer
* @throws {TypeError} second argument must be either a string or regular expression
* @returns {(Object|null)} lint error or null
*
* @example
* var str = [
*     '// This file is licensed under Apache-2.0.',
*     '',
*     '"use strict";',
*     '',
*     'var x = 3.14;',
*     ''
* ];
* str = str.join( '\n' );
*
* var header = '// This file is licensed under MIT.';
*
* var err = lint( str, header );
* // returns {...}
*/
function lint( blob, header ) {
	var isStr;
	var tmp;
	if ( !isString( blob ) && !isBuffer( blob ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be either a string or Buffer. Value: `%s`.', blob ) );
	}
	isStr = isString( header );
	if ( !isStr && !isRegExp( header ) ) {
		throw new TypeError( format( 'invalid argument. Second argument must be either a string or regular expression. Value: `%s`.', header ) );
	}
	blob = blob.toString();

	// Replace all end-of-line characters with a POSIX end-of-line character:
	blob = replace( blob, RE_EOL, '\n' );
	if ( isStr ) {
		// Convert to a regular expression...
		header = replace( header, RE_REGEXP_CHARS, '\\$&' );
		header = reFromString( '/'+header+'/g' );
	} else if ( RE_GLOBAL_FLAG.test( header.toString() ) === false ) {
		// Clone the regular expression to allow checking for multiple headers:
		header = reFromString( header.toString()+'g' );
	}

	// Check for the presence of a license header:
	tmp = blob.match( header );
	if ( tmp === null ) {
		return {
			'error': 'malformed or missing license header.'
		};
	}
	// Check for multiple headers in the same file:
	if ( tmp.length > 1 ) {
		return {
			'error': 'more than 1 license header.'
		};
	}
	// Check header location...
	tmp = blob.search( header );
	tmp = blob.substring( 0, tmp );
	tmp = tmp.split( RE_EOL ).length;
	if ( tmp > START_THRESHOLD ) {
		return {
			'error': 'license header should appear within the first 5 lines of a file. Starting line: '+(tmp-1)+'.'
		};
	}
	return null;
}


// EXPORTS //

module.exports = lint;
