#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var join = require( 'path' ).join;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/cli/ctor' );
var stdin = require( '@stdlib/process/read-stdin' );
var regexp = require( '@stdlib/utils/regexp-from-string' );
var RE_EOL = require( '@stdlib/regexp/eol' ).REGEXP;
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var stdinStream = require( '@stdlib/streams/node/stdin' );
var nextTick = require( '@stdlib/utils/next-tick' );
var bundle = require( './../lib' );


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var flags;
	var args;
	var pkgs;
	var opts;
	var cli;
	var sep;
	var err;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( join( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line options:
	flags = cli.flags();
	if ( flags.help || flags.version ) {
		return;
	}

	// Get any provided command-line arguments:
	args = cli.args();

	// Extract options...
	opts = {};
	if ( flags.namespace ) {
		opts.namespace = flags.namespace;
	}
	if ( flags.bundler ) {
		opts.bundler = flags.bundler;
	}
	if ( flags.standalone ) {
		opts.standalone = flags.standalone;
	}
	if ( flags[ 'require-name' ] ) {
		opts.requireName = flags[ 'require-name' ];
	}
	if ( flags[ 'export-name' ] ) {
		opts.exportName = flags[ 'export-name' ];
	}
	if ( flags.transform ) {
		if ( isString( flags.transform ) ) {
			opts.transforms = [ flags.transform ];
		} else {
			opts.transforms = flags.transform;
		}
	}
	if ( flags.plugin ) {
		if ( isString( flags.plugin ) ) {
			opts.plugins = [ flags.plugin ];
		} else {
			opts.plugins = flags.plugin;
		}
	}
	if ( flags.external ) {
		if ( isString( flags.external ) ) {
			opts.external = [ flags.external ];
		} else {
			opts.external = flags.external;
		}
	}
	if ( flags.path ) {
		if ( isString( flags.path ) ) {
			opts.paths = [ flags.path ];
		} else {
			opts.paths = flags.path;
		}
	}
	if ( flags.split ) {
		sep = regexp( flags.split );
		if ( sep === null ) {
			// If the previous command "failed", we were not provided a regular expression:
			sep = flags.split;
		}
	} else {
		sep = RE_EOL;
	}
	// Check if we are receiving data from `stdin`...
	if ( !stdinStream.isTTY ) {
		return stdin( onData );
	}
	pkgs = args.slice();
	if ( pkgs.length === 0 ) {
		err = new Error( 'no input. Must provide a list of packages as command-line arguments or via `stdin`.' );
		return cli.error( err );
	}
	nextTick( next );

	/**
	* Callback invoked after attempting to read data from `stdin`.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Buffer} data - `stdin` data
	* @returns {void}
	*/
	function onData( error, data ) {
		var i;
		if ( error ) {
			return cli.error( error );
		}
		data = data.toString();
		if ( data === '' ) {
			error = new Error( 'no input. Process is not running in a TTY context and yet received no data on `stdin`.' );
			return cli.error( error );
		}
		data = data.split( sep );
		pkgs = [];
		for ( i = 0; i < data.length; i++ ) {
			// Account for empty elements...
			if ( data[ i ] ) {
				pkgs.push( data[ i ] );
			}
		}
		next();
	}

	/**
	* Callback invoked once ready to generate a bundle.
	*
	* @private
	*/
	function next() {
		bundle( pkgs, opts, done );
	}

	/**
	* Callback invoked after generating a bundle.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {(string|Buffer)} bundle - bundle
	* @returns {void}
	*/
	function done( error, bundle ) {
		if ( error ) {
			return cli.error( error );
		}
		console.log( bundle.toString() ); // eslint-disable-line no-console
	}
}

main();
