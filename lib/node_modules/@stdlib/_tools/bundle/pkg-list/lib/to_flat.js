/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var logger = require( 'debug' );
var objectKeys = require( '@stdlib/utils/keys' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var pkg2alias = require( './pkg_to_alias.js' );


// VARIABLES //

var debug = logger( 'bundle-pkg-list:to-flat-namespace' );


// MAIN //

/**
* Converts a list of packages to a flat namespace.
*
* @private
* @param {StringArray} pkgs - list of packages (sorted lexicographically)
* @returns {ArrayArray} package namespace where the first element is the package alias and the second element is the package identifier
*
* @example
* var pkgs = [
*     '@stdlib/math/base/special/erf',
*     '@stdlib/math/base/special/erfc',
*     'tape'
* ];
*
* var out = toFlat( pkgs );
* // e.g., returns [ [ 'base.erf', '@stdlib/math/base/special/erf' ], [ 'base.erfc', '@stdib/math/base/special/erfc' ], [ 'tape', 'tape' ] ]
*/
function toFlat( pkgs ) {
	var keys;
	var tmp;
	var out;
	var key;
	var id;
	var i;

	tmp = {};
	for ( i = 0; i < pkgs.length; i++ ) {
		id = pkgs[ i ];

		debug( 'Converting package %s to an alias...', id );
		key = pkg2alias( id );

		// Check for a duplicate key...
		if ( hasOwnProp( tmp, key ) ) {
			debug( 'WARNING: found a duplicate key: %s. Overriding currently assigned alias.', key );
		}
		debug( 'Mapping package %s to alias %s.', id, key );
		tmp[ key ] = id;
	}
	keys = objectKeys( tmp );
	out = new Array( keys.length );
	for ( i = 0; i < keys.length; i++ ) {
		key = keys[ i ];
		out[ i ] = [ key, tmp[ key ] ];
	}
	return out;
}


// EXPORTS //

module.exports = toFlat;
