/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isPlainObject = require( '@stdlib/assert/is-plain-object' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var indexOf = require( '@stdlib/utils/index-of' );
var isArray = require( '@stdlib/assert/is-array' );
var isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;
var format = require( '@stdlib/string/format' );


// VARIABLES //

var BUNDLERS = [ 'browserify' ];
var NS = [ 'tree', 'flat', 'none' ];


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {string} [options.namespace] - bundle namespace
* @param {string} [options.bundler] - bundler
* @param {string} [options.standalone] - standalone browserify bundle export name
* @param {string} [options.requireName] - `require` name
* @param {string} [options.exportName] - bundle target name
* @param {Array} [options.transforms] - transforms to apply when bundling
* @param {Array} [options.plugins] - plugins to apply when bundling
* @param {StringArray} [options.external] - module(s) to omit from a generated bundle
* @param {StringArray} [options.paths] - directory paths in which to search for modules referenced via non-relative paths
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'namespace': 'flat',
*     'bundler': 'browserify'
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function validate( opts, options ) {
	if ( !isPlainObject( options ) ) {
		return new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );
	}
	if ( hasOwnProp( options, 'namespace' ) ) {
		opts.namespace = options.namespace;
		if ( !isString( opts.namespace ) ) {
			return new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'namespace', opts.namespace ) );
		}
		if ( indexOf( NS, opts.namespace ) === -1 ) {
			return new RangeError( format( 'invalid option. `%s` option must be one of the following: "%s". Option: `%s`.', 'namespace', NS.join( '", "' ), opts.namespace ) );
		}
	}
	if ( hasOwnProp( options, 'bundler' ) ) {
		opts.bundler = options.bundler;
		if ( !isString( opts.bundler ) ) {
			return new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'bundler', opts.bundler ) );
		}
		if ( indexOf( BUNDLERS, opts.bundler ) === -1 ) {
			return new RangeError( format( 'invalid option. `%s` option must be one of the following: "%s". Option: `%s`.', 'bundler', BUNDLERS.join( '", "' ), opts.bundler ) );
		}
	}
	if ( hasOwnProp( options, 'requireName' ) ) {
		opts.requireName = options.requireName;
		if ( !isString( opts.requireName ) ) {
			return new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'requireName', opts.requireName ) );
		}
	}
	if ( hasOwnProp( options, 'exportName' ) ) {
		opts.exportName = options.exportName;
		if ( !isString( opts.exportName ) ) {
			return new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'exportName', opts.exportName ) );
		}
	}
	if ( hasOwnProp( options, 'standalone' ) ) {
		opts.standalone = options.standalone;
		if ( !isString( opts.standalone ) ) {
			return new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'standalone', opts.standalone ) );
		}
	}
	if ( hasOwnProp( options, 'transforms' ) ) {
		opts.transforms = options.transforms;
		if ( !isArray( opts.transforms ) ) {
			return new TypeError( format( 'invalid option. `%s` option must be an array. Option: `%s`.', 'transforms', opts.transforms ) );
		}
	}
	if ( hasOwnProp( options, 'plugins' ) ) {
		opts.plugins = options.plugins;
		if ( !isArray( opts.plugins ) ) {
			return new TypeError( format( 'invalid option. `%s` option must be an array. Option: `%s`.', 'plugins', opts.plugins ) );
		}
	}
	if ( hasOwnProp( options, 'external' ) ) {
		opts.external = options.external;
		if ( !isStringArray( opts.external ) ) {
			return new TypeError( format( 'invalid option. `%s` option must be an array of strings. Option: `%s`.', 'external', opts.external ) );
		}
	}
	if ( hasOwnProp( options, 'paths' ) ) {
		opts.paths = options.paths;
		if ( !isStringArray( opts.paths ) ) {
			return new TypeError( format( 'invalid option. `%s` option must be an array of strings. Option: `%s`.', 'paths', opts.paths ) );
		}
	}
	return null;
}


// EXPORTS //

module.exports = validate;
