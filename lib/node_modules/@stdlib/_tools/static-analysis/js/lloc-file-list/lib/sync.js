/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var logger = require( 'debug' );
var isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;
var lloc = require( '@stdlib/_tools/static-analysis/js/lloc' );
var incrlloc = require( '@stdlib/_tools/static-analysis/js/incr/lloc' );
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var format = require( '@stdlib/string/format' );
var cwd = require( '@stdlib/process/cwd' );
var defaults = require( './defaults.json' );
var validate = require( './validate.js' );


// VARIABLES //

var debug = logger( 'js-lloc-file-list:sync' );
var fopts = {
	'encoding': 'utf8'
};


// MAIN //

/**
* Synchronously calculates logical lines of code (LLOC) for a list of JavaScript files.
*
* @param {StringArray} files - list of files
* @param {Options} [options] - function options
* @param {boolean} [options.cumulative=true] - boolean indicating whether to perform a cumulative analysis
* @throws {TypeError} first argument must be a list of file paths
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {(Error|Object|NonNegativeIntegerArray)} analysis results or an error object
*
* @example
* var files = [ __filename ];
*
* var results = analyze( files );
* if ( results instanceof Error ) {
*     throw results;
* }
* console.log( JSON.stringify( results ) );
*/
function analyze( files, options ) {
	var results;
	var nfiles;
	var opts;
	var file;
	var err;
	var acc;
	var dir;
	var i;
	if ( !isStringArray( files ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be a list of file paths. Value: `%s`.', files ) );
	}
	nfiles = files.length;
	debug( 'Files: %s', files.join( ', ' ) );

	dir = cwd();
	debug( 'Current working directory: %s', dir );

	opts = {};
	opts.cumulative = defaults.cumulative;
	if ( arguments.length > 1 ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	debug( 'Options: %s', JSON.stringify( opts ) );

	if ( opts.cumulative ) {
		acc = incrlloc();
	} else {
		results = [];
	}
	debug( 'Starting analysis of %d files...', nfiles );
	for ( i = 0; i < nfiles; i++ ) {
		debug( 'Reading file: %s (%d of %d)', files[ i ], i+1, nfiles );
		file = resolve( dir, files[ i ] );
		file = readFileSync( file, fopts );
		if ( file instanceof Error ) {
			debug( 'Encountered an error when reading file: %s (%d of %d). Error: %s', files[ i ], i+1, nfiles, file.message );
			return file;
		}
		debug( 'Successfully read file: %s (%d of %d).', files[ i ], i+1, nfiles );
		if ( opts.cumulative ) {
			debug( 'Updating cumulative summary...' );
			acc( file );
		} else {
			debug( 'Calculating LLOC...' );
			results.push( lloc( file ) );
		}
		debug( 'Finished analyzing file %d of %d.', i+1, nfiles );
	}
	if ( opts.cumulative ) {
		debug( 'Finished analysis. Returning cumulative results...' );
		return acc();
	}
	debug( 'Finished analysis. Returning results...' );
	return results;
}


// EXPORTS //

module.exports = analyze;
