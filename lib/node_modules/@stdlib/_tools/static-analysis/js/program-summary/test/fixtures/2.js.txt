/* key: <sloc> (<lloc>) */
'use strict'; // 1 (1)

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' ); // 2 (2)
var isInfinite = require( '@stdlib/math/base/assert/is-infinite' ); // 3 (3)
var PINF = require( '@stdlib/constants/float64/pinf' ); // 4 (4)
var sqrt = require( '@stdlib/math/base/special/sqrt' ); // 5 (5)


// MAIN //

/**
* Computes the hypotenuse avoiding overflow and underflow.
*
* @param {number} x - number
* @param {number} y - number
* @returns {number} hypotenuse
*
* @example
* * var h = hypot( -5.0, 12.0 );
* // returns 13.0
*
* @example
* var h = hypot( NaN, 12.0 );
* // returns NaN
*
* @example
* var h = hypot( -0.0, -0.0 );
* // returns 0.0
*/
function hypot( x, y ) { // 6 (6)
	var tmp; // 7 (7)
	if ( isnan( x ) || isnan( y ) ) { // 8 (8)
		return NaN; // 9 (9)
	} // 10
	if ( isInfinite( x ) || isInfinite( y ) ) { // 11 (10)
		return PINF; // 12 (11)
	} // 13
	if ( x < 0.0 ) { // 14 (12)
		x = -x; // 15 (13)
	} // 16
	if ( y < 0.0 ) { // 17 (14)
		y = -y; // 18 (15)
	} // 19
	if ( x < y ) { // 20 (16)
		tmp = y; // 21 (17)
		y = x; // 22 (18)
		x = tmp; // 23 (19)
	} // 24
	if ( x === 0.0 ) { // 25 (20)
		return 0.0; // 26 (21)
	} // 27
	y /= x; // 28 (22)
	return x * sqrt( 1.0 + (y*y) ); // 29 (23)
} // 30


// EXPORTS //

module.exports = hypot; // 31 (24)
