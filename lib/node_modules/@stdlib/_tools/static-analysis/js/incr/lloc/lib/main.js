/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var incrsummary = require( '@stdlib/stats/incr/summary' );
var lloc = require( '@stdlib/_tools/static-analysis/js/lloc' );


// MAIN //

/**
* Returns an accumulator function for incrementally computing logical lines of code (LLOC).
*
* @returns {Function} accumulator function
*
* @example
* var acc = analyze();
*/
function analyze() {
	var acc = incrsummary();
	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated logical lines of code (LLOC) summary. If not provided a value, the accumulator function returns the current LLOC summary.
	*
	* @private
	* @param {(string|Buffer)} [input] - input program
	* @throws {TypeError} must provide either a string or Buffer
	* @returns {Object} LLOC summary
	*
	* @example
	* var lloc = accumulator();
	* // returns {}
	*
	* lloc = accumulator( '"use strict";\n\nvar y = 5;\n' );
	* // returns {...}
	*
	* lloc = accumulator( '"use strict";\n\nmodule.exports = "beep";\n' );
	* // returns {...}
	*
	* lloc = accumulator();
	* // returns {...}
	*/
	function accumulator( input ) {
		if ( arguments.length === 0 ) {
			return acc();
		}
		return acc( lloc( input ) );
	}
}


// EXPORTS //

module.exports = analyze;

