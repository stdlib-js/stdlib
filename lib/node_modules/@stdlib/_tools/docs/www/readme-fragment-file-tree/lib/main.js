/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var logger = require( 'debug' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isFunction = require( '@stdlib/assert/is-function' );
var copy = require( '@stdlib/utils/copy' );
var cwd = require( '@stdlib/process/cwd' );
var createDatabase = require( '@stdlib/_tools/docs/www/readme-database' );
var format = require( '@stdlib/string/format' );
var write = require( './write.js' );
var validate = require( './validate.js' );
var DEFAULTS = require( './defaults.json' );


// VARIABLES //

var debug = logger( 'readme-fragment-file-tree:async' );


// MAIN //

/**
* Asynchronously generates an HTML rendered package README file tree.
*
* @param {string} dest - output directory
* @param {Options} [options] - function options
* @param {string} [options.dir] - root directory from which to search for package READMEs
* @param {string} [options.pattern='**\/package.json'] - glob pattern
* @param {StringArray} [options.ignore] - glob pattern(s) to exclude matches
* @param {string} [options.base="/docs/api/develop/"] - base path for internal URLs
* @param {Function} clbk - callback
* @throws {TypeError} first argument must be a string
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} `pattern` option must end with `package.json`
* @throws {TypeError} last argument must be a callback function
*
* @example
* build( './build', done );
*
* function done( error ) {
*     if ( error ) {
*         console.error( error.message );
*         return;
*     }
*     console.log( 'Finished' );
* }
*/
function build( dest, options, clbk ) {
	var opath;
	var opts;
	var err;
	var cd;
	var cb;

	opts = copy( DEFAULTS );
	if ( arguments.length > 2 ) {
		cb = clbk;
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	} else {
		cb = options;
	}
	if ( !isString( dest ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', dest ) );
	}
	if ( !isFunction( cb ) ) {
		throw new TypeError( format( 'invalid argument. Last argument must be a function. Value: `%s`.', cb ) );
	}
	cd = cwd();
	if ( opts.dir ) {
		opts.dir = resolve( cd, opts.dir );
	} else {
		opts.dir = cd;
	}
	debug( 'Options: %s', JSON.stringify( opts ) );

	opath = resolve( cd, dest );
	debug( 'Output directory: %s', opath );

	debug( 'Building README database...' );
	createDatabase( opts, onDatabase );

	/**
	* Callback invoked after building a README database.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Object} db - database
	* @returns {void}
	*/
	function onDatabase( error, db ) {
		if ( error ) {
			return done( error );
		}
		debug( 'Finished building database.' );

		debug( 'Writing file contents...' );
		write( opts.dir, opath, db, done );
	}

	/**
	* Callback invoked upon writing file contents.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @returns {void}
	*/
	function done( error ) {
		if ( error ) {
			debug( 'Encountered an error: %s', error.message );
			return cb( error );
		}
		debug( 'Finished writing file contents.' );
		cb();
	}
}


// EXPORTS //

module.exports = build;
