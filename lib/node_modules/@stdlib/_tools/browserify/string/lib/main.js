/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var join = require( 'path' ).join;
var logger = require( 'debug' );
var browserify = require( 'browserify' );
var isFunction = require( '@stdlib/assert/is-function' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isArray = require( '@stdlib/assert/is-array' );
var tmpdir = require( '@stdlib/os/tmpdir' );
var writeFile = require( '@stdlib/fs/write-file' );
var rmfile = require( '@stdlib/fs/unlink' );
var minstd = require( '@stdlib/random/base/minstd' );
var format = require( '@stdlib/string/format' );
var cwd = require( '@stdlib/process/cwd' );
var IS_WINDOWS = require( '@stdlib/assert/is-windows' );
var ENV = require( '@stdlib/process/env' );
var validate = require( './validate.js' );


// VARIABLES //

var debug = logger( 'browserify:string' );
var TMPFILE = join( tmpdir(), '.__browserify-string-tmp-file_' );


// MAIN //

/**
* Generates a bundle from a string using `browserify`.
*
* @param {string} str - input string
* @param {string} [dest] - output file path
* @param {Options} [options] - browserify options
* @param {string} [options.standalone] - standalone browserify bundle export name
* @param {string} [options.exportName] - bundle target name
* @param {string} [options.requireName] - name of function exposed to supporting external loading of modules from a browserify bundle
* @param {Array} [options.transforms] - transforms to apply when bundling
* @param {Array} [options.plugins] - plugins to apply when bundling
* @param {StringArray} [options.external] - module(s) to omit from a generated bundle which can be assumed to be present in a separate external bundle
* @param {Callback} clbk - callback to invoke after creating a bundle
* @throws {TypeError} first argument must be a string
* @throws {TypeError} the output file path must be a string
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {TypeError} last argument must be a function
*
* @example
* var str = 'module.exports = require( "@stdlib/_tools/browserify/string" );';
*
* bundle( str, clbk );
*
* function clbk( error, bundle ) {
*     if ( error ) {
*         throw error;
*     }
*     console.log( bundle.toString() );
* }
*/
function bundle( str, dest, options, clbk ) {
	var tmpfile;
	var nargs;
	var opts;
	var err;
	var out;
	var cb;
	var v;
	var i;

	if ( !isString( str ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );
	}
	nargs = arguments.length;
	opts = {};
	if ( nargs === 2 ) {
		cb = dest;
	} else if ( nargs >= 4 ) {
		if ( !isString( dest ) ) {
			throw new TypeError( format( 'invalid argument. Second argument must be a string. Value: `%s`.', dest ) );
		}
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
		out = dest;
		cb = clbk;
	} else if ( isString( dest ) ) {
		cb = options;
	} else {
		err = validate( opts, dest );
		if ( err ) {
			throw err;
		}
		cb = options;
	}
	if ( !isFunction( cb ) ) {
		throw new TypeError( format( 'invalid argument. Last argument must be a function. Value: `%s`.', cb ) );
	}
	if ( opts.basedir === void 0 ) {
		opts.basedir = cwd();
	}
	if ( opts.paths === void 0 ) {
		opts.paths = [];
		if ( ENV.NODE_PATH ) {
			if ( IS_WINDOWS ) {
				v = ENV.NODE_PATH.split( ';' );
			} else {
				v = ENV.NODE_PATH.split( ':' );
			}
			for ( i = 0; i < v.length; i++ ) {
				opts.paths.push( v[ i ] );
			}
		}
		opts.paths.push( cwd() );
	}
	debug( 'Browserify options: %s', JSON.stringify( opts ) );

	tmpfile = TMPFILE + minstd() + '.js';
	writeFile( tmpfile, str, onTmpFile );

	/**
	* Callback invoked upon generating a temporary file.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @returns {void}
	*/
	function onTmpFile( error ) {
		var b;
		var v;
		var i;
		if ( error ) {
			debug( 'Encountered an error when creating a temporary file: %s', error.message );
			return done( error );
		}
		if ( opts.standalone ) {
			b = browserify( tmpfile, opts );
		} else if ( opts.exportName ) {
			b = browserify( opts );
			b.require( tmpfile, {
				'expose': opts.exportName
			});
		} else {
			b = browserify( tmpfile, opts );
		}
		if ( opts.transforms ) {
			for ( i = 0; i < opts.transforms.length; i++ ) {
				v = opts.transforms[ i ];
				if ( isArray( v ) ) {
					b.transform( v[ 0 ], v[ 1 ] );
				} else {
					b.transform( v );
				}
			}
		}
		if ( opts.plugins ) {
			for ( i = 0; i < opts.plugins.length; i++ ) {
				v = opts.plugins[ i ];
				if ( isArray( v ) ) {
					b.plugin( v[ 0 ], v[ 1 ] );
				} else {
					b.plugin( v );
				}
			}
		}
		if ( opts.external ) {
			b.external( opts.external );
		}
		debug( 'Creating a bundle...' );
		b.bundle( onBundle );
	}

	/**
	* Callback invoked upon creating a bundle.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Buffer} bundle - bundle
	* @returns {void}
	*/
	function onBundle( error, bundle ) {
		var opts;
		if ( error ) {
			debug( 'Encountered an error when creating a bundle: %s', error.message );
			return done( error );
		}
		debug( 'Successfully created a bundle.' );
		if ( out === void 0 ) {
			return done( null, bundle );
		}
		debug( 'Writing bundle to file...' );
		opts = {
			'encoding': 'utf8'
		};
		writeFile( out, bundle, opts, onWrite );
	}

	/**
	* Callback invoked upon writing a file.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @returns {void}
	*/
	function onWrite( error ) {
		if ( error ) {
			debug( 'Encountered an error when writing bundle to file: %s', error.message );
			return done( error );
		}
		debug( 'Successfully wrote bundle to file.' );
		done();
	}

	/**
	* Callback invoked upon removing a temporary file.
	*
	* @private
	* @param {Error} [error] - error object
	* @returns {void}
	*/
	function onDelete( error ) {
		if ( error ) {
			debug( 'Encountered an error when deleting temporary file: %s', error.message );
			return console.error( 'WARNING: encountered an error when deleting temporary file. Error: %s', error.message ); // eslint-disable-line no-console
		}
		debug( 'Successfully deleted temporary file.' );
	}

	/**
	* Callback invoked upon completion.
	*
	* @private
	* @param {(Error|null)} [error] - error object
	* @param {(string|Buffer)} [bundle] - bundle
	* @returns {void}
	*/
	function done( error, bundle ) {
		debug( 'Deleting temporary file...' );
		rmfile( tmpfile, onDelete );
		if ( error ) {
			return cb( error );
		}
		debug( 'Finished.' );
		if ( bundle ) {
			return cb( null, bundle );
		}
		cb();
	}
}


// EXPORTS //

module.exports = bundle;
