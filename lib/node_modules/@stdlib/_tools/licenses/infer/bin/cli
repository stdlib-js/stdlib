#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var join = require( 'path' ).join;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/cli/ctor' );
var RE_EOL = require( '@stdlib/regexp/eol' ).REGEXP;
var stdin = require( '@stdlib/process/read-stdin' );
var stdout = require( '@stdlib/streams/node/stdout' );
var isRegExpString = require( '@stdlib/assert/is-regexp-string' );
var reFromString = require( '@stdlib/utils/regexp-from-string' );
var infer = require( './../lib' );


// FUNCTIONS //

/**
* Pretty prints results.
*
* @private
* @param {(ObjectArray|EmptyArray)} results - results
* @returns {void}
*/
function prettyPrint( results ) {
	/* eslint-disable no-console */
	var licenses;
	var license;
	var src;
	var sym;
	var i;
	var j;
	if ( results.length ) {
		console.log( '\nPackage license information:\n' );
		for ( i = 0; i < results.length; i++ ) {
			console.log( results[ i ].id );
			console.log( '├── path: %s', results[ i ].pkg );
			console.log( '├── repo: %s', results[ i ].repo || 'UNKNOWN' );
			licenses = results[ i ].licenses;
			if ( licenses.length ) {
				for ( j = 0; j < licenses.length; j++ ) {
					license = licenses[ j ];
					if ( /package\.json$/i.test( license.src ) ) {
						src = 'package.json';
					} else if ( /readme.*$/i.test( license.src ) ) {
						src = 'readme';
					} else {
						src = 'license';
					}
					if ( j < licenses.length-1 ) {
						sym = '├──';
					} else {
						sym = '└──';
					}
					console.log( '%s %s: %s', sym, src, license.name );
				}
			} else {
				console.log( '└── license: UNKNOWN' );
			}
			console.log( '' );
		}
		return;
	}
	console.log( 'No license information.' );

	/* eslint-enable no-console */
}

/**
* Prints results as newline-delimited JSON (NDJSON).
*
* @private
* @param {(ObjectArray|EmptyArray)} results - results
*/
function printNDJSON( results ) {
	var i;
	for ( i = 0; i < results.length; i++ ) {
		console.log( JSON.stringify( results[ i ] ) ); // eslint-disable-line no-console
	}
}


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var pattern;
	var split;
	var flags;
	var cli;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( join( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line options:
	flags = cli.flags();
	if ( flags.help || flags.version ) {
		return;
	}

	if ( flags.split ) {
		if ( !isRegExpString( flags.split ) ) {
			flags.split = '/'+flags.split+'/';
		}
		split = reFromString( flags.split );
	} else {
		split = RE_EOL;
	}

	if ( flags.pattern ) {
		pattern = flags.pattern;
	} else {
		pattern = '{readme*,licen[cs]e*,copying*}';
	}
	stdin( 'utf8', onRead );

	/**
	* Callback invoked after reading `stdin`.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {string} data - data
	* @returns {void}
	*/
	function onRead( error, data ) {
		var results;
		var i;
		if ( error ) {
			return cli.error( error );
		}
		data = data.toString().split( split );

		// Remove any trailing separators (e.g., trailing newline)...
		if ( data[ data.length-1 ] === '' ) {
			data.pop();
		}
		results = [];
		for ( i = 0; i < data.length; i++ ) {
			if ( data[ i ] ) {
				results.push( JSON.parse( data[ i ] ) );
			}
		}
		infer( results, pattern, onInfer );
	}

	/**
	* Callback invoked upon inferring license information.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {(ObjectArray|EmptyArray)} results - results
	* @returns {void}
	*/
	function onInfer( error, results ) {
		if ( error ) {
			return cli.error( error );
		}
		if ( stdout.isTTY ) {
			return prettyPrint( results );
		}
		printNDJSON( results );
	}
}

main();
