/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isBuffer = require( '@stdlib/assert/is-buffer' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isRegExp = require( '@stdlib/assert/is-regexp' );
var string2buffer = require( '@stdlib/buffer/from-string' );
var removeHeader = require( '@stdlib/_tools/licenses/remove-header' );
var insertHeader = require( '@stdlib/_tools/licenses/insert-header' );
var format = require( '@stdlib/string/format' );


// MAIN //

/**
* Updates a license header in a source code string.
*
* @param {(string|Buffer)} src - source code
* @param {(string|Buffer|RegExp)} old - license header to remove
* @param {(string|Buffer)} header - license header to insert
* @throws {TypeError} first argument must be either a string or Buffer
* @throws {TypeError} second argument must be either a string, Buffer, or regular expression
* @throws {TypeError} third argument must be either a string or Buffer
* @returns {(string|Buffer)} transformed source code
*
* @example
* var re = /\/\/ @license Apache-2\.0\n\n/;
*
* var h = '/* @license Apache-2.0 *\/';
*
* var src = [
*     '// @license Apache-2.0',
*     '',
*     '"use strict";',
*     '',
*     'var x = 3.14;',
*     ''
* ];
*
* var out = updateHeader( src.join( '\n' ), re, h );
* // returns <string>
*/
function updateHeader( src, old, header ) {
	var isStr = isString( src );
	if ( !isStr && !isBuffer( src ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be either a string or Buffer. Value: `%s`.', src ) );
	} else {
		src = src.toString();
	}
	if ( !isRegExp( old ) && !isString( old ) && !isBuffer( old ) ) {
		throw new TypeError( format( 'invalid argument. Second argument must be either a string, Buffer, or regular expression. Value: `%s`.', old ) );
	}
	if ( !isString( header ) && !isBuffer( header ) ) {
		throw new TypeError( format( 'invalid argument. Third argument must be either a string or Buffer. Value: `%s`.', header ) );
	}
	src = removeHeader( src, old );
	src = insertHeader( src, header );

	// If provided a source code buffer, return a source code buffer...
	if ( !isStr ) {
		return string2buffer( src );
	}
	return src;
}


// EXPORTS //

module.exports = updateHeader;
