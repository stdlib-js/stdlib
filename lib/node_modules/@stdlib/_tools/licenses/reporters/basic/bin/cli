#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var join = require( 'path' ).join;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/cli/ctor' );
var stdin = require( '@stdlib/process/read-stdin' );
var reporter = require( './../lib' );


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var flags;
	var cli;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( join( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line options:
	flags = cli.flags();
	if ( flags.help || flags.version ) {
		return;
	}

	stdin( 'utf8', onRead );

	/**
	* Callback invoked after reading `stdin`.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {string} data - data
	* @returns {void}
	*/
	function onRead( error, data ) {
		/* eslint-disable no-console */
		var licenses;
		var license;
		var results;
		var sym;
		var src;
		var i;
		var j;
		if ( error ) {
			return cli.error( error );
		}
		data = data.toString().split( /\r?\n/g );
		results = [];
		for ( i = 0; i < data.length; i++ ) {
			if ( data[ i ] ) {
				results.push( JSON.parse( data[ i ] ) );
			}
		}
		results = reporter( results );
		if ( results.length ) {
			console.log( '\nPackage licenses:\n' );
			for ( i = 0; i < results.length; i++ ) {
				console.log( results[ i ].id );
				licenses = results[ i ].licenses;
				if ( licenses.length ) {
					for ( j = 0; j < licenses.length; j++ ) {
						license = licenses[ j ];
						if ( /package\.json$/i.test( license.src ) ) {
							src = 'package.json';
						} else if ( /readme.*$/i.test( license.src ) ) {
							src = 'readme';
						} else {
							src = 'license';
						}
						if ( j < licenses.length-1 ) {
							sym = '├──';
						} else {
							sym = '└──';
						}
						console.log( '%s %s: %s', sym, src, license.name );
					}
				} else {
					console.log( '└── license: UNKNOWN' );
				}
				console.log( '' );
			}
		}

		/* eslint-enable no-console */
	}
}

main();
