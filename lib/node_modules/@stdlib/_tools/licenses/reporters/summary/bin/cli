#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var join = require( 'path' ).join;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/cli/ctor' );
var stdin = require( '@stdlib/process/read-stdin' );
var round = require( '@stdlib/math/base/special/round' );
var reporter = require( './../lib' );


// FUNCTIONS //

/**
* Sort function.
*
* @private
* @param {Array} a - input array
* @param {Array} b - input array
* @returns {number} number indicating if `a` should be sorted to a lower index than `b`
*/
function comparator( a, b ) {
	if ( a[ 1 ] > b[ 1 ] ) {
		return -1;
	}
	if ( a[ 1 ] < b[ 1 ] ) {
		return 1;
	}
	return 0;
}


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var flags;
	var cli;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( join( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line options:
	flags = cli.flags();
	if ( flags.help || flags.version ) {
		return;
	}

	stdin( 'utf8', onRead );

	/**
	* Callback invoked after reading `stdin`.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {string} data - data
	* @returns {void}
	*/
	function onRead( error, data ) {
		/* eslint-disable no-console */
		var results;
		var percent;
		var total;
		var name;
		var sym;
		var tmp;
		var x;
		var i;
		if ( error ) {
			return cli.error( error );
		}
		data = data.toString().split( /\r?\n/g );
		results = [];
		for ( i = 0; i < data.length; i++ ) {
			if ( data[ i ] ) {
				results.push( JSON.parse( data[ i ] ) );
			}
		}
		results = reporter( results );

		console.log( '\nLicense summary:\n' );

		total = results.dependencies.length;
		console.log( 'Dependencies: %d', total );

		x = results.licenses.length;
		console.log( 'Licenses: %s', x );

		x = total - results.valid.length;
		percent = round( x / total * 100.0 );
		console.log( 'Invalid SPDX ids: %d (%d%%)', x, percent );

		x = results.missing.length;
		percent = round( x / total * 100.0 );
		console.log( 'Missing licenses: %d (%d%%)', x, percent );

		x = results.ambiguous.length;
		percent = round( x / total * 100.0 );
		console.log( 'Ambiguous licenses: %d (%d%%)', x, percent );

		console.log( '\nLicenses:' );
		tmp = new Array( results.licenses.length );
		for ( i = 0; i < tmp.length; i++ ) {
			name = results.licenses[ i ];
			tmp[ i ] = [ name, results.totals[ name ] ];
		}
		tmp.sort( comparator );
		for ( i = 0; i < tmp.length; i++ ) {
			if ( i < tmp.length-1 ) {
				sym = '├──';
			} else {
				sym = '└──';
			}
			x = tmp[ i ][ 1 ];
			percent = round( x / total * 100.0 );
			console.log( '%s %d (%d%%): %s', sym, x, percent, tmp[ i ][ 0 ] );
		}
		console.log( '' );

		/* eslint-enable no-console */
	}
}

main();
