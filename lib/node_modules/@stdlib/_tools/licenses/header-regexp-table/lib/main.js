/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isArray = require( '@stdlib/assert/is-array' );
var licenseHeader = require( '@stdlib/_tools/licenses/header' );
var escapeRegExp = require( '@stdlib/utils/escape-regexp-string' );
var format = require( '@stdlib/string/format' );
var replace = require( '@stdlib/string/replace' );
var trim = require( '@stdlib/string/trim' );
var reEOL = require( '@stdlib/regexp/eol' );


// VARIABLES //

var RE_EOL = reEOL({
	'flags': 'g'
});
var EXT = [
	'awk',
	'c',
	'cpp',
	'css',
	'f',
	'gyp',
	'gypi',
	'h',
	'hpp',
	'html',
	'ini',
	'jl',
	'js',
	'md',
	'Makefile',
	'mk', // Regular expression will effectively be a duplicate of `Makefile`, but convenient as it allows us to match not only based on the filename extension `mk`, but also on the basename `Makefile`
	'py',
	'R',
	'sh',
	'yml',
	'default' // Not a language, but serves as a fallback when unable to determine a file type based on filename extension or basename
];

// Leading comment characters: /** (JS, C, C++), /* (CSS), !> (Fortran), # (R, Python, Julia, AWK, bash, GYP), #/ (make, YAML, INI), <!-- (HTML, Markdown)
var RE_LEADING_COMMENT = /^\/\*\*|^\/\*|^!>|^#\/{0,1}|^<!--/;

// Trailing comment characters: */ (JS, C, C++), */ (CSS), !< (Fortran), #/ (make, YAML, INI), --> (HTML, Markdown)
var RE_TRAILING_COMMENT = /\*\/$|!<$|#\/$|-->$/;


// MAIN //

/**
* Returns an object mapping file types to license header regular expressions.
*
* @param {string} license - SPDX license identifier
* @param {Array} [types] - list of file types
* @throws {TypeError} first argument must be a supported SPDX license identifier
* @throws {TypeError} second argument must be an array
* @throws {TypeError} each element in a file type list must be a string
* @throws {Error} must provide supported file types
* @returns {Object} object mapping file types to license header regular expressions
*
* @example
* var out = createTable( 'Apache-2.0', [ 'js' ] );
* // returns {...}
*/
function createTable( license, types ) {
	var type;
	var list;
	var out;
	var h;
	var v;
	var i;

	// Note: delegate most of argument validation to `licenseHeader()`.

	if ( arguments.length < 2 ) {
		list = EXT;
	} else {
		if ( !isArray( types ) ) {
			throw new TypeError( format( 'invalid argument. Second argument must be an array. Value: `%s`.', types ) );
		}
		list = types;
	}
	// Create license header regular expressions for each file type...
	out = {};
	for ( i = 0; i < list.length; i++ ) {
		v = list[ i ];
		if ( v === 'default' ) {
			type = 'txt';
		} else {
			type = v;
		}
		h = licenseHeader( license, type );
		if ( h === null ) {
			throw new Error( format( 'invalid argument. Must provide a supported file type. Value: `%s`.', type ) );
		}
		// Remove any surrounding whitespace (e.g., trailing newlines):
		h = trim( h );

		// Remove leading comment characters:
		h = replace( h, RE_LEADING_COMMENT, '' );

		// Remove trailing comment characters:
		h = replace( h, RE_TRAILING_COMMENT, '' );

		// Replace Windows line endings with POSIX line endings:
		h = replace( h, RE_EOL, '\n' );

		// Remove any surrounding whitespace:
		h = trim( h );

		// Escape the string:
		h = escapeRegExp( h );

		// If "default", insert a regular expression capture group to account for variation in leading characters for each line:
		if ( v === 'default' ) {
			h = replace( h, '\n\n', '{{TMP}}\n' );
			h = replace( h, '\n', '\n(?:[*!#] |)' );
			h = replace( h, '{{TMP}}', '\n(?:[*!#]|)' );
			h = '(?:[*!#] |)' + h;
		}
		// Replace placeholder values:
		h = replace( h, '\\{\\{YEAR\\}\\}', '[0-9]{1,4}' ); // 0-9999
		h = replace( h, '\\{\\{COPYRIGHT_OWNER\\}\\}', '.+' );

		// Create a regular expression (setting the `g` flag in order match multiple [duplicate] license headers):
		out[ v ] = new RegExp( h, 'g' );
	}
	return out;
}


// EXPORTS //

module.exports = createTable;
