/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var basename = require( 'path' ).basename; // TODO: replace with stdlib pkg
var resolve = require( 'path' ).resolve;
var logger = require( 'debug' );
var objectKeys = require( '@stdlib/utils/keys' );
var isEmptyArray = require( '@stdlib/assert/is-empty-array' );
var isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isRegExp = require( '@stdlib/assert/is-regexp' );
var isObject = require( '@stdlib/assert/is-plain-object' );
var isFunction = require( '@stdlib/assert/is-function' );
var readFile = require( '@stdlib/fs/read-file' );
var writeFile = require( '@stdlib/fs/write-file' );
var format = require( '@stdlib/string/format' );
var cwd = require( '@stdlib/process/cwd' );
var extname = require( '@stdlib/utils/extname' );
var nextTick = require( '@stdlib/utils/next-tick' );
var update = require( '@stdlib/_tools/licenses/update-header' );
var normalizeHeader = require( './normalize_header.js' );


// VARIABLES //

var debug = logger( 'update-header-file-list:async' );

// Filesystem read/write options:
var FOPTS = {
	'encoding': 'utf8'
};


// MAIN //

/**
* Asynchronously updates a license header in each file in a provided file list.
*
* @param {(EmptyArray|StringArray)} files - file list
* @param {(string|Object|RegExp)} old - license header to remove
* @param {(string|Object)} header - license header to insert
* @param {Callback} clbk - callback to invoke upon completion
* @throws {TypeError} first argument must be an array of strings
* @throws {TypeError} second argument must be either a string, regular expression, or an object
* @throws {TypeError} third argument must be either a string or an object
* @throws {TypeError} callback argument must be a function
* @returns {void}
*
* @example
* var files = [
*     './foo/bar.js'
* ];
*
* var old = '// @license MIT';
*
* var header = '// This file is licensed under Apache-2.0.';
*
* updateHeader( files, old, header, done );
*
* function done( error ) {
*     if ( error ) {
*         console.error( error.message );
*     }
* }
*/
function updateHeader( files, old, header, clbk ) {
	var total;
	var keys;
	var FLG;
	var idx;
	var dir;
	var v;
	var i;

	FLG = isEmptyArray( files );
	if ( !FLG && !isStringArray( files ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be an array of strings. Value: `%s`.', files ) );
	}
	if ( isObject( old ) ) {
		keys = objectKeys( old );
		for ( i = 0; i < keys.length; i++ ) {
			v = old[ keys[i] ];
			if ( !isString( v ) && !isRegExp( v ) ) {
				throw new TypeError( format( 'invalid argument. A header object must map each filename extension to a license header string or regular expression. `%s: %s`. Value: `%s`.',  keys[i], v, JSON.stringify( old ) ) );
			}
		}
	} else if ( !isString( old ) && !isRegExp( old ) ) {
		throw new TypeError( format( 'invalid argument. Second argument must be either a string, a regular expression, or an object whose keys are filename extensions and whose values are header strings or regular expressions. Value: `%s`.', old ) );
	}
	if ( isObject( header ) ) {
		keys = objectKeys( header );
		for ( i = 0; i < keys.length; i++ ) {
			v = header[ keys[i] ];
			if ( !isString( v ) ) {
				throw new TypeError( format( 'invalid argument. A header object must map each filename extension to a license header string. `%s: %s`. Value: `%s`.', keys[i], v, JSON.stringify( header ) ) );
			}
		}
	} else if ( !isString( header ) ) {
		throw new TypeError( format( 'invalid argument. Third argument must be either a string or an object whose keys are filename extensions and whose values are header strings. Value: `%s`.', header ) );
	}
	if ( !isFunction( clbk ) ) {
		throw new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', clbk ) );
	}
	dir = cwd();
	debug( 'Current working directory: %s', dir );

	total = files.length;
	idx = -1;
	if ( FLG ) {
		return done();
	}
	old = normalizeHeader( old );
	header = normalizeHeader( header );
	return next();

	/**
	* Processes the next file.
	*
	* @private
	* @returns {void}
	*/
	function next() {
		var fpath;
		var ext;
		var o;
		var h;

		idx += 1;

		ext = extname( files[ idx ] ).slice( 1 ); // ignore leading `.`
		o = old[ ext ];
		if ( !o ) {
			// E.g., account for files such as `Makefile` which lack a filename extension...
			o = old[ basename( files[ idx ] ) ] || old.default || null;
		}
		h = header[ ext ];
		if ( !h ) {
			// E.g., account for files such as `Makefile` which lack a filename extension...
			h = header[ basename( files[ idx ] ) ] || header.default || null;
		}
		if ( o || h ) {
			// Resolve an absolute filepath:
			fpath = resolve( dir, files[ idx ] );

			debug( 'Updating file (%d of %d): %s', idx+1, total, files[ idx ] );
			return readFile( fpath, FOPTS, onRead );
		}
		debug( 'Skipping file (%d of %d): %s', idx+1, total, files[ idx ] );
		return nextTick( done );

		/**
		* Callback invoked upon reading a file.
		*
		* @private
		* @param {(Error|null)} error - error object
		* @param {string} file - file contents
		* @returns {void}
		*/
		function onRead( error, file ) {
			if ( error ) {
				debug( 'Encountered an error when attempting to read file: %s. Error: %s', files[ idx ], error.message );
				return done( error );
			}
			file = update( file, o || '', h || '' );
			writeFile( fpath, file, FOPTS, onWrite );
		}
	}

	/**
	* Callback invoked upon writing a file.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @returns {void}
	*/
	function onWrite( error ) {
		if ( error ) {
			debug( 'Encountered an error when attempting to write file: %s. Error: %s', files[ idx ], error.message );
			return done( error );
		}
		debug( 'Finished updating file %d of %d.', idx+1, total );
		done();
	}

	/**
	* Callback invoked upon completion.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @returns {void}
	*/
	function done( error ) {
		if ( error ) {
			return clbk( error );
		}
		if ( idx === total-1 ) {
			return clbk();
		}
		next();
	}
}


// EXPORTS //

module.exports = updateHeader;
