#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/cli/ctor' );
var cwd = require( '@stdlib/process/cwd' );
var stdin = require( '@stdlib/process/read-stdin' );
var stdinStream = require( '@stdlib/streams/node/stdin' );
var RE_EOL = require( '@stdlib/regexp/eol' ).REGEXP;
var isRegExpString = require( '@stdlib/assert/is-regexp-string' );
var reFromString = require( '@stdlib/utils/regexp-from-string' );
var replace = require( '@stdlib/string/replace' );
var updateHeader = require( './../lib' );


// VARIABLES //

var RE_EXT_PREFIX = /^([a-zA-Z]+):/;
var RE_TRAILING_NEWLINE = /\r?\n$/;
var RE_C_COMMENT_BEGIN = /^\/\*/;
var RE_C_COMMENT_END = /\*\/$/;
var FOPTS = {
	'encoding': 'utf8'
};


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var header;
	var split;
	var flags;
	var args;
	var cli;
	var dir;
	var old;

	// Determine the current working directory:
	dir = cwd();

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), FOPTS )
	});

	// Get any provided command-line options:
	flags = cli.flags();
	if ( flags.help || flags.version ) {
		return;
	}

	// Get any provided command-line arguments:
	args = cli.args();

	if ( typeof flags.old === 'string' ) {
		old = headerFile( dir, flags.old );
	} else if ( flags.old ) {
		old = headerFiles( dir, flags.old );
	} else {
		old = '';
	}
	if ( typeof flags.header === 'string' ) {
		header = headerFile( dir, flags.header );
	} else if ( flags.header ) {
		header = headerFiles( dir, flags.header );
	} else {
		header = '';
	}
	if ( !stdinStream.isTTY ) {
		// We are receiving data from `stdin`...
		if ( flags.split ) {
			if ( !isRegExpString( flags.split ) ) {
				flags.split = '/'+flags.split+'/';
			}
			split = reFromString( flags.split );
		} else {
			split = RE_EOL;
		}
		return stdin( onRead );
	}
	return updateHeader( args, old, header, done );

	/**
	* Callback invoked upon reading from `stdin`.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Buffer} data - data
	* @returns {void}
	*/
	function onRead( error, data ) {
		var lines;
		if ( error ) {
			return done( error );
		}
		lines = data.toString().split( split );

		// Check if input data had a trailing newline...
		if ( lines[ lines.length-1 ] === '' ) {
			lines.length -= 1;
		}
		return updateHeader( lines, old, header, done );
	}

	/**
	* Callback invoked upon completion.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @returns {void}
	*/
	function done( error ) {
		if ( error ) {
			return cli.error( error );
		}
	}

	/**
	* Reads a header file.
	*
	* @private
	* @param {string} dir - root directory used to resolve an absolute file path
	* @param {string} file - file path
	* @returns {(string|RegExp)} header
	*/
	function readHeader( dir, file ) {
		var tmp = resolve( dir, file );
		tmp = readFileSync( tmp, FOPTS );
		if ( tmp instanceof Error ) {
			return done( tmp );
		}
		tmp = replace( tmp, RE_TRAILING_NEWLINE, '' ); // remove single trailing newline
		if (
			isRegExpString( tmp ) &&
			!(
				// NOTE: this check is not perfect (e.g., '/* beep */' could be a regular expression string, not a C-style comment)
				RE_C_COMMENT_BEGIN.test( tmp ) &&
				RE_C_COMMENT_END.test( tmp )
			)
		) {
			tmp = reFromString( tmp );
		}
		return tmp;
	}

	/**
	* Resolves a license header.
	*
	* @private
	* @param {string} dir - root directory used to resolve absolute file paths
	* @param {string} file - file path argument
	* @returns {(string|Object)} header
	*/
	function headerFile( dir, file ) {
		var tmp;
		var ext;
		var out;

		tmp = RE_EXT_PREFIX.exec( file );
		if ( tmp ) {
			out = {};
			ext = tmp[ 1 ];
			tmp = file.substring( ext.length+1 ); // omit the colon
			out[ ext ] = readHeader( dir, tmp );
			return out;
		}
		return readHeader( dir, file );
	}

	/**
	* Resolves a list of header files.
	*
	* @private
	* @param {string} dir - root directory used to resolve absolute file paths
	* @param {Array} files - file path arguments
	* @returns {Object} header hash
	*/
	function headerFiles( dir, files ) {
		var out;
		var tmp;
		var ext;
		var i;

		out = {};
		for ( i = 0; i < files.length; i++ ) {
			tmp = RE_EXT_PREFIX.exec( files[ i ] );
			if ( tmp ) {
				ext = tmp[ 1 ];
				tmp = files[ i ].substring( ext.length+1 ); // omit the colon
				out[ ext ] = readHeader( dir, tmp );
			} else {
				return done( new Error( 'invalid option. When providing multiple headers, each header must have an associated filename extension prefix.' ) );
			}
		}
		return out;
	}
}

main();
