/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isBuffer = require( '@stdlib/assert/is-buffer' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isRegExp = require( '@stdlib/assert/is-regexp' );
var string2buffer = require( '@stdlib/buffer/from-string' );
var reFromString = require( '@stdlib/utils/regexp-from-string' );
var replace = require( '@stdlib/string/replace' );
var format = require( '@stdlib/string/format' );
var SHEBANGS = require( './shebangs.js' );


// VARIABLES //

var RE_REGEXP_CHARS = /[-\/\\^$*+?.()|[\]{}]/g; // eslint-disable-line no-useless-escape


// MAIN //

/**
* Removes a license header from a source code string.
*
* @param {(string|Buffer)} src - source code
* @param {(string|Buffer|RegExp)} header - license header to remove
* @throws {TypeError} first argument must be either a string or Buffer
* @throws {TypeError} second argument must be either a string, Buffer, or regular expression
* @returns {(string|Buffer)} transformed source code
*
* @example
* var re = /\/\/ @license Apache-2\.0\n\n/;
*
* var src = [
*     '// @license Apache-2.0',
*     '',
*     '"use strict";',
*     '',
*     'var x = 3.14;',
*     ''
* ];
*
* var out = removeHeader( src.join( '\n' ), re );
* // returns <string>
*/
function removeHeader( src, header ) {
	var isStr;
	var line;
	var len;
	var i;

	isStr = isString( src );
	if ( !isStr && !isBuffer( src ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be either a string or Buffer. Value: `%s`.', src ) );
	} else {
		src = src.toString();
	}
	if ( isRegExp( header ) ) {
		// No need to do anything as header is already a regular expression...
	} else if ( isString( header ) || isBuffer( header ) ) {
		header = header.toString();

		// Generate a regular expression from a non-empty header string...
		if ( header ) {
			// Escape the header string:
			header = replace( header, RE_REGEXP_CHARS, '\\$&' );

			// Check for a "shebang"...
			len = SHEBANGS.length;
			for ( i = 0; i < len; i++ ) {
				line = SHEBANGS[ i ][ 0 ];
				if ( src.substring( 0, line.length ) === line ) {
					break;
				}
			}
			// Generate a regular expression ensuring we also "undo" any additional newline padding introduced when inserting a header...
			if ( i === len ) {
				header = reFromString( '/'+header+'\n/' );
			} else {
				header = reFromString( '/\n'+SHEBANGS[i][1]+header+'/' );
			}
		}
	} else {
		throw new TypeError( format( 'invalid argument. Second argument must be either a string, Buffer, or regular expression. Value: `%s`.', header ) );
	}
	// Remove the header (if present):
	src = replace( src, header, '' );

	// If provided a source code buffer, return a source code buffer...
	if ( !isStr ) {
		return string2buffer( src );
	}
	return src;
}


// EXPORTS //

module.exports = removeHeader;
