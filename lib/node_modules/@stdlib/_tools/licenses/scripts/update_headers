#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/*
* This script updates license headers for a list of files.
*/

// MODULES //

var CLI = require( '@stdlib/cli/ctor' );
var stdin = require( '@stdlib/process/read-stdin' );
var stdinStream = require( '@stdlib/streams/node/stdin' );
var RE_EOL = require( '@stdlib/regexp/eol' ).REGEXP;
var isRegExpString = require( '@stdlib/assert/is-regexp-string' );
var reFromString = require( '@stdlib/utils/regexp-from-string' );
var currentYear = require( '@stdlib/time/current-year' );
var licenseHeader = require( '@stdlib/_tools/licenses/header' );
var headerRegExp = require( '@stdlib/_tools/licenses/header-regexp' );
var updateHeader = require( '@stdlib/_tools/licenses/update-header-file-list' );


// VARIABLES //

var SPDX = 'Apache-2.0';
var COPYRIGHT = 'The Stdlib Authors';
var YEAR = currentYear();
var LANGS = [
	[ 'awk', 'awk' ], // [ <file_extension>, <file_type> ]
	[ 'c', 'c' ],
	[ 'cli', 'javascript' ],
	[ 'cpp', 'cpp' ],
	[ 'css', 'css' ],
	[ 'f', 'fortran' ],
	[ 'gyp', 'gyp' ],
	[ 'gypi', 'gypi' ],
	[ 'h', 'h' ],
	[ 'hpp', 'hpp' ],
	[ 'html', 'html' ],
	[ 'ini', 'ini' ],
	[ 'jl', 'julia' ],
	[ 'js', 'javascript' ],
	[ 'Makefile', 'make' ],
	[ 'md', 'markdown' ],
	[ 'mk', 'make' ],
	[ 'py', 'python' ],
	[ 'R', 'r' ],
	[ 'sh', 'bash' ],
	[ 'ts', 'typescript' ],
	[ 'yml', 'yaml' ]
];
var OPTS = {
	'string': [
		'split'
	]
};


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var headers;
	var split;
	var flags;
	var args;
	var cli;
	var old;
	var re;
	var i;

	// Create a command-line interface:
	cli = new CLI({
		'options': OPTS
	});

	// Get any provided command-line options:
	flags = cli.flags();
	if ( flags.help || flags.version ) {
		return;
	}

	// Get any provided command-line arguments:
	args = cli.args();

	// Generate headers and header regular expressions:
	headers = {};
	old = {};
	for ( i = 0; i < LANGS.length; i++ ) {
		headers[ LANGS[i][0] ] = licenseHeader( SPDX, LANGS[i][1], {
			'year': YEAR,
			'copyright': COPYRIGHT
		});
		re = headerRegExp( SPDX, LANGS[i][1] );
		re = new RegExp( re.source+'\n' ); // include additional padded line
		old[ LANGS[i][0] ] = re;
	}

	if ( !stdinStream.isTTY ) {
		// We are receiving data from `stdin`...
		if ( flags.split ) {
			if ( !isRegExpString( flags.split ) ) {
				flags.split = '/'+flags.split+'/';
			}
			split = reFromString( flags.split );
		} else {
			split = RE_EOL;
		}
		return stdin( onRead );
	}
	return updateHeader( args, old, headers, done );

	/**
	* Callback invoked upon reading from `stdin`.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Buffer} data - data
	* @returns {void}
	*/
	function onRead( error, data ) {
		var lines;
		if ( error ) {
			return done( error );
		}
		lines = data.toString().split( split );

		// Check if input data had a trailing newline...
		if ( lines[ lines.length-1 ] === '' ) {
			lines.length -= 1;
		}
		return updateHeader( lines, old, headers, done );
	}

	/**
	* Callback invoked upon completion.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @returns {void}
	*/
	function done( error ) {
		if ( error ) {
			return cli.error( error );
		}
	}
}

main();
