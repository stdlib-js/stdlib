#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/*
* Update package `package.json` files by setting the `bugs` field.
*
* This script is called with the following arguments:
*
* -   `$1`: root search directory
*
* If not provided a root search directory, the root search directory is the current working directory.
*
* To enable verbose logging, set the `DEBUG` environment variable.
*
* ``` bash
* $ DEBUG=* update_bugs .
* ```
*/

// MODULES //

var join = require( 'path' ).join;
var resolve = require( 'path' ).resolve;
var proc = require( 'process' );
var logger = require( 'debug' );
var parseArgs = require( 'minimist' );
var cwd = require( '@stdlib/process/cwd' );
var findPkgs = require( '@stdlib/_tools/pkgs/find' ).sync;
var writeFile = require( '@stdlib/fs/write-file' ).sync;
var standardize = require( '@stdlib/_tools/package-json/standardize' );


// VARIABLES //

var debug = logger( 'update-package-bugs' );
var BUGS = {
	'url': 'https://github.com/stdlib-js/stdlib/issues'
};
var opts;
var args;
var dir;


// FUNCTIONS //

/**
* Updates package `package.json` files by setting the `bugs` field.
*
* @private
* @param {string} dir - root search directory
*/
function main( dir ) {
	var fpath;
	var opts;
	var pkgs;
	var pkg;
	var i;

	debug( 'Searching for packages in %s.', dir );
	opts = {
		'dir': dir,
		'pattern': '**/package.json'
	};
	pkgs = findPkgs( opts );
	debug( 'Found %d packages.', pkgs.length );

	for ( i = 0; i < pkgs.length; i++ ) {
		fpath = join( pkgs[ i ], 'package.json' );
		debug( 'Loading package file: %s (%d of %d).', fpath, i+1, pkgs.length );
		pkg = require( fpath ); // eslint-disable-line stdlib/no-dynamic-require

		if ( pkg.bugs ) {
			debug( 'Current bug reporting endpoint: %s.', JSON.stringify( pkg.bugs ) );
		}
		debug( 'Updating bugs field.' );
		pkg.bugs = BUGS;

		debug( 'Standardizing package data.' );
		pkg = standardize( pkg );

		debug( 'Serializing package data.' );
		pkg = JSON.stringify( pkg, null, 2 ); // 2-space indentation

		debug( 'Writing package data to file.' );
		writeFile( fpath, pkg+'\n', {
			'encoding': 'utf8'
		});
	}
	debug( 'Finished updating all packages.' );
}


// MAIN //

// Parse command-line arguments:
opts = {};
args = parseArgs( proc.argv.slice( 2 ), opts );

if ( args._[ 0 ] ) {
	dir = resolve( cwd(), args._[ 0 ] );
} else {
	dir = cwd();
}
main( dir );
