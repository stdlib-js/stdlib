#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var stdin = require( '@stdlib/process/read-stdin' );
var CLI = require( '@stdlib/cli/ctor' );
var stdinStream = require( '@stdlib/streams/node/stdin' );
var stdoutStream = require( '@stdlib/streams/node/stdout' );
var nextTick = require( '@stdlib/utils/next-tick' );
var importRequire = require( './../lib' );


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var flags;
	var args;
	var cli;
	var err;
	var src;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line options:
	flags = cli.flags();
	if ( flags.help || flags.version ) {
		return;
	}

	// Get any provided command-line arguments:
	args = cli.args();

	if ( !stdinStream.isTTY ) {
		return stdin( onData );
	}
	src = args[ 0 ];
	if ( src === void 0 ) {
		err = new Error( 'no input. Must provide a source string as a command-line argument or via `stdin`.' );
		return exit( err );
	}
	nextTick( next );

	/**
	* Writes an error message to `stderr` and then exits.
	*
	* @private
	* @param {Error} err - error object
	*/
	function exit( err ) {
		cli.error( err );
	}

	/**
	* Prints results as newline-delimited JSON (NDJSON).
	*
	* @private
	* @param {Object} results - results
	*/
	function printNDJSON( results ) {
		console.log( JSON.stringify( results ) ); // eslint-disable-line no-console
	}

	/**
	* Pretty prints results.
	*
	* @private
	* @param {Object} results - results
	*/
	function prettyPrint( results ) {
		console.log( '\nLiterals:' ); // eslint-disable-line no-console
		printPaths( results.literals );

		console.log( '\nExpressions:' ); // eslint-disable-line no-console
		printPaths( results.expressions );

		console.log( '' ); // eslint-disable-line no-console
	}

	/**
	* Pretty prints paths.
	*
	* @private
	* @param {StringArray} paths - paths to print
	*/
	function printPaths( paths ) {
		var sym;
		var i;
		for ( i = 0; i < paths.length; i++ ) {
			if ( i < paths.length-1 ) {
				sym = '├──';
			} else {
				sym = '└──';
			}
			console.log( '%s %s', sym, paths[ i ] ); // eslint-disable-line no-console
		}
	}

	/**
	* Callback invoked after attempting to read data from `stdin`.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Buffer} data - `stdin` data
	* @returns {void}
	*/
	function onData( error, data ) {
		if ( error ) {
			return exit( error );
		}
		src = data.toString();
		if ( src === '' ) {
			error = new Error( 'no input. Process is not running in a TTY context and yet received no data on `stdin`.' );
			return exit( error );
		}
		next();
	}

	/**
	* Callback invoked once ready to analyze a source string.
	*
	* @private
	* @returns {void}
	*/
	function next() {
		var results = importRequire( src );
		if ( stdoutStream.isTTY ) {
			return prettyPrint( results );
		}
		printNDJSON( results );
	}
}

main();
