/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var logger = require( 'debug' );
var parse = require( 'acorn' ).parse;
var isBuffer = require( '@stdlib/assert/is-buffer' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var format = require( '@stdlib/string/format' );
var walk = require( './walk.js' );


// VARIABLES //

var debug = logger( 'import-require:main' );


// MAIN //

/**
* Lists import and require paths.
*
* @param {(Buffer|string)} src - source string
* @throws {TypeError} must provide either a string or Buffer
* @returns {Object} results
*
* @example
* var readFile = require( '@stdlib/fs/read-file' ).sync;
*
* var src = readFile( __filename );
* var results = ls( src );
*
* console.dir( results );
*/
function ls( src ) {
	var opts;
	var ast;
	var out;

	if ( isBuffer( src ) ) {
		src = src.toString();
	} else if ( !isString( src ) ) {
		throw new TypeError( format( 'invalid argument. Must provide either a string or Buffer. Value: `%s`.', src ) );
	}
	opts = {
		'ecmaVersion': 6,
		'sourceType': 'module',
		'allowedReserved': 'never',
		'allowReturnOutsideFunction': true,
		'allowHashBang': true,
		'allowImportExportEverywhere': true
	};
	debug( 'AST options: %s', JSON.stringify( opts ) );

	debug( 'Generating an AST...' );
	ast = parse( src, opts );
	debug( 'Finished generating AST.' );

	debug( 'Walking AST...' );
	out = walk( src, ast );
	debug( 'Finished walking AST.' );

	return out;
}


// EXPORTS //

module.exports = ls;
