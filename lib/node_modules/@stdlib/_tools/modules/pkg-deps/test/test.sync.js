/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var join = require( 'path' ).join;
var tape = require( 'tape' );
var instanceOf = require( '@stdlib/assert/instance-of' );
var pkgDeps = require( './../lib/sync.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof pkgDeps, 'function', 'main export is a function' );
	t.end();
});

tape( 'if provided a first argument which is not a string or string array, the function throws an error (no options)', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		true,
		null,
		void 0,
		[],
		[ '5', null ],
		[ 'beep', 5 ],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			pkgDeps( value );
		};
	}
});

tape( 'if provided a first argument which is not a string or string array, the function throws an error (options)', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		true,
		null,
		void 0,
		[],
		[ '5', null ],
		[ 'beep', 5 ],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			pkgDeps( value, {} );
		};
	}
});

tape( 'if provided an options argument which is not an object, the function throws an error', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		null,
		void 0,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			pkgDeps( [ 'a', 'b' ], value );
		};
	}
});

tape( 'the function throws an error if provided an invalid option', function test( t ) {
	t.throws( foo, TypeError, 'throws error' );
	t.end();
	function foo() {
		var opts = {
			'builtins': null
		};
		pkgDeps( [ 'a', 'b' ], opts );
	}
});

tape( 'the function returns a list of package dependencies', function test( t ) {
	var expected;
	var actual;
	var fpath;

	fpath = join( __dirname, 'fixtures', 'foo.js' );
	actual = pkgDeps( fpath );

	expected = [
		{
			'file': fpath,
			'deps': [
				'fs'
			]
		},
		{
			'file': join( __dirname, 'fixtures', 'bar.js' ),
			'deps': [
				'@stdlib/random/base/randu'
			]
		},
		{
			'file': join( __dirname, 'fixtures', 'data.json' ),
			'deps': []
		},
		{
			'file': join( __dirname, 'fixtures', 'bool.js' ),
			'deps': []
		}
	];

	t.deepEqual( actual, expected, 'returns expected results' );

	t.end();
});

tape( 'the function returns a list of package dependencies (array, no walk)', function test( t ) {
	var expected;
	var actual;
	var fpaths;
	var opts;

	fpaths = [
		join( __dirname, 'fixtures', 'foo.js' ),
		join( __dirname, 'fixtures', 'bar.js' ),
		join( __dirname, 'fixtures', 'data.json' ),
		join( __dirname, 'fixtures', 'bool.js' )
	];
	opts = {
		'walk': false
	};
	actual = pkgDeps( fpaths, opts );

	expected = [
		{
			'file': join( __dirname, 'fixtures', 'foo.js' ),
			'deps': [
				'fs'
			]
		},
		{
			'file': join( __dirname, 'fixtures', 'bar.js' ),
			'deps': [
				'@stdlib/random/base/randu'
			]
		},
		{
			'file': join( __dirname, 'fixtures', 'data.json' ),
			'deps': []
		},
		{
			'file': join( __dirname, 'fixtures', 'bool.js' ),
			'deps': []
		}
	];

	t.deepEqual( actual, expected, 'returns expected results' );

	t.end();
});

tape( 'the function returns a list of package dependencies (no walk)', function test( t ) {
	var expected;
	var actual;
	var fpaths;
	var opts;

	fpaths = [
		join( __dirname, 'fixtures', 'foo.js' )
	];
	opts = {
		'walk': false
	};
	actual = pkgDeps( fpaths, opts );

	expected = [
		{
			'file': join( __dirname, 'fixtures', 'foo.js' ),
			'deps': [
				'fs'
			]
		}
	];

	t.deepEqual( actual, expected, 'returns expected results' );

	t.end();
});

tape( 'the function returns a list of package dependencies (no built-ins)', function test( t ) {
	var expected;
	var actual;
	var fpath;
	var opts;

	fpath = join( __dirname, 'fixtures', 'foo.js' );
	opts = {
		'builtins': false
	};
	actual = pkgDeps( fpath, opts );

	expected = [
		{
			'file': fpath,
			'deps': []
		},
		{
			'file': join( __dirname, 'fixtures', 'bar.js' ),
			'deps': [
				'@stdlib/random/base/randu'
			]
		},
		{
			'file': join( __dirname, 'fixtures', 'data.json' ),
			'deps': []
		},
		{
			'file': join( __dirname, 'fixtures', 'bool.js' ),
			'deps': []
		}
	];

	t.deepEqual( actual, expected, 'returns expected results' );

	t.end();
});

tape( 'the function returns an error if an error occurs while resolving package dependencies', function test( t ) {
	var err = pkgDeps( 'kaflasdjflsajflkjsd2r0923lajdflkaj20902' );
	t.equal( instanceOf( err, Error ), true, 'returns an error' );
	t.end();
});
