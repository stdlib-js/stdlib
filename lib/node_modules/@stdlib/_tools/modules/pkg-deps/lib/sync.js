/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var logger = require( 'debug' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;
var copy = require( '@stdlib/utils/copy' );
var cwd = require( '@stdlib/process/cwd' );
var dirname = require( '@stdlib/utils/dirname' );
var format = require( '@stdlib/string/format' );
var defaults = require( './defaults.json' );
var validate = require( './validate.js' );
var walkFile = require( './walk_file.sync.js' );
var resolveAliases = require( './resolve_aliases.js' );
var toArray = require( './to_array.js' );


// VARIABLES //

var debug = logger( 'module-pkg-deps:sync' );


// MAIN //

/**
* Synchronously lists package dependencies.
*
* @param {(string|StringArray)} files - file or file list
* @param {Options} [options] - function options
* @param {boolean} [options.builtins=true] - boolean indicating whether to include built-in packages
* @param {boolean} [options.walk=true] - boolean indicating whether to walk relative module dependencies
* @param {Object} [options.aliases={}] - object mapping relative module dependency identifiers to other module identifiers
* @throws {TypeError} first argument must be an array of strings
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {(ObjectArray|Error)} results or an error
*
* @example
* var files = [ '/foo/bar/index.js' ];
*
* var deps = pkgDeps( files );
*/
function pkgDeps( files, options ) {
	var aliases;
	var isStr;
	var cache;
	var list;
	var file;
	var opts;
	var err;
	var len;
	var dir;
	var i;
	var k;

	isStr = isString( files );
	if (
		!isStr &&
		!isStringArray( files )
	) {
		throw new TypeError( format( 'invalid argument. First argument must be either a string or array of strings. Value: `%s`.', files ) );
	}
	if ( isStr ) {
		list = [ files ];
	} else {
		list = files;
	}
	opts = copy( defaults );
	if ( arguments.length > 1 ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	debug( 'Options: %s', JSON.stringify( opts ) );
	aliases = opts.aliases;

	dir = cwd();
	debug( 'Current working directory: %s', dir );

	len = list.length;
	cache = {};

	debug( 'Walking %s files...', len );
	for ( i = 0; i < len; i++ ) {
		k = i + 1;
		file = resolve( dir, list[ i ] );

		debug( 'Resolving aliases for file: %s (%d of %d)...', file, k, len );
		opts.aliases = resolveAliases( dirname( file ), aliases );
		debug( 'Resolved aliases for file: $s (%d of %d). Aliases: %s.', file, k, len, JSON.stringify( opts.aliases ) );

		debug( 'Walking file: %s (%d of %d)...', file, k, len );
		err = walkFile( cache, file, opts );
		if ( err instanceof Error ) {
			debug( 'Encountered an error when walking file: %s (%d of %d). Error: %s', file, k, len, err.message );
			return err;
		}
		debug( 'Successfully walked file: %s (%d of %d).', file, k, len );
	}
	debug( 'Finished walking %s files.', len );
	return toArray( cache );
}


// EXPORTS //

module.exports = pkgDeps;
