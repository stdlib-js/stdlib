/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var replace = require( '@stdlib/string/replace' );
var trim = require( '@stdlib/string/trim' );


// VARIABLES //

var STDLIB_GITHUB_URL = 'https://github.com/stdlib-js/stdlib/commit';
var RE_CO_AUTHORED_BY = /co-authored-by/i;
var RE_EMAIL = /\s*<[^>]+>\s*/;


// MAIN //

/**
* Returns a function which formats a commit message for inclusion in a changelog.
*
* @private
* @param {boolean} type - boolean indicating whether to include the commit type
* @param {boolean} includeAuthors - boolean indicating whether to include the commit author(s)
* @returns {Function} formatting function
*
* @example
* var f = formatCommitFactory( true, true );
* // returns <Function>
*/
function formatCommitFactory( type, includeAuthors ) {
	return formatCommit;

	/**
	* Formats a commit message for inclusion in a changelog.
	*
	* @private
	* @param {Object} commit - commit object
	* @returns {string} changelog entry
	*/
	function formatCommit( commit ) {
		var authors = [];
		var hash = trim( commit.hash );
		var out = '-   [`';
		out += hash.substring( 0, 7 );
		out += '`](';
		out += STDLIB_GITHUB_URL;
		out += '/';
		out += hash;
		out += ') - ';
		if ( commit.author ) {
			authors.push( replace( commit.author, RE_EMAIL, '' ) );
		}
		if ( type ) {
			out += '**';
			out += commit.type;
			if ( commit.scope ) {
				out += '(' + commit.scope + ')';
			}
			out += ':** ';
		} else if ( commit.scope ) {
			out += '**' + commit.scope + ':** ';
		}
		out += commit.subject;
		if ( commit.mentions && commit.mentions.length > 0 ) {
			commit.mentions.forEach( onMention );
		}
		if ( includeAuthors ) {
			out += ' _(by ' + authors.join( ', ' ) + ')_';
		}
		return out;

		/**
		* Callback invoked upon encountering a mention.
		*
		* @private
		* @param {Object} mention - mention object
		*/
		function onMention( mention ) {
			if ( mention.action === 'PR-URL' ) {
				out += ' [(#' + trim( mention.ref ) + ')](' + mention.url + ')';
			} else if ( RE_CO_AUTHORED_BY.test( mention.action ) ) {
				authors.push( replace( mention.ref, RE_EMAIL, '' ) );
			}
		}
	}
}


// EXPORTS //

module.exports = formatCommitFactory;
