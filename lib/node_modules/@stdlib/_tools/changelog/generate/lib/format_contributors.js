/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var contains = require( '@stdlib/assert/contains' );
var replace = require( '@stdlib/string/replace' );
var map = require( '@stdlib/utils/map' );
var sectionStart = require( './section_start.js' );
var sectionEnd = require( './section_end.js' );
var heading = require( './heading.js' );
var EXCLUDED_CONTRIBUTORS = require( './excluded_contributors.json' );


// VARIABLES //

var RE_CO_AUTHORED_BY = /co-authored-by/i;


// FUNCTIONS //

/**
* Extracts a list of contributors from a list of commits.
*
* @private
* @param {ObjectArray} commits - commit objects
* @returns {StringArray} sorted list of contributors
*/
function extractContributors( commits ) {
	var mentions;
	var mention;
	var author;
	var out;
	var i;
	var j;

	out = [];
	for ( i = 0; i < commits.length; i++ ) {
		author = replace( commits[ i ].author, /\s*<[^>]+>\s*/, '' );
		if (
			!contains( out, author ) &&
			!contains( EXCLUDED_CONTRIBUTORS, author )
		) {
			out.push( author );
		}
		mentions = commits[ i ].mentions || [];
		for ( j = 0; j < mentions.length; j++ ) {
			mention = mentions[ j ];
			if (
				RE_CO_AUTHORED_BY.test( mention.action )
			) {
				author = replace( mention.ref, /\s*<[^>]+>\s*/, '' );
				if (
					!contains( out, author ) &&
					!contains( EXCLUDED_CONTRIBUTORS, author )
				) {
					out.push( author );
				}
			}
		}
	}
	return out.sort();
}

/**
* Formats a contributor.
*
* @private
* @param {string} contributor - contributor name
* @returns {string} formatted contributor
*
* @example
* var out = formatContributor( 'Jane Doe' );
* // returns '-   Jane Doe'
*/
function formatContributor( contributor ) {
	return '-   ' + contributor;
}


// MAIN //

/**
* Formats a list of contributors.
*
* @private
* @param {ObjectArray} commits - commit objects
* @returns {string} formatted contributors list
*/
function formatContributors( commits ) {
	var contributors = extractContributors( commits );
	var out;
	if ( contributors.length === 0 ) {
		return '';
	}
	out = sectionStart( 'contributors' );
	out += heading( 'Contributors', 3 );
	if ( contributors.length === 1 ) {
		out += 'A total of 1 person contributed to this release. Thank you to this contributor:\n\n';
	} else {
		out += 'A total of ' + contributors.length + ' people contributed to this release. Thank you to the following contributors:\n\n';
	}
	out += map( contributors, formatContributor ).join( '\n' );
	out += sectionEnd( 'contributors' );
	return out;
}


// EXPORTS //

module.exports = formatContributors;
