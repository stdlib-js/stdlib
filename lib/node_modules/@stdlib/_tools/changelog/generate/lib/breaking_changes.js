
/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var filter = require( '@stdlib/array/base/filter' );
var trim = require( '@stdlib/string/trim' );
var map = require( '@stdlib/utils/map' );
var collectField = require( './collect_field.js' );
var sectionStart = require( './section_start.js' );
var sectionEnd = require( './section_end.js' );
var heading = require( './heading.js' );


// VARIABLES //

var STDLIB_GITHUB_URL = 'https://github.com/stdlib-js/stdlib/commit';


// FUNCTIONS //

/**
* Formats a breaking change.
*
* @private
* @param {Object} note - note object
* @returns {string} changelog entry
*
* @example
* var note = {
*     'title': 'BREAKING CHANGE',
*     'text': 'beep',
*     'hash': 'abcdef1234567890'
* };
* var out = formatBreakingChange( note );
* // returns '-   [`abcdef1`](https://github.com/stdlib-js/stdlib/commit/abcdef1234567890): beep'
*/
function formatBreakingChange( note ) {
	var parts = note.text.split( '\n' );
	var hash = trim( note.hash );
	var out = '-   [`'+hash.substring( 0, 7 )+'`]('+STDLIB_GITHUB_URL+'/'+hash+'): '+parts[ 0 ];
	if ( parts.length > 1 ) {
		out +=' \n\n';
		out += '    -   ';
		out += parts.slice( 1 ).join( '\n    ' );
		out += '\n';
	}
	return out;
}

/**
* Tests whether a note is a breaking change.
*
* @private
* @param {Object} note - note object
* @returns {boolean} boolean indicating whether a note is a breaking change
*/
function isBreakingChange( note ) {
	return note.title === 'BREAKING CHANGE';
}


// MAIN //

/**
* Extracts breaking changes from a list of commits and formats them as a Markdown list.
*
* @private
* @param {ObjectArray} commits - commit objects
* @returns {string} list of breaking changes
*/
function breakingChanges( commits ) {
	var breakingChanges;
	var notes;
	var out;

	notes = collectField( commits, 'notes' );
	breakingChanges = filter( notes, isBreakingChange );
	if ( breakingChanges.length === 0 ) {
		return '';
	}
	out = sectionStart( 'breaking-changes' );
	out += heading( 'BREAKING CHANGES', 3 );
	out += map( breakingChanges, formatBreakingChange ).join( '\n' );
	out += sectionEnd( 'breaking-changes' );
	return out;
}


// EXPORTS //

module.exports = breakingChanges;
