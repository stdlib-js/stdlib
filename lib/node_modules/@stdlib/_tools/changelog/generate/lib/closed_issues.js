/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var contains = require( '@stdlib/assert/contains' );
var isDigitString = require( '@stdlib/assert/is-digit-string' );
var filter = require( '@stdlib/array/base/filter' );
var map = require( '@stdlib/utils/map' );
var collectField = require( './collect_field.js' );
var sectionStart = require( './section_start.js' );
var sectionEnd = require( './section_end.js' );
var heading = require( './heading.js' );


// VARIABLES //

var VERBS = [ 'Closes', 'Fixes', 'Resolves' ];


// FUNCTIONS //

/**
* Tests whether a mention references closing an issue.
*
* @private
* @param {Object} mention - mention object
* @returns {boolean} boolean indicating whether a mention references closing an issue
*/
function isClosingIssue( mention ) {
	return contains( VERBS, mention.action ) && isDigitString( mention.ref );
}

/**
* Sorts issue mentions by issue number.
*
* @private
* @param {Object} a - first mention
* @param {Object} b - second mention
* @returns {number} difference in issue numbers
*/
function sortByIssueNumber( a, b ) {
	return a.ref - b.ref;
}

/**
* Formats an issue.
*
* @private
* @param {Object} mention - mention object
* @returns {string} formatted issue
*
* @example
* var out = formatIssue({
*     'ref': '123',
*     'url': 'https://github.com/stdlib-js/stdlib/issues/123'
* });
* // returns '[#123](https://github.com/stdlib-js/stdlib/issues/123)'
*/
function formatIssue( mention ) {
	return '[#' + mention.ref + '](' + mention.url + ')';
}

/**
* Formats closed issues as a comma-separated list.
*
* @private
* @param {ObjectArray} closedIssues - issue objects
* @returns {string} formatted issues list
*/
function formatClosedIssues( closedIssues ) {
	var out = sectionStart( 'issues' );
	out += heading( 'Closed Issues', 3 );
	if ( closedIssues.length === 1 ) {
		out += 'This release closes the following issue:\n\n';
	} else {
		out += 'A total of ' + closedIssues.length + ' issues were closed in this release:\n\n';
	}
	out += map( closedIssues, formatIssue ).join( ', ' );
	out += sectionEnd( 'issues' );
	return out;
}


// MAIN //

/**
* Extracts closed issues from a list of commits and formats them as Markdown.
*
* @private
* @param {ObjectArray} commits - commit objects
* @returns {string} Markdown list of closed issues
*/
function closedIssues( commits ) {
	var closedIssues;
	var mentions;

	mentions = collectField( commits, 'mentions' );
	closedIssues = filter( mentions, isClosingIssue );
	if ( closedIssues.length === 0 ) {
		return '';
	}
	closedIssues.sort( sortByIssueNumber );
	return formatClosedIssues( closedIssues );
}


// EXPORTS //

module.exports = closedIssues;
