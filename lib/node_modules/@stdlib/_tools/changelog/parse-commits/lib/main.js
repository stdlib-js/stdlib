/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var logger = require( 'debug' );
var parser = require( '@conventional-commits/parser' ).parser;
var merge = require( '@stdlib/utils/merge' );
var cwd = require( '@stdlib/process/cwd' );
var toConventionalChangelog = require( './conventional_changelog.js' );
var extractCommits = require( './commits.js' );
var validate = require( './validate.js' );
var defaults = require( './defaults.js' );


// VARIABLES //

var debug = logger( 'changelog:parse-commits' );


// MAIN //

/**
* Parses package commit messages into conventional changelog objects.
*
* @param {Options} [options] - function options
* @param {string} [options.dir] - root directory
* @param {string} [options.issueURL] - issue URL
* @param {string} [options.prURL] - PR URL
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {Array} array of conventional changelog formatted commit message objects
*
* @example
* var resolve = require( 'path' ).resolve;
* var out = parseCommits({
*     'dir': resolve( __dirname, '..', '..' )
* });
*/
function parseCommits( options ) {
	var commits;
	var merged;
	var opts;
	var msg;
	var ast;
	var dir;
	var err;
	var out;
	var i;
	var j;

	opts = defaults();
	if ( arguments.length > 0 ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	if ( opts.dir ) {
		dir = resolve( cwd(), opts.dir );
	} else {
		dir = cwd();
	}
	commits = extractCommits( dir );
	out = [];
	for ( i = 0; i < commits.length; i++ ) {
		msg = commits[ i ].message;
		try {
			ast = parser( msg );
		} catch ( err ) {
			debug( 'Encountered an error when parsing a commit message: %s. Error: %s', msg, err.message );
			continue; // Skip this commit if parsing fails...
		}
		merged = merge( commits[ i ], toConventionalChangelog( ast, opts ) );
		for ( j = 0; j < merged.notes.length; j++ ) {
			merged.notes[ j ].hash = commits[ i ].hash;
		}
		out.push( merged );
	}
	return out;
}


// EXPORTS //

module.exports = parseCommits;
