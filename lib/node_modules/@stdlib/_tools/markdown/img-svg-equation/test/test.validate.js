/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var validate = require( './../lib/validate.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.equal( typeof validate, 'function', 'main export is a function' );
	t.end();
});

tape( 'if provided an `options` argument which is not an object, the function returns a type error', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		true,
		false,
		void 0,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( {}, values[i] );
		t.ok( err instanceof TypeError, 'returns a type error when provided ' + values[i] );
	}
	t.end();
});

tape( 'if provided a `className` option which is not an string primitive, the function returns a type error', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		5,
		NaN,
		null,
		true,
		false,
		void 0,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( {}, {
			'className': values[i]
		});
		t.ok( err instanceof TypeError, 'returns a type error when provided ' + values[i] );
	}
	t.end();
});

tape( 'if provided an `align` option which is not an string primitive, the function returns a type error', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		5,
		NaN,
		null,
		true,
		false,
		void 0,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( {}, {
			'align': values[ i ]
		});
		t.ok( err instanceof TypeError, 'returns a type error when provided ' + values[i] );
	}
	t.end();
});

tape( 'if provided a `raw` option which is not an string primitive, the function returns a type error', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		5,
		NaN,
		null,
		true,
		false,
		void 0,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( {}, {
			'raw': values[ i ]
		});
		t.ok( err instanceof TypeError, 'returns a type error when provided ' + values[i] );
	}
	t.end();
});

tape( 'if provided a `label` option which is not an string primitive, the function returns a type error', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		5,
		NaN,
		null,
		true,
		false,
		void 0,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( {}, {
			'label': values[i]
		});
		t.ok( err instanceof TypeError, 'returns a type error when provided ' + values[i] );
	}
	t.end();
});

tape( 'if provided a `src` option which is not a valid URI, the function returns a type error', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		'5',
		'beep/boop',
		'beep.com',
		'dafjaldkjfas:/dafdkaj\\dakjfd',
		5,
		NaN,
		null,
		true,
		false,
		void 0,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( {}, {
			'src': values[i]
		});
		t.ok( err instanceof TypeError, 'returns a type error when provided ' + values[i] );
	}
	t.end();
});

tape( 'if provided an `alt` option which is not an string primitive, the function returns a type error', function test( t ) {
	var values;
	var err;
	var i;

	values = [
		5,
		NaN,
		null,
		true,
		false,
		void 0,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		err = validate( {}, {
			'alt': values[i]
		});
		t.ok( err instanceof TypeError, 'returns a type error when provided ' + values[i] );
	}
	t.end();
});

tape( 'the function returns `null` if all options are valid', function test( t ) {
	var opts;
	var err;
	var obj;

	obj = {};

	opts = {
		'className': 'eqn',
		'align': 'left',
		'raw': 'y=x',
		'label': 'eq',
		'src': 'https://cdn.jsdelivr.net/gh/stdlib-js/stdlib@master/docs/img/eqn.svg',
		'alt': 'Error function'
	};

	err = validate( obj, opts );

	t.equal( err, null, 'returns null' );

	t.deepEqual( obj, opts, 'updates destination object' );
	t.end();
});

tape( 'the function ignores unrecognized options', function test( t ) {
	var opts;
	var err;

	opts = {};
	err = validate( opts, {
		'beep': 'boop',
		'a': {
			'b': 'c'
		}
	});
	t.equal( err, null, 'returns null' );
	t.deepEqual( opts, {}, 'destination object is empty' );
	t.end();
});
