/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isObject = require( '@stdlib/assert/is-plain-object' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var format = require( '@stdlib/string/format' );


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - options to validate
* @param {string} [options.className] - element class name
* @param {string} [options.align] - element alignment
* @param {string} [options.raw] - raw equation text
* @param {string} [options.label] - equation label
* @returns {(Error|null)} error object or null
*
* @example
* var opts = {};
* var options = {
*     'className': 'equation',
*     'align': 'center',
*     'raw': '\\operatorname{erf}(x) = \\frac{2}{\\sqrt\\pi}\\int_0^x e^{-t^2}\\,\\mathrm dt',
*     'label': 'eqn:erf'
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function validate( opts, options ) {
	if ( !isObject( options ) ) {
		return new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );
	}
	if ( hasOwnProp( options, 'className' ) ) {
		opts.className = options.className;
		if ( !isString( opts.className ) ) {
			return new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'className', opts.className ) );
		}
	}
	if ( hasOwnProp( options, 'align' ) ) {
		opts.align = options.align;
		if ( !isString( opts.align ) ) {
			return new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'align', opts.align ) );
		}
	}
	if ( hasOwnProp( options, 'raw' ) ) {
		opts.raw = options.raw;
		if ( !isString( opts.raw ) ) {
			return new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'raw', opts.raw ) );
		}
	}
	if ( hasOwnProp( options, 'label' ) ) {
		opts.label = options.label;
		if ( !isString( opts.label ) ) {
			return new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'label', opts.label ) );
		}
	}
	return null;
}


// EXPORTS //

module.exports = validate;
