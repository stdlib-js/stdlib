#!/usr/bin/env node
'use strict';

// MODULES //

var join = require( 'path' ).join;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/tools/cli' );
var tex2svg = require( './../lib' );


// FUNCTIONS //

/**
* Callback invoked upon converting an input string to an SVG.
*
* @private
* @param {(Error|null)} error - error object
* @param {string} svg - output SVG
* @returns {void}
*/
function clbk( error, svg ) {
	if ( error ) {
		process.exitCode = 1;
		return console.error( error.message ); // eslint-disable-line no-console
	}
	console.log( svg ); // eslint-disable-line no-console
} // end FUNCTION clbk()


// MAIN //

/**
* Main execution sequence.
*
* @private
*/
function main() {
	var flags;
	var args;
	var opts;
	var cli;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './opts.json' ),
		'help': readFileSync( join( __dirname, 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});
	// Get any provided command-line arguments:
	args = cli.args();

	// Get any provided command-line flags:
	flags = cli.flags();

	opts = {};
	if ( flags.width ) {
		opts.width = parseInt( flags.width, 10 );
	}
	if ( flags.ex ) {
		opts.ex = parseInt( flags.ex, 10 );
	}
	if ( flags.inline ) {
		opts.inline = flags.inline;
	}
	if ( flags.linebreaks === false ) {
		opts.linebreaks = false;
	}
	tex2svg( args[ 0 ], opts, clbk );
} // end FUNCTION main()

main();
