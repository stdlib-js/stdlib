{
  "bernoulli": {
    "alias": "bernoulli",
    "pkg": "stdlib/random/array/bernoulli",
    "base_pkg": "stdlib/random/base/bernoulli",

    "param_1": "p",
    "param_1_value": "0.5",
    "param_1_desc": "success probability",
    "param_1_dtype": "number",
    "param_1_jsdoc_dtype": "Probability",
    "param_1_throws_desc": "must be a probability (i.e., a number on the interval [0,1])",

    "output_ts_dtype": "RealAndGenericDataType",
    "output_ts_typed_array": "RealTypedArray",
    "output_dtype_kind": "real_and_generic",

    "default_dtype": "float64",
    "default_dtype_kind": "real",
    "default_typed_array": "Float64Array",

    "from_desc": "a Bernoulli distribution",
    "readme_from_desc": "a [Bernoulli][@stdlib/random/base/bernoulli] distribution",

    "readme_heading": "Bernoulli Random Numbers",
    "readme_dtype_kind_desc": "real-valued data type",
    "readme_dtype_kind_pkg": "stdlib/array/typed-real-dtypes",

    "repl_text_main_desc": "Returns an array containing pseudorandom numbers drawn from a Bernoulli distribution.",
    "repl_text_assign_desc": "Fills an array with pseudorandom numbers drawn from a Bernoulli distribution.",
    "repl_text_factory_desc": "Returns a function for creating arrays containing pseudorandom numbers drawn from a Bernoulli distribution.",
    "repl_text_param_1_desc": "Success probability.",
    "repl_text_output_typed_arrays": "TypedArray",
    "keywords": "bernoulli,discrete"
  },
  "chi": {
    "alias": "chi",
    "pkg": "stdlib/random/array/chi",
    "base_pkg": "stdlib/random/base/chi",

    "param_1": "k",
    "param_1_value": "2.0",
    "param_1_desc": "degrees of freedom",
    "param_1_dtype": "number",
    "param_1_jsdoc_dtype": "PositiveNumber",
    "param_1_throws_desc": "must be a positive number",

    "output_ts_dtype": "RealFloatingPointAndGenericDataType",
    "output_ts_typed_array": "FloatTypedArray",
    "output_dtype_kind": "real_floating_point_and_generic",

    "default_dtype": "float64",
    "default_dtype_kind": "real_floating_point",
    "default_typed_array": "Float64Array",

    "from_desc": "a chi distribution",
    "readme_from_desc": "a [chi][@stdlib/random/base/chi] distribution",

    "readme_heading": "Chi Random Numbers",
    "readme_dtype_kind_desc": "real-valued floating-point data type",
    "readme_dtype_kind_pkg": "stdlib/array/typed-real-float-dtypes",

    "repl_text_main_desc": "Returns an array containing pseudorandom numbers drawn from a chi distribution.",
    "repl_text_assign_desc": "Fills an array with pseudorandom numbers drawn from a chi distribution.",
    "repl_text_factory_desc": "Returns a function for creating arrays containing pseudorandom numbers drawn from a chi distribution.",
    "repl_text_param_1_desc": "Degrees of freedom.",
    "repl_text_output_typed_arrays": "Float64Array|Float32Array",
    "keywords": "chi,continuous"
  },
  "chisquare": {
    "alias": "chisquare",
    "pkg": "stdlib/random/array/chisquare",
    "base_pkg": "stdlib/random/base/chisquare",

    "param_1": "k",
    "param_1_value": "2.0",
    "param_1_desc": "degrees of freedom",
    "param_1_dtype": "number",
    "param_1_jsdoc_dtype": "PositiveNumber",
    "param_1_throws_desc": "must be a positive number",

    "output_ts_dtype": "RealFloatingPointAndGenericDataType",
    "output_ts_typed_array": "FloatTypedArray",
    "output_dtype_kind": "real_floating_point_and_generic",

    "default_dtype": "float64",
    "default_dtype_kind": "real_floating_point",
    "default_typed_array": "Float64Array",

    "from_desc": "a chi-square distribution",
    "readme_from_desc": "a [chi-square][@stdlib/random/base/chisquare] distribution",

    "readme_heading": "Chi-square Random Numbers",
    "readme_dtype_kind_desc": "real-valued floating-point data type",
    "readme_dtype_kind_pkg": "stdlib/array/typed-real-float-dtypes",

    "repl_text_main_desc": "Returns an array containing pseudorandom numbers drawn from a chi-square distribution.",
    "repl_text_assign_desc": "Fills an array with pseudorandom numbers drawn from a chi-square distribution.",
    "repl_text_factory_desc": "Returns a function for creating arrays containing pseudorandom numbers drawn from a chi-square distribution.",
    "repl_text_param_1_desc": "Degrees of freedom.",
    "repl_text_output_typed_arrays": "Float64Array|Float32Array",
    "keywords": "chi2,chi-squared,chi-square,chisquare,chisquared,continuous"
  },
  "exponential": {
    "alias": "exponential",
    "pkg": "stdlib/random/array/exponential",
    "base_pkg": "stdlib/random/base/exponential",

    "param_1": "lambda",
    "param_1_value": "2.0",
    "param_1_desc": "rate parameter",
    "param_1_dtype": "number",
    "param_1_jsdoc_dtype": "PositiveNumber",
    "param_1_throws_desc": "must be a positive number",

    "output_ts_dtype": "RealFloatingPointAndGenericDataType",
    "output_ts_typed_array": "FloatTypedArray",
    "output_dtype_kind": "real_floating_point_and_generic",

    "default_dtype": "float64",
    "default_dtype_kind": "real_floating_point",
    "default_typed_array": "Float64Array",

    "from_desc": "an exponential distribution",
    "readme_from_desc": "an [exponential][@stdlib/random/base/exponential] distribution",

    "readme_heading": "Exponential Random Numbers",
    "readme_dtype_kind_desc": "real-valued floating-point data type",
    "readme_dtype_kind_pkg": "stdlib/array/typed-real-float-dtypes",

    "repl_text_main_desc": "Returns an array containing pseudorandom numbers drawn from an exponential distribution.",
    "repl_text_assign_desc": "Fills an array with pseudorandom numbers drawn from an exponential distribution.",
    "repl_text_factory_desc": "Returns a function for creating arrays containing pseudorandom numbers drawn from an exponential distribution.",
    "repl_text_param_1_desc": "Rate parameter.",
    "repl_text_output_typed_arrays": "Float64Array|Float32Array",
    "keywords": "exponential,exp,continuous"
  },
  "geometric": {
    "alias": "geometric",
    "pkg": "stdlib/random/array/geometric",
    "base_pkg": "stdlib/random/base/geometric",

    "param_1": "p",
    "param_1_value": "0.01",
    "param_1_desc": "success probability",
    "param_1_dtype": "number",
    "param_1_jsdoc_dtype": "Probability",
    "param_1_throws_desc": "must be a probability (i.e., a number on the interval [0,1])",

    "output_ts_dtype": "RealAndGenericDataType",
    "output_ts_typed_array": "RealTypedArray",
    "output_dtype_kind": "real_and_generic",

    "default_dtype": "float64",
    "default_dtype_kind": "real",
    "default_typed_array": "Float64Array",

    "from_desc": "a geometric distribution",
    "readme_from_desc": "a [geometric][@stdlib/random/base/geometric] distribution",

    "readme_heading": "Geometric Random Numbers",
    "readme_dtype_kind_desc": "real-valued data type",
    "readme_dtype_kind_pkg": "stdlib/array/typed-real-dtypes",

    "repl_text_main_desc": "Returns an array containing pseudorandom numbers drawn from a geometric distribution.",
    "repl_text_assign_desc": "Fills an array with pseudorandom numbers drawn from a geometric distribution.",
    "repl_text_factory_desc": "Returns a function for creating arrays containing pseudorandom numbers drawn from a geometric distribution.",
    "repl_text_param_1_desc": "Success probability.",
    "repl_text_output_typed_arrays": "TypedArray",
    "keywords": "geometric,bernoulli,discrete"
  },
  "poisson": {
    "alias": "poisson",
    "pkg": "stdlib/random/array/poisson",
    "base_pkg": "stdlib/random/base/poisson",

    "param_1": "lambda",
    "param_1_value": "2.0",
    "param_1_desc": "mean parameter",
    "param_1_dtype": "number",
    "param_1_jsdoc_dtype": "PositiveNumber",
    "param_1_throws_desc": "must be a positive number",

    "output_ts_dtype": "RealAndGenericDataType",
    "output_ts_typed_array": "RealTypedArray",
    "output_dtype_kind": "real_and_generic",

    "default_dtype": "float64",
    "default_dtype_kind": "real",
    "default_typed_array": "Float64Array",

    "from_desc": "a Poisson distribution",
    "readme_from_desc": "a [Poisson][@stdlib/random/base/poisson] distribution",

    "readme_heading": "Poisson Random Numbers",
    "readme_dtype_kind_desc": "real-valued data type",
    "readme_dtype_kind_pkg": "stdlib/array/typed-real-dtypes",

    "repl_text_main_desc": "Returns an array containing pseudorandom numbers drawn from a Poisson distribution.",
    "repl_text_assign_desc": "Fills an array with pseudorandom numbers drawn from a Poisson distribution.",
    "repl_text_factory_desc": "Returns a function for creating arrays containing pseudorandom numbers drawn from a Poisson distribution.",
    "repl_text_param_1_desc": "Mean parameter.",
    "repl_text_output_typed_arrays": "TypedArray",
    "keywords": "poisson,poiss,discrete"
  },
  "rayleigh": {
    "alias": "rayleigh",
    "pkg": "stdlib/random/array/rayleigh",
    "base_pkg": "stdlib/random/base/rayleigh",

    "param_1": "sigma",
    "param_1_value": "2.0",
    "param_1_desc": "scale parameter",
    "param_1_dtype": "number",
    "param_1_jsdoc_dtype": "PositiveNumber",
    "param_1_throws_desc": "must be a positive number",

    "output_ts_dtype": "RealFloatingPointAndGenericDataType",
    "output_ts_typed_array": "FloatTypedArray",
    "output_dtype_kind": "real_floating_point_and_generic",

    "default_dtype": "float64",
    "default_dtype_kind": "real_floating_point",
    "default_typed_array": "Float64Array",

    "from_desc": "a Rayleigh distribution",
    "readme_from_desc": "a [Rayleigh][@stdlib/random/base/rayleigh] distribution",

    "readme_heading": "Rayleigh Random Numbers",
    "readme_dtype_kind_desc": "real-valued floating-point data type",
    "readme_dtype_kind_pkg": "stdlib/array/typed-real-float-dtypes",

    "repl_text_main_desc": "Returns an array containing pseudorandom numbers drawn from a Rayleigh distribution.",
    "repl_text_assign_desc": "Fills an array with pseudorandom numbers drawn from a Rayleigh distribution.",
    "repl_text_factory_desc": "Returns a function for creating arrays containing pseudorandom numbers drawn from a Rayleigh distribution.",
    "repl_text_param_1_desc": "Scale parameter.",
    "repl_text_output_typed_arrays": "Float64Array|Float32Array",
    "keywords": "rayleigh,continuous"
  },
  "t": {
    "alias": "t",
    "pkg": "stdlib/random/array/t",
    "base_pkg": "stdlib/random/base/t",

    "param_1": "v",
    "param_1_value": "2.0",
    "param_1_desc": "degrees of freedom",
    "param_1_dtype": "number",
    "param_1_jsdoc_dtype": "PositiveNumber",
    "param_1_throws_desc": "must be a positive number",

    "output_ts_dtype": "RealFloatingPointAndGenericDataType",
    "output_ts_typed_array": "FloatTypedArray",
    "output_dtype_kind": "real_floating_point_and_generic",

    "default_dtype": "float64",
    "default_dtype_kind": "real_floating_point",
    "default_typed_array": "Float64Array",

    "from_desc": "a Student'\\''s t-distribution",
    "readme_from_desc": "a [Student'\\''s t][@stdlib/random/base/t]-distribution",

    "readme_heading": "Student'\\''s t Random Numbers",
    "readme_dtype_kind_desc": "real-valued floating-point data type",
    "readme_dtype_kind_pkg": "stdlib/array/typed-real-float-dtypes",

    "repl_text_main_desc": "Returns an array containing pseudorandom numbers drawn from a Student'\\''s t-distribution.",
    "repl_text_assign_desc": "Fills an array with pseudorandom numbers drawn from a Student'\\''s t-distribution.",
    "repl_text_factory_desc": "Returns a function for creating arrays containing pseudorandom numbers drawn from a Student'\\''s t-distribution.",
    "repl_text_param_1_desc": "Degrees of freedom.",
    "repl_text_output_typed_arrays": "Float64Array|Float32Array",
    "keywords": "normal,gaussian,t,student,continuous"
  }
}
