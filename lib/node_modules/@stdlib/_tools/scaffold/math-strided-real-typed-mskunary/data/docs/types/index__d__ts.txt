/*
* @license Apache-2.0
*
* Copyright (c) {{YEAR}} {{COPYRIGHT}}.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// TypeScript Version: 2.0

/**
* Interface describing `{{ALIAS}}`.
*/
interface Routine {
	/**
	* {{MAIN_DESC}}
	*
	* @param N - number of indexed elements
	* @param x - input array
	* @param strideX - `x` stride length
	* @param mask - mask array
	* @param strideMask - `mask` stride length
	* @param y - destination array
	* @param strideY - `y` stride length
	* @returns `y`
	*
	* @example
	* var {{TYPED_ARRAY_CTOR}} = require( `@stdlib/array/{{TYPED_ARRAY_DTYPE}}` );
	* var Uint8Array = require( `@stdlib/array/uint8` );
	*
	* var x = new {{TYPED_ARRAY_CTOR}}( [ {{X_VALUES_LEN_5}} ] );
	* var m = new Uint8Array( [ {{MASK_VALUES_LEN_5}} ] );
	* var y = new {{TYPED_ARRAY_CTOR}}( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );
	*
	* {{ALIAS}}( x.length, x, 1, m, 1, y, 1 );
	* // y => <{{TYPED_ARRAY_CTOR}}>[ {{EXPECTED_LEN_5}} ]
	*/
	( N: number, x: {{TYPED_ARRAY_CTOR}}, strideX: number, mask: Uint8Array, strideMask: number, y: {{TYPED_ARRAY_CTOR}}, strideY: number ): {{TYPED_ARRAY_CTOR}}; // tslint:disable-line:max-line-length

	/**
	* {{NDARRAY_DESC}}
	*
	* @param N - number of indexed elements
	* @param x - input array
	* @param strideX - `x` stride length
	* @param offsetX - starting index for `x`
	* @param mask - mask array
	* @param strideMask - `mask` stride length
	* @param offsetMask - starting index for `mask`
	* @param y - destination array
	* @param strideY - `y` stride length
	* @param offsetY - starting index for `y`
	* @returns `y`
	*
	* @example
	* var {{TYPED_ARRAY_CTOR}} = require( `@stdlib/array/{{TYPED_ARRAY_DTYPE}}` );
	* var Uint8Array = require( `@stdlib/array/uint8` );
	*
	* var x = new {{TYPED_ARRAY_CTOR}}( [ {{X_VALUES_LEN_5}} ] );
	* var m = new Uint8Array( [ {{MASK_VALUES_LEN_5}} ] );
	* var y = new {{TYPED_ARRAY_CTOR}}( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );
	*
	* {{ALIAS}}.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0 );
	* // y => <{{TYPED_ARRAY_CTOR}}>[ {{EXPECTED_LEN_5}} ]
	*/
	ndarray( N: number, x: {{TYPED_ARRAY_CTOR}}, strideX: number, offsetX: number, mask: Uint8Array, strideMask: number, offsetMask: number, y: {{TYPED_ARRAY_CTOR}}, strideY: number, offsetY: number ): {{TYPED_ARRAY_CTOR}}; // tslint:disable-line:max-line-length
}

/**
* {{MAIN_DESC}}
*
* @param N - number of indexed elements
* @param x - input array
* @param strideX - `x` stride length
* @param mask - mask array
* @param strideMask - `mask` stride length
* @param y - destination array
* @param strideY - `y` stride length
* @returns `y`
*
* @example
* var {{TYPED_ARRAY_CTOR}} = require( `@stdlib/array/{{TYPED_ARRAY_DTYPE}}` );
* var Uint8Array = require( `@stdlib/array/uint8` );
*
* var x = new {{TYPED_ARRAY_CTOR}}( [ {{X_VALUES_LEN_5}} ] );
* var m = new Uint8Array( [ {{MASK_VALUES_LEN_5}} ] );
* var y = new {{TYPED_ARRAY_CTOR}}( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );
*
* {{ALIAS}}( x.length, x, 1, m, 1, y, 1 );
* // y => <{{TYPED_ARRAY_CTOR}}>[ {{EXPECTED_LEN_5}} ]
*
* @example
* var {{TYPED_ARRAY_CTOR}} = require( `@stdlib/array/{{TYPED_ARRAY_DTYPE}}` );
* var Uint8Array = require( `@stdlib/array/uint8` );
*
* var x = new {{TYPED_ARRAY_CTOR}}( [ {{X_VALUES_LEN_5}} ] );
* var m = new Uint8Array( [ {{MASK_VALUES_LEN_5}} ] );
* var y = new {{TYPED_ARRAY_CTOR}}( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );
*
* {{ALIAS}}.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0 );
* // y => <{{TYPED_ARRAY_CTOR}}>[ {{EXPECTED_LEN_5}} ]
*/
declare var {{ALIAS}}: Routine;


// EXPORTS //

export = {{ALIAS}};
