
{{alias}}( N, x, sx, m, sm, y, sy )
    {{REPL_TEXT_MAIN_DESC}}

    The `N` and stride parameters determine which strided array elements are
    accessed at runtime.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    x: {{TYPED_ARRAY_CTOR}}
        Input array.

    sx: integer
        Index increment for `x`.

    m: Uint8Array
        Mask array.

    sm: integer
        Index increment for `m`.

    y: {{TYPED_ARRAY_CTOR}}
        Destination array.

    sy: integer
        Index increment for `y`.

    Returns
    -------
    y: {{TYPED_ARRAY_CTOR}}
        Input array `y`.

    Examples
    --------
    // Standard usage:
    > var x = new {{alias:@stdlib/array/{{TYPED_ARRAY_DTYPE}}}}( [ {{X_VALUES_LEN_4}} ] );
    > var m = new {{alias:@stdlib/array/uint8}}( [ {{MASK_VALUES_LEN_4}} ] );
    > var y = new {{alias:@stdlib/array/{{TYPED_ARRAY_DTYPE}}}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > {{alias}}( x.length, x, 1, m, 1, y, 1 )
    <{{TYPED_ARRAY_CTOR}}>[ {{EXPECTED_LEN_4}} ]

    // Using `N` and stride parameters:
    > y = new {{alias:@stdlib/array/{{TYPED_ARRAY_DTYPE}}}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > {{alias}}( 2, x, 2, m, 2, y, -1 )
    <{{TYPED_ARRAY_CTOR}}>[ {{EXPECTED_LEN_2_X2_YM1}}, 0.0, 0.0 ]

    // Using view offsets:
    > var x0 = new {{alias:@stdlib/array/{{TYPED_ARRAY_DTYPE}}}}( [ {{X_VALUES_LEN_4}} ] );
    > var m0 = new {{alias:@stdlib/array/uint8}}( [ {{MASK_VALUES_LEN_4}} ] );
    > var y0 = new {{alias:@stdlib/array/{{TYPED_ARRAY_DTYPE}}}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > var x1 = new {{alias:@stdlib/array/{{TYPED_ARRAY_DTYPE}}}}( x0.buffer, x0.BYTES_PER_ELEMENT*1 );
    > var m1 = new {{alias:@stdlib/array/uint8}}( m0.buffer, m0.BYTES_PER_ELEMENT*1 );
    > var y1 = new {{alias:@stdlib/array/{{TYPED_ARRAY_DTYPE}}}}( y0.buffer, y0.BYTES_PER_ELEMENT*2 );
    > {{alias}}( 2, x1, -2, m1, -2, y1, 1 )
    <{{TYPED_ARRAY_CTOR}}>[ {{EXPECTED_LEN_2_XM2_Y1}} ]
    > y0
    <{{TYPED_ARRAY_CTOR}}>[ 0.0, 0.0, {{EXPECTED_LEN_2_XM2_Y1}} ]


{{alias}}.ndarray( N, x, sx, ox, m, sm, om, y, sy, oy )
    {{REPL_TEXT_NDARRAY_DESC}}

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing semantics based on starting
    indices.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    x: {{TYPED_ARRAY_CTOR}}
        Input array.

    sx: integer
        Index increment for `x`.

    ox: integer
        Starting index for `x`.

    m: {{TYPED_ARRAY_CTOR}}
        Mask array.

    sm: integer
        Index increment for `m`.

    om: integer
        Starting index for `m`.

    y: {{TYPED_ARRAY_CTOR}}
        Destination array.

    sy: integer
        Index increment for `y`.

    oy: integer
        Starting index for `y`.

    Returns
    -------
    y: {{TYPED_ARRAY_CTOR}}
        Input array `y`.

    Examples
    --------
    // Standard usage:
    > var x = new {{alias:@stdlib/array/{{TYPED_ARRAY_DTYPE}}}}( [ {{X_VALUES_LEN_4}} ] );
    > var m = new {{alias:@stdlib/array/uint8}}( [ {{MASK_VALUES_LEN_4}} ] );
    > var y = new {{alias:@stdlib/array/{{TYPED_ARRAY_DTYPE}}}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > {{alias}}.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0 )
    <{{TYPED_ARRAY_CTOR}}>[ {{EXPECTED_LEN_4}} ]

    // Advanced indexing:
    > x = new {{alias:@stdlib/array/{{TYPED_ARRAY_DTYPE}}}}( [ {{X_VALUES_LEN_4}} ] );
    > m = new {{alias:@stdlib/array/uint8}}( [ {{MASK_VALUES_LEN_4}} ] );
    > y = new {{alias:@stdlib/array/{{TYPED_ARRAY_DTYPE}}}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > {{alias}}.ndarray( 2, x, 2, 1, m, 2, 1, y, -1, y.length-1 )
    <{{TYPED_ARRAY_CTOR}}>[ 0.0, 0.0, {{EXPECTED_LEN_2_XM2_Y1}} ]

    See Also
    --------

