<!--

@license Apache-2.0

Copyright (c) {{YEAR}} {{COPYRIGHT}}.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->

# {{ALIAS}}

> {{PKG_DESC}}

<section class="intro">

</section>

<!-- /.intro -->

<section class="usage">

## Usage

```javascript
var {{ALIAS}} = require( '@{{PKG}}' );
```

#### {{ALIAS}}( N, x, sx, m, sm, y, sy )

{{MAIN_DESC}}

```javascript
var {{TYPED_ARRAY_CTOR}} = require( '@stdlib/array/{{TYPED_ARRAY_DTYPE}}' );
var Uint8Array = require( '@stdlib/array/uint8' );

var x = new {{TYPED_ARRAY_CTOR}}( [ {{X_VALUES_LEN_5}} ] );
var m = new Uint8Array( [ {{MASK_VALUES_LEN_5}} ] );
var y = new {{TYPED_ARRAY_CTOR}}( x.length );

{{ALIAS}}( x.length, x, 1, m, 1, y, 1 );
// y => <{{TYPED_ARRAY_CTOR}}>[ {{EXPECTED_LEN_5}} ]
```

The function accepts the following arguments:

-   **N**: number of indexed elements.
-   **x**: input [`{{TYPED_ARRAY_CTOR}}`][@stdlib/array/{{TYPED_ARRAY_DTYPE}}].
-   **sx**: index increment for `x`.
-   **m**: mask [`Uint8Array`][@stdlib/array/uint8].
-   **sm**: index increment for `m`.
-   **y**: output [`{{TYPED_ARRAY_CTOR}}`][@stdlib/array/{{TYPED_ARRAY_DTYPE}}].
-   **sy**: index increment for `y`.

The `N` and stride parameters determine which strided array elements are accessed at runtime. For example, to index every other value in `x` and to index the first `N` elements of `y` in reverse order,

```javascript
var {{TYPED_ARRAY_CTOR}} = require( '@stdlib/array/{{TYPED_ARRAY_DTYPE}}' );
var Uint8Array = require( '@stdlib/array/uint8' );

var x = new {{TYPED_ARRAY_CTOR}}( [ {{X_VALUES_LEN_6}} ] );
var m = new Uint8Array( [ {{MASK_VALUES_LEN_6}} ] );
var y = new {{TYPED_ARRAY_CTOR}}( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );

{{ALIAS}}( 3, x, 2, m, 2, y, -1 );
// y => <{{TYPED_ARRAY_CTOR}}>[ {{EXPECTED_LEN_3_X2_YM1}}, 0.0, 0.0, 0.0 ]
```

Note that indexing is relative to the first index. To introduce an offset, use [`typed array`][@stdlib/array/{{TYPED_ARRAY_DTYPE}}] views.

```javascript
var {{TYPED_ARRAY_CTOR}} = require( '@stdlib/array/{{TYPED_ARRAY_DTYPE}}' );
var Uint8Array = require( '@stdlib/array/uint8' );

// Initial arrays...
var x0 = new {{TYPED_ARRAY_CTOR}}( [ {{X_VALUES_LEN_6}} ] );
var m0 = new Uint8Array( [ {{MASK_VALUES_LEN_6}} ] );
var y0 = new {{TYPED_ARRAY_CTOR}}( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );

// Create offset views...
var x1 = new {{TYPED_ARRAY_CTOR}}( x0.buffer, x0.BYTES_PER_ELEMENT*1 ); // start at 2nd element
var m1 = new Uint8Array( m0.buffer, m0.BYTES_PER_ELEMENT*1 ); // start at 2nd element
var y1 = new {{TYPED_ARRAY_CTOR}}( y0.buffer, y0.BYTES_PER_ELEMENT*3 ); // start at 4th element

{{ALIAS}}( 3, x1, -2, m1, -2, y1, 1 );
// y0 => <{{TYPED_ARRAY_CTOR}}>[ 0.0, 0.0, 0.0, {{EXPECTED_LEN_3_XM2_Y1}} ]
```

#### {{ALIAS}}.ndarray( N, x, sx, ox, m, sm, om, y, sy, oy )

{{NDARRAY_DESC}}

```javascript
var {{TYPED_ARRAY_CTOR}} = require( '@stdlib/array/{{TYPED_ARRAY_DTYPE}}' );
var Uint8Array = require( '@stdlib/array/uint8' );

var x = new {{TYPED_ARRAY_CTOR}}( [ {{X_VALUES_LEN_5}} ] );
var m = new Uint8Array( [ {{MASK_VALUES_LEN_5}} ] );
var y = new {{TYPED_ARRAY_CTOR}}( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );

{{ALIAS}}.ndarray( x.length, x, 1, 0, m, 1, 0, y, 1, 0 );
// y => <{{TYPED_ARRAY_CTOR}}>[ {{EXPECTED_LEN_5}} ]
```

The function accepts the following additional arguments:

-   **ox**: starting index for `x`.
-   **om**: starting index for `m`.
-   **oy**: starting index for `y`.

While [`typed array`][@stdlib/array/{{TYPED_ARRAY_DTYPE}}] views mandate a view offset based on the underlying `buffer`, the offset parameters support indexing semantics based on starting indices. For example, to index every other value in `x` starting from the second value and to index the last `N` elements in `y`,

```javascript
var {{TYPED_ARRAY_CTOR}} = require( '@stdlib/array/{{TYPED_ARRAY_DTYPE}}' );
var Uint8Array = require( '@stdlib/array/uint8' );

var x = new {{TYPED_ARRAY_CTOR}}( [ {{X_VALUES_LEN_6}} ] );
var m = new Uint8Array( [ {{MASK_VALUES_LEN_6}} ] );
var y = new {{TYPED_ARRAY_CTOR}}( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );

{{ALIAS}}.ndarray( 3, x, 2, 1, m, 2, 1, y, -1, y.length-1 );
// y => <{{TYPED_ARRAY_CTOR}}>[ 0.0, 0.0, 0.0, {{EXPECTED_LEN_3_XM2_Y1}} ]
```

</section>

<!-- /.usage -->

<section class="notes">

</section>

<!-- /.notes -->

<section class="examples">

## Examples

<!-- eslint no-undef: "error" -->

```javascript
var uniform = require( '@stdlib/random/base/uniform' );
var {{TYPED_ARRAY_CTOR}} = require( '@stdlib/array/{{TYPED_ARRAY_DTYPE}}' );
var Uint8Array = require( '@stdlib/array/uint8' );
var {{ALIAS}} = require( '@{{PKG}}' );

var x = new {{TYPED_ARRAY_CTOR}}( 10 );
var m = new Uint8Array( 10 );
var y = new {{TYPED_ARRAY_CTOR}}( 10 );

var i;
for ( i = 0; i < x.length; i++ ) {
    x[ i ] = uniform( {{C_RAND_MIN}}, {{C_RAND_MAX}} );
    if ( uniform( 0.0, 1.0 ) < 0.5 ) {
        m[ i ] = 1;
    }
}
console.log( x );
console.log( m );
console.log( y );

{{ALIAS}}.ndarray( x.length, x, 1, 0, m, 1, 0, y, -1, y.length-1 );
console.log( y );
```

</section>

<!-- /.examples -->

<!-- C interface documentation. -->

* * *

<section class="c">

## C APIs

<!-- Section to include introductory text. Make sure to keep an empty line after the intro `section` element and another before the `/section` close. -->

<section class="intro">

</section>

<!-- /.intro -->

<!-- C usage documentation. -->

<section class="usage">

### Usage

```c
#include "{{PKG_INCLUDE}}.h"
```

#### stdlib_strided_{{ALIAS_SNAKECASE}}( N, \*X, strideX, \*Mask, strideMask, \*Y, strideY )

{{C_MAIN_DESC}}

```c
#include <stdint.h>

const {{C_TYPE}} X[] = { {{C_X_VALUES_LEN_8}} };
const uint8_t Mask[] = { {{C_MASK_VALUES_LEN_8}} };
{{C_TYPE}} Y[] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

int64_t N = 4;

stdlib_strided_{{ALIAS_SNAKECASE}}( N, X, 2, Mask, 2, Y, 2 );
```

The function accepts the following arguments:

-   **N**: `[in] int64_t` number of indexed elements.
-   **X**: `[in] {{C_TYPE}}*` input array.
-   **strideX**: `[in] int64_t` index increment for `X`.
-   **Mask**: `[in] uint8_t*` mask array.
-   **strideMask**: `[in] int64_t` index increment for `Mask`.
-   **Y**: `[out] {{C_TYPE}}*` output array.
-   **strideY**: `[in] int64_t` index increment for `Y`.

```c
void stdlib_strided_{{ALIAS_SNAKECASE}}( const int64_t N, const {{C_TYPE}} *X, const int64_t strideX, const uint8_t *Mask, const int64_t strideMask, {{C_TYPE}} *Y, const int64_t strideY );
```

</section>

<!-- /.usage -->

<!-- C API usage notes. Make sure to keep an empty line after the `section` element and another before the `/section` close. -->

<section class="notes">

</section>

<!-- /.notes -->

<!-- C API usage examples. -->

<section class="examples">

### Examples

```c
#include "{{PKG_INCLUDE}}.h"
#include <stdint.h>
#include <stdio.h>

int main( void ) {
    // Create an input strided array:
    const {{C_TYPE}} X[] = { {{C_X_VALUES_LEN_8}} };

    // Create a mask strided array:
    const uint8_t M[] = { {{C_MASK_VALUES_LEN_8}} };

    // Create an output strided array:
    {{C_TYPE}} Y[] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };

    // Specify the number of elements:
    const int64_t N = 4;

    // Specify the stride lengths:
    const int64_t strideX = 2;
    const int64_t strideM = 2;
    const int64_t strideY = 2;

    // Compute the results:
    stdlib_strided_{{ALIAS_SNAKECASE}}( N, X, strideX, M, strideM, Y, strideY );

    // Print the results:
    for ( int i = 0; i < 8; i++ ) {
        printf( "Y[ %i ] = %{{C_PRINT_FMT}}\n", i, Y[ i ] );
    }
}
```

</section>

<!-- /.examples -->

</section>

<!-- /.c -->

<!-- Section for related `stdlib` packages. Do not manually edit this section, as it is automatically populated. -->

<section class="related">

</section>

<!-- /.related -->

<!-- Section for all links. Make sure to keep an empty line after the `section` element and another before the `/section` close. -->

<section class="links">

[@stdlib/array/{{TYPED_ARRAY_DTYPE}}]: https://github.com/stdlib-js/stdlib{{DESC_LINK_TEXT_LABEL}}

[@stdlib/array/uint8]: https://github.com/stdlib-js/stdlib

</section>

<!-- /.links -->
