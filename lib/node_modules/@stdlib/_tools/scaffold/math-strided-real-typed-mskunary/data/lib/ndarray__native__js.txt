/**
* @license Apache-2.0
*
* Copyright (c) {{YEAR}} {{COPYRIGHT}}.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var {{TYPED_ARRAY_CTOR}} = require( '@stdlib/array/{{TYPED_ARRAY_DTYPE}}' );
var Uint8Array = require( '@stdlib/array/uint8' );
var addon = require( './{{ALIAS_SNAKECASE}}.native.js' );


// MAIN //

/**
* {{MAIN_DESC}}
*
* @param {NonNegativeInteger} N - number of indexed elements
* @param {{{TYPED_ARRAY_CTOR}}} x - input array
* @param {integer} sx - `x` stride length
* @param {NonNegativeInteger} ox - starting `x` index
* @param {Uint8Array} m - mask array
* @param {integer} sm - `m` stride length
* @param {NonNegativeInteger} om - starting `m` index
* @param {{{TYPED_ARRAY_CTOR}}} y - destination array
* @param {integer} sy - `y` stride length
* @param {NonNegativeInteger} oy - starting `y` index
* @returns {{{TYPED_ARRAY_CTOR}}} `y`
*
* @example
* var {{TYPED_ARRAY_CTOR}} = require( '@stdlib/array/{{TYPED_ARRAY_DTYPE}}' );
* var Uint8Array = require( '@stdlib/array/uint8' );
*
* var x = new {{TYPED_ARRAY_CTOR}}( [ {{X_VALUES_LEN_5}} ] );
* var m = new Uint8Array( [ {{MASK_VALUES_LEN_5}} ] );
* var y = new {{TYPED_ARRAY_CTOR}}( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );
*
* {{ALIAS}}( x.length, x, 1, 0, m, 1, 0, y, 1, 0 );
* // y => <{{TYPED_ARRAY_CTOR}}>[ {{EXPECTED_LEN_5}} ]
*/
function {{ALIAS}}( N, x, sx, ox, m, sm, om, y, sy, oy ) {
	var viewX;
	var viewM;
	var viewY;
	if ( sx < 0 ) {
		ox += (N-1) * sx;
	}
	if ( sm < 0 ) {
		om += (N-1) * sm;
	}
	if ( sy < 0 ) {
		oy += (N-1) * sy;
	}
	viewX = new {{TYPED_ARRAY_CTOR}}( x.buffer, x.byteOffset+(x.BYTES_PER_ELEMENT*ox), x.length-ox ); // eslint-disable-line max-len
	viewM = new Uint8Array( m.buffer, m.byteOffset+(m.BYTES_PER_ELEMENT*om), m.length-om ); // eslint-disable-line max-len
	viewY = new {{TYPED_ARRAY_CTOR}}( y.buffer, y.byteOffset+(y.BYTES_PER_ELEMENT*oy), y.length-oy ); // eslint-disable-line max-len
	addon( N, viewX, sx, viewM, sm, viewY, sy );
	return y;
}


// EXPORTS //

module.exports = {{ALIAS}};
