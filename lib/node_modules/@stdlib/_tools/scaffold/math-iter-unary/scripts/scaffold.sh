#!/usr/bin/env bash
#
# @license Apache-2.0
#
# Copyright (c) 2020 The Stdlib Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Script for scaffolding a package exposing an iterator which applies a unary mathematical function.
#
# Usage: scaffold.h
#
# Environment Variables:
#
#   ALIAS             Main export alias.
#   PKG_DESC          Package description.
#   MODULE_DESC       Module description.
#   MAIN_DESC         Main export description.
#   TEST_DESC         Test description.
#   DESC_LINK_TEXT    README link text.
#   KEYWORDS          List of keywords.
#   RAND_MIN          Minimum value for generated values.
#   RAND_MAX          Maximum value for generated values.
#   VALUES_LEN_2      List of input values.
#

## USER-DEFINED VARIABLES ##

# Define the main export alias:
alias=${ALIAS:-'iterTest'}

# Define the package description:
# shellcheck disable=SC2016
pkg_desc=${PKG_DESC:-'Create an iterator which computes `gamma(x+1) - 1` for each iterated value.'}

# Define the module description:
# shellcheck disable=SC2016
module_desc=${MODULE_DESC:-'Create an iterator which iteratively computes `gamma(x+1) - 1`.'}

# Define main export description:
# shellcheck disable=SC2016
main_desc=${MAIN_DESC:-'Returns an iterator which iteratively computes `gamma(x+1) - 1` without cancellation errors for small `x`.'}

# Define the test description:
# shellcheck disable=SC2016
test_desc=${TEST_DESC:-'computes `gamma(x+1) - 1` for each iterated value'}

# Define description text (found in the README) which should be a link to the unary package (NOTE: to not include a link, set to an empty string):
desc_link_text=${DESC_LINK_TEXT:-''}

# Define a list of keywords:
if [[ -z "${KEYWORDS:-}" ]]; then
keywords=(
	"stdmath"
    "mathematics"
    "math"
    "special function"
    "special"
    "function"
    "gamma"
    "gammap1m1"
    "gamma1pm1"
    "factorial"
    "number"
)
else
	IFS=','; read -ra keywords <<< "${KEYWORDS}"; IFS=' ';
fi

# Define the minimum value of generated values when benchmarking and testing the implementation:
rand_min=${RAND_MIN:-'-5.0'}

# Define the maximum value of generated values when benchmarking and testing the implementation:
rand_max=${RAND_MAX:-'5.0'}

# Define a list of input values:
if [[ -z "${VALUES_LEN_2:-}" ]]; then
values_len_2=(
	'0.2'
	'-8.5'
)
else
	IFS=','; read -ra values_len_2 <<< "${VALUES_LEN_2}"; IFS=' ';
fi


## COMPUTED VARIABLES ##

# Converts from camel case to a underscored delineated string.
#
# $1 - string to convert
camelcase_to_snakecase() {
	echo "$1" | sed 's/\([^A-Z]\)\([A-Z]\)/\1_\2/g' | sed 's/\([A-Z]\)\([A-Z]\)\([^A-Z]\)/\1_\2\3/g' | tr '[:upper:]' '[:lower:]'
}

# Convert the alias to snakecase:
alias_snakecase=$(camelcase_to_snakecase "${alias:4}")

# Define the destination package alias:
pkg_alias="${alias_snakecase//_/-}"

# Define the destination package parent directory path:
pkg_path="stdlib/math/iter/special"

# Define the full destination package name:
pkg="${pkg_path}/${pkg_alias}"

# Determine the root project directory:
root_dir="$(git rev-parse --show-toplevel)"

# Define the project source code directory:
base_dir="${root_dir}/lib/node_modules"

# Define the destination path:
dest_dir="${base_dir}/@${pkg}"

# Define the location of this scaffold:
this_dir="${base_dir}/@stdlib/_tools/scaffold/math-iter-unary"

# Define the location of a utility for wrapping REPL text descriptions:
wrap="${base_dir}/@stdlib/_tools/repl-txt/wrap-desc/bin/cli"

# Define the unary function alias:
unary_alias=$(echo "${alias:4:1}" | tr '[:upper:]' '[:lower:]')
unary_alias="${unary_alias}${alias:5}"

# Convert the unary function alias to snakecase:
unary_alias_snakecase=$(camelcase_to_snakecase "${unary_alias}")

# Define the unary package "alias":
unary_pkg_alias="${unary_alias_snakecase//_/-}"

# Define the unary package parent directory path:
unary_pkg_path="stdlib/math/base/special"

# Define the package containing the unary function to apply:
unary_pkg="${unary_pkg_path}/${unary_pkg_alias}"

# Define the REPL text main export description (note: 4 space indent and wrap at 80 characters):
repl_text_main_desc=$(echo -n "${main_desc}" | "${wrap}")
repl_text_main_desc="${repl_text_main_desc/    /}"

# Define the copyright year:
year=$(date +'%Y')

# Define the copyright holders:
copyright='The Stdlib Authors'

# Define lists of expected values:
expected_script="var roundn = require( '${base_dir}/@stdlib/math/base/special/roundn' );var isInteger = require( '${base_dir}/@stdlib/assert/is-integer' ).isPrimitive;var f = require( '${base_dir}/@${unary_pkg}' );var arr = '${values_len_2[*]}'.split( ' ' );var expected = arr.slice();for ( var i = 0; i < arr.length; i++ ) {var v1 = f( parseFloat( arr[ i ] ) );var v2 = roundn( v1, -3 );if ( v1 == v2 ) {v = v1.toString();if ( isInteger( v1 ) ) {v += '.0';}} else {v = '~' + v2.toString();if ( isInteger( v2 ) ) {v += '.0';}}expected[ i ] = v;}console.log( expected.join( ',' ) );"

tmp=$(node -e "${expected_script}")
IFS=','; read -ra expected_len_2 <<< "${tmp}"; IFS=' ';


## SCRIPT ##

# Define the list of scaffold directories:
dirs=(
	"benchmark"
	"docs"
	"docs/types"
	"examples"
	"lib"
	"test"
)

# Define the list of scaffold files:
files=(
	"benchmark/benchmark.js"
	"docs/types/index.d.ts"
	"docs/types/test.ts"
	"docs/repl.txt"
	"examples/index.js"
	"lib/index.js"
	"lib/main.js"
	"test/test.js"
	"package.json"
	"README.md"
)

# Create the destination directories...
for dir in ${dirs[*]}; do
	mkdir -p "${dest_dir}/${dir}"
done

# Copy the scaffold files to the destination directory...
for file in ${files[*]}; do
	cp "${this_dir}/data/${file//\./__}.txt" "${dest_dir}/${file}"
done

# Performs a find and replace across the destination directory.
#
# $1 - regular expression
find_and_replace() {
	find "${dest_dir}" -type f -print0 | xargs -0 perl -pi -w -e "$1"
}

# Performs a find and replace across a specified file.
#
# $1 - file
# $2 - regular expression
file_find_and_replace() {
	find "${dest_dir}/$1" -type f -print0 | xargs -0 perl -pi -w -e "$2"
}

# Joins a list of strings.
#
# $1 - separator
# $* - list of strings to join
join() {
	local d=$1; shift; local f=$1; shift; printf %s "$f" "${@/#/$d}";
}

# For each of the variables defined above, insert into the scaffold files...
regex="s/\\{\\{YEAR\\}\\}/${year}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{COPYRIGHT\\}\\}/${copyright}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{ALIAS\\}\\}/${alias}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{ALIAS_SNAKECASE\\}\\}/${alias_snakecase}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{PKG\\}\\}/${pkg//\//\\/}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{PKG_DESC\\}\\}/${pkg_desc//iterator/[iterator][mdn-iterator-protocol]}/g;"
file_find_and_replace "README.md" "${regex}"

regex="s/\\{\\{PKG_DESC\\}\\}/${pkg_desc}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{MODULE_DESC\\}\\}/${module_desc//iterator/[iterator][mdn-iterator-protocol]}/g;"
file_find_and_replace "README.md" "${regex}"

regex="s/\\{\\{MODULE_DESC\\}\\}/${module_desc}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{MAIN_DESC\\}\\}/${main_desc//iterator/[iterator][mdn-iterator-protocol]}/g;"
file_find_and_replace "README.md" "${regex}"

regex="s/\\{\\{MAIN_DESC\\}\\}/${main_desc}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{TEST_DESC\\}\\}/${test_desc}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{REPL_TEXT_MAIN_DESC\\}\\}/${repl_text_main_desc}/g;"
find_and_replace "${regex}"

if [ -n "${desc_link_text}" ]; then
	# WARNING: we assume that the description link text does *not* include any special regular expression characters...
	regex="s/${desc_link_text}/[${desc_link_text}][\\@${unary_pkg//\//\\/}]/g;"
	file_find_and_replace "README.md" "${regex}"
fi

regex="s/\\{\\{UNARY_PKG\\}\\}/${unary_pkg//\//\\/}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{UNARY_ALIAS\\}\\}/${unary_alias}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{RAND_MIN\\}\\}/${rand_min}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{RAND_MAX\\}\\}/${rand_max}/g;"
find_and_replace "${regex}"

keywords_sep='",\n    "'
if [ "${#keywords[*]}" -eq 0 ]; then
	words=''
else
	words=$(join "${keywords_sep}" "${keywords[@]}")
	words="\\n    \"${words}\","
fi
regex="s/\\{\\{KEYWORDS\\}\\}/${words}/g;"
find_and_replace "${regex}"

expected_values_sep=', '

values=$(join "${expected_values_sep}" "${values_len_2[@]}")
regex="s/\\{\\{VALUES_LEN_2\\}\\}/${values}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{EXPECTED_1\\}\\}/${expected_len_2[0]}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{EXPECTED_2\\}\\}/${expected_len_2[1]}/g;"
find_and_replace "${regex}"
