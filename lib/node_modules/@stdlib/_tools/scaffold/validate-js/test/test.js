/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var tape = require( 'tape' );
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var replace = require( '@stdlib/string/replace' );
var currentYear = require( '@stdlib/time/current-year' );
var create = require( './../lib' );


// FIXTURES //

var MAIN1 = readFileSync( resolve( __dirname, 'fixtures', 'main.js_1.txt' ) );
var VALIDATE1 = readFileSync( resolve( __dirname, 'fixtures', 'validate.js_1.txt' ) );
var MAIN2 = readFileSync( resolve( __dirname, 'fixtures', 'main.js_2.txt' ) );
var VALIDATE2 = readFileSync( resolve( __dirname, 'fixtures', 'validate.js_2.txt' ) );
var MAIN3 = readFileSync( resolve( __dirname, 'fixtures', 'main.js_3.txt' ) );
var VALIDATE3 = readFileSync( resolve( __dirname, 'fixtures', 'validate.js_3.txt' ) );


// VARIABLES //

var CURRENT_YEAR = String( currentYear() );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof create, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided a primitive string', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		null,
		void 0,
		true,
		[],
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			create( value );
		};
	}
});

tape( 'the function throws an error if the source code does not contain a JSDoc comment for a validate function', function test( t ) {
	var values;
	var i;

	values = [
		'// Only a single-line comment',
		[
			'/**',
			'* Not a JSDoc comment for a validate function.',
			'*/'
		].join( '\n' ),
		'function validate() {}'
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), Error, 'throws a error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			create( value );
		};
	}
});

tape( 'the function returns `validate.js` contents', function test( t ) {
	var expected;
	var actual;

	actual = create( MAIN1 );
	expected = replace( VALIDATE1.toString(), '{{YEAR}}', CURRENT_YEAR );
	t.strictEqual( actual, expected, 'returns expected contents' );
	t.end();
});

tape( 'the function returns `validate.js` contents (union type)', function test( t ) {
	var expected;
	var actual;

	actual = create( MAIN2 );
	expected = replace( VALIDATE2.toString(), '{{YEAR}}', CURRENT_YEAR );
	t.strictEqual( actual, expected, 'returns expected contents' );
	t.end();
});

tape( 'the function returns `validate.js` contents (wildcard)', function test( t ) {
	var expected;
	var actual;

	actual = create( MAIN3 );
	expected = replace( VALIDATE3.toString(), '{{YEAR}}', CURRENT_YEAR );
	t.strictEqual( actual, expected, 'returns expected contents' );
	t.end();
});
