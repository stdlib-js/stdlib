<!--

@license Apache-2.0

Copyright (c) {{YEAR}} {{COPYRIGHT}}.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->

<!-- lint disable maximum-heading-length -->

# {{ALIAS}}

> {{PKG_DESC}}

<section class="intro">

</section>

<!-- /.intro -->

<section class="usage">

## Usage

```javascript
var {{ALIAS}} = require( '@{{PKG}}' );
```

#### {{ALIAS}}( N, x, strideX, y, strideY, clbk\[, thisArg] )

{{MAIN_DESC}}

```javascript
var {{TYPED_ARRAY_CTOR}} = require( '@stdlib/array/{{TYPED_ARRAY_DTYPE}}' );

function accessor( v ) {
    return v;
}

var x = new {{TYPED_ARRAY_CTOR}}( [ {{X_VALUES_LEN_5}} ] );
var out = new {{TYPED_ARRAY_CTOR}}( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );

{{ALIAS}}( x.length, x, 1, out, 1, accessor );
// out => <{{TYPED_ARRAY_CTOR}}>[ {{EXPECTED_LEN_5}} ]
```

The function accepts the following arguments:

-   **N**: number of indexed elements.
-   **x**: input [`{{TYPED_ARRAY_CTOR}}`][@stdlib/array/{{TYPED_ARRAY_DTYPE}}].
-   **strideX**: index increment for `x`.
-   **y**: output [`{{TYPED_ARRAY_CTOR}}`][@stdlib/array/{{TYPED_ARRAY_DTYPE}}].
-   **strideY**: index increment for `y`.
-   **clbk**: callback function.
-   **thisArg**: execution context (_optional_).

The invoked callback function is provided four arguments:

-   **value**: input array element.
-   **idx**: iteration index (zero-based).
-   **indices**: input and output array strided indices `[ix, iy]` (computed according to `offset + idx*stride`).
-   **arrays**: input and output arrays `[x, y]`.

To set the callback execution context, provide a `thisArg`.

```javascript
var {{TYPED_ARRAY_CTOR}} = require( '@stdlib/array/{{TYPED_ARRAY_DTYPE}}' );

function accessor( v ) {
    this.count += 1;
    return v;
}

var context = {
    'count': 0
};

var x = new {{TYPED_ARRAY_CTOR}}( [ {{X_VALUES_LEN_5}} ] );
var out = new {{TYPED_ARRAY_CTOR}}( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );

{{ALIAS}}( x.length, x, 1, out, 1, accessor, context );
// out => <{{TYPED_ARRAY_CTOR}}>[ {{EXPECTED_LEN_5}} ]

var cnt = context.count;
// returns 5
```

The `N` and stride parameters determine which strided array elements are accessed at runtime. For example, to index every other value in `x` and to index the first `N` elements of `y` in reverse order,

```javascript
var {{TYPED_ARRAY_CTOR}} = require( '@stdlib/array/{{TYPED_ARRAY_DTYPE}}' );

function accessor( v ) {
    return v;
}

var x = new {{TYPED_ARRAY_CTOR}}( [ {{X_VALUES_LEN_6}} ] );
var out = new {{TYPED_ARRAY_CTOR}}( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );

{{ALIAS}}( 3, x, 2, out, -1, accessor );
// out => <{{TYPED_ARRAY_CTOR}}>[ {{EXPECTED_LEN_3_X2_YM1}}, 0.0, 0.0, 0.0 ]
```

Note that indexing is relative to the first index. To introduce an offset, use [`typed array`][@stdlib/array/{{TYPED_ARRAY_DTYPE}}] views.

```javascript
var {{TYPED_ARRAY_CTOR}} = require( '@stdlib/array/{{TYPED_ARRAY_DTYPE}}' );

function accessor( v ) {
    return v;
}

// Initial arrays...
var x0 = new {{TYPED_ARRAY_CTOR}}( [ {{X_VALUES_LEN_6}} ] );
var out0 = new {{TYPED_ARRAY_CTOR}}( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );

// Create offset views...
var x1 = new {{TYPED_ARRAY_CTOR}}( x0.buffer, x0.BYTES_PER_ELEMENT*1 ); // start at 2nd element
var out1 = new {{TYPED_ARRAY_CTOR}}( out0.buffer, out0.BYTES_PER_ELEMENT*3 ); // start at 4th element

{{ALIAS}}( 3, x1, -2, out1, 1, accessor );
// out0 => <{{TYPED_ARRAY_CTOR}}>[ 0.0, 0.0, 0.0, {{EXPECTED_LEN_3_XM2_Y1}} ]
```

#### {{ALIAS}}.ndarray( N, x, strideX, offsetX, y, strideY, offsetY, clbk\[, thisArg] )

{{NDARRAY_DESC}}

```javascript
var {{TYPED_ARRAY_CTOR}} = require( '@stdlib/array/{{TYPED_ARRAY_DTYPE}}' );

function accessor( v ) {
    return v;
}

var x = new {{TYPED_ARRAY_CTOR}}( [ {{X_VALUES_LEN_5}} ] );
var out = new {{TYPED_ARRAY_CTOR}}( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );

{{ALIAS}}.ndarray( x.length, x, 1, 0, out, 1, 0, accessor );
// out => <{{TYPED_ARRAY_CTOR}}>[ {{EXPECTED_LEN_5}} ]
```

The function accepts the following additional arguments:

-   **offsetX**: starting index for `x`.
-   **offsetY**: starting index for `y`.

While [`typed array`][@stdlib/array/{{TYPED_ARRAY_DTYPE}}] views mandate a view offset based on the underlying `buffer`, the offset parameters support indexing semantics based on starting indices. For example, to index every other value in `x` starting from the second value and to index the last `N` elements in `y`,

```javascript
var {{TYPED_ARRAY_CTOR}} = require( '@stdlib/array/{{TYPED_ARRAY_DTYPE}}' );

function accessor( v ) {
    return v;
}

var x = new {{TYPED_ARRAY_CTOR}}( [ {{X_VALUES_LEN_6}} ] );
var out = new {{TYPED_ARRAY_CTOR}}( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );

{{ALIAS}}.ndarray( 3, x, 2, 1, out, -1, out.length-1, accessor );
// out => <{{TYPED_ARRAY_CTOR}}>[ 0.0, 0.0, 0.0, {{EXPECTED_LEN_3_XM2_Y1}} ]
```

</section>

<!-- /.usage -->

<section class="notes">

## Notes

-   If a provided callback function does not return any value (or equivalently, explicitly returns `undefined`), the value is **ignored**.

    ```javascript
    var {{TYPED_ARRAY_CTOR}} = require( '@stdlib/array/{{TYPED_ARRAY_DTYPE}}' );

    function accessor() {
        // No-op...
    }

    var x = new {{TYPED_ARRAY_CTOR}}( [ {{X_VALUES_LEN_5}} ] );
    var out = new {{TYPED_ARRAY_CTOR}}( [ 0.0, 0.0, 0.0, 0.0, 0.0 ] );

    {{ALIAS}}( x.length, x, 1, out, 1, accessor );
    // out => <{{TYPED_ARRAY_CTOR}}>[ 0.0, 0.0, 0.0, 0.0, 0.0 ]
    ```

</section>

<!-- /.notes -->

<section class="examples">

## Examples

<!-- eslint no-undef: "error" -->

```javascript
var uniform = require( '@stdlib/random/base/uniform' ).factory;
var filledarray = require( '@stdlib/array/filled' );
var filledarrayBy = require( '@stdlib/array/filled-by' );
var {{ALIAS}} = require( '@{{PKG}}' );

function accessor( v, i ) {
    if ( (i%3) === 0 ) {
        // Simulate a "missing" value...
        return;
    }
    return v;
}

var x = filledarrayBy( 10, '{{TYPED_ARRAY_DTYPE}}', uniform( {{RAND_MIN}}, {{RAND_MAX}} ) );
console.log( x );

var out = filledarray( null, 10, '{{TYPED_ARRAY_DTYPE}}' );
console.log( out );

{{ALIAS}}.ndarray( x.length, x, 1, 0, out, -1, out.length-1, accessor );
console.log( out );
```

</section>

<!-- /.examples -->

<!-- Section for related `stdlib` packages. Do not manually edit this section, as it is automatically populated. -->

<section class="related">

</section>

<!-- /.related -->

<!-- Section for all links. Make sure to keep an empty line after the `section` element and another before the `/section` close. -->

<section class="links">

[@stdlib/array/{{TYPED_ARRAY_DTYPE}}]: https://github.com/stdlib-js/stdlib{{DESC_LINK_TEXT_LABEL}}

</section>

<!-- /.links -->
