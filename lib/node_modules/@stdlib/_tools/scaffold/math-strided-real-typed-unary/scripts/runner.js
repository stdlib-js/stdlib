#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var shell = require( 'child_process' ).execSync; // eslint-disable-line node/no-sync
var existsSync = require( '@stdlib/fs/exists' ).sync;
var objectKeys = require( '@stdlib/utils/keys' );
var rootDir = require( '@stdlib/_tools/utils/root-dir' );
var log = require( '@stdlib/console/log' );
var capitalize = require( '@stdlib/string/capitalize' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var isRealFloatingDataType = require( '@stdlib/array/base/assert/is-real-floating-point-data-type' );
var DATA = require( './data.json' );


// VARIABLES //

var CREATE_ONLY = 1;
var SCAFFOLD_SCRIPT = resolve( __dirname, 'scaffold.sh' );
var ROOT_DIR = resolve( rootDir(), 'lib', 'node_modules' );


// FUNCTIONS //

/**
* Returns an `ALIAS` environment variable string.
*
* @private
* @param {string} alias - package alias
* @returns {string} environment variable string
*
* @example
* var s = aliasEnvVar( 'abs' );
* // returns 'ALIAS=abs'
*
* @example
* var s = aliasEnvVar( 'absf' );
* // returns 'ALIAS=absf'
*/
function aliasEnvVar( alias ) {
	return 'ALIAS=' + alias;
}

/**
* Returns a `DESC` environment variable string.
*
* @private
* @param {string} desc - default description
* @returns {string} environment variable string
*
* @example
* var s = descEnvVar( 'computes the cube root' );
* // returns 'DESC=\'computes the cube root\''
*/
function descEnvVar( desc ) {
	return 'DESC=\'' + desc + '\'';
}

/**
* Returns a `DESC_LINK_TEXT` environment variable string.
*
* @private
* @param {string} desc - short description
* @returns {string} environment variable string
*
* @example
* var s = linkTextEnvVar( 'cube root' );
* // returns 'DESC_LINK_TEXT=\'cube root\''
*
* @example
* var s = linkTextEnvVar( '' );
* // returns ''
*/
function linkTextEnvVar( desc ) {
	if ( desc === '' ) {
		return '';
	}
	return 'DESC_LINK_TEXT=\'' + capitalize( desc ) + '\'';
}

/**
* Returns a `KEYWORDS` environment variable string.
*
* @private
* @param {StringArray} keywords - list of keywords
* @returns {string} environment variable string
*
* @example
* var keywords = [ 'math', 'special' ];
*
* var s = keywordsEnvVar( keywords );
* // returns 'KEYWORDS=\'math,special\''
*/
function keywordsEnvVar( keywords ) {
	return 'KEYWORDS=\'' + keywords.join( ',' ) + '\'';
}

/**
* Returns a `C_X_VALUES_LEN_8` environment variable string.
*
* @private
* @param {NumberArray} values - example values
* @param {string} dtype - values data type
* @returns {string} environment variable string
*
* @example
* var values = [ 1, 2, 3, 4, 5, 6, 7, 8 ];
*
* var s = valuesEnvVar( values, 'int32' );
* // returns 'C_X_VALUES_LEN_8=\'1,2,3,4,5,6,7,8\''
*/
function valuesEnvVar( values, dtype ) {
	var vals;
	var v;
	var i;

	if ( isRealFloatingDataType( dtype ) ) {
		vals = [];
		for ( i = 0; i < 8; i++ ) {
			v = values[ i ];
			vals.push( v.toString() );
			if ( isInteger( v ) ) {
				vals[ i ] += '.0';
			}
		}
	} else {
		vals = values.slice( 0, 8 );
	}
	return 'C_X_VALUES_LEN_8=\'' + vals.join( ',' ) + '\'';
}

/**
* Returns a string containing environment variable for generating pseudorandom numbers.
*
* @private
* @param {Object} obj - configuration object
* @returns {string} environment variable string
*
* @example
* var o = {
*     'prng': 'random/base/uniform',
*     'parameters': [ -100, 100 ]
* };
*
* var s = prngEnvVars( o );
* // returns 'BASE_PRNG=\'uniform\' RAND_MIN=-100 RAND_MAX=100'
*/
function prngEnvVars( obj ) {
	var base;
	var min;
	var max;
	var p;

	p = obj.prng.split( '/' );
	base = p[ p.length-1 ];
	min = obj.parameters[ 0 ];
	max = obj.parameters[ 1 ];
	if ( base === 'uniform' ) {
		if ( isInteger( min ) ) {
			min = min.toString() + '.0';
		}
		if ( isInteger( max ) ) {
			max = max.toString() + '.0';
		}
	} else {
		min = min.toString();
		max = max.toString();
	}
	return [
		'BASE_PRNG=\'' + base + '\'',
		'C_RAND_MIN=' + min,
		'C_RAND_MAX=' + max
	].join( ' ' );
}

/**
* Returns a `JAVASCRIPT_RETURN_TYPE` environment variable string.
*
* @private
* @param {string} dt - return type
* @returns {string} environment variable string
*
* @example
* var s = returnTypeEnvVar( 'number' );
* // returns 'JAVASCRIPT_RETURN_TYPE=\'number\''
*/
function returnTypeEnvVar( dt ) {
	return 'JAVASCRIPT_RETURN_TYPE=\'' + dt + '\'';
}


// MAIN //

/**
* Main execution sequence.
*
* @private
*/
function main() {
	var keys;
	var envs;
	var cmd;
	var p;
	var k;
	var v;
	var o;
	var i;
	var j;

	for ( i = 0; i < DATA.length; i++ ) {
		o = DATA[ i ];
		p = resolve( ROOT_DIR, '@stdlib/math/strided/special', o.alias, 'package.json' );
		if ( existsSync( p ) ) {
			if ( CREATE_ONLY ) {
				log( 'Package already exists. Skipping @%s...', 'stdlib/math/strided/special/' + o.alias );
				continue;
			}
			log( 'Updating package: @%s...', 'stdlib/math/strided/special/' + o.alias );
		} else {
			log( 'Creating package: @%s...', 'stdlib/math/strided/special/' + o.alias );
		}
		keys = objectKeys( o );
		envs = [];
		for ( j = 0; j < keys.length; j++ ) {
			k = keys[ j ];
			v = o[ k ];
			if ( k === 'base_alias' ) {
				envs.push( aliasEnvVar( v ) );
				continue;
			}
			if ( k === 'desc' ) {
				envs.push( descEnvVar( v ) );
				continue;
			}
			if ( k === 'short_desc' ) {
				envs.push( linkTextEnvVar( v ) );
				continue;
			}
			if ( k === 'keywords' ) {
				envs.push( keywordsEnvVar( v ) );
				continue;
			}
			if ( k === 'parameters' ) {
				envs.push( valuesEnvVar( v[ 0 ].example_values, v[ 0 ].type.dtype ) ); // eslint-disable-line max-len
				envs.push( prngEnvVars( v[ 0 ].rand ) );
				continue;
			}
			if ( k === 'returns' ) {
				envs.push( returnTypeEnvVar( v.type.javascript ) );
				continue;
			}
		}
		cmd = envs.join( ' ' ) + ' . ' + SCAFFOLD_SCRIPT;
		shell( cmd );
	}
}

main();
