#!/usr/bin/env bash
#
# @license Apache-2.0
#
# Copyright (c) 2020 The Stdlib Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Script for scaffolding a package exposing an interface which applies a unary mathematical function to a double- or single-precision floating-point strided array.
#
# Usage: scaffold.h
#
# Environment Variables:
#
#   ALIAS             Main export alias.
#   PKG_DESC          Package description.
#   MODULE_DESC       Module description.
#   MAIN_DESC         Main export description.
#   TEST_DESC         Test description.
#   DESC_LINK_TEXT    README link text.
#   KEYWORDS          List of keywords.
#   C_RAND_MIN        Minimum value for generated values.
#   C_RAND_MAX        Maximum value for generated values.
#   C_X_VALUES_LEN_8  List of input values.
#

## USER-DEFINED VARIABLES ##

# Define the main export alias:
alias=${ALIAS:-'ddiracDelta'}

# Define the package description:
# shellcheck disable=SC2016
pkg_desc=${PKG_DESC:-'Evaluate the Dirac delta function for each element in a STRIDED_TYPED_ARRAY.'}

# Define the module description:
# shellcheck disable=SC2016
module_desc=${MODULE_DESC:-'Evaluate the Dirac delta function for each element in a STRIDED_TYPED_ARRAY `x` and assign the results to elements in a STRIDED_TYPED_ARRAY `y`.'}

# Define main export description:
# shellcheck disable=SC2016
main_desc=${MAIN_DESC:-'Evaluates the Dirac delta function for each element in a STRIDED_TYPED_ARRAY `x` and assigns the results to elements in a STRIDED_TYPED_ARRAY `y`.'}

# Define the test description:
# shellcheck disable=SC2016
test_desc=${TEST_DESC:-'evaluates the Dirac delta function for each element'}

# Define description text (found in the README) which should be a link to the unary package (NOTE: to not include a link, set to an empty string):
desc_link_text=${DESC_LINK_TEXT:-'Dirac delta function'}

# Define a list of keywords:
if [[ -z "${KEYWORDS:-}" ]]; then
keywords=(
    "stdmath"
    "mathematics"
    "math"
    "dirac"
    "delta"
    "distribution"
    "dist"
    "continuous"
    "kronecker"
    "spike"
    "impulse"
)
else
	IFS=','; read -ra keywords <<< "${KEYWORDS}"; IFS=' ';
fi

# Define the minimum value of generated values when benchmarking and testing the implementation:
c_rand_min=${C_RAND_MIN:-'-100.0'}

# Define the maximum value of generated values when benchmarking and testing the implementation:
c_rand_max=${C_RAND_MAX:-'100.0'}

# Define a list of input array values:
if [[ -z "${C_X_VALUES_LEN_8:-}" ]]; then
c_x_values_len_8=(
	'-4.0'
	'-3.0'
	'-2.0'
	'-1.0'
	'0.0'
	'1.0'
	'2.0'
	'3.0'
)
else
	IFS=','; read -ra c_x_values_len_8 <<< "${C_X_VALUES_LEN_8}"; IFS=' ';
fi


## COMPUTED VARIABLES ##

# Converts from camel case to a underscored delineated string.
#
# $1 - string to convert
camelcase_to_snakecase() {
	echo "$1" | sed 's/\([^A-Z]\)\([A-Z]\)/\1_\2/g' | sed 's/\([A-Z]\)\([A-Z]\)\([^A-Z]\)/\1_\2\3/g' | tr '[:upper:]' '[:lower:]'
}

# Convert the alias to snakecase:
alias_snakecase=$(camelcase_to_snakecase "${alias}")

# Define the destination package alias:
pkg_alias="${alias_snakecase//_/-}"

# Define the destination package parent directory path:
pkg_path="stdlib/math/strided/special"

# Define the full destination package name:
pkg="${pkg_path}/${pkg_alias}"

# Define the full destination package include path:
pkg_include="${pkg_path}/${alias_snakecase}"

# Determine the root project directory:
root_dir="$(git rev-parse --show-toplevel)"

# Define the project source code directory:
base_dir="${root_dir}/lib/node_modules"

# Define the destination path:
dest_dir="${base_dir}/@${pkg}"

# Define the location of this scaffold:
this_dir="${base_dir}/@stdlib/_tools/scaffold/math-strided-real-typed-unary"

# Define the location of a utility for wrapping REPL text descriptions:
wrap="${base_dir}/@stdlib/_tools/repl-txt/wrap-desc/bin/cli"

# Define the unary function alias:
unary_alias="${alias:1}"
if [ "${alias:0:1}" == "s" ]; then
	unary_alias="${unary_alias}f"
fi

# Convert the unary function alias to snakecase:
unary_alias_snakecase=$(camelcase_to_snakecase "${unary_alias}")

# Define the unary package "alias":
unary_pkg_alias="${unary_alias_snakecase//_/-}"

# Define the unary package parent directory path:
unary_pkg_path="stdlib/math/base/special"

# Define the package containing the unary function to apply:
unary_pkg="${unary_pkg_path}/${unary_pkg_alias}"

# Define the unary package include path:
unary_pkg_include="${unary_pkg_path}/${unary_alias_snakecase}"

# Define the C unary function alias:
c_unary_alias="base_${unary_alias_snakecase}"

# Define the strided apply function alias:
strided_apply_alias="${alias:0:1}map"

# Define the C strided apply macro alias:
c_strided_apply_macro_alias=$(echo "${strided_apply_alias}" | tr '[:lower:]' '[:upper:]')

# Define the typed array data type:
if [ "${alias:0:1}" == "d" ]; then
	typed_array_dtype='float64'
else
	typed_array_dtype='float32'
fi

# Define the typed array constructor:
typed_array_ctor="$(echo ${typed_array_dtype:0:1} | tr '[:lower:]' '[:upper:]')${typed_array_dtype:1}Array"

# Define the C data type:
if [ "${typed_array_dtype}" == "float64" ]; then
	c_type='double'
else
	c_type='float'
fi

# Define the C data type suffix (e.g., if float32, then 'f'):
if [ "${c_type}" == "double" ]; then
	c_type_suffix=''
else
	c_type_suffix='f'
fi

# Define the C print format (e.g., if float64, then 'lf'; if float32, then 'f'):
if [ "${c_type}" == "double" ]; then
	c_print_fmt='lf'
else
	c_print_fmt='f'
fi

# Define the C header guard:
c_header_guard=$(echo "${pkg_include}" | sed "s/\\//_/g" | tr '[:lower:]' '[:upper:]')

# Update descriptions:
if [ "${alias:0:1}" == "d" ]; then
	strided_typed_array='double-precision floating-point strided array'
else
	strided_typed_array='single-precision floating-point strided array'
fi
pkg_desc="${pkg_desc//STRIDED_TYPED_ARRAY/${strided_typed_array}}"
module_desc="${module_desc//STRIDED_TYPED_ARRAY/${strided_typed_array}}"
main_desc="${main_desc//STRIDED_TYPED_ARRAY/${strided_typed_array}}"

# Define the main C description:
# shellcheck disable=SC2016
c_main_desc=$(echo "${main_desc}" | perl -pe 's/(\`[a-z]\`)/uc($&)/ge;')

# Define the ndarray method description:
# shellcheck disable=SC2001
ndarray_desc=$(echo "${main_desc}" | sed 's/\.$//')
ndarray_desc="${ndarray_desc} using alternative indexing semantics."

# Define the REPL text main export description (note: 4 space indent and wrap at 80 characters):
repl_text_main_desc=$(echo -n "${main_desc}" | "${wrap}")
repl_text_main_desc="${repl_text_main_desc/    /}"

# Define the REPL text ndarray method description (note: 4 space indent and wrap at 80 characters):
repl_text_ndarray_desc=$(echo -n "${ndarray_desc}" | "${wrap}")
repl_text_ndarray_desc="${repl_text_ndarray_desc/    /}"

# Add keywords:
if [ "${alias:0:1}" == "d" ]; then
	additional_keywords=(
		"double-precision"
		"double"
		"dbl"
		"float64"
		"float64array"
	)
else
	additional_keywords=(
		"single-precision"
		"float"
		"flt"
		"float32"
		"float32array"
	)
fi
keywords=("${keywords[@]}" "${additional_keywords[@]}")

# Define the copyright year:
year=$(date +'%Y')

# Define the copyright holders:
copyright='The Stdlib Authors'

# Define lists of input array values:
x_values_len_4=(
	"${c_x_values_len_8[0]}"
	"${c_x_values_len_8[1]}"
	"${c_x_values_len_8[2]}"
	"${c_x_values_len_8[3]}"
)
x_values_len_5=("${x_values_len_4[@]}" "${c_x_values_len_8[4]}")
x_values_len_6=("${x_values_len_5[@]}" "${c_x_values_len_8[5]}")

# Define lists of expected values:
expected_script="var roundn = require( '${base_dir}/@stdlib/math/base/special/roundn' );var isInteger = require( '${base_dir}/@stdlib/assert/is-integer' ).isPrimitive;var f = require( '${base_dir}/@${unary_pkg}' );var arr = '${x_values_len_6[*]}'.split( ' ' );var expected = arr.slice();for ( var i = 0; i < arr.length; i++ ) {var v1 = f( parseFloat( arr[ i ] ) );var v2 = roundn( v1, -3 );if ( v1 == v2 ) {v = v1.toString();if ( isInteger( v1 ) ) {v += '.0';}} else {v = '~' + v2.toString();if ( isInteger( v2 ) ) {v += '.0';}}expected[ i ] = v;}console.log( expected.join( ',' ) );"

tmp=$(node -e "${expected_script}")
IFS=','; read -ra expected_len_6 <<< "${tmp}"; IFS=' ';
expected_len_4=(
	"${expected_len_6[0]}"
	"${expected_len_6[1]}"
	"${expected_len_6[2]}"
	"${expected_len_6[3]}"
)
expected_len_5=("${expected_len_4[@]}" "${expected_len_6[4]}")

# Expected values for x_values_len_4 where `x` has stride `2` and `y` has stride `-1`:
expected_len_2_x2_ym1=("${expected_len_4[2]}" "${expected_len_4[0]}")

# Expected values for x_values_len_4 starting at 2nd element and where `x` has stride `-2` and `y` has stride `1`:
expected_len_2_xm2_y1=("${expected_len_4[3]}" "${expected_len_4[1]}")

# Expected values for x_values_len_6 where `x` has stride `2` and `y` has stride `-1`:
expected_len_3_x2_ym1=("${expected_len_6[4]}" "${expected_len_2_x2_ym1[@]}")

# Expected values for x_values_len_6 starting at 2nd element and where `x` has stride `-2` and `y` has stride `1`:
expected_len_3_xm2_y1=("${expected_len_6[5]}" "${expected_len_2_xm2_y1[@]}")


## SCRIPT ##

# Define the list of scaffold directories:
dirs=(
	"benchmark"
	"benchmark/c"
	"docs"
	"docs/types"
	"examples"
	"examples/c"
	"include"
	"lib"
	"src"
	"test"
)

# Define the list of scaffold files:
files=(
	"benchmark/c/benchmark.length.c"
	"benchmark/c/Makefile"
	"benchmark/benchmark.js"
	"benchmark/benchmark.native.js"
	"benchmark/benchmark.ndarray.js"
	"benchmark/benchmark.ndarray.native.js"
	"docs/types/index.d.ts"
	"docs/types/test.ts"
	"docs/repl.txt"
	"examples/c/example.c"
	"examples/c/Makefile"
	"examples/index.js"
	"include/alias.h"
	"lib/alias.js"
	"lib/alias.native.js"
	"lib/index.js"
	"lib/main.js"
	"lib/native.js"
	"lib/ndarray.js"
	"lib/ndarray.native.js"
	"src/addon.c"
	"src/alias.c"
	"src/Makefile"
	"test/test.alias.js"
	"test/test.alias.native.js"
	"test/test.js"
	"test/test.ndarray.js"
	"test/test.ndarray.native.js"
	"binding.gyp"
	"include.gypi"
	"manifest.json"
	"package.json"
	"README.md"
)

# Create the destination directories...

for dir in ${dirs[*]}; do
	if [ "${dir}" == "include" ]; then
		mkdir -p "${dest_dir}/include/${pkg_path}"
	else
		mkdir -p "${dest_dir}/${dir}"
	fi
done

# Copy the scaffold files to the destination directory...
for file in ${files[*]}; do
	if [ "${file}" == "include/alias.h" ]; then
		cp "${this_dir}/data/${file//\./__}.txt" "${dest_dir}/include/${pkg_include}.h"
	elif echo "${file}" | grep -q "alias"; then
		cp "${this_dir}/data/${file//\./__}.txt" "${dest_dir}/${file/alias/${alias_snakecase}}"
	else
		cp "${this_dir}/data/${file//\./__}.txt" "${dest_dir}/${file}"
	fi
done

# Performs a find and replace across the destination directory.
#
# $1 - regular expression
find_and_replace() {
	find "${dest_dir}" -type f -print0 | xargs -0 perl -pi -w -e "$1"
}

# Performs a find and replace across a specified file.
#
# $1 - file
# $2 - regular expression
file_find_and_replace() {
	find "${dest_dir}/$1" -type f -print0 | xargs -0 perl -pi -w -e "$2"
}

# Joins a list of strings.
#
# $1 - separator
# $* - list of strings to join
join() {
	local d=$1; shift; local f=$1; shift; printf %s "$f" "${@/#/$d}";
}

# For each of the variables defined above, insert into the scaffold files...
regex="s/\\{\\{YEAR\\}\\}/${year}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{COPYRIGHT\\}\\}/${copyright}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{ALIAS\\}\\}/${alias}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{ALIAS_SNAKECASE\\}\\}/${alias_snakecase}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{PKG\\}\\}/${pkg//\//\\/}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{PKG_INCLUDE\\}\\}/${pkg_include//\//\\/}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{PKG_DESC\\}\\}/${pkg_desc}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{MODULE_DESC\\}\\}/${module_desc}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{MAIN_DESC\\}\\}/${main_desc}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{NDARRAY_DESC\\}\\}/${ndarray_desc}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{TEST_DESC\\}\\}/${test_desc}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{C_MAIN_DESC\\}\\}/${c_main_desc}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{REPL_TEXT_MAIN_DESC\\}\\}/${repl_text_main_desc}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{REPL_TEXT_NDARRAY_DESC\\}\\}/${repl_text_ndarray_desc}/g;"
find_and_replace "${regex}"

if [ -n "${desc_link_text}" ]; then
	# WARNING: we assume that the description link text does *not* include any special regular expression characters...
	regex="s/${desc_link_text}/[${desc_link_text}][\\@${unary_pkg//\//\\/}]/g;"
	file_find_and_replace "README.md" "${regex}"

	regex="s/\\{\\{DESC_LINK_TEXT_LABEL\\}\\}/\\n\\n[\\@${unary_pkg//\//\\/}]: https:\\/\\/github.com\\/stdlib-js\\/stdlib/g;"
	file_find_and_replace "README.md" "${regex}"
else
	regex="s/\\{\\{DESC_LINK_TEXT_LABEL\\}\\}//g;"
	file_find_and_replace "README.md" "${regex}"
fi

regex="s/\\{\\{UNARY_PKG\\}\\}/${unary_pkg//\//\\/}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{UNARY_ALIAS\\}\\}/${unary_alias}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{UNARY_ALIAS_SNAKECASE\\}\\}/${unary_alias_snakecase}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{UNARY_PKG_INCLUDE\\}\\}/${unary_pkg_include//\//\\/}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{C_UNARY_ALIAS\\}\\}/${c_unary_alias}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{STRIDED_APPLY_ALIAS\\}\\}/${strided_apply_alias}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{C_STRIDED_APPLY_MACRO_ALIAS\\}\\}/${c_strided_apply_macro_alias}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{C_HEADER_GUARD\\}\\}/${c_header_guard}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{C_TYPE\\}\\}/${c_type}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{C_TYPE_SUFFIX\\}\\}/${c_type_suffix}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{C_PRINT_FMT\\}\\}/${c_print_fmt}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{TYPED_ARRAY_CTOR\\}\\}/${typed_array_ctor}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{TYPED_ARRAY_DTYPE\\}\\}/${typed_array_dtype}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{C_RAND_MIN\\}\\}/${c_rand_min}/g;"
find_and_replace "${regex}"

regex="s/\\{\\{C_RAND_MAX\\}\\}/${c_rand_max}/g;"
find_and_replace "${regex}"

keywords_sep='",\n    "'
if [ "${#keywords[*]}" -eq 0 ]; then
	words=''
else
	words=$(join "${keywords_sep}" "${keywords[@]}")
	words="\\n    \"${words}\","
fi
regex="s/\\{\\{KEYWORDS\\}\\}/${words}/g;"
find_and_replace "${regex}"

expected_values_sep=', '

values=$(join "${expected_values_sep}" "${x_values_len_4[@]}")
regex="s/\\{\\{X_VALUES_LEN_4\\}\\}/${values}/g;"
find_and_replace "${regex}"

values=$(join "${expected_values_sep}" "${x_values_len_5[@]}")
regex="s/\\{\\{X_VALUES_LEN_5\\}\\}/${values}/g;"
find_and_replace "${regex}"

values=$(join "${expected_values_sep}" "${x_values_len_6[@]}")
regex="s/\\{\\{X_VALUES_LEN_6\\}\\}/${values}/g;"
find_and_replace "${regex}"

values=$(join "${expected_values_sep}" "${c_x_values_len_8[@]}")
regex="s/\\{\\{C_X_VALUES_LEN_8\\}\\}/${values}/g;"
find_and_replace "${regex}"

values=$(join "${expected_values_sep}" "${expected_len_4[@]}")
regex="s/\\{\\{EXPECTED_LEN_4\\}\\}/${values}/g;"
find_and_replace "${regex}"

values=$(join "${expected_values_sep}" "${expected_len_5[@]}")
regex="s/\\{\\{EXPECTED_LEN_5\\}\\}/${values}/g;"
find_and_replace "${regex}"

values=$(join "${expected_values_sep}" "${expected_len_2_x2_ym1[@]}")
regex="s/\\{\\{EXPECTED_LEN_2_X2_YM1\\}\\}/${values}/g;"
find_and_replace "${regex}"

values=$(join "${expected_values_sep}" "${expected_len_2_xm2_y1[@]}")
regex="s/\\{\\{EXPECTED_LEN_2_XM2_Y1\\}\\}/${values}/g;"
find_and_replace "${regex}"

values=$(join "${expected_values_sep}" "${expected_len_3_x2_ym1[@]}")
regex="s/\\{\\{EXPECTED_LEN_3_X2_YM1\\}\\}/${values}/g;"
find_and_replace "${regex}"

values=$(join "${expected_values_sep}" "${expected_len_3_xm2_y1[@]}")
regex="s/\\{\\{EXPECTED_LEN_3_XM2_Y1\\}\\}/${values}/g;"
find_and_replace "${regex}"
