#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var findPkgs = require( '@stdlib/_tools/pkgs/find' ).sync;
var readJSON = require( '@stdlib/fs/read-json' ).sync;
var writeFile = require( '@stdlib/fs/write-file' ).sync;
var rootDir = require( '@stdlib/_tools/utils/root-dir' );


// VARIABLES //

var ROOT_DIR = rootDir();
var opts = {
	'encoding': 'utf8'
};


// MAIN //

/**
* Main execution sequence.
*
* @private
*/
function main() {
	var path;
	var json;
	var pkgs;
	var out;
	var o;
	var i;

	// Resolve unary "special" math packages:
	pkgs = findPkgs({
		'dir': ROOT_DIR,
		'pattern': '**/math/base/special/*/package.json'
	});

	// Filter for package's containing scaffold metadata and which have unary APIs...
	out = [];
	for ( i = 0; i < pkgs.length; i++ ) {
		path = resolve( ROOT_DIR, pkgs[i] );
		json = readJSON( resolve( path, 'package.json' ), opts );
		if ( json instanceof Error ) {
			console.error( 'Encountered an error when attempting to read package: %s. Error: %s.', pkgs[ i ], json.message );
			continue;
		}
		o = json.__stdlib__; // eslint-disable-line no-underscore-dangle
		if ( o && o.scaffold && o.scaffold.parameters.length === 1 ) {
			out.push( o.scaffold );
		}
	}
	// Write the metadata to a local file for subsequent consumption by other scripts:
	writeFile( resolve( __dirname, 'data.json' ), JSON.stringify( out, null, '  ' )+'\n', opts );
}

main();
