/*
* @license Apache-2.0
*
* Copyright (c) {{YEAR}} {{COPYRIGHT}}.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

import {{ALIAS}} = require( './index' );


// TESTS //

// The function returns an array-like object containing numbers...
{
	const x = new {{TYPED_ARRAY_CTOR}}( 10 );
	const y = new {{TYPED_ARRAY_CTOR}}( 10 );

	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', y, 1 ); // $ExpectType ArrayLike<number>
}

// The compiler throws an error if the function is provided a first argument which is not a number...
{
	const x = new {{TYPED_ARRAY_CTOR}}( 10 );
	const y = new {{TYPED_ARRAY_CTOR}}( 10 );

	{{ALIAS}}( '10', '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', y, 1 ); // $ExpectError
	{{ALIAS}}( true, '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', y, 1 ); // $ExpectError
	{{ALIAS}}( false, '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', y, 1 ); // $ExpectError
	{{ALIAS}}( null, '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', y, 1 ); // $ExpectError
	{{ALIAS}}( undefined, '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', y, 1 ); // $ExpectError
	{{ALIAS}}( [], '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', y, 1 ); // $ExpectError
	{{ALIAS}}( {}, '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', y, 1 ); // $ExpectError
	{{ALIAS}}( ( x: number ): number => x, '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', y, 1 ); // $ExpectError
}

// The compiler throws an error if the function is provided a third argument which is not an array-like object containing numbers...
{
	const x = new {{TYPED_ARRAY_CTOR}}( 10 );
	const y = new {{TYPED_ARRAY_CTOR}}( 10 );

	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', 10, 1, '{{TYPED_ARRAY_DTYPE}}', y, 1 ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', '10', 1, '{{TYPED_ARRAY_DTYPE}}', y, 1 ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', true, 1, '{{TYPED_ARRAY_DTYPE}}', y, 1 ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', false, 1, '{{TYPED_ARRAY_DTYPE}}', y, 1 ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', null, 1, '{{TYPED_ARRAY_DTYPE}}', y, 1 ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', undefined, 1, '{{TYPED_ARRAY_DTYPE}}', y, 1 ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', [ '1' ], 1, '{{TYPED_ARRAY_DTYPE}}', y, 1 ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', {}, 1, '{{TYPED_ARRAY_DTYPE}}', y, 1 ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', ( x: number ): number => x, 1, '{{TYPED_ARRAY_DTYPE}}', y, 1 ); // $ExpectError
}

// The compiler throws an error if the function is provided a fourth argument which is not a number...
{
	const x = new {{TYPED_ARRAY_CTOR}}( 10 );
	const y = new {{TYPED_ARRAY_CTOR}}( 10 );

	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, '10', '{{TYPED_ARRAY_DTYPE}}', y, 1 ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, true, '{{TYPED_ARRAY_DTYPE}}', y, 1 ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, false, '{{TYPED_ARRAY_DTYPE}}', y, 1 ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, null, '{{TYPED_ARRAY_DTYPE}}', y, 1 ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, undefined, '{{TYPED_ARRAY_DTYPE}}', y, 1 ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, [], '{{TYPED_ARRAY_DTYPE}}', y, 1 ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, {}, '{{TYPED_ARRAY_DTYPE}}', y, 1 ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, ( x: number ): number => x, '{{TYPED_ARRAY_DTYPE}}', y, 1 ); // $ExpectError
}

// The compiler throws an error if the function is provided a sixth argument which is not an array-like object containing numbers...
{
	const x = new {{TYPED_ARRAY_CTOR}}( 10 );

	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', 10, 1 ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', '10', 1 ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', true, 1 ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', false, 1 ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', null, 1 ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', undefined, 1 ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', [ '1' ], 1 ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', {}, 1 ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', ( x: number ): number => x, 1 ); // $ExpectError
}

// The compiler throws an error if the function is provided a seventh argument which is not a number...
{
	const x = new {{TYPED_ARRAY_CTOR}}( 10 );
	const y = new {{TYPED_ARRAY_CTOR}}( 10 );

	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', y, '10' ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', y, true ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', y, false ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', y, null ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', y, undefined ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', y, [] ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', y, {} ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', y, ( x: number ): number => x ); // $ExpectError
}

// The compiler throws an error if the function is provided an unsupported number of arguments...
{
	const x = new {{TYPED_ARRAY_CTOR}}( 10 );
	const y = new {{TYPED_ARRAY_CTOR}}( 10 );

	{{ALIAS}}(); // $ExpectError
	{{ALIAS}}( x.length ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}' ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1 ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}' ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', y ); // $ExpectError
	{{ALIAS}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', y, 1, 10 ); // $ExpectError
}

// Attached to main export is an `ndarray` method which returns an array-like object containing numbers...
{
	const x = new {{TYPED_ARRAY_CTOR}}( 10 );
	const y = new {{TYPED_ARRAY_CTOR}}( 10 );

	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectType ArrayLike<number>
}

// The compiler throws an error if the `ndarray` method is provided a first argument which is not a number...
{
	const x = new {{TYPED_ARRAY_CTOR}}( 10 );
	const y = new {{TYPED_ARRAY_CTOR}}( 10 );

	{{ALIAS}}.ndarray( '10', '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( true, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( false, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( null, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( undefined, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( [], '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( {}, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( ( x: number ): number => x, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the `ndarray` method is provided a third argument which is not an array-like object containing numbers...
{
	const x = new {{TYPED_ARRAY_CTOR}}( 10 );
	const y = new {{TYPED_ARRAY_CTOR}}( 10 );

	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', 10, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', '10', 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', true, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', false, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', null, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', undefined, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', [ '1' ], 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', {}, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', ( x: number ): number => x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the `ndarray` method is provided a fourth argument which is not a number...
{
	const x = new {{TYPED_ARRAY_CTOR}}( 10 );
	const y = new {{TYPED_ARRAY_CTOR}}( 10 );

	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, '10', 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, true, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, false, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, null, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, undefined, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, [], 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, {}, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, ( x: number ): number => x, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the `ndarray` method is provided a fifth argument which is not a number...
{
	const x = new {{TYPED_ARRAY_CTOR}}( 10 );
	const y = new {{TYPED_ARRAY_CTOR}}( 10 );

	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, '10', '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, true, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, false, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, null, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, undefined, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, [], '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, {}, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, ( x: number ): number => x, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the `ndarray` method is provided a seventh argument which is not an array-like object containing numbers...
{
	const x = new {{TYPED_ARRAY_CTOR}}( 10 );

	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', 10, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', '10', 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', true, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', false, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', null, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', undefined, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', [ '1' ], 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', {}, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', ( x: number ): number => x, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the `ndarray` method is provided an eighth argument which is not a number...
{
	const x = new {{TYPED_ARRAY_CTOR}}( 10 );
	const y = new {{TYPED_ARRAY_CTOR}}( 10 );

	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, '10', 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, true, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, false, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, null, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, undefined, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, [], 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, {}, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, ( x: number ): number => x, 0 ); // $ExpectError
}

// The compiler throws an error if the `ndarray` method is provided a ninth argument which is not a number...
{
	const x = new {{TYPED_ARRAY_CTOR}}( 10 );
	const y = new {{TYPED_ARRAY_CTOR}}( 10 );

	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, '10' ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, true ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, false ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, null ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, undefined ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, [] ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, {} ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, ( x: number ): number => x ); // $ExpectError
}

// The compiler throws an error if the `ndarray` method is provided an unsupported number of arguments...
{
	const x = new {{TYPED_ARRAY_CTOR}}( 10 );
	const y = new {{TYPED_ARRAY_CTOR}}( 10 );

	{{ALIAS}}.ndarray(); // $ExpectError
	{{ALIAS}}.ndarray( x.length ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}' ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}' ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1 ); // $ExpectError
	{{ALIAS}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0, 10 ); // $ExpectError
}
