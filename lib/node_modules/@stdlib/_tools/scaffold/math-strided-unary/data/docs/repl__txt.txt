
{{alias}}( N, dtypeX, x, strideX, dtypeY, y, strideY )
    {{REPL_TEXT_MAIN_DESC}}

    The `N` and `stride` parameters determine which elements in `x` and `y` are
    accessed at runtime.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    dtypeX: any
        Data type for `x`.

    x: ArrayLikeObject
        Input array.

    strideX: integer
        Index increment for `x`.

    dtypeY: any
        Data type for `y`.

    y: ArrayLikeObject
        Destination array.

    strideY: integer
        Index increment for `y`.

    Returns
    -------
    y: ArrayLikeObject
        Input array `y`.

    Examples
    --------
    // Standard usage:
    > var x = new {{alias:@stdlib/array/{{TYPED_ARRAY_DTYPE}}}}( [ {{X_VALUES_LEN_4}} ] );
    > var y = new {{alias:@stdlib/array/{{TYPED_ARRAY_DTYPE}}}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > {{alias}}( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, '{{TYPED_ARRAY_DTYPE}}', y, 1 )
    <{{TYPED_ARRAY_CTOR}}>[ {{EXPECTED_LEN_4}} ]

    // Using `N` and `stride` parameters:
    > y = new {{alias:@stdlib/array/{{TYPED_ARRAY_DTYPE}}}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > {{alias}}( 2, '{{TYPED_ARRAY_DTYPE}}', x, 2, '{{TYPED_ARRAY_DTYPE}}', y, -1 )
    <{{TYPED_ARRAY_CTOR}}>[ {{EXPECTED_LEN_2_X2_YM1}}, 0.0, 0.0 ]

    // Using view offsets:
    > var x0 = new {{alias:@stdlib/array/{{TYPED_ARRAY_DTYPE}}}}( [ {{X_VALUES_LEN_4}} ] );
    > var y0 = new {{alias:@stdlib/array/{{TYPED_ARRAY_DTYPE}}}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > var x1 = new {{alias:@stdlib/array/{{TYPED_ARRAY_DTYPE}}}}( x0.buffer, x0.BYTES_PER_ELEMENT*1 );
    > var y1 = new {{alias:@stdlib/array/{{TYPED_ARRAY_DTYPE}}}}( y0.buffer, y0.BYTES_PER_ELEMENT*2 );
    > {{alias}}( 2, '{{TYPED_ARRAY_DTYPE}}', x1, -2, '{{TYPED_ARRAY_DTYPE}}', y1, 1 )
    <{{TYPED_ARRAY_CTOR}}>[ {{EXPECTED_LEN_2_XM2_Y1}} ]
    > y0
    <{{TYPED_ARRAY_CTOR}}>[ 0.0, 0.0, {{EXPECTED_LEN_2_XM2_Y1}} ]


{{alias}}.ndarray( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY )
    {{REPL_TEXT_NDARRAY_DESC}}

    While typed array views mandate a view offset based on the underlying
    buffer, the `offsetX` and `offsetY` parameters support indexing semantics
    based on starting indices.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    dtypeX: any
        Data type for `x`.

    x: ArrayLikeObject
        Input array.

    strideX: integer
        Index increment for `x`.

    offsetX: integer
        Starting index for `x`.

    dtypeY: any
        Data type for `y`.

    y: ArrayLikeObject
        Destination array.

    strideY: integer
        Index increment for `y`.

    offsetY: integer
        Starting index for `y`.

    Returns
    -------
    y: ArrayLikeObject
        Input array `y`.

    Examples
    --------
    // Standard usage:
    > var x = new {{alias:@stdlib/array/{{TYPED_ARRAY_DTYPE}}}}( [ {{X_VALUES_LEN_4}} ] );
    > var y = new {{alias:@stdlib/array/{{TYPED_ARRAY_DTYPE}}}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > {{alias}}.ndarray( x.length, '{{TYPED_ARRAY_DTYPE}}', x, 1, 0, '{{TYPED_ARRAY_DTYPE}}', y, 1, 0 )
    <{{TYPED_ARRAY_CTOR}}>[ {{EXPECTED_LEN_4}} ]

    // Advanced indexing:
    > x = new {{alias:@stdlib/array/{{TYPED_ARRAY_DTYPE}}}}( [ {{X_VALUES_LEN_4}} ] );
    > y = new {{alias:@stdlib/array/{{TYPED_ARRAY_DTYPE}}}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > {{alias}}.ndarray( 2, '{{TYPED_ARRAY_DTYPE}}', x, 2, 1, '{{TYPED_ARRAY_DTYPE}}', y, -1, y.length-1 )
    <{{TYPED_ARRAY_CTOR}}>[ 0.0, 0.0, {{EXPECTED_LEN_2_XM2_Y1}} ]

    See Also
    --------

