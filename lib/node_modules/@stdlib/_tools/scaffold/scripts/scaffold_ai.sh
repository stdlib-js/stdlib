#!/usr/bin/env bash
#
# @license Apache-2.0
#
# Copyright (c) 2022 The Stdlib Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Script for scaffolding a package via AI.
#
# Usage: scaffold.h
#
# Environment Variables:
#
#   SCAFFOLD_API_KEY: API key for the AI service.

## USER-DEFINED VARIABLES ##

# Use supplied package path:
pkg=${1}


## COMPUTED VARIABLES ##

# Determine the root project directory:
root_dir="$(git rev-parse --show-toplevel)"

# Define the project source code directory:
base_dir="${root_dir}/lib/node_modules"

# Define the destination path:
dest_dir="${base_dir}/@stdlib/${pkg}"

# Azure stdlib scaffolding API endpoint:
endpoint="https://stdlib-scaffolding.azurewebsites.net/api"

# Get git user email:
git_email="$(git config --global user.email)"

# `README.md` of the package to scaffold:
readme="${dest_dir}/README.md"


# FUNCTIONS #

# Make a request to the Azure stdlib scaffolding API and write the response to a file.
#
# $1 - file path (e.g., 'examples/index.js')
# $2 - JSON request body
function scaffold_request() {
	echo "Scaffolding file: ${1}..."

	# Get function name from file path:
	func_name=$(echo "$1" | sed 's/[\/.]/-/g')

	# Query string:
	query="clientId=${git_email}&code=${SCAFFOLD_API_KEY}&pkg=${pkg}"

	# Endpoint URL:
	url="${endpoint}/${func_name}?${query}"

	# Make a request to the Azure stdlib scaffolding API:
	response=$(curl -s -X POST -H "Content-Type: application/json" -d "$2" "${url}")

	# Create the file directory if it does not exist yet:
	mkdir -p ${dest_dir}/$(dirname "$1")

	# Write the response to the respective file:
	echo "$response" > ${dest_dir}/"$1"
}

# MAIN #

# Main execution sequence.
main() {
	if [ -z "${pkg}" ]; then
		echo "Error: must provide a package name." >&2
		exit 1
	fi
	echo '' >&2
	echo "Scaffolding package: ${pkg}" >&2
	echo '' >&2

	# Check whether authentication key is set:
	if [ -z "${SCAFFOLD_API_KEY}" ]; then
		echo "Error: missing environment variable 'SCAFFOLD_API_KEY'." >&2
		exit 1
	fi

	# Create the destination directory if it does not exist:
	if [ ! -d "${dest_dir}" ]; then
		mkdir -p "${dest_dir}"
	fi
	if [ ! -f "${readme}" ]; then
		scaffold_request "README.md"
		README=''
	else
		echo "README.md already exists, using it to scaffold remaining files via AI..." >&2

		# `README.md` contents:
		readme_file=$(cat ${readme} | jq -Rs)

		# JSON payload for the API:
		README='{"readme": '$readme_file'}'
	fi

	if [[ ! -f "${dest_dir}/package.json" ]]; then
		scaffold_request "package.json" "$README"
	fi
	if [[ ! -f "${dest_dir}/examples/index.js" ]]; then
		scaffold_request "examples/index.js" "$README"
	fi
	if [[ ! -f "${dest_dir}/lib/index.js" ]]; then
		scaffold_request "lib/index.js" "$README"
	fi
	if [[ ! -f "${dest_dir}/lib/main.js" ]]; then
		scaffold_request "lib/main.js" "$README"
	fi
	if grep -q "options" "${readme}"; then
		if [[ ! -f "${dest_dir}/lib/validate.js" ]]; then
			scaffold_request "lib/validate.js" "$README"
			if [[ ! -f "${dest_dir}/test/test.validate.js" ]]; then
				scaffold_request "test/test.validate.js"
			fi
		else
			if [[ ! -f "${dest_dir}/test/test.validate.js" ]]; then
				validate_file=$(cat ${dest_dir}/lib/validate.js | jq -Rs)
				VALIDATE='{"validate": '$validate_file'}'
				scaffold_request "test/test.validate.js" "$VALIDATE"
			fi
		fi
	fi
	if [[ ! -f "${dest_dir}/test/test.js" ]]; then
		scaffold_request "test/test.js" "$README"
	fi
	if [[ ! -f "${dest_dir}/docs/repl.txt" ]]; then
		scaffold_request "docs/repl.txt" "$README"
	fi
	jsdoc_file=$(cat ${dest_dir}/lib/main.js | jq -Rs)
	JSDOC='{"jsdoc": '$jsdoc_file'}'
	if [[ ! -f "${dest_dir}/benchmark/benchmark.js" ]]; then
		scaffold_request "benchmark/benchmark.js" "$JSDOC"
	fi
	if [[ ! -f "${dest_dir}/docs/types/index.d.ts" ]]; then
		scaffold_request "docs/types/index.d.ts" "$JSDOC"
	fi
	if [[ ! -f "${dest_dir}/docs/types/test.ts" ]]; then
		ts_file=$(cat ${dest_dir}/lib/main.js | jq -Rs)
		TYPESCRIPT='{"typescript": '$ts_file'}'
		scaffold_request "docs/types/test.ts" "$TYPESCRIPT"
	fi
	if grep -q "## CLI" "${readme}"; then
		echo "CLI detected. Scaffold CLI package contents."
		if [[ ! -f "${dest_dir}/bin/cli" ]]; then
			scaffold_request "bin/cli" "$README"
		fi
		if [[ ! -f "${dest_dir}/docs/usage.txt" ]]; then
			scaffold_request "docs/usage.txt" "$README"
		fi
		if [[ ! -f "${dest_dir}/etc/cli_opts.json" ]]; then
			scaffold_request "etc/cli_opts.json" "$README"
		fi
		if [[ ! -f "${dest_dir}/test/test.cli.js" ]]; then
			scaffold_request "test/test.cli.js" "$README"
		fi
		if grep -q "standard stream" "${readme}"; then
			if [[ ! -f "${dest_dir}/test/fixtures/stdin_error.js.txt" ]]; then
				mkdir -p ${dest_dir}/test/fixtures
				curl -s "${endpoint}/test-fixtures-stdlib-error-js-txt" > ${dest_dir}/test/fixtures/stdin_error.js.txt
			fi
		fi
	fi
	if grep -q "\`\`\`c" "${readme}"; then
		echo "C API detected. Scaffold C package contents via AI."
		if [[ ! -f "${dest_dir}/binding.gyp" ]]; then
			curl -s "${endpoint}/binding-gyp" > ${dest_dir}/binding.gyp
		fi
		if [[ ! -f "${dest_dir}/include.gypi" ]]; then
			curl -s "${endpoint}/include-gypi" > ${dest_dir}/include.gypi
		fi
		if [[ ! -f "${dest_dir}/benchmark/benchmark.native.js" ]]; then
			benchmark_file=$(cat ${dest_dir}/benchmark/benchmark.js | jq -Rs)
			BENCHMARK='{"benchmark": '$benchmark_file'}'
			scaffold_request "benchmark/benchmark.native.js" "$BENCHMARK"
		fi
		if [[ ! -f "${dest_dir}/benchmark/c/benchmark.c" ]]; then
			scaffold_request "benchmark/c/benchmark.c" "$README"
		fi
		if [[ ! -f "${dest_dir}/benchmark/c/Makefile" ]]; then
			curl -s "${endpoint}/benchmark-c-makefile" > ${dest_dir}/benchmark/c/Makefile
		fi
		if [[ ! -f "${dest_dir}/examples/c/example.c" ]]; then
			scaffold_request "examples/c/example.c" "$README"
		fi
		if [[ ! -f "${dest_dir}/examples/c/Makefile" ]]; then
			curl -s "${endpoint}/examples-c-makefile" > ${dest_dir}/examples/c/Makefile
		fi
		main_file=$(cat ${dest_dir}/lib/main.js | jq -Rs)
		MAIN='{"main": '$main_file'}'
		if [[ ! -f "${dest_dir}/lib/native.js" ]]; then
			scaffold_request "lib/native.js" "$MAIN"
		fi
		if [[ ! -f "${dest_dir}/src/main.c" ]]; then
			scaffold_request "src/main.c" "$MAIN"
		fi
		if [[ ! -f "${dest_dir}/src/addon.c" ]]; then
			scaffold_request "src/addon.c" "$MAIN"
		fi
		if [[ ! -f "${dest_dir}/src/Makefile" ]]; then
			curl -s "${endpoint}/src-makefile" > ${dest_dir}/src/Makefile
		fi
		if [[ ! -f "${dest_dir}/test/test.native.js" ]]; then
			test_file=$(cat ${dest_dir}/test/test.js | jq -Rs)
			TEST='{"test": '$test_file'}'
			scaffold_request "test/test.native.js" "$TEST"
		fi
	fi
	echo 'Successfully scaffolded package.' >&2
	echo '' >&2
	exit 0
}

# Run main:
main
