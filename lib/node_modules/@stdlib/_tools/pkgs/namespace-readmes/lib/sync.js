/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var join = require( 'path' ).join;
var glob = require( 'glob' ).sync;
var copy = require( '@stdlib/utils/copy' );
var exists = require( '@stdlib/fs/exists' ).sync;
var config = require( './config.json' );
var validate = require( './validate.js' );
var transform = require( './transform.js' );
var filter = require( './filter.js' );
var getRoot = require( './root.js' );


// MAIN //

/**
* Synchronously finds namespace package READMEs.
*
* @param {Options} [options] - function options
* @param {string} [options.dir] - directory from which to search for namespace package READMEs
* @param {string} [options.pattern='**\/package.json'] - glob pattern
* @param {StringArray} [options.ignore] - glob pattern(s) to exclude matches
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} `pattern` option must end with `package.json`
* @returns {(EmptyArray|StringArray)} list of READMEs
*
* @example
* var files = findREADMEs();
* // returns [...]
*/
function findREADMEs( options ) {
	var gopts;
	var files;
	var fpath;
	var pkgs;
	var opts;
	var tmp;
	var err;
	var out;
	var pkg;
	var i;
	var j;

	opts = copy( config );
	if ( arguments.length ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	// Find `package.json` files...
	gopts = {
		'cwd': getRoot( opts.dir || '' ),
		'ignore': opts.ignore.concat( config.ignore ), // always include default ignore patterns
		'realpath': true // return absolute file paths
	};
	files = glob( opts.pattern, gopts );

	// Resolve package data:
	pkgs = transform( files );

	// Resolve a list of namespaces:
	tmp = filter( pkgs );

	// Extract namespace package data...
	for ( i = 0; i < tmp.length; i++ ) {
		pkg = tmp[ i ];
		for ( j = 0; j < pkgs.length; j++ ) {
			if ( pkgs[ j ].pkg === pkg ) {
				tmp[ i ] = pkgs[ j ];
				break;
			}
		}
	}
	pkgs = tmp;

	// Search for package READMEs...
	out = [];
	for ( i = 0; i < pkgs.length; i++ ) {
		fpath = join( pkgs[ i ].dir, 'README.md' );
		if ( exists( fpath ) ) {
			out.push( fpath );
		}
	}
	return out;
}


// EXPORTS //

module.exports = findREADMEs;
