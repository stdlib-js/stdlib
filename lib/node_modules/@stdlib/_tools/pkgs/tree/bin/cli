#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var getKeys = require( '@stdlib/utils/keys' );
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var isObject = require( '@stdlib/assert/is-plain-object' );
var CLI = require( '@stdlib/cli/ctor' );
var tree = require( './../lib' );


// FUNCTIONS //

/**
* Prints an object as a tree.
*
* @private
* @param {Object} obj - object
* @param {string} prefix - indentation prefix
*/
function printTree( obj, prefix ) {
	var keys;
	var key;
	var val;
	var sym;
	var pre;
	var i;
	keys = getKeys( obj );
	for ( i = 0; i < keys.length; i++ ) {
		if ( keys[ i ] === '__namespace__' ) {
			keys.splice( i, 1 );
			break;
		}
	}
	for ( i = 0; i < keys.length; i++ ) {
		key = keys[ i ];
		if ( i < keys.length-1 ) {
			sym = '├──';
		} else {
			sym = '└──';
		}
		console.log( '%s%s %s', prefix, sym, key ); // eslint-disable-line no-console
		val = obj[ key ];
		if ( isObject( val ) ) {
			if ( i < keys.length-1 ) {
				pre = '│   ';
			} else {
				pre = '    ';
			}
			printTree( val, prefix+pre );
		}
	}
}

/**
* Callback invoked after generating a package tree.
*
* @private
* @param {(Error|null)} error - error object
* @param {Object} tree - package tree
* @throws {Error} unexpected error
*/
function onTree( error, tree ) {
	if ( error ) {
		throw error;
	}
	tree = tree[ '@stdlib' ];
	if ( tree ) {
		console.log( '@stdlib' ); // eslint-disable-line no-console
		printTree( tree, '' );
	}
}


// MAIN //

/**
* Main execution sequence.
*
* @private
*/
function main() {
	var flags;
	var args;
	var opts;
	var cli;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line options:
	flags = cli.flags();
	if ( flags.help || flags.version ) {
		return;
	}

	// Get any provided command-line arguments:
	args = cli.args();

	// Extract options...
	opts = {};
	if ( flags.pattern ) {
		opts.pattern = flags.pattern;
	}
	if ( flags.ignore ) {
		if ( typeof flags.ignore === 'string' ) {
			opts.ignore = [ flags.ignore ];
		} else {
			opts.ignore = flags.ignore;
		}
	}
	if ( args[ 0 ] ) {
		opts.dir = args[ 0 ];
	}
	// Generate tree:
	tree( opts, onTree );
}

main();
