/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;
var isArray = require( '@stdlib/assert/is-array' );
var inspect = require( './../lib/inspect.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof inspect, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns a string array if able to detect at least one package containing an `include` directory', function test( t ) {
	var inspect;
	var count;

	inspect = proxyquire( './../lib/inspect.js', {
		'@stdlib/fs/read-json': readJSON
	});
	count = 0;

	inspect( [ '/beep/boop/package.json', '/a/b/c/d/e/f/g/h/beep/boop/bop/package.json' ], clbk );

	function readJSON() {
		var clbk = arguments[ arguments.length-1 ];
		var pkg;

		count += 1;
		if ( count < 2 ) {
			pkg = {
				'directories': {
					'include': './include'
				}
			};
		} else {
			pkg = {
				'directories': {}
			};
		}
		clbk( null, pkg );
	}

	function clbk( error, dirs ) {
		if ( error ) {
			t.ok( false, error.message );
		}
		t.strictEqual( isStringArray( dirs ), true, 'returns a string array' );
		t.strictEqual( dirs.length, 1, 'expected length' );
		t.end();
	}
});

tape( 'the function returns an empty array if unable to detect at least one package containing an `include` directory', function test( t ) {
	var inspect = proxyquire( './../lib/inspect.js', {
		'@stdlib/fs/read-json': readJSON
	});

	inspect( [ '/a/b/c/d/e/f/g/h/beep/boop/bop/package.json' ], clbk );

	function readJSON() {
		var clbk = arguments[ arguments.length-1 ];
		clbk( null, {
			'directories': {}
		});
	}

	function clbk( error, dirs ) {
		if ( error ) {
			t.ok( false, error.message );
		}
		t.strictEqual( isArray( dirs ), true, 'returns an array' );
		t.strictEqual( dirs.length, 0, 'returns an empty array' );
		t.end();
	}
});

tape( 'the function returns an empty array if unable to detect at least one package containing an `include` directory (error)', function test( t ) {
	var inspect = proxyquire( './../lib/inspect.js', {
		'@stdlib/fs/read-json': readJSON
	});

	inspect( [ '/a/b/c/d/e/f/g/h/beep/boop/bop/package.json' ], clbk );

	function readJSON() {
		var clbk = arguments[ arguments.length-1 ];
		clbk( new Error( 'beep' ) );
	}

	function clbk( error, dirs ) {
		if ( error ) {
			t.ok( false, error.message );
		}
		t.strictEqual( isArray( dirs ), true, 'returns an array' );
		t.strictEqual( dirs.length, 0, 'returns an empty array' );
		t.end();
	}
});

tape( 'the function returns an empty array if unable to detect at least one package containing an `include` directory (no error)', function test( t ) {
	var inspect = proxyquire( './../lib/inspect.js', {
		'@stdlib/fs/read-json': readJSON
	});

	inspect( [ '/a/b/c/d/e/f/g/h/beep/boop/bop/package.json' ], clbk );

	function readJSON() {
		var clbk = arguments[ arguments.length-1 ];
		clbk( null, {} );
	}

	function clbk( error, dirs ) {
		if ( error ) {
			t.ok( false, error.message );
		}
		t.strictEqual( isArray( dirs ), true, 'returns an array' );
		t.strictEqual( dirs.length, 0, 'returns an empty array' );
		t.end();
	}
});
