/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var logger = require( 'debug' );
var pkgNames = require( '@stdlib/_tools/pkgs/names' );
var isFunction = require( '@stdlib/assert/is-function' );
var format = require( '@stdlib/string/format' );
var copy = require( '@stdlib/utils/copy' );
var validate = require( './validate.js' );
var filter = require( './filter.js' );
var getRoot = require( './root.js' );
var defaults = require( './defaults.json' );


// VARIABLES //

var debug = logger( 'browser-compatible:async' );


// MAIN //

/**
* Asynchronously lists stdlib packages which are compatible with browser environments.
*
* @param {Options} [options] - function options
* @param {string} [options.dir] - root directory from which to search for packages
* @param {string} [options.pattern='**\/package.json'] - glob pattern
* @param {StringArray} [options.ignore] - glob pattern(s) to exclude matches
* @param {Callback} clbk - callback to invoke after finding packages
* @throws {TypeError} callback argument must be a function
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} `pattern` option must end with `package.json`
*
* @example
* ls( onList );
*
* function onList( error, names ) {
*     if ( error ) {
*         throw error;
*     }
*     console.dir( names );
* }
*/
function ls() {
	var options;
	var clbk;
	var opts;
	var err;

	opts = copy( defaults );
	if ( arguments.length < 2 ) {
		clbk = arguments[ 0 ];
	} else {
		options = arguments[ 0 ];
		clbk = arguments[ 1 ];
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	if ( !isFunction( clbk ) ) {
		throw new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', clbk ) );
	}
	debug( 'Options: %s', JSON.stringify( opts ) );

	opts.dir = getRoot( opts.dir || '' );
	debug( 'Base directory: %s', opts.dir );

	debug( 'Resolving packages...' );
	pkgNames( opts, onPkgs );

	/**
	* Callback invoked after finding packages.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {(EmptyArray|StringArray)} names - list of package names
	* @returns {void}
	*/
	function onPkgs( error, names ) {
		if ( error ) {
			debug( 'Encountered an error when resolving packages: %s', error.message );
			return clbk( error );
		}
		debug( 'Successfully resolved %d packages.', names.length );
		if ( names.length === 0 ) {
			return clbk( null, names );
		}
		debug( 'Packages: %s', names.join( ', ' ) );

		debug( 'Filtering packages for browser compatibility...' );
		filter( names, opts.dir, onFilter );
	}

	/**
	* Callback invoked after filtering packages.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {(EmptyArray|StringArray)} names - list of package names
	* @returns {void}
	*/
	function onFilter( error, names ) {
		if ( error ) {
			debug( 'Encountered an error when filtering packages: %s', error.message );
			return clbk( error );
		}
		debug( 'Successfully filtered packages.' );

		debug( 'Packages: %s', names.join( ', ' ) );
		clbk( null, names );
	}
}


// EXPORTS //

module.exports = ls;
