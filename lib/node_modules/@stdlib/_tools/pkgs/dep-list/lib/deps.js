/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var logger = require( 'debug' );
var isNodeBuiltin = require( '@stdlib/assert/is-node-builtin' );
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var replace = require( '@stdlib/string/replace' );
var contains = require( '@stdlib/assert/contains' );
var instanceOf = require( '@stdlib/assert/instance-of' );
var pkgDeps = require( '@stdlib/_tools/pkgs/deps' ).sync;
var readJSON = require( '@stdlib/fs/read-json' ).sync;
var dirname = require( '@stdlib/utils/dirname' );
var unique = require( './unique.js' );
var getRoot = require( './root.js' );


// VARIABLES //

var debug = logger( 'pkgs:dep-list' );
var STDLIB_TYPES = '/// <reference types="@stdlib/types"/>';
var RE_DATA_JSON = /\/data\/.+\.json$/;


// MAIN //

/**
* Returns a list of dependencies for a specified stdlib package.
*
* @private
* @param {string} pkg - package name
* @param {boolean} dev - boolean indicating whether to return development dependencies
* @returns {(StringArray|EmptyArray)} dependencies array
*/
function depList( pkg, dev ) {
	var namespacePkgs;
	var manifest;
	var fpath;
	var entry;
	var conf;
	var deps;
	var name;
	var task;
	var def;
	var i;
	var j;

	namespacePkgs = pkgDeps( [ pkg ], {
		'dev': dev,
		'dir': getRoot( '' )
	});
	if ( dev ) {
		namespacePkgs = namespacePkgs[ 0 ].devDeps;
	} else {
		namespacePkgs = namespacePkgs[ 0 ].deps;
	}
	deps = [];
	try {
		entry = dirname( require.resolve( pkg ) );
		fpath = resolve( entry, '..', 'docs', 'types', 'index.d.ts' );
		def = readFileSync( fpath, 'utf-8' );
		if ( !dev && contains( def, STDLIB_TYPES ) ) {
			deps.push( '@stdlib/types' );
		}
	} catch ( err ) {
		debug( 'Encountered an error while reading `index.d.ts` file: %s', err.message );
	}
	fpath = resolve( entry, '..', 'manifest.json' );
	manifest = readJSON( fpath );
	if ( !instanceOf( manifest, Error ) ) {
		if ( !dev ) {
			deps.push( '@stdlib/utils/library-manifest' );
		}
		task = manifest.options.task;
		for ( i = 0; i < manifest.confs.length; i++ ) {
			conf = manifest.confs[ i ];
			if ( !dev && conf.task === task ) {
				for ( j = 0; j < conf.dependencies.length; j++ ) {
					deps.push( conf.dependencies[ j ] );
				}
			} else if ( dev ) {
				for ( j = 0; j < conf.dependencies.length; j++ ) {
					deps.push( conf.dependencies[ j ] );
				}
			}
		}
	}
	if ( !namespacePkgs || namespacePkgs.length === 0 ) {
		return unique( deps );
	}
	for ( i = 0; i < namespacePkgs.length; i++ ) {
		name = namespacePkgs[ i ];
		if ( RE_DATA_JSON.test( name ) ) {
			name = replace( name, RE_DATA_JSON, '' );
		}
		if ( !isNodeBuiltin( name ) ) {
			deps.push( name );
		}
	}
	return unique( deps );
}


// EXPORTS //

module.exports = depList;
