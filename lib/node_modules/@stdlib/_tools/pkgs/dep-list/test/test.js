/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;
var depList = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof depList, 'function', 'main export is a function' );
	t.end();
});

tape( 'if provided a first argument which is not a string, the function throws an error', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		{},
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			depList( value );
		};
	}
});

tape( 'if provided a `options` argument which is not an object, the function throws an error', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			depList( '@stdlib/regexp', value );
		};
	}
});

tape( 'the function throws an error if provided an invalid option', function test( t ) {
	t.throws( foo, TypeError, 'throws error' );
	t.end();
	function foo() {
		var opts = {
			'dev': 123
		};
		depList( '@stdlib/regexp', opts );
	}
});

tape( 'the function returns a string array', function test( t ) {
	var deps = depList( '@stdlib/regexp' );
	t.equal( isStringArray( deps ), true, 'returns a string array' );
	t.end();
});

tape( 'the function handles packages that reach into a data directory (i.e., have a require path ending with `/data/*.json`)', function test( t ) {
	var deps = depList( '@stdlib/repl/server' );
	var len;
	var i;

	len = deps.length;
	for ( i = 0; i < len; i++ ) {
		t.equal( deps[ i ].indexOf( '/data/' ), -1, 'does not include data directory' );
	}
	t.end();
});

tape( 'the function returns a string array (dev option)', function test( t ) {
	var deps;
	var opts;

	opts = {
		'dev': true
	};
	deps = depList( '@stdlib/regexp', opts );

	t.equal( isStringArray( deps ), true, 'returns a string array' );
	t.end();
});
