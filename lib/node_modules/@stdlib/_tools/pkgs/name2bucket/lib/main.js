/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;
var isArrayLikeObject = require( '@stdlib/assert/is-array-like-object' );
var name2standalone = require( '@stdlib/_tools/pkgs/name2standalone' );
var format = require( '@stdlib/string/format' );


// VARIABLES //

// Specify the next prime which is larger than the number of characters in a package name's alphabet:
var PRIME = 131; // number of ASCI characters is 128


// FUNCTIONS //

/**
* Computes the hash of a string.
*
* @private
* @param {string} value - input string
* @param {PositiveInteger} m - modulus
* @returns {NonNegativeInteger} hash
*/
function hash( value, m ) {
	var p;
	var s;
	var i;

	// Use a polynomial rolling hash algorithm...
	s = 0;
	p = 1;
	for ( i = 0; i < value.length; i++ ) {
		s = ( s + ( ( value.charCodeAt( i )+1 ) * p ) ) % m; // +1 in order to avoid 0
		p = ( p * PRIME ) % m;
	}
	return s;
}


// MAIN //

/**
* Deterministically converts a package name (or list of package names) to a bucket.
*
* ## Notes
*
* -   The package ensures that standalone and non-standalone package names map to the same bucket.
*
* @param {(string|StringArray)} name - package name(s)
* @param {PositiveInteger} buckets - number of buckets
* @throws {TypeError} first argument must be a string or an array of strings
* @throws {TypeError} second argument must be a positive integer
* @returns {(NonNegativeInteger|NonNegativeIntegerArray)} bucket(s)
*
* @example
* var out = name2bucket( '@stdlib/math/base/special/sin', 10 );
* // returns <number>
*
* @example
* var pkgs = [
*     '@stdlib/math/base/special/sin'
* ];
*
* var out = name2bucket( pkgs, 10 );
* // returns [ <number> ]
*/
function name2bucket( name, buckets ) {
	var out;
	var n;
	var i;
	if ( !isPositiveInteger( buckets ) ) {
		throw new TypeError( format( 'invalid argument. Second argument must be a positive integer. Value: `%s`.', buckets ) );
	}
	if ( isString( name ) ) {
		return hash( name2standalone( name ), buckets );
	}
	if ( !isArrayLikeObject( name ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be either a string or an array of strings. Value: `%s`.', name ) );
	}
	if ( !isPositiveInteger( buckets ) ) {
		throw new TypeError( format( 'invalid argument. Second argument must be a positive integer. Value: `%s`.', buckets ) );
	}
	out = [];
	for ( i = 0; i < name.length; i++ ) {
		n = name[ i ];
		if ( !isString( n ) ) {
			throw new TypeError( format( 'invalid argument. First argument must be either a string or an array of strings. Value: `%s`. Index: `%u`.', n, i ) );
		}
		out.push( hash( name2standalone( n ), buckets ) );
	}
	return out;
}


// EXPORTS //

module.exports = name2bucket;
