/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var path = require( 'path' );
var logger = require( 'debug' );
var isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;
var copy = require( '@stdlib/utils/copy' );
var cwd = require( '@stdlib/process/cwd' );
var entryPoints = require( '@stdlib/_tools/pkgs/browser-entry-points' ).sync;
var format = require( '@stdlib/string/format' );
var defaults = require( './defaults.json' );
var validate = require( './validate.js' );
var initResults = require( './init_results.js' );
var resolveDeps = require( './resolve.sync.js' );
var resolveDevDeps = require( './resolve_dev.sync.js' );
var resolveAliases = require( './resolve_aliases.sync.js' );


// VARIABLES //

var debug = logger( 'browser-pkg-deps:sync' );


// MAIN //

/**
* Synchronously resolves package dependencies for use in a browser.
*
* @param {StringArray} pkgs - list of packages
* @param {Options} [options] - function options
* @param {string} [options.dir] - root directory from which to resolve packages
* @param {boolean} [options.builtins=false] - boolean indicating whether to include built-in packages
* @param {boolean} [options.dev=false] - boolean indicating whether to resolve dev dependencies
* @throws {TypeError} first argument must be an array of strings
* @throws {TypeError} callback argument must be a function
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {(ObjectArray|Error)} resolved dependencies
*
* @example
* var pkgs = [ '/foo/bar/baz' ];
*
* var deps = pkgDeps( pkgs );
* if ( deps instanceof Error ) {
*     console.error( deps.message );
* } else {
*     console.log( deps );
*     // => [{...}]
* }
*/
function pkgDeps( pkgs, options ) {
	var entries;
	var results;
	var opts;
	var err;
	if ( !isStringArray( pkgs ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be an array of strings. Value: `%s`.', pkgs ) );
	}
	opts = copy( defaults );
	if ( arguments.length > 1 ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	debug( 'Options: %s', JSON.stringify( opts ) );
	if ( opts.dir ) {
		opts.dir = path.resolve( cwd(), opts.dir );
	} else {
		opts.dir = cwd();
	}
	debug( 'Base directory: %s', opts.dir );

	debug( 'Resolving package browser entry points...' );
	entries = entryPoints( pkgs, opts );
	if ( entries instanceof Error ) {
		debug( 'Encountered an error when resolving package browser entry points: %s', entries.message );
		return entries;
	}
	debug( 'Successfully resolved package browser entry points.' );

	results = initResults( entries );

	debug( 'Resolving package aliases...' );
	results = resolveAliases( results, entries );
	if ( results instanceof Error ) {
		debug( 'Encountered an error when resolving package aliases: %s', results.message );
		return results;
	}
	debug( 'Successfully resolved package aliases.' );

	debug( 'Resolving package dependencies...' );
	results = resolveDeps( results, entries, opts.builtins );
	if ( results instanceof Error ) {
		debug( 'Encountered an error when resolving package dependencies: %s', results.message );
		return results;
	}
	debug( 'Successfully resolved package dependencies.' );

	if ( opts.dev ) {
		debug( 'Resolving package dev dependencies...' );
		results = resolveDevDeps( results, opts );
		if ( results instanceof Error ) {
			debug( 'Encountered an error when resolving package dev dependencies: %s', results.message );
			return results;
		}
		debug( 'Successfully resolved package dev dependencies.' );
	}

	return results;
}


// EXPORTS //

module.exports = pkgDeps;
