/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var path = require( 'path' );
var logger = require( 'debug' );
var isStringArray = require( '@stdlib/assert/is-string-array' ).primitives;
var isFunction = require( '@stdlib/assert/is-function' );
var cwd = require( '@stdlib/process/cwd' );
var copy = require( '@stdlib/utils/copy' );
var entryPoints = require( '@stdlib/_tools/pkgs/entry-points' );
var format = require( '@stdlib/string/format' );
var defaults = require( './defaults.json' );
var validate = require( './validate.js' );
var resolveDeps = require( './resolve.js' );
var resolveDevDeps = require( './resolve_dev.js' );


// VARIABLES //

var debug = logger( 'pkg-deps:async' );


// MAIN //

/**
* Asynchronously resolves package dependencies.
*
* @param {StringArray} pkgs - list of packages
* @param {Options} [options] - function options
* @param {string} [options.dir] - root directory from which to resolve packages
* @param {boolean} [options.builtins=false] - boolean indicating whether to include built-in packages
* @param {boolean} [options.dev=false] - boolean indicating whether to resolve dev dependencies
* @param {Callback} clbk - callback to invoke after resolving dependencies
* @throws {TypeError} first argument must be an array of strings
* @throws {TypeError} callback argument must be a function
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
*
* @example
* var pkgs = [ '/foo/bar/baz' ];
*
* pkgDeps( pkgs, clbk );
*
* function clbk( error, results ) {
*     if ( error ) {
*         throw error;
*     }
*     console.dir( results );
* }
*/
function pkgDeps( pkgs, options, clbk ) {
	var opts;
	var err;
	var cb;
	if ( !isStringArray( pkgs ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be an array of strings. Value: `%s`.', pkgs ) );
	}
	opts = copy( defaults );
	if ( arguments.length < 3 ) {
		cb = options;
	} else {
		cb = clbk;
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	if ( !isFunction( cb ) ) {
		throw new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', cb ) );
	}
	debug( 'Options: %s', JSON.stringify( opts ) );
	if ( opts.dir ) {
		opts.dir = path.resolve( cwd(), opts.dir );
	} else {
		opts.dir = cwd();
	}
	debug( 'Base directory: %s', opts.dir );

	debug( 'Resolving entry points...' );
	entryPoints( pkgs, opts, onEntries );

	/**
	* Callback invoked upon resolving package entry points.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {ObjectArray} results - results
	* @returns {void}
	*/
	function onEntries( error, results ) {
		if ( error ) {
			debug( 'Encountered an error when resolving package entry points: %s', error.message );
			return done( error );
		}
		debug( 'Successfully resolved package entry points.' );

		debug( 'Resolving package dependencies...' );
		resolveDeps( results, opts.builtins, onDeps );
	}

	/**
	* Callback invoked upon resolving package dependencies.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {ObjectArray} results - results
	* @returns {void}
	*/
	function onDeps( error, results ) {
		if ( error ) {
			debug( 'Encountered an error when resolving package dependencies: %s', error.message );
			return done( error );
		}
		debug( 'Successfully resolved package dependencies.' );
		if ( opts.dev === false ) {
			return done( null, results );
		}
		debug( 'Resolving package dev dependencies...' );
		resolveDevDeps( results, opts, onDevDeps );
	}

	/**
	* Callback invoked upon resolving package dev dependencies.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {ObjectArray} results - results
	* @returns {void}
	*/
	function onDevDeps( error, results ) {
		if ( error ) {
			debug( 'Encountered an error when resolving package dev dependencies: %s', error.message );
			return done( error );
		}
		debug( 'Successfully resolved package dev dependencies.' );
		done( null, results );
	}

	/**
	* Callback invoked upon completion.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {ObjectArray} results - results
	* @returns {void}
	*/
	function done( error, results ) {
		if ( error ) {
			return cb( error );
		}
		cb( null, results );
	}
}


// EXPORTS //

module.exports = pkgDeps;
