/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var name2standalone = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof name2standalone, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided a string or an array of strings', function test( t ) {
	var values;
	var i;

	values = [
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		[ 'foo', 5 ],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			name2standalone( value );
		};
	}
});

tape( 'the function returns an empty string if provided an empty string', function test( t ) {
	t.strictEqual( name2standalone( '' ), '', 'returns expected value' );
	t.end();
});

tape( 'the function converts a stdlib package name to a standalone package name', function test( t ) {
	t.strictEqual( name2standalone( '@stdlib/math/base/special/sin' ), '@stdlib/math-base-special-sin', 'returns expected value' );
	t.end();
});

tape( 'the function returns an input name unchanged if not provided a stdlib package name', function test( t ) {
	t.strictEqual( name2standalone( 'tape' ), 'tape', 'returns expected value' );
	t.end();
});

tape( 'the function supports providing an array of package names', function test( t ) {
	var expected;
	var actual;
	var names;

	names = [
		'@stdlib/math/base/special/sin',
		'@stdlib/math/base/special',
		'@stdlib/math/base',
		'@stdlib/math',
		'tape'
	];
	expected = [
		'@stdlib/math-base-special-sin',
		'@stdlib/math-base-special',
		'@stdlib/math-base',
		'@stdlib/math',
		'tape'
	];
	actual = name2standalone( names );
	t.deepEqual( actual, expected, 'returns expected value' );
	t.end();
});

tape( 'the function returns an empty array if provided an empty array', function test( t ) {
	var arr;
	var out;

	arr = [];
	out = name2standalone( arr );

	t.notEqual( arr, out, 'returns different reference' );
	t.deepEqual( out, [], 'returns expected value' );
	t.end();
});
