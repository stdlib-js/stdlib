/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var logger = require( 'debug' );
var CompactAdjacencyMatrix = require( '@stdlib/utils/compact-adjacency-matrix' );
var depList = require( '@stdlib/_tools/pkgs/dep-list' );
var indexOf = require( '@stdlib/utils/index-of' );
var contains = require( '@stdlib/assert/contains' );
var startsWith = require( '@stdlib/string/starts-with' );
var format = require( '@stdlib/string/format' );


// VARIABLES //

var debug = logger( 'pkgs:toposort:sort' );
var OPTS = {
	'dev': false
};


// FUNCTIONS //

/**
* Checks whether a package is an ancestor of another package.
*
* @private
* @param {string} candidate - potential ancestor package (e.g., `@stdlib/string/tools`)
* @param {string} descendant - descendant package (e.g., `@stdlib/string/tools/grapheme-cluster-break`)
* @returns {boolean} boolean indicating whether a package is an ancestor of another package
*/
function isAncestorPackage( candidate, descendant ) {
	return startsWith( descendant, candidate + '/' );
}


// MAIN //

/**
* Returns a topological sort.
*
* @private
* @param {(StringArray|EmptyArray)} pkgs - list of package names
* @returns {(StringArray|EmptyArray|Error)} sorted package names
*/
function sort( pkgs ) {
	var deps;
	var idx;
	var out;
	var M;
	var N;
	var i;
	var j;

	N = pkgs.length;
	if ( N === 0 ) {
		return pkgs;
	}
	M = new CompactAdjacencyMatrix( N );
	for ( i = 0; i < N; i++ ) {
		debug( 'Resolving dependencies for package: %s (%d of %d)', pkgs[ i ], i+1, N );
		deps = depList( pkgs[ i ], OPTS );

		debug( 'Processing %d dependencies...', deps.length );
		for ( j = 0; j < deps.length; j++ ) {
			idx = indexOf( pkgs, deps[ j ] );

			if (
				idx >= 0 && // ignore external dependencies
				!contains( deps[ j ], '_tools' ) && // ignore internal tools packages
				!isAncestorPackage( deps[ j ], pkgs[ i ] ) // ignore dependencies which are parent packages
			) {
				M.addEdge( idx, i );
			}
		}
	}
	debug( 'Sorting packages...' );
	out = M.toposort( pkgs );

	if ( out[ 0 ] ) {
		debug( 'Successfully sorted packages.' );
		out = out[ 0 ];
		for ( i = 0; i < out.length; i++ ) {
			out[ i ] = pkgs[ out[ i ] ];
		}
		return out;
	}
	out = out[ 1 ];
	for ( i = 0; i < out.length; i++ ) {
		out[ i ] = pkgs[ out[ i ] ];
	}
	debug( 'Failed to sort packages. Detected the following dependency chain containing a cycle: %s', out.join( ' -> ' ) );
	return new Error( format( 'unexpected error. Failed to sort packages. Detected the following dependency chain containing a cycle: `%s`.', out.join( ' -> ' ) ) );
}


// EXPORTS //

module.exports = sort;
