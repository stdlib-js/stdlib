/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isCapitalized = require( '@stdlib/assert/is-capitalized' );
var startsWith = require( '@stdlib/string/starts-with' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var ltrim = require( '@stdlib/string/left-trim' );
var copy = require( '@stdlib/utils/copy' );
var DEFAULTS = require( './defaults.json' );


// VARIABLES //

var RE_LETTERS = /^[a-zA-Z]/;
var rule;


// FUNCTIONS //

/**
* Rule for validating that comments start with an uppercase letter.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	var comments;
	var options;
	var source;
	var opts;

	opts = copy( DEFAULTS );
	options = context.options[ 0 ];
	if ( hasOwnProp( options, 'whitelist' ) ) {
		opts.whitelist = options.whitelist.slice();
	}

	source = context.getSourceCode();
	comments = source.getAllComments();

	/**
	* Reports the error message.
	*
	* @private
	* @param {Object} loc - lines of code (object with `start` and `end` properties)
	*/
	function report( loc ) {
		context.report({
			'node': null,
			'message': 'Comments should begin with an uppercase character',
			'loc': loc
		});
	}

	/**
	* Checks whether first word of the comment is capitalized or contained in the exceptions whitelist.
	*
	* @private
	* @param {ASTNode} comment - comment node
	*/
	function processComment( comment ) {
		var found;
		var text;
		var word;
		var i;

		text = ltrim( comment.value );
		if ( RE_LETTERS.test( text ) ) { // Notice: JSDoc comments are not checked...
			if (
				!isInlineComment( comment ) &&
				!isCapitalized( text )
			) {
				found = false;
				for ( i = 0; i < opts.whitelist.length; i++ ) {
					word = opts.whitelist[ i ];
					if (
						startsWith( text, word+' ' ) ||
						startsWith( text, word+'\n' )
					) {
						found = true;
						break;
					}
				}
				// If not in whitelist, raise an error:
				if ( !found ) {
					report( comment.loc );
				}
			}
		}
	}

	/**
	* Checks whether a comment is an inline block comment or a trailing line comment.
	*
	* ## Details
	*
	* -   A comment is regarded as an inline block comment if it is preceded by a token on the same line and followed by a token on the same line.
	* -   A comment is a trailing line comment if it starts with `//` and has a preceding token on the same line
	*
	* @private
	* @param {ASTNode} comment - comment node
	* @returns {boolean} boolean indicating whether a comment is an inline block comment or trailing line comment
	*/
	function isInlineComment( comment ) {
		var hasPreceding;
		var previous;
		var next;
		var opts;

		opts = {
			'includeComments': true
		};
		previous = source.getTokenBefore( comment, opts );
		if ( previous ) {
			hasPreceding = comment.loc.start.line === previous.loc.end.line;
		} else {
			hasPreceding = false;
		}
		next = source.getTokenAfter( comment, opts );
		if ( comment.type === 'Line' ) {
			return hasPreceding;
		}
		return (
			next &&
			hasPreceding &&
			comment.loc.end.line === next.loc.start.line
		);
	}

	/**
	* Checks whether comments start with an uppercase letter.
	*
	* @private
	*/
	function validate() {
		var comment;
		var i;

		for ( i = 0; i < comments.length; i++ ) {
			comment = comments[ i ];
			if ( comment.type !== 'Shebang' ) {
				processComment( comment );
			}
		}
	}

	return {
		'Program': validate
	};
}


// MAIN //

rule = {
	'meta': {
		'docs': {
			'description': 'enforce that comments start with an uppercase letter'
		},
		'schema': [
			{
				'type': 'object',
				'properties': {
					'whitelist': {
						'type': 'array'
					}
				},
				'additionalProperties': false
			}
		]
	},
	'create': main
};


// EXPORTS //

module.exports = rule;
