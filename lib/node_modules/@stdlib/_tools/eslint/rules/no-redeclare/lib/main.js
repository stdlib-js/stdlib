/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright and license are from the [no-redeclare]{@link https://github.com/eslint/eslint/blob/4673f6e2f348e98a1288a2da5ec42e313826ebdb/lib/rules/no-redeclare.js} ESLint rule by Ilya Volodin. The implementation follows the original, but has been modified to support a whitelist of global variables for which redeclaration is allowed and to conform to the code style used by this project.
*
* ```text
* Copyright JS Foundation and other contributors, https://js.foundation
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
* THE SOFTWARE.
* ```
*/

'use strict';


// MODULES //

var copy = require( '@stdlib/utils/copy' );
var contains = require( '@stdlib/assert/contains' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var hasProp = require( '@stdlib/assert/has-property' );
var DEFAULTS = require( './defaults.json' );


// VARIABLES //

var rule;


// FUNCTIONS //

/**
* Comparator function used to sort objects in ascending order according to range.
*
* @private
* @param {Object} a - first identifier
* @param {Object} b - second identifier
* @returns {number} difference between `a.range[1]` and `b.range[1]`
*/
function ascending( a, b ) {
	return a.range[ 1 ] - b.range[ 1 ];
}

/**
* Rule for validating that there are no variable redeclarations.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	var options;
	var opts;

	opts = copy( DEFAULTS );
	options = context.options[ 0 ];
	if ( hasOwnProp( options, 'builtinGlobals' ) ) {
		opts.builtinGlobals = options.builtinGlobals;
	}
	if ( hasOwnProp( options, 'globalsWhitelist' ) ) {
		opts.globalsWhitelist = options.globalsWhitelist;
	}

	/**
	* Reports the error message.
	*
	* @private
	* @param {ASTNode} node - node to report
	* @param {string} msg - message to report
	*/
	function report( node, msg ) {
		context.report({
			'node': node,
			'message': msg
		});
	}

	/**
	* Finds variables in a given scope and flag redeclared ones.
	*
	* @private
	* @param {Object} scope - eslint-scope scope object.
	*/
	function findVariablesInScope( scope ) {
		var hasBuiltin;
		var variable;
		var count;
		var ids;
		var i;
		var j;
		var l;

		for ( i = 0; i < scope.variables.length; i++ ) {
			variable = scope.variables[ i ];
			ids = variable.identifiers;
			hasBuiltin = opts.builtinGlobals && hasProp( variable, 'writeable' );
			if ( hasBuiltin ) {
				if ( contains( opts.globalsWhitelist, variable.name ) ) {
					hasBuiltin = false;
				}
			}
			l = ids.length;
			count = ( hasBuiltin ? 1 : 0 ) + l;
			if ( count >= 2 ) {
				ids.sort( ascending );
				for ( j = ( hasBuiltin ? 0 : 1 ); j < l; j++ ) {
					report( ids[j], variable.name+' is already defined' );
				}
			}
		}
	}

	/**
	* Finds variables in the current scope.
	*
	* @private
	* @param {ASTNode} node - program node.
	*/
	function checkForGlobal( node ) {
		var parserOptions = context.parserOptions;
		var ecmaFeatures = parserOptions.ecmaFeatures || {};
		var scope = context.getScope();

		// Node.js environment or modules have a special scope:
		if ( ecmaFeatures.globalReturn || node.sourceType === 'module' ) {
			findVariablesInScope( scope.childScopes[0] );
		} else {
			findVariablesInScope( scope );
		}
	}

	/**
	* Finds variables in the current scope.
	*
	* @private
	*/
	function checkForBlock() {
		findVariablesInScope( context.getScope() );
	}

	return {
		'Program': checkForGlobal,
		'FunctionDeclaration': checkForBlock,
		'FunctionExpression': checkForBlock
	};
}


// MAIN //

rule = {
	'meta': {
		'docs': {
			'description': 'disallow variable redeclarations'
		},
		'schema': [
			{
				'type': 'object',
				'properties': {
					'builtinGlobals': {
						'type': 'boolean'
					},
					'globalsWhitelist': {
						'type': 'array'
					}
				},
				'additionalProperties': false
			}
		]
	},
	'create': main
};


// EXPORTS //

module.exports = rule;
