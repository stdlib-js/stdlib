/**
* @license Apache-2.0
*
* Copyright (c) 2023 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// VARIABLES //

var rule;


// FUNCTIONS //

/**
* Rule for validating that comments are not empty.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main(context) {
	var comments;
	var visited;
	var source;

	source = context.getSourceCode();
	visited = {};

	/**
	* Reports the error message.
	*
	* @private
	* @param {Object} comment - comment node
	*/
	function report(comment) {
		context.report({
			'node': null,
			'message': 'Empty comments are not allowed',
			'loc': comment.loc
		});
	}

	/**
	* Checks if the comment is empty.
	*
	* @private
	* @param {ASTNode} comment - comment node
	*/
	function processComment( comment ) {
		var text = comment.value.trim();
		if ( text === '' ) {
			report( comment );
		}
	}

	/**
	* Checks for empty code comments.
	*
	* @private
	* @param {ASTNode} node - program to examine
	*/
	function validate( node ) {
		var comment;
		var i;

		comments = source.getCommentsInside( node );
		for ( i = 0; i < comments.length; i++ ) {
			comment = comments[i];
			if ( comment.type !== 'Shebang' && !visited[comment.range] ) {
				processComment( comment );
			}
			visited[comment.range] = true;
		}
	}

	return {
		'Program:exit': validate,
		'FunctionDeclaration': validate,
		'FunctionExpression': validate
	};
}


// MAIN //

rule = {
	'meta': {
		'docs': {
			'description': 'enforce that comments are not empty'
		},
		'schema': [],
		'fixable': null
	},
	'create': main
};


// EXPORTS //

module.exports = rule;
