/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// VARIABLES //

var invalid;
var test;


// MAIN //

// Create our test cases:
invalid = [];

test = {
	'code': [
		'/**',
		'* Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus musir.',
		'*',
		'*/',
		'function beep() {',
		'    console.log( "boop" );',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Line must be at most 80 characters',
			'type': null
		}
	]
};
invalid.push( test );

test = {
	'code': [
		'/**',
		'* Removes a UTF-8 byte order mark (BOM) from the beginning of a string.',
		'*',
		'* ## Notes',
		'*',
		'* -   A UTF-8 byte order mark ([BOM][1]) is the byte sequence `0xEF,0xBB,0xBF`.',
		'* -   To convert a UTF-8 encoded `Buffer` to a `string`, the `Buffer` must be converted to \'[UTF-16][2]. The BOM thus gets converted to the single 16-bit code point `\'\ufeff\'` \'(UTF-16 BOM).',
		'*',
		'* [1]: https://en.wikipedia.org/wiki/Byte_order_mark#UTF-8',
		'* [2]: http://es5.github.io/#x4.3.16',
		'*',
		'*',
		'* @param {string} str - input string',
		'* @throws {TypeError} must provide a string primitive',
		'* @returns {string} string with BOM removed',
		'*',
		'* @example',
		'* var str = removeUTF8BOM( \'\ufeffbeep\' );',
		'* // returns \'beep\'',
		'*/',
		'function removeUTF8BOM( str ) {',
		'	if ( !isString( str ) ) {',
		'		throw new TypeError( \'invalid argument. Must provide a string. Value: `\' + str + \'`.\' );',
		'	}',
		'	if ( str.charCodeAt( 0 ) === BOM ) {',
		'		return str.slice( 1 );',
		'	}',
		'	return str;',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Line must be at most 80 characters',
			'type': null
		}
	]
};
invalid.push( test );

test = {
	'code': [
		'/**',
		'* Returns a pseudo-random number on `[0,1]`.',
		'* ',
		'* @returns {number} uniform random number',
		'*',
		'* @example',
		'* var y = rand();',
		'* // e.g., returns 0.5363925252089496',
		'*/',
		'function rand() {',
		'  return Math.random();',
		'}'
	].join( '\n' ),
	'options': [ 10 ],
	'errors': [
		{
			'message': 'Line must be at most 10 characters',
			'type': null
		}
	]
};
invalid.push( test );


// EXPORTS //

module.exports = invalid;
