/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var valid = [];
var test;

test = {
	'code': [
		'/**',
		'* Returns a pseudo-random number on [0,1].',
		'* ',
		'* @returns {number} uniform random number',
		'*',
		'* @example',
		'* var y = rand();',
		'* // e.g., returns 0.5363925252089496',
		'*/',
		'function rand( x ) {',
		'  return Math.random();',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Returns an integer corresponding to the unbiased exponent of a single-precision floating-point number.',
		'*',
		'* @param {number} x - single-precision floating-point number',
		'* @returns {integer8} unbiased exponent',
		'*',
		'* @example',
		'* var toFloat32 = require( \'@stdlib/number/float64/base/to-float32\' );',
		'* var exp = exponentf( toFloat32( 3.14e34 ) ); // => 2**114 ~ 2.08e34',
		'* // returns 114',
		'* @example',
		'* var toFloat32 = require( \'@stdlib/number/float64/base/to-float32\' );',
		'* var exp = exponentf( toFloat32( 3.14e-34 ) ); // => 2**-112 ~ 1.93e-34',
		'* // returns -112',
		'* @example',
		'* var toFloat32 = require( \'@stdlib/number/float64/base/to-float32\' );',
		'* var exp = exponentf( toFloat32( -3.14 ) );',
		'* // returns 1',
		'* @example',
		'* var exp = exponentf( 0.0 );',
		'* // returns 0',
		'* @example',
		'* var exp = exponentf( NaN );',
		'* // returns 128',
		'*/',
		'function exponentf( x ) {',
		'  // Convert `x` to an unsigned 32-bit integer corresponding to the IEEE 754 binary representation:',
		'  var w = getWord( x );',
		'',
		'  // Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:',
		'  w = ( w & EXP_MASK ) >>> 23;',
		'',
		'  // Remove the bias and return:',
		'  return w - BIAS;',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Returns an integer corresponding to the unbiased exponent of a double-precision floating-point number.',
		'*',
		'* @param {number} x - input value',
		'* @returns {integer32} unbiased exponent',
		'*',
		'* @example',
		'* var exp = exponent( 3.14e-307 ); // => 2**-1019 ~ 1e-307',
		'* // returns -1019',
		'* @example',
		'* var exp = exponent( -3.14 );',
		'* // returns 1',
		'* @example',
		'* var exp = exponent( 0.0 );',
		'* // returns 0',
		'* @example',
		'* var exp = exponent( NaN );',
		'* // returns 1024',
		'*/',
		'function exponent( x ) {',
		'  // Extract from the input value a higher order word (unsigned 32-bit integer) which contains the exponent:',
		'  var high = getHighWord( x );',
		'',
		'  // Apply a mask to isolate only the exponent bits and then shift off all bits which are part of the fraction:',
		'  high = ( high & EXP_MASK ) >>> 20;',
		'',
		'  // Remove the bias and return:',
		'  return (high - BIAS)|0; // asm type annotation',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Returns an unsigned 32-bit integer corresponding to the IEEE 754 binary representation of a single-precision floating-point number.',
		'*',
		'* @param {number} x - single-precision floating-point number',
		'* @returns {uinteger32} unsigned 32-bit integer',
		'*',
		'* @example',
		'* var float64ToFloat32 = require( \'@stdlib/number/float64/base/to-float32\' );',
		'*',
		'* var f32 = float64ToFloat32( 1.337 );',
		'* // returns 1.3370000123977661',
		'*',
		'* var w = toWordf( f32 ); // => 0 01111111 01010110010001011010001',
		'* // returns 1068180177',
		'*/',
		'function toWordf( x ) {',
		'	FLOAT32_VIEW[ 0 ] = x;',
		'	return UINT32_VIEW[ 0 ];',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Sets the more significant 32 bits of a double-precision floating-point number.',
		'*',
		'* @param {number} x - double',
		'* @param {uinteger32} high - unsigned 32-bit integer to replace the higher order word of `x`',
		'* @returns {number} double having the same lower order word as `x`',
		'*',
		'* @example',
		'* var high = 5 >>> 0; // => 0 00000000000 00000000000000000101',
		'*',
		'* var y = setHighWord( 3.14e201, high ); // => 0 00000000000 0000000000000000010110010011110010110101100010000010',
		'* // returns 1.18350528745e-313',
		'*',
		'* @example',
		'* var PINF = require( \'@stdlib/constants/float64/pinf\' ); // => 0 11111111111 00000000000000000000 00000000000000000000000000000000',
		'*',
		'* var high = 1072693248 >>> 0; // => 0 01111111111 00000000000000000000',
		'*',
		'* // Set the higher order bits of `+infinity` to return `1`:',
		'* var y = setHighWord( PINF, high ); // => 0 01111111111 0000000000000000000000000000000000000000000000000000',
		'* // returns 1.0',
		'*/',
		'function setHighWord( x, high ) {',
		'	FLOAT64_VIEW[ 0 ] = x;',
		'	UINT32_VIEW[ HIGH ] = ( high >>> 0 ); // identity bit shift to ensure integer',
		'	return FLOAT64_VIEW[ 0 ];',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Returns the size (in bytes) of the canonical binary representation of a specified numeric type.',
		'*',
		'* @param {string} dtype - numeric type',
		'* @throws {TypeError} must provide a recognized numeric type',
		'* @returns {integer} size in bytes',
		'*',
		'* @example',
		'* var s = sizeOf( \'int8\' ); // signed 8-bit integer',
		'* // returns 1',
		'*',
		'* @example',
		'* var s = sizeOf( \'int16\' );',
		'* // returns 2',
		'*/',
		'function sizeOf() {}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Constant function.',
		'*',
		'* @private',
		'* @returns {number} constant value',
		'*',
		'* @example',
		'* var y = constantFunction( 3.0e3 );',
		'* // returns 3.0e3',
		'*/',
		'function constantFunction() {',
		'  return value;',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Enforce marker style conventions for return annotations.',
		'*',
		'* @name doctest-marker',
		'* @memberof rules',
		'* @type {string}',
		'* @default \'error\'',
		'*',
		'* @example',
		'* // Bad...',
		'* var x = 3.0;',
		'* // => 3.0',
		'*',
		'* console.log( \'Hello World\' );',
		'* // returns \'Hello World\'',
		'*',
		'* // => null',
		'*',
		'* @example',
		'* // Good...',
		'* var x = 3.0;',
		'* // returns 3.0',
		'*',
		'* console.log( \'Hello World\' );',
		'* // => \'Hello World\'',
		'*/',
		'rules[ \'stdlib/doctest-marker\' ] = \'error\';'
	].join( '\n' )
};
valid.push( test );


// EXPORTS //

module.exports = valid;
