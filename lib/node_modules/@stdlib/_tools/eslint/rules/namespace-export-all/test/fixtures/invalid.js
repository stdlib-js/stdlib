/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var join = require( 'path' ).join;


// MAIN //

var invalid = [];
var test;

test = {
	'code': [
		'/*',
		'* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.',
		'*/',
		'',
		'// MODULES //',
		'',
		'var setReadOnly = require( \'@stdlib/utils/define-read-only-property\' );',
		'',
		'',
		'// MAIN //',
		'',
		'/**',
		'* Top-level namespace.',
		'*',
		'* @namespace ns',
		'*/',
		'var ns = {};',
		'',
		'/**',
		'* @name error2json',
		'* @memberof ns',
		'* @readonly',
		'* @type {Function}',
		'* @see {@link module:@stdlib/error/to-json}',
		'*/',
		'setReadOnly( ns, \'error2json\', require( \'@stdlib/error/to-json\' ) );'
	].join( '\n' ),
	'errors': [
		{
			'message': '`reviver` should be exported from namespace `index.js`',
			'type': null
		}
	],
	'filename': join( __dirname, 'error', 'lib', 'index.js' ),
	'output': [
		'/*',
		'* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.',
		'*/',
		'',
		'// MODULES //',
		'',
		'var setReadOnly = require( \'@stdlib/utils/define-read-only-property\' );',
		'',
		'',
		'// MAIN //',
		'',
		'/**',
		'* Top-level namespace.',
		'*',
		'* @namespace ns',
		'*/',
		'var ns = {};',
		'',
		'/**',
		'* @name reviver',
		'* @memberof ns',
		'* @readonly',
		'* @type {Function}',
		'* @see {@link module:@stdlib/_tools/eslint/rules/namespace-export-all/test/fixtures/error/reviver}',
		'*/',
		'setReadOnly( ns, \'reviver\', require( \'@stdlib/_tools/eslint/rules/namespace-export-all/test/fixtures/error/reviver\' ) );',
		'',
		'/**',
		'* @name error2json',
		'* @memberof ns',
		'* @readonly',
		'* @type {Function}',
		'* @see {@link module:@stdlib/error/to-json}',
		'*/',
		'setReadOnly( ns, \'error2json\', require( \'@stdlib/error/to-json\' ) );'
	].join( '\n' )
};
invalid.push( test );

test = {
	'code': [
		'\'use strict\';',
		'',
		'/*',
		'* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.',
		'*/',
		'',
		'// MODULES //',
		'',
		'var setReadOnly = require( \'@stdlib/utils/define-read-only-property\' );',
		'',
		'',
		'// MAIN //',
		'',
		'/**',
		'* Top-level namespace.',
		'*',
		'* @namespace ns',
		'*/',
		'var ns = {};',
		'',
		'/**',
		'* @name complex',
		'* @memberof ns',
		'* @readonly',
		'* @type {Function}',
		'* @see {@link module:@stdlib/complex/cmplx}',
		'*/',
		'setReadOnly( ns, \'complex\', require( \'@stdlib/complex/cmplx\' ) );',
		'',
		'/**',
		'* @name Complex128',
		'* @memberof ns',
		'* @readonly',
		'* @constructor',
		'* @see {@link module:@stdlib/complex/float64}',
		'*/',
		'setReadOnly( ns, \'Complex128\', require( \'@stdlib/complex/float64\' ) );',
		'',
		'/**',
		'* @name Complex64',
		'* @memberof ns',
		'* @readonly',
		'* @constructor',
		'* @see {@link module:@stdlib/complex/float32}',
		'*/',
		'setReadOnly( ns, \'Complex64\', require( \'@stdlib/complex/float32\' ) );'
	].join( '\n' ),
	'errors': [
		{
			'message': '`conj` should be exported from namespace `index.js`',
			'type': null
		}
	],
	'filename': join( __dirname, 'complex', 'lib', 'index.js' ),
	'output': [
		'\'use strict\';',
		'',
		'/*',
		'* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.',
		'*/',
		'',
		'// MODULES //',
		'',
		'var setReadOnly = require( \'@stdlib/utils/define-read-only-property\' );',
		'',
		'',
		'// MAIN //',
		'',
		'/**',
		'* Top-level namespace.',
		'*',
		'* @namespace ns',
		'*/',
		'var ns = {};',
		'',
		'/**',
		'* @name conj',
		'* @memberof ns',
		'* @readonly',
		'* @type {Function}',
		'* @see {@link module:@stdlib/_tools/eslint/rules/namespace-export-all/test/fixtures/complex/conj}',
		'*/',
		'setReadOnly( ns, \'conj\', require( \'@stdlib/_tools/eslint/rules/namespace-export-all/test/fixtures/complex/conj\' ) );',
		'',
		'/**',
		'* @name complex',
		'* @memberof ns',
		'* @readonly',
		'* @type {Function}',
		'* @see {@link module:@stdlib/complex/cmplx}',
		'*/',
		'setReadOnly( ns, \'complex\', require( \'@stdlib/complex/cmplx\' ) );',
		'',
		'/**',
		'* @name Complex128',
		'* @memberof ns',
		'* @readonly',
		'* @constructor',
		'* @see {@link module:@stdlib/complex/float64}',
		'*/',
		'setReadOnly( ns, \'Complex128\', require( \'@stdlib/complex/float64\' ) );',
		'',
		'/**',
		'* @name Complex64',
		'* @memberof ns',
		'* @readonly',
		'* @constructor',
		'* @see {@link module:@stdlib/complex/float32}',
		'*/',
		'setReadOnly( ns, \'Complex64\', require( \'@stdlib/complex/float32\' ) );'
	].join( '\n' )
};
invalid.push( test );


// EXPORTS //

module.exports = invalid;
