/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var parseJSDoc = require( 'doctrine' ).parse;
var remark = require( 'remark' );
var remarkLint = require( 'remark-lint' );
var remarkPlugin = require( 'remark-lint-definition-case' );
var isObject = require( '@stdlib/assert/is-object' );
var replace = require( '@stdlib/string/replace' );
var findJSDoc = require( '@stdlib/_tools/eslint/utils/find-jsdoc' );


// VARIABLES //

var DOPTS = {
	'sloppy': true,
	'unwrap': true
};
var rule;


// FUNCTIONS //

/**
* Rule to require Markdown definition labels in JSDoc descriptions to be lowercased.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	var source;
	var config;
	var lint;

	config = {
		'plugins': [
			remarkLint,
			[ remarkPlugin, 'error' ]
		]
	};
	lint = remark().use( config ).processSync; // eslint-disable-line node/no-sync
	source = context.getSourceCode();

	return {
		'FunctionExpression:exit': validate,
		'FunctionDeclaration:exit': validate,
		'VariableDeclaration:exit': validate,
		'ExpressionStatement:exit': validate
	};

	/**
	* Lints JSDoc descriptions.
	*
	* @private
	* @param {ASTNode} node - AST node
	*/
	function validate( node ) {
		var jsdoc;
		var vfile;
		var ast;

		jsdoc = findJSDoc( source, node );
		if ( isObject( jsdoc ) ) {
			ast = parseJSDoc( jsdoc.value, DOPTS );
			if ( ast.description ) {
				vfile = lint( ast.description );
				if ( vfile.messages.length ) {
					reportErrors( vfile.messages, jsdoc.loc );
				}
			}
		}
	}

	/**
	* Reports Markdown lint errors.
	*
	* @private
	* @param {ObjectArray} errors - Markdown lint errors
	* @param {Object} location - JSDoc location information
	*/
	function reportErrors( errors, location ) {
		var err;
		var msg;
		var loc;
		var i;

		for ( i = 0; i < errors.length; i++ ) {
			err = errors[ i ];
			msg = err.message;
			loc = locationInfo({
				'startLine': location.start.line + err.location.end.line,
				'startColumn': location.start.column + err.location.start.column + 1,  // Note: we assume that 1 space separates `*` from JSDoc description content (e.g., `* ## Beep`)
				'endLine': location.start.line + err.location.end.line,
				'endColumn': location.start.column + err.location.end.column + 1  // Note: we assume that 1 space separates `*` from JSDoc description content (e.g., `* ## Beep`)
			});
			report( msg, loc, location );
		}
	}

	/**
	* Creates a location object.
	*
	* @private
	* @param {Object} options - function options
	* @returns {Object} location info
	*/
	function locationInfo( options ) {
		return {
			'start': {
				'line': options.startLine,
				'column': options.startColumn
			},
			'end': {
				'line': options.endLine,
				'column': options.endColumn
			}
		};
	}

	/**
	* Reports an error message.
	*
	* @private
	* @param {string} msg - error message
	* @param {Object} errorLocation - error location info
	* @param {Object} location - JSDoc location info
	* @param {ASTNode} node - AST node
	*/
	function report( msg, errorLocation, location ) {
		context.report({
			'node': null,
			'message': msg,
			'loc': errorLocation,
			'fix': fix
		});

		/**
		* Fixes a lint error.
		*
		* @private
		* @param {Object} fixer - ESLint fixer
		* @returns {Object} fix
		*/
		function fix( fixer ) {
			var jsdocRange;
			var lowercased;
			var nodeSource;
			var definition;
			var range;
			var text;

			range = [
				source.getIndexFromLoc( errorLocation.start ),
				source.getIndexFromLoc( errorLocation.end )
			];
			jsdocRange = [
				source.getIndexFromLoc( location.start ),
				source.getIndexFromLoc( location.end )
			];
			definition = source.text.slice( range[ 0 ], range[ 1 ] );
			definition = definition.substring( definition.indexOf( '[' ), definition.indexOf( ']' )+1 );
			lowercased = definition.toLowerCase();

			nodeSource = source.text.slice( jsdocRange[ 0 ], jsdocRange[ 1 ] );
			text = replace( nodeSource, definition, lowercased );
			return fixer.replaceTextRange( jsdocRange, text );
		}
	}
}


// MAIN //

rule = {
	'meta': {
		'docs': {
			'description': 'require Markdown definition labels in JSDoc descriptions to be lowercased'
		},
		'schema': [],
		'fixable': 'code'
	},
	'create': main
};


// EXPORTS //

module.exports = rule;
