/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var invalid = [];
var test;

test = {
	'code': [
		'var isLowercase = require( \'./../lib\' );',
		'',
		'console.log( isLowercase( \'hello\' ) );',
		'// returns true',
		'',
		'console.log( isLowercase( \'\' ) );',
		'// => false'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Only include `// returns` after variable declarations or assignment expressions (use `=>` after `console.log`)',
			'type': null
		}
	]
};
invalid.push( test );

test = {
	'code': [
		'var x = 3;',
		'// returns true',
		'',
		'var y = 2;',
		'// => false'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Use `// returns` after variable declarations or assignment expressions instead of `=>`',
			'type': null
		}
	]
};
invalid.push( test );

test = {
	'code': [
		'var isLowercase = require( \'./../lib\' );',
		'',
		'console.log( isLowercase( \'hello\' ) );',
		'// => true',
		'',
		'console.log( isLowercase( \'\' ) );',
		'// => false',
		'',
		'// => false'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Encountered an orphaned return annotation without a preceding node',
			'type': null
		}
	]
};
invalid.push( test );

test = {
	'code': [
		'function main() {',
		'  var isLowercase = require( \'./../lib\' );',
		'',
		'  console.log( isLowercase( \'hello\' ) );',
		'  // => true',
		'',
		'  console.log( isLowercase( \'\' ) );',
		'  // => false',
		'',
		'  // => false',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Encountered an orphaned return annotation without a preceding node',
			'type': null
		}
	]
};
invalid.push( test );

test = {
	'code': [
		'var isLowercase = require( \'./../lib\' );',
		'',
		'var bool = isLowercase( \'hello\' );',
		'// => true',
		'',
		'bool = isLowercase( \'\' );',
		'// returns false',
		'',
		'bool = isLowercase( \'Hello\' );',
		'// returns false'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Use `// returns` after variable declarations or assignment expressions instead of `=>`',
			'type': null
		}
	]
};
invalid.push( test );

test = {
	'code': [
		'var randn = require( \'./../lib\' );',
		'',
		'var bool = randn( \'hello\' );',
		'// e.g., => 0.5363925252089496',
		'',
		'bool = randn( \'\' );',
		'// e.g., returns 0.8734784783887323'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Use `// returns` after variable declarations or assignment expressions instead of `=>`',
			'type': null
		}
	]
};
invalid.push( test );

test = {
	'code': [
		' var SharedArrayBuffer = require( \'@stdlib/array/shared-buffer\' );',
		'',
		' try {',
		'     var bool = isSharedArrayBuffer( new SharedArrayBuffer( 10 ) );',
		'     // => true',
		' } catch ( err ) {',
		'     console.log( \'Environment does not support SharedArrayBuffers.\' );',
		' }',
		''
	].join( '\n' ),
	'errors': [
		{
			'message': 'Use `// returns` after variable declarations or assignment expressions instead of `=>`',
			'type': null
		}
	]
};
invalid.push( test );


// EXPORTS //

module.exports = invalid;
