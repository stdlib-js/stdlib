/**
* @license Apache-2.0
*
* Copyright (c) 2023 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// VARIABLES //

var invalid;
var test;


// MAIN //

// Create our test cases:
invalid = [];

test = {
	'code': [
		'/**',
		'* Beep boop.',
		'*',
		'*',
		'*/',
		'function beep() {',
		'    console.log( "boop" );',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'JSDoc comments should not have multiple subsequent blank lines',
			'type': null
		}
	],
	'output': [
		'/**',
		'* Beep boop.',
		'*',
		'*/',
		'function beep() {',
		'    console.log( "boop" );',
		'}'
	].join( '\n' )
};
invalid.push( test );

test = {
	'code': [
		'/**',
		'* Squares a number.',
		'* ',
		'* @param {number} x - input number',
		'* @returns {number} x squared',
		'*',
		'*',
		'* @example',
		'* var y = square( 2.0 );',
		'* // returns 4.0',
		'*/',
		'function square( x ) {',
		'  return x*x;',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'JSDoc comments should not have multiple subsequent blank lines',
			'type': null
		}
	],
	'output': [
		'/**',
		'* Squares a number.',
		'* ',
		'* @param {number} x - input number',
		'* @returns {number} x squared',
		'*',
		'* @example',
		'* var y = square( 2.0 );',
		'* // returns 4.0',
		'*/',
		'function square( x ) {',
		'  return x*x;',
		'}'
	].join( '\n' )
};
invalid.push( test );

test = {
	'code': [
		'/**',
		'* Squares a number.',
		'* ',
		'*',
		'* @param {number} x - input number',
		'* @returns {number} x squared',
		'*',
		'*',
		'*',
		'* @example',
		'* var y = square( 2.0 );',
		'* // returns 4.0',
		'*/',
		'function square( x ) {',
		'  return x*x;',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'JSDoc comments should not have multiple subsequent blank lines',
			'type': null
		}
	],
	'output': [
		'/**',
		'* Squares a number.',
		'* ',
		'* @param {number} x - input number',
		'* @returns {number} x squared',
		'*',
		'* @example',
		'* var y = square( 2.0 );',
		'* // returns 4.0',
		'*/',
		'function square( x ) {',
		'  return x*x;',
		'}'
	].join( '\n' )
};
invalid.push( test );

test = {
	'code': [
		'/**',
		'* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).',
		'*',
		'* ## Notes',
		'*',
		'* -   Coefficients should be sorted in ascending degree.',
		'* -   The implementation uses [Horner\'s rule][horners-method] for efficient computation.',
		'*',
		'* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method',
		'*',
		'*',
		'* @private',
		'* @param {number} x - value at which to evaluate the rational function',
		'* @returns {number} evaluated rational function',
		'*/',
		'function evalrational( x ) {',
		'    return x;',
		'}'
	].join( '\r\n' ),
	'errors': [
		{
			'message': 'JSDoc comments should not have multiple subsequent blank lines',
			'type': null
		}
	],
	'output': [
		'/**',
		'* Evaluates a rational function, i.e., the ratio of two polynomials described by the coefficients stored in \\(P\\) and \\(Q\\).',
		'*',
		'* ## Notes',
		'*',
		'* -   Coefficients should be sorted in ascending degree.',
		'* -   The implementation uses [Horner\'s rule][horners-method] for efficient computation.',
		'*',
		'* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method',
		'*',
		'* @private',
		'* @param {number} x - value at which to evaluate the rational function',
		'* @returns {number} evaluated rational function',
		'*/',
		'function evalrational( x ) {',
		'    return x;',
		'}'
	].join( '\r\n' )
};
invalid.push( test );


// EXPORTS //

module.exports = invalid;
