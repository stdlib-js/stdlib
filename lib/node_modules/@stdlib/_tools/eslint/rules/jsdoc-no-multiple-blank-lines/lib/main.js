/**
* @license Apache-2.0
*
* Copyright (c) 2023 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isObject = require( '@stdlib/assert/is-object' );
var findJSDoc = require( '@stdlib/_tools/eslint/utils/find-jsdoc' );


// VARIABLES //

var RE_MULTIPLE_BLANK_LINES = /(\s*\*[ \t]*\r?\n\s*\*[ \t]*)(\r?\n\s*(?:\*|$))+/g;
var rule;


// FUNCTIONS //

/**
* Rule for validating that JSDoc comments do not have multiple subsequent blank lines.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	var source = context.getSourceCode();

	/**
	* Reports the error message.
	*
	* @private
	* @param {ASTNode} node - offending node
	* @param {string} msg - error message
	*/
	function report( node, msg ) {
		context.report({
			'node': node,
			'message': msg,
			'fix': fix
		});

		/**
		* Fixes the lint error.
		*
		* @private
		* @param {Function} fixer - ESLint fixer
		* @returns {Object} fix
		*/
		function fix( fixer ) {
			var str = source.getText( node );
			str = str.replace( RE_MULTIPLE_BLANK_LINES, '$1' );
			return fixer.replaceText( node, str );
		}
	}

	/**
	* Checks whether JSDoc comments do not have multiple subsequent blank lines.
	*
	* @private
	* @param {ASTNode} node - node to examine
	*/
	function validate( node ) {
		var jsdoc;
		var msg;

		jsdoc = findJSDoc( source, node );
		if ( isObject( jsdoc ) ) {
			if ( RE_MULTIPLE_BLANK_LINES.test( jsdoc.value ) ) {
				msg = 'JSDoc comments should not have multiple subsequent blank lines';
				report( jsdoc, msg );
			}
		}
	}
	return {
		'FunctionExpression:exit': validate,
		'FunctionDeclaration:exit': validate,
		'VariableDeclaration:exit': validate,
		'ExpressionStatement:exit': validate
	};
}


// MAIN //

rule = {
	'meta': {
		'docs': {
			'description': 'prevent multiple subsequent blank lines in JSDoc comments'
		},
		'schema': [],
		'fixable': 'whitespace'
	},
	'create': main
};


// EXPORTS //

module.exports = rule;
