/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// VARIABLES //

var rule;


// FUNCTIONS //

/**
* Rule for validating that ternary conditions are wrapped with parentheses.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	var source = context.getSourceCode();

	/**
	* Reports the error message.
	*
	* @private
	* @param {ASTNode} node - node to report
	*/
	function report( node ) {
		context.report({
			'node': node,
			'message': 'parentheses required around ternary conditions',
			'fix': fix
		});

		/**
		* Fixes the lint error.
		*
		* @private
		* @param {Function} fixer - ESLint fixer
		* @returns {(Object|null)} fix or null
		*/
		function fix( fixer ) {
			var start;
			var end;
			var str;

			start = node.range[ 0 ];
			end = node.range[ 1 ];
			str = source.text.slice( start, end );
			str = '( ' + str + ' )';
			return fixer.replaceTextRange( [ start, end ], str );
		}
	}

	/**
	* Checks that a ternary condition is parenthesized.
	*
	* @private
	* @param {ASTNode} node - node to examine
	*/
	function validate( node ) {
		var before;
		var after;
		var test;

		test = node.test;
		if ( test ) {
			before = source.getTokenBefore( test );
			after = source.getTokenAfter( test );
			if ( before.value !== '(' || after.value !== ')' ) {
				report( test );
			}
		}
	}

	return {
		'ConditionalExpression': validate
	};
}


// MAIN //

rule = {
	'meta': {
		'docs': {
			'description': 'require parentheses around ternary conditions'
		},
		'schema': [],
		'fixable': 'code'
	},
	'create': main
};


// EXPORTS //

module.exports = rule;
