/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var invalid = [];
var test;

test = {
	'code': [
		'var bool = Math.random() > 0.5 ? 1 : 0;'
	].join( '\n' ),
	'errors': [
		{
			'message': 'parentheses required around ternary conditions',
			'type': 'BinaryExpression'
		}
	],
	'output': [
		'var bool = ( Math.random() > 0.5 ) ? 1 : 0;'
	].join( '\n' )
};
invalid.push( test );

test = {
	'code': [
		'var count = Math.random() > 0.5 ? ( Math.random() > 0.5 ? 2 : 1 ) : 0;'
	].join( '\n' ),
	'errors': [
		{
			'message': 'parentheses required around ternary conditions',
			'type': 'BinaryExpression'
		},
		{
			'message': 'parentheses required around ternary conditions',
			'type': 'BinaryExpression'
		}
	],
	'output': [
		'var count = ( Math.random() > 0.5 ) ? ( ( Math.random() > 0.5 ) ? 2 : 1 ) : 0;'
	].join( '\n' )
};
invalid.push( test );

test = {
	'code': [
		'var x = 3;',
		'var out = isInteger( x ) ? 1 : 0;'
	].join( '\n' ),
	'errors': [
		{
			'message': 'parentheses required around ternary conditions',
			'type': 'CallExpression'
		}
	],
	'output': [
		'var x = 3;',
		'var out = ( isInteger( x ) ) ? 1 : 0;'
	].join( '\n' )
};
invalid.push( test );

test = {
	'code': [
		'var bool = true;',
		'var out = bool ? 1 : 0;'
	].join( '\n' ),
	'errors': [
		{
			'message': 'parentheses required around ternary conditions',
			'type': 'Identifier'
		}
	],
	'output': [
		'var bool = true;',
		'var out = ( bool ) ? 1 : 0;'
	].join( '\n' )
};
invalid.push( test );


// EXPORTS //

module.exports = invalid;
