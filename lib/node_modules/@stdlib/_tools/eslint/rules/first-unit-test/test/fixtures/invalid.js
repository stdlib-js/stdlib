/**
* @license Apache-2.0
*
* Copyright (c) 2023 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var invalid = [];
var test;

test = {
	'code': [
		'// MODULES //',
		'',
		'var tape = require( \'tape\' );',
		'var noop = require( \'./../lib\' );',
		'',
		'',
		'// TESTS //',
		'',
		'tape( \'main export is a function\', function test( t ) {',
		'	t.strictEqual( typeof noop, \'function\', \'main export is a function\' );',
		'	t.end();',
		'});'
	].join( '\n' ),
	'errors': [
		{
			'message': 'The first test in a test file should start with a call to `t.ok( true, __filename );`',
			'type': null
		}
	],
	'output': [
		'// MODULES //',
		'',
		'var tape = require( \'tape\' );',
		'var noop = require( \'./../lib\' );',
		'',
		'',
		'// TESTS //',
		'',
		'tape( \'main export is a function\', function test( t ) {',
		'	t.ok( true, __filename );',
		'	t.strictEqual( typeof noop, \'function\', \'main export is a function\' );',
		'	t.end();',
		'});'
	].join( '\n' ),
	'filename': 'test.main.js'
};
invalid.push( test );

test = {
	'code': [
		'// MODULES //',
		'',
		'var tape = require( \'tape\' );',
		'var capitalize = require( \'./../lib\' );',
		'',
		'',
		'// TESTS //',
		'',
		'tape( \'the function throws an error if not provided a string\', function test( t ) {',
		'	var values;',
		'	var i;',
		'',
		'	values = [',
		'		5,',
		'		null,',
		'		true,',
		'		void 0,',
		'		NaN,',
		'		[],',
		'		{},',
		'		function noop() {}',
		'	];',
		'',
		'	for ( i = 0; i < values.length; i++ ) {',
		'		t.throws( badValue( values[i] ), TypeError, \'throws an error when provided \'+values[i] );',
		'	}',
		'	t.end();',
		'',
		'	function badValue( value ) {',
		'		return function badValue() {',
		'			capitalize( value );',
		'		};',
		'	}',
		'});'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Each test file should start with a test for the main export, e.g., tape( \'main export is a function\', function test( t ) { ... } );',
			'type': null
		}
	],
	'filename': 'test.main.js'
};
invalid.push( test );

test = {
	'code': [
		'// MODULES //',
		'',
		'var resolve = require( \'path\' ).resolve;',
		'var exec = require( \'child_process\' ).exec;',
		'var tape = require( \'tape\' );',
		'var IS_BROWSER = require( \'@stdlib/assert/is-browser\' );',
		'var IS_WINDOWS = require( \'@stdlib/assert/is-windows\' );',
		'var replace = require( \'@stdlib/string/replace\' );',
		'var readFileSync = require( \'@stdlib/fs/read-file\' ).sync;',
		'var EXEC_PATH = require( \'@stdlib/process/exec-path\' );',
		'',
		'',
		'// VARIABLES //',
		'',
		'var fpath = resolve( __dirname, \',\', \'bin\', \'cli\' );',
		'var opts = {',
		'	\'skip\': IS_BROWSER || IS_WINDOWS',
		'};',
		'',
		'',
		'// FIXTURES //',
		'',
		'var PKG_VERSION = require( \'./../package.json\' ).version;',
		'',
		'',
		'// TESTS //',
		'',
		'tape( \'when invoked with a `--help` flag, the command-line interface prints the help text to `stderr`\', opts, function test( t ) {',
		'	var expected;',
		'	var cmd;',
		'',
		'	expected = readFileSync( resolve( __dirname, \',\', \'docs\', \'usage.txt\' ), {',
		'		\'encoding\': \'utf8\'',
		'	});',
		'	cmd = [',
		'		EXEC_PATH,',
		'		fpath,',
		'		\'--help\'',
		'	];',
		'',
		'	exec( cmd.join( \' \' ), done );',
		'',
		'	function done( error, stdout, stderr ) {',
		'		if ( error ) {',
		'			t.fail( error.message );',
		'		} else {',
		'			t.strictEqual( stdout.toString(), \'\', \'does not print to `stdout`\' );',
		'			t.strictEqual( stderr.toString(), expected+\'\\n\', \'expected value\' );',
		'		}',
		'		t.end();',
		'	}',
		'});'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Each CLI test file should start with a test of the form `tape( \'command-line interface\', function test( t ) { ... } );`',
			'type': null
		}
	],
	'filename': 'test.cli.js'
};
invalid.push( test );

test = {
	'code': [
		'// MODULES //',
		'',
		'var resolve = require( \'path\' ).resolve;',
		'var exec = require( \'child_process\' ).exec;',
		'var tape = require( \'tape\' );',
		'var IS_BROWSER = require( \'@stdlib/assert/is-browser\' );',
		'var IS_WINDOWS = require( \'@stdlib/assert/is-windows\' );',
		'var replace = require( \'@stdlib/string/replace\' );',
		'var readFileSync = require( \'@stdlib/fs/read-file\' ).sync;',
		'var EXEC_PATH = require( \'@stdlib/process/exec-path\' );',
		'',
		'',
		'// VARIABLES //',
		'',
		'var fpath = resolve( __dirname, \',\', \'bin\', \'cli\' );',
		'var opts = {',
		'	\'skip\': IS_BROWSER || IS_WINDOWS',
		'};',
		'',
		'',
		'// FIXTURES //',
		'',
		'var PKG_VERSION = require( \'./../package.json\' ).version;',
		'',
		'',
		'// TESTS //',
		'',
		'tape( \'command-line interface\', function test( t ) {',
		'	t.end();',
		'});'
	].join( '\n' ),
	'filename': 'test.cli.js',
	'errors': [
		{
			'message': 'The first test in a test file should start with a call to `t.ok( true, __filename );`',
			'type': null
		}
	],
	'output': [
		'// MODULES //',
		'',
		'var resolve = require( \'path\' ).resolve;',
		'var exec = require( \'child_process\' ).exec;',
		'var tape = require( \'tape\' );',
		'var IS_BROWSER = require( \'@stdlib/assert/is-browser\' );',
		'var IS_WINDOWS = require( \'@stdlib/assert/is-windows\' );',
		'var replace = require( \'@stdlib/string/replace\' );',
		'var readFileSync = require( \'@stdlib/fs/read-file\' ).sync;',
		'var EXEC_PATH = require( \'@stdlib/process/exec-path\' );',
		'',
		'',
		'// VARIABLES //',
		'',
		'var fpath = resolve( __dirname, \',\', \'bin\', \'cli\' );',
		'var opts = {',
		'	\'skip\': IS_BROWSER || IS_WINDOWS',
		'};',
		'',
		'',
		'// FIXTURES //',
		'',
		'var PKG_VERSION = require( \'./../package.json\' ).version;',
		'',
		'',
		'// TESTS //',
		'',
		'tape( \'command-line interface\', function test( t ) {',
		'	t.ok( true, __filename );',
		'	t.end();',
		'});'
	].join( '\n' )
};
invalid.push( test );


// EXPORTS //

module.exports = invalid;
