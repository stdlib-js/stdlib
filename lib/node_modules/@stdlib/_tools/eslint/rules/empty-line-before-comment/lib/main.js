/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isObject = require( '@stdlib/assert/is-object' );
var isArray = require( '@stdlib/assert/is-array' );


// VARIABLES //

var RETURN_ANNOTATION_REGEXP = /\s*(\* ){0,1}(\/\/|\/\*)* *(e\.g\.,){0,1}(returns|=>|throws)/;
var CASE_STATEMENT = /(case [^:]+|default):/;
var rule;


// FUNCTIONS //

/**
* Rule for validating that comments are preceded by empty lines.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	var source = context.getSourceCode();

	/**
	* Reports the error message.
	*
	* @private
	* @param {Object} loc - lines of code (object with `start` and `end` properties)
	*/
	function report( loc ) {
		context.report({
			'node': null,
			'message': 'Missing empty line before comment',
			'loc': loc,
			'fix': fix
		});

		/**
		* Fixes the lint error by inserting an empty line before the comment.
		*
		* @private
		* @param {Object} fixer - ESLint fixer
		* @returns {Object} fix
		*/
		function fix( fixer ) {
			var range = [
				source.getIndexFromLoc({
					'line': loc.start.line,
					'column': 0
				}),
				source.getIndexFromLoc( loc.end )
			];
			return fixer.insertTextBeforeRange( range, '\n' );
		}
	}

	/**
	* Checks whether comments are preceded by empty lines.
	*
	* @private
	* @param {ASTNode} node - node to examine
	*/
	function validate( node ) {
		var startsLine;
		var prevLine;
		var comments;
		var current;
		var token;
		var line;
		var i;

		comments = source.getCommentsInside( node );
		if ( isArray( comments ) && comments.length > 0 ) {
			for ( i = 0; i < comments.length; i++ ) {
				current = comments[ i ];
				line = current.loc.start.line;
				prevLine = source.lines[ line-2 ];
				token = source.getTokenBefore( current );

				if ( isObject( token ) ) {
					if ( token.loc.start.line === line ) {
						startsLine = false;
					} else {
						startsLine = true;
					}
					if (
						// Flag single-line comments which are not preceded by an empty line:
						prevLine !== '' &&

						// Only flag comments that start a line:
						startsLine &&

						// Don't raise an error when the comment is preceded by the opening curly brace of e.g. an object literal or if-clause:
						token.value !== '{' &&

						// Don't raise an error when the comment is preceded by the opening square bracket of an array literal:
						token.value !== '[' &&

						// Don't raise an error when the comment is after the end of a preceding code block:
						token.value !== '}' &&

						// Don't raise an error when the comment is at the start of the condition of an if-clause:
						token.value !== '(' &&

						// Don't raise an error when the comment is after a case statement:
						!CASE_STATEMENT.test( prevLine ) &&

						// Don't raise an error for return annotations in example code:
						!RETURN_ANNOTATION_REGEXP.test( current.value )
					) {
						report( current.loc );
					}
				}
			}
		}
	}

	return {
		'Program': validate
	};
}


// MAIN //

rule = {
	'meta': {
		'docs': {
			'description': 'enforce empty lines before comments'
		},
		'schema': [],
		'fixable': 'whitespace'
	},
	'create': main
};


// EXPORTS //

module.exports = rule;
