/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isObject = require( '@stdlib/assert/is-object' );
var findJSDoc = require( '@stdlib/_tools/eslint/utils/find-jsdoc' );


// VARIABLES //

var RE_EXAMPLE = /[^*]\n\* @example/g;
var rule;


// FUNCTIONS //

/**
* Rule for validating that JSDoc `@example` tags are preceded by empty lines.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	var source = context.getSourceCode();

	/**
	* Reports the error message.
	*
	* @private
	* @param {ASTNode} node - offending node
	* @param {string} msg - error message
	*/
	function report( node, msg ) {
		context.report({
			'node': node,
			'message': msg
		});
	}

	/**
	* Checks whether JSDoc `@example` tags are preceded by empty lines.
	*
	* @private
	* @param {ASTNode} node - node to examine
	*/
	function validate( node ) {
		var matches;
		var jsdoc;
		var msg;

		jsdoc = findJSDoc( source, node );
		if ( isObject( jsdoc ) ) {
			matches = jsdoc.value.match( RE_EXAMPLE );
			if ( matches ) {
				if ( matches.length > 1 ) {
					msg = 'Missing empty lines before JSDoc @example tags';
				} else {
					msg = 'Missing empty line before JSDoc @example tag';
				}
				report( node, msg );
			}
		}
	}
	return {
		'FunctionExpression:exit': validate,
		'FunctionDeclaration:exit': validate,
		'VariableDeclaration:exit': validate,
		'ExpressionStatement:exit': validate
	};
}


// MAIN //

rule = {
	'meta': {
		'docs': {
			'description': 'enforce empty lines before JSDoc `@example` tags'
		},
		'schema': []
	},
	'create': main
};


// EXPORTS //

module.exports = rule;
