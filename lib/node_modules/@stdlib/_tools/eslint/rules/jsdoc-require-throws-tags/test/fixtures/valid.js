/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var valid = [];
var test;

test = {
	'code': [
		'"use strict";',
		'',
		'// MODULES //',
		'',
		'var lowercase = require( \'@stdlib/string/lowercase\' );',
		'var replace = require( \'@stdlib/string/replace\' );',
		'var isString = require( \'@stdlib/assert/is-string\' ).isPrimitive;',
		'',
		'',
		'// VARIABLES //',
		'',
		'var RE_NON_ALPHANUMERIC = /[^a-z0-9]/g;',
		'',
		'',
		'// FUNCTIONS //',
		'',
		'/**',
		'* Comparator function for sorting characters in ascending order.',
		'*',
		'* @private',
		'* @param {string} a - character',
		'* @param {string} b - character',
		'* @returns {number} comparison value',
		'*/',
		'function ascending( a, b ) {',
		'  if ( a < b ) {',
		'    return -1;',
		'  }',
		'  if ( a === b ) {',
		'    return 0;',
		'  }',
		'  return 1;',
		'}',
		'',
		'',
		'// MAIN //',
		'',
		'/**',
		'* Tests if a value is an anagram.',
		'*',
		'* @param {string} str - comparison string',
		'* @param {*} x - value to test',
		'* @throws {TypeError} first argument must be a string',
		'* @returns {boolean} boolean indicating if a value is an anagram',
		'*',
		'* @example',
		'* var bool = isAnagram( "I am a weakish speller", "William Shakespeare" );',
		'* // returns true',
		'*',
		'* @example',
		'* var bool = isAnagram( "bat", "tabba" );',
		'* // returns false',
		'*/',
		'function isAnagram( str, x ) {',
		'  if ( !isString( str ) ) {',
		'    throw new TypeError( "invalid argument. First argument must be a string. Value: `" + str + "`." );',
		'  }',
		'  if ( !isString( x ) ) {',
		'    return false;',
		'  }',
		'  str = lowercase( str );',
		'  str = replace( str, RE_NON_ALPHANUMERIC, "" );',
		'  x = lowercase( x );',
		'  x = replace( x, RE_NON_ALPHANUMERIC, "" );',
		'  if ( str.length !== x.length ) {',
		'    return false;',
		'  }',
		'  str = str.split( "" )',
		'    .sort( ascending )',
		'    .join( "" );',
		'  x = x.split( "" )',
		'    .sort( ascending )',
		'    .join( "" );',
		'  return ( str === x );',
		'}',
		'',
		'',
		'// EXPORTS //',
		'',
		'module.exports = isAnagram;'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'"use strict"',
		'',
		'/**',
		'* Creates a function which always returns the same value.',
		'*',
		'* @param {*} [value] - value to always return',
		'* @returns {Function} constant function',
		'*',
		'* @example',
		'* var fcn = wrap( 3.14 );',
		'*',
		'* var v = fcn();',
		'* // returns 3.14',
		'*/',
		'function wrap( value ) {',
		'  return constantFunction;',
		'',
		'  /**',
		'  * Constant function.',
		'  *',
		'  * @private',
		'  * @returns {*} constant value',
		'  */',
		'  function constantFunction() {',
		'    return value;',
		'  }',
		'}',
		'',
		'',
		'// EXPORTS //',
		'',
		'module.exports = wrap;'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'"use strict"',
		'',
		'/**',
		'* Creates a function which always returns the same value.',
		'*',
		'* @param {*} [value] - value to always return',
		'* @returns {Function} constant function',
		'*',
		'* @example',
		'* var fcn = wrap( 3.14 );',
		'*',
		'* var v = fcn();',
		'* // returns 3.14',
		'*/',
		'function wrap( value ) {',
		'  return constantFunction;',
		'',
		'  /**',
		'  * Constant function.',
		'  *',
		'  * @private',
		'  * @returns {*} constant value',
		'  */',
		'  function constantFunction() {',
		'    return value;',
		'  }',
		'}',
		'',
		'',
		'// EXPORTS //',
		'',
		'module.exports = {',
		'  "wrap": wrap',
		'};'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Invokes a function once for each element in a collection and updates a collection in-place, iterating from right to left.',
		'*',
		'* @param {Collection} collection - input collection',
		'* @param {Options} [options] - function options',
		'* @param {*} [options.thisArg] - execution context',
		'* @param {PositiveInteger} [options.limit] - maximum number of pending invocations at any one time',
		'* @param {boolean} [options.series=false] - boolean indicating whether to wait for a previous invocation to complete before invoking a provided function for the next element in a collection',
		'* @param {Function} fcn - function to invoke for each element in a collection',
		'* @param {Callback} done - function to invoke upon completion',
		'* @throws {TypeError} first argument must be a collection',
		'* @throws {TypeError} options argument must be an object',
		'* @throws {TypeError} must provide valid options',
		'* @throws {TypeError} second-to-last argument must be a function',
		'* @throws {TypeError} last argument must be a function',
		'* @returns {void}',
		'*/',
		'function inmapRightAsync( collection, options, fcn, done ) {',
		'  if ( arguments.length < 4 ) {',
		'    return factory( options )( collection, fcn );',
		'  }',
		'  factory( options, fcn )( collection, done );',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Returns a function that invokes a provided function with reordered arguments.',
		'*',
		'* @param {Function} fcn - input function',
		'* @param {NonNegativeIntegerArray} indices - argument indices',
		'* @param {*} [thisArg] - function context',
		'* @throws {TypeError} first argument must be a function',
		'* @throws {TypeError} second argument must be an array of nonnegative integers',
		'* @returns {Function} function with reordered arguments',
		'*',
		'* @example',
		'* function foo( a, b, c ) {',
		'*     return [ a, b, c ];',
		'* }',
		'*',
		'* var bar = reorderArguments( foo, [ 2, 0, 1 ] );',
		'*',
		'* var out = bar( 1, 2, 3 );',
		'* // returns [ 3, 1, 2 ]',
		'*/',
		'function reorderArguments( fcn, indices, thisArg ) {',
		'  if ( !isFunction( fcn ) ) {',
		'    throw new TypeError( \'invalid argument. First argument must be a function. Value: `\'+fcn+\'`.\' );',
		'  }',
		'  if ( !isNonNegativeIntegerArray( indices ) ) {',
		'    throw new TypeError( \'invalid argument. Second argument must be an array containing only nonnegative integers. Value: `\'+indices+\'`.\' );',
		'  }',
		'  return reordered;',
		'',
		'  /**',
		'  * Invokes a function with reordered arguments.',
		'  *',
		'  * @private',
		'  * @param {...*} args - arguments',
		'  * @throws {Error} must provide expected number of input arguments',
		'  * @returns {*} return value',
		'  */',
		'  function reordered() {',
		'    var args;',
		'    var len;',
		'    var i;',
		'',
		'    len = arguments.length;',
		'    if ( len !== indices.length ) {',
		'      throw new Error( \'invalid invocation. Unexpected number of input arguments. Expected: \'+indices.length+\'. Actual: \'+len+\'.\' );',
		'    }',
		'    args = new Array( len );',
		'    for ( i = 0; i < len; i++ ) {',
		'      args[ i ] = arguments[ indices[i] ];',
		'    }',
		'    return fcn.apply( thisArg, args );',
		'  }',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Returns a function to pretty print test results.',
		'*',
		'* @private',
		'* @param {Object} results - test results',
		'* @returns {Function} pretty print function',
		'*/',
		'function prettyPrint( results ) {',
		'  return print;',
		'',
		'  /**',
		'  * Pretty-print output of ANOVA.',
		'  *',
		'  * @private',
		'  * @param {Object} [opts] - options object',
		'  * @param {PositiveInteger} [opts.numdigits=4] - number of digits after the decimal point',
		'  * @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision',
		'  * @throws {TypeError} options argument must be an object',
		'  * @throws {TypeError} must provide valid options',
		'  * @returns {string} formatted results',
		'  */',
		'  function print( opts ) {',
		'    var statistic;',
		'    var decision;',
		'    var treatMSS;',
		'    var treatDF;',
		'    var treatSS;',
		'    var errMSS;',
		'    var extra1;',
		'    var extra2;',
		'    var extra3;',
		'    var errDF;',
		'    var errSS;',
		'    var ndgts;',
		'    var dgts;',
		'    var str;',
		'',
		'    dgts = 4;',
		'    decision = true;',
		'    if ( arguments.length > 0 ) {',
		'      if ( !isObject( opts ) ) {',
		'        throw new TypeError( \'invalid argument. First argument must be an options object. Value: `\' + opts + \'`.\' );',
		'      }',
		'      if ( hasOwnProp( opts, \'numdigits\' ) ) {',
		'        if ( !isPositiveInteger( opts.numdigits ) ) {',
		'          throw new TypeError( \'invalid option. numdigits option must be a positive integer. Option: `\' + opts.numdigits + \'`.\' );',
		'        }',
		'        dgts = opts.numdigits;',
		'      }',
		'      if ( hasOwnProp( opts, \'decision\' ) ) {',
		'        if ( !isBoolean( opts.decision ) ) {',
		'          throw new TypeError( \'Decision option must be boolean: `\' + opts.decision + \'`.\' );',
		'        }',
		'        decision = opts.decision;',
		'      }',
		'    }',
		'    ndgts = -dgts;',
		'',
		'    str = \'\';',
		'    str += results.method;',
		'',
		'    // Hypothesis',
		'    str += \'Null Hypothesis: All Means Equal\';',
		'    str += \'Alternate Hypothesis: At Least one Mean not Equal\';',
		'',
		'    treatSS = roundn( results.treatment.ss, ndgts ).toString();',
		'    errSS = roundn( results.error.ss, ndgts ).toString();',
		'    treatMSS = roundn( results.treatment.mss, ndgts ).toString();',
		'    errMSS = roundn( results.error.mss, ndgts ).toString();',
		'    treatDF = results.treatment.df.toString();',
		'    errDF = results.error.df.toString();',
		'    statistic = roundn( results.statistic, ndgts ).toString();',
		'',
		'    extra1 = max( max( treatDF.length, errDF.length ), 2 );',
		'    extra2 = max( max( treatSS.length, errSS.length ), 2 );',
		'    extra3 = max( max( treatMSS.length, errMSS.length ), 3 );',
		'',
		'    // Formatted table',
		'    str += \'              \';',
		'    str += \'df\';',
		'    str += spaces( 1 + extra1 );',
		'    str += \'SS\';',
		'    str += spaces( 2 + extra2 );',
		'    str += \'MSS\';',
		'    str += spaces( extra3 );',
		'    str += \'F Score\';',
		'    str += spaces( max( 7, statistic.length ) - 7 + 2 );',
		'    str += \'P Value\';',
		'',
		'    // Now start adding in values',
		'    str += \'Treatment\';',
		'    str += spaces( 5 );',
		'    str += results.treatment.df;',
		'    str += spaces( 3 + extra1 - treatDF.length );',
		'',
		'    str += treatSS;',
		'    str += spaces( 4 + extra2 - treatSS.length );',
		'    str += treatMSS;',
		'    str += spaces( 3 + extra3 - treatMSS.length );',
		'    str += statistic;',
		'    str += spaces( max( 7, statistic.length ) - statistic.length + 2 );',
		'    str += roundn( results.pValue, ndgts );',
		'',
		'    // Next line',
		'    str += \'Errors\';',
		'    str += \'        \';',
		'    str += results.error.df;',
		'    str += spaces( 3 + extra1 - errDF.length );',
		'    str += errSS;',
		'    str += spaces( 4 + extra2 - errSS.length );',
		'    str += errMSS;',
		'',
		'    if ( decision ) {',
		'      if ( results.rejected ) {',
		'        str += \'Reject Null: \';',
		'        str += roundn( results.pValue, ndgts );',
		'        str += \' <= \';',
		'        str += results.alpha;',
		'      } else {',
		'        str += \'Fail to Reject Null: \';',
		'        str += roundn( results.pValue, ndgts );',
		'        str += \' >= \';',
		'        str += results.alpha;',
		'      }',
		'    }',
		'    return str;',
		'  }',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Beep boop.',
		'*',
		'* @name bar',
		'* @memberof Foo.prototype',
		'* @type {Function}',
		'* @throws {Error} beep',
		'*/',
		'Object.defineProperty( Foo.prototype, \'bar\', {',
		'  \'configurable\': false,',
		'  \'enumerable\': false,',
		'  \'writable\': false,',
		'  \'value\': function bar() {',
		'    throw new Error( \'beep\' );',
		'  }',
		'});'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Beep boop.',
		'*',
		'* @name bar',
		'* @memberof Foo.prototype',
		'* @type {Function}',
		'* @throws {Error} beep',
		'*/',
		'defineProperty( Foo.prototype, \'bar\', {',
		'  \'configurable\': false,',
		'  \'enumerable\': false,',
		'  \'writable\': false,',
		'  \'value\': function bar() {',
		'    throw new Error( \'beep\' );',
		'  }',
		'});'
	].join( '\n' )
};
valid.push( test );


// EXPORTS //

module.exports = valid;
