/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var parseJSDoc = require( 'doctrine' ).parse;
var objectKeys = require( '@stdlib/utils/keys' );
var contains = require( '@stdlib/assert/contains' );
var isObject = require( '@stdlib/assert/is-object' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var findJSDoc = require( '@stdlib/_tools/eslint/utils/find-jsdoc' );
var unique = require( './unique.js' );


// VARIABLES //

var DOPTS = {
	'sloppy': true,
	'unwrap': true,
	'tags': [ 'throws' ]
};
var rule;


// FUNCTIONS //

/**
* Checks whether a certain throw statement appears in the given function.
*
* @private
* @param {Object} stmt - throw statement object
* @param {Object} fcn - function metadata
* @returns {boolean} boolean indicating whether throw statement appears in the given function
*/
function isInFunction( stmt, fcn ) {
	var bound;
	var i;
	if ( stmt.start > fcn.start && stmt.end < fcn.end ) {
		for ( i = 0; i < fcn.functionBoundaries.length; i++ ) {
			bound = fcn.functionBoundaries[ i ];
			if ( stmt.start > bound.start && stmt.end < bound.end ) {
				return false;
			}
		}
		return true;
	}
	return false;
}

/**
* Extracts the start end end points of function declarations inside a given function node.
*
* @private
* @param {ASTNode} node - function node
* @returns {ObjectArray} array of function boundaries with `start` and `end` keys
*/
function extractFunctionBoundaries( node ) {
	var body;
	var elem;
	var out;
	var i;

	body = node.body;
	out = [];
	if ( body.type === 'BlockStatement' ) {
		body = body.body;
		for ( i = 0; i < body.length; i++ ) {
			elem = body[ i ];
			if ( elem.type === 'FunctionDeclaration' ) {
				out.push({
					'start': elem.start,
					'end': elem.end
				});
			}
		}
	}
	return out;
}

/**
* Rule for validating that functions are not missing `@throws` tags.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	var throwStatements;
	var functionHash;
	var hasJSDOC;
	var source;

	source = context.getSourceCode();
	functionHash = {};
	throwStatements = [];
	hasJSDOC = false;

	/**
	* Reports the error message.
	*
	* @private
	* @param {Object} fcn - function metadata
	* @param {string} type - error type
	*/
	function report( fcn, type ) {
		context.report({
			'loc': fcn.loc,
			'message': '`'+fcn.name+'` is missing `@throws {'+type+'}` annotation(s)'
		});
	}

	/**
	* Registers a function.
	*
	* @private
	* @param {ASTNode} node - function node
	*/
	function registerFunction( node ) {
		if (
			node.id &&
			node.id.name &&
			!hasOwnProp( functionHash, node.id.name )
		) {
			functionHash[ node.id.name ] = {
				'name': node.id.name,
				'start': node.start,
				'end': node.end,
				'loc': node.loc,
				'throwAnnotations': extractThrowsAnnotations( node ),
				'functionBoundaries': extractFunctionBoundaries( node )
			};
		}
	}

	/**
	* Extracts `@throws` tags from JSDoc comment corresponding to the given node.
	*
	* @private
	* @param {ASTNode} node - function node
	* @returns {Array} array of error annotation types
	*/
	function extractThrowsAnnotations( node ) {
		var jsdoc;
		var tags;
		var ast;
		var out;
		var i;

		out = [];
		jsdoc = findJSDoc( source, node );
		if ( isObject( jsdoc ) ) {
			hasJSDOC = true;
			ast = parseJSDoc( jsdoc.value, DOPTS );
			tags = ast.tags;
			for ( i = 0; i < tags.length; i++ ) {
				if ( tags[ i ].title === 'throws' ) {
					out.push( tags[ i ].type.name );
				}
			}
		}
		return out;
	}

	/**
	* Finish processing of the current program and report any errors.
	*
	* @private
	* @returns {void}
	*/
	function finish() {
		var keys;
		var stmt;
		var fcn;
		var i;
		var j;

		if ( !hasJSDOC ) {
			return;
		}
		keys = objectKeys( functionHash );
		for ( i = 0; i < keys.length; i++ ) {
			fcn = functionHash[ keys[ i ] ];
			fcn.throwStatements = [];
			for ( j = 0; j < throwStatements.length; j++ ) {
				stmt = throwStatements[ j ];
				if ( isInFunction( stmt, fcn ) ) {
					fcn.throwStatements.push( stmt.type );
				}
			}
			validateFunction( fcn );
		}
	}

	/**
	* Validates the given function and reports any errors.
	*
	* @private
	* @param {Object} fcn - function metadata
	*/
	function validateFunction( fcn ) {
		var annotations;
		var statements;
		var stmt;
		var i;

		if ( fcn.throwStatements.length > 0 ) {
			annotations = unique( fcn.throwAnnotations.sort() );
			statements = unique( fcn.throwStatements.sort() );
			for ( i = 0; i < statements.length; i++ ) {
				stmt = statements[ i ];
				if ( !contains( annotations, stmt ) ) {
					report( fcn, stmt );
				}
			}
		}
	}

	/**
	* Registers throw statements encountered in the program.
	*
	* @private
	* @param {ASTNode} node - ThrowStatement node
	*/
	function registerThrowStatement( node ) {
		var callee;
		var obj;

		callee = node.argument.callee;
		if ( callee && callee.name ) {
			obj = {
				'start': node.start,
				'end': node.end,
				'type': callee.name
			};
			throwStatements.push( obj );
		}
	}

	return {
		'Program:exit': finish,
		':function': registerFunction,
		'ThrowStatement': registerThrowStatement
	};
}


// MAIN //

rule = {
	'meta': {
		'docs': {
			'description': 'enforce that JSDoc comments of functions are not missing @throws tags'
		},
		'schema': []
	},
	'create': main
};


// EXPORTS //

module.exports = rule;
