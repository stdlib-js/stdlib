/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var parseJSDoc = require( 'doctrine' ).parse;
var contains = require( '@stdlib/assert/contains' );


// VARIABLES //

var rule;
var ORDER_COMMENT = 'When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.';
var OPTS_COMPARE = {
	'numeric': true
};
var OPTS = {
	'sloppy': true,
	'unwrap': true
};


// FUNCTIONS //

/**
* Rule for validating that packages in a namespace `index.js` file are listed in alphabetical order.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	var isNamespaceIndex;
	var source;

	source = context.getSourceCode();
	return {
		'Program:exit': validate
	};

	/**
	* Extracts the package path from the `@see` tag.
	*
	* @private
	* @param {Array} tags - array of tags
	* @returns {string} package path
	*/
	function extractPackagePath( tags ) {
		var descr;
		var tag;
		var i;
		if ( tags.length === 0 ) {
			return null;
		}
		for ( i = tags.length - 1; i > 0; i-- ) {
			tag = tags[ i ];
			if ( tag.title === 'see' ) {
				descr = tag.description;
				return descr.substring( 14, descr.length - 1 );
			}
		}
		return null;
	}

	/**
	* Checks whether program is a namespace `index.js` file and if so, if packages are listed in alphabetical order.
	*
	* @private
	*/
	function validate() {
		var comments;
		var comment;
		var prevPkg;
		var ast;
		var pkg;
		var i;
		var j;

		comments = source.getAllComments();
		for ( i = 0; i < comments.length; i++ ) {
			comment = comments[ i ];
			if ( contains( comment.value, ORDER_COMMENT ) ) {
				isNamespaceIndex = true;
				break;
			}
		}
		if ( isNamespaceIndex ) {
			for ( j = i; j < comments.length; j++ ) {
				comment = comments[ j ];
				ast = parseJSDoc( comment.value, OPTS );
				pkg = extractPackagePath( ast.tags );
				if ( pkg && prevPkg ) {
					if ( pkg.localeCompare( prevPkg, 'en', OPTS_COMPARE ) < 0 ) {
						report( prevPkg, pkg, comment.loc );
					} else {
						prevPkg = pkg;
					}
				} else if ( pkg ) {
					prevPkg = pkg;
				}
			}
		}
	}

	/**
	* Reports the error message.
	*
	* @private
	* @param {string} last - name of first package
	* @param {string} current - name of second package
	* @param {Object} loc - lines of code (object with `start` and `end` properties)
	*/
	function report( last, current, loc ) {
		context.report({
			'node': null,
			'message': '"'+current+'" should come before "'+last+'"',
			'loc': loc
		});
	}
}


// MAIN //

rule = {
	'meta': {
		'docs': {
			'description': 'enforce that modules in a namespace `index.js` file are listed in alphabetical order according to module name'
		},
		'schema': []
	},
	'create': main
};


// EXPORTS //

module.exports = rule;
