/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var valid = [];
var test;

test = {
	'code': [
		' var value = [',
		'     {',
		'         \'a\': 1,',
		'         \'b\': true,',
		'         \'c\': [ 1, 2, 3 ]',
		'     }',
		' ];',
		' var out = copy( value );',
		' /* returns',
		'    [',
		'         {',
		'             \'a\': 1,',
		'             \'b\': true,',
		'             \'c\': [ 1, 2, 3 ]',
		'         }',
		'    ]',
		'*/',
		'',
		' var bool = ( value[0].c === out[0].c );',
		' // returns false'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		' var value = [',
		'     {',
		'         \'a\': 1,',
		'         \'b\': true,',
		'         \'c\': [ 1, 2, 3 ]',
		'     }',
		' ];',
		' var out = copy( value );',
		' /* returns',
		'    [',
		'         {',
		'             \'a\': 1,',
		'             \'b\': true,',
		'             \'c\': [ 1, 2, 3 ]',
		'         }',
		'    ]',
		'*/',
		'',
		' var bool = ( value[0].c === out[0].c );',
		' // returns false'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'var target = {',
		'  \'a\': \'beep\'',
		'};',
		'var source = {',
		'  \'b\': {',
		'    \'beep\': \'boop\'',
		'  }',
		'};',
		'',
		'var out = merge( target, source );',
		'// returns { \'a\': \'beep\', \'b\': { \'beep\': \'boop\' } }'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'var target = {',
		'  \'a\': \'beep\'',
		'};',
		'var source = {',
		'  \'b\': {',
		'    \'beep\': \'boop\'',
		'  }',
		'};',
		'',
		'var out = merge( target, source );',
		'// returns {...}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'var target = {',
		'  \'a\': \'beep\'',
		'};',
		'var source = {',
		'  \'b\': {',
		'    \'beep\': \'boop\'',
		'  }',
		'};',
		'',
		'var out = merge( target, source );',
		'// returns { \'a\': \'beep\', \'b\': [ { \'beep\': \'boop\' } ] }'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'var target = {};',
		'var source = {};',
		'',
		'var out = merge( target, source );',
		'// returns {}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'var out;',
		'var x;',
		'var y;',
		'',
		'x = [ 89, 37, 30, 28, 2 ];',
		'y = [ 0.40, 0.20, 0.20, 0.15, 0.05 ];',
		'',
		'// Supplying probabilities...',
		'out = chi2gof( x, y );',
		'/* returns',
		'  {',
		'    \'rejected\': true,',
		'    \'alpha\': 0.05,',
		'    \'pValue\': ~0.0187,',
		'    \'df\': 3,',
		'    \'statistic\': ~9.9901,',
		'    ...',
		'  }',
		'*/'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'var x = [',
		'	4, 4, 7, 7, 8, 9, 10, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14,',
		'	14, 14, 14, 15, 15, 15, 16, 16, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 20,',
		'	20, 20, 20, 20, 22, 23, 24, 24, 24, 24, 25',
		'];',
		'var y = [',
		'	2, 10, 4, 22, 16, 10, 18, 26, 34, 17, 28, 14, 20, 24, 28, 26, 34, 34, 46,',
		'	26, 36, 60, 80, 20, 26, 54, 32, 40, 32, 40, 50, 42, 56, 76, 84, 36, 46, 68,',
		'	32, 48, 52, 56, 64, 66, 54, 70, 92, 93, 120, 85',
		'];',
		'',
		'var out = lowess( x, y, {',
		'	\'f\': 0.2',
		'});',
		'/* returns',
		'	{',
		'		\'x\': [',
		'			4,',
		'			4,',
		'			7,',
		'			...,',
		'			24,',
		'			24,',
		'			25',
		'		],',
		'		\'y\': [',
		'			~6.03,',
		'			~6.03,',
		'			~12.68,',
		'			...,',
		'			~82.575,',
		'			~82.575,',
		'			~93.028',
		'		]',
		'	}',
		'*/'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'tape( \'the function returns analytically incorrect results for certain coefficient and `x` combinations\', function test( t ) {',
		'	var P;',
		'	var Q;',
		'	var v;',
		'',
		'	// 1x^2 + 1e308x^1 + 0x^0',
		'	P = [ 0.0, 1.0e308, 1.0 ];',
		'',
		'	// 0x^2 + 0x^2 + 1x^0',
		'	Q = [ 1.0, 0.0, 0.0 ];',
		'',
		'	// => (-1e308)^2 + (1e308)(-1e308) = +inf - inf => indeterminate => NaN',
		'	v = evalrational( P, Q, -1.0e308 );',
		'	t.notOk( isnan( v ), \'should be NaN\' );',
		'',
		'	t.end();',
		'});'
	].join( '\n' )
};
valid.push( test );


// EXPORTS //

module.exports = valid;
