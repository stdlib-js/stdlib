/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var parseExpressionAt = require( 'acorn' ).parseExpressionAt;
var logger = require( 'debug' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var startsWith = require( '@stdlib/string/starts-with' );
var endsWith = require( '@stdlib/string/ends-with' );
var replace = require( '@stdlib/string/replace' );


// VARIABLES //

var debug = logger( 'eslint-return-annotations-quite-props' );
var RE_ANNOTATION = /^\s*(?:e\.g\.,){0,1} (returns|=>|throws) {0,1}([\s\S]*)/;
var RE_TYPE_IDENTIFIER = /<[A-Z0-9]+>/gi;
var RE_DOTS = /,?\n?\s+\.\.\./g;
var rule;


// FUNCTIONS //

/**
* Checks whether a node for an object expression contains only quoted properties.
*
* @private
* @param {ASTNode} obj - object to examine
* @returns {boolean} boolean indicating whether the object has only keys wrapped in single quotes
*/
function hasQuotedKeys( obj ) {
	var props;
	var elem;
	var key;
	var val;
	var i;
	var j;

	props = obj.properties;
	for ( i = 0; i < props.length; i++ ) {
		key = props[ i ].key;
		val = props[ i ].value;
		if (
			!key.raw ||
			!startsWith( key.raw, '\'' ) ||
			!endsWith( key.raw, '\'' )
		) {
			return false;
		}
		if ( val && val.type === 'ObjectExpression' ) {
			if ( !hasQuotedKeys( val ) ) {
				return false;
			}
		}
		else if ( val && val.type === 'ArrayExpression' ) {
			for ( j = 0; j < val.elements.length; j++ ) {
				elem = val.elements[ j ];
				if ( elem && elem.type === 'ObjectExpression' ) {
					if ( !hasQuotedKeys( elem ) ) {
						return false;
					}
				}
			}
		}
	}
	return true;
}

/**
* Checks whether a comment is a return annotation and, if so, whether any property names in it are quoted using single quotes.
*
* @private
* @param {string} comment - comment to examine
* @returns {(string|null)} error message or null
*/
function checkComment( comment ) {
	var matches;
	var elem;
	var node;
	var ast;
	var i;

	matches = comment.value.match( RE_ANNOTATION );
	if ( matches ) {
		node = matches[ 2 ];
		if ( !isString( node ) ) {
			return null;
		}
		// Replace dots used to skip over array elements:
		node = replace( node, RE_DOTS, '' );

		node = replace( node, '[...]', '[]' );
		node = replace( node, '{...}', '{}' );

		// Replace `~` characters used to indicate rounded values:
		node = replace( node, '~', '' );

		// Replace any type identifiers such as <Float64Array>:
		node = replace( node, RE_TYPE_IDENTIFIER, '' );

		if ( node.length === 0 ) {
			return null;
		}
		try {
			ast = parseExpressionAt( node );
		} catch ( err ) {
			debug( 'Encountered an error during parsing: %s', err.message );
			return null;
		}
		if ( ast && ast.type === 'ArrayExpression' ) {
			for ( i = 0; i < ast.elements.length; i++ ) {
				elem = ast.elements[ i ];
				if ( elem && elem.type === 'ObjectExpression' ) {
					if ( !hasQuotedKeys( elem ) ) {
						return 'Use single quotes around property names';
					}
				}
			}
		}
		if ( ast && ast.type === 'ObjectExpression' ) {
			if ( !hasQuotedKeys( ast ) ) {
				return 'Use single quotes around property names';
			}
		}
	}
	return null;
}

/**
* Rule for validating that property names in return annotations are quoted using single quotes.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	var source = context.getSourceCode();

	/**
	* Reports the error message.
	*
	* @private
	* @param {Object} loc - error location info
	* @param {string} msg - error message
	*/
	function report( loc, msg ) {
		context.report({
			'node': null,
			'message': msg,
			'loc': loc
		});
	}

	/**
	* Checks whether return annotations in the current program contain only quoted property names.
	*
	* @private
	* @param {ASTNode} node - node to examine
	*/
	function validate( node ) {
		var comments;
		var current;
		var msg;
		var i;

		comments = source.getAllComments( node );
		for ( i = 0; i < comments.length; i++ ) {
			current = comments[ i ];
			msg = checkComment( current );
			if ( msg ) {
				report( current.loc, msg );
			}
		}
	}

	return {
		'Program': validate
	};
}


// MAIN //

rule = {
	'meta': {
		'docs': {
			'description': 'enforce that property names in return annotations are quoted using single quotes'
		},
		'schema': []
	},
	'create': main
};


// EXPORTS //

module.exports = rule;
