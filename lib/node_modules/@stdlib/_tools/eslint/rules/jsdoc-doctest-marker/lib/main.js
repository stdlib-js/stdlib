/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var parseJS = require( 'acorn' ).parse;
var walk = require( 'acorn-walk' );
var parseJSDoc = require( 'doctrine' ).parse;
var isObject = require( '@stdlib/assert/is-object' );
var replace = require( '@stdlib/string/replace' );
var findJSDoc = require( '@stdlib/_tools/eslint/utils/find-jsdoc' );


// VARIABLES //

var RE_TRAILING_COMMENT = /; (\/\/|=>)[^\n]*\n/g;
var RE_ANNOTATION = /^\s*(?:\* ){0,1}(?:\/\/|\/\*)* *(?:e\.g\.,){0,1} (returns|=>|throws)/;
var DOPTS = {
	'sloppy': true,
	'unwrap': true,
	'tags': [ 'example' ]
};
var rule;


// FUNCTIONS //

/**
* Checks whether a comment is a return annotation and, if so, whether it follows marker style conventions.
*
* @private
* @param {string} comment - comment to examine
* @param {ASTNode} ast - node to examine
* @param {integer} offset - non-zero if previous line ends with a comment
* @returns {(string|null)} error message or null
*/
function checkComment( comment, ast, offset ) {
	var matches;
	var node;
	var prev;
	var type;

	matches = comment.value.match( RE_ANNOTATION );
	if ( matches ) {
		type = matches[ 1 ];
		offset = 1 + comment.loc.start.column;
		prev = walk.findNodeAt( ast, null, comment.start-offset );
		if ( !prev ) {
			return 'Encountered an orphaned return annotation without a preceding node';
		}
		node = prev.node;
		switch ( type ) {
		case 'returns':
			if (
				node.type !== 'VariableDeclaration' &&
				( node.type !== 'ExpressionStatement' || node.expression.type !== 'AssignmentExpression' )
			) {
				return 'Only include `// returns` after variable declarations or assignment expressions (use `=>` after `console.log`)';
			}
			break;
		case '=>':
			if (
				node.type === 'VariableDeclaration' ||
				( node.type === 'ExpressionStatement' && node.expression === 'AssignmentExpression' )
			) {
				return 'Use `// returns` after variable declarations or assignment expressions instead of `=>`';
			}
			break;
		default:
			break;
		}
	}
	return null;
}

/**
* Rule for validating that return annotations in example code follow marker style conventions.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	var source = context.getSourceCode();

	/**
	* Reports the error message.
	*
	* @private
	* @param {ASTNode} node - node to examine
	* @param {string} msg - error message
	*/
	function report( node, msg ) {
		context.report({
			'node': node,
			'message': msg
		});
	}

	/**
	* Checks whether return annotations in example code follow marker style conventions.
	*
	* @private
	* @param {ASTNode} node - node to examine
	*/
	function validate( node ) {
		var exampleAST;
		var comments;
		var current;
		var prevLoc;
		var offset;
		var jsdoc;
		var descr;
		var prev;
		var tags;
		var ast;
		var msg;
		var tag;
		var i;
		var j;

		jsdoc = findJSDoc( source, node );
		if ( isObject( jsdoc ) ) {
			ast = parseJSDoc( jsdoc.value, DOPTS );
			tags = ast.tags;
			for ( i = 0; i < tags.length; i++ ) {
				tag = tags[ i ];
				comments = [];
				descr = tag.description;

				// Handle special case where example code contains JSDoc comments with escaped ending:
				descr = replace( descr, '\\/', '/' );

				// Replace trailing comments to ensure that they are not mistakenly regarded as return annotations:
				descr = replace( descr, RE_TRAILING_COMMENT, ';\n' );

				try {
					exampleAST = parseJS( descr, {
						'onComment': comments,
						'locations': true,
						'ecmaVersion': 'latest'
					});
					offset = 0;
					if ( comments.length === 0 ) {
						// Move to next example as no comments are present:
						continue;
					}
					current = comments[ 0 ];
					msg = checkComment( current, exampleAST, offset );
					if ( msg ) {
						report( node, msg );
					}
					for ( j = 1; j < comments.length; j++ ) {
						prev = comments[ j-1 ];
						current = comments[ j ];

						// Check whether previous comment sits one line before the current one; if so, adjust offset for finding last node:
						prevLoc = prev.loc;
						if ( current.loc.start.line === prevLoc.end.line + 1 ) {
							offset = prevLoc.end.column - prevLoc.start.column;
							offset += 1;
						}
						msg = checkComment( current, exampleAST, offset );
						if ( msg ) {
							report( node, msg );
						}
					}
				} catch ( err ) {
					report( node, 'Error while parsing code: '+err.message );
				}
			}
		}
	}

	return {
		'FunctionExpression:exit': validate,
		'FunctionDeclaration:exit': validate,
		'VariableDeclaration:exit': validate,
		'ExpressionStatement:exit': validate
	};
}


// MAIN //

rule = {
	'meta': {
		'docs': {
			'description': 'enforce marker style conventions for return annotations in example code'
		},
		'schema': []
	},
	'create': main
};


// EXPORTS //

module.exports = rule;
