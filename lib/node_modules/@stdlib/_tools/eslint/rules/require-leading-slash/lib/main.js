/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// VARIABLES //

var rule;


// FUNCTIONS //

/**
* Rule for validating that relative paths in `require` calls begin with a leading `./`.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	/**
	* Reports the error message.
	*
	* @private
	* @param {ASTNode} node - node to report
	*/
	function report( node ) {
		context.report({
			'node': node,
			'message': 'require() call contains a relative path which does not begin with a leading `./`',
			'fix': fixer
		});

		/**
		* Fixes the lint error.
		*
		* @private
		* @param {Object} fixer - ESLint fixer
		* @returns {Object} fix
		*/
		function fixer( fixer ) {
			var source = context.getSourceCode();
			var value = source.getText( node );
			var start = value.indexOf( '\'' );
			var end = value.lastIndexOf( '\'' );
			var str = value.substring( start+1, end );
			return fixer.replaceText( node, 'require( \'./'+str+'\' )' );
		}
	}

	/**
	* Checks whether require path is an absolute file path.
	*
	* @private
	* @param {ASTNode} node - node to examine
	*/
	function validate( node ) {
		var value;
		if ( node.callee.name === 'require' ) {
			value = node.arguments[ 0 ].value;
			if (
				value &&
				value[ 0 ] === '.' &&
				value[ 1 ] !== '/'
			) {
				report( node );
			}
		}
	}

	return {
		'CallExpression': validate
	};
}


// MAIN //

rule = {
	'meta': {
		'docs': {
			'description': 'disallow `require()` calls of relative paths which do not begin with a leading `./`'
		},
		'fixable': 'code',
		'schema': []
	},
	'create': main
};


// EXPORTS //

module.exports = rule;
