/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var valid = [];
var test;

test = {
	'code': [
		'\'use strict\';',
		'',
		'// MODULES //',
		'',
		'var isFunction = require( \'@stdlib/assert/is-function\' );',
		'var isInteger = require( \'@stdlib/assert/is-integer\' );',
		'var isString = require( \'@stdlib/assert/is-string\' ).isPrimitive;',
		'var isCollection = require( \'@stdlib/assert/is-collection\' );',
		'var hasOwnProp = require( \'@stdlib/assert/has-own-property\' );',
		'var isObject = require( \'@stdlib/assert/is-plain-object\' );',
		'',
		'// MAIN //',
		'',
		'/**',
		'* Finds elements in an array-like object that satisfy a test condition.',
		'*',
		'* @param {(Collection|string)} arr - object from which elements will be tested',
		'* @param {Options} [options] - function options',
		'* @param {integer} [options.k=arr.length] - limits the number of returned elements',
		'* @param {string} [options.returns=\'indices\'] - if `values`, values are returned; if `indices`, indices are returned; if `*`, both indices and values are returned',
		'* @param {Function} clbk - function invoked for each array element. If the return value is truthy, the value is considered to have satisfied the test condition.',
		'* @throws {TypeError} first argument must be an array-like object',
		'* @throws {TypeError} options argument must be an object',
		'* @throws {TypeError} last argument must be a function',
		'* @throws {TypeError} `options.k` must be an integer',
		'* @throws {TypeError} `options.returns` must be a string equal to `values`, `indices` or `*`',
		'* @returns {Array} array of indices, element values, or arrays of index-value pairs',
		'*',
		'* @example',
		'* var data = [ 30, 20, 50, 60, 10 ];',
		'* var vals = find( data, condition );',
		'* // returns [ 0, 2, 3 ]',
		'*',
		'* function condition( val ) {',
		'*     return val > 20;',
		'* }',
		'*',
		'* @example',
		'* var data = [ 30, 20, 50, 60, 10 ];',
		'* var opts = {',
		'*     \'k\': 2,',
		'*     \'returns\': \'values\'',
		'* };',
		'* var vals = find( data, opts, condition );',
		'* // returns [ 30, 50 ]',
		'*',
		'* function condition( val ) {',
		'*     return val > 20;',
		'* }',
		'*',
		'* @example',
		'* var data = [ 30, 20, 50, 60, 10 ];',
		'* var vals = find( data, condition );',
		'* // returns []',
		'*',
		'* function condition( val ) {',
		'*     return val > 1000;',
		'* }',
		'*',
		'* @example',
		'* var data = [ 30, 20, 50, 60, 10 ];',
		'* var opts = {',
		'*     \'k\': -2,',
		'*     \'returns\': \'values\'',
		'* };',
		'* var vals = find( data, opts, condition );',
		'* // returns [ 60, 50 ]',
		'*',
		'* function condition( val ) {',
		'*     return val > 20;',
		'* }',
		'*',
		'* @example',
		'* var data = [ 30, 20, 50, 60, 10 ];',
		'* var opts = {',
		'*     \'k\': -2,',
		'*     \'returns\': \'*\'',
		'* };',
		'* var vals = find( data, opts, condition );',
		'* // returns [ [3, 60], [2, 50] ]',
		'*',
		'* function condition( val ) {',
		'*     return val > 20;',
		'* }',
		'*/',
		'function find( arr, options, clbk ) {',
		'	var returns;',
		'	var count;',
		'	var mode;',
		'	var opts;',
		'	var len;',
		'	var out;',
		'	var ret;',
		'	var cb;',
		'	var i;',
		'	var k;',
		'	var v;',
		'',
		'	mode = 0;',
		'	returns = [ \'values\', \'indices\', \'*\' ];',
		'',
		'	if ( !isCollection( arr ) && !isString( arr ) ) {',
		'		throw new TypeError( \'invalid argument. Must provide an array-like object. Value: `\' + arr + \'`\' );',
		'	}',
		'	len = arr.length;',
		'	if ( arguments.length < 3 ) {',
		'		opts = {};',
		'		cb = options;',
		'	} else {',
		'		opts = options;',
		'		cb = clbk;',
		'	}',
		'	if ( !isFunction( cb ) ) {',
		'		throw new TypeError( \'invalid argument. Callback argument must be a function. Value: `\' + cb + \'`\' );',
		'	}',
		'	if ( !isObject( opts ) ) {',
		'		throw new TypeError( \'invalid argument. Options argument must be an object. Value: `\' + opts + \'`\' );',
		'	}',
		'	if ( hasOwnProp( opts, \'k\' ) ) {',
		'		k = opts.k;',
		'		if ( !isInteger( k ) ) {',
		'			throw new TypeError( \'invalid argument. `k` must be an integer. Value: `\' + k + \'`\' );',
		'		}',
		'	} else {',
		'		k = len;',
		'	}',
		'	if ( hasOwnProp( opts, \'returns\' ) ) {',
		'		ret = opts.returns;',
		'		if ( !isString( ret ) || returns.indexOf( ret ) === -1 ) {',
		'			throw new TypeError( \'invalid argument. `returns` option must be a string and have one of the following values: `values`, `indices`, `all`. Value: `\' + ret + \'`\' );',
		'		}',
		'		if ( ret === \'values\' ) {',
		'			mode = 1;',
		'		} else if ( ret === \'*\' ) {',
		'			mode = 2;',
		'		}',
		'	}',
		'	out = [];',
		'	count = 0;',
		'',
		'	if ( k === 0 ) {',
		'		return out;',
		'	}',
		'	if ( k > 0 ) {',
		'		// Search moving from begin-to-end [0,1,...]:',
		'		for ( i = 0; i < len; i++ ) {',
		'			v = arr[ i ];',
		'			if ( cb( v, i, arr ) ) {',
		'				if ( mode === 2 ) {',
		'					out.push( [ i, v ] );',
		'				} else if ( mode === 1 ) {',
		'					out.push( v );',
		'				} else {',
		'					out.push( i );',
		'				}',
		'				count += 1;',
		'				if ( count === k ) {',
		'					break;',
		'				}',
		'			}',
		'		}',
		'		return out;',
		'	}',
		'	// Search moving from end-to-begin [...,2,1,0]:',
		'	k = -k;',
		'	for ( i = len-1; i >= 0; i-- ) {',
		'		v = arr[ i ];',
		'		if ( cb( v, i, arr ) ) {',
		'			if ( mode === 2 ) {',
		'				out.push( [ i, v ] );',
		'			} else if ( mode === 1 ) {',
		'				out.push( v );',
		'			} else {',
		'				out.push( i );',
		'			}',
		'			count += 1;',
		'			if ( count === k ) {',
		'				break;',
		'			}',
		'		}',
		'	}',
		'	return out;',
		'}',
		'',
		'',
		'// EXPORTS //',
		'',
		'module.exports = find;'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Returns a pseudo-random number on [0,1].',
		'* ',
		'* @returns {number} uniform random number',
		'*',
		'* @example',
		'* var y = rand();',
		'* // e.g., returns 0.5363925252089496',
		'*/',
		'function rand( x ) {',
		'  return Math.random();',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'\'use strict\';',
		'',
		'// MODULES //',
		'',
		'var abs = require( \'@stdlib/math/base/special/fast/abs\' );',
		'',
		'',
		'// MAIN //',
		'',
		'/**',
		'* Returns a function to compute the hypotenuse using the alpha max plus beta min algorithm.',
		'*',
		'* @private',
		'* @param {number} alpha - alpha',
		'* @param {number} beta - beta',
		'* @returns {Function} function to compute the hypotenuse',
		'*',
		'* @example',
		'* var fcn = wrap( 1.0, 0.5 );',
		'* // returns <Function>',
		'*/',
		'function wrap( alpha, beta ) {',
		'	return hypot;',
		'',
		'	/**',
		'	* Computes the hypotenuse using the alpha max plus beta min algorithm.',
		'	*',
		'	* @private',
		'	* @param {number} x - number',
		'	* @param {number} y - number',
		'	* @returns {number} hypotenuse',
		'	*',
		'	* @example',
		'	* var h = hypot( 5.0, 12.0 );',
		'	* // returns <number>',
		'	*/',
		'	function hypot( x, y ) {',
		'		x = abs( x );',
		'		y = abs( y );',
		'		if ( x > y ) {',
		'			return (alpha*x) + (beta*y);',
		'		}',
		'		return (beta*x) + (alpha*y);',
		'	}',
		'}',
		'',
		'',
		'// EXPORTS //',
		'',
		'module.exports = wrap;'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'\'use strict\';',
		'',
		'// MODULES //',
		'',
		'var evil = require( \'@stdlib/utils/eval\' );',
		'',
		'',
		'// MAIN //',
		'',
		'/**',
		'* Tests for native `function*()` support.',
		'*',
		'* @returns {boolean} boolean indicating if an environment has native `function*()` support',
		'*',
		'* @example',
		'* var bool = hasGeneratorSupport();',
		'* // returns <boolean>',
		'*/',
		'function hasGeneratorSupport() {',
		'	var bool;',
		'	try {',
		'		evil( \'"use strict"; (function* () {})\' );',
		'		bool = true;',
		'	} catch ( err ) { // eslint-disable-line no-unused-vars',
		'		bool = false;',
		'	}',
		'	return bool;',
		'}',
		'',
		'',
		'// EXPORTS //',
		'',
		'module.exports = hasGeneratorSupport;'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'\'use strict\';',
		'',
		'// MODULES //',
		'',
		'var asin = require( \'@stdlib/math/base/special/asin\' );',
		'var sqrt = require( \'@stdlib/math/base/special/sqrt\' );',
		'',
		'',
		'// MAIN //',
		'',
		'/**',
		'* Computes the inverse half-value versed sine.',
		'*',
		'* @param {number} x - input value',
		'* @returns {number} inverse half-value versed sine',
		'*',
		'* @example',
		'* var v = ahaversin( 0.0 );',
		'* // returns 0.0',
		'*',
		'* @example',
		'* var v = ahaversin( 1.0 );',
		'* // returns ~3.1416',
		'*',
		'* @example',
		'* var v = ahaversin( 0.5 );',
		'* // returns ~1.5708',
		'*',
		'* @example',
		'* var v = ahaversin( NaN );',
		'* // returns NaN',
		'*/',
		'function ahaversin( x ) {',
		'	return 2.0 * asin( sqrt( x ) );',
		'}',
		'',
		'',
		'// EXPORTS //',
		'',
		'module.exports = ahaversin;'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'\'use strict\';',
		'',
		'// MODULES //',
		'',
		'var isFunction = require( \'@stdlib/assert/is-function\' );',
		'var hasFunctionNameSupport = require( \'@stdlib/assert/has-function-name-support\' );',
		'var RE = require( \'@stdlib/regexp/function-name\' ).REGEXP;',
		'',
		'',
		'// VARIABLES //',
		'',
		'var isFunctionNameSupported = hasFunctionNameSupport();',
		'',
		'',
		'// MAIN //',
		'',
		'/**',
		'* Returns the name of a function.',
		'*',
		'* @param {Function} fcn - input function',
		'* @throws {TypeError} must provide a function',
		'* @returns {string} function name',
		'*',
		'* @example',
		'* var v = functionName( Math.sqrt );',
		'* // returns \'sqrt\'',
		'*',
		'* @example',
		'* var v = functionName( function foo(){} );',
		'* // returns \'foo\'',
		'*',
		'* @example',
		'* var v = functionName( function(){} );',
		'* // returns \'\' || \'anonymous\'',
		'*',
		'* @example',
		'* var v = functionName( String );',
		'* // returns \'String\'',
		'*/',
		'function functionName( fcn ) {',
		'	if ( isFunction( fcn ) === false ) {',
		'		throw new TypeError( \'invalid argument. Must provide a function. Value: `\' + fcn + \'`.\' );',
		'	}',
		'	if ( isFunctionNameSupported ) {',
		'		return fcn.name;',
		'	}',
		'	return RE.exec( fcn.toString() )[ 1 ];',
		'}',
		'',
		'',
		'// EXPORTS //',
		'',
		'module.exports = functionName;'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'\'use strict\';',
		'',
		'// MODULES //',
		'',
		'var rescape = require( \'@stdlib/utils/escape-regexp-string\' );',
		'var isFunction = require( \'@stdlib/assert/is-function\' );',
		'var isString = require( \'@stdlib/assert/is-string\' ).isPrimitive;',
		'var isRegexp = require( \'@stdlib/assert/is-regexp\' );',
		'',
		'',
		'// MAIN //',
		'',
		'/**',
		'* Replace search occurrences with a replacement string.',
		'*',
		'* @param {string} str - input string',
		'* @param {(string|RegExp)} search - search expression',
		'* @param {(string|Function)} newval - replacement value or function',
		'* @throws {TypeError} first argument must be a string',
		'* @throws {TypeError} second argument argument must be a string or regular expression',
		'* @throws {TypeError} third argument must be a string or function',
		'* @returns {string} new string containing replacement(s)',
		'*',
		'* @example',
		'* var str = \'beep\';',
		'* var out = replace( str, \'e\', \'o\' );',
		'* // returns \'boop\'',
		'*',
		'* @example',
		'* var str = \'Hello World\';',
		'* var out = replace( str, /world/i, \'Mr. President\' );',
		'* // returns \'Hello Mr. President\'',
		'*',
		'* @example',
		'* var capitalize = require( \'@stdlib/string/capitalize\' );',
		'*',
		'* var str = \'Oranges and lemons say the bells of St. Clement\\\'s\';',
		'*',
		'* function replacer( match, p1 ) {',
		'*     return capitalize( p1 );',
		'* }',
		'*',
		'* var out = replace( str, /([^\\s]*)/gi, replacer);',
		'* // returns \'Oranges And Lemons Say The Bells Of St. Clement\\\'s\'',
		'*/',
		'function replace( str, search, newval ) {',
		'	if ( !isString( str ) ) {',
		'		throw new TypeError( \'invalid argument. First argument must be a string. Value: `\' + str + \'`.\' );',
		'	}',
		'	if ( isString( search ) ) {',
		'		search = rescape( search );',
		'		search = new RegExp( search, \'g\' );',
		'	}',
		'	else if ( !isRegexp( search ) ) {',
		'		throw new TypeError( \'invalid argument. Second argument must be a string or regular expression. Value: `\' + search + \'`.\' );',
		'	}',
		'	if ( !isString( newval ) && !isFunction( newval ) ) {',
		'		throw new TypeError( \'invalid argument. Third argument must be a string or replacement function. Value: `\' + newval + \'`.\' );',
		'	}',
		'	return str.replace( search, newval );',
		'}',
		'',
		'',
		'// EXPORTS //',
		'',
		'module.exports = replace;'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'\'use strict\';',
		'',
		'// MODULES //',
		'',
		'var isString = require( \'@stdlib/assert/is-string\' ).isPrimitive;',
		'var replace = require( \'@stdlib/string/replace\' );',
		'var RE = /^[\\u0020\\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]*([\\S\\s]*?)[\\u0020\\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]*$/;',
		'',
		'',
		'// MAIN //',
		'',
		'/**',
		'* Trim whitespace characters from beginning and end of a string.',
		'*',
		'* @param {string} str - input string',
		'* @throws {TypeError} must provide a string primitive',
		'* @returns {string} trimmed string',
		'*',
		'* @example',
		'* var out = trim( \'   Whitespace   \' );',
		'* // returns \'Whitespace\'',
		'*',
		'* @example',
		'* var out = trim( \'\\t\\t\\tTabs\\t\\t\\t\' );',
		'* // returns \'Tabs\'',
		'*',
		'* @example',
		'* var out = trim( \'\\n\\n\\nNew Lines\\n\\n\\n\' );',
		'* // returns \'New Lines\'',
		'*/',
		'function trim( str ) {',
		'	if ( !isString( str ) ) {',
		'		throw new TypeError( \'invalid argument. Must provide a string. Value: `\' + str + \'`.\' );',
		'	}',
		'	return replace( str, RE, \'$1\' );',
		'}',
		'',
		'',
		'// EXPORTS //',
		'',
		'module.exports = trim;'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'\'use strict\';',
		'',
		'// MODULES //',
		'',
		'var isString = require( \'@stdlib/assert/is-string\' ).isPrimitive;',
		'var replace = require( \'@stdlib/string/replace\' );',
		'',
		'',
		'// VARIABLES //',
		'',
		'// The following regular expression should suffice to polyfill (most?) all environments.',
		'var RE = /^[\\u0020\\f\\n\\r\\t\\v\\u00a0\\u1680\\u2000-\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff]+/;',
		'',
		'',
		'// MAIN //',
		'',
		'/**',
		'* Trims whitespace characters from the beginning of a string.',
		'*',
		'* @param {string} str - input string',
		'* @throws {TypeError} must provide a string primitive',
		'* @returns {string} trimmed string',
		'*',
		'* @example',
		'* var out = ltrim( \'   Whitespace   \' );',
		'* // returns \'Whitespace   \'',
		'*',
		'* @example',
		'* var out = ltrim( \'\\t\\t\\tTabs\\t\\t\\t\' );',
		'* // returns \'Tabs\\t\\t\\t\'',
		'*',
		'* @example',
		'* var out = ltrim( \'\\n\\n\\nNew Lines\\n\\n\\n\' );',
		'* // returns \'New Lines\\n\\n\\n\'',
		'*/',
		'function ltrim( str ) {',
		'	if ( !isString( str ) ) {',
		'		throw new TypeError( \'invalid argument. Must provide a string. Value: `\' + str + \'`.\' );',
		'	}',
		'	return replace( str, RE, \'\' );',
		'}',
		'',
		'',
		'// EXPORTS //',
		'',
		'module.exports = ltrim;'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'\'use strict\';',
		'',
		'// MODULES //',
		'',
		'var isNonNegativeNumber = require( \'@stdlib/assert/is-nonnegative-number\' ).isPrimitive;',
		'var sqrt = require( \'@stdlib/math/base/special/sqrt\' );',
		'',
		'',
		'// MAIN //',
		'',
		'/**',
		'* Returns an accumulator function which incrementally computes an exponentially weighted standard deviation.',
		'*',
		'* @param {NonNegativeNumber} alpha - smoothing factor',
		'* @throws {TypeError} must provide a nonnegative number',
		'* @throws {RangeError} must be on the interval `[0,1]`',
		'* @returns {Function} accumulator function',
		'*',
		'* @example',
		'* var accumulator = increwstdev( 0.5 );',
		'*',
		'* var s = accumulator();',
		'* // returns null',
		'*',
		'* s = accumulator( 2.0 );',
		'* // returns 0.0',
		'*',
		'* s = accumulator( -5.0 );',
		'* // returns 3.5',
		'*',
		'* s = accumulator();',
		'* // returns 3.5',
		'*/',
		'function increwstdev( alpha ) {',
		'	var incr;',
		'	var s2;',
		'	var s;',
		'	var r;',
		'	var m;',
		'	var c;',
		'	if ( !isNonNegativeNumber( alpha ) ) {',
		'		throw new TypeError( \'invalid argument. Must provide a nonnegative number. Value: `\' + alpha + \'`.\' );',
		'	}',
		'	if ( alpha < 0.0 || alpha > 1.0 ) {',
		'		throw new RangeError( \'invalid argument. Must provide a nonnegative number on the interval [0,1]. Value: `\' + alpha + \'`.\' );',
		'	}',
		'	c = 1.0 - alpha;',
		'	return accumulator;',
		'',
		'	/**',
		'	* If provided a value, the accumulator function returns an updated standard deviation. If not provided a value, the accumulator function returns the current standard deviation.',
		'	*',
		'	* @private',
		'	* @param {number} [x] - new value',
		'	* @returns {(number|null)} standard deviation or null',
		'	*/',
		'	function accumulator( x ) {',
		'		if ( arguments.length === 0 ) {',
		'			return ( s === void 0 ) ? null : s;',
		'		}',
		'		if ( s === void 0 ) {',
		'			m = x;',
		'			s2 = 0.0;',
		'		} else {',
		'			r = x - m;',
		'			incr = alpha * r;',
		'			m += incr;',
		'			s2 = c * ( s2+(r*incr) );',
		'		}',
		'		s = sqrt( s2 );',
		'		return s;',
		'	}',
		'}',
		'',
		'',
		'// EXPORTS //',
		'',
		'module.exports = increwstdev;'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Squares a number.',
		'*',
		'* @param {number} x - input value',
		'* @returns {number} x*x',
		'* @example',
		'* var y = square( 3.0 );',
		'* // returns 9.0',
		'*',
		'* y = square( 2.0 );',
		'* // returns 4.0',
		'*/',
		'function square( x ) {',
		'  return x*x;',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Squares a number.',
		'*',
		'* @param {number} x - input value',
		'* @returns {number} x*x',
		'* @example',
		'* console.log( square( 3.0 ) );',
		'* // => 9.0',
		'*',
		'* console.log( square( 2.0 ) );',
		'* // => 4.0',
		'*/',
		'function square( x ) {',
		'  return x*x;',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'\'use strict\';',
		'',
		'// MODULES //',
		'',
		'var isCollection = require( \'@stdlib/assert/is-collection\' );',
		'var isFunction = require( \'@stdlib/assert/is-function\' );',
		'',
		'',
		'// MAIN //',
		'',
		'/**',
		'* Invokes a function once for each element in a collection and updates the collection in-place.',
		'*',
		'* ## Notes',
		'*',
		'* -   The invoked function\'s return value is cached prior to updating a collection. Before updating the collection, a collection must be inspected to ensure that a collection has not been resized during invocation such that an index no longer has a corresponding element in the collection. Were a return value automatically used to update a collection, an input collection could be converted into a sparse data structure. While some might consider this a feature, here, we take stance that a user should be less clever.',
		'*',
		'*',
		'* @param {Collection} collection - input collection',
		'* @param {Function} fcn - function to invoke',
		'* @param {*} [thisArg] - execution context',
		'* @throws {TypeError} first argument must be a collection',
		'* @throws {TypeError} second argument must be a function',
		'* @returns {Collection} input collection',
		'*',
		'* @example',
		'* function scale( value, index, collection ) {',
		'*     return value * index;',
		'* }',
		'*',
		'* var arr = [ 1, 2, 3, 4 ];',
		'*',
		'* var out = inmap( arr, scale );',
		'* // returns [ 0, 2, 6, 12 ]',
		'*',
		'* var bool = ( out === arr );',
		'* // returns true',
		'*/',
		'function inmap( collection, fcn, thisArg ) {',
		'	var len;',
		'	var v;',
		'	var i;',
		'	if ( !isCollection( collection ) ) {',
		'		throw new TypeError( \'invalid argument. First argument must be a collection. Value: `\'+collection+\'`.\' );',
		'	}',
		'	if ( !isFunction( fcn ) ) {',
		'		throw new TypeError( \'invalid argument. Second argument must be a function. Value: `\'+fcn+\'`.\' );',
		'	}',
		'	len = collection.length;',
		'	for ( i = 0; i < len; i++ ) {',
		'		v = fcn.call( thisArg, collection[ i ], i, collection );',

		'		// Account for dynamically resizing a collection...',
		'		if ( len !== collection.length ) {',
		'			len = collection.length;',
		'		}',
		'		if ( i < len ) {',
		'			collection[ i ] = v;',
		'		}',
		'	}',
		'	return collection;',
		'}',
		'',
		'',
		'// EXPORTS //',
		'',
		'module.exports = inmap;'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'\'use strict\';',
		'',
		'// MODULES //',
		'',
		'var isArray = require( \'@stdlib/assert/is-array\' );',
		'var isTypedArrayLike = require( \'@stdlib/assert/is-typed-array-like\' );',
		'var isInteger = require( \'@stdlib/assert/is-integer\' );',
		'',
		'',
		'// MAIN //',
		'',
		'/**',
		'* Removes and returns the first element of a collection.',
		'*',
		'* @param {Array} arr - collection',
		'* @throws {TypeError} must provide an array',
		'* @returns {Array} updated array and the removed element',
		'*',
		'* @example',
		'* var arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];',
		'*',
		'* var out = shift( arr );',
		'* // returns [ [ 2.0, 3.0, 4.0, 5.0 ], 1.0 ]',
		'*/',
		'function shift( arr ) {',
		'	var v;',
		'	if ( isArray( arr ) ) {',
		'		v = arr.shift();',
		'		return [ arr, v ];',
		'	}',
		'	throw new TypeError( \'invalid argument. Must provide an array. Value: `\'+arr+\'`.\' );',
		'}',
		'',
		'',
		'// EXPORTS //',
		'',
		'module.exports = shift;'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Tests whether an object contains a nested key path.',
		'*',
		'* @param {*} value - value to test',
		'* @param {(string|Array)} path - key path',
		'* @param {Options} [options] - function options',
		'* @param {string} [options.sep=\'.\'] - key path separator',
		'* @throws {TypeError} second argument must be a string or key array',
		'* @throws {TypeError} options argument must be an object',
		'* @throws {TypeError} must provide valid options',
		'* @returns {boolean} boolean indicating whether an object has a nested property',
		'*',
		'* @example',
		'* var obj = { \'a\': { \'b\': { \'c\': \'d\' } } };',
		'* var bool = deepHasOwnProp( obj, \'a.b.c\' );',
		'* // returns true',
		'*',
		'* @example',
		'* var arr = [',
		'*     {',
		'*         \'a\': [',
		'*             {',
		'*                 \'b\': [',
		'*                     { \'c\': \'d\' },',
		'*                     { \'e\': \'f\' }',
		'*                 ]',
		'*             }',
		'*         ]',
		'*     }',
		'* ];',
		'* var bool = deepHasOwnProp( arr, \'0.a.0.b.0.c\' );',
		'* // returns true',
		'*',
		'* @example',
		'* var obj = { \'a\': { \'b\': { \'c\': \'d\' } } };',
		'* var bool = deepHasOwnProp( obj, [ \'a\', \'b\', \'c\' ] );',
		'* // returns true',
		'*',
		'* @example',
		'* var obj = { \'a\': { \'b\': { \'c\': \'d\' } } };',
		'* var bool = deepHasOwnProp( obj, \'a/b/c\', {',
		'*     \'sep\': \'/\'',
		'* });',
		'* // returns true',
		'*/',
		'function deepHasOwnProp() {',
		'	return true',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'// MODULES //',
		'',
		'var gammainc = require( \'@stdlib/math/base/special/gammainc\' );',
		'var isnan = require( \'@stdlib/math/base/assert/is-nan\' );',
		'var floor = require( \'@stdlib/math/base/special/floor\' );',
		'var PINF = require( \'@stdlib/constants/float64/pinf\' );',
		'',
		'',
		'// MAIN //',
		'',
		'/**',
		'* Evaluates the cumulative distribution function (CDF) for a Poisson distribution with mean parameter `lambda` at a value `x`.',
		'*',
		'* @param {number} x - input value',
		'* @param {NonNegativeNumber} lambda - mean parameter',
		'* @returns {Probability} evaluated CDF',
		'*',
		'* @example',
		'* var y = cdf( 2.0, 0.5 );',
		'* // returns ~0.986',
		'*',
		'* @example',
		'* var y = cdf( 2.0, 10.0 );',
		'* // returns ~0.003',
		'*',
		'* @example',
		'* var y = cdf( -1.0, 4.0 );',
		'* // returns 0.0',
		'*',
		'* @example',
		'* var y = cdf( NaN, 1.0 );',
		'* // returns NaN',
		'*',
		'* @example',
		'* var y = cdf( 0.0, NaN );',
		'* // returns NaN',
		'*',
		'* @example',
		'* // Negative mean parameter:',
		'* var y = cdf( 2.0, -1.0 );',
		'* // returns NaN',
		'*/',
		'function cdf( x, lambda ) {',
		'	if ( isnan( x ) || isnan( lambda ) || lambda < 0.0 ) {',
		'		return NaN;',
		'	}',
		'	if ( x < 0.0 ) {',
		'		return 0.0;',
		'	}',
		'	if ( lambda === 0.0 ) {',
		'		return 1.0;',
		'	}',
		'	if ( x === PINF ) {',
		'		return 1.0;',
		'	}',
		'	return gammainc( lambda, floor( x ) + 1.0, true, true );',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* @license Apache-2.0',
		'*',
		'* Copyright (c) 2018 The Stdlib Authors.',
		'*',
		'* Licensed under the Apache License, Version 2.0 (the "License");',
		'* you may not use this file except in compliance with the License.',
		'* You may obtain a copy of the License at',
		'*',
		'*    http://www.apache.org/licenses/LICENSE-2.0',
		'*',
		'* Unless required by applicable law or agreed to in writing, software',
		'* distributed under the License is distributed on an "AS IS" BASIS,',
		'* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.',
		'* See the License for the specific language governing permissions and',
		'* limitations under the License.',
		'*/',
		'',
		'\'use strict\';',
		'',
		'// MODULES //',
		'',
		'var isNumber = require( \'@stdlib/assert/is-number\' ).isPrimitive;',
		'var isNonNegativeInteger = require( \'@stdlib/assert/is-nonnegative-integer\' ).isPrimitive;',
		'var isnan = require( \'@stdlib/math/base/assert/is-nan\' );',
		'',
		'',
		'// MAIN //',
		'',
		'/**',
		'* Generates a linearly spaced numeric array.',
		'*',
		'* @param {number} x1 - first array value',
		'* @param {number} x2 - last array value',
		'* @param {NonNegativeInteger} [len=100] - length of output array',
		'* @throws {TypeError} first argument must be numeric',
		'* @throws {TypeError} second argument must be numeric',
		'* @throws {TypeError} third argument must be a nonnegative integer',
		'* @returns {Array} linearly spaced numeric array',
		'*',
		'* @example',
		'* var arr = linspace( 0, 100, 6 );',
		'* // returns [ 0, 20, 40, 60, 80, 100 ]',
		'*/',
		'function linspace( x1, x2, len ) {',
		'	var arr;',
		'	var end;',
		'	var tmp;',
		'	var d;',
		'	var i;',
		'	if ( !isNumber( x1 ) || isnan( x1 ) ) {',
		'		throw new TypeError( \'invalid argument. Start must be numeric. Value: `\' + x1 + \'`.\' );',
		'	}',
		'	if ( !isNumber( x2 ) || isnan( x2 ) ) {',
		'		throw new TypeError( \'invalid argument. Stop must be numeric. Value: `\' + x2 + \'`.\' );',
		'	}',
		'	if ( arguments.length < 3 ) {',
		'		len = 100;',
		'	} else {',
		'		if ( !isNonNegativeInteger( len ) ) {',
		'			throw new TypeError( \'invalid argument. Length must be a nonnegative integer. Value: `\' + len + \'`.\' );',
		'		}',
		'		if ( len === 0 ) {',
		'			return [];',
		'		}',
		'	}',
		'	// Calculate the increment:',
		'	end = len - 1;',
		'	d = ( x2-x1 ) / end;',
		'',
		'	// Build the output array...',
		'	arr = new Array( len );',
		'	tmp = x1;',
		'	arr[ 0 ] = tmp;',
		'	for ( i = 1; i < end; i++ ) {',
		'		tmp += d;',
		'		arr[ i ] = tmp;',
		'	}',
		'	arr[ end ] = x2;',
		'	return arr;',
		'}',
		'',
		'',
		'// EXPORTS //',
		'',
		'module.exports = linspace;'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'\'use strict\';',
		'',
		'// MODULES //',
		'',
		'var isURI = require( \'@stdlib/assert/is-uri\' );',
		'',
		'',
		'// MAIN //',
		'',
		'/**',
		'* Opens a URL.',
		'*',
		'* @param {string} url - URL to open',
		'* @throws {TypeError} must provide a valid URI',
		'* @returns {Window} `window` object',
		'*',
		'* @example',
		'* var win = openURL( \'https://google.com\' );',
		'*/',
		'function openURL( url ) {',
		'	if ( !isURI( url ) ) {',
		'		throw new TypeError( \'invalid input value. Must provide a valid URI. Value: `\' + url + \'`.\' );',
		'	}',
		'	return window.open( url );',
		'}',
		'',
		'',
		'// EXPORTS //',
		'',
		'module.exports = openURL;'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* @license Apache-2.0',
		'*',
		'* Copyright (c) 2018 The Stdlib Authors.',
		'*',
		'* Licensed under the Apache License, Version 2.0 (the "License");',
		'* you may not use this file except in compliance with the License.',
		'* You may obtain a copy of the License at',
		'*',
		'*    http://www.apache.org/licenses/LICENSE-2.0',
		'*',
		'* Unless required by applicable law or agreed to in writing, software',
		'* distributed under the License is distributed on an "AS IS" BASIS,',
		'* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.',
		'* See the License for the specific language governing permissions and',
		'* limitations under the License.',
		'*/',
		'',
		'\'use strict\';',
		'',
		'// MODULES //',
		'',
		'var copysign = require( \'@stdlib/math/base/special/copysign\' );',
		'var sincos = require( \'@stdlib/math/base/special/sincos\' );',
		'var isnan = require( \'@stdlib/math/base/assert/is-nan\' );',
		'var isInfinite = require( \'@stdlib/math/base/assert/is-infinite\' );',
		'var exp = require( \'@stdlib/math/base/special/exp\' );',
		'var PINF = require( \'@stdlib/constants/float64/pinf\' );',
		'var NINF = require( \'@stdlib/constants/float64/ninf\' );',
		'',
		'',
		'// MAIN //',
		'',
		'/**',
		'* Computes the exponential function of a complex number.',
		'*',
		'* @private',
		'* @param {(Array|TypedArray|Object)} out - output array',
		'* @param {number} re - real component',
		'* @param {number} im - imaginary component',
		'* @returns {(Array|TypedArray|Object)} output array',
		'*',
		'* @example',
		'* var out = [ 0.0, 0.0 ];',
		'*',
		'* var v = cexp( out, 0.0, 1.0 );',
		'* // returns [ ~0.540, ~0.841 ]',
		'*',
		'* var bool = ( v === out );',
		'* // returns true',
		'*/',
		'function cexp( out, re, im ) {',
		'	var tmp;',
		'	var e;',
		'	if ( isnan( re ) ) {',
		'		out[ 0 ] = NaN;',
		'		out[ 1 ] = ( im === 0.0 ) ? im : re;',
		'	} else if ( isInfinite( im ) ) {',
		'		if ( re === PINF ) {',
		'			out[ 0 ] = -re;',
		'			out[ 1 ] = NaN;',
		'		} else if ( re === NINF ) {',
		'			out[ 0 ] = -0.0;',
		'			out[ 1 ] = copysign( 0.0, im );',
		'		} else {',
		'			out[ 0 ] = NaN;',
		'			out[ 1 ] = NaN;',
		'		}',
		'	} else {',
		'		e = exp( re );',
		'		if ( im === 0.0 ) {',
		'			out[ 0 ] = e;',
		'			out[ 1 ] = im;',
		'		} else {',
		'			sincos( out, im );',
		'			tmp = out[ 0 ];',
		'			out[ 0 ] = out[ 1 ] * e;',
		'			out[ 1 ] = tmp * e;',
		'		}',
		'	}',
		'	return out;',
		'}',
		'',
		'',
		'// EXPORTS //',
		'',
		'module.exports = cexp;'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Returns a high-resolution time.',
		'*',
		'* ## Notes',
		'*',
		'* -   Output format: `[seconds, nanoseconds]`.',
		'*',
		'*',
		'* @returns {NumberArray} high resolution time',
		'*',
		'* @example',
		'* var t = tic();',
		'* // returns [<number>,<number>]',
		'*/',
		'function tic() {',
		'	return process.hrtime();',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'\'use strict\';',
		'',
		'// MODULES //',
		'',
		'var incrcount = require( \'@stdlib/stats/incr/count\' );',
		'var incrmax = require( \'@stdlib/stats/incr/max\' );',
		'var incrmin = require( \'@stdlib/stats/incr/min\' );',
		'var incrrange = require( \'@stdlib/stats/incr/range\' );',
		'var incrmidrange = require( \'@stdlib/stats/incr/midrange\' );',
		'var incrsum = require( \'@stdlib/stats/incr/sum\' );',
		'var incrmean = require( \'@stdlib/stats/incr/mean\' );',
		'var incrvariance = require( \'@stdlib/stats/incr/variance\' );',
		'var incrstdev = require( \'@stdlib/stats/incr/stdev\' );',
		'var incrskewness = require( \'@stdlib/stats/incr/skewness\' );',
		'var incrkurtosis = require( \'@stdlib/stats/incr/kurtosis\' );',
		'',
		'',
		'// MAIN //',
		'',
		'/**',
		'* Returns an accumulator function which incrementally computes a statistical summary.',
		'*',
		'* @returns {Function} accumulator function',
		'*',
		'* @example',
		'* var accumulator = incrsummary();',
		'*',
		'* var summary = accumulator();',
		'* // returns {}',
		'*',
		'* summary = accumulator( 2.0 );',
		'* // returns {...}',
		'*',
		'* summary = accumulator( -5.0 );',
		'* // returns {...}',
		'*',
		'* summary = accumulator();',
		'* // returns {...}',
		'*/',
		'function incrsummary() {',
		'	var midrange;',
		'	var variance;',
		'	var skewness;',
		'	var kurtosis;',
		'	var summary;',
		'	var count;',
		'	var range;',
		'	var stdev;',
		'	var mean;',
		'	var max;',
		'	var min;',
		'	var sum;',
		'',
		'	// Incremental count:',
		'	count = incrcount();',
		'',
		'	// Sum:',
		'	sum = incrsum();',
		'',
		'	// Sample mean:',
		'	mean = incrmean();',
		'',
		'	// Unbiased sample variance:',
		'	variance = incrvariance();',
		'',
		'	// Corrected sample standard deviation:',
		'	stdev = incrstdev();',
		'',
		'	// Corrected sample skewness:',
		'	skewness = incrskewness();',
		'',
		'	// Corrected excess sample kurtosis:',
		'	kurtosis = incrkurtosis();',
		'',
		'	// Maximum value:',
		'	max = incrmax();',
		'',
		'	// Minimum value:',
		'	min = incrmin();',
		'',
		'	// Range (i.e., max-min):',
		'	range = incrrange();',
		'',
		'	// Mid-range:',
		'	midrange = incrmidrange();',
		'',
		'	// Initial an object for tracking state:',
		'	summary = {};',
		'',
		'	return accumulator;',
		'',
		'	/**',
		'	* If provided a value, the accumulator function returns an updated summary. If not provided a value, the accumulator function returns the current summary.',
		'	*',
		'	* @private',
		'	* @param {number} [x] - new value',
		'	* @returns {Object} summary',
		'	*/',
		'	function accumulator( x ) {',
		'		if ( arguments.length === 0 ) {',
		'			return summary;',
		'		}',
		'		summary.count = count( x );',
		'		summary.max = max( x );',
		'		summary.min = min( x );',
		'		summary.range = range( x );',
		'		summary.midrange = midrange( x );',
		'		summary.sum = sum( x );',
		'		summary.mean = mean( x );',
		'		summary.variance = variance( x );',
		'		summary.stdev = stdev( x );',
		'		summary.skewness = skewness( x );',
		'		summary.kurtosis = kurtosis( x );',
		'		return summary;',
		'	}',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Returns Anscombe\'s quartet.',
		'*',
		'* @returns {ArrayArray} Anscombe\'s quartet',
		'*',
		'* @example',
		'* var d = data();',
		'* // returns [[[10,8.04],...],[[10,9.14],...],[[10,7.46],...],[[8,6.58],...]]',
		'*/',
		'function data() {',
		'	return [[[10,8.04],[8,6.95],[13,7.58],[9,8.81],[11,8.33],[14,9.96],[6,7.24],[4,4.26],[12,10.84],[7,4.82],[5,5.68]],[[10,9.14],[8,8.14],[13,8.74],[9,8.77],[11,9.26],[14,8.1],[6,6.13],[4,3.1],[12,9.13],[7,7.26],[5,4.74]],[[10,7.46],[8,6.77],[13,12.74],[9,7.11],[11,7.81],[14,8.84],[6,6.08],[4,5.39],[12,8.15],[7,6.42],[5,5.73]],[[8,6.58],[8,5.76],[8,7.71],[8,8.84],[8,8.47],[8,7.04],[8,5.25],[19,12.5],[8,5.56],[8,7.91],[8,6.89]]];',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'\'use strict\';',
		'',
		'// MODULES //',
		'',
		'var clampIndex = require( \'@stdlib/ndarray/base/clamp-index\' );',
		'var wrapIndex = require( \'@stdlib/ndarray/base/wrap-index\' );',
		'',
		'',
		'// MAIN //',
		'',
		'/**',
		'* Returns an index given an index mode.',
		'*',
		'* @param {integer} idx - index',
		'* @param {NonNegativeInteger} max - maximum index',
		'* @param {string} mode - specifies how to handle an index outside the interval `[0,max]`',
		'* @throws {RangeError} index out-of-bounds',
		'* @returns {integer} index',
		'*',
		'* @example',
		'* var idx = ind( 2, 9, \'clamp\' );',
		'* // returns 2',
		'*',
		'* idx = ind( 10, 9, \'clamp\' );',
		'* // returns 9',
		'*',
		'* idx = ind( -1, 9, \'clamp\' );',
		'* // returns 0',
		'*',
		'* @example',
		'* var idx = ind( 2, 9, \'wrap\' );',
		'* // returns 2',
		'*',
		'* idx = ind( 10, 9, \'wrap\' );',
		'* // returns 0',
		'*',
		'* idx = ind( -1, 9, \'wrap\' );',
		'* // returns 9',
		'*',
		'* @example',
		'* var idx = ind( 2, 9, \'throw\' );',
		'* // returns 2',
		'*',
		'* idx = ind( 10, 9, \'throw\' );',
		'* // throws <RangeError>',
		'*/',
		'function ind( idx, max, mode ) {',
		'  if ( mode === \'clamp\' ) {',
		'    return clampIndex( idx, max );',
		'  }',
		'  if ( mode === \'wrap\' ) {',
		'    return wrapIndex( idx, max );',
		'  }',
		'  if ( idx < 0 || idx > max ) {',
		'    throw new RangeError( \'invalid argument. Index must be on the interval: [0,\' + max + \']. Value: `\' + idx + \'`.\' );',
		'  }',
		'  return idx;',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Converts a string to lowercase.',
		'*',
		'* @param {string} str - string to convert',
		'* @throws {TypeError} must provide a string',
		'* @returns {string} lowercase string',
		'*',
		'* @example',
		'* var str = lowercase( \'bEEp\' );',
		'* // returns \'beep\'',
		'*',
		'* @example',
		'* var str = lowercase();',
		'* // throws <TypeError>',
		'*/',
		'function lowercase( str ) {',
		'  if ( typeof str !== \'string\' ) {',
		'    throw new TypeError( \'invalid argument. Must provide a string. Value: `\'+str+\'`.\' );',
		'  }',
		'  return str.toLowerCase();',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Pushes elements to an array.',
		'*',
		'* @param {Array} arr - input array',
		'* @param {...any} elements - element(s) to append',
		'* @returns {integer} array length',
		'*',
		'* @example',
		'* var arr = [];',
		'* push( arr, 3 );',
		'* // arr => [ 3 ]',
		'*',
		'* @example',
		'* var arr = [];',
		'* push( arr, 6 );',
		'* // arr => [ 6 ]',
		'*/',
		'function push( arr ) {',
		'  var items;',
		'  var i;',
		'  items = new Array( arguments.length-1 );',
		'  for ( i = 0; i < arguments.length-1; i++ ) {',
		'    items[ i ] = arguments[ i+1 ];',
		'  }',
		'  return Array.prototype.push.apply( arr, items );',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'var addon = require( \'./addon.node\' );',
		'',
		'',
		'// MAIN //',
		'',
		'/**',
		'* Computes the cumulative maximum of double-precision floating-point strided array elements.',
		'*',
		'* @param {PositiveInteger} N - number of indexed elements',
		'* @param {Float64Array} x - input array',
		'* @param {integer} strideX - `x` stride length',
		'* @param {Float64Array} y - output array',
		'* @param {integer} strideY - `y` stride length',
		'* @returns {Float64Array} output array',
		'*',
		'* @example',
		'* var Float64Array = require( \'@stdlib/array/float64\' );',
		'*',
		'* var x = new Float64Array( [ 1.0, -2.0, 2.0 ] );',
		'* var y = new Float64Array( x.length );',
		'* var N = x.length;',
		'*',
		'* var v = dcumax( N, x, 1, y, 1 );',
		'* // returns <Float64Array>[ 1.0, 1.0, 2.0 ]',
		'*/',
		'function dcumax( N, x, strideX, y, strideY ) {',
		'	addon( N, x, strideX, y, strideY );',
		'	return y;',
		'}'
	].join( '\n' )
};
valid.push( test );


// EXPORTS //

module.exports = valid;
