/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var path = require( 'path' );
var resolve = require( 'resolve' ).sync;
var startsWith = require( '@stdlib/string/starts-with' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isString = require( '@stdlib/assert/is-string' );
var contains = require( '@stdlib/assert/contains' );
var dirname = require( '@stdlib/utils/dirname' );
var DELIMITER = require( '@stdlib/constants/path/delimiter' );
var ENV = require( '@stdlib/process/env' );


// VARIABLES //

var EXTENSIONS_WHITELIST = [
	'.js',
	'.json',
	'.node'
];
var rule;


// FUNCTIONS //

/**
* Synchronously attempts to resolve a `require` path.
*
* @private
* @param {string} path - path to resolve
* @param {string} basedir - directory from which to begin resolving
* @returns {(Object|Error)} resolved path or an error
*/
function tryResolve( path, basedir ) {
	try {
		return resolve( path, {
			'paths': ( ENV.NODE_PATH ) ? ENV.NODE_PATH.split( DELIMITER ) : [],
			'basedir': basedir
		});
	} catch ( err ) {
		return err;
	}
}

/**
* Rule for enforcing that `require` statements of files end with a whitelisted file extension.
*
* @param {Object} context - ESLint context
* @returns {Object} validators
*/
function main( context ) {
	var whitelist;
	var options;

	options = context.options[ 0 ];
	if ( hasOwnProp( options, 'extensionsWhitelist' ) ) {
		whitelist = options.extensionsWhitelist;
	} else {
		whitelist = EXTENSIONS_WHITELIST;
	}

	/**
	* Reports the error message.
	*
	* @private
	* @param {ASTNode} node - node to report
	* @param {string} msg - message to report
	*/
	function report( node, msg ) {
		context.report({
			'node': node,
			'message': msg
		});
	}

	/**
	* Checks whether a `require` statement of a file ends with a whitelisted file extension.
	*
	* @private
	* @param {ASTNode} node - node to examine
	* @returns {void}
	*/
	function validate( node ) {
		var requirePath;
		var filename;
		var resolved;
		var parts;
		var dir;
		var msg;

		if ( node.callee.name === 'require' ) {
			requirePath = node.arguments[ 0 ].value;
			if ( isString( requirePath ) ) {
				filename = context.getFilename();
				dir = dirname( filename );
				if ( startsWith( requirePath, '.' ) ) {
					requirePath = path.resolve( dir, requirePath );
				}
				resolved = tryResolve( requirePath, dir );
				parts = path.parse( requirePath );

				// If the path cannot be resolved, we decide whether to ignore the error or whether to report it...
				if ( resolved instanceof Error ) {
					// Ignore error for Node.js native add-ons since they may not have been built yet...
					if ( parts.ext === '.node' ) {
						return;
					}
					// Ignore error for internal requires in fenced code blocks of Markdown files as the package's implementation may not yet be available...
					if ( filename === '<text>' && startsWith( requirePath, '@stdlib' ) ) {
						return;
					}
					return report( node, 'cannot resolve module: "'+requirePath+'"' );
				}
				resolved = path.parse( resolved );
				if ( resolved.name === parts.name ) {
					// Path denotes a file or internal module...
					if ( parts.ext && !contains( whitelist, parts.ext ) ) {
						msg = 'require statement of file does not end with one of the whitelisted file extensions (' + whitelist.join( ',' ) + '). Value: '+ requirePath;
						report( node, msg );
					} else if (
						resolved.ext && !parts.ext &&
						!contains( resolved.dir, parts.name )
					) {
						msg = 'require statement of file is missing a file extension. Value: '+ requirePath;
						report( node, msg );
					}
				}
			}
		}
	}

	return {
		'CallExpression': validate
	};
}


// MAIN //

rule = {
	'meta': {
		'docs': {
			'description': 'enforce that `require` statements of files end with a whitelisted file extension'
		},
		'schema': [
			{
				'type': 'object',
				'properties': {
					'extensionsWhitelist': {
						'type': 'array'
					}
				},
				'additionalProperties': false
			}
		]
	},
	'create': main
};


// EXPORTS //

module.exports = rule;
