/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var ndarray = require( '@stdlib/ndarray/array' );
var minn = require( '@stdlib/math/base/special/minn' );


// MAIN //

/**
* Returns the edit distance between two words using the [Damerauâ€“Levenshtein][damerau-levenshtein] distance.
*
* ## Notes
*
* -   the edit distance between two strings is the number of insertions, deletions, character substitutions, as well as transpositions of adjacent characters to convert one of the strings into the other.
*
* [damerau-levenshtein]: https://en.wikipedia.org/wiki/Damerau%E2%80%93Levenshtein_distance
*
* @private
* @param {string} word1 - first word
* @param {string} word2 - second word
* @returns {NonNegativeInteger} edit distance
*/
function editDistance( word1, word2 ) {
	var cost;
	var d;
	var m;
	var n;
	var v;
	var i;
	var j;

	if ( word1 === word2 ) {
		return 0;
	}
	m = word1.length;
	n = word2.length;
	d = ndarray({
		'shape': [ m+1, n+1 ]
	});
	for ( i = 0; i <= m; i++ ) {
		d.set( i, 0, i );
	}
	for ( j = 1; j <= n; j++ ) {
		d.set( 0, j, j );
	}
	for ( j = 1; j <= n; j++ ) {
		for ( i = 1; i <= m; i++ ) {
			if ( word1[ i-1 ] === word2[ j-1 ] ) {
				cost = 0;
			} else {
				cost = 1;
			}
			v = minn( d.get(i-1, j)+1, d.get(i, j-1)+1, d.get(i-1, j-1)+cost );
			d.set( i, j, v );
			if (
				i > 1 && j > 1 &&
				word1[ i-1 ] === word2[ j-2 ] &&
				word1[ i-2 ] === word2[ j-1 ]
			) {
				v = minn( d.get( i, j ), d.get( i-2, j-2 ) + cost );
				d.set( i, j, v );
			}
		}
	}
	return d.get( m, n );
}


// EXPORTS //

module.exports = editDistance;
