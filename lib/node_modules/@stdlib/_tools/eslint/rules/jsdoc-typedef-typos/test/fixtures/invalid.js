/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var invalid = [];
var test;

test = {
	'code': [
		'/**',
		'* Squares a number.',
		'* ',
		'* @param {number} x - input number',
		'* @returns {numr} x squared',
		'*',
		'* @example',
		'* var y = square( 2.0 );',
		'* // returns 4.0',
		'*/',
		'function square( x ) {',
		'  return x*x;',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': '"numr" type definition should be "number"',
			'type': null
		}
	]
};
invalid.push( test );

test = {
	'code': [
		'/**',
		'* Returns a pseudo-random number on [0,1].',
		'* ',
		'* @returns {numbr} uniform random number',
		'*',
		'* @example',
		'* var y = rand();',
		'* // e.g., returns 0.5363925252089496',
		'*/',
		'function rand() {',
		'  return Math.random();',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': '"numbr" type definition should be "number"',
			'type': null
		}
	]
};
invalid.push( test );

test = {
	'code': [
		' /**',
		' * Returns the number of minutes in a month.',
		' *',
		' * @param {(string|date|integer)} [month] - month',
		' * @param {integer} [year] - year',
		' * @throws {TypeError} first argument must be either a string, integer, or `Date` object',
		' * @throws {Error} must provide a recognized month',
		' * @throws {RangeErrr} an integer month argument must be on the interval `[1,12]`',
		' * @throws {TypeError} second argument must be an integer',
		' * @returns {integer} minutes in a month',
		' *',
		' * @example',
		' * var num = minutesInMonth();',
		' * // returns <number>',
		' *',
		' * @example',
		' * var num = minutesInMonth( 2 );',
		' * // returns <number>',
		' *',
		' * @example',
		' * var num = minutesInMonth( 2, 2016 );',
		' * // returns 41760',
		' *',
		' * @example',
		' * var num = minutesInMonth( 2, 2017 );',
		' * // returns 40320',
		' */',
		'function minutesInMonth( month, year ) {',
		'	var mins;',
		'	var mon;',
		'	var yr;',
		'	var d;',
		'	if ( arguments.length === 0 ) {',
		'		// Note: cannot cache as application may cross over into a new year:',
		'		d = new Date();',
		'		mon = d.getMonth() + 1; // zero-based',
		'		yr = d.getFullYear();',
		'	} else if ( arguments.length === 1 ) {',
		'		if ( isDateObject( month ) ) {',
		'			d = month;',
		'			mon = d.getMonth() + 1; // zero-based',
		'			yr = d.getFullYear();',
		'		} else if ( isString( month ) || isInteger( month ) ) {',
		'			// Note: cannot cache as application may cross over into a new year:',
		'			yr = ( new Date() ).getFullYear();',
		'			mon = month;',
		'		} else {',
		'			throw new TypeError( \'invalid input argument. First argument must be either a string, integer, or `Date` object. Value: `\'+month+\'`.\' );',
		'		}',
		'	} else {',
		'		if ( !isString( month ) && !isInteger( month ) ) {',
		'			throw new TypeError( \'invalid input argument. First argument must be either a string or integer. Value: `\'+month+\'`.\' );',
		'		}',
		'		if ( !isInteger( year ) ) {',
		'			throw new TypeError( \'invalid input argument. Second argument must be an integer. Value: `\'+year+\'`.\' );',
		'		}',
		'		mon = month;',
		'		yr = year;',
		'	}',
		'	if ( isInteger( mon ) && (mon < 1 || mon > 12) ) {',
		'		throw new RangeError( \'invalid input argument. An integer month value must be on the interval `[1,12]`. Value: `\'+mon+\'`.\' );',
		'	}',
		'	mon = lowercase( mon.toString() );',
		'	mins = MINUTES_IN_MONTH[ mon ];',
		'	if ( mins === void 0 ) {',
		'		throw new Error( \'invalid input argument. Must provide a recognized month. Value: `\'+mon+\'`.\' );',
		'	}',
		'	// Check if February during a leap year...',
		'	if ( mins === 40320 && isLeapYear( yr ) ) {',
		'		mins += MINUTES_IN_DAY;',
		'	}',
		'	return mins;',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': '"date" type definition should be "Date"',
			'type': null
		},
		{
			'message': '"RangeErrr" type definition should be "RangeError"',
			'type': null
		}
	]
};
invalid.push( test );

test = {
	'code': [
		'/**',
		'* @name capitalize',
		'* @memberof string',
		'* @readonly',
		'* @type {function}',
		'* @see {@link module:@stdlib/string/capitalize}',
		'*/',
		'setReadOnly( string, \'capitalize\', require( \'@stdlib/string/capitalize\' ) );'
	].join( '\n' ),
	'errors': [
		{
			'message': '"function" type definition should be "Function"',
			'type': null
		}
	]
};
invalid.push( test );

test = {
	'code': [
		'/**',
		'* Returns a JSON representation of an error object.',
		'*',
		'* @param {(Error|TypeError|SyntaxError|URIError|ReferenceError|RangeError|EvalError)} err - error to serialize',
		'* @throws {TypeError} first argument must be an error object',
		'* @returns {Objct} JSON representation',
		'*',
		'* @example',
		'* var err = new Error( \'beep\' );',
		'* var json = toJSON( err );',
		'* // returns <Object>',
		'*/',
		'function toJSON( err ) {',
		'  // ...',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': '"Objct" type definition should be "Object"',
			'type': null
		}
	]
};
invalid.push( test );


// EXPORTS //

module.exports = invalid;
