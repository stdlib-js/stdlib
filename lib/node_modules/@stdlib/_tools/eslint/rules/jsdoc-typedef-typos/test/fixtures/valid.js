/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var valid = [];
var test;

test = {
	'code': [
		'/**',
		'* Squares a number.',
		'* ',
		'* @param {number} x - input number',
		'* @returns {number} x squared',
		'*',
		'* @example',
		'* var y = square( 2.0 );',
		'* // returns 4.0',
		'*/',
		'function square( x ) {',
		'  return x*x;',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Returns a pseudo-random number on [0,1].',
		'* ',
		'* @returns {number} uniform random number',
		'*',
		'* @example',
		'* var y = rand();',
		'* // e.g., returns 0.5363925252089496',
		'*/',
		'function rand() {',
		'  return Math.random();',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		' /**',
		' * Returns the number of minutes in a month.',
		' *',
		' * @param {(string|Date|integer)} [month] - month',
		' * @param {integer} [year] - year',
		' * @throws {TypeError} first argument must be either a string, integer, or `Date` object',
		' * @throws {Error} must provide a recognized month',
		' * @throws {RangeError} an integer month argument must be on the interval `[1,12]`',
		' * @throws {TypeError} second argument must be an integer',
		' * @returns {integer} minutes in a month',
		' *',
		' * @example',
		' * var num = minutesInMonth();',
		' * // returns <number>',
		' *',
		' * @example',
		' * var num = minutesInMonth( 2 );',
		' * // returns <number>',
		' *',
		' * @example',
		' * var num = minutesInMonth( 2, 2016 );',
		' * // returns 41760',
		' *',
		' * @example',
		' * var num = minutesInMonth( 2, 2017 );',
		' * // returns 40320',
		' */',
		'function minutesInMonth( month, year ) {',
		'  var mins;',
		'  var mon;',
		'  var yr;',
		'  var d;',
		'  if ( arguments.length === 0 ) {',
		'    // Note: cannot cache as application may cross over into a new year:',
		'    d = new Date();',
		'    mon = d.getMonth() + 1; // zero-based',
		'    yr = d.getFullYear();',
		'  } else if ( arguments.length === 1 ) {',
		'    if ( isDateObject( month ) ) {',
		'    	d = month;',
		'    	mon = d.getMonth() + 1; // zero-based',
		'    	yr = d.getFullYear();',
		'    } else if ( isString( month ) || isInteger( month ) ) {',
		'    	// Note: cannot cache as application may cross over into a new year:',
		'    	yr = ( new Date() ).getFullYear();',
		'    	mon = month;',
		'    } else {',
		'    	throw new TypeError( \'invalid argument. First argument must be either a string, integer, or `Date` object. Value: `\'+month+\'`.\' );',
		'    }',
		'  } else {',
		'    if ( !isString( month ) && !isInteger( month ) ) {',
		'    	throw new TypeError( \'invalid argument. First argument must be either a string or integer. Value: `\'+month+\'`.\' );',
		'    }',
		'    if ( !isInteger( year ) ) {',
		'    	throw new TypeError( \'invalid argument. Second argument must be an integer. Value: `\'+year+\'`.\' );',
		'    }',
		'    mon = month;',
		'    yr = year;',
		'  }',
		'  if ( isInteger( mon ) && (mon < 1 || mon > 12) ) {',
		'    throw new RangeError( \'invalid argument. An integer month value must be on the interval `[1,12]`. Value: `\'+mon+\'`.\' );',
		'  }',
		'  mon = lowercase( mon.toString() );',
		'  mins = MINUTES_IN_MONTH[ mon ];',
		'  if ( mins === void 0 ) {',
		'    throw new Error( \'invalid argument. Must provide a recognized month. Value: `\'+mon+\'`.\' );',
		'  }',
		'  // Check if February during a leap year...',
		'  if ( mins === 40320 && isLeapYear( yr ) ) {',
		'    mins += MINUTES_IN_DAY;',
		'  }',
		'  return mins;',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* The mathematical constant `Ï€`.',
		'*',
		'* @constant',
		'* @type {number}',
		'* @default 3.141592653589793',
		'* @see [Wikipedia]{@link https://en.wikipedia.org/wiki/Pi}',
		'*/',
		'var PI = 3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679;'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Top-level namespace.',
		'*',
		'* @namespace string',
		'*/',
		'var string = {};'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* @name capitalize',
		'* @memberof string',
		'* @readonly',
		'* @type {Function}',
		'* @see {@link module:@stdlib/string/capitalize}',
		'*/',
		'setReadOnly( string, \'capitalize\', require( \'@stdlib/string/capitalize\' ) );'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Returns a JSON representation of an error object.',
		'*',
		'* @param {(Error|TypeError|SyntaxError|URIError|ReferenceError|RangeError|EvalError)} err - error to serialize',
		'* @throws {TypeError} first argument must be an error object',
		'* @returns {Object} JSON representation',
		'*',
		'* @example',
		'* var err = new Error( \'beep\' );',
		'* var json = toJSON( err );',
		'* // returns <Object>',
		'*/',
		'function toJSON( err ) {',
		'  // ...',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Revives a JSON-serialized 64-bit complex number.',
		'*',
		'* @param {string} key - key',
		'* @param {*} value - value',
		'* @returns {(*|Complex64)} value or 64-bit complex number',
		'*',
		'* @example',
		'* var parseJSON = require( \'@stdlib/utils/parse-json\' );',
		'*',
		'* var str = \'{"type":"Complex64","re":5,"im":3}\';',
		'*',
		'* var z = parseJSON( str, reviver );',
		'* // returns <Complex64>',
		'*/',
		'function reviver( key, value ) {',
		'  if (',
		'    value &&',
		'    value.type &&',
		'    value.type === \'Complex64\' &&',
		'    isNumber( value.re ) &&',
		'    isNumber( value.im )',
		'  ) {',
		'    return new Complex64( value.re, value.im );',
		'  }',
		'  return value;',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Iterator symbol.',
		'*',
		'* @name IteratorSymbol',
		'* @constant',
		'* @type {(symbol|null)}',
		'*/',
		'var IteratorSymbol = ( hasIteratorSymbolSupport() ) ? Symbol.iterator : null;'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Determines the number of iterations.',
		'*',
		'* @private',
		'* @param {string} name - benchmark name',
		'* @param {Options} options - benchmark options',
		'* @param {(Function|undefined)} benchmark - function containing benchmark code',
		'* @param {Callback} clbk - callback to invoke after determining number of iterations',
		'* @returns {void}',
		'*/',
		'function iterations( name, options, benchmark, clbk ) {',
		'  var opts;',
		'  var time;',
		'',
		'  // Elapsed time (in seconds):',
		'  time = 0;',
		'',
		'  // Create a local copy:',
		'  opts = copy( options );',
		'  opts.iterations = ITERATIONS;',
		'',
		'  // Begin running benchmarks:',
		'  return next();',
		'',
		'  /**',
		'  * Run a new benchmark.',
		'  *',
		'  * @private',
		'  */',
		'  function next() {',
		'    var b = new Benchmark( name, opts, benchmark );',
		'    b.on( \'result\', onResult );',
		'    b.once( \'end\', onEnd );',
		'    b.run();',
		'  }',
		'',
		'  /**',
		'  * Callback invoked upon a `result` event.',
		'  *',
		'  * @private',
		'  * @param {(string|Object)} result - result',
		'  */',
		'  function onResult( result ) {',
		'    if ( !isString( result ) && result.operator === \'result\' ) {',
		'      time = result.elapsed;',
		'    }',
		'  }',
		'',
		'  /**',
		'  * Callback invoked upon an `end` event.',
		'  *',
		'  * @private',
		'  * @returns {void}',
		'  */',
		'  function onEnd() {',
		'    if (',
		'      time < MIN_TIME &&',
		'      opts.iterations < MAX_ITERATIONS',
		'    ) {',
		'      opts.iterations *= 10;',
		'      return next();',
		'    }',
		'    clbk( null, opts.iterations );',
		'  }',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Gumbel distribution constructor.',
		'*',
		'* @constructor',
		'* @param {number} [mu=0.0] - location parameter',
		'* @param {PositiveNumber} [beta=1.0] - scale parameter',
		'* @throws {TypeError} `beta` must be a positive number',
		'* @returns {Gumbel} distribution instance',
		'*',
		'* @example',
		'* var gumbel = new Gumbel( 1.0, 1.0 );',
		'*',
		'* var y = gumbel.cdf( 0.8 );',
		'* // returns 0.8',
		'*',
		'* var mu = gumbel.mean;',
		'* // returns 0.5',
		'*/',
		'function Gumbel() {',
		'  var beta;',
		'  var mu;',
		'  if ( !(this instanceof Gumbel) ) {',
		'    if ( arguments.length === 0 ) {',
		'      return new Gumbel();',
		'    }',
		'    return new Gumbel( arguments[ 0 ], arguments[ 1 ] );',
		'  }',
		'  if ( arguments.length ) {',
		'    mu = arguments[ 0 ];',
		'    beta = arguments[ 1 ];',
		'    if ( !isNumber( mu ) || isnan( mu ) ) {',
		'      throw new TypeError( \'invalid argument. Location parameter must be a number. Value: `\' + mu + \'`\' );',
		'    }',
		'    if ( !isPositive( beta ) ) {',
		'      throw new TypeError( \'invalid argument. Scale parameter must be a positive number. Value: `\' + beta + \'`\' );',
		'    }',
		'  } else {',
		'    mu = 0.0;',
		'    beta = 1.0;',
		'  }',
		'  Object.defineProperty( this, \'mu\', {',
		'    \'configurable\': false,',
		'    \'enumerable\': true,',
		'    \'get\': function get() {',
		'      return mu;',
		'    },',
		'    \'set\': function set( value ) {',
		'      if ( !isNumber( value ) || isnan( value ) ) {',
		'        throw new TypeError( \'invalid value. Must be a number. Value: `\' + value + \'`\' );',
		'      }',
		'      mu = value;',
		'    }',
		'  });',
		'  Object.defineProperty( this, \'beta\', {',
		'    \'configurable\': false,',
		'    \'enumerable\': true,',
		'    \'get\': function get() {',
		'      return beta;',
		'    },',
		'    \'set\': function set( value ) {',
		'      if ( !isPositive( value ) ) {',
		'        throw new TypeError( \'invalid value. Must be a positive number. Value: `\' + value + \'`\' );',
		'      }',
		'      beta = value;',
		'    }',
		'  });',
		'  return this;',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Calculates the "rank" of a `require` path.',
		'*',
		'* @private',
		'* @param {StringArray} order - require statement order',
		'* @param {Array<RegExp>} regexps - regular expression array for detecting custom require statement types',
		'* @param {string} name - require path',
		'* @returns {integer} path rank',
		'*/',
		'function rank( order, regexps, name ) {',
		'  var type;',
		'  var i;',
		'',
		'  type = \'external\';',
		'  if ( isNodeBuiltin( name ) ) {',
		'    type = \'builtin\';',
		'  } else if (',
		'    startsWith( name, \'./\' ) ||',
		'    startsWith( name, \'/\' ) ||',
		'    startsWith( name, \'../\' )',
		'  ) {',
		'    type = \'path\';',
		'  }',
		'  for ( i = 0; i < regexps.length; i++ ) {',
		'    if ( regexps[ i ].test( name ) ) {',
		'    	type = \'/\'+regexps[ i ].source+\'/\';',
		'    	break;',
		'    }',
		'  }',
		'  return indexOf( order, type );',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Splits values into two groups according to a predicate function and outputs results as element indices.',
		'*',
		'* @private',
		'* @param {Collection} collection - input collection',
		'* @param {Options} opts - function options',
		'* @param {*} [opts.thisArg] - execution context',
		'* @param {Function} predicate - predicate function specifying which group an element in the input collection belongs to',
		'* @returns {(Array<number>|Array)} results',
		'*',
		'* @example',
		'* function predicate( v ) {',
		'*     return v[ 0 ] === \'b\';',
		'* }',
		'* var arr = [ \'beep\', \'boop\', \'foo\', \'bar\' ];',
		'*',
		'* var out = bifurcateBy( arr, {}, predicate );',
		'* // returns [ [ 0, 1, 3 ], [ 2 ] ]',
		'*/',
		'function bifurcateBy( collection, opts, predicate ) {',
		'  var thisArg;',
		'  var bool;',
		'  var out;',
		'  var len;',
		'  var i;',
		'',
		'  thisArg = opts.thisArg;',
		'  len = collection.length;',
		'  if ( len === 0 ) {',
		'    return [];',
		'  }',
		'  out = [ [], [] ];',
		'  for ( i = 0; i < len; i++ ) {',
		'    bool = predicate.call( thisArg, collection[ i ], i );',
		'    if ( bool ) {',
		'    	out[ 0 ].push( i );',
		'    } else {',
		'    	out[ 1 ].push( i );',
		'    }',
		'  }',
		'  return out;',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Computes the maximum value.',
		'*',
		'* @param {Array<Array<number>>} x - range',
		'* @param {string} axis - axis option name',
		'* @param {number} axisValue - axis option value',
		'* @returns {Array<Array<number>>} results',
		'*/',
		'function max( x, axis, axisValue ) {',
		'  // ...',
		'',
		'  return x;',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Computes the maximum value.',
		'*',
		'* @param {Array<Array<Array<number>>>} x - range',
		'* @param {string} axis - axis option name',
		'* @param {number} axisValue - axis option value',
		'* @returns {Array<Array<Array<number>>>} results',
		'*/',
		'function max( x, axis, axisValue ) {',
		'  // ...',
		'',
		'  return x;',
		'}'
	].join( '\n' )
};
valid.push( test );

test = {
	'code': [
		'/**',
		'* Computes something.',
		'*',
		'* @param {Array<Array<(number|string)>>} x - range',
		'* @param {string} axis - axis option name',
		'* @param {number} axisValue - axis option value',
		'* @returns {Array<Array<(number|string)>>} results',
		'*/',
		'function something( x, axis, axisValue ) {',
		'  // ...',
		'',
		'  return x;',
		'}'
	].join( '\n' )
};
valid.push( test );


// EXPORTS //

module.exports = valid;
