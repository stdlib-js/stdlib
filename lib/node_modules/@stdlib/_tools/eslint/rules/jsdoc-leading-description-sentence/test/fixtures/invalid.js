/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var invalid = [];
var test;

test = {
	'code': [
		'/**',
		'* Squares a number',
		'* ',
		'* @param {number} x - input number',
		'* @returns {number} x squared',
		'*',
		'* @example',
		'* var y = square( 2.0 );',
		'* // returns 4.0',
		'*/',
		'function square( x ) {',
		'  return x*x;',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Description must start with an uppercase letter or number and end with a period',
			'type': null
		}
	],
	'output': [
		'/**',
		'* Squares a number.',
		'* ',
		'* @param {number} x - input number',
		'* @returns {number} x squared',
		'*',
		'* @example',
		'* var y = square( 2.0 );',
		'* // returns 4.0',
		'*/',
		'function square( x ) {',
		'  return x*x;',
		'}'
	].join( '\n' )
};
invalid.push( test );

test = {
	'code': [
		'/**',
		'* squares a number',
		'* ',
		'* @param {number} x - input number',
		'* @returns {number} x squared',
		'*',
		'* @example',
		'* var y = square( 2.0 );',
		'* // returns 4.0',
		'*/',
		'function square( x ) {',
		'  return x*x;',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Description must start with an uppercase letter or number and end with a period',
			'type': null
		}
	],
	'output': [
		'/**',
		'* Squares a number.',
		'* ',
		'* @param {number} x - input number',
		'* @returns {number} x squared',
		'*',
		'* @example',
		'* var y = square( 2.0 );',
		'* // returns 4.0',
		'*/',
		'function square( x ) {',
		'  return x*x;',
		'}'
	].join( '\n' )
};
invalid.push( test );

test = {
	'code': [
		'/**',
		'* squares a number.',
		'* ',
		'* @param {number} x - input number',
		'* @returns {number} x squared',
		'*',
		'* @example',
		'* var y = square( 2.0 );',
		'* // returns 4.0',
		'*/',
		'function square( x ) {',
		'  return x*x;',
		'}'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Description must start with an uppercase letter or number and end with a period',
			'type': null
		}
	],
	'output': [
		'/**',
		'* Squares a number.',
		'* ',
		'* @param {number} x - input number',
		'* @returns {number} x squared',
		'*',
		'* @example',
		'* var y = square( 2.0 );',
		'* // returns 4.0',
		'*/',
		'function square( x ) {',
		'  return x*x;',
		'}'
	].join( '\n' )
};
invalid.push( test );

test = {
	'code': [
		'/**',
		'* Test if a value is an array',
		'*',
		'* @module @stdlib/assert/is-array',
		'*',
		'* @example',
		'* var isArray = require( \'@stdlib/assert/is-array\' );',
		'*',
		'* var bool = isArray( [] );',
		'* // returns true',
		'*',
		'* bool = isArray( {} );',
		'* // returns false',
		'*/',
		'',
		'// MODULES //',
		'',
		'var isArray = require( \'./is_array.js\' );'
	].join( '\n' ),
	'errors': [
		{
			'message': 'Description must start with an uppercase letter or number and end with a period',
			'type': null
		}
	],
	'output': [
		'/**',
		'* Test if a value is an array.',
		'*',
		'* @module @stdlib/assert/is-array',
		'*',
		'* @example',
		'* var isArray = require( \'@stdlib/assert/is-array\' );',
		'*',
		'* var bool = isArray( [] );',
		'* // returns true',
		'*',
		'* bool = isArray( {} );',
		'* // returns false',
		'*/',
		'',
		'// MODULES //',
		'',
		'var isArray = require( \'./is_array.js\' );'
	].join( '\n' )
};
invalid.push( test );

test = {
	'code': [
		'/**',
		'* ndarray data buffer constructors',
		'*',
		'* @module @stdlib/ndarray/base/buffer-ctors',
		'*',
		'* @example',
		'* var ctors = require( "@stdlib/ndarray/base/buffer-ctors" );',
		'*',
		'* var ctor = ctors( "float64" );',
		'* // returns <Function>',
		'*',
		'* ctor = ctors( "int" );',
		'* // returns null',
		'*/',
		'',
		'// MODULES //',
		'',
		'var ctors = require( "./main.js" );'
	].join( '\n' ),
	'options': [ {
		'whitelist': [ 'ndarray' ]
	} ],
	'errors': [
		{
			'message': 'Description must start with an uppercase letter or number and end with a period',
			'type': null
		}
	],
	'output': [
		'/**',
		'* ndarray data buffer constructors.',
		'*',
		'* @module @stdlib/ndarray/base/buffer-ctors',
		'*',
		'* @example',
		'* var ctors = require( "@stdlib/ndarray/base/buffer-ctors" );',
		'*',
		'* var ctor = ctors( "float64" );',
		'* // returns <Function>',
		'*',
		'* ctor = ctors( "int" );',
		'* // returns null',
		'*/',
		'',
		'// MODULES //',
		'',
		'var ctors = require( "./main.js" );'
	].join( '\n' )
};
invalid.push( test );


// EXPORTS //

module.exports = invalid;
