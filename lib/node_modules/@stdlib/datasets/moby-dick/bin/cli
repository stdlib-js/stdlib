#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var createReadStream = require( 'fs' ).createReadStream;
var resolve = require( 'path' ).resolve;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var stdout = require( '@stdlib/streams/node/stdout' );
var CLI = require( '@stdlib/cli/ctor' );


// MAIN //

/**
* Main execution sequence.
*
* @private
*/
function main() {
	var flags;
	var cli;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line options:
	flags = cli.flags();
	if ( flags.help || flags.version ) {
		return;
	}
	if ( flags.format === 'ndjson' ) {
		ndjson();
	} else {
		txt();
	}

	/**
	* Prints data as newline-delimited JSON (ndjson).
	*
	* @private
	*/
	function ndjson() {
		var data;
		var i;

		data = require( './../lib' )(); // eslint-disable-line stdlib/no-immediate-require
		for ( i = 0; i < data.length; i++ ) {
			console.log( JSON.stringify( data[i] ) ); // eslint-disable-line no-console
		}
	}

	/**
	* Prints data as lines of text.
	*
	* @private
	* @returns {void}
	*/
	function txt() {
		var FILE_LIST;
		var i;

		FILE_LIST = require( './../data/file_list.json' );
		i = 0;

		return next();

		/**
		* Callback which processes the next file.
		*
		* @private
		*/
		function next() {
			var fstream;
			var fpath;

			fpath = resolve( __dirname, '..', 'data', FILE_LIST[ i ] );
			fstream = createReadStream( fpath );
			fstream.on( 'close', onClose );
			fstream.pipe( stdout );
		}

		/**
		* Callback invoked upon a stream close.
		*
		* @private
		* @returns {void}
		*/
		function onClose() {
			i += 1;
			if ( i === FILE_LIST.length ) {
				return cli.close( 0 );
			}
			console.log( '\n' ); // eslint-disable-line no-console
			next();
		}
	}
}

main();
