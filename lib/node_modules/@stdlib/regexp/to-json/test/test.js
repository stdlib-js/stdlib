/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var vm = require( 'vm' );
var tape = require( 'tape' );
var IS_BROWSER = require( '@stdlib/assert/is-browser' );
var isPlainObject = require( '@stdlib/assert/is-plain-object' );
var defineProperty = require( '@stdlib/utils/define-property' );
var toJSON = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof toJSON, 'function', 'main export is a function' );
	t.end();
});

tape( 'if provided anything other than an regexp instance, the function will throw an error', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		void 0,
		true,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), Error, 'throws when provided a ' + (typeof values[i]) );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			toJSON( value );
		};
	}
});

tape( 'the function returns a JSON object', function test( t ) {
	var json;
	var regex;

	regex = new RegExp( 'beep' );
	json = toJSON( regex );
	t.strictEqual( isPlainObject( json ), true, 'returns an object' );
	t.end();
});

tape( 'the JSON object includes a regexp type', function test( t ) {
	var expected;
	var value;
	var json;

	value = new RegExp();
	expected = 'regexp';
    json = toJSON( value );
    t.strictEqual( json.type, expected, 'type equal to ' + expected );
	t.end();
});

tape( 'the JSON object includes a pattern', function test( t ) {
	var expected;
	var values;
	var json;
	var i;

	values = [
		new RegExp( '.*' ),
		new RegExp( 'ab+c' ),
        new RegExp( '//.*^1' )
	];

	expected = [
		'.*',
		'ab+c',
		'//.*^1'
	];

	for ( i = 0; i < values.length; i++ ) {
		json = toJSON( values[ i ] );
		t.strictEqual( json.pattern, expected[ i ], 'pattern equal to \'' + expected[ i ] + '\'' );
	}
	t.end();
});

tape( 'if a `flags` property is present, the JSON object includes that field', function test( t ) {
	var expected;
	var values;
	var json;
	var i;

	values = [
		new RegExp( '.*', 'd' ),
		new RegExp( 'ab+c', 'dy' ),
        new RegExp( '//.*^1', 's' )
	];

	expected = [
		'd',
		'dy',
		's'
	];

	for ( i = 0; i < values.length; i++ ) {
		values[ i ].stack = expected[ i ];
		json = toJSON( values[ i ] );
		t.strictEqual( json.flags, expected[ i ], 'flags equal to \'' + expected[ i ] + '\'' );
	}
	t.end();
});

tape( 'if a `flags` property is not present, the JSON object will not include a `flags` property', function test( t ) {
	var json;
	var regex;

	regex = new RegExp('*.');

	// Fake not having a `flags` by intercepting access and returning `undefined`, similar to non-existent property behavior...
	defineProperty( regex, 'flags', {
		'value': void 0,
		'enumerable': false,
		'configuable': true,
		'writable': true
	});

	json = toJSON( regex );
	t.strictEqual( json.flags, void 0, 'no flags property' );
	t.end();
});

tape( 'if a provided regex has additional enumerable properties, the function will include these properties and their values in the output JSON', function test( t ) {
	var json;
	var regex;

	// Data descriptor...
	regex = new RegExp( 'ab+c' );
	regex.beep = 'boop';
	regex.boop = 'beep';

	json = toJSON( regex );
	t.strictEqual( json.beep, regex.beep, 'data descriptor' );
	t.strictEqual( json.boop, regex.boop, 'data descriptor' );

	// Accessor descriptor...
	regex = new RegExp( 'ab+c' );
	defineProperty( regex, 'beep', {
		'enumerable': true,
		'configurable': true,
		'get': function get() {
			return 'boop';
		}
	});
	defineProperty( regex, 'boop', {
		'enumerable': true,
		'configurable': false,
		'get': function get() {
			return 'beep';
		}
	});

	json = toJSON( regex );
	t.strictEqual( json.beep, regex.regex, 'accessor descriptor' );
	t.strictEqual( json.boop, regex.regex, 'accessor descriptor' );

	t.end();
});

tape( 'the function deep copies enumerable properties', function test( t ) {
	var json;
	var regex;

	// Deep equal...
	regex = new RegExp( 'ab+c' );
	regex.arr = [ 1, 2, [ 3, 4, 5 ] ];

	json = toJSON( regex );
	t.notEqual( json.arr, regex.arr, 'new instances' );
	t.deepEqual( json.arr, regex.arr, 'deep equal' );

	t.end();
});

opts.skip = IS_BROWSER;
tape( 'the function supports serializing a regular expression from a different realm', opts, function test( t ) {
	var json;
	var regex;

	regex = vm.runInNewContext( 'new RegExp( "ab+c", "g" )' );
	json = toJSON( regex );

	t.strictEqual( json.type, 'regexp', 'type equal to regexp' );
	t.strictEqual( json.pattern, regex.pattern, 'equal pattern' );
	t.strictEqual( json.flags, regex.flags, 'equal flags' );

	t.end();
});