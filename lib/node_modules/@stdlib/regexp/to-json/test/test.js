/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var vm = require( 'vm' );
var tape = require( 'tape' );
var IS_BROWSER = require( '@stdlib/assert/is-browser' );
var isPlainObject = require( '@stdlib/assert/is-plain-object' );
var toJSON = require( './../lib' );


// VARIABLES //

var opts = {
	'skip': false
};


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof toJSON, 'function', 'main export is a function' );
	t.end();
});

tape( 'if provided anything other than a regular expression, the function will throw an error', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		void 0,
		true,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), Error, 'throws when provided a ' + (typeof values[i]) );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			toJSON( value );
		};
	}
});

tape( 'the function returns a JSON object', function test( t ) {
	var pattern;
	var regex;
	var json;

	pattern = 'beep';
	regex = new RegExp( pattern );
	json = toJSON( regex );
	t.strictEqual( isPlainObject( json ), true, 'returns an object' );
	t.end();
});

tape( 'the JSON object includes a type field', function test( t ) {
	var expected;
	var pattern;
	var value;
	var json;

	pattern = 'beep';
	value = new RegExp( pattern );
	expected = 'RegExp';
	json = toJSON( value );
	t.strictEqual( json.type, expected, 'type equal to ' + expected );
	t.end();
});

tape( 'the JSON object includes a pattern field', function test( t ) {
	var expected;
	var values;
	var regex;
	var json;
	var i;

	values = [
		'.*',
		'ab+c',
		'/.*^1'
	];

	expected = [
		'.*',
		'ab+c',
		'\\/.*^1'
	];

	for ( i = 0; i < values.length; i++ ) {
		regex = new RegExp( values[ i ] );
		json = toJSON( regex );
		t.strictEqual( json.pattern, expected[ i ], 'pattern equal to \'' + expected[ i ] + '\'' );
	}
	t.end();
});

tape( 'the JSON object includes a flags field', function test( t ) {
	var expected;
	var values;
	var regex;
	var json;
	var i;

	values = [
		'.*',
		'ab+c',
		'/.*^1'
	];

	expected = [
		'd',
		'dy',
		's'
	];

	for ( i = 0; i < values.length; i++ ) {
		regex = new RegExp( values[ i ], expected[ i ] );
		json = toJSON( regex );
		t.strictEqual( json.flags, expected[ i ], 'flags equal to \'' + expected[ i ] + '\'' );
	}
	t.end();
});

opts.skip = IS_BROWSER;
tape( 'the function supports serializing a regular expression from a different realm', opts, function test( t ) {
	var regex;
	var json;

	regex = vm.runInNewContext( 'new RegExp( "ab+c", "g" )' );
	json = toJSON( regex );

	t.strictEqual( json.type, 'RegExp', 'type equal to regexp' );
	t.strictEqual( json.pattern, 'ab+c', 'equal pattern' );
	t.strictEqual( json.flags, 'g', 'equal flags' );

	t.end();
});
