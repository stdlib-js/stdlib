/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var dabs = require( './../lib/wasm.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof dabs, 'function', 'main export is a function' );
	t.end();
});

tape( 'if a WebAssembly implementation is available, the main export is the WebAssembly implementation', function test( t ) {
	var dabs = proxyquire( './../lib/wasm.js', {
		'@stdlib/utils/try-function': tryFunction,
		'@stdlib/assert/has-wasm-support': hasWasm,
		'./dabs.wasm.js': mock
	});

	t.strictEqual( dabs, mock, 'returns WebAssembly implementation' );
	t.end();

	function tryFunction() {
		return function foo() {
			return null;
		};
	}

	function hasWasm() {
		return true;
	}

	function mock() {
		// Mock...
	}
});

tape( 'if a WebAssembly implementation is not available, the main export is an `asm.js` implementation (error loading WebAssembly)', function test( t ) {
	var dabs;
	var asm;

	asm = require( './../lib/dabs.asm.js' );

	dabs = proxyquire( './../lib/wasm.js', {
		'@stdlib/utils/try-function': tryFunction,
		'@stdlib/assert/has-wasm-support': hasWasm
	});

	t.strictEqual( dabs, asm, 'returns `asm.js` implementation' );
	t.end();

	function tryFunction() {
		return function foo() {
			return new Error( 'Cannot find module' );
		};
	}

	function hasWasm() {
		return true;
	}
});

tape( 'if a WebAssembly implementation is not available, the main export is an `asm.js` implementation (no WebAssembly support)', function test( t ) {
	var dabs;
	var asm;

	asm = require( './../lib/dabs.asm.js' );

	dabs = proxyquire( './../lib/wasm.js', {
		'@stdlib/assert/has-wasm-support': hasWasm
	});

	t.strictEqual( dabs, asm, 'returns `asm.js` implementation' );
	t.end();

	function hasWasm() {
		return false;
	}
});
