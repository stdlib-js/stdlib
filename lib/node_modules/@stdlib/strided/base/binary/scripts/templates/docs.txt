#### stdlib_strided_{{SIGNATURE}}( \*arrays[], \*shape, \*strides, \*fcn )

Applies a binary callback to strided input array elements and assigns results to elements in a strided output array.

```c{{INCLUDES}}
#include <stdint.h>

// Create underlying byte arrays:
uint8_t x[] = { {{INPUT_ARRAY_BYTES_1}} };
uint8_t y[] = { {{INPUT_ARRAY_BYTES_2}} };
uint8_t out[] = { {{OUTPUT_ARRAY_BYTES}} };

// Define a pointer to an array containing pointers to strided arrays:
uint8_t *arrays[] = { x, y, out };

// Define the strides:
int64_t strides[] = { {{INPUT_ARRAY_STRIDE_1}}, {{INPUT_ARRAY_STRIDE_2}}, {{OUTPUT_ARRAY_STRIDE}} };

// Define the number of elements over which to iterate:
int64_t shape[] = { {{N}} };

// Define a callback:
static {{CALLBACK_RETURN_TYPE}} add( {{CALLBACK_PARAM_TYPE_1}} x, {{CALLBACK_PARAM_TYPE_2}} y ) {
    {{CALLBACK_BODY}}
}

// Apply the callback:
stdlib_strided_{{SIGNATURE}}( arrays, shape, strides, (void *)add );
```

The function accepts the following arguments:

-   **arrays**: `[inout] uint8_t**` array whose first two elements are pointers to strided input arrays and whose last element is a pointer to a strided output array.
-   **shape**: `[in] int64_t*` array whose only element is the number of elements over which to iterate.
-   **strides**: `[in] int64_t*` array containing strides (in bytes) for each strided array.
-   **fcn**: `[in] void*` a `{{CALLBACK_RETURN_TYPE}} (*f)({{CALLBACK_PARAM_TYPE_1}}, {{CALLBACK_PARAM_TYPE_2}})` function to apply provided as a `void` pointer.

```c
void stdlib_strided_{{SIGNATURE}}( uint8_t *arrays[], const int64_t *shape, const int64_t *strides, void *fcn );
```
