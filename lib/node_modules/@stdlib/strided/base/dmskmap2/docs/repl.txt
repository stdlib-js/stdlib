
{{alias}}( N, x, sx, y, sy, m, sm, z, sz, fcn )
    Applies a binary function to double-precision floating-point strided input
    arrays according to a strided mask array and assigns results to a double-
    precision floating-point strided output array.

    The `N` and stride parameters determine which elements in the strided arrays
    are accessed at runtime.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    x: Float64Array
        Input array.

    sx: integer
        Index increment for `x`.

    y: Float64Array
        Input array.

    sy: integer
        Index increment for `y`.

    m: Uint8Array
        Mask array.

    sm: integer
        Index increment for `m`.

    z: Float64Array
        Destination array.

    sz: integer
        Index increment for `z`.

    fcn: Function
        Binary function to apply.

    Returns
    -------
    z: Float64Array
        Input array `z`.

    Examples
    --------
    // Standard usage:
    > var x = new {{alias:@stdlib/array/float64}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > var y = new {{alias:@stdlib/array/float64}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > var z = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > var m = new {{alias:@stdlib/array/uint8}}( [ 0, 0, 1, 0 ] );
    > {{alias}}( x.length, x, 1, y, 1, m, 1, z, 1, {{alias:@stdlib/math/base/ops/add}} )
    <Float64Array>[ 2.0, 4.0, 0.0, 8.0 ]

    // Using `N` and stride parameters:
    > z = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > {{alias}}( 2, x, 2, y, -1, m, 2, z, -1, {{alias:@stdlib/math/base/ops/add}} )
    <Float64Array>[ 0.0, 3.0, 0.0, 0.0 ]

    // Using view offsets:
    > var x0 = new {{alias:@stdlib/array/float64}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > var y0 = new {{alias:@stdlib/array/float64}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > var z0 = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > var m0 = new {{alias:@stdlib/array/uint8}}( [ 0, 0, 1, 0 ] );
    > var x1 = new {{alias:@stdlib/array/float64}}( x0.buffer, x0.BYTES_PER_ELEMENT*1 );
    > var y1 = new {{alias:@stdlib/array/float64}}( y0.buffer, y0.BYTES_PER_ELEMENT*2 );
    > var z1 = new {{alias:@stdlib/array/float64}}( z0.buffer, z0.BYTES_PER_ELEMENT*2 );
    > var m1 = new {{alias:@stdlib/array/uint8}}( m0.buffer, m0.BYTES_PER_ELEMENT*2 );
    > {{alias}}( 2, x1, -2, y1, 1, m1, 1, z1, 1, {{alias:@stdlib/math/base/ops/add}} )
    <Float64Array>[ 0.0, 6.0 ]
    > z0
    <Float64Array>[ 0.0, 0.0, 0.0, 6.0 ]


{{alias}}.ndarray( N, x, sx, ox, y, sy, oy, m, sm, om, z, sz, oz, fcn )
    Applies a binary function to double-precision floating-point strided input
    arrays according to a strided mask array and assigns results to a double-
    precision floating-point strided output array using alternative indexing
    semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing semantics based on starting
    indices.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    x: Float64Array
        Input array.

    sx: integer
        Index increment for `x`.

    ox: integer
        Starting index for `x`.

    y: Float64Array
        Input array.

    sy: integer
        Index increment for `y`.

    oy: integer
        Starting index for `y`.

    m: Uint8Array
        Mask array.

    sm: integer
        Index increment for `m`.

    om: integer
        Starting index for `m`.

    z: Float64Array
        Destination array.

    sz: integer
        Index increment for `z`.

    oz: integer
        Starting index for `z`.

    fcn: Function
        Binary function to apply.

    Returns
    -------
    z: Float64Array
        Input array `z`.

    Examples
    --------
    // Standard usage:
    > var x = new {{alias:@stdlib/array/float64}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > var y = new {{alias:@stdlib/array/float64}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > var z = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > var m = new {{alias:@stdlib/array/uint8}}( [ 0, 0, 1, 0 ] );
    > {{alias}}.ndarray( 4, x, 1, 0, y, 1, 0, m, 1, 0, z, 1, 0, {{alias:@stdlib/math/base/ops/add}} )
    <Float64Array>[ 2.0, 4.0, 0.0, 8.0 ]

    // Advanced indexing:
    > x = new {{alias:@stdlib/array/float64}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > y = new {{alias:@stdlib/array/float64}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > z = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > m = new {{alias:@stdlib/array/uint8}}( [ 0, 0, 1, 0 ] );
    > {{alias}}.ndarray( 2, x, 2, 1, y, -1, 3, m, 1, 2, z, -1, 3, {{alias:@stdlib/math/base/ops/add}} )
    <Float64Array>[ 0.0, 0.0, 7.0, 0.0 ]

    See Also
    --------

