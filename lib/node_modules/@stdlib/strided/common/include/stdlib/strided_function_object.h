/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/**
* Header file containing the strided array function object declaration and associated utilities.
*/
#ifndef STDLIB_STRIDED_FUNCTION_OBJECT_H
#define STDLIB_STRIDED_FUNCTION_OBJECT_H

// Note: keep project includes in alphabetical order...
#include <stdint.h>
#include "strided_function_typedefs.h"

/**
* Structure for grouping strided array function information.
*
* @example
* #include <stdlib.h>
* #include <stdio.h>
* #include "stdlib/ndarray_dtypes.h"
* #include "strided_binary.h"
* #include "strided_function_object.h"
* #include "strided_function_typedefs.h"
*
* // Define the function(s) we want to apply to strided arrays:
* double add( double x, double y ) {
*     return x + y;
* }
*
* struct StridedFunctionObject *obj = malloc( sizeof( struct StridedFunctionObject ) );
* if ( obj == NULL ) {
*     printf( "Error allocating memory.\n" );
*     exit( 1 );
* }
*
* // As the function to be applied is a binary function, define a binary strided array interface:
* const char name[] = "binary_strided_array_function";
* obj->name = name;
*
* obj->nin = 2;
* obj->nout = 1;
* obj->narrays = 3; // (obj->nin) + (obj->nout)
*
* // Define a list of strided array functions (in this case, as the function to be applied accepts doubles, we only use strided array functions which handle doubles as function arguments and, for the purposes of this example, we assume that the output strided array is (almost) always a double-precision floating-point number array):
* obj->nfunctions = 8;
*
* StridedArrayFcn functions[] = {
*     stdlib_strided_dd_d,
*     stdlib_strided_ff_f_as_dd_d,
*     stdlib_strided_II_d_as_dd_d,
*     stdlib_strided_ii_d_as_dd_d,
*     stdlib_strided_HH_d_as_dd_d,
*     stdlib_strided_hh_d_as_dd_d,
*     stdlib_strided_BB_d_as_dd_d,
*     stdlib_strided_bb_d_as_dd_d
* };
* obj->functions = functions;
*
* // Define the **strided array** argument types for each strided array function:
* int types[] = {
*     STDLIB_NDARRAY_FLOAT64, STDLIB_NDARRAY_FLOAT64, STDLIB_NDARRAY_FLOAT64,
*     STDLIB_NDARRAY_FLOAT32, STDLIB_NDARRAY_FLOAT32, STDLIB_NDARRAY_FLOAT32,
*     STDLIB_NDARRAY_UINT32, STDLIB_NDARRAY_UINT32, STDLIB_NDARRAY_FLOAT64,
*     STDLIB_NDARRAY_INT32, STDLIB_NDARRAY_INT32, STDLIB_NDARRAY_FLOAT64,
*     STDLIB_NDARRAY_UINT16, STDLIB_NDARRAY_UINT16, STDLIB_NDARRAY_FLOAT64,
*     STDLIB_NDARRAY_INT16, STDLIB_NDARRAY_INT16, STDLIB_NDARRAY_FLOAT64,
*     STDLIB_NDARRAY_UINT8, STDLIB_NDARRAY_UINT8, STDLIB_NDARRAY_FLOAT64,
*     STDLIB_NDARRAY_INT8, STDLIB_NDARRAY_INT8, STDLIB_NDARRAY_FLOAT64
* };
* obj->types = types;
*
* // Define a list of strided array function "data" (in this case, callbacks):
* void *data[] = {
*     (void *)add,
*     (void *)add,
*     (void *)add,
*     (void *)add,
*     (void *)add,
*     (void *)add,
*     (void *)add,
*     (void *)add
* };
* obj->data = data;
*
* // Free allocated memory:
* free( obj );
*/
struct StridedFunctionObject {
	// Strided array function name:
	const char *name;

	// Number of input strided arrays:
	uint32_t nin;

	// Number of output strided arrays:
	uint32_t nout;

	// Total number of strided array arguments (nin + nout):
	uint32_t narrays;

	// Array containing strided array functions:
	StridedArrayFcn *functions;

	// Number of strided array functions:
	uint32_t nfunctions;

	// Array of type "numbers" (as enumerated elsewhere), where the total number of types equals `narrays * nfunctions` and where each set of `narrays` consecutive types (non-overlapping) corresponds to the set of strided array argument types for a corresponding strided array function:
	int *types;

	// Array of void pointers corresponding to the "data" (e.g., callbacks) which should be passed to a respective strided array function (note: the number of pointers should match the number of strided array functions):
	void **data;
};

/**
* Returns a pointer to a dynamically allocated strided array function object.
*/
struct StridedFunctionObject * strided_function_constructor( const char *name, uint32_t nin, uint32_t nout, StridedArrayFcn *functions, uint32_t nfunctions, int *types, void *data[] );

#endif // !STDLIB_STRIDED_FUNCTION_OBJECT_H
