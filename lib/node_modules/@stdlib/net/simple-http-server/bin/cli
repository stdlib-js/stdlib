#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/cli/ctor' );
var ENV = require( '@stdlib/process/env' );
var cwd = require( '@stdlib/process/cwd' );
var httpServer = require( './../lib' );


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var flags;
	var args;
	var opts;
	var cli;
	var v;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line options:
	flags = cli.flags();
	if ( flags.help || flags.version ) {
		return;
	}
	args = cli.args();

	opts = {};
	v = flags.port || ENV.PORT;
	if ( v ) {
		opts.port = parseInt( v, 10 );
	}
	v = flags.maxport || ENV.MAXPORT;
	if ( v ) {
		opts.maxport = parseInt( v, 10 );
	}
	v = flags.hostname || ENV.HOSTNAME;
	if ( v ) {
		opts.hostname = v;
	}
	v = flags.address || ENV.ADDRESS;
	if ( v ) {
		opts.address = v;
	}
	if ( flags.open ) {
		opts.open = true;
	}
	opts.dir = args[ 0 ] || cwd();

	// Run main:
	httpServer( opts );

	/*
	* TODO:
	*
	* [3] Accept a `directory`
	*   => behave like Python SimpleHTTPServer (https://docs.python.org/2/library/simplehttpserver.html and https://docs.python.org/3.5/library/http.server.html)
	*   => when receiving a request matching the directory path or a subdirectory, look for either an `index.html`, an `index.htm`, a `default.html`, or a `default.htm` in that order
	*   => if an index HTML file is found, return that file
	*   => if a request is received for a file ending in `*.js`, if that file is named `bundle.js` and the file does not exist, return a browserified bundle using `index.js` located in the same directory (make the name of this file (index.js) configurable [e.g., allows a browser example to coexist alongside a normal `index.js` file]); otherwise, return the requested file
	*	 => if a request is received for a file ending in `*.md`, render as GFM
	*   => for any other file, return the file
	*   => if no file is requested, return a file/directory (only non-hidden) map (hyperlinked)
	*
	* when listing directory contents, give stats, like size?
	* support providing an extensions map
	* option to enable GFM rendering (should this be separate pkg?)
	* option to enable browserifying `index.js`
	*/
}

main();
