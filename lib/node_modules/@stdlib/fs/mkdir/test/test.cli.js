/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var join = require( 'path' ).join;
var rmdirSync = require( 'fs' ).rmdirSync; // eslint-disable-line node/no-sync
var statSync = require( 'fs' ).statSync; // eslint-disable-line node/no-sync
var resolve = require( 'path' ).resolve;
var exec = require( 'child_process' ).exec;
var tape = require( 'tape' );
var IS_BROWSER = require( '@stdlib/assert/is-browser' );
var IS_WINDOWS = require( '@stdlib/assert/is-windows' );
var EXEC_PATH = require( '@stdlib/process/exec-path' );
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var mkdirSync = require( '@stdlib/fs/mkdir' ).sync;


// VARIABLES //

var fpath = resolve( __dirname, '..', 'bin', 'cli' );
var dpath = resolve( __dirname, 'fixtures' );
var opts = {
	'skip': IS_BROWSER || IS_WINDOWS
};


// FIXTURES //

var PKG_VERSION = require( './../package.json' ).version;


// FUNCTIONS //

/**
* Removes the directory created during testing.
*
* @private
* @param {string} dir - directory to remove
*/
function remove( dir ) {
	var opts = {
		'recursive': true,
		'force': true
	};
	rmdirSync( dir, opts );
}


// TESTS //

tape( 'command-line interface', function test( t ) {
	t.ok( true, __filename );
	t.end();
});

tape( 'when invoked with a `--help` flag, the command-line interface prints the help text to `stderr`', opts, function test( t ) {
	var expected;
	var cmd;

	expected = readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
		'encoding': 'utf8'
	});
	cmd = [
		EXEC_PATH,
		fpath,
		'--help'
	];

	exec( cmd.join( ' ' ), done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
			t.strictEqual( stderr.toString(), expected+'\n', 'expected value' );
		}
		t.end();
	}
});

tape( 'when invoked with a `-h` flag, the command-line interface prints the help text to `stderr`', opts, function test( t ) {
	var expected;
	var cmd;

	expected = readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
		'encoding': 'utf8'
	});
	cmd = [
		EXEC_PATH,
		fpath,
		'-h'
	];

	exec( cmd.join( ' ' ), done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
			t.strictEqual( stderr.toString(), expected+'\n', 'expected value' );
		}
		t.end();
	}
});

tape( 'when invoked with a `--version` flag, the command-line interface prints the version to `stderr`', opts, function test( t ) {
	var cmd = [
		EXEC_PATH,
		fpath,
		'--version'
	];

	exec( cmd.join( ' ' ), done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
			t.strictEqual( stderr.toString(), PKG_VERSION+'\n', 'expected value' );
		}
		t.end();
	}
});

tape( 'when invoked with a `-V` flag, the command-line interface prints the version to `stderr`', opts, function test( t ) {
	var cmd = [
		EXEC_PATH,
		fpath,
		'-V'
	];

	exec( cmd.join( ' ' ), done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
			t.strictEqual( stderr.toString(), PKG_VERSION+'\n', 'expected value' );
		}
		t.end();
	}
});

tape( 'the command-line interface creates a directory', opts, function test( t ) {
	var opts;
	var cmd;
	var dir;

	dir = join( dpath, 'foo' );
	cmd = [
		EXEC_PATH,
		fpath,
		dir
	];
	opts = {};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), 'undefined\n', 'prints return value to `stdout`' );
			t.strictEqual( stderr.toString(), '', 'does not print to `stderr`' );
			t.strictEqual( statSync( dir ).isDirectory(), true, 'creates a directory' );
			remove( dir );
		}
		t.end();
	}
});

tape( 'the command-line interface creates a directory and prints the first diretory path created', opts, function test( t ) {
	var mkopts;
	var opts;
	var cmd;
	var dir;
	var out;

	mkopts = {
		'recursive': true
	};
	dir = join( dpath, 'foo/bar' );
	out = mkdirSync( dir, mkopts );

	if ( out instanceof Error ) {
		t.fail( out.message );
		t.end();
		return;
	}

	remove( join( dpath, 'foo' ) );

	cmd = [
		EXEC_PATH,
		fpath,
		'-p',
		dir
	];
	opts = {};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.fail( error.message );
		} else {
			t.strictEqual( stdout.toString(), out + '\n', 'prints the first diretory path created to `stdout`' );
			t.strictEqual( stderr.toString(), '', 'does not print to `stderr`' );
			remove( join( dpath, 'foo' ) );
		}
		t.end();
	}
});

tape( 'if an error is encountered, the command-line interface prints an error and sets a non-zero exit code', opts, function test( t ) {
	var opts;
	var cmd;
	var dir;

	dir = join( dpath, 'foo/bar' );
	cmd = [
		EXEC_PATH,
		fpath,
		dir
	];
	opts = {};

	exec( cmd.join( ' ' ), opts, done );

	function done( error, stdout, stderr ) {
		if ( error ) {
			t.pass( error.message );
			t.strictEqual( error.code, 1, 'expected exit code' );
		} else {
			t.strictEqual( stdout.toString(), '', 'does not print to `stdout`' );
			t.strictEqual( stderr.toString(), 'Error: beep\n', 'expected value' );
			remove( dir );
		}
		t.end();
	}
});
