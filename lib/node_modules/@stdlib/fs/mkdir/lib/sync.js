/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var dirname = require( 'path' ).dirname;
var resolve = require( 'path' ).resolve;
var mkdir = require( 'fs' ).mkdirSync;  // eslint-disable-line node/no-sync
var stat = require( 'fs' ).statSync;  // eslint-disable-line node/no-sync
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isInteger = require( '@stdlib/assert/is-integer' );
var isObject = require( '@stdlib/assert/is-object' );


// MAIN //

/**
* Synchronously creates a directory.
*
* @param {string} path - directory path
* @param {Object|integer} [options] - options
* @param {integer} [options.mode] - directory mode
* @param {boolean} [options.recursive] - whether to create parent directories
* @throws {TypeError} first argument must be a string
* @throws {TypeError} options argument must be an object, an integer, or undefined
* @returns {(Error|string|undefined)} error or the first directory path created (only present if recursive is true)
*
* @example
* var opts = {
*    'mode': parseInt( '0755', 8 ),
*    'recursive': true
* };
* var out = mkdirSync( './foo/bar', opts );
* if ( out instanceof Error ) {
*   throw out;
* }
* console.log( out );
*/
function mkdirSync( path, options ) {
	var first;
	var opts;
	var par;
	var out;

	if ( !isString( path ) ) {
		throw new TypeError( 'invalid argument. First argument must be a string. Value: `' + path + '`.' );
	}
	if ( options !== void 0 && !isInteger( options ) && !isObject( options ) ) {
		throw new TypeError( 'invalid argument. Options argument must be an object, a integer, or undefined. Value: `' + options + '`.' );
	}
	if ( isInteger( options ) ) {
		options = {
			'mode': options
		};
	}
	if ( !isObject( options ) ) {
		options = {};
	}

	opts = {
		'mode': options.mode || parseInt( '0777', 8 ),
		'recursive': options.recursive || false
	};

	if ( opts.recursive === false ) {
		try {
			return mkdir( path, opts.mode );
		} catch ( error ) {
			return error;
		}
	}

	path = resolve( path );
	par = dirname( path );

	try {
		mkdir( path, opts.mode );
		first = first || path;
		return first;
	} catch ( error ) {
		if ( path === par ) {
			if ( error.code !== 'EEXIST' && error.code !== 'EROFS' && error.code !== 'EISDIR' ) {
				return error;
			}
			if ( !stat( path ).isDirectory() ) {
				return error;
			}
		}

		if ( error.code === 'ENOENT' ) {
			out = mkdirSync( par, opts );
			if ( out instanceof Error ) {
				return out;
			}
			first = first || out;
			mkdirSync( path, opts );
			return first;
		}

		if ( error.code !== 'EEXIST' && error.code !== 'EROFS' ) {
			return error;
		}
		if ( !stat( path ).isDirectory() ) {
			return error;
		}
	}
}


// EXPORTS //

module.exports = mkdirSync;
