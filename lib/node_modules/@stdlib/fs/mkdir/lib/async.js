/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var dirname = require( 'path' ).dirname;
var resolve = require( 'path' ).resolve;
var native = require( 'fs' ).mkdir;
var stat = require( 'fs' ).stat;
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isInteger = require( '@stdlib/assert/is-integer' );
var isFunction = require( '@stdlib/assert/is-function' );
var isObject = require( '@stdlib/assert/is-object' );


// MAIN //

/**
* Asynchronously creates a directory.
*
* @param {string} path - directory path
* @param {Object|integer} [options] - options
* @param {integer} [options.mode] - directory mode
* @param {boolean} [options.recursive] - whether to create parent directories
* @param {Function} clbk - callback to invoke after creating a directory
* @throws {TypeError} first argument must be a string
* @throws {TypeError} options argument must be an object, an integer
* @throws {TypeError} callback argument must be a function
*
* @example
* var opts = {
*    'mode': parseInt( '0755', 8 ),
*    'recursive': true
* };
* function onDir( error, path ) {
*     if ( error ) {
*		  throw error;
*	  }
*	  console.log( path );
* }
* mkdir( './foo/bar', opts, onDir );
*/
function mkdir( path, options, clbk ) {
	var first;
	var opts;
	var par;

	if ( !isString( path ) ) {
		throw new TypeError( 'invalid argument. First argument must be a string. Value: `'+path+'`.' );
	}
	if ( arguments.length < 3 ) {
		clbk = options;
		options = {};
	}
	if ( !isInteger( options ) && !isObject( options ) ) {
		throw new TypeError( 'invalid argument. Options argument must be an object or a integer. Value: `'+options+'`.' );
	}
	if ( isInteger( options ) ) {
		options = {
			'mode': options
		};
	}
	if ( !isFunction( clbk ) ) {
		throw new TypeError( 'invalid argument. Callback argument must be a function. Value: `'+clbk+'`.' );
	}

	opts = {
		'mode': options.mode || parseInt( '0777', 8 ),
		'recursive': options.recursive || false
	};

	if ( opts.recursive === false ) {
		native( path, opts.mode, clbk );
		return;
	}

	path = resolve( path );
	par = dirname( path );

	native( path, opts.mode, onDir );

	/**
	* Callback invoked upon creating a directory.
	*
	* @private
	* @param {Error} [error] - error object
	* @returns {void}
	*/
	function onDir( error ) {
		if ( !error ) {
			first = first || path;
			clbk( null, first );
			return;
		}
		if ( path === par ) {
			if ( error.code !== 'EEXIST' && error.code !== 'EROFS' && error.code !== 'EISDIR' ) {
				clbk( error, first );
				return;
			}
			stat( par, onStat );
			return;
		}

		if ( error.code === 'ENOENT' ) {
			mkdir( par, opts, done );
			return;
		}

		if ( error.code !== 'EEXIST' && error.code !== 'EROFS' ) {
			clbk( error, first );
			return;
		}
		stat( par, onStat );

		/**
		* Callback invoked upon querying a path.
		*
		* @private
		* @param {(Error|null)} err - error object
		* @param {Object} stats - path stats
		*/
		function onStat( err, stats ) {
			if ( err || !stats.isDirectory() ) {
				clbk( error, first );
				return;
			}
			clbk( null, first );
		}

		/**
		* Callback invoked after creating parent directories.
		*
		* @private
		* @param {(Error|null)} err - error object
		* @param {string|undefined} fp - the first directory path created (present only if recursive is true)
		* @returns {void}
		*/
		function done( err, fp ) {
			if ( err ) {
				clbk( err, first );
				return;
			}
			first = first || fp;
			mkdir( path, opts, cb );
		}

		/**
		* Callback invoked to pass the first created path after creating a directory.
		*
		* @private
		* @param {(Error|null)} err - error object
		* @returns {void}
		*/
		function cb( err ) {
			clbk( err, first );
		}
	}
}


// EXPORTS //

module.exports = mkdir;
