/*
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

import mkdir = require( './index' );

const done = ( error: Error | null, path: string | undefined ): void => {
	if ( error || ( path !== void 0 && typeof path !== 'string' ) ) {
		throw error;
	}
};


// TESTS //

// The function does not have a return value...
{
	mkdir( './foo', done ); // $ExpectType void
	mkdir( './bar', 0o755, done ); // $ExpectType void
	mkdir( './baz', { 'mode': 0o755 }, done ); // $ExpectType void
	mkdir( './tmp', { 'mode': 0o755, 'recursive': false }, done ); // $ExpectType void
	mkdir( './var/tmp', { 'mode': 0o755, 'recursive': true }, done ); // $ExpectType void
}

// The compiler throws an error if the function is provided a first argument which is not a string...
{
	mkdir( 1, done ); // $ExpectError
	mkdir( false, done ); // $ExpectError
	mkdir( true, done ); // $ExpectError
	mkdir( null, done ); // $ExpectError
	mkdir( undefined, done ); // $ExpectError
	mkdir( [], done ); // $ExpectError
	mkdir( {}, done ); // $ExpectError
	mkdir( ( x: number ): number => x, done ); // $ExpectError
}

// The compiler throws an error if the function is provided a callback argument which is not a function with the expected signature...
{
	mkdir( './beepboop', 1 ); // $ExpectError
	mkdir( './beepboop', false ); // $ExpectError
	mkdir( './beepboop', true ); // $ExpectError
	mkdir( './beepboop', null ); // $ExpectError
	mkdir( './beepboop', undefined ); // $ExpectError
	mkdir( './beepboop', [] ); // $ExpectError
	mkdir( './beepboop', {} ); // $ExpectError
	mkdir( './beepboop', ( x: number ): number => x ); // $ExpectError
}

// The compiler throws an error if the function is provided an options argument which is not an object or number...
{
	mkdir( './beepboop', 'abc', done ); // $ExpectError
	mkdir( './beepboop', true, done ); // $ExpectError
	mkdir( './beepboop', false, done ); // $ExpectError
	mkdir( './beepboop', null, done ); // $ExpectError
	mkdir( './beepboop', [], done ); // $ExpectError
	mkdir( './beepboop', ( x: number ): number => x, done ); // $ExpectError
}

// The compiler throws an error if the function is provided an `mode` option which is not an number...
{
	mkdir( 'beepboop', { 'mode': 'abc' }, done ); // $ExpectError
	mkdir( 'beepboop', { 'mode': true }, done ); // $ExpectError
	mkdir( 'beepboop', { 'mode': false }, done ); // $ExpectError
	mkdir( 'beepboop', { 'mode': null }, done ); // $ExpectError
	mkdir( 'beepboop', { 'mode': [] }, done ); // $ExpectError
	mkdir( 'beepboop', { 'mode': {} }, done ); // $ExpectError
	mkdir( 'beepboop', { 'mode': ( x: number ): number => x }, done ); // $ExpectError
}

// The compiler throws an error if the function is provided a `recursive` option which is not a boolean...
{
	mkdir( 'beepboop', { 'recursive': 123 }, done ); // $ExpectError
	mkdir( 'beepboop', { 'recursive': 'str' }, done ); // $ExpectError
	mkdir( 'beepboop', { 'recursive': null }, done ); // $ExpectError
	mkdir( 'beepboop', { 'recursive': [] }, done ); // $ExpectError
	mkdir( 'beepboop', { 'recursive': {} }, done ); // $ExpectError
	mkdir( 'beepboop', { 'recursive': ( x: done ): number => x }, done ); // $ExpectError
}

// The compiler throws an error if the function is provided an unsupported number of arguments...
{
	mkdir(); // $ExpectError
	mkdir( 'C:\\foo\\bar\\baz' ); // $ExpectError
}

// The `sync` method returns an error, a string or undefined...
{
	mkdir.sync( './foo' ); // $ExpectType string | Error | undefined
	mkdir.sync( './bar', 0o755, ); // $ExpectType string | Error | undefined
	mkdir.sync( './baz', { 'mode': 0o755 }, ); // $ExpectType string | Error | undefined
	mkdir.sync( './tmp', { 'mode': 0o755, 'recursive': false }, ); // $ExpectType string | Error | undefined
	mkdir.sync( './var/tmp', { 'mode': 0o755, 'recursive': true } ); // $ExpectType string | Error | undefined
}

// The compiler throws an error if the `sync` method is provided a first argument which is not a string...
{
	mkdir.sync( 1 ); // $ExpectError
	mkdir.sync( false ); // $ExpectError
	mkdir.sync( true ); // $ExpectError
	mkdir.sync( null ); // $ExpectError
	mkdir.sync( undefined ); // $ExpectError
	mkdir.sync( [] ); // $ExpectError
	mkdir.sync( {} ); // $ExpectError
	mkdir.sync( ( x: number ): number => x ); // $ExpectError
}

// The compiler throws an error if the function is provided an options argument which is not an object or number...
{
	mkdir.sync( './beepboop', 'abc' ); // $ExpectError
	mkdir.sync( './beepboop', true ); // $ExpectError
	mkdir.sync( './beepboop', false ); // $ExpectError
	mkdir.sync( './beepboop', null ); // $ExpectError
	mkdir.sync( './beepboop', [] ); // $ExpectError
	mkdir.sync( './beepboop', ( x: number ): number => x ); // $ExpectError
}

// The compiler throws an error if the `sync` method is provided an `mode` option which is not an number...
{
	mkdir.sync( 'beepboop', { 'mode': 'abc' } ); // $ExpectError
	mkdir.sync( 'beepboop', { 'mode': true } ); // $ExpectError
	mkdir.sync( 'beepboop', { 'mode': false } ); // $ExpectError
	mkdir.sync( 'beepboop', { 'mode': null } ); // $ExpectError
	mkdir.sync( 'beepboop', { 'mode': [] } ); // $ExpectError
	mkdir.sync( 'beepboop', { 'mode': {} } ); // $ExpectError
	mkdir.sync( 'beepboop', { 'mode': ( x: number ): number => x } ); // $ExpectError
}

// The compiler throws an error if the `sync` method is provided a `recursive` option which is not a boolean...
{
	mkdir.sync( 'beepboop', { 'recursive': 123 } ); // $ExpectError
	mkdir.sync( 'beepboop', { 'recursive': 'str' } ); // $ExpectError
	mkdir.sync( 'beepboop', { 'recursive': null } ); // $ExpectError
	mkdir.sync( 'beepboop', { 'recursive': [] } ); // $ExpectError
	mkdir.sync( 'beepboop', { 'recursive': {} } ); // $ExpectError
	mkdir.sync( 'beepboop', { 'recursive': ( x: done ): number => x } ); // $ExpectError
}

// The compiler throws an error if the `sync` method is provided an unsupported number of arguments...
{
	mkdir.sync(); // $ExpectError
}
