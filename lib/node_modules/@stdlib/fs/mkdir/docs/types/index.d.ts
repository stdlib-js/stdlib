/*
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// TypeScript Version: 4.1

/**
* Interface defining function options.
*/
interface Options {
	/**
	* Directory mode (default: 0o777).
	*/
	mode?: number;

	/**
	* Whether to create parent directories (default: false).
	*/
	recursive?: boolean;
}

/**
* Callback invoked after creating a directory.
*
* @param err - error argument
* @param path - the first directory path created (present only recursive is true)
*/
type Callback = ( err: Error | null, path: string | undefined ) => void;

/**
* Interface for creating a directory.
*/
interface Mkdir {
	/**
	* Asynchronously creates a directory.
	*
	* @param path - directory path
	* @param options - function options
	* @param options.mode - directory mode
	* @param options.recursive - whether to create parent directories
	* @param clbk - callback to invoke after creating a directory
	* @throws must provide valid options
	*
	* @example
	* mkdir( './foo/bar', { 'recursive': true }, onPath );
	*
	* function onDir( error, path ) {
	*     if ( error ) {
	*         throw error;
	*     }
	*     console.log( path );
	* }
	*/
	( path: string, options: Options | number, clbk: Callback ): void;

	/**
	* Asynchronously creates a directory.
	*
	* @param path - directory path
	* @param clbk - callback to invoke after creating a directory
	*
	* @example
	* mkdir( '/baz', onPath );
	*
	* function onPath( error, path ) {
	*     if ( error ) {
	*         throw error;
	*     }
	*     console.log( path );
	* }
	*/
	( path: string, clbk: Callback ): void;

	/**
	* Synchronously creates a directory.
	*
	* @param path - directory path
	* @param options - function options
	* @param options.mode - directory mode
	* @param options.recursive - whether to create parent directories
	* @throws must provide valid options
	* @returns error object, undefined, or path (present only recursive is true)
	*
	* @example
	* var out = mkdir.sync( './bar/baz', { 'recursive': true } );
	*/
	sync( path: string, options?: Options | number ): Error | string | undefined;
}

/**
* Asynchronously creates a directory.
*
* @param path - directory path
* @param options - function options
* @param options.mode - directory mode
* @param options.recursive - whether to create parent directories
* @param clbk - callback to invoke after creating a directory
* @throws must provide valid options
*
* @example
* mkdir( './foo/bar', onDir );
*
* function onDir( error, path ) {
*     if ( error ) {
*         throw error;
*     }
*     console.log( path );
* }
*
* @example
* var out = mkdir.sync( './foo/bar' );
*/
declare var mkdir: Mkdir;


// EXPORTS //

export = mkdir;
