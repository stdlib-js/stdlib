/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var rmdirSync = require( 'fs' ).rmdirSync;  // eslint-disable-line node/no-sync
var join = require( 'path' ).join;
var bench = require( '@stdlib/bench' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var pkg = require( './../package.json' ).name;
var mkdir = require( './../lib' );


// VARIABLES //

var DIR = join( __dirname, 'fixtures' );


// FUNCTIONS //

/**
* Removes the directory created during a benchmark.
*
* @private
* @param {string} dir - directory to remove
*/
function remove( dir ) {
	var opts;

	opts = {
		'recursive': true,
		'force': true
	};
	rmdirSync( dir, opts);
}


// MAIN //

bench( pkg, function benchmark( b ) {
	var opts;
	var dir;
	var i;

	opts = {
		'mode': parseInt( '0755', 8 ),
		'recursive': true
	};
	i = 0;
	b.tic();

	return next();

	function next() {
		i += 1;
		if ( i <= b.iterations ) {
			dir = DIR + '/' + i.toString();
			return mkdir(dir, opts, onDir);
		}
		b.toc();
		b.pass( 'benchmark finished' );

		remove( dir );
		b.end();
	}

	function onDir( error, path ) {
		if ( error ) {
			b.fail( error );
		}
		if ( !isString( path ) && path !== void 0) {
			b.fail( 'should be a string or undefined' );
		}
		next();
	}
});

bench( pkg+':sync', function benchmark( b ) {
	var opts;
	var out;
	var dir;
	var i;

	opts = {
		'mode': parseInt( '0755', 8 ),
		'recursive': true
	};

	b.tic();
	for ( i = 0; i < b.iterations; i++ ) {
		dir = DIR + '/' + i.toString();
		out = mkdir.sync( dir, opts );
		if ( out instanceof Error) {
			b.fail( out );
		}
		if ( !isString( out ) && out !== void 0 ) {
			b.fail( 'should be a string or undefined' );
		}
		remove( dir );
	}
	b.toc();
	if ( out instanceof Error) {
		b.fail( out );
	}
	b.pass( 'benchmark finished' );
	b.end();
});
