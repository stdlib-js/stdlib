/*
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

import resolveParentPathsBy = require( './index' );

/**
* Callback to invoke after processing a path.
*
* @param error - error object or null
* @param result - test result
*/
type Callback = ( error: Error | null, result: boolean ) => void;

/**
* Checks whether a path passes a test.
*
* @param path - resolved path
* @param next - callback
*/
function predicate( path: string, next: Callback ): void {
	next( null, ( path === path ) );
}

/**
* Checks whether a path passes a test.
*
* @param path - resolved path
*/
function predicateSync( path: string ): boolean {
	return ( path === path );
}

/**
* Callback function.
*
* @param error - error object
* @param path - resolved path
*/
function done( error: Error | null, paths: Array<string|null> ): void {
	if ( error || paths === null ) {
		throw error;
	}
}


// TESTS //

// The function does not have a return value...
{
	resolveParentPathsBy( [ 'package.json' ], predicate, done ); // $ExpectType void
	resolveParentPathsBy( [ 'package.json' ], {}, predicate, done ); // $ExpectType void
}

// The compiler throws an error if the function is provided a first argument which is not an array of strings...
{
	resolveParentPathsBy( 123, predicate, done ); // $ExpectError
	resolveParentPathsBy( false, predicate, done ); // $ExpectError
	resolveParentPathsBy( true, predicate, done ); // $ExpectError
	resolveParentPathsBy( null, predicate, done ); // $ExpectError
	resolveParentPathsBy( undefined, predicate, done ); // $ExpectError
	resolveParentPathsBy( {}, predicate, done ); // $ExpectError
	resolveParentPathsBy( ( x: number ): number => x, predicate, done ); // $ExpectError
	resolveParentPathsBy( 'beep', predicate, done ); // $ExpectError
	resolveParentPathsBy( [ 1, 2 ], predicate, done ); // $ExpectError

	resolveParentPathsBy( 123, {}, predicate, done ); // $ExpectError
	resolveParentPathsBy( false, {}, predicate, done ); // $ExpectError
	resolveParentPathsBy( true, {}, predicate, done ); // $ExpectError
	resolveParentPathsBy( null, {}, predicate, done ); // $ExpectError
	resolveParentPathsBy( undefined, {}, predicate, done ); // $ExpectError
	resolveParentPathsBy( {}, {}, predicate, done ); // $ExpectError
	resolveParentPathsBy( ( x: number ): number => x, {}, predicate, done ); // $ExpectError
	resolveParentPathsBy( 'beep', {}, predicate, done ); // $ExpectError
	resolveParentPathsBy( [ 1, 2 ], {}, predicate, done ); // $ExpectError
}

// The compiler throws an error if the function is provided a predicate function argument which is not a function with the expected signature...
{
	resolveParentPathsBy( [ '/var/log/' ], 1, done ); // $ExpectError
	resolveParentPathsBy( [ '/var/log/' ], false, done ); // $ExpectError
	resolveParentPathsBy( [ '/var/log/' ], true, done ); // $ExpectError
	resolveParentPathsBy( [ '/var/log/' ], null, done ); // $ExpectError
	resolveParentPathsBy( [ '/var/log/' ], undefined, done ); // $ExpectError
	resolveParentPathsBy( [ '/var/log/' ], [], done ); // $ExpectError
	resolveParentPathsBy( [ '/var/log/' ], {}, done ); // $ExpectError
	resolveParentPathsBy( [ '/var/log/' ], ( x: number ): number => x, done ); // $ExpectError

	resolveParentPathsBy( [ '/var/log/' ], {}, 1, done ); // $ExpectError
	resolveParentPathsBy( [ '/var/log/' ], {}, false, done ); // $ExpectError
	resolveParentPathsBy( [ '/var/log/' ], {}, true, done ); // $ExpectError
	resolveParentPathsBy( [ '/var/log/' ], {}, null, done ); // $ExpectError
	resolveParentPathsBy( [ '/var/log/' ], {}, undefined, done ); // $ExpectError
	resolveParentPathsBy( [ '/var/log/' ], {}, [], done ); // $ExpectError
	resolveParentPathsBy( [ '/var/log/' ], {}, {}, done ); // $ExpectError
	resolveParentPathsBy( [ '/var/log/' ], {}, ( x: number ): number => x, done ); // $ExpectError
}

// The compiler throws an error if the function is provided a callback argument which is not a function with the expected signature...
{
	resolveParentPathsBy( [ '/var/log/' ], predicate, 1 ); // $ExpectError
	resolveParentPathsBy( [ '/var/log/' ], predicate, false ); // $ExpectError
	resolveParentPathsBy( [ '/var/log/' ], predicate, true ); // $ExpectError
	resolveParentPathsBy( [ '/var/log/' ], predicate, null ); // $ExpectError
	resolveParentPathsBy( [ '/var/log/' ], predicate, undefined ); // $ExpectError
	resolveParentPathsBy( [ '/var/log/' ], predicate, [] ); // $ExpectError
	resolveParentPathsBy( [ '/var/log/' ], predicate, {} ); // $ExpectError
	resolveParentPathsBy( [ '/var/log/' ], predicate, ( x: number ): number => x ); // $ExpectError

	resolveParentPathsBy( [ '/var/log/' ], {}, predicate, 1 ); // $ExpectError
	resolveParentPathsBy( [ '/var/log/' ], {}, predicate, false ); // $ExpectError
	resolveParentPathsBy( [ '/var/log/' ], {}, predicate, true ); // $ExpectError
	resolveParentPathsBy( [ '/var/log/' ], {}, predicate, null ); // $ExpectError
	resolveParentPathsBy( [ '/var/log/' ], {}, predicate, undefined ); // $ExpectError
	resolveParentPathsBy( [ '/var/log/' ], {}, predicate, [] ); // $ExpectError
	resolveParentPathsBy( [ '/var/log/' ], {}, predicate, {} ); // $ExpectError
	resolveParentPathsBy( [ '/var/log/' ], {}, predicate, ( x: number ): number => x ); // $ExpectError
}

// The compiler throws an error if the function is provided an options argument which is not an object...
{
	resolveParentPathsBy( [ 'package.json' ], '5', predicate, done ); // $ExpectError
	resolveParentPathsBy( [ 'package.json' ], 5, predicate, done ); // $ExpectError
	resolveParentPathsBy( [ 'package.json' ], true, predicate, done ); // $ExpectError
	resolveParentPathsBy( [ 'package.json' ], false, predicate, done ); // $ExpectError
	resolveParentPathsBy( [ 'package.json' ], null, predicate, done ); // $ExpectError
	resolveParentPathsBy( [ 'package.json' ], undefined, predicate, done ); // $ExpectError
	resolveParentPathsBy( [ 'package.json' ], [], predicate, done ); // $ExpectError
	resolveParentPathsBy( [ 'package.json' ], ( x: number ): number => x, predicate, done ); // $ExpectError
}

// The compiler throws an error if the function is provided an `dir` option which is not a string...
{
	resolveParentPathsBy( [ 'package.json' ], { 'dir': 123 }, predicate, done ); // $ExpectError
	resolveParentPathsBy( [ 'package.json' ], { 'dir': true }, predicate, done ); // $ExpectError
	resolveParentPathsBy( [ 'package.json' ], { 'dir': false }, predicate, done ); // $ExpectError
	resolveParentPathsBy( [ 'package.json' ], { 'dir': null }, predicate, done ); // $ExpectError
	resolveParentPathsBy( [ 'package.json' ], { 'dir': [] }, predicate, done ); // $ExpectError
	resolveParentPathsBy( [ 'package.json' ], { 'dir': {} }, predicate, done ); // $ExpectError
	resolveParentPathsBy( [ 'package.json' ], { 'dir': ( x: number ): number => x }, predicate, done ); // $ExpectError
}

// The compiler throws an error if the function is provided an `mode` option which is not a recognized string...
{
	resolveParentPathsBy( [ 'package.json' ], { 'mode': 'beep' }, predicate, done ); // $ExpectError
	resolveParentPathsBy( [ 'package.json' ], { 'mode': 123 }, predicate, done ); // $ExpectError
	resolveParentPathsBy( [ 'package.json' ], { 'mode': true }, predicate, done ); // $ExpectError
	resolveParentPathsBy( [ 'package.json' ], { 'mode': false }, predicate, done ); // $ExpectError
	resolveParentPathsBy( [ 'package.json' ], { 'mode': null }, predicate, done ); // $ExpectError
	resolveParentPathsBy( [ 'package.json' ], { 'mode': [] }, predicate, done ); // $ExpectError
	resolveParentPathsBy( [ 'package.json' ], { 'mode': {} }, predicate, done ); // $ExpectError
	resolveParentPathsBy( [ 'package.json' ], { 'mode': ( x: number ): number => x }, predicate, done ); // $ExpectError
}

// The compiler throws an error if the function is provided an unsupported number of arguments...
{
	resolveParentPathsBy(); // $ExpectError
	resolveParentPathsBy( [ 'C:\\foo\\bar\\baz' ] ); // $ExpectError
	resolveParentPathsBy( [ 'C:\\foo\\bar\\baz' ], {} ); // $ExpectError
	resolveParentPathsBy( [ 'C:\\foo\\bar\\baz' ], predicate ); // $ExpectError
	resolveParentPathsBy( [ 'C:\\foo\\bar\\baz' ], {}, predicate ); // $ExpectError
	resolveParentPathsBy( [ 'C:\\foo\\bar\\baz' ], {}, predicate, done, {} ); // $ExpectError
}

// Attached to main export is a `sync` method which returns an array...
{
	resolveParentPathsBy.sync( [ 'package.json' ], predicateSync ); // $ExpectType (string | null)[]
	resolveParentPathsBy.sync( [ 'package.json' ], {}, predicateSync ); // $ExpectType (string | null)[]
}

// The compiler throws an error if the `sync` method is provided a first argument which is not an array of strings...
{
	resolveParentPathsBy.sync( 123, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( false, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( true, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( null, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( undefined, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( {}, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( ( x: number ): number => x, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( 'beep', predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( [ 1, 2 ], predicateSync ); // $ExpectError

	resolveParentPathsBy.sync( 123, {}, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( false, {}, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( true, {}, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( null, {}, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( undefined, {}, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( {}, {}, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( ( x: number ): number => x, {}, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( 'beep', {}, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( [ 1, 2 ], {}, predicateSync ); // $ExpectError
}

// The compiler throws an error if the `sync` method is provided a predicate function argument which is not a function with the expected signature...
{
	resolveParentPathsBy.sync( [ 'package.json' ], 123 ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], false ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], true ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], null ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], undefined ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], [] ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], {} ); // $ExpectError

	resolveParentPathsBy.sync( [ 'package.json' ], {}, 123 ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], {}, false ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], {}, true ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], {}, null ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], {}, undefined ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], {}, [] ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], {}, {} ); // $ExpectError
}

// The compiler throws an error if the `sync` method is provided an options argument which is not an object...
{
	resolveParentPathsBy.sync( [ 'package.json' ], '5', predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], 5, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], true, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], false, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], null, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], [], predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], ( x: number ): number => x, predicateSync ); // $ExpectError
}

// The compiler throws an error if the `sync` method is provided an `dir` option which is not a string...
{
	resolveParentPathsBy.sync( [ 'package.json' ], { 'dir': 123 }, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], { 'dir': true }, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], { 'dir': false }, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], { 'dir': null }, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], { 'dir': [] }, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], { 'dir': {} }, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], { 'dir': ( x: number ): number => x }, predicateSync ); // $ExpectError
}

// The compiler throws an error if the `sync` method is provided an `mode` option which is not a recognized string...
{
	resolveParentPathsBy.sync( [ 'package.json' ], { 'mode': 'beep' }, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], { 'mode': 123 }, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], { 'mode': true }, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], { 'mode': false }, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], { 'mode': null }, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], { 'mode': [] }, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], { 'mode': {} }, predicateSync ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], { 'mode': ( x: number ): number => x }, predicateSync ); // $ExpectError
}

// The compiler throws an error if the `sync` method is provided an unsupported number of arguments...
{
	resolveParentPathsBy.sync(); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], {}, {} ); // $ExpectError
	resolveParentPathsBy.sync( [ 'package.json' ], {}, predicateSync, {} ); // $ExpectError
}
