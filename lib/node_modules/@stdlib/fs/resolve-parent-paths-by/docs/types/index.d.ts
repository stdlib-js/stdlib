/*
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// TypeScript Version: 4.1

/**
* Interface defining function options.
*/
interface Options {
	/**
	* Base directory from which to search (default: current working directory).
	*/
	dir?: string;

	/**
	* Mode of operation.
	*
	* ## Notes
	*
	* -   The following modes are supported:
	*
	*     -   **first**: return the first resolved path.
	*     -   **some**: return one or more paths resolved within the first directory level containing a match.
	*     -   **all**: return all resolved paths within the first directory level containing matches for all provided paths.
	*     -   **each**: independently return the first resolved path for each path at any directory level.
	*
	*     Default: `'all'`.
	*
	* -   In `'some'` mode, the return order of resolved paths is not guaranteed.
	*/
	mode?: 'first' | 'some' | 'all' | 'each';
}

/**
* Callback function.
*/
type Nullary = () => void;

/**
* Callback function.
*
* @param error - encountered error or null
*/
type Unary = ( error: Error | null ) => void;

/**
* Callback function.
*
* @param error - encountered error or null
* @param result - test result
*/
type Binary = ( error: Error | null, result: boolean ) => void;

/**
* Callback function.
*
* @param error - encountered error or null
* @param result - test result
*/
type NextCallback = Nullary | Unary | Binary;

/**
* Checks whether a resolved path passes a test.
*
* @param path - resolved path
* @returns test result
*/
type SyncPredicate = ( path: string ) => boolean;

/**
* Checks whether a resolved path passes a test.
*
* @param path - resolved path
* @param next - callback which should be called once the `predicate` function has finished processing a resolved path
*/
type AsyncPredicate = ( path: string, next: NextCallback ) => void;

/**
* Callback invoked after resolving paths according to a predicate function.
*
* @param error - error object
* @param path - resolved path
*/
type DoneCallback = ( err: Error | null, paths: Array<string|null> ) => void;

/**
* Interface for resolving paths from a set of paths according to a predicate function by walking parent directories.
*/
interface resolveParentPathsBy {
	/**
	* Asynchronously resolves paths from a set of paths according to a predicate function by walking parent directories.
	* 
	* ## Notes
	*
	* -   If unable to resolve paths, as per each mode function returns as following:
	*	  -   `first`: empty array
	*	  -   `some`: empty array
	*	  -   `all`: empty array
	*	  -   `each`: Array<null>
	*
	* @param paths - path to resolve
	* @param options - function options
	* @param options.dir - base directory
	* @param options.mode - mode of operation
	* @param predicate - predicate function
	* @param clbk - callback to invoke after resolving paths
	* @throws must provide valid options
	*
	* @example
	* resolveParentPathsBy( [ 'package.json', 'package-lock.json' ], { 'dir': __dirname, 'mode': 'some' }, predicate, onPaths );
	*
	* function predicate( path, next ) {
	*     next( null, true );
	* }
	*
	* function onPaths( error, paths ) {
	*     if ( error ) {
	*         throw error;
	*     }
	*     console.log( paths );
	* }
	*/
	( paths: Array<string>, options: Options, predicate: AsyncPredicate, clbk: DoneCallback ): void;

	/**
	* Asynchronously resolves paths from a set of paths according to a predicate function by walking parent directories.
	*
	* ## Notes
	*
	* -   If unable to resolve paths, as per each mode function returns as following:
	*	  -   `first`: empty array
	*	  -   `some`: empty array
	*	  -   `all`: empty array
	*	  -   `each`: Array<null>
	*
	* @param paths - path to resolve
	* @param predicate - predicate function
	* @param clbk - callback to invoke after resolving paths
	*
	* @example
	* resolveParentPathsBy( [ 'package.json', 'package-lock.json' ], predicate, onPaths );
	*
	* function predicate( path, next ) {
	*     next( null, true );
	* }
	*
	* function onPaths( error, paths ) {
	*     if ( error ) {
	*         throw error;
	*     }
	*     console.log( paths );
	* }
	*/
	( paths: Array<string>, predicate: AsyncPredicate, clbk: DoneCallback ): void;

	/**
	* Synchronously resolves paths from a set of paths according to a predicate function by walking parent directories.
	*
	* ## Notes
	*
	* -   If unable to resolve paths, as per each mode function returns as following:
	*	  -   `first`: empty array
	*	  -   `some`: empty array
	*	  -   `all`: empty array
	*	  -   `each`: Array<null>
	*
	* @param paths - paths to resolve
	* @param options - function options
	* @param options.dir - base directory
	* @param options.mode - mode of operation
	* @param predicate - predicate function
	* @throws must provide valid options
	* @returns resolved paths
	*
	* @example
	* function predicate() {
	*     return true;
	* }
	*
	* var paths = resolveParentPathsBy.sync( [ 'package.json', 'package-lock.json' ], { 'dir': __dirname, 'mode': 'some' }, predicate );
	* // e.g., returns [...]
	*/
	sync( paths: Array<string>, options: Options, predicate: SyncPredicate ): Array<string|null>;

	/**
	* Synchronously resolves paths from a set of paths according to a predicate function by walking parent directories.
	*
	* ## Notes
	*
	* -   If unable to resolve paths, as per each mode function returns as following:
	*	  -   `first`: empty array
	*	  -   `some`: empty array
	*	  -   `all`: empty array
	*	  -   `each`: Array<null>
	*
	* @param paths - paths to resolve
	* @param predicate - predicate function
	* @throws must provide valid options
	* @returns resolved paths
	*
	* @example
	* function predicate() {
	*     return true;
	* }
	*
	* var paths = resolveParentPathsBy.sync( [ 'package.json', 'package-lock.json' ], predicate );
	* // e.g., returns [...]
	*/
	sync( paths: Array<string>, predicate: SyncPredicate ): Array<string|null>;
}

/**
* Asynchronously resolves paths from a set of paths according to a predicate function by walking parent directories.
*
* @param paths - paths to resolve
* @param options - function options
* @param options.dir - base directory
* @param options.mode - mode of operation
* @param predicate - predicate function
* @param clbk - callback to invoke after resolving paths
* @throws must provide valid options
*
* @example
* resolveParentPathsBy( [ 'package.json', 'package-lock.json' ], predicate, onPaths );
*
* function predicate( path, next ) {
*     next( null, true );
* }
*
* function onPaths( error, paths ) {
*     if ( error ) {
*         throw error;
*     }
*     console.log( paths );
* }
*
* @example
* var paths = resolveParentPathsBy.sync( [ 'package.json', 'package-lock.json' ], predicate );
* // e.g., returns [...]
*/
declare var resolveParentPathsBy: resolveParentPathsBy;


// EXPORTS //

export = resolveParentPathsBy;
