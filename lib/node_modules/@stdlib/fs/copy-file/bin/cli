#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/cli/ctor' );
var cwd = require( '@stdlib/process/cwd' );
var copyFile = require( './../lib' );


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var flags;
	var dest;
	var args;
	var mode;
	var cli;
	var src;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync(resolve( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line options:
	flags = cli.flags();
	if ( flags.help || flags.version ) {
		return;
	}

	// Get any provided command-line arguments:
	args = cli.args();

	mode = 0;
	if ( args.length < 2 && ( !flags.source || !flags.destination ) ) {
		return cli.error( new Error( 'Both source and destination files must be provided' ) );
	}
	if ( flags.source ) {
		src = flags.source;
	}
	if ( flags.destination ) {
		dest = flags.destination;
	}
	if ( flags.mode ) {
		mode = parseInt( flags.mode, 8 );
	}
	if ( args.length >= 2 ) {
		src = resolve( cwd(), args[0] );
		dest = resolve( cwd(), args[1] );
	}

	// Perform copying...
	copyFile( src, dest, mode, onCopy );

	/**
	* Callback invoked upon copying the file.
	*
	* @private
	* @param {Error} [err] - error object
	* @returns {void}
	*/
	function onCopy( err ) {
		if ( err ) {
			return cli.error( err );
		}
	}
}

main();
