/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var constants = require( 'fs' ).constants;
var join = require( 'path' ).join;
var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var readFile = require( '@stdlib/fs/read-file' ).sync;
var writeFile = require( '@stdlib/fs/write-file' ).sync;
var IS_BROWSER = require( '@stdlib/assert/is-browser' );
var copyFile = require( './../lib/sync.js' );


// VARIABLES //

// Don't run tests in the browser...for now...
var opts = {
	'skip': IS_BROWSER // FIXME
};
var SRC = join( __dirname, 'fixtures', 'src.txt' );
var DEST = join( __dirname, 'fixtures', 'dest.txt' );


// FUNCTIONS //

/**
* Restores a fixture file.
*
* ## Notes
*
* -   Every function which has the **potential** to affect the fixture file should invoke this function immediately before calling `t.end()`.
*
* @private
*/
function restore() {
	writeFile( DEST, '' );
}


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof copyFile, 'function', 'main export is a function' );
	t.end();
});

tape( 'this function copies data from src file to dest file (string)', opts, function test( t ) {
	var expected;
	var actual;

	expected = readFile( SRC, 'utf8' );
	copyFile( SRC, DEST );
	actual = readFile( DEST, 'utf8' );

	t.strictEqual( actual, expected, 'file contains expected data' );

	restore();
	t.end();
});

tape( 'this function copies data from src file to dest file (buffer)', opts, function test( t ) {
	var expected;
	var actual;

	expected = readFile( SRC, 'utf8' );
	copyFile( SRC, DEST );
	actual = readFile( DEST, 'utf8' );

	t.strictEqual( actual, expected, 'file contains expected data' );

	restore();
	t.end();
});

tape( 'the function copies data to a file using provided mode', opts, function test( t ) {
	var expected = '';
	var actual;

	copyFile( SRC, DEST, constants.COPYFILE_EXCL );
	actual = readFile( DEST, 'utf8' ); // destination file won't be modified if it exists

	t.strictEqual( actual, expected, 'file contains expected data' );

	restore();
	t.end();
});

tape( 'if the function encounters an error, the function returns the error', opts, function test( t ) {
	var expected;
	var actual;
	var file;
	var err;

	file = 'beepboopbapbop/dkfjldjHRDfaklsjf/bdlfalfas/bkldflakfjas'; // non-existent directory path
	err = copyFile( file, DEST );
	if ( err ) {
		t.strictEqual( err instanceof Error, true, err.message );
	}

	expected = '';
	actual = readFile( DEST, 'utf8' );
	t.strictEqual( actual, expected, 'file contains expected contents' );

	restore();
	t.end();
});

tape( 'if the function encounters an error, the function returns the error (mode provided)', opts, function test( t ) {
	var expected;
	var actual;
	var file;
	var err;

	file = 'beepboopbapbop/dkfjldjHRDfaklsjf/bdlfalfas/bkldflakfjas'; // non-existent directory path

	err = writeFile( file, DEST, constants.COPYFILE_EXCL );
	if ( err ) {
		t.strictEqual( err instanceof Error, true, err.message );
	}

	expected = '';
	actual = readFile( DEST, 'utf8' );
	t.strictEqual( actual, expected, 'file contains expected contents' );

	restore();
	t.end();
});

tape( 'the function falls back to read/write streams when fs.copyFileSync is unavailable', function test( t ) {
	var copyFileSync;
	var expected;
	var actual;
	var err;

	copyFileSync = proxyquire( './../lib/sync.js', {
		'fs': {} // Intentionally omit copyFileSync
	});

	err = copyFileSync( SRC, DEST );

	t.strictEqual( err, null, 'returns expected value' );

	expected = readFile( SRC, 'utf8' );
	actual = readFile( DEST, 'utf8' );

	t.strictEqual( actual, expected, 'file contains expected data' );

	restore();
	t.end();
});
