/*
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

import copyFile = require( './index' );

const onCopy = ( error: Error | null ): void => {
	if ( error ) {
		throw error;
	}
};


// TESTS //

// The function does not have a return value...
{
	copyFile( 'src.txt', 'dest.txt', onCopy ); // $ExpectType void
}

// The compiler throws an error if the function is provided a first argument which is not a string or buffer...
{
	copyFile( 22, 'dest.txt', onCopy ); // $ExpectError
	copyFile( false, 'dest.txt', onCopy ); // $ExpectError
	copyFile( true, 'dest.txt', onCopy ); // $ExpectError
	copyFile( null, 'dest.txt', onCopy ); // $ExpectError
	copyFile( undefined, 'dest.txt', onCopy ); // $ExpectError
	copyFile( [], 'dest.txt', onCopy ); // $ExpectError
	copyFile( {}, 'dest.txt', onCopy ); // $ExpectError
	copyFile( ( x: number ): number => x, 'dest.txt', onCopy ); // $ExpectError
}

// The compiler throws an error if the function is provided a second argument which is not a string or buffer...
{
	copyFile( 'src.txt', 22, onCopy ); // $ExpectError
	copyFile( 'src.txt', false, onCopy ); // $ExpectError
	copyFile( 'src.txt', true, onCopy ); // $ExpectError
	copyFile( 'src.txt', null, onCopy ); // $ExpectError
	copyFile( 'src.txt', undefined, onCopy ); // $ExpectError
	copyFile( 'src.txt', [], onCopy ); // $ExpectError
	copyFile( 'src.txt', {}, onCopy ); // $ExpectError
	copyFile( 'src.txt', ( x: number ): number => x, onCopy ); // $ExpectError
}

// The compiler throws an error if the function is provided a callback argument which is not a function with the expected signature...
{
	copyFile( 'src.txt', 'dest.txt', 'abc' ); // $ExpectError
	copyFile( 'src.txt', 'dest.txt', 22 ); // $ExpectError
	copyFile( 'src.txt', 'dest.txt', false ); // $ExpectError
	copyFile( 'src.txt', 'dest.txt', true ); // $ExpectError
	copyFile( 'src.txt', 'dest.txt', null ); // $ExpectError
	copyFile( 'src.txt', 'dest.txt', undefined ); // $ExpectError
	copyFile( 'src.txt', 'dest.txt', [] ); // $ExpectError
	copyFile( 'src.txt', 'dest.txt', {} ); // $ExpectError
	copyFile( 'src.txt', 'dest.txt', ( x: number ): number => x ); // $ExpectError
}

// The compiler throws an error if the function is provided a mode argument which is not a number...
{
	copyFile( 'src.txt', 'dest.txt', false, onCopy ); // $ExpectError
	copyFile( 'src.txt', 'dest.txt', true, onCopy ); // $ExpectError
	copyFile( 'src.txt', 'dest.txt', null, onCopy ); // $ExpectError
	copyFile( 'src.txt', 'dest.txt', undefined, onCopy ); // $ExpectError
	copyFile( 'src.txt', 'dest.txt', 'mode', onCopy ); // $ExpectError
	copyFile( 'src.txt', 'dest.txt', {}, onCopy ); // $ExpectError
	copyFile( 'src.txt', 'dest.txt', [], onCopy ); // $ExpectError
	copyFile( 'src.txt', 'dest.txt', ( x: number ): number => x, onCopy ); // $ExpectError
}

// The compiler throws an error if the function is provided an unsupported number of arguments...
{
	copyFile( ); // $ExpectError
	copyFile( 'C:\\foo\\bar\\baz\\srrc.txt' ); // $ExpectError
	copyFile( 'C:\\foo\\bar\\baz\\src.txt', 'dest.txt' ); // $ExpectError
}

// Attached to main export is a `sync` method which returns an error or null...
{
	copyFile.sync( 'src.txt', 'dest.txt' ); // $ExpectType Error | null
}

// The compiler throws an error if the `sync` method is provided a first argument which is not a string or buffer...
{
	copyFile.sync( false, 'dest.txt' ); // $ExpectError
	copyFile.sync( 232, 'dest.txt' ); // $ExpectError
	copyFile.sync( true, 'dest.txt' ); // $ExpectError
	copyFile.sync( null, 'dest.txt' ); // $ExpectError
	copyFile.sync( undefined, 'dest.txt' ); // $ExpectError
	copyFile.sync( [], 'dest.txt' ); // $ExpectError
	copyFile.sync( {}, 'dest.txt' ); // $ExpectError
	copyFile.sync( ( x: number ): number => x, 'dest.txt' ); // $ExpectError
}

// The compiler throws an error if the `sync` method is provided a second argument which is not a string or buffer...
{
	copyFile.sync( 'src.txt', false ); // $ExpectError
	copyFile.sync( 'src.txt', 2322 ); // $ExpectError
	copyFile.sync( 'src.txt', true ); // $ExpectError
	copyFile.sync( 'src.txt', null ); // $ExpectError
	copyFile.sync( 'src.txt', undefined ); // $ExpectError
	copyFile.sync( 'src.txt', [] ); // $ExpectError
	copyFile.sync( 'src.txt', {} ); // $ExpectError
	copyFile.sync( 'src.txt', ( x: number ): number => x ); // $ExpectError
}

// The compiler throws an error if the `sync` method is provided a mode argument which is not a number...
{
	copyFile.sync( 'src.txt', 'dest.txt', null ); // $ExpectError
	copyFile.sync( 'src.txt', 'dest.txt', true ); // $ExpectError
	copyFile.sync( 'src.txt', 'dest.txt', false ); // $ExpectError
	copyFile.sync( 'src.txt', 'dest.txt', 'mode' ); // $ExpectError
	copyFile.sync( 'src.txt', 'dest.txt', [] ); // $ExpectError
	copyFile.sync( 'src.txt', 'dest.txt', {} ); // $ExpectError
	copyFile.sync( 'src.txt', 'dest.txt', ( x: number ): number => x ); // $ExpectError
}

// The compiler throws an error if the `sync` method is provided an unsupported number of arguments...
{
	copyFile.sync(); // $ExpectError
	copyFile.sync( 'src.txt' ); // $ExpectError
}
