/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var fs = require( 'fs' );
var readFile = require( '@stdlib/fs/read-file' ).sync;
var writeFile = require( '@stdlib/fs/write-file' ).sync;
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isBuffer = require( '@stdlib/assert/is-buffer' );
var format = require( '@stdlib/string/format' );


// VARIABLES //

/* eslint-disable node/no-unsupported-features/node-builtins, node/no-sync */
var copyFile;
if ( typeof fs.copyFileSync === 'function' ) {
	copyFile = fs.copyFileSync;
}
/* eslint-enable node/no-unsupported-features/node-builtins, node/no-sync */


// MAIN //

/**
* Synchronously copies `src` to `dest`. By default, `dest` is overwritten if it already exists.
*
* @param {(string|Buffer)} src - source filename to copy
* @param {(string|Buffer)} dest - destination filename of the copy operation
* @param {integer} [mode] - modifiers for copy operation
* @throws {TypeError} first argument must be either a string or a Buffer
* @throws {TypeError} second argument must be either a string or a Buffer
* @throws {TypeError} third argument must be a number
* @returns {(Error|null)} error object or null
*
* @example
* var err = copyFileSync( 'src.txt', 'dest.txt' );
* if ( err instanceof Error ) {
*     console.error( err.message );
* }
*/
function copyFileSync( src, dest, mode ) {
	var data;
	if ( arguments.length < 3 ) {
		mode = null;
	}
	if ( !isString( src ) && !isBuffer( src ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be either a string or a Buffer. Value: `%s`.', src ) );
	}
	if ( !isString( dest ) && !isBuffer( dest ) ) {
		throw new TypeError( format( 'invalid argument. Second argument must be either a string or a Buffer. Value: `%s`.', dest ) );
	}
	if ( !isNumber( mode ) && mode !== null ) {
		throw new TypeError( format( 'invalid argument. Third argument must be a number. Value: `%s`.', mode ) );
	}
	try {
		if ( copyFile ) {
			copyFile( src, dest, mode );
		} else {
			data = readFile( src );
			writeFile( dest, data );
		}
	} catch ( error ) {
		return error;
	}
	return null;
}


// EXPORTS //

module.exports = copyFileSync;
