/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var fs = require( 'fs' );
var createReadStream = require( 'fs' ).createReadStream;
var createWriteStream = require( 'fs' ).createWriteStream;
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isBuffer = require( '@stdlib/assert/is-buffer' );
var isFunction = require( '@stdlib/assert/is-function' );
var format = require( '@stdlib/string/format' );


// VARIABLES //

/* eslint-disable node/no-unsupported-features/node-builtins */
var copy;
if ( typeof fs.copyFile === 'function' ) {
	copy = fs.copyFile;
}
/* eslint-enable node/no-unsupported-features/node-builtins */


// MAIN //

/**
* Asynchronously copies src to dest.By default, dest is overwritten if it already exists.
*
* @param {(string|Buffer)} src - source filename to copy
* @param {(string|Buffer)} dest - destination filename of the copy operation
* @param {(integer)} [mode] - modifiers for copy operation.
* @param {Function} clbk - callback to invoke after copying src to dest
* @throws {TypeError} first argument must be either a string or a Buffer
* @throws {TypeError} second argument must be either a string or a Buffer
* @throws {TypeError} mode argument must be a number
* @throws {TypeError} callback argument must be a function
*
* @example
* function onCopy( error ) {
*     if ( error ) {
*         console.error( error.message );
*     }
*     console.log( 'src.txt has been copied to dest.txt' );
* }
*
* copyFile( 'src.txt', 'dest.txt', onCopy );
*/
function copyFile() {
	var writeStream;
	var readStream;
	var dest;
	var mode;
	var src;
	var cb;

	src = arguments[0] || null;
	dest = arguments[1] || null;
	if ( arguments.length < 4 ) {
		mode = null;
		cb = arguments[2] || null;
	} else {
		mode = arguments[2];
		cb = arguments[3];
	}
	if ( !isString( src ) && !isBuffer( src ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be either a string or a Buffer. Value: `%s`.', src ) );
	}
	if ( !isString( dest ) && !isBuffer( dest ) ) {
		throw new TypeError( format( 'invalid argument. Second argument must be either a string or a Buffer. Value: `%s`.', dest ) );
	}
	if ( !isNumber( mode ) && mode !== null ) {
		throw new TypeError( format( 'invalid argument. Mode argument must be a number. Value: `%s`.', mode ) );
	}
	if ( !isFunction( cb ) ) {
		throw new TypeError( format( 'invalid argument. Callback argument must be a function. Value: `%s`.', cb ) );
	}
	if ( copy ) {
		copy( src, dest, mode, cb );
	} else {
		readStream = createReadStream( src );
		writeStream = createWriteStream( dest );
		readStream.on( 'error', onReadError );
		writeStream.on( 'error', onWriteError );
		writeStream.on( 'finish', onFinish);
		readStream.pipe( writeStream );
	}

	/**
	* Callback invoked upon encountering a read error.
	*
	* @private
	* @param {Error} err - error object
	*/
	function onReadError( err ) {
		cb( err );
		readStream.destroy();
		writeStream.end();
	}

	/**
	* Callback invoked upon encountering a write error.
	*
	* @private
	* @param {Error} err - error object
	*/
	function onWriteError( err ) {
		cb( err );
		readStream.destroy();
		writeStream.end();
	}

	/**
	* Callback invoked upon copying a file.
	*
	* @private
	*/
	function onFinish() {
		cb( null ); // Success
		readStream.close();
		writeStream.close();
	}
}


// EXPORTS //

module.exports = copyFile;
