
{{alias}}( N, alpha, x, stride )
    Fills a double-precision complex floating-point strided array with a
    specified scalar constant.

    The `N` and stride parameters determine which elements in the strided array
    are accessed at runtime.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    If `N <= 0`, the function returns `x` unchanged.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    alpha: Complex128
        Constant.

    x: Complex128Array
        Input array.

    stride: integer
        Index increment.

    Returns
    -------
    x: Complex128Array
        Input array.

    Examples
    --------
    // Standard Usage:
    > var x = new {{alias:@stdlib/array/complex128}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > var alpha = new {{alias:@stdlib/complex/float64/ctor}}( 5.0, -5.0 );
    > {{alias}}( x.length, alpha, x, 1 );
    > var z = x.get( 0 );
    > var re = {{alias:@stdlib/complex/float64/real}}( z )
    5.0
    > var im = {{alias:@stdlib/complex/float64/imag}}( z )
    -5.0

    // Using `N` and stride parameters:
    > x = new {{alias:@stdlib/array/complex128}}( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
    > alpha = new {{alias:@stdlib/complex/float64/ctor}}( 5.0, -5.0 );
    > {{alias}}( 2, alpha, x, 2 );
    > z = x.get( 0 );
    > re = {{alias:@stdlib/complex/float64/real}}( z )
    5.0
    > im = {{alias:@stdlib/complex/float64/imag}}( z )
    -5.0
    > z = x.get( 1 );
    > re = {{alias:@stdlib/complex/float64/real}}( z )
    3.0
    > im = {{alias:@stdlib/complex/float64/imag}}( z )
    4.0

    // Using view offsets:
    > var x0 = new {{alias:@stdlib/array/complex128}}( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
    > var x1 = new {{alias:@stdlib/array/complex128}}( x0.buffer, x0.BYTES_PER_ELEMENT*1 );
    > alpha = new {{alias:@stdlib/complex/float64/ctor}}( 5.0, -5.0 );
    > {{alias}}( 2, alpha, x1, 1 );
    > z = x0.get( 0 );
    > re = {{alias:@stdlib/complex/float64/real}}( z )
    1.0
    > im = {{alias:@stdlib/complex/float64/imag}}( z )
    2.0
    > z = x0.get( 1 );
    > re = {{alias:@stdlib/complex/float64/real}}( z )
    5.0
    > im = {{alias:@stdlib/complex/float64/imag}}( z )
    -5.0


{{alias}}.ndarray( N, alpha, x, stride, offset )
    Fills a double-precision complex floating-point strided array with a
    specified scalar constant using alternative indexing semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameter supports indexing semantics based on a starting
    index.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    alpha: Complex128
        Constant.

    x: Complex128Array
        Input array.

    stride: integer
        Index increment.

    offset: integer
        Starting index.

    Returns
    -------
    x: Complex128Array
        Input array.

    Examples
    --------
    // Standard Usage:
    > var x = new {{alias:@stdlib/array/complex128}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > var alpha = new {{alias:@stdlib/complex/float64/ctor}}( 2.0, 2.0 );
    > {{alias}}.ndarray( x.length, alpha, x, 1, 0 );
    > var z = x.get( 0 );
    > var re = {{alias:@stdlib/complex/float64/real}}( z )
    2.0
    > var im = {{alias:@stdlib/complex/float64/imag}}( z )
    2.0

    // Using an index offset:
    > x = new {{alias:@stdlib/array/complex128}}( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );
    > alpha = new {{alias:@stdlib/complex/float64/ctor}}( 5.0, -5.0 );
    > {{alias}}.ndarray( 2, alpha, x, 2, 1 );
    > z = x.get( 0 );
    > re = {{alias:@stdlib/complex/float64/real}}( z )
    1.0
    > im = {{alias:@stdlib/complex/float64/imag}}( z )
    2.0
    > z = x.get( 1 );
    > re = {{alias:@stdlib/complex/float64/real}}( z )
    5.0
    > im = {{alias:@stdlib/complex/float64/imag}}( z )
    -5.0

    See Also
    --------
