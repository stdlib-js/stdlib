
{{alias}}( N, x, strideX )
    Computes the sum of absolute values (L1 norm) of double-precision floating-
    point strided array elements, ignoring `NaN` values and using ordinary
    recursive summation.

    The `N` and stride parameters determine which elements in `x` are accessed
    at runtime.

    Indexing is relative to the first index. To introduce an offset, use a typed
    array view.

    If `N <= 0`, the function returns `0.0`.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    x: Float64Array
        Input array.

    strideX: integer
        Index increment.

    Returns
    -------
    out: number
        Sum.

    Examples
    --------
    // Standard Usage:
    > var x = new {{alias:@stdlib/array/float64}}( [ 1.0, -2.0, NaN, 2.0 ] );
    > {{alias}}( x.length, x, 1 )
    5.0

    // Using `N` and `stride` parameters:
    > x = new {{alias:@stdlib/array/float64}}( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0, NaN, NaN ] );
    > var N = {{alias:@stdlib/math/base/special/floor}}( x.length / 2 );
    > var stride = 2;
    > {{alias}}( N, x, stride )
    5.0

    // Using view offsets:
    > var x0 = new {{alias:@stdlib/array/float64}}( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );
    > var x1 = new {{alias:@stdlib/array/float64}}( x0.buffer, x0.BYTES_PER_ELEMENT*1 );
    > N = {{alias:@stdlib/math/base/special/floor}}( x0.length / 2 );
    > stride = 2;
    > {{alias}}( N, x1, stride )
    5.0


{{alias}}.ndarray( N, x, strideX, offsetX )
    Computes the sum of absolute values (L1 norm) of double-precision floating-
    point strided array elements, ignoring `NaN` values and using ordinary
    recursive summation alternative indexing semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameter supports indexing semantics based on a starting
    index.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    x: Float64Array
        Input array.

    strideX: integer
        Index increment.

    offsetX: integer
        Starting index.

    Returns
    -------
    out: number
        Sum.

    Examples
    --------
    // Standard Usage:
    > var x = new {{alias:@stdlib/array/float64}}( [ 1.0, -2.0, NaN, 2.0 ] );
    > {{alias}}.ndarray( x.length, x, 1, 0 )
    5.0

    // Using offset parameter:
    > var x = new {{alias:@stdlib/array/float64}}( [ 1.0, -2.0, 3.0, 2.0, 5.0, -1.0, NaN, NaN ] );
    > var N = {{alias:@stdlib/math/base/special/floor}}( x.length / 2 );
    > {{alias}}.ndarray( N, x, 2, 1 )
    5.0

    See Also
    --------

