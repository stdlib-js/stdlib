/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Solves one of the systems of equations `A*x = b` or `A^T*x = b` where `b` and `x` are `N` element vectors and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular matrix, supplied in packed form.
*
* @private
* @param {string} order - storage layout
* @param {string} uplo - specifies whether `A` is an upper or lower triangular matrix
* @param {string} trans - specifies whether `A` should be transposed, conjugate-transposed, or not transposed
* @param {string} diag - specifies whether `A` has a unit diagonal
* @param {NonNegativeInteger} N - number of elements along each dimension of `A`
* @param {Float64Array} AP - packed form of a symmetric matrix `A`
* @param {integer} strideAP - `AP` stride length
* @param {NonNegativeInteger} offsetAP - starting index for `AP`
* @param {Float64Array} x - input vector
* @param {integer} strideX - `x` stride length
* @param {NonNegativeInteger} offsetX - starting index for `x`
* @returns {Float64Array} `x`
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 1.0, 2.0, 1.0 ] ); // => [ [ 1.0, 2.0, 3.0 ], [ 0.0, 1.0, 2.0 ], [ 0.0, 0.0, 1.0 ] ]
* var x = new Float64Array( [ 1.0, 2.0, 3.0 ] );
*
* dtpsv( 'row-major', 'upper', 'no-transpose', 'unit', 3, AP, 1, 0, x, 1, 0 );
* // x => <Float64Array>[ 0.0, -4.0, 3.0 ]
*/
function dtpsv( order, uplo, trans, diag, N, AP, strideAP, offsetAP, x, strideX, offsetX ) { // eslint-disable-line max-params, max-len
	var nonunit;
	var isrm;
	var tmp;
	var iap;
	var ix1;
	var ix0;
	var i0;
	var i1;
	var kk;
	var ox;

	isrm = ( order === 'row-major' );
	nonunit = ( diag === 'non-unit' );
	kk = offsetAP;
	ox = offsetX;
	if (
		( !isrm && uplo === 'upper' && trans === 'no-transpose' ) ||
		( isrm && uplo === 'lower' && trans !== 'no-transpose' )
	) {
		kk += ( ( N * ( N + 1 ) / 2 ) - 1 ) * strideAP;
		ix1 = ox + ( ( N - 1 ) * strideX );
		for ( i1 = N - 1; i1 >= 0; i1-- ) {
			if ( x[ ix1 ] !== 0.0 ) {
				if ( nonunit ) {
					x[ ix1 ] /= AP[ kk ];
				}
				tmp = x[ ix1 ];
				ix0 = ix1;
				iap = kk;
				for ( i0 = i1 - 1; i0 >= 0; i0-- ) {
					ix0 -= strideX;
					iap -= strideAP;
					x[ ix0 ] -= tmp * AP[ iap ];
				}
			}
			ix1 -= strideX;
			kk -= ( i1 + 1 ) * strideAP;
		}
		return x;
	}
	if (
		( !isrm && uplo === 'lower' && trans === 'no-transpose' ) ||
		( isrm && uplo === 'upper' && trans !== 'no-transpose' )
	) {
		ix1 = ox;
		for ( i1 = 0; i1 < N; i1++ ) {
			if ( x[ ix1 ] !== 0.0 ) {
				if ( nonunit ) {
					x[ ix1 ] /= AP[ kk ];
				}
				tmp = x[ ix1 ];
				ix0 = ix1;
				iap = kk;
				for ( i0 = i1 + 1; i0 < N; i0++ ) {
					ix0 += strideX;
					iap += strideAP;
					x[ ix0 ] -= tmp * AP[ iap ];
				}
			}
			ix1 += strideX;
			kk += ( N - i1 ) * strideAP;
		}
		return x;
	}
	if (
		( !isrm && uplo === 'upper' && 'trans' !== 'no-transpose' ) ||
		( isrm && uplo === 'lower' && trans === 'no-transpose' )
	) {
		ix1 = ox;
		for ( i1 = 0; i1 < N; i1++ ) {
			tmp = x[ ix1 ];
			ix0 = ox;
			iap = kk;
			for ( i0 = 0; i0 < i1; i0++ ) {
				tmp -= x[ ix0 ] * AP[ iap ];
				ix0 += strideX;
				iap += strideAP;
			}
			if ( nonunit ) {
				tmp /= AP[ iap ];
			}
			x[ ix1 ] = tmp;
			ix1 += strideX;
			kk += ( i1 + 1 ) * strideAP;
		}
		return x;
	}
	// ( !isrm && uplo === 'lower' && trans !== 'no-transpose' ) || ( isrm && uplo === 'upper' && trans === 'no-transpose' )
	kk += ( ( N * ( N + 1 ) / 2 ) - 1 ) * strideAP;
	ox += ( N - 1 ) * strideX;
	ix1 = ox;
	for ( i1 = N - 1; i1 >= 0; i1-- ) {
		tmp = x[ ix1 ];
		ix0 = ox;
		iap = kk;
		for ( i0 = N - 1; i0 > i1; i0-- ) {
			tmp -= x[ ix0 ] * AP[ iap ];
			ix0 -= strideX;
			iap -= strideAP;
		}
		if ( nonunit ) {
			tmp /= AP[ iap ];
		}
		x[ ix1 ] = tmp;
		ix1 -= strideX;
		kk -= ( N - i1 ) * strideAP;
	}
	return x;
}


// EXPORTS //

module.exports = dtpsv;
