/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable max-len */

'use strict';

// MODULES //

var tape = require( 'tape' );
var Float64Array = require( '@stdlib/array/float64' );
var dspr2 = require( './../lib/ndarray.js' );


// FIXTURES //

var rl = require( './fixtures/row_major_l.json' );
var ru = require( './fixtures/row_major_u.json' );
var rxpyp = require( './fixtures/row_major_xpyp.json' );
var rxnyp = require( './fixtures/row_major_xnyp.json' );
var rxpyn = require( './fixtures/row_major_xpyn.json' );
var rxnyn = require( './fixtures/row_major_xnyn.json' );
var rsap = require( './fixtures/row_major_sap.json' );
var rsapn = require( './fixtures/row_major_sapn.json' );
var rox = require( './fixtures/row_major_ox.json' );
var roy = require( './fixtures/row_major_oy.json' );
var roap = require( './fixtures/row_major_oap.json' );
var rcap = require( './fixtures/row_major_complex_access_pattern.json' );

var cl = require( './fixtures/column_major_l.json' );
var cu = require( './fixtures/column_major_u.json' );
var cxpyp = require( './fixtures/column_major_xpyp.json' );
var cxnyp = require( './fixtures/column_major_xnyp.json' );
var cxpyn = require( './fixtures/column_major_xpyn.json' );
var cxnyn = require( './fixtures/column_major_xnyn.json' );
var csap = require( './fixtures/column_major_sap.json' );
var csapn = require( './fixtures/column_major_sapn.json' );
var cox = require( './fixtures/column_major_ox.json' );
var coy = require( './fixtures/column_major_oy.json' );
var coap = require( './fixtures/column_major_oap.json' );
var ccap = require( './fixtures/column_major_complex_access_pattern.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof dspr2, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function has an arity of 13', function test( t ) {
	t.strictEqual( dspr2.length, 13, 'returns expected value' );
	t.end();
});

tape( 'the function throws an error if provided an invalid first argument', function test( t ) {
	var values;
	var data;
	var i;

	data = rl;

	values = [
		'foo',
		'bar',
		'beep',
		'boop'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			dspr2( value, data.uplo, data.N, data.alpha, new Float64Array( data.x ), data.strideX, data.offsetX, new Float64Array( data.y ), data.strideY, data.offsetY, data.AP, data.strideAP, data.offsetAP );
		};
	}
});

tape( 'the function throws an error if provided an invalid second argument', function test( t ) {
	var values;
	var data;
	var i;

	data = rl;

	values = [
		'foo',
		'bar',
		'beep',
		'boop'
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			dspr2( data.order, value, data.N, data.alpha, new Float64Array( data.x ), data.strideX, data.offsetX, new Float64Array( data.y ), data.strideY, data.offsetY, data.AP, data.strideAP, data.offsetAP );
		};
	}
});

tape( 'the function throws an error if provided an invalid third argument', function test( t ) {
	var values;
	var data;
	var i;

	data = rl;

	values = [
		-1,
		-2,
		-3
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), RangeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			dspr2( data.order, data.uplo, value, data.alpha, new Float64Array( data.x ), data.strideX, data.offsetX, new Float64Array( data.y ), data.strideY, data.offsetY, data.AP, data.strideAP, data.offsetAP );
		};
	}
});

tape( 'the function throws an error if provided an invalid sixth argument', function test( t ) {
	var values;
	var data;
	var i;

	data = rl;

	values = [
		0
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), RangeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			dspr2( data.order, data.uplo, data.N, data.alpha, new Float64Array( data.x ), value, data.offsetX, new Float64Array( data.y ), data.strideY, data.offsetY, data.AP, data.strideAP, data.offsetAP );
		};
	}
});

tape( 'the function throws an error if provided an invalid ninth argument', function test( t ) {
	var values;
	var data;
	var i;

	data = rl;

	values = [
		0
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), RangeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			dspr2( data.order, data.uplo, data.N, data.alpha, new Float64Array( data.x ), data.strideX, data.offsetX, new Float64Array( data.y ), value, data.offsetY, data.AP, data.strideAP, data.offsetAP );
		};
	}
});

tape( 'the function throws an error if provided an invalid twelfth argument', function test( t ) {
	var values;
	var data;
	var i;

	data = rl;

	values = [
		0
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), RangeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			dspr2( data.order, data.uplo, data.N, data.alpha, new Float64Array( data.x ), data.strideX, data.offsetX, new Float64Array( data.y ), data.strideY, data.offsetY, data.AP, value, data.offsetAP );
		};
	}
});

tape( 'the function performs the symmetric rank 2 operation `A := α*x*y**T + α*y*x**T + A` (row-major, lower)', function test( t ) {
	var expected;
	var data;
	var out;
	var ap;
	var x;
	var y;

	data = rl;

	ap = new Float64Array( data.AP );
	x = new Float64Array( data.x );
	y = new Float64Array( data.y );

	expected = new Float64Array( data.AP_out );

	out = dspr2( data.order, data.uplo, data.N, data.alpha, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );
	t.deepEqual( out, expected, 'returns expected value' );

	t.end();
});

tape( 'the function performs the symmetric rank 2 operation `A := α*x*y**T + α*y*x**T + A` (column-major, lower)', function test( t ) {
	var expected;
	var data;
	var out;
	var ap;
	var x;
	var y;

	data = cl;

	ap = new Float64Array( data.AP );
	x = new Float64Array( data.x );
	y = new Float64Array( data.y );

	expected = new Float64Array( data.AP_out );

	out = dspr2( data.order, data.uplo, data.N, data.alpha, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );
	t.deepEqual( out, expected, 'returns expected value' );

	t.end();
});

tape( 'the function performs the symmetric rank 2 operation `A := α*x*y**T + α*y*x**T + A` (row-major, upper)', function test( t ) {
	var expected;
	var data;
	var out;
	var ap;
	var x;
	var y;

	data = ru;

	ap = new Float64Array( data.AP );
	x = new Float64Array( data.x );
	y = new Float64Array( data.y );

	expected = new Float64Array( data.AP_out );

	out = dspr2( data.order, data.uplo, data.N, data.alpha, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );
	t.deepEqual( out, expected, 'returns expected value' );

	t.end();
});

tape( 'the function performs the symmetric rank 2 operation `A := α*x*y**T + α*y*x**T + A` (column-major, upper)', function test( t ) {
	var expected;
	var data;
	var out;
	var ap;
	var x;
	var y;

	data = cu;

	ap = new Float64Array( data.AP );
	x = new Float64Array( data.x );
	y = new Float64Array( data.y );

	expected = new Float64Array( data.AP_out );

	out = dspr2( data.order, data.uplo, data.N, data.alpha, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );
	t.deepEqual( out, expected, 'returns expected value' );

	t.end();
});

tape( 'the function returns a reference to the packed form of a symmetric matrix `A`', function test( t ) {
	var data;
	var out;
	var ap;
	var x;
	var y;

	data = rl;

	ap = new Float64Array( data.AP );
	x = new Float64Array( data.x );
	y = new Float64Array( data.y );

	out = dspr2( data.order, data.uplo, data.N, data.alpha, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );

	t.end();
});

tape( 'if `N` is zero or `α` is zero, respectively, the function returns `AP` unchanged (row-major)', function test( t ) {
	var expected;
	var data;
	var out;
	var ap;
	var x;
	var y;

	data = ru;

	ap = new Float64Array( data.AP );
	x = new Float64Array( data.x );
	y = new Float64Array( data.y );

	expected = new Float64Array( data.AP );

	out = dspr2( data.order, data.uplo, 0, data.alpha, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );
	t.deepEqual( ap, expected, 'returns expected value' );

	out = dspr2( data.order, data.uplo, data.N, 0.0, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );
	t.deepEqual( ap, expected, 'returns expected value' );

	t.end();
});

tape( 'if `N` is zero or `α` is zero, respectively, the function returns `AP` unchanged (column-major)', function test( t ) {
	var expected;
	var data;
	var out;
	var ap;
	var x;
	var y;

	data = cu;

	ap = new Float64Array( data.AP );
	x = new Float64Array( data.x );
	y = new Float64Array( data.y );

	expected = new Float64Array( data.AP );

	out = dspr2( data.order, data.uplo, 0, data.alpha, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );
	t.deepEqual( ap, expected, 'returns expected value' );

	out = dspr2( data.order, data.uplo, data.N, 0.0, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );
	t.deepEqual( ap, expected, 'returns expected value' );

	t.end();
});

tape( 'the function supports specifying `x` and `y` strides (row-major)', function test( t ) {
	var expected;
	var data;
	var out;
	var ap;
	var x;
	var y;

	data = rxpyp;

	ap = new Float64Array( data.AP );
	x = new Float64Array( data.x );
	y = new Float64Array( data.y );

	expected = new Float64Array( data.AP_out );

	out = dspr2( data.order, data.uplo, data.N, data.alpha, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );
	t.deepEqual( out, expected, 'returns expected value' );

	t.end();
});

tape( 'the function supports specifying `x` and `y` strides (column-major)', function test( t ) {
	var expected;
	var data;
	var out;
	var ap;
	var x;
	var y;

	data = cxpyp;

	ap = new Float64Array( data.AP );
	x = new Float64Array( data.x );
	y = new Float64Array( data.y );

	expected = new Float64Array( data.AP_out );

	out = dspr2( data.order, data.uplo, data.N, data.alpha, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );
	t.deepEqual( out, expected, 'returns expected value' );

	t.end();
});

tape( 'the function supports specifying a negative `x` stride (row-major)', function test( t ) {
	var expected;
	var data;
	var out;
	var ap;
	var x;
	var y;

	data = rxnyp;

	ap = new Float64Array( data.AP );
	x = new Float64Array( data.x );
	y = new Float64Array( data.y );

	expected = new Float64Array( data.AP_out );

	out = dspr2( data.order, data.uplo, data.N, data.alpha, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );
	t.deepEqual( out, expected, 'returns expected value' );

	t.end();
});

tape( 'the function supports specifying a negative `x` stride (column-major)', function test( t ) {
	var expected;
	var data;
	var out;
	var ap;
	var x;
	var y;

	data = cxnyp;

	ap = new Float64Array( data.AP );
	x = new Float64Array( data.x );
	y = new Float64Array( data.y );

	expected = new Float64Array( data.AP_out );

	out = dspr2( data.order, data.uplo, data.N, data.alpha, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );
	t.deepEqual( out, expected, 'returns expected value' );

	t.end();
});

tape( 'the function supports specifying a negative `y` stride (row-major)', function test( t ) {
	var expected;
	var data;
	var out;
	var ap;
	var x;
	var y;

	data = rxpyn;

	ap = new Float64Array( data.AP );
	x = new Float64Array( data.x );
	y = new Float64Array( data.y );

	expected = new Float64Array( data.AP_out );

	out = dspr2( data.order, data.uplo, data.N, data.alpha, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );
	t.deepEqual( out, expected, 'returns expected value' );

	t.end();
});

tape( 'the function supports specifying a negative `y` stride (column-major)', function test( t ) {
	var expected;
	var data;
	var out;
	var ap;
	var x;
	var y;

	data = cxpyn;

	ap = new Float64Array( data.AP );
	x = new Float64Array( data.x );
	y = new Float64Array( data.y );

	expected = new Float64Array( data.AP_out );

	out = dspr2( data.order, data.uplo, data.N, data.alpha, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );
	t.deepEqual( out, expected, 'returns expected value' );

	t.end();
});

tape( 'the function supports specifying negative strides for `x` and `y` (row-major)', function test( t ) {
	var expected;
	var data;
	var out;
	var ap;
	var x;
	var y;

	data = rxnyn;

	ap = new Float64Array( data.AP );
	x = new Float64Array( data.x );
	y = new Float64Array( data.y );

	expected = new Float64Array( data.AP_out );

	out = dspr2( data.order, data.uplo, data.N, data.alpha, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );
	t.deepEqual( out, expected, 'returns expected value' );

	t.end();
});

tape( 'the function supports specifying negative strides for `x` and `y` (column-major)', function test( t ) {
	var expected;
	var data;
	var out;
	var ap;
	var x;
	var y;

	data = cxnyn;

	ap = new Float64Array( data.AP );
	x = new Float64Array( data.x );
	y = new Float64Array( data.y );

	expected = new Float64Array( data.AP_out );

	out = dspr2( data.order, data.uplo, data.N, data.alpha, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );
	t.deepEqual( out, expected, 'returns expected value' );

	t.end();
});

tape( 'the function supports specifying an `x` offset (row-major)', function test( t ) {
	var expected;
	var data;
	var out;
	var ap;
	var x;
	var y;

	data = rox;

	ap = new Float64Array( data.AP );
	x = new Float64Array( data.x );
	y = new Float64Array( data.y );

	expected = new Float64Array( data.AP_out );

	out = dspr2( data.order, data.uplo, data.N, data.alpha, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );
	t.deepEqual( out, expected, 'returns expected value' );

	t.end();
});

tape( 'the function supports specifying an `x` offset (column-major)', function test( t ) {
	var expected;
	var data;
	var out;
	var ap;
	var x;
	var y;

	data = cox;

	ap = new Float64Array( data.AP );
	x = new Float64Array( data.x );
	y = new Float64Array( data.y );

	expected = new Float64Array( data.AP_out );

	out = dspr2( data.order, data.uplo, data.N, data.alpha, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );
	t.deepEqual( out, expected, 'returns expected value' );

	t.end();
});

tape( 'the function supports specifying an `y` offset (row-major)', function test( t ) {
	var expected;
	var data;
	var out;
	var ap;
	var x;
	var y;

	data = roy;

	ap = new Float64Array( data.AP );
	x = new Float64Array( data.x );
	y = new Float64Array( data.y );

	expected = new Float64Array( data.AP_out );

	out = dspr2( data.order, data.uplo, data.N, data.alpha, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );
	t.deepEqual( out, expected, 'returns expected value' );

	t.end();
});

tape( 'the function supports specifying an `y` offset (column-major)', function test( t ) {
	var expected;
	var data;
	var out;
	var ap;
	var x;
	var y;

	data = coy;

	ap = new Float64Array( data.AP );
	x = new Float64Array( data.x );
	y = new Float64Array( data.y );

	expected = new Float64Array( data.AP_out );

	out = dspr2( data.order, data.uplo, data.N, data.alpha, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );
	t.deepEqual( out, expected, 'returns expected value' );

	t.end();
});

tape( 'the function supports specifying stride for `AP` (row-major)', function test( t ) {
	var expected;
	var data;
	var out;
	var ap;
	var x;
	var y;

	data = rsap;

	ap = new Float64Array( data.AP );
	x = new Float64Array( data.x );
	y = new Float64Array( data.y );

	expected = new Float64Array( data.AP_out );

	out = dspr2( data.order, data.uplo, data.N, data.alpha, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );
	t.deepEqual( out, expected, 'returns expected value' );

	t.end();
});

tape( 'the function supports specifying stride for `AP` (column-major)', function test( t ) {
	var expected;
	var data;
	var out;
	var ap;
	var x;
	var y;

	data = csap;

	ap = new Float64Array( data.AP );
	x = new Float64Array( data.x );
	y = new Float64Array( data.y );

	expected = new Float64Array( data.AP_out );

	out = dspr2( data.order, data.uplo, data.N, data.alpha, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );
	t.deepEqual( out, expected, 'returns expected value' );

	t.end();
});

tape( 'the function supports specifying a negative stride for `AP` (row-major)', function test( t ) {
	var expected;
	var data;
	var out;
	var ap;
	var x;
	var y;

	data = rsapn;

	ap = new Float64Array( data.AP );
	x = new Float64Array( data.x );
	y = new Float64Array( data.y );

	expected = new Float64Array( data.AP_out );

	out = dspr2( data.order, data.uplo, data.N, data.alpha, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );
	t.deepEqual( out, expected, 'returns expected value' );

	t.end();
});

tape( 'the function supports specifying a negative stride for `AP` (column-major)', function test( t ) {
	var expected;
	var data;
	var out;
	var ap;
	var x;
	var y;

	data = csapn;

	ap = new Float64Array( data.AP );
	x = new Float64Array( data.x );
	y = new Float64Array( data.y );

	expected = new Float64Array( data.AP_out );

	out = dspr2( data.order, data.uplo, data.N, data.alpha, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );
	t.deepEqual( out, expected, 'returns expected value' );

	t.end();
});

tape( 'the function supports specifying an offset for `AP` (row-major)', function test( t ) {
	var expected;
	var data;
	var out;
	var ap;
	var x;
	var y;

	data = roap;

	ap = new Float64Array( data.AP );
	x = new Float64Array( data.x );
	y = new Float64Array( data.y );

	expected = new Float64Array( data.AP_out );

	out = dspr2( data.order, data.uplo, data.N, data.alpha, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );
	t.deepEqual( out, expected, 'returns expected value' );

	t.end();
});

tape( 'the function supports specifying an offset for `AP` (column-major)', function test( t ) {
	var expected;
	var data;
	var out;
	var ap;
	var x;
	var y;

	data = coap;

	ap = new Float64Array( data.AP );
	x = new Float64Array( data.x );
	y = new Float64Array( data.y );

	expected = new Float64Array( data.AP_out );

	out = dspr2( data.order, data.uplo, data.N, data.alpha, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );
	t.deepEqual( out, expected, 'returns expected value' );

	t.end();
});

tape( 'the function supports complex access patterns (row-major)', function test( t ) {
	var expected;
	var data;
	var out;
	var ap;
	var x;
	var y;

	data = rcap;

	ap = new Float64Array( data.AP );
	x = new Float64Array( data.x );
	y = new Float64Array( data.y );

	expected = new Float64Array( data.AP_out );

	out = dspr2( data.order, data.uplo, data.N, data.alpha, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );
	t.deepEqual( out, expected, 'returns expected value' );

	t.end();
});

tape( 'the function supports complex access patterns (column-major)', function test( t ) {
	var expected;
	var data;
	var out;
	var ap;
	var x;
	var y;

	data = ccap;

	ap = new Float64Array( data.AP );
	x = new Float64Array( data.x );
	y = new Float64Array( data.y );

	expected = new Float64Array( data.AP_out );

	out = dspr2( data.order, data.uplo, data.N, data.alpha, x, data.strideX, data.offsetX, y, data.strideY, data.offsetY, ap, data.strideAP, data.offsetAP );
	t.strictEqual( out, ap, 'returns expected value' );
	t.deepEqual( out, expected, 'returns expected value' );

	t.end();
});
