/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* BLAS level 2 routine to perform one of the matrix-vector operations `y = alpha*A*x + beta*y` or `y = alpha*A**T*x + beta*y` with kl as sub-diagonals and ku as super-diagonals.
*
* @module @stdlib/blas/base/sgbmv
*
* @example
* var Float32Array = require( '@stdlib/array/float32' );
* var sgbmv = require( '@stdlib/blas/base/sgbmv' );
*
* var trans = 'N';
*
* var M = 4;
* var N = 3;
* var kl = 1;
* var ku = 1;
* var lda = 4;
*
* var alpha = 2.0;
* var beta = 3.0;
*
* var A = new Float32Array( [ 0.0, 1.0, 2.0, 3.0, 5.0, 6.0, 7.0, 8.0, 10.0, 11.0, 12.0, 13.0 ] );
* var x  = new Float32Array( [ 1.0, 2.0, 3.0 ] );
* var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );
*
* sgbmv( 'row-major', trans, M, N, kl, ku, alpha, A, lda, x, 1, beta, y, 1 );
* // y => <Float32Array>[ 32.0, 77.0, 110.0, 99.0, 10.0 ]
*
* @example
* var Float32Array = require( '@stdlib/array/float32' );
* var sgbmv = require( '@stdlib/blas/base/sgbmv' );
*
* var trans = 'N';
*
* var M = 4;
* var N = 3;
* var kl = 1;
* var ku = 1;
* var lda = 4;
*
* var alpha = 2.0;
* var beta = 3.0;
*
* var A = new Float32Array( [ 0.0, 1.0, 2.0, 3.0, 5.0, 6.0, 7.0, 8.0, 10.0, 11.0, 12.0, 13.0 ] );
* var x  = new Float32Array( [ 1.0, 2.0, 3.0 ] );
* var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0, 10.0 ] );
*
* sgbmv.ndarray( 'row-major', trans, M, N, kl, ku, alpha, A, lda, x, 1, 0, beta, y, 1, 0 );
* // y => <Float32Array>[ 32.0, 77.0, 110.0, 99.0, 10.0 ]
*/

// MODULES //

var join = require( 'path' ).join;
var tryRequire = require( '@stdlib/utils/try-require' );
var isError = require( '@stdlib/assert/is-error' );
var main = require( './main.js' );


// MAIN //

var sgbmv;
var tmp = tryRequire( join( __dirname, './native.js' ) );
if ( isError( tmp ) ) {
	sgbmv = main;
} else {
	sgbmv = tmp;
}


// EXPORTS //

module.exports = sgbmv;

// exports: { "ndarray": "sgbmv.ndarray" }
