/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable */ // FIXME

'use strict';

// MODULES //

var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );

// MAIN //

/**
* Performs one of the matrix-vector operations `y = alpha*A*x + beta*y` or `y = alpha*A**T*x + beta*y` with kl as sub-diagonals and ku as super-diagonals.
*
* @param {string} order - storage layout
* @param {string} trans - specifies the operation to be performed
* @param {NonNegativeInteger} M - number of rows in the matrix `A`
* @param {NonNegativeInteger} N - number of columns in the matrix `A`
* @param {NonNegativeInteger} kl - number of sub-diagonals within the band of `A`
* @param {NonNegativeInteger} ku - number of super-diagonals within the band of `A`
* @param {number} alpha - scalar constant
* @param {Float32Array} A - matrix of coefficients
* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)
* @param {Float32Array} x - an `M` element vector
* @param {integer} strideX - `x` stride length
* @param {number} beta - scalar constant
* @param {Float32Array} y - an `N` element vector
* @param {integer} strideY - `y` stride length
* @returns {Float32Array} `y`
*
* @example
* var Float32Array = require( '@stdlib/array/float64' );
*
* var trans = 'N';
*
* var M = 4;
* var N = 3;
* var kl = 1;
* var ku = 1;
* var lda = 4;
*
* var alpha = 2.0;
* var beta = 3.0;
*
* var A = new Float32Array( [ 0.0, 1.0, 2.0, 3.0, 5.0, 6.0, 7.0, 8.0, 10.0, 11.0, 12.0, 13.0 ] );
* var x  = new Float32Array( [ 1.0, 2.0, 3.0 ] );
* var y = new Float32Array( [ 6.0, 7.0, 8.0, 9.0 ] );
*
* sgbmv( 'row-major', trans, M, N, kl, ku, alpha, A, lda, x, 1, beta, y, 1 );
* // y => <Float32Array>[ 32.0, 77.0, 110.0, 99.0, 10.0 ]
*/
function sgbmv( order, trans, M, N, kl, ku, alpha, A, LDA, x, strideX, beta, y, strideY ) {
	var info;
	var kup1;
	var lenx;
	var leny;
	var temp;
	var ix;
	var iy;
	var jx;
	var jy;
	var kx;
	var ky;
	var i;
	var j;
	var k;

	info = 0;
	if ( ( trans.toUpperCase() !== 'N' ) && ( trans.toUpperCase() !== 'T' ) && ( trans.toUpperCase() !== 'C' ) ) {
		info = 1;
	} else if ( M < 0 ) {
		info = 2;
	} else if ( N < 0 ) {
		info = 3;
	} else if ( kl < 0 ) {
		info = 4;
	} else if ( ku < 0 ) {
		info = 5;
	} else if ( LDA < ( kl + ku + 1 ) ) {
		info = 8;
	} else if ( strideX === 0 ) {
		info = 10;
	} else if ( strideY === 0 ) {
		info = 13;
	}
	if ( info !== 0 ) {
		return y;
		// throw new Error( "Invalid input parameters ( info = " + info + " ) " );
	}
	if ( M === 0 || N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {
		return y;
	}
	if ( trans.toUpperCase() === 'N' ) {
		lenx = N;
		leny = M;
	} else {
		lenx = M;
		leny = N;
	}
	if ( strideX > 0 ) {
		kx = 0;
	} else {
		kx = ( 1 - lenx ) * strideX;
	}
	if ( strideY > 0 ) {
		ky = 0;
	} else {
		ky = ( 1 - leny ) * strideY;
	}
	if ( beta !== 1.0 ) {
		if ( strideY === 1 ) {
			if ( beta === 0.0 ) {
				for ( i = 0; i < leny; i++ ) {
					y[ i ] = 0.0;
				}
			} else {
				for ( i = 0; i < leny; i++ ) {
					y[ i ] *= beta;
				}
			}
		} else {
			iy = ky;
			if ( beta === 0.0 ) {
				for ( i = 0; i < leny; i++ ) {
					y[ iy ] = 0.0;
					iy += strideY;
				}
			} else {
				for ( i = 0; i < leny; i++ ) {
					y[ iy ] *= beta;
					iy += strideY;
				}
			}
		}
	}
	if ( alpha === 0.0 ) {
		return y;
	}
	kup1 = ku + 1;
	if ( trans.toUpperCase() === 'N' ) {
		jx = kx;
		if ( strideY === 1 ) {
			for ( j = 0; j < N; j++ ) {
				temp = alpha * x[ jx ];
				k = kup1 - j - 1;
				for ( i = max( 0, j - ku ); i < min( M, j + kl + 1 ); i++ ) {
					if ( order === 'row-major' ) {
						y[ i ] += temp * A[ j + ( i + k ) * LDA ];
					} else {
						y[ i ] += temp * A[ ( i + k ) + j * LDA ];
					}
				}
				jx += strideX;
			}
		} else {
			for ( j = 0; j < N; j++ ) {
				temp = alpha * x[ jx ];
				iy = ky;
				k = kup1 - j - 1;
				for ( i = max( 0, j - ku ); i < min( M, j + kl + 1 ); i++ ) {
					if ( order === 'row-major' ) {
						y[ iy ] += temp * A[ j + ( i + k ) * LDA ];
					} else {
						y[ iy ] += temp * A[ ( i + k ) + j * LDA ];
					}
					iy += strideY;
				}
				jx += strideX;
				if ( j >= ku ) {
					ky += strideY;
				}
			}
		}
	} else {
		jy = ky;
		if ( strideX === 1 ) {
			for ( j = 0; j < N; j++ ) {
				temp = 0.0;
				k = kup1 - j - 1;
				for ( i = max( 0, j - ku ); i < min( M, j + kl + 1 ); i++ ) {
					if ( order === 'row-major' ) {
						temp += A[ j + ( i + k ) * LDA ] * x[ i ];
					} else {
						temp += A[ ( i + k ) + j * LDA ] * x[ i ];
					}
				}
				y[ jy ] += alpha * temp;
				jy += strideY;
			}
		} else {
			for ( j = 0; j < N; j++ ) {
				temp = 0.0;
				ix = kx;
				k = kup1 - j - 1;
				for (i = max( 0, j - ku ); i < min( M, j + kl + 1 ); i++) {
					if (order === 'row-major') {
						temp += A[ j + ( i + k ) * LDA ] * x[ ix ];
					} else {
						temp += A[ ( i + k ) + j * LDA ] * x[ ix ];
					}
					ix += strideX;
				}
				y[ jy ] += alpha * temp;
				jy += strideY;
				if ( j >= ku ) {
					kx += strideX;
				}
			}
		}
	}
	return y;
}


// EXPORTS //

module.exports = sgbmv;
