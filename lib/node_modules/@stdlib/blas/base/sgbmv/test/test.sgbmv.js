/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var Float32Array = require( '@stdlib/array/float32' );
var scopy = require( '@stdlib/blas/base/scopy' );
var EPS = require( '@stdlib/constants/float32/eps' );
var abs = require( '@stdlib/math/base/special/abs' );
var sgbmv = require( './../lib/sgbmv.js' );


// FIXTURES //

var stridexoyo = require( './fixtures/julia/strides_xoyo.json' );
var stridexpyp = require( './fixtures/julia/strides_xpyp.json' );
var stridexnyp = require( './fixtures/julia/strides_xnyp.json' );
var stridexpyn = require( './fixtures/julia/strides_xpyn.json' );
var stridexnyn = require( './fixtures/julia/strides_xnyn.json' );


// FUNCTIONS //

/**
* Tests for element-wise approximate equality.
*
* @private
* @param {Object} t - test object
* @param {Collection} actual - actual values
* @param {Collection} expected - expected values
* @param {number} rtol - relative tolerance
*/
function isApprox( t, actual, expected, rtol ) {
	var delta;
	var tol;
	var i;

	t.strictEqual( actual.length, expected.length, 'returns expected value' );
	for ( i = 0; i < expected.length; i++ ) {
		if ( actual[ i ] === expected[ i ] ) {
			t.strictEqual( actual[ i ], expected[ i ], 'returns expected value' );
		} else {
			delta = abs( actual[ i ] - expected[ i ] );
			tol = rtol * EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. actual: '+actual[ i ]+'. expected: '+expected[ i ]+'. delta: '+delta+'. tol: '+tol+'.' );
		}
	}
}


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof sgbmv, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function has an arity of 14', function test( t ) {
	t.strictEqual( sgbmv.length, 14, 'returns expected value' );
	t.end();
});

tape( 'the function performs one of the matrix-vector operations `y = alpha*A*x + beta*y` or `y = alpha*A**T*x + beta*y` with kl as sub-diagonals and ku as super-diagonals (sx=1, sy=1)', function test( t ) {
	var expected;
	var alpha;
	var order;
	var trans;
	var beta;
	var lda;
	var out;
	var kl;
	var ku;
	var a;
	var m;
	var n;
	var x;
	var y;

	order = stridexoyo.order;
	trans = stridexoyo.trans;

	m = stridexoyo.M;
	n = stridexoyo.N;
	kl = stridexoyo.kl;
	ku = stridexoyo.ku;
	lda = stridexoyo.lda;

	alpha = stridexoyo.alpha;
	beta = stridexoyo.beta;

	a = new Float32Array( stridexoyo.A );
	x = new Float32Array( stridexoyo.x );
	y = new Float32Array( stridexoyo.y );

	expected = new Float32Array( stridexoyo.y_out );

	out = sgbmv( order, trans, m, n, kl, ku, alpha, a, lda, x, 1, beta, y, 1 );
	isApprox( t, y, expected, 2.0 );
	t.strictEqual( out, y, 'returns expected value' );
	t.end();
});

tape( 'the function performs one of the matrix-vector operations `y = alpha*A*x + beta*y` or `y = alpha*A**T*x + beta*y` with kl as sub-diagonals and ku as super-diagonals (sx=1, sy=-1)', function test( t ) {
	var expected;
	var alpha;
	var order;
	var trans;
	var beta;
	var lda;
	var out;
	var kl;
	var ku;
	var a;
	var m;
	var n;
	var x;
	var y;

	order = stridexpyn.order;
	trans = stridexpyn.trans;

	m = stridexpyn.M;
	n = stridexpyn.N;
	kl = stridexpyn.kl;
	ku = stridexpyn.ku;
	lda = stridexpyn.lda;

	alpha = stridexpyn.alpha;
	beta = stridexpyn.beta;

	a = new Float32Array( stridexpyn.A );
	x = new Float32Array( stridexpyn.x );
	y = new Float32Array( stridexpyn.y );

	expected = new Float32Array( stridexpyn.y_out );

	out = sgbmv( order, trans, m, n, kl, ku, alpha, a, lda, x, 1, beta, y, -1 );
	isApprox( t, y, expected, 2.0 );
	t.strictEqual( out, y, 'returns expected value' );
	t.end();
});

tape( 'the function performs one of the matrix-vector operations `y = alpha*A*x + beta*y` or `y = alpha*A**T*x + beta*y` with kl as sub-diagonals and ku as super-diagonals (sx=-1, sy=2)', function test( t ) {
	var expected;
	var alpha;
	var order;
	var trans;
	var beta;
	var lda;
	var out;
	var kl;
	var ku;
	var a;
	var m;
	var n;
	var x;
	var y;

	order = stridexnyp.order;
	trans = stridexnyp.trans;

	m = stridexnyp.M;
	n = stridexnyp.N;
	kl = stridexnyp.kl;
	ku = stridexnyp.ku;
	lda = stridexnyp.lda;

	alpha = stridexnyp.alpha;
	beta = stridexnyp.beta;

	a = new Float32Array( stridexnyp.A );
	x = new Float32Array( stridexnyp.x );
	y = new Float32Array( stridexnyp.y );

	expected = new Float32Array( stridexnyp.y_out );

	out = sgbmv( order, trans, m, n, kl, ku, alpha, a, lda, x, -1, beta, y, 2 );
	isApprox( t, y, expected, 2.0 );
	t.strictEqual( out, y, 'returns expected value' );
	t.end();
});

tape( 'the function returns a reference to the second input array', function test( t ) {
	var alpha;
	var order;
	var trans;
	var beta;
	var lda;
	var out;
	var kl;
	var ku;
	var a;
	var m;
	var n;
	var x;
	var y;

	order = stridexpyp.order;
	trans = stridexpyp.trans;

	m = stridexpyp.M;
	n = stridexpyp.N;
	kl = stridexpyp.kl;
	ku = stridexpyp.ku;
	lda = stridexpyp.lda;

	alpha = stridexpyp.alpha;
	beta = stridexpyp.beta;

	a = new Float32Array( stridexpyp.A );
	x = new Float32Array( stridexpyp.x );
	y = new Float32Array( stridexpyp.y );

	out = sgbmv( order, trans, m, n, kl, ku, alpha, a, lda, x, 1, beta, y, 1 );
	t.strictEqual( out, y, 'returns expected value' );
	t.end();
});

tape( 'if provided an `M` or `N` parameter less than to `0`, the function leaves both input arrays unchanged', function test( t ) {
	var alpha;
	var order;
	var trans;
	var beta;
	var lda;
	var kl;
	var ku;
	var xe;
	var ye;
	var a;
	var m;
	var n;
	var x;
	var y;

	order = stridexpyp.order;
	trans = stridexpyp.trans;

	m = stridexpyp.M;
	n = stridexpyp.N;
	kl = stridexpyp.kl;
	ku = stridexpyp.ku;
	lda = stridexpyp.lda;

	alpha = stridexpyp.alpha;
	beta = stridexpyp.beta;

	a = new Float32Array( stridexpyp.A );
	x = new Float32Array( stridexpyp.x );
	y = new Float32Array( stridexpyp.y );

	xe = new Float32Array( x.length );
	scopy( x.length, x, 1, xe, 1 );

	ye = new Float32Array( y.length );
	scopy( y.length, y, 1, ye, 1 );

	sgbmv( order, trans, -1, n, kl, ku, alpha, a, lda, x, 1, beta, y, 1 );
	t.deepEqual( x, xe, 'returns expected value' );
	t.deepEqual( y, ye, 'returns expected value' );

	sgbmv( order, trans, m, -1, kl, ku, alpha, a, lda, x, 1, beta, y, 1 );
	t.deepEqual( x, xe, 'returns expected value' );
	t.deepEqual( y, ye, 'returns expected value' );

	t.end();
});

tape( 'the function supports complex access patterns', function test( t ) {
	var expected;
	var alpha;
	var order;
	var trans;
	var beta;
	var lda;
	var out;
	var kl;
	var ku;
	var a;
	var m;
	var n;
	var x;
	var y;

	order = stridexnyn.order;
	trans = stridexnyn.trans;

	m = stridexnyn.M;
	n = stridexnyn.N;
	kl = stridexnyn.kl;
	ku = stridexnyn.ku;
	lda = stridexnyn.lda;

	alpha = stridexnyn.alpha;
	beta = stridexnyn.beta;

	a = new Float32Array( stridexnyn.A );
	x = new Float32Array( stridexnyn.x );
	y = new Float32Array( stridexnyn.y );

	expected = new Float32Array( stridexnyn.y_out );

	out = sgbmv( order, trans, m, n, kl, ku, alpha, a, lda, x, -1, beta, y, -1 ); // eslint-disable-line max-len
	isApprox( t, y, expected, 2.0 );
	t.strictEqual( out, y, 'returns expected value' );
	t.end();
});
