/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var sfill = require( '@stdlib/blas/ext/base/sfill' );
var sscal = require( '@stdlib/blas/base/sscal' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var f32 = require( '@stdlib/number/float64/base/to-float32' );
var isLayout = require( '@stdlib/blas/base/assert/is-layout' );
var isMatrixTriangle = require( '@stdlib/blas/base/assert/is-matrix-triangle' );
var format = require( '@stdlib/string/format' );


// MAIN //

/**
* Performs the matrix-vector operation `y = alpha*A*x + beta*y` where `alpha` and `beta` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric band matrix with `k` super-/sub-diagonals.
*
* @param {string} order - storage layout
* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is being supplied
* @param {NonNegativeInteger} N - number of elements along each dimension of `A`
* @param {NonNegativeInteger} k - number of super-/sub-diagonals
* @param {number} alpha - scalar constant
* @param {Float32Array} A - symmetric band matrix stored in band storage
* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)
* @param {Float32Array} x - first input array
* @param {integer} strideX - `x` stride length
* @param {number} beta - scalar constant
* @param {Float32Array} y - second input array
* @param {integer} strideY - `y` stride length
* @throws {TypeError} first argument must be a valid order
* @throws {TypeError} second argument must specify whether the lower or upper triangular matrix is supplied
* @throws {RangeError} third argument must be a nonnegative integer
* @throws {RangeError} fourth argument must be a nonnegative integer
* @throws {RangeError} seventh argument must be greater than `k + 1`
* @throws {RangeError} ninth argument must be non-zero
* @throws {RangeError} twelfth argument must be non-zero
* @returns {Float32Array} `y`
*
* @example
* var Float32Array = require( '@stdlib/array/float32' );
*
* var A = new Float32Array( [ 0.5, -0.2, 0.1, 0.4, 0.6, -0.3, 0.7, 0.2, -0.8 ] );
* var x = new Float32Array( [ 1.0, 1.0, 1.0 ] );
* var y = new Float32Array( [ 0.0, 0.0, 0.0 ] );
*
* ssbmv( 'row-major', 'lower', 3, 1, 1.0, A, 3, x, 1, 0.0, y, 1 );
* // y => <Float32Array>[ ~0.2, ~1.7, ~0.9 ]
*/
function ssbmv( order, uplo, N, k, alpha, A, LDA, x, strideX, beta, y, strideY ) { // eslint-disable-line max-params, max-len
	var kplus1;
	var temp1;
	var temp2;
	var ix;
	var iy;
	var jx;
	var jy;
	var kx;
	var ky;
	var sy;
	var i;
	var j;
	var l;

	if ( !isLayout( order ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );
	}
	if ( !isMatrixTriangle( uplo ) ) {
		throw new TypeError( format( 'invalid argument. Second argument must specify whether the lower or upper triangular matrix is supplied. Value: `%s`.', uplo ) );
	}
	if ( N < 0 ) {
		throw new RangeError( format( 'invalid argument. Third argument must be a nonnegative integer. Value: `%d`.', N ) );
	}
	if ( k < 0 ) {
		throw new RangeError( format( 'invalid argument. Fourth argument must be a nonnegative integer. Value: `%d`.', k ) );
	}
	if ( LDA < k+1 ) {
		throw new RangeError( format( 'invalid argument. Seventh argument must be greater than or equal to %d. Value: `%d`.', k+1, LDA ) );
	}
	if ( strideX === 0 ) {
		throw new RangeError( format( 'invalid argument. Ninth argument must be non-zero. Value: `%d`.', strideX ) );
	}
	if ( strideY === 0 ) {
		throw new RangeError( format( 'invalid argument. Twelfth argument must be non-zero. Value: `%d`.', strideY ) );
	}
	if ( N === 0 || ( alpha === 0.0 && beta === 1.0 ) ) {
		return y;
	}
	sy = strideY;
	if ( beta !== 1.0 ) {
		if ( beta === 0.0 ) {
			sfill( N, 0.0, y, strideY );
		} else {
			if ( strideY < 0 ) {
				sy = -sy;
			}
			sscal( N, beta, y, sy );
		}
	}
	if ( alpha === 0.0 ) {
		return y;
	}
	if ( strideX > 0 ) {
		kx = 0;
	} else {
		kx = ( 1 - N ) * strideX;
	}
	if ( strideY > 0 ) {
		ky = 0;
	} else {
		ky = ( 1 - N ) * strideY;
	}
	if (
		( order === 'column-major' && uplo === 'upper' ) ||
		( order === 'row-major' && uplo === 'lower' )
	) {
		kplus1 = k;
		jx = kx;
		jy = ky;
		for ( j = 0; j < N; j++ ) {
			temp1 = f32( alpha * x[ jx ] );
			temp2 = 0.0;
			ix = kx;
			iy = ky;
			l = kplus1 - j;
			for ( i = max( 0, j-k ); i < j; i++ ) {
				y[ iy ] += f32( temp1 * A[ (l+i)+(j*LDA) ] );
				temp2 = f32( temp2 + f32( A[ (l+i)+(j*LDA) ] * x[ ix ] ) );
				ix += strideX;
				iy += strideY;
			}
			y[ jy ] += f32( f32( temp1 * A[ kplus1+(LDA*j) ] ) + f32( alpha * temp2 ) ); // eslint-disable-line max-len
			jx += strideX;
			jy += strideY;
			if ( j >= k ) {
				kx += strideX;
				ky += strideY;
			}
		}
		return y;
	}
	// ( order === 'row-major' && uplo === 'upper') || ( order === 'column-major' && uplo === 'lower' )
	jx = kx;
	jy = ky;
	for ( j = 0; j < N; j++ ) {
		temp1 = f32( alpha * x[ jx ] );
		temp2 = 0.0;
		y[ jy ] += f32( temp1 * A[ LDA*j ] );
		l = -j;
		ix = jx;
		iy = jy;
		for ( i = j+1; i < min( N, j+k+1 ); i++ ) {
			ix += strideX;
			iy += strideY;
			y[ iy ] += f32( temp1 * A[ (j*LDA)+(l+i) ] );
			temp2 = f32( temp2 + f32( A[ (j*LDA)+(l+i) ] * x[ ix ] ) );
		}
		y[ jy ] += f32( alpha * temp2 );
		jx += strideX;
		jy += strideY;
	}
	return y;
}


// EXPORTS //

module.exports = ssbmv;
