/*
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// TypeScript Version: 4.1

/// <reference types="@stdlib/types"/>

import { Layout, MatrixTriangle, DiagonalType, OperationSide, TransposeOperation } from '@stdlib/types/blas';

/**
* Interface describing `dtrsm`.
*/
interface Routine {
	/**
	* Solve matrix equation `op(A) * X = alpha * B` or `X * op(A) = alpha * B` where `alpha` is a scalar, `X` and `B` are `m` by `n` matrices, `A` is a unit, or non-unit, upper or lower triangular matrix and `op(A)` is one of `op(A) = A` or `op(A) = A^T`. The matrix `X` is overwritten on `B`.
	*
	* @param order - storage layout of `A` and `B`
	* @param side - specifies whether `op( A )` appears on the left or right of `X`
	* @param uplo - specifies whether the upper or lower triangular part of the matrix `A` is supplied
	* @param transa - specifies the form of `op( A )` to be used in matrix multiplication
	* @param diag - specifies whether or not `A` is unit triangular
	* @param m - number of rows in `B`
	* @param n - number of columns in `B`
	* @param alpha - scalar constant
	* @param A - input matrix `A`
	* @param LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)
	* @param B - input matrix `B`
	* @param LDB - stride of the first dimension of `B` (a.k.a., leading dimension of the matrix `B`)
	* @returns `B`
	*
	* @example
	* var Float64Array = require( '@stdlib/array/float64' );
	*
	* var A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
	* var B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );
	*
	* dtrsm( 'row-major', 'left', 'upper', 'no-transpose', 'non-unit', 2, 2, 6.0, A, 2, B, 2 );
	* // B => <Float64Array>[ 30.0, 6.0, 0.0, 12.0 ]
	*/
	( order: Layout, side: OperationSide, uplo: MatrixTriangle, transa: TransposeOperation, diag: DiagonalType, m: number, n: number, alpha: number, A: Float64Array, LDA: number, B: Float64Array, LDB: number ): Float64Array;

	/**
	* Solve matrix equation `op(A) * X = alpha * B` or `X * op(A) = alpha * B` where `alpha` is a scalar, `X` and `B` are `m` by `n` matrices, `A` is a unit, or non-unit, upper or lower triangular matrix and `op(A)` is one of `op(A) = A` or `op(A) = A^T`. The matrix `X` is overwritten on `B`.
	*
	* @param side - specifies whether `op( A )` appears on the left or right of `X`
	* @param uplo - specifies whether the upper or lower triangular part of the matrix `A` is supplied
	* @param transa - specifies the form of `op( A )` to be used in matrix multiplication
	* @param diag - specifies whether or not `A` is unit triangular
	* @param m - number of rows in `B`
	* @param n - number of columns in `B`
	* @param alpha - scalar constant
	* @param A - input matrix `A`
	* @param strideA1 - stride of the first dimension of `A`
	* @param strideA2 - stride of the second dimension of `A`
	* @param offsetA - starting index for `A`
	* @param B - input matrix `B`
	* @param strideB1 - stride of the first dimension of `B`
	* @param strideB2 - stride of the second dimension of `B`
	* @param offsetB - starting index for `B`
	* @returns `B`
	*
	* @example
	* var Float64Array = require( '@stdlib/array/float64' );
	*
	* var A = new Float64Array( [ 0.0, 0.0, 1.0, 3.0, 0.0, 4.0 ] );
	* var B = new Float64Array( [ 0.0, 5.0, 7.0, 0.0, 8.0 ] );
	*
	* dtrsm.ndarray( 'left', 'upper', 'no-transpose', 'non-unit', 2, 2, 6.0, A, 2, 1, 2, B, 2, 1, 1 );
	* // B => <Float64Array>[ 0.0, 30.0, 6.0, 0.0, 12.0 ]
	*/
	ndarray( side: OperationSide, uplo: MatrixTriangle, transa: TransposeOperation, diag: DiagonalType, m: number, n: number, alpha: number, A: Float64Array, strideA1: number, strideA2: number, offsetA: number, B: Float64Array, strideB1: number, strideB2: number, offsetB: number ): Float64Array;
}

/**
* Solve matrix equation `op(A) * X = alpha * B` or `X * op(A) = alpha * B` where `alpha` is a scalar, `X` and `B` are `m` by `n` matrices, `A` is a unit, or non-unit, upper or lower triangular matrix and `op(A)` is one of `op(A) = A` or `op(A) = A^T`. The matrix `X` is overwritten on `B`.
*
* @param order - storage layout of `A` and `B`
* @param side - specifies whether `op( A )` appears on the left or right of `X`
* @param uplo - specifies whether the upper or lower triangular part of the matrix `A` is supplied
* @param transa - specifies the form of `op( A )` to be used in matrix multiplication
* @param diag - specifies whether or not `A` is unit triangular
* @param m - number of rows in `B`
* @param n - number of columns in `B`
* @param alpha - scalar constant
* @param A - input matrix `A`
* @param LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)
* @param B - input matrix `B`
* @param LDB - stride of the first dimension of `B` (a.k.a., leading dimension of the matrix `B`)
* @returns `B`
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
* var B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );
*
* dtrsm( 'row-major', 'left', 'upper', 'no-transpose', 'non-unit', 2, 2, 6.0, A, 2, B, 2 );
* // B => <Float64Array>[ 30.0, 6.0, 0.0, 12.0 ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var A = new Float64Array( [ 0.0, 0.0, 1.0, 3.0, 0.0, 4.0 ] );
* var B = new Float64Array( [ 0.0, 5.0, 7.0, 0.0, 8.0 ] );
*
* dtrsm.ndarray( 'left', 'upper', 'no-transpose', 'non-unit', 2, 2, 6.0, A, 2, 1, 2, B, 2, 1, 1 );
* // B => <Float64Array>[ 0.0, 30.0, 6.0, 0.0, 12.0 ]
*/
declare var dtrsm: Routine;


// EXPORTS //

export = dtrsm;
