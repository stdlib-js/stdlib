
{{alias}}( ord, side, uplo, transa, diag, m, n, alpha, A, LDA, B, LDB )
    Solves matrix equation `op(A) * X = alpha * B` or `X * op(A) = alpha * B`
    where `alpha` is a scalar, `X` and `B` are m by n matrices, `A` is a unit,
    or non-unit, upper or lower triangular matrix and `op(A)` is one of
    `op(A) = A` or `op(A) = A^T`. The matrix `X` is overwritten on `B`.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    If `M` or `N` are equal to `0`, the function returns `B` unchanged.

    Parameters
    ----------
    ord: string
        Row-major (C-style) or column-major (Fortran-style) order. Must be
        either 'row-major' or 'column-major'.

    side: string
        Specifies whether `op(A)` appears on the left or right side of `X`.
        Must be either 'left' or 'right'.

    uplo: string
        Specifies whether the upper or lower triangular matrix of `A` is
        supplied. Must be either 'upper' or 'lower'.

    transa: string
        Specifies the form of `op(A)` to be used in the matrix
        multiplication.

    diag: string
        Specifies whether `A` is unit triangular. Must be either 'unit' or
        'non-unit'.

    m: integer
        Number of rows in `B`.

    n: integer
        Number of columns in `B`.

    alpha: number
        Scalar constant.

    A: Float64Array
        Triangular matrix `A`.

    LDA: integer
        Stride of the first dimension of `A` (a.k.a., leading dimension of the
        matrix `A`).

    B: Float64Array
        Triangular matrix `B`.

    LDB: integer
        Stride of the first dimension of `B` (a.k.a., leading dimension of the
        matrix `B`).

    Returns
    -------
    B: Float64Array
        Output matrix.

    Examples
    --------
    > var A = new {{alias:@stdlib/array/float64}}( [ 1.0, 3.0, 0.0, 4.0 ] );
    > var B = new {{alias:@stdlib/array/float64}}( [ 5.0, 7.0, 0.0, 8.0 ] );
    > var ord = 'row-major';
    > var sd = 'left';
    > var ul = 'upper';
    > var ta = 'no-transpose';
    > var dg = 'non-unit';
    > {{alias}}( ord, sd, ul, ta, dg, 2, 2, 6.0, A, 2, B, 2 )
    <Float64Array>[ 30.0, 6.0, 0.0, 12.0 ]


{{alias}}.ndarray( s, ul, ta, d, m, n, α, A, sa1, sa2, oa, B, sb1, sb2, ob )
    Solves matrix equation `op(A) * X = alpha * B` or `X * op(A) = alpha * B`
    using alternative indexing semantics where `alpha` is a scalar, `X` and
    `B` are m by n matrices, `A` is a unit, or non-unit, upper or lower
    triangular matrix and `op(A)` is one of `op(A) = A` or
    `op(A) = A^T`. The matrix `X` is overwritten on `B`.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing semantics based on starting
    indices.

    Parameters
    ----------
    s: string
        Specifies whether `op(A)` appears on the left or right side of `X`.
        Must be either 'left' or 'right'.

    ul: string
        Specifies whether the upper or lower triangular matrix of `A` is
        supplied. Must be either 'upper' or 'lower'.

    ta: string
        Specifies the form of `op(A)` to be used in the matrix
        multiplication.

    d: string
        Specifies whether `A` is unit triangular. Must be either 'unit' or
        'non-unit'.

    m: integer
        Number of rows in `B`.

    n: integer
        Number of columns in `B`.

    α: number
        Scalar constant.

    A: Float64Array
        Triangular matrix `A`.

    sa1: integer
        Stride of the first dimension of `A`.

    sa2: integer
        Stride of the second dimension of `A`.

    oa: integer
        Starting index for `A`.

    B: Float64Array
        Triangular matrix `B`.

    sb1: integer
        Stride of the first dimension of `B`.

    sb2: integer
        Stride of the second dimension of `B`.

    ob: integer
        Starting index for `B`.

    Returns
    -------
    B: Float64Array
        Output matrix.

    Examples
    --------
    > var A = new {{alias:@stdlib/array/float64}}( [ 1.0, 3.0, 0.0, 4.0 ] );
    > var B = new {{alias:@stdlib/array/float64}}( [ 5.0, 7.0, 0.0, 8.0 ] );
    > var s = 'left';
    > var ul = 'upper';
    > var ta = 'no-transpose';
    > var dg = 'non-unit';
    > {{alias}}.ndarray( s, ul, ta, dg, 2, 2, 6.0, A, 2, 1, 0, B, 2, 1, 0 )
    <Float64Array>[ 30.0, 6.0, 0.0, 12.0 ]

    See Also
    --------
