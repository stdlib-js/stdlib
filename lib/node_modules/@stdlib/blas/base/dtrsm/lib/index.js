/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* BLAS routine to solve matrix equation `op(A) * X = alpha * B` or `X * op(A) = alpha * B` where `alpha` is a scalar, `X` and `B` are `m` by `n` matrices, `A` is a unit, or non-unit, upper or lower triangular matrix and `op(A)` is one of `op(A) = A` or `op(A) = A^T`. The matrix `X` is overwritten on `B`.
*
* @module @stdlib/blas/base/dtrsm
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var dtrsm = require( '@stdlib/blas/base/dtrsm' );
*
* var A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
* var B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );
*
* dtrsm( 'row-major', 'left', 'upper', 'no-transpose', 'non-unit', 2, 2, 6.0, A, 2, B, 2 );
* // B => <Float64Array>[ 30.0, 6.0, 0.0, 12.0 ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var dtrsm = require( '@stdlib/blas/base/dtrsm' );
*
* var A = new Float64Array( [ 0.0, 0.0, 1.0, 3.0, 0.0, 4.0 ] );
* var B = new Float64Array( [ 0.0, 5.0, 7.0, 0.0, 8.0 ] );
*
* dtrsm.ndarray( 'left', 'upper', 'no-transpose', 'non-unit', 2, 2, 6.0, A, 2, 1, 2, B, 2, 1, 1 );
* // B => <Float64Array>[ 0.0, 30.0, 6.0, 0.0, 12.0 ]
*/

// MODULES //

var join = require( 'path' ).join;
var tryRequire = require( '@stdlib/utils/try-require' );
var isError = require( '@stdlib/assert/is-error' );
var main = require( './main.js' );


// MAIN //

var dtrsm;
var tmp = tryRequire( join( __dirname, './native.js' ) );
if ( isError( tmp ) ) {
	dtrsm = main;
} else {
	dtrsm = tmp;
}


// EXPORTS //

module.exports = dtrsm;
