/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable max-len, max-statements, max-depth, max-lines-per-function */

'use strict';

// MODULES //

var isRowMajor = require( '@stdlib/ndarray/base/assert/is-row-major' );


// MAIN //

/**
* Solve matrix equation `op(A) * X = alpha * B` or `X * op(A) = alpha * B` where `alpha` is a scalar, `X` and `B` are `m` by `n` matrices, `A` is a unit, or non-unit, upper or lower triangular matrix and `op(A)` is one of `op(A) = A` or `op(A) = A^T`. The matrix `X` is overwritten on `B`.
*
* @private
* @param {string} side - specifies whether `op( A )` appears on the left or right of `X`
* @param {string} uplo - specifies whether the upper or lower triangular part of the matrix `A` is supplied
* @param {string} transa - specifies the form of `op( A )` to be used in matrix multiplication
* @param {string} diag - specifies whether or not `A` is unit triangular
* @param {NonNegativeInteger} m - number of rows in `B`
* @param {NonNegativeInteger} n - number of columns in `B`
* @param {number} alpha - scalar constant
* @param {Float64Array} A - input matrix `A`
* @param {integer} strideA1 - stride of the first dimension of `A`
* @param {integer} strideA2 - stride of the second dimension of `A`
* @param {NonNegativeInteger} offsetA - starting index for `A`
* @param {Float64Array} B - input matrix `B`
* @param {integer} strideB1 - stride of the first dimension of `B`
* @param {integer} strideB2 - stride of the second dimension of `B`
* @param {NonNegativeInteger} offsetB - starting index for `B`
* @returns {Float64Array} `B`
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var A = new Float64Array( [ 1.0, 3.0, 0.0, 4.0 ] );
* var B = new Float64Array( [ 5.0, 7.0, 0.0, 8.0 ] );
*
* dtrsm( 'left', 'upper', 'no-transpose', 'non-unit', 2, 2, 6.0, A, 2, 1, 0, B, 2, 1, 0 );
* // B => <Float64Array>[ 30.0, 6.0, 0.0, 12.0 ]
*/
function dtrsm( side, uplo, transa, diag, m, n, alpha, A, strideA1, strideA2, offsetA, B, strideB1, strideB2, offsetB ) { // eslint-disable-line max-params
	var nounit;
	var lside;
	var upper;
	var tmp;
	var oa2;
	var ob2;
	var oa;
	var ob;
	var i;
	var j;
	var k;

	lside = side === 'left';
	nounit = diag === 'non-unit';
	upper = uplo === 'upper';

	if ( m === 0 || n === 0 ) {
		return B;
	}
	if ( isRowMajor( [ strideA1, strideA2 ] ) ) {
		lside = !lside;
		upper = !upper;
		tmp = strideA1;
		strideA1 = strideA2;
		strideA2 = tmp;
		tmp = strideB1;
		strideB1 = strideB2;
		strideB2 = tmp;
	}

	if ( alpha === 0.0 ) {
		for ( j = 0; j < n; j++ ) {
			ob = offsetB + ( j * strideB2 );
			for ( i = 0; i < m; i++ ) {
				B[ ob + ( i * strideB1 ) ] = 0.0;
			}
		}
		return B;
	}
	if ( lside ) {
		if ( transa === 'no-transpose' ) {
			// B := alpha * inv( A ) * B
			if ( upper ) {
				for ( j = 0; j < n; j++ ) {
					ob = offsetB + ( j * strideB2 );
					if ( alpha !== 1.0 ) {
						for ( i = 0; i < m; i++ ) {
							B[ ob + ( i * strideB1 ) ] *= alpha;
						}
					}
					for ( k = m - 1; k >= 0; k-- ) {
						oa = offsetA + ( k * strideA2 );
						oa2 = oa + ( k * strideA1 );
						ob2 = ob + ( k * strideB1 );
						if ( B[ ob2 ] !== 0.0 ) {
							if ( nounit ) {
								B[ ob2 ] /= A[ oa2 ];
							}
							for ( i = 0; i <= k - 1; i++ ) {
								B[ ob + ( i * strideB1 ) ] -= B[ ob2 ] * A[ oa + ( i * strideA1 ) ];
							}
						}
					}
				}
				return B;
			}
			// Lower
			for ( j = 0; j < n; j++ ) {
				ob = offsetB + ( j * strideB2 );
				if ( alpha !== 1.0 ) {
					for ( i = 0; i < m; i++ ) {
						B[ ob + ( i * strideB1 ) ] *= alpha;
					}
				}
				for ( k = 0; k < m; k++ ) {
					oa = offsetA + ( k * strideA2 );
					oa2 = oa + ( k * strideA1 );
					ob2 = ob + ( k * strideB1 );
					if ( B[ ob + ( k * strideB1 ) ] !== 0.0 ) {
						if ( nounit ) {
							B[ ob2 ] /= A[ oa2 ];
						}
						for ( i = k + 1; i < m; i++ ) {
							B[ ob + ( i * strideB1 ) ] -= B[ ob2 ] * A[ oa + ( i * strideA1 ) ];
						}
					}
				}
			}
			return B;
		}
		// B := alpha * inv( A**T ) * B
		if ( upper ) {
			for ( j = 0; j < n; j++ ) {
				ob = offsetB + ( j * strideB2 );
				for ( i = 0; i < m; i++ ) {
					oa = offsetA + ( i * strideA2 );
					oa2 = oa + ( i * strideA1 );
					tmp = alpha * B[ ob + ( i * strideB1 ) ];
					for ( k = 0; k <= i - 1; k++ ) {
						tmp -= A[ oa + ( k * strideA1 ) ] * B[ ob + ( k * strideB1 ) ];
					}
					if ( nounit ) {
						tmp /= A[ oa2 ];
					}
					B[ ob + ( i * strideB1 ) ] = tmp;
				}
			}
			return B;
		}
		// Lower
		for ( j = 0; j < n; j++ ) {
			ob = offsetB + ( j * strideB2 );
			for ( i = m - 1; i >= 0; i-- ) {
				oa = offsetA + ( i * strideA2 );
				oa2 = oa + ( i * strideA1 );
				tmp = alpha * B[ ob + ( i * strideB1 ) ];
				for ( k = i + 1; k < m; k++ ) {
					tmp -= A[ oa + ( k * strideA1 ) ] * B[ ob + k ];
				}
				if ( nounit ) {
					tmp /= A[ oa2 ];
				}
				B[ ob + ( i * strideB1 ) ] = tmp;
			}
		}
		return B;
	}
	// Right
	if ( transa === 'no-transpose' ) {
		// B := alpha * B * inv( A )
		if ( upper ) {
			for ( j = 0; j < n; j++ ) {
				ob = offsetB + ( j * strideB2 );
				oa = offsetA + ( j * strideA2 );
				if ( alpha !== 1.0 ) {
					for ( i = 0; i < m; i++ ) {
						B[ ob + ( i * strideB1 ) ] *= alpha;
					}
				}
				for ( k = 0; k <= j - 1; k++ ) {
					ob2 = offsetB + ( k * strideB2 );
					if ( A[ oa + ( k * strideA1 ) ] !== 0.0 ) {
						for ( i = 0; i < m; i++ ) {
							B[ ob + ( i * strideB1 ) ] -= A[ oa + ( k * strideA1 ) ] * B[ ob2 + ( i * strideB1 ) ];
						}
					}
				}
				if ( nounit ) {
					tmp = 1.0 / A[ oa + j ];
					for ( i = 0; i < m; i++ ) {
						B[ ob + ( i * strideB1 ) ] *= tmp;
					}
				}
			}
			return B;
		}
		// Lower
		for ( j = n - 1; j >= 0; j-- ) {
			ob = offsetB + ( j * strideB2 );
			oa = offsetA + ( j * strideA2 );
			if ( alpha !== 1.0 ) {
				for ( i = 0; i < m; i++ ) {
					B[ ob + ( i * strideB1 ) ] *= alpha;
				}
			}
			for ( k = j + 1; k < n; k++ ) {
				ob2 = offsetB + ( k * strideB2 );
				if ( A[ oa + k ] !== 0 ) {
					for ( i = 0; i < m; i++ ) {
						B[ ob + ( i * strideB1 ) ] -= A[ oa + ( k * strideA1 ) ] * B[ ob2 + ( i * strideB1 ) ];
					}
				}
			}
			if ( nounit ) {
				tmp = 1.0 / A[ oa + ( j * strideA1 ) ];
				for ( i = 0; i < m; i++ ) {
					B[ ob + ( i * strideB1 ) ] *= tmp;
				}
			}
		}
		return B;
	}
	// B := alpha * B * inv( A**T )
	if ( upper ) {
		for ( k = n - 1; k >= 0; k-- ) {
			ob = offsetB + ( k * strideB2 );
			oa = offsetA + ( k * strideA2 );
			oa2 = oa + ( k * strideA1 );
			if ( nounit ) {
				tmp = 1.0 / A[ oa2 ];
				for ( i = 0; i < m; i++ ) {
					B[ ob + ( i * strideB1 ) ] *= tmp;
				}
			}
			for ( j = 0; j <= k - 1; j++ ) {
				ob2 = offsetB + ( j * strideB2 );
				if ( A[ oa + ( j * strideA1 ) ] !== 0 ) {
					tmp = A[ oa + ( j * strideA1 ) ];
					for ( i = 0; i < m; i++ ) {
						B[ ob2 + ( i * strideB1 ) ] -= tmp * B[ ob + ( i * strideB1 ) ];
					}
				}
			}
			if ( alpha !== 1.0 ) {
				for ( i = 0; i < m; i++ ) {
					B[ ob + ( i * strideB1 ) ] *= alpha;
				}
			}
		}
		return B;
	}
	// Lower
	for ( k = 0; k < n; k++ ) {
		ob = offsetB + ( k * strideB2 );
		oa = offsetA + ( k * strideA2 );
		oa2 = oa + ( k * strideA1 );
		if ( nounit ) {
			tmp = 1.0 / A[ oa2 ];
			for ( i = 0; i < m; i++ ) {
				B[ ob + ( i * strideB1 ) ] *= tmp;
			}
		}
		for ( j = k + 1; j < n; j++ ) {
			ob2 = offsetB + ( j * strideB2 );
			if ( A[ oa + j ] !== 0 ) {
				tmp = A[ oa + ( j * strideA1 ) ];
				for ( i = 0; i < m; i++ ) {
					B[ ob2 + ( i * strideB1 ) ] -= tmp * B[ ob + ( i * strideB1 ) ];
				}
			}
		}
		if ( alpha !== 1.0 ) {
			for ( i = 0; i < m; i++ ) {
				B[ ob + ( i * strideB1 ) ] *= alpha;
			}
		}
	}
	return B;
}


// EXPORTS //

module.exports = dtrsm;
