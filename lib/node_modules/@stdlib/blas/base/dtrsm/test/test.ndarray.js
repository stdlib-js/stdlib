/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable max-len */

'use strict';

// MODULES //

var tape = require( 'tape' );
var Float64Array = require( '@stdlib/array/float64' );
var EPS = require( '@stdlib/constants/float64/eps' );
var abs = require( '@stdlib/math/base/special/abs' );
var dtrsm = require( './../lib/ndarray.js' );


// FUNCTIONS //

/**
* Tests for element-wise approximate equality.
*
* @private
* @param {Object} t - test object
* @param {Collection} actual - actual values
* @param {Collection} expected - expected values
* @param {number} rtol - relative tolerance
*/
function isApprox( t, actual, expected, rtol ) {
	var delta;
	var tol;
	var i;

	t.strictEqual( actual.length, expected.length, 'returns expected value' );
	for ( i = 0; i < expected.length; i++ ) {
		if ( actual[ i ] === expected[ i ] ) {
			t.strictEqual( actual[ i ], expected[ i ], 'returns expected value' );
		} else {
			delta = abs( actual[ i ] - expected[ i ] );
			tol = rtol * EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. actual: '+actual[ i ]+'. expected: '+expected[ i ]+'. delta: '+delta+'. tol: '+tol+'.' );
		}
	}
}


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof dtrsm, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function has an arity of 15', function test( t ) {
	t.strictEqual( dtrsm.length, 15, 'returns expected value' );
	t.end();
});

tape( 'the function throws an error if provided an invalid first argument', function test( t ) {
	var values;
	var A;
	var B;
	var i;

	values = [
		'foo',
		'bar',
		'beep',
		'boop',
		-5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];

	A = new Float64Array( [ 0.0, 0.0, 1.0, 3.0, 0.0, 4.0 ] );
	B = new Float64Array( [ 0.0, 0.0, 0.0, 5.0, 7.0, 0.0, 8.0 ] );

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			dtrsm( value, 'lower', 'no-transpose', 'non-unit', 2, 2, 6.0, A, 1, 2, 2, B, 1, 2, 3 );
		};
	}
});

tape( 'the function throws an error if provided an invalid second argument', function test( t ) {
	var values;
	var A;
	var B;
	var i;

	values = [
		'foo',
		'bar',
		'beep',
		'boop',
		-5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];

	A = new Float64Array( [ 0.0, 0.0, 1.0, 3.0, 0.0, 4.0 ] );
	B = new Float64Array( [ 0.0, 0.0, 0.0, 5.0, 7.0, 0.0, 8.0 ] );

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			dtrsm( 'left', value, 'no-transpose', 'non-unit', 2, 2, 6.0, A, 1, 2, 2, B, 1, 2, 3 );
		};
	}
});

tape( 'the function throws an error if provided an invalid third argument', function test( t ) {
	var values;
	var A;
	var B;
	var i;

	values = [
		'foo',
		'bar',
		'beep',
		'boop',
		-5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];

	A = new Float64Array( [ 0.0, 0.0, 1.0, 3.0, 0.0, 4.0 ] );
	B = new Float64Array( [ 0.0, 0.0, 0.0, 5.0, 7.0, 0.0, 8.0 ] );

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			dtrsm( 'left', 'lower', value, 'non-unit', 2, 2, 6.0, A, 1, 2, 2, B, 1, 2, 3 );
		};
	}
});

tape( 'the function throws an error if provided an invalid fourth argument', function test( t ) {
	var values;
	var A;
	var B;
	var i;

	values = [
		'foo',
		'bar',
		'beep',
		'boop',
		-5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];

	A = new Float64Array( [ 0.0, 0.0, 1.0, 3.0, 0.0, 4.0 ] );
	B = new Float64Array( [ 0.0, 0.0, 0.0, 5.0, 7.0, 0.0, 8.0 ] );

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			dtrsm( 'left', 'lower', 'no-transpose', value, 2, 2, 6.0, A, 1, 2, 2, B, 1, 2, 3 );
		};
	}
});

tape( 'the function supports providing an offset to A & B ( column-major, lower )', function test( t ) {
	var expected;
	var out;
	var A;
	var B;

	A = new Float64Array( [ 0.0, 0.0, 1.0, 3.0, 0.0, 4.0 ] );
	B = new Float64Array( [ 0.0, 0.0, 0.0, 5.0, 7.0, 0.0, 8.0 ] );

	expected = new Float64Array( [ 0.0, 0.0, 0.0, 30.0, -12.0, 0.0, 12.0 ] );

	out = dtrsm( 'left', 'lower', 'no-transpose', 'non-unit', 2, 2, 6.0, A, 1, 2, 2, B, 1, 2, 3 );
	t.strictEqual( out, B, 'returns expected value' );
	isApprox( t, B, expected, 2.0 );

	t.end();
});

tape( 'the function supports providing an offset to A & B ( row-major, upper )', function test( t ) {
	var expected;
	var out;
	var A;
	var B;

	A = new Float64Array( [ 0.0, 1.0, 3.0, 0.0, 4.0 ] );
	B = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 5.0, 7.0, 0.0, 8.0 ] );

	expected = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 30, 6, 0, 12 ] );

	out = dtrsm( 'left', 'upper', 'no-transpose', 'non-unit', 2, 2, 6.0, A, 2, 1, 1, B, 2, 1, 4 );
	t.strictEqual( out, B, 'returns expected value' );
	isApprox( t, B, expected, 2.0 );

	t.end();
});

tape( 'the function supports accessing accessing arrays in a non contiguous order of columns ( row-major, upper )', function test( t ) {
	var expected;
	var out;
	var A;
	var B;

	A = new Float64Array( [ 999.9, 1.0, 999.9, 3.0, 0.0, 999.9, 4.0 ] );
	B = new Float64Array( [ 999.9, 999.9, 999.9, 999.9, 5.0, 999.9, 7.0, 0.0, 999.9, 8.0 ] );

	expected = new Float64Array( [ 999.9, 999.9, 999.9, 999.9, 30, 999.9, 6, 0, 999.9, 12 ] );

	out = dtrsm( 'left', 'upper', 'no-transpose', 'non-unit', 2, 2, 6.0, A, 3, 2, 1, B, 3, 2, 4 );
	t.strictEqual( out, B, 'returns expected value' );
	isApprox( t, B, expected, 2.0 );

	t.end();
});

tape( 'the function supports accessing accessing arrays in a non contiguous order of columns & rows ( row-major, upper )', function test( t ) {
	var expected;
	var out;
	var A;
	var B;

	A = new Float64Array( [ 999.9, 1.0, 999.9, 3.0, 999.9, 999.9, 999.9, 0.0, 999.9, 4.0 ] );
	B = new Float64Array( [ 999.9, 999.9, 999.9, 999.9, 5.0, 999.9, 7.0, 999.9, 999.9, 999.9, 0.0, 999.9, 8.0 ] );

	expected = new Float64Array( [ 999.9, 999.9, 999.9, 999.9, 30, 999.9, 6, 999.9, 999.9, 999.9, 0, 999.9, 12 ] );

	out = dtrsm( 'left', 'upper', 'no-transpose', 'non-unit', 2, 2, 6.0, A, 6, 2, 1, B, 6, 2, 4 );
	t.strictEqual( out, B, 'returns expected value' );
	isApprox( t, B, expected, 2.0 );

	t.end();
});

tape( 'the function supports complex and different access patterns for both A and B ( row-major, upper )', function test( t ) {
	var expected;
	var out;
	var A;
	var B;

	A = new Float64Array( [ 999.9, 1.0, 999.9, 3.0, 999.9, 999.9, 999.9, 0.0, 999.9, 4.0 ] );
	B = new Float64Array( [ 999.9, 999.9, 999.9, 999.9, 5.0, 999.9, 999.9, 7.0, 999.9, 999.9, 999.9, 999.9, 0.0, 999.9, 999.9, 8.0 ] );

	expected = new Float64Array( [ 999.9, 999.9, 999.9, 999.9, 30, 999.9, 999.9, 6, 999.9, 999.9, 999.9, 999.9, 0, 999.9, 999.9, 12 ] );

	out = dtrsm( 'left', 'upper', 'no-transpose', 'non-unit', 2, 2, 6.0, A, 6, 2, 1, B, 8, 3, 4 );
	t.strictEqual( out, B, 'returns expected value' );
	isApprox( t, B, expected, 2.0 );

	t.end();
});

tape( 'the function supports accessing elements in reverser order ( row-major, upper )', function test( t ) {
	var expected;
	var out;
	var A;
	var B;

	A = new Float64Array( [ 4.0, 999.9, 0.0, 999.9, 999.9, 999.9, 3.0, 999.9, 1.0 ] );
	B = new Float64Array( [ 8.0, 999.9, 999.9, 0.0, 999.9, 999.9, 999.9, 999.9, 7.0, 999.9, 999.9, 5.0 ] );

	expected = new Float64Array( [ 12, 999.9, 999.9, 0, 999.9, 999.9, 999.9, 999.9, 6, 999.9, 999.9, 30 ] );

	out = dtrsm( 'left', 'upper', 'no-transpose', 'non-unit', 2, 2, 6.0, A, -6, -2, 8, B, -8, -3, 11 );
	t.strictEqual( out, B, 'returns expected value' );
	isApprox( t, B, expected, 2.0 );

	t.end();
});

tape( 'the function supports accessing elements of both arrays in different order ( row-major, upper )', function test( t ) {
	var expected;
	var out;
	var A;
	var B;

	A = new Float64Array( [ 1.0, 999.9, 3.0, 999.9, 999.9, 999.9, 0.0, 999.9, 4.0 ] );
	B = new Float64Array( [ 8.0, 999.9, 999.9, 0.0, 999.9, 999.9, 999.9, 999.9, 7.0, 999.9, 999.9, 5.0 ] );

	expected = new Float64Array( [ 12, 999.9, 999.9, 0, 999.9, 999.9, 999.9, 999.9, 6, 999.9, 999.9, 30 ] );

	out = dtrsm( 'left', 'upper', 'no-transpose', 'non-unit', 2, 2, 6.0, A, 6, 2, 0, B, -8, -3, 11 );
	t.strictEqual( out, B, 'returns expected value' );
	isApprox( t, B, expected, 2.0 );

	t.end();
});
