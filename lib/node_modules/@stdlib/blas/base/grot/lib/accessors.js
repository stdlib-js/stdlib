/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

var real = require( '@stdlib/complex/real' );
var imag = require( '@stdlib/complex/imag' );
var isComplexTypedArray = require( '@stdlib/array/base/assert/is-complex-typed-array' );
var complex = require( '@stdlib/complex/cmplx' );
var dtype = require( '@stdlib/complex/dtype' );
/**
* Applies a plane rotation.
*
* @private
* @param {PositiveInteger} N - number of indexed elements
* @param {Object} x - first input array object
* @param {Collection} x.data - first input array data
* @param {Array<Function>} x.accessors - array element accessors
* @param {integer} strideX - `x` stride length
* @param {NonNegativeInteger} offsetX - starting `x` index
* @param {Object} y - second input array object
* @param {Collection} y.data - second input array array
* @param {Array<Function>} y.accessors - array element accessors
* @param {integer} strideY - `y` stride length
* @param {NonNegativeInteger} offsetY - starting `y` index
* @param {number} c - cosine of the angle of rotation
* @param {number} s - sine of the angle of rotation
* @returns {Object} `y`
*
* @example
* var Complex64Array = require( '@stdlib/array/complex64' );
* var Complex64 = require( '@stdlib/complex/float32' );
* var reinterpret64 = require( '@stdlib/strided/base/reinterpret-complex64' );
*
* function setter( data, idx, value ) {
*     data.set( value, idx );
* }
*
* function getter( data, idx ) {
*     return data.get( idx );
* }
*
* var x = {
*     'data': new Complex64Array( [ 1.0, 2.0, 3.0, 4.0 ] ),
*     'accessors': [ getter, setter ]
* };
*
* var y = {
*     'data': new Complex64Array( [ 5.0, 6.0, 7.0, 8.0 ] ),
*     'accessors': [ getter, setter ]
* };
*
* grot( x.data.length, x, 1, 0, y, 1, 0, 0.8, 0.6 );
*
* var viewX = reinterpret64( x.data, 0 );
* // viewX => <Float32Array>[ ~3.8, ~5.2, ~6.6, 8.0 ]
*
* var viewY = reinterpret64( y.data, 0 );
* // viewY => <Float32Array>[ ~3.4, ~3.6, ~3.8, 4.0 ]
*/
function grot( N, x, strideX, offsetX, y, strideY, offsetY, c, s ) {
	var xbuf;
	var ybuf;
	var set;
	var get;
	var tmp;
	var ix;
	var iy;
	var dt;
	var i;

	// Cache references to array data:
	xbuf = x.data;
	ybuf = y.data;

	// Cache a reference to the element accessors:
	get = x.accessors[ 0 ];
	set = y.accessors[ 1 ];

	ix = offsetX;
	iy = offsetY;
	for ( i = 0; i < N; i++ ) {
		if ( isComplexTypedArray( x.data ) ) {
			if ( dtype( x.data.get( 0 ) ) === 'complex128' ) {
				dt = 'float64';
			}
			else if ( dtype( x.data.get( 0 ) ) === 'complex64' ) {
				dt = 'float32';
			}
			tmp = complex( ( ( c * real( get( xbuf, ix ) ) ) + ( s * real( get( ybuf, iy ) ) ) ), ( ( c * imag( get( xbuf, ix ) ) ) + ( s * imag( get( ybuf, iy ) ) ) ), dt ); // eslint-disable-line max-len
			set( ybuf, iy, complex( ( ( c * real( get( ybuf, iy ) ) ) - ( s * real( get( xbuf, ix ) ) ) ), ( ( c * imag( get( ybuf, iy ) ) ) - ( s * imag( get( xbuf, ix ) ) ) ), dt ) ); // eslint-disable-line max-len
		} else {
			tmp = ( c * get( xbuf, ix ) ) + ( s * get( ybuf, iy ) );
			set( ybuf, iy, ( c * get( ybuf, iy ) ) - ( s * get( xbuf, ix ) ) );
		}
		set( xbuf, ix, tmp );
		ix += strideX;
		iy += strideY;
	}
	return y;
}


// EXPORTS //

module.exports = grot;
