/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var arraylike2object = require( '@stdlib/array/base/arraylike2object' );
var isComplexTypedArray = require( '@stdlib/array/base/assert/is-complex-typed-array' );
var isAccessorArray = require( '@stdlib/array/base/assert/is-accessor-array' );
var accessors = require( './accessors.js' );


// MAIN //

/**
* Applies a plane rotation.
*
* @param {PositiveInteger} N - number of indexed elements
* @param {Collection} x - first input array
* @param {integer} strideX - `x` stride length
* @param {NonNegativeInteger} offsetX - starting `x` index
* @param {Collection} y - second input array
* @param {integer} strideY - `y` stride length
* @param {NonNegativeInteger} offsetY - starting `y` index
* @param {number} c - cosine of the angle of rotation
* @param {number} s - sine of the angle of rotation
* @returns {Collection} `y`
*
* @example
* var x = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];
* var y = [ 6.0, 7.0, 8.0, 9.0, 10.0 ];
*
* grot( 4, x, 1, 1, y, 1, 1, 0.8, 0.6 );
* // x => [ 1.0, ~5.8, 7.2, 8.6, 10.0 ]
* // y => [ 6.0, 4.4, ~4.6, ~4.8, 5.0 ]
*/
function grot( N, x, strideX, offsetX, y, strideY, offsetY, c, s ) {
	var tmp;
	var out;
	var ox;
	var oy;
	var ix;
	var iy;
	var i;

	if ( N <= 0 ) {
		if ( isAccessorArray( y ) ) {
			if ( isComplexTypedArray( y ) ) {
				return y;
			}
			return y._buffer; // eslint-disable-line no-underscore-dangle
		}
		return y;
	}
	ox = arraylike2object( x );
	oy = arraylike2object( y );
	if ( ox.accessorProtocol || oy.accessorProtocol ) {
		out = accessors( N, ox, strideX, offsetX, oy, strideY, offsetY, c, s );
		if ( isComplexTypedArray( y ) ) {
			return out.data;
		}
		return out.data._buffer; // eslint-disable-line no-underscore-dangle
	}
	ix = offsetX;
	iy = offsetY;

	for ( i = 0; i < N; i++ ) {
		tmp = ( c * x[ ix ] ) + ( s * y[ iy ] );
		y[ iy ] = ( c * y[ iy ] ) - ( s * x[ ix ] );
		x[ ix ] = tmp;
		ix += strideX;
		iy += strideY;
	}
	return y;
}


// EXPORTS //

module.exports = grot;
