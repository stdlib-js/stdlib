
{{alias}}( ord, M, N, α, x, sx, y, sy, A, lda )
    Performs the rank 1 operation `A = α*x*y^T + A`, where `α` is a scalar, `x`
    is an `M` element vector, `y` is an `N` element vector and `A` is an `M` by
    `N` matrix.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    If `M` or `N` or `α` is equal to `0`, the function returns `A` unchanged.

    Parameters
    ----------
    ord: string
        Row-major (C-style) or column-major (Fortran-style) order.

    M: integer
        Number of rows in `A`.

    N: integer
        Number of columns in `A`.

    α: number
        Scalar constant.

    x: Float32Array
        First input vector.

    sx: integer
        Index increment for `x`.

    y: Float32Array
        Second input vector.

    sy: integer
        Index increment for `y`.

    A: Float32Array
        Input Matrix.

    lda: integer
        Stride of the first dimension of `A` (a.k.a., leading dimension of the
        matrix `A`).

    Returns
    -------
    A: Float32Array
        Input Matrix.

    Examples
    --------
    // Standard usage:
    > var x = new {{alias:@stdlib/array/float32}}( [ 1.0, 1.0 ] );
    > var y = new {{alias:@stdlib/array/float32}}( [ 1.0, 1.0 ] );
    > var A = new {{alias:@stdlib/array/float32}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > var ord = 'row-major';
    > {{alias}}( ord, 2, 2, 1.0, x, 1, y, 1, A, 2 )
    <Float32Array>[ 2.0, 3.0, 4.0, 5.0 ]

    // Advanced indexing:
    > x = new {{alias:@stdlib/array/float32}}( [ 1.0, 1.0 ] );
    > y = new {{alias:@stdlib/array/float32}}( [ 1.0, 1.0 ] );
    > A = new {{alias:@stdlib/array/float32}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > {{alias}}( ord, 2, 2, 1.0, x, -1, y, -1, A, 2 )
    <Float32Array>[ 2.0, 3.0, 4.0, 5.0 ]


{{alias}}.ndarray( M, N, α, x, sx, ox, y, sy, oy, A, sa1, sa2, oa )
    Performs the rank 1 operation `A = α*x*y^T + A`, using alternative indexing
    semantics and where `α` is a scalar, `x` is an `M` element vector, `y` is an
    `N` element vector and `A` is an `M` by `N` matrix.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing semantics based on starting
    indices.

    Parameters
    ----------
    M: integer
        Number of rows in `A`.

    N: integer
        Number of columns in `A`.

    α: number
        Scalar constant.

    x: Float32Array
        First input vector.

    sx: integer
        Index increment for `x`.

    ox: integer
        Starting index for `x`.

    y: Float32Array
        Second input vector.

    sy: integer
        Index increment for `y`.

    oy: integer
        Starting index for `y`.

    A: Float32Array
        Input Matrix.

    sa1: integer
        Stride of the first dimension of `A`.

    sa2: integer
        Stride of the second dimension of `A`.

    oa: integer
        Starting index for `A`.

    Returns
    -------
    A: Float32Array
        Input Matrix.

    Examples
    --------
    > var x = new {{alias:@stdlib/array/float32}}( [ 1.0, 1.0 ] );
    > var y = new {{alias:@stdlib/array/float32}}( [ 1.0, 1.0 ] );
    > var A = new {{alias:@stdlib/array/float32}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > {{alias}}.ndarray( 2, 2, 1.0, x, 1, 0, y, 1, 0, A, 2, 1, 0 )
    <Float32Array>[ 2.0, 3.0, 4.0, 5.0 ]

    See Also
    --------
