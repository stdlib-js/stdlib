
{{alias}}( N, x, strideX )
    Finds the index of the first element having maximum absolute value.

    The `N` and `strideX` parameters determine which elements in `x` are
    accessed at runtime.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    If `N < 1` or `strideX <= 0`, the function returns `0`.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    x: Array<number>|TypedArray
        First input array.

    strideX: integer
        Index increment for `x`.

    Returns
    -------
    idx: integer
        Index value.

    Examples
    --------
    // Standard usage:
    > var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];
    > var idx = {{alias}}( x.length, x, 1 )
    3

    // Strides:
    > x = [ -2.0, 1.0, 3.0, -5.0, 4.0, 0.0, -1.0, -3.0 ];
    > idx = {{alias}}( 4, x, 2 )
    2

    // Using view offsets:
    > x = new {{alias:@stdlib/array/float64}}( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );
    > var x1 = new {{alias:@stdlib/array/float64}}( x.buffer, x.BYTES_PER_ELEMENT*1 );
    > idx = {{alias}}( 3, x1, 2 )
    2


{{alias}}.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )
    Finds the index of the first element having maximum absolute value using
    alternative indexing semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the `offsetX` parameter supports indexing semantics based on a
    starting index.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    x: Array<number>|TypedArray
        First input array.

    strideX: integer
        Index increment for `x`.

    offsetX: integer
        Starting index for `x`.

    Returns
    -------
    idx: integer
        Index value.

    Examples
    --------
    // Standard usage:
    > var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ];
    > var idx = {{alias}}.ndarray( x.length, x, 1, 0 )
    3

    // Using the index offset:
    > x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];
    > idx = {{alias}}.ndarray( 3, x, 2, 1 )
    2

    See Also
    --------
