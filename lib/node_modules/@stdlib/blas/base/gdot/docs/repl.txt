
{{alias}}( N, x, strideX, y, strideY )
    Computes the dot product of two vectors.

    The `N` and stride parameters determine which elements in the strided arrays
    are accessed at runtime.

    Indexing is relative to the first index. To introduce an offset, use a typed
    array view.

    If `N <= 0`, the function returns `0.0`.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    x: Array<number>|TypedArray
        First input array.

    strideX: integer
        Index increment for `x`.

    y: Array<number>|TypedArray
        Second input array.

    strideY: integer
        Index increment for `y`.

    Returns
    -------
    dot: number
        The dot product of `x` and `y`.

    Examples
    --------
    // Standard usage:
    > var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];
    > var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];
    > var dot = {{alias}}( x.length, x, 1, y, 1 )
    -5.0

    // Strides:
    > x = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];
    > y = [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ];
    > var N = {{alias:@stdlib/math/base/special/floor}}( x.length / 2 );
    > dot = {{alias}}( N, x, 2, y, -1 )
    9.0

    // Using view offsets:
    > x = new {{alias:@stdlib/array/float64}}( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
    > y = new {{alias:@stdlib/array/float64}}( [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );
    > var x1 = new {{alias:@stdlib/array/float64}}( x.buffer, x.BYTES_PER_ELEMENT*1 );
    > var y1 = new {{alias:@stdlib/array/float64}}( y.buffer, y.BYTES_PER_ELEMENT*3 );
    > N = {{alias:@stdlib/math/base/special/floor}}( x.length / 2 );
    > dot = {{alias}}( N, x1, -2, y1, 1 )
    128.0


{{alias}}.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )
    Computes the dot product of two vectors using alternative indexing
    semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing based on a starting index.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    x: Array<number>|TypedArray
        First input array.

    strideX: integer
        Index increment for `x`.

    offsetX: integer
        Starting index for `x`.

    y: Array<number>|TypedArray
        Second input array.

    strideY: integer
        Index increment for `y`.

    offsetY: integer
        Starting index for `y`.

    Returns
    -------
    dot: number
        The dot product of `x` and `y`.

    Examples
    --------
    // Standard usage:
    > var x = [ 4.0, 2.0, -3.0, 5.0, -1.0 ];
    > var y = [ 2.0, 6.0, -1.0, -4.0, 8.0 ];
    > var dot = {{alias}}.ndarray( x.length, x, 1, 0, y, 1, 0 )
    -5.0

    // Strides:
    > x = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];
    > y = [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0 ];
    > var N = {{alias:@stdlib/math/base/special/floor}}( x.length / 2 );
    > dot = {{alias}}.ndarray( N, x, 2, 0, y, 2, 0 )
    9.0

    // Using offset indices:
    > x = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];
    > y = [ 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ];
    > N = {{alias:@stdlib/math/base/special/floor}}( x.length / 2 );
    > dot = {{alias}}.ndarray( N, x, -2, x.length-1, y, 1, 3 )
    128.0

    See Also
    --------

