
{{alias}}( N, alpha, x, strideX )
    Scales a complex single-precision floating-point vector by a
    real single-precision constant.

    The `N` and `stride` parameters determine which elements in `x` are
    accessed at runtime.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    If `N <= 0` or `stride <= 0`, the function returns `x` unchanged.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    alpha: number
        Scalar constant.

    x: Complex64Array
        Input array.

    strideX: integer
        Index increment for `x`.

    Returns
    -------
    x: Complex64Array
        Input array.

    Examples
    --------
    // Standard usage:
    > var x = new {{alias:@stdlib/array/complex64}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > var alpha = 2.0;
    > {{alias}}( 2, alpha, x, 1 );
    > var z = x.get( 0 );
    > var re = {{alias:@stdlib/complex/realf}}( z )
    2.0
    > var im = {{alias:@stdlib/complex/imag}}( z )
    4.0

    // Advanced indexing:
    > x = new {{alias:@stdlib/array/complex64}}( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
    > alpha = 2.0;
    > {{alias}}( 2, alpha, x, 2 );
    > z = x.get( 1 );
    > re = {{alias:@stdlib/complex/realf}}( z )
    3.0
    > im = {{alias:@stdlib/complex/imag}}( z )
    4.0

    // Using typed array views:
    > var x0 = new {{alias:@stdlib/array/complex64}}( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
    > var x1 = new {{alias:@stdlib/array/complex64}}( x0.buffer, x0.BYTES_PER_ELEMENT*1 );
    > alpha = 4.0;
    > {{alias}}( 2, alpha, x1, 1 );
    > z = x0.get( 1 );
    > re = {{alias:@stdlib/complex/realf}}( z )
    12.0
    > im = {{alias:@stdlib/complex/imag}}( z )
    16.0


{{alias}}.ndarray( N, alpha, x, strideX, offsetX )
    Scales a complex single-precision floating-point vector by a real single-
    precision constant using alternative indexing semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameter supports indexing semantics based on a
    starting index.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    alpha: number
        Scalar constant.

    x: Complex64Array
        Input array.

    strideX: integer
        Index increment for `x`.

    offsetX: integer
        Starting index for `x`.

    Returns
    -------
    x: Complex64Array
        Input array.

    Examples
    --------
    // Standard usage:
    > var x = new {{alias:@stdlib/array/complex64}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > var alpha = 2.0;
    > {{alias}}.ndarray( 2, alpha, x, 1, 0 );
    > var z = x.get( 0 );
    > var re = {{alias:@stdlib/complex/realf}}( z )
    2.0
    > var im = {{alias:@stdlib/complex/imag}}( z )
    4.0

    // Advanced indexing:
    > x = new {{alias:@stdlib/array/complex64}}( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );
    > alpha = 3.0;
    > {{alias}}.ndarray( 2, alpha, x, 1, 2 );
    > z = x.get( 2 );
    > re = {{alias:@stdlib/complex/realf}}( z )
    15.0
    > im = {{alias:@stdlib/complex/imag}}( z )
    18.0

    See Also
    --------

