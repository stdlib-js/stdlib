/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var reinterpret = require( '@stdlib/strided/base/reinterpret-complex64' );


// MAIN //

/**
* Scales a complex single-precision floating-point vector by a real single-precision floating-point constant.
*
* @param {PositiveInteger} N - number of indexed elements
* @param {Number} alpha - scalar
* @param {Complex64Array} x - input array
* @param {integer} strideX - `x` stride length
* @returns {Complex64Array} input array
*
* @example
* var Complex64Array = require( '@stdlib/array/complex64' );
* var Complex64 = require( '@stdlib/complex/float32' );
* var realf = require( '@stdlib/complex/realf' );
* var imagf = require( '@stdlib/complex/imagf' );
* var csscal = require( '@stdlib/blas/base/csscal' );
*
* var x = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
* var alpha = 2.0;
*
* csscal( 3, alpha, x, 1 );
*
* var z = x.get( 0 );
* // returns <Complex64>
*
* var re = realf( z );
* // returns 2.0
*
* var im = imagf( z );
* // returns 4.0
*/
function csscal( N, alpha, x, strideX ) {
	var viewX;
	var ix;
	var i;

	viewX = reinterpret(x, 0);

	if ( N <= 0 || strideX <= 0 || alpha === 1.0 ) {
		return x;
	}

	if ( strideX === 1 ) {
		for ( i = 0; i < 2*N; i++ ) {
			viewX[i] *= alpha;
		}
	} else {
		ix = 0;
		for ( i = 0; i < N; i++ ) {
			viewX[ix] *= alpha;
			viewX[ix+1] *= alpha;
			ix += 2*strideX;
		}
	}
	return x;
}


// EXPORTS //

module.exports = csscal;
