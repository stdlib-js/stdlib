
{{alias}}( order, uplo, trans, diag, N, AP, x, sx )
    Performs one of the matrix-vector operations `x = A*x` or `x = A**T*x`,
    where `x` is an `N` element vector and `A` is an `N` by `N` unit, or
    non-unit, upper or lower triangular matrix, supplied in packed form.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    If `N` is equal to `0`, the function returns `x` unchanged.

    Parameters
    ----------
    order: string
        Row-major (C-style) or column-major (Fortran-style) order. Must be
        either 'row-major' or 'column-major'.

    uplo: string
        Specifies whether `A` is an upper or lower triangular matrix.

    trans: string
        Specifies whether `A` should be transposed, conjugate-transposed, or
        not transposed.

    diag: string
        Specifies whether `A` has a unit diagonal.

    N: integer
        Number of elements along each dimension of `A`.

    AP: Float64Array
        Matrix in packed form.

    x: Float64Array
        Input vector.

    sx: integer
        Index increment for `x`.

    Returns
    -------
    x: Float64Array
        Input vector.

    Examples
    --------
    > var x = new {{alias:@stdlib/array/float64}}( [ 1.0, 1.0 ] );
    > var AP = new {{alias:@stdlib/array/float64}}( [ 1.0, 2.0, 1.0 ] );
    > {{alias}}( 'row-major', 'upper', 'no-transpose', 'unit', 2, AP, x, 1 )
    <Float64Array>[ 3.0, 1.0 ]


{{alias}}.ndarray( order, uplo, trans, diag, N, AP, sap, oap, x, sx, ox )
    Performs one of the matrix-vector operations `x = A*x` or `x = A**T*x`,
    using alternative indexing semantics and where `x` is an `N` element vector
    and `A` is an `N` by `N` unit, or non-unit, upper or lower triangular
    matrix, supplied in packed form.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing semantics based on starting
    indices.

    Parameters
    ----------
    order: string
        Row-major (C-style) or column-major (Fortran-style) order. Must be
        either 'row-major' or 'column-major'.

    uplo: string
        Specifies whether `A` is an upper or lower triangular matrix.

    trans: string
        Specifies whether `A` should be transposed, conjugate-transposed, or
        not transposed.

    diag: string
        Specifies whether `A` has a unit diagonal.

    N: integer
        Number of elements along each dimension of `A`.

    AP: Float64Array
        Matrix in packed form.

    sap: integer
        Index increment for `AP`.

    oap: integer
        Starting index for `AP`.

    x: Float64Array
        Input vector.

    sx: integer
        Index increment for `x`.

    ox: integer
        Starting index for `x`.

    Returns
    -------
    x: Float64Array
        Input vector.

    Examples
    --------
    > var x = new {{alias:@stdlib/array/float64}}( [ 1.0, 1.0 ] );
    > var AP = new {{alias:@stdlib/array/float64}}( [ 1.0, 2.0, 1.0 ] );
    > var order = 'row-major';
    > var uplo = 'upper';
    > var trans = 'no-transpose';
    > {{alias}}.ndarray( order, uplo, trans, 'unit', 2, AP, 1, 0, x, 1, 0 )
    <Float64Array>[ 3.0, 1.0 ]

    See Also
    --------
