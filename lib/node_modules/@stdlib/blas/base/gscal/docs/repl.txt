
{{alias}}( N, alpha, x, stride )
    Multiplies a vector `x` by a constant `alpha`.

    The `N` and `stride` parameters determine which elements in `x` are accessed
    at runtime.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    If `N <= 0` or `stride <= 0`, the function returns `x` unchanged.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    alpha: number
        Constant.

    x: Array<number>|TypedArray
        Input array.

    stride: integer
        Index increment for `x`.

    Returns
    -------
    x: Array<number>|TypedArray
        Input array.

    Examples
    --------
    // Standard Usage:
    > var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ];
    > var alpha = 5.0;
    > {{alias}}( x.length, alpha, x, 1 )
    [ -10.0, 5.0, 15.0, -25.0, 20.0, -5.0, -15.0 ]

    // Using `N` and `stride` parameters:
    > x = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ];
    > {{alias}}( 3, 5.0, x, 2 )
    [ -10.0, 1.0, 15.0, -5.0, 20.0, -1.0, -3.0 ]

    // Using view offsets:
    > var x0 = new {{alias:@stdlib/array/float64}}( [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ] );
    > var x1 = new {{alias:@stdlib/array/float64}}( x0.buffer, x0.BYTES_PER_ELEMENT*1 );
    > {{alias}}( 3, 5.0, x1, 2 )
    <Float64Array>[ -10.0, 3.0, -20.0, 5.0, -30.0 ]
    > x0
    <Float64Array>[ 1.0, -10.0, 3.0, -20.0, 5.0, -30.0 ]


{{alias}}.ndarray( N, alpha, x, stride, offset )
    Multiplies `x` by a constant `alpha` using alternative indexing semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the `offset` parameter supports indexing semantics based on a
    starting index.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    alpha: number
        Constant.

    x: Array<number>|TypedArray
        Input array.

    stride: integer
        Index increment for `x`.

    offset: integer
        Starting index of `x`.

    Returns
    -------
    x: Array<number>|TypedArray
        Input array.

    Examples
    --------
    // Standard Usage:
    > var x = [ -2.0, 1.0, 3.0, -5.0, 4.0, -1.0, -3.0 ];
    > {{alias}}.ndarray( x.length, 5.0, x, 1, 0 )
    [ -10.0, 5.0, 15.0, -25.0, 20.0, -5.0, -15.0 ]

    // Using an index offset:
    > x = [ 1.0, -2.0, 3.0, -4.0, 5.0, -6.0 ];
    > {{alias}}.ndarray( 3, 5.0, x, 2, 1 )
    [ 1.0, -10.0, 3.0, -20.0, 5.0, -30.0 ]

    See Also
    --------

