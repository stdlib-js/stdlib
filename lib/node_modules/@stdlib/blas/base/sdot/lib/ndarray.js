/**
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );


// VARIABLES //

var M = 5;


// MAIN //

/**
* Computes the dot product of `x` and `y` with different indexing semantics.
*
* @param {integer} N - Number of values to use from each array
* @param {Float32Array} x - First array
* @param {integer} strideX - Stride length on the first array
* @param {PositiveInteger} offsetX - Starting index for `x`
* @param {Float32Array} y - Second array
* @param {integer} strideY - Stride length of the second array
* @param {integer} offsetY - Starting index for `y`
* @returns {number} The dot product of x and y
*
* @example
* var x = new Float32Array( [ 4.0, 2.0, -3.0, 5.0, -1.0 ] );
* var y = new Float32Array( [ 2.0, 6.0, -1.0, -4.0, 8.0 ] );

* sdot( x.length, x, 1, 0, y, 1, 0 );
* // -5.0
*/
function sdot( N, x, strideX, offsetX, y, strideY, offsetY ) {
	var dot = 0.0;
	var ix;
	var iy;
	var m;
	var i;

	if ( N <= 0 ) {
		return dot;
	}

	ix = offsetX;
	iy = offsetY;
	if ( strideX === 1 && strideY === 1 ) {
		m = N % M;
		for ( i = 0; i < m; i++ ) {
			dot += float64ToFloat32( x[ ix ] * y[ iy ] );
			ix += 1;
			iy += 1;
		}
		if ( N < M ) {
			return dot;
		}
		for ( i = m; i < N; i += M ) {
			dot = float64ToFloat32( dot +
						( x[ ix ] * y[ iy ] ) +
						( x[ ix+1 ] * y[ iy+1 ] ) +
						( x[ ix+2 ] * y[ iy+2 ] ) +
						( x[ ix+3 ] * y[ iy+3 ] ) +
						( x[ ix+4 ] * y[ iy+4 ] ));
			ix += M;
			iy += M;
		}
		return dot;
	}
	for ( i = 0; i < N; i++ ) {
		dot += float64ToFloat32( x[ ix ] * y[ iy ] );
		ix += strideX;
		iy += strideY;
	}
	return dot;
}


// EXPORTS //

module.exports = sdot;
