/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var sfill = require( '@stdlib/blas/ext/base/sfill' ).ndarray;
var sscal = require( '@stdlib/blas/base/sscal' ).ndarray;


// MAIN //

/**
* Performs the matrix-vector operation `y = α*A*x + β*y` where `α` and `β` are scalars, `x` and `y` are `N` element vectors, and `A` is an `N` by `N` symmetric matrix supplied in packed form.
*
* @private
* @param {string} order - storage layout
* @param {string} uplo - specifies whether the upper or lower triangular part of the symmetric matrix `A` is supplied
* @param {NonNegativeInteger} N - number of elements along each dimension of `A`
* @param {number} alpha - scalar constant
* @param {Float64Array} AP - packed form of a symmetric matrix `A`
* @param {integer} strideAP - `AP` stride length
* @param {NonNegativeInteger} offsetAP - starting index for `AP`
* @param {Float64Array} x - first input array
* @param {integer} strideX - `x` stride length
* @param {NonNegativeInteger} offsetX - starting `x` index
* @param {number} beta - scalar constant
* @param {Float64Array} y - second input array
* @param {integer} strideY - `y` stride length
* @param {NonNegativeInteger} offsetY - starting `y` index
* @returns {Float64Array} `y`
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var AP = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
* var x = new Float64Array( [ 1.0, 1.0, 1.0 ] );
* var y = new Float64Array( [ 1.0, 1.0, 1.0 ] );
*
* dspmv( 'column-major', 'lower', 3, 1.0, AP, 1, 0, x, 1, 0, 1.0, y, 1, 0 );
* // y => <Float64Array>[ ~7.0, ~12.0, ~15.0 ]
*/
function dspmv( order, uplo, N, alpha, AP, strideAP, offsetAP, x, strideX, offsetX, beta, y, strideY, offsetY ) { // eslint-disable-line max-params, max-len
	var isrm;
	var tmp1;
	var tmp2;
	var iap;
	var ix0;
	var ix1;
	var iy0;
	var iy1;
	var i1;
	var i0;
	var kk;
	var ox;
	var oy;

	if ( beta !== 1.0 ) {
		if ( beta === 0.0 ) {
			sfill( N, beta, y, strideY, offsetY );
		} else {
			sscal( N, beta, y, strideY, offsetY );
		}
	}
	if ( alpha === 0.0 ) {
		return y;
	}
	isrm = ( order === 'row-major' );
	kk = offsetAP;
	ox = offsetX;
	oy = offsetY;
	if ( ( !isrm && uplo === 'upper' ) || ( isrm && uplo === 'lower' ) ) {
		ix1 = ox;
		iy1 = oy;
		for ( i1 = 0; i1 < N; i1++ ) {
			tmp1 = alpha * x[ ix1 ];
			tmp2 = 0.0;
			ix0 = ox;
			iy0 = oy;
			iap = kk;
			for ( i0 = 0; i0 < i1; i0++ ) {
				y[ iy0 ] += tmp1 * AP[ iap ];
				tmp2 += AP[ iap ] * x[ ix0 ];
				ix0 += strideX;
				iy0 += strideY;
				iap += strideAP;
			}
			y[ iy1 ] += ( tmp1 * AP[ iap ] ) + ( alpha * tmp2 );
			ix1 += strideX;
			iy1 += strideY;
			kk += ( i1 + 1 ) * strideAP;
		}
		return y;
	}
	ix1 = ox;
	iy1 = oy;
	for ( i1 = 0; i1 < N; i1++ ) {
		tmp1 = alpha * x[ ix1 ];
		tmp2 = 0.0;
		y[ iy1 ] += tmp1 * AP[ kk ];
		iap = kk;
		ix0 = ix1;
		iy0 = iy1;
		for ( i0 = i1+1; i0 < N; i0++ ) {
			ix0 += strideX;
			iy0 += strideY;
			iap += strideAP;
			y[ iy0 ] += tmp1 * AP[ iap ];
			tmp2 += AP[ iap ] * x[ ix0 ];
		}
		y[ iy1 ] += alpha * tmp2;
		ix1 += strideX;
		iy1 += strideY;
		kk += ( N - i1 ) * strideAP;
	}
	return y;
}


// EXPORTS //

module.exports = dspmv;
