
{{alias}}( N, x, strideX, y, strideY )
    Copies values from one complex double-precision floating-point vector to
    another complex double-precision floating-point vector.

    The `N` and stride parameters determine how values from `x` are copied into
    `y`.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    If `N` is less than or equal to `0`, the function returns `y` unchanged.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    x: Complex128Array
        Input array.

    strideX: integer
        Index increment for `x`.

    y: Complex128Array
        Output array.

    strideY: integer
        Index increment for `y`.

    Returns
    -------
    y: Complex128Array
        Output array.

    Examples
    --------
    // Standard usage:
    > var x = new {{alias:@stdlib/array/complex128}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > var y = new {{alias:@stdlib/array/complex128}}( [ 6.0, 7.0, 8.0, 9.0 ] );
    > {{alias}}( x.length, x, 1, y, 1 );
    > var z = y.get( 0 );
    > var re = {{alias:@stdlib/complex/real}}( z )
    1.0
    > var im = {{alias:@stdlib/complex/imag}}( z )
    2.0

    // Advanced indexing:
    > x = new {{alias:@stdlib/array/complex128}}( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
    > y = new {{alias:@stdlib/array/complex128}}( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );
    > {{alias}}( 2, x, -2, y, 1 );
    > z = y.get( 0 );
    > re = {{alias:@stdlib/complex/real}}( z )
    5.0
    > im = {{alias:@stdlib/complex/imag}}( z )
    6.0

    // Using typed array views:
    > var x0 = new {{alias:@stdlib/array/complex128}}( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
    > var y0 = new {{alias:@stdlib/array/complex128}}( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );
    > var x1 = new {{alias:@stdlib/array/complex128}}( x0.buffer, x0.BYTES_PER_ELEMENT*1 );
    > var y1 = new {{alias:@stdlib/array/complex128}}( y0.buffer, y0.BYTES_PER_ELEMENT*2 );
    > {{alias}}( 1, x1, -2, y1, 1 );
    > z = y0.get( 2 );
    > re = {{alias:@stdlib/complex/real}}( z )
    3.0
    > im = {{alias:@stdlib/complex/imag}}( z )
    4.0


{{alias}}.ndarray( N, x, strideX, offsetX, y, strideY, offsetY )
    Copies values from one complex double-precision floating-point vector to
    another complex double-precision floating-point vector using alternative
    indexing semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing semantics based on starting
    indices.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    x: Complex128Array
        Input array.

    strideX: integer
        Index increment for `x`.

    offsetX: integer
        Starting index for `x`.

    y: Complex128Array
        Output array.

    strideY: integer
        Index increment for `y`.

    offsetY: integer
        Starting index for `y`.

    Returns
    -------
    y: Complex128Array
        Output array.

    Examples
    --------
    // Standard usage:
    > var x = new {{alias:@stdlib/array/complex128}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > var y = new {{alias:@stdlib/array/complex128}}( [ 6.0, 7.0, 8.0, 9.0 ] );
    > {{alias}}.ndarray( x.length, x, 1, 0, y, 1, 0 );
    > var z = y.get( 0 );
    > var re = {{alias:@stdlib/complex/real}}( z )
    1.0
    > var im = {{alias:@stdlib/complex/imag}}( z )
    2.0

    // Advanced indexing:
    > x = new {{alias:@stdlib/array/complex128}}( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
    > y = new {{alias:@stdlib/array/complex128}}( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );
    > {{alias}}.ndarray( 1, x, 2, 1, y, -1, y.length-1 );
    > z = y.get( y.length-1 );
    > re = {{alias:@stdlib/complex/real}}( z )
    3.0
    > im = {{alias:@stdlib/complex/imag}}( z )
    4.0

    See Also
    --------

