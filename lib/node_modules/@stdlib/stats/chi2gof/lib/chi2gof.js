/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isNonNegativeIntegerArray = require( '@stdlib/assert/is-nonnegative-integer-array' );
var isNonNegativeNumberArray = require( '@stdlib/assert/is-nonnegative-number-array' );
var isUnityProbabilityArray = require( '@stdlib/assert/is-unity-probability-array' );
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var incrspace = require( '@stdlib/math/utils/incrspace' );
var chisqCDF = require( '@stdlib/math/base/dists/chisquare/cdf' );
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var sample = require( '@stdlib/random/sample' );
var isnan = require( '@stdlib/assert/is-nan' );
var copy = require( '@stdlib/utils/copy' );
var testStatistic = require( './statistic.js' );
var prettyPrint = require( './print.js' );
var defaults = require( './defaults.json' );
var tabulate = require( './tabulate.js' );
var getPMF = require( './get_pmf.js' );
var mult = require( './mult.js' );
var sum = require( './sum.js' );
var div = require( './div.js' );
var validate = require( './validate.js' );


// MAIN //

/**
* Performs a chi-square goodness-of-fit test.
*
* @param {NonNegativeIntegerArray} x - observation frequencies
* @param {(NonNegativeNumericArray|ProbabilityArray|string)} y - array of expected values or probabilities or a string denoting the name of a distribution
* @param {...number} [params] - distribution parameters passed to mean function
* @param {Options} [options] - function options
* @param {number} [options.alpha=0.05] - significance level
* @param {NonNegativeInteger} [options.ddof=0] - degrees of freedom adjustment
* @param {boolean} [options.simulate=false] - boolean indicating whether to compute p-values by Monte Carlo simulation
* @param {PositiveInteger} [options.iterations=500] - number of Monte Carlo iterations
* @throws {TypeError} first argument must be an array of nonnegative integers
* @throws {TypeError} second argument must be an array of nonnegative numbers, an array of probabilities summing to one, or the name of a discrete distribution
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {Error} `x` and `p` must have the same length
* @throws {Error} at least one element of `x` must be positive
* @throws {RangeError} alpha option must be a number in the interval `[0,1]`
* @returns {Object} test results
*
* @example
* var x = [ 89, 37, 30, 28, 2 ];
* var p = [ 0.40, 0.20, 0.20, 0.15, 0.05 ];
*
* var out = chi2gof( x, p );
* // returns { 'pValue': ~0.0406, 'statistic': ~9.9901, ... }
*/
function chi2gof() {
	var nDistParams = 0;
	var distParams;
	var distArgs;
	var expected;
	var options;
	var sfreq;
	var sstat;
	var draw;
	var opts;
	var psum;
	var pval;
	var stat;
	var err;
	var len;
	var pmf;
	var seq;
	var geq;
	var out;
	var val;
	var df;
	var i;
	var n;
	var p;
	var x;

	x = arguments[ 0 ];
	if ( !isNonNegativeIntegerArray( x ) ) {
		throw new TypeError( 'invalid input argument. First argument must be an array of nonnegative integers. Value: `' + x + '`.' );
	}
	len = x.length;
	n = sum( x );
	if ( n === 0.0 ) {
		throw new Error( 'invalid input argument. At least one element of `x` must be positive. Value: `' + x + '`.' );
	}
	if ( isUnityProbabilityArray( arguments[ 1 ] ) ) {
		p = arguments[ 1 ];
		if ( len !== p.length ) {
			throw new Error( 'invalid input arguments. First and second parameter must be arrays of the same length.' );
		}
		expected = mult( new Array( len ), p, n );
	}
	else if ( isString( arguments[ 1 ] ) ) {
		pmf = getPMF( arguments[ 1 ] );
		nDistParams = pmf.length - 1;
		distParams = new Array( nDistParams );
		for ( i = 0; i < nDistParams; i++ ) {
			val = arguments[ i + 2 ];
			if ( !isNumber( val ) || isnan( val ) ) {
				throw new TypeError( 'invalid input argument. Distribution parameter must be a number primitive. Value: `' + val + '`.' );
			}
			distParams[ i ] = val;
		}
		distArgs = [ null ].concat( distParams );
		expected = new Array( len );
		psum = 0.0;
		for ( i = 0; i < len; i++ ) {
			distArgs[ 0 ] = i;
			if ( arguments[ 1 ] === 'discrete-uniform' ) {
				distArgs[ 0 ] += distParams[ 0 ];
			}
			val = pmf.apply( null, distArgs );
			psum += val;
			expected[ i ] = val * n;
		}
		if ( psum < 1.0 ) {
			// Add remaining category for all values greater or equal to `len`:
			val = 1.0 - psum;
			expected.push( val * n );
			x = Array.prototype.slice.call( x );
			x.push( 0 );
			len += 1;
		}
	}
	else {
		if ( !isNonNegativeNumberArray( arguments[ 1 ] ) ) {
			throw new TypeError( 'invalid input argument. Second argument must be an array of probabilities summing to one, an array of expected values, or the name of a discrete probability distribution. Value: `' + arguments[ 1 ] + '`.' );
		}
		expected = arguments[ 1 ];
		if ( len !== expected.length ) {
			throw new Error( 'invalid input arguments. First and second parameter must be arrays of the same length.' );
		}
	}
	opts = copy( defaults );
	if ( arguments.length > 2 + nDistParams ) {
		options = arguments[ 2 + nDistParams ];
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}

	stat = testStatistic( x, expected );
	if ( opts.simulate ) {
		if ( !p ) {
			psum = sum( expected );
			p = div( new Array( len ), expected, psum );
		}
		seq = incrspace( 0, len, 1 );
		geq = 1;
		for ( i = 0; i < opts.iterations; i++ ) {
			// TODO: use `sample.factory` method once sample pkg is updated.
			draw = sample( seq, {
				'size': n,
				'probs': p
			});
			sfreq = tabulate( draw );

			// Enlarge `sfreq` in case `expected` is longer...
			while ( sfreq.length < expected.length ) {
				sfreq.push( 0 );
			}
			sstat = testStatistic( sfreq, expected );
			if ( sstat >= stat ) {
				geq += 1;
			}
		}
		df = null;
		pval = geq / (opts.iterations + 1);
	} else {
		df = len - 1;
		if ( opts.ddof ) {
			df -= opts.ddof;
		}
		pval = 1.0 - chisqCDF( stat, df );
	}
	out = {};
	setReadOnly( out, 'rejected', pval <= opts.alpha );
	setReadOnly( out, 'alpha', opts.alpha );
	setReadOnly( out, 'pValue', pval );
	setReadOnly( out, 'df', df );
	setReadOnly( out, 'statistic', stat );
	setReadOnly( out, 'method', 'Chi-square goodness-of-fit test' );
	setReadOnly( out, 'print', prettyPrint( out ) );
	return out;
}


// EXPORTS //

module.exports = chi2gof;
