/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );
var isObject = require( '@stdlib/assert/is-plain-object' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var roundn = require( '@stdlib/math/base/special/roundn' );


// MAIN //

/**
* Returns a function to pretty print test results.
*
* @private
* @param {Object} results - test results
* @returns {Function} pretty print function
*/
function prettyPrint( results ) {
	return print;

	/**
	* Pretty-print test results.
	*
	* @private
	* @param {Options} [opts] - options object
	* @param {PositiveInteger} [opts.numdigits=4] - number of digits after the decimal point
	* @returns {string} formatted results
	*/
	function print( opts ) {
		var dgts;
		var str;
		if ( arguments.length > 0 ) {
			if ( !isObject( opts ) ) {
				throw new TypeError( 'invalid input argument. Must provide an object. Value: `' + opts + '`.' );
			}
			if ( hasOwnProp( opts, 'numdigits' ) ) {
				if ( !isPositiveInteger( opts.numdigits ) ) {
					throw new TypeError( 'invalid option. `numdigits` option must be a positive integer. Option: `' + opts.numdigits + '`.' );
				}
				dgts = opts.numdigits;
			}
		} else {
			dgts = 4;
		}
		str = '';
		str += results.method;
		str += '\n\n';
		str += 'Null hypothesis: population probabilities are equal to those in p';
		str += '\n\n';
		str += '\tpValue: ' + roundn( results.pValue, -dgts ) + '\n';
		str += '\tstatistic: ' + roundn( results.statistic, -dgts ) + '\n';
		str += '\tdegrees of freedom: ' + results.df + '\n';
		str += '\n';
		str += 'Test Decision: ';
		if ( results.rejected ) {
			str += 'Reject null in favor of alternative at ' + (results.alpha*100) + '% significance level';
		} else {
			str += 'Fail to reject null in favor of alternative at ' + (results.alpha*100) + '% significance level';
		}
		str += '\n';
		return str;
	}
}


// EXPORTS //

module.exports = prettyPrint;
