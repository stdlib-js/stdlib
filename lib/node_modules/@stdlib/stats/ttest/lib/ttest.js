/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isNumberArray = require( '@stdlib/assert/is-number-array' ).primitives;
var isTypedArrayLike = require( '@stdlib/assert/is-typed-array-like' );
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var isObject = require( '@stdlib/assert/is-plain-object' );
var tCDF = require( '@stdlib/math/base/dists/t/cdf' );
var tQuantile = require( '@stdlib/math/base/dists/t/quantile' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var abs = require( '@stdlib/math/base/special/abs' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var validate = require( './validate.js' );
var variance = require( './variance.js' );
var print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare
var mean = require( './mean.js' );


// FUNCTIONS //

var slice = Array.prototype.slice;


// MAIN //

/**
* Computes a one-sample or paired Student's t test.
*
* @param {NumericArray} x - data array
* @param {NumericArray} [y] - optional paired data array
* @param {Options} [options] - function options
* @param {number} [options.alpha=0.05] - significance level
* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)
* @param {number} [options.mu=0] - mean under H0
* @throws {TypeError} x argument has to be a typed array or array of numbers
* @throws {TypeError} y argument has to be a typed array or array of numbers
* @throws {TypeError} options has to be simple object
* @throws {TypeError} alpha option has to be a number primitive
* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`
* @throws {TypeError} alternative option has to be a string primitive
* @throws {Error} alternative option must be `two-sided`, `less` or `greater`
* @throws {TypeError} mu option has to be a number primitive
* @returns {Object} test result object
*
* @example
* var arr = [ 4, 4, 6, 6, 5 ];
* var out = ttest( arr, {
*     'mu': 5
* });
*
* @example
* var arr = [ 4, 4, 6, 6, 5 ];
* var out = ttest( arr, {
*     'alternative': 'greater'
* });
*/
function ttest() {
	var options;
	var stderr;
	var alpha;
	var xmean;
	var cint;
	var pval;
	var opts;
	var stat;
	var xvar;
	var alt;
	var err;
	var len;
	var out;
	var df;
	var mu;
	var i;
	var x;
	var y;

	x = arguments[ 0 ];
	if ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {
		throw new TypeError( 'invalid input argument. First argument `x` must be a numeric array. Value: `' + x + '`.' );
	}
	len = x.length;
	if ( arguments.length > 1 ) {
		if ( isObject( arguments[ 1 ] ) ) {
			options = arguments[ 1 ];
		}
		else {
			y = arguments[ 1 ];
			if ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {
				throw new TypeError( 'invalid input argument. Argument `y` must be a numeric array. Value: `' + y + '`.' );
			}
			if ( len !== y.length ) {
				throw new Error( 'invalid input arguments. Arguments `x` and `y` must be arrays of the same length' );
			}
			if ( arguments.length > 2 ) {
				options = arguments[ 2 ];
			}
			// Make a shallow copy of x:
			x = slice.call( x );
			for ( i = 0; i < len; i++ ) {
				x[ i ] -= y[ i ];
			}
		}
	}
	opts = {};
	if ( options ) {
		err = validate( opts, options );
		if ( err ) {
			throw err;
		}
	}
	mu = opts.mu || 0.0;
	if ( opts.alpha === void 0 ) {
		alpha = 0.05;
	} else {
		alpha = opts.alpha;
	}
	if ( alpha < 0.0 || alpha > 1.0 ) {
		throw new RangeError( 'invalid input argument. Option `alpha` must be a number in the range 0 to 1. Value: `' + alpha + '`.' );
	}
	if ( len < 2 ) {
		throw new Error( 'invalid input argument. First argument `x` must contain at least two elements. Value: `' + x + '`' );
	}
	df = len - 1;
	xvar = variance( x );
	stderr = sqrt( xvar / len );
	xmean = mean( x );
	stat = ( xmean - mu ) / stderr;

	alt = opts.alternative || 'two-sided';
	switch ( alt ) {
	case 'two-sided':
		pval = 2.0 * tCDF( -abs(stat), df );
		cint = [
			stat - tQuantile( 1.0-(alpha/2.0), df ),
			stat + tQuantile( 1.0-(alpha/2.0), df )
		];
		cint[ 0 ] = mu + (cint[ 0 ] * stderr);
		cint[ 1 ] = mu + (cint[ 1 ] * stderr);
		break;
	case 'greater':
		pval = 1.0 - tCDF( stat, df );
		cint = [ stat - tQuantile( 1.0-alpha, df ), PINF ];
		cint[ 0 ] = mu + (cint[ 0 ] * stderr);
		break;
	case 'less':
		pval = tCDF( stat, df );
		cint = [ NINF, stat + tQuantile( 1.0-alpha, df ) ];
		cint[ 1 ] = mu + (cint[ 1 ] * stderr);
		break;
	default:
		throw new Error( 'Invalid option. `alternative` must be either `two-sided`, `less` or `greater`. Value: `' + alt + '`' );
	}
	out = {};
	setReadOnly( out, 'rejected', pval <= alpha );
	setReadOnly( out, 'alpha', alpha );
	setReadOnly( out, 'pValue', pval );
	setReadOnly( out, 'statistic', stat );
	setReadOnly( out, 'ci', cint );
	setReadOnly( out, 'df', df );
	setReadOnly( out, 'nullValue', mu );
	setReadOnly( out, 'mean', xmean );
	setReadOnly( out, 'sd', stderr );
	setReadOnly( out, 'alternative', alt );
	setReadOnly( out, 'method', y ? 'Paired t-test' : 'One-sample t-test' );
	setReadOnly( out, 'print', print );
	return out;
}


// EXPORTS //

module.exports = ttest;
