'use strict';

// MODULES //

var isString = require( '@stdlib/assert/is-string' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isObject = require( '@stdlib/assert/is-plain-object' );
var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );
var isPositiveNumberArray = require( '@stdlib/assert/is-positive-number-array' );
var isFunction = require( '@stdlib/assert/is-function' );
var isError = require( '@stdlib/assert/is-error' );
var isNumber = require( '@stdlib/assert/is-number' );
var getKernel = require( './get_kernel.js' );


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {number} [options.n] - number of splits in the generated grid
* @param {NumericArray} [options.h] - An array of length 2 indicating the X and Y bandwidth values
* @param {number} [options.xMin] - A number indicating the lower limit of X
* @param {number} [options.xMax] - A number indicating the upper limit of X
* @param {number} [options.yMin] - A number indicating the lower limit of Y
* @param {number} [options.yMax] - A number indicating the upper limit of Y
* @param {(string|Function)} [options.kernel] - String or function indicating the kernel to use
* @returns {(Error|null)} null or an error object
*
* @example
* var opts = {};
* var options = {
*     'alpha': 3.14,
*     'decision': true
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function validate( opts, options ) {
	if ( !isObject( options ) ) {
		return new TypeError( 'invalid input argument. Options must be an object. Value: `' + options + '`.' );
	}
	if ( hasOwnProp( options, 'h' ) ) {
		opts.h = options.h;
		if ( !isPositiveNumberArray( opts.h) ) {
			return new TypeError( 'invaild option. `h` must be an array of positive values. Option: `' + opts.n + '`.');
		}
		if ( opts.h.length !== 2) {
			return new TypeError( 'invalid option. `h` must be an array of length 2. Option: `' + opts.n + '`.');
		}
	}
	if ( hasOwnProp( options, 'n' ) ) {
		opts.n = options.n;
		if ( !isPositiveInteger( opts.n ) ) {
			return new TypeError( 'invalid option. `n` option must be a positive integer. Option: `' + opts.n + '`.' );
		}
	}
	if ( hasOwnProp( options, 'xMax' ) ) {
		opts.xMax = options.xMax;
		if (!isNumber(opts.xMax)) {
			return new TypeError( 'invalid option. `xMax` must be a number. Option: `' + opts.xMax + '`.' );
		}
	}
	if ( hasOwnProp( options, 'xMin' ) ) {
		opts.xMin = options.xMin;
		if (!isNumber(opts.xMin)) {
			return new TypeError( 'invalid option. `xMin` must be a number. Option: `' + opts.xMin + '`.' );
		}
	}
	if ( hasOwnProp( options, 'yMax' ) ) {
		opts.yMax = options.yMax;
		if (!isNumber(opts.yMax)) {
			return new TypeError( 'invalid option. `yMax` must be a number. Option: `' + opts.yMax + '`.' );
		}
	}
	if ( hasOwnProp( options, 'yMin' ) ) {
		opts.yMin = options.yMin;
		if (!isNumber(opts.yMin)) {
			return new TypeError( 'invalid option. `yMin` must be a number. Option: `' + opts.yMin + '`.' );
		}
	}
	if ( hasOwnProp( options, 'kernel' ) ) {
		opts.kernel = options.kernel;
		if ( isString(opts.kernel) ) {
			// Kernels to have
			opts.kernel = getKernel(opts.kernel);
			if ( isError(opts.kernel) ) {
				return opts.kernel;
			}
		} else if ( !isFunction(opts.kernel) ) {
			return new TypeError('Kernel is not a function from getKernel');
		}
	}

	return null;
}


// EXPORTS //

module.exports = validate;
