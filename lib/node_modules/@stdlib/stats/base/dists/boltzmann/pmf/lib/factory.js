/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isNonNegativeFinite = require( '@stdlib/math/base/assert/is-nonnegative-finite' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var constantFunction = require( '@stdlib/utils/constant-function' );
var exp = require( '@stdlib/math/base/special/exp' );
var PINF = require( '@stdlib/constants/float64/pinf' );


// MAIN //

/**
* Returns a function for evaluating the probability mass function (PMF) for a Boltzmann distribution with total number of energy states `N`, and the inverse temperature `lambda`.
*
* @param {PositiveNumber} lambda - Inverse Temperature
* @param {NonNegativeInteger} N - Total Number of energy states
* @returns {Function} PMF
*
* @example
* var mypmf = factory( 1.2, 10 );
* var y = mypmf( 4 );
* // returns ~0.0058
*
* y = mypmf( 1 );
* // returns ~0.2105
*/
function factory( lambda, N ) {
	if (
		isnan( N ) ||
        isnan( lambda ) ||
        !isNonNegativeInteger( N ) ||
        !isNonNegativeFinite( lambda ) ||
        N === PINF ||
        lambda === PINF
	) {
		return constantFunction( NaN );
	}

	return pmf;

	/**
	 * Evaluates the probability mass function (PMF) for a Boltzmann distribution.
	 *
	 * @private
	 * @param {number} x - input value
	 * @returns {Probability} evaluated PMF
	 */
	function pmf( x ) {
		var fact;

		if ( isnan( x ) ) {
			return NaN;
		}
		if (
			isNonNegativeInteger( x ) &&
            x < N
		) {
			fact = ( 1 - exp( -lambda ) ) / ( 1 - exp( -lambda * N ) );
			return fact * exp( -lambda * x );
		}
		return 0.0;
	}
}


// EXPORTS //

module.exports = factory;
