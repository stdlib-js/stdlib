/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );
var isNonNegativeFinite = require( '@stdlib/math/base/assert/is-nonnegative-finite' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var exp = require( '@stdlib/math/base/special/exp' );
var PINF = require( '@stdlib/constants/float64/pinf' );


// MAIN //

/**
* Returns a function for evaluating the probability mass function (PMF) for a Boltzmann distribution with total number of energy states `N`, and the inverse temperature `lambda`.
*
* @param {NonNegativeInteger} x - Input value of energy
* @param {PositiveNumber} lambda - Inverse Temperature
* @param {NonNegativeInteger} N - Total Number of energy states
* @returns {Function} PMF
*
* @example
* var y = pmf( 1, 0.8, 4 );
* // returns ~0.258
*
* @example
* y = pmf( 2, 0.8, 4 );
* // returns ~0.116
*
* @example
* y = pmf( 0, 0.8, 4 );
* // returns ~0.574
*
* @example
* var y = pmf( NaN, 0.5, 5 );
* // returns NaN
*
* @example
* var y = pmf( 2, NaN, 5 );
* // returns NaN
*
* @example
* var y = pmf( 2, 0.8, NaN );
* // returns NaN
*
* @example
* var y = pmf( 2.0, -10.5, 5 );
* // returns NaN
*
* @example
* var y = pmf( 2.0, 5, 1.5 );
* // returns NaN
*
* @example
* var y = pmf( 6.0, 0.8, 5 )
* // return 0.0
*
*/
function pmf( x, lambda, N ) {
	var fact;

	if (
		isnan( x ) ||
		isnan( N ) ||
		isnan( lambda ) ||
		!isNonNegativeInteger( N ) ||
		!isNonNegativeInteger( x ) ||
		!isNonNegativeFinite( lambda ) ||
		N === PINF ||
		lambda === PINF
	) {
		return NaN;
	}
	if (
		isNonNegativeInteger( x ) &&
        x < N
	) {
		fact = ( 1 - exp( -lambda ) ) / ( 1 - exp( -lambda * N ) );
		return fact * exp( -lambda * x );
	}
	return 0.0;
}


// EXPORTS //

module.exports = pmf;
