/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var normalPdf = require( '@stdlib/stats/base/dists/normal/pdf' );
var normalCdf = require( '@stdlib/stats/base/dists/normal/cdf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );


// MAIN //

/**
* Evaluates the probability density function (PDF) for a skewed normal distribution with mean `mu`, standard deviation `sigma`, and skewness `alpha` at a value `x`.
*
* @param {number} x - input value
* @param {number} mu - mean
* @param {NonNegativeNumber} sigma - standard deviation
* @param {number} alpha - skewness
* @returns {number} evaluated probability density function
*
* @example
* var y = pdf( 2.0, 0.0, 1.0, 2.0 );
* // returns ~0.108
*
* @example
* var y = pdf( -1.0, 4.0, 2.0, 0.0 );
* // returns ~0.009
*
* @example
* var y = pdf( NaN, 0.0, 1.0, 0.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, NaN, 1.0, 0.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 0.0, NaN, 0.0 );
* // returns NaN
*
* @example
* var y = pdf( 0.0, 0.0, 1.0, NaN );
* // returns NaN
*
* @example
* // Negative standard deviation:
* var y = pdf( 2.0, 0.0, -1.0, 0.0 );
* // returns NaN
*
* @example
* // Degenerate distribution centered at `μ` when `σ = 0.0`:
* var y = pdf( 2.0, 8.0, 0.0, 1.0 );
* // returns 0.0
*
* @example
* var y = pdf( 8.0, 8.0, 0.0, 1.0 );
* // returns Infinity
*/
function pdf( x, mu, sigma, alpha ) {
	var pdf;
	var cdf;
	pdf = normalPdf( x, mu, sigma );
	if ( alpha === 0.0 ) {
		return pdf;
	}
	if ( isnan(alpha) ) {
		return NaN;
	}
	cdf = normalCdf( alpha * x, alpha * mu, sigma );
	return 2 * pdf * cdf;
}


// EXPORTS //

module.exports = pdf;
