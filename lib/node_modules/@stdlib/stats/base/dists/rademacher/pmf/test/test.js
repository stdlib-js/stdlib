/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/assert/is-nan' );
var randu = require( '@stdlib/random/base/randu' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var pmf = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof pmf, 'function', 'main export is a function' );
	t.end();
});

tape( 'if provided `NaN`, the function returns `NaN`', function test( t ) {
	var y = pmf( NaN );
	t.equal( isnan( y ), true, 'returns NaN' );
	t.end();
});

tape( 'if provided `+infinity` or `-infinity`, the function returns `NaN`', function test( t ) {
	var y = pmf( PINF );
	t.equal( isnan( y ), true, 'returns NaN' );
	y = pmf( NINF );
	t.equal( isnan( y ), true, 'returns NaN' );
	t.end();
});

tape( 'if provided `-1` or `+1`, the function returns `0.5`', function test( t ) {
	var y = pmf( 1.0 );
	t.equal( y, 0.5, 'returns 0.5' );
	y = pmf( -1.0 );
	t.equal( y, 0.5, 'returns 0.5' );
	t.end();
});

tape( 'if provided a number between `-1` and `1`, the function returns `0.0`', function test( t ) {
	var x;
	var y;
	var i;

	for ( i = 0; i < 1e3; i++ ) {
		x = ( randu()*2.0 ) - 1.0;
		y = pmf( x );
		t.equal( y, 0.0, 'returns 0.0' );
	}
	t.end();
});
