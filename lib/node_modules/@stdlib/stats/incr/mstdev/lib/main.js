/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var sqrt = require( '@stdlib/math/base/special/sqrt' );


// MAIN //

/**
* Returns an accumulator function which incrementally computes a moving corrected sample standard deviation.
*
* ## Method
*
* -   This implementation uses the same algorithm as implemented by [@stdlib/stats/incr/mvariance][@stdlib/stats/incr/mvariance].
*
* [@stdlib/stats/incr/mvariance]: https://github.com/stdlib-js/stdlib
*
* @param {PositiveInteger} W - window size
* @param {number} [mean] - mean value
* @throws {TypeError} first argument must be a positive integer
* @throws {TypeError} second argument must be a number primitive
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrmstdev( 3 );
*
* @example
* var accumulator = incrmstdev( 3, 5.0 );
*/
function incrmstdev( W, mean ) {
	var delta;
	var buf;
	var tmp;
	var M2;
	var mu;
	var d1;
	var d2;
	var N;
	var n;
	var i;
	if ( !isPositiveInteger( W ) ) {
		throw new TypeError( 'invalid input argument. Must provide a positive integer. Value: `' + W + '`.' );
	}
	buf = new Array( W );
	n = W - 1;
	M2 = 0.0;
	i = -1;
	N = 0;
	if ( arguments.length > 1 ) {
		if ( !isNumber( mean ) ) {
			throw new TypeError( 'invalid input argument. Must provide a number primitive. Value: `' + mean + '`.' );
		}
		mu = mean;
		return accumulator2;
	}
	mu = 0.0;
	return accumulator1;

	/**
	* If provided a value, the accumulator function returns an updated corrected sample standard deviation. If not provided a value, the accumulator function returns the current corrected sample standard deviation.
	*
	* @private
	* @param {number} [x] - input value
	* @returns {(number|null)} corrected sample standard deviation or null
	*
	* @example
	* var s = accumulator1();
	* // returns null
	*
	* s = accumulator1( 2.0 );
	* // returns 0.0
	*
	* s = accumulator1( -5.0 );
	* // returns ~4.95
	*
	* s = accumulator1( 3.0 );
	* // returns ~4.36
	*
	* s = accumulator1( 5.0 );
	* // returns ~5.29
	*
	* s = accumulator1();
	* // returns ~5.29
	*/
	function accumulator1( x ) {
		if ( arguments.length === 0 ) {
			if ( N === 0 ) {
				return null;
			}
			if ( N === 1 ) {
				return 0.0;
			}
			if ( N < W ) {
				return sqrt( M2 / (N-1) );
			}
			return sqrt( M2 / n );
		}
		// Update the index for managing the circular buffer:
		i = (i+1) % W;

		// Determine if we should update the initial window...
		if ( N < W ) {
			buf[ i ] = x;
			N += 1;
			delta = x - mu;
			mu += delta / N;
			M2 += delta * (x - mu);
			if ( N === 1 ) {
				return 0.0;
			}
			return sqrt( M2 / (N-1) );
		}
		// N = W = 1
		if ( N === 1 ) {
			return 0.0;
		}
		// Update the existing window...
		tmp = buf[ i ];
		buf[ i ] = x;
		delta = x - tmp;
		d1 = tmp - mu;
		mu += delta / W;
		d2 = x - mu;
		M2 += delta * (d1 + d2);
		return sqrt( M2 / n );
	}

	/**
	* If provided a value, the accumulator function returns an updated corrected sample standard deviation. If not provided a value, the accumulator function returns the current corrected sample standard deviation.
	*
	* @private
	* @param {number} [x] - input value
	* @returns {(number|null)} corrected sample standard deviation or null
	*/
	function accumulator2( x ) {
		if ( arguments.length === 0 ) {
			if ( N === 0 ) {
				return null;
			}
			if ( N === 1 ) {
				return 0.0;
			}
			if ( N < W ) {
				return sqrt( M2 / (N-1) );
			}
			return sqrt( M2 / n );
		}
		// Update the index for managing the circular buffer:
		i = (i+1) % W;

		// Determine if we should update the initial window...
		if ( N < W ) {
			buf[ i ] = x;
			N += 1;
			delta = x - mu;
			M2 += delta * delta;
			if ( N === 1 ) {
				return 0.0;
			}
			return sqrt( M2 / (N-1) );
		}
		// N = W = 1
		if ( N === 1 ) {
			return 0.0;
		}
		// Update the existing window...
		tmp = buf[ i ];
		buf[ i ] = x;
		M2 += ( x-tmp ) * ( x-mu + tmp-mu );
		return sqrt( M2 / n );
	}
}


// EXPORTS //

module.exports = incrmstdev;
