/*
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';
#!/usr/bin/env node
'use strict';

var stdin = require( '@stdlib/streams/node/stdin' );
var IS_PASCALCASE = require( './../lib' );
var opts = require( './options.json' );
var optsPkg = require( './../package.json' );
var readme = require( './../docs/readme.md' );
var minimist = require( 'minimist' );
var replace = require( '@stdlib/string/replace' );
var split = require( '@stdlib/string/split-by-regexp' );
var print = require( './print.js' );
var proc = require( './process.js' );
var exec = require( 'child_process' ).exec;
var tmpl = require( './template.js' );
var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var findPkgs = require( '@stdlib/_tools/pkgs/find' );
var IS_WINDOWS = require( '@stdlib/assert/is-windows' );


// VARIABLES //

// Split separator:
var SEP = '/\\r?\\n/';

// Template render context:
var ctx = {
	'pkg_name': '@stdlib/assert/is-pascal-case',
	'pkg_version': optsPkg.version,
	'usage': `Usage: ${optsPkg.name} [options] [<string>]`,
	'options': [
		{
			'flags': '--help',
			'label': 'Print this message.'
		},
		{
			'flags': '--version',
			'label': 'Print the package version.'
		},
		{
			'flags': '--split sep',
			'label': 'Delimiter for stdin data. Default: \'/\\\\r?\\\\n/\'.'
		}
	],
	'notes': [
		{
			'html': 'If the split separator is a <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions">regular expression</a>, ensure that the `split` option is either properly escaped or enclosed in quotes.'
		},
		{
			'html': 'The implementation ignores trailing delimiters.'
		}
	],
	'examples': [
		'$ is-pascalcase Beep',
		'$ echo -n \'boop\' | is-pascalcase',
		'$ echo -n \'beep\\tFooBar\' | is-pascalcase --split \'\\t\'',
		'$ echo -n \'beEp booP\\nFooBar\' | is-pascalcase --split /\\r?\\n/',
		'$ echo -n \'beEp booP\\nFooBar\' | is-pascalcase --split /\\\\r?\\\\n/'
	],
	'links': [
		{
			'html': '<a href="https://github.com/stdlib-js/stdlib/tree/master/lib/node_modules/%40stdlib/assert/is-pascal-case">@stdlib/assert/is-pascal-case</a>',
			'label': '@stdlib/assert/is-pascal-case'
		},
		{
			'html': '<a href="https://github.com/stdlib-js/stdlib/issues">@stdlib/assert/is-pascal-case</a>',
			'label': 'Support'
		}
	],
	'more': [
		{
			'html': '<a href="https://github.com/stdlib-js/stdlib">stdlib</a>',
			'label': 'stdlib'
		},
		{
			'html': '<a href="https://github.com/stdlib-js/stdlib/tree/master/lib/node_modules/%40stdlib/datasets">datasets</a>',
			'label': '@stdlib/datasets'
		},
		{
			'html': '<a href="http://stdlib.io/">stdlib.io</a>',
			'label': 'stdlib.io'
		},
		{
			'html': '<a href="http://stdlib.io/docs">API Documentation</a>',
			'label': 'API Documentation'
		}
	]
};


// FUNCTIONS //

/**
* Renders a template.
*
* @private
* @param {ObjectArray} arr - list of template elements
* @returns {string} rendered template
*/
function render( arr ) {
	var out;
	var i;
	out = '';
	for ( i = 0; i < arr.length; i++ ) {
		out += arr[ i ].html;
	}
	return out;
}

/**
* Renders a template in context.
*
* @private
* @param {ObjectArray} arr - list of template elements
* @returns {string} rendered template
*/
function renderContext( arr ) {
	var out;
	var i;
	out = '';
	for ( i = 0; i < arr.length; i++ ) {
		out += tmpl( arr[i].html, ctx );
	}
	return out;
}

/**
* Returns a callback to be invoked upon calling the command-line interface.
*
* @private
* @param {string} name - package name
* @returns {Function} callback
*/
function cli( name ) {
	return onExit;

	/**
	* Callback invoked upon calling the command-line interface.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Object} result - result
	* @returns {void}
	*/
	function onExit( error, result ) {
		var str;
		if ( error ) {
			str = error.message;
		} else {
			str = name + ': ' + result.pkg.version;
		}
		print.clear();
		print.write( str+'\n' );
		print.flush();
		proc.exit( error, result );
	}
} // end FUNCTION cli()

/**
* Returns a callback to be invoked upon calling the command-line interface.
*
* @private
* @param {string} name - package name
* @returns {Function} callback
*/
function cliVersion( name ) {
	return onExit;

	/**
	* Callback invoked upon calling the command-line interface.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Object} result - result
	* @returns {void}
	*/
	function onExit( error, result ) {
		var str;
		if ( error ) {
			str = error.message;
		} else {
			str = name + ': ' + result.pkg.version + ' ' + result.pkg.repository.url;
		}
		print.clear();
		print.write( str+'\n' );
		print.flush();
		proc.exit( error, result );
	}
} // end FUNCTION cliVersion()

/**
* Returns a callback to be invoked upon calling the command-line interface.
*
* @private
* @returns {Function} callback
*/
function cliHelp() {
	var out;
	var i;
	var j;

	// Initialize a counter for each category:
	for ( i = 0; i < ctx.options.length; i++ ) {
		ctx.options[ i ].count = 0;
	}
	for ( i = 0; i < ctx.notes.length; i++ ) {
		ctx.notes[ i ].count = 0;
	}
	for ( i = 0; i < ctx.examples.length; i++ ) {
		ctx.examples[ i ].count = 0;
	}
	for ( i = 0; i < ctx.links.length; i++ ) {
		ctx.links[ i ].count = 0;
	}
	for ( i = 0; i < ctx.more.length; i++ ) {
		ctx.more[ i ].count = 0;
	}
	return onExit;

	/**
	* Callback invoked upon calling the command-line interface.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Object} result - result
	* @returns {void}
	*/
	function onExit( error, result ) {
		var i;
		if ( error ) {
			print.clear();
			print.write( error.message+'\n' );
			print.flush();
			proc.exit( error, result );
			return;
		}
		out = '';

		// Render the usage section...
		out += '\n'+renderContext( readme.usage );

		// Render the options section...
		out += '\nOptions:\n\n';
		out += renderContext( readme.options );

		// Render the notes section...
		if ( ctx.notes.length ) {
			out += '\nNotes:\n\n';
			out += renderContext( readme.notes );
		}
		// Render the examples section...
		if ( ctx.examples.length ) {
			out += '\nExamples:\n\n';
			out += renderContext( readme.examples );
		}
		// Render the links section...
		if ( ctx.links.length ) {
			out += '\nLinks:\n\n';
			out += renderContext( readme.links );
		}
		// Render the more section...
		if ( ctx.more.length ) {
			out += '\nMore:\n\n';
			out += renderContext( readme.more );
		}
		print.clear();
		print.write( out+'\n' );
		print.flush();
		proc.exit( error, result );
	}
} // end FUNCTION cliHelp()

/**
* Returns a callback to be invoked upon calling the command-line interface.
*
* @private
* @returns {Function} callback
*/
function cliPkgs() {
	var out;
	var i;
	var j;

	// Initialize a counter for each category:
	for ( i = 0; i < ctx.options.length; i++ ) {
		ctx.options[ i ].count = 0;
	}
	for ( i = 0; i < ctx.notes.length; i++ ) {
		ctx.notes[ i ].count = 0;
	}
	for ( i = 0; i < ctx.examples.length; i++ ) {
		ctx.examples[ i ].count = 0;
	}
	for ( i = 0; i < ctx.links.length; i++ ) {
		ctx.links[ i ].count = 0;
	}
	for ( i = 0; i < ctx.more.length; i++ ) {
		ctx.more[ i ].count = 0;
	}
	return onExit;

	/**
	* Callback invoked upon calling the command-line interface.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Object} result - result
	* @returns {void}
	*/
	function onExit( error, result ) {
		var out;
		var pkgs;
		var i;
		if ( error ) {
			print.clear();
			print.write( error.message+'\n' );
			print.flush();
			proc.exit( error, result );
			return;
		}
		pkgs = result.pkgs;
		out = '';

		// Render the usage section...
		out += '\n'+renderContext( readme.usage );

		// Render the options section...
		out += '\nOptions:\n\n';
		out += renderContext( readme.options );

		// Render the notes section...
		if ( ctx.notes.length ) {
			out += '\nNotes:\n\n';
			out += renderContext( readme.notes );
		}
		// Render the examples section...
		if ( ctx.examples.length ) {
			out += '\nExamples:\n\n';
			out += renderContext( readme.examples );
		}
		// Render the links section...
		if ( ctx.links.length ) {
			out += '\nLinks:\n\n';
			out += renderContext( readme.links );
		}
		// Render the more section...
		if ( ctx.more.length ) {
			out += '\nMore:\n\n';
			out += renderContext( readme.more );
		}
		print.clear();
		print.write( out+'\n' );
		print.write( 'Packages:\n' );
		for ( i = 0; i < pkgs.length; i++ ) {
			print.write( `\t${pkgs[ i ]}` + '\n' );
		}
		print.flush();
		proc.exit( error, result );
	}
} // end FUNCTION cliPkgs()

/**
* Returns a callback to be invoked upon calling the command-line interface.
*
* @private
* @returns {Function} callback
*/
function cliPkgsList() {
	var out;
	var i;
	var j;

	// Initialize a counter for each category:
	for ( i = 0; i < ctx.options.length; i++ ) {
		ctx.options[ i ].count = 0;
	}
	for ( i = 0; i < ctx.notes.length; i++ ) {
		ctx.notes[ i ].count = 0;
	}
	for ( i = 0; i < ctx.examples.length; i++ ) {
		ctx.examples[ i ].count = 0;
	}
	for ( i = 0; i < ctx.links.length; i++ ) {
		ctx.links[ i ].count = 0;
	}
	for ( i = 0; i < ctx.more.length; i++ ) {
		ctx.more[ i ].count = 0;
	}
	return onExit;

	/**
	* Callback invoked upon calling the command-line interface.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Object} result - result
	* @returns {void}
	*/
	function onExit( error, result ) {
		var out;
		var pkgs;
		var i;
		if ( error ) {
			print.clear();
			print.write( error.message+'\n' );
			print.flush();
			proc.exit( error, result );
			return;
		}
		pkgs = result.pkgs;
		out = '';

		// Render the usage section...
		out += '\n'+renderContext( readme.usage );

		// Render the options section...
		out += '\nOptions:\n\n';
		out += renderContext( readme.options );

		// Render the notes section...
		if ( ctx.notes.length ) {
			out += '\nNotes:\n\n';
			out += renderContext( readme.notes );
		}
		// Render the examples section...
		if ( ctx.examples.length ) {
			out += '\nExamples:\n\n';
			out += renderContext( readme.examples );
		}
		// Render the links section...
		if ( ctx.links.length ) {
			
