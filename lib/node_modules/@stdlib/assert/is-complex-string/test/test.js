/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require('tape');
var isComplexString = require('./../lib');


// TESTS //

tape('main export is a function', function test(t) {
	t.ok(true, __filename);
	t.strictEqual(typeof isComplexString, 'function', 'main export is a function');
	t.end();
});

tape('the function returns true if provided valid complex string', function test(t) {
	var tests;
	var i;

	tests = ['1 + 2i',
		'1',
		'2i',
		'-2i',
		'2i',
		'1.523 - 4.234i',
		'-1.5 + 4.2i',
		'1.0e10 -2.0e-10i',
		'1.0E10 + 4.1e+10i',
		'1+2i',
		'1-0i',
		'0+1i',
		'-0.0 + 2.0i',
		'-Infinity + 5i',

		'Infinity-Infinityi'

	];

	for (i = 0; i < tests.length; i++) {
		t.strictEqual(isComplexString(tests[i]), true, 'returns true for valid complex representation');
	}
	t.end();
});

tape('the function returns false if provided input is not a complex number string', function test(t) {
	var values;
	var i;

	values = [
		'boop',
		'4 + 5i5',
		null,
		Infinity,
		'55555555555555boop5',
		{},
		NaN
	];

	for (i = 0; i < values.length; i++) {
		t.strictEqual(isComplexString(values[i]), false, 'returns false for not comlplex string');
	}
	t.end();
});
