#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';


// MODULES //

var resolve = require( 'path' ).resolve;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/cli/ctor' );
var stdin = require( '@stdlib/process/read-stdin' );
var stdinStream = require( '@stdlib/streams/node/stdin' );
var kebabcase = require( '@stdlib/string/kebabcase' );
var toString = require( './../lib' );


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var flags;
	var opts;
	var cli;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line options:
	flags = cli.flags();
	opts = {
		'sep': flags.split || undefined
	};

	// If the split separator is a regular expression, ensure that it is properly escaped...
	if ( opts.sep ) {
		if (
			opts.sep[ 0 ] === '/' &&
			opts.sep[ opts.sep.length-1 ] === '/'
		) {
			opts.sep = opts.sep.slice( 1, -1 );
		}
	}

	// If we are provided a separator, we are going to assume that we are receiving
	// delimited data, so we do not need to create a stream to read in data from `stdin`.
	// If we are not provided a separator, we are going to assume that we are receiving
	// stream-based data and, as such, we create a stream to read in data from `stdin`.
	if ( flags.split ) {
		readData( opts.sep );
	} else {
		stdinStream.pipe( process.stdout );
	}

	/**
	* Reads input data.
	*
	* @private
	* @param {string} sep - separator
	*/
	function readData( sep ) {
		var buf = '';
		process.stdin.setEncoding( 'utf8' );

		process.stdin.on( 'readable', onReadable );

		process.stdin.on( 'end', onEnd );

		/**
		* Callback invoked upon receiving data from `stdin`.
		*
		* @private
		*/
		function onReadable() {
			var data = process.stdin.read();
			if ( data ) {
				buf += data;
			}
		}

		/**
		* Callback invoked upon the end of receiving data from `stdin`.
		*
		* @private
		*/
		function onEnd() {
			var strs = buf.split( new RegExp( sep ) );
			var i;
			for ( i = 0; i < strs.length; i++ ) {
				if ( strs[ i ] === '' ) {
					console.log( 'false' ); // eslint-disable-line no-console
					continue;
				}
				console.log( kebabcase( toString( strs[ i ] ) ) === strs[ i ] ); // eslint-disable-line no-console
			}
		}
	}
}

main();

