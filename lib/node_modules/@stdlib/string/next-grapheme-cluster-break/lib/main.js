/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isInteger = require( '@stdlib/assert/is-integer' );
var codePointAt = require( '@stdlib/string/code-point-at' );
var hasUTF16SurrogatePairAt = require( '@stdlib/assert/has-utf16-surrogate-pair-at' );
var shouldBreak = require( './should_break.js' );
var getGraphemeBreakProperty = require( './get_grapheme_break_property.js' );
var getEmojiProperty = require( './get_emoji_property.js' );


// MAIN //

/**
* Returns the next extended grapheme cluster break in a string after a specified position.
*
* @param {string} str - input string
* @param {integer} idx - position
* @throws {TypeError} first argument must be a string primitive
* @throws {TypeError} second argument must be an integer
* @throws {RangeError} position must not be greater than string length
* @returns {NonNegativeInteger} next grapheme break position
*
* @example
* var out = nextGraphemeClusterBreak( 'last man standing', 4 );
* // returns 5
*
* @example
* var out = nextGraphemeClusterBreak( 'presidential election', 8 );
* // returns 9
*
* @example
* var out = nextGraphemeClusterBreak( 'अनुच्छेद', 1 );
* // returns 3
*
* @example
* var out = nextGraphemeClusterBreak( '🌷', 0 );
* // returns 2
*/
function nextGraphemeClusterBreak( str, idx ) {
	var prevEmoji;
	var nextEmoji;
	var midEmoji;
	var prevCP;
	var nextCP;
	var prev;
	var next;
	var len;
	var mid;
	var i;

	if ( !isString( str ) ) {
		throw new TypeError( 'invalid argument. Must provide a string. Value: `' + str + '`.' );
	}
	len = str.length;
	if ( len === 0 ) {
		return 0;
	}
	if ( !isInteger( idx ) ) {
		throw new TypeError( 'invalid argument. Must provide a valid position (integer). Value: `' + idx + '`.' );
	}
	if ( idx >= len ) {
		throw new RangeError( 'invalid argument. Must provide a valid position (not greater than string length). Value: `' + idx + '`.' );
	}

	if ( idx < 0 ) {
		return 0;
	}
	prevCP = codePointAt( str, idx );
	prev = getGraphemeBreakProperty( prevCP );
	prevEmoji = getEmojiProperty( prevCP );
	mid = [];
	midEmoji = [];
	for ( i = idx + 1; i < len; i++ ) {
		if ( hasUTF16SurrogatePairAt( str, i-1 ) ) {
			continue;
		}
		nextCP = codePointAt( str, i );
		next = getGraphemeBreakProperty( nextCP );
		nextEmoji = getEmojiProperty( nextCP );
		if ( shouldBreak( prev, mid, next, prevEmoji, midEmoji, nextEmoji ) ) {
			return i;
		}
		mid.push( next );
		midEmoji.push( nextEmoji );
	}
	return len;
}


// EXPORTS //

module.exports = nextGraphemeClusterBreak;
