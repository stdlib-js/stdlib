/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var constants = require( './constants.js' );


// FUNCTIONS //

/**
* Returns number of elements in array equal to provided constant.
*
* @private
* @param {ArrayLike} arr - input array
* @param {*} constant - input constant
* @returns {NonNegativeInteger} - number of elements in array equal to constant
*/
function counter( arr, constant ) {
	var count;
	var i;

	count = 0;
	for ( i = 0; i < arr.length; i++ ) {
		if ( arr[ i ] === constant ) {
			count += 1;
		}
	}
	return count;
}

/**
* Returns whether all the values in array in the given range are equal to a provided constant.
*
* @private
* @param {ArrayLike} arr - input array
* @param {NonNegativeInteger} start - starting position (inclusive)
* @param {NonNegativeInteger} end - ending position (not inclusive)
* @param {*} constant - input constant
* @returns {boolean} - whether all the values in array in the given range are equal to the provided constant
*/
function every( arr, start, end, constant ) {
	var i;

	end = ( end > arr.length ) ? arr.length : end;
	for ( i = start; i < end; i++ ) {
		if ( arr[ i ] !== constant ) {
			return false;
		}
	}
	return true;
}


// MAIN //

/**
* Returns whether a break is allowed between the two given grapheme breaking classes according to UAX #29 3.1.1 Grapheme Cluster Boundary Rules on extended grapheme clusters.
*
* @private
* @param {NonNegativeInteger} start - start
* @param {NumericArray} mid - mid
* @param {NonNegativeInteger} end - end
* @param {NonNegativeInteger} startEmoji - startEmoji
* @param {NumericArray} midEmoji - midEmoji
* @param {NonNegativeInteger} endEmoji - endEmoji
* @returns {NonNegativeInteger} break type
*/
function shouldBreak( start, mid, end, startEmoji, midEmoji, endEmoji ) {
	var nextEmoji;
	var allEmoji;
	var next;
	var prev;
	var all;
	var idx;

	all = mid.slice( 0 );
	all.push( end );
	all.unshift( start );

	allEmoji = midEmoji.slice( 0 );
	allEmoji.push( endEmoji );
	allEmoji.unshift( startEmoji );

	prev = all[ all.length-2 ];
	next = end;
	nextEmoji = endEmoji;

	idx = all.lastIndexOf( constants.RegionalIndicator );
	if (
		idx > 0 &&
		every( all, 1, idx, constants.RegionalIndicator ) &&
		prev !== constants.Prepend && prev !== constants.RegionalIndicator
	) {
		if ( counter( all, constants.RegionalIndicator ) % 2 === 1 ) {
			return constants.BreakLastRegional;
		}
		return constants.BreakPenultimateRegional;
	}
	// GB3: CR × LF
	if ( prev === constants.CR && next === constants.LF ) {
		return constants.NotBreak;
	}
	// GB4: (Control|CR|LF) ÷
	if (
		prev === constants.Control ||
		prev === constants.CR ||
		prev === constants.LF
	) {
		return constants.BreakStart;
	}
	// GB5: ÷ (Control|CR|LF)
	if (
		next === constants.Control ||
		next === constants.CR ||
		next === constants.LF
	) {
		return constants.BreakStart;
	}
	// GB6: L × (L|V|LV|LVT)
	if (
		prev === constants.L &&
		(
			next === constants.L ||
			next === constants.V ||
			next === constants.LV ||
			next === constants.LVT
		)
	) {
		return constants.NotBreak;
	}
	// GB7: (LV|V) × (V|T)
	if (
		( prev === constants.LV || prev === constants.V ) &&
		( next === constants.V || next === constants.T )
	) {
		return constants.NotBreak;
	}
	// GB8: (LVT|T) × (T)
	if ( ( prev === constants.LVT || prev === constants.T ) && next === constants.T ) { // eslint-disable-line max-len
		return constants.NotBreak;
	}
	// GB9: × (Extend|ZWJ)
	if ( next === constants.Extend || next === constants.ZWJ ) {
		return constants.NotBreak;
	}
	// GB9a: × SpacingMark
	if ( next === constants.SpacingMark ) {
		return constants.NotBreak;
	}
	// GB9b: Prepend ×
	if ( prev === constants.Prepend ) {
		return constants.NotBreak;
	}
	// GB11: \p{Extended_Pictographic} Extend* ZWJ × \p{Extended_Pictographic}
	idx = allEmoji.lastIndexOf( constants.ExtendedPictographic, allEmoji.length-2 ); // eslint-disable-line max-len
	if (
		idx > -1 &&
		allEmoji[ idx ] === constants.ExtendedPictographic &&
		every( all, idx+1, all.length-2, constants.Extend ) &&
		prev === constants.ZWJ &&
		nextEmoji === constants.ExtendedPictographic
	) {
		return constants.NotBreak;
	}
	// GB12: ^ (RI RI)* RI × RI
	// GB13: [^RI] (RI RI)* RI × RI
	if ( mid.indexOf( constants.RegionalIndicator ) !== -1 ) {
		return constants.Break;
	}
	if ( prev === constants.RegionalIndicator && next === constants.RegionalIndicator ) { // eslint-disable-line max-len
		return constants.NotBreak;
	}
	// GB999: Any ? Any
	return constants.BreakStart;
}


// EXPORTS //

module.exports = shouldBreak;
