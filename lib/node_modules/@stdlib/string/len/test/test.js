/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var tape = require( 'tape' );
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var len = require( './../lib' );
var constants = require( './../lib/constants.js' );
var codePointAt = require( './../lib/code_point_at.js' );
var getEmojiProperty = require( './../lib/get_emoji_property.js' );
var getGraphemeBreakProperty = require( './../lib/get_grapheme_break_property' );
var isSurrogate = require( './../lib/is_surrogate.js' );
var nextBreak = require( './../lib/next_break.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof len, 'function', 'main export is a function' );
	t.end();
});

tape( 'the codePointAt function returns code point from string at position', function test( t ) {
	var out;

	out = codePointAt( 'last man standing', 4 );
	t.strictEqual( out, 0x20, 'returns code point' );

	out = codePointAt( 'presidential election', 8 );
	t.strictEqual( out, 0x74, 'returns code point' );

	out = codePointAt( '‡§Ö‡§®‡•Å‡§ö‡•ç‡§õ‡•á‡§¶', 2 );
	t.strictEqual( out, 0x941, 'returns code point' );

	out = codePointAt( 'üå∑', 0 );
	t.strictEqual( out, 0x1F337, 'returns code point' );

	t.end();
});

tape( 'the getGraphemeBreakProperty function returns grapheme break property', function test( t ) {
	var out;

	out = getGraphemeBreakProperty( 0x008f );
	t.strictEqual( out, constants.Control, 'returns break property' );

	out = getGraphemeBreakProperty( 0x111C2 );
	t.strictEqual( out, constants.Prepend, 'returns break property' );

	out = getGraphemeBreakProperty( 0x1F3FC );
	t.strictEqual( out, constants.Extend, 'returns break property' );

	out = getGraphemeBreakProperty( 0x1F1FF );
	t.strictEqual( out, constants.RegionalIndicator, 'returns break property' );

	out = getGraphemeBreakProperty( 0x16F52 );
	t.strictEqual( out, constants.SpacingMark, 'returns break property' );

	out = getGraphemeBreakProperty( 0x1101 );
	t.strictEqual( out, constants.L, 'returns break property' );

	out = getGraphemeBreakProperty( 0x11A7 );
	t.strictEqual( out, constants.V, 'returns break property' );

	out = getGraphemeBreakProperty( 0x11FE );
	t.strictEqual( out, constants.T, 'returns break property' );

	out = getGraphemeBreakProperty( 0xAEBC );
	t.strictEqual( out, constants.LV, 'returns break property' );

	out = getGraphemeBreakProperty( 0xAFD2 );
	t.strictEqual( out, constants.LVT, 'returns break property' );

	out = getGraphemeBreakProperty( 0x200D );
	t.strictEqual( out, constants.ZWJ, 'returns break property' );

	out = getGraphemeBreakProperty( 0x000A );
	t.strictEqual( out, constants.LF, 'returns break property' );

	out = getGraphemeBreakProperty( 0x000D );
	t.strictEqual( out, constants.CR, 'returns break property' );

	t.end();
});

tape( 'the getEmojiProperty function returns emoji property', function test( t ) {
	var out;

	out = getEmojiProperty( 0x23EC );
	t.strictEqual( out, constants.ExtendedPictographic, 'returns Extended_Pictographic' );

	out = getEmojiProperty( 0x1FFFE );
	t.strictEqual( out, constants.Other, 'returns Other' );

	t.end();
});

tape( 'the isSurrogate function returns whether string has surrogate pair', function test( t ) {
	var out;

	out = isSurrogate( '‡§Ö‡§®‡•Å‡§ö‡•ç‡§õ‡•á‡§¶', 2 );
	t.strictEqual( out, false, 'returns false' );

	out = isSurrogate( 'üå∑', 0 );
	t.strictEqual( out, true, 'returns true' );

	t.end();
});

tape( 'the nextBreak function returns the next grapheme break position in the string', function test( t ) {
	var out;

	out = nextBreak( 'last man standing', 4 );
	t.strictEqual( out, 5, 'returns next grapheme break' );

	out = nextBreak( '‡§Ö‡§®‡•Å‡§ö‡•ç‡§õ‡•á‡§¶', 1 );
	t.strictEqual( out, 3, 'returns next grapheme break' );

	out = nextBreak( 'üå∑', 0 );
	t.strictEqual( out, 2, 'returns next grapheme break' );

	t.end();
});

tape( 'the main function throws an error if not provided a string', function test( t ) {
	var values;
	var i;

	values = [
		5,
		null,
		true,
		undefined,
		NaN,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			len( value );
		};
	}
});

tape( 'the main function returns 0 if provided an empty string', function test( t ) {
	t.strictEqual( len( '' ), 0, 'returns 0 if provided an empty string' );
	t.end();
});

tape( 'the main function returns the Unicode aware length of a given string', function test( t ) {
	var out;

	out = len( 'hello world' );
	t.strictEqual( out, 11, 'returns length' );

	out = len( '!!!' );
	t.strictEqual( out, 3, 'returns length' );

	out = len( '‡§Ö‡§®‡•Å‡§ö‡•ç‡§õ‡•á‡§¶' );
	t.strictEqual( out, 5, 'returns Unicode aware length' );

	out = len( 'üå∑' );
	t.strictEqual( out, 1, 'returns Unicode aware length' );

	t.end();
});

tape( 'the main function returns the Unicode aware length for official Unicode 13 testcases', function test( t ) {
	var testData;
	var out;
	var i;

	function ucs2encode( array ) {
		return array.map( function mapper( value ) {
			var output = '';

			if ( value > 0xFFFF ) {
				value -= 0x10000;
				output += String.fromCharCode( ( ( value >>> 10 ) & 0x3FF ) | 0xD800 ); // eslint-disable-line max-len
				value = 0xDC00 | ( value & 0x3FF );
			}

			output += String.fromCharCode( value );
			return output;
		}).join( '' );
	}

	function temp( c ) {
		return parseInt( c, 16 );
	}

	function testDataFromLine( line ) {
		var codePoints;
		var expected;
		var input;
		codePoints = line.split( /\s*[√ó√∑]\s*/ ).map( temp );
		input = ucs2encode( codePoints );

		expected = line.split( /\s*√∑\s*/ ).map( function mapper( sequence ) {
			var codePoints = sequence.split(/\s*√ó\s*/).map( temp );
			return ucs2encode( codePoints );
		});

		return {
			'input': input,
			'expected': expected
		};
	}

	testData = readFileSync( resolve( __dirname, 'fixtures', 'grapheme_break_test.txt' ), {
		'encoding': 'utf8'
	})
		.split( '\n' )
		.filter( function filterer( line ) {
			return line !== null && line.length > 0 && !line.startsWith( '#' );
		})
		.map( function mapper( line ) { return line.split( '#' )[ 0 ]; } )
		.map( testDataFromLine );

	i = 0;
	testData.forEach( function iterer( { input, expected } ) {
		out = len( input );
		t.strictEqual( out, expected.length, 'passes Unicode testcase: '+i );
		i += 1;
	});

	t.end();
});
