/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var constants = require( './constants.js' );


// FUNCTIONS //

/**
* Returns whether the argument is RegionalIndicator GB property.
* @private
* @param {integer} c - temp
* @returns {boolean} - check if extend
*/
function checker( c ) {
	return c === constants.RegionalIndicator;
}

/**
* Returns whether the argument is Extend GB property.
* @private
* @param {integer} c - temp
* @returns {boolean} - check if Extend
*/
function checkerE( c ) {
	return c === constants.Extend;
}


// MAIN //

/**
* Returns whether a break is allowed between the two given grapheme breaking classes according to UAX #29 3.1.1 Grapheme Cluster Boundary Rules on extended grapheme clusters.
*
* @param {integer} start - start
* @param {NumericArray} mid - mid
* @param {integer} end - end
* @param {integer} startEmoji - startEmoji
* @param {NumericArray} midEmoji - midEmoji
* @param {integer} endEmoji - endEmoji
* @returns {integer} break type
*/
function shouldBreak( start, mid, end, startEmoji, midEmoji, endEmoji ) {
	var prevNonExtendIdx;
	var regIndRange;
	var nextEmoji;
	var allEmoji;
	var previous;
	var next;
	var all;
	all = mid.slice( 0 );
	all.push( end );
	all.unshift( start );
	allEmoji = midEmoji.slice( 0 );
	allEmoji.push( endEmoji );
	allEmoji.unshift( startEmoji );
	previous = all[ all.length - 2 ];
	next = end;
	nextEmoji = endEmoji;

	regIndRange = all.lastIndexOf( constants.RegionalIndicator );
	if ( regIndRange > 0 &&
		all.slice( 1, regIndRange ).every( checker ) &&
		[ constants.Prepend, constants.RegionalIndicator ].indexOf( previous ) === -1 ) { // eslint-disable-line max-len
		if ( all.filter( checker ).length % 2 === 1 ) {
			return constants.BreakLastRegional;
		}
		return constants.BreakPenultimateRegional;
	}

	// GB3: CR × LF
	if ( previous === constants.CR && next === constants.LF ) {
		return constants.NotBreak;
	}
	// GB4: (Control|CR|LF) ÷
	if ( previous === constants.Control || previous === constants.CR || previous === constants.LF ) { // eslint-disable-line max-len
		return constants.BreakStart;
	}
	// GB5: ÷ (Control|CR|LF)
	if ( next === constants.Control || next === constants.CR || next === constants.LF ) { // eslint-disable-line max-len
		return constants.BreakStart;
	}
	// GB6: L × (L|V|LV|LVT)
	if ( previous === constants.L &&
		( next === constants.L || next === constants.V || next === constants.LV || next === constants.LVT ) ) { // eslint-disable-line max-len
		return constants.NotBreak;
	}
	// GB7: (LV|V) × (V|T)
	if ( (previous === constants.LV || previous === constants.V ) &&
		( next === constants.V || next === constants.T ) ) {
		return constants.NotBreak;
	}
	// GB8: (LVT|T) × (T)
	if ( ( previous === constants.LVT || previous === constants.T ) &&
		next === constants.T ) {
		return constants.NotBreak;
	}
	// GB9: × (Extend|ZWJ)
	if ( next === constants.Extend || next === constants.ZWJ ) {
		return constants.NotBreak;
	}
	// GB9a: × SpacingMark
	if ( next === constants.SpacingMark ) {
		return constants.NotBreak;
	}
	// GB9b: Prepend ×
	if ( previous === constants.Prepend ) {
		return constants.NotBreak;
	}

	// GB11: \p{Extended_Pictographic} Extend* ZWJ × \p{Extended_Pictographic}
	prevNonExtendIdx = allEmoji.lastIndexOf( constants.ExtendedPictographic, allEmoji.length - 2 ); // eslint-disable-line max-len
	if ( prevNonExtendIdx !== -1 &&
		allEmoji[ prevNonExtendIdx ] === constants.ExtendedPictographic &&
		all.slice( prevNonExtendIdx + 1, -2 ).every( checkerE ) &&
		previous === constants.ZWJ &&
		nextEmoji === constants.ExtendedPictographic ) {
		return constants.NotBreak;
	}

	// GB12: ^ (RI RI)* RI × RI
	// GB13: [^RI] (RI RI)* RI × RI
	if ( mid.indexOf( constants.RegionalIndicator ) !== -1 ) {
		return constants.Break;
	}
	if ( previous === constants.RegionalIndicator && next === constants.RegionalIndicator ) { // eslint-disable-line max-len
		return constants.NotBreak;
	}

	// GB999: Any ? Any
	return constants.BreakStart;
}


// EXPORTS //

module.exports = shouldBreak;
