/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Returns a Unicode code point from a JavaScript UTF-16 string.
*
* @param {string} str - input string
* @param {number} idx - position in string
* @returns {number} Unicode code point at position
*
* @example
* var out = codePointAt( 'last man standing', 4 );
* // returns 32.0
*
* @example
* var out = codePointAt( 'presidential election', 8 );
* // returns 116.0
*
* @example
* var out = codePointAt( 'अनुच्छेद', 2 );
* // returns 2369.0
*
* @example
* var out = codePointAt( '🌷', 0 );
* // returns 127799.0
*/
function codePointAt( str, idx ) {
	var code;
	var low;
	var hi;
	if ( !idx ) {
		idx = 0;
	}
	code = str.charCodeAt( idx );

	// High surrogate
	if ( code >= 0xD800 && code <= 0xDBFF &&
		idx < str.length - 1 ) {
		hi = code;
		low = str.charCodeAt( idx + 1 );
		if ( 0xDC00 <= low && low <= 0xDFFF ) {
			return ( ( hi - 0xD800 ) * 0x400 ) + ( low - 0xDC00 ) + 0x10000;
		}
		return hi;
	}

	// Low surrogate
	if ( code >= 0xDC00 && code <= 0xDFFF &&
		idx >= 1 ) {
		hi = str.charCodeAt( idx - 1 );
		low = code;
		if ( 0xD800 <= hi && hi <= 0xDBFF ) {
			return ( ( hi - 0xD800 ) * 0x400 ) + ( low - 0xDC00 ) + 0x10000;
		}
		return low;
	}

	return code;
}


// EXPORTS //

module.exports = codePointAt;
