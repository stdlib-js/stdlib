/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isPlainObject = require( '@stdlib/assert/is-plain-object' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var contains = require( '@stdlib/array/base/assert/contains' ).factory;
var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;
var removeFirstCodeUnit = require( '@stdlib/string/base/remove-first' );
var removeFirstCodePoint = require( '@stdlib/string/base/remove-first-code-point' );
var removeFirstGraphemeCluster = require( '@stdlib/string/base/remove-first-grapheme-cluster' ); // eslint-disable-line id-length
var format = require( '@stdlib/string/format' );


// VARIABLES //

var MODES = [ 'grapheme', 'code_point', 'code_unit' ];
var FCNS = {
	'grapheme': removeFirstGraphemeCluster,
	'code_point': removeFirstCodePoint,
	'code_unit': removeFirstCodeUnit
};
var isMode = contains( MODES );


// MAIN //

/**
* Removes the first character(s) of a string.
*
* @param {string} str - input string
* @param {NonNegativeInteger} [n=1] - number of characters to remove
* @param {Options} [options] - options
* @param {string} [options.mode="grapheme"] - type of "character" to return (must be either `grapheme`, `code_point`, or `code_unit`)
* @throws {TypeError} must provide a string primitive
* @throws {TypeError} second argument must be a nonnegative integer
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @returns {string} updated string
*
* @example
* var out = removeFirst( 'last man standing' );
* // returns 'ast man standing'
*
* @example
* var out = removeFirst( 'presidential election' );
* // returns 'residential election'
*
* @example
* var out = removeFirst( 'JavaScript' );
* // returns 'avaScript'
*
* @example
* var out = removeFirst( 'Hidden Treasures' );
* // returns 'idden Treasures'
*
* @example
* var out = removeFirst( '🐶🐮🐷🐰🐸', 2 );
* // returns '🐷🐰🐸'
*
* @example
* var out = removeFirst( 'foo bar', 4 );
* // returns 'bar'
*/
function removeFirst( str ) {
	var options;
	var nargs;
	var opts;
	var n;

	if ( !isString( str ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );
	}
	opts = {
		'mode': 'grapheme'
	};
	nargs = arguments.length;
	if ( nargs === 1 ) {
		n = 1;
	} else if ( nargs === 2 ) {
		n = arguments[ 1 ];
		if ( isPlainObject( n ) ) {
			options = n;
			n = 1;
		} else if ( !isNonNegativeInteger( n ) ) {
			throw new TypeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%s`.', n ) );
		}
	} else { // nargs > 2
		n = arguments[ 1 ];
		if ( !isNonNegativeInteger( n ) ) {
			throw new TypeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%s`.', n ) );
		}
		options = arguments[ 2 ];
		if ( !isPlainObject( options ) ) {
			throw new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );
		}
	}
	if ( options ) {
		if ( hasOwnProp( options, 'mode' ) ) {
			opts.mode = options.mode;
			if ( !isMode( opts.mode ) ) {
				throw new TypeError( format( 'invalid option. `%s` option must be one of the following: "%s". Value: `%s`.', 'mode', MODES.join( '", "' ), opts.mode ) );
			}
		}
	}
	return FCNS[ opts.mode ]( str, n );
}


// EXPORTS //

module.exports = removeFirst;
