#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/cli/ctor' );
var stdin = require( '@stdlib/process/read-stdin' );
var stdinStream = require( '@stdlib/streams/node/stdin' );
var RE_EOL = require( '@stdlib/regexp/eol' ).REGEXP;
var isRegExpString = require( '@stdlib/assert/is-regexp-string' );
var reFromString = require( '@stdlib/utils/regexp-from-string' );
var removeFirst = require( './../lib' );


// MAIN //

/**
* Main execution sequence.
*
* @private
* @returns {void}
*/
function main() {
	var split;
	var flags;
	var args;
	var opts;
	var cli;
	var n;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line options:
	flags = cli.flags();
	if ( flags.help || flags.version ) {
		return;
	}
	if ( flags.n ) {
		n = parseInt( flags.n, 10 );
	} else {
		n = 1;
	}
	opts = {};
	if ( flags.mode ) {
		opts.mode = flags.mode;
	}

	// Get any provided command-line arguments:
	args = cli.args();

	// Check if we are receiving data from `stdin`...
	if ( !stdinStream.isTTY ) {
		if ( flags.split ) {
			if ( !isRegExpString( flags.split ) ) {
				flags.split = '/'+flags.split+'/';
			}
			split = reFromString( flags.split );
		} else {
			split = RE_EOL;
		}
		return stdin( onRead );
	}
	try {
		console.log( removeFirst( args[ 0 ], n, opts ) ); // eslint-disable-line no-console
	} catch ( error ) {
		return cli.error( error );
	}

	/**
	* Callback invoked upon reading from `stdin`.
	*
	* @private
	* @param {(Error|null)} error - error object
	* @param {Buffer} data - data
	* @returns {void}
	*/
	function onRead( error, data ) {
		var lines;
		var i;
		if ( error ) {
			return cli.error( error );
		}
		lines = data.toString().split( split );

		// Remove any trailing separators (e.g., trailing newline)...
		if ( lines[ lines.length-1 ] === '' ) {
			lines.pop();
		}
		if ( lines.length ) {
			try {
				console.log( removeFirst( lines[ 0 ], n, opts ) ); // eslint-disable-line no-console
			} catch ( error ) {
				return cli.error( error );
			}
			for ( i = 1; i < lines.length; i++ ) {
				console.log( removeFirst( lines[ i ], n, opts ) ); // eslint-disable-line no-console
			}
		}
	}
}

main();
