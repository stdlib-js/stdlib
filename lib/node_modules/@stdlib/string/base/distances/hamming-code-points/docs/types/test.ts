/*
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

import hammingCodePointsDistance = require( './index' );


// TESTS //

// The function returns a number...
{
	hammingCodePointsDistance( '', '' ); // $ExpectType number
}

// The compiler throws an error if the function is provided a first argument which is not a string...
{
	hammingCodePointsDistance( true, '' ); // $ExpectError
	hammingCodePointsDistance( false, '' ); // $ExpectError
	hammingCodePointsDistance( null, '' ); // $ExpectError
	hammingCodePointsDistance( undefined, '' ); // $ExpectError
	hammingCodePointsDistance( 5, '' ); // $ExpectError
	hammingCodePointsDistance( [], '' ); // $ExpectError
	hammingCodePointsDistance( {}, '' ); // $ExpectError
	hammingCodePointsDistance( ( x: number ): number => x, '' ); // $ExpectError
}

// The compiler throws an error if the function is provided a second argument which is not a string...
{
	hammingCodePointsDistance( '', true ); // $ExpectError
	hammingCodePointsDistance( '', false ); // $ExpectError
	hammingCodePointsDistance( '', null ); // $ExpectError
	hammingCodePointsDistance( '', undefined ); // $ExpectError
	hammingCodePointsDistance( '', 5 ); // $ExpectError
	hammingCodePointsDistance( '', [] ); // $ExpectError
	hammingCodePointsDistance( '', {} ); // $ExpectError
	hammingCodePointsDistance( '', ( x: number ): number => x ); // $ExpectError
}

// The compiler throws an error if the function is provided an unsupported number of arguments...
{
	hammingCodePointsDistance(); // $ExpectError
	hammingCodePointsDistance( '' ); // $ExpectError
	hammingCodePointsDistance( '', '', 3 ); // $ExpectError
}
