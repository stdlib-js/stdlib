/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var format = require( '@stdlib/string/format' );


// MAIN //

/**
* Calculates the Hamming Code Points Distance distance between two equal-length unicode code points.
*
* ## Notes
*
* -   The function returns a sentinel value of `-1` if the input string lengths differ.
*
* @param {string} s1 - first input string
* @param {string} s2 - second input string
* @throws {TypeError} first argument must be a string
* @throws {TypeError} second argument must be a string
* @returns {integer} Hamming code points distance
*
* @example
* var distance = hammingCodePointsDistance( 'Hello, world!', 'Héllö, wörld!' );
* // returns 3
*/
function hammingCodePointsDistance( s1, s2 ) {
	var res;
	var i;
	var j;
	var code1;
	var code2;

	if ( !isString( s1 ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', s1 ) );
	}
	if ( !isString( s2 ) ) {
		throw new TypeError( format( 'invalid argument. Second argument must be a string. Value: `%s`.', s2 ) );
	}
	res = 0;
	for ( i = 0, j = 0; i < s1.length && j < s2.length; i++, j++ ) {
		code1 = s1.codePointAt( i );
		code2 = s2.codePointAt( i );
		if ( code1 !== code2 ) {
			res += 1;
		}
		if( code1 > 0xFFFF ) i++
		if( code2 > 0xFFFF ) j++
	}
	if ( i < s1.length || j < s2.length ) {
		return -1;
	}
	return res;
}


// EXPORTS //

module.exports = hammingCodePointsDistance;
