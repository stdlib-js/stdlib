/**
* @license Apache-2.0
*
* Copyright (c) 2023 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var format = require( '@stdlib/string/format' );
var nextGraphemeClusterBreak = require( '@stdlib/string/next-grapheme-cluster-break' );


// MAIN //

/**
* Calculates the Hamming distance between two strings with equal number of grapheme clusters.
*
* ## Notes
*
* -   The function returns a sentinel value of `-1` if the input string differ in number of grapheme clusters.
*
* @param {string} s1 - first input string
* @param {string} s2 - second input string
* @throws {TypeError} first argument must be a string
* @throws {TypeError} second argument must be a string
* @returns {integer} Hamming distance
*
* @example
* var distance = hammingGraphemeClusters( 'cafe', 'caf√©' );
* // returns 1
*/
function hammingGraphemeClusters( s1, s2 ) {
	var iend;
	var jend;
	var out;
	var i;
	var j;

	if ( !isString( s1 ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', s1 ) );
	}
	if ( !isString( s2 ) ) {
		throw new TypeError( format( 'invalid argument. Second argument must be a string. Value: `%s`.', s2 ) );
	}

	out = 0;
	i = 0;
	j = 0;
	iend = nextGraphemeClusterBreak(s1, i);
	jend = nextGraphemeClusterBreak(s2, j);
	while ( iend !== -1 ) {
		if ( s1.substring(i, iend) !== s2.substring(j, jend) ) {
			out += 1;
		}
		i = iend;
		j = jend;
		iend = nextGraphemeClusterBreak(s1, i);
		jend = nextGraphemeClusterBreak(s2, j);
	}
	if (jend !== -1) {  // s1 and s2 have unequal number of grapheme clusters
		return -1;
	}
	if ( i < s1.length && s1.substring(i) !== s2.substring(j) ) {
		out += 1;
	}
	return out;
}


// EXPORTS //

module.exports = hammingGraphemeClusters;
