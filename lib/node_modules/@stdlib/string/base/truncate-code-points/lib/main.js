/**
* @license Apache-2.0
*
* Copyright (c) 2023 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var numCodePoints = require( '@stdlib/string/num-code-points' );


// VARIABLES //

var RE_UTF16_LOW_SURROGATE = /[\uDC00-\uDFFF]/; // TODO: replace with stdlib pkg
var RE_UTF16_HIGH_SURROGATE = /[\uD800-\uDBFF]/; // TODO: replace with stdlib pkg


// MAIN //

/**
* Truncates the Unicode code points of a provided string in order to return a string having a specified number of Unicode code points.
*
* @param {string} str - input string
* @param {NonNegativeInteger} len - output string length (including ending)
* @param {string} ending - custom ending
* @returns {string} truncated string
*
* @example
* var str = 'beep boop';
* var out = truncate( str, 7, '...' );
* // returns 'beep...'
*
* @example
* var str = 'beep boop';
* var out = truncate( str, 5, '>>>' );
* // returns 'be>>>'
*
* @example
* var str = 'beep boop';
* var out = truncate( str, 10, '...' );
* // returns 'beep boop'
*
* @example
* var str = 'beep boop';
* var out = truncate( str, 0, '...' );
* // returns ''
*
* @example
* var str = 'beep boop';
* var out = truncate( str, 2, '...' );
* // returns '..'
*/
function truncate( str, len, ending ) {
	var endingLength;
	var strLength;
	var ch1;
	var ch2;
	var out;
	var i;

	if ( len <= 0 ) {
		return '';
	}
	strLength = numCodePoints( str );
	if ( len >= strLength ) {
		return str;
	}
	endingLength = numCodePoints( ending );
	if ( endingLength >= len ) {
		str = ending;
		ending = '';
		endingLength = 0;
	}
	out = '';

	// Process the string one code unit at a time and count UTF-16 surrogate pairs as a single Unicode code point...
	for ( i = 0; i < len - endingLength; i++ ) {
		ch1 = str[ i ];

		// Check for a high UTF-16 surrogate...
		if ( RE_UTF16_HIGH_SURROGATE.test( ch1 ) ) {
			// Check for an unpaired surrogate at the end of the input string...
			if ( i === len - endingLength - 1 ) {
				// We found an unpaired surrogate...
				break;
			}
			// Check whether the high surrogate is paired with a low surrogate...
			ch2 = str[ i+1 ];
			if ( RE_UTF16_LOW_SURROGATE.test( ch2 ) ) {
				// We found a surrogate pair:
				i += 1; // bump the index to process the next code unit
				out += ch1 + ch2;
			}
		} else {
			out += ch1;
		}
	}
	return out + ending;
}


// EXPORTS //

module.exports = truncate;
