/**
* @license Apache-2.0
*
* Copyright (c) 2023 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var round = require( '@stdlib/math/base/special/round' );
var floor = require( '@stdlib/math/base/special/floor' );
var numCodePoints = require( '@stdlib/string/num-code-points' );
var nextCodePoint = require( '@stdlib/string/next-code-point' );


// MAIN //

/**
* Truncates code points in the middle of a string in order to return a string having a specified length.
*
* @param {string} str - input string
* @param {integer} len - output string length (including sequence)
* @param {string} seq - custom replacement sequence
* @returns {string} truncated string
*
* @example
* var str = 'beep boop';
* var out = truncateMiddle( str, 5, '...' );
* // returns 'b...p'
*
* @example
* var str = 'beep boop';
* var out = truncateMiddle( str, 5, '>>>' );
* // returns 'b>>>p'
*
* @example
* var str = 'beep boop';
* var out = truncateMiddle( str, 10, '...' );
* // returns 'beep boop'
*
* @example
* var str = 'beep boop';
* var out = truncateMiddle( str, 0, '...' );
* // returns ''
*
* @example
* var str = 'beep boop';
* var out = truncateMiddle( str, 2, '...' );
* // returns '..'
*/
function truncateMiddle( str, len, seq ) {
	var seqLength;
	var strLength;
	var seqStart;
	var fromIdx;
	var nVisual;
	var seqEnd;
	var idx1;
	var idx2;

	seqLength = numCodePoints( seq );
	strLength = numCodePoints( str );
	fromIdx = 0;
	if ( len > strLength ) {
		return str;
	}
	if ( len - seqLength < 0 ) {
		return seq.slice( 0, len );
	}
	seqStart = round( ( len - seqLength ) / 2 );
	seqEnd = strLength - floor( ( len - seqLength ) / 2 );
	nVisual = 0;
	while( nVisual < seqStart ) {
		idx1 = nextCodePoint( str, fromIdx );
		fromIdx = idx1;
		nVisual += 1;
	}
	idx2 = idx1;
	while( idx2 > 0 ) {
		idx2 = nextCodePoint( str, fromIdx );
		if ( idx2 >= seqEnd + fromIdx - nVisual ) {
			break;
		}
		fromIdx = idx2;
		nVisual += 1;
	}
	if ( idx2 === -1 ) {
		idx2 = strLength - 1;
	}
	return str.substring( 0, idx1 ) + seq + str.substring( idx2 );
}


// EXPORTS //

module.exports = truncateMiddle;
