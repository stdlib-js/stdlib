/**
* @license Apache-2.0
*
* Copyright (c) 2023 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var replaceAfter = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof replaceAfter, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function replaces the substring after the first occurrence of a specified search string', function test( t ) {
	var replacement;
	var expected;
	var actual;
	var str;

	str = 'beep boop';
	replacement = 'foo';
	actual = replaceAfter( str, replacement, ' ' );
	expected = 'beep foo';
	t.strictEqual( actual, expected, 'returns expected value' );

	str = 'beep boop';
	replacement = 'foo';
	actual = replaceAfter( str, replacement, 'p' );
	expected = 'beepfoo';
	t.strictEqual( actual, expected, 'returns expected value' );

	str = 'Hello, World!';
	replacement = 'foo';
	actual = replaceAfter( str, replacement, 'o' );
	expected = 'Hellofoo';
	t.strictEqual( actual, expected, 'returns expected value' );

	t.end();
});

tape( 'the function replaces the substring after the first occurrence of a specified search string (Unicode characters)', function test( t ) {
	var replacement;
	var expected;
	var actual;
	var str;

	str = 'beep üòÄ boop üòÄ baz';
	replacement = 'foo';
	actual = replaceAfter( str, replacement, 'üòÄ' );
	expected = 'beep üòÄfoo';
	t.strictEqual( actual, expected, 'returns expected value' );

	str = 'ü§ñ Robot army ü§ñ!';
	actual = replaceAfter( str, replacement, 'ü§ñ' );
	expected = 'ü§ñfoo';

	str = 'üê∫ Wolf brothers üê∫';
	replacement = 'foo';
	actual = replaceAfter( str, replacement, 'o' );
	expected = 'üê∫ Wofoo';

	t.end();
});

tape( 'the function replaces the substring after the first occurrence of a specified search string (custom start index)', function test( t ) {
	var replacement;
	var expected;
	var actual;
	var str;

	str = 'beep boop baz';
	replacement = 'foo';
	actual = replaceAfter( str, replacement, ' ', 6 );
	expected = 'beep boop foo';
	t.strictEqual( actual, expected, 'returns expected value' );

	str = 'beep boop baz';
	replacement = 'foo';
	actual = replaceAfter( str, replacement, 'p', 6 );
	expected = 'beep boopfoo';

	str = 'beep boop baz';
	replacement = 'foo';
	actual = replaceAfter( str, replacement, 'beep', -2 );
	expected = 'beepfoo';

	str = 'beep boop baz';
	replacement = 'foo';
	actual = replaceAfter( str, replacement, 'beep', 20 );
	expected = 'beep boop baz';

	t.end();
});

tape( 'the function returns the input string unchanged if the search string is not found', function test( t ) {
	var replacement;
	var expected;
	var actual;
	var str;

	str = 'beep boop';
	replacement = 'foo';
	actual = replaceAfter( str, replacement, 'z' );
	expected = 'beep boop';
	t.strictEqual( actual, expected, 'returns expected value' );

	str = 'beep boop';
	replacement = 'foo';
	actual = replaceAfter( str, replacement, 'baz' );
	expected = 'beep boop';
	t.strictEqual( actual, expected, 'returns expected value' );

	t.end();
});

tape( 'the function returns the replacement string if the search string is the empty string', function test( t ) {
	var replacement;
	var expected;
	var actual;
	var str;

	str = 'beep boop';
	replacement = 'foo';
	actual = replaceAfter( str, replacement, '' );
	expected = 'foo';
	t.strictEqual( actual, expected, 'returns expected value' );

	t.end();
});
