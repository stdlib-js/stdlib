/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var objectKeys = require( '@stdlib/utils/keys' );
var ns = require( '@stdlib/math/iter/ops' );

console.log( objectKeys( ns ) );
// => [ 'iterAdd', 'iterDivide', 'iterMod', 'iterMultiply', 'iterSubtract' ]

var array2iterator = require( '@stdlib/array/to-iterator' );

/** iterAdd examples */
var addIterator1 = array2iterator( [1.0, 2.0] );
var addIterator2 = array2iterator( [3.0, 4.0] );
var addIterators = ns.iterAdd( addIterator1, addIterator2 );
console.log( addIterators.next().value );
// => 4
console.log( addIterators.next().value );
// => 6
console.log( addIterators.next().done );
// => true

var addIterator = array2iterator( [1.0, 2.0] );
var addIteratorAndConstant = ns.iterAdd( addIterator, 3.14 );
console.log( addIteratorAndConstant.next().value );
// => 4.140000000000001
console.log( addIteratorAndConstant.next().value );
// => 5.140000000000001
console.log( addIteratorAndConstant.next().done );
// => true

var infiniteIteratorWithConstants = ns.iterAdd( 1.0, 2.0, 3.0 );
console.log( infiniteIteratorWithConstants.next().value );
// => 6
console.log( infiniteIteratorWithConstants.next().value );
// => 6
console.log( infiniteIteratorWithConstants.next().done );
// => false

/** iterDivide examples */
var divIterator1 = array2iterator( [3.0, 2.0] );
var divIterator2 = array2iterator( [1.0, 4.0] );
var divIterators = ns.iterDivide( divIterator1, divIterator2 );
console.log( divIterators.next().value );
// => 3
console.log( divIterators.next().value );
// => 0.5
console.log( divIterators.next().done );
// => true

var divIterator = array2iterator( [1.0, 2.0] );
var divIteratorAndConstant = ns.iterDivide( divIterator, 2.0 );
console.log( divIteratorAndConstant.next().value );
// => 0.5
console.log( divIteratorAndConstant.next().value );
// => 1
console.log( divIteratorAndConstant.next().done );
// => true

var infiniteIteratorWithConstants = ns.iterDivide( 1.0, 2.0, 4.0 );
console.log( infiniteIteratorWithConstants.next().value );
// => 0.125
console.log( infiniteIteratorWithConstants.next().value );
// => 0.125
console.log( infiniteIteratorWithConstants.next().done );
// => false

/** iterMod examples */
var modIterator1 = array2iterator( [3.0, 2.0] );
var modIterator2 = array2iterator( [1.0, 4.0] );
var modIterators = ns.iterMod( modIterator1, modIterator2 );
console.log( modIterators.next().value );
// => 0
console.log( modIterators.next().value );
// => 2
console.log( modIterators.next().done );
// => true

var modIterator = array2iterator( [1.0, 2.0] );
var modIteratorAndConstant = ns.iterMod( modIterator, 2.0 );
console.log( modIteratorAndConstant.next().value );
// => 1
console.log( modIteratorAndConstant.next().value );
// => 0
console.log( modIteratorAndConstant.next().done );
// => true

var infiniteIteratorWithConstants = ns.iterMod( 1.0, 2.0, 4.0 );
console.log( infiniteIteratorWithConstants.next().value );
// => 1
console.log( infiniteIteratorWithConstants.next().value );
// => 1
console.log( infiniteIteratorWithConstants.next().done );
// => false

/** iterMultiply examples */
var mulIterator1 = array2iterator( [3.0, 2.0] );
var mulIterator2 = array2iterator( [1.0, 4.0] );
var mulIterators = ns.iterMultiply( mulIterator1, mulIterator2 );
console.log( mulIterators.next().value );
// => 3
console.log( mulIterators.next().value );
// => 8
console.log( mulIterators.next().done );
// => true

var mulIterator = array2iterator( [1.0, 2.0] );
var mulIteratorAndConstant = ns.iterMultiply( mulIterator, 2.0 );
console.log( mulIteratorAndConstant.next().value );
// => 2
console.log( mulIteratorAndConstant.next().value );
// => 4
console.log( mulIteratorAndConstant.next().done );
// => true

var infiniteIteratorWithConstants = ns.iterMultiply( 1.0, 2.0, 4.0 );
console.log( infiniteIteratorWithConstants.next().value );
// => 8
console.log( infiniteIteratorWithConstants.next().value );
// => 8
console.log( infiniteIteratorWithConstants.next().done );
// => false

/** iterSubtract examples */
var subIterator1 = array2iterator( [3.0, 2.0] );
var subIterator2 = array2iterator( [1.0, 4.0] );
var subIterators = ns.iterSubtract( subIterator1, subIterator2 );
console.log( subIterators.next().value );
// => 2
console.log( subIterators.next().value );
// => -2
console.log( subIterators.next().done );
// => true

var subIterator = array2iterator( [1.0, 2.0] );
var subIteratorAndConstant = ns.iterSubtract( subIterator, 2.0 );
console.log( subIteratorAndConstant.next().value );
// => -1
console.log( subIteratorAndConstant.next().value );
// => 0
console.log( subIteratorAndConstant.next().done );
// => true

var infiniteIteratorWithConstants = ns.iterSubtract( 4.0, 2.0, 1.0 );
console.log( infiniteIteratorWithConstants.next().value );
// => 1
console.log( infiniteIteratorWithConstants.next().value );
// => 1
console.log( infiniteIteratorWithConstants.next().done );
// => false
