'use strict';

// MODULES //

var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );


// VARIABLES //

var C = [
	0.5,
	1.5,
	2.5,
	3.5,
	4.5,
	5.5,
	6.5,
	7.5,
	8.5,
	9.5,
	10.5,
	11.5,
	12.5,
	13.5,
	14.5,
	15.5,
	16.5,
	17.5,
	18.5,
	19.5,
	20.5,
	21.5,
	22.5,
	23.5,
	24.5,
	25.5,
	26.5,
	27.5,
	28.5,
	29.5,
	30.5,
	31.5,
	32.5,
	33.5,
	34.5,
	35.5,
	36.5,
	37.5,
	38.5,
	39.5,
	40.5,
	41.5,
	42.5,
	43.5,
	44.5,
	45.5,
	46.5,
	47.5,
	48.5,
	49.5,
	50.5,
	51.5,
	52.5,
	53.5,
	54.5,
	55.5,
	56.5,
	57.5,
	58.5,
	59.5,
	60.5,
	61.5,
	62.5,
	63.5,
	64.5,
	65.5,
	66.5,
	67.5,
	68.5,
	69.5,
	70.5,
	71.5,
	72.5,
	73.5,
	74.5,
	75.5,
	76.5,
	77.5,
	78.5,
	79.5,
	80.5,
	81.5,
	82.5,
	83.5,
	84.5,
	85.5,
	86.5,
	87.5,
	88.5,
	89.5,
	90.5,
	91.5,
	92.5,
	93.5,
	94.5,
	95.5,
	96.5,
	97.5,
	98.5,
	99.5,
	100.5,
	101.5,
	102.5,
	103.5,
	104.5,
	105.5,
	106.5,
	107.5,
	108.5,
	109.5,
	110.5,
	111.5,
	112.5,
	113.5,
	114.5,
	115.5,
	116.5,
	117.5,
	118.5,
	119.5,
	120.5,
	121.5,
	122.5,
	123.5,
	124.5,
	125.5,
	126.5,
	127.5,
	128.5,
	129.5,
	130.5,
	131.5,
	132.5,
	133.5,
	134.5,
	135.5,
	136.5,
	137.5,
	138.5,
	139.5,
	140.5,
	141.5,
	142.5,
	143.5,
	144.5,
	145.5,
	146.5,
	147.5,
	148.5,
	149.5,
	150.5,
	151.5,
	152.5,
	153.5,
	154.5,
	155.5,
	156.5,
	157.5,
	158.5,
	159.5,
	160.5,
	161.5,
	162.5,
	163.5,
	164.5,
	165.5,
	166.5,
	167.5,
	168.5,
	169.5,
	170.5,
	171.5,
	172.5,
	173.5,
	174.5,
	175.5,
	176.5,
	177.5,
	178.5,
	179.5,
	180.5,
	181.5,
	182.5,
	183.5,
	184.5,
	185.5,
	186.5,
	187.5,
	188.5,
	189.5,
	190.5,
	191.5,
	192.5,
	193.5,
	194.5,
	195.5,
	196.5,
	197.5,
	198.5,
	199.5,
	200.5,
	201.5,
	202.5,
	203.5,
	204.5,
	205.5,
	206.5,
	207.5,
	208.5,
	209.5,
	210.5,
	211.5,
	212.5,
	213.5,
	214.5,
	215.5,
	216.5,
	217.5,
	218.5,
	219.5,
	220.5,
	221.5,
	222.5,
	223.5,
	224.5,
	225.5,
	226.5,
	227.5,
	228.5,
	229.5,
	230.5,
	231.5,
	232.5,
	233.5,
	234.5,
	235.5,
	236.5,
	237.5,
	238.5,
	239.5,
	240.5,
	241.5,
	242.5,
	243.5,
	244.5,
	245.5,
	246.5,
	247.5,
	248.5,
	249.5,
	250.5,
	251.5,
	252.5,
	253.5,
	254.5,
	255.5,
	256.5,
	257.5,
	258.5,
	259.5,
	260.5,
	261.5,
	262.5,
	263.5,
	264.5,
	265.5,
	266.5,
	267.5,
	268.5,
	269.5,
	270.5,
	271.5,
	272.5,
	273.5,
	274.5,
	275.5,
	276.5,
	277.5,
	278.5,
	279.5,
	280.5,
	281.5,
	282.5,
	283.5,
	284.5,
	285.5,
	286.5,
	287.5,
	288.5,
	289.5,
	290.5,
	291.5,
	292.5,
	293.5,
	294.5,
	295.5,
	296.5,
	297.5,
	298.5,
	299.5,
	300.5,
	301.5,
	302.5,
	303.5,
	304.5,
	305.5,
	306.5,
	307.5,
	308.5,
	309.5,
	310.5,
	311.5,
	312.5,
	313.5,
	314.5,
	315.5,
	316.5,
	317.5,
	318.5,
	319.5,
	320.5,
	321.5,
	322.5,
	323.5,
	324.5,
	325.5,
	326.5,
	327.5,
	328.5,
	329.5,
	330.5,
	331.5,
	332.5,
	333.5,
	334.5,
	335.5,
	336.5,
	337.5,
	338.5,
	339.5,
	340.5,
	341.5,
	342.5,
	343.5,
	344.5,
	345.5,
	346.5,
	347.5,
	348.5,
	349.5,
	350.5,
	351.5,
	352.5,
	353.5,
	354.5,
	355.5,
	356.5,
	357.5,
	358.5,
	359.5,
	360.5,
	361.5,
	362.5,
	363.5,
	364.5,
	365.5,
	366.5,
	367.5,
	368.5,
	369.5,
	370.5,
	371.5,
	372.5,
	373.5,
	374.5,
	375.5,
	376.5,
	377.5,
	378.5,
	379.5,
	380.5,
	381.5,
	382.5,
	383.5,
	384.5,
	385.5,
	386.5,
	387.5,
	388.5,
	389.5,
	390.5,
	391.5,
	392.5,
	393.5,
	394.5,
	395.5,
	396.5,
	397.5,
	398.5,
	399.5,
	400.5,
	401.5,
	402.5,
	403.5,
	404.5,
	405.5,
	406.5,
	407.5,
	408.5,
	409.5,
	410.5,
	411.5,
	412.5,
	413.5,
	414.5,
	415.5,
	416.5,
	417.5,
	418.5,
	419.5,
	420.5,
	421.5,
	422.5,
	423.5,
	424.5,
	425.5,
	426.5,
	427.5,
	428.5,
	429.5,
	430.5,
	431.5,
	432.5,
	433.5,
	434.5,
	435.5,
	436.5,
	437.5,
	438.5,
	439.5,
	440.5,
	441.5,
	442.5,
	443.5,
	444.5,
	445.5,
	446.5,
	447.5,
	448.5,
	449.5,
	450.5,
	451.5,
	452.5,
	453.5,
	454.5,
	455.5,
	456.5,
	457.5,
	458.5,
	459.5,
	460.5,
	461.5,
	462.5,
	463.5,
	464.5,
	465.5,
	466.5,
	467.5,
	468.5,
	469.5,
	470.5,
	471.5,
	472.5,
	473.5,
	474.5,
	475.5,
	476.5,
	477.5,
	478.5,
	479.5,
	480.5,
	481.5,
	482.5,
	483.5,
	484.5,
	485.5,
	486.5,
	487.5,
	488.5,
	489.5,
	490.5,
	491.5,
	492.5,
	493.5,
	494.5,
	495.5,
	496.5,
	497.5,
	498.5,
	499.5,
	500.5
];
var END = C.length - 1;


// MAIN //

/**
* Evaluates a polynomial.
*
* ## Notes
*
* -   The implementation uses [Horner's rule][horners-method] for efficient computation.
*
* [horners-method]: https://en.wikipedia.org/wiki/Horner%27s_method
*
* @private
* @param {number} x - value at which to evaluate the polynomial
* @returns {number} evaluated polynomial
*/
function evalpoly( x ) {
	var p;
	var i;

	if ( x === 0.0 ) {
		return C[ 0 ];
	}
	i = END;
	p = float64ToFloat32( float64ToFloat32( C[ i ] * x ) + C[ i-1 ] );
	i -= 2;
	while ( i >= 0 ) {
		p = float64ToFloat32( float64ToFloat32( p * x ) + C[ i ] );
		i -= 1;
	}
	return p;
}


// EXPORTS //

module.exports = evalpoly;
