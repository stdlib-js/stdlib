/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var abs = require( '@stdlib/math/base/special/abs' );
var EPS = require( '@stdlib/constants/math/float64-eps' );
var hyp2f1 = require( './../lib' );


// FIXTURES //

var basic1 = require( './fixtures/python/basic1.json' );
var basic2 = require( './fixtures/python/basic2.json' );
var basic3 = require( './fixtures/python/basic3.json' );
var basic4 = require( './fixtures/python/basic4.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof hyp2f1, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function accurately computes the function', function test( t ) {
	var expected;
	var delta;
	var tol;
	var a;
	var b;
	var c;
	var x;
	var v;
	var i;

	a = basic1.a;
	b = basic1.b;
	c = basic1.c;
	x = basic1.x;
	expected = basic1.expected;

	for ( i = 0; i < x.length; i++ ) {
		v = hyp2f1( a[ i ], b[ i ], c[ i ], x[ i ] );
		delta = abs( v - expected[ i ] );
		tol = EPS * abs( expected[ i ] );
		t.ok( delta <= tol, 'within tolerance. x: ' + x[ i ] + '. Value: ' + v + '. Expected: ' + expected[ i ] + '. Delta: ' + delta + '. Tolerance: ' + tol + '.' );
	}
	t.end();
});

tape( 'the function accurately computes the function', function test( t ) {
	var expected;
	var delta;
	var tol;
	var a;
	var b;
	var c;
	var x;
	var v;
	var i;

	a = basic2.a;
	b = basic2.b;
	c = basic2.c;
	x = basic2.x;
	expected = basic2.expected;

	for ( i = 0; i < x.length; i++ ) {
		v = hyp2f1( a[ i ], b[ i ], c[ i ], x[ i ] );
		delta = abs( v - expected[ i ] );
		tol = EPS * abs( expected[ i ] );
		t.ok( delta <= tol, 'within tolerance. x: ' + x[ i ] + '. Value: ' + v + '. Expected: ' + expected[ i ] + '. Delta: ' + delta + '. Tolerance: ' + tol + '.' );
	}
	t.end();
});

tape( 'the function accurately computes the function', function test( t ) {
	var expected;
	var delta;
	var tol;
	var a;
	var b;
	var c;
	var x;
	var v;
	var i;

	a = basic3.a;
	b = basic3.b;
	c = basic3.c;
	x = basic3.x;
	expected = basic3.expected;

	for ( i = 0; i < x.length; i++ ) {
		v = hyp2f1( a[ i ], b[ i ], c[ i ], x[ i ] );
		delta = abs( v - expected[ i ] );
		tol = EPS * abs( expected[ i ] );
		t.ok( delta <= tol, 'within tolerance. x: ' + x[ i ] + '. Value: ' + v + '. Expected: ' + expected[ i ] + '. Delta: ' + delta + '. Tolerance: ' + tol + '.' );
	}
	t.end();
});

tape( 'the function accurately computes the function', function test( t ) {
	var expected;
	var delta;
	var tol;
	var a;
	var b;
	var c;
	var x;
	var v;
	var i;

	a = basic4.a;
	b = basic4.b;
	c = basic4.c;
	x = basic4.x;
	expected = basic4.expected;

	for ( i = 0; i < x.length; i++ ) {
		v = hyp2f1( a[ i ], b[ i ], c[ i ], x[ i ] );
		delta = abs( v - expected[ i ] );
		tol = EPS * abs( expected[ i ] );
		t.ok( delta <= tol, 'within tolerance. x: ' + x[ i ] + '. Value: ' + v + '. Expected: ' + expected[ i ] + '. Delta: ' + delta + '. Tolerance: ' + tol + '.' );
	}
	t.end();
});
