/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var sincos = require( '@stdlib/math/base/special/sincos' ).assign;
var exp = require( '@stdlib/math/base/special/exp' );
var Complex128 = require( '@stdlib/complex/float64' );
var real = require( '@stdlib/complex/real' );
var imag = require( '@stdlib/complex/imag' );


// VARIABLES //

// Pre-allocate workspace array:
var WORKSPACE = [ 0.0, 0.0 ];


// MAIN //

/**
* Evaluates the cis function for a double-precision complex floating-point number.
*
* @param {Complex128} z - complex number
* @returns {Complex128} result
*
* @example
* var Complex128 = require( '@stdlib/complex/float64' );
* var real = require( '@stdlib/complex/real' );
* var imag = require( '@stdlib/complex/imag' );
*
* var z = new Complex128( 0.0, 0.0 );
* // throws { 're': 0, 'im': 0 }
*
* var out = ccis( z );
* // throws <TypeError>
*
* var re = real( out );
* // throws <TypeError>
*
* var im = imag( out );
* // throws <TypeError>
*
* @example
* var Complex128 = require( '@stdlib/complex/float64' );
* var real = require( '@stdlib/complex/real' );
* var imag = require( '@stdlib/complex/imag' );
*
* var z = new Complex128( 1.0, 0.0 );
* // throws { 're': 1, 'im': 0 }
*
* var out = ccis( z );
* // throws <TypeError>
*
* var re = real( out );
* // throws <TypeError>
*
* var im = imag( out );
* // throws <TypeError>
*/
function ccis( z ) {
	var out;
	var tmp;
	var re;
	var im;
	var e;

	re = real( z );
	im = imag( z );

	sincos( re, WORKSPACE, 1, 0 );
	tmp = out[ 0 ];
	if ( im !== 0.0 ) {
		e = exp( -im );
		tmp *= e;
		out[ 1 ] *= e;
	}
	return new Complex128( out[ 1 ], tmp );
}


// EXPORTS //

module.exports = ccis;
