'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var linspace = require( '@stdlib/math/utils/linspace' );
var rempio2 = require( '@stdlib/math/base/special/rempio2' );
var PI = require( '@stdlib/math/constants/float64-pi' );
var sin = require( '@stdlib/math/base/special/sin' );
var kernelSin = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof kernelSin, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `NaN` if provided `NaN` for either parameter', function test( t ) {
	var v = kernelSin( NaN, 0.0 );
	t.equal( isnan( v ), true, 'returns NaN' );

	v = kernelSin( 4.0, NaN );
	t.equal( isnan( v ), true, 'returns NaN' );

	v = kernelSin( NaN, NaN );
	t.equal( isnan( v ), true, 'returns NaN' );
	t.end();
});

tape( 'the function evaluates the sine for input values on the interval `[-pi/4, pi/4]`', function test( t ) {
	var values;
	var out;
	var x;
	var i;

	values = linspace( -PI/4.0, PI/4.0, 1000 );
	for ( i = 0; i < values.length; i++ ) {
		x = values[ i ];
		out = kernelSin( x, 0.0 );
		t.strictEqual( out, sin( x ), 'returns expected value' );
	}
	t.end();
});

tape( 'the function can be used to compute the sine for input values outside of `[-pi/4, pi/4]` after argument reduction via `rempio2` (positive)', function test( t ) {
	var values;
	var out;
	var x;
	var y;
	var n;
	var i;

	values = linspace( 40.0*PI/4.0, 200*PI/4.0, 1000 );
	y = new Array( 2 );
	for ( i = 0; i < values.length; i++ ) {
		x = values[ i ];
		n = rempio2( x, y );
		switch ( n & 3 ) {
		case 0:
			out = kernelSin( y[ 0 ], y[ 1 ] );
			t.strictEqual( out, sin( x ), 'returns expected value' );
			break;
		case 2:
			out = -kernelSin( y[ 0 ], y[ 1 ] );
			t.strictEqual( out, sin( x ), 'returns expected value' );
			break;
		default:
			break;
		}
	}
	t.end();
});

tape( 'the function can be used to compute the sine for input values outside of `[-pi/4, pi/4]` after argument reduction via `rempio2` (negative)', function test( t ) {
	var values;
	var out;
	var x;
	var y;
	var n;
	var i;

	values = linspace( -200.0*PI/4.0, -40.0*PI/4.0, 1000 );
	y = new Array( 2 );
	for ( i = 0; i < values.length; i++ ) {
		x = values[ i ];
		n = rempio2( x, y );
		switch ( n & 3 ) {
		case 0:
			out = kernelSin( y[ 0 ], y[ 1 ] );
			t.strictEqual( out, sin( x ), 'returns expected value' );
			break;
		case 2:
			out = -kernelSin( y[ 0 ], y[ 1 ] );
			t.strictEqual( out, sin( x ), 'returns expected value' );
			break;
		default:
			break;
		}
	}
	t.end();
});
