/**
 * @license Apache-2.0
 *
 * Copyright (c) 2018 The Stdlib Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 *
 * ## Notice
 *
 * The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/9.3.0/lib/msun/src/s_tan.c}. The implementation follows the original, but has been modified for JavaScript.
 *
 * ```text
 * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
 *
 * Developed at SunPro, a Sun Microsystems, Inc. business.
 * Permission to use, copy, modify, and distribute this
 * software is freely granted, provided that this notice
 * is preserved.
 * ```
 */

'use strict';

// MODULES //

var acos = require( '@stdlib/math/base/special/acos' );


// MAIN //

/**
 * Evaluates the arcsecant of a number.
 *
 * ## Method
 *
 * -   Let \\(S\\), \\(C\\), and \\(T\\) denote the \\(\sin\\), \\(\cos\\), and \\(\asec\\), respectively, on \\(\[-\pi/4, +\pi/4\]\\).
 *
 * -   We have
 *
 *     | n | sin(x) | cos(x) | asec(x)|
 *     | - | ------ | ------ | ------ |
 *     | 0 |    S   |    C   |   1/T  |
 *     | 1 |    C   |   -S   |  -T    |
 *     | 2 |   -S   |   -C   |   1/T  |
 *     | 3 |   -C   |    S   |  -T    |
 *
 *
 * @param {number} x - input value
 * @returns {number} arcsecant (in radians)
 *
 * @example
 * var v = asec( 1.0 );
 * // returns 0.0
 *
 * @example
 * var v = asec( sqrt( 2.0 ) ); // ~pi/4
 * // returns ~0.785
 *
 * @example
 * var v = asec( NaN );
 * // returns NaN
 */
function asec(x) {
	return acos( 1.0 / x );
}


// EXPORTS //

module.exports = asec;
