/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //
var EPS = require('@stdlib/constants/math/float64-eps');
var PINF = require('@stdlib/constants/math/float64-pinf');
var NINF = require('@stdlib/constants/math/float64-ninf');
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var tape = require( 'tape' );
var expm1rel = require( './../lib' );

// FIXTURES //

// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof expm1rel, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `1.0` near `0.0`', function test( t ) {
	t.equal( expm1rel( 0 ), 1.0, 'equals 1.0' );
	t.equal( expm1rel( EPS ), 1.0, 'equals 1.0');
	t.equal( expm1rel( -EPS ), 1.0, 'equals 1.0');
	t.end();
});

tape( 'the function returns `NaN` when evaulated at `NaN`', function test ( t ) {
	var y = expm1rel( NaN );
	t.equal( isnan( y ), true, 'equals NaN');
	t.end();
});
