'use strict';

/*
* The original C++ code and copyright notice is from the [Boost library]{@link https://github.com/boostorg/math/blob/develop/include/boost/math/special_functions/detail/bessel_y0.hpp}.
*
* The implementation has been modified for JavaScript.
*/

/*
* Copyright Xiaogang Zhang, 2006.
* Use, modification and distribution are subject to the
* Boost Software License, Version 1.0. (See accompanying file
* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)
*/

// MODULES //

var ln = require( '@stdlib/math/base/special/ln' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var PI = require( '@stdlib/math/constants/float64-pi' );
var SQRT_PI = require( '@stdlib/math/constants/float64-sqrt-pi' );
var NINF = require( '@stdlib/math/constants/float64-ninf' );
var PINF = require( '@stdlib/math/constants/float64-pinf' );
var sincos = require( '@stdlib/math/base/special/sincos' );
var besselj0 = require( '@stdlib/math/base/special/besselj0' );
var evalrational = require( '@stdlib/math/base/tools/evalrational' ).factory;


// VARIABLES //

var ONE_DIV_SQRT_PI = 1.0 / SQRT_PI;
var TWO_DIV_PI = 2.0 / PI;

var P1 = [
	1.0723538782003176831e+11,
	-8.3716255451260504098e+09,
	2.0422274357376619816e+08,
	-2.1287548474401797963e+06,
	1.0102532948020907590e+04,
	-1.8402381979244993524e+01
];

var Q1 = [
	5.8873865738997033405e+11,
	8.1617187777290363573e+09,
	5.5662956624278251596e+07,
	2.3889393209447253406e+05,
	6.6475986689240190091e+02,
	1.0
];

var P2 = [
	-2.2213976967566192242e+13,
	-5.5107435206722644429e+11,
	4.3600098638603061642e+10,
	-6.9590439394619619534e+08,
	4.6905288611678631510e+06,
	-1.4566865832663635920e+04,
	1.7427031242901594547e+01
];

var Q2 = [
	4.3386146580707264428e+14,
	5.4266824419412347550e+12,
	3.4015103849971240096e+10,
	1.3960202770986831075e+08,
	4.0669982352539552018e+05,
	8.3030857612070288823e+02,
	1.0
];

var P3 = [
	-8.0728726905150210443e+15,
	6.7016641869173237784e+14,
	-1.2829912364088687306e+11,
	-1.9363051266772083678e+11,
	2.1958827170518100757e+09,
	-1.0085539923498211426e+07,
	2.1363534169313901632e+04,
	-1.7439661319197499338e+01
];

var Q3 = [
	3.4563724628846457519e+17,
	3.9272425569640309819e+15,
	2.2598377924042897629e+13,
	8.6926121104209825246e+10,
	2.4727219475672302327e+08,
	5.3924739209768057030e+05,
	8.7903362168128450017e+02,
	1.0
];

var PC = [
	2.2779090197304684302e+04,
	4.1345386639580765797e+04,
	2.1170523380864944322e+04,
	3.4806486443249270347e+03,
	1.5376201909008354296e+02,
	8.8961548424210455236e-01
];

var QC = [
	2.2779090197304684318e+04,
	4.1370412495510416640e+04,
	2.1215350561880115730e+04,
	3.5028735138235608207e+03,
	1.5711159858080893649e+02,
	1.0
];

var PS = [
	-8.9226600200800094098e+01,
	-1.8591953644342993800e+02,
	-1.1183429920482737611e+02,
	-2.2300261666214198472e+01,
	-1.2441026745835638459e+00,
	-8.8033303048680751817e-03
];

var QS = [
	5.7105024128512061905e+03,
	1.1951131543434613647e+04,
	7.2642780169211018836e+03,
	1.4887231232283756582e+03,
	9.0593769594993125859e+01,
	1.0
];

var x1 = 8.9357696627916752158e-01;
var x2 = 3.9576784193148578684e+00;
var x3 = 7.0860510603017726976e+00;
var x11 = 2.280e+02;
var x12 = 2.9519662791675215849e-03;
var x21 = 1.0130e+03;
var x22 = 6.4716931485786837568e-04;
var x31 = 1.8140e+03;
var x32 = 1.1356030177269762362e-04;

var sc = [ 0.0, 0.0 ];


// FUNCTIONS //

var poly1 = evalrational( P1, Q1 );
var poly2 = evalrational( P2, Q2 );
var poly3 = evalrational( P3, Q3 );
var polyC = evalrational( PC, QC );
var polyS = evalrational( PS, QS );


// MAIN //

/**
* Computes the Bessel function of the second kind of order zero.

* ## Notes
*
* -   Accuracy for subnormal `x` is very poor. Full accuracy is achieved at 1.0e-308 but trends progressively to zero at 5e-324. This suggests that underflow (or overflow, perhaps due to a reciprocal) is effectively cutting off digits of precision until the computation loses all accuracy at 5e-324.
*
* @private
* @param {number} x - input value
* @returns {number} evaluated Bessel function
*
* @example
* var PINF = require( '@stdlib/math/constants/float64-pinf' );
* var NINF = require( '@stdlib/math/constants/float64-ninf' );
*
* var v = y0( 0.0 );
* // returns -Infinity
*
* v = y0( 1.0 );
* // returns ~0.088
*
* v = y0( -1.0 );
* // returns NaN
*
* v = y0( PINF );
* // returns 0.0
*
* v = y0( NINF );
* // returns NaN
*
* v = y0( NaN );
* // returns NaN
*/
function y0( x ) {
	var rc;
	var rs;
	var y2;
	var r;
	var y;
	var z;
	var f;

	if ( x < 0.0 ) {
		return NaN;
	}
	if ( x === 0.0 ) {
		return NINF;
	}
	if ( x === PINF ) {
		return 0.0;
	}
	if ( x <= 3.0 ) {
		y = x * x;
		z = ( ln( x / x1 ) * besselj0( x ) ) * TWO_DIV_PI;
		r = poly1( y );
		f = ( x + x1 ) * ( ( x - (x11/256.0) ) - x12 );
		return z + ( f * r );
	}
	if ( x <= 5.5 ) {
		y = x * x;
		z = ( ln( x / x2 ) * besselj0( x ) ) * TWO_DIV_PI;
		r = poly2( y );
		f = ( x + x2 ) * ( ( x - (x21/256.0) ) - x22 );
		return z + ( f * r );
	}
	if ( x <= 8.0 ) {
		y = x * x;
		z = ( ln( x / x3 ) * besselj0( x ) ) * TWO_DIV_PI;
		r = poly3( y );
		f = ( x + x3 ) * ( ( x - (x31/256.0) ) - x32 );
		return z + ( f * r );
	}
	y = 8.0 / x;
	y2 = y * y;
	rc = polyC( y2 );
	rs = polyS( y2 );
	f = ONE_DIV_SQRT_PI / sqrt( x );
	/*
	* The following code is really just:
	*
	* ```
	* z = x - 0.25 * pi;
	* value = f * ( rc * sin( z ) + y * rs * cos( z ) );
	* ```
	*
	* But using the sin/cos addition formulae and constant values for sin/cos of PI/4 which then cancel part of the "f" term as they're all 1 / sqrt(2):
	*/
	sincos( sc, x );
	return f * ( ( rc * (sc[0]-sc[1]) ) + ( (y*rs) * (sc[1]+sc[0]) ) );
} // end FUNCTION y0()


// EXPORTS //

module.exports = y0;
