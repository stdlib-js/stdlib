/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var incrspace = require( '@stdlib/math/utils/incrspace' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var lib1pexp = require( './../lib' );


// FIXTURES //

var calculated = JSON.parse( require( './fixtures/r/answers.json' ) );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof lib1pexp, 'function', 'main export is a function' );
	t.end();
});

tape( 'if provided `NaN`, the function returns `NaN`', function test( t ) {
	var v = lib1pexp( NaN );
	t.strictEqual( isnan( v ), true, 'returns NaN when provided a NaN' );
	t.end();
});

tape( 'if `x <= -37...`, the function returns `exp(x)`', function test( t ) {
	// values = incrspace( -10000, 1000.00, 0.5 );
	var values;
	var x;
	var y;
	var i;

	values = incrspace( -100.0, -37.0, 0.2 );
	for ( i = 0; i < values.length; i++ ) {
		x = lib1pexp( values[ i ] );
		y = exp( values[ i ] );
		t.strictEqual( x, y, 'returns '+y+' when provided ' + values[ i ] );
	}
	t.end();
});

tape( 'if `x > 33.3...`, the function returns `x`', function test( t ) {
	var values;
	var x;
	var y;
	var i;

	values = incrspace( 33.4, 100, 0.2 );
	for ( i = 0; i < values.length; i++ ) {
		x = lib1pexp( values[ i ] );
		y = values[ i ];
		t.strictEqual( x, y, 'returns '+y+' when provided ' + values[ i ] );
	}
	t.end();
});

tape( 'the function matches R\'s implementation of log1pexp', function test( t ) {
	var values;
	var x;
	var y;
	var i;

	values = incrspace( -36.0, 33.3, 0.1 );
	for ( i = 0; i < values.length; i++ ) {
		x = lib1pexp( values[ i ] );
		y = calculated[ i ];
		t.ok( abs(x - y) / y < 0.00001, 'returns '+y+' when provided ' + values[ i ] );
	}
	t.end();
});
