/**
* @license Apache-2.0
*
* Copyright (c) 2021 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var PINF = require( '@stdlib/constants/float32/pinf' );
var NINF = require( '@stdlib/constants/float32/ninf' );
var isnanf = require( '@stdlib/math/base/assert/is-nanf' );
var EPS = require( '@stdlib/constants/float32/eps' );
var abs = require( '@stdlib/math/base/special/abs' );
var isNegativeZerof = require( '@stdlib/math/base/assert/is-negative-zerof' );
var isPositiveZerof = require( '@stdlib/math/base/assert/is-positive-zerof' );
var Complex64 = require( '@stdlib/complex/float32' );
var real = require( '@stdlib/complex/real' );
var imag = require( '@stdlib/complex/imag' );
var cflipsignf = require( './../lib' );


// FIXTURES //

var data = require( './fixtures/julia/data.json' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof cflipsignf, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function evaluates the flipsign function', function test( t ) {
	var delta;
	var ans;
	var ere;
	var eim;
	var are;
	var aim;
	var tol;
	var re;
	var im;
	var y;
	var z;
	var i;

	re = data.re;
	im = data.im;
	y = data.y;
	ere = data.expected_re;
	eim = data.expected_im;

	for ( i = 0; i < re.length; i++ ) {
		z = new Complex64( re[ i ], im[ i ] );
		ans = cflipsignf( z, y[ i ] );
		are = real( ans );
		aim = imag( ans );
		if ( are === ere[ i ] && aim === eim[ i ] ) {
			t.equal( are, ere[ i ], 're: '+re[ i ]+'. Expected: '+ere[ i ] );
			t.equal( aim, eim[ i ], 'im: '+im[ i ]+'. Expected: '+eim[ i ] );
		} else {
			delta = abs( are - ere[ i ] );
			tol = EPS * abs( ere[ i ] );
			t.ok( delta <= tol, 'within tolerance. re: '+re[ i ]+'. im: '+im[ i ]+'. Actual re: '+are+'. Expected re: '+ere[ i ]+'. delta: '+delta+'. tol: '+tol+'.' );

			delta = abs( aim - eim[ i ] );
			tol = EPS * abs( eim[ i ] );
			t.ok( delta <= tol, 'within tolerance. re: '+re[ i ]+'. im: '+im[ i ]+'. Actual im: '+aim+'. Expected im: '+eim[ i ]+'. delta: '+delta+'. tol: '+tol+'.' );
		}
	}
	t.end();
});

tape( 'the function does not flip the sign of real and imaginary input arguments if `y` is `+infinity`', function test( t ) {
	var actual;
	var z;

	// Tested against Julia...
	z = new Complex64( -4.0, 5.0 );
	actual = cflipsignf( z, PINF );

	t.strictEqual( real( actual ), -4.0, 'returns expected value' );
	t.strictEqual( imag( actual ), 5.0, 'returns expected value' );

	t.end();
});

tape( 'the function flips the sign of real and imaginary input arguments if `y` is `-infinity`', function test( t ) {
	var actual;
	var z;

	// Tested against Julia...
	z = new Complex64( -4.0, 5.0 );
	actual = cflipsignf( z, NINF );

	t.strictEqual( real( actual ), 4.0, 'returns expected value' );
	t.strictEqual( imag( actual ), -5.0, 'returns expected value' );

	t.end();
});

tape( 'the function flips the sign of real and imaginary input arguments if `y` is `-0`', function test( t ) {
	var actual;
	var z;

	// Tested against Julia...
	z = new Complex64( -4.0, 5.0 );
	actual = cflipsignf( z, -0.0 );

	t.strictEqual( real( actual ), 4.0, 'returns expected value' );
	t.strictEqual( imag( actual ), -5.0, 'returns expected value' );

	t.end();
});

tape( 'the function does not flip the sign of real and imaginary input arguments if `y` is `+0`', function test( t ) {
	var actual;
	var z;

	// Tested against Julia...
	z = new Complex64( -4.0, 5.0 );
	actual = cflipsignf( z, +0.0 );

	t.strictEqual( real( actual ), -4.0, 'returns expected value' );
	t.strictEqual( imag( actual ), 5.0, 'returns expected value' );

	t.end();
});

tape( 'the function returns a `NaN` if provided a `NaN` independent of `y`', function test( t ) {
	var v;

	v = cflipsignf( new Complex64( NaN, NaN ), 2.0 );
	t.strictEqual( isnanf( real( v ) ), true, 'returns expected value' );
	t.strictEqual( isnanf( imag( v ) ), true, 'returns expected value' );

	v = cflipsignf( new Complex64( NaN, NaN ), -2.0 );
	t.strictEqual( isnanf( real( v ) ), true, 'returns expected value' );
	t.strictEqual( isnanf( imag( v ) ), true, 'returns expected value' );

	v = cflipsignf( new Complex64( NaN, NaN ), NaN );
	t.strictEqual( isnanf( real( v ) ), true, 'returns expected value' );
	t.strictEqual( isnanf( imag( v ) ), true, 'returns expected value' );

	t.end();
});

tape( 'the function returns `+0` if provided `+0` and a positive `y`', function test( t ) {
	var v = cflipsignf( new Complex64( +0.0, +0.0 ), 4.0 );
	t.strictEqual( isPositiveZerof( real( v ) ), true, 'returns expected value' );
	t.strictEqual( isPositiveZerof( imag( v ) ), true, 'returns expected value' );
	t.end();
});

tape( 'the function returns `-0` if provided `-0` and a positive `y`', function test( t ) {
	var v = cflipsignf( new Complex64( -0.0, -0.0 ), 4.0 );
	t.strictEqual( isNegativeZerof( real( v ) ), true, 'returns expected value' );
	t.strictEqual( isNegativeZerof( imag( v ) ), true, 'returns expected value' );
	t.end();
});

tape( 'the function returns `+0` if provided `-0` and a negative `y`', function test( t ) {
	var v = cflipsignf( new Complex64( -0.0, -0.0 ), -4.0 );
	t.strictEqual( isPositiveZerof( real( v ) ), true, 'returns expected value' );
	t.strictEqual( isPositiveZerof( imag( v ) ), true, 'returns expected value' );
	t.end();
});

tape( 'the function returns `-0` if provided `+0` and a negative `y`', function test( t ) {
	var v = cflipsignf( new Complex64( +0.0, +0.0 ), -4.0 );
	t.strictEqual( isNegativeZerof( real( v ) ), true, 'returns expected value' );
	t.strictEqual( isNegativeZerof( imag( v ) ), true, 'returns expected value' );
	t.end();
});

tape( 'the function returns `+infinity` if provided `+infinity` and a positive `y`', function test( t ) {
	var v = cflipsignf( new Complex64( PINF, PINF ), 4.0 );
	t.strictEqual( real( v ), PINF, 'returns expected value' );
	t.strictEqual( imag( v ), PINF, 'returns expected value' );
	t.end();
});

tape( 'the function returns `-infinity` if provided `-infinity` and a positive `y`', function test( t ) {
	var v = cflipsignf( new Complex64( NINF, NINF ), 4.0 );
	t.strictEqual( real( v ), NINF, 'returns expected value' );
	t.strictEqual( imag( v ), NINF, 'returns expected value' );
	t.end();
});

tape( 'the function returns `+infinity` if provided `-infinity` and a negative `y`', function test( t ) {
	var v = cflipsignf( new Complex64( NINF, NINF ), -4.0 );
	t.strictEqual( real( v ), PINF, 'returns expected value' );
	t.strictEqual( imag( v ), PINF, 'returns expected value' );
	t.end();
});

tape( 'the function returns `-infinity` if provided `+infinity` and a negative `y`', function test( t ) {
	var v = cflipsignf( new Complex64( PINF, PINF ), -4.0 );
	t.strictEqual( real( v ), NINF, 'returns expected value' );
	t.strictEqual( imag( v ), NINF, 'returns expected value' );
	t.end();
});
