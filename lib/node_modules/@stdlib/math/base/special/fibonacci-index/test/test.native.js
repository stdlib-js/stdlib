/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var PINF = require( '@stdlib/constants/float64/pinf' );
var fibonacci = require( '@stdlib/math/base/special/fibonacci' );
var tryRequire = require( '@stdlib/utils/try-require' );


// VARIABLES //

var fibonacciIndex = tryRequire( resolve( __dirname, './../lib/native.js' ) );
var opts = {
	'skip': ( fibonacciIndex instanceof Error )
};


// TESTS //

tape( 'main export is a function', opts, function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof fibonacciIndex, 'function', 'main export is a function' );
	t.end();
});

tape( 'if provided `NaN`, the function returns `NaN`', opts, function test( t ) {
	var n = fibonacciIndex( NaN );
	t.strictEqual( isnan( n ), true, 'returns NaN when provided a NaN' );
	t.end();
});

tape( 'if provided `+infinity`, the function returns `NaN`', opts, function test( t ) {
	var n = fibonacciIndex( PINF );
	t.strictEqual( isnan( n ), true, 'returns NaN' );
	t.end();
});

tape( 'if provided a number less than or equal to 1, the function returns `NaN`', opts, function test( t ) {
	var n;
	var i;

	t.strictEqual( isnan( fibonacciIndex( -3.14 ) ), true, 'returns NaN' );

	for ( i = 1; i > -100; i-- ) {
		n = fibonacciIndex( i );
		t.strictEqual( isnan( n ), true, 'returns NaN when provided ' + i );
	}
	t.end();
});

tape( 'if provided a non-integer, the function returns `NaN`', opts, function test( t ) {
	var n = fibonacciIndex( 3.14 );
	t.strictEqual( isnan( n ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns the Fibonacci number index', opts, function test( t ) {
	var v;
	var n;
	var i;
	for ( i = 3; i < 79; i++ ) {
		v = fibonacci( i );
		n = fibonacciIndex( v );
		t.strictEqual( n, i, 'returns the Fibonacci number index for '+v );
	}
	t.end();
});
