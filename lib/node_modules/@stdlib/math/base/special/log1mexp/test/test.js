/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var NINF = require( '@stdlib/constants/math/float64-ninf' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var incrspace = require( '@stdlib/math/utils/incrspace' );
var abs = require( '@stdlib/math/base/special/abs' );
var exp = require( '@stdlib/math/base/special/exp' );
var expm1 = require( '@stdlib/math/base/special/expm1' );
var EPS = require( '@stdlib/constants/math/float64-eps' );
var ln = require( '@stdlib/math/base/special/ln' );
var log1p = require( '@stdlib/math/base/special/log1p' );
var log1mexp = require( './../lib' );


// FIXTURES //

var expected = require( './fixtures/r/expected.json' );


// VARIABLES //

var LN2 = ln( 2.0 );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof log1mexp, 'function', 'main export is a function' );
	t.end();
});

tape( 'if provided `NaN`, the function returns `NaN`', function test( t ) {
	var v = log1mexp( NaN );
	t.strictEqual( isnan( v ), true, 'returns NaN when provided a NaN' );
	t.end();
});

tape( 'if provided `0`, the function returns -infinity', function test( t ) {
	var v = log1mexp( 0.0 );
	t.strictEqual(v, NINF, 'returns -infinity');
	t.end();
});

tape( 'if `0 < x <= ln(2)`, the function returns `ln(-expm1(-x))`', function test( t ) {
	var values;
	var x;
	var y;
	var i;

	values = incrspace( 0.1, LN2, 0.1 );
	for ( i = 0; i < values.length; i++ ) {
		x = log1mexp( values[ i ] );
		y = ln( -expm1( -values[ i ] ));
		t.strictEqual( x, y, 'returns '+y+' when provided ' + values[ i ] );
	}
	t.end();
});

tape( 'if `x > ln(2)`, the function returns `log1p(-exp(-x))`', function test( t ) {
	var values;
	var x;
	var y;
	var i;

	values = incrspace( 33.4, 100, 0.2 );
	for ( i = 0; i < values.length; i++ ) {
		x = log1mexp( values[ i ] );
		y = log1p( -exp( -values[ i ] ) );
		t.strictEqual( x, y, 'returns '+y+' when provided ' + values[ i ] );
	}
	t.end();
});

tape( 'the function accurately computes the natural logarithm of 1 - exp(x)', function test( t ) {
	var values;
	var delta;
	var tol;
	var x;
	var y;
	var i;

	values = incrspace( 0.1, 100.0, 0.1 );
	for ( i = 0; i < values.length; i++ ) {
		x = log1mexp( values[ i ] );
		y = expected[ i ];
		if (x === expected[ i ]) {
			t.strictEqual( y, expected[ i ], 'returns '+x+' when provided ' + values[ i ]);
		} else {
			delta = abs( x - y );
			tol = 21.7 * EPS * abs( y );
			t.ok( delta <= tol, 'within tolerance. returns '+x+' when provided '+values[ i ]+'. expected: '+expected[ i ]+', Î”: '+delta+'.' );
		}
	}
	t.end();
});
