/**
* @license Apache-2.0
*
* Copyright (c) 2023 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isnan = require( '@stdlib/math/base/assert/is-nan' );
var isInteger = require( '@stdlib/math/base/assert/is-integer' );
var PINF = require( '@stdlib/constants/float64/pinf' );


// VARIABLES //

var MAX_FACTORIAL2 = 301;

/**
* Evaluates the double factorial of `n`.
*
* @param {number} n - input value
* @returns {number} factorial2
*
* @example
* var v = factorial2( 3 );
* // returns 3.0
*
* @example
* var v = factorial2( 4 );
* // returns 8.0
*
* @example
* var v = factorial2( 5 );
* // returns 15.0
*
* @example
* var v = factorial2( 301 );
* // returns Infinity
*
*/
function factorial2( n ) {
	var lastmult;
	var dfact = 1;
	var i = 0;

	if ( isnan( n ) ) {
		return NaN;
	}
	if ( isInteger( n ) ) {
		if ( n < 0 ) {
			return NaN;
		}
		if ( n > MAX_FACTORIAL2 ) {
			return PINF;
		}
	} else {
		return NaN;
	}
	if ( n === 0 || n === 1 ) { // zero or one
		return 1.0;
	}

	if ( n % 2 === 0 ) { // even input
		lastmult = 2.0;
	} else {
		lastmult = 3.0;
	}
	for ( i = n; i >= lastmult; i -= 2 ) {
		dfact *= i;
	}
	return dfact;
}


// EXPORTS //

module.exports = factorial2;
