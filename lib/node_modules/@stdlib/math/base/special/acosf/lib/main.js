/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The following copyright, license, and long comment were part of the original implementation available as part of [FreeBSD]{@link https://svnweb.freebsd.org/base/release/12.2.0/lib/msun/src/e_acosf.c?view=markup}. The implementation follows the original, but has been modified according to project conventions.
*
* ```text
* Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
*
* Developed at SunPro, a Sun Microsystems, Inc. business.
* Permission to use, copy, modify, and distribute this
* software is freely granted, provided that this notice
* is preserved.
* ```
*/

'use strict';

// MODULES //

var isnanf = require( '@stdlib/math/base/assert/is-nanf' );
var sqrtf = require( '@stdlib/math/base/special/sqrtf' );
var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );
var PIF = require( '@stdlib/constants/float32/pi' );
var absf = require( '@stdlib/math/base/special/absf' );
var polyp = require( './poly_p.js' );


// VARIABLES //

var QS1 = -7.0662963390e-01;
var PIO2_HI = 1.5707962513e+00;
var PIO2_LO = 7.5497894159e-08;


// MAIN //

/**
* Computes the arccosine of a single-precision floating-point number.
*
* @param {number} x - input value
* @returns {number} arccosine (in radians)
*
* @example
* var v = acosf( 1.0 );
* // returns 0.0
*
* @example
* var v = acosf( 0.707 );
* // returns ~0.7855
*
* @example
* var v = acosf( NaN );
* // returns NaN
*/
function acosf( x ) {
	var z;
	var p;
	var q;
	var r;
	var s;
	var c;
	var w;

	if ( isnanf( x ) ) {
		return NaN;
	}
	x = float64ToFloat32( x );
	if ( x < -1.0 || x > 1.0 ) {
		return NaN;
	}
	if ( x === 1.0 ) {
		return 0.0;
	}
	if ( x === -1.0 ) {
		return float64ToFloat32( PIF + float64ToFloat32( 2.0 * PIO2_LO ) );
	}
	if ( absf( x ) < 0.5 ) {
		z = float64ToFloat32( x * x );
		p = float64ToFloat32( z * polyp( z ) );
		q = float64ToFloat32( 1.0 + float64ToFloat32( z * QS1 ) );
		r = float64ToFloat32( p / q );
		return float64ToFloat32( PIO2_HI - float64ToFloat32( x - float64ToFloat32( PIO2_LO - float64ToFloat32( x * r ) ) ) ); // eslint-disable-line max-len
	}
	if ( x < -0.5 ) {
		z = float64ToFloat32( float64ToFloat32( 1.0 + x ) * 0.5 );
		p = float64ToFloat32( z * polyp( z ) );
		q = float64ToFloat32( 1.0 + float64ToFloat32( z * QS1 ) );
		s = sqrtf( z );
		r = float64ToFloat32( p / q );
		w = float64ToFloat32( float64ToFloat32( r * s ) - PIO2_LO );
		return float64ToFloat32( PIF - float64ToFloat32( 2.0 * float64ToFloat32( s + w ) ) ); // eslint-disable-line max-len
	}
	z = float64ToFloat32( float64ToFloat32( 1.0 - x ) * 0.5 );
	s = sqrtf( z );
	c = float64ToFloat32( ( float64ToFloat32( z - float64ToFloat32( s * s ) ) ) / float64ToFloat32( 2 * s ) ); // eslint-disable-line max-len
	p = float64ToFloat32( z * polyp( z ) );
	q = float64ToFloat32( 1.0 + float64ToFloat32( z * QS1 ) );
	r = float64ToFloat32( p / q );
	w = float64ToFloat32( float64ToFloat32( r * s ) + c );
	return float64ToFloat32( 2.0 * float64ToFloat32( s + w ) );
}


// EXPORTS //

module.exports = acosf;
