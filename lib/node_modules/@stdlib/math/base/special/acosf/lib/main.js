/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*
*
* ## Notice
*
* The original C code, long comment, copyright, license, and constants are from [Cephes]{@link http://www.netlib.org/cephes}. The implementation follows the original, but has been modified for JavaScript.
*
* ```text
* Copyright 1984, 1995, 2000 by Stephen L. Moshier
*
* Some software in this archive may be from the book _Methods and Programs for Mathematical Functions_ (Prentice-Hall or Simon & Schuster International, 1989) or from the Cephes Mathematical Library, a commercial product. In either event, it is copyrighted by the author. What you see here may be used freely but it comes with no support or guarantee.
*
* Stephen L. Moshier
* moshier@na-net.ornl.gov
* ```
*/

'use strict';

// MODULES //

var isnanf = require( '@stdlib/math/base/assert/is-nanf' );
var sqrtf = require( '@stdlib/math/base/special/sqrtf' );
var asinf = require( '@stdlib/math/base/special/asinf' );
var float64ToFloat32 = require( '@stdlib/number/float64/base/to-float32' );
var PIF = require( '@stdlib/constants/float32/pi' );
var PI02F = require( '@stdlib/constants/float32/half-pi' );


// MAIN //

/**
* Computes the arccosine of a single-precision floating-point number.
*
* ## Method
*
* -   Analytically,
*
*     ```tex
*     \operatorname{acosf}(x) = \frac{\pi}{2} - \operatorname{asinf}(x)
*     ```
*
*     However, if \\(\|x\|\\) is near \\(1\\), there is cancellation error in subtracting \\(\opertorname{asinf}(x)\\) from \\(\pi/2\\). Hence, if \\(x < -0.5\\),
*
*     ```tex
*     \operatorname{acosf}(x) = \pi - 2.0 \cdot \operatorname{asinf}(\sqrt{(1+x)/2})
*     ```
*
*     or, if \\(x > +0.5\\),
*
*     ```tex
*     \operatorname{acosf}(x) = 2.0 \cdot \operatorname{asinf}( \sqrt{(1-x)/2} )}
*     ```
*
* ## Notes
*
* -   Relative error:
*
*     | arithmetic | domain | # trials | peak    | rms     |
*     |:-----------|:-------|:---------|:--------|:--------|
*     | IEEE       | -1, 1  | 10^5     | 1.4e-7  | 4.2e-8  |
*
* @param {number} x - input value
* @returns {number} arccosine (in radians)
*
* @example
* var v = acosf( 1.0 );
* // returns 0.0
*
* @example
* var v = acosf( 0.707 );
* // returns ~0.7855
*
* @example
* var v = acosf( NaN );
* // returns NaN
*/
function acosf( x ) {
	if ( isnanf( x ) ) {
		return NaN;
	}
	x = float64ToFloat32( x );
	if ( x < -1.0 || x > 1.0 ) {
		return NaN;
	}
	if ( x < -0.5 ) {
		return float64ToFloat32( PIF - float64ToFloat32( 2.0 * asinf( sqrtf( float64ToFloat32( 0.5 * float64ToFloat32( 1.0 + x ) ) ) ) ) ); // eslint-disable-line max-len
	}
	if ( x > 0.5 ) {
		return float64ToFloat32( 2.0 * asinf( sqrtf( float64ToFloat32( 0.5 * float64ToFloat32( 1.0 - x ) ) ) ) ); // eslint-disable-line max-len
	}
	return float64ToFloat32( PI02F - asinf( x ) );
}


// EXPORTS //

module.exports = acosf;
