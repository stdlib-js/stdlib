#!/usr/bin/env julia

import JSON

"""
    gen( x, name )

Generate fixture data and write to file.

# Arguments

* `x`: domain
* `name::AbstractString`: output filename

# Examples

``` julia
julia> x = linspace( -1000.0, 1000.0, 2001 );
julia> gen( x, \"data.json\" );
```
"""
function gen( x, name )
	y = tan( x );

	# Store data to be written to file as a collection:
	data = Dict([
		("x", x),
		("expected", y)
	]);

	# Based on the script directory, create an output filepath:
	filepath = joinpath( dir, name );

	# Write the data to the output filepath as JSON:
	outfile = open( filepath, "w" );
	write( outfile, JSON.json(data) );
	close( outfile );
end

# Get the filename:
file = @__FILE__;

# Extract the directory in which this file resides:
dir = dirname( file );

# Subnormal values:
x = linspace( 1.0e-309, 1.0e-324, 500 );
gen( x, "subnormal.json" );

# Negative tiny values:
x = linspace( -1.0e-300, -1.0e-308, 500 );
gen( x, "tiny_negative.json" );

# Positive tiny values:
x = linspace( 1.0e-300, 1.0e-308, 500 );
gen( x, "tiny_positive.json" );

# Small(er) values:
x = linspace( -pi, pi, 2000 );
gen( x, "smaller.json" );

# Negative small values:
x = linspace( -4.0*pi, -pi, 1000 );
gen( x, "small_negative.json" );

# Positive small values:
x = linspace( pi, 4.0*pi, 1000 );
gen( x, "small_positive.json" );

# Negative medium values:
x = linspace( -4.0*pi, 12.0*pi, 1000 );
gen( x, "medium_negative.json" );

# Positive medium values:
x = linspace( 4.0*pi, 12.0*pi, 1000 );
gen( x, "medium_positive.json" );

# Large negative values:
x = linspace( -12.0*pi, -256.0*pi, 1000 );
gen( x, "large_negative.json" );

# Large positive values:
x = linspace( 12.0*pi, 256.0*pi, 1000 );
gen( x, "large_positive.json" );

# Very large negative values:
x = linspace( -2.0^20*(pi/2.0), -2.0^60*(pi/2.0), 500 );
gen( x, "very_large_negative.json" );

# Very large positive values:
x = linspace( 2.0^20*(pi/2.0), 2.0^60*(pi/2.0), 500 );
gen( x, "very_large_positive.json" );

# Huge negative values:
x = linspace( -2.0^60*(pi/2.0), -2.0^1000*(pi/2.0), 1000 )
gen( x, "huge_negative.json" );

# Huge positive values:
x = linspace( 2.0^20*(pi/2.0), 2.0^60*(pi/2.0), 1000 )
gen( x, "huge_positive.json" );
