/**
* @license Apache-2.0
*
* Copyright (c) 2022 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var ellipj = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof ellipj, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns `[NaN, NaN, NaN]` if provided `NaN`', function test( t ) {
	var v = ellipj( NaN );
	t.equal( v[0], NaN, 'returns NaN' );
	t.equal( v[1], NaN, 'returns NaN' );
	t.equal( v[2], NaN, 'returns NaN' );
	t.end();
});

tape( 'the function returns `[NaN, NaN, NaN]` if provided `+infinity`', function test( t ) {
	var v = ellipj( Number.POSITIVE_INFINITY );
	t.equal( v[0], NaN, 'returns NaN' );
	t.equal( v[1], NaN, 'returns NaN' );
	t.equal( v[2], NaN, 'returns NaN' );
	t.end();
});

tape( 'the function returns `[NaN, NaN, NaN]` if provided `-infinity`', function test( t ) {
	var v = ellipj( Number.NEGATIVE_INFINITY );
	t.equal( v[0], NaN, 'returns NaN' );
	t.equal( v[1], NaN, 'returns NaN' );
	t.equal( v[2], NaN, 'returns NaN' );
	t.end();
});

tape( 'the function returns `[NaN, NaN, NaN]` if provided `1`', function test( t ) {
	var v = ellipj( 1 );
	t.equal( v[0], NaN, 'returns NaN' );
	t.equal( v[1], NaN, 'returns NaN' );
	t.equal( v[2], NaN, 'returns NaN' );
	t.end();
});

tape( 'the function returns `[NaN, NaN, NaN]` if provided `-1`', function test( t ) {
	var v = ellipj( -1 );
	t.equal( v[0], NaN, 'returns NaN' );
	t.equal( v[1], NaN, 'returns NaN' );
	t.equal( v[2], NaN, 'returns NaN' );
	t.end();
});

tape( 'the function returns `[NaN, NaN, NaN]` if provided `m > 1`', function test( t ) {
	var v = ellipj( 1.5 );
	t.equal( v[0], NaN, 'returns NaN' );
	t.equal( v[1], NaN, 'returns NaN' );
	t.equal( v[2], NaN, 'returns NaN' );
	t.end();
});

tape( 'the function returns `[NaN, NaN, NaN]` if provided `m < -1`', function test( t ) {
	var v = ellipj( -1.5 );
	t.equal( v[0], NaN, 'returns NaN' );
	t.equal( v[1], NaN, 'returns NaN' );
	t.equal( v[2], NaN, 'returns NaN' );
	t.end();
});

tape( 'the function returns `[NaN, NaN, NaN]` if provided `m = 1` and `n < 0`', function test( t ) {
	var v = ellipj( 1, -1 );
	t.equal( v[0], NaN, 'returns NaN' );
	t.equal( v[1], NaN, 'returns NaN' );
	t.equal( v[2], NaN
