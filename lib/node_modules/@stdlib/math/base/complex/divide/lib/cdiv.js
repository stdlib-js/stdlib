'use strict';

// MODULES //

var FLOAT64_BIGGEST = require( '@stdlib/math/constants/float64-max' );
var FLOAT64_SMALLEST = require( '@stdlib/math/constants/float64-smallest-normal' );
var EPS = require( '@stdlib/math/constants/float64-eps' );
var abs = require( '@stdlib/math/base/special/abs' );
var max = require( '@stdlib/math/base/special/max' );
var robustInternal = require( './robust_internal.js' );


// VARIABLES //

var LARGE_THRESHOLD = FLOAT64_BIGGEST * 0.5;
var SMALL_THRESHOLD = FLOAT64_SMALLEST * ( 2.0 / EPS );
var RECIP_EPS_SQR = 2.0 / ( EPS * EPS );


// MAIN //

/**
* Divides two complex numbers, writing the result into an output array.
*
* @private
* @param {(Array|TypedArray|Object)} [out] - optional output array
* @param {number} re1 - real component
* @param {number} im1 - imaginary component
* @param {number} re2 - real component
* @param {number} im2 - imaginary component
* @returns {(Array|TypedArray|Object)} real and imaginary components
*/
function cdiv( out, re1, im1, re2, im2 ) {
	var ab;
	var cd;
	var s;

	ab = max(abs(re1), abs(im1));
	cd = max(abs(re2), abs(im2));
	s = 1.0;

	if ( ab >= LARGE_THRESHOLD ) {
		re1 *= 0.5;
		im1 *= 0.5;
		s *= 2.0;
	} else if ( ab <= SMALL_THRESHOLD ) {
		re1 *= RECIP_EPS_SQR;
		im1 *= RECIP_EPS_SQR;
		s /= RECIP_EPS_SQR;
	}
	if ( cd >= LARGE_THRESHOLD ) {
		re2 *= 0.5;
		im2 *= 0.5;
		s *= 0.5;
	} else if ( cd <= SMALL_THRESHOLD ) {
		re2 *= RECIP_EPS_SQR;
		im2 *= RECIP_EPS_SQR;
		s *= RECIP_EPS_SQR;
	}
	if ( abs( im2 ) <= abs( re2 ) ) {
		robustInternal( out, re1, im1, re2, im2 );
	} else {
		robustInternal( out, im1, re1, im2, re2 );
		out[1] *= -1;
	}
	out[0] *= s;
	out[1] *= s;
	return out;
} // end FUNCTION cdiv()


// EXPORTS //

module.exports = cdiv;
