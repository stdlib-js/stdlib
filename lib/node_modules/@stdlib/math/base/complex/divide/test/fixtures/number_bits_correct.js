'use strict';

// MODULES //

var toBinaryString = require( '@stdlib/math/base/utils/float64-to-binary-string' );


// MAIN //

/**
* Counts the number of most significant bits that match in the binary representation of two 64-bit floating point numbers.
*
* TODO: revisit once ULP distance fcn is written
*
* @param {Number} a - first number
* @param {Number} b - second number
* @returns {Array} a three-element array containing the number of bits correct in the sign, exponent, and mantissa, respectively
*/
function numberBitsCorrect( a, b ) {
	var exponentBits;
	var mantissaBits;
	var signBits = 0;
	var ba;
	var bb;

	ba = toBinaryString( a );
	bb = toBinaryString( b );

	signBits = ba[0] === bb[0] ? 1 : 0;

	for ( exponentBits = 1; exponentBits < 12; exponentBits++ ) {
		if ( ba[exponentBits] !== bb[exponentBits] ) {
			break;
		}
	}

	for ( mantissaBits = 12; mantissaBits < 64; mantissaBits++ ) {
		if ( ba[mantissaBits] !== bb[mantissaBits] ) {
			break;
		}
	}

	return [ signBits, exponentBits - 1, mantissaBits - 12 ];
} // end FUNCTION numberBitsCorrect()


// EXPORTS //

module.exports = numberBitsCorrect;
