'use strict';

// MODULES //

var tape = require( 'tape' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var cdiv = require( './../lib' );

// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof cdiv, 'function', 'main export is a function' );
	t.end();
});

function testCdiv( a, b, c, d, e, f, label ) {
	tape(label, function test( t ) {
		var expected;
		var v;

		v = cdiv( a, b, c, d );
		expected = [ e, f ];

		t.deepEqual( v, expected, '( ' + a + ' + ' + b + 'j ) / ( ' + c + ' + ' + d + 'j ) == ' + e + ' + ' + f + 'j' );

		t.end();
	});
}

testCdiv( -13.0, -1.0, -2.0, 1.0, 5.0, 3.0, 'simple division problem' );
testCdiv( 1e308, 5e307, 1.0, 0.5, 1e308, 0, 'ab >= LARGE_THRESHOLD' );
testCdiv( 1, 0.5, 1e308, 5e307, 1e-308, 0, 'cd >= LARGE_THRESHOLD' );
testCdiv( 1e-304, 2e-304, 1, 2, 1e-304, 0, 'ab <= SMALL_THRESHOLD');
testCdiv( 1, 2, 1e-304, 2e-304, 1e+304, 0, 'cd <= SMALL_THRESHOLD');
testCdiv( 2, 4, 0, 2, 2, -1, 'r === 0 branch of internalCompreal' );
testCdiv( 1e-180, 1e-180, 1, 1e-180, 1e-180, 1e-180, 'br === 0 branch of internalCompreal' );

tape( 'if a real or imaginary component is `NaN`, all components are `NaN`', function test( t ) {
	var v;

	v = cdiv( NaN, 3.0, -2.0, 1.0 );
	t.strictEqual( isnan( v[ 0 ] ), true, 'returns NaN' );
	t.strictEqual( isnan( v[ 1 ] ), true, 'returns NaN' );

	v = cdiv( 5.0, NaN, -2.0, 1.0 );
	t.strictEqual( isnan( v[ 0 ] ), true, 'returns NaN' );
	t.strictEqual( isnan( v[ 1 ] ), true, 'returns NaN' );

	v = cdiv( 5.0, 3.0, NaN, 1.0 );
	t.strictEqual( isnan( v[ 0 ] ), true, 'returns NaN' );
	t.strictEqual( isnan( v[ 1 ] ), true, 'returns NaN' );

	v = cdiv( 5.0, 3.0, -2.0, NaN );
	t.strictEqual( isnan( v[ 0 ] ), true, 'returns NaN' );
	t.strictEqual( isnan( v[ 1 ] ), true, 'returns NaN' );

	v = cdiv( 5.0, 3.0, NaN, NaN );
	t.strictEqual( isnan( v[ 0 ] ), true, 'returns NaN' );
	t.strictEqual( isnan( v[ 1 ] ), true, 'returns NaN' );

	v = cdiv( NaN, NaN, -2.0, 1.0 );
	t.strictEqual( isnan( v[ 0 ] ), true, 'returns NaN' );
	t.strictEqual( isnan( v[ 1 ] ), true, 'returns NaN' );

	v = cdiv( NaN, NaN, NaN, NaN );
	t.strictEqual( isnan( v[ 0 ] ), true, 'returns NaN' );
	t.strictEqual( isnan( v[ 1 ] ), true, 'returns NaN' );

	t.end();
});
