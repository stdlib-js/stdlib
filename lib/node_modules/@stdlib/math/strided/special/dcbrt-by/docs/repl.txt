
{{alias}}( N, x, sx, y, sy, clbk[, thisArg] )
    Computes the cube root of each element retrieved from an input double-
    precision floating-point strided array via a callback function and assigns
    each result to an element in an output double-precision floating-point
    strided array.

    The `N` and stride parameters determine which strided array elements are
    accessed at runtime.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    The callback function is provided four arguments:

    - value: array element.
    - idx: iteration index.
    - indices: strided array indices (offset + idx*stride).
    - arrays: input and output arrays.

    If the callback function does not return any value (or equivalently,
    explicitly returns `undefined`), the value is ignored.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    x: Float64Array
        Input array.

    sx: integer
        Index increment for `x`.

    y: Float64Array
        Destination array.

    sy: integer
        Index increment for `y`.

    clbk: Function
        Callback function.

    thisArg: any (optional)
        Callback execution context.

    Returns
    -------
    y: Float64Array
        Destination array.

    Examples
    --------
    // Standard usage:
    > var x = new {{alias:@stdlib/array/float64}}( [ 1.0, 9.0, -27.0, 81.0 ] );
    > var y = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > function clbk( v ) { return v; };
    > {{alias}}( x.length, x, 1, y, 1, clbk )
    <Float64Array>[ 1.0, ~2.08, -3.0, ~4.327 ]

    // Using `N` and stride parameters:
    > y = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > {{alias}}( 2, x, 2, y, -1, clbk )
    <Float64Array>[ -3.0, 1.0, 0.0, 0.0 ]

    // Using view offsets:
    > var x0 = new {{alias:@stdlib/array/float64}}( [ 1.0, 9.0, -27.0, 81.0 ] );
    > var y0 = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > var x1 = new {{alias:@stdlib/array/float64}}( x0.buffer, x0.BYTES_PER_ELEMENT*1 );
    > var y1 = new {{alias:@stdlib/array/float64}}( y0.buffer, y0.BYTES_PER_ELEMENT*2 );
    > {{alias}}( 2, x1, -2, y1, 1, clbk )
    <Float64Array>[ ~4.327, ~2.08 ]
    > y0
    <Float64Array>[ 0.0, 0.0, ~4.327, ~2.08 ]


{{alias}}.ndarray( N, x, sx, ox, y, sy, oy, clbk[, thisArg] )
    Computes the cube root of each element retrieved from an input double-
    precision floating-point strided array via a callback function and assigns
    each result to an element in an output double-precision floating-point
    strided array using alternative indexing semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing semantics based on starting
    indices.

    The callback function is provided four arguments:

    - value: array element.
    - idx: iteration index.
    - indices: strided array indices (offset + idx*stride).
    - arrays: input and output arrays.

    If the callback function does not return any value (or equivalently,
    explicitly returns `undefined`), the value is ignored.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    x: Float64Array
        Input array.

    sx: integer
        Index increment for `x`.

    ox: integer
        Starting index for `x`.

    y: Float64Array
        Destination array.

    sy: integer
        Index increment for `y`.

    oy: integer
        Starting index for `y`.

    clbk: Function
        Callback function.

    thisArg: any (optional)
        Callback execution context.

    Returns
    -------
    y: Float64Array
        Destination array.

    Examples
    --------
    // Standard usage:
    > var x = new {{alias:@stdlib/array/float64}}( [ 1.0, 9.0, -27.0, 81.0 ] );
    > var y = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > function clbk( v ) { return v; };
    > {{alias}}.ndarray( x.length, x, 1, 0, y, 1, 0, clbk )
    <Float64Array>[ 1.0, ~2.08, -3.0, ~4.327 ]

    // Advanced indexing:
    > x = new {{alias:@stdlib/array/float64}}( [ 1.0, 9.0, -27.0, 81.0 ] );
    > y = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > {{alias}}.ndarray( 2, x, 2, 1, y, -1, y.length-1, clbk )
    <Float64Array>[ 0.0, 0.0, ~4.327, ~2.08 ]

    See Also
    --------

