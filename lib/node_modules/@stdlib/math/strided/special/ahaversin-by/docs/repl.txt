
{{alias}}( N, x, sx, y, sy, clbk[, thisArg] )
    Computes the inverse half-value versed sine of each element retrieved from
    an input strided array `x` via a callback function and assigns each result
    to an element in an output strided array `y`.

    The `N` and stride parameters determine which elements in `x` and `y` are
    accessed at runtime.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    The callback function is provided six arguments:

    - value: array element
    - idx: iteration index
    - xi: strided index (offsetX + idx*sx)
    - yi: strided index (offsetY + idx*sy)
    - x: the input array
    - y: the destination array

    If the callback function does not return any value (or equivalently,
    explicitly returns `undefined`), the value is ignored.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    x: Array|TypedArray|Object
        Input array/collection. If provided an object, the object must be array-
        like (excluding strings and functions).

    sx: integer
        Index increment for `x`.

    y: Array|TypedArray|Object
        Destination array/collection. If provided an object, the object must be
        array-like (excluding strings and functions).

    sy: integer
        Index increment for `y`.

    clbk: Function
        Callback function.

    thisArg: any (optional)
        Callback execution context.

    Returns
    -------
    y: Array|TypedArray|Object
        Destination array/collection.

    Examples
    --------
    // Standard usage:
    > var x = [ 0.0, 0.5, 1.0, 0.25 ];
    > var y = [ 0.0, 0.0, 0.0, 0.0 ];
    > function clbk( v ) { return v; };
    > {{alias}}( x.length, x, 1, y, 1, clbk )
    [ 0.0, ~1.571, ~3.142, ~1.047 ]

    // Using `N` and stride parameters:
    > y = [ 0.0, 0.0, 0.0, 0.0 ];
    > {{alias}}( 2, x, 2, y, -1, clbk )
    [ ~3.142, 0.0, 0.0, 0.0 ]

    // Using view offsets:
    > var x0 = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.5, 1.0, 0.25 ] );
    > var y0 = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > var x1 = new {{alias:@stdlib/array/float64}}( x0.buffer, x0.BYTES_PER_ELEMENT*1 );
    > var y1 = new {{alias:@stdlib/array/float64}}( y0.buffer, y0.BYTES_PER_ELEMENT*2 );
    > {{alias}}( 2, x1, -2, y1, 1, clbk )
    <Float64Array>[ ~1.047, ~1.571 ]
    > y0
    <Float64Array>[ 0.0, 0.0, ~1.047, ~1.571 ]


{{alias}}.ndarray( N, x, sx, ox, y, sy, oy, clbk[, thisArg] )
    Computes the inverse half-value versed sine of each element retrieved from
    an input strided array `x` via a callback function and assigns each result
    to an element in an output strided array `y` using alternative indexing
    semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing semantics based on starting
    indices.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    x: Array|TypedArray|Object
        Input array/collection. If provided an object, the object must be array-
        like (excluding strings and functions).

    sx: integer
        Index increment for `x`.

    ox: integer
        Starting index for `x`.

    y: Array|TypedArray|Object
        Destination array/collection. If provided an object, the object must be
        array-like (excluding strings and functions).

    sy: integer
        Index increment for `y`.

    oy: integer
        Starting index for `y`.

    clbk: Function
        Callback function.

    thisArg: any (optional)
        Callback execution context.

    Returns
    -------
    y: Array|TypedArray|Object
        Destination array/collection.

    Examples
    --------
    // Standard usage:
    > var x = [ 0.0, 0.5, 1.0, 0.25 ];
    > var y = [ 0.0, 0.0, 0.0, 0.0 ];
    > function clbk( v ) { return v; };
    > {{alias}}.ndarray( x.length, x, 1, 0, y, 1, 0, clbk )
    [ 0.0, ~1.571, ~3.142, ~1.047 ]

    // Advanced indexing:
    > x = [ 0.0, 0.5, 1.0, 0.25 ];
    > y = [ 0.0, 0.0, 0.0, 0.0 ];
    > {{alias}}.ndarray( 2, x, 2, 1, y, -1, y.length-1, clbk )
    [ 0.0, 0.0, ~1.047, ~1.571 ]

    See Also
    --------

