
{{alias}}( N, dtypeX, x, strideX, dtypeY, y, strideY )
    Computes the cube root of each element in a strided array `x` and assigns
    the results to elements in a strided array `y`.

    The `N` and `stride` parameters determine which elements in `x` and `y` are
    accessed at runtime.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    dtypeX: any
        Data type for `x`.

    x: ArrayLikeObject
        Input array.

    strideX: integer
        Index increment for `x`.

    dtypeY: any
        Data type for `y`.

    y: ArrayLikeObject
        Destination array.

    strideY: integer
        Index increment for `y`.

    Returns
    -------
    y: ArrayLikeObject
        Input array `y`.

    Examples
    --------
    // Standard usage:
    > var x = new {{alias:@stdlib/array/float64}}( [ 0.0, 1.0, 8.0, 27.0 ] );
    > var y = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > {{alias}}( x.length, 'float64', x, 1, 'float64', y, 1 )
    <Float64Array>[ 0.0, 1.0, 2.0, 3.0 ]

    // Using `N` and `stride` parameters:
    > y = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > {{alias}}( 2, 'float64', x, 2, 'float64', y, -1 )
    <Float64Array>[ 2.0, 0.0, 0.0, 0.0 ]

    // Using view offsets:
    > var x0 = new {{alias:@stdlib/array/float64}}( [ 0.0, 1.0, 8.0, 27.0 ] );
    > var y0 = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > var x1 = new {{alias:@stdlib/array/float64}}( x0.buffer, x0.BYTES_PER_ELEMENT*1 );
    > var y1 = new {{alias:@stdlib/array/float64}}( y0.buffer, y0.BYTES_PER_ELEMENT*2 );
    > {{alias}}( 2, 'float64', x1, -2, 'float64', y1, 1 )
    <Float64Array>[ 3.0, 1.0 ]
    > y0
    <Float64Array>[ 0.0, 0.0, 3.0, 1.0 ]


{{alias}}.ndarray( N, dtypeX, x, strideX, offsetX, dtypeY, y, strideY, offsetY )
    Computes the cube root of each element in a strided array `x` and assigns
    the results to elements in a strided array `y` using alternative indexing
    semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the `offsetX` and `offsetY` parameters support indexing semantics
    based on starting indices.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    dtypeX: any
        Data type for `x`.

    x: ArrayLikeObject
        Input array.

    strideX: integer
        Index increment for `x`.

    offsetX: integer
        Starting index for `x`.

    dtypeY: any
        Data type for `y`.

    y: ArrayLikeObject
        Destination array.

    strideY: integer
        Index increment for `y`.

    offsetY: integer
        Starting index for `y`.

    Returns
    -------
    y: ArrayLikeObject
        Input array `y`.

    Examples
    --------
    // Standard usage:
    > var x = new {{alias:@stdlib/array/float64}}( [ 0.0, 1.0, 8.0, 27.0 ] );
    > var y = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > {{alias}}.ndarray( x.length, 'float64', x, 1, 0, 'float64', y, 1, 0 )
    <Float64Array>[ 0.0, 1.0, 2.0, 3.0 ]

    // Advanced indexing:
    > x = new {{alias:@stdlib/array/float64}}( [ 0.0, 1.0, 8.0, 27.0 ] );
    > y = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > {{alias}}.ndarray( 2, 'float64', x, 2, 1, 'float64', y, -1, y.length-1 )
    <Float64Array>[ 0.0, 0.0, 3.0, 1.0 ]

    See Also
    --------

