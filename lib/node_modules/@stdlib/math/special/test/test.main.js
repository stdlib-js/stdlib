/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var fibonacciIndex = require( './../lib/main.js' );

// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof fibonacciIndex, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns the index of the largest Fibonacci number less than or equal to the input value', function test( t ) {
	t.strictEqual( fibonacciIndex( 0 ), 0, 'returns 0' );
	t.strictEqual( fibonacciIndex( 1 ), 2, 'returns 2' );
	t.strictEqual( fibonacciIndex( 2 ), 3, 'returns 3' );
	t.strictEqual( fibonacciIndex( 21 ), 8, 'returns 8' );
	t.strictEqual( fibonacciIndex( 144 ), 12, 'returns 12' );
	t.end();
});

tape( 'the function returns NaN if provided a negative number', function test( t ) {
	t.strictEqual( isNaN( fibonacciIndex( -5 ) ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns NaN if provided NaN', function test( t ) {
	t.strictEqual( isNaN( fibonacciIndex( NaN ) ), true, 'returns NaN' );
	t.end();
});

tape( 'the function returns NaN if provided an argument which is not a number', function test( t ) {
	t.strictEqual( isNaN( fibonacciIndex( '5' ) ), true, 'returns NaN' );
	t.strictEqual( isNaN( fibonacciIndex( null ) ), true, 'returns NaN' );
	t.strictEqual( isNaN( fibonacciIndex( void 0 ) ), true, 'returns NaN' );
	t.strictEqual( isNaN( fibonacciIndex( true ) ), true, 'returns NaN' );
	t.strictEqual( isNaN( fibonacciIndex( false ) ), true, 'returns NaN' );
	t.strictEqual( isNaN( fibonacciIndex( {} ) ), true, 'returns NaN' );
	t.strictEqual( isNaN( fibonacciIndex( [] ) ), true, 'returns NaN' );
	t.strictEqual( isNaN( fibonacciIndex( function noop() {} ) ), true, 'returns NaN' );
	t.end();
});
