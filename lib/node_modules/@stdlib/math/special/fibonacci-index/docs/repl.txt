{{alias}}( x[, options] )
    Computes the Fibonacci number.

    If provided a number, the function returns the Fibonacci number corresponding to that index.

    If provided an ndarray or array-like object, the function performs element-wise computation.

    If provided an array-like object, the function returns an array-like object
    having the same length and data type as `x`.

    If provided an ndarray, the function returns an ndarray having the same
    shape and data type as `x`.

    Parameters
    ----------
    x: ndarray|ArrayLikeObject|number
        Input value (index).

    options: Object (optional)
        Options.

    options.order: string (optional)
        Output array order (either row-major (C-style) or column-major (Fortran-
        style)). Only applicable when the input array is an ndarray. By default,
        the output array order is inferred from the input array.

    options.dtype: string (optional)
        Output array data type. Only applicable when the input array is either
        an ndarray or array-like object. By default, the output array data type
        is inferred from the input array.

    Returns
    -------
    y: ndarray|ArrayLikeObject|number
        Results.

    Examples
    --------
    // Provide a number:
    > var y = {{alias}}( 5 )
    5

    // Provide an array-like object:
    > var x = new {{alias:@stdlib/array/float64}}( [ 0, 1, 2, 3, 4 ] );
    > y = {{alias}}( x )
    <Float64Array>[ 0, 1, 1, 2, 3 ]

    > x = [ 0, 1, 2, 3, 4 ];
    > y = {{alias}}( x )
    [ 0, 1, 1, 2, 3 ]

    // Provide an ndarray:
    > x = {{alias:@stdlib/ndarray/array}}( [ [ 0, 1 ], [ 2, 3 ] ] );
    > y = {{alias}}( x )
    <ndarray>
    > y.get( 0, 1 )
    1

{{alias}}.assign( x, y )
    Computes the Fibonacci number and assigns results to a provided output array.

    Parameters
    ----------
    x: ndarray|ArrayLikeObject
        Input array.

    y: ndarray|ArrayLikeObject
        Output array. Must be the same data "kind" (i.e., ndarray or array-like
        object) as the input array.

    Returns
    -------
    y: ndarray|ArrayLikeObject
        Output array.

    Examples
    --------
    // Provide an array-like object:
    > var x = new {{alias:@stdlib/array/float64}}( [ 0, 1, 2, 3, 4 ] );
    > var y = new {{alias:@stdlib/array/float64}}( x.length );
    > var out = {{alias}}.assign( x, y )
    <Float64Array>[ 0, 1, 1, 2, 3 ]
    > var bool = ( out === y )
    true

    > x = [ 0, 1, 2, 3, 4 ];
    > y = [ 0, 0, 0, 0, 0 ];
    > out = {{alias}}.assign( x, y )
    [ 0, 1, 1, 2, 3 ]
    > bool = ( out === y )
    true

    // Provide an ndarray:
    > x = {{alias:@stdlib/ndarray/array}}( [ [ 0, 1 ], [ 2, 3 ] ] );
    > y = {{alias:@stdlib/ndarray/array}}( [ [ 0, 0 ], [ 0, 0 ] ] );
    > out = {{alias}}.assign( x, y )
    <ndarray>
    > out.get( 0, 1 )
    1
    > bool = ( out === y )
    true

    See Also
    --------
