/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var ffi = require( 'ffi-napi' );
var path = require( 'path' );

// Load native library
var libraryPath = path.join( __dirname, 'native', 'libfibonacci' );
var native = ffi.Library( libraryPath, {
    'fibonacci_index': [ 'int32', [ 'double' ] ]
});

// MAIN //

/**
* Computes the index of the largest Fibonacci number less than or equal to a given value using a native implementation.
*
* @name fibonacciIndexNative
* @type {Function}
* @param {number} x - input value
* @returns {number} index of the largest Fibonacci number less than or equal to `x`
* @throws {Error} if unable to compute the index
*
* @example
* var idx = fibonacciIndexNative( 13 );
* // returns 7
*/
function fibonacciIndexNative( x ) {
    if ( typeof x !== 'number' ) {
        throw new TypeError( 'Input must be a number.' );
    }
    var result = native.fibonacci_index( x );
    if ( result === -1 ) {
        throw new Error( 'Failed to compute Fibonacci index.' );
    }
    return result;
}

// EXPORTS //

module.exports = fibonacciIndexNative;
