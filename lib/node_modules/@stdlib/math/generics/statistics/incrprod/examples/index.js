'use strict';

var ldexp = require( '@stdlib/math/base/special/ldexp' );
var randu = require( '@stdlib/math/base/random/randu' );
var incrprod = require( './../lib' );

var accumulator;
var prod;
var v;
var i;

// Initialize an accumulator:
accumulator = incrprod();

// For each simulated value, update the product
console.log( '\nValue\tProduct\n' );
for ( i = 0; i < 100; i++ ) {
	v = randu() * 100.0;
	prod = accumulator( v );
	console.log( '%d\t%d', v.toFixed( 4 ), prod.toFixed( 4 ) );
}
console.log( '\nFinal product: %d\n', accumulator() );
console.log( '\nTesting overflows\n\n' );

// Create doubles of huge magnitude
var x = ldexp( 0.5, 1000 );
// returns 5.357543035931337e+300

var y = ldexp( 0.1, 1000 );
// returns 1.0715086071862674e+300

// The number z on the other hand is practically zero
var z = ldexp( 0.2, -1000 );
// returns 1.8665272370064379e-302

accumulator = incrprod();

prod = accumulator( x );
// returns 5.357543035931337e+300

prod = accumulator( y );
// returns Infinity

prod = accumulator( z );
// returns 1.0715086071862675e+299

console.log( '\nTesting underflows\n\n' );

// Create doubles of tiny magnitude
x = ldexp( 0.5, -1000 );
// returns 4.6663180925160944e-302

y = ldexp( 0.1, -1000 );
// returns 9.332636185032189e-303

// The number z on the other hand is very large
z = ldexp( 0.2, 1000 );
// returns 2.1430172143725348e+300

accumulator = incrprod();

prod = accumulator( x );
// returns 4.6663180925160944e-302

prod = accumulator( y );
// returns 0

prod = accumulator( z );
// returns 9.33263618503219e-304
