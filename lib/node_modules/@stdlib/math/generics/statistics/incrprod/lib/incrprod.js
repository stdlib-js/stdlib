'use strict';

var frexp = require( '@stdlib/math/base/special/frexp' );
var ldexp = require( '@stdlib/math/base/special/ldexp' );

/**
* Returns an accumulator function which incrementally computes a product.
*
* @returns {Function} accumulator function
*
* @example
* var accumulator = incrprod();
*/
function incrprod() {
	var product = 1.0;

	// Initial product is 1.0, which may be split into its fractional and exponent parts (0.5 x 2.0**1 = 1.0):
	var fraction = 0.5;
	var exponent = 1.0;

	return accumulator;

	/**
	* If provided a value, the accumulator function returns an updated product. If not provided a value, the accumulator function returns the current product.
	*
	* @param {number} [x] - new value
	* @returns {number} product
	*
	* @example
	* var product = accumulator();
	* // returns 1.0
	*
	* product = accumulator( 2.0 );
	* // returns 2.0
	*
	* product = accumulator( -5.0 );
	* // returns -10.0
	*
	* product = accumulator();
	* // returns -10.0
	*/
	function accumulator( x ) {
		var parts;
		if ( arguments.length === 0 ) {
			return product;
		}

		// Splitting incoming value into a normalized fraction and exponent
		parts = frexp( x );

		// Update the fraction
		fraction *= parts[ 0 ];

		// Update the exponent
		exponent += parts[ 1 ];

		// Ensure fraction remains normalized to avoid overflow/underflow
		if ( fraction < 0.5 && fraction > -0.5) {
			// Split fraction into a normalized fraction and exponent
			parts = frexp( fraction );

			// The fraction isn't obtained by multiplication!
			fraction = parts[ 0 ];

			// Update exponent as before
			exponent += parts[ 1 ];
		}

		// Store resulting double for future calls
		product = ldexp( fraction, exponent );

		return product;
	}
} // end FUNCTION incrprod()

// EXPORTS //

module.exports = incrprod;
