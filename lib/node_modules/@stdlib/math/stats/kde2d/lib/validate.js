'use strict';

// MODULES //

var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isObject = require( '@stdlib/assert/is-plain-object' );
var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );
var isNumericArray = require( '@stdlib/assert/is-numeric-array' );
var isPositiveNumberArray = require( '@stdlib/assert/is-positive-number-array' );


// MAIN //

/**
* Validates function options.
*
* @private
* @param {Object} opts - destination object
* @param {Options} options - function options
* @param {number} [options.n] - number of splits in the generated grid
* @param {NumericArray} [options.h] - An array of length 2 indicating the X and Y bandwidth values
* @param {NumericArray} [options.xLim] - An array of length 2 indicating the grid limits for X
* @param {NumericArray} [options.yLim] - An array of length 2 indicating the grid limits for Y
* @returns {(Error|null)} null or an error object
* @example
* var opts = {};
* var options = {
*     'alpha': 3.14,
*     'decision': true
* };
* var err = validate( opts, options );
* if ( err ) {
*     throw err;
* }
*/
function validate( opts, options ) {
	if ( !isObject( options ) ) {
		return new TypeError( 'invalid input argument. Options must be an object. Value: `' + options + '`.' );
	}
	if ( hasOwnProp( options, 'h' ) ) {
		opts.h = options.h;
		if ( !isPositiveNumberArray( opts.h) ) {
			return new TypeError( 'invaild option. `h` must be an array of positive values. Option: `' + opts.n + '`.');
		}
		if ( opts.h.length !== 2) {
			return new TypeError( 'invalid option. `h` must be an array of length 2. Option: `' + opts.n + '`.');
		}
	}
	if ( hasOwnProp( options, 'n' ) ) {
		opts.n = options.n;
		if ( !isPositiveInteger( opts.n ) ) {
			return new TypeError( 'invalid option. `n` option must be a positive integer. Option: `' + opts.n + '`.' );
		}
	}
	if ( hasOwnProp( options, 'xLim' ) ) {
		opts.xLim = options.xLim;
		if (!isNumericArray(opts.xLim)) {
			return new TypeError( 'invalid option. `xLim` option must be numeric array. Option: `' + opts.xLim + '`.' );
		}
		if (opts.xLim.length !== 2) {
			return new TypeError( 'invalid option. `xLim` option must be numeric array of length 2. Option: `' + opts.xLim + '`.' );
		}
		if (opts.xLim[0] >= opts.xLim[1]) {
			return new Error( 'invalid option. The 0th element of `xLim` must be strictly smaller than the 1st element. Option: `' + opts.xLim + '`.');
		}
	}
	if ( hasOwnProp( options, 'yLim' ) ) {
		opts.yLim = options.yLim;
		if (!isNumericArray(opts.yLim)) {
			return new TypeError( 'invalid option. `yLim` option must be numeric array. Option: `' + opts.yLim + '`.' );
		}
		if (opts.yLim.length !== 2) {
			return new TypeError( 'invalid option. `yLim` option must be numeric array of length 2. Option: `' + opts.yLim + '`.' );
		}
		if (opts.yLim[0] >= opts.yLim[1]) {
			return new Error( 'invalid option. The 0th element of `yLim` must be strictly smaller than the 1st element. Option: `' + opts.yLim + '`.');
		}
	}

	return null;
}


// EXPORTS //

module.exports = validate;

