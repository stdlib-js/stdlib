'use strict';

// MODULES //
var ndarray = require( '@stdlib/ndarray' );
var linspace = require( '@stdlib/math/utils/linspace' );
var pdf = require( '@stdlib/math/base/dists/normal/pdf' );
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var pickBandwidth = require( './pick-bandwidth.js' );
var range = require( './range.js' );

// MAIN //
/**
* Computes 2-dimensional normal kernel density estimate
*
* @param {NumericArray} x - array of X values
* @param {NumericArray} y - array of Y values
* @param {Options} [options] - function options
* @param {NumericArray} [options.h] - array of length 2 containing the bandwidth values for X and Y respectively.
* @param {number} [options.n] - The number of partitions on the X and Y axises
* @throws {TypeError} first argument must be an array
* @throws {RangeError} first argument must not be empty
* @throws {TypeError} second argument must be an array
* @throws {RangeError} second argument must not be empty
* @throws {RangeError} first and second arguments must be same length
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {TypeError} `options.h` must be a numeric array
* @throws {TypeError} each element of `options.h` must be a positive number
* @throws {TypeError} `options.h` must have length 2
* @throws {TypeError} `options.n` must be a positive number
* @returns {Object} Object containing the gx, gy and z estimates
* @example
* var arr = [ 2, 3, 4, 3, 5 ];
* var out = stdev( arr );
* // returns ~1.14
*/

function kde2d(x, y, opts) {

	var zScoreX;
	var zScoreY;
	var gridX;
	var gridY;
	var xLim;
	var yLim;
	var subX;
	var subY;
	var ans;
	var out;
	var gx;
	var gy;
	var hX;
	var hY;
	var ix;
	var iy;
	var i;
	var h;
	var n;
	var z;
	
	// checks:
	// x is a numeric array
	// y is a numeric arary
	// both have non-zero length
	// both have same length
	// h is an array of length 2
	// h is a numeric array
	// each element of h is positive
	// n is a positive integer

	// make the variables
	xLim = range(x);
	yLim = range(y);
	hX = pickBandwidth(x);
	hY = pickBandwidth(y);
	h = [hX, hY];
	n = 25;
	z = ndarray({shape: [n, n]});

	// now make the grid
	gridX = linspace(xLim[0], xLim[1], n);
	gridY = linspace(yLim[0], yLim[1], n);

	// loop throufh x and y indices
	for ( ix = 0; ix < gridX.length; ix++ ) {
		gx = gridX[ix];
		for ( iy = 0; iy < gridY.length; iy++ ) {
			gy = gridY[iy];

			ans = 0;

			// now loop through the data
			for ( i = 0; i < x.length; i++ ) {
				zScoreX = ((x[i] - gx) / hX);
				zScoreY = ((y[i] - gy) / hY);

				subX = (1 / hX) * pdf(zScoreX, 0, 1);
				subY = (1 / hY) * pdf(zScoreY, 0, 1);
				ans += (subX * subY);
			}
			// place it in z
			z.set(ix, iy, ans / x.length);
			// console.log(ans);
		}
	}

	// make the return object
	out = {};
	setReadOnly( out, 'x', gridX );
	setReadOnly( out, 'y', gridY );
	setReadOnly( out, 'z', z );
	
	return out;	
}

// EXPORTS // 

module.exports = kde2d;
