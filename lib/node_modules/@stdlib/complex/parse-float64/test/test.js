/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var Complex128 = require( '@stdlib/complex/float64' );
var parseComplex128 = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof parseComplex128, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error for inputs not recognized as complex numbers', function test( t ) {
	t.throws(function() {
		parseComplex128( 'beep boop' );
	}, Error, 'throws an error for invalid input' );

	t.end();
});

tape( 'the function will parse a string representation of a complex number', function test( t ) {
	var z;
	var w;

	z = new Complex128( 5.0, 3.0 );
	w = parseComplex128( '5 + 3j' );

	t.strictEqual( w instanceof Complex128, true, 'is an instance' );
	t.strictEqual( w.re, z.re, true, 'has expected property value' );
	t.strictEqual( w.im, z.im, true, 'has expected property value' );

	t.end();
});

tape( 'the function will parse a string representation of a complex number (negative values)', function test( t ) {
	var z;
	var w;

	z = new Complex128( -2.0, -4.0 );
	w = parseComplex128( '-2 - 4j' );

	t.strictEqual( w instanceof Complex128, true, 'is an instance' );
	t.strictEqual( w.re, z.re, true, 'has expected property value' );
	t.strictEqual( w.im, z.im, true, 'has expected property value' );

	t.end();
});

tape( 'the function will parse a string representation of a complex number (only real part)', function test( t ) {
    var z;
    var w;

    z = new Complex128( 3.0, 0.0 );
    w = parseComplex128( '3' );

    t.strictEqual( w instanceof Complex128, true, 'is an instance' );
    t.strictEqual( w.re, z.re, true, 'has expected property value' );
    t.strictEqual( w.im, z.im, true, 'has expected property value' );

    t.end();
});

tape( 'the function will parse a string representation of a complex number (only imaginary part)', function test( t ) {
    var z;
    var w;

    z = new Complex128( 0.0, 8.0 );
    w = parseComplex128( '8j' );

    t.strictEqual( w instanceof Complex128, true, 'is an instance' );
    t.strictEqual( w.re, z.re, true, 'has expected property value' );
    t.strictEqual( w.im, z.im, true, 'has expected property value' );

    t.end();
});
