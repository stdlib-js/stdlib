/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isFunction = require( '@stdlib/assert/is-function' );
var isEmptyArray = require( '@stdlib/assert/is-empty-array' );
var isArray = require( '@stdlib/assert/is-array' );
var CompactAdjacencyMatrix = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof CompactAdjacencyMatrix, 'function', 'main export is a function' );
	t.end();
});

tape( 'attached to the prototype of the main export is a `outEdges` method', function test( t ) {
	t.strictEqual( hasOwnProp( CompactAdjacencyMatrix.prototype, 'outEdges' ), true, 'has property' );
	t.strictEqual( isFunction( CompactAdjacencyMatrix.prototype.outEdges ), true, 'has method' );
	t.end();
});

tape( 'the method throws an error if invoked with a value which is not a non negative number', function test( t ) {
	var values;
	var adj;
	var i;

	adj = new CompactAdjacencyMatrix( 4 );

	adj.addEdge( 1, 0 );
	adj.addEdge( 1, 2 );
	adj.addEdge( 0, 2 );
	adj.addEdge( 2, 3 );

	values = [
		'5',
		'abcde',
		-1,
		NaN,
		true,
		false,
		null,
		void 0,
		{},
		[],
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			return adj.outEdges( value );
		};
	}
});

tape( 'the method throws an error if invoked with value which exceeds matrix dimensions', function test( t ) {
	var values;
	var adj;
	var i;

	adj = new CompactAdjacencyMatrix( 4 );

	adj.addEdge( 1, 0 );
	adj.addEdge( 1, 2 );
	adj.addEdge( 0, 2 );
	adj.addEdge( 2, 3 );

	values = [
		5,
		6,
		8
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), RangeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			return adj.outEdges( value );
		};
	}
});

tape( 'the method returns an array upon invoking by a valid input', function test( t ) {
	var values;
	var adj;
	var i;

	adj = new CompactAdjacencyMatrix( 4 );

	adj.addEdge( 1, 0 );
	adj.addEdge( 1, 2 );
	adj.addEdge( 0, 2 );
	adj.addEdge( 2, 3 );

	values = [
		0,
		1,
		2
	];
	for ( i = 0; i < values.length; i++ ) {
		t.strictEqual( isArray( adj.outEdges( values[i] ) ), true, 'returns expected value' );
	}
	t.end();
});

tape( 'the method returns an empty array in case of vertices but no edges', function test( t ) {
	var values;
	var adj;
	var i;

	adj = new CompactAdjacencyMatrix( 4 );

	values = [
		0,
		1,
		2
	];
	for ( i = 0; i < values.length; i++ ) {
		t.strictEqual( isEmptyArray( adj.outEdges( values[i] ) ), true, 'returns expected value' );
	}
	t.end();
});
