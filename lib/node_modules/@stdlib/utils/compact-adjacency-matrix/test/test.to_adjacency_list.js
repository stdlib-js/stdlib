/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isFunction = require( '@stdlib/assert/is-function' );
var isArray = require( '@stdlib/assert/is-array' );
var CompactAdjacencyMatrix = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof CompactAdjacencyMatrix, 'function', 'main export is a function' );
	t.end();
});

tape( 'attached to the prototype of the main export is a `toAdjacencyList` method', function test( t ) {
	t.strictEqual( hasOwnProp( CompactAdjacencyMatrix.prototype, 'toAdjacencyList' ), true, 'has property' );
	t.strictEqual( isFunction( CompactAdjacencyMatrix.prototype.toAdjacencyList ), true, 'has method' );
	t.end();
});

tape( 'the method returns a list of array when there exists vertices and edges', function test( t ) {
	var adj;

	adj = new CompactAdjacencyMatrix( 4 );

	adj.addEdge( 1, 0 );
	adj.addEdge( 1, 2 );
	adj.addEdge( 0, 2 );
	adj.addEdge( 2, 3 );

	t.strictEqual( isArray( adj.toAdjacencyList() ), true, 'returns expected value' );
	t.end();
});

tape( 'the method returns an empty array in case of vertices but no edges', function test( t ) {
	var adj;

	adj = new CompactAdjacencyMatrix( 4 );

	t.strictEqual( isArray( adj.toAdjacencyList() ), true, 'returns expected value' );
	t.end();
});
