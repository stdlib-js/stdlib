/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var objectKeys = require( '@stdlib/utils/keys' );
var isFunction = require( '@stdlib/assert/is-function' );
var format = require( '@stdlib/string/format' );


// MAIN //

/**
* Invokes a function once for each own enumerable property of an object.
*
* ## Notes
*
* -   Iteration order is **not** guaranteed.
*
*
* @param {Object} obj - input object
* @param {Function} fcn - function to invoke
* @param {*} [thisArg] - execution context
* @throws {TypeError} first argument must be an object
* @throws {TypeError} second argument must be a function
* @returns {Object} obj - input object
*
* @example
* function log( v, key ) {
*     console.log( '%s: %d', key, v );
* }
*
* var obj = {
*     'a': 1,
*     'b': 2,
*     'c': 3,
*     'd': 4
* };
*
* forOwn( obj, log );
*/
function forOwn( obj, fcn, thisArg ) {
	var keys;
	var bool;
	var len;
	var k;
	var i;
	if ( typeof obj !== 'object' || obj === null ) {
		throw new TypeError( format( 'invalid argument. First argument must be an object. Value: `%s`.', obj ) );
	}
	if ( !isFunction( fcn ) ) {
		throw new TypeError( format( 'invalid argument. Second argument must be a function. Value: `%s`.', fcn ) );
	}
	keys = objectKeys( obj );
	len = keys.length;
	for ( i = 0; i < len; i++ ) {
		k = keys[ i ];
		bool = fcn.call( thisArg, obj[ k ], k, obj );
		if ( bool === false ) {
			return obj;
		}
	}
	return obj;
}


// EXPORTS //

module.exports = forOwn;
