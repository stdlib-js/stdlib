'use strict';

var curryRight = require( '@stdlib/utils/curry-right' );
var uncurryRight = require( './../lib' );

var uncurried;
var curried;
var abcs;
var out;
var a;
var i;

function concat() {
	var len;
	var out;
	var i;

	len = arguments.length;
	out = '';
	for ( i = 0; i < len; i++ ) {
		out += arguments[ i ];
		if ( i < len-1 ) {
			out += ',';
		}
	}
	return out;
}

// Character codes:
a = 97;

abcs = new Array( 26 );
for ( i = 0; i < abcs.length; i++ ) {
	abcs[ i ] = String.fromCharCode( a + i );
}
out = concat.apply( null, abcs );
console.log( out );
// => 'a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z'

// Transform `concat` into a right curried function:
curried = curryRight( concat, 26 );

out = curried;
for ( i = abcs.length-1; i >= 0; i-- ) {
	out = out( abcs[ i ] );
}
console.log( out );
// => 'a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z'

// Uncurry a right curried function:
uncurried = uncurryRight( curried );

out = uncurried.apply( null, abcs );
console.log( out );
// => 'a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z'
