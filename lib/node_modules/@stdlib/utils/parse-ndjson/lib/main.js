'use strict';

// MODULES //

var isString = require( '@stdlib/assert/is-string' ).isPrimitive;
var isFunction = require( '@stdlib/assert/is-function' );
var parseJSON = require( '@stdlib/utils/parse-json' );


// MAIN //

/**
 * Parses a string as newline-delimited JSON (NDJSON).
 *
 * @param {string} str - input string
 * @param {Function} [reviver] - transformation function applied to each line
 * @throws {TypeError} first argument must be a string
 * @throws {TypeError} reviver must be a function
 * @returns {Array<(*|Error)>} array of parsed values or parse errors
 *
 * @example
 * var obj = parseNDJSON( '{"name":"John"}\n{"name":"Doe"}' );
 * // returns [{'name':'John'}, {'name':'Doe'}]
 */
function parseNDJSON( str, reviver ) {
    if ( !isString( str ) ) {
        throw new TypeError( 'invalid argument. First argument must be a string. Value: `%s`.', str);
    }
    if ( arguments.length > 1 && !isFunction( reviver ) ) {
        throw new TypeError( 'invalid argument. Reviver argument must be a function.Value: `%s`.', str );
    }

    // checks if str contains whitespace only
    if (/^\s*$/.test(str)){
        return []
    }

    var lines = str.split( '\n' );
    var out = [];
    
    for ( var i = 0; i < lines.length; i++ ) {
        try {
            if (reviver){
                var parsed = parseJSON( lines[ i ], reviver );
            } else {
                var parsed = parseJSON(lines[ i ]);
            }
            
            if (parsed instanceof Error){
                return parsed;
            }
            out.push( parsed );

        } catch ( error ) {
            return error;
        }
    }
    
    return out;
}

// EXPORTS //

module.exports = parseNDJSON;
