{{alias}}( str[, reviver] )
    Attempts to parse a string as Newline-Delimited JSON (NDJSON).

    Function behavior differs from `JSON.parse()` as follows:

    - Returns array of parsed JSON
    - Throws a `TypeError` if provided any value which is not a string.
    - Returns, rather than throws, a `SyntaxError` if unable to parse a string as NDJSON.
    - Throws a `TypeError` if provided a `reviver` argument which is not a function.

    Parameters
    ----------
    `str`: `string`
        String to parse as Newline-Delimited JSON.

    reviver: Function (optional)
        Transformation function.

    Returns
    -------
    `out`: `Array<*>|Error`
        Array of Parsed values or an error.

    Examples
    --------

    Example 1: Parsing Valid NDJSON
   
    > const validNDJSON = '{"beep":"boop"}\\n{"example":42}\\n{"data":[1,2,3]}';
    > const result = {{alias}}(validNDJSON);
    Result: [ {'beep':'boop'}, {'example':42}, {'data':[1,2,3]} ]

    Example 2: Handling Parsing Errors
    
    > const invalidNDJSON = '{"beep":"boop"}{"example":42}{"data":[1,2,3]}';
    > const resultWithError = {{alias}}(invalidNDJSON);
    Result: [ SyntaxError: Unexpected end of JSON input ]

    Example 3: Using a Reviver Function

    > const ndjsonString = '{"beep":"boop"}\n{"example":42}\n{"data":[1,2,3]}';
    > const reviver = function (key, value) {
        if (key === '' || key === 'beep') {

            // Uppercase the values for the 'beep' property
            return typeof value === 'string' ? value.toUpperCase() : value;
        }

        // Double the values for other properties
        return typeof value === 'number' ? value * 2 : value;
    };

    > const resultWithReviver = {{alias}}(ndjsonString, reviver);
    Result: [ {'beep':'boop'}, undefined, undefined ]

    See Also
    --------
