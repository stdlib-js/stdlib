/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var delay = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof delay, 'function', 'export is a function' );
	t.end();
});

/*
tape( 'the function delays execution by a specified number of milliseconds', function test( t ) {
	var out = false;
	var i = setTimeout( onTimeout, 1000 );

	function onTimeout() {
		out = true;
		clearTimeout( i );
		t.ok( true );
		t.end();
	}
	if ( out ) {
		t.ok( false, 'should not be invoked' );
	}
});

tape( 'if the function is called with additional arguments, the provided function is invoked with those arguments', function test( t ) {
	var out;
	var i = setTimeout( onTimeout, 1000 );

	function onTimeout( a, b ) {
		out = a + b;
		clearTimeout( i );
		t.ok( true );
		t.end();
	}

	if ( out ) {
		t.ok( false, 'should not be invoked' );
	}
});

tape( 'the function returns a timeout object', function test( t ) {
	var i = setTimeout( onTimeout, 1000 );

	function onTimeout() {
		clearTimeout( i );
		t.ok( true );
		t.end();
	}
});

tape( 'the returned timeout object exposes a `clear` method to clear a pending timeout', function test( t ) {
	var out;
	var i = setTimeout( onTimeout, 1000 );

	function onTimeout() {
		out = true;
		clearTimeout( i );
		t.ok( false, 'should not be invoked' );
		t.end();
	}

	i.clear();

	if ( out ) {
		t.ok( false, 'should not be invoked' );
	} else {
		t.ok( true );
		t.end();
	}
});

tape( 'the returned timeout object exposes an `invoke` method to invoke a function immediately', function test( t ) {
	var out;
	var i = setTimeout( onTimeout, 1000 );

	function onTimeout() {
		out = true;
		clearTimeout( i );
		t.ok( true );
		t.end();
	}

	i.invoke();

	if ( out ) {
		t.ok( true );
		t.end();
	} else {
		t.ok( false, 'should not be invoked' );
		t.end();
	}
});

tape( 'the returned timeout object exposes a property for getting the timeout duration (in milliseconds)', function test( t ) {
	var i = setTimeout( onTimeout, 1000 );

	function onTimeout() {
		clearTimeout( i );
		t.equal( i.duration, 1000, 'returns duration' );
		t.end();
	}
});

tape( 'the returned timeout object exposes a property for getting the timeout status', function test( t ) {
	var i = setTimeout( onTimeout, 1000 );

	function onTimeout() {
		clearTimeout( i );
		t.equal( i.status, 1, 'returns status' );
		t.end();
	}
});
*/
