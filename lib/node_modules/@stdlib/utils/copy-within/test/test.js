/**
* @license Apache-2.0
*
* Copyright (c) 2020 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable object-curly-newline */

'use strict';

// MODULES //

var tape = require( 'tape' );
var Float64Array = require( '@stdlib/array/float64' );
var copyWithin = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof copyWithin, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided either an array, typed array, or an array-like object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		undefined,
		function noop() {},
		new Date(),
		{},
		{ 'length': null },
		{ 'length': -1 },
		{ 'length': 3.14 }
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			copyWithin( value, 0 );
		};
	}
});

tape( 'the function copies a part of an array to another location in the same array', function test( t ) {
	var expected;
	var arr;
	var out;

	arr = [ 1.0, 2.0, 3.0, 4.0, 5.0 ];
	out = copyWithin( arr, 0, 2, 4 );

	t.strictEqual( out, arr, 'returns expected value' );

	expected = [ 3.0, 4.0, 3.0, 4.0, 5.0 ];
	t.deepEqual( arr, expected, 'returns expected value' );

	out = copyWithin( arr, 2, 1, 5 ); // target is after start

	expected = [ 3.0, 4.0, 4.0, 3.0, 4.0 ];
	t.deepEqual( arr, expected, 'returns expected value' );

	t.end();
});

tape( 'the function copies a part of an array-like object to another location in the same array-like object', function test( t ) {
	var expected;
	var arr;
	var out;

	arr = {
		'length': 5,
		'0': 1.0,
		'1': 2.0,
		'2': 3.0,
		'3': 4.0,
		'4': 5.0
	};
	out = copyWithin( arr, 0, 2, 4 );

	t.strictEqual( out, arr, 'returns expected value' );

	expected = {
		'length': 5,
		'0': 3.0,
		'1': 4.0,
		'2': 3.0,
		'3': 4.0,
		'4': 5.0
	};
	t.deepEqual( arr, expected, 'returns expected value' );

	out = copyWithin( arr, 2, 1, 5 ); // target is after start

	expected = {
		'length': 5,
		'0': 3.0,
		'1': 4.0,
		'2': 4.0,
		'3': 3.0,
		'4': 4.0
	};
	t.deepEqual( arr, expected, 'returns expected value' );

	t.end();
});

tape( 'the function copies a part of a typed array to another location in the same typed array', function test( t ) {
	var expected;
	var arr;
	var out;

	arr = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0 ] );
	out = copyWithin( arr, 0, 2, 4 );

	t.strictEqual( out, arr, 'returns expected value' );

	expected = new Float64Array( [ 3.0, 4.0, 3.0, 4.0, 5.0 ] );
	t.deepEqual( arr, expected, 'returns expected value' );

	out = copyWithin( arr, 2, 1, 5 ); // target is after start

	expected = new Float64Array( [ 3.0, 4.0, 4.0, 3.0, 4.0 ] );
	t.deepEqual( arr, expected, 'returns expected value' );

	t.end();
});
