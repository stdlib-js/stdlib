#!/usr/bin/env node

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var resolve = require( 'path' ).resolve;
var readFileSync = require( '@stdlib/fs/read-file' ).sync;
var CLI = require( '@stdlib/cli/ctor' );
var parallel = require( './../lib' );


// FUNCTIONS //

/**
* Callback invoked upon executing all scripts.
*
* @private
* @param {Error} [error] - error object
* @throws {Error} unexpected error
*/
function done( error ) {
	if ( error ) {
		throw error;
	}
}


// MAIN //

/**
* Main execution sequence.
*
* @private
*/
function main() {
	var flags;
	var args;
	var opts;
	var cli;

	// Create a command-line interface:
	cli = new CLI({
		'pkg': require( './../package.json' ),
		'options': require( './../etc/cli_opts.json' ),
		'help': readFileSync( resolve( __dirname, '..', 'docs', 'usage.txt' ), {
			'encoding': 'utf8'
		})
	});

	// Get any provided command-line options:
	flags = cli.flags();
	if ( flags.help || flags.version ) {
		return;
	}

	// Get any command-line arguments:
	args = cli.args();

	opts = {};
	if ( flags.cmd ) {
		opts.cmd = flags.cmd;
	}
	if ( flags.workers ) {
		opts.workers = parseInt( flags.workers, 10 );
	}
	if ( flags.concurrency ) {
		opts.concurrency = parseInt( flags.concurrency, 10 );
	}
	if ( flags.ordered ) {
		opts.ordered = flags.ordered;
	}
	if ( flags.uid ) {
		opts.uid = parseInt( flags.uid, 10 );
	}
	if ( flags.gid ) {
		opts.gid = parseInt( flags.gid, 10 );
	}
	if ( flags.maxbuffer ) {
		opts.maxBuffer = parseInt( flags.maxbuffer, 10 );
	}

	// Run main:
	parallel( args, opts, done );
}

main();
