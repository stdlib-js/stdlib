/* eslint-disable max-lines */

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/*
* When adding names to the namespace, ensure that they are added in alphabetical order according to alias (namespace key).
*/

var ns = [];

ns.push({
	'alias': 'identity',
	'path': '@stdlib/utils/identity-function',
	'value': require( '@stdlib/utils/identity-function' ),
	'type': 'Function',
	'related': [
		'@stdlib/utils/constant-function'
	]
});

ns.push({
	'alias': 'ifelse',
	'path': '@stdlib/utils/if-else',
	'value': require( '@stdlib/utils/if-else' ),
	'type': 'Function',
	'related': [
		'@stdlib/utils/if-else-async',
		'@stdlib/utils/if-then'
	]
});

ns.push({
	'alias': 'ifelseAsync',
	'path': '@stdlib/utils/if-else-async',
	'value': require( '@stdlib/utils/if-else-async' ),
	'type': 'Function',
	'related': [
		'@stdlib/utils/if-else',
		'@stdlib/utils/if-then-async'
	]
});

ns.push({
	'alias': 'ifthen',
	'path': '@stdlib/utils/if-then',
	'value': require( '@stdlib/utils/if-then' ),
	'type': 'Function',
	'related': [
		'@stdlib/utils/if-else',
		'@stdlib/utils/if-then-async'
	]
});

ns.push({
	'alias': 'ifthenAsync',
	'path': '@stdlib/utils/if-then-async',
	'value': require( '@stdlib/utils/if-then-async' ),
	'type': 'Function',
	'related': [
		'@stdlib/utils/if-else-async',
		'@stdlib/utils/if-then'
	]
});

ns.push({
	'alias': 'imag',
	'path': '@stdlib/complex/imag',
	'value': require( '@stdlib/complex/imag' ),
	'type': 'Function',
	'related': [
		'@stdlib/complex/real',
		'@stdlib/complex/reim'
	]
});

ns.push({
	'alias': 'IMG_ACANTHUS_MOLLIS',
	'path': '@stdlib/datasets/img-acanthus-mollis',
	'value': require( '@stdlib/datasets/img-acanthus-mollis' ),
	'type': 'Function',
	'related': [
		'@stdlib/datasets/img-allium-oreophilum'
	]
});

ns.push({
	'alias': 'IMG_AIRPLANE_FROM_ABOVE',
	'path': '@stdlib/datasets/img-airplane-from-above',
	'value': require( '@stdlib/datasets/img-airplane-from-above' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'IMG_ALLIUM_OREOPHILUM',
	'path': '@stdlib/datasets/img-allium-oreophilum',
	'value': require( '@stdlib/datasets/img-allium-oreophilum' ),
	'type': 'Function',
	'related': [
		'@stdlib/datasets/img-acanthus-mollis'
	]
});

ns.push({
	'alias': 'IMG_BLACK_CANYON',
	'path': '@stdlib/datasets/img-black-canyon',
	'value': require( '@stdlib/datasets/img-black-canyon' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'IMG_DUST_BOWL_HOME',
	'path': '@stdlib/datasets/img-dust-bowl-home',
	'value': require( '@stdlib/datasets/img-dust-bowl-home' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'IMG_FRENCH_ALPINE_LANDSCAPE',
	'path': '@stdlib/datasets/img-french-alpine-landscape',
	'value': require( '@stdlib/datasets/img-french-alpine-landscape' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'IMG_LOCOMOTION_HOUSE_CAT',
	'path': '@stdlib/datasets/img-locomotion-house-cat',
	'value': require( '@stdlib/datasets/img-locomotion-house-cat' ),
	'type': 'Function',
	'related': [
		'@stdlib/datasets/img-locomotion-nude-male'
	]
});

ns.push({
	'alias': 'IMG_LOCOMOTION_NUDE_MALE',
	'path': '@stdlib/datasets/img-locomotion-nude-male',
	'value': require( '@stdlib/datasets/img-locomotion-nude-male' ),
	'type': 'Function',
	'related': [
		'@stdlib/datasets/img-locomotion-house-cat'
	]
});

ns.push({
	'alias': 'IMG_MARCH_PASTORAL',
	'path': '@stdlib/datasets/img-march-pastoral',
	'value': require( '@stdlib/datasets/img-march-pastoral' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'IMG_NAGASAKI_BOATS',
	'path': '@stdlib/datasets/img-nagasaki-boats',
	'value': require( '@stdlib/datasets/img-nagasaki-boats' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'incrcount',
	'path': '@stdlib/stats/incr/count',
	'value': require( '@stdlib/stats/incr/count' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mean',
		'@stdlib/stats/incr/sum',
		'@stdlib/stats/incr/summary'
	]
});

ns.push({
	'alias': 'incrcovariance',
	'path': '@stdlib/stats/incr/covariance',
	'value': require( '@stdlib/stats/incr/covariance' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mcovariance',
		'@stdlib/stats/incr/pcorr',
		'@stdlib/stats/incr/variance'
	]
});

ns.push({
	'alias': 'incrcovmat',
	'path': '@stdlib/stats/incr/covmat',
	'value': require( '@stdlib/stats/incr/covmat' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/covariance',
		'@stdlib/stats/incr/mcovmat',
		'@stdlib/stats/incr/pcorrmat'
	]
});

ns.push({
	'alias': 'increwmean',
	'path': '@stdlib/stats/incr/ewmean',
	'value': require( '@stdlib/stats/incr/ewmean' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/ewvariance',
		'@stdlib/stats/incr/mean',
		'@stdlib/stats/incr/mmean'
	]
});

ns.push({
	'alias': 'increwstdev',
	'path': '@stdlib/stats/incr/ewstdev',
	'value': require( '@stdlib/stats/incr/ewstdev' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/ewvariance',
		'@stdlib/stats/incr/mstdev',
		'@stdlib/stats/incr/stdev'
	]
});

ns.push({
	'alias': 'increwvariance',
	'path': '@stdlib/stats/incr/ewvariance',
	'value': require( '@stdlib/stats/incr/ewvariance' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/ewmean',
		'@stdlib/stats/incr/ewstdev',
		'@stdlib/stats/incr/variance',
		'@stdlib/stats/incr/mvariance'
	]
});

ns.push({
	'alias': 'incrgmean',
	'path': '@stdlib/stats/incr/gmean',
	'value': require( '@stdlib/stats/incr/gmean' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/hmean',
		'@stdlib/stats/incr/mean',
		'@stdlib/stats/incr/mgmean',
		'@stdlib/stats/incr/summary'
	]
});

ns.push({
	'alias': 'incrhmean',
	'path': '@stdlib/stats/incr/hmean',
	'value': require( '@stdlib/stats/incr/hmean' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/gmean',
		'@stdlib/stats/incr/mean',
		'@stdlib/stats/incr/mhmean',
		'@stdlib/stats/incr/summary'
	]
});

ns.push({
	'alias': 'incrkmeans',
	'path': '@stdlib/ml/incr/kmeans',
	'value': require( '@stdlib/ml/incr/kmeans' ),
	'type': 'Function',
	'related': [
		'@stdlib/ml/incr/ewkmeans',
		'@stdlib/ml/incr/mkmeans',
		'@stdlib/ml/incr/skmeans'
	]
});

ns.push({
	'alias': 'incrkurtosis',
	'path': '@stdlib/stats/incr/kurtosis',
	'value': require( '@stdlib/stats/incr/kurtosis' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mean',
		'@stdlib/stats/incr/mkurtosis',
		'@stdlib/stats/incr/skewness',
		'@stdlib/stats/incr/stdev',
		'@stdlib/stats/incr/summary',
		'@stdlib/stats/incr/variance'
	]
});

ns.push({
	'alias': 'incrmax',
	'path': '@stdlib/stats/incr/max',
	'value': require( '@stdlib/stats/incr/max' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/midrange',
		'@stdlib/stats/incr/min',
		'@stdlib/stats/incr/mmax',
		'@stdlib/stats/incr/range',
		'@stdlib/stats/incr/summary'
	]
});

ns.push({
	'alias': 'incrmaape',
	'path': '@stdlib/stats/incr/maape',
	'value': require( '@stdlib/stats/incr/maape' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mae',
		'@stdlib/stats/incr/mape',
		'@stdlib/stats/incr/mean',
		'@stdlib/stats/incr/mmaape'
	]
});

ns.push({
	'alias': 'incrmae',
	'path': '@stdlib/stats/incr/mae',
	'value': require( '@stdlib/stats/incr/mae' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mape',
		'@stdlib/stats/incr/me',
		'@stdlib/stats/incr/mean',
		'@stdlib/stats/incr/mmae'
	]
});

ns.push({
	'alias': 'incrmape',
	'path': '@stdlib/stats/incr/mape',
	'value': require( '@stdlib/stats/incr/mape' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/maape',
		'@stdlib/stats/incr/mae',
		'@stdlib/stats/incr/mean',
		'@stdlib/stats/incr/mmape'
	]
});

ns.push({
	'alias': 'incrmaxabs',
	'path': '@stdlib/stats/incr/maxabs',
	'value': require( '@stdlib/stats/incr/maxabs' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/max',
		'@stdlib/stats/incr/minabs',
		'@stdlib/stats/incr/mmaxabs'
	]
});

ns.push({
	'alias': 'incrmcovariance',
	'path': '@stdlib/stats/incr/mcovariance',
	'value': require( '@stdlib/stats/incr/mcovariance' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/covariance',
		'@stdlib/stats/incr/mcovmat',
		'@stdlib/stats/incr/mpcorr',
		'@stdlib/stats/incr/mvariance'
	]
});

ns.push({
	'alias': 'incrmda',
	'path': '@stdlib/stats/incr/mda',
	'value': require( '@stdlib/stats/incr/mda' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mape',
		'@stdlib/stats/incr/mmda'
	]
});

ns.push({
	'alias': 'incrme',
	'path': '@stdlib/stats/incr/me',
	'value': require( '@stdlib/stats/incr/me' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mae',
		'@stdlib/stats/incr/mean',
		'@stdlib/stats/incr/mme'
	]
});

ns.push({
	'alias': 'incrmean',
	'path': '@stdlib/stats/incr/mean',
	'value': require( '@stdlib/stats/incr/mean' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/midrange',
		'@stdlib/stats/incr/mmean',
		'@stdlib/stats/incr/stdev',
		'@stdlib/stats/incr/sum',
		'@stdlib/stats/incr/summary',
		'@stdlib/stats/incr/variance'
	]
});

ns.push({
	'alias': 'incrmeanabs',
	'path': '@stdlib/stats/incr/meanabs',
	'value': require( '@stdlib/stats/incr/meanabs' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mean',
		'@stdlib/stats/incr/mmeanabs',
		'@stdlib/stats/incr/sumabs'
	]
});

ns.push({
	'alias': 'incrmeanabs2',
	'path': '@stdlib/stats/incr/meanabs2',
	'value': require( '@stdlib/stats/incr/meanabs2' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mean',
		'@stdlib/stats/incr/meanabs',
		'@stdlib/stats/incr/mmeanabs2',
		'@stdlib/stats/incr/sumabs2'
	]
});

ns.push({
	'alias': 'incrmgmean',
	'path': '@stdlib/stats/incr/mgmean',
	'value': require( '@stdlib/stats/incr/mgmean' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/gmean',
		'@stdlib/stats/incr/mhmean',
		'@stdlib/stats/incr/mmean'
	]
});

ns.push({
	'alias': 'incrmhmean',
	'path': '@stdlib/stats/incr/mhmean',
	'value': require( '@stdlib/stats/incr/mhmean' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/hmean',
		'@stdlib/stats/incr/mgmean',
		'@stdlib/stats/incr/mmean'
	]
});

ns.push({
	'alias': 'incrmidrange',
	'path': '@stdlib/stats/incr/midrange',
	'value': require( '@stdlib/stats/incr/midrange' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mean',
		'@stdlib/stats/incr/max',
		'@stdlib/stats/incr/min',
		'@stdlib/stats/incr/range',
		'@stdlib/stats/incr/summary'
	]
});

ns.push({
	'alias': 'incrmin',
	'path': '@stdlib/stats/incr/min',
	'value': require( '@stdlib/stats/incr/min' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/max',
		'@stdlib/stats/incr/midrange',
		'@stdlib/stats/incr/mmin',
		'@stdlib/stats/incr/range',
		'@stdlib/stats/incr/summary'
	]
});

ns.push({
	'alias': 'incrminabs',
	'path': '@stdlib/stats/incr/minabs',
	'value': require( '@stdlib/stats/incr/minabs' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/maxabs',
		'@stdlib/stats/incr/min',
		'@stdlib/stats/incr/mminabs'
	]
});

ns.push({
	'alias': 'incrminmax',
	'path': '@stdlib/stats/incr/minmax',
	'value': require( '@stdlib/stats/incr/minmax' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/max',
		'@stdlib/stats/incr/min',
		'@stdlib/stats/incr/mminmax',
		'@stdlib/stats/incr/range'
	]
});

ns.push({
	'alias': 'incrminmaxabs',
	'path': '@stdlib/stats/incr/minmaxabs',
	'value': require( '@stdlib/stats/incr/minmaxabs' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/maxabs',
		'@stdlib/stats/incr/minabs',
		'@stdlib/stats/incr/minmax',
		'@stdlib/stats/incr/mminmaxabs'
	]
});

ns.push({
	'alias': 'incrmmaape',
	'path': '@stdlib/stats/incr/mmaape',
	'value': require( '@stdlib/stats/incr/mmaape' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/maape',
		'@stdlib/stats/incr/mmape',
		'@stdlib/stats/incr/mmpe',
		'@stdlib/stats/incr/mmean'
	]
});

ns.push({
	'alias': 'incrmmae',
	'path': '@stdlib/stats/incr/mmae',
	'value': require( '@stdlib/stats/incr/mmae' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mae',
		'@stdlib/stats/incr/mme',
		'@stdlib/stats/incr/mmean'
	]
});

ns.push({
	'alias': 'incrmmape',
	'path': '@stdlib/stats/incr/mmape',
	'value': require( '@stdlib/stats/incr/mmape' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mape',
		'@stdlib/stats/incr/mmaape',
		'@stdlib/stats/incr/mmpe',
		'@stdlib/stats/incr/mmean'
	]
});

ns.push({
	'alias': 'incrmmax',
	'path': '@stdlib/stats/incr/mmax',
	'value': require( '@stdlib/stats/incr/mmax' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/max',
		'@stdlib/stats/incr/mmidrange',
		'@stdlib/stats/incr/mmin',
		'@stdlib/stats/incr/mrange',
		'@stdlib/stats/incr/msummary'
	]
});

ns.push({
	'alias': 'incrmmaxabs',
	'path': '@stdlib/stats/incr/mmaxabs',
	'value': require( '@stdlib/stats/incr/mmaxabs' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/maxabs',
		'@stdlib/stats/incr/mmax',
		'@stdlib/stats/incr/mminabs'
	]
});

ns.push({
	'alias': 'incrmmda',
	'path': '@stdlib/stats/incr/mmda',
	'value': require( '@stdlib/stats/incr/mmda' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mda',
		'@stdlib/stats/incr/mmape'
	]
});

ns.push({
	'alias': 'incrmme',
	'path': '@stdlib/stats/incr/mme',
	'value': require( '@stdlib/stats/incr/mme' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/me',
		'@stdlib/stats/incr/mmae',
		'@stdlib/stats/incr/mmean'
	]
});

ns.push({
	'alias': 'incrmmean',
	'path': '@stdlib/stats/incr/mmean',
	'value': require( '@stdlib/stats/incr/mmean' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mean',
		'@stdlib/stats/incr/msum',
		'@stdlib/stats/incr/mstdev',
		'@stdlib/stats/incr/msummary',
		'@stdlib/stats/incr/mvariance'
	]
});

ns.push({
	'alias': 'incrmmeanabs',
	'path': '@stdlib/stats/incr/mmeanabs',
	'value': require( '@stdlib/stats/incr/mmeanabs' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/meanabs',
		'@stdlib/stats/incr/mmean',
		'@stdlib/stats/incr/msumabs'
	]
});

ns.push({
	'alias': 'incrmmeanabs2',
	'path': '@stdlib/stats/incr/mmeanabs2',
	'value': require( '@stdlib/stats/incr/mmeanabs2' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/meanabs2',
		'@stdlib/stats/incr/mmeanabs',
		'@stdlib/stats/incr/msumabs2'
	]
});

ns.push({
	'alias': 'incrmmidrange',
	'path': '@stdlib/stats/incr/mmidrange',
	'value': require( '@stdlib/stats/incr/mmidrange' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mmean',
		'@stdlib/stats/incr/mmax',
		'@stdlib/stats/incr/mmin',
		'@stdlib/stats/incr/mrange'
	]
});

ns.push({
	'alias': 'incrmmin',
	'path': '@stdlib/stats/incr/mmin',
	'value': require( '@stdlib/stats/incr/mmin' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/min',
		'@stdlib/stats/incr/mmax',
		'@stdlib/stats/incr/mmidrange',
		'@stdlib/stats/incr/mrange',
		'@stdlib/stats/incr/msummary'
	]
});

ns.push({
	'alias': 'incrmminabs',
	'path': '@stdlib/stats/incr/mminabs',
	'value': require( '@stdlib/stats/incr/mminabs' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/minabs',
		'@stdlib/stats/incr/mmaxabs',
		'@stdlib/stats/incr/mmin'
	]
});

ns.push({
	'alias': 'incrmminmax',
	'path': '@stdlib/stats/incr/mminmax',
	'value': require( '@stdlib/stats/incr/mminmax' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/max',
		'@stdlib/stats/incr/min',
		'@stdlib/stats/incr/mmax',
		'@stdlib/stats/incr/minmax',
		'@stdlib/stats/incr/mmin',
		'@stdlib/stats/incr/mrange'
	]
});

ns.push({
	'alias': 'incrmminmaxabs',
	'path': '@stdlib/stats/incr/mminmaxabs',
	'value': require( '@stdlib/stats/incr/mminmaxabs' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/minmaxabs',
		'@stdlib/stats/incr/mmax',
		'@stdlib/stats/incr/mmaxabs',
		'@stdlib/stats/incr/mmin',
		'@stdlib/stats/incr/mminabs',
		'@stdlib/stats/incr/mminmax'
	]
});

ns.push({
	'alias': 'incrmmpe',
	'path': '@stdlib/stats/incr/mmpe',
	'value': require( '@stdlib/stats/incr/mmpe' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mmape',
		'@stdlib/stats/incr/mme',
		'@stdlib/stats/incr/mpe'
	]
});

ns.push({
	'alias': 'incrmmse',
	'path': '@stdlib/stats/incr/mmse',
	'value': require( '@stdlib/stats/incr/mmse' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mrmse',
		'@stdlib/stats/incr/mrss',
		'@stdlib/stats/incr/mse'
	]
});

ns.push({
	'alias': 'incrmpcorr',
	'path': '@stdlib/stats/incr/mpcorr',
	'value': require( '@stdlib/stats/incr/mpcorr' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mcovariance',
		'@stdlib/stats/incr/mpcorrdist',
		'@stdlib/stats/incr/mpcorrdistmat',
		'@stdlib/stats/incr/mpcorrmat',
		'@stdlib/stats/incr/pcorr'
	]
});

ns.push({
	'alias': 'incrmpcorrdist',
	'path': '@stdlib/stats/incr/mpcorrdist',
	'value': require( '@stdlib/stats/incr/mpcorrdist' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mpcorr',
		'@stdlib/stats/incr/mpcorrdistmat',
		'@stdlib/stats/incr/pcorrdist'
	]
});

ns.push({
	'alias': 'incrmpe',
	'path': '@stdlib/stats/incr/mpe',
	'value': require( '@stdlib/stats/incr/mpe' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mape',
		'@stdlib/stats/incr/me',
		'@stdlib/stats/incr/mmpe'
	]
});

ns.push({
	'alias': 'incrmprod',
	'path': '@stdlib/stats/incr/mprod',
	'value': require( '@stdlib/stats/incr/mprod' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/msum',
		'@stdlib/stats/incr/prod'
	]
});

ns.push({
	'alias': 'incrmrange',
	'path': '@stdlib/stats/incr/mrange',
	'value': require( '@stdlib/stats/incr/mrange' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mmax',
		'@stdlib/stats/incr/mmean',
		'@stdlib/stats/incr/mmin',
		'@stdlib/stats/incr/msummary',
		'@stdlib/stats/incr/range'
	]
});

ns.push({
	'alias': 'incrmrmse',
	'path': '@stdlib/stats/incr/mrmse',
	'value': require( '@stdlib/stats/incr/mrmse' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mmse',
		'@stdlib/stats/incr/mrss',
		'@stdlib/stats/incr/rmse'
	]
});

ns.push({
	'alias': 'incrmrss',
	'path': '@stdlib/stats/incr/mrss',
	'value': require( '@stdlib/stats/incr/mrss' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/rss',
		'@stdlib/stats/incr/mmse',
		'@stdlib/stats/incr/mrmse'
	]
});

ns.push({
	'alias': 'incrmse',
	'path': '@stdlib/stats/incr/mse',
	'value': require( '@stdlib/stats/incr/mse' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mmse',
		'@stdlib/stats/incr/rmse',
		'@stdlib/stats/incr/rss'
	]
});

ns.push({
	'alias': 'incrmstdev',
	'path': '@stdlib/stats/incr/mstdev',
	'value': require( '@stdlib/stats/incr/mstdev' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mmean',
		'@stdlib/stats/incr/msummary',
		'@stdlib/stats/incr/mvariance',
		'@stdlib/stats/incr/stdev'
	]
});

ns.push({
	'alias': 'incrmsum',
	'path': '@stdlib/stats/incr/msum',
	'value': require( '@stdlib/stats/incr/msum' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mmean',
		'@stdlib/stats/incr/msummary',
		'@stdlib/stats/incr/sum'
	]
});

ns.push({
	'alias': 'incrmsumabs',
	'path': '@stdlib/stats/incr/msumabs',
	'value': require( '@stdlib/stats/incr/msumabs' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mmeanabs',
		'@stdlib/stats/incr/msum',
		'@stdlib/stats/incr/sum',
		'@stdlib/stats/incr/sumabs'
	]
});

ns.push({
	'alias': 'incrmsumabs2',
	'path': '@stdlib/stats/incr/msumabs2',
	'value': require( '@stdlib/stats/incr/msumabs2' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mmeanabs2',
		'@stdlib/stats/incr/msumabs',
		'@stdlib/stats/incr/sumabs',
		'@stdlib/stats/incr/sumabs2'
	]
});

ns.push({
	'alias': 'incrmsummary',
	'path': '@stdlib/stats/incr/msummary',
	'value': require( '@stdlib/stats/incr/msummary' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mmean',
		'@stdlib/stats/incr/mstdev',
		'@stdlib/stats/incr/msum',
		'@stdlib/stats/incr/mvariance',
		'@stdlib/stats/incr/summary'
	]
});

ns.push({
	'alias': 'incrmsumprod',
	'path': '@stdlib/stats/incr/msumprod',
	'value': require( '@stdlib/stats/incr/msumprod' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mprod',
		'@stdlib/stats/incr/msum',
		'@stdlib/stats/incr/sumprod'
	]
});

ns.push({
	'alias': 'incrmvariance',
	'path': '@stdlib/stats/incr/mvariance',
	'value': require( '@stdlib/stats/incr/mvariance' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mmean',
		'@stdlib/stats/incr/mstdev',
		'@stdlib/stats/incr/msummary',
		'@stdlib/stats/incr/variance'
	]
});

ns.push({
	'alias': 'incrpcorr',
	'path': '@stdlib/stats/incr/pcorr',
	'value': require( '@stdlib/stats/incr/pcorr' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/covariance',
		'@stdlib/stats/incr/mpcorr',
		'@stdlib/stats/incr/summary'
	]
});

ns.push({
	'alias': 'incrpcorrdist',
	'path': '@stdlib/stats/incr/pcorrdist',
	'value': require( '@stdlib/stats/incr/pcorrdist' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/covariance',
		'@stdlib/stats/incr/pcorr',
		'@stdlib/stats/incr/summary'
	]
});

ns.push({
	'alias': 'incrpcorrdistmat',
	'path': '@stdlib/stats/incr/pcorrdistmat',
	'value': require( '@stdlib/stats/incr/pcorrdistmat' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mpcorrdistmat',
		'@stdlib/stats/incr/pcorrdist',
		'@stdlib/stats/incr/pcorrmat'
	]
});

ns.push({
	'alias': 'incrpcorrmat',
	'path': '@stdlib/stats/incr/pcorrmat',
	'value': require( '@stdlib/stats/incr/pcorrmat' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/covmat',
		'@stdlib/stats/incr/mpcorrmat',
		'@stdlib/stats/incr/pcorr',
		'@stdlib/stats/incr/pcorrdistmat'
	]
});

ns.push({
	'alias': 'incrprod',
	'path': '@stdlib/stats/incr/prod',
	'value': require( '@stdlib/stats/incr/prod' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/sum',
		'@stdlib/stats/incr/summary'
	]
});

ns.push({
	'alias': 'incrrange',
	'path': '@stdlib/stats/incr/range',
	'value': require( '@stdlib/stats/incr/range' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/max',
		'@stdlib/stats/incr/mean',
		'@stdlib/stats/incr/min',
		'@stdlib/stats/incr/mrange',
		'@stdlib/stats/incr/summary'
	]
});

ns.push({
	'alias': 'incrrmse',
	'path': '@stdlib/stats/incr/rmse',
	'value': require( '@stdlib/stats/incr/rmse' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mrmse',
		'@stdlib/stats/incr/mse',
		'@stdlib/stats/incr/rss'
	]
});

ns.push({
	'alias': 'incrrss',
	'path': '@stdlib/stats/incr/rss',
	'value': require( '@stdlib/stats/incr/rss' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/mrss',
		'@stdlib/stats/incr/mse',
		'@stdlib/stats/incr/rmse'
	]
});

ns.push({
	'alias': 'incrskewness',
	'path': '@stdlib/stats/incr/skewness',
	'value': require( '@stdlib/stats/incr/skewness' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/kurtosis',
		'@stdlib/stats/incr/mean',
		'@stdlib/stats/incr/mskewness',
		'@stdlib/stats/incr/stdev',
		'@stdlib/stats/incr/summary',
		'@stdlib/stats/incr/variance'
	]
});

ns.push({
	'alias': 'incrspace',
	'path': '@stdlib/math/utils/incrspace',
	'value': require( '@stdlib/math/utils/incrspace' ),
	'type': 'Function',
	'related': [
		'@stdlib/math/utils/linspace',
		'@stdlib/math/utils/logspace'
	]
});

ns.push({
	'alias': 'incrstdev',
	'path': '@stdlib/stats/incr/stdev',
	'value': require( '@stdlib/stats/incr/stdev' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/kurtosis',
		'@stdlib/stats/incr/mean',
		'@stdlib/stats/incr/mstdev',
		'@stdlib/stats/incr/skewness',
		'@stdlib/stats/incr/summary',
		'@stdlib/stats/incr/variance'
	]
});

ns.push({
	'alias': 'incrsum',
	'path': '@stdlib/stats/incr/sum',
	'value': require( '@stdlib/stats/incr/sum' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/count',
		'@stdlib/stats/incr/mean',
		'@stdlib/stats/incr/msum',
		'@stdlib/stats/incr/prod',
		'@stdlib/stats/incr/summary'
	]
});

ns.push({
	'alias': 'incrsumabs',
	'path': '@stdlib/stats/incr/sumabs',
	'value': require( '@stdlib/stats/incr/sumabs' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/meanabs',
		'@stdlib/stats/incr/msumabs',
		'@stdlib/stats/incr/sum'
	]
});

ns.push({
	'alias': 'incrsumabs2',
	'path': '@stdlib/stats/incr/sumabs2',
	'value': require( '@stdlib/stats/incr/sumabs2' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/meanabs2',
		'@stdlib/stats/incr/msumabs2',
		'@stdlib/stats/incr/sumabs'
	]
});

ns.push({
	'alias': 'incrsummary',
	'path': '@stdlib/stats/incr/summary',
	'value': require( '@stdlib/stats/incr/summary' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/count',
		'@stdlib/stats/incr/kurtosis',
		'@stdlib/stats/incr/max',
		'@stdlib/stats/incr/mean',
		'@stdlib/stats/incr/midrange',
		'@stdlib/stats/incr/min',
		'@stdlib/stats/incr/msummary',
		'@stdlib/stats/incr/range',
		'@stdlib/stats/incr/skewness',
		'@stdlib/stats/incr/stdev',
		'@stdlib/stats/incr/sum',
		'@stdlib/stats/incr/variance'
	]
});

ns.push({
	'alias': 'incrsumprod',
	'path': '@stdlib/stats/incr/sumprod',
	'value': require( '@stdlib/stats/incr/sumprod' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/msumprod',
		'@stdlib/stats/incr/prod',
		'@stdlib/stats/incr/sum'
	]
});

ns.push({
	'alias': 'incrvariance',
	'path': '@stdlib/stats/incr/variance',
	'value': require( '@stdlib/stats/incr/variance' ),
	'type': 'Function',
	'related': [
		'@stdlib/stats/incr/kurtosis',
		'@stdlib/stats/incr/mean',
		'@stdlib/stats/incr/mstdev',
		'@stdlib/stats/incr/skewness',
		'@stdlib/stats/incr/stdev',
		'@stdlib/stats/incr/summary'
	]
});

ns.push({
	'alias': 'indexOf',
	'path': '@stdlib/utils/index-of',
	'value': require( '@stdlib/utils/index-of' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'inherit',
	'path': '@stdlib/utils/inherit',
	'value': require( '@stdlib/utils/inherit' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'inmap',
	'path': '@stdlib/utils/inmap',
	'value': require( '@stdlib/utils/inmap' ),
	'type': 'Function',
	'related': [
		'@stdlib/utils/for-each',
		'@stdlib/utils/inmap-right',
		'@stdlib/utils/map'
	]
});

ns.push({
	'alias': 'inmapAsync',
	'path': '@stdlib/utils/inmap-async',
	'value': require( '@stdlib/utils/inmap-async' ),
	'type': 'Function',
	'related': [
		'@stdlib/utils/for-each-async',
		'@stdlib/utils/inmap',
		'@stdlib/utils/inmap-right-async',
		'@stdlib/utils/map-async'
	]
});

ns.push({
	'alias': 'inmapRight',
	'path': '@stdlib/utils/inmap-right',
	'value': require( '@stdlib/utils/inmap-right' ),
	'type': 'Function',
	'related': [
		'@stdlib/utils/for-each-right',
		'@stdlib/utils/inmap',
		'@stdlib/utils/map-right'
	]
});

ns.push({
	'alias': 'inmapRightAsync',
	'path': '@stdlib/utils/inmap-right-async',
	'value': require( '@stdlib/utils/inmap-right-async' ),
	'type': 'Function',
	'related': [
		'@stdlib/utils/for-each-right-async',
		'@stdlib/utils/inmap-async',
		'@stdlib/utils/inmap-right',
		'@stdlib/utils/map-right-async'
	]
});

ns.push({
	'alias': 'instanceOf',
	'path': '@stdlib/assert/instance-of',
	'value': require( '@stdlib/assert/instance-of' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/has-prototype',
		'@stdlib/utils/constructor-name',
		'@stdlib/utils/inherit',
		'@stdlib/utils/type-of'
	]
});

ns.push({
	'alias': 'Int16Array',
	'path': '@stdlib/array/int16',
	'value': require( '@stdlib/array/int16' ),
	'type': 'Function',
	'related': [
		'@stdlib/array/buffer',
		'@stdlib/array/float32',
		'@stdlib/array/float64',
		'@stdlib/array/int32',
		'@stdlib/array/int8',
		'@stdlib/array/uint16',
		'@stdlib/array/uint32',
		'@stdlib/array/uint8',
		'@stdlib/array/uint8c'
	]
});

ns.push({
	'alias': 'INT16_MAX',
	'path': '@stdlib/constants/math/int16-max',
	'value': require( '@stdlib/constants/math/int16-max' ),
	'type': 'number',
	'related': [
		'@stdlib/constants/math/int16-min'
	]
});

ns.push({
	'alias': 'INT16_MIN',
	'path': '@stdlib/constants/math/int16-min',
	'value': require( '@stdlib/constants/math/int16-min' ),
	'type': 'number',
	'related': [
		'@stdlib/constants/math/int16-max'
	]
});

ns.push({
	'alias': 'INT16_NUM_BYTES',
	'path': '@stdlib/constants/math/int16-num-bytes',
	'value': require( '@stdlib/constants/math/int16-num-bytes' ),
	'type': 'number',
	'related': [
		'@stdlib/constants/math/int32-num-bytes',
		'@stdlib/constants/math/int8-num-bytes',
		'@stdlib/constants/math/uint16-num-bytes'
	]
});

ns.push({
	'alias': 'Int32Array',
	'path': '@stdlib/array/int32',
	'value': require( '@stdlib/array/int32' ),
	'type': 'Function',
	'related': [
		'@stdlib/array/buffer',
		'@stdlib/array/float32',
		'@stdlib/array/float64',
		'@stdlib/array/int16',
		'@stdlib/array/int8',
		'@stdlib/array/uint16',
		'@stdlib/array/uint32',
		'@stdlib/array/uint8',
		'@stdlib/array/uint8c'
	]
});

ns.push({
	'alias': 'INT32_MAX',
	'path': '@stdlib/constants/math/int32-max',
	'value': require( '@stdlib/constants/math/int32-max' ),
	'type': 'number',
	'related': [
		'@stdlib/constants/math/int32-min'
	]
});

ns.push({
	'alias': 'INT32_MIN',
	'path': '@stdlib/constants/math/int32-min',
	'value': require( '@stdlib/constants/math/int32-min' ),
	'type': 'number',
	'related': [
		'@stdlib/constants/math/int32-max'
	]
});

ns.push({
	'alias': 'INT32_NUM_BYTES',
	'path': '@stdlib/constants/math/int32-num-bytes',
	'value': require( '@stdlib/constants/math/int32-num-bytes' ),
	'type': 'number',
	'related': [
		'@stdlib/constants/math/int16-num-bytes',
		'@stdlib/constants/math/int8-num-bytes',
		'@stdlib/constants/math/uint32-num-bytes'
	]
});

ns.push({
	'alias': 'Int8Array',
	'path': '@stdlib/array/int8',
	'value': require( '@stdlib/array/int8' ),
	'type': 'Function',
	'related': [
		'@stdlib/array/buffer',
		'@stdlib/array/float32',
		'@stdlib/array/float64',
		'@stdlib/array/int16',
		'@stdlib/array/int32',
		'@stdlib/array/uint16',
		'@stdlib/array/uint32',
		'@stdlib/array/uint8',
		'@stdlib/array/uint8c'
	]
});

ns.push({
	'alias': 'INT8_MAX',
	'path': '@stdlib/constants/math/int8-max',
	'value': require( '@stdlib/constants/math/int8-max' ),
	'type': 'number',
	'related': [
		'@stdlib/constants/math/int8-min'
	]
});

ns.push({
	'alias': 'INT8_MIN',
	'path': '@stdlib/constants/math/int8-min',
	'value': require( '@stdlib/constants/math/int8-min' ),
	'type': 'number',
	'related': [
		'@stdlib/constants/math/int8-max'
	]
});

ns.push({
	'alias': 'INT8_NUM_BYTES',
	'path': '@stdlib/constants/math/int8-num-bytes',
	'value': require( '@stdlib/constants/math/int8-num-bytes' ),
	'type': 'number',
	'related': [
		'@stdlib/constants/math/int16-num-bytes',
		'@stdlib/constants/math/int32-num-bytes',
		'@stdlib/constants/math/uint8-num-bytes'
	]
});

ns.push({
	'alias': 'isAbsolutePath',
	'path': '@stdlib/assert/is-absolute-path',
	'value': require( '@stdlib/assert/is-absolute-path' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-relative-path'
	]
});

ns.push({
	'alias': 'isAlphagram',
	'path': '@stdlib/assert/is-alphagram',
	'value': require( '@stdlib/assert/is-alphagram' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-anagram'
	]
});

ns.push({
	'alias': 'isAlphaNumeric',
	'path': '@stdlib/assert/is-alphanumeric',
	'value': require( '@stdlib/assert/is-alphanumeric' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-digit-string'
	]
});

ns.push({
	'alias': 'isAnagram',
	'path': '@stdlib/assert/is-anagram',
	'value': require( '@stdlib/assert/is-anagram' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-alphagram'
	]
});

ns.push({
	'alias': 'isArguments',
	'path': '@stdlib/assert/is-arguments',
	'value': require( '@stdlib/assert/is-arguments' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isArray',
	'path': '@stdlib/assert/is-array',
	'value': require( '@stdlib/assert/is-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array-like'
	]
});

ns.push({
	'alias': 'isArrayArray',
	'path': '@stdlib/assert/is-array-array',
	'value': require( '@stdlib/assert/is-array-array' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isArrayBuffer',
	'path': '@stdlib/assert/is-arraybuffer',
	'value': require( '@stdlib/assert/is-arraybuffer' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-sharedarraybuffer',
		'@stdlib/assert/is-typed-array'
	]
});

ns.push({
	'alias': 'isArrayLength',
	'path': '@stdlib/assert/is-array-length',
	'value': require( '@stdlib/assert/is-array-length' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array'
	]
});

ns.push({
	'alias': 'isArrayLike',
	'path': '@stdlib/assert/is-array-like',
	'value': require( '@stdlib/assert/is-array-like' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-array-like-object'
	]
});

ns.push({
	'alias': 'isArrayLikeObject',
	'path': '@stdlib/assert/is-array-like-object',
	'value': require( '@stdlib/assert/is-array-like-object' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-array-like'
	]
});

ns.push({
	'alias': 'isASCII',
	'path': '@stdlib/assert/is-ascii',
	'value': require( '@stdlib/assert/is-ascii' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-string'
	]
});

ns.push({
	'alias': 'isBetween',
	'path': '@stdlib/assert/is-between',
	'value': require( '@stdlib/assert/is-between' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-between-array'
	]
});

ns.push({
	'alias': 'isBetweenArray',
	'path': '@stdlib/assert/is-between-array',
	'value': require( '@stdlib/assert/is-between-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-between'
	]
});

ns.push({
	'alias': 'isBinaryString',
	'path': '@stdlib/assert/is-binary-string',
	'value': require( '@stdlib/assert/is-binary-string' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-string'
	]
});

ns.push({
	'alias': 'isBoolean',
	'path': '@stdlib/assert/is-boolean',
	'value': require( '@stdlib/assert/is-boolean' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isBooleanArray',
	'path': '@stdlib/assert/is-boolean-array',
	'value': require( '@stdlib/assert/is-boolean-array' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isBuffer',
	'path': '@stdlib/assert/is-buffer',
	'value': require( '@stdlib/assert/is-buffer' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isCapitalized',
	'path': '@stdlib/assert/is-capitalized',
	'value': require( '@stdlib/assert/is-capitalized' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-string'
	]
});

ns.push({
	'alias': 'isCentrosymmetricMatrix',
	'path': '@stdlib/assert/is-centrosymmetric-matrix',
	'value': require( '@stdlib/assert/is-centrosymmetric-matrix' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-matrix-like',
		'@stdlib/assert/is-square-matrix',
		'@stdlib/assert/is-symmetric-matrix'
	]
});

ns.push({
	'alias': 'isCircular',
	'path': '@stdlib/assert/is-circular',
	'value': require( '@stdlib/assert/is-circular' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-circular-array',
		'@stdlib/assert/is-circular-plain-object'
	]
});

ns.push({
	'alias': 'isCircularArray',
	'path': '@stdlib/assert/is-circular-array',
	'value': require( '@stdlib/assert/is-circular-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-circular',
		'@stdlib/assert/is-circular-plain-object'
	]
});

ns.push({
	'alias': 'isCircularPlainObject',
	'path': '@stdlib/assert/is-circular-plain-object',
	'value': require( '@stdlib/assert/is-circular-plain-object' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-circular',
		'@stdlib/assert/is-circular-array'
	]
});

ns.push({
	'alias': 'isCollection',
	'path': '@stdlib/assert/is-collection',
	'value': require( '@stdlib/assert/is-collection' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array-like'
	]
});

ns.push({
	'alias': 'isComplex',
	'path': '@stdlib/assert/is-complex',
	'value': require( '@stdlib/assert/is-complex' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-complex64',
		'@stdlib/assert/is-complex128'
	]
});

ns.push({
	'alias': 'isComplex64',
	'path': '@stdlib/assert/is-complex64',
	'value': require( '@stdlib/assert/is-complex64' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-complex',
		'@stdlib/assert/is-complex128'
	]
});

ns.push({
	'alias': 'isComplex128',
	'path': '@stdlib/assert/is-complex128',
	'value': require( '@stdlib/assert/is-complex128' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-complex',
		'@stdlib/assert/is-complex64'
	]
});

ns.push({
	'alias': 'isDateObject',
	'path': '@stdlib/assert/is-date-object',
	'value': require( '@stdlib/assert/is-date-object' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isDigitString',
	'path': '@stdlib/assert/is-digit-string',
	'value': require( '@stdlib/assert/is-digit-string' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-hex-string',
		'@stdlib/assert/is-string'
	]
});

ns.push({
	'alias': 'isEmailAddress',
	'path': '@stdlib/assert/is-email-address',
	'value': require( '@stdlib/assert/is-email-address' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isEmptyArray',
	'path': '@stdlib/assert/is-empty-array',
	'value': require( '@stdlib/assert/is-empty-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array'
	]
});

ns.push({
	'alias': 'isEmptyObject',
	'path': '@stdlib/assert/is-empty-object',
	'value': require( '@stdlib/assert/is-empty-object' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-object',
		'@stdlib/assert/is-plain-object'
	]
});

ns.push({
	'alias': 'isEmptyString',
	'path': '@stdlib/assert/is-empty-string',
	'value': require( '@stdlib/assert/is-empty-string' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-string'
	]
});

ns.push({
	'alias': 'isEnumerableProperty',
	'path': '@stdlib/assert/is-enumerable-property',
	'value': require( '@stdlib/assert/is-enumerable-property' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isError',
	'path': '@stdlib/assert/is-error',
	'value': require( '@stdlib/assert/is-error' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isEvalError',
	'path': '@stdlib/assert/is-eval-error',
	'value': require( '@stdlib/assert/is-eval-error' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-error'
	]
});

ns.push({
	'alias': 'isEven',
	'path': '@stdlib/assert/is-even',
	'value': require( '@stdlib/assert/is-even' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-odd'
	]
});

ns.push({
	'alias': 'isFalsy',
	'path': '@stdlib/assert/is-falsy',
	'value': require( '@stdlib/assert/is-falsy' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-falsy-array',
		'@stdlib/assert/is-truthy'
	]
});

ns.push({
	'alias': 'isFalsyArray',
	'path': '@stdlib/assert/is-falsy-array',
	'value': require( '@stdlib/assert/is-falsy-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-falsy',
		'@stdlib/assert/is-truthy-array'
	]
});

ns.push({
	'alias': 'isFinite',
	'path': '@stdlib/assert/is-finite',
	'value': require( '@stdlib/assert/is-finite' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-finite-array',
		'@stdlib/assert/is-infinite'
	]
});

ns.push({
	'alias': 'isFiniteArray',
	'path': '@stdlib/assert/is-finite-array',
	'value': require( '@stdlib/assert/is-finite-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-finite',
		'@stdlib/assert/is-infinite'
	]
});

ns.push({
	'alias': 'isFloat32Array',
	'path': '@stdlib/assert/is-float32array',
	'value': require( '@stdlib/assert/is-float32array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-float64array'
	]
});

ns.push({
	'alias': 'isFloat64Array',
	'path': '@stdlib/assert/is-float64array',
	'value': require( '@stdlib/assert/is-float64array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-float32array'
	]
});

ns.push({
	'alias': 'isFunction',
	'path': '@stdlib/assert/is-function',
	'value': require( '@stdlib/assert/is-function' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isFunctionArray',
	'path': '@stdlib/assert/is-function-array',
	'value': require( '@stdlib/assert/is-function-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array'
	]
});

ns.push({
	'alias': 'isGeneratorObject',
	'path': '@stdlib/assert/is-generator-object',
	'value': require( '@stdlib/assert/is-generator-object' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/has-generator-support',
		'@stdlib/assert/is-generator-object-like'
	]
});

ns.push({
	'alias': 'isGeneratorObjectLike',
	'path': '@stdlib/assert/is-generator-object-like',
	'value': require( '@stdlib/assert/is-generator-object-like' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/has-generator-support',
		'@stdlib/assert/is-generator-object'
	]
});

ns.push({
	'alias': 'isHexString',
	'path': '@stdlib/assert/is-hex-string',
	'value': require( '@stdlib/assert/is-hex-string' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-string'
	]
});

ns.push({
	'alias': 'isInfinite',
	'path': '@stdlib/assert/is-infinite',
	'value': require( '@stdlib/assert/is-infinite' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-finite'
	]
});

ns.push({
	'alias': 'isInt16Array',
	'path': '@stdlib/assert/is-int16array',
	'value': require( '@stdlib/assert/is-int16array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-int32array',
		'@stdlib/assert/is-int8array'
	]
});

ns.push({
	'alias': 'isInt32Array',
	'path': '@stdlib/assert/is-int32array',
	'value': require( '@stdlib/assert/is-int32array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-int16array',
		'@stdlib/assert/is-int8array'
	]
});

ns.push({
	'alias': 'isInt8Array',
	'path': '@stdlib/assert/is-int8array',
	'value': require( '@stdlib/assert/is-int8array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-int16array',
		'@stdlib/assert/is-int32array'
	]
});

ns.push({
	'alias': 'isInteger',
	'path': '@stdlib/assert/is-integer',
	'value': require( '@stdlib/assert/is-integer' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-number'
	]
});

ns.push({
	'alias': 'isIntegerArray',
	'path': '@stdlib/assert/is-integer-array',
	'value': require( '@stdlib/assert/is-integer-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array'
	]
});

ns.push({
	'alias': 'isJSON',
	'path': '@stdlib/assert/is-json',
	'value': require( '@stdlib/assert/is-json' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isLeapYear',
	'path': '@stdlib/assert/is-leap-year',
	'value': require( '@stdlib/assert/is-leap-year' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isLowercase',
	'path': '@stdlib/assert/is-lowercase',
	'value': require( '@stdlib/assert/is-lowercase' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-string',
		'@stdlib/assert/is-uppercase'
	]
});

ns.push({
	'alias': 'isMatrixLike',
	'path': '@stdlib/assert/is-matrix-like',
	'value': require( '@stdlib/assert/is-matrix-like' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-array-like',
		'@stdlib/assert/is-ndarray-like',
		'@stdlib/assert/is-typed-array-like',
		'@stdlib/assert/is-vector-like'
	]
});

ns.push({
	'alias': 'isnan',
	'path': '@stdlib/assert/is-nan',
	'value': require( '@stdlib/assert/is-nan' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-number'
	]
});

ns.push({
	'alias': 'isNaNArray',
	'path': '@stdlib/assert/is-nan-array',
	'value': require( '@stdlib/assert/is-nan-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-nan'
	]
});

ns.push({
	'alias': 'isNativeFunction',
	'path': '@stdlib/assert/is-native-function',
	'value': require( '@stdlib/assert/is-native-function' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-function'
	]
});

ns.push({
	'alias': 'isndarrayLike',
	'path': '@stdlib/assert/is-ndarray-like',
	'value': require( '@stdlib/assert/is-ndarray-like' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-array-like',
		'@stdlib/assert/is-matrix-like',
		'@stdlib/assert/is-typed-array-like',
		'@stdlib/assert/is-vector-like'
	]
});

ns.push({
	'alias': 'isNegativeInteger',
	'path': '@stdlib/assert/is-negative-integer',
	'value': require( '@stdlib/assert/is-negative-integer' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-integer'
	]
});

ns.push({
	'alias': 'isNegativeIntegerArray',
	'path': '@stdlib/assert/is-negative-integer-array',
	'value': require( '@stdlib/assert/is-negative-integer-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array'
	]
});

ns.push({
	'alias': 'isNegativeNumber',
	'path': '@stdlib/assert/is-negative-number',
	'value': require( '@stdlib/assert/is-negative-number' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-number'
	]
});

ns.push({
	'alias': 'isNegativeNumberArray',
	'path': '@stdlib/assert/is-negative-number-array',
	'value': require( '@stdlib/assert/is-negative-number-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array'
	]
});

ns.push({
	'alias': 'isNegativeZero',
	'path': '@stdlib/assert/is-negative-zero',
	'value': require( '@stdlib/assert/is-negative-zero' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-number',
		'@stdlib/assert/is-positive-zero'
	]
});

ns.push({
	'alias': 'isNodeBuiltin',
	'path': '@stdlib/assert/is-node-builtin',
	'value': require( '@stdlib/assert/is-node-builtin' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isNodeDuplexStreamLike',
	'path': '@stdlib/assert/is-node-duplex-stream-like',
	'value': require( '@stdlib/assert/is-node-duplex-stream-like' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-node-stream-like'
	]
});

ns.push({
	'alias': 'isNodeReadableStreamLike',
	'path': '@stdlib/assert/is-node-readable-stream-like',
	'value': require( '@stdlib/assert/is-node-readable-stream-like' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-node-stream-like'
	]
});

ns.push({
	'alias': 'isNodeREPL',
	'path': '@stdlib/assert/is-node-repl',
	'value': require( '@stdlib/assert/is-node-repl' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isNodeStreamLike',
	'path': '@stdlib/assert/is-node-stream-like',
	'value': require( '@stdlib/assert/is-node-stream-like' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isNodeTransformStreamLike',
	'path': '@stdlib/assert/is-node-transform-stream-like',
	'value': require( '@stdlib/assert/is-node-transform-stream-like' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-node-stream-like'
	]
});

ns.push({
	'alias': 'isNodeWritableStreamLike',
	'path': '@stdlib/assert/is-node-writable-stream-like',
	'value': require( '@stdlib/assert/is-node-writable-stream-like' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-node-stream-like'
	]
});

ns.push({
	'alias': 'isNonNegativeInteger',
	'path': '@stdlib/assert/is-nonnegative-integer',
	'value': require( '@stdlib/assert/is-nonnegative-integer' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-integer'
	]
});

ns.push({
	'alias': 'isNonNegativeIntegerArray',
	'path': '@stdlib/assert/is-nonnegative-integer-array',
	'value': require( '@stdlib/assert/is-nonnegative-integer-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array'
	]
});

ns.push({
	'alias': 'isNonNegativeNumber',
	'path': '@stdlib/assert/is-nonnegative-number',
	'value': require( '@stdlib/assert/is-nonnegative-number' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-number'
	]
});

ns.push({
	'alias': 'isNonNegativeNumberArray',
	'path': '@stdlib/assert/is-nonnegative-number-array',
	'value': require( '@stdlib/assert/is-nonnegative-number-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array'
	]
});

ns.push({
	'alias': 'isNonPositiveInteger',
	'path': '@stdlib/assert/is-nonpositive-integer',
	'value': require( '@stdlib/assert/is-nonpositive-integer' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-integer'
	]
});

ns.push({
	'alias': 'isNonPositiveIntegerArray',
	'path': '@stdlib/assert/is-nonpositive-integer-array',
	'value': require( '@stdlib/assert/is-nonpositive-integer-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array'
	]
});

ns.push({
	'alias': 'isNonPositiveNumber',
	'path': '@stdlib/assert/is-nonpositive-number',
	'value': require( '@stdlib/assert/is-nonpositive-number' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-number'
	]
});

ns.push({
	'alias': 'isNonPositiveNumberArray',
	'path': '@stdlib/assert/is-nonpositive-number-array',
	'value': require( '@stdlib/assert/is-nonpositive-number-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array'
	]
});

ns.push({
	'alias': 'isNonSymmetricMatrix',
	'path': '@stdlib/assert/is-nonsymmetric-matrix',
	'value': require( '@stdlib/assert/is-nonsymmetric-matrix' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-matrix-like',
		'@stdlib/assert/is-square-matrix',
		'@stdlib/assert/is-symmetric-matrix'
	]
});

ns.push({
	'alias': 'isNull',
	'path': '@stdlib/assert/is-null',
	'value': require( '@stdlib/assert/is-null' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-undefined',
		'@stdlib/assert/is-undefined-or-null'
	]
});

ns.push({
	'alias': 'isNullArray',
	'path': '@stdlib/assert/is-null-array',
	'value': require( '@stdlib/assert/is-null-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-null'
	]
});

ns.push({
	'alias': 'isNumber',
	'path': '@stdlib/assert/is-number',
	'value': require( '@stdlib/assert/is-number' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isNumberArray',
	'path': '@stdlib/assert/is-number-array',
	'value': require( '@stdlib/assert/is-number-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-number',
		'@stdlib/assert/is-numeric-array'
	]
});

ns.push({
	'alias': 'isNumericArray',
	'path': '@stdlib/assert/is-numeric-array',
	'value': require( '@stdlib/assert/is-numeric-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-number-array',
		'@stdlib/assert/is-typed-array'
	]
});

ns.push({
	'alias': 'isObject',
	'path': '@stdlib/assert/is-object',
	'value': require( '@stdlib/assert/is-object' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-object-like',
		'@stdlib/assert/is-plain-object'
	]
});

ns.push({
	'alias': 'isObjectArray',
	'path': '@stdlib/assert/is-object-array',
	'value': require( '@stdlib/assert/is-object-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-object'
	]
});

ns.push({
	'alias': 'isObjectLike',
	'path': '@stdlib/assert/is-object-like',
	'value': require( '@stdlib/assert/is-object-like' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-object',
		'@stdlib/assert/is-plain-object'
	]
});

ns.push({
	'alias': 'isOdd',
	'path': '@stdlib/assert/is-odd',
	'value': require( '@stdlib/assert/is-odd' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-even'
	]
});

ns.push({
	'alias': 'isoWeeksInYear',
	'path': '@stdlib/time/iso-weeks-in-year',
	'value': require( '@stdlib/time/iso-weeks-in-year' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isPersymmetricMatrix',
	'path': '@stdlib/assert/is-persymmetric-matrix',
	'value': require( '@stdlib/assert/is-persymmetric-matrix' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-matrix-like',
		'@stdlib/assert/is-square-matrix',
		'@stdlib/assert/is-symmetric-matrix'
	]
});

ns.push({
	'alias': 'isPlainObject',
	'path': '@stdlib/assert/is-plain-object',
	'value': require( '@stdlib/assert/is-plain-object' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-object'
	]
});

ns.push({
	'alias': 'isPlainObjectArray',
	'path': '@stdlib/assert/is-plain-object-array',
	'value': require( '@stdlib/assert/is-plain-object-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-plain-object'
	]
});

ns.push({
	'alias': 'isPositiveInteger',
	'path': '@stdlib/assert/is-positive-integer',
	'value': require( '@stdlib/assert/is-positive-integer' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-integer'
	]
});

ns.push({
	'alias': 'isPositiveIntegerArray',
	'path': '@stdlib/assert/is-positive-integer-array',
	'value': require( '@stdlib/assert/is-positive-integer-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-integer',
		'@stdlib/assert/is-positive-integer'
	]
});

ns.push({
	'alias': 'isPositiveNumber',
	'path': '@stdlib/assert/is-positive-number',
	'value': require( '@stdlib/assert/is-positive-number' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-number'
	]
});

ns.push({
	'alias': 'isPositiveNumberArray',
	'path': '@stdlib/assert/is-positive-number-array',
	'value': require( '@stdlib/assert/is-positive-number-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-number',
		'@stdlib/assert/is-positive-number'
	]
});

ns.push({
	'alias': 'isPositiveZero',
	'path': '@stdlib/assert/is-positive-zero',
	'value': require( '@stdlib/assert/is-positive-zero' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-number',
		'@stdlib/assert/is-negative-zero'
	]
});

ns.push({
	'alias': 'isPrimitive',
	'path': '@stdlib/assert/is-primitive',
	'value': require( '@stdlib/assert/is-primitive' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isPrimitiveArray',
	'path': '@stdlib/assert/is-primitive-array',
	'value': require( '@stdlib/assert/is-primitive-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-primitive'
	]
});

ns.push({
	'alias': 'isProbability',
	'path': '@stdlib/assert/is-probability',
	'value': require( '@stdlib/assert/is-probability' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-number'
	]
});

ns.push({
	'alias': 'isProbabilityArray',
	'path': '@stdlib/assert/is-probability-array',
	'value': require( '@stdlib/assert/is-probability-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-probability'
	]
});

ns.push({
	'alias': 'isRangeError',
	'path': '@stdlib/assert/is-range-error',
	'value': require( '@stdlib/assert/is-range-error' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-error'
	]
});

ns.push({
	'alias': 'isReferenceError',
	'path': '@stdlib/assert/is-reference-error',
	'value': require( '@stdlib/assert/is-reference-error' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-error'
	]
});

ns.push({
	'alias': 'isRegExp',
	'path': '@stdlib/assert/is-regexp',
	'value': require( '@stdlib/assert/is-regexp' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isRegExpString',
	'path': '@stdlib/assert/is-regexp-string',
	'value': require( '@stdlib/assert/is-regexp-string' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-regexp'
	]
});

ns.push({
	'alias': 'isRelativePath',
	'path': '@stdlib/assert/is-relative-path',
	'value': require( '@stdlib/assert/is-relative-path' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-absolute-path'
	]
});

ns.push({
	'alias': 'isSafeInteger',
	'path': '@stdlib/assert/is-safe-integer',
	'value': require( '@stdlib/assert/is-safe-integer' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-integer',
		'@stdlib/assert/is-number'
	]
});

ns.push({
	'alias': 'isSafeIntegerArray',
	'path': '@stdlib/assert/is-safe-integer-array',
	'value': require( '@stdlib/assert/is-safe-integer-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-safe-integer'
	]
});

ns.push({
	'alias': 'isSameValue',
	'path': '@stdlib/assert/is-same-value',
	'value': require( '@stdlib/assert/is-same-value' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-equal',
		'@stdlib/assert/is-strict-equal'
	]
});

ns.push({
	'alias': 'isSharedArrayBuffer',
	'path': '@stdlib/assert/is-sharedarraybuffer',
	'value': require( '@stdlib/assert/is-sharedarraybuffer' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-arraybuffer',
		'@stdlib/assert/is-typed-array'
	]
});

ns.push({
	'alias': 'isSkewCentrosymmetricMatrix',
	'path': '@stdlib/assert/is-skew-centrosymmetric-matrix',
	'value': require( '@stdlib/assert/is-skew-centrosymmetric-matrix' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-centrosymmetric-matrix',
		'@stdlib/assert/is-matrix-like',
		'@stdlib/assert/is-skew-symmetric-matrix'
	]
});

ns.push({
	'alias': 'isSkewPersymmetricMatrix',
	'path': '@stdlib/assert/is-skew-persymmetric-matrix',
	'value': require( '@stdlib/assert/is-skew-persymmetric-matrix' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-matrix-like',
		'@stdlib/assert/is-persymmetric-matrix',
		'@stdlib/assert/is-skew-symmetric-matrix'
	]
});

ns.push({
	'alias': 'isSkewSymmetricMatrix',
	'path': '@stdlib/assert/is-skew-symmetric-matrix',
	'value': require( '@stdlib/assert/is-skew-symmetric-matrix' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-matrix-like',
		'@stdlib/assert/is-skew-symmetric-matrix',
		'@stdlib/assert/is-square-matrix'
	]
});

ns.push({
	'alias': 'isSquareMatrix',
	'path': '@stdlib/assert/is-square-matrix',
	'value': require( '@stdlib/assert/is-square-matrix' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-matrix-like',
		'@stdlib/assert/is-symmetric-matrix'
	]
});

ns.push({
	'alias': 'isStrictEqual',
	'path': '@stdlib/assert/is-strict-equal',
	'value': require( '@stdlib/assert/is-strict-equal' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-equal',
		'@stdlib/assert/is-same-value'
	]
});

ns.push({
	'alias': 'isString',
	'path': '@stdlib/assert/is-string',
	'value': require( '@stdlib/assert/is-string' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isStringArray',
	'path': '@stdlib/assert/is-string-array',
	'value': require( '@stdlib/assert/is-string-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-string'
	]
});

ns.push({
	'alias': 'isSymbol',
	'path': '@stdlib/assert/is-symbol',
	'value': require( '@stdlib/assert/is-symbol' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isSymbolArray',
	'path': '@stdlib/assert/is-symbol-array',
	'value': require( '@stdlib/assert/is-symbol-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-symbol'
	]
});

ns.push({
	'alias': 'isSymmetricMatrix',
	'path': '@stdlib/assert/is-symmetric-matrix',
	'value': require( '@stdlib/assert/is-symmetric-matrix' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-matrix-like',
		'@stdlib/assert/is-nonsymmetric-matrix',
		'@stdlib/assert/is-square-matrix'
	]
});

ns.push({
	'alias': 'isSyntaxError',
	'path': '@stdlib/assert/is-syntax-error',
	'value': require( '@stdlib/assert/is-syntax-error' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-error'
	]
});

ns.push({
	'alias': 'isTruthy',
	'path': '@stdlib/assert/is-truthy',
	'value': require( '@stdlib/assert/is-truthy' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-falsy'
	]
});

ns.push({
	'alias': 'isTruthyArray',
	'path': '@stdlib/assert/is-truthy-array',
	'value': require( '@stdlib/assert/is-truthy-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-falsy-array',
		'@stdlib/assert/is-truthy'
	]
});

ns.push({
	'alias': 'isTypeError',
	'path': '@stdlib/assert/is-type-error',
	'value': require( '@stdlib/assert/is-type-error' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-error'
	]
});

ns.push({
	'alias': 'isTypedArray',
	'path': '@stdlib/assert/is-typed-array',
	'value': require( '@stdlib/assert/is-typed-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-typed-array-like'
	]
});

ns.push({
	'alias': 'isTypedArrayLength',
	'path': '@stdlib/assert/is-typed-array-length',
	'value': require( '@stdlib/assert/is-typed-array-length' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array-length',
		'@stdlib/assert/is-typed-array'
	]
});

ns.push({
	'alias': 'isTypedArrayLike',
	'path': '@stdlib/assert/is-typed-array-like',
	'value': require( '@stdlib/assert/is-typed-array-like' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-typed-array'
	]
});

ns.push({
	'alias': 'isUint16Array',
	'path': '@stdlib/assert/is-uint16array',
	'value': require( '@stdlib/assert/is-uint16array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-typed-array',
		'@stdlib/assert/is-uint32array',
		'@stdlib/assert/is-uint8array'
	]
});

ns.push({
	'alias': 'isUint32Array',
	'path': '@stdlib/assert/is-uint32array',
	'value': require( '@stdlib/assert/is-uint32array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-typed-array',
		'@stdlib/assert/is-uint16array',
		'@stdlib/assert/is-uint8array'
	]
});

ns.push({
	'alias': 'isUint8Array',
	'path': '@stdlib/assert/is-uint8array',
	'value': require( '@stdlib/assert/is-uint8array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-typed-array',
		'@stdlib/assert/is-uint16array',
		'@stdlib/assert/is-uint32array'
	]
});

ns.push({
	'alias': 'isUint8ClampedArray',
	'path': '@stdlib/assert/is-uint8clampedarray',
	'value': require( '@stdlib/assert/is-uint8clampedarray' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-typed-array',
		'@stdlib/assert/is-uint8array'
	]
});

ns.push({
	'alias': 'isUNCPath',
	'path': '@stdlib/assert/is-unc-path',
	'value': require( '@stdlib/assert/is-unc-path' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isUndefined',
	'path': '@stdlib/assert/is-undefined',
	'value': require( '@stdlib/assert/is-undefined' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-null',
		'@stdlib/assert/is-undefined-or-null'
	]
});

ns.push({
	'alias': 'isUndefinedOrNull',
	'path': '@stdlib/assert/is-undefined-or-null',
	'value': require( '@stdlib/assert/is-undefined-or-null' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-null',
		'@stdlib/assert/is-undefined'
	]
});

ns.push({
	'alias': 'isUnityProbabilityArray',
	'path': '@stdlib/assert/is-unity-probability-array',
	'value': require( '@stdlib/assert/is-unity-probability-array' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-probability',
		'@stdlib/assert/is-probability-array'
	]
});

ns.push({
	'alias': 'isUppercase',
	'path': '@stdlib/assert/is-uppercase',
	'value': require( '@stdlib/assert/is-uppercase' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-lowercase',
		'@stdlib/assert/is-string'
	]
});

ns.push({
	'alias': 'isURI',
	'path': '@stdlib/assert/is-uri',
	'value': require( '@stdlib/assert/is-uri' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'isURIError',
	'path': '@stdlib/assert/is-uri-error',
	'value': require( '@stdlib/assert/is-uri-error' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-error'
	]
});

ns.push({
	'alias': 'isVectorLike',
	'path': '@stdlib/assert/is-vector-like',
	'value': require( '@stdlib/assert/is-vector-like' ),
	'type': 'Function',
	'related': [
		'@stdlib/assert/is-array',
		'@stdlib/assert/is-array-like',
		'@stdlib/assert/is-matrix-like',
		'@stdlib/assert/is-ndarray-like',
		'@stdlib/assert/is-typed-array-like'
	]
});

ns.push({
	'alias': 'isWhitespace',
	'path': '@stdlib/assert/is-whitespace',
	'value': require( '@stdlib/assert/is-whitespace' ),
	'type': 'Function',
	'related': [
		'@stdlib/regexp/whitespace'
	]
});

ns.push({
	'alias': 'IS_BROWSER',
	'path': '@stdlib/assert/is-browser',
	'value': require( '@stdlib/assert/is-browser' ),
	'type': 'boolean',
	'related': []
});

ns.push({
	'alias': 'IS_DARWIN',
	'path': '@stdlib/assert/is-darwin',
	'value': require( '@stdlib/assert/is-darwin' ),
	'type': 'boolean',
	'related': []
});

ns.push({
	'alias': 'IS_ELECTRON',
	'path': '@stdlib/assert/is-electron',
	'value': require( '@stdlib/assert/is-electron' ),
	'type': 'boolean',
	'related': [
		'@stdlib/assert/is-electron-main',
		'@stdlib/assert/is-electron-renderer'
	]
});

ns.push({
	'alias': 'IS_ELECTRON_MAIN',
	'path': '@stdlib/assert/is-electron-main',
	'value': require( '@stdlib/assert/is-electron-main' ),
	'type': 'boolean',
	'related': [
		'@stdlib/assert/is-electron',
		'@stdlib/assert/is-electron-renderer'
	]
});

ns.push({
	'alias': 'IS_ELECTRON_RENDERER',
	'path': '@stdlib/assert/is-electron-renderer',
	'value': require( '@stdlib/assert/is-electron-renderer' ),
	'type': 'boolean',
	'related': [
		'@stdlib/assert/is-electron',
		'@stdlib/assert/is-electron-main'
	]
});

ns.push({
	'alias': 'IS_LITTLE_ENDIAN',
	'path': '@stdlib/assert/is-little-endian',
	'value': require( '@stdlib/assert/is-little-endian' ),
	'type': 'boolean',
	'related': []
});

ns.push({
	'alias': 'IS_NODE',
	'path': '@stdlib/assert/is-node',
	'value': require( '@stdlib/assert/is-node' ),
	'type': 'boolean',
	'related': []
});

ns.push({
	'alias': 'IS_WEB_WORKER',
	'path': '@stdlib/assert/is-web-worker',
	'value': require( '@stdlib/assert/is-web-worker' ),
	'type': 'boolean',
	'related': []
});

ns.push({
	'alias': 'IS_WINDOWS',
	'path': '@stdlib/assert/is-windows',
	'value': require( '@stdlib/assert/is-windows' ),
	'type': 'boolean',
	'related': []
});

ns.push({
	'alias': 'IteratorSymbol',
	'path': '@stdlib/symbol/iterator',
	'value': require( '@stdlib/symbol/iterator' ),
	'type': 'symbol',
	'related': [
		'@stdlib/symbol/ctor'
	]
});


// EXPORTS //

module.exports = ns;
