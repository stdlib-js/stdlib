/* eslint-disable max-lines */

/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/*
* When adding names to the namespace, ensure that they are added in alphabetical order according to alias (namespace key).
*/

var ns = [];

ns.push({
	'alias': 'pad',
	'path': '@stdlib/string/pad',
	'value': require( '@stdlib/string/pad' ),
	'type': 'Function',
	'related': [
		'@stdlib/string/left-pad',
		'@stdlib/string/right-pad'
	]
});

ns.push({
	'alias': 'papply',
	'path': '@stdlib/utils/papply',
	'value': require( '@stdlib/utils/papply' ),
	'type': 'Function',
	'related': [
		'@stdlib/utils/papply-right'
	]
});

ns.push({
	'alias': 'papplyRight',
	'path': '@stdlib/utils/papply-right',
	'value': require( '@stdlib/utils/papply-right' ),
	'type': 'Function',
	'related': [
		'@stdlib/utils/papply'
	]
});

ns.push({
	'alias': 'parallel',
	'path': '@stdlib/utils/parallel',
	'value': require( '@stdlib/utils/parallel' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'parseJSON',
	'path': '@stdlib/utils/parse-json',
	'value': require( '@stdlib/utils/parse-json' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'PATH_DELIMITER',
	'path': '@stdlib/constants/string/path-delimiter',
	'value': require( '@stdlib/constants/string/path-delimiter' ),
	'type': 'string',
	'related': [
		'@stdlib/constants/string/path-delimiter-posix',
		'@stdlib/constants/string/path-delimiter-win32'
	]
});

ns.push({
	'alias': 'PATH_DELIMITER_POSIX',
	'path': '@stdlib/constants/string/path-delimiter-posix',
	'value': require( '@stdlib/constants/string/path-delimiter-posix' ),
	'type': 'string',
	'related': [
		'@stdlib/constants/string/path-delimiter',
		'@stdlib/constants/string/path-delimiter-win32'
	]
});

ns.push({
	'alias': 'PATH_DELIMITER_WIN32',
	'path': '@stdlib/constants/string/path-delimiter-win32',
	'value': require( '@stdlib/constants/string/path-delimiter-win32' ),
	'type': 'string',
	'related': [
		'@stdlib/constants/string/path-delimiter',
		'@stdlib/constants/string/path-delimiter-posix'
	]
});

ns.push({
	'alias': 'PATH_SEP',
	'path': '@stdlib/constants/string/path-sep',
	'value': require( '@stdlib/constants/string/path-sep' ),
	'type': 'string',
	'related': [
		'@stdlib/constants/string/path-sep-posix',
		'@stdlib/constants/string/path-sep-win32'
	]
});

ns.push({
	'alias': 'PATH_SEP_POSIX',
	'path': '@stdlib/constants/string/path-sep-posix',
	'value': require( '@stdlib/constants/string/path-sep-posix' ),
	'type': 'string',
	'related': [
		'@stdlib/constants/string/path-sep',
		'@stdlib/constants/string/path-sep-win32'
	]
});

ns.push({
	'alias': 'PATH_SEP_WIN32',
	'path': '@stdlib/constants/string/path-sep-win32',
	'value': require( '@stdlib/constants/string/path-sep-win32' ),
	'type': 'string',
	'related': [
		'@stdlib/constants/string/path-sep',
		'@stdlib/constants/string/path-sep-posix'
	]
});

ns.push({
	'alias': 'pcorrtest',
	'path': '@stdlib/stats/pcorrtest',
	'value': require( '@stdlib/stats/pcorrtest' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'percentEncode',
	'path': '@stdlib/string/percent-encode',
	'value': require( '@stdlib/string/percent-encode' ),
	'type': 'Function',
	'related': []
});

ns.push({
	'alias': 'PHI',
	'path': '@stdlib/constants/math/float64-phi',
	'value': require( '@stdlib/constants/math/float64-phi' ),
	'type': 'number',
	'related': []
});

ns.push({
	'alias': 'PI',
	'path': '@stdlib/constants/math/float64-pi',
	'value': require( '@stdlib/constants/math/float64-pi' ),
	'type': 'number',
	'related': [
		'@stdlib/constants/math/float64-two-pi'
	]
});

ns.push({
	'alias': 'PI_SQUARED',
	'path': '@stdlib/constants/math/float64-pi-squared',
	'value': require( '@stdlib/constants/math/float64-pi-squared' ),
	'type': 'number',
	'related': [
		'@stdlib/constants/math/float64-pi'
	]
});

ns.push({
	'alias': 'pick',
	'path': '@stdlib/utils/pick',
	'value': require( '@stdlib/utils/pick' ),
	'type': 'Function',
	'related': [
		'@stdlib/utils/pick-by'
	]
});

ns.push({
	'alias': 'pickBy',
	'path': '@stdlib/utils/pick-by',
	'value': require( '@stdlib/utils/pick-by' ),
	'type': 'Function',
	'related': [
		'@stdlib/utils/pick'
	]
});

ns.push({
	'alias': 'PINF',
	'path': '@stdlib/constants/math/float64-pinf',
	'value': require( '@stdlib/constants/math/float64-pinf' ),
	'type': 'number',
	'related': [
		'@stdlib/constants/math/float64-ninf'
	]
});

ns.push({
	'alias': 'PLATFORM',
	'path': '@stdlib/os/platform',
	'value': require( '@stdlib/os/platform' ),
	'type': 'string',
	'related': [
		'@stdlib/os/arch'
	]
});

ns.push({
	'alias': 'plot',
	'path': '@stdlib/plot',
	'value': require( '@stdlib/plot' ),
	'type': 'Function',
	'related': [
		'@stdlib/plot/ctor'
	]
});

ns.push({
	'alias': 'Plot',
	'path': '@stdlib/plot/ctor',
	'value': require( '@stdlib/plot/ctor' ),
	'type': 'Function',
	'related': [
		'@stdlib/plot'
	]
});

ns.push({
	'alias': 'pluck',
	'path': '@stdlib/utils/pluck',
	'value': require( '@stdlib/utils/pluck' ),
	'type': 'Function',
	'related': [
		'@stdlib/utils/deep-pluck',
		'@stdlib/utils/pick'
	]
});

ns.push({
	'alias': 'pop',
	'path': '@stdlib/utils/pop',
	'value': require( '@stdlib/utils/pop' ),
	'type': 'Function',
	'related': [
		'@stdlib/utils/push',
		'@stdlib/utils/shift',
		'@stdlib/utils/unshift'
	]
});

ns.push({
	'alias': 'prepend',
	'path': '@stdlib/utils/prepend',
	'value': require( '@stdlib/utils/prepend' ),
	'type': 'Function',
	'related': [
		'@stdlib/utils/append',
		'@stdlib/utils/unshift'
	]
});

ns.push({
	'alias': 'push',
	'path': '@stdlib/utils/push',
	'value': require( '@stdlib/utils/push' ),
	'type': 'Function',
	'related': [
		'@stdlib/utils/pop',
		'@stdlib/utils/shift',
		'@stdlib/utils/unshift'
	]
});


// EXPORTS //

module.exports = ns;
