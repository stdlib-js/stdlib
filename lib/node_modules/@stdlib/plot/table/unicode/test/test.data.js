/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var noop = require( '@stdlib/utils/noop' );
var ndarray = require( '@stdlib/ndarray/ctor' );
var ctor = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof ctor, 'function', 'main export is a function' );
	t.end();
});

tape( 'an instance throws an error if provided an invalid `data` value', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		void 0,
		true,
		false,
		[],
		{},
		function noop() {},
		[ 1, 'hello', null ]
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var table = ctor();
			table.data = value;
		};
	}
});

tape( 'an instance throws an error if provided a `data` value which more rows than the data buffer size', function test( t ) {
	var values;
	var i;

	values = [
		[ [ 1, 2 ], [ 3, 4 ] ],
		[ [ 1, 2 ], [ 3, 4 ], [ 5, 6 ] ],
		[ [ 1, 2 ], [ 3, 4 ], [ 5, 6 ], [ 7, 8 ] ]
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), RangeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var table = ctor( null, {
				'bufferSize': 1
			});
			table.data = value;
		};
	}
});

tape( 'an instance supports setting and getting the property value', function test( t ) {
	var table;
	var arr;

	arr = [ [ 1, 2 ], [ 3, 4 ], [ 5, 6 ] ];
	table = ctor( arr );
	table.render = noop;
	t.notEqual( table.data, arr, 'returns a new reference' );
	t.deepEqual( table.data, arr, 'returns expected value' );

	arr = [ [ 1, 2 ], [ 3, 4 ], [ 5, 6 ], [ 7, 8 ] ];
	table.data = arr;
	t.notEqual( table.data, arr, 'returns a new reference' );
	t.deepEqual( table.data, arr, 'returns expected value' );

	arr = ndarray( 'generic', [ 1, 2, 3, 4 ], [ 2, 2 ], [ 2, 1 ], 0, 'row-major' );
	table.data = arr;
	t.notEqual( table.data, arr, 'returns a new reference' );
	t.deepEqual( table.data, [ [ 1, 2 ], [ 3, 4 ] ], 'returns expected value' );

	t.end();
});

tape( 'an instance throws an error if provided `data` with incorrect number of columns', function test( t ) {
	var values;
	var i;

	values = [
		[ [ 1, 2 ], [ 3, 4 ] ],
		[ [ 1, 2, 3 ], [ 4, 5 ] ]
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), RangeError, 'throws an error' );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var table = ctor( null, [ 'col1', 'col2', 'col3' ] ); // 3 columns
			table.data = value;
		};
	}
});

tape( 'settings the `data` property sets number of columns', function test( t ) {
	t.throws( badValue, RangeError, 'throws an error' );
	t.end();

	function badValue() {
		var table = ctor( [ [ 1, 2, 3 ], [ 4, 5, 6 ] ] ); // 3 columns
		table.headers = [ 'col1', 'col2' ]; // 2 columns
	}
});

tape( 'setting the `data` property to a new value triggers a `change` event', function test( t ) {
	var table;

	table = ctor( [ [ 1, 2 ], [ 3, 4 ] ] );
	table.render = noop;

	table.on( 'change', onChange );
	table.data = [ [ 5, 6 ], [ 7, 8 ] ];

	function onChange() {
		t.ok( true, 'triggers event' );
		t.end();
	}
});

tape( 'setting the `data` property to its current value does not trigger a `change` event', function test( t ) {
	var table;

	table = ctor( [ [ 1, 2 ], [ 3, 4 ] ] );
	table.render = noop;

	table.on( 'change', onChange );
	table.data = [ [ 1, 2 ], [ 3, 4 ] ];

	t.ok( true, 'does not trigger event' );
	t.end();

	function onChange() {
		t.ok( false, 'should not trigger event' );
	}
});
