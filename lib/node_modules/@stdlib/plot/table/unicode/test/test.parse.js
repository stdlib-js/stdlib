/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var ndarray = require( '@stdlib/ndarray/ctor' );
var ctor = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof ctor, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if provided an invalid array of objects', function test( t ) {
	t.throws( badValue, Error, 'throws an error' );
	t.end();

	function badValue() {
		var headers;
		var table;
		var data;

		data = [
			{
				'col1': 'hello',
				'col2': 45,
				'col3': true
			},
			{
				'col1': null,
				'col3': 45.3
			}
		];
		headers = [ 'col1', 'col2', 'col3' ];
		table = ctor( data, headers ); // eslint-disable-line no-unused-vars
	}
});

tape( 'the function sets the table data for an array of objects (with headers)', function test( t ) {
	var expected;
	var headers;
	var table;
	var data;
	var v;

	data = [
		{
			'col1': 'hello',
			'col2': 45,
			'col3': true
		},
		{
			'col1': null,
			'col3': 45.3
		}
	];
	headers = [ 'col1', 'col3' ];
	table = ctor( data, headers );

	v = table.data;
	expected = [ [ 'hello', true ], [ null, 45.3 ] ];
	t.deepEqual( v, expected, 'sets table data' );

	v = table.headers;
	expected = [ 'col1', 'col3' ];
	t.deepEqual( v, expected, 'sets table headers' );

	t.end();
});

tape( 'the function sets the table data for an array of objects (without headers)', function test( t ) {
	var expected;
	var table;
	var data;
	var v;

	data = [
		{
			'col1': 'hello',
			'col2': 45,
			'col3': true
		},
		{
			'col1': null,
			'col2': undefined,
			'col3': 45.3
		}
	];
	table = ctor( data );

	v = table.data;
	expected = [ [ 'hello', 45, true ], [ null, undefined, 45.3 ] ];
	t.deepEqual( v, expected, 'sets table data' );

	v = table.headers;
	expected = [ 'col1', 'col2', 'col3' ];
	t.deepEqual( v, expected, 'sets table headers' );

	t.end();
});

tape( 'the function throws an error if provided an invalid object of columns', function test( t ) {
	var values;
	var i;

	values = [
		{
			'data': {
				'col1': [ 'hello', true ],
				'col2': [ 45.3, null ]
			},
			'headers': [ 'col1', 'col2', 'col3' ]
		},
		{
			'data': {
				'col1': [ 'hello', true ],
				'col2': [ 45.3 ]
			},
			'headers': [ 'col1', 'col2' ]
		}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), Error, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var table = ctor( value.data, value.headers ); // eslint-disable-line no-unused-vars
		};
	}
});

tape( 'the function sets the table data for an object of columns (with headers)', function test( t ) {
	var expected;
	var headers;
	var table;
	var data;
	var v;

	data = {
		'col1': [ 'hello', true ],
		'col2': [ null, 45 ],
		'col3': [ undefined, 45.3 ]
	};
	headers = [ 'col1', 'col2' ];
	table = ctor( data, headers );

	v = table.data;
	expected = [ [ 'hello', null ], [ true, 45 ] ];
	t.deepEqual( v, expected, 'sets table data' );

	v = table.headers;
	expected = [ 'col1', 'col2' ];
	t.deepEqual( v, expected, 'sets table headers' );

	t.end();
});

tape( 'the function sets the table data for an object of columns (without headers)', function test( t ) {
	var expected;
	var table;
	var data;
	var v;

	data = {
		'col1': [ 'hello', true ],
		'col2': [ null, 45 ],
		'col3': [ undefined, 45.3 ]
	};
	table = ctor( data );

	v = table.data;
	expected = [ [ 'hello', null, undefined ], [ true, 45, 45.3 ] ];
	t.deepEqual( v, expected, 'sets table data' );

	v = table.headers;
	expected = [ 'col1', 'col2', 'col3' ];
	t.deepEqual( v, expected, 'sets table headers' );

	t.end();
});

tape( 'the function throws an error if provided an invalid array of arrays', function test( t ) {
	var values;
	var i;

	values = [
		{
			'data': [ [ 45, 33 ], [ 32.54, true, null ] ],
			'headers': [ 'col1', 'col2', 'col3' ]
		},
		{
			'data': [ [ 45, 33, 'hello', undefined ], [ 32.54, true, null ] ],
			'headers': [ 'col1', 'col2', 'col3' ]
		}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), Error, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var table = ctor( value.data, value.headers ); // eslint-disable-line no-unused-vars
		};
	}
});

tape( 'the function sets the table data for an array of arrays (with headers)', function test( t ) {
	var expected;
	var headers;
	var table;
	var data;
	var v;

	data = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	headers = [ 'col1', 'col2', 'col3' ];
	table = ctor( data, headers );

	v = table.data;
	expected = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	t.deepEqual( v, expected, 'sets table data' );

	v = table.headers;
	expected = [ 'col1', 'col2', 'col3' ];
	t.deepEqual( v, expected, 'sets table headers' );

	t.end();
});

tape( 'the function sets the table data for an array of arrays (without headers)', function test( t ) {
	var expected;
	var table;
	var data;
	var v;

	data = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	table = ctor( data );

	v = table.data;
	expected = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	t.deepEqual( v, expected, 'sets table data' );

	v = table.headers;
	expected = null;
	t.deepEqual( v, expected, 'sets table headers' );

	t.end();
});

tape( 'the function throws an error if provided an invalid array of objects', function test( t ) {
	t.throws( badValue, Error, 'throws an error' );
	t.end();

	function badValue() {
		var headers;
		var buffer;
		var table;
		var data;

		buffer = [ 14, 2, 'hello', false, 32.54, true, null, 'bye', 9, 10, 11, 12 ];
		data = ndarray( 'generic', buffer, [ 3, 4 ], [ 4, 1 ], 0, 'row-major' );
		headers = [ 'col1', 'col2', 'col3' ];
		table = ctor( data, headers ); // eslint-disable-line no-unused-vars
	}
});

tape( 'the function sets the table data for a matrix-like ndarray (with headers)', function test( t ) {
	var expected;
	var headers;
	var buffer;
	var table;
	var data;
	var v;

	buffer = [ 14, 2, 'hello', false, 32.54, true, null, 'bye', 9, 10, 11, 12 ];
	data = ndarray( 'generic', buffer, [ 3, 4 ], [ 4, 1 ], 0, 'row-major' );
	headers = [ 'col1', 'col2', 'col3', 'col4' ];
	table = ctor( data, headers );

	v = table.data;
	expected = [ [ 14, 2, 'hello', false ], [ 32.54, true, null, 'bye' ], [ 9, 10, 11, 12 ] ];
	t.deepEqual( v, expected, 'sets table data' );

	v = table.headers;
	expected = [ 'col1', 'col2', 'col3', 'col4' ];
	t.deepEqual( v, expected, 'sets table headers' );

	t.end();
});

tape( 'the function sets the table data for a matrix-like ndarray (without headers)', function test( t ) {
	var expected;
	var buffer;
	var table;
	var data;
	var v;

	buffer = [ 14, 2, 'hello', false, 32.54, true, null, 'bye', 9, 10, 11, 12 ];
	data = ndarray( 'generic', buffer, [ 3, 4 ], [ 4, 1 ], 0, 'row-major' );
	table = ctor( data );

	v = table.data;
	expected = [ [ 14, 2, 'hello', false ], [ 32.54, true, null, 'bye' ], [ 9, 10, 11, 12 ] ];
	t.deepEqual( v, expected, 'sets table data' );

	v = table.headers;
	expected = null;
	t.deepEqual( v, expected, 'sets table headers' );

	t.end();
});
