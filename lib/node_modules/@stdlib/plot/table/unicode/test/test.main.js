/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var UnicodeTable = require( './../lib/main.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof UnicodeTable, 'function', 'main export is a function' );
	t.end();
});

tape( 'the export is a class constructor', function test( t ) {
	var table = new UnicodeTable();
	t.strictEqual( table instanceof UnicodeTable, true, 'returns class instance' );
	t.end();
});

tape( 'the constructor does not require the `new` keyword (no data, no options)', function test( t ) {
	var table;
	var ctor;

	ctor = UnicodeTable;
	table = ctor();

	t.strictEqual( table instanceof UnicodeTable, true, 'returns class instance' );
	t.end();
});

tape( 'the constructor does not require the `new` keyword (data)', function test( t ) {
	var table;
	var ctor;

	ctor = UnicodeTable;
	table = ctor( [ [ 1, 2, 3 ], [ 4, 5, 6 ] ] );

	t.strictEqual( table instanceof UnicodeTable, true, 'returns class instance' );
	t.end();
});

tape( 'the constructor does not require the `new` keyword (data and headers)', function test( t ) {
	var table;
	var ctor;

	ctor = UnicodeTable;
	table = ctor( [ [ 1, 2, 3 ], [ 4, 5, 6 ] ], [ 'col1', 'col2', 'col3' ] );

	t.strictEqual( table instanceof UnicodeTable, true, 'returns class instance' );
	t.end();
});

tape( 'the constructor does not require the `new` keyword (data and options)', function test( t ) {
	var table;
	var ctor;
	var data;

	ctor = UnicodeTable;
	data = [ [ 1, 2, 3 ], [ 4, 5, 6 ] ];
	table = ctor( data, {
		'alignment': 'left',
		'autoRender': false,
		'borders': [ '1', '23', '456', '7890' ],
		'bufferSize': 10,
		'cellPaddingLeft': 2,
		'cellPaddingRight': [ 2, 3, 4 ],
		'columnSeparator': 'None',
		'corners': [ '*', '*', '*', '*' ],
		'headerSeparator': '-=',
		'horizontalSeparatorMode': 'repeat',
		'joints': [ '*', '*', '*', '*', '*' ],
		'marginX': 2,
		'marginY': 4,
		'maxCellWidth': 10,
		'maxOutputWidth': 60,
		'rowSeparator': '_-',
		'verticalSeparatorMode': 'resume'
	});

	t.strictEqual( table instanceof UnicodeTable, true, 'returns class instance' );
	t.end();
});

tape( 'the constructor does not require the `new` keyword (data, headers and options)', function test( t ) {
	var headers;
	var table;
	var ctor;
	var data;

	ctor = UnicodeTable;
	data = [ [ 1, 2, 3 ], [ 4, 5, 6 ] ];
	headers = [ 'col1', 'col2', 'col3' ];
	table = ctor( data, headers, {
		'alignment': 'left',
		'autoRender': false,
		'borders': [ '1', '23', '456', '7890' ],
		'bufferSize': 10,
		'cellPaddingLeft': 2,
		'cellPaddingRight': [ 2, 3, 4 ],
		'columnSeparator': 'None',
		'corners': [ '*', '*', '*', '*' ],
		'headerSeparator': '-=',
		'horizontalSeparatorMode': 'repeat',
		'joints': [ '*', '*', '*', '*', '*' ],
		'marginX': 2,
		'marginY': 4,
		'maxCellWidth': 10,
		'maxOutputWidth': 60,
		'rowSeparator': '_-',
		'verticalSeparatorMode': 'resume'
	});

	t.strictEqual( table instanceof UnicodeTable, true, 'returns class instance' );
	t.end();
});

tape( 'the constructor will throw an error if provided an invalid options argument (no headers argument)', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		void 0,
		true,
		false,
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var table = new UnicodeTable( [ [ 1, 2, 3 ], [ 4, 5, 6 ] ], value ); // eslint-disable-line no-unused-vars
		};
	}
});

tape( 'the constructor will throw an error if provided an invalid options argument (headers argument)', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		null,
		void 0,
		true,
		false,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var table = new UnicodeTable( [ [ 1, 3 ], [ 4, 6 ] ], [ 'col1', 'col2' ], value ); // eslint-disable-line no-unused-vars
		};
	}
});

tape( 'the constructor throws an error if provided an invalid option (no headers argument)', function test( t ) {
	t.throws( foo, TypeError, 'throws an error' );
	t.end();

	function foo() {
		// eslint-disable-next-line no-unused-vars
		var table = new UnicodeTable( [ [ 1, 3 ], [ 4, 6 ] ], {
			'alignment': []
		});
	}
});

tape( 'the constructor throws an error if provided an invalid option (headers argument)', function test( t ) {
	t.throws( foo, TypeError, 'throws an error' );
	t.end();

	function foo() {
		// eslint-disable-next-line no-unused-vars
		var table = new UnicodeTable( [ [ 1, 3 ], [ 4, 6 ] ], [ 'col1', 'col2' ], {
			'alignment': []
		});
	}
});

tape( 'an instance has a `push` method for adding a row', function test( t ) {
	var table = new UnicodeTable();
	t.strictEqual( typeof table.push, 'function', 'has addRow method' );
	t.end();
});

tape( 'an instance has a `render` method for rendering the table', function test( t ) {
	var table = new UnicodeTable();
	t.strictEqual( typeof table.render, 'function', 'has render method' );
	t.end();
});
