/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var ctor = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof ctor, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns an empty string if no table data provided ', function test( t ) {
	var table;
	var str;

	table = ctor();

	str = table.render();
	t.strictEqual( str, '', 'returns empty string' );

	t.end();
});

tape( 'the function supports rendering a table', function test( t ) {
	var expected;
	var table;
	var str;

	table = ctor();
	table.data = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	table.headers = [ 'col1', 'col2', 'col3' ];

	expected = [
		'┌───────┬──────┬───────┐',
		'│  col1 │ col2 │  col3 │',
		'├───────┼──────┼───────┤',
		'│    45 │   33 │ hello │',
		'│ 32.54 │ true │  null │',
		'└───────┴──────┴───────┘'
	].join( '\n' );

	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	t.end();
});

tape( 'the function supports rendering a table (without headers)', function test( t ) {
	var expected;
	var table;
	var str;

	table = ctor();
	table.data = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];

	expected = [
		'┌───────┬──────┬───────┐',
		'│    45 │   33 │ hello │',
		'│ 32.54 │ true │  null │',
		'└───────┴──────┴───────┘'
	].join( '\n' );

	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	t.end();
});

tape( 'the function supports rendering a table (with row separators)', function test( t ) {
	var expected;
	var table;
	var str;

	table = ctor();
	table.data = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	table.headers = [ 'col1', 'col2', 'col3' ];
	table.rowSeparator = '─';

	expected = [
		'┌───────┬──────┬───────┐',
		'│  col1 │ col2 │  col3 │',
		'├───────┼──────┼───────┤',
		'│    45 │   33 │ hello │',
		'├───────┼──────┼───────┤',
		'│ 32.54 │ true │  null │',
		'└───────┴──────┴───────┘'
	].join( '\n' );

	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	t.end();
});

tape( 'the function supports rendering a table (without borders)', function test( t ) {
	var expected;
	var table;
	var str;

	table = ctor();
	table.data = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	table.headers = [ 'col1', 'col2', 'col3' ];
	table.borders = [ '', '', '', '' ];

	expected = [
		'  col1 │ col2 │  col3 ',
		'───────┼──────┼───────',
		'    45 │   33 │ hello ',
		' 32.54 │ true │  null '
	].join( '\n' );

	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	t.end();
});

tape( 'the function supports rendering a table (without column separators)', function test( t ) {
	var expected;
	var table;
	var str;

	table = ctor();

	table.data = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	table.headers = [ 'col1', 'col2', 'col3' ];
	table.columnSeparator = '';

	expected = [
		'┌────────────────────┐',
		'│  col1  col2   col3 │',
		'├────────────────────┤',
		'│    45    33  hello │',
		'│ 32.54  true   null │',
		'└────────────────────┘'
	].join( '\n' );

	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	t.end();
});

tape( 'the function supports rendering a table (without header separator)', function test( t ) {
	var expected;
	var table;
	var str;

	table = ctor();
	table.data = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	table.headers = [ 'col1', 'col2', 'col3' ];
	table.headerSeparator = '';

	expected = [
		'┌───────┬──────┬───────┐',
		'│  col1 │ col2 │  col3 │',
		'│    45 │   33 │ hello │',
		'│ 32.54 │ true │  null │',
		'└───────┴──────┴───────┘'
	].join( '\n' );

	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	t.end();
});

tape( 'the function supports rendering a table with different cell paddings', function test( t ) {
	var expected;
	var table;
	var str;

	table = ctor();
	table.data = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	table.headers = [ 'col1', 'col2', 'col3' ];

	table.cellPaddingLeft = 2;
	table.cellPaddingRight = 1;
	expected = [
		'┌────────┬───────┬────────┐',
		'│   col1 │  col2 │   col3 │',
		'├────────┼───────┼────────┤',
		'│     45 │    33 │  hello │',
		'│  32.54 │  true │   null │',
		'└────────┴───────┴────────┘'
	].join( '\n' );
	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	table.cellPaddingLeft = [ 2, 0, 3 ];
	table.cellPaddingRight = [ 0, 1, 2 ];
	expected = [
		'┌───────┬─────┬──────────┐',
		'│   col1│col2 │    col3  │',
		'├───────┼─────┼──────────┤',
		'│     45│  33 │   hello  │',
		'│  32.54│true │    null  │',
		'└───────┴─────┴──────────┘'
	].join( '\n' );
	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	t.end();
});

tape( 'the function supports rendering a table with a margin', function test( t ) {
	var expected;
	var table;
	var str;

	table = ctor();
	table.data = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	table.headers = [ 'col1', 'col2', 'col3' ];
	table.marginX = 1;
	table.marginY = 1;

	expected = [
		'',
		' ┌───────┬──────┬───────┐ ',
		' │  col1 │ col2 │  col3 │ ',
		' ├───────┼──────┼───────┤ ',
		' │    45 │   33 │ hello │ ',
		' │ 32.54 │ true │  null │ ',
		' └───────┴──────┴───────┘ ',
		''
	].join( '\n' );

	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	t.end();
});

tape( 'the function supports rendering a table with truncated data', function test( t ) {
	var expected;
	var table;
	var str;

	table = ctor();
	table.data = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	table.headers = [ 'col1', 'col2', 'col3' ];

	table.maxCellWidth = 6;
	expected = [
		'┌──────┬──────┬──────┐',
		'│ col1 │ col2 │ col3 │',
		'├──────┼──────┼──────┤',
		'│   45 │   33 │ h... │',
		'│ 3... │ true │ null │',
		'└──────┴──────┴──────┘'
	].join( '\n' );
	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	table.maxCellWidth = [ 6, 3, 5 ];
	expected = [
		'┌──────┬───┬─────┐',
		'│ col1 │ . │ ... │',
		'├──────┼───┼─────┤',
		'│   45 │ . │ ... │',
		'│ 3... │ . │ ... │',
		'└──────┴───┴─────┘'
	].join( '\n' );
	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	t.end();
});

tape( 'the function supports rendering a table with different alignments', function test( t ) {
	var expected;
	var table;
	var str;

	table = ctor();
	table.data = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	table.headers = [ 'col1', 'col2', 'col3' ];

	table.alignment = 'right';
	expected = [
		'┌───────┬──────┬───────┐',
		'│  col1 │ col2 │  col3 │',
		'├───────┼──────┼───────┤',
		'│    45 │   33 │ hello │',
		'│ 32.54 │ true │  null │',
		'└───────┴──────┴───────┘'
	].join( '\n' );
	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	table.alignment = 'left';
	expected = [
		'┌───────┬──────┬───────┐',
		'│ col1  │ col2 │ col3  │',
		'├───────┼──────┼───────┤',
		'│ 45    │ 33   │ hello │',
		'│ 32.54 │ true │ null  │',
		'└───────┴──────┴───────┘'
	].join( '\n' );
	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	table.alignment = 'center';
	expected = [
		'┌───────┬──────┬───────┐',
		'│  col1 │ col2 │  col3 │',
		'├───────┼──────┼───────┤',
		'│   45  │  33  │ hello │',
		'│ 32.54 │ true │  null │',
		'└───────┴──────┴───────┘'
	].join( '\n' );
	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	table.alignment = [ 'left', 'center', 'right' ];
	expected = [
		'┌───────┬──────┬───────┐',
		'│ col1  │ col2 │  col3 │',
		'├───────┼──────┼───────┤',
		'│ 45    │  33  │ hello │',
		'│ 32.54 │ true │  null │',
		'└───────┴──────┴───────┘'
	].join( '\n' );
	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	t.end();
});

tape( 'the function supports rendering a table with different horizontal line separator modes', function test( t ) {
	var expected;
	var table;
	var str;

	table = ctor();
	table.data = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	table.headers = [ 'col1', 'col2', 'col3' ];
	table.headerSeparator = '123';
	table.rowSeparator = '123';
	table.borders = [ '123', '│', '123', '│' ];

	table.horizontalSeparatorMode = 'resume';
	expected = [
		'┌1231231┬231231┬2312312┐',
		'│  col1 │ col2 │  col3 │',
		'├1231231┼231231┼2312312┤',
		'│    45 │   33 │ hello │',
		'├1231231┼231231┼2312312┤',
		'│ 32.54 │ true │  null │',
		'└1231231┴231231┴2312312┘'
	].join( '\n' );
	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	table.horizontalSeparatorMode = 'interpolate';
	expected = [
		'┌2312312┬123123┬2312312┐',
		'│  col1 │ col2 │  col3 │',
		'├2312312┼123123┼2312312┤',
		'│    45 │   33 │ hello │',
		'├2312312┼123123┼2312312┤',
		'│ 32.54 │ true │  null │',
		'└2312312┴123123┴2312312┘'
	].join( '\n' );
	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	table.horizontalSeparatorMode = 'repeat';
	expected = [
		'┌1231231┬123123┬1231231┐',
		'│  col1 │ col2 │  col3 │',
		'├1231231┼123123┼1231231┤',
		'│    45 │   33 │ hello │',
		'├1231231┼123123┼1231231┤',
		'│ 32.54 │ true │  null │',
		'└1231231┴123123┴1231231┘'
	].join( '\n' );
	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	t.end();
});

tape( 'the function supports rendering a table with different vertical line separator modes', function test( t ) {
	var expected;
	var table;
	var str;

	table = ctor();
	table.data = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	table.headers = [ 'col1', 'col2', 'col3' ];
	table.columnSeparator = '123';
	table.borders = [ '─', '123', '─', '123' ];

	table.verticalSeparatorMode = 'resume';
	expected = [
		'┌───────┬──────┬───────┐',
		'1  col1 1 col2 1  col3 1',
		'├───────┼──────┼───────┤',
		'2    45 2   33 2 hello 2',
		'3 32.54 3 true 3  null 3',
		'└───────┴──────┴───────┘'
	].join( '\n' );
	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	table.verticalSeparatorMode = 'interpolate';
	expected = [
		'┌───────┬──────┬───────┐',
		'2  col1 2 col2 2  col3 2',
		'├───────┼──────┼───────┤',
		'1    45 1   33 1 hello 1',
		'2 32.54 2 true 2  null 2',
		'└───────┴──────┴───────┘'
	].join( '\n' );
	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	table.verticalSeparatorMode = 'repeat';
	expected = [
		'┌───────┬──────┬───────┐',
		'1  col1 1 col2 1  col3 1',
		'├───────┼──────┼───────┤',
		'1    45 1   33 1 hello 1',
		'2 32.54 2 true 2  null 2',
		'└───────┴──────┴───────┘'
	].join( '\n' );
	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	t.end();
});

tape( 'the function supports rendering a wrapped table for long outputs', function test( t ) {
	var expected;
	var table;
	var str;

	table = ctor();
	table.data = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	table.headers = [ 'col1', 'col2', 'col3' ];
	table.maxOutputWidth = 16;

	expected = [
		'┌───────┬──────┐',
		'│  col1 │ col2 │',
		'├───────┼──────┤',
		'│    45 │   33 │',
		'│ 32.54 │ true │',
		'└───────┴──────┘',
		'┌───────┐',
		'│  col3 │',
		'├───────┤',
		'│ hello │',
		'│  null │',
		'└───────┘'
	].join( '\n' );

	str = table.render();
	t.strictEqual( str, expected, 'returns rendered table' );

	t.end();
});
