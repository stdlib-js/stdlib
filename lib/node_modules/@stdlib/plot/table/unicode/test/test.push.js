/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var noop = require( '@stdlib/utils/noop' );
var ctor = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof ctor, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function appends a row to existing data', function test( t ) {
	var expected;
	var table;
	var data;
	var row;
	var v;

	data = [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ];
	table = ctor( data );
	table.render = noop;

	row = [ 1, true, 'hello' ];
	table.push( row );
	v = table.data;

	expected = [ [ 45, 33, 'hello' ], [ 32.54, true, null ], [ 1, true, 'hello' ] ];
	t.deepEqual( v, expected, 'sets table data' );

	t.end();
});

tape( 'the function creates table data if no existing data found', function test( t ) {
	var expected;
	var table;
	var row;
	var v;

	table = ctor();
	table.render = noop;

	row = [ 1, true, 'hello' ];
	table.push( row );
	v = table.data;

	expected = [ row ];
	t.deepEqual( v, expected, 'sets table data' );

	t.end();
});

tape( 'the function throws an error if provided incorrect number of columns', function test( t ) {
	t.throws( badValue, RangeError, 'throws an error' );
	t.end();

	function badValue() {
		var table = ctor( [ [ 45, 33, 'hello' ], [ 32.54, true, null ] ] ); // 3 columns
		table.push( [ 1, 2 ] ); // 2 columns
	}
});

tape( 'the function sets the number of columns if no existing columns found', function test( t ) {
	t.throws( badValue, RangeError, 'throws an error' );
	t.end();

	function badValue() {
		var table = ctor();
		table.push( [ 1, 2, 3 ] ); // 3 columns
		table.headers = [ 'col1', 'col2' ]; // 2 columns
	}
});

tape( 'if appending data to the internal data buffer will result in the table data exceeding the data buffer size, the function will remove the first row', function test( t ) {
	var expected;
	var table;
	var data;
	var v;

	data = [ [ 1, 2, 3 ], [ 4, 5, 6 ] ];
	table = ctor( data, {
		'bufferSize': 2
	});
	table.render = noop;

	table.push( [ 7, 8, 9 ] );
	v = table.data;

	expected = [ [ 4, 5, 6 ], [ 7, 8, 9 ] ];
	t.deepEqual( v, expected, 'removes first row' );

	t.end();
});

tape( 'appending `data` triggers a `change` event', function test( t ) {
	var table;
	var data;

	data = [ [ 1, 2, 3 ], [ 4, 5, 6 ] ];
	table = ctor( data );
	table.render = noop;

	table.on( 'change', onChange );
	table.push( [ 7, 8, 9 ] );

	function onChange() {
		t.ok( true, 'triggers event' );
		t.end();
	}
});
