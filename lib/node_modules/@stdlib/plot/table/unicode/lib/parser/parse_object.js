/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var objectKeys = require( '@stdlib/utils/keys' );
var isCollection = require( '@stdlib/assert/is-collection' );
var format = require( '@stdlib/string/format' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );


// MAIN //

/**
* Parses an object into tabular data.
*
* @private
* @param {Object} data - tabular data
* @param {Collection} [headers] - column names
* @throws {Error} must provide correct number of rows
* @throws {Error} headers must exist in the object
* @throws {Error} each key must correspond to a collection
* @returns {Object} table metadata
*/
function parseObject( data, headers ) {
	var header;
	var widths;
	var cols;
	var rows;
	var len;
	var i;
	var j;

	// If headers don't exist, extract headers from data:
	if ( !headers ) {
		headers = objectKeys( data );
	}

	// Parsing data into a 2D array:
	rows = []; // final data after parsing
	widths = []; // max widths of each column
	for ( i = 0; i < headers.length; i++ ) {
		header = String( headers[ i ] );

		if ( !hasOwnProp( data, header ) ) {
			throw new Error( format( 'invalid data. Column `%s` not found in data. Value: `%s`.', header, data ) );
		}
		if ( !isCollection( data[ header ] ) ) {
			throw new Error( format( 'invalid data. Each key must correspond to an array. Value: `%s`.', data ) );
		}
		widths.push( header.length );
		for ( j = 0; j < data[ header ].length; j++ ) {
			len = String( data[ header ][ j ] ).length;

			// Updating max width of column:
			if ( len > widths[ i ] ) {
				widths[ i ] = len;
			}
			if ( !rows[ j ] ) {
				rows[ j ] = [];
			}
			rows[ j ][ i ] = data[ header ][ j ];
		}
	}
	// Checking if all columns have the same number of rows...
	cols = data[ headers[ 0 ] ].length;
	for ( i = 1; i < headers.length; i++ ) {
		if ( cols !== data[ headers[ i ] ].length ) {
			throw new Error( 'invalid data. All columns must have the same number of rows' );
		}
	}
	return {
		'headers': headers,
		'data': rows,
		'columnWidths': widths
	};
}


// EXPORTS //

module.exports = parseObject;
