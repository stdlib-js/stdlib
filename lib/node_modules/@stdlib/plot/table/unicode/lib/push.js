/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var format = require( '@stdlib/string/format' );
var isCollection = require( '@stdlib/assert/is-collection' );
var parse2dArray = require( './parser/parse_2d_array.js' );


// MAIN //

/**
* Appends row.
*
* @private
* @param {Collection} row - row to add
* @throws {TypeError} must provide a collection
* @throws {RangeError} must provide correct number of columns
* @returns {UnicodeTable} class instance
*/
function push( row ) {
	/* eslint-disable no-invalid-this */
	var parsed;

	if ( !isCollection ) {
		throw new TypeError( format( 'invalid argument. Must provide a collection. Value: `%s`.', row ) );
	}
	// If data doesn't already exist, parse row as new data...
	if ( !this._data || !this._data.length ) {
		parsed = parse2dArray( [ row ], this._headers );
		if ( this._numColumns ) {
			if ( parsed.columnWidths.length !== this._numColumns ) {
				throw new RangeError( format( 'invalid argument. `%s` must have `%d` number of columns. Value: `%d`.', 'data', this._numColumns, parsed.columnWidths.length ) );
			}
		} else {
			this._numColumns = parsed.columnWidths.length;
		}
		this._data = parsed.data;
		this._headers = parsed.headers;
		this._columnWidths = parsed.columnWidths;
		this.emit( 'change' );
		return this;
	}
	if ( this._numColumns !== row.length ) {
		throw new RangeError( format( 'invalid argument. `%s` must have `%d` number of columns. Value: `%d`.', 'data', this._numColumns, row.length ) );
	}
	if ( this._data.length >= this._bufferSize ) {
		this._data.shift();
	}
	this._data.push( row );
	parsed = parse2dArray( this._data, this._headers );
	this._columnWidths = parsed.columnWidths;
	this.emit( 'change' );
	return this;
}


// EXPORTS //

module.exports = push;
