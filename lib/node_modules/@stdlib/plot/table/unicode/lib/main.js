/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable max-lines */

'use strict';

// MODULES //

var EventEmitter = require( 'events' ).EventEmitter;
var logger = require( 'debug' );
var format = require( '@stdlib/string/format' );
var defineProperty = require( '@stdlib/utils/define-property' );
var objectKeys = require( '@stdlib/utils/keys' );
var inherit = require( '@stdlib/utils/inherit' );
var isObject = require( '@stdlib/assert/is-plain-object' );
var isCollection = require( '@stdlib/assert/is-collection' );
var mergeFcn = require( '@stdlib/utils/merge' ).factory;
var pick = require( '@stdlib/utils/pick' );
var setAlignment = require( './props/alignment/set.js' );
var getAlignment = require( './props/alignment/get.js' );
var setAutoRender = require( './props/auto-render/set.js' );
var getAutoRender = require( './props/auto-render/get.js' );
var setBorders = require( './props/borders/set.js' );
var getBorders = require( './props/borders/get.js' );
var setBufferSize = require( './props/buffer-size/set.js' );
var getBufferSize = require( './props/buffer-size/get.js' );
var setCellPaddingLeft = require( './props/cell-padding-left/set.js' );
var getCellPaddingLeft = require( './props/cell-padding-left/get.js' );
var setCellPaddingRight = require( './props/cell-padding-right/set.js' );
var getCellPaddingRight = require( './props/cell-padding-right/get.js' );
var setCorners = require( './props/corners/set.js' );
var getCorners = require( './props/corners/get.js' );
var setColumnSeparator = require( './props/column-separator/set.js' );
var getColumnSeparator = require( './props/column-separator/get.js' );
var setData = require( './props/data/set.js' );
var getData = require( './props/data/get.js' );
var setHeaders = require( './props/headers/set.js' );
var getHeaders = require( './props/headers/get.js' );
var setHeaderSeparator = require( './props/header-separator/set.js' );
var getHeaderSeparator = require( './props/header-separator/get.js' );
var setHorizontalSeparatorMode = require( './props/horizontal-separator-mode/set.js' ); // eslint-disable-line id-length
var getHorizontalSeparatorMode = require( './props/horizontal-separator-mode/get.js' ); // eslint-disable-line id-length
var setJoints = require( './props/joints/set.js' );
var getJoints = require( './props/joints/get.js' );
var setMarginX = require( './props/margin-x/set.js' );
var getMarginX = require( './props/margin-x/get.js' );
var setMarginY = require( './props/margin-y/set.js' );
var getMarginY = require( './props/margin-y/get.js' );
var setMaxCellWidth = require( './props/max-cell-width/set.js' );
var getMaxCellWidth = require( './props/max-cell-width/get.js' );
var setMaxOutputWidth = require( './props/max-output-width/set.js' );
var getMaxOutputWidth = require( './props/max-output-width/get.js' );
var setRowSeparator = require( './props/row-separator/set.js' );
var getRowSeparator = require( './props/row-separator/get.js' );
var setVerticalSeparatorMode = require( './props/vertical-separator-mode/set.js' );
var getVerticalSeparatorMode = require( './props/vertical-separator-mode/get.js' );
var defaults = require( './defaults.js' );
var render = require( './render.js' );
var push = require( './push.js' );
var parse = require( './parse.js' );


// VARIABLES //

var debug = logger( 'table:unicode:main' );

var merge = mergeFcn({
	'extend': false
});

// List of private properties (note: keep in alphabetical order):
var PRIVATE_PROPS = [
	'_alignment',
	'_autoRender',
	'_borders',
	'_bufferSize',
	'_cellPaddingLeft',
	'_cellPaddingRight',
	'_corners',
	'_columnSeparator',
	'_columnWidths',
	'_data',
	'_headers',
	'_headerSeparator',
	'_horizontalSeparatorMode',
	'_joints',
	'_marginX',
	'_marginY',
	'_maxCellWidth',
	'_maxOutputWidth',
	'_numColumns',
	'_rowSeparator',
	'_verticalSeparatorMode'
];

// List of options properties (note: keep in alphabetical order):
var OPTIONS_PROPS = [
	'alignment',
	'autoRender',
	'borders',
	'bufferSize',
	'cellPaddingLeft',
	'cellPaddingRight',
	'columnSeparator',
	'corners',
	'headerSeparator',
	'horizontalSeparatorMode',
	'joints',
	'marginX',
	'marginY',
	'maxCellWidth',
	'maxOutputWidth',
	'rowSeparator',
	'verticalSeparatorMode'
];


// MAIN //

/**
* Unicode table constructor.
*
* @constructor
* @param {(Object|Array<Object>|Array<Array>|MatrixLike)} [data] - table data
* @param {Collection} [headers] - table headers
* @param {Options} [options] - table options
* @param {(Array<string>|string)} [options.alignment='right'] - datum's cell alignment(s)
* @param {boolean} [options.autoRender=false] - boolean indicating whether to re-render on each `change` event
* @param {Array<string>} [options.borders=[ '─', '│', '─', '│' ]] - border characters
* @param {(PositiveInteger|null)} [options.bufferSize] - size of data buffer
* @param {(Array<NonNegativeInteger>|NonNegativeInteger)} [options.cellPaddingLeft=1] - cell's left padding
* @param {(Array<NonNegativeInteger>|NonNegativeInteger)} [options.cellPaddingRight=1] - cell's right padding
* @param {string} [options.columnSeparator='│'] - column separator character(s)
* @param {Array<string>} [options.corners=[ '┌', '┐', '┘', '└' ]] - corner characters
* @param {string} [options.headerSeparator='─'] - header separator character(s)
* @param {string} [options.horizontalSeparatorMode='resume'] - horizontal line separator mode
* @param {Array<string>} [options.joints=[ '┼', '┬', '┤', '┴', '├' ]] - joint characters
* @param {NonNegativeInteger} [options.marginX=0] - horizontal output margin
* @param {NonNegativeInteger} [options.marginY=0] - vertical output margin
* @param {(Array<NonNegativeInteger>|NonNegativeInteger)} [options.maxCellWidth] - maximum cell width(s)
* @param {NonNegativeInteger} [options.maxOutputWidth] - maximum output width
* @param {string} [options.rowSeparator=''] - row separator character(s)
* @param {string} [options.verticalSeparatorMode='resume'] - vertical line separator mode
* @throws {TypeError} must provide valid options
* @returns {UnicodeTable} table instance
*
* @example
* var UnicodeTable = require( '@stdlib/plot/table/unicode' );
*
* var data = [ [ 1, 2 ], [ 3, 4 ] ];
* var headers = [ 'A', 'B' ]
* var table = UnicodeTable( data, headers );
*
* var str = table.render();
* // returns '...'
*/
function UnicodeTable() {
	var headers;
	var options;
	var parsed;
	var nargs;
	var data;
	var opts;
	var keys;
	var self;
	var key;
	var i;

	nargs = arguments.length;
	if ( !( this instanceof UnicodeTable ) ) {
		if ( nargs === 0 ) {
			return new UnicodeTable();
		}
		if ( nargs === 1 ) {
			return new UnicodeTable( arguments[ 0 ] );
		}
		if ( nargs === 2 ) {
			return new UnicodeTable( arguments[ 0 ], arguments[ 1 ] );
		}
		return new UnicodeTable( arguments[ 0 ], arguments[ 1 ], arguments[ 2 ] ); // eslint-disable-line max-len
	}
	self = this;

	// Extract table-specific options...
	opts = defaults();
	if ( nargs === 0 ) {
		data = null;
		headers = null;
		options = {};
	} else if ( nargs === 1 ) {
		data = arguments[ 0 ];
		headers = null;
		options = {};
	} else if ( nargs === 2 ) {
		if ( isCollection( arguments[ 1 ] ) ) {
			data = arguments[ 0 ];
			headers = arguments[ 1 ];
			options = {};
		} else {
			data = arguments[ 0 ];
			headers = null;
			options = arguments[ 1 ];
			if ( !isObject( options ) ) {
				throw new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );
			}
		}
	} else {
		data = arguments[ 0 ];
		headers = arguments[ 1 ];
		options = arguments[ 2 ];
		if ( !isObject( options ) ) {
			throw new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );
		}
	}
	opts = merge( opts, pick( options, OPTIONS_PROPS ) );

	debug( 'Creating an instance with the following configuration: %s.', JSON.stringify( opts ) );

	// Initialize private table-specific properties...
	for ( i = 0; i < PRIVATE_PROPS.length; i++ ) {
		defineProperty( this, PRIVATE_PROPS[i], {
			'configurable': false,
			'enumerable': false,
			'writable': true,
			'value': null
		});
	}
	// Set table data and headers...
	if ( data || headers ) {
		parsed = parse( data, headers );
		this._data = parsed.data;
		this._headers = parsed.headers;
		this._columnWidths = parsed.columnWidths;
		this._numColumns = parsed.columnWidths.length;
	}

	// Set table-specific properties...
	keys = objectKeys( opts );
	for ( i = 0; i < keys.length; i++ ) {
		key = keys[ i ];
		this[ key ] = opts[ key ];
	}
	// Add event listeners:
	this.on( 'change', onChange );
	this.on( 'render', onRender );

	return this;

	/**
	* Callback invoked upon receiving a `change` event.
	*
	* @private
	*/
	function onChange() {
		/* eslint-disable no-underscore-dangle */
		debug( 'Received a change event.' );
		if ( self._autoRender ) {
			self.render();
		}
	}

	/**
	* Callback invoked upon receiving a `render` event.
	*
	* @private
	* @param {string} table - rendered table
	*/
	function onRender() {
		debug( 'Received a render event.' );
	}
}

/*
* Inherit from the `EventEmitter` prototype.
*/
inherit( UnicodeTable, EventEmitter );

/**
* Alignment(s) of datum in cell.
*
* @name alignment
* @memberof UnicodeTable.prototype
* @type {(Array<string>|string)}
* @throws {TypeError} must be a supported alignment string or an array of alignment strings
* @default 'right'
*
* @example
* var table = new UnicodeTable();
* table.alignment = 'left';
* var alignment = table.alignment;
* // returns 'left'
*
* @example
* var table = new UnicodeTable();
* table.alignment = [ 'left', 'right', 'center' ];
* var alignment = table.alignment;
* // returns [ 'left', 'right', 'center' ]
*/
defineProperty( UnicodeTable.prototype, 'alignment', {
	'configurable': false,
	'enumerable': true,
	'set': setAlignment,
	'get': getAlignment
});

/**
* Rendering mode.
*
* ## Notes
*
* -   If `true`, an instance re-renders on each `change` event.
*
* @name autoRender
* @memberof UnicodeTable.prototype
* @type {boolean}
* @throws {TypeError} must be a boolean
* @default false
*
* @example
* var table = new UnicodeTable();
* table.autoRender = true;
* var mode = table.autoRender;
* // returns true
*/
defineProperty( UnicodeTable.prototype, 'autoRender', {
	'configurable': false,
	'enumerable': true,
	'set': setAutoRender,
	'get': getAutoRender
});

/**
* Border characters.
*
* @name borders
* @memberof UnicodeTable.prototype
* @type {Array<string>}
* @throws {TypeError} must be an array of four strings
* @default '[ "─", "│", "─", "│" ]'
*
* @example
* var table = new UnicodeTable();
* table.borders = [ '=', '!', '=', '!' ];
* var borders = table.borders;
* // returns [ '=', '!', '=', '!' ]
*/
defineProperty( UnicodeTable.prototype, 'borders', {
	'configurable': false,
	'enumerable': true,
	'set': setBorders,
	'get': getBorders
});

/**
* Size of data buffer.
*
* @name bufferSize
* @memberof UnicodeTable.prototype
* @type {(PositiveInteger|null)}
* @throws {TypeError} must be a positive integer or null
* @throws {RangeError} must be greater than or equal to the number of rows
*
* @example
* var table = new UnicodeTable();
* table.bufferSize = 20;
*/
defineProperty( UnicodeTable.prototype, 'bufferSize', {
	'configurable': false,
	'enumerable': true,
	'set': setBufferSize,
	'get': getBufferSize
});

/**
* Cell's left padding.
*
* @name cellPaddingLeft
* @memberof UnicodeTable.prototype
* @type {(Array<NonNegativeInteger>|NonNegativeInteger)}
* @throws {TypeError} must be a non-negative integer or an array of non-negative integers
* @default '1'
*
* @example
* var table = new UnicodeTable();
* table.cellPaddingLeft = 3;
* var padding = table.cellPaddingLeft;
* // returns 3
*
* @example
* var table = new UnicodeTable();
* table.cellPaddingLeft = [ 3, 2 ];
* var paddings = table.cellPaddingLeft;
* // returns [ 3, 2 ]
*/
defineProperty( UnicodeTable.prototype, 'cellPaddingLeft', {
	'configurable': false,
	'enumerable': true,
	'set': setCellPaddingLeft,
	'get': getCellPaddingLeft
});

/**
* Cell's right padding.
*
* @name cellPaddingRight
* @memberof UnicodeTable.prototype
* @type {(Array<NonNegativeInteger>|NonNegativeInteger)}
* @throws {TypeError} must be a non-negative integer or an array of non-negative integers
* @default '1'
*
* @example
* var table = new UnicodeTable();
* table.cellPaddingRight = 3;
* var padding = table.cellPaddingRight;
* // returns 3
*
* @example
* var table = new UnicodeTable();
* table.cellPaddingRight = [ 3, 2 ];
* var paddings = table.cellPaddingRight;
* // returns [ 3, 2 ]
*/
defineProperty( UnicodeTable.prototype, 'cellPaddingRight', {
	'configurable': false,
	'enumerable': true,
	'set': setCellPaddingRight,
	'get': getCellPaddingRight
});

/**
* Corner characters.
*
* @name corners
* @memberof UnicodeTable.prototype
* @type {Array<string>}
* @throws {TypeError} must be an array of four grapheme clusters
* @default '[ "┌", "┐", "┘", "└" ]'
*
* @example
* var table = new UnicodeTable();
* table.corners = [ '*', '*', '*', '*' ];
* var corners = table.corners;
* // returns [ '*', '*', '*', '*' ]
*/
defineProperty( UnicodeTable.prototype, 'corners', {
	'configurable': false,
	'enumerable': true,
	'set': setCorners,
	'get': getCorners
});

/**
* Column separator character(s).
*
* @name columnSeparator
* @memberof UnicodeTable.prototype
* @type {string}
* @throws {TypeError} must be a string
* @default '│'
*
* @example
* var table = new UnicodeTable();
* table.columnSeparator = '$=';
* var separator = table.columnSeparator;
* // returns '$='
*/
defineProperty( UnicodeTable.prototype, 'columnSeparator', {
	'configurable': false,
	'enumerable': true,
	'set': setColumnSeparator,
	'get': getColumnSeparator
});

/**
* Table data.
*
* @name data
* @memberof UnicodeTable.prototype
* @type {Array<Array>|MatrixLike}
* @throws {TypeError} must be a 2 dimensional array/ndarray
* @throws {RangeError} must provide correct number of columns
* @throws {RangeError} rows must not exceed maximum data buffer size
*
* @example
* var table = new UnicodeTable();
* table.data = [ [ 'a', 'b' ], [ 1, 2 ] ];
* var data = table.data;
* // returns [ [ 'a', 'b' ], [ 1, 2 ] ]
*/
defineProperty( UnicodeTable.prototype, 'data', {
	'configurable': false,
	'enumerable': true,
	'set': setData,
	'get': getData
});

/**
* Table headers.
*
* @name headers
* @memberof UnicodeTable.prototype
* @type {Collection}
* @throws {TypeError} must be a collection
* @throws {RangeError} must provide correct number of columns
*
* @example
* var table = new UnicodeTable();
* table.headers = [ 'name', 'age' ];
* var headers = table.headers;
* // returns [ 'name', 'age' ]
*/
defineProperty( UnicodeTable.prototype, 'headers', {
	'configurable': false,
	'enumerable': true,
	'set': setHeaders,
	'get': getHeaders
});

/**
* Header separator character(s).
*
* @name headerSeparator
* @memberof UnicodeTable.prototype
* @type {string}
* @throws {TypeError} must be a string
* @default '─'
*
* @example
* var table = new UnicodeTable();
* table.headerSeparator = '$=';
* var separator = table.headerSeparator;
* // returns '$='
*/
defineProperty( UnicodeTable.prototype, 'headerSeparator', {
	'configurable': false,
	'enumerable': true,
	'set': setHeaderSeparator,
	'get': getHeaderSeparator
});

/**
* Horizontal line separator mode.
*
* @name horizontalSeparatorMode
* @memberof UnicodeTable.prototype
* @type {string}
* @throws {TypeError} must be a supported line separator mode string
* @default 'resume'
*
* @example
* var table = new UnicodeTable();
* table.horizontalSeparatorMode = 'repeat';
* var mode = table.horizontalSeparatorMode;
* // returns 'repeat'
*/
defineProperty( UnicodeTable.prototype, 'horizontalSeparatorMode', {
	'configurable': false,
	'enumerable': true,
	'set': setHorizontalSeparatorMode,
	'get': getHorizontalSeparatorMode
});

/**
* Joint characters.
*
* @name joints
* @memberof UnicodeTable.prototype
* @type {Array<string>}
* @throws {TypeError} must be an array of five grapheme clusters
* @default '[ "┼", "┬", "┤", "┴", "├" ]'
*
* @example
* var table = new UnicodeTable();
* table.joints = [ '*', '*', '*', '*', '*' ];
* var joints = table.joints;
* // returns [ '*', '*', '*', '*', '*' ]
*/
defineProperty( UnicodeTable.prototype, 'joints', {
	'configurable': false,
	'enumerable': true,
	'set': setJoints,
	'get': getJoints
});

/**
* Horizontal output margin.
*
* @name marginX
* @memberof UnicodeTable.prototype
* @type {NonNegativeInteger}
* @throws {TypeError} must be a non-negative integer
* @default '0'
*
* @example
* var table = new UnicodeTable();
* table.marginX = 2;
* var margin = table.marginX;
* // returns 2
*/
defineProperty( UnicodeTable.prototype, 'marginX', {
	'configurable': false,
	'enumerable': true,
	'set': setMarginX,
	'get': getMarginX
});

/**
* Vertical output margin.
*
* @name marginY
* @memberof UnicodeTable.prototype
* @type {NonNegativeInteger}
* @throws {TypeError} must be a non-negative integer
* @default '0'
*
* @example
* var table = new UnicodeTable();
* table.marginY = 2;
* var margin = table.marginY;
* // returns 2
*/
defineProperty( UnicodeTable.prototype, 'marginY', {
	'configurable': false,
	'enumerable': true,
	'set': setMarginY,
	'get': getMarginY
});

/**
* Maximum cell width.
*
* @name maxCellWidth
* @memberof UnicodeTable.prototype
* @type {(Array<NonNegativeInteger|null>|NonNegativeInteger|null)}
* @throws {TypeError} must be a non-negative integer, an array of non-negative integers or null
* @default '+infinity'
*
* @example
* var table = new UnicodeTable();
* table.maxCellWidth = 10;
* var width = table.maxCellWidth;
* // returns 10
*
* @example
* var table = new UnicodeTable();
* table.maxCellWidth = [ 10, 8 ];
* var widhts = table.maxCellWidth;
* // returns [ 10, 8 ]
*/
defineProperty( UnicodeTable.prototype, 'maxCellWidth', {
	'configurable': false,
	'enumerable': true,
	'set': setMaxCellWidth,
	'get': getMaxCellWidth
});

/**
* Maximum output width.
*
* @name maxOutputWidth
* @memberof UnicodeTable.prototype
* @type {(NonNegativeInteger|null)}
* @throws {TypeError} must be a non-negative integer or null
* @default '+infinity'
*
* @example
* var table = new UnicodeTable();
* table.maxOutputWidth = 50;
* var width = table.maxOutputWidth;
* // returns 50
*/
defineProperty( UnicodeTable.prototype, 'maxOutputWidth', {
	'configurable': false,
	'enumerable': true,
	'set': setMaxOutputWidth,
	'get': getMaxOutputWidth
});

/**
* Row separator character(s).
*
* @name rowSeparator
* @memberof UnicodeTable.prototype
* @type {string}
* @throws {TypeError} must be a string
* @default ''
*
* @example
* var table = new UnicodeTable();
* table.rowSeparator = '$=';
* var separator = table.rowSeparator;
* // returns '$='
*/
defineProperty( UnicodeTable.prototype, 'rowSeparator', {
	'configurable': false,
	'enumerable': true,
	'set': setRowSeparator,
	'get': getRowSeparator
});

/**
* Vertical line separator mode.
*
* @name verticalSeparatorMode
* @memberof UnicodeTable.prototype
* @type {string}
* @throws {TypeError} must be a supported line separator mode string
* @default 'resume'
*
* @example
* var table = new UnicodeTable();
* table.verticalSeparatorMode = 'repeat';
* var mode = table.verticalSeparatorMode;
* // returns 'repeat'
*/
defineProperty( UnicodeTable.prototype, 'verticalSeparatorMode', {
	'configurable': false,
	'enumerable': true,
	'set': setVerticalSeparatorMode,
	'get': getVerticalSeparatorMode
});

/**
* Appends row to table data.
*
* @name push
* @memberof UnicodeTable.prototype
* @type {Function}
* @param {Collection} row - row to add
* @throws {TypeError} must provide a collection with equal number of columns to existing data
* @returns {UnicodeTable} class instance
*
* @example
* var table = new UnicodeTable( [ [ 1, 2 ], [ 3, 4 ] ] );
* var data = table.data;
* // returns [ [ 1, 2 ], [ 3, 4 ] ]
*
* table.push( [ 5, 6 ] );
* data = table.data;
* // returns [ [ 1, 2 ], [ 3, 4 ], [ 5, 6 ] ]
*/
UnicodeTable.prototype.push = push;

/**
* Renders a table.
*
* @name render
* @memberof UnicodeTable.prototype
* @type {Function}
* @throws {Error} output must be able to accommodate every column individually
* @returns {string} rendered table
*
* @example
* var table = new UnicodeTable( [ [ 1, 2 ], [ 3, 4 ] ], [ 'A', 'B' ] );
* var str = table.render();
* // returns '...'
*/
UnicodeTable.prototype.render = render;


// EXPORTS //

module.exports = UnicodeTable;
