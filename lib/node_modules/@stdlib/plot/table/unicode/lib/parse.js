/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var format = require( '@stdlib/string/format' );
var isMatrixLike = require( '@stdlib/assert/is-matrix-like' );
var isPlainObject = require( '@stdlib/assert/is-plain-object' );
var isObjectArray = require( '@stdlib/assert/is-object-array' );
var isArrayArray = require( '@stdlib/assert/is-array-array' );
var isCollection = require( '@stdlib/assert/is-collection' );
var ndarray2array = require( '@stdlib/ndarray/to-array' );
var parseObject = require( './parser/parse_object.js' );
var parseObjectsList = require( './parser/parse_objects_list.js' );
var parse2dArray = require( './parser/parse_2d_array.js' );
var parseHeaders = require( './parser/parse_headers.js' );


// MAIN //

/**
* Sets the table data.
*
* @private
* @param {(Object|Array<Object>|Array<Array>|MatrixLike)} data - table data
* @param {Collection} headers - table headers
* @throws {TypeError} first argument must be an object, array of objects, or a 2 dimensional array/ndarray
* @throws {TypeError} second argument must be a collection
* @returns {Object} table metadata
*/
function setData( data, headers ) {
	var parsed;

	if ( headers && !isCollection( headers ) ) {
		throw new TypeError( format( 'invalid argument. `%s` argument must be a collection. Value: `%s`.', 'headers', headers ) );
	}
	if ( !data ) {
		if ( !headers ) {
			return {
				'data': null,
				'headers': null,
				'columnWidths': null
			};
		}
		parsed = parseHeaders( headers );
		return parsed;
	}
	// Parse according to data-type...
	if ( isMatrixLike( data ) ) {
		parsed = parse2dArray( ndarray2array( data ), headers );
	} else if ( isArrayArray( data ) ) {
		parsed = parse2dArray( data, headers );
	} else if ( isObjectArray( data ) ) {
		parsed = parseObjectsList( data, headers );
	} else if ( isPlainObject( data ) ) {
		parsed = parseObject( data, headers );
	} else {
		throw new TypeError( format( 'invalid argument. `%s` argument must be an object, array of objects, or a 2 dimensional array/ndarray. Value: `%s`.', 'data', data ) );
	}
	return parsed;
}


// EXPORTS //

module.exports = setData;
