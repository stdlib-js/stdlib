/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' );
var isArray = require( '@stdlib/assert/is-array' );
var isNull = require( '@stdlib/assert/is-null' );
var isEqual = require( '@stdlib/assert/deep-equal' );
var format = require( '@stdlib/string/format' );
var FLOAT64_MAX = require( '@stdlib/constants/float64/max' );


// MAIN //

/**
* Sets the table's max cell width(s).
*
* @private
* @param {(Array<NonNegativeInteger|null>|NonNegativeInteger|null)} width - max cell width(s)
* @throws {TypeError} must provide a non-negative integer, an array of non-negative integers or null
* @throws {RangeError} must provide correct number of columns if providing an array
*/
function set( width ) {
	/* eslint-disable no-invalid-this */
	var out;
	var FLG;
	var i;

	FLG = isNull( width );
	if ( !isNonNegativeInteger( width ) && !isArray( width ) && !FLG ) {
		throw new TypeError( format( 'invalid assignment. `%s` must be a non-negative integer or an array of non-negative integers. Value: `%s`.', 'width', width ) );
	}
	if ( isArray( width ) ) {
		out = [];
		for ( i = 0; i < width.length; i++ ) {
			if ( isNull( width[ i ] ) ) {
				out.push( FLOAT64_MAX );
				continue;
			}
			if ( !isNonNegativeInteger( width[ i ] ) ) {
				throw new TypeError( format( 'invalid assignment. `%s` must be a non-negative integer or an array of non-negative integers. Value: `%s`.', 'width', width ) );
			}
			out.push( width[ i ] );
		}
		if ( this._numColumns ) {
			if ( out.length !== this._numColumns ) {
				throw new RangeError( format( 'invalid assignment. `%s` must have `%d` number of columns. Value: `%d`.', 'width', this._numColumns, width.length ) );
			}
		} else {
			this._numColumns = out.length;
		}
	} else if ( FLG ) {
		out = FLOAT64_MAX;
	} else {
		out = width;
	}
	if ( !isEqual( out, this._maxCellWidth ) ) {
		this._maxCellWidth = out;
		this.emit( 'change' );
	}
}


// EXPORTS //

module.exports = set;
