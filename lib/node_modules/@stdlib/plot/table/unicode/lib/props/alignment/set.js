/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var contains = require( '@stdlib/array/base/assert/contains' ).factory;
var isString = require( '@stdlib/assert/is-string' );
var isStringArray = require( '@stdlib/assert/is-string-array' );
var isEqual = require( '@stdlib/assert/deep-equal' );
var format = require( '@stdlib/string/format' );


// VARIABLES //

var isValidAlignment = contains( [ 'right', 'center', 'left' ] );


// MAIN //

/**
* Sets the table's cell alignment(s).
*
* @private
* @param {(Array<string>|string)} alignment - cell alignment(s)
* @throws {TypeError} must be a supported alignment string or an array of alignment strings
* @throws {RangeError} must provide correct number of columns if providing an array
*/
function set( alignment ) {
	/* eslint-disable no-invalid-this */
	var i;
	if ( isString( alignment ) ) {
		if ( !isValidAlignment( alignment ) ) {
			throw new TypeError( format( 'invalid assignment. `%s` must be a supported alignment string. Value: `%s`.', 'alignment', alignment ) );
		}
	} else if ( isStringArray( alignment ) ) {
		for ( i = 0; i < alignment.length; i++ ) {
			if ( !isValidAlignment( alignment[ i ] ) ) {
				throw new TypeError( format( 'invalid assignment. `%s` must be an array of supported alignment strings. Value: `%s`.', 'alignment', alignment ) );
			}
		}
		if ( this._numColumns ) {
			if ( alignment.length !== this._numColumns ) {
				throw new RangeError( format( 'invalid assignment. `%s` must have `%d` number of columns. Value: `%d`.', 'alignment', this._numColumns, alignment.length ) );
			}
		} else {
			this._numColumns = alignment.length;
		}
	} else {
		throw new TypeError( format( 'invalid assignment. `%s` must be a string or an array of strings. Value: `%s`.', 'alignment', alignment ) );
	}
	if ( !isEqual( alignment, this._alignment ) ) {
		this._alignment = alignment;
		this.emit( 'change' );
	}
}


// EXPORTS //

module.exports = set;
