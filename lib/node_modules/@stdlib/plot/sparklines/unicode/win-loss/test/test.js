/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var noop = require( '@stdlib/utils/noop' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var WinLossChart = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof WinLossChart, 'function', 'main export is a function' );
	t.end();
});

tape( 'the export is a class constructor', function test( t ) {
	var chart = new WinLossChart();
	t.equal( chart instanceof WinLossChart, true, 'returns class instance' );
	t.end();
});

tape( 'the constructor does not require the `new` keyword (no options)', function test( t ) {
	var chart;
	var ctor;

	ctor = WinLossChart;
	chart = ctor();

	t.equal( chart instanceof WinLossChart, true, 'returns class instance' );
	t.end();
});

tape( 'the constructor does not require the `new` keyword (options)', function test( t ) {
	var chart;
	var ctor;

	ctor = WinLossChart;
	chart = ctor({
		'window': 10,
		'yValue': noop,
		'data': [ 1, -1, -1 ]
	});

	t.equal( chart instanceof WinLossChart, true, 'returns class instance' );
	t.end();
});

tape( 'the constructor will throw if provided an invalid options argument', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		null,
		NaN,
		undefined,
		true,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			// eslint-disable-next-line no-unused-vars
			var chart = new WinLossChart( value );
		};
	}
});

tape( 'the constructor throws if provided an invalid option', function test( t ) {
	t.throws( foo, TypeError, 'throws an error' );
	t.end();

	function foo() {
		// eslint-disable-next-line no-unused-vars
		var chart = new WinLossChart({
			'window': []
		});
	}
});

tape( 'the constructor throws if provided a `window` option which is less than the number of data elements', function test( t ) {
	t.throws( foo, Error, 'throws an error' );
	t.end();

	function foo() {
		// eslint-disable-next-line no-unused-vars
		var chart = new WinLossChart({
			'data': [ 1, -1, 1, 1, -1 ],
			'window': 3
		});
	}
});

tape( 'an instance has a writable `data` property', function test( t ) {
	var expected;
	var chart;
	var opts;

	chart = new WinLossChart();

	t.deepEqual( chart.data, [], 'default value is an empty array' );

	opts = {
		'data': [ 1, -1, 1 ]
	};
	chart = new WinLossChart( opts );

	expected = [
		{
			'y': 1
		},
		{
			'y': -1
		},
		{
			'y': 1
		}
	];

	t.deepEqual( chart.data, expected, 'returns expected data' );

	chart.data = [ 2, 2, -2 ];

	expected = [
		{
			'y': 2
		},
		{
			'y': 2
		},
		{
			'y': -2
		}
	];

	t.deepEqual( chart.data, expected, 'returns expected data' );

	t.end();
});

tape( 'an instance has a writable `yValue` property', function test( t ) {
	var chart;
	var opts;
	var f;

	chart = new WinLossChart();
	f = chart.yValue;

	t.equal( f(5.0), 5.0, 'default value is an identity function' );

	opts = {
		'yValue': noop
	};
	chart = new WinLossChart( opts );

	t.equal( chart.yValue, noop, 'returns expected value' );

	chart.yValue = foo;

	t.equal( chart.yValue, foo, 'returns expected value' );

	t.end();

	function foo() {
		return 'beep';
	}
});

tape( 'an instance has a writable `window` property', function test( t ) {
	var chart;
	var opts;

	chart = new WinLossChart();
	t.equal( chart.window, PINF, 'default value is +infinity' );

	opts = {
		'window': 20
	};
	chart = new WinLossChart( opts );

	t.equal( chart.window, opts.window, 'returns expected value' );

	chart.window = 5;

	t.equal( chart.window, 5, 'returns expected value' );

	t.end();
});

tape( 'an instance has a `push` method for appending data', function test( t ) {
	var chart;

	chart = new WinLossChart();

	t.equal( typeof chart.push, 'function', 'has push method' );
	t.end();
});

tape( 'an instance has a `render` method for rendering a chart', function test( t ) {
	var chart;
	var str;

	chart = new WinLossChart();
	chart.data = [ -2, 1, 2, 2, 1, -1, -1, 1, -2, -2 ];

	str = chart.render();
	t.equal( str, '┌╵└┴╵╷╷╵┌┬', 'returns rendered chart' );

	t.end();
});

tape( 'if a chart has not been provided data, the render method returns an empty string', function test( t ) {
	var chart;
	var str;

	chart = new WinLossChart();
	t.equal( typeof chart.render, 'function', 'has render method' );

	str = chart.render();
	t.equal( str, '', 'returns empty string' );

	t.end();
});

tape( 'by default, a chart renders `NaN` values as missing values', function test( t ) {
	var chart;
	var str;

	chart = new WinLossChart();
	chart.data = [ -2, 1, NaN, 2, 1, NaN, -1, 1 ];

	str = chart.render();
	t.equal( str, '┌╵ └╵ ╷╵', 'returns rendered chart with missing values' );

	t.end();
});

tape( 'by default, a chart renders values other than `-2,-1,1,2` as missing values', function test( t ) {
	var chart;
	var str;

	chart = new WinLossChart();
	chart.data = [ -2, 1, 5, 2, 1, -4, -1, 1 ];

	str = chart.render();
	t.equal( str, '┌╵ └╵ ╷╵', 'returns rendered chart with missing values' );

	t.end();
});

tape( 'an instance has a `toString` method for serializing a chart to string', function test( t ) {
	var chart;
	var str;

	chart = new WinLossChart();
	chart.data = [ -2, 1, 2, 2, 1, -1, -1, 1 ];

	str = chart.toString();
	t.equal( str, '┌╵└┴╵╷╷╵', 'returns rendered chart' );

	t.end();
});
