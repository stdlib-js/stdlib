/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var noop = require( '@stdlib/utils/noop' );
var PINF = require( '@stdlib/constants/math/float64-pinf' );
var ColumnChart = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof ColumnChart, 'function', 'main export is a function' );
	t.end();
});

tape( 'the export is a class constructor', function test( t ) {
	var chart = new ColumnChart();
	t.equal( chart instanceof ColumnChart, true, 'returns class instance' );
	t.end();
});

tape( 'the constructor does not require the `new` keyword (no options)', function test( t ) {
	var chart;
	var ctor;

	ctor = ColumnChart;
	chart = ctor();

	t.equal( chart instanceof ColumnChart, true, 'returns class instance' );
	t.end();
});

tape( 'the constructor does not require the `new` keyword (options)', function test( t ) {
	var chart;
	var ctor;

	ctor = ColumnChart;
	chart = ctor({
		'yMax': 31.4,
		'yMin': 3.14,
		'window': 10,
		'yValue': noop,
		'data': [ 1, 2, 3 ],
		'infinities': true
	});

	t.equal( chart instanceof ColumnChart, true, 'returns class instance' );
	t.end();
});

tape( 'the constructor will throw if provided an invalid options argument', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		null,
		NaN,
		undefined,
		true,
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			var chart = new ColumnChart( value ); // eslint-disable-line no-unused-vars
		};
	}
});

tape( 'the constructor throws if provided an invalid option', function test( t ) {
	t.throws( foo, TypeError, 'throws an error' );
	t.end();

	function foo() {
		// eslint-disable-next-line no-unused-vars
		var chart = new ColumnChart({
			'yMax': []
		});
	}
});

tape( 'the constructor throws if provided a `window` option which is less than the number of data elements', function test( t ) {
	t.throws( foo, Error, 'throws an error' );
	t.end();

	function foo() {
		// eslint-disable-next-line no-unused-vars
		var chart = new ColumnChart({
			'data': [ 1, 2, 3, 4, 5 ],
			'window': 3
		});
	}
});

tape( 'an instance has a writable `data` property', function test( t ) {
	var expected;
	var chart;
	var opts;

	chart = new ColumnChart();

	t.deepEqual( chart.data, [], 'default value is an empty array' );

	opts = {
		'data': [ 1, 2, 3 ]
	};
	chart = new ColumnChart( opts );

	expected = [
		{
			'y': 1
		},
		{
			'y': 2
		},
		{
			'y': 3
		}
	];

	t.deepEqual( chart.data, expected, 'returns expected data' );

	chart.data = [ 4, 5, 6 ];

	expected = [
		{
			'y': 4
		},
		{
			'y': 5
		},
		{
			'y': 6
		}
	];

	t.deepEqual( chart.data, expected, 'returns expected data' );

	t.end();
});

tape( 'an instance has a writable `yValue` property', function test( t ) {
	var chart;
	var opts;
	var f;

	chart = new ColumnChart();
	f = chart.yValue;

	t.equal( f(5.0), 5.0, 'default value is an identity function' );

	opts = {
		'yValue': noop
	};
	chart = new ColumnChart( opts );

	t.equal( chart.yValue, noop, 'returns expected value' );

	chart.yValue = foo;

	t.equal( chart.yValue, foo, 'returns expected value' );

	t.end();

	function foo() {
		return 'beep';
	}
});

tape( 'an instance has a writable `yMin` property', function test( t ) {
	var chart;
	var opts;

	chart = new ColumnChart();
	t.equal( chart.yMin, null, 'default value is null' );

	opts = {
		'yMin': -31.4
	};
	chart = new ColumnChart( opts );

	t.equal( chart.yMin, opts.yMin, 'returns expected value' );

	chart.yMin = -100.0;

	t.equal( chart.yMin, -100.0, 'returns expected value' );

	t.end();
});

tape( 'an instance has a writable `yMax` property', function test( t ) {
	var chart;
	var opts;

	chart = new ColumnChart();
	t.equal( chart.yMax, null, 'default value is null' );

	opts = {
		'yMax': 314.0
	};
	chart = new ColumnChart( opts );

	t.equal( chart.yMax, opts.yMax, 'returns expected value' );

	chart.yMax = 100.0;

	t.equal( chart.yMax, 100.0, 'returns expected value' );

	t.end();
});

tape( 'an instance has a writable `window` property', function test( t ) {
	var chart;
	var opts;

	chart = new ColumnChart();
	t.equal( chart.window, PINF, 'default value is +infinity' );

	opts = {
		'window': 20
	};
	chart = new ColumnChart( opts );

	t.equal( chart.window, opts.window, 'returns expected value' );

	chart.window = 5;

	t.equal( chart.window, 5, 'returns expected value' );

	t.end();
});

tape( 'an instance has a writable `infinities` property', function test( t ) {
	var chart;
	var opts;

	chart = new ColumnChart();

	t.equal( chart.infinities, false, 'default is `false`' );

	opts = {
		'infinities': true
	};

	chart = new ColumnChart( opts );
	t.equal( chart.infinities, true, 'returns expected value' );

	chart.infinities = false;
	t.equal( chart.infinities, false, 'returns expected value' );

	t.end();
});

tape( 'an instance has a `push` method for appending data', function test( t ) {
	var chart;

	chart = new ColumnChart();

	t.equal( typeof chart.push, 'function', 'has push method' );
	t.end();
});

tape( 'an instance has a `render` method for rendering a chart', function test( t ) {
	var chart;
	var str;

	chart = new ColumnChart();
	chart.data = [ 1.0, 5.0, 3.0, 2.0, 4.0, 4.0, 3.0 ];

	str = chart.render();
	t.equal( str, '▁█▅▃▆▆▅', 'returns rendered chart' );

	t.end();
});

tape( 'if a chart has not been provided data, the render method returns an empty string', function test( t ) {
	var chart;
	var str;

	chart = new ColumnChart();
	t.equal( typeof chart.render, 'function', 'has render method' );

	str = chart.render();
	t.equal( str, '', 'returns empty string' );

	t.end();
});

tape( 'by default, a chart renders `NaN` and infinite values as missing values', function test( t ) {
	var chart;
	var str;

	chart = new ColumnChart();
	chart.data = [
		1.0,
		5.0,
		NaN,
		Number.POSITIVE_INFINITY,
		Number.NEGATIVE_INFINITY,
		4.0,
		3.0
	];

	str = chart.render();
	t.equal( str, '▁█   ▆▅', 'returns rendered chart with missing values' );

	t.end();
});

tape( 'if the `infinities` flag is set to `true`, the chart encodes infinite values as `∞`', function test( t ) {
	var chart;
	var str;

	chart = new ColumnChart({
		'infinities': true
	});
	chart.data = [
		1.0,
		5.0,
		NaN,
		Number.POSITIVE_INFINITY,
		Number.NEGATIVE_INFINITY,
		4.0,
		3.0
	];

	str = chart.render();
	t.equal( str, '▁█ ∞∞▆▅', 'returns rendered chart with infinities encoded as ∞' );

	t.end();
});

tape( 'if provided `yMin` and/or `yMax` values, the chart fixes the y-axis domain', function test( t ) {
	var chart;
	var str;

	chart = new ColumnChart();
	chart.data = [
		-1.0,
		5.0,
		-3.0,
		2.0,
		-4.0,
		4.0,
		3.0
	];
	chart.yMin = 0.0;
	chart.yMax = 10.0;

	str = chart.render();
	t.equal( str, '▁▅▁▂▁▄▃', 'returns rendered chart with fixed y-axis domain' );

	chart.data = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];
	chart.yMin = null;
	chart.yMax = 3.0;

	str = chart.render();
	t.equal( str, '▁▅████', 'returns rendered chart with fixed y-axis domain' );

	t.end();
});

tape( 'if all datum are `0` and the y-axis domain is `0`, the chart renders each finite datum as the smallest glyph', function test( t ) {
	var chart;
	var str;

	chart = new ColumnChart();
	chart.data = [
		0.0,
		0.0,
		0.0,
		0.0,
		0.0,
		0.0,
		0.0
	];

	str = chart.render();
	t.equal( str, '▁▁▁▁▁▁▁', 'returns rendered chart' );

	t.end();
});

tape( 'if all datum are constant and non-zero and the y-axis domain is `0`, the chart renders each finite datum as the same mid-sized glyph', function test( t ) {
	var chart;
	var str;

	chart = new ColumnChart();
	chart.data = [
		5.0,
		5.0,
		5.0,
		5.0,
		5.0,
		5.0,
		5.0
	];

	str = chart.render();
	t.equal( str, '▄▄▄▄▄▄▄', 'returns rendered chart' );

	t.end();
});

tape( 'an instance has a `toString` method for serializing a chart to string', function test( t ) {
	var chart;
	var str;

	chart = new ColumnChart();
	chart.data = [ 1.0, 5.0, 3.0, 2.0, 4.0, 4.0, 3.0 ];

	str = chart.toString();
	t.equal( str, '▁█▅▃▆▆▅', 'returns rendered chart' );

	t.end();
});
