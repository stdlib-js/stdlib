/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var base = require( './base.js' );


// MAIN //

/**
* Estimates the 1-norm of a square, real matrix `A`, reverse communication is used for evaluating matrix-vector products using alternative indexing semantics.
*
* @type {Function}
* @param {PositiveInteger} N - order of the matrix `A`
* @param {Float64Array} V - array on final return, `V=A*W`, where `W` is not returned
* @param {integer} strideV - stride length for `V`
* @param {NonNegativeInteger} offsetV - starting index of `V`
* @param {Float64Array} X - input array
* @param {integer} strideX - stride length for `X`
* @param {NonNegativeInteger} offsetX - starting index of `X`
* @param {Int32Array} ISGN - array of signs
* @param {integer} strideISGN - stride length for `ISGN`
* @param {NonNegativeInteger} offsetISGN - starting index of `ISGN`
* @param {Float64Array} EST - array containing estimate of lower bound of 1-norm of `A`
* @param {NonNegativeInteger} offsetEST - starting index of `EST`
* @param {Int32Array} KASE - array containing value KASE to control overwritting of `X`
* @param {NonNegativeInteger} offsetKASE - starting index of `KASE`
* @param {Int32Array} ISAVE - array for internal storage
* @param {integer} strideISAVE - stride length for `ISAVE`
* @param {NonNegativeInteger} offsetISAVE - starting index of `ISAVE`
* @returns {Int32Array} `ISGN`
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var Int32Array = require( '@stdlib/array/int32' );
*
* var V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
* var X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
* var ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
* var EST = new Float64Array( [ 0.0 ] );
* var KASE = new Int32Array( [ 0 ] );
* var ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );
*
* ISGN = dlacn2( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 );
* // ISGN => <Int32Array>[ 1, 1, 1, 1 ]
*/
var dlacn2 = base;


// EXPORTS //

module.exports = dlacn2;
