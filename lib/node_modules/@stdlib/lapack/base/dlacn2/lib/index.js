/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

/**
* LAPACK routine to estimate the 1-norm of a square, real matrix `A`, reverse communication is used for evaluating matrix-vector products.
*
* @module @stdlib/lapack/base/dlacn2
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var Int32Array = require( '@stdlib/array/int32' );
* var dlacn2 = require( '@stdlib/lapack/base/dlacn2' );
*
* var V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
* var X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
* var ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
* var EST = new Float64Array( [ 0.0 ] );
* var KASE = new Int32Array( [ 0 ] );
* var ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );
*
* ISGN = dlacn2( 4, V, X, ISGN, EST, KASE, ISAVE );
* // ISGN => <Int32Array>[ 1, 1, 1, 1 ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var Int32Array = require( '@stdlib/array/int32' );
* var dlacn2 = require( '@stdlib/lapack/base/dlacn2' );
*
* var V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
* var X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
* var ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
* var EST = new Float64Array( [ 0.0 ] );
* var KASE = new Int32Array( [ 0 ] );
* var ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );
*
* ISGN = dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 );
* // ISGN => <Int32Array>[ 1, 1, 1, 1 ]
*/

// MODULES //

var join = require( 'path' ).join;
var tryRequire = require( '@stdlib/utils/try-require' );
var isError = require( '@stdlib/assert/is-error' );
var main = require( './main.js' );


// MAIN //

var dlacn2;
var tmp = tryRequire( join( __dirname, './native.js' ) );
if ( isError( tmp ) ) {
	dlacn2 = main;
} else {
	dlacn2 = tmp;
}


// EXPORTS //

module.exports = dlacn2;
