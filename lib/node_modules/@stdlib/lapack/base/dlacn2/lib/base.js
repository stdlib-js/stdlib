/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable max-len, max-params */

'use strict';

// MODULES //

var idamax = require( '@stdlib/blas/base/idamax' ).ndarray;
var dasum = require( '@stdlib/blas/base/dasum' ).ndarray;
var dcopy = require( '@stdlib/blas/base/dcopy' ).ndarray;
var floor = require( '@stdlib/math/base/special/floor' );
var abs = require( '@stdlib/math/base/special/abs' );


// FUNCTIONS //

/**
* Truncates a number to whole number.
*
* @private
* @param {number} x - number to truncate
* @returns {number} truncated number
*
* @example
* var v = aint( 3.14 );
* // returns 3.0
*/
function aint( x ) {
	// TODO: shall be replaced once a dedicated math function is available
	var sign;
	var ax;

	ax = abs( x );
	if ( x >= 0.0 ) {
		sign = 1;
	} else {
		sign = -1;
	}

	if ( ax < 1.0 ) {
		return 0;
	}
	if ( ax >= 1.0 ) {
		return sign * floor( ax );
	}
}

/**
* Rounds a number to the nearest whole number.
*
* @private
* @param {number} x - number to round
* @returns {number} rounded number
*
* @example
* var v = nint( 3.14 );
* // returns 3.0
*
* @example
* var v = nint( 9.99999 );
* // returns 10.0
*/
function nint( x ) {
	// TODO: shall be replaced once a dedicated math function is available
	if ( x >= 0.0 ) {
		return aint( x + 0.5 );
	}
	return aint( x - 0.5 );
}


// MAIN //

/**
* Estimates the 1-norm of a square, real matrix `A`, reverse communication is used for evaluating matrix-vector products.
*
* @private
* @param {PositiveInteger} N - order of the matrix `A`
* @param {Float64Array} V - array on final return, `V=A*W`, where `W` is not returned
* @param {integer} strideV - stride length for `V`
* @param {NonNegativeInteger} offsetV - starting index of `V`
* @param {Float64Array} X - input array
* @param {integer} strideX - stride length for `X`
* @param {NonNegativeInteger} offsetX - starting index of `X`
* @param {Int32Array} ISGN - array of signs
* @param {integer} strideISGN - stride length for `ISGN`
* @param {NonNegativeInteger} offsetISGN - starting index of `ISGN`
* @param {Float64Array} EST - array containing estimate of lower bound of 1-norm of `A`
* @param {NonNegativeInteger} offsetEST - starting index of `EST`
* @param {Int32Array} KASE - array containing value KASE to control overwritting of `X`
* @param {NonNegativeInteger} offsetKASE - starting index of `KASE`
* @param {Int32Array} ISAVE - array for internal storage
* @param {integer} strideISAVE - stride length for `ISAVE`
* @param {NonNegativeInteger} offsetISAVE - starting index of `ISAVE`
* @returns {Int32Array} `ISGN`
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var Int32Array = require( '@stdlib/array/int32' );
*
* var V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
* var X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
* var ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
* var EST = new Float64Array( [ 0.0 ] );
* var KASE = new Int32Array( [ 0 ] );
* var ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );
*
* ISGN = dlacn2( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 );
* // ISGN => <Int32Array>[ 1, 1, 1, 1 ]
*/
function dlacn2( N, V, strideV, offsetV, X, strideX, offsetX, ISGN, strideISGN, offsetISGN, EST, offsetEST, KASE, offsetKASE, ISAVE, strideISAVE, offsetISAVE ) {
	var altsgn;
	var estold;
	var jlast;
	var tmp;
	var XS;
	var i;
	var j;

	if ( KASE[ offsetKASE ] === 0.0 ) {
		for ( i = 0; i < N; i++ ) {
			X[ offsetX + ( i * strideX ) ] = 1.0 / N;
		}
		KASE[ offsetKASE ] = 1;
		ISAVE[ offsetISAVE ] = 1;
		return ISGN;
	}
	if ( ISAVE[ offsetISAVE ] === 1 ) {
		// First iteration, X has been overwritten by A*X.
		if ( N === 1 ) {
			V[ offsetV ] = X[ offsetX ];
			EST[ offsetEST ] = abs( V[ offsetV ] );
			KASE[ offsetKASE ] = 0;
			return ISGN;
		}
		EST[ offsetEST ] = dasum( N, X, strideX, offsetX );
		for ( i = 0; i < N; i++ ) {
			if ( X[ offsetX + ( i * strideX ) ] >= 0.0 ) {
				X[ offsetX + ( i * strideX ) ] = 1;
			} else {
				X[ offsetX + ( i * strideX ) ] = -1;
			}
			ISGN[ offsetISGN + ( i * strideISGN ) ] = nint( X[ offsetX + ( i * strideX ) ] );
		}
		KASE[ offsetKASE ] = 2;
		ISAVE[ offsetISAVE ] = 2;
		return ISGN;
	}
	if ( ISAVE[ offsetISAVE ] === 2 ) {
		// First iteration, X has been overwritten by A^T*X.
		ISAVE[ offsetISAVE + strideISAVE ] = idamax( N, X, strideX, offsetX );
		ISAVE[ offsetISAVE + ( 2*strideISAVE ) ] = 2;
		for ( i = 0; i < N; i++ ) {
			X[ offsetX + ( i * strideX ) ] = 0.0;
		}
		X[ offsetX + ( ISAVE[ offsetISAVE + strideISAVE ] * strideX ) ] = 1.0;
		KASE[ offsetKASE ] = 1;
		ISAVE[ offsetISAVE ] = 3;
		return ISGN;
	}
	if ( ISAVE[ offsetISAVE ] === 3 ) {
		// X has been overwritten by A*X.
		dcopy( N, X, strideX, offsetX, V, strideV, offsetV );
		estold = EST[ offsetEST ];
		EST[ offsetEST ] = dasum( N, V, strideV, offsetV );
		for ( i = 0; i < N; i++ ) {
			if ( X[ offsetX + ( i * strideX ) ] >= 0.0 ) {
				XS = 1.0;
			} else {
				XS = -1.0;
			}
			if ( nint( XS ) !== ISGN[ offsetISGN + ( i * strideISGN ) ] ) {
				// Test for cycling.
				if ( EST[ offsetEST ] <= estold ) {
					break;
				}
				for ( j = 0; j < N; j++ ) {
					if ( X[ offsetX + ( j * strideX ) ] >= 0.0 ) {
						X[ offsetX + ( j * strideX ) ] = 1.0;
					} else {
						X[ offsetX + ( j * strideX ) ] = -1.0;
					}
					ISGN[ offsetISGN + ( j * strideISGN ) ] = nint( X[ offsetX + ( j * strideX ) ] );
				}
				KASE[ offsetKASE ] = 2;
				ISAVE[ offsetISAVE ] = 4;
				return ISGN;
			}
		}
		altsgn = 1.0;
		for ( i = 0; i < N; i++ ) {
			X[ offsetX + ( i * strideX ) ] = altsgn * ( 1.0 + ( i / ( N - 1 ) ) );
			altsgn = -altsgn;
		}
		KASE[ offsetKASE ] = 1;
		ISAVE[ offsetISAVE ] = 5;
		return ISGN;
	}
	if ( ISAVE[ offsetISAVE ] === 4 ) {
		// X has been overwritten by A^T*X.
		jlast = ISAVE[ offsetISAVE + strideISAVE ];
		ISAVE[ offsetISAVE + strideISAVE ] = idamax( N, X, strideX, offsetX );
		if ( ( X[ offsetX + ( jlast * strideX ) ] !== abs( X[ offsetX + ( ISAVE[ offsetISAVE + strideISAVE ] * strideX ) ] ) ) && ( ISAVE[ offsetISAVE + ( 2 * strideISAVE ) ] < 5 ) ) {
			ISAVE[ offsetISAVE + ( 2 * strideISAVE ) ] += 1;
			for ( i = 0; i < N; i++ ) {
				X[ offsetX + ( i * strideX ) ] = 0.0;
			}
			X[ offsetX + ( ISAVE[ offsetISAVE + strideISAVE ] * strideX ) ] = 1.0;
			KASE[ offsetKASE ] = 1;
			ISAVE[ offsetISAVE ] = 3;
			return ISGN;
		}
		// Iteration completed.
		altsgn = 1.0;
		for ( i = 0; i < N; i++ ) {
			X[ offsetX + ( i * strideX ) ] = altsgn * ( 1.0 + ( i / ( N - 1 ) ) );
			altsgn = -altsgn;
		}
		KASE[ offsetKASE ] = 1;
		ISAVE[ offsetISAVE ] = 5;
		return ISGN;
	}
	if ( ISAVE[ offsetISAVE ] === 5 ) {
		// X has been overwritten by A*X.
		tmp = 2.0 * ( dasum( N, X, strideX, offsetX ) / ( 3 * N ) );
		if ( tmp > EST[ offsetEST ] ) {
			dcopy( N, X, strideX, offsetX, V, strideV, offsetV );
			EST[ offsetEST ] = tmp;
		}
		KASE[ offsetKASE ] = 0;
		return ISGN;
	}
}


// EXPORTS //

module.exports = dlacn2;
