/*
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

import dlacn2 = require( './index' );


// TESTS //

// The function returns a Float64Array...
{
	const V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
	const EST = new Float64Array( [ 0.0 ] );
	const KASE = new Int32Array( [ 0 ] );
	const ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );

	dlacn2( 4, V, X, ISGN, EST, KASE, ISAVE ); // $ExpectType Int32Array
}

// The compiler throws an error if the function is provided a first argument which is not a number...
{
	const V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
	const EST = new Float64Array( [ 0.0 ] );
	const KASE = new Int32Array( [ 0 ] );
	const ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );

	dlacn2( '5', V, X, ISGN, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( true, V, X, ISGN, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( false, V, X, ISGN, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( null, V, X, ISGN, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( void 0, V, X, ISGN, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( [], V, X, ISGN, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( {}, V, X, ISGN, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( ( x: number ): number => x, V, X, ISGN, EST, KASE, ISAVE ); // $ExpectError
}

// The compiler throws an error if the function is provided a second argument which is not a Float64Array...
{
	const X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
	const EST = new Float64Array( [ 0.0 ] );
	const KASE = new Int32Array( [ 0 ] );
	const ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );

	dlacn2( 4, '5', X, ISGN, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, 5, X, ISGN, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, true, X, ISGN, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, false, X, ISGN, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, null, X, ISGN, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, void 0, X, ISGN, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, [], X, ISGN, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, {}, X, ISGN, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, ( x: number ): number => x, X, ISGN, EST, KASE, ISAVE ); // $ExpectError
}

// The compiler throws an error if the function is provided a third argument which is not a Float64Array...
{
	const V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
	const EST = new Float64Array( [ 0.0 ] );
	const KASE = new Int32Array( [ 0 ] );
	const ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );

	dlacn2( 4, V, '5', ISGN, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, V, 5, ISGN, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, V, true, ISGN, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, V, false, ISGN, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, V, null, ISGN, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, V, void 0, ISGN, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, V, [], ISGN, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, V, {}, ISGN, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, V, ( x: number ): number => x, ISGN, EST, KASE, ISAVE ); // $ExpectError
}

// The compiler throws an error if the function is provided a fourth argument which is not a Int32Array...
{
	const V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const EST = new Float64Array( [ 0.0 ] );
	const KASE = new Int32Array( [ 0 ] );
	const ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );

	dlacn2( 4, V, X, '5', EST, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, V, X, 5, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, V, X, true, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, V, X, false, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, V, X, null, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, V, X, void 0, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, V, X, [], EST, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, V, X, {}, EST, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, V, X, ( x: number ): number => x, EST, KASE, ISAVE ); // $ExpectError
}

// The compiler throws an error if the function is provided a fifth argument which is not a Float64Array...
{
	const V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
	const KASE = new Int32Array( [ 0 ] );
	const ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );

	dlacn2( 4, V, X, ISGN, '5', KASE, ISAVE ); // $ExpectError
	dlacn2( 4, V, X, ISGN, 5, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, V, X, ISGN, true, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, V, X, ISGN, false, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, V, X, ISGN, null, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, V, X, ISGN, void 0, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, V, X, ISGN, [], KASE, ISAVE ); // $ExpectError
	dlacn2( 4, V, X, ISGN, {}, KASE, ISAVE ); // $ExpectError
	dlacn2( 4, V, X, ISGN, ( x: number ): number => x, KASE, ISAVE ); // $ExpectError
}

// The compiler throws an error if the function is provided a sixth argument which is not a Int32Array...
{
	const V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
	const EST = new Float64Array( [ 0.0 ] );
	const ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );

	dlacn2( 4, V, X, ISGN, EST, '5', ISAVE ); // $ExpectError
	dlacn2( 4, V, X, ISGN, EST, 5, ISAVE ); // $ExpectError
	dlacn2( 4, V, X, ISGN, EST, true, ISAVE ); // $ExpectError
	dlacn2( 4, V, X, ISGN, EST, false, ISAVE ); // $ExpectError
	dlacn2( 4, V, X, ISGN, EST, null, ISAVE ); // $ExpectError
	dlacn2( 4, V, X, ISGN, EST, void 0, ISAVE ); // $ExpectError
	dlacn2( 4, V, X, ISGN, EST, [], ISAVE ); // $ExpectError
	dlacn2( 4, V, X, ISGN, EST, {}, ISAVE ); // $ExpectError
	dlacn2( 4, V, X, ISGN, EST, ( x: number ): number => x, ISAVE ); // $ExpectError
}

// The compiler throws an error if the function is provided a seventh argument which is not a Int32Array...
{
	const V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
	const EST = new Float64Array( [ 0.0 ] );
	const KASE = new Int32Array( [ 0 ] );

	dlacn2( 4, V, X, ISGN, EST, KASE, '5' ); // $ExpectError
	dlacn2( 4, V, X, ISGN, EST, KASE, 5 ); // $ExpectError
	dlacn2( 4, V, X, ISGN, EST, KASE, true ); // $ExpectError
	dlacn2( 4, V, X, ISGN, EST, KASE, false ); // $ExpectError
	dlacn2( 4, V, X, ISGN, EST, KASE, null ); // $ExpectError
	dlacn2( 4, V, X, ISGN, EST, KASE, void 0 ); // $ExpectError
	dlacn2( 4, V, X, ISGN, EST, KASE, [] ); // $ExpectError
	dlacn2( 4, V, X, ISGN, EST, KASE, {} ); // $ExpectError
	dlacn2( 4, V, X, ISGN, EST, KASE, ( x: number ): number => x ); // $ExpectError
}

// The compiler throws an error if the function is provided an unsupported number of arguments...
{
	const V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
	const EST = new Float64Array( [ 0.0 ] );
	const KASE = new Int32Array( [ 0 ] );
	const ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );

	dlacn2(); // $ExpectError
	dlacn2( 4 ); // $ExpectError
	dlacn2( 4, V ); // $ExpectError
	dlacn2( 4, V, X ); // $ExpectError
	dlacn2( 4, V, X, ISGN ); // $ExpectError
	dlacn2( 4, V, X, ISGN, EST ); // $ExpectError
	dlacn2( 4, V, X, ISGN, EST, KASE ); // $ExpectError
	dlacn2( 4, V, X, ISGN, EST, KASE, ISAVE, 10 ); // $ExpectError
}

// Attached to main export is an `ndarray` method which returns a Float64Array...
{
	const V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
	const EST = new Float64Array( [ 0.0 ] );
	const KASE = new Int32Array( [ 0 ] );
	const ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );

	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectType Int32Array
}

// The compiler throws an error if the function is provided a first argument which is not a number...
{
	const V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
	const EST = new Float64Array( [ 0.0 ] );
	const KASE = new Int32Array( [ 0 ] );
	const ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );

	dlacn2.ndarray( '5', V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( true, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( false, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( null, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( void 0, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( [], V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( {}, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( ( x: number ): number => x, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a second argument which is not a Float64Array...
{
	const X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
	const EST = new Float64Array( [ 0.0 ] );
	const KASE = new Int32Array( [ 0 ] );
	const ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );

	dlacn2.ndarray( 4, '5', 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, 5, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, true, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, false, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, null, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, void 0, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, [], 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, {}, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, ( x: number ): number => x, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a third argument which is not a number...
{
	const V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
	const EST = new Float64Array( [ 0.0 ] );
	const KASE = new Int32Array( [ 0 ] );
	const ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );

	dlacn2.ndarray( 4, V, '5', 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, true, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, false, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, null, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, void 0, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, [], 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, {}, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, ( x: number ): number => x, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a fourth argument which is not a number...
{
	const V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
	const EST = new Float64Array( [ 0.0 ] );
	const KASE = new Int32Array( [ 0 ] );
	const ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );

	dlacn2.ndarray( 4, V, 1, '5', X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, true, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, false, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, null, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, void 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, [], X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, {}, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, ( x: number ): number => x, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a fifth argument which is not a Float64Array...
{
	const V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
	const EST = new Float64Array( [ 0.0 ] );
	const KASE = new Int32Array( [ 0 ] );
	const ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );

	dlacn2.ndarray( 4, V, 1, 0, '5', 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, 5, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, true, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, false, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, null, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, void 0, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, [], 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, {}, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, ( x: number ): number => x, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a sixth argument which is not a number...
{
	const V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
	const EST = new Float64Array( [ 0.0 ] );
	const KASE = new Int32Array( [ 0 ] );
	const ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );

	dlacn2.ndarray( 4, V, 1, 0, X, '5', 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, true, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, false, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, null, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, void 0, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, [], 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, {}, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, ( x: number ): number => x, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a seventh argument which is not a number...
{
	const V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
	const EST = new Float64Array( [ 0.0 ] );
	const KASE = new Int32Array( [ 0 ] );
	const ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );

	dlacn2.ndarray( 4, V, 1, 0, X, 1, '5', ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, true, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, false, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, null, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, void 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, [], ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, {}, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, ( x: number ): number => x, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided an eighth argument which is not a Int32Array...
{
	const V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const EST = new Float64Array( [ 0.0 ] );
	const KASE = new Int32Array( [ 0 ] );
	const ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );

	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, '5', 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, 5, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, true, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, false, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, null, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, void 0, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, [], 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, {}, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ( x: number ): number => x, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a ninth argument which is not a number...
{
	const V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
	const EST = new Float64Array( [ 0.0 ] );
	const KASE = new Int32Array( [ 0 ] );
	const ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );

	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, '5', 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, true, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, false, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, null, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, void 0, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, [], 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, {}, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, ( x: number ): number => x, 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a tenth argument which is not a number...
{
	const V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
	const EST = new Float64Array( [ 0.0 ] );
	const KASE = new Int32Array( [ 0 ] );
	const ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );

	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, '5', EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, true, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, false, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, null, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, void 0, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, [], EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, {}, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, ( x: number ): number => x, EST, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided an eleventh argument which is not a Float64Array...
{
	const V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
	const KASE = new Int32Array( [ 0 ] );
	const ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );

	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, '5', 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, 5, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, true, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, false, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, null, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, void 0, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, [], 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, {}, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, ( x: number ): number => x, 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a twelfth argument which is not a number...
{
	const V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
	const EST = new Float64Array( [ 0.0 ] );
	const KASE = new Int32Array( [ 0 ] );
	const ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );

	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, '5', KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, true, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, false, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, null, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, void 0, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, [], KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, {}, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, ( x: number ): number => x, KASE, 0, ISAVE, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a thirteenth argument which is not a Int32Array...
{
	const V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
	const EST = new Float64Array( [ 0.0 ] );
	const ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );

	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, '5', 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, 5, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, true, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, false, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, null, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, void 0, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, [], 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, {}, 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, ( x: number ): number => x, 0, ISAVE, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a fourteenth argument which is not a number...
{
	const V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
	const EST = new Float64Array( [ 0.0 ] );
	const KASE = new Int32Array( [ 0 ] );
	const ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );

	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, '5', ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, true, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, false, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, null, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, void 0, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, [], ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, {}, ISAVE, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, ( x: number ): number => x, ISAVE, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a fifteenth argument which is not a Int32Array...
{
	const V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
	const EST = new Float64Array( [ 0.0 ] );
	const KASE = new Int32Array( [ 0 ] );

	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, '5', 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, 5, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, true, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, false, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, null, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, void 0, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, [], 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, {}, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ( x: number ): number => x, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a sixteenth argument which is not a number...
{
	const V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
	const EST = new Float64Array( [ 0.0 ] );
	const KASE = new Int32Array( [ 0 ] );
	const ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );

	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, '5', 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, true, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, false, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, null, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, void 0, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, [], 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, {}, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, ( x: number ): number => x, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a seventeenth argument which is not a number...
{
	const V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
	const EST = new Float64Array( [ 0.0 ] );
	const KASE = new Int32Array( [ 0 ] );
	const ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );

	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, '5' ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, true ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, false ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, null ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, void 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, [] ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, {} ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, ( x: number ): number => x ); // $ExpectError
}

// The compiler throws an error if the `ndarray` method is provided an unsupported number of arguments...
{
	const V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	const ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
	const EST = new Float64Array( [ 0.0 ] );
	const KASE = new Int32Array( [ 0 ] );
	const ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );

	dlacn2.ndarray(); // $ExpectError
	dlacn2.ndarray( 4 ); // $ExpectError
	dlacn2.ndarray( 4, V ); // $ExpectError
	dlacn2.ndarray( 4, V, 1 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1 ); // $ExpectError
	dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0, 10 ); // $ExpectError
}
