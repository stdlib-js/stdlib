/*
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// TypeScript Version: 4.1

/// <reference types="@stdlib/types"/>

/**
* Interface describing `dlacn2`.
*/
interface Routine {
	/**
	* Estimates the 1-norm of a square, real matrix `A`, reverse communication is used for evaluating matrix-vector products.
	*
	* @param N - order of the matrix `A`
	* @param V - array on final return, `V=A*W`, where `W` is not returned
	* @param X - input array
	* @param ISGN - array of signs
	* @param EST - array containing estimate of lower bound of 1-norm of `A`
	* @param KASE - array containing value KASE to control overwritting of `X`
	* @param ISAVE - array for internal storage
	* @returns `ISGN`
	*
	* @example
	* var Float64Array = require( '@stdlib/array/float64' );
	* var Int32Array = require( '@stdlib/array/int32' );
	*
	* var V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	* var X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	* var ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
	* var EST = new Float64Array( [ 0.0 ] );
	* var KASE = new Int32Array( [ 0 ] );
	* var ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );
	*
	* ISGN = dlacn2( 4, V, X, ISGN, EST, KASE, ISAVE );
	* // ISGN => <Int32Array>[ 1, 1, 1, 1 ]
	*/
	( N: number, V: Float64Array, X: Float64Array, ISGN: Int32Array, EST: Float64Array, KASE: Int32Array, ISAVE: Int32Array ): Int32Array;

	/**
	* Estimates the 1-norm of a square, real matrix `A`, reverse communication is used for evaluating matrix-vector products using alternative indexing semantics.
	*
	* @param N - order of the matrix `A`
	* @param V - array on final return, `V=A*W`, where `W` is not returned
	* @param strideV - stride length for `V`
	* @param offsetV - starting index of `V`
	* @param X - input array
	* @param strideX - stride length for `X`
	* @param offsetX - starting index of `X`
	* @param ISGN - array of signs
	* @param strideISGN - stride length for `ISGN`
	* @param offsetISGN - starting index of `ISGN`
	* @param EST - array containing estimate of lower bound of 1-norm of `A`
	* @param offsetEST - starting index of `EST`
	* @param KASE - array containing value KASE to control overwritting of `X`
	* @param offsetKASE - starting index of `KASE`
	* @param ISAVE - array for internal storage
	* @param strideISAVE - stride length for `ISAVE`
	* @param offsetISAVE - starting index of `ISAVE`
	* @returns `ISGN`
	*
	* @example
	* var Float64Array = require( '@stdlib/array/float64' );
	* var Int32Array = require( '@stdlib/array/int32' );
	*
	* var V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	* var X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	* var ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
	* var EST = new Float64Array( [ 0.0 ] );
	* var KASE = new Int32Array( [ 0 ] );
	* var ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );
	*
	* ISGN = dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 );
	* // ISGN => <Int32Array>[ 1, 1, 1, 1 ]
	*/
	ndarray( N: number, V: Float64Array, strideV: number, offsetV: number, X: Float64Array, strideX: number, offsetX: number, ISGN: Int32Array, strideISGN: number, offsetISGN: number, EST: Float64Array, offsetEST: number, KASE: Int32Array, offsetKASE: number, ISAVE: Int32Array, strideISAVE: number, offsetISAVE: number ): Int32Array;
}

/**
* Estimates the 1-norm of a square, real matrix `A`, reverse communication is used for evaluating matrix-vector products.
*
* @param N - order of the matrix `A`
* @param V - array on final return, `V=A*W`, where `W` is not returned
* @param X - input array
* @param ISGN - array of signs
* @param EST - array containing estimate of lower bound of 1-norm of `A`
* @param KASE - array containing value KASE to control overwritting of `X`
* @param ISAVE - array for internal storage
* @returns `ISGN`
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var Int32Array = require( '@stdlib/array/int32' );
*
* var V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
* var X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
* var ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
* var EST = new Float64Array( [ 0.0 ] );
* var KASE = new Int32Array( [ 0 ] );
* var ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );
*
* ISGN = dlacn2( 4, V, X, ISGN, EST, KASE, ISAVE );
* // ISGN => <Int32Array>[ 1, 1, 1, 1 ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var Int32Array = require( '@stdlib/array/int32' );
*
* var V = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
* var X = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
* var ISGN = new Int32Array( [ 1, 1, 1, 1 ] );
* var EST = new Float64Array( [ 0.0 ] );
* var KASE = new Int32Array( [ 0 ] );
* var ISAVE = new Int32Array( [ 0, 0, 0, 0, 0] );
*
* ISGN = dlacn2.ndarray( 4, V, 1, 0, X, 1, 0, ISGN, 1, 0, EST, 0, KASE, 0, ISAVE, 1, 0 );
* // ISGN => <Int32Array>[ 1, 1, 1, 1 ]
*/
declare var dlacn2: Routine;


// EXPORTS //

export = dlacn2;
