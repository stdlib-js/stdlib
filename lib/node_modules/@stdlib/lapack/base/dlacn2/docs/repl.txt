
{{alias}}( N, V, X, ISGN, EST, KASE, ISAVE )
    Estimates the 1-norm of a square, real matrix `A`, reverse communication
    is used for evaluating matrix-vector products.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    Parameters
    ----------
    N: integer
        Order of the matrix `A`.

    V: Float64Array
        On final return, `V = A * W`, where `W` is not returned.

    X: Float64Array
        Input vector `X`.

    ISGN: Int32Array
        Signs of elements of `X`.

    EST: Float64Array
        Estimate of the lower bound of the 1-norm of `A`.

    KASE: Int32Array
        Value controlling overwriting of `X`.

    ISAVE: Int32Array
        Internal storage.

    Returns
    -------
    ISAVE: Int32Array
        Internal storage.

    Examples
    --------
    > var V = new {{alias:@stdlib/array/float64}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > var X = new {{alias:@stdlib/array/float64}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > var ISGN = new {{alias:@stdlib/array/int32}}( [ 1, 1, 1, 1 ] );
    > var EST = new {{alias:@stdlib/array/float64}}( [ 0.0 ] );
    > var KASE = new {{alias:@stdlib/array/int32}}( [ 1 ] );
    > var ISAVE = new {{alias:@stdlib/array/int32}}( [ 1, 0, 0 ] );
    > ISGN = {{alias}}( 4, V, X, ISGN, EST, KASE, ISAVE );
    > ISGN
    <Int32Array>[ 1, 1, 1, 1 ]
    > EST
    <Float64Array>[ 10.0 ]


{{alias}}.ndarray( N, V,sv,ov, X,sx,ox, I,si,oi, E,oe, K,ok, S,ss,os )
    Estimates the 1-norm of a square, real matrix `A`, reverse communication
    is used for evaluating matrix-vector products using alternative indexing
    semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing semantics based on starting
    indices.

    Parameters
    ----------
    N: integer
        Order of the matrix `A`.

    V: Float64Array
        On final return, `V = A * W`, where `W` is not returned.

    sv: integer
        Stride length for `V`.

    ov: integer
        Starting index of `V`.

    X: Float64Array
        Input vector `X`.

    sx: integer
        Stride length for `X`.

    ox: integer
        Starting index of `X`.

    I: Int32Array
        Signs of elements of `X`.

    si: integer
        Stride length for `I`.

    oi: integer
        Starting index of `I`.

    E: Float64Array
        Estimate of the lower bound of the 1-norm of `A`.

    oe: integer
        Starting index of `E`.

    K: Int32Array
        Value controlling overwriting of `X`.

    ok: integer
        Starting index of `K`.

    S: Int32Array
        Internal storage.

    ss: integer
        Stride length for `S`.

    Returns
    -------
    S: Int32Array
        Internal storage.

    Examples
    --------
    > var V = new {{alias:@stdlib/array/float64}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > var X = new {{alias:@stdlib/array/float64}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > var I = new {{alias:@stdlib/array/int32}}( [ 0, 1, 1, 1, 1 ] );
    > var E = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0 ] );
    > var K = new {{alias:@stdlib/array/int32}}( [ 0, 1 ] );
    > var S = new {{alias:@stdlib/array/int32}}( [ 0, 1, 0, 0, 0 ] );
    > I = {{alias}}.ndarray( 4, V,1,0, X,1,0, I,1,1, E,1, K,1, S,1,1 );
    > I
    <Int32Array>[ 0, 1, 1, 1, 1 ]
    > E
    <Float64Array>[ 0.0, 10.0 ]

    See Also
    --------
