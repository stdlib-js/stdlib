/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable max-statements */

'use strict';

// MODULES //

var signum = require( '@stdlib/math/base/special/signum' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var abs = require( '@stdlib/math/base/special/abs' );


// FUNCTIONS //

/**
* Returns `x` multipled by `signum( y )`.
*
* @private
* @param {number} x - scalar element
* @param {number} y - scalar element
* @returns {number} computed value
*
* @example
* var out = sign( 1.0, -0.9 );
* // out => -1.0
*/
function sign( x, y ) {
	return x * signum( y );
}


// MAIN //

/**
* Computes singular value decomposition of a 2x2 triangular matrix.
*
* @private
* @param {number} F - the (0,0) element of matrix
* @param {number} G - the (0,1) element of matrix
* @param {number} H - the (1,1) element of matrix
* @param {Float64Array} out - output array containing `SSMIN`, `SSMAX`, `SNR`, `CSR`, `SNL`, and `CSL` respectively
* @param {integer} strideOut - stride length for `out`
* @param {NonNegativeInteger} offsetOut - starting index of `out`
* @returns {Float64Array} output array
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var out = new Float64Array( 6 );
*
* out = dlasv2( 2.0, 3.0, 4.0, out, 1, 0 );
* // out => <Float64Array>[ 1.5513263285176897, 5.1568776039816795, 0.9664996487646696, 0.25666793515702424, 0.7496781758158659, 0.6618025632357402 ]
*/
function dlasv2( F, G, H, out, strideOut, offsetOut ) {
	var gasmal;
	var ssmin;
	var ssmax;
	var tsign;
	var PMAX;
	var swap;
	var clt;
	var crt;
	var csl;
	var csr;
	var slt;
	var snl;
	var snr;
	var srt;
	var tmp;
	var fa;
	var ft;
	var ga;
	var gt;
	var ha;
	var ht;
	var mm;
	var tt;
	var a;
	var d;
	var l;
	var m;
	var r;
	var s;
	var t;

	ft = F;
	fa = abs( ft );
	ht = H;
	ha = abs( ht );

	// PMAX points to the maximum absolute element of matrix

	// PMAX = 1 if F largest in absolute values

	// PMAX = 2 if G largest in absolute values

	// PMAX = 3 if H largest in absolute values

	PMAX = 1;
	swap = ha > fa;
	if ( swap ) {
		PMAX = 3;
		tmp = ft;
		ft = ht;
		ht = tmp;
		tmp = fa;
		fa = ha;
		ha = tmp;

		// Now FA >= HA
	}
	gt = G;
	ga = abs( gt );
	if ( ga === 0.0 ) {
		// Diagonal matrix
		ssmin = ha;
		ssmax = fa;
		clt = 1.0;
		crt = 1.0;
		slt = 0.0;
		srt = 0.0;
	} else {
		gasmal = true;
		if ( ga > fa ) {
			PMAX = 2;

			// TODO: replace 1.11022302E-16 with dlamch( 'E' )
			if ( ( fa / ga ) < 1.11022302E-16 ) {
				// Case of very large GA
				gasmal = false;
				ssmax = ga;
				if ( ha > 1.0 ) {
					ssmin = fa / ( ga / ha );
				} else {
					ssmin = ( fa / ga ) * ha;
				}
				clt = 1.0;
				slt = ht / gt;
				srt = 1.0;
				crt = ft / gt;
			}
		}
		if ( gasmal === true ) {
			// Normal case
			d = fa - ha;
			if ( d === fa ) {
				// Copes with infinite F or H
				l = 1.0;
			} else {
				l = d / fa;
			}

			// Note that 0 < l < 1
			m = gt / ft;

			// Note that abs( m ) < 1 / macheps
			t = 2.0 - l;

			// Note that T > 1
			mm = m * m;
			tt = t * t;
			s = sqrt( tt + mm );

			// Note that 1 < S < 1 + 1 / macheps
			if ( l === 0.0 ) {
				r = abs( m );
			} else {
				r = sqrt( ( l * l ) + mm );
			}

			// Note that 0 < R < 1 + 1 / macheps
			a = 0.5 * ( s + r);

			// Note that 1 < A < 1 + abs( m )
			ssmin = ha / a;
			ssmax = fa * a;
			if ( mm === 0.0 ) {
				// Note that M is very tiny
				if ( l === 0.0 ) {
					t = sign( 2.0, ft ) * sign( 1.0, gt );
				} else {
					t = ( ( gt / sign( d, ft ) ) + ( m / t ) );
				}
			} else {
				t = ( ( m / ( s + t ) ) + ( m / ( r + l ) ) ) * ( 1.0 + a );
			}
			l = sqrt( ( t * t ) + 4.0 );
			crt = 2.0 / l;
			srt = t / l;
			clt = ( crt + ( srt * m ) ) / a;
			slt = ( ht / ft ) * ( srt / a );
		}
	}
	if ( swap ) {
		csl = srt;
		snl = crt;
		csr = slt;
		snr = clt;
	} else {
		csl = clt;
		snl = slt;
		csr = crt;
		snr = srt;
	}

	// Correct signs 0f ssmax and ssmin
	if ( PMAX === 1 ) {
		tsign = sign( 1.0, csr ) * sign( 1.0, csl ) * sign( 1.0, F );
	}
	if ( PMAX === 2 ) {
		tsign = sign( 1.0, snr ) * sign( 1.0, csl ) * sign( 1.0, G );
	}
	if ( PMAX === 3 ) {
		tsign = sign( 1.0, snr ) * sign( 1.0, snl ) * sign( 1.0, H );
	}
	ssmax = sign( ssmax, tsign );
	ssmin = sign( ssmin, tsign * sign( 1.0, F ) * sign( 1.0, H ) );

	out[ offsetOut ] = ssmin;
	out[ offsetOut + strideOut ] = ssmax;
	out[ offsetOut + ( 2 * strideOut ) ] = snr;
	out[ offsetOut + ( 3 * strideOut ) ] = csr;
	out[ offsetOut + ( 4 * strideOut ) ] = snl;
	out[ offsetOut + ( 5 * strideOut ) ] = csl;
	return out;
}


// EXPORTS //

module.exports = dlasv2;
