/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// TypeScript Version: 4.1

/// <reference types="@stdlib/types"/>

/**
* Interface describing `dlasv2`.
*/
interface Routine {
	/**
	* Computes singular value decomposition of a 2x2 triangular matrix.
	*
	* @param F - the (0,0) element of matrix
	* @param G - the (0,1) element of matrix
	* @param H - the (1,1) element of matrix
	* @param out - output array containing `SSMIN`, `SSMAX`, `SNR`, `CSR`, `SNL`, and `CSL` respectively
	* @returns output array
	*
	* @example
	* var Float64Array = require( '@stdlib/array/float64' );
	* var out = new Float64Array( 6 );
	*
	* out = dlasv2( 2.0, 3.0, 4.0, out );
	* // out => <Float64Array>[ 1.5513263285176897, 5.1568776039816795, 0.9664996487646696, 0.25666793515702424, 0.7496781758158659, 0.6618025632357402 ]
	*/
	( F: number, G: number, H: number, out: Float64Array ): Float64Array;

	/**
	* Computes singular value decomposition of a 2x2 triangular matrix using alternative indexing semantics.
	*
	* @param F - the (0,0) element of matrix
	* @param G - the (0,1) element of matrix
	* @param H - the (1,1) element of matrix
	* @param out - output array containing `SSMIN`, `SSMAX`, `SNR`, `CSR`, `SNL`, and `CSL` respectively
	* @param strideOut - stride length for `out`
	* @param offsetOut - starting index of `out`
	* @returns output array
	*
	* @example
	* var Float64Array = require( '@stdlib/array/float64' );
	* var out = new Float64Array( 6 );
	*
	* out = dlasv2.ndarray( 2.0, 3.0, 4.0, out, 1, 0 );
	* // out => <Float64Array>[ 1.5513263285176897, 5.1568776039816795, 0.9664996487646696, 0.25666793515702424, 0.7496781758158659, 0.6618025632357402 ]
	*/
	ndarray( F: number, G: number, H: number, out: Float64Array, strideOut: number, offsetOut: number ): Float64Array;
}

/**
* Computes singular value decomposition of a 2x2 triangular matrix.
*
* @param F - the (0,0) element of matrix
* @param G - the (0,1) element of matrix
* @param H - the (1,1) element of matrix
* @param out - output array containing `SSMIN`, `SSMAX`, `SNR`, `CSR`, `SNL`, and `CSL` respectively
* @returns output array
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var out = new Float64Array( 6 );
*
* out = dlasv2( 2.0, 3.0, 4.0, out );
* // out => <Float64Array>[ 1.5513263285176897, 5.1568776039816795, 0.9664996487646696, 0.25666793515702424, 0.7496781758158659, 0.6618025632357402 ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var out = new Float64Array( 6 );
*
* out = dlasv2.ndarray( 2.0, 3.0, 4.0, out, 1, 0 );
* // out => <Float64Array>[ 1.5513263285176897, 5.1568776039816795, 0.9664996487646696, 0.25666793515702424, 0.7496781758158659, 0.6618025632357402 ]
*/
declare var dlasv2: Routine;


// EXPORTS //

export = dlasv2;
