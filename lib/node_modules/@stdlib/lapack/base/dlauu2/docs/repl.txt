
{{alias}}( order, uplo, N, A, LDA )
    Computes the product `U*U^T` or `L^T*L`, where the triangular factor `U` or
    `L` is stored in the upper or lower triangular part of array `A`.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    The function mutates `A`.

    Parameters
    ----------
    order: string
        Storage layout.

    uplo: string
        Specifies whether to copy the upper or lower triangular/trapezoidal
        part of matrix `A`.

    N: integer
        Order of triangular factor `U` or `L`.

    A: Float64Array
        Input array.

    LDA: integer
        Stride of the first dimension of `A` (a.k.a., leading dimension of the
        matrix `A`).

    Returns
    -------
    info: integer
        Status code. The status code indicates the following conditions:

        - if equal to zero, then the operation was successful.
        - if less than zero, then the k-th argument had an illegal value, where
          `k = -info`.

    Examples
    --------
    > var A = new {{alias:@stdlib/array/float64}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > {{alias}}( 'row-major', 'upper', 2, A, 2 )
    0
    > A
    <Float64Array>[ 5.0, 8.0, 3.0, 16.0 ]


{{alias}}.ndarray( uplo, N, A, strideA1, strideA2, offsetA )
    Computes the product `U*U^T` or `L^T*L`, where the triangular factor `U`
    or `L` is stored in the upper or lower triangular part of array `A` using
    alternative indexing semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing semantics based on starting
    indices.

    The function mutates both `D` and `E`.

    Parameters
    ----------
    uplo: string
        Specifies whether to copy the upper or lower triangular/trapezoidal
        part of matrix `A`.

    N: integer
        Order of triangular factor `U` or `L`.

    A: Float64Array
        Input array.

    strideA1: integer
        Stride length for the first dimension of `A`.

    strideA2: integer
        Stride length for the second dimension of `A`.

    offsetA: integer
        Starting index for `A`.

    Returns
    -------
    info: integer
        Status code. The status code indicates the following conditions:

        - if equal to zero, then the operation was successful.
        - if less than zero, then the k-th argument had an illegal value, where
          `k = -info`.

    Examples
    --------
    > var A = new {{alias:@stdlib/array/float64}}( [ 0.0, 1.0, 2.0, 3.0, 4.0 ] );
    > {{alias}}.ndarray( 'upper', 2, A, 2, 1, 1 )
    0
    > A
    <Float64Array>[ 0.0, 5.0, 8.0, 3.0, 16.0 ]

    See Also
    --------
