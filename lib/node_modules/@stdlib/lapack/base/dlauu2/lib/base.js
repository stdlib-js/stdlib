/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isRowMajor = require( '@stdlib/ndarray/base/assert/is-row-major' );
var dgemv = require( '@stdlib/blas/base/dgemv' ).ndarray;
var dscal = require( '@stdlib/blas/base/dscal' ).ndarray;
var ddot = require( '@stdlib/blas/base/ddot' ).ndarray;


// MAIN //

/**
* Computes the product `U*U^T` or `L^T*L`, where the triangular factor `U` or `L` is stored in the upper or lower triangular part of array `A`.
*
* @private
* @param {string} uplo - specifies whether to copy the upper or lower triangular/trapezoidal part of matrix `A`
* @param {NonNegativeInteger} N - order of triangular factor `U` or `L`.
* @param {Float64Array} A - input array
* @param {integer} strideA1 - stride of the first dimension of `A`
* @param {integer} strideA2 - stride of the second dimension of `A`
* @param {NonNegativeInteger} offsetA - starting index for `A`
* @returns {integer} status code
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
* var out = dlauu2( 'upper', 2, A, 2, 1, 0 );
* // returns 0
*/
function dlauu2( uplo, N, A, strideA1, strideA2, offsetA ) {
	var aii;
	var i;

	// Quick return if possible
	if ( N === 0 ) {
		return 0;
	}
	if ( uplo === 'upper' ) {
		// Compute the product U*U^T.
		if ( isRowMajor( [ strideA1, strideA2 ] ) ) {
			for ( i = 0; i < N; i++ ) {
				aii = A[ offsetA + ( i * strideA1 ) + ( i * strideA2 ) ];
				if ( i < N - 1 ) {
					A[ offsetA + ( i * strideA1 ) + ( i * strideA2 ) ] = ddot( N - i, A, strideA2, offsetA + ( i * strideA1 ) + ( i * strideA2 ), A, strideA2, offsetA + ( i * strideA1 ) + ( i * strideA2 ) );
					dgemv( 'no-transpose', i, N - i - 1, 1.0, A, strideA1, strideA2, offsetA + ( ( i + 1 ) * strideA2 ), A, strideA2, offsetA + ( ( i + 1 ) * strideA2 ) + ( i * strideA1 ), aii, A, strideA1, offsetA + ( i * strideA2 ) );
				} else {
					dscal( i + 1, aii, A, strideA1, offsetA + ( i * strideA2 ) );
				}
			}
			return 0;
		}
		// column-major
		for ( i = 0; i < N; i++ ) {
			aii = A[ offsetA + ( i * strideA1 ) + ( i * strideA2 ) ];
			if ( i < N - 1 ) {
				A[ offsetA + ( i * strideA1 ) + ( i * strideA2 ) ] = ddot( N - i, A, strideA2, offsetA + ( i * strideA1 ) + ( i * strideA2 ), A, strideA2, offsetA + ( i * strideA1 ) + ( i * strideA2 ) );
				dgemv( 'no-transpose', i, N - i - 1, 1.0, A, strideA1, strideA2, offsetA + ( ( i + 1 ) * strideA1 ), A, strideA1, offsetA + ( ( i + 1 ) * strideA1 ) + ( i * strideA2 ), aii, A, strideA2, offsetA + ( i * strideA1 ) );
			} else {
				dscal( i + 1, aii, A, strideA1, offsetA + ( i * strideA2 ) );
			}
		}
		return 0;
	}
	// Lower
	// Compute the product L^T*L.
	if ( isRowMajor( [ strideA1, strideA2 ] ) ) {
		for (i = 0; i < N; i++ ) {
			aii = A[ offsetA + ( i * strideA1 ) + ( i * strideA2 ) ];
			if ( i < N - 1 ) {
				A[ offsetA + ( i * strideA1 ) + ( i * strideA2 ) ] = ddot( N - i, A, strideA1, offsetA + ( i * strideA1 ) + ( i * strideA2 ), A, strideA1, offsetA + ( i * strideA1 ) + ( i * strideA2 ) );
				dgemv( 'transpose', N - i - 1, i, 1.0, A, strideA1, strideA2, offsetA + ( ( i + 1 ) * strideA1 ), A, strideA1, offsetA + ( i * strideA2 ) + ( ( i + 1 ) * strideA1 ), aii, A, strideA2, offsetA + ( i * strideA1 ) );
			} else {
				dscal( i + 1, aii, A, strideA2, offsetA + ( i * strideA1 ) );
			}
		}
		return 0;
	}
	// column-major
	for (i = 0; i < N; i++ ) {
		aii = A[ offsetA + ( i * strideA2 ) + ( i * strideA1 ) ];
		if ( i < N - 1 ) {
			A[ offsetA + ( i * strideA2 ) + ( i * strideA1 ) ] = ddot( N - i, A, strideA1, offsetA + ( i * strideA2 ) + ( i * strideA1 ), A, strideA1, offsetA + ( i * strideA2 ) + ( i * strideA1 ) );
			dgemv( 'transpose', N - i - 1, i, 1.0, A, strideA1, strideA2, offsetA + ( ( i + 1 ) * strideA1 ), A, strideA1, offsetA + ( i * strideA2 ) + ( ( i + 1 ) * strideA1 ), aii, A, strideA2, offsetA + ( i * strideA1 ) );
		} else {
			dscal( i + 1, aii, A, strideA2, offsetA + ( i * strideA1 ) );
		}
	}
	return 0;
}


// EXPORTS //

module.exports = dlauu2;
