/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var sqrt = require( '@stdlib/math/base/special/sqrt' );
var abs = require( '@stdlib/math/base/special/abs' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Computes the eigendecomposition of a 2x2 symmetric matrix.
*
* @private
* @param {number} A - the (0,0) element of a 2x2 symmetric matrix
* @param {number} B - the (0,1) and the conjugate of the (1,0) element of a 2x2 symmetric matrix
* @param {number} C - the (1,1) element of a 2x2 symmetric matrix
* @param {Float64Array} out - output array containing the eigenvalues of larger and smaller absolute values respectively
* @param {integer} strideOut - stride length for `out`
* @param {NonNegativeInteger} offsetOut - starting index of `out`
* @param {Float64Array} ev - output array containing `CS1` and `SN1` which is unit right eigenvector for `RT1` giving the decomposition
* @param {integer} strideEv - stride length for `ev`
* @param {NonNegativeInteger} offsetEv - starting index of `ev`
* @returns {Float64Array} out - output array
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var ev = new Float64Array( 2 );
* var out = new Float64Array( 2 );
* out = dlaev2( 2.0, 3.0, 4.0, out, 1, 0, ev, 1, 0 );
* // out => <Float64Array>[ ~6.162, ~-0.162 ]
* // ev => <Float64Array>[ ~0.585, ~0.811 ]
*/
function dlaev2( A, B, C, out, strideOut, offsetOut, ev, strideEv, offsetEv ) {
	var acmn;
	var acmx;
	var sgn1;
	var sgn2;
	var acs;
	var adf;
	var cs1;
	var rt1;
	var rt2;
	var sn1;
	var ab;
	var cs;
	var ct;
	var df;
	var rt;
	var sm;
	var tb;
	var tn;

	sm = A + C;
	df = A - C;
	adf = abs( df );
	tb = B + B;
	ab = abs( tb );
	if ( abs( A ) > abs( C ) ) {
		acmx = A;
		acmn = C;
	} else {
		acmx = C;
		acmn = A;
	}
	if ( adf > ab ) {
		rt = adf * sqrt( 1.0 + pow( ( ab / adf ), 2 ) );
	} else if ( adf < ab ) {
		rt = ab * sqrt( 1.0 + pow( ( adf / ab ), 2 ) );
	} else {
		// Includes case AB = ADF = 0
		rt = ab * sqrt( 2.0 );
	}
	if ( sm < 0.0 ) {
		rt1 = 0.5 * ( sm - rt );
		sgn1 = -1;

		// Order of execution is important. To get fully accurate smaller eigenvalue, next line needs to be executed in higher precision.
		rt2 = ( ( acmx / rt1 ) * acmn ) - ( ( B / rt1 ) * B );
	} else if ( sm > 0.0 ) {
		rt1 = 0.5 * ( sm + rt );
		sgn1 = 1;

		// Order of execution is important. To get fully accurate smaller eigenvalue, next line needs to be executed in higher precision.
		rt2 = ( ( acmx / rt1 ) * acmn ) - ( ( B / rt1 ) * B );
	} else {
		// Includes case RT1 = RT2 = 0
		rt1 = 0.5 * rt;
		rt2 = -0.5 * rt;
		sgn1 = 1;
	}

	// Compute the eigenvector
	if ( df > 0.0 ) {
		cs = df + rt;
		sgn2 = 1;
	} else {
		cs = df - rt;
		sgn2 = -1;
	}
	acs = abs( cs );
	if ( acs > ab ) {
		ct = -tb / cs;
		sn1 = 1.0 / sqrt( 1.0 + ( ct * ct ) );
		cs1 = ct * sn1;
	} else if ( ab === 0.0 ) {
		cs1 = 1.0;
		sn1 = 0.0;
	} else {
		tn = -cs / tb;
		cs1 = 1.0 / sqrt( 1.0 + ( tn * tn ) );
		sn1 = tn * cs1;
	}
	if ( sgn1 === sgn2 ) {
		tn = cs1;
		cs1 = -sn1;
		sn1 = tn;
	}
	out[ offsetOut ] = rt1;
	out[ offsetOut + strideOut ] =rt2;
	ev[ offsetEv ] = cs1;
	ev[ offsetEv + strideEv ] = sn1;
	return out;
}


// EXPORTS //

module.exports = dlaev2;
