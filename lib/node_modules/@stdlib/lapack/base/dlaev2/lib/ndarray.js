/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var base = require( './base.js' );


// MAIN //

/**
* Computes the eigendecomposition of a 2x2 symmetric matrix using alternative indexing semantics.
*
* @name dlaev2
* @type {Function}
* @param {number} A - the (0,0) element of a 2x2 symmetric matrix
* @param {number} B - the (0,1) and the conjugate of the (1,0) element of a 2x2 symmetric matrix
* @param {number} C - the (1,1) element of a 2x2 symmetric matrix
* @param {Float64Array} out - output array containing the eigenvalues of larger and smaller absolute values respectively
* @param {integer} strideOut - stride length for `out`
* @param {NonNegativeInteger} offsetOut - starting index of `out`
* @param {Float64Array} ev - output array containing `CS1` and `SN1` which is unit right eigenvector for `RT1` giving the decomposition
* @param {integer} strideEv - stride length for `ev`
* @param {NonNegativeInteger} offsetEv - starting index of `ev`
* @returns {Float64Array} out - output array
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var ev = new Float64Array( 2 );
* var out = new Float64Array( 2 );
* out = dlaev2( 2.0, 3.0, 4.0, out, 1, 0, ev, 1, 0 );
* // out => <Float64Array>[ ~6.162, ~-0.162 ]
* // ev => <Float64Array>[ ~0.585, ~0.811 ]
*/
var dlaev2 = base;


// EXPORTS //

module.exports = dlaev2;
