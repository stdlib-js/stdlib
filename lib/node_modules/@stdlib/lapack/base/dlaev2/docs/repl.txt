
{{alias}}( A, B, C, out, ev )
    Computes the eigendecomposition of a 2x2 symmetric matrix.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    Parameters
    ----------
    A: number
        The (0,0) element of a 2x2 symmetric matrix.

    B: number
        The (0,1) and the conjugate of (1,0) element of a 2x2 symmetric matrix.

    C: number
        The (1,1) element of a 2x2 symmetric matrix.

    out: Float64Array
        Output array containing the eigenvalues of larger and smaller absolute
        values respectively.

    ev: Float64Array
        Output array containing `CS1` and `SN1` which is unit right eigenvector
        for `RT1` giving the decomposition.

    Returns
    -------
    out: Float64Array
        Output array.

    Examples
    --------
    > var out = new {{alias:@stdlib/array/float64}}( 2 );
    > var ev = new {{alias:@stdlib/array/float64}}( 2 );
    > {{alias}}( 2.0, 3.0, 4.0, out, ev )
    <Float64Array>[ ~6.162, ~-0.162 ]
    > ev
    <Float64Array>[ ~0.585, ~0.811 ]


{{alias}}.( A, B, C, out, sout, oout, ev, sev, oev )
    Computes the eigendecomposition of a 2x2 symmetric matrix using alternative
    indexing semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing semantics based on starting
    indices.

    Parameters
    ----------
    A: number
        The (0,0) element of a 2x2 symmetric matrix.

    B: number
        The (0,1) and the conjugate of (1,0) element of a 2x2 symmetric matrix.

    C: number
        The (1,1) element of a 2x2 symmetric matrix.

    out: Float64Array
        Output array containing the eigenvalues of larger and smaller absolute
        values respectively.

    sout: integer
        Stride length for `out`.

    oout: integer
        Starting index of `out`.

    ev: Float64Array
        Output array containing `CS1` and `SN1` which is unit right eigenvector
        for `RT1` giving the decomposition.

    sev: integer
        Stride length for `ev`.

    oev: integer
        Starting index of `ev`.

    Returns
    -------
    out: Float64Array
        Output array.

    Examples
    --------
    > var out = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0 ] );
    > var ev = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0 ] );
    > {{alias}}.ndarray( 2.0, 3.0, 4.0, out, 2, 0, ev, -1, 2 )
    <Float64Array>[ ~6.162, 0.0, ~-0.162 ]
    > ev
    <Float64Array>[ 0.0, ~0.811, ~0.585 ]

    See Also
    --------
