/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable max-len, max-params */

'use strict';

// MODULES //

var sqrt = require( '@stdlib/math/base/special/sqrt' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );


// MAIN //

/**
* Computes row and column scalings intended to equilibrate a symmetric positive definite matrix `A`.
*
* @private
* @param {NonNegativeInteger} N - order of matrix
* @param {Float64Array} A - symmetric positive definite matrix
* @param {integer} strideA1 - stride of the first dimension of `A`
* @param {integer} strideA2 - stride of the second dimension of `A`
* @param {NonNegativeInteger} offsetA - starting index for `A`
* @param {Float64Array} S - array containing scale factors
* @param {NonNegativeInteger} strideS - stride length of `S`
* @param {NonNegativeInteger} offsetS - starting index for `S`
* @param {Float64Array} scond - array containing the ratio of smallest to largest scale factors
* @param {NonNegativeInteger} offsetSC - starting index for `scond`
* @param {Float64Array} amax - array containing absolute value of largest matrix element
* @param {NonNegativeInteger} offsetAM - starting index for `amax`
* @returns {integer} status code
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var A = new Float64Array( [ 1.0, 2.0, 2.0, 4.0 ] );
* var S = new Float64Array( 2 );
* var scond = new Float64Array( 1 );
* var amax = new Float64Array( 1 );
*
* var out = dpoequ( 2, A, 2, 1, 0, S, 1, 0, scond, 0, amax, 0 );
* // returns 0
*/
function dpoequ( N, A, strideA1, strideA2, offsetA, S, strideS, offsetS, scond, offsetSC, amax, offsetAM ) {
	var smin;
	var i;

	if ( N === 0 ) {
		scond[ offsetSC ] = 1.0;
		amax[ offsetAM ] = 0.0;
		return 0;
	}

	// Find the minimum and maximum diagonal elements.
	S[ offsetS ] = A[ offsetA ];
	smin = S[ offsetS ];
	amax[ offsetAM ] = S[ offsetS ];
	for ( i = 1; i < N; i++ ) {
		S[ offsetS + ( i * strideS ) ] = A[ offsetA + ( i * strideA1 ) + ( i * strideA2 ) ];
		smin = min( smin, S[ offsetS + ( i * strideS ) ] );
		amax[ offsetAM ] = max( amax[ offsetAM ], S[ offsetS + ( i * strideS ) ] );
	}
	if ( smin <= 0.0 ) {
		// Find the first non-positive diagonal element and return.
		for ( i = 0; i < N; i++ ) {
			if ( S[ offsetS + ( i * strideS ) ] <= 0.0 ) {
				return i;
			}
		}
	}
	// Set the scale factors to the reciprocal of the square root of the diagonal elements.
	for ( i = 0; i < N; i++ ) {
		S[ offsetS + ( i * strideS ) ] = 1.0 / sqrt( S[ offsetS + ( i * strideS ) ] );
	}
	// Compute scond = min(S) / max(S).
	scond[ offsetSC ] = sqrt( smin ) / sqrt( amax[ offsetAM ] );
	return 0;
}


// EXPORTS //

module.exports = dpoequ;
