/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var Float64Array = require( '@stdlib/array/float64' );
var EPS = require( '@stdlib/constants/float64/eps' );
var abs = require( '@stdlib/math/base/special/abs' );
var dpoequ = require( './../lib/dpoequ.js' );


// FUNCTIONS //

/**
* Tests for element-wise approximate equality.
*
* @private
* @param {Object} t - test object
* @param {Collection} actual - actual values
* @param {Collection} expected - expected values
* @param {number} rtol - relative tolerance
*/
function isApprox( t, actual, expected, rtol ) {
	var delta;
	var tol;
	var i;

	t.strictEqual( actual.length, expected.length, 'returns expected value' );
	for ( i = 0; i < expected.length; i++ ) {
		if ( actual[ i ] === expected[ i ] ) {
			t.strictEqual( actual[ i ], expected[ i ], 'returns expected value' );
		} else {
			delta = abs( actual[ i ] - expected[ i ] );
			tol = rtol * EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. actual: '+actual[ i ]+'. expected: '+expected[ i ]+'. delta: '+delta+'. tol: '+tol+'.' );
		}
	}
}


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof dpoequ, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function has an arity of 7', function test( t ) {
	t.strictEqual( dpoequ.length, 7, 'returns expected value' );
	t.end();
});

tape( 'the function throws an error if provided an invalid first argument', function test( t ) {
	var values;
	var A;
	var i;

	values = [
		'foo',
		'bar',
		'beep',
		'boop',
		-5,
		NaN,
		true,
		false,
		null,
		void 0,
		[],
		{},
		function noop() {}
	];

	A = new Float64Array( [ 1.0, 0.0, 0.0, 4.0 ] );

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			dpoequ( value, 2, A, 2, A, A, A );
		};
	}
});

tape( 'the function correctly computes row and column scalings intended to equilibrate a symmetric positive definite matrix', function test( t ) {
	var scond;
	var amax;
	var out;
	var A;
	var S;

	A = new Float64Array( [ 1.0, 2.0, 2.0, 4.0 ] );
	S = new Float64Array( 2 );
	scond = new Float64Array( 1 );
	amax = new Float64Array( 1 );

	out = dpoequ( 'row-major', 2, A, 2, S, scond, amax );
	t.strictEqual( out, 0, 'returns expected value' );
	isApprox( t, S, new Float64Array( [ 1.0, 0.5 ] ), 1.0 );
	isApprox( t, scond, new Float64Array( [ 0.5 ] ), 1.0 );
	isApprox( t, amax, new Float64Array( [ 4 ] ), 1.0 );
	t.end();
});

tape( 'the function returns the index of first non-positive diagonal element', function test( t ) {
	var scond;
	var amax;
	var out;
	var A;
	var S;

	A = new Float64Array( [ 1.0, 2.0, 2.0, 0.0 ] );
	S = new Float64Array( [ 0.0, 0.0 ] );
	scond = new Float64Array( [ 0.0 ] );
	amax = new Float64Array( [ 0.0 ] );

	out = dpoequ( 'row-major', 2, A, 2, S, scond, amax );
	t.strictEqual( out, 1, 'returns expected value' );
	isApprox( t, S, new Float64Array( [ 1.0, 0.0 ] ), 1.0 );
	isApprox( t, scond, new Float64Array( [ 0.0 ] ), 1.0 );
	isApprox( t, amax, new Float64Array( [ 1.0 ] ), 1.0 );
	t.end();
});

tape( 'the function sets scond to 1.0 and amax to 0.0 if the order of the matrix is 0', function test( t ) {
	var scond;
	var amax;
	var out;
	var A;
	var S;

	A = new Float64Array( 0 );
	S = new Float64Array( 0 );
	scond = new Float64Array( 1 );
	amax = new Float64Array( 1 );

	out = dpoequ( 'row-major', 0, A, 0, S, scond, amax );
	t.strictEqual( out, 0, 'returns expected value' );
	isApprox( t, scond, new Float64Array( [ 1.0 ] ), 1.0 );
	isApprox( t, amax, new Float64Array( [ 0.0 ] ), 1.0 );
	t.end();
});
