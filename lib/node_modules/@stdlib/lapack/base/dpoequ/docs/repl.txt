
{{alias}}( order, N, A, LDA, S, scond, amax )
    Computes row and column scalings intended to equilibrate a symmetric
    positive definite matrix `A`.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    Parameters
    ----------
    order: string
        Row-major (C-style) or column-major (Fortran-style) order. Must be
        either 'row-major' or 'column-major'.

    N: integer
        Order of matrix.

    A: Float64Array
        Input symmetric positive definite matrix.

    LDA: integer
        Stride of the first dimension of `A` (a.k.a., leading dimension of the
        matrix `A`).

    S: Float64Array
        Array containing scale factors.

    scond: Float64Array
        Array containing the ratio of the smallest to the largest scale
        factors.

    amax: Float64Array
        Array contacontaining the absolute value of the largest matrix element.

    Returns
    -------
    info: integer
        Status code. The status code indicates the following conditions:

        - if equal to zero, then the factorization was successful.
        - if less than zero, then the k-th argument had an illegal value, where
          `k = -info`.
        - if greater than zero, then the leading principal minor of order `k` is
          not positive, where `k = info`. If `k < N`, then the factorization
          could not be completed. If `k = N`, then the factorization was
          completed, but `D(N) <= 0`, meaning that the matrix `A` is not
          positive definite.

    Examples
    --------
    > var A = new {{alias:@stdlib/array/float64}}( [ 1.0, 2.0, 2.0, 4.0 ] );
    > var S = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0 ] );
    > var scond = new {{alias:@stdlib/array/float64}}( [ 0.0 ] );
    > var amax = new {{alias:@stdlib/array/float64}}( [ 0.0 ] );
    > {{alias}}( 'row-major', 2, A, 2, S, scond, amax )
    0
    > S
    <Float64Array>[ 1.0, 0.5 ]
    > scond
    <Float64Array>[ 0.5 ]
    > amax
    <Float64Array>[ 4.0 ]


{{alias}}.ndarray( N, A, sa1, sa2, oa, S, ss, os, sc, osc, am, oam )
    Computes row and column scalings intended to equilibrate a symmetric
    positive definite matrix `A` using alternative semantic indexing.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing semantics based on starting
    indices.

    Parameters
    ----------
    N: integer
        Order of matrix.

    A: Float64Array
        Input symmetric positive definite matrix.

    sa1: integer
        Stride of the first dimension of `A`.

    sa2: integer
        Stride of the second dimension of `A`.

    oa: integer
        Starting index for `A`.

    S: Float64Array
        Array containing scale factors.

    ss: integer
        Stride length of `S`.

    os: integer
        Starting index for `S`.

    sc: Float64Array
        Array containing the ratio of the smallest to the largest scale
        factors.

    osc: integer
        Starting index for `sc`.

    am: Float64Array
        Array contacontaining the absolute value of the largest matrix element.

    oam: integer
        Starting index for `am`.

    Returns
    -------
    info: integer
        Status code. The status code indicates the following conditions:

        - if equal to zero, then the factorization was successful.
        - if less than zero, then the k-th argument had an illegal value, where
          `k = -info`.
        - if greater than zero, then the k-th argument had a non-positive
          value, where `k = info`.

    Examples
    --------
    > var A = new {{alias:@stdlib/array/float64}}( [ 0.0, 1.0, 2.0, 2.0, 4.0 ] );
    > var S = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0 ] );
    > var scond = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0 ] );
    > var amax = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0 ] );
    > {{alias}}.ndarray( 2, A, 2, 1, 1, S, 1, 1, scond, 1, amax, 1 )
    0
    > S
    <Float64Array>[ 0.0, 1.0, 0.5 ]
    > scond
    <Float64Array>[ 0.0, 0.5 ]
    > amax
    <Float64Array>[ 0.0, 4.0 ]

    See Also
    --------
