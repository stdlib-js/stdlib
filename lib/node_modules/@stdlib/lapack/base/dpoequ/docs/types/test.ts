/*
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

import dpoequ = require( './index' );


// TESTS //

// The function returns a Float64Array...
{
	const A = new Float64Array( [ 1.0, 2.0, 2.0, 4.0 ] );
	const S = new Float64Array( [ 0.0 ] );
	const SCOND = new Float64Array( [ 0.0 ] );
	const AMAX = new Float64Array( [ 0.0 ] );

	dpoequ( 'row-major', 2, A, 2, S, SCOND, AMAX ); // $ExpectType number
}

// The compiler throws an error if the function is provided a first argument which is not a string...
{
	const A = new Float64Array( [ 1.0, 2.0, 2.0, 4.0 ] );
	const S = new Float64Array( [ 0.0 ] );
	const SCOND = new Float64Array( [ 0.0 ] );
	const AMAX = new Float64Array( [ 0.0 ] );

	dpoequ( 5, 2, A, 2, S, SCOND, AMAX ); // $ExpectError
	dpoequ( true, 2, A, 2, S, SCOND, AMAX ); // $ExpectError
	dpoequ( false, 2, A, 2, S, SCOND, AMAX ); // $ExpectError
	dpoequ( null, 2, A, 2, S, SCOND, AMAX ); // $ExpectError
	dpoequ( void 0, 2, A, 2, S, SCOND, AMAX ); // $ExpectError
	dpoequ( [], 2, A, 2, S, SCOND, AMAX ); // $ExpectError
	dpoequ( {}, 2, A, 2, S, SCOND, AMAX ); // $ExpectError
	dpoequ( ( x: number ): number => x, 2, A, 2, S, SCOND, AMAX ); // $ExpectError
}

// The compiler throws an error if the function is provided a second argument which is not a number...
{
	const A = new Float64Array( [ 1.0, 2.0, 2.0, 4.0 ] );
	const S = new Float64Array( [ 0.0 ] );
	const SCOND = new Float64Array( [ 0.0 ] );
	const AMAX = new Float64Array( [ 0.0 ] );

	dpoequ( 'row-major', '5', A, 2, S, SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', true, A, 2, S, SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', false, A, 2, S, SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', null, A, 2, S, SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', void 0, A, 2, S, SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', [], A, 2, S, SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', {}, A, 2, S, SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', ( x: number ): number => x, A, 2, S, SCOND, AMAX ); // $ExpectError
}

// The compiler throws an error if the function is provided a third argument which is not a Float64Array...
{
	const S = new Float64Array( [ 0.0 ] );
	const SCOND = new Float64Array( [ 0.0 ] );
	const AMAX = new Float64Array( [ 0.0 ] );

	dpoequ( 'row-major', 2, '5', 2, S, SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, 5, 2, S, SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, true, 2, S, SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, false, 2, S, SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, null, 2, S, SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, void 0, 2, S, SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, [], 2, S, SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, {}, 2, S, SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, ( x: number ): number => x, 2, S, SCOND, AMAX ); // $ExpectError
}

// The compiler throws an error if the function is provided a fourth argument which is not a number...
{
	const A = new Float64Array( [ 1.0, 2.0, 2.0, 4.0 ] );
	const S = new Float64Array( [ 0.0 ] );
	const SCOND = new Float64Array( [ 0.0 ] );
	const AMAX = new Float64Array( [ 0.0 ] );

	dpoequ( 'row-major', 2, A, '5', S, SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, A, true, S, SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, A, false, S, SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, A, null, S, SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, A, void 0, S, SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, A, [], S, SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, A, {}, S, SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, A, ( x: number ): number => x, S, SCOND, AMAX ); // $ExpectError
}

// The compiler throws an error if the function is provided a fifth argument which is not a Float64Array...
{
	const A = new Float64Array( [ 1.0, 2.0, 2.0, 4.0 ] );
	const SCOND = new Float64Array( [ 0.0 ] );
	const AMAX = new Float64Array( [ 0.0 ] );

	dpoequ( 'row-major', 2, A, 2, '5', SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, A, 2, 5, SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, A, 2, true, SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, A, 2, false, SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, A, 2, null, SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, A, 2, void 0, SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, A, 2, [], SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, A, 2, {}, SCOND, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, A, 2, ( x: number ): number => x, SCOND, AMAX ); // $ExpectError
}

// The compiler throws an error if the function is provided a sixth argument which is not a Float64Array...
{
	const A = new Float64Array( [ 1.0, 2.0, 2.0, 4.0 ] );
	const S = new Float64Array( [ 0.0 ] );
	const AMAX = new Float64Array( [ 0.0 ] );

	dpoequ( 'row-major', 2, A, 2, S, '5', AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, A, 2, S, 5, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, A, 2, S, true, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, A, 2, S, false, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, A, 2, S, null, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, A, 2, S, void 0, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, A, 2, S, [], AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, A, 2, S, {}, AMAX ); // $ExpectError
	dpoequ( 'row-major', 2, A, 2, S, ( x: number ): number => x, AMAX ); // $ExpectError
}

// The compiler throws an error if the function is provided a seventh argument which is not a Float64Array...
{
	const A = new Float64Array( [ 1.0, 2.0, 2.0, 4.0 ] );
	const S = new Float64Array( [ 0.0 ] );
	const SCOND = new Float64Array( [ 0.0 ] );

	dpoequ( 'row-major', 2, A, 2, S, SCOND, '5' ); // $ExpectError
	dpoequ( 'row-major', 2, A, 2, S, SCOND, 5 ); // $ExpectError
	dpoequ( 'row-major', 2, A, 2, S, SCOND, true ); // $ExpectError
	dpoequ( 'row-major', 2, A, 2, S, SCOND, false ); // $ExpectError
	dpoequ( 'row-major', 2, A, 2, S, SCOND, null ); // $ExpectError
	dpoequ( 'row-major', 2, A, 2, S, SCOND, void 0 ); // $ExpectError
	dpoequ( 'row-major', 2, A, 2, S, SCOND, [] ); // $ExpectError
	dpoequ( 'row-major', 2, A, 2, S, SCOND, {} ); // $ExpectError
	dpoequ( 'row-major', 2, A, 2, S, SCOND, ( x: number ): number => x ); // $ExpectError
}

// The compiler throws an error if the function is provided an unsupported number of arguments...
{
	const A = new Float64Array( [ 1.0, 2.0, 2.0, 4.0 ] );
	const S = new Float64Array( [ 0.0 ] );
	const SCOND = new Float64Array( [ 0.0 ] );
	const AMAX = new Float64Array( [ 0.0 ] );

	dpoequ(); // $ExpectError
	dpoequ( 'row-major' ); // $ExpectError
	dpoequ( 'row-major', 2 ); // $ExpectError
	dpoequ( 'row-major', 2, A ); // $ExpectError
	dpoequ( 'row-major', 2, A, 2 ); // $ExpectError
	dpoequ( 'row-major', 2, A, 2, S ); // $ExpectError
	dpoequ( 'row-major', 2, A, 2, S, SCOND ); // $ExpectError
	dpoequ( 'row-major', 2, A, 2, S, SCOND, AMAX, 10 ); // $ExpectError
}

// Attached to main export is an `ndarray` method which returns a Float64Array...
{
	const A = new Float64Array( [ 1.0, 2.0, 2.0, 4.0 ] );
	const S = new Float64Array( [ 0.0 ] );
	const SCOND = new Float64Array( [ 0.0 ] );
	const AMAX = new Float64Array( [ 0.0 ] );

	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectType number
}

// The compiler throws an error if the function is provided a first argument which is not a number...
{
	const A = new Float64Array( [ 1.0, 2.0, 2.0, 4.0 ] );
	const S = new Float64Array( [ 0.0 ] );
	const SCOND = new Float64Array( [ 0.0 ] );
	const AMAX = new Float64Array( [ 0.0 ] );

	dpoequ.ndarray( '5', A, 2, 1, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( true, A, 2, 1, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( false, A, 2, 1, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( null, A, 2, 1, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( void 0, A, 2, 1, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( [], A, 2, 1, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( {}, A, 2, 1, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( ( x: number ): number => x, A, 2, 1, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a second argument which is not a Float64Array...
{
	const S = new Float64Array( [ 0.0 ] );
	const SCOND = new Float64Array( [ 0.0 ] );
	const AMAX = new Float64Array( [ 0.0 ] );

	dpoequ.ndarray( 2, '5', 2, 1, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, 5, 2, 1, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, true, 2, 1, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, false, 2, 1, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, null, 2, 1, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, void 0, 2, 1, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, [], 2, 1, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, {}, 2, 1, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, ( x: number ): number => x, 2, 1, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a third argument which is not a number...
{
	const A = new Float64Array( [ 1.0, 2.0, 2.0, 4.0 ] );
	const S = new Float64Array( [ 0.0 ] );
	const SCOND = new Float64Array( [ 0.0 ] );
	const AMAX = new Float64Array( [ 0.0 ] );

	dpoequ.ndarray( 2, A, '5', 1, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, true, 1, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, false, 1, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, null, 1, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, void 0, 1, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, [], 1, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, {}, 1, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, ( x: number ): number => x, 1, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a fourth argument which is not a number...
{
	const A = new Float64Array( [ 1.0, 2.0, 2.0, 4.0 ] );
	const S = new Float64Array( [ 0.0 ] );
	const SCOND = new Float64Array( [ 0.0 ] );
	const AMAX = new Float64Array( [ 0.0 ] );

	dpoequ.ndarray( 2, A, 2, '5', 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, true, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, false, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, null, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, void 0, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, [], 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, {}, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, ( x: number ): number => x, 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a fifth argument which is not a number...
{
	const A = new Float64Array( [ 1.0, 2.0, 2.0, 4.0 ] );
	const S = new Float64Array( [ 0.0 ] );
	const SCOND = new Float64Array( [ 0.0 ] );
	const AMAX = new Float64Array( [ 0.0 ] );

	dpoequ.ndarray( 2, A, 2, 1, '5', S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, true, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, false, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, null, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, void 0, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, [], S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, {}, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, ( x: number ): number => x, S, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a sixth argument which is not a Float64Array...
{
	const A = new Float64Array( [ 1.0, 2.0, 2.0, 4.0 ] );
	const SCOND = new Float64Array( [ 0.0 ] );
	const AMAX = new Float64Array( [ 0.0 ] );

	dpoequ.ndarray( 2, A, 2, 1, 0, '5', 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, 5, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, true, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, false, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, null, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, void 0, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, [], 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, {}, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, ( x: number ): number => x, 1, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a seventh argument which is not a number...
{
	const A = new Float64Array( [ 1.0, 2.0, 2.0, 4.0 ] );
	const S = new Float64Array( [ 0.0 ] );
	const SCOND = new Float64Array( [ 0.0 ] );
	const AMAX = new Float64Array( [ 0.0 ] );

	dpoequ.ndarray( 2, A, 2, 1, 0, S, '5', 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, true, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, false, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, null, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, void 0, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, [], 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, {}, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, ( x: number ): number => x, 0, SCOND, 0, AMAX, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided an eighth argument which is not a number...
{
	const A = new Float64Array( [ 1.0, 2.0, 2.0, 4.0 ] );
	const S = new Float64Array( [ 0.0 ] );
	const SCOND = new Float64Array( [ 0.0 ] );
	const AMAX = new Float64Array( [ 0.0 ] );

	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, '5', SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, true, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, false, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, null, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, void 0, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, [], SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, {}, SCOND, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, ( x: number ): number => x, SCOND, 0, AMAX, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a ninth argument which is not a Float64Array...
{
	const A = new Float64Array( [ 1.0, 2.0, 2.0, 4.0 ] );
	const S = new Float64Array( [ 0.0 ] );
	const AMAX = new Float64Array( [ 0.0 ] );

	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, '5', 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, 5, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, true, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, false, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, null, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, void 0, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, [], 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, {}, 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, ( x: number ): number => x, 0, AMAX, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a tenth argument which is not a number...
{
	const A = new Float64Array( [ 1.0, 2.0, 2.0, 4.0 ] );
	const S = new Float64Array( [ 0.0 ] );
	const SCOND = new Float64Array( [ 0.0 ] );
	const AMAX = new Float64Array( [ 0.0 ] );

	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, '5', AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, true, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, false, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, null, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, void 0, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, [], AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, {}, AMAX, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, ( x: number ): number => x, AMAX, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided an eleventh argument which is not a Float64Array...
{
	const A = new Float64Array( [ 1.0, 2.0, 2.0, 4.0 ] );
	const S = new Float64Array( [ 0.0 ] );
	const SCOND = new Float64Array( [ 0.0 ] );

	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, 0, '5', 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, 0, 5, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, 0, true, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, 0, false, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, 0, null, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, 0, void 0, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, 0, [], 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, 0, {}, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, 0, ( x: number ): number => x, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a twelfth argument which is not a number...
{
	const A = new Float64Array( [ 1.0, 2.0, 2.0, 4.0 ] );
	const S = new Float64Array( [ 0.0 ] );
	const SCOND = new Float64Array( [ 0.0 ] );
	const AMAX = new Float64Array( [ 0.0 ] );

	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, 0, AMAX, '5' ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, 0, AMAX, true ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, 0, AMAX, false ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, 0, AMAX, null ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, 0, AMAX, void 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, 0, AMAX, [] ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, 0, AMAX, {} ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, 0, AMAX, ( x: number ): number => x ); // $ExpectError
}

// The compiler throws an error if the `ndarray` method is provided an unsupported number of arguments...
{
	const A = new Float64Array( [ 1.0, 2.0, 2.0, 4.0 ] );
	const S = new Float64Array( [ 0.0 ] );
	const SCOND = new Float64Array( [ 0.0 ] );
	const AMAX = new Float64Array( [ 0.0 ] );

	dpoequ.ndarray(); // $ExpectError
	dpoequ.ndarray( 2 ); // $ExpectError
	dpoequ.ndarray( 2, A ); // $ExpectError
	dpoequ.ndarray( 2, A, 2 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, 0 ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, 0, AMAX ); // $ExpectError
	dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, SCOND, 0, AMAX, 0, 10 ); // $ExpectError
}
