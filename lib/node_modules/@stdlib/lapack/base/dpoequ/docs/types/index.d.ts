/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// TypeScript Version: 4.1

/// <reference types="@stdlib/types"/>

import { Layout } from '@stdlib/types/blas';

/**
* Status code.
*
* ## Notes
*
* The status code indicates the following conditions:
*
* -   if equal to zero, then the factorization was successful.
* -   if less than zero, then the k-th argument had an illegal value, where `k = -StatusCode`.
* -   if greater than zero, then the leading principal minor of order `k` is not positive, where `k = StatusCode`. If `k < N`, then the factorization could not be completed. If `k = N`, then the factorization was completed, but `D(N) <= 0`, meaning that the matrix `A` is not positive definite.
*/
type StatusCode = number;

/**
* Interface describing `dpoequ`.
*/
interface Routine {
	/**
	* Computes row and column scalings intended to equilibrate a symmetric positive definite matrix `A`.
	*
	* @param order - storage layout
	* @param N - order of matrix
	* @param A - symmetric positive definite matrix
	* @param LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)
	* @param S - array containing scale factors
	* @param scond - array containing the ratio of smallest to largest scale factors
	* @param amax - array containing absolute value of largest matrix element
	* @returns status code
	*
	* @example
	* var Float64Array = require( '@stdlib/array/float64' );
	*
	* var A = new Float64Array( [ 1.0, 2.0, 2.0, 4.0 ] );
	* var S = new Float64Array( 2 );
	* var scond = new Float64Array( 1 );
	* var amax = new Float64Array( 1 );
	*
	* var out = dpoequ( 'row-major', 2, A, 2, S, scond, amax );
	* // returns 0
	*/
	( order: Layout, N: number, A: Float64Array, LDA: number, S: Float64Array, scond: Float64Array, amax: Float64Array ): number;

	/**
	* Computes row and column scalings intended to equilibrate a symmetric positive definite matrix `A` using alternative semantic indexing.
	*
	* @param N - order of matrix
	* @param A - symmetric positive definite matrix
	* @param strideA1 - stride of the first dimension of `A`
	* @param strideA2 - stride of the second dimension of `A`
	* @param offsetA - starting index for `A`
	* @param S - array containing scale factors
	* @param strideS - stride length of `S`
	* @param offsetS - starting index for `S`
	* @param scond - array containing the ratio of smallest to largest scale factors
	* @param offsetSC - starting index for `scond`
	* @param amax - array containing absolute value of largest matrix element
	* @param offsetAM - starting index for `amax`
	* @returns status code
	*
	* @example
	* var Float64Array = require( '@stdlib/array/float64' );
	*
	* var A = new Float64Array( [ 1.0, 2.0, 2.0, 4.0 ] );
	* var S = new Float64Array( 2 );
	* var scond = new Float64Array( 1 );
	* var amax = new Float64Array( 1 );
	*
	* var out = dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, scond, 0, amax, 0 );
	* // returns 0
	*/
	ndarray( N: number, A: Float64Array, strideA1: number, strideA2: number, offsetA: number, S: Float64Array, strideS: number, offsetS: number, scond: Float64Array, offsetSC: number, amax: Float64Array, offsetAM: number ): number;
}

/**
* Computes row and column scalings intended to equilibrate a symmetric positive definite matrix `A`.
*
* @param order - storage layout
* @param N - order of matrix
* @param A - symmetric positive definite matrix
* @param LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)
* @param S - array containing scale factors
* @param scond - array containing the ratio of smallest to largest scale factors
* @param amax - array containing absolute value of largest matrix element
* @returns status code
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var A = new Float64Array( [ 1.0, 2.0, 2.0, 4.0 ] );
* var S = new Float64Array( 2 );
* var scond = new Float64Array( 1 );
* var amax = new Float64Array( 1 );
*
* var out = dpoequ( 'row-major', 2, A, 2, S, scond, amax );
* // returns 0
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var A = new Float64Array( [ 1.0, 2.0, 2.0, 4.0 ] );
* var S = new Float64Array( 2 );
* var scond = new Float64Array( 1 );
* var amax = new Float64Array( 1 );
*
* var out = dpoequ.ndarray( 2, A, 2, 1, 0, S, 1, 0, scond, 0, amax, 0 );
* // returns 0
*/
declare var dpoequ: Routine;


// EXPORTS //

export = dpoequ;
