/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isRowMajor = require( '@stdlib/ndarray/base/assert/is-row-major' );
var dscal = require( '@stdlib/blas/base/dscal' ).ndarray;
var dtrmv = require( '@stdlib/blas/base/dtrmv' ).ndarray;


// MAIN //

/**
* Computes the inverse of a triangular matrix.
*
* @private
* @param {string} uplo - specifies whether to copy the upper or lower triangular/trapezoidal part of matrix `A`
* @param {string} diag - specifies whether or not `A` is unit triangular
* @param {NonNegativeInteger} N - order of matrix `A`
* @param {Float64Array} A - input matrix
* @param {integer} strideA1 - stride of the first dimension of `A`
* @param {integer} strideA2 - stride of the second dimension of `A`
* @param {NonNegativeInteger} offsetA - starting index for `A`
* @returns {Float64Array} output matrix
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var A = new Float64Array( [ 1.0, 2.0, 0.0, 4.0 ] );
* dtrti2( 'upper', 'non-unit', 2, A, 2, 1, 0 );
* // A => <Float64Array>[ 1.0, -0.5, 0.0, 0.25 ]
*/
function dtrti2( uplo, diag, N, A, strideA1, strideA2, offsetA ) {
	var nounit;
	var upper;
	var ajj;
	var tmp;
	var j;

	upper = ( uplo === 'upper' );
	nounit = ( diag === 'non-unit' );

	if ( isRowMajor( [ strideA1, strideA2 ] ) ) {
		upper = !upper;
		tmp = strideA1;
		strideA1 = strideA2;
		strideA2 = tmp;
	}

	if ( upper ) {
		for ( j = 0; j < N; j++ ) {
			if ( nounit ) {
				A[ offsetA + ( j * strideA1 ) + ( j * strideA2 ) ] = 1.0 / A[ offsetA + ( j * strideA1 ) + ( j * strideA2 ) ];
				ajj = -A[ offsetA + ( j * strideA1 ) + ( j * strideA2 ) ];
			} else {
				ajj = -1.0;
			}
			// Compute elements 1:j-1 of j-th column
			dtrmv( 'upper', 'no-transpose', diag, j, A, strideA1, strideA2, offsetA, A, strideA1, offsetA + ( j * strideA2 ) );
			dscal( j, ajj, A, strideA1, offsetA + ( j * strideA2 ) );
		}
		return A;
	}
	// Compute inverse of lower triangular matrix
	for ( j = N - 1; j >= 0; j-- ) {
		if ( nounit ) {
			A[ offsetA + ( j * strideA1 ) + ( j * strideA2 ) ] = 1.0 / A[ offsetA + ( j * strideA1 ) + ( j * strideA2 ) ];
			ajj = -A[ offsetA + ( j * strideA1 ) + ( j * strideA2 ) ];
		} else {
			ajj = -1.0;
		}
		if ( j < N - 1 ) {
			// Compute elements j+1:N of j-th column
			dtrmv( 'lower', 'no-transpose', diag, N - j - 1, A, strideA1, strideA2, offsetA + ( ( j + 1 ) * strideA1 ) + ( ( j + 1 ) * strideA2 ), A, strideA1, offsetA + ( j * strideA2 ) + ( ( j + 1 ) * strideA1 ) );
			dscal( N - j - 1, ajj, A, strideA1, offsetA + ( j * strideA2 ) + ( ( j + 1 ) * strideA1 ) );
		}
	}
	return A;
}


// EXPORTS //

module.exports = dtrti2;
