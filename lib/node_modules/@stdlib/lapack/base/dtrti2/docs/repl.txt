
{{alias}}( order, uplo, diag, N, A, LDA )
    Computes the inverse of a triangular matrix.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    Parameters
    ----------
    order: string
        Row-major (C-style) or column-major (Fortran-style) order. Must be
        either 'row-major' or 'column-major'.

    uplo: string
        Specifies whether to copy the upper or lower triangular/trapezoidal part
        of a matrix `A`.

    diag: string
        Specifies whether or not `A` is unit triangular.

    N: integer
        Order of the matrix `A`.

    A: Float64Array
        Input matrix `A`.

    LDA: integer
        Stride of the first dimension of `A` (a.k.a., leading dimension of the
        matrix `A`).

    Returns
    -------
    A: Float64Array
        Output matrix.

    Examples
    --------
    > var A = new {{alias:@stdlib/array/float64}}( [ 1.0, 2.0, 0.0, 4.0 ] );
    > {{alias}}( 'row-major', 'upper', 'non-unit', 2, A, 2 )
    <Float64Array>[ 1.0, -0.5, 0.0, 0.25 ]


{{alias}}.ndarray( uplo, diag, N, A, strideA1, strideA2, offsetA )
    Computes the inverse of a triangular matrix using alternative indexing
    semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing semantics based on starting
    indices.

    Parameters
    ----------
    uplo: string
        Specifies whether to copy the upper or lower triangular/trapezoidal part
        of a matrix `A`.

    diag: string
        Specifies whether or not `A` is unit triangular.

    N: integer
        Order of the matrix `A`.

    A: Float64Array
        Input matrix `A`.

    strideA1: integer
        Stride of the first dimension of `A`.

    strideA2: integer
        Stride of the second dimension of `A`.

    offsetA: integer
        Starting index for `A`.

    Returns
    -------
    A: Float64Array
        Output matrix.

    Examples
    --------
    > var A = new {{alias:@stdlib/array/float64}}( [ 0.0, 1.0, 2.0, 0.0, 4.0 ] );
    > {{alias}}.ndarray( 'upper', 'non-unit', 2, A, 2, 1, 1 )
    <Float64Array>[ 0.0, 1.0, -0.5, 0.0, 0.25 ]

    See Also
    --------
