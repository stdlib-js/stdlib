/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// TypeScript Version: 4.1

/// <reference types="@stdlib/types"/>

import { Layout, MatrixTriangle, DiagonalType } from '@stdlib/types/blas';

/**
* Interface describing `dtrti2`.
*/
interface Routine {
	/**
	* Computes the inverse of a triangular matrix.
	*
	* @param order - storage layout
	* @param uplo - specifies whether to copy the upper or lower triangular/trapezoidal part of matrix `A`
	* @param diag - specifies whether or not `A` is unit triangular
	* @param N - order of matrix `A`
	* @param A - input matrix
	* @param LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)
	* @returns output matrix
	*
	* @example
	* var Float64Array = require( '@stdlib/array/float64' );
	*
	* var A = new Float64Array( [ 1.0, 2.0, 0.0, 4.0 ] );
	* dtrti2( 'row-major', 'upper', 'non-unit', 2, A, 2 );
	* // A => <Float64Array>[ 1.0, -0.5, 0.0, 0.25 ]
	*/
	( order: Layout, uplo: MatrixTriangle, diag: DiagonalType, N: number, A: Float64Array, LDA: number ): Float64Array;

	/**
	* Computes the inverse of a triangular matrix using alternative indexing semantics.
	*
	* @param uplo - specifies whether to copy the upper or lower triangular/trapezoidal part of matrix `A`
	* @param diag - specifies whether or not `A` is unit triangular
	* @param N - order of matrix `A`
	* @param A - input matrix
	* @param strideA1 - stride of the first dimension of `A`
	* @param strideA2 - stride of the second dimension of `A`
	* @param offsetA - starting index for `A`
	* @returns output matrix
	*
	* @example
	* var Float64Array = require( '@stdlib/array/float64' );
	*
	* var A = new Float64Array( [ 1.0, 2.0, 0.0, 4.0 ] );
	* dtrti2.ndarray( 'upper', 'non-unit', 2, A, 2, 1, 0 );
	* // A => <Float64Array>[ 1.0, -0.5, 0.0, 0.25 ]
	*/
	ndarray( uplo: MatrixTriangle, diag: DiagonalType, N: number, A: Float64Array, strideA1: number, strideA2: number, offsetA: number ): Float64Array;
}

/**
* Computes the inverse of a triangular matrix.
*
* @param order - storage layout
* @param uplo - specifies whether to copy the upper or lower triangular/trapezoidal part of matrix `A`
* @param diag - specifies whether or not `A` is unit triangular
* @param N - order of matrix `A`
* @param A - input matrix
* @param LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)
* @returns output matrix
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var A = new Float64Array( [ 1.0, 2.0, 0.0, 4.0 ] );
* dtrti2( 'row-major', 'upper', 'non-unit', 2, A, 2 );
* // A => <Float64Array>[ 1.0, -0.5, 0.0, 0.25 ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var A = new Float64Array( [ 1.0, 2.0, 0.0, 4.0 ] );
* dtrti2.ndarray( 'upper', 'non-unit', 2, A, 2, 1, 0 );
* // A => <Float64Array>[ 1.0, -0.5, 0.0, 0.25 ]
*/
declare var dtrti2: Routine;


// EXPORTS //

export = dtrti2;
