/*
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

import dtrti2 = require( './index' );


// TESTS //

// The function returns a Float64Array...
{
	const A = new Float64Array( [ 1.0, 2.0, 0.0, 4.0 ] );

	dtrti2( 'row-major', 'upper', 'non-unit', 2, A, 2 ); // $ExpectType Float64Array
}

// The compiler throws an error if the function is provided a first argument which is not a string...
{
	const A = new Float64Array( [ 1.0, 2.0, 0.0, 4.0 ] );

	dtrti2( 5, 'upper', 'non-unit', 2, A, 2 ); // $ExpectError
	dtrti2( true, 'upper', 'non-unit', 2, A, 2 ); // $ExpectError
	dtrti2( false, 'upper', 'non-unit', 2, A, 2 ); // $ExpectError
	dtrti2( null, 'upper', 'non-unit', 2, A, 2 ); // $ExpectError
	dtrti2( void 0, 'upper', 'non-unit', 2, A, 2 ); // $ExpectError
	dtrti2( [], 'upper', 'non-unit', 2, A, 2 ); // $ExpectError
	dtrti2( {}, 'upper', 'non-unit', 2, A, 2 ); // $ExpectError
	dtrti2( ( x: number ): number => x, 'upper', 'non-unit', 2, A, 2 ); // $ExpectError
}

// The compiler throws an error if the function is provided a second argument which is not a string...
{
	const A = new Float64Array( [ 1.0, 2.0, 0.0, 4.0 ] );

	dtrti2( 'row-major', 5, 'non-unit', 2, A, 2 ); // $ExpectError
	dtrti2( 'row-major', true, 'non-unit', 2, A, 2 ); // $ExpectError
	dtrti2( 'row-major', false, 'non-unit', 2, A, 2 ); // $ExpectError
	dtrti2( 'row-major', null, 'non-unit', 2, A, 2 ); // $ExpectError
	dtrti2( 'row-major', void 0, 'non-unit', 2, A, 2 ); // $ExpectError
	dtrti2( 'row-major', [], 'non-unit', 2, A, 2 ); // $ExpectError
	dtrti2( 'row-major', {}, 'non-unit', 2, A, 2 ); // $ExpectError
	dtrti2( 'row-major', ( x: number ): number => x, 'non-unit', 2, A, 2 ); // $ExpectError
}

// The compiler throws an error if the function is provided a third argument which is not a string...
{
	const A = new Float64Array( [ 1.0, 2.0, 0.0, 4.0 ] );

	dtrti2( 'row-major', 'upper', 5, 2, A, 2 ); // $ExpectError
	dtrti2( 'row-major', 'upper', true, 2, A, 2 ); // $ExpectError
	dtrti2( 'row-major', 'upper', false, 2, A, 2 ); // $ExpectError
	dtrti2( 'row-major', 'upper', null, 2, A, 2 ); // $ExpectError
	dtrti2( 'row-major', 'upper', void 0, 2, A, 2 ); // $ExpectError
	dtrti2( 'row-major', 'upper', [], 2, A, 2 ); // $ExpectError
	dtrti2( 'row-major', 'upper', {}, 2, A, 2 ); // $ExpectError
	dtrti2( 'row-major', 'upper', ( x: number ): number => x, 2, A, 2 ); // $ExpectError
}

// The compiler throws an error if the function is provided a fourth argument which is not a number...
{
	const A = new Float64Array( [ 1.0, 2.0, 0.0, 4.0 ] );

	dtrti2( 'row-major', 'upper', 'non-unit', '5', A, 2 ); // $ExpectError
	dtrti2( 'row-major', 'upper', 'non-unit', true, A, 2 ); // $ExpectError
	dtrti2( 'row-major', 'upper', 'non-unit', false, A, 2 ); // $ExpectError
	dtrti2( 'row-major', 'upper', 'non-unit', null, A, 2 ); // $ExpectError
	dtrti2( 'row-major', 'upper', 'non-unit', void 0, A, 2 ); // $ExpectError
	dtrti2( 'row-major', 'upper', 'non-unit', [], A, 2 ); // $ExpectError
	dtrti2( 'row-major', 'upper', 'non-unit', {}, A, 2 ); // $ExpectError
	dtrti2( 'row-major', 'upper', 'non-unit', ( x: number ): number => x, A, 2 ); // $ExpectError
}

// The compiler throws an error if the function is provided a fifth argument which is not a Float64Array...
{

	dtrti2( 'row-major', 'upper', 'non-unit', 2, '5', 2 ); // $ExpectError
	dtrti2( 'row-major', 'upper', 'non-unit', 2, 5, 2 ); // $ExpectError
	dtrti2( 'row-major', 'upper', 'non-unit', 2, true, 2 ); // $ExpectError
	dtrti2( 'row-major', 'upper', 'non-unit', 2, false, 2 ); // $ExpectError
	dtrti2( 'row-major', 'upper', 'non-unit', 2, null, 2 ); // $ExpectError
	dtrti2( 'row-major', 'upper', 'non-unit', 2, void 0, 2 ); // $ExpectError
	dtrti2( 'row-major', 'upper', 'non-unit', 2, [], 2 ); // $ExpectError
	dtrti2( 'row-major', 'upper', 'non-unit', 2, {}, 2 ); // $ExpectError
	dtrti2( 'row-major', 'upper', 'non-unit', 2, ( x: number ): number => x, 2 ); // $ExpectError
}

// The compiler throws an error if the function is provided a sixth argument which is not a number...
{
	const A = new Float64Array( [ 1.0, 2.0, 0.0, 4.0 ] );

	dtrti2( 'row-major', 'upper', 'non-unit', 2, A, '5' ); // $ExpectError
	dtrti2( 'row-major', 'upper', 'non-unit', 2, A, true ); // $ExpectError
	dtrti2( 'row-major', 'upper', 'non-unit', 2, A, false ); // $ExpectError
	dtrti2( 'row-major', 'upper', 'non-unit', 2, A, null ); // $ExpectError
	dtrti2( 'row-major', 'upper', 'non-unit', 2, A, void 0 ); // $ExpectError
	dtrti2( 'row-major', 'upper', 'non-unit', 2, A, [] ); // $ExpectError
	dtrti2( 'row-major', 'upper', 'non-unit', 2, A, {} ); // $ExpectError
	dtrti2( 'row-major', 'upper', 'non-unit', 2, A, ( x: number ): number => x ); // $ExpectError
}

// The compiler throws an error if the function is provided an unsupported number of arguments...
{
	const A = new Float64Array( [ 1.0, 2.0, 0.0, 4.0 ] );

	dtrti2(); // $ExpectError
	dtrti2( 'row-major' ); // $ExpectError
	dtrti2( 'row-major', 'upper' ); // $ExpectError
	dtrti2( 'row-major', 'upper', 'non-unit' ); // $ExpectError
	dtrti2( 'row-major', 'upper', 'non-unit', 2 ); // $ExpectError
	dtrti2( 'row-major', 'upper', 'non-unit', 2, A ); // $ExpectError
	dtrti2( 'row-major', 'upper', 'non-unit', 2, A, 2, 10 ); // $ExpectError
}

// Attached to main export is an `ndarray` method which returns a Float64Array...
{
	const A = new Float64Array( [ 1.0, 2.0, 0.0, 4.0 ] );

	dtrti2.ndarray( 'upper', 'non-unit', 2, A, 2, 1, 0 ); // $ExpectType Float64Array
}

// The compiler throws an error if the function is provided a first argument which is not a string...
{
	const A = new Float64Array( [ 1.0, 2.0, 0.0, 4.0 ] );

	dtrti2.ndarray( 5, 'non-unit', 2, A, 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( true, 'non-unit', 2, A, 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( false, 'non-unit', 2, A, 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( null, 'non-unit', 2, A, 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( void 0, 'non-unit', 2, A, 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( [], 'non-unit', 2, A, 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( {}, 'non-unit', 2, A, 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( ( x: number ): number => x, 'non-unit', 2, A, 2, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a second argument which is not a string...
{
	const A = new Float64Array( [ 1.0, 2.0, 0.0, 4.0 ] );

	dtrti2.ndarray( 'upper', 5, 2, A, 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', true, 2, A, 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', false, 2, A, 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', null, 2, A, 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', void 0, 2, A, 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', [], 2, A, 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', {}, 2, A, 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', ( x: number ): number => x, 2, A, 2, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a third argument which is not a number...
{
	const A = new Float64Array( [ 1.0, 2.0, 0.0, 4.0 ] );

	dtrti2.ndarray( 'upper', 'non-unit', '5', A, 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', true, A, 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', false, A, 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', null, A, 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', void 0, A, 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', [], A, 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', {}, A, 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', ( x: number ): number => x, A, 2, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a fourth argument which is not a Float64Array...
{

	dtrti2.ndarray( 'upper', 'non-unit', 2, '5', 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, 5, 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, true, 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, false, 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, null, 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, void 0, 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, [], 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, {}, 2, 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, ( x: number ): number => x, 2, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a fifth argument which is not a number...
{
	const A = new Float64Array( [ 1.0, 2.0, 0.0, 4.0 ] );

	dtrti2.ndarray( 'upper', 'non-unit', 2, A, '5', 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, A, true, 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, A, false, 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, A, null, 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, A, void 0, 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, A, [], 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, A, {}, 1, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, A, ( x: number ): number => x, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a sixth argument which is not a number...
{
	const A = new Float64Array( [ 1.0, 2.0, 0.0, 4.0 ] );

	dtrti2.ndarray( 'upper', 'non-unit', 2, A, 2, '5', 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, A, 2, true, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, A, 2, false, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, A, 2, null, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, A, 2, void 0, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, A, 2, [], 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, A, 2, {}, 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, A, 2, ( x: number ): number => x, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a seventh argument which is not a number...
{
	const A = new Float64Array( [ 1.0, 2.0, 0.0, 4.0 ] );

	dtrti2.ndarray( 'upper', 'non-unit', 2, A, 2, 1, '5' ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, A, 2, 1, true ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, A, 2, 1, false ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, A, 2, 1, null ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, A, 2, 1, void 0 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, A, 2, 1, [] ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, A, 2, 1, {} ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, A, 2, 1, ( x: number ): number => x ); // $ExpectError
}

// The compiler throws an error if the `ndarray` method is provided an unsupported number of arguments...
{
	const A = new Float64Array( [ 1.0, 2.0, 0.0, 4.0 ] );

	dtrti2.ndarray(); // $ExpectError
	dtrti2.ndarray( 'upper' ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit' ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, A ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, A, 2 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, A, 2, 1 ); // $ExpectError
	dtrti2.ndarray( 'upper', 'non-unit', 2, A, 2, 1, 0, 10 ); // $ExpectError
}
