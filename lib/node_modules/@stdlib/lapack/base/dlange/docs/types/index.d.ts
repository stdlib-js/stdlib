/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// TypeScript Version: 4.1

/// <reference types="@stdlib/types"/>

import { Layout } from '@stdlib/types/blas';

/**
* Interface describing `dlange`.
*/
interface Routine {
	/**
	* Returns the value of one norm, or the Frobenius norm, or the infinity norm, or the element of largest absolute value of a real matrix `A`.
	*
	* @param order - storage layout
	* @param norm - specifies the value to be returned
	* @param axis - specifies the axis along which to compute the norm
	* @param M - number of rows of `A`
	* @param N - number of columns of `A`
	* @param A - input array
	* @param LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)
	* @param work - workspace array
	* @returns matrix norm
	*
	* @example
	* var Float64Array = require( '@stdlib/array/float64' );
	*
	* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	* var work = new Float64Array( 2 );
	*
	* var out = dlange( 'row-major', 'M', 1, 2, 2, A, 2, work );
	* // returns 4.0
	*/
	( order: Layout, norm: string, axis: number, M: number, N: number, A: Float64Array, LDA: number, work: Float64Array ): number;

	/**
	* Returns the value of one norm, or the Frobenius norm, or the infinity norm, or the element of largest absolute value of a real matrix `A` using alternative indexing semantics.
	*
	* @param norm - specifies the value to be returned
	* @param axis - specifies the axis along which to compute the norm
	* @param M - number of rows of `A`
	* @param N - number of columns of `A`
	* @param A - input array
	* @param strideA1 - stride of the first dimension of `A`
	* @param strideA2 - stride of the second dimension of `A`
	* @param offsetA - starting index for `A`
	* @param work - workspace array
	* @param strideW - stride length for `work`
	* @param offsetW - starting index for `work`
	* @returns matrix norm
	*
	* @example
	* var Float64Array = require( '@stdlib/array/float64' );
	*
	* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	* var work = new Float64Array( 2 );
	*
	* var out = dlange.ndarray( 'M', 1, 2, 2, A, 2, 1, 0, work, 1, 0 );
	* // returns 4.0
	*/
	ndarray( norm: string, axis: number, M: number, N: number, A: Float64Array, strideA1: number, strideA2: number, offsetA: number, work: Float64Array, strideW: number, offsetW: number ): number;
}

/**
* Returns the value of one norm, or the Frobenius norm, or the infinity norm, or the element of largest absolute value of a real matrix `A`.
*
* @param order - storage layout
* @param norm - specifies the value to be returned
* @param axis - specifies the axis along which to compute the norm
* @param M - number of rows of `A`
* @param N - number of columns of `A`
* @param A - input array
* @param LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)
* @param work - workspace array
* @returns matrix norm
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
* var work = new Float64Array( 2 );
*
* var out = dlange( 'row-major', 'M', 1, 2, 2, A, 2, work );
* // returns 4.0
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
* var work = new Float64Array( 2 );
*
* var out = dlange.ndarray( 'M', 1, 2, 2, A, 2, 1, 0, work, 1, 0 );
* // returns 4.0
*/
declare var dlange: Routine;


// EXPORTS //

export = dlange;
