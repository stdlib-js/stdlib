/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var Float64Array = require( '@stdlib/array/float64' );
var dlange = require( './../lib/ndarray.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof dlange, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function has an arity of 11', function test( t ) {
	t.strictEqual( dlange.length, 11, 'returns expected value' );
	t.end();
});

tape( 'the function allows specifying offset for computation of norms ( offsetA = 4, offsetWork = 2 )', function test( t ) {
	var expected;
	var work;
	var out;
	var A;

	A = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 3.0, 4.0 ] );
	work = new Float64Array( [ 0.0, 0.0, 999.9, 999.9 ] );

	out = dlange( 'M', 1, 2, 2, A, 2, 1, 4, work, 1, 2 );
	expected = 4.0;
	t.strictEqual( out, expected, 'returns expected value' );

	out = dlange( '1', 1, 2, 2, A, 2, 1, 4, work, 1, 2 );
	expected = 6.0;
	t.strictEqual( out, expected, 'returns expected value' );

	out = dlange( 'I', 1, 2, 2, A, 2, 1, 4, work, 1, 2 );
	expected = 7.0;
	t.strictEqual( out, expected, 'returns expected value' );

	out = dlange( 'F', 1, 2, 2, A, 2, 1, 4, work, 1, 2 );
	expected = 5.477225575051661;
	t.strictEqual( out, expected, 'returns expected value' );

	t.end();
});

tape( 'the function allows accessing elements from an input array which do not have contiguous column memory layout( row-major, strideA2 = 2, strideA1 = 3 )', function test( t ) {
	var expected;
	var work;
	var out;
	var A;

	A = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 1.0, 999.9, 2.0, 3.0, 999.9, 4.0 ] );
	work = new Float64Array( [ 0.0, 0.0, 999.9, 999.9 ] );

	out = dlange( 'M', 1, 2, 2, A, 3, 2, 4, work, 1, 2 );
	expected = 4.0;
	t.strictEqual( out, expected, 'returns expected value' );

	out = dlange( '1', 1, 2, 2, A, 3, 2, 4, work, 1, 2 );
	expected = 6.0;
	t.strictEqual( out, expected, 'returns expected value' );

	out = dlange( 'I', 1, 2, 2, A, 3, 2, 4, work, 1, 2 );
	expected = 7.0;
	t.strictEqual( out, expected, 'returns expected value' );

	out = dlange( 'F', 1, 2, 2, A, 3, 2, 4, work, 1, 2 );
	expected = 5.477225575051661;
	t.strictEqual( out, expected, 'returns expected value' );
	t.end();
});

tape( 'the function allows accessing elements from an input array which do not have contiguous column & row memory layout( row-major, strideA2 = 2, strideA1 = 6 )', function test( t ) {
	var expected;
	var work;
	var out;
	var A;

	A = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 1.0, 999.9, 2.0, 999.9, 999.9, 999.9, 3.0, 999.9, 4.0 ] );
	work = new Float64Array( [ 0.0, 999.9, 0.0, 999.9 ] );

	out = dlange( 'M', 1, 2, 2, A, 6, 2, 4, work, 2, 1 );
	expected = 4.0;
	t.strictEqual( out, expected, 'returns expected value' );

	out = dlange( '1', 1, 2, 2, A, 6, 2, 4, work, 2, 1 );
	expected = 6.0;
	t.strictEqual( out, expected, 'returns expected value' );

	out = dlange( 'I', 1, 2, 2, A, 6, 2, 4, work, 2, 1 );
	expected = 7.0;
	t.strictEqual( out, expected, 'returns expected value' );

	out = dlange( 'F', 1, 2, 2, A, 6, 2, 4, work, 2, 1 );
	expected = 5.477225575051661;
	t.strictEqual( out, expected, 'returns expected value' );
	t.end();
});

tape( 'the function supports accessing elements in reverse order', function test( t ) {
	var expected;
	var work;
	var out;
	var A;

	A = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 4.0, 999.9, 3.0, 999.9, 999.9, 999.9, 2.0, 999.9, 1.0 ] );
	work = new Float64Array( [ 0.0, 999.9, 0.0, 999.9 ] );

	out = dlange( 'M', 1, 2, 2, A, -6, -2, 12, work, -1, 3 );
	expected = 4.0;
	t.strictEqual( out, expected, 'returns expected value' );

	out = dlange( '1', 1, 2, 2, A, -6, -2, 12, work, -1, 3 );
	expected = 6.0;
	t.strictEqual( out, expected, 'returns expected value' );

	out = dlange( 'I', 1, 2, 2, A, -6, -2, 12, work, -1, 3 );
	expected = 7.0;
	t.strictEqual( out, expected, 'returns expected value' );

	out = dlange( 'F', 1, 2, 2, A, -6, -2, 12, work, -1, 3 );
	expected = 5.477225575051661;
	t.strictEqual( out, expected, 'returns expected value' );
	t.end();
});
