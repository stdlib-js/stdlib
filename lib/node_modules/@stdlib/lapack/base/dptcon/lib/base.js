/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable max-len, max-params */

'use strict';

// MODULES //

var idamax = require( '@stdlib/blas/base/idamax' ).ndarray;
var abs = require( '@stdlib/math/base/special/abs' );


// MAIN //

/**
* Computes the reciprocal of the condition number of a real symmetric positive definite tridiagonal matrix using the factorization `A = L*D*L^T`.
*
* @private
* @param {NonNegativeInteger} N - order of matrix `A`
* @param {Float64Array} D - `N` diagonal elements of matrix `D` from the factorization `A = L*D*L^T`
* @param {integer} strideD - stride length for `D`
* @param {NonNegativeInteger} offsetD - starting index of `D`
* @param {Float64Array} E - `N-1` off-diagonal elements of matrix `U` or `L` from the factorization `A`
* @param {integer} strideE - stride length for `E`
* @param {NonNegativeInteger} offsetE - starting index of `E`
* @param {number} anorm - 1-norm of `A`
* @param {Float64Array} rcond - array containing the reciprocal of the condition number of `A`
* @param {NonNegativeInteger} offsetR - starting index of `rcond`
* @param {Float64Array} work - workspace array
* @param {integer} strideW - stride length for `work`
* @param {NonNegativeInteger} offsetW - starting index of `work`
* @returns {integer} status code
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var D = new Float64Array( [ 3.0, 2.0, 1.0 ] );
* var E = new Float64Array( [ 1.0, 1.0 ] );
* var rcond = new Float64Array( 1 );
* var work = new Float64Array( 3 );
*
* var out = dptcon( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0 );
* // returns 0
*/
function dptcon( N, D, strideD, offsetD, E, strideE, offsetE, anorm, rcond, offsetR, work, strideW, offsetW ) {
	var ainvnm;
	var ix;
	var i;

	if ( N < 0 ) {
		return -1;
	}
	if ( anorm < 0.0 ) {
		return -4;
	}

	rcond[ offsetR ] = 0.0;
	if ( N === 0 ) {
		rcond[ offsetR ] = 1.0;
		return 0;
	}
	if ( anorm === 0.0 ) {
		return 0;
	}

	// Check that D(1:N) is positive.
	for ( i = 0; i < N; i++ ) {
		if ( D[ offsetD + ( i * strideD ) ] <= 0.0 ) {
			return 0;
		}
	}

	work[ offsetW ] = 1.0;
	for ( i = 1; i < N; i++ ) {
		work[ offsetW + ( i * strideW ) ] = 1.0 + ( work[ offsetW + ( ( i - 1 ) * strideW ) ] * abs( E[ offsetE + ( ( i - 1 ) * strideE ) ] ) );
	}

	// Solve `D*M(L)^T*x = b`.
	work[ offsetW + ( ( N - 1 ) * strideW ) ] /= D[ offsetD + ( ( N - 1 ) * strideD ) ];
	for ( i = N - 2; i >= 0; i-- ) {
		work[ offsetW + ( i * strideW ) ] = ( work[ offsetW + ( i * strideW ) ] / D[ offsetD + ( i * strideD ) ] ) + ( work[ offsetW + ( ( i + 1 ) * strideW ) ] * abs( E[ offsetE + ( i * strideE ) ] ) );
	}

	// Compute `ainvnm = max(x(i))`.
	ix = idamax( N, work, strideW, offsetW );
	ainvnm = abs( work[ offsetW + ( ix * strideW ) ] );

	// Compute the reciprocal condition number.
	if ( ainvnm !== 0.0 ) {
		rcond[ offsetR ] = ( 1.0 / ainvnm ) / anorm;
	}
	return 0;
}


// EXPORTS //

module.exports = dptcon;
