/*
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

import dptcon = require( './index' );


// TESTS //

// The function returns a Float64Array...
{
	const D = new Float64Array( [ 3.0, 2.0, 1.0 ] );
	const E = new Float64Array( [ 1.0, 1.0 ] );
	const rcond = new Float64Array( [ 0.0 ] );
	const work = new Float64Array( [ 0.0, 0.0, 0.0 ] );

	dptcon( 3, D, E, 3.0, rcond, work ); // $ExpectType number
}

// The compiler throws an error if the function is provided a first argument which is not a number...
{
	const D = new Float64Array( [ 3.0, 2.0, 1.0 ] );
	const E = new Float64Array( [ 1.0, 1.0 ] );
	const rcond = new Float64Array( [ 0.0 ] );
	const work = new Float64Array( [ 0.0, 0.0, 0.0 ] );

	dptcon( '5', D, E, 3.0, rcond, work ); // $ExpectError
	dptcon( true, D, E, 3.0, rcond, work ); // $ExpectError
	dptcon( false, D, E, 3.0, rcond, work ); // $ExpectError
	dptcon( null, D, E, 3.0, rcond, work ); // $ExpectError
	dptcon( void 0, D, E, 3.0, rcond, work ); // $ExpectError
	dptcon( [], D, E, 3.0, rcond, work ); // $ExpectError
	dptcon( {}, D, E, 3.0, rcond, work ); // $ExpectError
	dptcon( ( x: number ): number => x, D, E, 3.0, rcond, work ); // $ExpectError
}

// The compiler throws an error if the function is provided a second argument which is not a Float64Array...
{
	const E = new Float64Array( [ 1.0, 1.0 ] );
	const rcond = new Float64Array( [ 0.0 ] );
	const work = new Float64Array( [ 0.0, 0.0, 0.0 ] );

	dptcon( 3, '5', E, 3.0, rcond, work ); // $ExpectError
	dptcon( 3, 5, E, 3.0, rcond, work ); // $ExpectError
	dptcon( 3, true, E, 3.0, rcond, work ); // $ExpectError
	dptcon( 3, false, E, 3.0, rcond, work ); // $ExpectError
	dptcon( 3, null, E, 3.0, rcond, work ); // $ExpectError
	dptcon( 3, void 0, E, 3.0, rcond, work ); // $ExpectError
	dptcon( 3, [], E, 3.0, rcond, work ); // $ExpectError
	dptcon( 3, {}, E, 3.0, rcond, work ); // $ExpectError
	dptcon( 3, ( x: number ): number => x, E, 3.0, rcond, work ); // $ExpectError
}

// The compiler throws an error if the function is provided a third argument which is not a Float64Array...
{
	const D = new Float64Array( [ 3.0, 2.0, 1.0 ] );
	const rcond = new Float64Array( [ 0.0 ] );
	const work = new Float64Array( [ 0.0, 0.0, 0.0 ] );

	dptcon( 3, D, '5', 3.0, rcond, work ); // $ExpectError
	dptcon( 3, D, 5, 3.0, rcond, work ); // $ExpectError
	dptcon( 3, D, true, 3.0, rcond, work ); // $ExpectError
	dptcon( 3, D, false, 3.0, rcond, work ); // $ExpectError
	dptcon( 3, D, null, 3.0, rcond, work ); // $ExpectError
	dptcon( 3, D, void 0, 3.0, rcond, work ); // $ExpectError
	dptcon( 3, D, [], 3.0, rcond, work ); // $ExpectError
	dptcon( 3, D, {}, 3.0, rcond, work ); // $ExpectError
	dptcon( 3, D, ( x: number ): number => x, 3.0, rcond, work ); // $ExpectError
}

// The compiler throws an error if the function is provided a fourth argument which is not a number...
{
	const D = new Float64Array( [ 3.0, 2.0, 1.0 ] );
	const E = new Float64Array( [ 1.0, 1.0 ] );
	const rcond = new Float64Array( [ 0.0 ] );
	const work = new Float64Array( [ 0.0, 0.0, 0.0 ] );

	dptcon( 3, D, E, '5', rcond, work ); // $ExpectError
	dptcon( 3, D, E, true, rcond, work ); // $ExpectError
	dptcon( 3, D, E, false, rcond, work ); // $ExpectError
	dptcon( 3, D, E, null, rcond, work ); // $ExpectError
	dptcon( 3, D, E, void 0, rcond, work ); // $ExpectError
	dptcon( 3, D, E, [], rcond, work ); // $ExpectError
	dptcon( 3, D, E, {}, rcond, work ); // $ExpectError
	dptcon( 3, D, E, ( x: number ): number => x, rcond, work ); // $ExpectError
}

// The compiler throws an error if the function is provided a fifth argument which is not a Float64Array...
{
	const D = new Float64Array( [ 3.0, 2.0, 1.0 ] );
	const E = new Float64Array( [ 1.0, 1.0 ] );
	const work = new Float64Array( [ 0.0, 0.0, 0.0 ] );

	dptcon( 3, D, E, 3.0, '5', work ); // $ExpectError
	dptcon( 3, D, E, 3.0, 5, work ); // $ExpectError
	dptcon( 3, D, E, 3.0, true, work ); // $ExpectError
	dptcon( 3, D, E, 3.0, false, work ); // $ExpectError
	dptcon( 3, D, E, 3.0, null, work ); // $ExpectError
	dptcon( 3, D, E, 3.0, void 0, work ); // $ExpectError
	dptcon( 3, D, E, 3.0, [], work ); // $ExpectError
	dptcon( 3, D, E, 3.0, {}, work ); // $ExpectError
	dptcon( 3, D, E, 3.0, ( x: number ): number => x, work ); // $ExpectError
}

// The compiler throws an error if the function is provided a sixth argument which is not a Float64Array...
{
	const D = new Float64Array( [ 3.0, 2.0, 1.0 ] );
	const E = new Float64Array( [ 1.0, 1.0 ] );
	const rcond = new Float64Array( [ 0.0 ] );

	dptcon( 3, D, E, 3.0, rcond, '5' ); // $ExpectError
	dptcon( 3, D, E, 3.0, rcond, 5 ); // $ExpectError
	dptcon( 3, D, E, 3.0, rcond, true ); // $ExpectError
	dptcon( 3, D, E, 3.0, rcond, false ); // $ExpectError
	dptcon( 3, D, E, 3.0, rcond, null ); // $ExpectError
	dptcon( 3, D, E, 3.0, rcond, void 0 ); // $ExpectError
	dptcon( 3, D, E, 3.0, rcond, [] ); // $ExpectError
	dptcon( 3, D, E, 3.0, rcond, {} ); // $ExpectError
	dptcon( 3, D, E, 3.0, rcond, ( x: number ): number => x ); // $ExpectError
}

// The compiler throws an error if the function is provided an unsupported number of arguments...
{
	const D = new Float64Array( [ 3.0, 2.0, 1.0 ] );
	const E = new Float64Array( [ 1.0, 1.0 ] );
	const rcond = new Float64Array( [ 0.0 ] );
	const work = new Float64Array( [ 0.0, 0.0, 0.0 ] );

	dptcon(); // $ExpectError
	dptcon( 3 ); // $ExpectError
	dptcon( 3, D ); // $ExpectError
	dptcon( 3, D, E ); // $ExpectError
	dptcon( 3, D, E, 3.0 ); // $ExpectError
	dptcon( 3, D, E, 3.0, rcond ); // $ExpectError
	dptcon( 3, D, E, 3.0, rcond, work, 10 ); // $ExpectError
}

// Attached to main export is an `ndarray` method which returns a Float64Array...
{
	const D = new Float64Array( [ 3.0, 2.0, 1.0 ] );
	const E = new Float64Array( [ 1.0, 1.0 ] );
	const rcond = new Float64Array( [ 0.0 ] );
	const work = new Float64Array( [ 0.0, 0.0, 0.0 ] );

	dptcon( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectType number
}

// The compiler throws an error if the function is provided a first argument which is not a number...
{
	const D = new Float64Array( [ 3.0, 2.0, 1.0 ] );
	const E = new Float64Array( [ 1.0, 1.0 ] );
	const rcond = new Float64Array( [ 0.0 ] );
	const work = new Float64Array( [ 0.0, 0.0, 0.0 ] );

	dptcon.ndarray( '5', D, 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( true, D, 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( false, D, 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( null, D, 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( void 0, D, 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( [], D, 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( {}, D, 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( ( x: number ): number => x, D, 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a second argument which is not a Float64Array...
{
	const E = new Float64Array( [ 1.0, 1.0 ] );
	const rcond = new Float64Array( [ 0.0 ] );
	const work = new Float64Array( [ 0.0, 0.0, 0.0 ] );

	dptcon.ndarray( 3, '5', 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, 5, 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, true, 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, false, 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, null, 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, void 0, 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, [], 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, {}, 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, ( x: number ): number => x, 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a third argument which is not a number...
{
	const D = new Float64Array( [ 3.0, 2.0, 1.0 ] );
	const E = new Float64Array( [ 1.0, 1.0 ] );
	const rcond = new Float64Array( [ 0.0 ] );
	const work = new Float64Array( [ 0.0, 0.0, 0.0 ] );

	dptcon.ndarray( 3, D, '5', 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, true, 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, false, 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, null, 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, void 0, 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, [], 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, {}, 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, ( x: number ): number => x, 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a fourth argument which is not a number...
{
	const D = new Float64Array( [ 3.0, 2.0, 1.0 ] );
	const E = new Float64Array( [ 1.0, 1.0 ] );
	const rcond = new Float64Array( [ 0.0 ] );
	const work = new Float64Array( [ 0.0, 0.0, 0.0 ] );

	dptcon.ndarray( 3, D, 1, '5', E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, true, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, false, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, null, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, void 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, [], E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, {}, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, ( x: number ): number => x, E, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a fifth argument which is not a Float64Array...
{
	const D = new Float64Array( [ 3.0, 2.0, 1.0 ] );
	const rcond = new Float64Array( [ 0.0 ] );
	const work = new Float64Array( [ 0.0, 0.0, 0.0 ] );

	dptcon.ndarray( 3, D, 1, 0, '5', 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, 5, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, true, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, false, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, null, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, void 0, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, [], 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, {}, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, ( x: number ): number => x, 1, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a sixth argument which is not a number...
{
	const D = new Float64Array( [ 3.0, 2.0, 1.0 ] );
	const E = new Float64Array( [ 1.0, 1.0 ] );
	const rcond = new Float64Array( [ 0.0 ] );
	const work = new Float64Array( [ 0.0, 0.0, 0.0 ] );

	dptcon.ndarray( 3, D, 1, 0, E, '5', 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, true, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, false, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, null, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, void 0, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, [], 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, {}, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, ( x: number ): number => x, 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a seventh argument which is not a number...
{
	const D = new Float64Array( [ 3.0, 2.0, 1.0 ] );
	const E = new Float64Array( [ 1.0, 1.0 ] );
	const rcond = new Float64Array( [ 0.0 ] );
	const work = new Float64Array( [ 0.0, 0.0, 0.0 ] );

	dptcon.ndarray( 3, D, 1, 0, E, 1, '5', 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, true, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, false, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, null, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, void 0, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, [], 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, {}, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, ( x: number ): number => x, 3.0, rcond, 0, work, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided an eighth argument which is not a number...
{
	const D = new Float64Array( [ 3.0, 2.0, 1.0 ] );
	const E = new Float64Array( [ 1.0, 1.0 ] );
	const rcond = new Float64Array( [ 0.0 ] );
	const work = new Float64Array( [ 0.0, 0.0, 0.0 ] );

	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, '5', rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, true, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, false, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, null, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, void 0, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, [], rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, {}, rcond, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, ( x: number ): number => x, rcond, 0, work, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a ninth argument which is not a Float64Array...
{
	const D = new Float64Array( [ 3.0, 2.0, 1.0 ] );
	const E = new Float64Array( [ 1.0, 1.0 ] );
	const work = new Float64Array( [ 0.0, 0.0, 0.0 ] );

	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, '5', 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, 5, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, true, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, false, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, null, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, void 0, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, [], 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, {}, 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, ( x: number ): number => x, 0, work, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a tenth argument which is not a number...
{
	const D = new Float64Array( [ 3.0, 2.0, 1.0 ] );
	const E = new Float64Array( [ 1.0, 1.0 ] );
	const rcond = new Float64Array( [ 0.0 ] );
	const work = new Float64Array( [ 0.0, 0.0, 0.0 ] );

	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, '5', work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, true, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, false, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, null, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, void 0, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, [], work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, {}, work, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, ( x: number ): number => x, work, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided an eleventh argument which is not a Float64Array...
{
	const D = new Float64Array( [ 3.0, 2.0, 1.0 ] );
	const E = new Float64Array( [ 1.0, 1.0 ] );
	const rcond = new Float64Array( [ 0.0 ] );

	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, '5', 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, 5, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, true, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, false, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, null, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, void 0, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, [], 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, {}, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, ( x: number ): number => x, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a twelfth argument which is not a number...
{
	const D = new Float64Array( [ 3.0, 2.0, 1.0 ] );
	const E = new Float64Array( [ 1.0, 1.0 ] );
	const rcond = new Float64Array( [ 0.0 ] );
	const work = new Float64Array( [ 0.0, 0.0, 0.0 ] );

	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, work, '5', 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, work, true, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, work, false, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, work, null, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, work, void 0, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, work, [], 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, work, {}, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, work, ( x: number ): number => x, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a thirteenth argument which is not a number...
{
	const D = new Float64Array( [ 3.0, 2.0, 1.0 ] );
	const E = new Float64Array( [ 1.0, 1.0 ] );
	const rcond = new Float64Array( [ 0.0 ] );
	const work = new Float64Array( [ 0.0, 0.0, 0.0 ] );

	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1, '5' ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1, true ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1, false ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1, null ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1, void 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1, [] ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1, {} ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1, ( x: number ): number => x ); // $ExpectError
}

// The compiler throws an error if the `ndarray` method is provided an unsupported number of arguments...
{
	const D = new Float64Array( [ 3.0, 2.0, 1.0 ] );
	const E = new Float64Array( [ 1.0, 1.0 ] );
	const rcond = new Float64Array( [ 0.0 ] );
	const work = new Float64Array( [ 0.0, 0.0, 0.0 ] );

	dptcon.ndarray(); // $ExpectError
	dptcon.ndarray( 3 ); // $ExpectError
	dptcon.ndarray( 3, D ); // $ExpectError
	dptcon.ndarray( 3, D, 1 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, work ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1 ); // $ExpectError
	dptcon.ndarray( 3, D, 1, 0, E, 1, 0, 3.0, rcond, 0, work, 1, 0, 10 ); // $ExpectError
}
