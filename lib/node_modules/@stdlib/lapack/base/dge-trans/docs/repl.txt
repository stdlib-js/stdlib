
{{alias}}( order, M, N, A, LDA, out, LDO )
    Converts a matrix from row-major layout to column-major layout or vice
    versa.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    Parameters
    ----------
    order: string
        Row-major (C-style) or column-major (Fortran-style) order. Must be
        either 'row-major' or 'column-major'.

    M: integer
        Number of rows in `A`.

    N: integer
        Number of columns in `A`.

    A: Float64Array
        Input matrix `A`.

    LDA: integer
        Stride of the first dimension of `A` (a.k.a., leading dimension of the
        matrix `A`).

    out: Float64Array
        Output matrix `out`.

    LDO: integer
        Stride of the first dimension of `out` (a.k.a., leading dimension of the
        matrix `out`).

    Returns
    -------
    out: Float64Array
        Output matrix.

    Examples
    --------
    > var out = new {{alias:@stdlib/array/float64}}( [ 5.0, 7.0, 0.0, 8.0 ] );
    > var A = new {{alias:@stdlib/array/float64}}( [ 1.0, 3.0, 0.0, 4.0 ] );
    > {{alias}}( 'row-major', 2, 2, A, 2, out, 2 )
    <Float64Array>[ 1.0, 0.0, 3.0, 4.0 ]


{{alias}}.ndarray( M, N, A, sa1, sa2, oa, out, so1, so2, oo )
    Converts a matrix from row-major layout to column-major layout or vice versa
    using alternative indexing semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing semantics based on starting
    indices.

    Parameters
    ----------
    M: integer
        Number of rows in `A`.

    N: integer
        Number of columns in `A`.

    A: Float64Array
        Input matrix `A`.

    sa1: integer
        Stride of the first dimension of `A`.

    sa2: integer
        Stride of the second dimension of `A`.

    oa: integer
        Starting index for `A`.

    out: Float64Array
        Output matrix `out`.

    so1: integer
        Stride of the first dimension of `out`.

    so2: integer
        Stride of the second dimension of `out`.

    oo: integer
        Starting index for `out`.

    Returns
    -------
    out: Float64Array
        Output matrix.

    Examples
    --------
    > var A = new {{alias:@stdlib/array/float64}}( [ 0.0, 1.0, 3.0, 0.0, 4.0 ] );
    > var out = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 5.0, 7.0, 0.0, 8.0 ] );
    > {{alias}}.ndarray( 2, 2, A, 2, 1, 1, out, 2, 1, 2 )
    <Float64Array>[ 0.0, 0.0, 1.0, 0.0, 3.0, 4.0 ]

    See Also
    --------
