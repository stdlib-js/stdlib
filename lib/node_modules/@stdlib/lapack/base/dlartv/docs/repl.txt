
{{alias}}( N, X, strideX, Y, strideY, C, S, strideCS )
    Applies a vector of real plane rotations to elements of real vectors `X`
    and `Y`.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    Parameters
    ----------
    N: number
        Number of plane rotations to apply.

    X: Float64Array
        Input array.

    strideX: number
        Stride length for `X`.

    Y: Float64Array
        Input array.

    strideY: number
        Stride length for `Y`.

    C: Float64Array
        Input array containing the cosine of each plane rotation.

    S: Float64Array
        Input array containing the sine of each plane rotation.

    strideCS: number
        Stride length for `C` and `S`.

    Returns
    -------
    X: Float64Array
        Modified array.

    Examples
    --------
    > var X = new {{alias:@stdlib/array/float64}}( [ 1.0, 1.0 ] );
    > var Y = new {{alias:@stdlib/array/float64}}( [ 1.0, 1.0 ] );
    > var C = new {{alias:@stdlib/array/float64}}( [ 1.0, 1.0 ] );
    > var S = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0 ] );
    > {{alias}}( 2, X, 1, Y, 1, C, S, 1 )
    <Float64Array>[ 1.0, 1.0 ]


{{alias}}.ndarray( N, X, sx, ox, Y, sy, oy, C, sc, oc, S, ss, os )
    Applies a vector of real plane rotations to elements of real vectors `X`
    and `Y` using alternative semantic indexing.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing semantics based on starting
    indices.

    Parameters
    ----------
    N: number
        Number of plane rotations to apply.

    X: Float64Array
        Input array.

    sx: number
        Stride length for `X`.

    ox: number
        Starting index of `X`.

    Y: Float64Array
        Input array.

    sy: number
        Stride length for `Y`.

    oy: number
        Starting index of `Y`.

    C: Float64Array
        Input array containing the cosine of each plane rotation.

    sc: number
        Stride length for `C`.

    oc: number
        Starting index of `C`.

    S: Float64Array
        Input array containing the sine of each plane rotation.

    ss: number
        Stride length for `S`.

    os: number
        Starting index of `S`.

    Returns
    -------
    X: Float64Array
        Modified array.

    Examples
    --------
    > var X = new {{alias:@stdlib/array/float64}}( [ 1.0, 1.0 ] );
    > var Y = new {{alias:@stdlib/array/float64}}( [ 1.0, 1.0 ] );
    > var C = new {{alias:@stdlib/array/float64}}( [ 1.0, 1.0 ] );
    > var S = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0 ] );
    > {{alias}}.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, S, 1, 0 )
    <Float64Array>[ 1.0, 1.0 ]

    See Also
    --------
