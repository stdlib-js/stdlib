/*
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

import dlartv = require( './index' );


// TESTS //

// The function returns a Float64Array...
{
	const X = new Float64Array( [ 1.0, 1.0 ] );
	const Y = new Float64Array( [ 1.0, 1.0 ] );
	const C = new Float64Array( [ 1.0, 1.0 ] );
	const S = new Float64Array( [ 0.0, 0.0 ] );

	dlartv( 2, X, 1, Y, 1, C, S, 1 ); // $ExpectType Float64Array
}

// The compiler throws an error if the function is provided a first argument which is not a number...
{
	const X = new Float64Array( [ 1.0, 1.0 ] );
	const Y = new Float64Array( [ 1.0, 1.0 ] );
	const C = new Float64Array( [ 1.0, 1.0 ] );
	const S = new Float64Array( [ 0.0, 0.0 ] );

	dlartv( '5', X, 1, Y, 1, C, S, 1 ); // $ExpectError
	dlartv( true, X, 1, Y, 1, C, S, 1 ); // $ExpectError
	dlartv( false, X, 1, Y, 1, C, S, 1 ); // $ExpectError
	dlartv( null, X, 1, Y, 1, C, S, 1 ); // $ExpectError
	dlartv( void 0, X, 1, Y, 1, C, S, 1 ); // $ExpectError
	dlartv( [], X, 1, Y, 1, C, S, 1 ); // $ExpectError
	dlartv( {}, X, 1, Y, 1, C, S, 1 ); // $ExpectError
	dlartv( ( x: number ): number => x, X, 1, Y, 1, C, S, 1 ); // $ExpectError
}

// The compiler throws an error if the function is provided a second argument which is not a Float64Array...
{
	const Y = new Float64Array( [ 1.0, 1.0 ] );
	const C = new Float64Array( [ 1.0, 1.0 ] );
	const S = new Float64Array( [ 0.0, 0.0 ] );

	dlartv( 2, '5', 1, Y, 1, C, S, 1 ); // $ExpectError
	dlartv( 2, 5, 1, Y, 1, C, S, 1 ); // $ExpectError
	dlartv( 2, true, 1, Y, 1, C, S, 1 ); // $ExpectError
	dlartv( 2, false, 1, Y, 1, C, S, 1 ); // $ExpectError
	dlartv( 2, null, 1, Y, 1, C, S, 1 ); // $ExpectError
	dlartv( 2, void 0, 1, Y, 1, C, S, 1 ); // $ExpectError
	dlartv( 2, [], 1, Y, 1, C, S, 1 ); // $ExpectError
	dlartv( 2, {}, 1, Y, 1, C, S, 1 ); // $ExpectError
	dlartv( 2, ( x: number ): number => x, 1, Y, 1, C, S, 1 ); // $ExpectError
}

// The compiler throws an error if the function is provided a third argument which is not a number...
{
	const X = new Float64Array( [ 1.0, 1.0 ] );
	const Y = new Float64Array( [ 1.0, 1.0 ] );
	const C = new Float64Array( [ 1.0, 1.0 ] );
	const S = new Float64Array( [ 0.0, 0.0 ] );

	dlartv( 2, X, '5', Y, 1, C, S, 1 ); // $ExpectError
	dlartv( 2, X, true, Y, 1, C, S, 1 ); // $ExpectError
	dlartv( 2, X, false, Y, 1, C, S, 1 ); // $ExpectError
	dlartv( 2, X, null, Y, 1, C, S, 1 ); // $ExpectError
	dlartv( 2, X, void 0, Y, 1, C, S, 1 ); // $ExpectError
	dlartv( 2, X, [], Y, 1, C, S, 1 ); // $ExpectError
	dlartv( 2, X, {}, Y, 1, C, S, 1 ); // $ExpectError
	dlartv( 2, X, ( x: number ): number => x, Y, 1, C, S, 1 ); // $ExpectError
}

// The compiler throws an error if the function is provided a fourth argument which is not a Float64Array...
{
	const X = new Float64Array( [ 1.0, 1.0 ] );
	const C = new Float64Array( [ 1.0, 1.0 ] );
	const S = new Float64Array( [ 0.0, 0.0 ] );

	dlartv( 2, X, 1, '5', 1, C, S, 1 ); // $ExpectError
	dlartv( 2, X, 1, 5, 1, C, S, 1 ); // $ExpectError
	dlartv( 2, X, 1, true, 1, C, S, 1 ); // $ExpectError
	dlartv( 2, X, 1, false, 1, C, S, 1 ); // $ExpectError
	dlartv( 2, X, 1, null, 1, C, S, 1 ); // $ExpectError
	dlartv( 2, X, 1, void 0, 1, C, S, 1 ); // $ExpectError
	dlartv( 2, X, 1, [], 1, C, S, 1 ); // $ExpectError
	dlartv( 2, X, 1, {}, 1, C, S, 1 ); // $ExpectError
	dlartv( 2, X, 1, ( x: number ): number => x, 1, C, S, 1 ); // $ExpectError
}

// The compiler throws an error if the function is provided a fifth argument which is not a number...
{
	const X = new Float64Array( [ 1.0, 1.0 ] );
	const Y = new Float64Array( [ 1.0, 1.0 ] );
	const C = new Float64Array( [ 1.0, 1.0 ] );
	const S = new Float64Array( [ 0.0, 0.0 ] );

	dlartv( 2, X, 1, Y, '5', C, S, 1 ); // $ExpectError
	dlartv( 2, X, 1, Y, true, C, S, 1 ); // $ExpectError
	dlartv( 2, X, 1, Y, false, C, S, 1 ); // $ExpectError
	dlartv( 2, X, 1, Y, null, C, S, 1 ); // $ExpectError
	dlartv( 2, X, 1, Y, void 0, C, S, 1 ); // $ExpectError
	dlartv( 2, X, 1, Y, [], C, S, 1 ); // $ExpectError
	dlartv( 2, X, 1, Y, {}, C, S, 1 ); // $ExpectError
	dlartv( 2, X, 1, Y, ( x: number ): number => x, C, S, 1 ); // $ExpectError
}

// The compiler throws an error if the function is provided a sixth argument which is not a Float64Array...
{
	const X = new Float64Array( [ 1.0, 1.0 ] );
	const Y = new Float64Array( [ 1.0, 1.0 ] );
	const S = new Float64Array( [ 0.0, 0.0 ] );

	dlartv( 2, X, 1, Y, 1, '5', S, 1 ); // $ExpectError
	dlartv( 2, X, 1, Y, 1, 5, S, 1 ); // $ExpectError
	dlartv( 2, X, 1, Y, 1, true, S, 1 ); // $ExpectError
	dlartv( 2, X, 1, Y, 1, false, S, 1 ); // $ExpectError
	dlartv( 2, X, 1, Y, 1, null, S, 1 ); // $ExpectError
	dlartv( 2, X, 1, Y, 1, void 0, S, 1 ); // $ExpectError
	dlartv( 2, X, 1, Y, 1, [], S, 1 ); // $ExpectError
	dlartv( 2, X, 1, Y, 1, {}, S, 1 ); // $ExpectError
	dlartv( 2, X, 1, Y, 1, ( x: number ): number => x, S, 1 ); // $ExpectError
}

// The compiler throws an error if the function is provided a seventh argument which is not a Float64Array...
{
	const X = new Float64Array( [ 1.0, 1.0 ] );
	const Y = new Float64Array( [ 1.0, 1.0 ] );
	const C = new Float64Array( [ 1.0, 1.0 ] );

	dlartv( 2, X, 1, Y, 1, C, '5', 1 ); // $ExpectError
	dlartv( 2, X, 1, Y, 1, C, 5, 1 ); // $ExpectError
	dlartv( 2, X, 1, Y, 1, C, true, 1 ); // $ExpectError
	dlartv( 2, X, 1, Y, 1, C, false, 1 ); // $ExpectError
	dlartv( 2, X, 1, Y, 1, C, null, 1 ); // $ExpectError
	dlartv( 2, X, 1, Y, 1, C, void 0, 1 ); // $ExpectError
	dlartv( 2, X, 1, Y, 1, C, [], 1 ); // $ExpectError
	dlartv( 2, X, 1, Y, 1, C, {}, 1 ); // $ExpectError
	dlartv( 2, X, 1, Y, 1, C, ( x: number ): number => x, 1 ); // $ExpectError
}

// The compiler throws an error if the function is provided an eighth argument which is not a number...
{
	const X = new Float64Array( [ 1.0, 1.0 ] );
	const Y = new Float64Array( [ 1.0, 1.0 ] );
	const C = new Float64Array( [ 1.0, 1.0 ] );
	const S = new Float64Array( [ 0.0, 0.0 ] );

	dlartv( 2, X, 1, Y, 1, C, S, '5' ); // $ExpectError
	dlartv( 2, X, 1, Y, 1, C, S, true ); // $ExpectError
	dlartv( 2, X, 1, Y, 1, C, S, false ); // $ExpectError
	dlartv( 2, X, 1, Y, 1, C, S, null ); // $ExpectError
	dlartv( 2, X, 1, Y, 1, C, S, void 0 ); // $ExpectError
	dlartv( 2, X, 1, Y, 1, C, S, [] ); // $ExpectError
	dlartv( 2, X, 1, Y, 1, C, S, {} ); // $ExpectError
	dlartv( 2, X, 1, Y, 1, C, S, ( x: number ): number => x ); // $ExpectError
}

// The compiler throws an error if the function is provided an unsupported number of arguments...
{
	const X = new Float64Array( [ 1.0, 1.0 ] );
	const Y = new Float64Array( [ 1.0, 1.0 ] );
	const C = new Float64Array( [ 1.0, 1.0 ] );
	const S = new Float64Array( [ 0.0, 0.0 ] );

	dlartv(); // $ExpectError
	dlartv( 2 ); // $ExpectError
	dlartv( 2, X ); // $ExpectError
	dlartv( 2, X, 1 ); // $ExpectError
	dlartv( 2, X, 1, Y ); // $ExpectError
	dlartv( 2, X, 1, Y, 1 ); // $ExpectError
	dlartv( 2, X, 1, Y, 1, C ); // $ExpectError
	dlartv( 2, X, 1, Y, 1, C, S ); // $ExpectError
	dlartv( 2, X, 1, Y, 1, C, S, 1, 10 ); // $ExpectError
}

// Attached to main export is an `ndarray` method which returns a Float64Array...
{
	const X = new Float64Array( [ 1.0, 1.0 ] );
	const Y = new Float64Array( [ 1.0, 1.0 ] );
	const C = new Float64Array( [ 1.0, 1.0 ] );
	const S = new Float64Array( [ 0.0, 0.0 ] );

	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectType Float64Array
}

// The compiler throws an error if the function is provided a first argument which is not a number...
{
	const X = new Float64Array( [ 1.0, 1.0 ] );
	const Y = new Float64Array( [ 1.0, 1.0 ] );
	const C = new Float64Array( [ 1.0, 1.0 ] );
	const S = new Float64Array( [ 0.0, 0.0 ] );

	dlartv.ndarray( '5', X, 1, 0, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( true, X, 1, 0, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( false, X, 1, 0, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( null, X, 1, 0, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( void 0, X, 1, 0, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( [], X, 1, 0, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( {}, X, 1, 0, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( ( x: number ): number => x, X, 1, 0, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a second argument which is not a Float64Array...
{
	const Y = new Float64Array( [ 1.0, 1.0 ] );
	const C = new Float64Array( [ 1.0, 1.0 ] );
	const S = new Float64Array( [ 0.0, 0.0 ] );

	dlartv.ndarray( 2, '5', 1, 0, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, 5, 1, 0, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, true, 1, 0, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, false, 1, 0, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, null, 1, 0, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, void 0, 1, 0, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, [], 1, 0, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, {}, 1, 0, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, ( x: number ): number => x, 1, 0, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a third argument which is not a number...
{
	const X = new Float64Array( [ 1.0, 1.0 ] );
	const Y = new Float64Array( [ 1.0, 1.0 ] );
	const C = new Float64Array( [ 1.0, 1.0 ] );
	const S = new Float64Array( [ 0.0, 0.0 ] );

	dlartv.ndarray( 2, X, '5', 0, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, true, 0, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, false, 0, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, null, 0, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, void 0, 0, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, [], 0, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, {}, 0, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, ( x: number ): number => x, 0, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a fourth argument which is not a number...
{
	const X = new Float64Array( [ 1.0, 1.0 ] );
	const Y = new Float64Array( [ 1.0, 1.0 ] );
	const C = new Float64Array( [ 1.0, 1.0 ] );
	const S = new Float64Array( [ 0.0, 0.0 ] );

	dlartv.ndarray( 2, X, 1, '5', Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, true, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, false, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, null, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, void 0, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, [], Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, {}, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, ( x: number ): number => x, Y, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a fifth argument which is not a Float64Array...
{
	const X = new Float64Array( [ 1.0, 1.0 ] );
	const C = new Float64Array( [ 1.0, 1.0 ] );
	const S = new Float64Array( [ 0.0, 0.0 ] );

	dlartv.ndarray( 2, X, 1, 0, '5', 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, 5, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, true, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, false, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, null, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, void 0, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, [], 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, {}, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, ( x: number ): number => x, 1, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a sixth argument which is not a number...
{
	const X = new Float64Array( [ 1.0, 1.0 ] );
	const Y = new Float64Array( [ 1.0, 1.0 ] );
	const C = new Float64Array( [ 1.0, 1.0 ] );
	const S = new Float64Array( [ 0.0, 0.0 ] );

	dlartv.ndarray( 2, X, 1, 0, Y, '5', 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, true, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, false, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, null, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, void 0, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, [], 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, {}, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, ( x: number ): number => x, 0, C, 1, 0, S, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a seventh argument which is not a number...
{
	const X = new Float64Array( [ 1.0, 1.0 ] );
	const Y = new Float64Array( [ 1.0, 1.0 ] );
	const C = new Float64Array( [ 1.0, 1.0 ] );
	const S = new Float64Array( [ 0.0, 0.0 ] );

	dlartv.ndarray( 2, X, 1, 0, Y, 1, '5', C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, true, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, false, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, null, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, void 0, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, [], C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, {}, C, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, ( x: number ): number => x, C, 1, 0, S, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided an eighth argument which is not a Float64Array...
{
	const X = new Float64Array( [ 1.0, 1.0 ] );
	const Y = new Float64Array( [ 1.0, 1.0 ] );
	const S = new Float64Array( [ 0.0, 0.0 ] );

	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, '5', 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, 5, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, true, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, false, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, null, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, void 0, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, [], 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, {}, 1, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, ( x: number ): number => x, 1, 0, S, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a ninth argument which is not a number...
{
	const X = new Float64Array( [ 1.0, 1.0 ] );
	const Y = new Float64Array( [ 1.0, 1.0 ] );
	const C = new Float64Array( [ 1.0, 1.0 ] );
	const S = new Float64Array( [ 0.0, 0.0 ] );

	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, '5', 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, true, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, false, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, null, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, void 0, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, [], 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, {}, 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, ( x: number ): number => x, 0, S, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a tenth argument which is not a number...
{
	const X = new Float64Array( [ 1.0, 1.0 ] );
	const Y = new Float64Array( [ 1.0, 1.0 ] );
	const C = new Float64Array( [ 1.0, 1.0 ] );
	const S = new Float64Array( [ 0.0, 0.0 ] );

	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, '5', S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, true, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, false, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, null, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, void 0, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, [], S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, {}, S, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, ( x: number ): number => x, S, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided an eleventh argument which is not a Float64Array...
{
	const X = new Float64Array( [ 1.0, 1.0 ] );
	const Y = new Float64Array( [ 1.0, 1.0 ] );
	const C = new Float64Array( [ 1.0, 1.0 ] );

	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, '5', 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, 5, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, true, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, false, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, null, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, void 0, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, [], 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, {}, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, ( x: number ): number => x, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a twelfth argument which is not a number...
{
	const X = new Float64Array( [ 1.0, 1.0 ] );
	const Y = new Float64Array( [ 1.0, 1.0 ] );
	const C = new Float64Array( [ 1.0, 1.0 ] );
	const S = new Float64Array( [ 0.0, 0.0 ] );

	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, S, '5', 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, S, true, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, S, false, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, S, null, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, S, void 0, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, S, [], 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, S, {}, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, S, ( x: number ): number => x, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a thirteenth argument which is not a number...
{
	const X = new Float64Array( [ 1.0, 1.0 ] );
	const Y = new Float64Array( [ 1.0, 1.0 ] );
	const C = new Float64Array( [ 1.0, 1.0 ] );
	const S = new Float64Array( [ 0.0, 0.0 ] );

	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, S, 1, '5' ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, S, 1, true ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, S, 1, false ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, S, 1, null ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, S, 1, void 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, S, 1, [] ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, S, 1, {} ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, S, 1, ( x: number ): number => x ); // $ExpectError
}

// The compiler throws an error if the `ndarray` method is provided an unsupported number of arguments...
{
	const X = new Float64Array( [ 1.0, 1.0 ] );
	const Y = new Float64Array( [ 1.0, 1.0 ] );
	const C = new Float64Array( [ 1.0, 1.0 ] );
	const S = new Float64Array( [ 0.0, 0.0 ] );

	dlartv.ndarray(); // $ExpectError
	dlartv.ndarray( 2 ); // $ExpectError
	dlartv.ndarray( 2, X ); // $ExpectError
	dlartv.ndarray( 2, X, 1 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, S ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, S, 1 ); // $ExpectError
	dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, S, 1, 0, 10 ); // $ExpectError
}
