/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// TypeScript Version: 4.1

/// <reference types="@stdlib/types"/>

/**
* Interface describing `dlartv`.
*/
interface Routine {
	/**
	* Applies a vector of real plane rotations to elements of real vectors `X` and `Y`.
	*
	* @param N - number of plane rotations to apply
	* @param X - input vector
	* @param strideX - stride length for `X`
	* @param Y - input vector
	* @param strideY - stride length for `Y`
	* @param C - vector of cosines of plane rotations
	* @param S - vector of sines of plane rotations
	* @param strideCS - stride length for `C` and `S`
	* @returns `X`
	*
	* @example
	* var Float64Array = require( '@stdlib/array/float64' );
	*
	* var X = new Float64Array( [ 1.0, 1.0 ] );
	* var Y = new Float64Array( [ 1.0, 1.0 ] );
	* var C = new Float64Array( [ 1.0, 1.0 ] );
	* var S = new Float64Array( [ 0.0, 0.0 ] );
	*
	* X = dlartv( 2, X, 1, Y, 1, C, S, 1 );
	* // X => <Float64Array>[ 1.0, 1.0 ]
	*/
	( N: number, X: Float64Array, strideX: number, Y: Float64Array, strideY: number, C: Float64Array, S: Float64Array, strideCS: number ): Float64Array;

	/**
	* Applies a vector of real plane rotations to elements of real vectors `X` and `Y` using alternative indexing semantics.
	*
	* @name dlartv.ndarray
	* @type {Function}
	* @param N - number of plane rotations to apply
	* @param X - input vector
	* @param strideX - stride length for `X`
	* @param offsetX - starting index of `X`
	* @param Y - input vector
	* @param strideY - stride length for `Y`
	* @param offsetY - starting index of `Y`
	* @param C - vector of cosines of plane rotations
	* @param strideC - stride length for `C`
	* @param offsetC - starting index of `C`
	* @param S - vector of sines of plane rotations
	* @param strideS - stride length for `S`
	* @param offsetS - starting index of `S`
	* @returns `X`
	*
	* @example
	* var Float64Array = require( '@stdlib/array/float64' );
	*
	* var X = new Float64Array( [ 1.0, 1.0 ] );
	* var Y = new Float64Array( [ 1.0, 1.0 ] );
	* var C = new Float64Array( [ 1.0, 1.0 ] );
	* var S = new Float64Array( [ 0.0, 0.0 ] );
	*
	* X = dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, S, 1, 0 );
	* // X => <Float64Array>[ 1.0, 1.0 ]
	*/
	ndarray( N: number, X: Float64Array, strideX: number, offsetX: number, Y: Float64Array, strideY: number, offsetY: number, C: Float64Array, strideC: number, offsetC: number, S: Float64Array, strideS: number, offsetS: number ): Float64Array;
}

/**
* Applies a vector of real plane rotations to elements of real vectors `X` and `Y`.
*
* @param N - number of plane rotations to apply
* @param X - input vector
* @param strideX - stride length for `X`
* @param Y - input vector
* @param strideY - stride length for `Y`
* @param C - vector of cosines of plane rotations
* @param S - vector of sines of plane rotations
* @param strideCS - stride length for `C` and `S`
* @returns `X`
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var X = new Float64Array( [ 1.0, 1.0 ] );
* var Y = new Float64Array( [ 1.0, 1.0 ] );
* var C = new Float64Array( [ 1.0, 1.0 ] );
* var S = new Float64Array( [ 0.0, 0.0 ] );
*
* X = dlartv( 2, X, 1, Y, 1, C, S, 1 );
* // X => <Float64Array>[ 1.0, 1.0 ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var X = new Float64Array( [ 1.0, 1.0 ] );
* var Y = new Float64Array( [ 1.0, 1.0 ] );
* var C = new Float64Array( [ 1.0, 1.0 ] );
* var S = new Float64Array( [ 0.0, 0.0 ] );
*
* X = dlartv.ndarray( 2, X, 1, 0, Y, 1, 0, C, 1, 0, S, 1, 0 );
* // X => <Float64Array>[ 1.0, 1.0 ]
*/
declare var dlartv: Routine;


// EXPORTS //

export = dlartv;
