/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var base = require( './base.js' );


// MAIN //

/**
* Applies a vector of real plane rotations to elements of real vectors `X` and `Y`.
*
* @param {NonNegativeInteger} N - number of plane rotations to apply
* @param {Float64Array} X - input vector
* @param {integer} strideX - stride length for `X`
* @param {Float64Array} Y - input vector
* @param {integer} strideY - stride length for `Y`
* @param {Float64Array} C - vector of cosines of plane rotations
* @param {Float64Array} S - vector of sines of plane rotations
* @param {integer} strideCS - stride length for `C`
* @returns {Float64Array} `X`
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var X = new Float64Array( [ 1.0, 1.0 ] );
* var Y = new Float64Array( [ 1.0, 1.0 ] );
* var C = new Float64Array( [ 1.0, 1.0 ] );
* var S = new Float64Array( [ 0.0, 0.0 ] );
*
* X = dlartv( 2, X, 1, Y, 1, C, S, 1 );
* // X => <Float64Array>[ 1.0, 1.0 ]
*/
function dlartv( N, X, strideX, Y, strideY, C, S, strideCS ) {
	var ocs;
	var ox;
	var oy;

	if ( strideX < 0 ) {
		ox = ( 1 - N ) * strideX;
	} else {
		ox = 0;
	}
	if ( strideY < 0 ) {
		oy = ( 1 - N ) * strideY;
	} else {
		oy = 0;
	}

	if ( strideCS < 0 ) {
		ocs = ( 1 - N ) * strideCS;
	} else {
		ocs = 0;
	}

	return base( N, X, strideX, ox, Y, strideY, oy, C, strideCS, ocs, S, strideCS, ocs );
}


// EXPORTS //

module.exports = dlartv;
