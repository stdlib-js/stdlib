
{{alias}}( order, uplo, N, A, LDA )
    Computes the Cholesky factorization of a real symmetric positive definite
    matrix `A`.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    The function mutates `A`.

    Parameters
    ----------
    order: string
        Row-major (C-style) or column-major (Fortran-style) order. Must be
        either 'row-major' or 'column-major'.

    uplo: string
        Specifies whether to copy the upper or lower triangular/trapezoidal part
        of a matrix `A`.

    N: integer
        Order of matrix `A`.

    A: Float64Array
        Input matrix `A`.

    LDA: integer
        Stride of the first dimension of `A` (a.k.a., leading dimension of the
        matrix `A`).

    Returns
    -------
    info: integer
        Status code. The status code indicates the following conditions:

        - if equal to zero, then the factorization was successful.
        - if less than zero, then the k-th argument had an illegal value, where
          `k = -info`.
        - if greater than zero, then the leading principal minor of order `k` is
          not positive, where `k = info`. If `k < N`, then the factorization
          could not be completed. If `k = N`, then the factorization was
          completed, but `D(N) <= 0`, meaning that the matrix `A` is not
          positive definite.

    Examples
    --------
    > var A = new {{alias:@stdlib/array/float64}}( [ 1.0, 0.0, 0.0, 4.0 ] );
    > {{alias}}( 'row-major', 'upper', 2, A, 2 )
    0
    > A
    <Float64Array>[ 1.0, 0.0, 0.0, 2.0 ]


{{alias}}.ndarray( uplo, N, A, strideA1, strideA2, offsetA )
    Computes the Cholesky factorization of a real symmetric positive definite
    matrix `A` using alternative semantic indexing.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing semantics based on starting
    indices.

    The function mutates `A`.

    Parameters
    ----------
    uplo: string
        Specifies whether to copy the upper or lower triangular/trapezoidal part
        of a matrix `A`.

    N: integer
        Number of columns in `A`.

    A: Float64Array
        Input matrix `A`.

    strideA1: integer
        Stride length for the first dimension of `A`.

    strideA2: integer
        Stride length for the second dimension of `A`.

    offsetA: integer
        Index offset for the first element in `A`.

    Returns
    -------
    info: integer
        Status code. The status code indicates the following conditions:

        - if equal to zero, then the factorization was successful.
        - if less than zero, then the k-th argument had an illegal value, where
          `k = -info`.
        - if greater than zero, then the leading principal minor of order `k` is
          not positive, where `k = info`. If `k < N`, then the factorization
          could not be completed. If `k = N`, then the factorization was
          completed, but `D(N) <= 0`, meaning that the matrix `A` is not
          positive definite.

    Examples
    --------
    > var A = new {{alias:@stdlib/array/float64}}( [ 0.0, 1.0, 0.0, 0.0, 4.0 ] );
    > {{alias}}.ndarray( 'upper', 2, A, 2, 1, 1 )
    0
    > A
    <Float64Array>[ 0.0, 1.0, 0.0, 0.0, 2.0 ]

    See Also
    --------
