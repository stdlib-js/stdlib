/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isRowMajor = require( '@stdlib/ndarray/base/assert/is-row-major' );
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var sqrt = require( '@stdlib/math/base/special/sqrt' );
var dgemv = require( '@stdlib/blas/base/dgemv' ).ndarray;
var dscal = require( '@stdlib/blas/base/dscal' ).ndarray;
var ddot = require( '@stdlib/blas/base/ddot' ).ndarray;


// MAIN //

/**
* Computes the Cholesky factorization of a real symmetric positive definite matrix `A`.
*
* @private
* @param {string} uplo - specifies whether to copy the upper or lower triangular/trapezoidal part of matrix `A`
* @param {NonNegativeInteger} N - order of matrix `A`
* @param {Float64Array} A - input symmetric positive definite matrix
* @param {integer} strideA1 - stride of the first dimension of `A`
* @param {integer} strideA2 - stride of the second dimension of `A`
* @param {NonNegativeInteger} offsetA - starting index for `A`
* @returns {integer} status code
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var A = new Float64Array( [ 1.0, 0.0, 0.0, 4.0 ] );
*
* var out = dpotf2( 'upper', 2, A, 2, 1, 0 );
* // returns 0
*/
function dpotf2( uplo, N, A, strideA1, strideA2, offsetA ) {
	var upper;
	var ajj;
	var sa0;
	var sa1;
	var j;

	upper = ( uplo === 'upper' );

	if ( isRowMajor( [ strideA1, strideA2 ] ) ) {
		// For row-major matrices, the last dimension has the fastest changing index...
		sa0 = strideA2; // stride for innermost loop
		sa1 = strideA1; // stride for outermost loop
	} else { // 'column-major'
		// For column-major matrices, the first dimension has the fastest changing index...
		sa0 = strideA1; // stride for innermost loop
		sa1 = strideA2; // stride for outermost loop
	}

	if ( N === 0 ) {
		return 0;
	}
	if ( upper ) {
		for ( j = 0; j < N; j++ ) {
			// Compute U( j, j ) and test for non-positive-definiteness...
			ajj = A[ offsetA + ( j * sa1 ) + ( j * sa0 ) ] - ddot( j, A, sa1, offsetA + ( j * sa0 ), A, sa1, offsetA + ( j * sa0 ) );
			if ( ajj <= 0.0 || isnan( ajj ) ) {
				A[ offsetA + ( j * sa1 ) + ( j * sa0 ) ] = ajj;
				return j;
			}
			ajj = sqrt( ajj );
			A[ offsetA + ( j * sa1 ) + ( j * sa0 ) ] = ajj;

			// Compute elements j+1:N of row j...
			if ( j < N - 1 ) {
				dgemv( 'transpose', j, N - j - 1, -1.0, A, sa1, sa0, offsetA + ( ( j + 1 ) * sa0 ), A, sa1, offsetA + ( j * sa0 ), 1.0, A, sa1, offsetA + ( j * sa1 ) + ( ( j + 1 ) * sa0 ) );
				dscal( N - j - 1, 1.0 / ajj, A, sa1, offsetA + ( j * sa1 ) + ( ( j + 1 ) * sa0 ) );
			}
		}
		return 0;
	}
	// Lower
	for ( j = 0; j < N; j++ ) {
		// Compute L( j, j ) and test for non-positive-definiteness...
		ajj = A[ offsetA + ( j * sa1 ) + ( j * sa0 ) ] - ddot( j, A, sa0, offsetA + ( j * sa1 ), A, sa0, offsetA + ( j * sa1 ) );
		if ( ajj <= 0.0 || isnan( ajj ) ) {
			A[ offsetA + ( j * sa1 ) + ( j * sa0 ) ] = ajj;
			return j;
		}
		ajj = sqrt( ajj );
		A[ offsetA + ( j * sa1 ) + ( j * sa0 ) ] = ajj;

		// Compute elements j+1:N of column j...
		if ( j < N ) {
			dgemv( 'no-transpose', N - j - 1, j, -1.0, A, sa0, sa1, offsetA + ( ( j + 1 ) * sa1 ), A, sa0, offsetA + ( j * sa1 ), 1.0, A, sa0, offsetA + ( ( j + 1 ) * sa1 ) + ( j * sa0 ) );
			dscal( N - j - 1, 1.0 / ajj, A, sa0, offsetA + ( ( j + 1 ) * sa1 ) + ( j * sa0 ) );
		}
	}
	return 0;
}


// EXPORTS //

module.exports = dpotf2;
