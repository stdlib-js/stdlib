/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isLayout = require( '@stdlib/blas/base/assert/is-layout' );
var format = require( '@stdlib/string/format' );
var base = require( './base.js' );


// MAIN //

/**
* Solves a tridiagonal system of the form `A * X = B` using `L * D * L^T` factorization of `A`.
*
* @param {string} order - storage layout
* @param {NonNegativeInteger} N - order of tridiagonal matrix `A`
* @param {NonNegativeInteger} NRHS - number of right hand sides i.e. number of columns in matrix `B`
* @param {Float64Array} D - array containing the diagonal elements of `A`
* @param {Float64Array} E - array containing the subdiagonal elements of `A`
* @param {Float64Array} B - input matrix
* @param {PositiveInteger} LDB - stride of the first dimension of `B` (a.k.a., leading dimension of the matrix `B`)
* @throws {TypeError} first argument must be a valid order
* @returns {Float64Array} output matrix
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var D = new Float64Array( [ 1.0, 1.0, 1.0 ] );
* var E = new Float64Array( [ 2.0, 3.0 ] );
* var B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
*
* dptts2( 'row-major', 3, 2, D, E, B, 2 );
* // B => <Float64Array>[ 11.0, 38.0, -5.0, -18.0, 2.0, 6.0 ]
*/
function dptts2( order, N, NRHS, D, E, B, LDB ) {
	var sb1;
	var sb2;
	if ( !isLayout( order ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );
	}
	if ( order === 'column-major' ) {
		sb1 = 1;
		sb2 = LDB;
	} else { // order === 'row-major'
		sb1 = LDB;
		sb2 = 1;
	}
	return base( N, NRHS, D, 1, 0, E, 1, 0, B, sb1, sb2, 0 );
}


// EXPORTS //

module.exports = dptts2;
