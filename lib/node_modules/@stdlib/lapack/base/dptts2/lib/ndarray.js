/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable max-len, max-params */

'use strict';

// MODULES //

var base = require( './base.js' );


// MAIN //

/**
* Solves a tridiagonal system of the form `A * X = B` using `L * D * L^T` factorization of `A` using alternative indexing semantics.
*
* @param {NonNegativeInteger} N - order of tridiagonal matrix `A`
* @param {NonNegativeInteger} NRHS - number of right hand sides i.e. number of columns in matrix `B`
* @param {Float64Array} D - array containing the diagonal elements of `A`
* @param {integer} strideD - stride length for `D`
* @param {integer} offsetD - starting index for `D`
* @param {Float64Array} E - array containing the subdiagonal elements of `A`
* @param {integer} strideE - stride length for `E`
* @param {integer} offsetE - starting index for `E`
* @param {Float64Array} B - input matrix
* @param {integer} strideB1 - stride of the first dimension of `B`
* @param {integer} strideB2 - stride of the second dimension of `B`
* @param {integer} offsetB - index offset for `B`
* @throws {TypeError} first argument must be a valid order
* @returns {Float64Array} output matrix
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var D = new Float64Array( [ 1.0, 1.0, 1.0 ] );
* var E = new Float64Array( [ 2.0, 3.0 ] );
* var B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
*
* dptts2( 3, 2, D, 1, 0, E, 1, 0, B, 2, 1, 0 );
* // B => <Float64Array>[ 11.0, 38.0, -5.0, -18.0, 2.0, 6.0 ]
*/
function dptts2( N, NRHS, D, strideD, offsetD, E, strideE, offsetE, B, strideB1, strideB2, offsetB ) {
	return base( N, NRHS, D, strideD, offsetD, E, strideE, offsetE, B, strideB1, strideB2, offsetB );
}


// EXPORTS //

module.exports = dptts2;
