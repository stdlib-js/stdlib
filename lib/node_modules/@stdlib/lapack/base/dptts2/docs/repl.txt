
{{alias}}( order, N, NRHS, D, E, B, LDB )
    Solves a tridiagonal system of the form `A * X = B` using `L * D * L^T`
    factorization of `A`.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    Parameters
    ----------
    order: string
        Row-major (C-style) or column-major (Fortran-style) order. Must be
        either 'row-major' or 'column-major'.

    N: integer
        Order of the tridiagonal matrix `A`.

    NRHS: integer
        Number of right-hand sides i.e. number of columns in `B`.

    D: Float64Array
        Array containing the diagonal elements of `A`.

    E: Float64Array
        Array containing the subdiagonal elements of `A`.

    B: Float64Array
        Input matrix.

    LDB: integer
        Stride of the first dimension of `B` (a.k.a., leading dimension of the
        matrix `B`).

    Returns
    -------
    B: Float64Array
        Mutated input matrix.

    Examples
    --------
    > var D = new {{alias:@stdlib/array/float64}}( [ 1.0, 1.0, 1.0 ] );
    > var E = new {{alias:@stdlib/array/float64}}( [ 2.0, 3.0 ] );
    > var B = new {{alias:@stdlib/array/float64}}( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
    > var ord = 'row-major';
    > {{alias}}( ord, 3, 2, D, E, B, 2 )
    <Float64Array>[ 11.0, 38.0, -5.0, -18.0, 2.0, 6.0 ]


{{alias}}.ndarray( N, NRHS, D, sd, od, E, se, oe, B, sb1, sb2, ob )
    Solves a tridiagonal system of the form `A * X = B` using `L * D * L^T`
    factorization of `A` using alternative indexing semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing semantics based on starting
    indices.

    Parameters
    ----------
    N: integer
        Order of the tridiagonal matrix `A`.

    NRHS: integer
        Number of right-hand sides i.e. number of columns in `B`.

    D: Float64Array
        Array containing the diagonal elements of `A`.

    sd: integer
        Stride length for `D`.

    od: integer
        Starting index for `D`.

    E: Float64Array
        Array containing the subdiagonal elements of `A`.

    se: integer
        Stride length for `E`.

    oe: integer
        Starting index for `E`.

    B: Float64Array
        Input matrix.

    sb1: integer
        Stride of first dimension of `B`.

    sb2: integer
        Stride of second dimension of `B`.

    ob: integer
        Starting index for `B`.

    Returns
    -------
    B: Float64Array
        Mutated input matrix.

    Examples
    --------
    > var D = new {{alias:@stdlib/array/float64}}( [ 0.0, 1.0, 1.0, 1.0 ] );
    > var E = new {{alias:@stdlib/array/float64}}( [ 0.0, 2.0, 3.0 ] );
    > var B = new {{alias:@stdlib/array/float64}}( [ 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
    > {{alias}}.ndarray( 3, 2, D, 1, 1, E, 1, 1, B, 2, 1, 1 )
    <Float64Array>[ 0.0, 11.0, 38.0, -5.0, -18.0, 2.0, 6.0 ]

    See Also
    --------
