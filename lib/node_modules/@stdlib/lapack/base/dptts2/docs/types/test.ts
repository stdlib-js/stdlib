/*
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

import dptts2 = require( './index' );


// TESTS //

// The function returns a Float64Array...
{
	const D = new Float64Array( [ 1.0, 1.0, 1.0 ] );
	const E = new Float64Array( [ 2.0, 3.0 ] );
	const B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );

	dptts2( 'row-major', 3, 2, D, E, B, 2 ); // $ExpectType Float64Array
}

// The compiler throws an error if the function is provided a first argument which is not a string...
{
	const D = new Float64Array( [ 1.0, 1.0, 1.0 ] );
	const E = new Float64Array( [ 2.0, 3.0 ] );
	const B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );

	dptts2( 5, 3, 2, D, E, B, 2 ); // $ExpectError
	dptts2( true, 3, 2, D, E, B, 2 ); // $ExpectError
	dptts2( false, 3, 2, D, E, B, 2 ); // $ExpectError
	dptts2( null, 3, 2, D, E, B, 2 ); // $ExpectError
	dptts2( void 0, 3, 2, D, E, B, 2 ); // $ExpectError
	dptts2( [], 3, 2, D, E, B, 2 ); // $ExpectError
	dptts2( {}, 3, 2, D, E, B, 2 ); // $ExpectError
	dptts2( ( x: number ): number => x, 3, 2, D, E, B, 2 ); // $ExpectError
}

// The compiler throws an error if the function is provided a second argument which is not a number...
{
	const D = new Float64Array( [ 1.0, 1.0, 1.0 ] );
	const E = new Float64Array( [ 2.0, 3.0 ] );
	const B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );

	dptts2( 'row-major', '5', 2, D, E, B, 2 ); // $ExpectError
	dptts2( 'row-major', true, 2, D, E, B, 2 ); // $ExpectError
	dptts2( 'row-major', false, 2, D, E, B, 2 ); // $ExpectError
	dptts2( 'row-major', null, 2, D, E, B, 2 ); // $ExpectError
	dptts2( 'row-major', void 0, 2, D, E, B, 2 ); // $ExpectError
	dptts2( 'row-major', [], 2, D, E, B, 2 ); // $ExpectError
	dptts2( 'row-major', {}, 2, D, E, B, 2 ); // $ExpectError
	dptts2( 'row-major', ( x: number ): number => x, 2, D, E, B, 2 ); // $ExpectError
}

// The compiler throws an error if the function is provided a third argument which is not a number...
{
	const D = new Float64Array( [ 1.0, 1.0, 1.0 ] );
	const E = new Float64Array( [ 2.0, 3.0 ] );
	const B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );

	dptts2( 'row-major', 3, '5', D, E, B, 2 ); // $ExpectError
	dptts2( 'row-major', 3, true, D, E, B, 2 ); // $ExpectError
	dptts2( 'row-major', 3, false, D, E, B, 2 ); // $ExpectError
	dptts2( 'row-major', 3, null, D, E, B, 2 ); // $ExpectError
	dptts2( 'row-major', 3, void 0, D, E, B, 2 ); // $ExpectError
	dptts2( 'row-major', 3, [], D, E, B, 2 ); // $ExpectError
	dptts2( 'row-major', 3, {}, D, E, B, 2 ); // $ExpectError
	dptts2( 'row-major', 3, ( x: number ): number => x, D, E, B, 2 ); // $ExpectError
}

// The compiler throws an error if the function is provided a fourth argument which is not a Float64Array...
{
	const E = new Float64Array( [ 2.0, 3.0 ] );
	const B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );

	dptts2( 'row-major', 3, 2, '5', E, B, 2 ); // $ExpectError
	dptts2( 'row-major', 3, 2, 5, E, B, 2 ); // $ExpectError
	dptts2( 'row-major', 3, 2, true, E, B, 2 ); // $ExpectError
	dptts2( 'row-major', 3, 2, false, E, B, 2 ); // $ExpectError
	dptts2( 'row-major', 3, 2, null, E, B, 2 ); // $ExpectError
	dptts2( 'row-major', 3, 2, void 0, E, B, 2 ); // $ExpectError
	dptts2( 'row-major', 3, 2, [], E, B, 2 ); // $ExpectError
	dptts2( 'row-major', 3, 2, {}, E, B, 2 ); // $ExpectError
	dptts2( 'row-major', 3, 2, ( x: number ): number => x, E, B, 2 ); // $ExpectError
}

// The compiler throws an error if the function is provided a fifth argument which is not a Float64Array...
{
	const D = new Float64Array( [ 1.0, 1.0, 1.0 ] );
	const B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );

	dptts2( 'row-major', 3, 2, D, '5', B, 2 ); // $ExpectError
	dptts2( 'row-major', 3, 2, D, 5, B, 2 ); // $ExpectError
	dptts2( 'row-major', 3, 2, D, true, B, 2 ); // $ExpectError
	dptts2( 'row-major', 3, 2, D, false, B, 2 ); // $ExpectError
	dptts2( 'row-major', 3, 2, D, null, B, 2 ); // $ExpectError
	dptts2( 'row-major', 3, 2, D, void 0, B, 2 ); // $ExpectError
	dptts2( 'row-major', 3, 2, D, [], B, 2 ); // $ExpectError
	dptts2( 'row-major', 3, 2, D, {}, B, 2 ); // $ExpectError
	dptts2( 'row-major', 3, 2, D, ( x: number ): number => x, B, 2 ); // $ExpectError
}

// The compiler throws an error if the function is provided a sixth argument which is not a Float64Array...
{
	const D = new Float64Array( [ 1.0, 1.0, 1.0 ] );
	const E = new Float64Array( [ 2.0, 3.0 ] );

	dptts2( 'row-major', 3, 2, D, E, '5', 2 ); // $ExpectError
	dptts2( 'row-major', 3, 2, D, E, 5, 2 ); // $ExpectError
	dptts2( 'row-major', 3, 2, D, E, true, 2 ); // $ExpectError
	dptts2( 'row-major', 3, 2, D, E, false, 2 ); // $ExpectError
	dptts2( 'row-major', 3, 2, D, E, null, 2 ); // $ExpectError
	dptts2( 'row-major', 3, 2, D, E, void 0, 2 ); // $ExpectError
	dptts2( 'row-major', 3, 2, D, E, [], 2 ); // $ExpectError
	dptts2( 'row-major', 3, 2, D, E, {}, 2 ); // $ExpectError
	dptts2( 'row-major', 3, 2, D, E, ( x: number ): number => x, 2 ); // $ExpectError
}

// The compiler throws an error if the function is provided a seventh argument which is not a number...
{
	const D = new Float64Array( [ 1.0, 1.0, 1.0 ] );
	const E = new Float64Array( [ 2.0, 3.0 ] );
	const B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );

	dptts2( 'row-major', 3, 2, D, E, B, '5' ); // $ExpectError
	dptts2( 'row-major', 3, 2, D, E, B, true ); // $ExpectError
	dptts2( 'row-major', 3, 2, D, E, B, false ); // $ExpectError
	dptts2( 'row-major', 3, 2, D, E, B, null ); // $ExpectError
	dptts2( 'row-major', 3, 2, D, E, B, void 0 ); // $ExpectError
	dptts2( 'row-major', 3, 2, D, E, B, [] ); // $ExpectError
	dptts2( 'row-major', 3, 2, D, E, B, {} ); // $ExpectError
	dptts2( 'row-major', 3, 2, D, E, B, ( x: number ): number => x ); // $ExpectError
}

// The compiler throws an error if the function is provided an unsupported number of arguments...
{
	const D = new Float64Array( [ 1.0, 1.0, 1.0 ] );
	const E = new Float64Array( [ 2.0, 3.0 ] );
	const B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );

	dptts2(); // $ExpectError
	dptts2( 'row-major' ); // $ExpectError
	dptts2( 'row-major', 3 ); // $ExpectError
	dptts2( 'row-major', 3, 2 ); // $ExpectError
	dptts2( 'row-major', 3, 2, D ); // $ExpectError
	dptts2( 'row-major', 3, 2, D, E ); // $ExpectError
	dptts2( 'row-major', 3, 2, D, E, B ); // $ExpectError
	dptts2( 'row-major', 3, 2, D, E, B, 2, 10 ); // $ExpectError
}

// Attached to main export is an `ndarray` method which returns a Float64Array...
{
	const D = new Float64Array( [ 1.0, 1.0, 1.0 ] );
	const E = new Float64Array( [ 2.0, 3.0 ] );
	const B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );

	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectType Float64Array
}

// The compiler throws an error if the function is provided a first argument which is not a number...
{
	const D = new Float64Array( [ 1.0, 1.0, 1.0 ] );
	const E = new Float64Array( [ 2.0, 3.0 ] );
	const B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );

	dptts2.ndarray( '5', 2, D, 1, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( true, 2, D, 1, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( false, 2, D, 1, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( null, 2, D, 1, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( void 0, 2, D, 1, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( [], 2, D, 1, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( {}, 2, D, 1, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( ( x: number ): number => x, 2, D, 1, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a second argument which is not a number...
{
	const D = new Float64Array( [ 1.0, 1.0, 1.0 ] );
	const E = new Float64Array( [ 2.0, 3.0 ] );
	const B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );

	dptts2.ndarray( 3, '5', D, 1, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, true, D, 1, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, false, D, 1, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, null, D, 1, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, void 0, D, 1, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, [], D, 1, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, {}, D, 1, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, ( x: number ): number => x, D, 1, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a third argument which is not a Float64Array...
{
	const E = new Float64Array( [ 2.0, 3.0 ] );
	const B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );

	dptts2.ndarray( 3, 2, '5', 1, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, 5, 1, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, true, 1, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, false, 1, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, null, 1, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, void 0, 1, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, [], 1, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, {}, 1, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, ( x: number ): number => x, 1, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a fourth argument which is not a number...
{
	const D = new Float64Array( [ 1.0, 1.0, 1.0 ] );
	const E = new Float64Array( [ 2.0, 3.0 ] );
	const B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );

	dptts2.ndarray( 3, 2, D, '5', 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, true, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, false, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, null, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, void 0, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, [], 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, {}, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, ( x: number ): number => x, 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a fifth argument which is not a number...
{
	const D = new Float64Array( [ 1.0, 1.0, 1.0 ] );
	const E = new Float64Array( [ 2.0, 3.0 ] );
	const B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );

	dptts2.ndarray( 3, 2, D, 1, '5', E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, true, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, false, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, null, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, void 0, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, [], E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, {}, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, ( x: number ): number => x, E, 1, 0, B, 2, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a sixth argument which is not a Float64Array...
{
	const D = new Float64Array( [ 1.0, 1.0, 1.0 ] );
	const B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );

	dptts2.ndarray( 3, 2, D, 1, 0, '5', 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, 5, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, true, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, false, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, null, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, void 0, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, [], 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, {}, 1, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, ( x: number ): number => x, 1, 0, B, 2, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a seventh argument which is not a number...
{
	const D = new Float64Array( [ 1.0, 1.0, 1.0 ] );
	const E = new Float64Array( [ 2.0, 3.0 ] );
	const B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );

	dptts2.ndarray( 3, 2, D, 1, 0, E, '5', 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, true, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, false, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, null, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, void 0, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, [], 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, {}, 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, ( x: number ): number => x, 0, B, 2, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided an eighth argument which is not a number...
{
	const D = new Float64Array( [ 1.0, 1.0, 1.0 ] );
	const E = new Float64Array( [ 2.0, 3.0 ] );
	const B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );

	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, '5', B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, true, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, false, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, null, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, void 0, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, [], B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, {}, B, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, ( x: number ): number => x, B, 2, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a ninth argument which is not a Float64Array...
{
	const D = new Float64Array( [ 1.0, 1.0, 1.0 ] );
	const E = new Float64Array( [ 2.0, 3.0 ] );

	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, '5', 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, 5, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, true, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, false, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, null, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, void 0, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, [], 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, {}, 2, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, ( x: number ): number => x, 2, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a tenth argument which is not a number...
{
	const D = new Float64Array( [ 1.0, 1.0, 1.0 ] );
	const E = new Float64Array( [ 2.0, 3.0 ] );
	const B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );

	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, '5', 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, true, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, false, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, null, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, void 0, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, [], 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, {}, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, ( x: number ): number => x, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided an eleventh argument which is not a number...
{
	const D = new Float64Array( [ 1.0, 1.0, 1.0 ] );
	const E = new Float64Array( [ 2.0, 3.0 ] );
	const B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );

	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, 2, '5', 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, 2, true, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, 2, false, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, 2, null, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, 2, void 0, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, 2, [], 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, 2, {}, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, 2, ( x: number ): number => x, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a twelfth argument which is not a number...
{
	const D = new Float64Array( [ 1.0, 1.0, 1.0 ] );
	const E = new Float64Array( [ 2.0, 3.0 ] );
	const B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );

	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, 2, 1, '5' ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, 2, 1, true ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, 2, 1, false ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, 2, 1, null ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, 2, 1, void 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, 2, 1, [] ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, 2, 1, {} ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, 2, 1, ( x: number ): number => x ); // $ExpectError
}

// The compiler throws an error if the `ndarray` method is provided an unsupported number of arguments...
{
	const D = new Float64Array( [ 1.0, 1.0, 1.0 ] );
	const E = new Float64Array( [ 2.0, 3.0 ] );
	const B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );

	dptts2.ndarray(); // $ExpectError
	dptts2.ndarray( 3 ); // $ExpectError
	dptts2.ndarray( 3, 2 ); // $ExpectError
	dptts2.ndarray( 3, 2, D ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, 2 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, 2, 1 ); // $ExpectError
	dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, 2, 1, 0, 10 ); // $ExpectError
}
