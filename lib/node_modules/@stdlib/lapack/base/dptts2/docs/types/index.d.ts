/*
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// TypeScript Version: 4.1

/// <reference types="@stdlib/types"/>

import { Layout } from '@stdlib/types/blas';

/**
* Interface describing `dptts2`.
*/
interface Routine {
	/**
	* Solves a tridiagonal system of the form `A * X = B` using `L * D * L^T` factorization of `A`.
	*
	* @param order - storage layout
	* @param N - order of tridiagonal matrix `A`
	* @param NRHS - number of right hand sides i.e. number of columns in matrix `B`
	* @param D - array containing the diagonal elements of `A`
	* @param E - array containing the subdiagonal elements of `A`
	* @param B - input matrix
	* @param LDB - stride of the first dimension of `B` (a.k.a., leading dimension of the matrix `B`)
	* @returns output matrix
	*
	* @example
	* var Float64Array = require( '@stdlib/array/float64' );
	*
	* var D = new Float64Array( [ 1.0, 1.0, 1.0 ] );
	* var E = new Float64Array( [ 2.0, 3.0 ] );
	* var B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
	*
	* dptts2( 'row-major', 3, 2, D, E, B, 2 );
	* // B => <Float64Array>[ 11.0, 38.0, -5.0, -18.0, 2.0, 6.0 ]
	*/
	( order: Layout, N: number, NRHS: number, D: Float64Array, E: Float64Array, B: Float64Array, LDB: number ): Float64Array;

	/**
	* Solves a tridiagonal system of the form `A * X = B` using `L * D * L^T` factorization of `A` using alternative indexing semantics.
	*
	* @param N - order of tridiagonal matrix `A`
	* @param NRHS - number of right hand sides i.e. number of columns in matrix `B`
	* @param D - array containing the diagonal elements of `A`
	* @param strideD - stride length for `D`
	* @param offsetD - starting index for `D`
	* @param E - array containing the subdiagonal elements of `A`
	* @param strideE - stride length for `E`
	* @param offsetE - starting index for `E`
	* @param B - input matrix
	* @param strideB1 - stride of the first dimension of `B`
	* @param strideB2 - stride of the second dimension of `B`
	* @param offsetB - index offset for `B`
	* @returns output matrix
	*
	* @example
	* var Float64Array = require( '@stdlib/array/float64' );
	*
	* var D = new Float64Array( [ 1.0, 1.0, 1.0 ] );
	* var E = new Float64Array( [ 2.0, 3.0 ] );
	* var B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
	*
	* dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, 2, 1, 0 );
	* // B => <Float64Array>[ 11.0, 38.0, -5.0, -18.0, 2.0, 6.0 ]
	*/
	ndarray( N: number, NRHS: number, D: Float64Array, strideD: number, offsetD: number, E: Float64Array, strideE: number, offsetE: number, B: Float64Array, strideB1: number, strideB2: number, offsetB: number ): Float64Array;
}

/**
* Solves a tridiagonal system of the form `A * X = B` using `L * D * L^T` factorization of `A`.
*
* @param order - storage layout
* @param N - order of tridiagonal matrix `A`
* @param NRHS - number of right hand sides i.e. number of columns in matrix `B`
* @param D - array containing the diagonal elements of `A`
* @param E - array containing the subdiagonal elements of `A`
* @param B - input matrix
* @param LDB - stride of the first dimension of `B` (a.k.a., leading dimension of the matrix `B`)
* @returns output matrix
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var D = new Float64Array( [ 1.0, 1.0, 1.0 ] );
* var E = new Float64Array( [ 2.0, 3.0 ] );
* var B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
*
* dptts2( 'row-major', 3, 2, D, E, B, 2 );
* // B => <Float64Array>[ 11.0, 38.0, -5.0, -18.0, 2.0, 6.0 ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var D = new Float64Array( [ 1.0, 1.0, 1.0 ] );
* var E = new Float64Array( [ 2.0, 3.0 ] );
* var B = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );
*
* dptts2.ndarray( 3, 2, D, 1, 0, E, 1, 0, B, 2, 1, 0 );
* // B => <Float64Array>[ 11.0, 38.0, -5.0, -18.0, 2.0, 6.0 ]
*/
declare var dptts2: Routine;


// EXPORTS //

export = dptts2;
