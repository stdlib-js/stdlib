/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var Float64Array = require( '@stdlib/array/float64' );
var EPS = require( '@stdlib/constants/float64/eps' );
var abs = require( '@stdlib/math/base/special/abs' );
var dlaset = require( './../lib/dlaset.js' );


// FUNCTIONS //

/**
* Tests for element-wise approximate equality.
*
* @private
* @param {Object} t - test object
* @param {Collection} actual - actual values
* @param {Collection} expected - expected values
* @param {number} rtol - relative tolerance
*/
function isApprox( t, actual, expected, rtol ) {
	var delta;
	var tol;
	var i;

	t.strictEqual( actual.length, expected.length, 'returns expected value' );
	for ( i = 0; i < expected.length; i++ ) {
		if ( actual[ i ] === expected[ i ] ) {
			t.strictEqual( actual[ i ], expected[ i ], 'returns expected value' );
		} else {
			delta = abs( actual[ i ] - expected[ i ] );
			tol = rtol * EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. actual: '+actual[ i ]+'. expected: '+expected[ i ]+'. delta: '+delta+'. tol: '+tol+'.' );
		}
	}
}


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof dlaset, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function has an arity of 8', function test( t ) {
	t.strictEqual( dlaset.length, 8, 'returns expected value' );
	t.end();
});

tape( 'the function throws an error if provided an invalid first argument', function test( t ) {
	var values;
	var A;
	var i;

	values = [
		'foo',
		'bar',
		'beep',
		'boop'
	];

	A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			dlaset( value, 'lower', 2, 2, 3.1, 3.7, A, 2 );
		};
	}
});

tape( 'the function sets lower part of a rectangular matrix (row-major, lower)', function test( t ) {
	var expected;
	var out;
	var A;
	var M;
	var N;

	M = 2;
	N = 3;

	A = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );
	expected = new Float64Array( [ 3.7, 0.0, 0.0, 3.1, 3.7, 0.0 ]);

	out = dlaset( 'row-major', 'lower', M, N, 3.1, 3.7, A, N );
	console.log( out );
	t.strictEqual( out, A, 'returns expected value' );
	isApprox( t, A, expected, 2.0 );

	t.end();
});

tape( 'the function sets lower part of a column major rectangular matrix (column-major, lower)', function test( t ) {
	var expected;
	var out;
	var A;
	var M;
	var N;

	M = 2;
	N = 3;

	A = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );
	expected = new Float64Array( [ 3.7, 3.1, 0.0, 3.7, 0.0, 0.0 ]);

	out = dlaset( 'column-major', 'lower', M, N, 3.1, 3.7, A, M );
	t.strictEqual( out, A, 'returns expected value' );
	isApprox( t, A, expected, 2.0 );

	t.end();
});

tape( 'the function sets upper part of rectangular matrix (row-major, upper)', function test( t ) {
	var expected;
	var out;
	var A;
	var M;
	var N;

	M = 2;
	N = 3;

	A = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );
	expected = new Float64Array( [ 3.7, 3.1, 0, 0, 3.7, 0.0 ]);

	out = dlaset( 'row-major', 'upper', M, N, 3.1, 3.7, A, N );
	t.strictEqual( out, A, 'returns expected value' );
	isApprox( t, A, expected, 2.0 );

	t.end();
});

tape( 'the function sets upper part of column major rectangular matrix (column-major, upper)', function test( t ) {
	var expected;
	var out;
	var A;
	var M;
	var N;

	M = 2;
	N = 3;

	A = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );
	expected = new Float64Array( [ 3.7, 0.0, 0.0, 3.7, 3.1, 0.0 ]);

	out = dlaset( 'column-major', 'upper', M, N, 3.1, 3.7, A, M );
	t.strictEqual( out, A, 'returns expected value' );
	isApprox( t, A, expected, 2.0 );

	t.end();
});

tape( 'the function sets all of rectangular matrix (row-major, all)', function test( t ) {
	var expected;
	var out;
	var A;
	var M;
	var N;

	M = 2;
	N = 3;

	A = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );
	expected = new Float64Array( [ 3.7, 3.1, 3.1, 3.1, 3.7, 3.1 ]);

	out = dlaset( 'row-major', 'all', M, N, 3.1, 3.7, A, N );
	t.strictEqual( out, A, 'returns expected value' );
	isApprox( t, A, expected, 2.0 );

	t.end();
});

tape( 'the function sets all of column major rectangular matrix (column-major, all)', function test( t ) {
	var expected;
	var out;
	var A;
	var M;
	var N;

	M = 2;
	N = 3;

	A = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );
	expected = new Float64Array( [ 3.7, 3.1, 3.1, 3.7, 3.1, 3.1 ]);

	out = dlaset( 'column-major', 'all', M, N, 3.1, 3.7, A, M );
	t.strictEqual( out, A, 'returns expected value' );
	isApprox( t, A, expected, 2.0 );

	t.end();
});

tape( 'the function correctly sets a square matrix `A`', function test( t ) {
	var expected;
	var out2;
	var out;
	var A;

	A = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );
	expected = new Float64Array( [ 3.7, 3.1, 3.1, 3.1, 0.0, 3.7, 3.1, 3.1, 0.0, 0.0, 3.7, 3.1, 0.0, 0.0, 0.0, 3.7 ] );

	out = dlaset( 'row-major', 'upper', 4, 4, 3.1, 3.7, A, 4 );
	t.strictEqual( out, A, 'returns expected value' );
	isApprox( t, A, expected, 2.0 );

	out = dlaset( 'row-major', 'lower', 4, 4, 3.1, 3.7, A, 4 );
	t.strictEqual( out, A, 'returns expected value' );
	out2 = dlaset( 'row-major', 'all', 4, 4, 3.1, 3.7, A, 4 );
	t.strictEqual( out2, A, 'returns expected value' );
	t.strictEqual( out, out2, 'returns expected value' );
	t.end();
});
