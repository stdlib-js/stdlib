/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isRowMajor = require( '@stdlib/ndarray/base/assert/is-row-major' );
var min = require( '@stdlib/math/base/special/fast/min' );


// FUNCTIONS //

/**
* Sets the diagonal of a matrix `A` to `β`.
*
* @private
* @param {NonNegativeInteger} M - number of rows in matrix `A`
* @param {NonNegativeInteger} N - number of columns in matrix `A`
* @param {number} beta - scalar constant to which diagonal elements are set
* @param {Float64Array} A - input matrix
* @param {integer} strideA1 - stride of the first dimension of `A`
* @param {integer} strideA2 - stride of the second dimension of `A`
* @param {NonNegativeInteger} offsetA - starting index for `A`
* @returns {Float64Array} `A`
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var A = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );
*
* setDiagonal( 2, 3, 3.7, A, 3, 1, 0 );
* // A => <Float64Array>[ 3.7, 0.0, 0.0, 0.0, 3.7, 0.0 ]
*/
function setDiagonal( M, N, beta, A, strideA1, strideA2, offsetA ) {
	var sa;
	var ia;
	var i;

	sa = strideA1 + strideA2;
	ia = offsetA;
	for ( i = 0; i < min( M, N ); i++ ) {
		A[ ia ] = beta;
		ia += sa;
	}
	return A;
}

/**
* Initializes the upper triangular/trapezoidal part of a matrix `A` to `β` on the diagonal and `α` on the off-diagonals.
*
* @private
* @param {NonNegativeInteger} M - number of rows in matrix `A`
* @param {NonNegativeInteger} N - number of columns in matrix `A`
* @param {number} alpha - scalar constant to which off-diagonal elements are set
* @param {number} beta - scalar constant to which diagonal elements are set
* @param {Float64Array} A - input matrix
* @param {integer} strideA1 - stride of the first dimension of `A`
* @param {integer} strideA2 - stride of the second dimension of `A`
* @param {NonNegativeInteger} offsetA - starting index for `A`
* @returns {Float64Array} `A`
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var A = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );
*
* setUpper( 2, 3, 3.1, 3.7, A, 3, 1, 0 );
* // A => <Float64Array>[ 3.7, 3.1, 0.0, 0.0, 3.7, 0.0 ]
*/
function setUpper( M, N, alpha, beta, A, strideA1, strideA2, offsetA ) {
	var ia;
	var i;
	var j;

	if ( isRowMajor( [ strideA1, strideA2 ] ) ) {
		for ( i = 0; i < M; i++ ) {
			ia = offsetA + ( i * strideA1 );
			for ( j = i + 1; j < min( M, N ); j++ ) {
				if ( i !== j ) {
					A[ ia + ( j * strideA2 ) ] = alpha;
				}
			}
		}
		setDiagonal( M, N, beta, A, strideA2, strideA1, offsetA );
		return A;
	}
	// 'column-major'
	for ( j = 1; j < N; j++ ) {
		ia = offsetA + ( j * strideA2 );
		for ( i = 0; i < min( j - 1, M ); i++ ) {
			A[ ia + ( i * strideA1 ) ] = alpha;
		}
	}
	setDiagonal( M, N, beta, A, strideA1, strideA2, offsetA );
	return A;
}

/**
* Initializes the lower triangular/trapezoidal part of a matrix `A` to `β` on the diagonal and `α` on the off-diagonals.
*
* @private
* @param {NonNegativeInteger} M - number of rows in matrix `A`
* @param {NonNegativeInteger} N - number of columns in matrix `A`
* @param {number} alpha - scalar constant to which off-diagonal elements are set
* @param {number} beta - scalar constant to which diagonal elements are set
* @param {Float64Array} A - input matrix
* @param {integer} strideA1 - stride of the first dimension of `A`
* @param {integer} strideA2 - stride of the second dimension of `A`
* @param {NonNegativeInteger} offsetA - starting index for `A`
* @returns {Float64Array} `A`
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var A = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );
*
* setLower( 2, 3, 3.1, 3.7, A, 3, 1, 0 );
* // A => <Float64Array>[ 3.7, 0.0, 0.0, 3.1, 3.7, 0.0 ]
*/
function setLower( M, N, alpha, beta, A, strideA1, strideA2, offsetA ) {
	var ia;
	var i;
	var j;

	if ( isRowMajor( [ strideA1, strideA2 ] ) ) {
		for ( i = 0; i < M; i++ ) {
			ia = offsetA + ( i * strideA1 );
			for ( j = i; j >= 0; j-- ) {
				if ( i !== j ) {
					A[ ia + ( j*strideA2 ) ] = alpha;
				}
			}
		}
		setDiagonal( M, N, beta, A, strideA2, strideA1, offsetA );
	}
	// 'column-major'
	for ( j = 0; j < min( M, N ); j++ ) {
		ia = offsetA + ( j*strideA2 );
		for ( i = j + 1; i < M; i++ ) {
			A[ ia + ( i*strideA1 ) ] = alpha;
		}
	}
	setDiagonal( M, N, beta, A, strideA1, strideA2, offsetA );
	return A;
}

/**
* Initializes all of triangular/trapezoidal part of a matrix `A` to `β` on the diagonal and `α` on the off-diagonals.
*
* @private
* @param {NonNegativeInteger} M - number of rows in matrix `A`
* @param {NonNegativeInteger} N - number of columns in matrix `A`
* @param {number} alpha - scalar constant to which off-diagonal elements are set
* @param {number} beta - scalar constant to which diagonal elements are set
* @param {Float64Array} A - input matrix
* @param {integer} strideA1 - stride of the first dimension of `A`
* @param {integer} strideA2 - stride of the second dimension of `A`
* @param {NonNegativeInteger} offsetA - starting index for `A`
* @returns {Float64Array} `A`
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var A = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );
*
* setAll( 2, 3, 3.1, 3.7, A, 3, 1, 0 );
* // A => <Float64Array>[ 3.7, 3.1, 3.1, 3.1, 3.7, 3.1 ]
*/
function setAll( M, N, alpha, beta, A, strideA1, strideA2, offsetA ) {
	var ia;
	var i;
	var j;

	if ( isRowMajor( [ strideA1, strideA2 ] ) ) {
		for ( i = 0; i < M; i++ ) {
			ia = offsetA + ( i*strideA1 );
			for ( j = 0; j < N; j++ ) {
				A[ ia + ( j*strideA2 ) ] = alpha;
			}
		}
		setDiagonal( M, N, beta, A, strideA2, strideA1, offsetA );
		return A;
	}
	// 'column-major'
	for ( j = 0; j < N; j++ ) {
		ia = offsetA + ( j*strideA2 );
		for ( i = 0; i < M; i++ ) {
			A[ ia + ( i*strideA1 ) ] = alpha;
		}
	}
	setDiagonal( M, N, beta, A, strideA1, strideA2, offsetA );
	return A;
}


// MAIN //

/**
* Initializes an `M` by `N` matrix `A` to `β` on the diagonal and `α` on the off-diagonals.
*
* @private
* @param {string} uplo - specifies whether the upper or lower triangular part of matrix `A` is supplied
* @param {NonNegativeInteger} M - number of rows in matrix `A`
* @param {NonNegativeInteger} N - number of columns in matrix `A`
* @param {number} alpha - scalar constant to which off-diagonal elements are set
* @param {number} beta - scalar constant to which diagonal elements are set
* @param {Float64Array} A - input matrix
* @param {integer} strideA1 - stride of the first dimension of `A`
* @param {integer} strideA2 - stride of the second dimension of `A`
* @param {NonNegativeInteger} offsetA - starting index for `A`
* @returns {Float64Array} `A`
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var A = new Float64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );
*
* dlaset( 'lower', 3, 3, 3.1, 3.7, A, 3, 1, 0 );
* // A => <Float64Array>[ 3.7, 0.0, 0.0, 3.1, 3.7, 0.0, 3.1, 3.1, 3.7 ]
*/
function dlaset( uplo, M, N, alpha, beta, A, strideA1, strideA2, offsetA ) {
	if ( uplo === 'upper' ) {
		return setUpper( M, N, alpha, beta, A, strideA1, strideA2, offsetA );
	}
	if ( uplo === 'lower' ) {
		return setLower( M, N, alpha, beta, A, strideA1, strideA2, offsetA );
	}
	return setAll( M, N, alpha, beta, A, strideA1, strideA2, offsetA );
}


// EXPORTS //

module.exports = dlaset;
