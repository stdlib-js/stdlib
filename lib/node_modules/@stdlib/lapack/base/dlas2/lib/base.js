/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var sqrt = require( '@stdlib/math/base/special/sqrt' );
var abs = require( '@stdlib/math/base/special/abs' );
var max = require( '@stdlib/math/base/special/max' );
var min = require( '@stdlib/math/base/special/min' );
var pow = require( '@stdlib/math/base/special/pow' );


// MAIN //

/**
* Computes the singular values of `2x2` matrix.
*
* @private
* @param {number} F - the (0,0) element of a `2x2` matrix
* @param {number} G - the (0,1) element of a `2x2` matrix
* @param {number} H - the (1,1) element of a `2x2` matrix
* @param {Float64Array} out - output array containing the smaller and larger singular values respectively
* @param {integer} strideOut - stride length for `out`
* @param {NonNegativeInteger} offsetOut - starting index of `out`
* @returns {Float64Array} output array
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var out = new Float64Array( 2 );
* dlas2( 1.0, 2.0, 3.0, out, 1, 0 );
* // out => <Float64Array>[ ~0.822, ~3.65 ]
*/
function dlas2( F, G, H, out, strideOut, offsetOut ) {
	var ssmax;
	var ssmin;
	var fhmn;
	var fhmx;
	var as;
	var at;
	var au;
	var fa;
	var ga;
	var ha;
	var c;

	fa = abs( F );
	ga = abs( G );
	ha = abs( H );
	fhmn = min( fa, ha );
	fhmx = max( fa, ha );
	if ( fhmn === 0.0 ) {
		ssmin = 0.0;
		if ( fhmx === 0.0 ) {
			ssmax = ga;
		} else {
			ssmax = max( fhmx, ga ) * sqrt( 1.0 + pow( min( fhmx, ga ) / max( fhmx, ga ), 2 ) );
		}
	} else if ( ga < fhmx ) {
		as = 1.0 + ( fhmn / fhmx );
		at = ( fhmx - fhmn ) / fhmx;
		au = pow( ga / fhmx, 2 );
		c = 2.0 / ( sqrt( ( as * as ) + au ) + sqrt( ( at * at ) + au ) );
		ssmin = fhmn * c;
		ssmax = fhmx / c;
	} else {
		au = fhmx / ga;
		if ( au === 0.0 ) {
			// Avoid possible harmful underflow if exponent range asymmetric.
			ssmin = ( fhmn * fhmx ) / ga;
			ssmax = ga;
		} else {
			as = 1.0 + ( fhmn / fhmx );
			at = ( fhmx - fhmn ) / fhmx;
			c = 1.0 / ( sqrt( 1.0 + pow( as * au, 2 ) ) + sqrt( 1.0 + pow( at * au, 2 ) ) );
			ssmin = ( fhmn * c ) * au;
			ssmin += ssmin;
			ssmax = ga / ( c + c );
		}
	}
	out[ offsetOut ] = ssmin;
	out[ offsetOut + strideOut ] = ssmax;
	return out;
}


// EXPORTS //

module.exports = dlas2;
