/*
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

import dlas2 = require( './index' );


// TESTS //

// The function returns a Float64Array...
{
	const out = new Float64Array( [ 1.0, 2.0 ] );

	dlas2( 2.0, 3.0, 4.0, out ); // $ExpectType Float64Array
}

// The compiler throws an error if the function is provided a first argument which is not a number...
{
	const out = new Float64Array( [ 1.0, 2.0 ] );

	dlas2( '5', 3.0, 4.0, out ); // $ExpectError
	dlas2( true, 3.0, 4.0, out ); // $ExpectError
	dlas2( false, 3.0, 4.0, out ); // $ExpectError
	dlas2( null, 3.0, 4.0, out ); // $ExpectError
	dlas2( void 0, 3.0, 4.0, out ); // $ExpectError
	dlas2( [], 3.0, 4.0, out ); // $ExpectError
	dlas2( {}, 3.0, 4.0, out ); // $ExpectError
	dlas2( ( x: number ): number => x, 3.0, 4.0, out ); // $ExpectError
}

// The compiler throws an error if the function is provided a second argument which is not a number...
{
	const out = new Float64Array( [ 1.0, 2.0 ] );

	dlas2( 2.0, '5', 4.0, out ); // $ExpectError
	dlas2( 2.0, true, 4.0, out ); // $ExpectError
	dlas2( 2.0, false, 4.0, out ); // $ExpectError
	dlas2( 2.0, null, 4.0, out ); // $ExpectError
	dlas2( 2.0, void 0, 4.0, out ); // $ExpectError
	dlas2( 2.0, [], 4.0, out ); // $ExpectError
	dlas2( 2.0, {}, 4.0, out ); // $ExpectError
	dlas2( 2.0, ( x: number ): number => x, 4.0, out ); // $ExpectError
}

// The compiler throws an error if the function is provided a third argument which is not a number...
{
	const out = new Float64Array( [ 1.0, 2.0 ] );

	dlas2( 2.0, 3.0, '5', out ); // $ExpectError
	dlas2( 2.0, 3.0, true, out ); // $ExpectError
	dlas2( 2.0, 3.0, false, out ); // $ExpectError
	dlas2( 2.0, 3.0, null, out ); // $ExpectError
	dlas2( 2.0, 3.0, void 0, out ); // $ExpectError
	dlas2( 2.0, 3.0, [], out ); // $ExpectError
	dlas2( 2.0, 3.0, {}, out ); // $ExpectError
	dlas2( 2.0, 3.0, ( x: number ): number => x, out ); // $ExpectError
}

// The compiler throws an error if the function is provided a fourth argument which is not a Float64Array...
{

	dlas2( 2.0, 3.0, 4.0, '5' ); // $ExpectError
	dlas2( 2.0, 3.0, 4.0, 5 ); // $ExpectError
	dlas2( 2.0, 3.0, 4.0, true ); // $ExpectError
	dlas2( 2.0, 3.0, 4.0, false ); // $ExpectError
	dlas2( 2.0, 3.0, 4.0, null ); // $ExpectError
	dlas2( 2.0, 3.0, 4.0, void 0 ); // $ExpectError
	dlas2( 2.0, 3.0, 4.0, [] ); // $ExpectError
	dlas2( 2.0, 3.0, 4.0, {} ); // $ExpectError
	dlas2( 2.0, 3.0, 4.0, ( x: number ): number => x ); // $ExpectError
}

// The compiler throws an error if the function is provided an unsupported number of arguments...
{
	const out = new Float64Array( [ 1.0, 2.0 ] );

	dlas2(); // $ExpectError
	dlas2( 2.0 ); // $ExpectError
	dlas2( 2.0, 3.0 ); // $ExpectError
	dlas2( 2.0, 3.0, 4.0 ); // $ExpectError
	dlas2( 2.0, 3.0, 4.0, out, 10 ); // $ExpectError
}

// Attached to main export is an `ndarray` method which returns a Float64Array...
{
	const out = new Float64Array( [ 1.0, 2.0 ] );

	dlas2.ndarray( 2.0, 3.0, 4.0, out, 1, 0 ); // $ExpectType Float64Array
}

// The compiler throws an error if the function is provided a first argument which is not a number...
{
	const out = new Float64Array( [ 1.0, 2.0 ] );

	dlas2.ndarray( '5', 3.0, 4.0, out, 1, 0 ); // $ExpectError
	dlas2.ndarray( true, 3.0, 4.0, out, 1, 0 ); // $ExpectError
	dlas2.ndarray( false, 3.0, 4.0, out, 1, 0 ); // $ExpectError
	dlas2.ndarray( null, 3.0, 4.0, out, 1, 0 ); // $ExpectError
	dlas2.ndarray( void 0, 3.0, 4.0, out, 1, 0 ); // $ExpectError
	dlas2.ndarray( [], 3.0, 4.0, out, 1, 0 ); // $ExpectError
	dlas2.ndarray( {}, 3.0, 4.0, out, 1, 0 ); // $ExpectError
	dlas2.ndarray( ( x: number ): number => x, 3.0, 4.0, out, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a second argument which is not a number...
{
	const out = new Float64Array( [ 1.0, 2.0 ] );

	dlas2.ndarray( 2.0, '5', 4.0, out, 1, 0 ); // $ExpectError
	dlas2.ndarray( 2.0, true, 4.0, out, 1, 0 ); // $ExpectError
	dlas2.ndarray( 2.0, false, 4.0, out, 1, 0 ); // $ExpectError
	dlas2.ndarray( 2.0, null, 4.0, out, 1, 0 ); // $ExpectError
	dlas2.ndarray( 2.0, void 0, 4.0, out, 1, 0 ); // $ExpectError
	dlas2.ndarray( 2.0, [], 4.0, out, 1, 0 ); // $ExpectError
	dlas2.ndarray( 2.0, {}, 4.0, out, 1, 0 ); // $ExpectError
	dlas2.ndarray( 2.0, ( x: number ): number => x, 4.0, out, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a third argument which is not a number...
{
	const out = new Float64Array( [ 1.0, 2.0 ] );

	dlas2.ndarray( 2.0, 3.0, '5', out, 1, 0 ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, true, out, 1, 0 ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, false, out, 1, 0 ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, null, out, 1, 0 ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, void 0, out, 1, 0 ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, [], out, 1, 0 ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, {}, out, 1, 0 ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, ( x: number ): number => x, out, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a fourth argument which is not a Float64Array...
{

	dlas2.ndarray( 2.0, 3.0, 4.0, '5', 1, 0 ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, 4.0, 5, 1, 0 ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, 4.0, true, 1, 0 ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, 4.0, false, 1, 0 ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, 4.0, null, 1, 0 ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, 4.0, void 0, 1, 0 ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, 4.0, [], 1, 0 ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, 4.0, {}, 1, 0 ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, 4.0, ( x: number ): number => x, 1, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a fifth argument which is not a number...
{
	const out = new Float64Array( [ 1.0, 2.0 ] );

	dlas2.ndarray( 2.0, 3.0, 4.0, out, '5', 0 ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, 4.0, out, true, 0 ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, 4.0, out, false, 0 ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, 4.0, out, null, 0 ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, 4.0, out, void 0, 0 ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, 4.0, out, [], 0 ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, 4.0, out, {}, 0 ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, 4.0, out, ( x: number ): number => x, 0 ); // $ExpectError
}

// The compiler throws an error if the function is provided a sixth argument which is not a number...
{
	const out = new Float64Array( [ 1.0, 2.0 ] );

	dlas2.ndarray( 2.0, 3.0, 4.0, out, 1, '5' ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, 4.0, out, 1, true ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, 4.0, out, 1, false ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, 4.0, out, 1, null ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, 4.0, out, 1, void 0 ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, 4.0, out, 1, [] ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, 4.0, out, 1, {} ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, 4.0, out, 1, ( x: number ): number => x ); // $ExpectError
}

// The compiler throws an error if the `ndarray` method is provided an unsupported number of arguments...
{
	const out = new Float64Array( [ 1.0, 2.0 ] );

	dlas2.ndarray(); // $ExpectError
	dlas2.ndarray( 2.0 ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0 ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, 4.0 ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, 4.0, out ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, 4.0, out, 1 ); // $ExpectError
	dlas2.ndarray( 2.0, 3.0, 4.0, out, 1, 0, 10 ); // $ExpectError
}
