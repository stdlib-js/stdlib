/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var Float64Array = require( '@stdlib/array/float64' );
var EPS = require( '@stdlib/constants/float64/eps' );
var abs = require( '@stdlib/math/base/special/abs' );
var dlas2 = require( './../lib/dlas2.js' );


// FUNCTIONS //

/**
* Tests for element-wise approximate equality.
*
* @private
* @param {Object} t - test object
* @param {Collection} actual - actual values
* @param {Collection} expected - expected values
* @param {number} rtol - relative tolerance
*/
function isApprox( t, actual, expected, rtol ) {
	var delta;
	var tol;
	var i;

	t.strictEqual( actual.length, expected.length, 'returns expected value' );
	for ( i = 0; i < expected.length; i++ ) {
		if ( actual[ i ] === expected[ i ] ) {
			t.strictEqual( actual[ i ], expected[ i ], 'returns expected value' );
		} else {
			delta = abs( actual[ i ] - expected[ i ] );
			tol = rtol * EPS * abs( expected[ i ] );
			t.ok( delta <= tol, 'within tolerance. actual: '+actual[ i ]+'. expected: '+expected[ i ]+'. delta: '+delta+'. tol: '+tol+'.' );
		}
	}
}


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof dlas2, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function has an arity of 4', function test( t ) {
	t.strictEqual( dlas2.length, 4, 'returns expected value' );
	t.end();
});

tape( 'the function computes the eigenvalues of a 2x2 symmetric matrix', function test( t ) {
	var expected;
	var out;

	out = new Float64Array( 2 );
	out = dlas2( 2.0, 3.0, 4.0, out );
	expected = new Float64Array( [ 1.5513263285176897, 5.1568776039816795 ] );
	isApprox( t, out, expected, 1.0 );

	out = dlas2( -1.0, 3.0, 9.4, out );

	expected = new Float64Array( [ 0.9522030268983716, 9.871844275289476 ] );
	isApprox( t, out, expected, 1.0 );

	out = dlas2( -99.9, -67.124, -4.24, out );

	expected = new Float64Array( [ 3.518670509963777, 120.37955779052484 ] );
	isApprox( t, out, expected, 1.0 );
	t.end();
});

tape( 'the function computes eigenvalues of a 2x2 diagonal matrix', function test( t ) {
	var expected;
	var out;

	out = new Float64Array( 2 );
	out = dlas2( 2.0, 0.0, 4.0, out );
	expected = new Float64Array( [ 2, 4 ] );
	isApprox( t, out, expected, 1.0 );

	out = dlas2( -1.0, 0.0, 9.4, out );
	expected = new Float64Array( [ 1, 9.4 ] );
	isApprox( t, out, expected, 1.0 );

	out = dlas2( -99.9, 0.0, -4.24, out );
	expected = new Float64Array( [ 4.24, 99.9 ] );
	isApprox( t, out, expected, 1.0 );

	out = dlas2( 1.0, 0.0, 1.0, out );
	expected = new Float64Array( [ 1.0, 1.0 ] );
	isApprox( t, out, expected, 1.0 );
	t.end();
});
