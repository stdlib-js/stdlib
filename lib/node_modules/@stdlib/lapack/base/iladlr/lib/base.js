/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isRowMajor = require( '@stdlib/ndarray/base/assert/is-row-major' );
var max = require( '@stdlib/math/base/special/fast/max' );


// MAIN //

/**
* Returns last non-zero row of matrix `A`.
*
* @private
* @param {NonNegativeInteger} M - number of rows
* @param {NonNegativeInteger} N - number of columns
* @param {Float64Array} A - input matrix
* @param {integer} strideA1 - stride of the first dimension of `A`
* @param {integer} strideA2 - stride of the second dimension of `A`
* @param {NonNegativeInteger} offsetA - starting index for `A`
* @returns {integer} index of last non-zero row
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var out;
* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
*
* out = iladlr( 2, 2, A, 2, 1, 0 );
* // returns 1
*/
function iladlr( M, N, A, strideA1, strideA2, offsetA ) {
	var out;
	var sa0;
	var sa1;
	var i;
	var j;

	if ( isRowMajor( [ strideA1, strideA2 ] ) ) {
		sa0 = strideA1;
		sa1 = strideA2;
	} else {
		sa0 = strideA2;
		sa1 = strideA1;
	}

	if ( M === 0 ) {
		return 0;
	}
	if ( A[ offsetA + ( ( M - 1 ) * sa0 ) ] !== 0.0 || A[ offsetA + ( ( M - 1 ) * sa0 ) + ( ( N - 1 ) * sa1 ) ] ) {
		return M - 1;
	}
	// Scan up each column tracking the last zero row seen.
	out = -1;
	for ( j = 0; j < N; j++ ) {
		i = M - 1;
		while ( i >= 0 && A[ offsetA + ( i * sa0 ) + ( j * sa1 ) ] === 0.0 ) {
			i -= 1;
		}
		out = max( out, i );
	}
	return out;
}


// EXPORTS //

module.exports = iladlr;
