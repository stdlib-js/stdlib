/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var Float64Array = require( '@stdlib/array/float64' );
var iladlr = require( './../lib/ndarray.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof iladlr, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function has an arity of 6', function test( t ) {
	t.strictEqual( iladlr.length, 6, 'returns expected value' );
	t.end();
});

tape( 'the function supports accessing elements from non-contiguous order of row and columns', function test( t ) {
	var out;
	var A;

	/* eslint-disable array-element-newline, no-multi-spaces */

	A = new Float64Array([
		999, 999, 999, 999, 999, 999,
		999,   1, 999,   2, 999,   3,
		999, 999, 999, 999, 999, 999,
		999,   0, 999,   4, 999,   5,
		999, 999, 999, 999, 999, 999,
		999,   0, 999,   0, 999,   0,
		999, 999, 999, 999, 999, 999
	]);

	/* eslint-enable array-element-newline, no-multi-spaces */
	out = iladlr( 3, 3, A, 12, 2, 7 );
	t.strictEqual( out, 1, 'returns expected value' );
	t.end();
});

tape( 'the function supports accessing elements from non-contiguous order of row and columns and in different order', function test( t ) {
	var out;
	var A;

	/* eslint-disable array-element-newline, no-multi-spaces */

	A = new Float64Array([
		999, 999, 999, 999, 999, 999,
		999,   1, 999,   2, 999,   3,
		999, 999, 999, 999, 999, 999,
		999,   0, 999,   4, 999,   5,
		999, 999, 999, 999, 999, 999,
		999,   0, 999,   0, 999,   0
	]);

	/* eslint-enable array-element-newline, no-multi-spaces */
	out = iladlr( 3, 3, A, -12, -2, A.length-1 );
	t.strictEqual( out, 2, 'returns expected value' );
	t.end();
});
