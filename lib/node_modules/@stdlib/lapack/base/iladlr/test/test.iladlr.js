/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var Float64Array = require( '@stdlib/array/float64' );
var iladlr = require( './../lib/iladlr.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof iladlr, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function has an arity of 5', function test( t ) {
	t.strictEqual( iladlr.length, 5, 'returns expected value' );
	t.end();
});

tape( 'the function throws an error if provided an invalid first argument', function test( t ) {
	var values;
	var A;
	var i;

	values = [
		'foo',
		'bar',
		'beep',
		'boop',
		5,
		true,
		false
	];

	A = new Float64Array( [ 1.0, 2.0, 0.0, 4.0 ] );

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided ' + values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			iladlr( value, 2, 2, A, 2 );
		};
	}
});

tape( 'the function correctly determines the last non-zero row of a matrix', function test( t ) {
	var out;
	var A;

	A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	out = iladlr( 'row-major', 2, 2, A, 2 );
	t.strictEqual( out, 1, 'returns expected value' );

	out = iladlr( 'column-major', 2, 2, A, 1 );
	t.strictEqual( out, 1, 'returns expected value' );
	t.end();
});

tape( 'the function correctly determines the last non-zero row of a matrix', function test( t ) {
	var out;
	var A;

	A = new Float64Array( [ 0.0, 2.0, 3.0, 0.0, 0.0, 0.0 ] );
	out = iladlr( 'row-major', 2, 3, A, 3 );
	t.strictEqual( out, 0, 'returns expected value' );

	out = iladlr( 'column-major', 2, 3, A, 1 );
	t.strictEqual( out, 1, 'returns expected value' );
	t.end();
});
