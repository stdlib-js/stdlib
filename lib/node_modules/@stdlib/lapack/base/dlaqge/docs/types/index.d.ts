/*
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// TypeScript Version: 4.1

/// <reference types="@stdlib/types"/>

import { Layout } from '@stdlib/types/blas';

/**
* Interface describing `dlaqge`.
*/
interface Routine {
	/**
	* Equilibrates a general `M` by `N` matrix `A` using the row and scaling factors in vectors `R` and `C`.
	*
	* @param order - storage layout
	* @param M - number of rows in matrix `A`
	* @param N - number of columns in matrix `A`
	* @param A - input matrix
	* @param LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)
	* @param R - row scale factors
	* @param C - column scale factors
	* @param rowcnd - ratio of the smallest to the largest row scale factor
	* @param colcnd - ratio of the smallest to the largest column scale factor
	* @param amax - absolute value of the largest matrix entry
	* @returns equilibration factor
	*
	* @example
	* var Float64Array = require( '@stdlib/array/float64' );
	*
	* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	* var R = new Float64Array( [ 1.0, 11.0 ] );
	* var C = new Float64Array( [ 1.0, 11.0 ] );
	*
	* var out = dlaqge( 'row-major', 2, 2, A, 2, R, C, 1.0/11.0, 1.0/11.0, 4.0 );
	* // out => 'B'
	* // A => <Float64Array>[ 1.0, 22.0, 33.0, 484.0 ]
	*/
	( order: Layout, M: number, N: number, A: Float64Array, LDA: number, R: Float64Array, C: Float64Array, rowcnd: number, colcnd: number, amax: number ): string;

	/**
	* Equilibrates a general `M` by `N` matrix `A` using the row and scaling factors in vectors `R` and `C` using alternative indexing semantics.
	*
	* @param M - number of rows in matrix `A`
	* @param N - number of columns in matrix `A`
	* @param A - input matrix
	* @param strideA1 - stride of the first dimension of `A`
	* @param strideA2 - stride of the second dimension of `A`
	* @param offsetA - starting index for `A`
	* @param R - row scale factors
	* @param strideR - stride length for `R`
	* @param offsetR - starting index of `R`
	* @param C - column scale factors
	* @param strideC - stride length for `C`
	* @param offsetC - starting index of `C`
	* @param rowcnd - ratio of the smallest to the largest row scale factor
	* @param colcnd - ratio of the smallest to the largest column scale factor
	* @param amax - absolute value of the largest matrix entry
	* @returns equilibration factor
	*
	* @example
	* var Float64Array = require( '@stdlib/array/float64' );
	*
	* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	* var R = new Float64Array( [ 1.0, 11.0 ] );
	* var C = new Float64Array( [ 1.0, 11.0 ] );
	*
	* var out = dlaqge.ndarray( 2, 2, A, 2, 1, 0, R, 1, 0, C, 1, 0, 1.0/11.0, 1.0/11.0, 4.0 );
	* // out => 'B'
	* // A => <Float64Array>[ 1.0, 22.0, 33.0, 484.0 ]
	*/
	ndarray( M: number, N: number, A: Float64Array, strideA1: number, strideA2: number, offsetA: number, R: Float64Array, strideR: number, offsetR: number, C: Float64Array, strideC: number, offsetC: number, rowcnd: number, colcnd: number, amax: number ): string;
}

/**
* Equilibrates a general `M` by `N` matrix `A` using the row and scaling factors in vectors `R` and `C`.
*
* @param order - storage layout
* @param M - number of rows in matrix `A`
* @param N - number of columns in matrix `A`
* @param A - input matrix
* @param LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)
* @param R - row scale factors
* @param C - column scale factors
* @param rowcnd - ratio of the smallest to the largest row scale factor
* @param colcnd - ratio of the smallest to the largest column scale factor
* @param amax - absolute value of the largest matrix entry
* @returns equilibration factor
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
* var R = new Float64Array( [ 1.0, 11.0 ] );
* var C = new Float64Array( [ 1.0, 11.0 ] );
*
* var out = dlaqge( 'row-major', 2, 2, A, 2, R, C, 1.0/11.0, 1.0/11.0, 4.0 );
* // out => 'B'
* // A => <Float64Array>[ 1.0, 22.0, 33.0, 484.0 ]
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
* var R = new Float64Array( [ 1.0, 11.0 ] );
* var C = new Float64Array( [ 1.0, 11.0 ] );
*
* var out = dlaqge.ndarray( 2, 2, A, 2, 1, 0, R, 1, 0, C, 1, 0, 1.0/11.0, 1.0/11.0, 4.0 );
* // out => 'B'
* // A => <Float64Array>[ 1.0, 22.0, 33.0, 484.0 ]
*/
declare var dlaqge: Routine;


// EXPORTS //

export = dlaqge;
