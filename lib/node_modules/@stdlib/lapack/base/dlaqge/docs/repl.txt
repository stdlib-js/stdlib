
{{alias}}( order, M, N, A, LDA, R, C, rowcnd, colcnd, amax )
    Equilibrates a general `M` by `N` matrix `A` using the row and scaling
    factors in vectors `R` and `C`.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    Parameters
    ----------
    order: string
        Row-major (C-style) or column-major (Fortran-style) order. Must be
        either 'row-major' or 'column-major'.

    M: integer
        Number of rows in `A`.

    N: integer
        Number of columns in `A`.

    A: Float64Array
        Input matrix `A`.

    LDA: integer
        Stride of the first dimension of `A` (a.k.a., leading dimension of the
        matrix `A`).

    R: Float64Array
        Row scale factors.

    C: Float64Array
        Column scale factors.

    rowcnd: number
        Ratio of the smallest to the largest row scale factor.

    colcnd: number
        Ratio of the smallest to the largest column scale factor.

    amax: number
        Absolute value of the largest matrix entry.

    Returns
    -------
    out: string
        Equilibration factor.

    Examples
    --------
    > var A = new {{alias:@stdlib/array/float64}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > var R = new {{alias:@stdlib/array/float64}}( [ 1.0, 11.0 ] );
    > var C = new {{alias:@stdlib/array/float64}}( [ 1.0, 11.0 ] );
    > {{alias}}( 'row-major', 2, 2, A, 2, R, C, 1.0/11.0, 1.0/11.0, 4.0 );
    > A
    <Float64Array>[ 1.0, 22.0, 33.0, 484.0 ]


{{alias}}.ndarray( M, N, A, sa1, sa2, oa, R, sr, or, C, sc, oc, rc, cc, ax )
    Equilibrates a general `M` by `N` matrix `A` using the row and scaling
    factors in vectors `R` and `C` using alternative indexing semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing semantics based on starting
    indices.

    Parameters
    ----------
    M: integer
        Number of rows in `A`.

    N: integer
        Number of columns in `A`.

    A: Float64Array
        Input matrix `A`.

    sa1: integer
        Stride of the first dimension of `A`.

    sa2: integer
        Stride of the second dimension of `A`.

    oa: integer
        Starting index for `A`.

    R: Float64Array
        Row scale factors.

    sr: integer
        Stride length for `R`.

    or: integer
        Starting index of `R`.

    C: Float64Array
        Column scale factors.

    sc: integer
        Stride length for `C`.

    oc: integer
        Starting index of `C`.

    rc: number
        Ratio of the smallest to the largest row scale factor.

    cc: number
        Ratio of the smallest to the largest column scale factor.

    ax: number
        Absolute value of the largest matrix entry.

    Returns
    -------
    out: string
        Equilibration factor.

    Examples
    --------
    > var A = new {{alias:@stdlib/array/float64}}( [ 1.0, 2.0, 3.0, 4.0 ] );
    > var R = new {{alias:@stdlib/array/float64}}( [ 0.0, 1.0, 11.0 ] );
    > var C = new {{alias:@stdlib/array/float64}}( [ 0.0, 1.0, 11.0 ] );
    > var s = 1.0/11.0;
    > {{alias}}.ndarray( 2, 2, A, 2, 1, 0, R, 1, 1, C, 1, 1, s, s, 4.0 );
    > A
    <Float64Array>[ 1.0, 22.0, 33.0, 484.0 ]

    See Also
    --------
