/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable max-len, max-params */

'use strict';

// MODULES //

var isRowMajor = require( '@stdlib/ndarray/base/assert/is-row-major' );


// MAIN //

/**
* Equilibrates a general `M` by `N` matrix `A` using the row and scaling factors in vectors `R` and `C`.
*
* @private
* @param {NonNegativeInteger} M - number of rows in matrix `A`
* @param {NonNegativeInteger} N - number of columns in matrix `A`
* @param {Float64Array} A - input matrix
* @param {integer} strideA1 - stride of the first dimension of `A`
* @param {integer} strideA2 - stride of the second dimension of `A`
* @param {NonNegativeInteger} offsetA - starting index for `A`
* @param {Float64Array} R - row scale factors
* @param {NonNegativeInteger} strideR - stride length for `R`
* @param {NonNegativeInteger} offsetR - starting index of `R`
* @param {Float64Array} C - column scale factors
* @param {NonNegativeInteger} strideC - stride length for `C`
* @param {NonNegativeInteger} offsetC - starting index of `C`
* @param {number} rowcnd - ratio of the smallest to the largest row scale factor
* @param {number} colcnd - ratio of the smallest to the largest column scale factor
* @param {number} amax - absolute value of the largest matrix entry
* @returns {string} equilibration factor
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
* var R = new Float64Array( [ 1.0, 11.0 ] );
* var C = new Float64Array( [ 1.0, 11.0 ] );
*
* var out = dlaqge( 2, 2, A, 2, 1, 0, R, 1, 0, C, 1, 0, 1.0/11.0, 1.0/11.0, 4.0 );
* // out => 'B'
* // A => <Float64Array>[ 1.0, 22.0, 33.0, 484.0 ]
*/
function dlaqge( M, N, A, strideA1, strideA2, offsetA, R, strideR, offsetR, C, strideC, offsetC, rowcnd, colcnd, amax ) {
	var thresh;
	var large;
	var small;
	var sa0;
	var sa1;
	var rj;
	var ia;
	var i;
	var j;

	if ( M <= 0 || N <= 0 ) {
		return 'N';
	}

	if ( isRowMajor( [ strideA1, strideA2 ] ) ) {
		// For row-major matrices, the last dimension has the fastest changing index...
		sa0 = strideA2; // stride for innermost loop
		sa1 = strideA1; // stride for outermost loop
	} else { // 'column-major'
		// For column-major matrices, the first dimension has the fastest changing index...
		sa0 = strideA1; // stride for innermost loop
		sa1 = strideA2; // stride for outermost loop
	}

	thresh = 0.1;
	small = 1.0020841800044864E-292;
	large = 1.0 / small;
	if ( rowcnd >= thresh && amax >= small && amax <= large ) {
		// No row scaling
		if ( colcnd >= thresh ) {
			// No column scaling
			return 'N';
		}
		// Column scaling
		for ( j = 0; j < M; j++ ) {
			ia = offsetA + ( j * sa1 );
			for ( i = 0; i < N; i++ ) {
				A[ ia + ( i * sa0 ) ] *= C[ offsetC + ( i * strideC ) ];
			}
		}
		return 'C';
	}
	if ( colcnd >= thresh ) {
		// Row scaling, no column scaling
		for ( j = 0; j < M; j++ ) {
			ia = offsetA + ( j * sa1 );
			rj = R[ offsetR + ( j * strideR ) ];
			for ( i = 0; i < N; i++ ) {
				A[ ia + ( i * sa0 ) ] *= rj;
			}
		}
		return 'R';
	}
	// Row and column scaling
	for ( j = 0; j < M; j++ ) {
		ia = offsetA + ( j * sa1 );
		rj = R[ offsetR + ( j * strideR ) ];
		for ( i = 0; i < N; i++ ) {
			A[ ia + ( i * sa0 ) ] *= C[ offsetC + ( i * strideC ) ] * rj;
		}
	}
	return 'B';
}


// EXPORTS //

module.exports = dlaqge;
