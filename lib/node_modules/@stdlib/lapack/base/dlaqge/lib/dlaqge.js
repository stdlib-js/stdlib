/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isLayout = require( '@stdlib/blas/base/assert/is-layout' );
var format = require( '@stdlib/string/format' );
var base = require( './base.js' );


// MAIN //

/**
* Equilibrates a general `M` by `N` matrix `A` using the row and scaling factors in vectors `R` and `C`.
*
* @param {string} order - storage layout
* @param {NonNegativeInteger} M - number of rows in matrix `A`
* @param {NonNegativeInteger} N - number of columns in matrix `A`
* @param {Float64Array} A - input matrix
* @param {PositiveInteger} LDA - stride of the first dimension of `A` (a.k.a., leading dimension of the matrix `A`)
* @param {Float64Array} R - row scale factors
* @param {Float64Array} C - column scale factors
* @param {number} rowcnd - ratio of the smallest to the largest row scale factor
* @param {number} colcnd - ratio of the smallest to the largest column scale factor
* @param {number} amax - absolute value of the largest matrix entry
* @throws {TypeError} first argument must be a valid order
* @returns {string} equilibration factor
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
*
* var A = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
* var R = new Float64Array( [ 1.0, 11.0 ] );
* var C = new Float64Array( [ 1.0, 11.0 ] );
*
* var out = dlaqge( 'row-major', 2, 2, A, 2, R, C, 1.0/11.0, 1.0/11.0, 4.0 );
* // out => 'B'
* // A => <Float64Array>[ 1.0, 22.0, 33.0, 484.0 ]
*/
function dlaqge( order, M, N, A, LDA, R, C, rowcnd, colcnd, amax ) {
	var sa1;
	var sa2;
	if ( !isLayout( order ) ) {
		throw new TypeError( format( 'invalid argument. First argument must be a valid order. Value: `%s`.', order ) );
	}
	if ( order === 'column-major' ) {
		sa1 = 1;
		sa2 = LDA;
	} else { // order === 'row-major'
		sa1 = LDA;
		sa2 = 1;
	}
	return base( M, N, A, sa1, sa2, 0, R, 1, 0, C, 1, 0, rowcnd, colcnd, amax );
}


// EXPORTS //

module.exports = dlaqge;
