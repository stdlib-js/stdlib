/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;
var isObject = require( '@stdlib/assert/is-plain-object' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isMatrixLike = require( '@stdlib/assert/is-matrix-like' );
var isVectorLike = require( '@stdlib/assert/is-vector-like' );
var isArrayLike = require( '@stdlib/assert/is-array-like-object' );
var contains = require( '@stdlib/assert/contains' );
var setReadOnly = require( '@stdlib/utils/define-read-only-property' );
var Float64Array = require( '@stdlib/array/float64' );
var ctor = require( '@stdlib/ndarray/ctor' );
var bctor = require( '@stdlib/ndarray/base/ctor' );
var randint = require( '@stdlib/random/base/discrete-uniform' );


// VARIABLES //

var METRICS = [
	'euclidean',
	'correlation',
	'cosine'
];

var INIT_METHODS = [
	'random',
	'kmeans++'
];

var ndopts = {
	'codegen': false // avoid unnecessarily running afoul of CSPs
};


// FUNCTIONS //

/**
* Returns a matrix.
*
* @private
* @param {PositiveInteger} m - number of rows
* @param {PositiveInteger} n - number of columns
* @param {boolean} bool - boolean indicating whether to create a low-level ndarray
* @returns {ndarray} matrix
*/
function createMatrix( m, n, bool ) {
	var strides;
	var matrix;
	var buffer;
	var shape;
	var f;

	if ( bool ) {
		f = bctor; // low-level ndarray constructor
	} else {
		f = ctor;
	}
	matrix = f( 'float64', 2, ndopts );
	buffer = new Float64Array( m*n );
	shape = [ m, n ];
	strides = [ n, 1 ];

	return matrix( buffer, shape, strides, 0, 'row-major' );
}


// MAIN //

/**
* Returns an accumulator function which incrementally partitions data into `k` clusters.
*
* @param {(PositiveInteger|ndarray)} K - number of clusters or a `kxd` matrix containing initial centroids (where `d` is the number of dimensions)
* @param {Options} [options] - function options
* @param {string} [options.metric="euclidean"] - distance metric
* @param {ArrayLikeObject} [options.init] - method for determining initial centroids
* @param {*} [options.seed] - PRNG seed
* @throws {TypeError} first argument must be a positive integer
* @throws {TypeError} options argument must be an object
* @throws {TypeError} must provide valid options
* @throws {RangeError} when using sampling to generate initial centroids, the sample size must be greater than or equal to the number of clusters
* @returns {Function} accumulator function
*
* @example
* TODO
*/
function incrkmeans( K, options ) {
	var centroids;
	var buffer;
	var ndims;
	var opts;
	var k;

	if ( isMatrixLike( K ) ) {
		centroids = K; // TODO: copy to prevent external mutation!
		k = centroids.shape[ 0 ];
		ndims = centroids.shape[ 1 ];
	} else if ( isPositiveInteger( K ) ) {
		k = K;
	} else {
		throw new TypeError( 'invalid input argument. First argument must either be a positive integer specifying the number of clusters or a matrix containing initial centroids. Value: `' + K + '`.' );
	}
	opts = {
		'metric': 'euclidean',
		'init': [ 'random', k ],
		'seed': randint.SEED
	};
	if ( arguments.length > 1 ) {
		if ( !isObject( options ) ) {
			throw new TypeError( 'invalid input argument. Options argument must be an object. Value: `' + options + '`.' );
		}
		if ( hasOwnProp( options, 'metric' ) ) {
			opts.metric = options.metric;
			if ( !contains( METRICS, opts.metric ) ) {
				throw new TypeError( 'invalid option. `metric` option must be one of the following: [' + METRICS.join( ', ' ) + ']. Option: `' + opts.metric + '`.' );
			}
		}
		if ( hasOwnProp( options, 'init' ) ) {
			opts.init = options.init;
			if ( !isArrayLike( opts.init ) ) {
				throw new TypeError( 'invalid option. `init` option must be an array-like object. Option: `' + opts.init + '`.' );
			}
			if ( !contains( INIT_METHODS, opts.init[ 0 ] ) ) {
				throw new TypeError( 'invalid option. `init` option method must be one of the following: [' + INIT_METHODS.join( ', ' ) + ']. Option: `' + opts.init[ 0 ] + '`.' );
			}
			if ( !isPositiveInteger( opts.init[ 1 ] ) ) {
				throw new TypeError( 'invalid option. `init` option parameter must be a positive integer. Option: `' + opts.init[ 1 ] + '`.' );
			}
			if ( opts.init[ 1 ] < k ) {
				throw new RangeError( 'invalid option. `init` option parameter must be greater than or equal to the number of clusters. Options: `' + opts.init[ 1 ] + '`.' );
			}
		}
		if ( hasOwnProp( options, 'seed' ) ) {
			opts.seed = options.seed;
		}
	}
	setReadOnly( accumulator, 'SEED', opts.seed );
	return accumulator;

	/**
	* If provided a data vector, the accumulator function returns updated centroids. If not provided a data vector, the accumulator function returns the current centroids.
	*
	* @private
	* @param {ndarray} [v] - data vector
	* @throws {TypeError} must provide a 1-dimensional ndarray
	* @throws {Error} vector length must match centroid dimensions
	* @returns {(ndarray|null)} centroids or null
	*/
	function accumulator( v ) {
		if ( arguments.length === 0 ) {
			if ( centroids === void 0 ) {
				return null;
			}
			// TODO: return output model object
			return centroids;
		}
		if ( !isVectorLike( v ) ) {
			throw new TypeError( 'invalid input argument. Must provide a 1-dimensional ndarray. Value: `' + v + '`.' );
		}
		// Check if we have yet to determine input vector dimensionality...
		if ( ndims === void 0 ) {
			// Determine the dimensionality from the first provided data vector:
			ndims = v.shape[ 0 ];
		} else if ( v.shape[ 0 ] !== ndims ) {
			throw new Error( 'invalid input argument. Vector length must match centroid dimensions. Expected: ' + ndims + '. Actual: ' + v.shape[ 0 ] + '.' );
		}
		// Check if we have yet to compute initial centroids...
		if ( centroids === void 0 ) {
			// If this is the first data vector, we need to begin caching data vectors for future centroid initialization...
			if ( buffer === void 0 ) {
				buffer = [ v ];
				return null;
			}
			// Check if we are still building our cache of data vectors...
			if ( buffer.length < opts.init[ 1 ] ) {
				buffer.push( v );
				return null;
			}
			// Initialize a matrix for storing centroids:
			centroids = createMatrix( k, ndims, false );

			// TODO: compute initial centroids

			// Release the cached data vectors:
			buffer.length = 0;
		} else {
			// TODO: update k-means model
		}
		// TODO: return output model object
		return centroids;
	}
}


// EXPORTS //

module.exports = incrkmeans;
