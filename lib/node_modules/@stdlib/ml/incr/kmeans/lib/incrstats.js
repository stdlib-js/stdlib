/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var incrmean = require( '@stdlib/stats/incr/mean' );
var incrstdev = require( '@stdlib/stats/incr/stdev' );
var Float64Array = require( '@stdlib/array/float64' );


// MAIN //

/**
* Initializes incremental accumulators for computing the mean vector and associated standard deviation along each dimension.
*
* @private
* @param {PositiveInteger} ndims - number of dimensions
* @returns {Object} accumulators
*/
function incrstats( ndims ) {
	var acc;
	var out;
	var i;

	acc = [];
	for ( i = 0; i < ndims; i++ ) {
		acc.push( incrmean() );
		acc.push( incrstdev() );
	}
	out = new Float64Array( ndims*2 );
	return accumulator;

	/**
	* If provided a data point vector, updates the mean vector and associated standard deviation along each dimension. If not provided a data point vector, returns the current mean vector and associated standard deviation along each dimension.
	*
	* @private
	* @param {ndarray} [vec] - data point vector
	* @returns {Float64Array} current mean vector and associated standard deviation along each dimension
	*/
	function accumulator( vec ) {
		var v;
		var i;
		var j;
		if ( arguments.length === 0 ) {
			return out;
		}
		j = 0;
		for ( i = 0; i < ndims; i++ ) {
			v = vec.get( i );
			out[ j ] = acc[ j ]( v );
			out[ j+1 ] = acc[ j+1 ]( v );
			j += 2; // +stride
		}
		return out;
	}
}


// EXPORTS //

module.exports = incrstats;
