/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var isSameComplex128Array = require( '@stdlib/assert/is-same-complex128array' );
var isSameFloat64Array = require( '@stdlib/assert/is-same-float64array' );
var Complex128Array = require( '@stdlib/array/complex128' );
var Float64Array = require( '@stdlib/array/float64' );
var Complex128 = require( '@stdlib/complex/float64/ctor' );
var shape2strides = require( '@stdlib/ndarray/base/shape2strides' );
var strides2offset = require( '@stdlib/ndarray/base/strides2offset' );
var linspace = require( '@stdlib/array/linspace' );
var ndarray = require( '@stdlib/ndarray/ctor' );
var toReversed = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof toReversed, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function returns an ndarray where the elements of an input ndarray are reversed along each dimension (row-major, contiguous)', function test( t ) {
	var expected;
	var ord;
	var sh;
	var st;
	var dt;
	var o;
	var x;
	var y;

	dt = 'float64';
	ord = 'row-major';
	sh = [ 3, 1, 2 ];
	st = shape2strides( sh, ord );
	o = strides2offset( sh, st );

	x = ndarray( dt, linspace( 0.0, 100.0, 6 ), sh, st, o, ord );

	y = toReversed( x );

	expected = new Float64Array([
		100.0,
		80.0,
		60.0,
		40.0,
		20.0,
		0.0
	]);

	t.strictEqual( isSameFloat64Array( y.data, expected ), true, 'returns expected value' );
	t.end();
});

tape( 'the function returns an ndarray where the elements of an input ndarray are reversed along each dimension (row-major, contiguous, accessors)', function test( t ) {
	var expected;
	var start;
	var stop;
	var opts;
	var ord;
	var sh;
	var st;
	var dt;
	var o;
	var x;
	var y;

	opts = {
		'dtypes': 'complex128'
	};

	start = new Complex128( 0.0, 0.0 );
	stop = new Complex128( 100.0, 100.0 );

	dt = 'complex128';
	ord = 'row-major';
	sh = [ 3, 1, 2 ];
	st = shape2strides( sh, ord );
	o = strides2offset( sh, st );

	x = ndarray( dt, linspace( start, stop, 6, opts ), sh, st, o, ord );

	y = toReversed( x );

	expected = new Complex128Array([
		100.0,
		100.0,
		80.0,
		80.0,
		60.0,
		60.0,
		40.0,
		40.0,
		20.0,
		20.0,
		0.0,
		0.0
	]);

	t.strictEqual( isSameComplex128Array( y.data, expected ), true, 'returns expected value' );
	t.end();
});

tape( 'the function returns an ndarray where the elements of an input ndarray are reversed along each dimension (column-major, contiguous)', function test( t ) {
	var expected;
	var ord;
	var sh;
	var st;
	var dt;
	var o;
	var x;
	var y;

	dt = 'float64';
	ord = 'column-major';
	sh = [ 3, 1, 2 ];
	st = shape2strides( sh, ord );
	o = strides2offset( sh, st );

	x = ndarray( dt, linspace( 0.0, 100.0, 6 ), sh, st, o, ord );

	y = toReversed( x );

	expected = new Float64Array([
		100.0,
		40.0,
		80.0,
		20.0,
		60.0,
		0.0
	]);

	t.strictEqual( isSameFloat64Array( y.data, expected ), true, 'returns expected value' );
	t.end();
});

tape( 'the function returns an ndarray where the elements of an input ndarray are reversed along each dimension (column-major, contiguous, accessors)', function test( t ) {
	var expected;
	var start;
	var stop;
	var opts;
	var ord;
	var sh;
	var st;
	var dt;
	var o;
	var x;
	var y;

	opts = {
		'dtypes': 'complex128'
	};

	start = new Complex128( 0.0, 0.0 );
	stop = new Complex128( 100.0, 100.0 );

	dt = 'complex128';
	ord = 'row-major';
	sh = [ 3, 1, 2 ];
	st = shape2strides( sh, ord );
	o = strides2offset( sh, st );

	x = ndarray( dt, linspace( start, stop, 6, opts ), sh, st, o, ord );

	y = toReversed( x );

	expected = new Complex128Array([
		100.0,
		100.0,
		80.0,
		80.0,
		60.0,
		60.0,
		40.0,
		40.0,
		20.0,
		20.0,
		0.0,
		0.0
	]);

	t.strictEqual( isSameComplex128Array( y.data, expected ), true, 'returns expected value' );
	t.end();
});

tape( 'the function returns an ndarray where the elements of an input ndarray are reversed along each dimension (row-major, non-contiguous)', function test( t ) {
	var expected;
	var ord;
	var sh;
	var st;
	var dt;
	var o;
	var x;
	var y;

	dt = 'float64';
	ord = 'row-major';
	sh = [ 3, 1, 2 ];
	st = [ 4, 4, 1 ];
	o = 1;

	x = ndarray( dt, linspace( 0.0, 100.0, 11 ), sh, st, o, ord );

	y = toReversed( x );

	expected = new Float64Array([
		100.0,
		90.0,
		60.0,
		50.0,
		20.0,
		10.0
	]);

	t.strictEqual( isSameFloat64Array( y.data, expected ), true, 'returns expected value' );
	t.end();
});

tape( 'the function returns an ndarray where the elements of an input ndarray are reversed along each dimension (row-major, non-contiguous, accessors)', function test( t ) {
	var expected;
	var start;
	var stop;
	var opts;
	var ord;
	var sh;
	var st;
	var dt;
	var o;
	var x;
	var y;

	opts = {
		'dtypes': 'complex128'
	};

	start = new Complex128( 0.0, 0.0 );
	stop = new Complex128( 100.0, 100.0 );

	dt = 'complex128';
	ord = 'row-major';
	sh = [ 3, 1, 2 ];
	st = [ 4, 4, 1 ];
	o = 1;

	x = ndarray( dt, linspace( start, stop, 11, opts ), sh, st, o, ord );

	y = toReversed( x );

	expected = new Complex128Array([
		100.0,
		100.0,
		90.0,
		90.0,
		60.0,
		60.0,
		50.0,
		50.0,
		20.0,
		20.0,
		10.0,
		10.0
	]);

	t.strictEqual( isSameComplex128Array( y.data, expected ), true, 'returns expected value' );
	t.end();
});

tape( 'the function returns an ndarray where the elements of an input ndarray are reversed along each dimension (column-major, non-contiguous)', function test( t ) {
	var expected;
	var ord;
	var sh;
	var st;
	var dt;
	var o;
	var x;
	var y;

	dt = 'float64';
	ord = 'column-major';
	sh = [ 3, 1, 2 ];
	st = [ 1, 6, 6 ];
	o = 1;

	x = ndarray( dt, linspace( 0.0, 100.0, 11 ), sh, st, o, ord );

	y = toReversed( x );

	expected = new Float64Array([
		90.0,
		30.0,
		80.0,
		20.0,
		70.0,
		10.0
	]);

	t.strictEqual( isSameFloat64Array( y.data, expected ), true, 'returns expected value' );
	t.end();
});

tape( 'the function returns an ndarray where the elements of an input ndarray are reversed along each dimension (row-major, non-contiguous, accessors)', function test( t ) {
	var expected;
	var start;
	var stop;
	var opts;
	var ord;
	var sh;
	var st;
	var dt;
	var o;
	var x;
	var y;

	opts = {
		'dtypes': 'complex128'
	};

	start = new Complex128( 0.0, 0.0 );
	stop = new Complex128( 100.0, 100.0 );

	dt = 'complex128';
	ord = 'column-major';
	sh = [ 3, 1, 2 ];
	st = [ 1, 6, 6 ];
	o = 1;

	x = ndarray( dt, linspace( start, stop, 11, opts ), sh, st, o, ord );

	y = toReversed( x );

	expected = new Complex128Array([
		90.0,
		90.0,
		30.0,
		30.0,
		80.0,
		80.0,
		20.0,
		20.0,
		70.0,
		70.0,
		10.0,
		10.0
	]);

	t.strictEqual( isSameComplex128Array( y.data, expected ), true, 'returns expected value' );
	t.end();
});
