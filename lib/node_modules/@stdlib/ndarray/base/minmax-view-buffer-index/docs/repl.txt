
{{alias}}( shape, strides, offset )
    Computes the minimum and maximum linear indices in an underlying data buffer
    which are accessible to an array view.

    Parameters
    ----------
    shape: ArrayLike
        Array shape.

    strides: ArrayLike
        Stride array.

    offset: integer
        Location of the first indexed value based on the stride array.

    Returns
    -------
    out: Array
        Minimum and maximum linear indices in an underlying data buffer which
        are accessible to an array view.

    Examples
    --------
    > var d = [ 2, 3, 10 ];
    > var s = [ 30, -10, 1 ];
    > var o = 20;
    > var out = {{alias}}( d, s, o )
    [ 0, 59 ]
    > s = [ 30, 10, 1 ];
    > o = 0;
    > out = {{alias}}( d, s, o )
    [ 0, 59 ]
    > s = [ -30, -10, -1 ];
    > o = 59;
    > out = {{alias}}( d, s, o )
    [ 0, 59 ]


{{alias}}.assign( shape, strides, offset, out )
    Computes the minimum and maximum linear indices in an underlying data buffer
    which are accessible to an array view and assigns results to a provided
    output array.

    Parameters
    ----------
    shape: ArrayLike
        Array shape.

    strides: ArrayLike
        Stride array.

    offset: integer
        Location of the first indexed value based on the stride array.

    out: Array|TypedArray|Object
        Output array.

    Returns
    -------
    out: Array|TypedArray|Object
        Minimum and maximum linear indices in an underlying data buffer which
        are accessible to an array view.

    Examples
    --------
    > var d = [ 2, 3, 10 ];
    > var s = [ 30, -10, 1 ];
    > var o = 20;
    > var arr = [ 0, 0 ];
    > var out = {{alias}}.assign( d, s, o, arr )
    [ 0, 59 ]
    > var bool = ( out === arr )
    true

    See Also
    --------

