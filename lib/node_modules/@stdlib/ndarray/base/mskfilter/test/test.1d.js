/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var isSameComplex64Array = require( '@stdlib/assert/is-same-complex64array' );
var isSameFloat64Array = require( '@stdlib/assert/is-same-float64array' );
var Complex64Array = require( '@stdlib/array/complex64' );
var Float64Array = require( '@stdlib/array/float64' );
var Uint8Array = require( '@stdlib/array/uint8' );
var BooleanArray = require( '@stdlib/array/bool' );
var ndarray = require( '@stdlib/ndarray/ctor' );
var mskfilter = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof mskfilter, 'function', 'main export is a function');
	t.end();
});

tape( 'the function applies a mask to a provided 1-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray', function test( t ) {
	var expected;
	var mask;
	var x;
	var y;

	x = new ndarray( 'float64', new Float64Array( [ 1.0, 2.0, 3.0 ] ), [ 3 ], [ 1 ], 0, 'row-major' );
	mask = new ndarray( 'uint8', new Uint8Array( [ 1, 0, 1 ] ), [ 3 ], [ 1 ], 0, 'row-major' );
	y = new ndarray( 'float64', new Float64Array( [ 0.0, 0.0 ] ), [ 2 ], [ 1 ], 0, 'row-major' );

	mskfilter( [ x, mask, y ] );

	expected = new Float64Array( [ 1.0, 3.0 ] );
	t.strictEqual( isSameFloat64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 1-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (accessors)', function test( t ) {
	var expected;
	var mask;
	var x;
	var y;

	x = new ndarray( 'complex64', new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] ), [ 3 ], [ 1 ], 0, 'row-major' );
	mask = new ndarray( 'bool', new BooleanArray( [ 1, 0, 1 ] ), [ 3 ], [ 1 ], 0, 'row-major' );
	y = new ndarray( 'complex64', new Complex64Array( [ 0.0, 0.0, 0.0, 0.0 ] ), [ 2 ], [ 1 ], 0, 'row-major' );

	mskfilter( [ x, mask, y ] );

	expected = new Complex64Array( [ 1.0, 2.0, 5.0, 6.0 ] );
	t.strictEqual( isSameComplex64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});
