/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable max-len, max-lines */

'use strict';

// MODULES //

var tape = require( 'tape' );
var isSameComplex64Array = require( '@stdlib/assert/is-same-complex64array' );
var isSameFloat64Array = require( '@stdlib/assert/is-same-float64array' );
var Complex64Array = require( '@stdlib/array/complex64' );
var Float64Array = require( '@stdlib/array/float64' );
var Uint8Array = require( '@stdlib/array/uint8' );
var BooleanArray = require( '@stdlib/array/bool' );
var ones = require( '@stdlib/array/ones' );
var oneTo = require( '@stdlib/array/one-to' );
var ndarray = require( '@stdlib/ndarray/ctor' );
var shape2strides = require( '@stdlib/ndarray/base/shape2strides' );
var strides2offset = require( '@stdlib/ndarray/base/strides2offset' );
var numel = require( '@stdlib/ndarray/base/numel' );
var blockSize = require( '@stdlib/ndarray/base/nullary-tiling-block-size' );
var mskfilter = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof mskfilter, 'function', 'main export is a function');
	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (row-major, singleton dimensions)', function test( t ) {
	var expected;
	var mask;
	var xbuf;
	var mbuf;
	var ybuf;
	var ord;
	var sh;
	var st;
	var o;
	var x;
	var y;

	ord = 'row-major';
	sh = [ 4, 1, 1, 1, 1 ];
	st = shape2strides( sh, ord );
	o = strides2offset( sh, st );

	xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	mbuf = new Uint8Array( [ 1, 0, 1, 0 ] );
	ybuf = new Float64Array( [ 0.0, 0.0 ] );

	x = ndarray( 'float64', xbuf, sh, st, o, ord );
	mask = ndarray( 'uint8', mbuf, sh, st, o, ord );
	y = ndarray( 'float64', ybuf, [ 2 ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = new Float64Array( [ 1.0, 3.0 ] );
	t.strictEqual( isSameFloat64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (row-major, singleton dimensions, accessors)', function test( t ) {
	var expected;
	var mask;
	var xbuf;
	var mbuf;
	var ybuf;
	var ord;
	var sh;
	var st;
	var o;
	var x;
	var y;

	ord = 'row-major';
	sh = [ 4, 1, 1, 1, 1 ];
	st = shape2strides( sh, ord );
	o = strides2offset( sh, st );

	xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );
	mbuf = new BooleanArray( [ 1, 0, 1, 0 ] );
	ybuf = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0 ] );

	x = ndarray( 'complex64', xbuf, sh, st, o, ord );
	mask = ndarray( 'bool', mbuf, sh, st, o, ord );
	y = ndarray( 'complex64', ybuf, [ 2 ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = new Complex64Array( [ 1.0, 2.0, 5.0, 6.0 ] );
	t.strictEqual( isSameComplex64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (row-major, empty)', function test( t ) {
	var expected;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var ord;
	var sh;
	var st;
	var o;
	var x;
	var y;

	ord = 'row-major';
	sh = [ 0, 0, 0, 0, 0 ];
	st = shape2strides( sh, ord );
	o = strides2offset( sh, st );

	xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	mbuf = new Uint8Array( [ 1, 0, 1, 0 ] );
	ybuf = new Float64Array( [ 0.0, 0.0 ] );

	x = ndarray( 'float64', xbuf, sh, st, o, ord );
	mask = ndarray( 'uint8', mbuf, sh, st, o, ord );
	y = ndarray( 'float64', ybuf, [ 2 ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = new Float64Array( [ 0.0, 0.0 ] );
	t.strictEqual( isSameFloat64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (row-major, contiguous)', function test( t ) {
	var expected;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var ord;
	var sh;
	var st;
	var o;
	var x;
	var y;

	ord = 'row-major';
	sh = [ 2, 1, 2, 1, 2 ];
	st = shape2strides( sh, ord );
	o = strides2offset( sh, st );

	xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );
	mbuf = new Uint8Array( [ 1, 0, 1, 0, 1, 0, 1, 0 ] );
	ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );

	x = ndarray( 'float64', xbuf, sh, st, o, ord );
	mask = ndarray( 'uint8', mbuf, sh, st, o, ord );
	y = ndarray( 'float64', ybuf, [ 4 ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = new Float64Array( [ 1.0, 3.0, 5.0, 7.0 ] );
	t.strictEqual( isSameFloat64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (row-major, contiguous, negative strides)', function test( t ) {
	var expected;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var ord;
	var sh;
	var st;
	var o;
	var x;
	var y;

	ord = 'row-major';
	sh = [ 2, 2, 1, 2, 2 ];
	st = [ -8, -4, -4, -2, -1 ];
	o = strides2offset( sh, st );

	xbuf = new Float64Array( oneTo( 16, 'float64' ) );
	mbuf = new Uint8Array( [ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 ] );
	ybuf = new Float64Array( 8 );

	x = ndarray( 'float64', xbuf, sh, st, o, ord );
	mask = ndarray( 'uint8', mbuf, sh, st, o, ord );
	y = ndarray( 'float64', ybuf, [ 8 ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = new Float64Array( [ 15.0, 13.0, 11.0, 9.0, 7.0, 5.0, 3.0, 1.0 ] );
	t.strictEqual( isSameFloat64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (row-major, non-contiguous, same sign strides)', function test( t ) {
	var expected;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var ord;
	var sh;
	var st;
	var o;
	var x;
	var y;

	ord = 'row-major';
	sh = [ 2, 1, 2, 1, 2 ];
	st = [ 8, 4, 2, 2, 1 ];
	o = strides2offset( sh, st );

	xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );
	mbuf = new Uint8Array( [ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 ] );
	ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );

	x = ndarray( 'float64', xbuf, sh, st, o, ord );
	mask = ndarray( 'uint8', mbuf, sh, st, o, ord );
	y = ndarray( 'float64', ybuf, [ 3 ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = new Float64Array( [ 1.0, 3.0, 9.0 ] );
	t.strictEqual( isSameFloat64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (row-major, non-contiguous, mixed sign strides)', function test( t ) {
	var expected;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var ord;
	var sh;
	var st;
	var o;
	var x;
	var y;

	ord = 'row-major';
	sh = [ 2, 1, 2, 1, 2 ];
	st = [ 8, 4, -2, -2, 1 ];
	o = strides2offset( sh, st );

	xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );
	mbuf = new Uint8Array( [ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 ] );
	ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );

	x = ndarray( 'float64', xbuf, sh, st, o, ord );
	mask = ndarray( 'uint8', mbuf, sh, st, o, ord );
	y = ndarray( 'float64', ybuf, [ 3 ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = new Float64Array( [ 3.0, 1.0, 11.0 ] );
	t.strictEqual( isSameFloat64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (row-major, non-contiguous, large arrays)', function test( t ) {
	var expected;
	var bsize;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var len;
	var ord;
	var sh;
	var st;
	var dt;
	var o;
	var x;
	var y;

	dt = 'float64';
	ord = 'row-major';

	bsize = blockSize( dt );
	sh = [ bsize*2, 1, 2, 1, 2 ];
	st = [ 8, -8, -4, 4, 2 ];
	o = strides2offset( sh, st );
	len = numel( sh );

	xbuf = ones( len*2, dt );
	mbuf = ones( len*2, 'uint8' );
	ybuf = new Float64Array( len );

	x = ndarray( 'float64', xbuf, sh, st, o, ord );
	mask = ndarray( 'uint8', mbuf, sh, st, o, ord );
	y = ndarray( 'float64', ybuf, [ len ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = ones( len, dt );
	t.strictEqual( isSameFloat64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (row-major, non-contiguous, large arrays)', function test( t ) {
	var expected;
	var bsize;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var len;
	var ord;
	var sh;
	var st;
	var dt;
	var o;
	var x;
	var y;

	dt = 'float64';
	ord = 'row-major';

	bsize = blockSize( dt );
	sh = [ 2, bsize*2, 1, 1, 2 ];
	st = [ bsize*8, -4, 4, -4, -2 ];
	o = strides2offset( sh, st );
	len = numel( sh );

	xbuf = ones( len*2, dt );
	mbuf = ones( len*2, 'uint8' );
	ybuf = new Float64Array( len );

	x = ndarray( 'float64', xbuf, sh, st, o, ord );
	mask = ndarray( 'uint8', mbuf, sh, st, o, ord );
	y = ndarray( 'float64', ybuf, [ len ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = ones( len, dt );
	t.strictEqual( isSameFloat64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (row-major, non-contiguous, large arrays)', function test( t ) {
	var expected;
	var bsize;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var len;
	var ord;
	var sh;
	var st;
	var dt;
	var o;
	var x;
	var y;

	dt = 'float64';
	ord = 'row-major';

	bsize = blockSize( dt );
	sh = [ 2, 1, bsize*2, 1, 2 ];
	st = [ bsize*8, bsize*8, -4, -4, 2 ];
	o = strides2offset( sh, st );
	len = numel( sh );

	xbuf = ones( len*2, dt );
	mbuf = ones( len*2, 'uint8' );
	ybuf = new Float64Array( len );

	x = ndarray( 'float64', xbuf, sh, st, o, ord );
	mask = ndarray( 'uint8', mbuf, sh, st, o, ord );
	y = ndarray( 'float64', ybuf, [ len ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = ones( len, dt );
	t.strictEqual( isSameFloat64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (row-major, non-contiguous, large arrays)', function test( t ) {
	var expected;
	var bsize;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var len;
	var ord;
	var sh;
	var st;
	var dt;
	var o;
	var x;
	var y;

	dt = 'float64';
	ord = 'row-major';

	bsize = blockSize( dt );
	sh = [ 2, 1, 2, bsize*2, 1 ];
	st = [ bsize*8, -bsize*8, -bsize*4, -2, 2 ];
	o = strides2offset( sh, st );
	len = numel( sh );

	xbuf = ones( len*2, dt );
	mbuf = ones( len*2, 'uint8' );
	ybuf = new Float64Array( len );

	x = ndarray( 'float64', xbuf, sh, st, o, ord );
	mask = ndarray( 'uint8', mbuf, sh, st, o, ord );
	y = ndarray( 'float64', ybuf, [ len ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = ones( len, dt );
	t.strictEqual( isSameFloat64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (row-major, non-contiguous, large arrays)', function test( t ) {
	var expected;
	var bsize;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var len;
	var ord;
	var sh;
	var st;
	var dt;
	var o;
	var x;
	var y;

	dt = 'float64';
	ord = 'row-major';

	bsize = blockSize( dt );
	sh = [ 2, 1, 2, 1, bsize*2 ];
	st = [ bsize*8, -bsize*8, -bsize*4, -bsize*4, 2 ];
	o = strides2offset( sh, st );
	len = numel( sh );

	xbuf = ones( len*2, dt );
	mbuf = ones( len*2, 'uint8' );
	ybuf = new Float64Array( len );

	x = ndarray( 'float64', xbuf, sh, st, o, ord );
	mask = ndarray( 'uint8', mbuf, sh, st, o, ord );
	y = ndarray( 'float64', ybuf, [ len ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = ones( len, dt );
	t.strictEqual( isSameFloat64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (row-major, contiguous, accessors)', function test( t ) {
	var expected;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var ord;
	var sh;
	var st;
	var o;
	var x;
	var y;

	ord = 'row-major';
	sh = [ 2, 1, 2, 1, 2 ];
	st = shape2strides( sh, ord );
	o = strides2offset( sh, st );

	xbuf = new Complex64Array( oneTo( 16, 'float32' ) );
	mbuf = new BooleanArray( [ 1, 0, 1, 0, 1, 0, 1, 0 ] );
	ybuf = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );

	x = ndarray( 'complex64', xbuf, sh, st, o, ord );
	mask = ndarray( 'bool', mbuf, sh, st, o, ord );
	y = ndarray( 'complex64', ybuf, [ 4 ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = new Complex64Array( [ 1.0, 2.0, 5.0, 6.0, 9.0, 10.0, 13.0, 14.0 ] );
	t.strictEqual( isSameComplex64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (row-major, contiguous, negative strides, accessors)', function test( t ) {
	var expected;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var ord;
	var sh;
	var st;
	var o;
	var x;
	var y;

	ord = 'row-major';
	sh = [ 2, 1, 2, 1, 2 ];
	st = [ -4, -4, -2, -2, -1 ];
	o = strides2offset( sh, st );

	xbuf = new Complex64Array( oneTo( 16, 'float32' ) );
	mbuf = new Uint8Array( [ 1, 0, 1, 0, 1, 0, 1, 0 ] );
	ybuf = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );

	x = ndarray( 'complex64', xbuf, sh, st, o, ord );
	mask = ndarray( 'bool', mbuf, sh, st, o, ord );
	y = ndarray( 'complex64', ybuf, [ 4 ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = new Complex64Array( [ 13.0, 14.0, 9.0, 10.0, 5.0, 6.0, 1.0, 2.0 ] );
	t.strictEqual( isSameComplex64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (row-major, non-contiguous, same sign strides, accessors)', function test( t ) {
	var expected;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var ord;
	var sh;
	var st;
	var o;
	var x;
	var y;

	ord = 'row-major';
	sh = [ 2, 1, 2, 1, 2 ];
	st = [ 8, 4, 2, 2, 1 ];
	o = strides2offset( sh, st );

	xbuf = new Complex64Array( oneTo( 24, 'float32' ) );
	mbuf = new BooleanArray( [ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 ] );
	ybuf = new Complex64Array( 4 );

	x = ndarray( 'complex64', xbuf, sh, st, o, ord );
	mask = ndarray( 'bool', mbuf, sh, st, o, ord );
	y = ndarray( 'complex64', ybuf, [ 4 ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = new Complex64Array( [ 1.0, 2.0, 5.0, 6.0, 17.0, 18.0, 21.0, 22.0 ] );
	t.strictEqual( isSameComplex64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (row-major, non-contiguous, mixed sign strides, accessors)', function test( t ) {
	var expected;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var ord;
	var sh;
	var st;
	var o;
	var x;
	var y;

	ord = 'row-major';
	sh = [ 2, 1, 2, 1, 2 ];
	st = [ 8, 4, -2, -2, -1 ];
	o = strides2offset( sh, st );

	xbuf = new Complex64Array( oneTo( 24, 'float32' ) );
	mbuf = new BooleanArray( [ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 ] );
	ybuf = new Complex64Array( 4 );

	x = ndarray( 'complex64', xbuf, sh, st, o, ord );
	mask = ndarray( 'bool', mbuf, sh, st, o, ord );
	y = ndarray( 'complex64', ybuf, [ 4 ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = new Complex64Array( [ 5.0, 6.0, 1.0, 2.0, 21.0, 22.0, 17.0, 18.0 ] );
	t.strictEqual( isSameComplex64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (row-major, non-contiguous, large arrays, accessors)', function test( t ) {
	var expected;
	var bsize;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var len;
	var ord;
	var sh;
	var st;
	var dt;
	var o;
	var x;
	var y;

	dt = 'complex64';
	ord = 'row-major';

	bsize = blockSize( dt );
	sh = [ bsize*2, 1, 2, 1, 2 ];
	st = [ 8, -8, -4, 4, 2 ];
	o = strides2offset( sh, st );
	len = numel( sh );

	xbuf = ones( len*2, dt );
	mbuf = ones( len*2, 'bool' );
	ybuf = new Complex64Array( len );

	x = ndarray( 'complex64', xbuf, sh, st, o, ord );
	mask = ndarray( 'bool', mbuf, sh, st, o, ord );
	y = ndarray( 'complex64', ybuf, [ len ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = ones( len, dt );
	t.strictEqual( isSameComplex64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (row-major, non-contiguous, large arrays, accessors)', function test( t ) {
	var expected;
	var bsize;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var len;
	var ord;
	var sh;
	var st;
	var dt;
	var o;
	var x;
	var y;

	dt = 'complex64';
	ord = 'row-major';

	bsize = blockSize( dt );
	sh = [ 2, bsize*2, 1, 1, 2 ];
	st = [ bsize*8, -4, 4, -4, -2 ];
	o = strides2offset( sh, st );
	len = numel( sh );

	xbuf = ones( len*2, dt );
	mbuf = ones( len*2, 'bool' );
	ybuf = new Complex64Array( len );

	x = ndarray( 'complex64', xbuf, sh, st, o, ord );
	mask = ndarray( 'bool', mbuf, sh, st, o, ord );
	y = ndarray( 'complex64', ybuf, [ len ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = ones( len, dt );
	t.strictEqual( isSameComplex64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (row-major, non-contiguous, large arrays, accessors)', function test( t ) {
	var expected;
	var bsize;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var len;
	var ord;
	var sh;
	var st;
	var dt;
	var o;
	var x;
	var y;

	dt = 'complex64';
	ord = 'row-major';

	bsize = blockSize( dt );
	sh = [ 2, 1, bsize*2, 1, 2 ];
	st = [ bsize*8, bsize*8, -4, -4, 2 ];
	o = strides2offset( sh, st );
	len = numel( sh );

	xbuf = ones( len*2, dt );
	mbuf = ones( len*2, 'bool' );
	ybuf = new Complex64Array( len );

	x = ndarray( 'complex64', xbuf, sh, st, o, ord );
	mask = ndarray( 'bool', mbuf, sh, st, o, ord );
	y = ndarray( 'complex64', ybuf, [ len ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = ones( len, dt );
	t.strictEqual( isSameComplex64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (row-major, non-contiguous, large arrays, accessors)', function test( t ) {
	var expected;
	var bsize;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var len;
	var ord;
	var sh;
	var st;
	var dt;
	var o;
	var x;
	var y;

	dt = 'complex64';
	ord = 'row-major';

	bsize = blockSize( dt );
	sh = [ 2, 1, 1, bsize*2, 2 ];
	st = [ bsize*8, -bsize*8, -bsize*8, -4, 2 ];
	o = strides2offset( sh, st );
	len = numel( sh );

	xbuf = ones( len*2, dt );
	mbuf = ones( len*2, 'bool' );
	ybuf = new Complex64Array( len );

	x = ndarray( 'complex64', xbuf, sh, st, o, ord );
	mask = ndarray( 'bool', mbuf, sh, st, o, ord );
	y = ndarray( 'complex64', ybuf, [ len ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = ones( len, dt );
	t.strictEqual( isSameComplex64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (row-major, non-contiguous, large arrays, accessors)', function test( t ) {
	var expected;
	var bsize;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var len;
	var ord;
	var sh;
	var st;
	var dt;
	var o;
	var x;
	var y;

	dt = 'complex64';
	ord = 'row-major';

	bsize = blockSize( dt );
	sh = [ 2, 1, 2, 1, bsize*2 ];
	st = [ bsize*8, -bsize*8, -bsize*4, -bsize*4, 2 ];
	o = strides2offset( sh, st );
	len = numel( sh );

	xbuf = ones( len*2, dt );
	mbuf = ones( len*2, 'bool' );
	ybuf = new Complex64Array( len );

	x = ndarray( 'complex64', xbuf, sh, st, o, ord );
	mask = ndarray( 'bool', mbuf, sh, st, o, ord );
	y = ndarray( 'complex64', ybuf, [ len ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = ones( len, dt );
	t.strictEqual( isSameComplex64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (column-major, singleton dimensions)', function test( t ) {
	var expected;
	var mask;
	var xbuf;
	var mbuf;
	var ybuf;
	var ord;
	var sh;
	var st;
	var o;
	var x;
	var y;

	ord = 'column-major';
	sh = [ 4, 1, 1, 1, 1 ];
	st = shape2strides( sh, ord );
	o = strides2offset( sh, st );

	xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	mbuf = new Uint8Array( [ 1, 0, 1, 0 ] );
	ybuf = new Float64Array( [ 0.0, 0.0 ] );

	x = ndarray( 'float64', xbuf, sh, st, o, ord );
	mask = ndarray( 'uint8', mbuf, sh, st, o, ord );
	y = ndarray( 'float64', ybuf, [ 2 ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = new Float64Array( [ 1.0, 3.0 ] );
	t.strictEqual( isSameFloat64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (column-major, singleton dimensions, accessors)', function test( t ) {
	var expected;
	var mask;
	var xbuf;
	var mbuf;
	var ybuf;
	var ord;
	var sh;
	var st;
	var o;
	var x;
	var y;

	ord = 'column-major';
	sh = [ 1, 1, 1, 1, 4 ];
	st = shape2strides( sh, ord );
	o = strides2offset( sh, st );

	xbuf = new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );
	mbuf = new BooleanArray( [ 1, 0, 1, 0 ] );
	ybuf = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0 ] );

	x = ndarray( 'complex64', xbuf, sh, st, o, ord );
	mask = ndarray( 'bool', mbuf, sh, st, o, ord );
	y = ndarray( 'complex64', ybuf, [ 2 ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = new Complex64Array( [ 1.0, 2.0, 5.0, 6.0 ] );
	t.strictEqual( isSameComplex64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (column-major, empty)', function test( t ) {
	var expected;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var ord;
	var sh;
	var st;
	var o;
	var x;
	var y;

	ord = 'column-major';
	sh = [ 0, 0, 0, 0, 0 ];
	st = shape2strides( sh, ord );
	o = strides2offset( sh, st );

	xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0 ] );
	mbuf = new Uint8Array( [ 1, 0, 1, 0 ] );
	ybuf = new Float64Array( [ 0.0, 0.0 ] );

	x = ndarray( 'float64', xbuf, sh, st, o, ord );
	mask = ndarray( 'uint8', mbuf, sh, st, o, ord );
	y = ndarray( 'float64', ybuf, [ 2 ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = new Float64Array( [ 0.0, 0.0 ] );
	t.strictEqual( isSameFloat64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (column-major, contiguous)', function test( t ) {
	var expected;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var ord;
	var sh;
	var st;
	var o;
	var x;
	var y;

	ord = 'column-major';
	sh = [ 2, 1, 2, 1, 2 ];
	st = shape2strides( sh, ord );
	o = strides2offset( sh, st );

	xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] );
	mbuf = new Uint8Array( [ 1, 0, 1, 0, 1, 0, 1, 0 ] );
	ybuf = new Float64Array( [ 0.0, 0.0, 0.0, 0.0 ] );

	x = ndarray( 'float64', xbuf, sh, st, o, ord );
	mask = ndarray( 'uint8', mbuf, sh, st, o, ord );
	y = ndarray( 'float64', ybuf, [ 4 ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = new Float64Array( [ 1.0, 3.0, 5.0, 7.0 ] );
	t.strictEqual( isSameFloat64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (column-major, contiguous, negative strides)', function test( t ) {
	var expected;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var ord;
	var sh;
	var st;
	var o;
	var x;
	var y;

	ord = 'column-major';
	sh = [ 2, 2, 1, 2, 2 ];
	st = [ -1, -2, -4, -4, -8 ];
	o = strides2offset( sh, st );

	xbuf = new Float64Array( oneTo( 16, 'float64' ) );
	mbuf = new Uint8Array( [ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 ] );
	ybuf = new Float64Array( 8 );

	x = ndarray( 'float64', xbuf, sh, st, o, ord );
	mask = ndarray( 'uint8', mbuf, sh, st, o, ord );
	y = ndarray( 'float64', ybuf, [ 8 ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = new Float64Array( [ 15.0, 13.0, 11.0, 9.0, 7.0, 5.0, 3.0, 1.0 ] );
	t.strictEqual( isSameFloat64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (column-major, non-contiguous, same sign strides)', function test( t ) {
	var expected;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var ord;
	var sh;
	var st;
	var o;
	var x;
	var y;

	ord = 'column-major';
	sh = [ 2, 1, 2, 1, 2 ];
	st = [ 1, 2, 2, 4, 8 ];
	o = strides2offset( sh, st );

	xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );
	mbuf = new Uint8Array( [ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 ] );
	ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );

	x = ndarray( 'float64', xbuf, sh, st, o, ord );
	mask = ndarray( 'uint8', mbuf, sh, st, o, ord );
	y = ndarray( 'float64', ybuf, [ 3 ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = new Float64Array( [ 1.0, 3.0, 9.0 ] );
	t.strictEqual( isSameFloat64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (column-major, non-contiguous, mixed sign strides)', function test( t ) {
	var expected;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var ord;
	var sh;
	var st;
	var o;
	var x;
	var y;

	ord = 'column-major';
	sh = [ 2, 1, 2, 1, 2 ];
	st = [ 1, 2, -2, -4, 8 ];
	o = strides2offset( sh, st );

	xbuf = new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0 ] );
	mbuf = new Uint8Array( [ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 ] );
	ybuf = new Float64Array( [ 0.0, 0.0, 0.0 ] );

	x = ndarray( 'float64', xbuf, sh, st, o, ord );
	mask = ndarray( 'uint8', mbuf, sh, st, o, ord );
	y = ndarray( 'float64', ybuf, [ 3 ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = new Float64Array( [ 3.0, 1.0, 11.0 ] );
	t.strictEqual( isSameFloat64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (column-major, non-contiguous, large arrays)', function test( t ) {
	var expected;
	var bsize;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var len;
	var ord;
	var sh;
	var st;
	var dt;
	var o;
	var x;
	var y;

	dt = 'float64';
	ord = 'column-major';

	bsize = blockSize( dt );
	sh = [ bsize*2, 1, 2, 1, 2 ];
	st = [ -2, bsize*4, -bsize*4, bsize*8, bsize*8 ];
	o = strides2offset( sh, st );
	len = numel( sh );

	xbuf = ones( len*2, dt );
	mbuf = ones( len*2, 'uint8' );
	ybuf = new Float64Array( len );

	x = ndarray( 'float64', xbuf, sh, st, o, ord );
	mask = ndarray( 'uint8', mbuf, sh, st, o, ord );
	y = ndarray( 'float64', ybuf, [ len ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = ones( len, dt );
	t.strictEqual( isSameFloat64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (column-major, non-contiguous, large arrays)', function test( t ) {
	var expected;
	var bsize;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var len;
	var ord;
	var sh;
	var st;
	var dt;
	var o;
	var x;
	var y;

	dt = 'float64';
	ord = 'column-major';

	bsize = blockSize( dt );
	sh = [ 2, bsize*2, 1, 1, 2 ];
	st = [ -2, 4, -bsize*8, bsize*8, bsize*8 ];
	o = strides2offset( sh, st );
	len = numel( sh );

	xbuf = ones( len*2, dt );
	mbuf = ones( len*2, 'uint8' );
	ybuf = new Float64Array( len );

	x = ndarray( 'float64', xbuf, sh, st, o, ord );
	mask = ndarray( 'uint8', mbuf, sh, st, o, ord );
	y = ndarray( 'float64', ybuf, [ len ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = ones( len, dt );
	t.strictEqual( isSameFloat64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (column-major, non-contiguous, large arrays)', function test( t ) {
	var expected;
	var bsize;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var len;
	var ord;
	var sh;
	var st;
	var dt;
	var o;
	var x;
	var y;

	dt = 'float64';
	ord = 'column-major';

	bsize = blockSize( dt );
	sh = [ 2, 1, bsize*2, 1, 2 ];
	st = [ -2, 4, -4, bsize*8, bsize*8 ];
	o = strides2offset( sh, st );
	len = numel( sh );

	xbuf = ones( len*2, dt );
	mbuf = ones( len*2, 'uint8' );
	ybuf = new Float64Array( len );

	x = ndarray( 'float64', xbuf, sh, st, o, ord );
	mask = ndarray( 'uint8', mbuf, sh, st, o, ord );
	y = ndarray( 'float64', ybuf, [ len ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = ones( len, dt );
	t.strictEqual( isSameFloat64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (column-major, non-contiguous, large arrays)', function test( t ) {
	var expected;
	var bsize;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var len;
	var ord;
	var sh;
	var st;
	var dt;
	var o;
	var x;
	var y;

	dt = 'float64';
	ord = 'column-major';

	bsize = blockSize( dt );
	sh = [ 2, 1, 1, bsize*2, 2 ];
	st = [ -2, 4, -4, 4, bsize*8 ];
	o = strides2offset( sh, st );
	len = numel( sh );

	xbuf = ones( len*2, dt );
	mbuf = ones( len*2, 'uint8' );
	ybuf = new Float64Array( len );

	x = ndarray( 'float64', xbuf, sh, st, o, ord );
	mask = ndarray( 'uint8', mbuf, sh, st, o, ord );
	y = ndarray( 'float64', ybuf, [ len ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = ones( len, dt );
	t.strictEqual( isSameFloat64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (column-major, non-contiguous, large arrays)', function test( t ) {
	var expected;
	var bsize;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var len;
	var ord;
	var sh;
	var st;
	var dt;
	var o;
	var x;
	var y;

	dt = 'float64';
	ord = 'column-major';

	bsize = blockSize( dt );
	sh = [ 2, 1, 2, 1, bsize*2 ];
	st = [ -2, 4, -4, 8, 8 ];
	o = strides2offset( sh, st );
	len = numel( sh );

	xbuf = ones( len*2, dt );
	mbuf = ones( len*2, 'uint8' );
	ybuf = new Float64Array( len );

	x = ndarray( 'float64', xbuf, sh, st, o, ord );
	mask = ndarray( 'uint8', mbuf, sh, st, o, ord );
	y = ndarray( 'float64', ybuf, [ len ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = ones( len, dt );
	t.strictEqual( isSameFloat64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (column-major, contiguous, accessors)', function test( t ) {
	var expected;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var ord;
	var sh;
	var st;
	var o;
	var x;
	var y;

	ord = 'column-major';
	sh = [ 2, 1, 2, 1, 2 ];
	st = shape2strides( sh, ord );
	o = strides2offset( sh, st );

	xbuf = new Complex64Array( oneTo( 16, 'float32' ) );
	mbuf = new BooleanArray( [ 1, 0, 1, 0, 1, 0, 1, 0 ] );
	ybuf = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );

	x = ndarray( 'complex64', xbuf, sh, st, o, ord );
	mask = ndarray( 'bool', mbuf, sh, st, o, ord );
	y = ndarray( 'complex64', ybuf, [ 4 ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = new Complex64Array( [ 1.0, 2.0, 5.0, 6.0, 9.0, 10.0, 13.0, 14.0 ] );
	t.strictEqual( isSameComplex64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (column-major, contiguous, negative strides, accessors)', function test( t ) {
	var expected;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var ord;
	var sh;
	var st;
	var o;
	var x;
	var y;

	ord = 'column-major';
	sh = [ 2, 1, 2, 1, 2 ];
	st = [ -1, -2, -2, -4, -4 ];
	o = strides2offset( sh, st );

	xbuf = new Complex64Array( oneTo( 16, 'float32' ) );
	mbuf = new Uint8Array( [ 1, 0, 1, 0, 1, 0, 1, 0 ] );
	ybuf = new Complex64Array( [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ] );

	x = ndarray( 'complex64', xbuf, sh, st, o, ord );
	mask = ndarray( 'bool', mbuf, sh, st, o, ord );
	y = ndarray( 'complex64', ybuf, [ 4 ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = new Complex64Array( [ 13.0, 14.0, 9.0, 10.0, 5.0, 6.0, 1.0, 2.0 ] );
	t.strictEqual( isSameComplex64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (column-major, non-contiguous, same sign strides, accessors)', function test( t ) {
	var expected;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var ord;
	var sh;
	var st;
	var o;
	var x;
	var y;

	ord = 'column-major';
	sh = [ 2, 1, 2, 1, 2 ];
	st = [ 1, 2, 2, 4, 8 ];
	o = strides2offset( sh, st );

	xbuf = new Complex64Array( oneTo( 24, 'float32' ) );
	mbuf = new BooleanArray( [ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 ] );
	ybuf = new Complex64Array( 4 );

	x = ndarray( 'complex64', xbuf, sh, st, o, ord );
	mask = ndarray( 'bool', mbuf, sh, st, o, ord );
	y = ndarray( 'complex64', ybuf, [ 4 ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = new Complex64Array( [ 1.0, 2.0, 5.0, 6.0, 17.0, 18.0, 21.0, 22.0 ] );
	t.strictEqual( isSameComplex64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (column-major, non-contiguous, mixed sign strides, accessors)', function test( t ) {
	var expected;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var ord;
	var sh;
	var st;
	var o;
	var x;
	var y;

	ord = 'column-major';
	sh = [ 2, 1, 2, 1, 2 ];
	st = [ 1, 2, -2, -4, -8 ];
	o = strides2offset( sh, st );

	xbuf = new Complex64Array( oneTo( 24, 'float32' ) );
	mbuf = new BooleanArray( [ 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0 ] );
	ybuf = new Complex64Array( 4 );

	x = ndarray( 'complex64', xbuf, sh, st, o, ord );
	mask = ndarray( 'bool', mbuf, sh, st, o, ord );
	y = ndarray( 'complex64', ybuf, [ 4 ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = new Complex64Array( [ 21.0, 22.0, 17.0, 18.0, 5.0, 6.0, 1.0, 2.0 ] );
	t.strictEqual( isSameComplex64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (column-major, non-contiguous, large arrays, accessors)', function test( t ) {
	var expected;
	var bsize;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var len;
	var ord;
	var sh;
	var st;
	var dt;
	var o;
	var x;
	var y;

	dt = 'complex64';
	ord = 'column-major';

	bsize = blockSize( dt );
	sh = [ bsize*2, 1, 2, 1, 2 ];
	st = [ -2, bsize*4, -bsize*4, bsize*8, bsize*8 ];
	o = strides2offset( sh, st );
	len = numel( sh );

	xbuf = ones( len*2, dt );
	mbuf = ones( len*2, 'bool' );
	ybuf = new Complex64Array( len );

	x = ndarray( 'complex64', xbuf, sh, st, o, ord );
	mask = ndarray( 'bool', mbuf, sh, st, o, ord );
	y = ndarray( 'complex64', ybuf, [ len ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = ones( len, dt );
	t.strictEqual( isSameComplex64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (column-major, non-contiguous, large arrays, accessors)', function test( t ) {
	var expected;
	var bsize;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var len;
	var ord;
	var sh;
	var st;
	var dt;
	var o;
	var x;
	var y;

	dt = 'complex64';
	ord = 'column-major';

	bsize = blockSize( dt );
	sh = [ 2, bsize*2, 2, 1, 1 ];
	st = [ -2, 4, -bsize*8, bsize*16, bsize*16 ];
	o = strides2offset( sh, st );
	len = numel( sh );

	xbuf = ones( len*2, dt );
	mbuf = ones( len*2, 'bool' );
	ybuf = new Complex64Array( len );

	x = ndarray( 'complex64', xbuf, sh, st, o, ord );
	mask = ndarray( 'bool', mbuf, sh, st, o, ord );
	y = ndarray( 'complex64', ybuf, [ len ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = ones( len, dt );
	t.strictEqual( isSameComplex64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (column-major, non-contiguous, large arrays, accessors)', function test( t ) {
	var expected;
	var bsize;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var len;
	var ord;
	var sh;
	var st;
	var dt;
	var o;
	var x;
	var y;

	dt = 'complex64';
	ord = 'column-major';

	bsize = blockSize( dt );
	sh = [ 2, 1, bsize*2, 1, 2 ];
	st = [ -2, 4, -4, bsize*8, bsize*8 ];
	o = strides2offset( sh, st );
	len = numel( sh );

	xbuf = ones( len*2, dt );
	mbuf = ones( len*2, 'bool' );
	ybuf = new Complex64Array( len );

	x = ndarray( 'complex64', xbuf, sh, st, o, ord );
	mask = ndarray( 'bool', mbuf, sh, st, o, ord );
	y = ndarray( 'complex64', ybuf, [ len ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = ones( len, dt );
	t.strictEqual( isSameComplex64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (column-major, non-contiguous, large arrays, accessors)', function test( t ) {
	var expected;
	var bsize;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var len;
	var ord;
	var sh;
	var st;
	var dt;
	var o;
	var x;
	var y;

	dt = 'complex64';
	ord = 'column-major';

	bsize = blockSize( dt );
	sh = [ 2, 1, 1, bsize*2, 2 ];
	st = [ -2, -4, -4, 4, bsize*8 ];
	o = strides2offset( sh, st );
	len = numel( sh );

	xbuf = ones( len*2, dt );
	mbuf = ones( len*2, 'bool' );
	ybuf = new Complex64Array( len );

	x = ndarray( 'complex64', xbuf, sh, st, o, ord );
	mask = ndarray( 'bool', mbuf, sh, st, o, ord );
	y = ndarray( 'complex64', ybuf, [ len ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = ones( len, dt );
	t.strictEqual( isSameComplex64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});

tape( 'the function applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray (column-major, non-contiguous, large arrays, accessors)', function test( t ) {
	var expected;
	var bsize;
	var xbuf;
	var mbuf;
	var ybuf;
	var mask;
	var len;
	var ord;
	var sh;
	var st;
	var dt;
	var o;
	var x;
	var y;

	dt = 'complex64';
	ord = 'column-major';

	bsize = blockSize( dt );
	sh = [ 2, 1, 2, 1, bsize*2 ];
	st = [ 2, 4, -4, 8, -8 ];
	o = strides2offset( sh, st );
	len = numel( sh );

	xbuf = ones( len*2, dt );
	mbuf = ones( len*2, 'bool' );
	ybuf = new Complex64Array( len );

	x = ndarray( 'complex64', xbuf, sh, st, o, ord );
	mask = ndarray( 'bool', mbuf, sh, st, o, ord );
	y = ndarray( 'complex64', ybuf, [ len ], [ 1 ], 0, ord );

	mskfilter( [ x, mask, y ] );

	expected = ones( len, dt );
	t.strictEqual( isSameComplex64Array( y.data, expected ), true, 'returns expected value' );

	t.end();
});
