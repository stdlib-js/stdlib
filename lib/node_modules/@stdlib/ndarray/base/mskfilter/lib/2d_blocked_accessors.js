/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var loopOrder = require( '@stdlib/ndarray/base/unary-loop-interchange-order' );
var blockSize = require( '@stdlib/ndarray/base/unary-tiling-block-size' );


// MAIN //

/**
* Applies a mask to a provided input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray.
*
* @private
* @param {Object} x - object containing input ndarray meta data
* @param {Object} mask - object containing mask ndarray meta data
* @param {Object} y - object containing output ndarray meta data
* @returns {void}
*
* @example
* var BooleanArray = require( '@stdlib/array/bool' );
* var Complex64Array = require( '@stdlib/array/complex64' );
* var Complex64 = require( '@stdlib/complex/float32/ctor' );
* var realf = require( '@stdlib/complex/float32/real' );
* var imagf = require( '@stdlib/complex/float32/imag' );
*
* // Define the shape of the array:
* var shape = [ 2, 2 ];
*
* // Define the array strides:
* var sx = [ 2, 1 ];
* var sm = [ 2, 1 ];
* var sy = [ 1 ];
*
* // Define the index offset:
* var ox = 0;
* var om = 0;
*
* // Define getters and setters:
* function getter( buf, idx ) {
*     return buf.get( idx );
* }
*
* function setter( buf, idx, value ) {
*     buf.set( value, idx );
* }
*
* var x = {
*     'dtype': 'complex64',
*     'data': new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] ),
*     'shape': shape,
*     'strides': sx,
*     'offset': ox,
*     'order': 'row-major',
*     'accessors': [ getter, setter ]
* };
*
* var mask = {
*     'dtype': 'bool',
*     'data': new BooleanArray( [ 1, 0, 1, 0 ] ),
*     'shape': shape,
*     'strides': sm,
*     'offset': om,
*     'order': 'row-major',
*     'accessors': [ getter, setter ]
* };
*
* var y = {
*     'dtype': 'complex64',
*     'data': new Complex64Array( 2 ),
*     'shape': [ 2 ],
*     'strides': sy,
*     'offset': 0,
*     'order': 'row-major',
*     'accessors': [ getter, setter ]
* };
*
* blockedmskfilter2d( x, mask, y );
*
* var v = y.data.get( 0 );
* // returns <Complex64>
*
* var re = realf( v );
* // returns 1.0
*
* var im = imagf( v );
* // returns 2.0
*/
function blockedmskfilter2d( x, mask, y ) {
	var bsize;
	var xbuf;
	var mbuf;
	var ybuf;
	var xget;
	var mget;
	var yset;
	var dx0;
	var dx1;
	var dm0;
	var dm1;
	var dy0;
	var ox1;
	var om1;
	var sh;
	var s0;
	var s1;
	var sx;
	var sm;
	var ox;
	var om;
	var ix;
	var im;
	var iy;
	var i0;
	var i1;
	var j0;
	var j1;
	var o;

	// Resolve the loop interchange order:
	o = loopOrder( x.shape, x.strides, mask.strides );
	sh = o.sh;
	sx = o.sx;
	sm = o.sy;

	// Determine the block size:
	bsize = blockSize( x.dtype, mask.dtype );

	// Cache the indices of the first indexed elements in the respective ndarrays...
	ox = x.offset;
	om = mask.offset;

	// Cache references to the input, mask, and output ndarray buffers...
	xbuf = x.data;
	mbuf = mask.data;
	ybuf = y.data;

	// Cache offset increments for the innermost loop...
	dx0 = sx[0];
	dm0 = sm[0];
	dy0 = y.strides[0];

	iy = y.offset;

	// Cache accessors:
	xget = x.accessors[ 0 ];
	mget = mask.accessors[ 0 ];
	yset = y.accessors[ 1 ];

	// Iterate over blocks...
	for ( j1 = sh[1]; j1 > 0; ) {
		if ( j1 < bsize ) {
			s1 = j1;
			j1 = 0;
		} else {
			s1 = bsize;
			j1 -= bsize;
		}
		ox1 = ox + ( j1*sx[1] );
		om1 = om + ( j1*sm[1] );
		for ( j0 = sh[0]; j0 > 0; ) {
			if ( j0 < bsize ) {
				s0 = j0;
				j0 = 0;
			} else {
				s0 = bsize;
				j0 -= bsize;
			}
			// Compute index offsets for the first input and mask ndarray elements in the current block...
			ix = ox1 + ( j0*sx[0] );
			im = om1 + ( j0*sm[0] );

			// Compute loop offset increments...
			dx1 = sx[1] - ( s0*sx[0] );
			dm1 = sm[1] - ( s0*sm[0] );

			// Iterate over the ndarray dimensions...
			for ( i1 = 0; i1 < s1; i1++ ) {
				for ( i0 = 0; i0 < s0; i0++ ) {
					if ( mget( mbuf, im ) ) {
						yset( ybuf, iy, xget( xbuf, ix ) );
						iy += dy0;
					}
					ix += dx0;
					im += dm0;
				}
				ix += dx1;
				im += dm1;
			}
		}
	}
}


// EXPORTS //

module.exports = blockedmskfilter2d;
