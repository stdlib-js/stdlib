/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable max-depth */

'use strict';

// MAIN //

/**
* Applies a mask to a provided input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray.
*
* @private
* @param {Object} x - object containing input ndarray meta data
* @param {Object} mask - object containing mask ndarray meta data
* @param {Object} y - object containing output ndarray meta data
* @returns {void}
*
* @example
* var BooleanArray = require( '@stdlib/array/bool' );
* var Complex64Array = require( '@stdlib/array/complex64' );
* var Complex64 = require( '@stdlib/complex/float32/ctor' );
* var realf = require( '@stdlib/complex/float32/real' );
* var imagf = require( '@stdlib/complex/float32/imag' );
*
* // Define the shape of the array:
* var shape = [ 1, 1, 1, 1, 1, 1, 1, 2, 2 ];
*
* // Define the array strides:
* var sx = [ 4, 4, 4, 4, 4, 4, 4, 2, 1 ];
* var sm = [ 4, 4, 4, 4, 4, 4, 4, 2, 1 ];
* var sy = [ 1 ];
*
* // Define the index offset:
* var ox = 0;
* var om = 0;
*
* // Define getters and setters:
* function getter( buf, idx ) {
*     return buf.get( idx );
* }
*
* function setter( buf, idx, value ) {
*     buf.set( value, idx );
* }
*
* var x = {
*     'dtype': 'complex64',
*     'data': new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] ),
*     'shape': shape,
*     'strides': sx,
*     'offset': ox,
*     'order': 'row-major',
*     'accessors': [ getter, setter ]
* };
*
* var mask = {
*     'dtype': 'bool',
*     'data': new BooleanArray( [ 1, 0, 1, 0 ] ),
*     'shape': shape,
*     'strides': sm,
*     'offset': om,
*     'order': 'row-major',
*     'accessors': [ getter, setter ]
* };
*
* var y = {
*     'dtype': 'complex64',
*     'data': new Complex64Array( 2 ),
*     'shape': [ 2 ],
*     'strides': sy,
*     'offset': 0,
*     'order': 'row-major',
*     'accessors': [ getter, setter ]
* };
*
* mskfilter9d( x, mask, y );
*
* var v = y.data.get( 0 );
* // returns <Complex64>
*
* var re = realf( v );
* // returns 1.0
*
* var im = imagf( v );
* // returns 2.0
*
* v = y.data.get( 1 );
* // returns <Complex64>
*
* re = realf( v );
* // returns 5.0
*
* im = imagf( v );
* // returns 6.0
*/
function mskfilter9d( x, mask, y ) { // eslint-disable-line max-statements
	var xbuf;
	var mbuf;
	var ybuf;
	var xget;
	var mget;
	var yset;
	var dx0;
	var dx1;
	var dx2;
	var dx3;
	var dx4;
	var dx5;
	var dx6;
	var dx7;
	var dx8;
	var dm0;
	var dm1;
	var dm2;
	var dm3;
	var dm4;
	var dm5;
	var dm6;
	var dm7;
	var dm8;
	var dy0;
	var S0;
	var S1;
	var S2;
	var S3;
	var S4;
	var S5;
	var S6;
	var S7;
	var S8;
	var sh;
	var sm;
	var sx;
	var ix;
	var im;
	var iy;
	var i0;
	var i1;
	var i2;
	var i3;
	var i4;
	var i5;
	var i6;
	var i7;
	var i8;

	// Extract loop variables: dimensions and loop offset (pointer) increments...
	sh = x.shape;
	sx = x.strides;
	sm = mask.strides;
	if ( x.order === 'row-major' ) {
		// For row-major ndarrays, the last dimensions have the fastest changing indices...
		S0 = sh[ 8 ];
		S1 = sh[ 7 ];
		S2 = sh[ 6 ];
		S3 = sh[ 5 ];
		S4 = sh[ 4 ];
		S5 = sh[ 3 ];
		S6 = sh[ 2 ];
		S7 = sh[ 1 ];
		S8 = sh[ 0 ];
		dx0 = sx[ 8 ];                // offset increment for innermost loop
		dx1 = sx[ 7 ] - ( S0*sx[8] );
		dx2 = sx[ 6 ] - ( S1*sx[7] );
		dx3 = sx[ 5 ] - ( S2*sx[6] );
		dx4 = sx[ 4 ] - ( S3*sx[5] );
		dx5 = sx[ 3 ] - ( S4*sx[4] );
		dx6 = sx[ 2 ] - ( S5*sx[3] );
		dx7 = sx[ 1 ] - ( S6*sx[2] );
		dx8 = sx[ 0 ] - ( S7*sx[1] ); // offset increment for outermost loop
		dm0 = sm[ 8 ];
		dm1 = sm[ 7 ] - ( S0*sm[8] );
		dm2 = sm[ 6 ] - ( S1*sm[7] );
		dm3 = sm[ 5 ] - ( S2*sm[6] );
		dm4 = sm[ 4 ] - ( S3*sm[5] );
		dm5 = sm[ 3 ] - ( S4*sm[4] );
		dm6 = sm[ 2 ] - ( S5*sm[3] );
		dm7 = sm[ 1 ] - ( S6*sm[2] );
		dm8 = sm[ 0 ] - ( S7*sm[1] );
	} else { // order === 'column-major'
		// For column-major ndarrays, the first dimensions have the fastest changing indices...
		S0 = sh[ 0 ];
		S1 = sh[ 1 ];
		S2 = sh[ 2 ];
		S3 = sh[ 3 ];
		S4 = sh[ 4 ];
		S5 = sh[ 5 ];
		S6 = sh[ 6 ];
		S7 = sh[ 7 ];
		S8 = sh[ 8 ];
		dx0 = sx[ 0 ];                // offset increment for innermost loop
		dx1 = sx[ 1 ] - ( S0*sx[0] );
		dx2 = sx[ 2 ] - ( S1*sx[1] );
		dx3 = sx[ 3 ] - ( S2*sx[2] );
		dx4 = sx[ 4 ] - ( S3*sx[3] );
		dx5 = sx[ 5 ] - ( S4*sx[4] );
		dx6 = sx[ 6 ] - ( S5*sx[5] );
		dx7 = sx[ 7 ] - ( S6*sx[6] );
		dx8 = sx[ 8 ] - ( S7*sx[7] ); // offset increment for outermost loop
		dm0 = sm[ 0 ];
		dm1 = sm[ 1 ] - ( S0*sm[0] );
		dm2 = sm[ 2 ] - ( S1*sm[1] );
		dm3 = sm[ 3 ] - ( S2*sm[2] );
		dm4 = sm[ 4 ] - ( S3*sm[3] );
		dm5 = sm[ 5 ] - ( S4*sm[4] );
		dm6 = sm[ 6 ] - ( S5*sm[5] );
		dm7 = sm[ 7 ] - ( S6*sm[6] );
		dm8 = sm[ 8 ] - ( S7*sm[7] );
	}
	dy0 = y.strides[ 0 ];

	// Set the pointers to the first indexed elements in the respective ndarrays...
	ix = x.offset;
	im = mask.offset;
	iy = y.offset;

	// Cache references to the input, mask, and output ndarray buffers...
	xbuf = x.data;
	mbuf = mask.data;
	ybuf = y.data;

	// Cache accessors:
	xget = x.accessors[ 0 ];
	mget = mask.accessors[ 0 ];
	yset = y.accessors[ 1 ];

	// Iterate over the ndarray dimensions...
	for ( i8 = 0; i8 < S8; i8++ ) {
		for ( i7 = 0; i7 < S7; i7++ ) {
			for ( i6 = 0; i6 < S6; i6++ ) {
				for ( i5 = 0; i5 < S5; i5++ ) {
					for ( i4 = 0; i4 < S4; i4++ ) {
						for ( i3 = 0; i3 < S3; i3++ ) {
							for ( i2 = 0; i2 < S2; i2++ ) {
								for ( i1 = 0; i1 < S1; i1++ ) {
									for ( i0 = 0; i0 < S0; i0++ ) {
										if ( mget( mbuf, im ) ) {
											yset( ybuf, iy, xget( xbuf, ix ) );
											iy += dy0;
										}
										ix += dx0;
										im += dm0;
									}
									ix += dx1;
									im += dm1;
								}
								ix += dx2;
								im += dm2;
							}
							ix += dx3;
							im += dm3;
						}
						ix += dx4;
						im += dm4;
					}
					ix += dx5;
					im += dm5;
				}
				ix += dx6;
				im += dm6;
			}
			ix += dx7;
			im += dm7;
		}
		ix += dx8;
		im += dm8;
	}
}


// EXPORTS //

module.exports = mskfilter9d;
