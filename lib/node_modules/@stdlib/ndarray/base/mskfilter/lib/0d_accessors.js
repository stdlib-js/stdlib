/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable max-len */

'use strict';

// MAIN //

/**
* Applies a mask to a provided input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray.
*
* @private
* @param {Object} x - object containing input ndarray meta data
* @param {Object} mask - object containing mask ndarray meta data
* @param {Object} y - object containing output ndarray meta data
* @returns {void}
*
* @example
* var BooleanArray = require( '@stdlib/array/bool' );
* var Complex64Array = require( '@stdlib/array/complex64' );
* var Complex64 = require( '@stdlib/complex/float32/ctor' );
* var realf = require( '@stdlib/complex/float32/real' );
* var imagf = require( '@stdlib/complex/float32/imag' );
*
* // Define the shape of the array:
* var shape = [];
*
* // Define the array strides:
* var sx = [ 0 ];
* var sm = [ 0 ];
* var sy = [ 0 ];
*
* // Define the index offset:
* var ox = 0;
* var om = 0;
*
* // Define getters and setters:
* function getter( buf, idx ) {
*     return buf.get( idx );
* }
*
* function setter( buf, idx, value ) {
*     buf.set( value, idx );
* }
*
* var x = {
*     'dtype': 'complex64',
*     'data': new Complex64Array( [ 1.0, 2.0 ] ),
*     'shape': shape,
*     'strides': sx,
*     'offset': ox,
*     'order': 'row-major',
*     'accessors': [ getter, setter ]
* };
*
* var mask = {
*     'dtype': 'bool',
*     'data': new BooleanArray( [ 1 ] ),
*     'shape': shape,
*     'strides': sm,
*     'offset': om,
*     'order': 'row-major',
*     'accessors': [ getter, setter ]
* };
*
* var y = {
*     'dtype': 'complex64',
*     'data': new Complex64Array( 1 ),
*     'shape': [ 1 ],
*     'strides': sy,
*     'offset': 0,
*     'order': 'row-major',
*     'accessors': [ getter, setter ]
* };
*
* mskfilter0d( x, mask, y );
*
* var v = y.data.get( 0 );
* // returns <Complex64>
*
* var re = realf( v );
* // returns 1.0
*
* var im = imagf( v );
* // returns 2.0
*/
function mskfilter0d( x, mask, y ) {
	if ( mask.accessors[ 0 ]( mask.data, mask.offset ) ) {
		y.accessors[ 1 ]( y.data, y.offset, x.accessors[ 0 ]( x.data, x.offset ) );
	}
}


// EXPORTS //

module.exports = mskfilter0d;
