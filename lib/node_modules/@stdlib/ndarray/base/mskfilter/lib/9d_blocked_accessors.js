/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable max-depth, max-len */

'use strict';

// MODULES //

var loopOrder = require( '@stdlib/ndarray/base/unary-loop-interchange-order' );
var blockSize = require( '@stdlib/ndarray/base/unary-tiling-block-size' );


// MAIN //

/**
* Applies a mask to a provided input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray.
*
* @private
* @param {Object} x - object containing input ndarray meta data
* @param {Object} mask - object containing mask ndarray meta data
* @param {Object} y - object containing output ndarray meta data
* @returns {void}
*
* @example
* var BooleanArray = require( '@stdlib/array/bool' );
* var Complex64Array = require( '@stdlib/array/complex64' );
* var Complex64 = require( '@stdlib/complex/float32/ctor' );
* var realf = require( '@stdlib/complex/float32/real' );
* var imagf = require( '@stdlib/complex/float32/imag' );
*
* // Define the shape of the array:
* var shape = [ 1, 1, 1, 1, 1, 1, 1, 2, 2 ];
*
* // Define the array strides:
* var sx = [ 4, 4, 4, 4, 4, 4, 4, 2, 1 ];
* var sm = [ 4, 4, 4, 4, 4, 4, 4, 2, 1 ];
* var sy = [ 1 ];
*
* // Define the index offset:
* var ox = 0;
* var om = 0;
*
* // Define getters and setters:
* function getter( buf, idx ) {
*     return buf.get( idx );
* }
*
* function setter( buf, idx, value ) {
*     buf.set( value, idx );
* }
*
* var x = {
*     'dtype': 'complex64',
*     'data': new Complex64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0 ] ),
*     'shape': shape,
*     'strides': sx,
*     'offset': ox,
*     'order': 'row-major',
*     'accessors': [ getter, setter ]
* };
*
* var mask = {
*     'dtype': 'bool',
*     'data': new BooleanArray( [ 1, 0, 1, 0 ] ),
*     'shape': shape,
*     'strides': sm,
*     'offset': om,
*     'order': 'row-major',
*     'accessors': [ getter, setter ]
* };
*
* var y = {
*     'dtype': 'complex64',
*     'data': new Complex64Array( 2 ),
*     'shape': [ 2 ],
*     'strides': sy,
*     'offset': 0,
*     'order': 'row-major',
*     'accessors': [ getter, setter ]
* };
*
* blockedmskfilter9d( x, mask, y );
*
* var v = y.data.get( 0 );
* // returns <Complex64>
*
* var re = realf( v );
* // returns 1.0
*
* var im = imagf( v );
* // returns 2.0
*
* v = y.data.get( 1 );
* // returns <Complex64>
*
* re = realf( v );
* // returns 5.0
*
* im = imagf( v );
* // returns 6.0
*/
function blockedmskfilter9d( x, mask, y ) { // eslint-disable-line max-statements, max-lines-per-function
	var bsize;
	var xbuf;
	var mbuf;
	var ybuf;
	var xget;
	var mget;
	var yset;
	var dx0;
	var dx1;
	var dx2;
	var dx3;
	var dx4;
	var dx5;
	var dx6;
	var dx7;
	var dx8;
	var dm0;
	var dm1;
	var dm2;
	var dm3;
	var dm4;
	var dm5;
	var dm6;
	var dm7;
	var dm8;
	var dy0;
	var ox1;
	var ox2;
	var ox3;
	var ox4;
	var ox5;
	var ox6;
	var ox7;
	var ox8;
	var om1;
	var om2;
	var om3;
	var om4;
	var om5;
	var om6;
	var om7;
	var om8;
	var sh;
	var s0;
	var s1;
	var s2;
	var s3;
	var s4;
	var s5;
	var s6;
	var s7;
	var s8;
	var sx;
	var sm;
	var ox;
	var om;
	var ix;
	var im;
	var iy;
	var i0;
	var i1;
	var i2;
	var i3;
	var i4;
	var i5;
	var i6;
	var i7;
	var i8;
	var j0;
	var j1;
	var j2;
	var j3;
	var j4;
	var j5;
	var j6;
	var j7;
	var j8;
	var o;

	// Resolve the loop interchange order:
	o = loopOrder( x.shape, x.strides, mask.strides );
	sh = o.sh;
	sx = o.sx;
	sm = o.sy;

	// Determine the block size:
	bsize = blockSize( x.dtype, mask.dtype );

	// Cache the indices of the first indexed elements in the respective ndarrays...
	ox = x.offset;
	om = mask.offset;

	// Cache references to the input, mask, and output ndarray buffers...
	xbuf = x.data;
	mbuf = mask.data;
	ybuf = y.data;

	// Cache offset increments for the innermost loop...
	dx0 = sx[0];
	dm0 = sm[0];
	dy0 = y.strides[0];

	iy = y.offset;

	// Cache accessors:
	xget = x.accessors[ 0 ];
	mget = mask.accessors[ 0 ];
	yset = y.accessors[ 1 ];

	// Iterate over blocks...
	for ( j8 = sh[8]; j8 > 0; ) {
		if ( j8 < bsize ) {
			s8 = j8;
			j8 = 0;
		} else {
			s8 = bsize;
			j8 -= bsize;
		}
		ox8 = ox + ( j8*sx[8] );
		om8 = om + ( j8*sm[8] );
		for ( j7 = sh[7]; j7 > 0; ) {
			if ( j7 < bsize ) {
				s7 = j7;
				j7 = 0;
			} else {
				s7 = bsize;
				j7 -= bsize;
			}
			dx8 = sx[8] - ( s7*sx[7] );
			dm8 = sm[8] - ( s7*sm[7] );
			ox7 = ox8 + ( j7*sx[7] );
			om7 = om8 + ( j7*sm[7] );
			for ( j6 = sh[6]; j6 > 0; ) {
				if ( j6 < bsize ) {
					s6 = j6;
					j6 = 0;
				} else {
					s6 = bsize;
					j6 -= bsize;
				}
				dx7 = sx[7] - ( s6*sx[6] );
				dm7 = sm[7] - ( s6*sm[6] );
				ox6 = ox7 + ( j6*sx[6] );
				om6 = om7 + ( j6*sm[6] );
				for ( j5 = sh[5]; j5 > 0; ) {
					if ( j5 < bsize ) {
						s5 = j5;
						j5 = 0;
					} else {
						s5 = bsize;
						j5 -= bsize;
					}
					dx6 = sx[6] - ( s5*sx[5] );
					dm6 = sm[6] - ( s5*sm[5] );
					ox5 = ox6 + ( j5*sx[5] );
					om5 = om6 + ( j5*sm[5] );
					for ( j4 = sh[4]; j4 > 0; ) {
						if ( j4 < bsize ) {
							s4 = j4;
							j4 = 0;
						} else {
							s4 = bsize;
							j4 -= bsize;
						}
						dx5 = sx[5] - ( s4*sx[4] );
						dm5 = sm[5] - ( s4*sm[4] );
						ox4 = ox5 + ( j4*sx[4] );
						om4 = om5 + ( j4*sm[4] );
						for ( j3 = sh[3]; j3 > 0; ) {
							if ( j3 < bsize ) {
								s3 = j3;
								j3 = 0;
							} else {
								s3 = bsize;
								j3 -= bsize;
							}
							dx4 = sx[4] - ( s3*sx[3] );
							dm4 = sm[4] - ( s3*sm[3] );
							ox3 = ox4 + ( j3*sx[3] );
							om3 = om4 + ( j3*sm[3] );
							for ( j2 = sh[2]; j2 > 0; ) {
								if ( j2 < bsize ) {
									s2 = j2;
									j2 = 0;
								} else {
									s2 = bsize;
									j2 -= bsize;
								}
								dx3 = sx[3] - ( s2*sx[2] );
								dm3 = sm[3] - ( s2*sm[2] );
								ox2 = ox3 + ( j2*sx[2] );
								om2 = om3 + ( j2*sm[2] );
								for ( j1 = sh[1]; j1 > 0; ) {
									if ( j1 < bsize ) {
										s1 = j1;
										j1 = 0;
									} else {
										s1 = bsize;
										j1 -= bsize;
									}
									dx2 = sx[2] - ( s1*sx[1] );
									dm2 = sm[2] - ( s1*sm[1] );
									ox1 = ox2 + ( j1*sx[1] );
									om1 = om2 + ( j1*sm[1] );
									for ( j0 = sh[0]; j0 > 0; ) {
										if ( j0 < bsize ) {
											s0 = j0;
											j0 = 0;
										} else {
											s0 = bsize;
											j0 -= bsize;
										}
										// Compute index offsets for the first input and mask ndarray elements in the current block...
										ix = ox1 + ( j0*sx[0] );
										im = om1 + ( j0*sm[0] );

										// Compute loop offset increments...
										dx1 = sx[1] - ( s0*sx[0] );
										dm1 = sm[1] - ( s0*sm[0] );

										// Iterate over the ndarray dimensions...
										for ( i8 = 0; i8 < s8; i8++ ) {
											for ( i7 = 0; i7 < s7; i7++ ) {
												for ( i6 = 0; i6 < s6; i6++ ) {
													for ( i5 = 0; i5 < s5; i5++ ) {
														for ( i4 = 0; i4 < s4; i4++ ) {
															for ( i3 = 0; i3 < s3; i3++ ) {
																for ( i2 = 0; i2 < s2; i2++ ) {
																	for ( i1 = 0; i1 < s1; i1++ ) {
																		for ( i0 = 0; i0 < s0; i0++ ) {
																			if ( mget( mbuf, im ) ) {
																				yset( ybuf, iy, xget( xbuf, ix ) );
																				iy += dy0;
																			}
																			ix += dx0;
																			im += dm0;
																		}
																		ix += dx1;
																		im += dm1;
																	}
																	ix += dx2;
																	im += dm2;
																}
																ix += dx3;
																im += dm3;
															}
															ix += dx4;
															im += dm4;
														}
														ix += dx5;
														im += dm5;
													}
													ix += dx6;
													im += dm6;
												}
												ix += dx7;
												im += dm7;
											}
											ix += dx8;
											im += dm8;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}


// EXPORTS //

module.exports = blockedmskfilter9d;
