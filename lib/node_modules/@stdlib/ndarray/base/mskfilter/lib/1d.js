/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MAIN //

/**
* Applies a mask to a provided input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray.
*
* @private
* @param {Object} x - object containing input ndarray meta data
* @param {Object} mask - object containing mask ndarray meta data
* @param {Object} y - object containing output ndarray meta data
* @returns {void}
*
* @example
* var Float64Array = require( '@stdlib/array/float64' );
* var Uint8Array = require( '@stdlib/array/uint8' );
*
* // Define the shape of the array:
* var shape = [ 5 ];
*
* // Define the array strides:
* var sx = [ 1 ];
* var sm = [ 1 ];
* var sy = [ 1 ];
*
* // Define the index offset:
* var ox = 1;
* var om = 0;
*
* var x = {
*     'dtype': 'float64',
*     'data': new Float64Array( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] ),
*     'shape': shape,
*     'strides': sx,
*     'offset': ox,
*     'order': 'row-major'
* };
*
* var mask = {
*     'dtype': 'uint8',
*     'data': new Uint8Array( [ 1, 0, 1, 0, 1 ] ),
*     'shape': shape,
*     'strides': sm,
*     'offset': om,
*     'order': 'row-major'
* };
*
* var y = {
*     'dtype': 'float64',
*     'data': new Float64Array( 3 ),
*     'shape': [ 3 ],
*     'strides': sy,
*     'offset': 0,
*     'order': 'row-major'
* };
*
* mskfilter1d( x, mask, y );
*
* console.log( y.data );
* // => <Float64Array>[ 2.0, 4.0, 6.0 ]
*/
function mskfilter1d( x, mask, y ) {
	var xbuf;
	var mbuf;
	var ybuf;
	var dx0;
	var dm0;
	var dy0;
	var S0;
	var ix;
	var im;
	var iy;
	var i0;

	// Extract loop variables: dimensions and loop offset (pointer) increments...
	S0 = x.shape[ 0 ];
	dx0 = x.strides[ 0 ];
	dm0 = mask.strides[ 0 ];
	dy0 = y.strides[ 0 ];

	// Set the pointers to the first indexed elements in the respective ndarrays...
	ix = x.offset;
	im = mask.offset;
	iy = y.offset;

	// Cache references to the input, mask, and output ndarray buffers...
	xbuf = x.data;
	mbuf = mask.data;
	ybuf = y.data;

	// Iterate over the ndarray dimensions...
	for ( i0 = 0; i0 < S0; i0++ ) {
		if ( mbuf[ im ] ) {
			ybuf[ iy ] = xbuf[ ix ];
			iy += dy0;
		}
		ix += dx0;
		im += dm0;
	}
}


// EXPORTS //

module.exports = mskfilter1d;
