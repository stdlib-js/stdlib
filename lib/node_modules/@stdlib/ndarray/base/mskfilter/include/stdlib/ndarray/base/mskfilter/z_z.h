/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/*
* The following is auto-generated. Do not manually edit. See scripts/loops.js.
*/

#ifndef STDLIB_NDARRAY_BASE_MSKFILTER_Z_Z_H
#define STDLIB_NDARRAY_BASE_MSKFILTER_Z_Z_H

#include "stdlib/ndarray/ctor.h"
#include <stdint.h>

/*
* If C++, prevent name mangling so that the compiler emits a binary file having undecorated names, thus mirroring the behavior of a C compiler.
*/
#ifdef __cplusplus
extern "C" {
#endif

/**
* Applies a mask to a provided input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray.
*/
int8_t stdlib_ndarray_z_z( struct ndarray *arrays[] );

/**
* Applies a mask to a provided 0-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray.
*/
int8_t stdlib_ndarray_z_z_0d( struct ndarray *arrays[] );

/**
* Applies a mask to a provided 1-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray.
*/
int8_t stdlib_ndarray_z_z_1d( struct ndarray *arrays[] );

/**
* Applies a mask to a provided 2-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray.
*/
int8_t stdlib_ndarray_z_z_2d( struct ndarray *arrays[] );

/**
* Applies a mask to a provided 2-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray.
*/
int8_t stdlib_ndarray_z_z_2d_blocked( struct ndarray *arrays[] );

/**
* Applies a mask to a provided 3-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray.
*/
int8_t stdlib_ndarray_z_z_3d( struct ndarray *arrays[] );

/**
* Applies a mask to a provided 3-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray.
*/
int8_t stdlib_ndarray_z_z_3d_blocked( struct ndarray *arrays[] );

/**
* Applies a mask to a provided 4-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray.
*/
int8_t stdlib_ndarray_z_z_4d( struct ndarray *arrays[] );

/**
* Applies a mask to a provided 4-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray.
*/
int8_t stdlib_ndarray_z_z_4d_blocked( struct ndarray *arrays[] );

/**
* Applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray.
*/
int8_t stdlib_ndarray_z_z_5d( struct ndarray *arrays[] );

/**
* Applies a mask to a provided 5-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray.
*/
int8_t stdlib_ndarray_z_z_5d_blocked( struct ndarray *arrays[] );

/**
* Applies a mask to a provided 6-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray.
*/
int8_t stdlib_ndarray_z_z_6d( struct ndarray *arrays[] );

/**
* Applies a mask to a provided 6-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray.
*/
int8_t stdlib_ndarray_z_z_6d_blocked( struct ndarray *arrays[] );

/**
* Applies a mask to a provided 7-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray.
*/
int8_t stdlib_ndarray_z_z_7d( struct ndarray *arrays[] );

/**
* Applies a mask to a provided 7-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray.
*/
int8_t stdlib_ndarray_z_z_7d_blocked( struct ndarray *arrays[] );

/**
* Applies a mask to a provided 8-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray.
*/
int8_t stdlib_ndarray_z_z_8d( struct ndarray *arrays[] );

/**
* Applies a mask to a provided 8-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray.
*/
int8_t stdlib_ndarray_z_z_8d_blocked( struct ndarray *arrays[] );

/**
* Applies a mask to a provided 9-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray.
*/
int8_t stdlib_ndarray_z_z_9d( struct ndarray *arrays[] );

/**
* Applies a mask to a provided 9-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray.
*/
int8_t stdlib_ndarray_z_z_9d_blocked( struct ndarray *arrays[] );

/**
* Applies a mask to a provided 10-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray.
*/
int8_t stdlib_ndarray_z_z_10d( struct ndarray *arrays[] );

/**
* Applies a mask to a provided 10-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray.
*/
int8_t stdlib_ndarray_z_z_10d_blocked( struct ndarray *arrays[] );

/**
* Applies a mask to a provided n-dimensional input ndarray and assigns unmasked values to elements in a provided one-dimensional output ndarray.
*/
int8_t stdlib_ndarray_z_z_nd( struct ndarray *arrays[] );

#ifdef __cplusplus
}
#endif

#endif // !STDLIB_NDARRAY_BASE_MSKFILTER_Z_Z_H
