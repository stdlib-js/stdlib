
{{alias}}( arrays )
    Applies a mask to a provided input ndarray and assigns unmasked values to
    elements in a provided one-dimensional output ndarray.

    A provided "ndarray" should be an `object` with the following properties:

    - dtype: data type.
    - data: data buffer.
    - shape: dimensions.
    - strides: stride lengths.
    - offset: index offset.
    - order: specifies whether an ndarray is row-major (C-style) or column-major
    (Fortran-style).

    Parameters
    ----------
    arrays: ArrayLikeObject<ndarray>
        Array-like object containing an input, mask, and output ndarray.

    Examples
    --------
    // Define ndarray data and meta data...
    > var xbuf = new {{alias:@stdlib/array/float64}}( [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0 ] );
    > var mbuf = new {{alias:@stdlib/array/uint8}}( [ 1, 0, 1, 0, 1, 0 ] );
    > var ybuf = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0 ] );
    > var shape = [ 3, 1, 2 ];
    > var sx = [ 2, 2, 1 ];
    > var sm = [ 2, 2, 1 ];
    > var sy = [ 1 ];
    > var ox = 1;
    > var om = 0;
    > var order = 'row-major';

    // Using an ndarray...
    > var x = {{alias:@stdlib/ndarray/ctor}}( 'float64', xbuf, shape, sx, ox, order );
    > var mask = {{alias:@stdlib/ndarray/ctor}}( 'uint8', mbuf, shape, sm, om, order );
    > var y = {{alias:@stdlib/ndarray/ctor}}( 'float64', ybuf, [ 3 ], sy, 0, order );
    > {{alias}}( [ x, mask, y ] );
    > y.data
    <Float64Array>[ 2.0, 4.0, 6.0 ]

    See Also
    --------
