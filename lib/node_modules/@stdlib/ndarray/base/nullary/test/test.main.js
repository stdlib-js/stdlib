/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var constantFunction = require( '@stdlib/utils/constant-function');
var Float64Array = require( '@stdlib/array/float64' );
var Float32Array = require( '@stdlib/array/float32' );
var Complex64Array = require( '@stdlib/array/complex64' );
var Complex64 = require( '@stdlib/complex/float32/ctor' );
var nullary = require( './../lib/main.js' );
var nullary0d = require( './../lib/0d.js' );
var nullary1d = require( './../lib/1d.js' );
var nullary2d = require( './../lib/2d.js' );
var accessornullary0d = require( './../lib/0d_accessors.js' );
var accessornullary1d = require( './../lib/1d_accessors.js' );
var accessornullary2d = require( './../lib/2d_accessors.js' );
var blockednullary2d = require( './../lib/2d_blocked.js' );
var blockedaccessornullary2d = require( './../lib/2d_blocked_accessors.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof nullary, 'function', 'main export is a function');
	t.end();
});

tape( 'the function applies a nullary callback to each indexed element of a 0-dimensional ndarray', function test( t ) {
	var expected;
	var xbuf;
	var x;

	xbuf = new Float64Array( 1 );

	x = {
		'dtype': 'float64',
		'data': xbuf,
		'shape': [],
		'strides': [ 0 ],
		'offset': 0,
		'order': 'row-major'
	};

	nullary0d( x, constantFunction( 10.0 ) );

	expected = new Float64Array( [ 10.0 ] );

	t.deepEqual( xbuf, expected, 'deep equal' );
	t.end();
});

tape( 'the function applies a nullary callback to each indexed element of a 0-dimensional ndarray (accessors)', function test( t ) {
	var complexbuf;
	var expected;
	var xbuf;
	var x;

	complexbuf = new Float32Array( [ 1.0, 1.0 ] );

	xbuf = new Complex64Array( complexbuf.buffer );

	function getter( buf, idx ) {
		return buf.get( idx );
	}

	function setter( buf, idx, value ) {
		buf.set( value, idx );
	}

	x = {
		'dtype': 'complex64',
		'data': xbuf,
		'shape': [],
		'strides': [ 0 ],
		'offset': 0,
		'order': 'row-major',
		'accessors': [ getter, setter ]
	};

	accessornullary0d( x, constantFunction( new Complex64( 10.0, 10.0 ) ) );

	expected = new Float32Array( [ 10.0, 10.0 ] );

	t.deepEqual( complexbuf, expected, 'deep equal' );
	t.end();
});

tape( 'the function applies a nullary callback to each indexed element of a 1-dimensional ndarray', function test( t ) {
	var expected;
	var xbuf;
	var x;

	xbuf = new Float64Array( 8 );

	x = {
		'dtype': 'float64',
		'data': xbuf,
		'shape': [ 4 ],
		'strides': [ 2 ],
		'offset': 1,
		'order': 'row-major'
	};

	nullary1d( x, constantFunction( 10.0 ) );

	expected = new Float64Array( [ 0.0, 10.0, 0.0, 10.0, 0.0, 10.0, 0.0, 10.0 ] );

	t.deepEqual( xbuf, expected, 'deep equal' );
	t.end();
});

tape( 'the function applies a nullary callback to each indexed element of a 1-dimensional ndarray (accessors)', function test( t ) {
	var complexbuf;
	var expected;
	var xbuf;
	var x;

	complexbuf = new Float32Array( [ -1.0, 2.0, -3.0, 4.0, -5.0, 6.0, -7.0, 8.0 ] );

	xbuf = new Complex64Array( complexbuf.buffer );

	function getter( buf, idx ) {
		return buf.get( idx );
	}

	function setter( buf, idx, value ) {
		buf.set( value, idx );
	}

	x = {
		'dtype': 'complex64',
		'data': xbuf,
		'shape': [ 2 ],
		'strides': [ 1 ],
		'offset': 0,
		'order': 'row-major',
		'accessors': [ getter, setter]
	};

	accessornullary1d( x, constantFunction( new Complex64( 1.0, 1.0 ) ) );

	expected = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, -5.0, 6.0, -7.0, 8.0 ] );

	t.deepEqual( complexbuf, expected, 'deep equal' );
	t.end();
});

tape( 'the function applies a nullary callback to each indexed element of a 2-dimensional (row-major) ndarray', function test( t ) {
	var expected;
	var xbuf;
	var x;

	xbuf = new Float64Array( 8 );

	x = {
		'dtype': 'float64',
		'data': xbuf,
		'shape': [ 2, 2 ],
		'strides': [ 4, 1 ],
		'offset': 1,
		'order': 'row-major'
	};

	nullary2d( x, constantFunction( 10.0 ) );

	expected = new Float64Array( [ 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0 ] );

	t.deepEqual( xbuf, expected, 'deep equal' );
	t.end();
});

tape( 'the function applies a nullary callback to each indexed element of a 2-dimensional (column-major) ndarray', function test( t ) {
	var expected;
	var xbuf;
	var x;

	xbuf = new Float64Array( 8 );

	x = {
		'dtype': 'float64',
		'data': xbuf,
		'shape': [ 2, 2 ],
		'strides': [ 1, 4 ],
		'offset': 1,
		'order': 'column-major'
	};

	nullary2d( x, constantFunction( 10.0 ) );

	expected = new Float64Array( [ 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0 ] );

	t.deepEqual( xbuf, expected, 'deep equal' );
	t.end();
});

tape( 'the function applies a nullary callback to each indexed element of a 2-dimensional (row-major) ndarray (accessors)', function test( t ) {
	var complexbuf;
	var expected;
	var xbuf;
	var x;

	complexbuf = new Float32Array( [ -1.0, 2.0, -3.0, 4.0, -5.0, 6.0, -7.0, 8.0, -9.0, 10.0, -11.0, 12.0 ] );

	xbuf = new Complex64Array( complexbuf.buffer );

	function getter( buf, idx ) {
		return buf.get( idx );
	}

	function setter( buf, idx, value ) {
		buf.set( value, idx );
	}

	x = {
		'dtype': 'complex64',
		'data': xbuf,
		'shape': [ 2, 2 ],
		'strides': [ 4, 1 ],
		'offset': 0,
		'order': 'row-major',
		'accessors': [ getter, setter ]
	};

	accessornullary2d( x, constantFunction( new Complex64( 1.0, 1.0 ) ) );

	expected = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, -5.0, 6.0, -7.0, 8.0, 1.0, 1.0, 1.0, 1.0 ] );

	t.deepEqual( complexbuf, expected, 'deep equal' );
	t.end();
});

tape( 'the function applies a nullary callback to each indexed element of a 2-dimensional (column-major) ndarray (accessors)', function test( t ) {
	var complexbuf;
	var expected;
	var xbuf;
	var x;

	complexbuf = new Float32Array( [ -1.0, 2.0, -3.0, 4.0, -5.0, 6.0, -7.0, 8.0, -9.0, 10.0, -11.0, 12.0 ] );

	xbuf = new Complex64Array( complexbuf.buffer );

	function getter( buf, idx ) {
		return buf.get( idx );
	}

	function setter( buf, idx, value ) {
		buf.set( value, idx );
	}

	x = {
		'dtype': 'complex64',
		'data': xbuf,
		'shape': [ 2, 2 ],
		'strides': [ 1, 4 ],
		'offset': 0,
		'order': 'column-major',
		'accessors': [ getter, setter ]
	};

	accessornullary2d( x, constantFunction( new Complex64( 1.0, 1.0 ) ) );

	expected = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, -5.0, 6.0, -7.0, 8.0, 1.0, 1.0, 1.0, 1.0 ] );

	t.deepEqual( complexbuf, expected, 'deep equal' );
	t.end();
});

tape( 'the function applies a nullary callback to each indexed element of a 2-dimensional ndarray (blocked)', function test( t ) {
	var expected;
	var xbuf;
	var x;

	xbuf = new Float64Array( 8 );

	x = {
		'dtype': 'float64',
		'data': xbuf,
		'shape': [ 2, 2 ],
		'strides': [ 4, 1 ],
		'offset': 1,
		'order': 'row-major'
	};

	blockednullary2d( x, constantFunction( 10.0 ) );

	expected = new Float64Array( [ 0.0, 10.0, 10.0, 0.0, 0.0, 10.0, 10.0, 0.0 ] );

	t.deepEqual( xbuf, expected, 'deep equal' );
	t.end();
});

tape( 'the function applies a nullary callback to each indexed element of a 2-dimensional ndarray (blocked accessors)', function test( t ) {
	var complexbuf;
	var expected;
	var xbuf;
	var x;

	complexbuf = new Float32Array( [ -1.0, 2.0, -3.0, 4.0, -5.0, 6.0, -7.0, 8.0, -9.0, 10.0, -11.0, 12.0 ] );

	xbuf = new Complex64Array( complexbuf.buffer );

	function getter( buf, idx ) {
		return buf.get( idx );
	}

	function setter( buf, idx, value ) {
		buf.set( value, idx );
	}

	x = {
		'dtype': 'complex64',
		'data': xbuf,
		'shape': [ 2, 2 ],
		'strides': [ 2, 1 ],
		'offset': 0,
		'order': 'row-major',
		'accessors': [ getter, setter ]
	};

	blockedaccessornullary2d( x, constantFunction( new Complex64( 1.0, 1.0 ) ) );

	expected = new Float32Array( [ 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -9.0, 10.0, -11.0, 12.0 ] );

	t.deepEqual( complexbuf, expected, 'deep equal' );
	t.end();
});
