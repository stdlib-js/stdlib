
{{alias}}( arrays, fcn, clbk[, thisArg] )
    Applies a unary function to element retrieved from an input ndarray
    according to a callback function and assigns results to elements in an
    output ndarray.

    Each provided "ndarray" should be an `object` with the following properties:

    - dtype: data type.
    - data: data buffer.
    - shape: dimensions.
    - strides: stride lengths.
    - offset: index offset.
    - order: specifies whether an ndarray is row-major (C-style) or column-major
    (Fortran-style).

    The callback function is provided four arguments:

    - value: array element.
    - idx: iteration index.
    - indices: data buffer index.
    - arrays: input and output ndarrays.

    If the callback function does not return any value (or equivalently,
    explicitly returns `undefined`), the value is ignored.

    Parameters
    ----------
    arrays: ArrayLikeObject<ndarray>
        Array-like object containing one input ndarray and one output ndarray.

    fcn: Function
        Unary function to apply to callback return values.

    clbk: Function
        Callback function.

    thisArg: any (optional)
        Callback execution context.

    Examples
    --------
    // Define ndarray data and meta data...
    > var xbuf = new {{alias:@stdlib/array/float64}}( [ -1.0, -2.0, -3.0, -4.0 ] );
    > var ybuf = new {{alias:@stdlib/array/float64}}( [ 0.0, 0.0, 0.0, 0.0 ] );
    > var dtype = 'float64';
    > var shape = [ 2, 2 ];
    > var sx = [ 2, 1 ];
    > var sy = [ 2, 1 ];
    > var ox = 0;
    > var oy = 0;
    > var order = 'row-major';

    // Using ndarrays...
    > var x = {{alias:@stdlib/ndarray/ctor}}( dtype, xbuf, shape, sx, ox, order );
    > var y = {{alias:@stdlib/ndarray/ctor}}( dtype, ybuf, shape, sy, oy, order );
    > {{alias}}( [ x, y ], {{alias:@stdlib/math/base/special/abs}}, {{alias:@stdlib/math/base/special/identity}} );
    > y.data
    <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]

    // Using minimal ndarray-like objects...
    > x = {
    ...     'dtype': dtype,
    ...     'data': xbuf,
    ...     'shape': shape,
    ...     'strides': sx,
    ...     'offset': ox,
    ...     'order': order
    ... };
    > y = {
    ...     'dtype': dtype,
    ...     'data': ybuf,
    ...     'shape': shape,
    ...     'strides': sy,
    ...     'offset': oy,
    ...     'order': order
    ... };
    > {{alias}}( [ x, y ], {{alias:@stdlib/math/base/special/abs}}, {{alias:@stdlib/math/base/special/identity}} );
    > y.data
    <Float64Array>[ 1.0, 2.0, 3.0, 4.0 ]

    See Also
    --------

