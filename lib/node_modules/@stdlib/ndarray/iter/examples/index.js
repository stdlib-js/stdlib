/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

var ndarray = require( '@stdlib/ndarray/base/ctor' );
var mean = require( '@stdlib/stats/base/mean' );
var variance = require( '@stdlib/stats/base/variance' );
var randu = require( '@stdlib/random/base/randu' );
var ns = require( './../lib' );

var rowVariance;
var iterRows;
var rowMean;
var rowData;
var data;
var row;
var x;
var j;
var i;

data = new Array( 25 );
for ( i = 0; i < data.length; i++ ) {
	data[ i ] = parseFloat( ( randu() * 100 ).toFixed( 2 ) );
}

console.log( data );

// Logs an array of 25 elements generated randomly as above.

x = ndarray( 'generic', data, [ 5, 5 ], [ 5, 1 ], 0, 'row-major' );
iterRows = ns.nditerRows( x );

while ( true ) {
	row = iterRows.next();
	if ( row.done ) {
		break;
	}
	rowData = [];
	for ( j = 0; j < row.value.shape[ 0 ]; j++ ) {
		rowData.push( row.value.get( j ) );
	}
	rowMean = parseFloat( ( mean( rowData.length, rowData, 1 ) ).toFixed( 2 ) );
	rowVariance = parseFloat( variance( rowData.length, 1, rowData, 1 )
		.toFixed( 2 ) );

	console.log( rowMean, rowVariance );

	// Logs mean and variance of each row in the 5x5 array.
}
