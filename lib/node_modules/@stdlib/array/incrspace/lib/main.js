/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var ceil = require( '@stdlib/math/base/special/ceil' );
var isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;
var isnan = require( '@stdlib/math/base/assert/is-nan' );
var format = require( '@stdlib/string/format' );
var MAX_LENGTH = require( '@stdlib/constants/uint32/max' );
var gen = require( '@stdlib/array/base/incrspace' );


// MAIN //

/**
* Generates a linearly spaced numeric array using a provided increment.
*
* @param {number} x1 - first array value
* @param {number} x2 - array element bound
* @param {number} [increment=1] - increment
* @throws {TypeError} first argument must be numeric
* @throws {TypeError} second argument must be numeric
* @throws {TypeError} third argument must be numeric
* @throws {RangeError} length of created array must be less than `4294967295` (`2**32 - 1`)
* @returns {Array} linearly spaced numeric array
*
* @example
* var arr = incrspace( 0, 11, 2 );
* // returns [ 0, 2, 4, 6, 8, 10 ]
*/
function incrspace( x1, x2, increment ) {
	var len;
	var inc;
	if ( !isNumber( x1 ) || isnan( x1 ) ) {
		throw new TypeError( format( 'invalid argument. Start must be numeric. Value: `%s`.', x1 ) );
	}
	if ( !isNumber( x2 ) || isnan( x2 ) ) {
		throw new TypeError( format( 'invalid argument. Stop must be numeric. Value: `%s`.', x2 ) );
	}
	if ( arguments.length < 3 ) {
		inc = 1;
	} else {
		inc = increment;
		if ( !isNumber( inc ) || isnan( inc ) ) {
			throw new TypeError( format( 'invalid argument. Increment must be numeric. Value: `%s`.', inc ) );
		}
	}
	len = ceil( ( x2-x1 ) / inc );
	if ( len > MAX_LENGTH ) {
		throw new RangeError( 'invalid arguments. Generated array exceeds maximum array length.' );
	}
	return gen( x1, x2, inc );
}


// EXPORTS //

module.exports = incrspace;
