/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var hasOwnProp = require( '@stdlib/assert/has-own-property' );
var isFunction = require( '@stdlib/assert/is-function' );
var Complex64 = require( '@stdlib/complex/float32' );
var realf = require( '@stdlib/complex/realf' );
var imagf = require( '@stdlib/complex/imagf' );
var Complex64Array = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof Complex64Array, 'function', 'main export is a function' );
	t.end();
});

tape( 'attached to the prototype of the main export is an `values` method for returning boolean indicating whether all elements pass a test', function test( t ) {
	t.strictEqual( hasOwnProp( Complex64Array.prototype, 'values' ), true, 'has property' );
	t.strictEqual( isFunction( Complex64Array.prototype.values ), true, 'has method' );
	t.end();
});

tape( 'the method throws an error if invoked with a `this` context which is not a complex number array instance', function test( t ) {
	var values;
	var arr;
	var i;

	arr = new Complex64Array( 5 );

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		{},
		[],
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			return arr.values.call( value );
		};
	}
});

tape( 'the method returns an iterator protocol-compliant object', function test( t ) {
	var expected;
	var iter;
	var arr;
	var i;
	var r;
	var e;

	arr = new Complex64Array( [ 1.0, -1.0, 2.0, -2.0 ] );
	expected = [
		{
			'value': new Complex64( 1.0, -1.0 ),
			'done': false
		},
		{
			'value': new Complex64( 2.0, -2.0 ),
			'done': false
		},
		{
			'value': void 0,
			'done': true
		}
	];
	iter = arr.values();

	t.strictEqual( typeof iter, 'object', 'returns an object' );
	t.strictEqual( typeof iter.next, 'function', 'has next method' );

	for ( i = 0; i < expected.length; i++ ) {
		r = iter.next();
		e = expected[ i ];
		if ( e.value === void 0 ) {
			t.deepEqual( r, e, 'returns expected value' );
		} else {
			t.strictEqual( realf( r.value ), realf( e.value ), 'returns expected value' );
			t.strictEqual( imagf( r.value ), imagf( e.value ), 'returns expected value' );
			t.strictEqual( r.done, e.done, 'returns expected value' );
		}
	}

	t.end();
});
