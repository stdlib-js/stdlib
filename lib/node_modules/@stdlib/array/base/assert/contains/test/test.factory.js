/**
* @license Apache-2.0
*
* Copyright (c) 2023 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var AccessorArray = require( '@stdlib/array/base/accessor' );
var factory = require( './../lib/factory.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof factory, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if not provided an array-like object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		{},
		function noop() {}
	];
	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[ i ] ), TypeError, 'throws an error when provided '+values[ i ] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			factory( value );
		};
	}
});

tape( 'the function returns a function which searches an array-like object', function test( t ) {
	var expected;
	var contains;
	var values;
	var x;
	var i;

	values = [
		0,
		1,
		2,
		3,
		4,
		5
	];
	expected = [
		false,
		true,
		true,
		true,
		false,
		false
	];
	x = [ 1, 2, 3 ];
	contains = factory( x );
	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( contains( values[ i ] ), expected[ i ], 'returns expected value' );
	}
	t.end();
});

tape( 'the function returns a function which searches an array-like object (accessors)', function test( t ) {
	var expected;
	var contains;
	var values;
	var x;
	var i;

	values = [
		0,
		1,
		2,
		3,
		4,
		5
	];
	expected = [
		false,
		true,
		true,
		true,
		false,
		false
	];
	x = new AccessorArray( [ 1, 2, 3 ] );
	contains = factory( x );
	for ( i = 0; i < expected.length; i++ ) {
		t.strictEqual( contains( values[ i ] ), expected[ i ], 'returns expected value' );
	}
	t.end();
});
