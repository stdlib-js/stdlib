
{{alias}}( N, mu, sm, sigma, ss, out, so[, options] )
    Fills a strided array with pseudorandom numbers drawn from a normal
    distribution.

    The `N` and stride parameters determine which elements in the provided
    strided arrays are accessed at runtime.

    Indexing is relative to the first index. To introduce an offset, use typed
    array views.

    If `N` is less than or equal to `0`, the output strided array is left
    unchanged.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    mu: ArrayLikeObject
        Mean.

    sm: integer
        Index increment for `mu`.

    sigma: ArrayLikeObject
        Standard deviation.

    ss: integer
        Index increment for `sigma`.

    out: ArrayLikeObject
        Output array.

    so: integer
        Index increment for `out`.

    options: Object (optional)
        Options.

    options.prng: Function (optional)
        Pseudorandom number generator (PRNG) for generating uniformly
        distributed pseudorandom numbers on the interval `[0,1)`. If provided,
        the `state` and `seed` options are ignored. In order to seed the
        underlying pseudorandom number generator, one must seed the provided
        `prng` (assuming the provided `prng` is seedable).

    options.seed: integer|ArrayLikeObject<integer> (optional)
        Pseudorandom number generator seed. The seed may be either a positive
        unsigned 32-bit integer or, for arbitrary length seeds, an array-like
        object containing unsigned 32-bit integers.

    options.state: Uint32Array (optional)
        Pseudorandom number generator state. If provided, the `seed` option is
        ignored.

    options.copy: boolean (optional)
        Boolean indicating whether to copy a provided pseudorandom number
        generator state. Setting this option to `false` allows sharing state
        between two or more pseudorandom number generators. Setting this option
        to `true` ensures that the underlying generator has exclusive control
        over its internal state. Default: true.

    Returns
    -------
    out: ArrayLikeObject
        Output array.

    Examples
    --------
    // Standard usage:
    > var mu = {{alias:@stdlib/array/linspace}}( 0.0, 1.0, 5 );
    > var sigma = {{alias:@stdlib/array/linspace}}( 2.0, 5.0, 5 );
    > var out = {{alias:@stdlib/array/zeros}}( 5, 'generic' );
    > {{alias}}( out.length, mu, 1, sigma, 1, out, 1 )
    [...]

    // Advanced indexing:
    > mu = {{alias:@stdlib/array/linspace}}( 0.0, 1.0, 6 );
    > sigma = {{alias:@stdlib/array/linspace}}( 2.0, 5.0, 6 );
    > out = {{alias:@stdlib/array/zeros}}( 6, 'generic' );
    > {{alias}}( 3, mu, -2, sigma, 1, out, 1 )
    [...]


{{alias}}.ndarray( N, mu, sm, om, sigma, ss, os, out, so, oo[, options] )
    Fills a strided array with pseudorandom numbers drawn from a normal
    distribution using alternative indexing semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the offset parameters support indexing semantics based on starting
    indices.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    mu: ArrayLikeObject
        Mean.

    sm: integer
        Index increment for `mu`.

    om: integer
        Starting index for `mu`.

    sigma: ArrayLikeObject
        Standard deviation.

    ss: integer
        Index increment for `sigma`.

    os: integer
        Starting index for `sigma`.

    out: ArrayLikeObject
        Output array.

    so: integer
        Index increment for `out`.

    oo: integer
        Starting index for `out`.

    options: Object (optional)
        Options.

    options.prng: Function (optional)
        Pseudorandom number generator (PRNG) for generating uniformly
        distributed pseudorandom numbers on the interval `[0,1)`. If provided,
        the `state` and `seed` options are ignored. In order to seed the
        underlying pseudorandom number generator, one must seed the provided
        `prng` (assuming the provided `prng` is seedable).

    options.seed: integer|ArrayLikeObject<integer> (optional)
        Pseudorandom number generator seed. The seed may be either a positive
        unsigned 32-bit integer or, for arbitrary length seeds, an array-like
        object containing unsigned 32-bit integers.

    options.state: Uint32Array (optional)
        Pseudorandom number generator state. If provided, the `seed` option is
        ignored.

    options.copy: boolean (optional)
        Boolean indicating whether to copy a provided pseudorandom number
        generator state. Setting this option to `false` allows sharing state
        between two or more pseudorandom number generators. Setting this option
        to `true` ensures that the underlying generator has exclusive control
        over its internal state. Default: true.

    Returns
    -------
    out: ArrayLikeObject
        Output array.

    Examples
    --------
    // Standard usage:
    > var mu = {{alias:@stdlib/array/linspace}}( 0.0, 1.0, 5 );
    > var sigma = {{alias:@stdlib/array/linspace}}( 2.0, 5.0, 5 );
    > var out = {{alias:@stdlib/array/zeros}}( 5, 'generic' );
    > {{alias}}.ndarray( out.length, mu, 1, 0, sigma, 1, 0, out, 1, 0 )
    [...]

    // Advanced indexing:
    > mu = {{alias:@stdlib/array/linspace}}( 0.0, 1.0, 6 );
    > sigma = {{alias:@stdlib/array/linspace}}( 2.0, 5.0, 6 );
    > out = {{alias:@stdlib/array/zeros}}( 6, 'generic' );
    > {{alias}}.ndarray( 3, mu, 2, 1, sigma, -1, sigma.length-1, out, 1, 0 )
    [...]

    See Also
    --------

