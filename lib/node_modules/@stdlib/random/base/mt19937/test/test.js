/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var INT32_MAX = require( '@stdlib/constants/math/int32-max' );
var isPositiveInteger = require( '@stdlib/math/base/assert/is-positive-integer' );
var mt19937 = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof mt19937, 'function', 'main export is a function' );
	t.end();
});

tape( 'attached to the main export is a method to generate normalized pseudorandom numbers', function test( t ) {
	t.equal( typeof mt19937.normalized, 'function', 'has `normalized` method' );
	t.end();
});

tape( 'attached to the main export is a method to generate linear congruential pseudorandom number generator', function test( t ) {
	t.equal( typeof mt19937.factory, 'function', 'has `factory` method' );
	t.end();
});

tape( 'attached to the main export is the generator name', function test( t ) {
	t.equal( mt19937.NAME, 'mt19937', 'has `NAME` property' );
	t.end();
});

tape( 'attached to the main export is the generator seed', function test( t ) {
	t.equal( typeof mt19937.SEED, 'number', 'has `SEED` property' );
	t.end();
});

tape( 'attached to the main export is the minimum possible generated number', function test( t ) {
	t.equal( mt19937.MIN, 1, 'has `MIN` property' );
	t.end();
});

tape( 'attached to the main export is the maximum possible generated number', function test( t ) {
	t.equal( mt19937.MAX, INT32_MAX-1, 'has `MAX` property' );
	t.end();
});

tape( 'the function returns pseudorandom integers strictly between 0 and 2^31-1 (inclusive)', function test( t ) {
	var v;
	var i;
	for ( i = 0; i < 1e4; i++ ) {
		v = mt19937();
		t.equal( typeof v, 'number', 'returns a number' );
		t.equal( isPositiveInteger( v ), true, 'returns a positive integer' );
		t.equal( v >= 1 && v <= INT32_MAX-1, true, 'returns an integer between 1 and 2^31-1 (inclusive)' );
	}
	t.end();
});

tape( 'the `normalized` method returns pseudorandom numbers strictly between 0 (inclusive) and 1 (exclusive)', function test( t ) {
	var v;
	var i;
	for ( i = 0; i < 1e4; i++ ) {
		v = mt19937.normalized();
		t.equal( typeof v, 'number', 'returns a number' );
		t.equal( v >= 0.0 && v < 1.0, true, 'returns a number between 0 (inclusive) and 1 (exclusive)' );
	}
	t.end();
});

tape( 'attached to the `normalized` method is the generator name', function test( t ) {
	t.equal( mt19937.normalized.NAME, 'mt19937', 'has `NAME` property' );
	t.end();
});

tape( 'attached to the `normalized` method is the generator seed', function test( t ) {
	t.equal( typeof mt19937.normalized.SEED, 'number', 'has `SEED` property' );
	t.end();
});

tape( 'attached to the `normalized` method is the minimum possible generated number', function test( t ) {
	t.equal( mt19937.normalized.MIN, 0.0, 'has `MIN` property' );
	t.end();
});

tape( 'attached to the `normalized` method is the maximum possible generated number', function test( t ) {
	t.equal( mt19937.normalized.MAX, (INT32_MAX-2.0)/(INT32_MAX-1.0), 'has `MAX` property' );
	t.end();
});

tape( 'the function returns pseudorandom numbers from the Mersenne Twister PRNG', function test( t ) {
	var expected;
	var rand;
	var i;

	/* Tested against the original C source
	The main function to generate these values
	int main(void) {
		int i;
		init_genrand(1234);
		for (int i = 0; i < 10; ++i) {
			printf("%10lu ", genrand_int32());
		}
		return 0;
	} */
	expected = [
		822569775,
		2137449171,
		2671936806,
		3512589365,
		1880026316,
		2629000564,
		3373089432,
		3312965625,
		3349970575,
		3696548529
	];
	rand = mt19937.factory( 1234 );
	for (i = 0; i < expected.length; i++) {
		t.equal(rand(), expected[i], 'the ' + i + ' th value matches');
	}
	t.end();
});
