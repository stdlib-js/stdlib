/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var ENV = require( '@stdlib/process/env' );
var INT32_MAX = require( '@stdlib/constants/math/int32-max' );
var UINT32_MAX = require( '@stdlib/constants/math/uint32-max' );
var round = require( '@stdlib/math/base/special/round' );
var isPositiveInteger = require( '@stdlib/math/base/assert/is-positive-integer' );
var kstest = require( '@stdlib/stats/kstest' );
var factory = require( './../lib/factory.js' );


// VARIABLES //

var opts = {
	'skip': ( ENV.TEST_MODE === 'coverage' )
};


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof factory, 'function', 'main export is a function' );
	t.end();
});

tape( 'if provided a value which is not a positive integer, the factory function throws an error', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		3.14,
		0.0,
		-5.0,
		NaN,
		true,
		null,
		undefined,
		[],
		{},
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws a type error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			factory( value );
		};
	}
});

tape( 'the function throws a range error if provided an integer greater than or equal to the maximum signed 32-bit integer', function test( t ) {
	var values;
	var i;

	values = [
		INT32_MAX,
		INT32_MAX + 1,
		INT32_MAX + 2
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), RangeError, 'throws a range error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			factory( value );
		};
	}
});

tape( 'the function returns a pseudorandom number generator (no seed)', function test( t ) {
	var mt19937;
	var v;
	var i;

	mt19937 = factory();
	for ( i = 0; i < 1e4; i++ ) {
		v = mt19937();
		t.equal( typeof v, 'number', 'returns a number' );
		t.equal( isPositiveInteger( v ), true, 'returns a positive integer' );
		t.equal( v >= 1 && v <= UINT32_MAX-1, true, 'returns an integer between 1 and 2^31-1 (inclusive)' );
	}
	t.end();
});

tape( 'the function returns a seeded pseudorandom number generator', function test( t ) {
	var mt199371;
	var mt199372;
	var seed;
	var v1;
	var v2;
	var i;

	seed = round( Date.now() / 1000 );

	mt199371 = factory( seed );
	mt199372 = factory( seed );

	t.notEqual( mt199371, mt199372, 'separate generators' );

	for ( i = 0; i < 1e3; i++ ) {
		v1 = mt199371();
		v2 = mt199372();
		t.equal( v1, v2, 'both return same number' );
	}
	t.end();
});

tape( 'attached to the returned function is the generator name', function test( t ) {
	var mt19937 = factory();
	t.equal( mt19937.NAME, 'mt19937', 'has `NAME` property' );
	t.end();
});

tape( 'attached to the returned function is the generator seed', function test( t ) {
	var mt19937 = factory( 12345 );
	t.equal( typeof mt19937.SEED, 'number', 'has `SEED` property' );
	t.equal( mt19937.SEED, 12345, 'equal to provided seed' );
	t.end();
});

tape( 'attached to the returned function is the minimum possible generated number', function test( t ) {
	var mt19937 = factory();
	t.equal( mt19937.MIN, 1, 'has `MIN` property' );
	t.end();
});

tape( 'attached to the returned function is the maximum possible generated number', function test( t ) {
	var mt19937 = factory();
	t.equal( mt19937.MAX, UINT32_MAX-1, 'has `MAX` property' );
	t.end();
});

tape( 'attached to the returned function is a `normalized` method for generating pseudorandom numbers strictly between 0 (inclusive) and 1 (exclusive)', function test( t ) {
	var mt19937;
	var v;
	var i;

	mt19937 = factory();
	for ( i = 0; i < 1e4; i++ ) {
		v = mt19937.normalized();
		t.equal( typeof v, 'number', 'returns a number' );
		t.equal( v >= 0.0 && v < 1.0, true, 'returns a number between 0 (inclusive) and 1 (exclusive)' );
	}
	t.end();
});

tape( 'attached to the `normalized` method is the generator name', function test( t ) {
	var mt19937 = factory();
	t.equal( mt19937.normalized.NAME, 'mt19937', 'has `NAME` property' );
	t.end();
});

tape( 'attached to the `normalized` method is the generator seed', function test( t ) {
	var mt19937 = factory( 12345 );
	t.equal( typeof mt19937.normalized.SEED, 'number', 'has `SEED` property' );
	t.equal( mt19937.normalized.SEED, 12345, 'equal to provided seed' );
	t.end();
});

tape( 'attached to the `normalized` method is the minimum possible generated number', function test( t ) {
	var mt19937 = factory();
	t.equal( mt19937.normalized.MIN, 0.0, 'has `MIN` property' );
	t.end();
});

tape( 'attached to the `normalized` method is the maximum possible generated number', function test( t ) {
	var mt19937 = factory();
	t.equal( mt19937.normalized.MAX, (UINT32_MAX-2.0)/(UINT32_MAX-1.0), 'has `MAX` property' );
	t.end();
});

tape( 'the `normalized` method returns pseudorandom numbers drawn from a uniform distribution', opts, function test( t ) {
	var threshold;
	var count;
	var npass;
	var N;
	var x;

	threshold = 0.10;

	x = new Array( 1e3 );
	N = 500;

	count = -1;
	npass = 0;

	gof();

	function gof() {
		var rejected;
		var mt19937;
		var pValue;
		var bool;
		var i;
		var j;

		count += 1;
		rejected = 0;
		for ( i = 0; i < N; i++ ) {
			mt19937 = factory();
			t.ok( true, 'seed: '+mt19937.SEED );
			for ( j = 0; j < x.length; j++ ) {
				x[ j ] = mt19937.normalized();
				if ( x[ j ] < 0.0 || x[ j ] > 1.0 ) {
					t.ok( false, 'returned a number outside support: '+x[ j ] );
				}
			}
			// Test using Kolmogorov-Smirnov goodness-of-fit test:
			pValue = kstest( x, 'uniform', 0.0, 1.0 ).pValue;
			t.equal( typeof pValue, 'number', 'returns a p-value: '+pValue );
			if ( pValue < 0.05 ) {
				rejected += 1;
			}
		}
		// Account for small sample size and few repeats...
		bool = ( rejected / N < threshold );

		// If we succeed the first time, we are done...
		if ( count === 0 && bool ) {
			return done( bool, rejected );
		}
		// Retry mode...
		if ( bool ) {
			npass += 1;
		}
		// Retry twice...
		if ( count < 2 ) {
			return gof();
		}
		// Both retries must succeed for test to pass:
		bool = ( npass >= 2 );
		return done( bool, rejected );
	}

	function done( bool, rejected ) {
		t.ok( bool, 'null hypothesis (i.e., that numbers are drawn from Uniform(0,1)) is rejected in less than '+(threshold*100)+'% of cases ('+rejected+' of '+N+'). Repeats: '+npass+' of '+count+'.' );
		t.end();
	}
});
