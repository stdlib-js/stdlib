/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var iterCartesianPower = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof iterCartesianPower, 'function', 'main export is a function' );
	t.end();
} );

tape( 'the function returns an iterator which generates all possible combinations of length `n` containing elements from the input array', function test( t ) {
	var expected;
	var iterator;
	var actual;
	var v;

	iterator = iterCartesianPower( [ 'a', 'b', 'c' ], 2 );
	expected = [ [ 'a', 'a' ], [ 'a', 'b' ], [ 'a', 'c' ], [ 'b', 'a' ], [ 'b', 'b' ], [ 'b', 'c' ], [ 'c', 'a' ], [ 'c', 'b' ], [ 'c', 'c' ] ];
	actual = [];

	while ( true ) {
		v = iterator.next();
		if ( v.done ) {
			break;
		}
		actual.push( v.value );
	}
	t.deepEqual( actual, expected, 'returns expected values' );
	t.end();
} );

tape( 'the function returns an iterator which returns an empty array if `n` is 0', function test( t ) {
	var iterator;
	var expected;
	var actual;

	iterator = iterCartesianPower( [ 'a', 'b', 'c' ], 0 );
	expected = [];
	actual = iterator.next().value;
	t.deepEqual( actual, expected, 'returns expected value' );
	t.end();
} );

tape( 'the function returns an iterator which generates all individual elements of the input array when `n` is 1', function test( t ) {
	var expected;
	var iterator;
	var actual;
	var v;

	iterator = iterCartesianPower( [ 'a', 'b', 'c' ], 1 );
	expected = [ [ 'a' ], [ 'b' ], [ 'c' ] ];
	actual = [];

	while ( true ) {
		v = iterator.next();
		if ( v.done ) {
			break;
		}
		actual.push( v.value );
	}
	t.deepEqual( actual, expected, 'returns expected value' );
	t.end();
} );
