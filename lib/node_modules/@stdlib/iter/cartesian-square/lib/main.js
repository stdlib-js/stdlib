/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );
var iteratorSymbol = require( '@stdlib/symbol/iterator' );
var floor = require( '@stdlib/math/base/special/floor' );


// MAIN //

/**
* Returns an iterator which generates the Cartesian square of an input array-like object.
*
* @param {ArrayLike} arr - input array
* @throws {TypeError} must provide an array-like object
* @returns {Iterator} iterator
*
* @example
* var iter = iterCartesianSquare( [ 'a', 'b', 'c' ] );
*
* var v = iter.next().value;
* // returns [ 'a', 'a' ]
*
* v = iter.next().value;
* // returns [ 'a', 'b' ]
*
* // ...
*/
function iterCartesianSquare( arr ) {
	var iter;
	var FLG;
	var i;

	if ( !Array.isArray( arr ) ) {
		throw new TypeError( 'invalid argument. Must provide an array-like object. Value: `' + arr + '`.' );
	}
	iter = {};
	FLG = false;
	i = 0;
	setReadOnly( iter, 'next', next );
	setReadOnly( iter, 'return', finish );

	if ( iteratorSymbol ) {
		setReadOnly( iter, iteratorSymbol, factory );
	}
	return iter;

	/**
	* Returns an iterator protocol-compliant object containing the next iterated value.
* @private
* @returns {Object} iterator result
*/
	function next() {
		var v;
		if ( FLG ) {
			return {
				'done': true
			};
		}
		v = [ arr[ floor( i / arr.length ) ], arr[ i % arr.length ] ];
		i += 1;
		if ( i >= arr.length * arr.length ) {
			FLG = true;
		}
		return {
			'value': v,
			'done': false
		};
	}

	/**
	* Finishes an iterator.
* @private
* @returns {Object} iterator result
*/
	function finish() {
		FLG = true;
		return {
			'done': true
		};
	}

	/**
	* Returns a new iterator.
* @private
* @returns {Iterator} iterator
*/
	function factory() {
		return iterCartesianSquare( arr );
	}
}


// EXPORTS //

module.exports = iterCartesianSquare;
