/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var iterCartesianSquare = require( './../lib/main.js' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.equal( typeof iterCartesianSquare, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if the first argument is not an array-like object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		true,
		false,
		null,
		undefined,
		{},
		function namedFunction() {},
		NaN,
		Infinity,
		-Infinity
	];

	function badValue(value) {
		return function thrower() {
			iterCartesianSquare(value);
		};
	}

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue(values[i]), TypeError, 'throws an error when provided ' + values[i] );
	}
	t.end();
});

tape( 'the function returns an iterator which generates the Cartesian square of an input array', function test( t ) {
	var expected;
	var actual;
	var iter;

	iter = iterCartesianSquare( [ 'a', 'b' ] );

	expected = [ 'a', 'a' ];
	actual = iter.next().value;
	t.deepEqual( actual, expected, 'returns expected value' );

	expected = [ 'a', 'b' ];
	actual = iter.next().value;
	t.deepEqual( actual, expected, 'returns expected value' );

	expected = [ 'b', 'a' ];
	actual = iter.next().value;
	t.deepEqual( actual, expected, 'returns expected value' );

	expected = [ 'b', 'b' ];
	actual = iter.next().value;
	t.deepEqual( actual, expected, 'returns expected value' );

	t.ok( iter.next().done, 'returns expected value' );

	t.end();
});
