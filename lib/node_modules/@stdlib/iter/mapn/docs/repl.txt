
{{alias}}( iter0, ...iterator, fcn[, thisArg] )
    Returns an iterator which transforms iterated values from two or more
    iterators by applying the iterated values as arguments to a provided
    function.

    When invoked, the callback function is provided `N+1` arguments, where `N`
    is the number of provided iterators and the last argument is the iteration
    index:

    - ...value: iterated values.
    - index: iteration index (zero-based).

    The length of the returned iterator is equal to the length of the shortest
    provided iterator. In other words, the returned iterator ends once *one* of
    the provided iterators ends.

    If an environment supports Symbol.iterator and provided iterators are
    iterable, the returned iterator is iterable.

    Parameters
    ----------
    iter0: Object
        Input iterator.

    iterator: ...Object
        Iterators.

    fcn: Function
        Function to invoke with iterated values.

    thisArg: any (optional)
        Execution context.

    Returns
    -------
    iterator: Object
        Iterator.

    iterator.next(): Function
        Returns an iterator protocol-compliant object containing the next
        iterated value (if one exists) and a boolean flag indicating whether the
        iterator is finished.

    iterator.return( [value] ): Function
        Finishes an iterator and returns a provided value.

    Examples
    --------
    > var it1 = {{alias:@stdlib/array/to-iterator}}( [ 1.0, 2.0 ] );
    > var it2 = {{alias:@stdlib/array/to-iterator}}( [ 3.0, 4.0 ] );
    > function fcn( x, y ) { return x + y; };
    > var it = {{alias}}( it1, it2, fcn );
    > var v = it.next().value
    4.0
    > v = it.next().value
    6.0
    > var bool = it.next().done
    true

    See Also
    --------

