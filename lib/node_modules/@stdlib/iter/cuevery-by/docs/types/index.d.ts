/*
* @license Apache-2.0
*
* Copyright (c) 2019 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

// TypeScript Version: 4.1

/// <reference types="@stdlib/types"/>

import { Iterator as StdlibIterator } from '@stdlib/types/iter';

/**
* Checks whether an iterated value passes a test.
*
* @param value - iterated value
* @param i - iteration index
* @returns boolean indicating whether an iterated value passes a test
*/
type Predicate = (value: any, i: number) => boolean;

/**
* Tests whether every iterated value passes a test implemented by a predicate function.
*
* @param iterator - input iterator
* @param predicate - predicate function
* @returns iterator which cumulatively tests whether every iterated value passes a test
*
* @example
* var array2iterator = require( '@stdlib/array/to-iterator' );
*
* function isPositive( v ) {
*     return ( v > 0 );
* }
*
* var it = iterCuEveryBy( array2iterator( [ 1, 1, 1, 0, 1 ] ), isPositive );
*
* var v = it.next().value;
* // returns true
*
* v = it.next().value;
* // returns true
*
* v = it.next().value;
* // returns true
*
* v = it.next().value;
* // returns false
*
* v = it.next().value;
* // returns false
*
* var bool = it.next().done;
* // returns true
*/
declare function iterCuEveryBy(iterator: StdlibIterator, predicate: Predicate): StdlibIterator;

// EXPORTS //

export = iterCuEveryBy;
