{{alias}}( iterator, predicate[, thisArg ] )
    Tests whether every iterated value passes a test implemented by a predicate
    function. The returned iterator should be a transform iterator, continuing 
    to iterate while source iterator values are available.

    The predicate function is provided two arguments:

    - value: iterated value
    - index: iteration index

    The function continues to iterate while source iterator values are available,
    returning true or false for each iterated value based on the predicate function.

    Parameters
    ----------
    iterator: Object
        Input iterator over which to iterate.

    predicate: Function
        The test function.

    thisArg: any (optional)
        Execution context.

    Returns
    -------
    iterator: Object
        An iterator which returns `true` if a predicate function returns a truthy
        value for all iterated values up to the current point. Once the predicate 
        function returns a falsy value, all subsequent iterations return `false`.

    Examples
    --------
    > var array2iterator = {{alias:@stdlib/array/to-iterator}};
    > function isPositive( v ) { return ( v > 0 ); }
    > var arr = array2iterator( [ 1, 1, 1, 0, 1 ] );
    > var it = {{alias}}( arr, isPositive );
    > var v = it.next().value;
    true
    > v = it.next().value;
    true
    > v = it.next().value;
    true
    > v = it.next().value;
    false
    > v = it.next().value;
    false
    > var bool = it.next().done;
    true

    See Also
    --------
    - {{alias:@stdlib/iter/any-by}}: test whether at least one iterated value passes a test implemented by a predicate function.
    - {{alias:@stdlib/iter/every}}: test whether all iterated values are truthy.
    - {{alias:@stdlib/iter/none-by}}: test whether every iterated value fails a test implemented by a predicate function.
    - {{alias:@stdlib/iter/some-by}}: test whether at least `n` iterated values pass a test implemented by a predicate function.
