
{{alias}}( iterator, predicate[, thisArg] )
    Returns an iterator which filters a provided iterator's values according to
    a predicate function.

    When invoked, the predicate function is provided two arguments:

    - value: iterated value.
    - index: iteration index (zero-based).

    If an environment supports Symbol.iterator and a provided iterator is
    iterable, the returned iterator is iterable.

    Parameters
    ----------
    iterator: Object
        Input iterator.

    predicate: Function
        Predicate function to invoke for each iterated value.

    thisArg: any (optional)
        Execution context.

    Returns
    -------
    iterator: Object
        Iterator.

    iterator.next(): Function
        Returns an iterator protocol-compliant object containing the next
        iterated value (if one exists) and a boolean flag indicating whether the
        iterator is finished.

    iterator.return( [value] ): Function
        Finishes an iterator and returns a provided value.

    Examples
    --------
    > function f( v ) { return ( v > 2 ); };
    > var it1 = {{alias:@stdlib/array/to-iterator}}( [ 1, 3, 2, 4 ] );
    > var it2 = {{alias}}( it1, f );
    > var v = it2.next().value
    3
    > v = it2.next().value
    4

    See Also
    --------

