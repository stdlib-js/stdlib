/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var bench = require( '@stdlib/bench' );
var isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;
var isIteratorLike = require( '@stdlib/assert-is-iterator-like' );
var pkg = require( './../package.json' ).name;
var iterCuNone = require( './../lib' );


// FUNCTIONS //

function createIterator( arr ) {
    var len;
    var it;
    var i;

    len = arr.length;
    i = -1;

    it = {};
    it.next = next;
    it.reset = reset;

    return it;

    function next() {
        i += 1;
        if ( i < len ) {
            return {
                'value': arr[ i ],
                'done': false
            };
        }
        return {
            'done': true
        };
    }

    function reset() {
        i = -1;
    }
}


// MAIN //

bench( pkg, function benchmark( b ) {
    var iter;
    var arr;
    var i;

    arr = [ 0, 0, 0, 0, 0, 1 ];

    b.tic();
    for ( i = 0; i < b.iterations; i++ ) {
        iter = iterCuNone( createIterator( arr ) );
        if ( typeof iter !== 'object' ) {
            b.fail( 'should return an object' );
        }
    }
    b.toc();
    if ( !isIteratorLike( iter ) ) {
        b.fail( 'should return an iterator protocol-compliant object' );
    }
    b.pass( 'benchmark finished' );
    b.end();
});

bench( pkg+'::iteration', function benchmark( b ) {
    var iter;
    var arr;
    var i;
    var v;

    arr = [ 0, 0, 0, 0, 0, 1 ];
    iter = iterCuNone( createIterator( arr ) );

    b.tic();
    for ( i = 0; i < b.iterations; i++ ) {
        v = iter.next().value;
        if ( typeof v !== 'boolean' ) {
            b.fail( 'should return a boolean' );
        }
    }
    b.toc();
    if ( !isBoolean( v ) ) {
        b.fail( 'should return a boolean' );
    }
    b.pass( 'benchmark finished' );
    b.end();
});