/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var tape = require( 'tape' );
var proxyquire = require( 'proxyquire' );
var isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;
var isIteratorLike = require( '@stdlib/assert-is-iterator-like' );
var array2iterator = require( '@stdlib/array-to-iterator' );
var iterCuNone = require( './../lib' );


// TESTS //

tape( 'main export is a function', function test( t ) {
	t.ok( true, __filename );
	t.strictEqual( typeof iterCuNone, 'function', 'main export is a function' );
	t.end();
});

tape( 'the function throws an error if provided an iterator argument which is not an iterator protocol-compliant object', function test( t ) {
	var values;
	var i;

	values = [
		'5',
		5,
		NaN,
		true,
		false,
		null,
		void 0,
		{},
		[],
		function noop() {}
	];

	for ( i = 0; i < values.length; i++ ) {
		t.throws( badValue( values[i] ), TypeError, 'throws an error when provided '+values[i] );
	}
	t.end();

	function badValue( value ) {
		return function badValue() {
			iterCuNone( value );
		};
	}
});

tape( 'the function returns an iterator protocol-compliant object', function test( t ) {
	var it;
	var r;
	var i;

	it = iterCuNone( array2iterator( [ 1, 2, 3 ] ) );
	t.equal( it.next.length, 0, 'has zero arity' );

	for ( i = 0; i < 100; i++ ) {
		r = it.next();
		t.equal( typeof r.value, 'boolean', 'returns a boolean' );
		t.equal( typeof r.done, 'boolean', 'returns a boolean' );
	}
	t.end();
});

tape( 'the function returns an iterator which cumulatively tests whether every iterated value is falsy', function test( t ) {
	var expected;
	var values;
	var it;
	var i;

	values = [ false, null, void 0, '', 0, NaN, true, 'abc', 5 ];
	expected = [ true, true, true, true, true, true, false, false, false ];

	it = iterCuNone( array2iterator( values ) );
	t.equal( isIteratorLike( it ), true, 'returns an iterator' );

	for ( i = 0; i < values.length; i++ ) {
		t.equal( it.next().value, expected[ i ], 'returns expected value' );
	}
	t.equal( it.next().done, true, 'returns expected value' );

	t.end();
});

tape( 'the function returns an iterator which returns `true` if all iterated values are falsy', function test( t ) {
	var it;
	var r;

	it = iterCuNone( array2iterator( [ false, null, void 0, '', 0, NaN ] ) );
	t.equal( isIteratorLike( it ), true, 'returns an iterator' );

	r = it.next();
	t.equal( r.value, true, 'returns expected value' );
	t.equal( r.done, false, 'returns expected value' );

	r = it.next();
	t.equal( r.value, true, 'returns expected value' );
	t.equal( r.done, false, 'returns expected value' );

	r = it.next();
	t.equal( r.value, true, 'returns expected value' );
	t.equal( r.done, false, 'returns expected value' );

	r = it.next();
	t.equal( r.value, true, 'returns expected value' );
	t.equal( r.done, false, 'returns expected value' );

	r = it.next();
	t.equal( r.value, true, 'returns expected value' );
	t.equal( r.done, false, 'returns expected value' );

	r = it.next();
	t.equal( r.value, true, 'returns expected value' );
	t.equal( r.done, false, 'returns expected value' );

	r = it.next();
	t.equal( r.value, void 0, 'returns expected value' );
	t.equal( r.done, true, 'returns expected value' );

	t.end();
});

tape( 'the function returns an iterator which returns `true` if provided an "empty" iterator', function test( t ) {
	var it;
	var r;

	it = iterCuNone( array2iterator( [] ) );
	t.equal( isIteratorLike( it ), true, 'returns an iterator' );

	r = it.next();
	t.equal( r.value, void 0, 'returns expected value' );
	t.equal( r.done, true, 'returns expected value' );

	t.end();
});

tape( 'the returned iterator has a `return` method for closing an iterator (no argument)', function test( t ) {
	var it;
	var r;

	it = iterCuNone( array2iterator( [ 1, 2, 3, 4 ] ) );

	r = it.next();
	t.equal( isBoolean( r.value ), true, 'returns a boolean' );
	t.equal( r.done, false, 'returns expected value' );

	r = it.next();
	t.equal( isBoolean( r.value ), true, 'returns a boolean' );
	t.equal( r.done, false, 'returns expected value' );

	r = it.return();
	t.equal( r.value, void 0, 'returns expected value' );
	t.equal( r.done, true, 'returns expected value' );

	r = it.next();
	t.equal( r.value, void 0, 'returns expected value' );
	t.equal( r.done, true, 'returns expected value' );

	t.end();
});

tape( 'the returned iterator has a `return` method for closing an iterator (argument)', function test( t ) {
	var it;
	var r;

	it = iterCuNone( array2iterator( [ 1, 2, 3, 4 ] ) );

	r = it.next();
	t.equal( isBoolean( r.value ), true, 'returns a boolean' );
	t.equal( r.done, false, 'returns expected value' );

	r = it.next();
	t.equal( isBoolean( r.value ), true, 'returns a boolean' );
	t.equal( r.done, false, 'returns expected value' );

	r = it.return( 'finished' );
	t.equal( r.value, 'finished', 'returns expected value' );
	t.equal( r.done, true, 'returns expected value' );

	r = it.next();
	t.equal( r.value, void 0, 'returns expected value' );
	t.equal( r.done, true, 'returns expected value' );

	t.end();
});

tape( 'if an environment supports `Symbol.iterator` and the provided iterator is iterable, the returned iterator is iterable', function test( t ) {
	var iterCuNone;
	var opts;
	var rand;
	var it1;
	var it2;
	var i;

	iterCuNone = proxyquire( './../lib/main.js', {
		'@stdlib/symbol-iterator': '__ITERATOR_SYMBOL__'
	});

	opts = {
		'seed': 12345
	};
	rand = {
		'next': function next() {
			return {
				'value': ( opts.iter += 1 ),
				'done': false
			};
		}
	};
	rand[ '__ITERATOR_SYMBOL__' ] = function iterator() {
		return rand;
	};

	it1 = iterCuNone( rand );
	t.equal( typeof it1[ '__ITERATOR_SYMBOL__' ], 'function', 'has method' );
	t.equal( it1[ '__ITERATOR_SYMBOL__' ].length, 0, 'has zero arity' );

	it2 = it1[ '__ITERATOR_SYMBOL__' ]();
	t.equal( typeof it2, 'object', 'returns an object' );
	t.equal( typeof it2.next, 'function', 'has method' );
	t.equal( typeof it2.return, 'function', 'has method' );

	for ( i = 0; i < 100; i++ ) {
		t.equal( it2.next().value, it1.next().value, 'returns expected value' );
	}
	t.end();
});

tape( 'if an environment does not support `Symbol.iterator`, the returned iterator is not "iterable"', function test( t ) {
    var iterCuNone;
    var it;

    iterCuNone = proxyquire( './../lib/main.js', {
        '@stdlib/symbol-iterator': false
    });

    it = iterCuNone( array2iterator( [ 1, 2, 3, 4 ] ) );
    t.equal( it[ iteratorSymbol ], void 0, 'does not have property' );

    t.end();
});