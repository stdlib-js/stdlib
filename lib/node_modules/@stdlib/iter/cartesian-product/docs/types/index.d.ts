/*
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

/* eslint-disable @typescript-eslint/no-explicit-any */

// TypeScript Version: 4.1

/// <reference types="@stdlib/types"/>

import { Iterator as Iter, IterableIterator } from '@stdlib/types/iter';

// Define a union type representing both iterable and non-iterable iterators:
type Iterator = Iter | IterableIterator;

/**
 * Returns an iterator which generates all combinations of elements from the input arrays.
 *
 * ## Notes
 *
 * -   If an environment supports `Symbol.iterator`, the returned iterator is iterable.
 *
 * @param x1 - first input array
 * @param x2 - second input array
 * @returns iterator
 *
 * @example
 * var iter = iterCartesianProduct( [ 1, 2 ], [ 3, 4 ] );
 *
 * var v = iter.next().value;
 * // returns [ 1, 3 ]
 *
 * v = iter.next().value;
 * // returns [ 1, 4 ]
 *
 * v = iter.next().value;
 * // returns [ 2, 3 ]
 *
 * // ...
 */
declare function iterCartesianProduct( x1: Array<any>, x2: Array<any> ): Iterator;


// EXPORTS //

export = iterCartesianProduct;
