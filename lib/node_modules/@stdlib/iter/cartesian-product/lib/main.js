/**
* @license Apache-2.0
*
* Copyright (c) 2024 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/

'use strict';

// MODULES //

var setReadOnly = require('@stdlib/utils/define-nonenumerable-read-only-property');
var isCollection = require('@stdlib/assert/is-collection');
var base = require('@stdlib/array/base/cartesian-product');
var iteratorSymbol = require('@stdlib/symbol/iterator');
var format = require('@stdlib/string/format');


// MAIN //

/**
* Returns an Iterator of Cartesian product of arrays.
*
* @param {Collection} x1 - first input array
* @param {Collection} x2 - second input array
* @throws {TypeError} first argument must be a collection
* @throws {TypeError} second argument must be a collection
* @returns {Iterator} iterator
*
* @example
* var iter = iterCartesianProduct([1, 2], [3, 4]);
*
* var v = iter.next().value;
* // returns [1,3]
*
* v = iter.next().value;
* // returns [1,4]
*
* v = iter.next().value;
* // returns [2,3]
*
* v = iter.next().value;
* // returns [2,4]
*/
function iterCartesianProduct(x1, x2) {
	var value;
	var iter;
	var prod;
	var i;

	if (!isCollection(x1)) {
		throw new TypeError(format('invalid argument. First argument must be a collection. Value: `' + x1 + '`.'));
	}
	if (!isCollection(x2)) {
		throw new TypeError(format('invalid argument. Second argument must be a collection. Value: `' + x2 +'`.'));
	}

	prod = base(x1, x2);

	// Create an iterator protocol-compliant object:
	iter = {};
	i = 0;
	setReadOnly(iter, 'next', next);
	setReadOnly(iter, 'return', end);

	// If an environment supports `Symbol.iterator`, make the iterator iterable:
	if (iteratorSymbol) {
		setReadOnly(iter, iteratorSymbol, factory);
	}
	return iter;

	/**
	 * Returns an iterator protocol-compliant object containing the next iterated value.
	 *
	 * @private
	 * @returns {Object} iterator protocol-compliant object
	 */
	function next() {
		if (i >= prod.length) {
			return {
				'done': true
			};
		}
		value = prod[i];
		i += 1;
		return {
			'value': value,
			'done': false
		};
	}

	/**
	 * Finishes an iterator.
	 *
	 * @private
	 * @param {*} [value] - value to return
	 * @returns {Object} iterator protocol-compliant object
	 */
	function end(value) {
		i = prod.length;
		if (arguments.length) {
			return {
				'value': value,
				'done': true
			};
		}
		return {
			'done': true
		};
	}

	/**
	 * Returns a new iterator.
	 *
	 * @private
	 * @returns {Iterator} iterator
	 */
	function factory() {
		return iterCartesianProduct(x1, x2);
	}
}


// EXPORTS //

module.exports = iterCartesianProduct;
