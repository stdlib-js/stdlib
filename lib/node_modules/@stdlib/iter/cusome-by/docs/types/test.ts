import iterCuSomeBy = require( './index' );

/**
* Returns an iterator protocol-compliant object.
*
* @returns iterator protocol-compliant object
*/
function iterator() {
    return {
        'next': next
    };

    /**
    * Implements the iterator protocol `next` method.
    *
    * @returns iterator protocol-compliant object
    */
    function next() {
        return {
            'value': true,
            'done': false
        };
    }
}

/**
* Predicate function.
*
* @param _v - iterated value
* @param i - iteration index
* @returns a boolean
*/
function predicate1( _v: any, i: number ): boolean {
    return ( i !== i );
}

/**
* Predicate function.
*
* @param v - iterated value
* @returns a boolean
*/
function predicate2( v: any ): boolean {
    return ( v !== v );
}


// TESTS //

// The function returns a boolean...
{
    iterCuSomeBy( iterator(), 3, predicate1 ); // $ExpectType boolean
    iterCuSomeBy( iterator(), 3, predicate2 ); // $ExpectType boolean
    iterCuSomeBy( iterator(), 3, predicate1, {} ); // $ExpectType boolean
    iterCuSomeBy( iterator(), 3, predicate2, {} ); // $ExpectType boolean
    iterCuSomeBy( iterator(), 3, predicate1, null ); // $ExpectType boolean
    iterCuSomeBy( iterator(), 3, predicate2, null ); // $ExpectType boolean
}

// The compiler throws an error if the function is provided a first argument which is not an iterator protocol-compliant object...
{
    iterCuSomeBy( '5', 3, predicate1 ); // $ExpectError
    iterCuSomeBy( 5, 3, predicate1 ); // $ExpectError
    iterCuSomeBy( true, 3, predicate1 ); // $ExpectError
    iterCuSomeBy( false, 3, predicate1 ); // $ExpectError
    iterCuSomeBy( null, 3, predicate1 ); // $ExpectError
    iterCuSomeBy( undefined, 3, predicate1 ); // $ExpectError
    iterCuSomeBy( [], 3, predicate1 ); // $ExpectError
    iterCuSomeBy( {}, 3, predicate1 ); // $ExpectError
    iterCuSomeBy( ( x: number ): number => x, 3, predicate1 ); // $ExpectError
}

// The compiler throws an error if the function is provided a second argument which is not a number...
{
    iterCuSomeBy( iterator(), '5', predicate1 ); // $ExpectError
    iterCuSomeBy( iterator(), true, predicate1 ); // $ExpectError
    iterCuSomeBy( iterator(), false, predicate1 ); // $ExpectError
    iterCuSomeBy( iterator(), null, predicate1 ); // $ExpectError
    iterCuSomeBy( iterator(), undefined, predicate1 ); // $ExpectError
    iterCuSomeBy( iterator(), [], predicate1 ); // $ExpectError
    iterCuSomeBy( iterator(), {}, predicate1 ); // $ExpectError
    iterCuSomeBy( iterator(), ( x: number ): number => x, predicate1 ); // $ExpectError
}

// The compiler throws an error if the function is provided a third argument which is not a predicate function...
{
    iterCuSomeBy( iterator(), 3, '5' ); // $ExpectError
    iterCuSomeBy( iterator(), 3, 5 ); // $ExpectError
    iterCuSomeBy( iterator(), 3, true ); // $ExpectError
    iterCuSomeBy( iterator(), 3, false ); // $ExpectError
    iterCuSomeBy( iterator(), 3, null ); // $ExpectError
    iterCuSomeBy( iterator(), 3, undefined ); // $ExpectError
    iterCuSomeBy( iterator(), 3, [] ); // $ExpectError
    iterCuSomeBy( iterator(), 3, {} ); // $ExpectError
    iterCuSomeBy( iterator(), 3, ( x: number ): number => x ); // $ExpectError
}

// The compiler throws an error if the function is provided insufficient arguments...
{
    iterCuSomeBy(); // $ExpectError
    iterCuSomeBy( iterator() ); // $ExpectError
    iterCuSomeBy( iterator(), 3 ); // $ExpectError
}



