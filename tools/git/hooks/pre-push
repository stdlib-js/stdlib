#!/usr/bin/env bash
#
# A git hook called by `git push` after it has checked the remote status, but before anything has been pushed. If this script exits with a non-zero status, nothing will be pushed.
#
# This hook is called with the following arguments:
#
# * `$1` - name of the remote to which the push is being done
# * `$2` - URL to which the push is being done
#
# If pushing without using a named remote, these arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to `stdin` in the form:
#
# ``` text
# <local ref> <local sha1> <remote ref> <remote sha1>
# ```


# VARIABLES #

remote="$1"
url="$2"

# Determine the current branch:
export GIT_CURRENT_BRANCH=$(git name-rev --name-only HEAD)


# FUNCTIONS #

# Defines an error handler.
#
# $1 - error status
on_error() {
	cleanup
	exit "$1"
}

# Runs clean-up tasks.
cleanup() {
	echo '' >&2
}

# Checks if commits exist to push, as `git push` will execute regardless of whether commits exist to push or not.
has_commits() {
	local commits

	echo 'Checking if remote branch exists...' >&2
	if git branch -r | grep "${GIT_CURRENT_BRANCH}" > /dev/null; then
		echo 'Remote branch exists.' >&2
		echo 'Checking for commits to push...' >&2
		commits=$(git log origin/"${GIT_CURRENT_BRANCH}".."${GIT_CURRENT_BRANCH}" --oneline --)
	else
		echo 'Remote branch does not exist.' >&2
		echo 'Checking for commits to push...' >&2
		commits=$(git log "${GIT_CURRENT_BRANCH}" --oneline --)
	fi
	if [[ -z "${commits}" ]]; then
		echo 'No commits to push.'
		return 1
	fi
	echo 'Found commits to push.'
	return 0
}

# Checks licenses.
check_licenses() {
	echo 'Checking licenses...' >&2
	make check-licenses-production > /dev/null 2>&1
	if [[ "$?" -ne 0 ]]; then
		echo 'Detected dependency licensing issues. Run `make check-licenses-production` to see failing dependency licenses.' >&2
		return 1
	fi
	echo 'No dependency licensing issues detected.' >&2
	return 0
}

# Runs tests.
run_tests() {
	echo 'Running tests...' >&2
	make test > /dev/null 2>&1
	if [[ "$?" -ne 0 ]]; then
		echo 'Tests failed. Run `make test` to see the failing tests.' >&2
		return 1
	fi
	echo 'Tests passed.' >&2
	return 0
}

# Main execution sequence.
main() {
	has_commits
	if [[ "$?" -ne 0 ]]; then
		on_error 1
	fi
	check_licenses
	if [[ "$?" -ne 0 ]]; then
		on_error 1
	fi
	# FIXME: re-enable once we have written tooling to support running only those tests involving affected packages.
	# run_tests
	# if [[ "$?" -ne 0 ]]; then
	# 	on_error 1
	# fi
	cleanup
	exit 0
}

# Run main:
main
