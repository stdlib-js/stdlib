#/
# @license Apache-2.0
#
# Copyright (c) 2021 The Stdlib Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#/

# Workflow name:
name: check_licenses

# Workflow triggers:
on: [pull_request]

# Global permissions:
permissions:
  # Allow read-only access to the repository contents:
  contents: read

# Workflow jobs:
jobs:

  # Define a job for checking that pull requests do not introduce dependencies which fail license requirements...
  check_licenses:

    # Define a display name:
    name: 'Check licenses'

    # Define the type of virtual host machine:
    runs-on: ubuntu-latest

    # Define environment variables:
    env:
      BUILD_TASK: 'check_licenses'
      GITHUB: 'true'
      LOG_DIR: "${{ github.workspace }}/tmp/var/log"
      LOG_FILE_BUILD_TASK: "${{ github.workspace }}/tmp/var/log/check_licenses.log"
      LOG_NUM_LINES: 5000

    # Set defaults:
    defaults:
      run:
        # Set the default shell to `bash`:
        shell: bash --noprofile --norc -eo pipefail {0}

    # Define the sequence of job steps...
    steps:

      # Checkout the repository:
      - name: 'Checkout repository'
        # Pin action to full length commit SHA
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          # Specify whether to remove untracked files before checking out the repository:
          clean: false

          # Limit clone depth to the most recent 100 commits:
          fetch-depth: 100

          # Specify whether to download Git-LFS files:
          lfs: false
        timeout-minutes: 10

      # Initialize log files:
      - name: 'Initialize log files'
        run: |
          mkdir -p "${{ env.LOG_DIR }}"
          touch "${{ env.LOG_FILE_BUILD_TASK }}"
        timeout-minutes: 2

      # Install Node.js:
      - name: 'Install Node.js'
        # Pin action to full length commit SHA
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: '20' # 'lts/*'
        timeout-minutes: 5

      # Print debug info:
      - name: 'Print debug info'
        run: |
          echo 'PATH:'
          echo $PATH
          echo ''
          echo 'Git:'
          git --version
          echo ''
          echo 'Node.js:'
          file $(which node)
          node --version
          node -p 'process.platform + "@" + process.arch'
          echo ''
          echo 'npm:'
          npm --version
          npm config get registry
        timeout-minutes: 2

      # Perform install sequence (accounting for possible network failures, etc, when installing node module dependencies):
      - name: 'Perform install sequence'
        run: |
          make install-node-modules || make install-node-modules || make install-node-modules
        timeout-minutes: 30

      # Run the build task:
      - name: 'Run build task'
        run: |
          . "$GITHUB_WORKSPACE/.github/workflows/scripts/task_runner" "${{ env.BUILD_TASK }}" "${{ env.LOG_FILE_BUILD_TASK }}"
        timeout-minutes: 360

      # View the log file if the previous step fails:
      - name: 'View log file'
        if: failure()
        run: |
          echo "Printing the last ${{ env.LOG_NUM_LINES }} lines of log output..."
          tail -${{ env.LOG_NUM_LINES }} "${{ env.LOG_FILE_BUILD_TASK }}"
        timeout-minutes: 5

      # Upload the log file:
      - name: 'Upload log file'
        # Pin action to full length commit SHA
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        if: always()
        with:
          # Define a name for the uploaded artifact:
          name: ${{ env.BUILD_TASK }}_log

          # Specify the path to the file to upload:
          path: ${{ env.LOG_FILE_BUILD_TASK }}

          # Specify the number of days to retain the artifact (default is 90 days):
          retention-days: 14
        timeout-minutes: 10
