#/
# @license Apache-2.0
#
# Copyright (c) 2021 The Stdlib Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#/

# Workflow name:
name: standalone_publish

# Workflow triggers:
on:
  # Allow the workflow to be manually run:
  workflow_dispatch:
    inputs:
      release-type:
        type: choice
        description: 'Type of release to create'
        default: 'none'
        options:
        - none
        - patch
        - minor
        - major
      dry-run:
        type: boolean
        description: 'Skip uploading packages (dry run):'
        default: false
      start-index:
        type: number
        description: 'Index of first package to publish'
        default: 0
      end-index:
        type: number
        description: 'Index of last package to publish'
        default: 9999

# Workflow concurrency group:
concurrency:

  # Specify a group name:
  group: ${{ github.workflow }}

  # Specify whether to cancel any currently running workflow in the same concurrency group:
  cancel-in-progress: false

# Global permissions:
permissions:
  # Allow read-only access to the repository contents:
  contents: read

# Workflow jobs:
jobs:

  # Define a job for publishing standalone packages...
  publish:

    # Define a display name:
    name: 'Publish'

    # Define the type of virtual host machine:
    runs-on: ubuntu-latest

    # Define the sequence of job steps...
    steps:

      # Checkout the repository:
      - name: 'Checkout repository'
        # Pin action to full length commit SHA
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4.1.6
        with:
          # Specify whether to remove untracked files before checking out the repository:
          clean: false

          # Limit clone depth to the most recent commit:
          fetch-depth: 1

          # Specify whether to download Git-LFS files:
          lfs: false
        timeout-minutes: 10

      # Install Node.js:
      - name: 'Install Node.js'
        # Pin action to full length commit SHA
        uses: actions/setup-node@60edb5dd545a775178f52524783378180af0d1f8 # v4.0.2
        with:
          node-version: '16' # 'lts/*'
        timeout-minutes: 5

      # Install dependencies (accounting for possible network failures, etc, when installing node module dependencies):
      - name: 'Install dependencies'
        run: |
          make install-node-modules || make install-node-modules || make install-node-modules
        timeout-minutes: 15

      # Publish standalone packages:
      - name: 'Publish packages'
        env:
          GITHUB_TOKEN: ${{ secrets.REPO_GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          # Save NPM_TOKEN to user's .npmrc:
          echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc

          node lib/node_modules/@stdlib/_tools/scripts/publish_packages.js --skip-toplevel --release-type=${{ github.event.inputs.release-type }} --start-index=${{ github.event.inputs.start-index }} --end-index=${{ github.event.inputs.end-index }} ${{ github.event.inputs.dry-run == 'true' && '--skip-upload ' || '' }}

      # Archive list of to be published packages:
      - name: 'Archive package list'
        # Pin action to full length commit SHA
        uses: actions/upload-artifact@65462800fd760344b1a7b4382951275a0abb4808 # v4.3.3
        with:
          name: ordered-pkg-list
          path: |
            /tmp/stdlib_ordered_pkg_list.json
            /tmp/stdlib_published_pkg_list.json

  # Define a job for sending notifications to Slack...
  slack:

    # Define a display name:
    name: 'Slack notification'

    # Define the type of virtual host machine:
    runs-on: 'ubuntu-latest'

    # Indicate that this job depends on the prior job finishing:
    needs: publish

    # Run this job regardless of the outcome of the prior job:
    if: always()

    # Set defaults:
    defaults:
      run:
        # Set the default shell to `bash`:
        shell: bash --noprofile --norc -eo pipefail {0}

    # Define the sequence of job steps...
    steps:

      # Resolve notification data:
      - name: 'Resolve notification data'
        run: |
          echo 'NOTIFICATION_STATUS=${{ needs.publish.result}}' >> $GITHUB_ENV
          if [[ "${{ needs.publish.result }}" = "success" ]]; then
            echo 'NOTIFICATION_TEXT=**standalone_publish** workflow succeeded' >> $GITHUB_ENV
            echo 'NOTIFICATION_AUTHOR_NAME=Success' >> $GITHUB_ENV
          elif [[ "${{ needs.publish.result }}" = "failure" ]]; then
            echo 'NOTIFICATION_TEXT=**standalone_publish** workflow failed' >> $GITHUB_ENV
            echo 'NOTIFICATION_AUTHOR_NAME=Failure' >> $GITHUB_ENV
          elif [[ "${{ needs.publish.result }}" = "cancelled" ]]; then
            echo 'NOTIFICATION_TEXT=**standalone_publish** workflow was canceled' >> $GITHUB_ENV
            echo 'NOTIFICATION_AUTHOR_NAME=Canceled' >> $GITHUB_ENV
          else
            exit 1
          fi
        timeout-minutes: 5

      # Send notification to Slack:
      - name: 'Send notification'
        # Pin action to full length commit SHA
        uses: 8398a7/action-slack@28ba43ae48961b90635b50953d216767a6bea486 # v3.16.2
        if: success()
        with:
          status: "${{ env.NOTIFICATION_STATUS }}"
          fields: repo,commit,message
          text: "${{ env.NOTIFICATION_TEXT }}"
          author_name: "${{ env.NOTIFICATION_AUTHOR_NAME }}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.REPO_SLACK_WEBHOOK_URL }}
        timeout-minutes: 5
