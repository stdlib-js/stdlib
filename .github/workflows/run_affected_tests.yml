#/
# @license Apache-2.0
#
# Copyright (c) 2022 The Stdlib Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#/

# Workflow name:
name: run_affected_tests

# Workflow triggers:
on:
  push:
    paths:
      # List paths for which changes should trigger this workflow:
      - 'lib/**/bin/**'
      - 'lib/**/data/**'
      - 'lib/**/etc/**'
      - 'lib/**/include/**'
      - 'lib/**/lib/**'
      - 'lib/**/src/**'
      - 'lib/**/test/**'

      - 'lib/**/*.gyp'
      - 'lib/**/*.gypi'
      - 'lib/**/manifest.json'

      - 'package.json'

      # List paths for which changes should *not* trigger this workflow:
      - '!lib/**/_tools/**'

# Workflow jobs:
jobs:

  # Define a job for running tests affected by changes to the repository...
  process:

    # Define a display name:
    name: 'Run affected tests'

    # Define the type of virtual host machine:
    runs-on: ubuntu-latest

    # Define the sequence of job steps...
    steps:
      # Checkout the repository:
      - name: 'Checkout repository'
        uses: actions/checkout@v3
        with:
          # Specify whether to remove untracked files before checking out the repository:
          clean: true

          # Limit clone depth to the last 25 commits:
          fetch-depth: 25

          # Specify whether to download Git-LFS files:
          lfs: false
        timeout-minutes: 10

      # Install Node.js:
      - name: 'Install Node.js'
        uses: actions/setup-node@v3
        with:
          node-version: '16' # 'lts/*'
        timeout-minutes: 5

      # Install dependencies (accounting for possible network failures, etc, when installing node module dependencies):
      - name: 'Install dependencies'
        run: |
          make install-node-modules || make install-node-modules || make install-node-modules
        timeout-minutes: 15

      # Initialize development environment:
      - name: 'Initialize development environment'
        run: |
          make init
        timeout-minutes: 5

      # Get list of changed directories:
      - name: 'Get list of changed directories'
        id: changed-directories
        uses: tj-actions/changed-files@v32
        with:
          separator: ' '
          dir_names: 'true'

      # Run JavaScript tests:
      - name: 'Run JavaScript tests'
        run: |
          all_changed="${{ steps.changed-directories.outputs.all_changed_files }}"

          # Find unique package directories:
          directories=$(echo "${all_changed}" | tr ' ' '\n' | sed -E 's/\/(bin|data|etc|include|lib|src|test)\/?$//' | uniq)

          # Extract package names from changed package directories (e.g., @stdlib/math/base/special/sin) by removing the leading 'lib/node_modules/':
          packages=$(echo "${directories}" | sed -E 's/^lib\/node_modules\///')

          # Find all package directories which `require()` one of the changed packages:
          required_by=""
          for package in ${packages}; do
            echo "Finding packages which depend on '${package}'..."
            dependents=$( dirname $(find lib/node_modules/@stdlib -type f -name '*.js' -print0 | xargs -0 grep -ol -E "require\( [']${package}['] \)") | sed -E 's/\/(bin|data|etc|include|lib|src|test)\/?$//' | sort -u)
            required_by="${required_by} ${dependents}"
          done

          # Concatenate the list of changed package directories and package directories which `require()` one of the changed packages:
          directories="${directories} ${required_by}"

          # Find all test files in package directories:
          files=$(find ${directories} -maxdepth 2 -wholename '**/test/test*.js' | grep -v '/fixtures/' | sort -u | tr '\n' ' ')

          # Exclude files residing in test fixtures directories:
          files=$(echo "${files}" | grep -v '/fixtures/')

          if [[ -n "${files}" ]]; then
            make test-javascript-files FILES="${files}"
          fi
        timeout-minutes: 15
